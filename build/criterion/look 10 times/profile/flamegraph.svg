<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1247"><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0802%" y="693" width="0.0802%" height="15" fill="rgb(211,135,41)" fg:x="1" fg:w="1"/><text x="0.3302%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0802%" y="677" width="0.0802%" height="15" fill="rgb(208,54,0)" fg:x="1" fg:w="1"/><text x="0.3302%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="0.0802%" y="661" width="0.0802%" height="15" fill="rgb(244,136,14)" fg:x="1" fg:w="1"/><text x="0.3302%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0802%" y="645" width="0.0802%" height="15" fill="rgb(241,56,14)" fg:x="1" fg:w="1"/><text x="0.3302%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0802%" y="629" width="0.0802%" height="15" fill="rgb(205,80,24)" fg:x="1" fg:w="1"/><text x="0.3302%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0802%" y="613" width="0.0802%" height="15" fill="rgb(220,57,4)" fg:x="1" fg:w="1"/><text x="0.3302%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0802%" y="597" width="0.0802%" height="15" fill="rgb(226,193,50)" fg:x="1" fg:w="1"/><text x="0.3302%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0802%" y="581" width="0.0802%" height="15" fill="rgb(231,168,22)" fg:x="1" fg:w="1"/><text x="0.3302%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0802%" y="565" width="0.0802%" height="15" fill="rgb(254,215,14)" fg:x="1" fg:w="1"/><text x="0.3302%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0802%" y="549" width="0.0802%" height="15" fill="rgb(211,115,16)" fg:x="1" fg:w="1"/><text x="0.3302%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0802%" y="533" width="0.0802%" height="15" fill="rgb(236,210,16)" fg:x="1" fg:w="1"/><text x="0.3302%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0802%" y="709" width="0.1604%" height="15" fill="rgb(221,94,12)" fg:x="1" fg:w="2"/><text x="0.3302%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::perform::StandardPerformer&gt;&gt; (1 samples, 0.08%)</title><rect x="0.1604%" y="693" width="0.0802%" height="15" fill="rgb(235,218,49)" fg:x="2" fg:w="1"/><text x="0.4104%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.2406%" y="645" width="0.0802%" height="15" fill="rgb(217,114,14)" fg:x="3" fg:w="1"/><text x="0.4906%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.2406%" y="629" width="0.0802%" height="15" fill="rgb(216,145,22)" fg:x="3" fg:w="1"/><text x="0.4906%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4010%" y="565" width="0.0802%" height="15" fill="rgb(217,112,39)" fg:x="5" fg:w="1"/><text x="0.6510%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="0.3208%" y="629" width="0.2406%" height="15" fill="rgb(225,85,32)" fg:x="4" fg:w="3"/><text x="0.5708%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="0.3208%" y="613" width="0.2406%" height="15" fill="rgb(245,209,47)" fg:x="4" fg:w="3"/><text x="0.5708%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="0.3208%" y="597" width="0.2406%" height="15" fill="rgb(218,220,15)" fg:x="4" fg:w="3"/><text x="0.5708%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="0.3208%" y="581" width="0.2406%" height="15" fill="rgb(222,202,31)" fg:x="4" fg:w="3"/><text x="0.5708%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.4812%" y="565" width="0.0802%" height="15" fill="rgb(243,203,4)" fg:x="6" fg:w="1"/><text x="0.7312%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4812%" y="549" width="0.0802%" height="15" fill="rgb(237,92,17)" fg:x="6" fg:w="1"/><text x="0.7312%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.4812%" y="533" width="0.0802%" height="15" fill="rgb(231,119,7)" fg:x="6" fg:w="1"/><text x="0.7312%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.4812%" y="517" width="0.0802%" height="15" fill="rgb(237,82,41)" fg:x="6" fg:w="1"/><text x="0.7312%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.6415%" y="549" width="0.0802%" height="15" fill="rgb(226,81,48)" fg:x="8" fg:w="1"/><text x="0.8915%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.6415%" y="533" width="0.0802%" height="15" fill="rgb(234,70,51)" fg:x="8" fg:w="1"/><text x="0.8915%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.6415%" y="517" width="0.0802%" height="15" fill="rgb(251,86,4)" fg:x="8" fg:w="1"/><text x="0.8915%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (7 samples, 0.56%)</title><rect x="0.2406%" y="661" width="0.5613%" height="15" fill="rgb(244,144,28)" fg:x="3" fg:w="7"/><text x="0.4906%" y="671.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.48%)</title><rect x="0.3208%" y="645" width="0.4812%" height="15" fill="rgb(232,161,39)" fg:x="4" fg:w="6"/><text x="0.5708%" y="655.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="0.5613%" y="629" width="0.2406%" height="15" fill="rgb(247,34,51)" fg:x="7" fg:w="3"/><text x="0.8113%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="0.5613%" y="613" width="0.2406%" height="15" fill="rgb(225,132,2)" fg:x="7" fg:w="3"/><text x="0.8113%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="0.5613%" y="597" width="0.2406%" height="15" fill="rgb(209,159,44)" fg:x="7" fg:w="3"/><text x="0.8113%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="0.5613%" y="581" width="0.2406%" height="15" fill="rgb(251,214,1)" fg:x="7" fg:w="3"/><text x="0.8113%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.6415%" y="565" width="0.1604%" height="15" fill="rgb(247,84,47)" fg:x="8" fg:w="2"/><text x="0.8915%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7217%" y="549" width="0.0802%" height="15" fill="rgb(240,111,43)" fg:x="9" fg:w="1"/><text x="0.9717%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7217%" y="533" width="0.0802%" height="15" fill="rgb(215,214,35)" fg:x="9" fg:w="1"/><text x="0.9717%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.7217%" y="517" width="0.0802%" height="15" fill="rgb(248,207,23)" fg:x="9" fg:w="1"/><text x="0.9717%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.7217%" y="501" width="0.0802%" height="15" fill="rgb(214,186,4)" fg:x="9" fg:w="1"/><text x="0.9717%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (8 samples, 0.64%)</title><rect x="0.2406%" y="677" width="0.6415%" height="15" fill="rgb(220,133,22)" fg:x="3" fg:w="8"/><text x="0.4906%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="0.8019%" y="661" width="0.0802%" height="15" fill="rgb(239,134,19)" fg:x="10" fg:w="1"/><text x="1.0519%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.8019%" y="645" width="0.0802%" height="15" fill="rgb(250,140,9)" fg:x="10" fg:w="1"/><text x="1.0519%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.8019%" y="629" width="0.0802%" height="15" fill="rgb(225,59,14)" fg:x="10" fg:w="1"/><text x="1.0519%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.8019%" y="613" width="0.0802%" height="15" fill="rgb(214,152,51)" fg:x="10" fg:w="1"/><text x="1.0519%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="0.8019%" y="597" width="0.0802%" height="15" fill="rgb(251,227,43)" fg:x="10" fg:w="1"/><text x="1.0519%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="0.8019%" y="581" width="0.0802%" height="15" fill="rgb(241,96,17)" fg:x="10" fg:w="1"/><text x="1.0519%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="0.8019%" y="565" width="0.0802%" height="15" fill="rgb(234,198,43)" fg:x="10" fg:w="1"/><text x="1.0519%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.8019%" y="549" width="0.0802%" height="15" fill="rgb(220,108,29)" fg:x="10" fg:w="1"/><text x="1.0519%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.8019%" y="533" width="0.0802%" height="15" fill="rgb(226,163,33)" fg:x="10" fg:w="1"/><text x="1.0519%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.8019%" y="517" width="0.0802%" height="15" fill="rgb(205,194,45)" fg:x="10" fg:w="1"/><text x="1.0519%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="0.8019%" y="501" width="0.0802%" height="15" fill="rgb(206,143,44)" fg:x="10" fg:w="1"/><text x="1.0519%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="0.8019%" y="485" width="0.0802%" height="15" fill="rgb(236,136,36)" fg:x="10" fg:w="1"/><text x="1.0519%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="0.8019%" y="469" width="0.0802%" height="15" fill="rgb(249,172,42)" fg:x="10" fg:w="1"/><text x="1.0519%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="0.8019%" y="453" width="0.0802%" height="15" fill="rgb(216,139,23)" fg:x="10" fg:w="1"/><text x="1.0519%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.8019%" y="437" width="0.0802%" height="15" fill="rgb(207,166,20)" fg:x="10" fg:w="1"/><text x="1.0519%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.8019%" y="421" width="0.0802%" height="15" fill="rgb(210,209,22)" fg:x="10" fg:w="1"/><text x="1.0519%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="0.8019%" y="405" width="0.0802%" height="15" fill="rgb(232,118,20)" fg:x="10" fg:w="1"/><text x="1.0519%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="0.8019%" y="389" width="0.0802%" height="15" fill="rgb(238,113,42)" fg:x="10" fg:w="1"/><text x="1.0519%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="0.8019%" y="373" width="0.0802%" height="15" fill="rgb(231,42,5)" fg:x="10" fg:w="1"/><text x="1.0519%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.8019%" y="357" width="0.0802%" height="15" fill="rgb(243,166,24)" fg:x="10" fg:w="1"/><text x="1.0519%" y="367.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.9623%" y="613" width="0.0802%" height="15" fill="rgb(237,226,12)" fg:x="12" fg:w="1"/><text x="1.2123%" y="623.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.9623%" y="597" width="0.0802%" height="15" fill="rgb(229,133,24)" fg:x="12" fg:w="1"/><text x="1.2123%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (14 samples, 1.12%)</title><rect x="0.2406%" y="709" width="1.1227%" height="15" fill="rgb(238,33,43)" fg:x="3" fg:w="14"/><text x="0.4906%" y="719.50"></text></g><g><title>engine::session::Session::new (14 samples, 1.12%)</title><rect x="0.2406%" y="693" width="1.1227%" height="15" fill="rgb(227,59,38)" fg:x="3" fg:w="14"/><text x="0.4906%" y="703.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.48%)</title><rect x="0.8821%" y="677" width="0.4812%" height="15" fill="rgb(230,97,0)" fg:x="11" fg:w="6"/><text x="1.1321%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.48%)</title><rect x="0.8821%" y="661" width="0.4812%" height="15" fill="rgb(250,173,50)" fg:x="11" fg:w="6"/><text x="1.1321%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="0.8821%" y="645" width="0.4812%" height="15" fill="rgb(240,15,50)" fg:x="11" fg:w="6"/><text x="1.1321%" y="655.50"></text></g><g><title>libloading::os::unix::Library::open (5 samples, 0.40%)</title><rect x="0.9623%" y="629" width="0.4010%" height="15" fill="rgb(221,93,22)" fg:x="12" fg:w="5"/><text x="1.2123%" y="639.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="1.0425%" y="613" width="0.3208%" height="15" fill="rgb(245,180,53)" fg:x="13" fg:w="4"/><text x="1.2925%" y="623.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="1.0425%" y="597" width="0.3208%" height="15" fill="rgb(231,88,51)" fg:x="13" fg:w="4"/><text x="1.2925%" y="607.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.0425%" y="581" width="0.3208%" height="15" fill="rgb(240,58,21)" fg:x="13" fg:w="4"/><text x="1.2925%" y="591.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.0425%" y="565" width="0.3208%" height="15" fill="rgb(237,21,10)" fg:x="13" fg:w="4"/><text x="1.2925%" y="575.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.0425%" y="549" width="0.3208%" height="15" fill="rgb(218,43,11)" fg:x="13" fg:w="4"/><text x="1.2925%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.3633%" y="661" width="0.0802%" height="15" fill="rgb(218,221,29)" fg:x="17" fg:w="1"/><text x="1.6133%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3633%" y="645" width="0.0802%" height="15" fill="rgb(214,118,42)" fg:x="17" fg:w="1"/><text x="1.6133%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="1.4435%" y="613" width="0.1604%" height="15" fill="rgb(251,200,26)" fg:x="18" fg:w="2"/><text x="1.6935%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="1.4435%" y="597" width="0.1604%" height="15" fill="rgb(237,101,39)" fg:x="18" fg:w="2"/><text x="1.6935%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.4435%" y="581" width="0.1604%" height="15" fill="rgb(251,117,11)" fg:x="18" fg:w="2"/><text x="1.6935%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.4435%" y="565" width="0.1604%" height="15" fill="rgb(216,223,23)" fg:x="18" fg:w="2"/><text x="1.6935%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.5237%" y="549" width="0.0802%" height="15" fill="rgb(251,54,12)" fg:x="19" fg:w="1"/><text x="1.7737%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.5237%" y="533" width="0.0802%" height="15" fill="rgb(254,176,54)" fg:x="19" fg:w="1"/><text x="1.7737%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.5237%" y="517" width="0.0802%" height="15" fill="rgb(210,32,8)" fg:x="19" fg:w="1"/><text x="1.7737%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.5237%" y="501" width="0.0802%" height="15" fill="rgb(235,52,38)" fg:x="19" fg:w="1"/><text x="1.7737%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="1.6038%" y="581" width="0.1604%" height="15" fill="rgb(231,4,44)" fg:x="20" fg:w="2"/><text x="1.8538%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.6038%" y="565" width="0.1604%" height="15" fill="rgb(249,2,32)" fg:x="20" fg:w="2"/><text x="1.8538%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.6038%" y="549" width="0.1604%" height="15" fill="rgb(224,65,26)" fg:x="20" fg:w="2"/><text x="1.8538%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.6840%" y="533" width="0.0802%" height="15" fill="rgb(250,73,40)" fg:x="21" fg:w="1"/><text x="1.9340%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.7642%" y="565" width="0.0802%" height="15" fill="rgb(253,177,16)" fg:x="22" fg:w="1"/><text x="2.0142%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.7642%" y="549" width="0.0802%" height="15" fill="rgb(217,32,34)" fg:x="22" fg:w="1"/><text x="2.0142%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="1.4435%" y="629" width="0.4812%" height="15" fill="rgb(212,7,10)" fg:x="18" fg:w="6"/><text x="1.6935%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.6038%" y="613" width="0.3208%" height="15" fill="rgb(245,89,8)" fg:x="20" fg:w="4"/><text x="1.8538%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.6038%" y="597" width="0.3208%" height="15" fill="rgb(237,16,53)" fg:x="20" fg:w="4"/><text x="1.8538%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.7642%" y="581" width="0.1604%" height="15" fill="rgb(250,204,30)" fg:x="22" fg:w="2"/><text x="2.0142%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8444%" y="565" width="0.0802%" height="15" fill="rgb(208,77,27)" fg:x="23" fg:w="1"/><text x="2.0944%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8444%" y="549" width="0.0802%" height="15" fill="rgb(250,204,28)" fg:x="23" fg:w="1"/><text x="2.0944%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8444%" y="533" width="0.0802%" height="15" fill="rgb(244,63,21)" fg:x="23" fg:w="1"/><text x="2.0944%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.9246%" y="629" width="0.0802%" height="15" fill="rgb(236,85,44)" fg:x="24" fg:w="1"/><text x="2.1746%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.9246%" y="613" width="0.0802%" height="15" fill="rgb(215,98,4)" fg:x="24" fg:w="1"/><text x="2.1746%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9246%" y="597" width="0.0802%" height="15" fill="rgb(235,38,11)" fg:x="24" fg:w="1"/><text x="2.1746%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0850%" y="581" width="0.0802%" height="15" fill="rgb(254,186,25)" fg:x="26" fg:w="1"/><text x="2.3350%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0850%" y="565" width="0.0802%" height="15" fill="rgb(225,55,31)" fg:x="26" fg:w="1"/><text x="2.3350%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.0850%" y="549" width="0.0802%" height="15" fill="rgb(211,15,21)" fg:x="26" fg:w="1"/><text x="2.3350%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="2.1652%" y="581" width="0.1604%" height="15" fill="rgb(215,187,41)" fg:x="27" fg:w="2"/><text x="2.4152%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.2454%" y="565" width="0.0802%" height="15" fill="rgb(248,69,32)" fg:x="28" fg:w="1"/><text x="2.4954%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2454%" y="549" width="0.0802%" height="15" fill="rgb(252,102,52)" fg:x="28" fg:w="1"/><text x="2.4954%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.3256%" y="533" width="0.0802%" height="15" fill="rgb(253,140,32)" fg:x="29" fg:w="1"/><text x="2.5756%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3256%" y="517" width="0.0802%" height="15" fill="rgb(216,56,42)" fg:x="29" fg:w="1"/><text x="2.5756%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.3256%" y="501" width="0.0802%" height="15" fill="rgb(216,184,14)" fg:x="29" fg:w="1"/><text x="2.5756%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3256%" y="485" width="0.0802%" height="15" fill="rgb(237,187,27)" fg:x="29" fg:w="1"/><text x="2.5756%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.4058%" y="517" width="0.0802%" height="15" fill="rgb(219,65,3)" fg:x="30" fg:w="1"/><text x="2.6558%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (14 samples, 1.12%)</title><rect x="1.4435%" y="661" width="1.1227%" height="15" fill="rgb(245,83,25)" fg:x="18" fg:w="14"/><text x="1.6935%" y="671.50"></text></g><g><title>engine::session::Session::check_for_changes (14 samples, 1.12%)</title><rect x="1.4435%" y="645" width="1.1227%" height="15" fill="rgb(214,205,45)" fg:x="18" fg:w="14"/><text x="1.6935%" y="655.50"></text></g><g><title>kernel::compare::any_entity_changes (7 samples, 0.56%)</title><rect x="2.0048%" y="629" width="0.5613%" height="15" fill="rgb(241,20,18)" fg:x="25" fg:w="7"/><text x="2.2548%" y="639.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="2.0850%" y="613" width="0.4812%" height="15" fill="rgb(232,163,23)" fg:x="26" fg:w="6"/><text x="2.3350%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="2.0850%" y="597" width="0.4812%" height="15" fill="rgb(214,5,46)" fg:x="26" fg:w="6"/><text x="2.3350%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="2.3256%" y="581" width="0.2406%" height="15" fill="rgb(229,78,17)" fg:x="29" fg:w="3"/><text x="2.5756%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="2.3256%" y="565" width="0.2406%" height="15" fill="rgb(248,89,10)" fg:x="29" fg:w="3"/><text x="2.5756%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="2.3256%" y="549" width="0.2406%" height="15" fill="rgb(248,54,15)" fg:x="29" fg:w="3"/><text x="2.5756%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.4058%" y="533" width="0.1604%" height="15" fill="rgb(223,116,6)" fg:x="30" fg:w="2"/><text x="2.6558%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4860%" y="517" width="0.0802%" height="15" fill="rgb(205,125,38)" fg:x="31" fg:w="1"/><text x="2.7360%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4860%" y="501" width="0.0802%" height="15" fill="rgb(251,78,38)" fg:x="31" fg:w="1"/><text x="2.7360%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4860%" y="485" width="0.0802%" height="15" fill="rgb(253,78,28)" fg:x="31" fg:w="1"/><text x="2.7360%" y="495.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.28%)</title><rect x="1.3633%" y="693" width="1.2831%" height="15" fill="rgb(209,120,3)" fg:x="17" fg:w="16"/><text x="1.6133%" y="703.50"></text></g><g><title>engine::session::Session::save_entity_changes (16 samples, 1.28%)</title><rect x="1.3633%" y="677" width="1.2831%" height="15" fill="rgb(238,229,9)" fg:x="17" fg:w="16"/><text x="1.6133%" y="687.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="2.5662%" y="661" width="0.0802%" height="15" fill="rgb(253,159,18)" fg:x="32" fg:w="1"/><text x="2.8162%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="2.5662%" y="645" width="0.0802%" height="15" fill="rgb(244,42,34)" fg:x="32" fg:w="1"/><text x="2.8162%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="2.5662%" y="629" width="0.0802%" height="15" fill="rgb(224,8,7)" fg:x="32" fg:w="1"/><text x="2.8162%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.5662%" y="613" width="0.0802%" height="15" fill="rgb(210,201,45)" fg:x="32" fg:w="1"/><text x="2.8162%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.5662%" y="597" width="0.0802%" height="15" fill="rgb(252,185,21)" fg:x="32" fg:w="1"/><text x="2.8162%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.5662%" y="581" width="0.0802%" height="15" fill="rgb(223,131,1)" fg:x="32" fg:w="1"/><text x="2.8162%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.5662%" y="565" width="0.0802%" height="15" fill="rgb(245,141,16)" fg:x="32" fg:w="1"/><text x="2.8162%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="2.5662%" y="549" width="0.0802%" height="15" fill="rgb(229,55,45)" fg:x="32" fg:w="1"/><text x="2.8162%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.5662%" y="533" width="0.0802%" height="15" fill="rgb(208,92,15)" fg:x="32" fg:w="1"/><text x="2.8162%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.5662%" y="517" width="0.0802%" height="15" fill="rgb(234,185,47)" fg:x="32" fg:w="1"/><text x="2.8162%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.5662%" y="501" width="0.0802%" height="15" fill="rgb(253,104,50)" fg:x="32" fg:w="1"/><text x="2.8162%" y="511.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="2.5662%" y="485" width="0.0802%" height="15" fill="rgb(205,70,7)" fg:x="32" fg:w="1"/><text x="2.8162%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.5662%" y="469" width="0.0802%" height="15" fill="rgb(240,178,43)" fg:x="32" fg:w="1"/><text x="2.8162%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.5662%" y="453" width="0.0802%" height="15" fill="rgb(214,112,2)" fg:x="32" fg:w="1"/><text x="2.8162%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.5662%" y="437" width="0.0802%" height="15" fill="rgb(206,46,17)" fg:x="32" fg:w="1"/><text x="2.8162%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.5662%" y="421" width="0.0802%" height="15" fill="rgb(225,220,16)" fg:x="32" fg:w="1"/><text x="2.8162%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="2.7265%" y="629" width="0.0802%" height="15" fill="rgb(238,65,40)" fg:x="34" fg:w="1"/><text x="2.9765%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="2.7265%" y="613" width="0.0802%" height="15" fill="rgb(230,151,21)" fg:x="34" fg:w="1"/><text x="2.9765%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8067%" y="597" width="0.0802%" height="15" fill="rgb(218,58,49)" fg:x="35" fg:w="1"/><text x="3.0567%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="2.6464%" y="693" width="0.3208%" height="15" fill="rgb(219,179,14)" fg:x="33" fg:w="4"/><text x="2.8964%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="2.7265%" y="677" width="0.2406%" height="15" fill="rgb(223,72,1)" fg:x="34" fg:w="3"/><text x="2.9765%" y="687.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (3 samples, 0.24%)</title><rect x="2.7265%" y="661" width="0.2406%" height="15" fill="rgb(238,126,10)" fg:x="34" fg:w="3"/><text x="2.9765%" y="671.50"></text></g><g><title>kernel::model::Entity::replace_scope (3 samples, 0.24%)</title><rect x="2.7265%" y="645" width="0.2406%" height="15" fill="rgb(224,206,38)" fg:x="34" fg:w="3"/><text x="2.9765%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8067%" y="629" width="0.1604%" height="15" fill="rgb(212,201,54)" fg:x="35" fg:w="2"/><text x="3.0567%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.8067%" y="613" width="0.1604%" height="15" fill="rgb(218,154,48)" fg:x="35" fg:w="2"/><text x="3.0567%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.8869%" y="597" width="0.0802%" height="15" fill="rgb(232,93,24)" fg:x="36" fg:w="1"/><text x="3.1369%" y="607.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8869%" y="581" width="0.0802%" height="15" fill="rgb(245,30,21)" fg:x="36" fg:w="1"/><text x="3.1369%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.8869%" y="565" width="0.0802%" height="15" fill="rgb(242,148,29)" fg:x="36" fg:w="1"/><text x="3.1369%" y="575.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="2.9671%" y="693" width="0.0802%" height="15" fill="rgb(244,153,54)" fg:x="37" fg:w="1"/><text x="3.2171%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="2.9671%" y="677" width="0.0802%" height="15" fill="rgb(252,87,22)" fg:x="37" fg:w="1"/><text x="3.2171%" y="687.50"></text></g><g><title>kernel::model::Props::set_property (1 samples, 0.08%)</title><rect x="2.9671%" y="661" width="0.0802%" height="15" fill="rgb(210,51,29)" fg:x="37" fg:w="1"/><text x="3.2171%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9671%" y="645" width="0.0802%" height="15" fill="rgb(242,136,47)" fg:x="37" fg:w="1"/><text x="3.2171%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.9671%" y="629" width="0.0802%" height="15" fill="rgb(238,68,4)" fg:x="37" fg:w="1"/><text x="3.2171%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="3.0473%" y="677" width="0.0802%" height="15" fill="rgb(242,161,30)" fg:x="38" fg:w="1"/><text x="3.2973%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.0473%" y="661" width="0.0802%" height="15" fill="rgb(218,58,44)" fg:x="38" fg:w="1"/><text x="3.2973%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="3.0473%" y="645" width="0.0802%" height="15" fill="rgb(252,125,32)" fg:x="38" fg:w="1"/><text x="3.2973%" y="655.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="3.0473%" y="629" width="0.0802%" height="15" fill="rgb(219,178,0)" fg:x="38" fg:w="1"/><text x="3.2973%" y="639.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="3.0473%" y="613" width="0.0802%" height="15" fill="rgb(213,152,7)" fg:x="38" fg:w="1"/><text x="3.2973%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.0473%" y="597" width="0.0802%" height="15" fill="rgb(249,109,34)" fg:x="38" fg:w="1"/><text x="3.2973%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.0473%" y="581" width="0.0802%" height="15" fill="rgb(232,96,21)" fg:x="38" fg:w="1"/><text x="3.2973%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="3.1275%" y="597" width="0.2406%" height="15" fill="rgb(228,27,39)" fg:x="39" fg:w="3"/><text x="3.3775%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="3.1275%" y="581" width="0.2406%" height="15" fill="rgb(211,182,52)" fg:x="39" fg:w="3"/><text x="3.3775%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="3.1275%" y="565" width="0.2406%" height="15" fill="rgb(234,178,38)" fg:x="39" fg:w="3"/><text x="3.3775%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="3.2077%" y="549" width="0.1604%" height="15" fill="rgb(221,111,3)" fg:x="40" fg:w="2"/><text x="3.4577%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.2879%" y="533" width="0.0802%" height="15" fill="rgb(228,175,21)" fg:x="41" fg:w="1"/><text x="3.5379%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="3.3681%" y="581" width="0.2406%" height="15" fill="rgb(228,174,43)" fg:x="42" fg:w="3"/><text x="3.6181%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="3.3681%" y="565" width="0.2406%" height="15" fill="rgb(211,191,0)" fg:x="42" fg:w="3"/><text x="3.6181%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.5285%" y="549" width="0.0802%" height="15" fill="rgb(253,117,3)" fg:x="44" fg:w="1"/><text x="3.7785%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.5285%" y="533" width="0.0802%" height="15" fill="rgb(241,127,19)" fg:x="44" fg:w="1"/><text x="3.7785%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.5285%" y="517" width="0.0802%" height="15" fill="rgb(218,103,12)" fg:x="44" fg:w="1"/><text x="3.7785%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.5285%" y="501" width="0.0802%" height="15" fill="rgb(236,214,43)" fg:x="44" fg:w="1"/><text x="3.7785%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.5285%" y="485" width="0.0802%" height="15" fill="rgb(244,144,19)" fg:x="44" fg:w="1"/><text x="3.7785%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="3.6087%" y="565" width="0.1604%" height="15" fill="rgb(246,188,10)" fg:x="45" fg:w="2"/><text x="3.8587%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.6087%" y="549" width="0.1604%" height="15" fill="rgb(212,193,33)" fg:x="45" fg:w="2"/><text x="3.8587%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6889%" y="533" width="0.0802%" height="15" fill="rgb(241,51,29)" fg:x="46" fg:w="1"/><text x="3.9389%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.6889%" y="517" width="0.0802%" height="15" fill="rgb(211,58,19)" fg:x="46" fg:w="1"/><text x="3.9389%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6889%" y="501" width="0.0802%" height="15" fill="rgb(229,111,26)" fg:x="46" fg:w="1"/><text x="3.9389%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6889%" y="485" width="0.0802%" height="15" fill="rgb(213,115,40)" fg:x="46" fg:w="1"/><text x="3.9389%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6889%" y="469" width="0.0802%" height="15" fill="rgb(209,56,44)" fg:x="46" fg:w="1"/><text x="3.9389%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.7690%" y="565" width="0.0802%" height="15" fill="rgb(230,108,32)" fg:x="47" fg:w="1"/><text x="4.0190%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="3.6087%" y="581" width="0.3208%" height="15" fill="rgb(216,165,31)" fg:x="45" fg:w="4"/><text x="3.8587%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.8492%" y="565" width="0.0802%" height="15" fill="rgb(218,122,21)" fg:x="48" fg:w="1"/><text x="4.0992%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="3.1275%" y="613" width="0.8821%" height="15" fill="rgb(223,224,47)" fg:x="39" fg:w="11"/><text x="3.3775%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="3.3681%" y="597" width="0.6415%" height="15" fill="rgb(238,102,44)" fg:x="42" fg:w="8"/><text x="3.6181%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9294%" y="581" width="0.0802%" height="15" fill="rgb(236,46,40)" fg:x="49" fg:w="1"/><text x="4.1794%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.9294%" y="565" width="0.0802%" height="15" fill="rgb(247,202,50)" fg:x="49" fg:w="1"/><text x="4.1794%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.9294%" y="549" width="0.0802%" height="15" fill="rgb(209,99,20)" fg:x="49" fg:w="1"/><text x="4.1794%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.9294%" y="533" width="0.0802%" height="15" fill="rgb(252,27,34)" fg:x="49" fg:w="1"/><text x="4.1794%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.9294%" y="517" width="0.0802%" height="15" fill="rgb(215,206,23)" fg:x="49" fg:w="1"/><text x="4.1794%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0096%" y="613" width="0.0802%" height="15" fill="rgb(212,135,36)" fg:x="50" fg:w="1"/><text x="4.2596%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.0096%" y="597" width="0.0802%" height="15" fill="rgb(240,189,1)" fg:x="50" fg:w="1"/><text x="4.2596%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0096%" y="581" width="0.0802%" height="15" fill="rgb(242,56,20)" fg:x="50" fg:w="1"/><text x="4.2596%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0096%" y="565" width="0.0802%" height="15" fill="rgb(247,132,33)" fg:x="50" fg:w="1"/><text x="4.2596%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.0096%" y="549" width="0.0802%" height="15" fill="rgb(208,149,11)" fg:x="50" fg:w="1"/><text x="4.2596%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0096%" y="533" width="0.0802%" height="15" fill="rgb(211,33,11)" fg:x="50" fg:w="1"/><text x="4.2596%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1700%" y="565" width="0.0802%" height="15" fill="rgb(221,29,38)" fg:x="52" fg:w="1"/><text x="4.4200%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1700%" y="549" width="0.0802%" height="15" fill="rgb(206,182,49)" fg:x="52" fg:w="1"/><text x="4.4200%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1700%" y="533" width="0.0802%" height="15" fill="rgb(216,140,1)" fg:x="52" fg:w="1"/><text x="4.4200%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="4.2502%" y="565" width="0.0802%" height="15" fill="rgb(232,57,40)" fg:x="53" fg:w="1"/><text x="4.5002%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.2502%" y="549" width="0.0802%" height="15" fill="rgb(224,186,18)" fg:x="53" fg:w="1"/><text x="4.5002%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.2502%" y="533" width="0.0802%" height="15" fill="rgb(215,121,11)" fg:x="53" fg:w="1"/><text x="4.5002%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3304%" y="565" width="0.0802%" height="15" fill="rgb(245,147,10)" fg:x="54" fg:w="1"/><text x="4.5804%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.3304%" y="549" width="0.0802%" height="15" fill="rgb(238,153,13)" fg:x="54" fg:w="1"/><text x="4.5804%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="4.3304%" y="533" width="0.0802%" height="15" fill="rgb(233,108,0)" fg:x="54" fg:w="1"/><text x="4.5804%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4106%" y="549" width="0.0802%" height="15" fill="rgb(212,157,17)" fg:x="55" fg:w="1"/><text x="4.6606%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.6512%" y="517" width="0.0802%" height="15" fill="rgb(225,213,38)" fg:x="58" fg:w="1"/><text x="4.9012%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.6512%" y="501" width="0.0802%" height="15" fill="rgb(248,16,11)" fg:x="58" fg:w="1"/><text x="4.9012%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="4.6512%" y="485" width="0.0802%" height="15" fill="rgb(241,33,4)" fg:x="58" fg:w="1"/><text x="4.9012%" y="495.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.68%)</title><rect x="3.1275%" y="677" width="1.6840%" height="15" fill="rgb(222,26,43)" fg:x="39" fg:w="21"/><text x="3.3775%" y="687.50"></text></g><g><title>engine::session::Session::save_entity_changes (21 samples, 1.68%)</title><rect x="3.1275%" y="661" width="1.6840%" height="15" fill="rgb(243,29,36)" fg:x="39" fg:w="21"/><text x="3.3775%" y="671.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (21 samples, 1.68%)</title><rect x="3.1275%" y="645" width="1.6840%" height="15" fill="rgb(241,9,27)" fg:x="39" fg:w="21"/><text x="3.3775%" y="655.50"></text></g><g><title>engine::session::Session::check_for_changes (21 samples, 1.68%)</title><rect x="3.1275%" y="629" width="1.6840%" height="15" fill="rgb(205,117,26)" fg:x="39" fg:w="21"/><text x="3.3775%" y="639.50"></text></g><g><title>kernel::compare::any_entity_changes (9 samples, 0.72%)</title><rect x="4.0898%" y="613" width="0.7217%" height="15" fill="rgb(209,80,39)" fg:x="51" fg:w="9"/><text x="4.3398%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="4.0898%" y="597" width="0.7217%" height="15" fill="rgb(239,155,6)" fg:x="51" fg:w="9"/><text x="4.3398%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="4.0898%" y="581" width="0.7217%" height="15" fill="rgb(212,104,12)" fg:x="51" fg:w="9"/><text x="4.3398%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="4.4106%" y="565" width="0.4010%" height="15" fill="rgb(234,204,3)" fg:x="55" fg:w="5"/><text x="4.6606%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (4 samples, 0.32%)</title><rect x="4.4908%" y="549" width="0.3208%" height="15" fill="rgb(251,218,7)" fg:x="56" fg:w="4"/><text x="4.7408%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="4.5710%" y="533" width="0.2406%" height="15" fill="rgb(221,81,32)" fg:x="57" fg:w="3"/><text x="4.8210%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7314%" y="517" width="0.0802%" height="15" fill="rgb(214,152,26)" fg:x="59" fg:w="1"/><text x="4.9814%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.7314%" y="501" width="0.0802%" height="15" fill="rgb(223,22,3)" fg:x="59" fg:w="1"/><text x="4.9814%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7314%" y="485" width="0.0802%" height="15" fill="rgb(207,174,7)" fg:x="59" fg:w="1"/><text x="4.9814%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7314%" y="469" width="0.0802%" height="15" fill="rgb(224,19,52)" fg:x="59" fg:w="1"/><text x="4.9814%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="4.8115%" y="677" width="0.0802%" height="15" fill="rgb(228,24,14)" fg:x="60" fg:w="1"/><text x="5.0615%" y="687.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="4.8115%" y="661" width="0.0802%" height="15" fill="rgb(230,153,43)" fg:x="60" fg:w="1"/><text x="5.0615%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="4.8115%" y="645" width="0.0802%" height="15" fill="rgb(231,106,12)" fg:x="60" fg:w="1"/><text x="5.0615%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="4.8115%" y="629" width="0.0802%" height="15" fill="rgb(215,92,2)" fg:x="60" fg:w="1"/><text x="5.0615%" y="639.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="4.8917%" y="677" width="0.3208%" height="15" fill="rgb(249,143,25)" fg:x="61" fg:w="4"/><text x="5.1417%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="4.8917%" y="661" width="0.3208%" height="15" fill="rgb(252,7,35)" fg:x="61" fg:w="4"/><text x="5.1417%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="4.8917%" y="645" width="0.3208%" height="15" fill="rgb(216,69,40)" fg:x="61" fg:w="4"/><text x="5.1417%" y="655.50"></text></g><g><title>engine::internal::EntityMap::add_entity (4 samples, 0.32%)</title><rect x="4.8917%" y="629" width="0.3208%" height="15" fill="rgb(240,36,33)" fg:x="61" fg:w="4"/><text x="5.1417%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.32%)</title><rect x="4.8917%" y="613" width="0.3208%" height="15" fill="rgb(231,128,14)" fg:x="61" fg:w="4"/><text x="5.1417%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.32%)</title><rect x="4.8917%" y="597" width="0.3208%" height="15" fill="rgb(245,143,14)" fg:x="61" fg:w="4"/><text x="5.1417%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.32%)</title><rect x="4.8917%" y="581" width="0.3208%" height="15" fill="rgb(222,130,28)" fg:x="61" fg:w="4"/><text x="5.1417%" y="591.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="4.8917%" y="565" width="0.3208%" height="15" fill="rgb(212,10,48)" fg:x="61" fg:w="4"/><text x="5.1417%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="5.2125%" y="677" width="0.0802%" height="15" fill="rgb(254,118,45)" fg:x="65" fg:w="1"/><text x="5.4625%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.2125%" y="661" width="0.0802%" height="15" fill="rgb(228,6,45)" fg:x="65" fg:w="1"/><text x="5.4625%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="5.2125%" y="645" width="0.0802%" height="15" fill="rgb(241,18,35)" fg:x="65" fg:w="1"/><text x="5.4625%" y="655.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="5.2927%" y="677" width="0.1604%" height="15" fill="rgb(227,214,53)" fg:x="66" fg:w="2"/><text x="5.5427%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="5.2927%" y="661" width="0.1604%" height="15" fill="rgb(224,107,51)" fg:x="66" fg:w="2"/><text x="5.5427%" y="671.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="5.2927%" y="645" width="0.1604%" height="15" fill="rgb(248,60,28)" fg:x="66" fg:w="2"/><text x="5.5427%" y="655.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="5.2927%" y="629" width="0.1604%" height="15" fill="rgb(249,101,23)" fg:x="66" fg:w="2"/><text x="5.5427%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3729%" y="613" width="0.0802%" height="15" fill="rgb(228,51,19)" fg:x="67" fg:w="1"/><text x="5.6229%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.3729%" y="597" width="0.0802%" height="15" fill="rgb(213,20,6)" fg:x="67" fg:w="1"/><text x="5.6229%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.3729%" y="581" width="0.0802%" height="15" fill="rgb(212,124,10)" fg:x="67" fg:w="1"/><text x="5.6229%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3729%" y="565" width="0.0802%" height="15" fill="rgb(248,3,40)" fg:x="67" fg:w="1"/><text x="5.6229%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.3729%" y="549" width="0.0802%" height="15" fill="rgb(223,178,23)" fg:x="67" fg:w="1"/><text x="5.6229%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3729%" y="533" width="0.0802%" height="15" fill="rgb(240,132,45)" fg:x="67" fg:w="1"/><text x="5.6229%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::users::model::Usernames&gt;&gt; (1 samples, 0.08%)</title><rect x="5.4531%" y="645" width="0.0802%" height="15" fill="rgb(245,164,36)" fg:x="68" fg:w="1"/><text x="5.7031%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (32 samples, 2.57%)</title><rect x="3.0473%" y="693" width="2.5662%" height="15" fill="rgb(231,188,53)" fg:x="38" fg:w="32"/><text x="3.2973%" y="703.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="5.4531%" y="677" width="0.1604%" height="15" fill="rgb(237,198,39)" fg:x="68" fg:w="2"/><text x="5.7031%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="5.4531%" y="661" width="0.1604%" height="15" fill="rgb(223,120,35)" fg:x="68" fg:w="2"/><text x="5.7031%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="5.5333%" y="645" width="0.0802%" height="15" fill="rgb(253,107,49)" fg:x="69" fg:w="1"/><text x="5.7833%" y="655.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.5333%" y="629" width="0.0802%" height="15" fill="rgb(216,44,31)" fg:x="69" fg:w="1"/><text x="5.7833%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5333%" y="613" width="0.0802%" height="15" fill="rgb(253,87,21)" fg:x="69" fg:w="1"/><text x="5.7833%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.6135%" y="661" width="0.0802%" height="15" fill="rgb(226,18,2)" fg:x="70" fg:w="1"/><text x="5.8635%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="5.6135%" y="645" width="0.0802%" height="15" fill="rgb(216,8,46)" fg:x="70" fg:w="1"/><text x="5.8635%" y="655.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="5.6135%" y="629" width="0.0802%" height="15" fill="rgb(226,140,39)" fg:x="70" fg:w="1"/><text x="5.8635%" y="639.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="5.6135%" y="613" width="0.0802%" height="15" fill="rgb(221,194,54)" fg:x="70" fg:w="1"/><text x="5.8635%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.6135%" y="597" width="0.0802%" height="15" fill="rgb(213,92,11)" fg:x="70" fg:w="1"/><text x="5.8635%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="5.6135%" y="581" width="0.0802%" height="15" fill="rgb(229,162,46)" fg:x="70" fg:w="1"/><text x="5.8635%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.6937%" y="661" width="0.0802%" height="15" fill="rgb(214,111,36)" fg:x="71" fg:w="1"/><text x="5.9437%" y="671.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (56 samples, 4.49%)</title><rect x="1.3633%" y="709" width="4.4908%" height="15" fill="rgb(207,6,21)" fg:x="17" fg:w="56"/><text x="1.6133%" y="719.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="5.6135%" y="693" width="0.2406%" height="15" fill="rgb(213,127,38)" fg:x="70" fg:w="3"/><text x="5.8635%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="5.6135%" y="677" width="0.2406%" height="15" fill="rgb(238,118,32)" fg:x="70" fg:w="3"/><text x="5.8635%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="5.7739%" y="661" width="0.0802%" height="15" fill="rgb(240,139,39)" fg:x="72" fg:w="1"/><text x="6.0239%" y="671.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="5.7739%" y="645" width="0.0802%" height="15" fill="rgb(235,10,37)" fg:x="72" fg:w="1"/><text x="6.0239%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7739%" y="629" width="0.0802%" height="15" fill="rgb(249,171,38)" fg:x="72" fg:w="1"/><text x="6.0239%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="5.8540%" y="709" width="0.0802%" height="15" fill="rgb(242,144,32)" fg:x="73" fg:w="1"/><text x="6.1040%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.0144%" y="677" width="0.0802%" height="15" fill="rgb(217,117,21)" fg:x="75" fg:w="1"/><text x="6.2644%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="6.0946%" y="677" width="0.0802%" height="15" fill="rgb(249,87,1)" fg:x="76" fg:w="1"/><text x="6.3446%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0946%" y="661" width="0.0802%" height="15" fill="rgb(248,196,48)" fg:x="76" fg:w="1"/><text x="6.3446%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.1748%" y="677" width="0.0802%" height="15" fill="rgb(251,206,33)" fg:x="77" fg:w="1"/><text x="6.4248%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.1748%" y="661" width="0.0802%" height="15" fill="rgb(232,141,28)" fg:x="77" fg:w="1"/><text x="6.4248%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="6.1748%" y="645" width="0.0802%" height="15" fill="rgb(209,167,14)" fg:x="77" fg:w="1"/><text x="6.4248%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.1748%" y="629" width="0.0802%" height="15" fill="rgb(225,11,50)" fg:x="77" fg:w="1"/><text x="6.4248%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.1748%" y="613" width="0.0802%" height="15" fill="rgb(209,50,20)" fg:x="77" fg:w="1"/><text x="6.4248%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.1748%" y="597" width="0.0802%" height="15" fill="rgb(212,17,46)" fg:x="77" fg:w="1"/><text x="6.4248%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.1748%" y="581" width="0.0802%" height="15" fill="rgb(216,101,39)" fg:x="77" fg:w="1"/><text x="6.4248%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.1748%" y="565" width="0.0802%" height="15" fill="rgb(212,228,48)" fg:x="77" fg:w="1"/><text x="6.4248%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.1748%" y="549" width="0.0802%" height="15" fill="rgb(250,6,50)" fg:x="77" fg:w="1"/><text x="6.4248%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.1748%" y="533" width="0.0802%" height="15" fill="rgb(250,160,48)" fg:x="77" fg:w="1"/><text x="6.4248%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.1748%" y="517" width="0.0802%" height="15" fill="rgb(244,216,33)" fg:x="77" fg:w="1"/><text x="6.4248%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.1748%" y="501" width="0.0802%" height="15" fill="rgb(207,157,5)" fg:x="77" fg:w="1"/><text x="6.4248%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.1748%" y="485" width="0.0802%" height="15" fill="rgb(228,199,8)" fg:x="77" fg:w="1"/><text x="6.4248%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.1748%" y="469" width="0.0802%" height="15" fill="rgb(227,80,20)" fg:x="77" fg:w="1"/><text x="6.4248%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1748%" y="453" width="0.0802%" height="15" fill="rgb(222,9,33)" fg:x="77" fg:w="1"/><text x="6.4248%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="6.2550%" y="629" width="0.1604%" height="15" fill="rgb(239,44,28)" fg:x="78" fg:w="2"/><text x="6.5050%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3352%" y="613" width="0.0802%" height="15" fill="rgb(249,187,43)" fg:x="79" fg:w="1"/><text x="6.5852%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3352%" y="597" width="0.0802%" height="15" fill="rgb(216,141,28)" fg:x="79" fg:w="1"/><text x="6.5852%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.3352%" y="581" width="0.0802%" height="15" fill="rgb(230,154,53)" fg:x="79" fg:w="1"/><text x="6.5852%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.3352%" y="565" width="0.0802%" height="15" fill="rgb(227,82,4)" fg:x="79" fg:w="1"/><text x="6.5852%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.3352%" y="549" width="0.0802%" height="15" fill="rgb(220,107,16)" fg:x="79" fg:w="1"/><text x="6.5852%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.3352%" y="533" width="0.0802%" height="15" fill="rgb(207,187,2)" fg:x="79" fg:w="1"/><text x="6.5852%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.3352%" y="517" width="0.0802%" height="15" fill="rgb(210,162,52)" fg:x="79" fg:w="1"/><text x="6.5852%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.4154%" y="613" width="0.0802%" height="15" fill="rgb(217,216,49)" fg:x="80" fg:w="1"/><text x="6.6654%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4154%" y="597" width="0.0802%" height="15" fill="rgb(218,146,49)" fg:x="80" fg:w="1"/><text x="6.6654%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4154%" y="581" width="0.0802%" height="15" fill="rgb(216,55,40)" fg:x="80" fg:w="1"/><text x="6.6654%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.4154%" y="565" width="0.0802%" height="15" fill="rgb(208,196,21)" fg:x="80" fg:w="1"/><text x="6.6654%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.4956%" y="597" width="0.0802%" height="15" fill="rgb(242,117,42)" fg:x="81" fg:w="1"/><text x="6.7456%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4956%" y="581" width="0.0802%" height="15" fill="rgb(210,11,23)" fg:x="81" fg:w="1"/><text x="6.7456%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4956%" y="565" width="0.0802%" height="15" fill="rgb(217,110,2)" fg:x="81" fg:w="1"/><text x="6.7456%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.5758%" y="581" width="0.0802%" height="15" fill="rgb(229,77,54)" fg:x="82" fg:w="1"/><text x="6.8258%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5758%" y="565" width="0.0802%" height="15" fill="rgb(218,53,16)" fg:x="82" fg:w="1"/><text x="6.8258%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="6.4956%" y="613" width="0.3208%" height="15" fill="rgb(215,38,13)" fg:x="81" fg:w="4"/><text x="6.7456%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.5758%" y="597" width="0.2406%" height="15" fill="rgb(235,42,18)" fg:x="82" fg:w="3"/><text x="6.8258%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.6560%" y="581" width="0.1604%" height="15" fill="rgb(219,66,54)" fg:x="83" fg:w="2"/><text x="6.9060%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.7362%" y="565" width="0.0802%" height="15" fill="rgb(222,205,4)" fg:x="84" fg:w="1"/><text x="6.9862%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7362%" y="549" width="0.0802%" height="15" fill="rgb(227,213,46)" fg:x="84" fg:w="1"/><text x="6.9862%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.7362%" y="533" width="0.0802%" height="15" fill="rgb(250,145,42)" fg:x="84" fg:w="1"/><text x="6.9862%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.7362%" y="517" width="0.0802%" height="15" fill="rgb(219,15,2)" fg:x="84" fg:w="1"/><text x="6.9862%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="6.4154%" y="629" width="0.4812%" height="15" fill="rgb(231,181,52)" fg:x="80" fg:w="6"/><text x="6.6654%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.8164%" y="613" width="0.0802%" height="15" fill="rgb(235,1,42)" fg:x="85" fg:w="1"/><text x="7.0664%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.8164%" y="597" width="0.0802%" height="15" fill="rgb(249,88,27)" fg:x="85" fg:w="1"/><text x="7.0664%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.8164%" y="581" width="0.0802%" height="15" fill="rgb(235,145,16)" fg:x="85" fg:w="1"/><text x="7.0664%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="6.2550%" y="645" width="0.7217%" height="15" fill="rgb(237,114,19)" fg:x="78" fg:w="9"/><text x="6.5050%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.8966%" y="629" width="0.0802%" height="15" fill="rgb(238,51,50)" fg:x="86" fg:w="1"/><text x="7.1466%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.8966%" y="613" width="0.0802%" height="15" fill="rgb(205,194,25)" fg:x="86" fg:w="1"/><text x="7.1466%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.8966%" y="597" width="0.0802%" height="15" fill="rgb(215,203,17)" fg:x="86" fg:w="1"/><text x="7.1466%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.9767%" y="645" width="0.1604%" height="15" fill="rgb(233,112,49)" fg:x="87" fg:w="2"/><text x="7.2267%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="6.9767%" y="629" width="0.1604%" height="15" fill="rgb(241,130,26)" fg:x="87" fg:w="2"/><text x="7.2267%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0569%" y="613" width="0.0802%" height="15" fill="rgb(252,223,19)" fg:x="88" fg:w="1"/><text x="7.3069%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0569%" y="597" width="0.0802%" height="15" fill="rgb(211,95,25)" fg:x="88" fg:w="1"/><text x="7.3069%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.0569%" y="581" width="0.0802%" height="15" fill="rgb(251,182,27)" fg:x="88" fg:w="1"/><text x="7.3069%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1371%" y="597" width="0.0802%" height="15" fill="rgb(238,24,4)" fg:x="89" fg:w="1"/><text x="7.3871%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2173%" y="581" width="0.0802%" height="15" fill="rgb(224,220,25)" fg:x="90" fg:w="1"/><text x="7.4673%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.1371%" y="629" width="0.2406%" height="15" fill="rgb(239,133,26)" fg:x="89" fg:w="3"/><text x="7.3871%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="7.1371%" y="613" width="0.2406%" height="15" fill="rgb(211,94,48)" fg:x="89" fg:w="3"/><text x="7.3871%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.2173%" y="597" width="0.1604%" height="15" fill="rgb(239,87,6)" fg:x="90" fg:w="2"/><text x="7.4673%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2975%" y="581" width="0.0802%" height="15" fill="rgb(227,62,0)" fg:x="91" fg:w="1"/><text x="7.5475%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2975%" y="565" width="0.0802%" height="15" fill="rgb(211,226,4)" fg:x="91" fg:w="1"/><text x="7.5475%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2975%" y="549" width="0.0802%" height="15" fill="rgb(253,38,52)" fg:x="91" fg:w="1"/><text x="7.5475%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2975%" y="533" width="0.0802%" height="15" fill="rgb(229,126,40)" fg:x="91" fg:w="1"/><text x="7.5475%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2975%" y="517" width="0.0802%" height="15" fill="rgb(229,165,44)" fg:x="91" fg:w="1"/><text x="7.5475%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3777%" y="597" width="0.0802%" height="15" fill="rgb(247,95,47)" fg:x="92" fg:w="1"/><text x="7.6277%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3777%" y="581" width="0.0802%" height="15" fill="rgb(216,140,30)" fg:x="92" fg:w="1"/><text x="7.6277%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.4579%" y="597" width="0.0802%" height="15" fill="rgb(246,214,8)" fg:x="93" fg:w="1"/><text x="7.7079%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.4579%" y="581" width="0.0802%" height="15" fill="rgb(227,224,15)" fg:x="93" fg:w="1"/><text x="7.7079%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4579%" y="565" width="0.0802%" height="15" fill="rgb(233,175,4)" fg:x="93" fg:w="1"/><text x="7.7079%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4579%" y="549" width="0.0802%" height="15" fill="rgb(221,66,45)" fg:x="93" fg:w="1"/><text x="7.7079%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6183%" y="565" width="0.0802%" height="15" fill="rgb(221,178,18)" fg:x="95" fg:w="1"/><text x="7.8683%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.8589%" y="549" width="0.1604%" height="15" fill="rgb(213,81,29)" fg:x="98" fg:w="2"/><text x="8.1089%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.9391%" y="533" width="0.0802%" height="15" fill="rgb(220,89,49)" fg:x="99" fg:w="1"/><text x="8.1891%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9391%" y="517" width="0.0802%" height="15" fill="rgb(227,60,33)" fg:x="99" fg:w="1"/><text x="8.1891%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0192%" y="517" width="0.0802%" height="15" fill="rgb(205,113,12)" fg:x="100" fg:w="1"/><text x="8.2692%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0192%" y="501" width="0.0802%" height="15" fill="rgb(211,32,1)" fg:x="100" fg:w="1"/><text x="8.2692%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0192%" y="485" width="0.0802%" height="15" fill="rgb(246,2,12)" fg:x="100" fg:w="1"/><text x="8.2692%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="8.0994%" y="501" width="0.0802%" height="15" fill="rgb(243,37,27)" fg:x="101" fg:w="1"/><text x="8.3494%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="8.0192%" y="533" width="0.2406%" height="15" fill="rgb(248,211,31)" fg:x="100" fg:w="3"/><text x="8.2692%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0994%" y="517" width="0.1604%" height="15" fill="rgb(242,146,47)" fg:x="101" fg:w="2"/><text x="8.3494%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.1796%" y="501" width="0.0802%" height="15" fill="rgb(206,70,20)" fg:x="102" fg:w="1"/><text x="8.4296%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.1796%" y="485" width="0.0802%" height="15" fill="rgb(215,10,51)" fg:x="102" fg:w="1"/><text x="8.4296%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="8.1796%" y="469" width="0.0802%" height="15" fill="rgb(243,178,53)" fg:x="102" fg:w="1"/><text x="8.4296%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (10 samples, 0.80%)</title><rect x="7.5381%" y="597" width="0.8019%" height="15" fill="rgb(233,221,20)" fg:x="94" fg:w="10"/><text x="7.7881%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="7.6183%" y="581" width="0.7217%" height="15" fill="rgb(218,95,35)" fg:x="95" fg:w="9"/><text x="7.8683%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="7.6985%" y="565" width="0.6415%" height="15" fill="rgb(229,13,5)" fg:x="96" fg:w="8"/><text x="7.9485%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (4 samples, 0.32%)</title><rect x="8.0192%" y="549" width="0.3208%" height="15" fill="rgb(252,164,30)" fg:x="100" fg:w="4"/><text x="8.2692%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2598%" y="533" width="0.0802%" height="15" fill="rgb(232,68,36)" fg:x="103" fg:w="1"/><text x="8.5098%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="8.3400%" y="533" width="0.0802%" height="15" fill="rgb(219,59,54)" fg:x="104" fg:w="1"/><text x="8.5900%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3400%" y="517" width="0.0802%" height="15" fill="rgb(250,92,33)" fg:x="104" fg:w="1"/><text x="8.5900%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="8.4202%" y="517" width="0.0802%" height="15" fill="rgb(229,162,54)" fg:x="105" fg:w="1"/><text x="8.6702%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="8.3400%" y="549" width="0.2406%" height="15" fill="rgb(244,114,52)" fg:x="104" fg:w="3"/><text x="8.5900%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.4202%" y="533" width="0.1604%" height="15" fill="rgb(212,211,43)" fg:x="105" fg:w="2"/><text x="8.6702%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.5004%" y="517" width="0.0802%" height="15" fill="rgb(226,147,8)" fg:x="106" fg:w="1"/><text x="8.7504%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5004%" y="501" width="0.0802%" height="15" fill="rgb(226,23,13)" fg:x="106" fg:w="1"/><text x="8.7504%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5004%" y="485" width="0.0802%" height="15" fill="rgb(240,63,4)" fg:x="106" fg:w="1"/><text x="8.7504%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5004%" y="469" width="0.0802%" height="15" fill="rgb(221,1,32)" fg:x="106" fg:w="1"/><text x="8.7504%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="8.3400%" y="565" width="0.4010%" height="15" fill="rgb(242,117,10)" fg:x="104" fg:w="5"/><text x="8.5900%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.5806%" y="549" width="0.1604%" height="15" fill="rgb(249,172,44)" fg:x="107" fg:w="2"/><text x="8.8306%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.6608%" y="533" width="0.0802%" height="15" fill="rgb(244,46,45)" fg:x="108" fg:w="1"/><text x="8.9108%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6608%" y="517" width="0.0802%" height="15" fill="rgb(206,43,17)" fg:x="108" fg:w="1"/><text x="8.9108%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6608%" y="501" width="0.0802%" height="15" fill="rgb(239,218,39)" fg:x="108" fg:w="1"/><text x="8.9108%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (18 samples, 1.44%)</title><rect x="7.3777%" y="629" width="1.4435%" height="15" fill="rgb(208,169,54)" fg:x="92" fg:w="18"/><text x="7.6277%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.44%)</title><rect x="7.3777%" y="613" width="1.4435%" height="15" fill="rgb(247,25,42)" fg:x="92" fg:w="18"/><text x="7.6277%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="8.3400%" y="597" width="0.4812%" height="15" fill="rgb(226,23,31)" fg:x="104" fg:w="6"/><text x="8.5900%" y="607.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (6 samples, 0.48%)</title><rect x="8.3400%" y="581" width="0.4812%" height="15" fill="rgb(247,16,28)" fg:x="104" fg:w="6"/><text x="8.5900%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.7410%" y="565" width="0.0802%" height="15" fill="rgb(231,147,38)" fg:x="109" fg:w="1"/><text x="8.9910%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="8.9816%" y="453" width="0.0802%" height="15" fill="rgb(253,81,48)" fg:x="112" fg:w="1"/><text x="9.2316%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="8.9816%" y="469" width="0.1604%" height="15" fill="rgb(249,222,43)" fg:x="112" fg:w="2"/><text x="9.2316%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.0617%" y="453" width="0.0802%" height="15" fill="rgb(221,3,27)" fg:x="113" fg:w="1"/><text x="9.3117%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="8.9816%" y="501" width="0.2406%" height="15" fill="rgb(228,180,5)" fg:x="112" fg:w="3"/><text x="9.2316%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="8.9816%" y="485" width="0.2406%" height="15" fill="rgb(227,131,42)" fg:x="112" fg:w="3"/><text x="9.2316%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1419%" y="469" width="0.0802%" height="15" fill="rgb(212,3,39)" fg:x="114" fg:w="1"/><text x="9.3919%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1419%" y="453" width="0.0802%" height="15" fill="rgb(226,45,5)" fg:x="114" fg:w="1"/><text x="9.3919%" y="463.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="9.1419%" y="437" width="0.0802%" height="15" fill="rgb(215,167,45)" fg:x="114" fg:w="1"/><text x="9.3919%" y="447.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.1419%" y="421" width="0.0802%" height="15" fill="rgb(250,218,53)" fg:x="114" fg:w="1"/><text x="9.3919%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.2221%" y="501" width="0.0802%" height="15" fill="rgb(207,140,0)" fg:x="115" fg:w="1"/><text x="9.4721%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="9.2221%" y="485" width="0.0802%" height="15" fill="rgb(238,133,51)" fg:x="115" fg:w="1"/><text x="9.4721%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="8.9816%" y="533" width="0.4010%" height="15" fill="rgb(218,203,53)" fg:x="112" fg:w="5"/><text x="9.2316%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="8.9816%" y="517" width="0.4010%" height="15" fill="rgb(226,184,25)" fg:x="112" fg:w="5"/><text x="9.2316%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3023%" y="501" width="0.0802%" height="15" fill="rgb(231,121,21)" fg:x="116" fg:w="1"/><text x="9.5523%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3023%" y="485" width="0.0802%" height="15" fill="rgb(251,14,34)" fg:x="116" fg:w="1"/><text x="9.5523%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.3023%" y="469" width="0.0802%" height="15" fill="rgb(249,193,11)" fg:x="116" fg:w="1"/><text x="9.5523%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="8.9014%" y="565" width="0.5613%" height="15" fill="rgb(220,172,37)" fg:x="111" fg:w="7"/><text x="9.1514%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="8.9816%" y="549" width="0.4812%" height="15" fill="rgb(231,229,43)" fg:x="112" fg:w="6"/><text x="9.2316%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.3825%" y="533" width="0.0802%" height="15" fill="rgb(250,161,5)" fg:x="117" fg:w="1"/><text x="9.6325%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="9.3825%" y="517" width="0.0802%" height="15" fill="rgb(218,225,18)" fg:x="117" fg:w="1"/><text x="9.6325%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="9.3825%" y="501" width="0.0802%" height="15" fill="rgb(245,45,42)" fg:x="117" fg:w="1"/><text x="9.6325%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.72%)</title><rect x="8.8212%" y="629" width="0.7217%" height="15" fill="rgb(211,115,1)" fg:x="110" fg:w="9"/><text x="9.0712%" y="639.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.72%)</title><rect x="8.8212%" y="613" width="0.7217%" height="15" fill="rgb(248,133,52)" fg:x="110" fg:w="9"/><text x="9.0712%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="8.9014%" y="597" width="0.6415%" height="15" fill="rgb(238,100,21)" fg:x="111" fg:w="8"/><text x="9.1514%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="8.9014%" y="581" width="0.6415%" height="15" fill="rgb(247,144,11)" fg:x="111" fg:w="8"/><text x="9.1514%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.4627%" y="565" width="0.0802%" height="15" fill="rgb(206,164,16)" fg:x="118" fg:w="1"/><text x="9.7127%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4627%" y="549" width="0.0802%" height="15" fill="rgb(222,34,3)" fg:x="118" fg:w="1"/><text x="9.7127%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.5429%" y="613" width="0.1604%" height="15" fill="rgb(248,82,4)" fg:x="119" fg:w="2"/><text x="9.7929%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.5429%" y="597" width="0.1604%" height="15" fill="rgb(228,81,46)" fg:x="119" fg:w="2"/><text x="9.7929%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.6231%" y="581" width="0.0802%" height="15" fill="rgb(227,67,47)" fg:x="120" fg:w="1"/><text x="9.8731%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.6231%" y="565" width="0.0802%" height="15" fill="rgb(215,93,53)" fg:x="120" fg:w="1"/><text x="9.8731%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.6231%" y="549" width="0.0802%" height="15" fill="rgb(248,194,39)" fg:x="120" fg:w="1"/><text x="9.8731%" y="559.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (44 samples, 3.53%)</title><rect x="6.2550%" y="677" width="3.5285%" height="15" fill="rgb(215,5,19)" fg:x="78" fg:w="44"/><text x="6.5050%" y="687.50">eng..</text></g><g><title>engine::session::Session::check_for_changes (44 samples, 3.53%)</title><rect x="6.2550%" y="661" width="3.5285%" height="15" fill="rgb(226,215,51)" fg:x="78" fg:w="44"/><text x="6.5050%" y="671.50">eng..</text></g><g><title>kernel::compare::any_entity_changes (33 samples, 2.65%)</title><rect x="7.1371%" y="645" width="2.6464%" height="15" fill="rgb(225,56,26)" fg:x="89" fg:w="33"/><text x="7.3871%" y="655.50">ke..</text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="9.5429%" y="629" width="0.2406%" height="15" fill="rgb(222,75,29)" fg:x="119" fg:w="3"/><text x="9.7929%" y="639.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="9.7033%" y="613" width="0.0802%" height="15" fill="rgb(236,139,6)" fg:x="121" fg:w="1"/><text x="9.9533%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7033%" y="597" width="0.0802%" height="15" fill="rgb(223,137,36)" fg:x="121" fg:w="1"/><text x="9.9533%" y="607.50"></text></g><g><title>engine::session::Session::close (49 samples, 3.93%)</title><rect x="5.9342%" y="709" width="3.9294%" height="15" fill="rgb(226,99,2)" fg:x="74" fg:w="49"/><text x="6.1842%" y="719.50">engi..</text></g><g><title>engine::session::Session::save_entity_changes (48 samples, 3.85%)</title><rect x="6.0144%" y="693" width="3.8492%" height="15" fill="rgb(206,133,23)" fg:x="75" fg:w="48"/><text x="6.2644%" y="703.50">engi..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="9.7835%" y="677" width="0.0802%" height="15" fill="rgb(243,173,15)" fg:x="122" fg:w="1"/><text x="10.0335%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="9.7835%" y="661" width="0.0802%" height="15" fill="rgb(228,69,28)" fg:x="122" fg:w="1"/><text x="10.0335%" y="671.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="9.7835%" y="645" width="0.0802%" height="15" fill="rgb(212,51,22)" fg:x="122" fg:w="1"/><text x="10.0335%" y="655.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="9.7835%" y="629" width="0.0802%" height="15" fill="rgb(227,113,0)" fg:x="122" fg:w="1"/><text x="10.0335%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7835%" y="613" width="0.0802%" height="15" fill="rgb(252,84,27)" fg:x="122" fg:w="1"/><text x="10.0335%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7835%" y="597" width="0.0802%" height="15" fill="rgb(223,145,39)" fg:x="122" fg:w="1"/><text x="10.0335%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7835%" y="581" width="0.0802%" height="15" fill="rgb(239,219,30)" fg:x="122" fg:w="1"/><text x="10.0335%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.7835%" y="565" width="0.0802%" height="15" fill="rgb(224,196,39)" fg:x="122" fg:w="1"/><text x="10.0335%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.7835%" y="549" width="0.0802%" height="15" fill="rgb(205,35,43)" fg:x="122" fg:w="1"/><text x="10.0335%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.7835%" y="533" width="0.0802%" height="15" fill="rgb(228,201,21)" fg:x="122" fg:w="1"/><text x="10.0335%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.7835%" y="517" width="0.0802%" height="15" fill="rgb(237,118,16)" fg:x="122" fg:w="1"/><text x="10.0335%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.7835%" y="501" width="0.0802%" height="15" fill="rgb(241,17,19)" fg:x="122" fg:w="1"/><text x="10.0335%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.7835%" y="485" width="0.0802%" height="15" fill="rgb(214,10,25)" fg:x="122" fg:w="1"/><text x="10.0335%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.7835%" y="469" width="0.0802%" height="15" fill="rgb(238,37,29)" fg:x="122" fg:w="1"/><text x="10.0335%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.7835%" y="453" width="0.0802%" height="15" fill="rgb(253,83,25)" fg:x="122" fg:w="1"/><text x="10.0335%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.7835%" y="437" width="0.0802%" height="15" fill="rgb(234,192,12)" fg:x="122" fg:w="1"/><text x="10.0335%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7835%" y="421" width="0.0802%" height="15" fill="rgb(241,216,45)" fg:x="122" fg:w="1"/><text x="10.0335%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="9.8637%" y="661" width="0.0802%" height="15" fill="rgb(242,22,33)" fg:x="123" fg:w="1"/><text x="10.1137%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="9.8637%" y="645" width="0.0802%" height="15" fill="rgb(231,105,49)" fg:x="123" fg:w="1"/><text x="10.1137%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="9.9439%" y="629" width="0.1604%" height="15" fill="rgb(218,204,15)" fg:x="124" fg:w="2"/><text x="10.1939%" y="639.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="9.9439%" y="613" width="0.1604%" height="15" fill="rgb(235,138,41)" fg:x="124" fg:w="2"/><text x="10.1939%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="10.0241%" y="597" width="0.0802%" height="15" fill="rgb(246,0,9)" fg:x="125" fg:w="1"/><text x="10.2741%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="10.0241%" y="581" width="0.0802%" height="15" fill="rgb(210,74,4)" fg:x="125" fg:w="1"/><text x="10.2741%" y="591.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="10.1844%" y="565" width="0.0802%" height="15" fill="rgb(250,60,41)" fg:x="127" fg:w="1"/><text x="10.4344%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="10.1844%" y="549" width="0.0802%" height="15" fill="rgb(220,115,12)" fg:x="127" fg:w="1"/><text x="10.4344%" y="559.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="10.1844%" y="533" width="0.0802%" height="15" fill="rgb(237,100,13)" fg:x="127" fg:w="1"/><text x="10.4344%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="10.1844%" y="517" width="0.0802%" height="15" fill="rgb(213,55,26)" fg:x="127" fg:w="1"/><text x="10.4344%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="10.1844%" y="501" width="0.0802%" height="15" fill="rgb(216,17,4)" fg:x="127" fg:w="1"/><text x="10.4344%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.1844%" y="485" width="0.0802%" height="15" fill="rgb(220,153,47)" fg:x="127" fg:w="1"/><text x="10.4344%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="10.2646%" y="421" width="0.0802%" height="15" fill="rgb(215,131,9)" fg:x="128" fg:w="1"/><text x="10.5146%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="10.2646%" y="405" width="0.0802%" height="15" fill="rgb(233,46,42)" fg:x="128" fg:w="1"/><text x="10.5146%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.2646%" y="389" width="0.0802%" height="15" fill="rgb(226,86,7)" fg:x="128" fg:w="1"/><text x="10.5146%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="10.2646%" y="373" width="0.0802%" height="15" fill="rgb(239,226,21)" fg:x="128" fg:w="1"/><text x="10.5146%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.2646%" y="357" width="0.0802%" height="15" fill="rgb(244,137,22)" fg:x="128" fg:w="1"/><text x="10.5146%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2646%" y="341" width="0.0802%" height="15" fill="rgb(211,139,35)" fg:x="128" fg:w="1"/><text x="10.5146%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="10.1844%" y="581" width="0.2406%" height="15" fill="rgb(214,62,50)" fg:x="127" fg:w="3"/><text x="10.4344%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="10.2646%" y="565" width="0.1604%" height="15" fill="rgb(212,113,44)" fg:x="128" fg:w="2"/><text x="10.5146%" y="575.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="10.2646%" y="549" width="0.1604%" height="15" fill="rgb(226,150,43)" fg:x="128" fg:w="2"/><text x="10.5146%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="10.2646%" y="533" width="0.1604%" height="15" fill="rgb(250,71,37)" fg:x="128" fg:w="2"/><text x="10.5146%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.2646%" y="517" width="0.1604%" height="15" fill="rgb(219,76,19)" fg:x="128" fg:w="2"/><text x="10.5146%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.2646%" y="501" width="0.1604%" height="15" fill="rgb(250,39,11)" fg:x="128" fg:w="2"/><text x="10.5146%" y="511.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="10.2646%" y="485" width="0.1604%" height="15" fill="rgb(230,64,31)" fg:x="128" fg:w="2"/><text x="10.5146%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="10.2646%" y="469" width="0.1604%" height="15" fill="rgb(208,222,23)" fg:x="128" fg:w="2"/><text x="10.5146%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="10.2646%" y="453" width="0.1604%" height="15" fill="rgb(227,125,18)" fg:x="128" fg:w="2"/><text x="10.5146%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="10.2646%" y="437" width="0.1604%" height="15" fill="rgb(234,210,9)" fg:x="128" fg:w="2"/><text x="10.5146%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="10.3448%" y="421" width="0.0802%" height="15" fill="rgb(217,127,24)" fg:x="129" fg:w="1"/><text x="10.5948%" y="431.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="10.5854%" y="565" width="0.0802%" height="15" fill="rgb(239,141,48)" fg:x="132" fg:w="1"/><text x="10.8354%" y="575.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="10.5854%" y="549" width="0.0802%" height="15" fill="rgb(227,109,8)" fg:x="132" fg:w="1"/><text x="10.8354%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="10.5854%" y="533" width="0.0802%" height="15" fill="rgb(235,184,23)" fg:x="132" fg:w="1"/><text x="10.8354%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="10.7458%" y="485" width="0.2406%" height="15" fill="rgb(227,226,48)" fg:x="134" fg:w="3"/><text x="10.9958%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="10.8260%" y="469" width="0.1604%" height="15" fill="rgb(206,150,11)" fg:x="135" fg:w="2"/><text x="11.0760%" y="479.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="10.8260%" y="453" width="0.1604%" height="15" fill="rgb(254,2,33)" fg:x="135" fg:w="2"/><text x="11.0760%" y="463.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="10.9062%" y="437" width="0.0802%" height="15" fill="rgb(243,160,20)" fg:x="136" fg:w="1"/><text x="11.1562%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="10.6656%" y="549" width="0.4010%" height="15" fill="rgb(218,208,30)" fg:x="133" fg:w="5"/><text x="10.9156%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="10.6656%" y="533" width="0.4010%" height="15" fill="rgb(224,120,49)" fg:x="133" fg:w="5"/><text x="10.9156%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="10.6656%" y="517" width="0.4010%" height="15" fill="rgb(246,12,2)" fg:x="133" fg:w="5"/><text x="10.9156%" y="527.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="10.7458%" y="501" width="0.3208%" height="15" fill="rgb(236,117,3)" fg:x="134" fg:w="4"/><text x="10.9958%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="10.9864%" y="485" width="0.0802%" height="15" fill="rgb(216,128,52)" fg:x="137" fg:w="1"/><text x="11.2364%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="10.9864%" y="469" width="0.0802%" height="15" fill="rgb(246,145,19)" fg:x="137" fg:w="1"/><text x="11.2364%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="10.9864%" y="453" width="0.0802%" height="15" fill="rgb(222,11,46)" fg:x="137" fg:w="1"/><text x="11.2364%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.9864%" y="437" width="0.0802%" height="15" fill="rgb(245,82,36)" fg:x="137" fg:w="1"/><text x="11.2364%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.0666%" y="533" width="0.0802%" height="15" fill="rgb(250,73,51)" fg:x="138" fg:w="1"/><text x="11.3166%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="11.1468%" y="501" width="0.0802%" height="15" fill="rgb(221,189,23)" fg:x="139" fg:w="1"/><text x="11.3968%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.1468%" y="485" width="0.0802%" height="15" fill="rgb(210,33,7)" fg:x="139" fg:w="1"/><text x="11.3968%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="11.0666%" y="549" width="0.2406%" height="15" fill="rgb(210,107,22)" fg:x="138" fg:w="3"/><text x="11.3166%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="11.1468%" y="533" width="0.1604%" height="15" fill="rgb(222,116,37)" fg:x="139" fg:w="2"/><text x="11.3968%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="11.1468%" y="517" width="0.1604%" height="15" fill="rgb(254,17,48)" fg:x="139" fg:w="2"/><text x="11.3968%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="11.2269%" y="501" width="0.0802%" height="15" fill="rgb(224,36,32)" fg:x="140" fg:w="1"/><text x="11.4769%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2269%" y="485" width="0.0802%" height="15" fill="rgb(232,90,46)" fg:x="140" fg:w="1"/><text x="11.4769%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.3071%" y="501" width="0.0802%" height="15" fill="rgb(241,66,40)" fg:x="141" fg:w="1"/><text x="11.5571%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.3071%" y="485" width="0.0802%" height="15" fill="rgb(249,184,29)" fg:x="141" fg:w="1"/><text x="11.5571%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.20%)</title><rect x="11.5477%" y="485" width="1.2029%" height="15" fill="rgb(231,181,1)" fg:x="144" fg:w="15"/><text x="11.7977%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.20%)</title><rect x="11.5477%" y="469" width="1.2029%" height="15" fill="rgb(224,94,2)" fg:x="144" fg:w="15"/><text x="11.7977%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="12.5902%" y="453" width="0.1604%" height="15" fill="rgb(229,170,15)" fg:x="157" fg:w="2"/><text x="12.8402%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="12.7506%" y="469" width="0.0802%" height="15" fill="rgb(240,127,35)" fg:x="159" fg:w="1"/><text x="13.0006%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="12.7506%" y="453" width="0.0802%" height="15" fill="rgb(248,196,34)" fg:x="159" fg:w="1"/><text x="13.0006%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="12.7506%" y="485" width="0.1604%" height="15" fill="rgb(236,137,7)" fg:x="159" fg:w="2"/><text x="13.0006%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="12.8308%" y="469" width="0.0802%" height="15" fill="rgb(235,127,16)" fg:x="160" fg:w="1"/><text x="13.0808%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="12.8308%" y="453" width="0.0802%" height="15" fill="rgb(250,192,54)" fg:x="160" fg:w="1"/><text x="13.0808%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="12.8308%" y="437" width="0.0802%" height="15" fill="rgb(218,98,20)" fg:x="160" fg:w="1"/><text x="13.0808%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="12.8308%" y="421" width="0.0802%" height="15" fill="rgb(230,176,47)" fg:x="160" fg:w="1"/><text x="13.0808%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="12.9110%" y="469" width="0.4812%" height="15" fill="rgb(244,2,33)" fg:x="161" fg:w="6"/><text x="13.1610%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="13.3119%" y="453" width="0.0802%" height="15" fill="rgb(231,100,17)" fg:x="166" fg:w="1"/><text x="13.5619%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="12.9110%" y="485" width="0.5613%" height="15" fill="rgb(245,23,12)" fg:x="161" fg:w="7"/><text x="13.1610%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="13.3921%" y="469" width="0.0802%" height="15" fill="rgb(249,55,22)" fg:x="167" fg:w="1"/><text x="13.6421%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="13.4723%" y="485" width="0.0802%" height="15" fill="rgb(207,134,9)" fg:x="168" fg:w="1"/><text x="13.7223%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="13.4723%" y="469" width="0.0802%" height="15" fill="rgb(218,134,0)" fg:x="168" fg:w="1"/><text x="13.7223%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="13.4723%" y="453" width="0.0802%" height="15" fill="rgb(213,212,33)" fg:x="168" fg:w="1"/><text x="13.7223%" y="463.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="13.7129%" y="421" width="0.1604%" height="15" fill="rgb(252,106,18)" fg:x="171" fg:w="2"/><text x="13.9629%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="13.8733%" y="421" width="0.0802%" height="15" fill="rgb(208,126,42)" fg:x="173" fg:w="1"/><text x="14.1233%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="13.8733%" y="405" width="0.0802%" height="15" fill="rgb(246,175,29)" fg:x="173" fg:w="1"/><text x="14.1233%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.8733%" y="389" width="0.0802%" height="15" fill="rgb(215,13,50)" fg:x="173" fg:w="1"/><text x="14.1233%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.8733%" y="373" width="0.0802%" height="15" fill="rgb(216,172,15)" fg:x="173" fg:w="1"/><text x="14.1233%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="13.9535%" y="421" width="0.1604%" height="15" fill="rgb(212,103,13)" fg:x="174" fg:w="2"/><text x="14.2035%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.0337%" y="405" width="0.0802%" height="15" fill="rgb(231,171,36)" fg:x="175" fg:w="1"/><text x="14.2837%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.0337%" y="389" width="0.0802%" height="15" fill="rgb(250,123,20)" fg:x="175" fg:w="1"/><text x="14.2837%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.0337%" y="373" width="0.0802%" height="15" fill="rgb(212,53,50)" fg:x="175" fg:w="1"/><text x="14.2837%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="14.1941%" y="389" width="0.1604%" height="15" fill="rgb(243,54,12)" fg:x="177" fg:w="2"/><text x="14.4441%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.1941%" y="373" width="0.1604%" height="15" fill="rgb(234,101,34)" fg:x="177" fg:w="2"/><text x="14.4441%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.1941%" y="357" width="0.1604%" height="15" fill="rgb(254,67,22)" fg:x="177" fg:w="2"/><text x="14.4441%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="14.1139%" y="421" width="0.4010%" height="15" fill="rgb(250,35,47)" fg:x="176" fg:w="5"/><text x="14.3639%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="14.1941%" y="405" width="0.3208%" height="15" fill="rgb(226,126,38)" fg:x="177" fg:w="4"/><text x="14.4441%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="14.3545%" y="389" width="0.1604%" height="15" fill="rgb(216,138,53)" fg:x="179" fg:w="2"/><text x="14.6045%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="14.4346%" y="373" width="0.0802%" height="15" fill="rgb(246,199,43)" fg:x="180" fg:w="1"/><text x="14.6846%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="14.5148%" y="421" width="0.0802%" height="15" fill="rgb(232,125,11)" fg:x="181" fg:w="1"/><text x="14.7648%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="14.5148%" y="405" width="0.0802%" height="15" fill="rgb(218,219,45)" fg:x="181" fg:w="1"/><text x="14.7648%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.5148%" y="389" width="0.0802%" height="15" fill="rgb(216,102,54)" fg:x="181" fg:w="1"/><text x="14.7648%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.5148%" y="373" width="0.0802%" height="15" fill="rgb(250,228,7)" fg:x="181" fg:w="1"/><text x="14.7648%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.5950%" y="389" width="0.0802%" height="15" fill="rgb(226,125,25)" fg:x="182" fg:w="1"/><text x="14.8450%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (76 samples, 6.09%)</title><rect x="14.5950%" y="421" width="6.0946%" height="15" fill="rgb(224,165,27)" fg:x="182" fg:w="76"/><text x="14.8450%" y="431.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (76 samples, 6.09%)</title><rect x="14.5950%" y="405" width="6.0946%" height="15" fill="rgb(233,86,3)" fg:x="182" fg:w="76"/><text x="14.8450%" y="415.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (75 samples, 6.01%)</title><rect x="14.6752%" y="389" width="6.0144%" height="15" fill="rgb(228,116,20)" fg:x="183" fg:w="75"/><text x="14.9252%" y="399.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="20.6897%" y="421" width="0.4812%" height="15" fill="rgb(209,192,17)" fg:x="258" fg:w="6"/><text x="20.9397%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.0906%" y="405" width="0.0802%" height="15" fill="rgb(224,88,34)" fg:x="263" fg:w="1"/><text x="21.3406%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 7.78%)</title><rect x="13.5525%" y="469" width="7.7787%" height="15" fill="rgb(233,38,6)" fg:x="169" fg:w="97"/><text x="13.8025%" y="479.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (97 samples, 7.78%)</title><rect x="13.5525%" y="453" width="7.7787%" height="15" fill="rgb(212,59,30)" fg:x="169" fg:w="97"/><text x="13.8025%" y="463.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (97 samples, 7.78%)</title><rect x="13.5525%" y="437" width="7.7787%" height="15" fill="rgb(213,80,3)" fg:x="169" fg:w="97"/><text x="13.8025%" y="447.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="21.1708%" y="421" width="0.1604%" height="15" fill="rgb(251,178,7)" fg:x="264" fg:w="2"/><text x="21.4208%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="21.1708%" y="405" width="0.1604%" height="15" fill="rgb(213,154,26)" fg:x="264" fg:w="2"/><text x="21.4208%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="21.1708%" y="389" width="0.1604%" height="15" fill="rgb(238,165,49)" fg:x="264" fg:w="2"/><text x="21.4208%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="21.1708%" y="373" width="0.1604%" height="15" fill="rgb(248,91,46)" fg:x="264" fg:w="2"/><text x="21.4208%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.64%)</title><rect x="21.5718%" y="453" width="0.6415%" height="15" fill="rgb(244,21,52)" fg:x="269" fg:w="8"/><text x="21.8218%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="22.2133%" y="453" width="0.0802%" height="15" fill="rgb(247,122,20)" fg:x="277" fg:w="1"/><text x="22.4633%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.12%)</title><rect x="21.3312%" y="469" width="1.1227%" height="15" fill="rgb(218,27,9)" fg:x="266" fg:w="14"/><text x="21.5812%" y="479.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="22.2935%" y="453" width="0.1604%" height="15" fill="rgb(246,7,6)" fg:x="278" fg:w="2"/><text x="22.5435%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (112 samples, 8.98%)</title><rect x="13.5525%" y="485" width="8.9816%" height="15" fill="rgb(227,135,54)" fg:x="169" fg:w="112"/><text x="13.8025%" y="495.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="22.4539%" y="469" width="0.0802%" height="15" fill="rgb(247,14,11)" fg:x="280" fg:w="1"/><text x="22.7039%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="22.4539%" y="453" width="0.0802%" height="15" fill="rgb(206,149,34)" fg:x="280" fg:w="1"/><text x="22.7039%" y="463.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="22.4539%" y="437" width="0.0802%" height="15" fill="rgb(227,228,4)" fg:x="280" fg:w="1"/><text x="22.7039%" y="447.50"></text></g><g><title>regex_automata::meta::strategy::new (140 samples, 11.23%)</title><rect x="11.3873%" y="501" width="11.2269%" height="15" fill="rgb(238,218,28)" fg:x="142" fg:w="140"/><text x="11.6373%" y="511.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="22.5341%" y="485" width="0.0802%" height="15" fill="rgb(252,86,40)" fg:x="281" fg:w="1"/><text x="22.7841%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="22.5341%" y="469" width="0.0802%" height="15" fill="rgb(251,225,11)" fg:x="281" fg:w="1"/><text x="22.7841%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="22.7747%" y="453" width="0.0802%" height="15" fill="rgb(206,46,49)" fg:x="284" fg:w="1"/><text x="23.0247%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="22.7747%" y="437" width="0.0802%" height="15" fill="rgb(245,128,24)" fg:x="284" fg:w="1"/><text x="23.0247%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="22.7747%" y="421" width="0.0802%" height="15" fill="rgb(219,177,34)" fg:x="284" fg:w="1"/><text x="23.0247%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="22.8549%" y="453" width="0.0802%" height="15" fill="rgb(218,60,48)" fg:x="285" fg:w="1"/><text x="23.1049%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="22.8549%" y="437" width="0.0802%" height="15" fill="rgb(221,11,5)" fg:x="285" fg:w="1"/><text x="23.1049%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="22.6945%" y="469" width="0.5613%" height="15" fill="rgb(220,148,13)" fg:x="283" fg:w="7"/><text x="22.9445%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="22.9350%" y="453" width="0.3208%" height="15" fill="rgb(210,16,3)" fg:x="286" fg:w="4"/><text x="23.1850%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="22.9350%" y="437" width="0.3208%" height="15" fill="rgb(236,80,2)" fg:x="286" fg:w="4"/><text x="23.1850%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="22.9350%" y="421" width="0.3208%" height="15" fill="rgb(239,129,19)" fg:x="286" fg:w="4"/><text x="23.1850%" y="431.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="22.9350%" y="405" width="0.3208%" height="15" fill="rgb(220,106,35)" fg:x="286" fg:w="4"/><text x="23.1850%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="23.2558%" y="469" width="0.0802%" height="15" fill="rgb(252,139,45)" fg:x="290" fg:w="1"/><text x="23.5058%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="23.3360%" y="453" width="0.1604%" height="15" fill="rgb(229,8,36)" fg:x="291" fg:w="2"/><text x="23.5860%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.96%)</title><rect x="22.6143%" y="501" width="0.9623%" height="15" fill="rgb(230,126,33)" fg:x="282" fg:w="12"/><text x="22.8643%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.96%)</title><rect x="22.6143%" y="485" width="0.9623%" height="15" fill="rgb(239,140,21)" fg:x="282" fg:w="12"/><text x="22.8643%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="23.3360%" y="469" width="0.2406%" height="15" fill="rgb(254,104,9)" fg:x="291" fg:w="3"/><text x="23.5860%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.4964%" y="453" width="0.0802%" height="15" fill="rgb(239,52,14)" fg:x="293" fg:w="1"/><text x="23.7464%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="23.5766%" y="469" width="0.1604%" height="15" fill="rgb(208,227,44)" fg:x="294" fg:w="2"/><text x="23.8266%" y="479.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="23.5766%" y="453" width="0.1604%" height="15" fill="rgb(246,18,19)" fg:x="294" fg:w="2"/><text x="23.8266%" y="463.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="23.6568%" y="437" width="0.0802%" height="15" fill="rgb(235,228,25)" fg:x="295" fg:w="1"/><text x="23.9068%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="23.7370%" y="469" width="0.0802%" height="15" fill="rgb(240,156,20)" fg:x="296" fg:w="1"/><text x="23.9870%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.08%)</title><rect x="23.7370%" y="453" width="0.0802%" height="15" fill="rgb(224,8,20)" fg:x="296" fg:w="1"/><text x="23.9870%" y="463.50"></text></g><g><title>regex::regex::string::Regex::new (157 samples, 12.59%)</title><rect x="11.3071%" y="549" width="12.5902%" height="15" fill="rgb(214,12,52)" fg:x="141" fg:w="157"/><text x="11.5571%" y="559.50">regex::regex::strin..</text></g><g><title>regex::builders::Builder::build_one_string (157 samples, 12.59%)</title><rect x="11.3071%" y="533" width="12.5902%" height="15" fill="rgb(211,220,47)" fg:x="141" fg:w="157"/><text x="11.5571%" y="543.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (157 samples, 12.59%)</title><rect x="11.3071%" y="517" width="12.5902%" height="15" fill="rgb(250,173,5)" fg:x="141" fg:w="157"/><text x="11.5571%" y="527.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="23.5766%" y="501" width="0.3208%" height="15" fill="rgb(250,125,52)" fg:x="294" fg:w="4"/><text x="23.8266%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="23.5766%" y="485" width="0.3208%" height="15" fill="rgb(209,133,18)" fg:x="294" fg:w="4"/><text x="23.8266%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.8172%" y="469" width="0.0802%" height="15" fill="rgb(216,173,22)" fg:x="297" fg:w="1"/><text x="24.0672%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="24.2983%" y="469" width="0.1604%" height="15" fill="rgb(205,3,22)" fg:x="303" fg:w="2"/><text x="24.5483%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.3785%" y="453" width="0.0802%" height="15" fill="rgb(248,22,20)" fg:x="304" fg:w="1"/><text x="24.6285%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.4587%" y="469" width="0.0802%" height="15" fill="rgb(233,6,29)" fg:x="305" fg:w="1"/><text x="24.7087%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.4587%" y="453" width="0.0802%" height="15" fill="rgb(240,22,54)" fg:x="305" fg:w="1"/><text x="24.7087%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="24.5389%" y="469" width="0.2406%" height="15" fill="rgb(231,133,32)" fg:x="306" fg:w="3"/><text x="24.7889%" y="479.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (177 samples, 14.19%)</title><rect x="10.6656%" y="565" width="14.1941%" height="15" fill="rgb(248,193,4)" fg:x="133" fg:w="177"/><text x="10.9156%" y="575.50">indefinite::helper::He..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="23.8974%" y="549" width="0.9623%" height="15" fill="rgb(211,178,46)" fg:x="298" fg:w="12"/><text x="24.1474%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="23.8974%" y="533" width="0.9623%" height="15" fill="rgb(224,5,42)" fg:x="298" fg:w="12"/><text x="24.1474%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="23.8974%" y="517" width="0.9623%" height="15" fill="rgb(239,176,25)" fg:x="298" fg:w="12"/><text x="24.1474%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.96%)</title><rect x="23.8974%" y="501" width="0.9623%" height="15" fill="rgb(245,187,50)" fg:x="298" fg:w="12"/><text x="24.1474%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.96%)</title><rect x="23.8974%" y="485" width="0.9623%" height="15" fill="rgb(248,24,15)" fg:x="298" fg:w="12"/><text x="24.1474%" y="495.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="24.7795%" y="469" width="0.0802%" height="15" fill="rgb(205,166,13)" fg:x="309" fg:w="1"/><text x="25.0295%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.7795%" y="453" width="0.0802%" height="15" fill="rgb(208,114,23)" fg:x="309" fg:w="1"/><text x="25.0295%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.8597%" y="517" width="0.0802%" height="15" fill="rgb(239,127,18)" fg:x="310" fg:w="1"/><text x="25.1097%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.8597%" y="501" width="0.0802%" height="15" fill="rgb(219,154,28)" fg:x="310" fg:w="1"/><text x="25.1097%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.8597%" y="485" width="0.0802%" height="15" fill="rgb(225,157,23)" fg:x="310" fg:w="1"/><text x="25.1097%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="25.1002%" y="485" width="0.0802%" height="15" fill="rgb(219,8,6)" fg:x="313" fg:w="1"/><text x="25.3502%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="24.8597%" y="549" width="0.4010%" height="15" fill="rgb(212,47,6)" fg:x="310" fg:w="5"/><text x="25.1097%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="24.8597%" y="533" width="0.4010%" height="15" fill="rgb(224,190,4)" fg:x="310" fg:w="5"/><text x="25.1097%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="24.9399%" y="517" width="0.3208%" height="15" fill="rgb(239,183,29)" fg:x="311" fg:w="4"/><text x="25.1899%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="24.9399%" y="501" width="0.3208%" height="15" fill="rgb(213,57,7)" fg:x="311" fg:w="4"/><text x="25.1899%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.1804%" y="485" width="0.0802%" height="15" fill="rgb(216,148,1)" fg:x="314" fg:w="1"/><text x="25.4304%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="25.2606%" y="501" width="0.0802%" height="15" fill="rgb(236,182,29)" fg:x="315" fg:w="1"/><text x="25.5106%" y="511.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="25.2606%" y="485" width="0.0802%" height="15" fill="rgb(244,120,48)" fg:x="315" fg:w="1"/><text x="25.5106%" y="495.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="25.2606%" y="469" width="0.0802%" height="15" fill="rgb(206,71,34)" fg:x="315" fg:w="1"/><text x="25.5106%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="25.3408%" y="485" width="0.1604%" height="15" fill="rgb(242,32,6)" fg:x="316" fg:w="2"/><text x="25.5908%" y="495.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="25.5012%" y="485" width="0.0802%" height="15" fill="rgb(241,35,3)" fg:x="318" fg:w="1"/><text x="25.7512%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.40%)</title><rect x="25.2606%" y="533" width="0.4010%" height="15" fill="rgb(222,62,19)" fg:x="315" fg:w="5"/><text x="25.5106%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="25.2606%" y="517" width="0.4010%" height="15" fill="rgb(223,110,41)" fg:x="315" fg:w="5"/><text x="25.5106%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4 samples, 0.32%)</title><rect x="25.3408%" y="501" width="0.3208%" height="15" fill="rgb(208,224,4)" fg:x="316" fg:w="4"/><text x="25.5908%" y="511.50"></text></g><g><title>regex_automata::util::determinize::set_lookbehind_from_start (1 samples, 0.08%)</title><rect x="25.5814%" y="485" width="0.0802%" height="15" fill="rgb(241,137,19)" fg:x="319" fg:w="1"/><text x="25.8314%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.9824%" y="453" width="0.0802%" height="15" fill="rgb(244,24,17)" fg:x="324" fg:w="1"/><text x="26.2324%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.9824%" y="437" width="0.0802%" height="15" fill="rgb(245,178,49)" fg:x="324" fg:w="1"/><text x="26.2324%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.9824%" y="421" width="0.0802%" height="15" fill="rgb(219,160,38)" fg:x="324" fg:w="1"/><text x="26.2324%" y="431.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (23 samples, 1.84%)</title><rect x="25.2606%" y="549" width="1.8444%" height="15" fill="rgb(228,137,14)" fg:x="315" fg:w="23"/><text x="25.5106%" y="559.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (18 samples, 1.44%)</title><rect x="25.6616%" y="533" width="1.4435%" height="15" fill="rgb(237,134,11)" fg:x="320" fg:w="18"/><text x="25.9116%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (18 samples, 1.44%)</title><rect x="25.6616%" y="517" width="1.4435%" height="15" fill="rgb(211,126,44)" fg:x="320" fg:w="18"/><text x="25.9116%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (18 samples, 1.44%)</title><rect x="25.6616%" y="501" width="1.4435%" height="15" fill="rgb(226,171,33)" fg:x="320" fg:w="18"/><text x="25.9116%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.44%)</title><rect x="25.6616%" y="485" width="1.4435%" height="15" fill="rgb(253,99,13)" fg:x="320" fg:w="18"/><text x="25.9116%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (18 samples, 1.44%)</title><rect x="25.6616%" y="469" width="1.4435%" height="15" fill="rgb(244,48,7)" fg:x="320" fg:w="18"/><text x="25.9116%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (13 samples, 1.04%)</title><rect x="26.0626%" y="453" width="1.0425%" height="15" fill="rgb(244,217,54)" fg:x="325" fg:w="13"/><text x="26.3126%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1051%" y="469" width="0.0802%" height="15" fill="rgb(224,15,18)" fg:x="338" fg:w="1"/><text x="27.3551%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="27.1051%" y="501" width="0.1604%" height="15" fill="rgb(244,99,12)" fg:x="338" fg:w="2"/><text x="27.3551%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="27.1051%" y="485" width="0.1604%" height="15" fill="rgb(233,226,8)" fg:x="338" fg:w="2"/><text x="27.3551%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="27.1852%" y="469" width="0.0802%" height="15" fill="rgb(229,211,3)" fg:x="339" fg:w="1"/><text x="27.4352%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.1852%" y="453" width="0.0802%" height="15" fill="rgb(216,140,21)" fg:x="339" fg:w="1"/><text x="27.4352%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.3456%" y="469" width="0.0802%" height="15" fill="rgb(234,122,30)" fg:x="341" fg:w="1"/><text x="27.5956%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="27.5060%" y="437" width="0.0802%" height="15" fill="rgb(236,25,46)" fg:x="343" fg:w="1"/><text x="27.7560%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.5060%" y="421" width="0.0802%" height="15" fill="rgb(217,52,54)" fg:x="343" fg:w="1"/><text x="27.7560%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.5060%" y="405" width="0.0802%" height="15" fill="rgb(222,29,26)" fg:x="343" fg:w="1"/><text x="27.7560%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.5060%" y="389" width="0.0802%" height="15" fill="rgb(216,177,29)" fg:x="343" fg:w="1"/><text x="27.7560%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="27.2654%" y="501" width="0.4010%" height="15" fill="rgb(247,136,51)" fg:x="340" fg:w="5"/><text x="27.5154%" y="511.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="27.2654%" y="485" width="0.4010%" height="15" fill="rgb(231,47,47)" fg:x="340" fg:w="5"/><text x="27.5154%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="27.4258%" y="469" width="0.2406%" height="15" fill="rgb(211,192,36)" fg:x="342" fg:w="3"/><text x="27.6758%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="27.4258%" y="453" width="0.2406%" height="15" fill="rgb(229,156,32)" fg:x="342" fg:w="3"/><text x="27.6758%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.5862%" y="437" width="0.0802%" height="15" fill="rgb(248,213,20)" fg:x="344" fg:w="1"/><text x="27.8362%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="27.8268%" y="469" width="0.1604%" height="15" fill="rgb(217,64,7)" fg:x="347" fg:w="2"/><text x="28.0768%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (26 samples, 2.09%)</title><rect x="27.6664%" y="485" width="2.0850%" height="15" fill="rgb(232,142,8)" fg:x="345" fg:w="26"/><text x="27.9164%" y="495.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (22 samples, 1.76%)</title><rect x="27.9872%" y="469" width="1.7642%" height="15" fill="rgb(224,92,44)" fg:x="349" fg:w="22"/><text x="28.2372%" y="479.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="29.4306%" y="453" width="0.3208%" height="15" fill="rgb(214,169,17)" fg:x="367" fg:w="4"/><text x="29.6806%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="29.8316%" y="469" width="0.0802%" height="15" fill="rgb(210,59,37)" fg:x="372" fg:w="1"/><text x="30.0816%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="29.8316%" y="453" width="0.0802%" height="15" fill="rgb(214,116,48)" fg:x="372" fg:w="1"/><text x="30.0816%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8316%" y="437" width="0.0802%" height="15" fill="rgb(244,191,6)" fg:x="372" fg:w="1"/><text x="30.0816%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="30.5533%" y="453" width="0.0802%" height="15" fill="rgb(241,50,52)" fg:x="381" fg:w="1"/><text x="30.8033%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (10 samples, 0.80%)</title><rect x="29.9118%" y="469" width="0.8019%" height="15" fill="rgb(236,75,39)" fg:x="373" fg:w="10"/><text x="30.1618%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="30.6335%" y="453" width="0.0802%" height="15" fill="rgb(236,99,0)" fg:x="382" fg:w="1"/><text x="30.8835%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.6335%" y="437" width="0.0802%" height="15" fill="rgb(207,202,15)" fg:x="382" fg:w="1"/><text x="30.8835%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.6335%" y="421" width="0.0802%" height="15" fill="rgb(233,207,14)" fg:x="382" fg:w="1"/><text x="30.8835%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6335%" y="405" width="0.0802%" height="15" fill="rgb(226,27,51)" fg:x="382" fg:w="1"/><text x="30.8835%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (13 samples, 1.04%)</title><rect x="29.7514%" y="485" width="1.0425%" height="15" fill="rgb(206,104,42)" fg:x="371" fg:w="13"/><text x="30.0014%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="30.7137%" y="469" width="0.0802%" height="15" fill="rgb(212,225,4)" fg:x="383" fg:w="1"/><text x="30.9637%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="30.7137%" y="453" width="0.0802%" height="15" fill="rgb(233,96,42)" fg:x="383" fg:w="1"/><text x="30.9637%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.4354%" y="453" width="0.0802%" height="15" fill="rgb(229,21,32)" fg:x="392" fg:w="1"/><text x="31.6854%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.5156%" y="453" width="0.0802%" height="15" fill="rgb(226,216,24)" fg:x="393" fg:w="1"/><text x="31.7656%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.5156%" y="437" width="0.0802%" height="15" fill="rgb(221,163,17)" fg:x="393" fg:w="1"/><text x="31.7656%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.5156%" y="421" width="0.0802%" height="15" fill="rgb(216,216,42)" fg:x="393" fg:w="1"/><text x="31.7656%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="31.5958%" y="453" width="0.0802%" height="15" fill="rgb(240,118,7)" fg:x="394" fg:w="1"/><text x="31.8458%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.5958%" y="437" width="0.0802%" height="15" fill="rgb(221,67,37)" fg:x="394" fg:w="1"/><text x="31.8458%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.5958%" y="421" width="0.0802%" height="15" fill="rgb(241,32,44)" fg:x="394" fg:w="1"/><text x="31.8458%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.5958%" y="405" width="0.0802%" height="15" fill="rgb(235,204,43)" fg:x="394" fg:w="1"/><text x="31.8458%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.56%)</title><rect x="31.6760%" y="453" width="0.5613%" height="15" fill="rgb(213,116,10)" fg:x="395" fg:w="7"/><text x="31.9260%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="31.8364%" y="437" width="0.4010%" height="15" fill="rgb(239,15,48)" fg:x="397" fg:w="5"/><text x="32.0864%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.0770%" y="421" width="0.1604%" height="15" fill="rgb(207,123,36)" fg:x="400" fg:w="2"/><text x="32.3270%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.0770%" y="405" width="0.1604%" height="15" fill="rgb(209,103,30)" fg:x="400" fg:w="2"/><text x="32.3270%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.0770%" y="389" width="0.1604%" height="15" fill="rgb(238,100,19)" fg:x="400" fg:w="2"/><text x="32.3270%" y="399.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (13 samples, 1.04%)</title><rect x="32.2374%" y="437" width="1.0425%" height="15" fill="rgb(244,30,14)" fg:x="402" fg:w="13"/><text x="32.4874%" y="447.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (13 samples, 1.04%)</title><rect x="32.2374%" y="421" width="1.0425%" height="15" fill="rgb(249,174,6)" fg:x="402" fg:w="13"/><text x="32.4874%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (15 samples, 1.20%)</title><rect x="32.2374%" y="453" width="1.2029%" height="15" fill="rgb(235,213,41)" fg:x="402" fg:w="15"/><text x="32.4874%" y="463.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (2 samples, 0.16%)</title><rect x="33.2799%" y="437" width="0.1604%" height="15" fill="rgb(213,118,6)" fg:x="415" fg:w="2"/><text x="33.5299%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (35 samples, 2.81%)</title><rect x="30.7939%" y="485" width="2.8067%" height="15" fill="rgb(235,44,51)" fg:x="384" fg:w="35"/><text x="31.0439%" y="495.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (34 samples, 2.73%)</title><rect x="30.8741%" y="469" width="2.7265%" height="15" fill="rgb(217,9,53)" fg:x="385" fg:w="34"/><text x="31.1241%" y="479.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="33.4403%" y="453" width="0.1604%" height="15" fill="rgb(237,172,34)" fg:x="417" fg:w="2"/><text x="33.6903%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="33.6808%" y="437" width="0.0802%" height="15" fill="rgb(206,206,11)" fg:x="420" fg:w="1"/><text x="33.9308%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.6808%" y="421" width="0.0802%" height="15" fill="rgb(214,149,29)" fg:x="420" fg:w="1"/><text x="33.9308%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.6808%" y="405" width="0.0802%" height="15" fill="rgb(208,123,3)" fg:x="420" fg:w="1"/><text x="33.9308%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.6808%" y="389" width="0.0802%" height="15" fill="rgb(229,126,4)" fg:x="420" fg:w="1"/><text x="33.9308%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="33.7610%" y="421" width="0.0802%" height="15" fill="rgb(222,92,36)" fg:x="421" fg:w="1"/><text x="34.0110%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="33.7610%" y="405" width="0.0802%" height="15" fill="rgb(216,39,41)" fg:x="421" fg:w="1"/><text x="34.0110%" y="415.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="34.9639%" y="373" width="0.4812%" height="15" fill="rgb(253,127,28)" fg:x="436" fg:w="6"/><text x="35.2139%" y="383.50"></text></g><g><title>__libc_free (6 samples, 0.48%)</title><rect x="35.4451%" y="373" width="0.4812%" height="15" fill="rgb(249,152,51)" fg:x="442" fg:w="6"/><text x="35.6951%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (9 samples, 0.72%)</title><rect x="35.9262%" y="373" width="0.7217%" height="15" fill="rgb(209,123,42)" fg:x="448" fg:w="9"/><text x="36.1762%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="36.3272%" y="357" width="0.3208%" height="15" fill="rgb(241,118,22)" fg:x="453" fg:w="4"/><text x="36.5772%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="36.3272%" y="341" width="0.3208%" height="15" fill="rgb(208,25,7)" fg:x="453" fg:w="4"/><text x="36.5772%" y="351.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="36.3272%" y="325" width="0.3208%" height="15" fill="rgb(243,144,39)" fg:x="453" fg:w="4"/><text x="36.5772%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="36.6480%" y="373" width="0.2406%" height="15" fill="rgb(250,50,5)" fg:x="457" fg:w="3"/><text x="36.8980%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.8083%" y="357" width="0.0802%" height="15" fill="rgb(207,67,11)" fg:x="459" fg:w="1"/><text x="37.0583%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.8083%" y="341" width="0.0802%" height="15" fill="rgb(245,204,40)" fg:x="459" fg:w="1"/><text x="37.0583%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.8083%" y="325" width="0.0802%" height="15" fill="rgb(238,228,24)" fg:x="459" fg:w="1"/><text x="37.0583%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.5301%" y="341" width="0.0802%" height="15" fill="rgb(217,116,22)" fg:x="468" fg:w="1"/><text x="37.7801%" y="351.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="37.7706%" y="309" width="0.2406%" height="15" fill="rgb(234,98,12)" fg:x="471" fg:w="3"/><text x="38.0206%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="37.6103%" y="341" width="0.5613%" height="15" fill="rgb(242,170,50)" fg:x="469" fg:w="7"/><text x="37.8603%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="37.7706%" y="325" width="0.4010%" height="15" fill="rgb(235,7,5)" fg:x="471" fg:w="5"/><text x="38.0206%" y="335.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.0112%" y="309" width="0.1604%" height="15" fill="rgb(241,114,28)" fg:x="474" fg:w="2"/><text x="38.2612%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.6528%" y="325" width="0.0802%" height="15" fill="rgb(246,112,42)" fg:x="482" fg:w="1"/><text x="38.9028%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (25 samples, 2.00%)</title><rect x="36.8885%" y="373" width="2.0048%" height="15" fill="rgb(248,228,14)" fg:x="460" fg:w="25"/><text x="37.1385%" y="383.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (23 samples, 1.84%)</title><rect x="37.0489%" y="357" width="1.8444%" height="15" fill="rgb(208,133,18)" fg:x="462" fg:w="23"/><text x="37.2989%" y="367.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.72%)</title><rect x="38.1716%" y="341" width="0.7217%" height="15" fill="rgb(207,35,49)" fg:x="476" fg:w="9"/><text x="38.4216%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="38.7330%" y="325" width="0.1604%" height="15" fill="rgb(205,68,36)" fg:x="483" fg:w="2"/><text x="38.9830%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.8132%" y="309" width="0.0802%" height="15" fill="rgb(245,62,40)" fg:x="484" fg:w="1"/><text x="39.0632%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.8132%" y="293" width="0.0802%" height="15" fill="rgb(228,27,24)" fg:x="484" fg:w="1"/><text x="39.0632%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="38.8132%" y="277" width="0.0802%" height="15" fill="rgb(253,19,12)" fg:x="484" fg:w="1"/><text x="39.0632%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="38.8933%" y="373" width="0.0802%" height="15" fill="rgb(232,28,20)" fg:x="485" fg:w="1"/><text x="39.1433%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="38.8933%" y="357" width="0.0802%" height="15" fill="rgb(218,35,51)" fg:x="485" fg:w="1"/><text x="39.1433%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="38.8933%" y="341" width="0.0802%" height="15" fill="rgb(212,90,40)" fg:x="485" fg:w="1"/><text x="39.1433%" y="351.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="38.9735%" y="341" width="0.2406%" height="15" fill="rgb(220,172,12)" fg:x="486" fg:w="3"/><text x="39.2235%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (88 samples, 7.06%)</title><rect x="38.9735%" y="373" width="7.0569%" height="15" fill="rgb(226,159,20)" fg:x="486" fg:w="88"/><text x="39.2235%" y="383.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (88 samples, 7.06%)</title><rect x="38.9735%" y="357" width="7.0569%" height="15" fill="rgb(234,205,16)" fg:x="486" fg:w="88"/><text x="39.2235%" y="367.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (85 samples, 6.82%)</title><rect x="39.2141%" y="341" width="6.8164%" height="15" fill="rgb(207,9,39)" fg:x="489" fg:w="85"/><text x="39.4641%" y="351.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="46.0305%" y="373" width="0.4010%" height="15" fill="rgb(249,143,15)" fg:x="574" fg:w="5"/><text x="46.2805%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.2711%" y="357" width="0.1604%" height="15" fill="rgb(253,133,29)" fg:x="577" fg:w="2"/><text x="46.5211%" y="367.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="46.4314%" y="373" width="0.1604%" height="15" fill="rgb(221,187,0)" fg:x="579" fg:w="2"/><text x="46.6814%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (168 samples, 13.47%)</title><rect x="33.6808%" y="469" width="13.4723%" height="15" fill="rgb(205,204,26)" fg:x="420" fg:w="168"/><text x="33.9308%" y="479.50">&lt;core::iter::adapter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (168 samples, 13.47%)</title><rect x="33.6808%" y="453" width="13.4723%" height="15" fill="rgb(224,68,54)" fg:x="420" fg:w="168"/><text x="33.9308%" y="463.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (167 samples, 13.39%)</title><rect x="33.7610%" y="437" width="13.3921%" height="15" fill="rgb(209,67,4)" fg:x="421" fg:w="167"/><text x="34.0110%" y="447.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (166 samples, 13.31%)</title><rect x="33.8412%" y="421" width="13.3119%" height="15" fill="rgb(228,229,18)" fg:x="422" fg:w="166"/><text x="34.0912%" y="431.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (166 samples, 13.31%)</title><rect x="33.8412%" y="405" width="13.3119%" height="15" fill="rgb(231,89,13)" fg:x="422" fg:w="166"/><text x="34.0912%" y="415.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (166 samples, 13.31%)</title><rect x="33.8412%" y="389" width="13.3119%" height="15" fill="rgb(210,182,18)" fg:x="422" fg:w="166"/><text x="34.0912%" y="399.50">regex_automata::nfa:..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.56%)</title><rect x="46.5918%" y="373" width="0.5613%" height="15" fill="rgb(240,105,2)" fg:x="581" fg:w="7"/><text x="46.8418%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="46.8324%" y="357" width="0.3208%" height="15" fill="rgb(207,170,50)" fg:x="584" fg:w="4"/><text x="47.0824%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="46.9126%" y="341" width="0.2406%" height="15" fill="rgb(232,133,24)" fg:x="585" fg:w="3"/><text x="47.1626%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.9928%" y="325" width="0.1604%" height="15" fill="rgb(235,166,27)" fg:x="586" fg:w="2"/><text x="47.2428%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.4739%" y="453" width="0.0802%" height="15" fill="rgb(209,19,13)" fg:x="592" fg:w="1"/><text x="47.7239%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (13 samples, 1.04%)</title><rect x="47.5541%" y="453" width="1.0425%" height="15" fill="rgb(226,79,39)" fg:x="593" fg:w="13"/><text x="47.8041%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="48.1957%" y="437" width="0.4010%" height="15" fill="rgb(222,163,10)" fg:x="601" fg:w="5"/><text x="48.4457%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="48.1957%" y="421" width="0.4010%" height="15" fill="rgb(214,44,19)" fg:x="601" fg:w="5"/><text x="48.4457%" y="431.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="48.1957%" y="405" width="0.4010%" height="15" fill="rgb(210,217,13)" fg:x="601" fg:w="5"/><text x="48.4457%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.72%)</title><rect x="48.5966%" y="453" width="0.7217%" height="15" fill="rgb(237,61,54)" fg:x="606" fg:w="9"/><text x="48.8466%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="49.1580%" y="437" width="0.1604%" height="15" fill="rgb(226,184,24)" fg:x="613" fg:w="2"/><text x="49.4080%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.1580%" y="421" width="0.1604%" height="15" fill="rgb(223,226,4)" fg:x="613" fg:w="2"/><text x="49.4080%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="49.1580%" y="405" width="0.1604%" height="15" fill="rgb(210,26,41)" fg:x="613" fg:w="2"/><text x="49.4080%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (197 samples, 15.80%)</title><rect x="33.6006%" y="485" width="15.7979%" height="15" fill="rgb(220,221,6)" fg:x="419" fg:w="197"/><text x="33.8506%" y="495.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (28 samples, 2.25%)</title><rect x="47.1532%" y="469" width="2.2454%" height="15" fill="rgb(225,89,49)" fg:x="588" fg:w="28"/><text x="47.4032%" y="479.50">r..</text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="49.3184%" y="453" width="0.0802%" height="15" fill="rgb(218,70,45)" fg:x="615" fg:w="1"/><text x="49.5684%" y="463.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="49.3184%" y="437" width="0.0802%" height="15" fill="rgb(238,166,21)" fg:x="615" fg:w="1"/><text x="49.5684%" y="447.50"></text></g><g><title>regex_automata::meta::strategy::new (274 samples, 21.97%)</title><rect x="27.6664%" y="501" width="21.9727%" height="15" fill="rgb(224,141,44)" fg:x="345" fg:w="274"/><text x="27.9164%" y="511.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.24%)</title><rect x="49.3986%" y="485" width="0.2406%" height="15" fill="rgb(230,12,49)" fg:x="616" fg:w="3"/><text x="49.6486%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="49.5589%" y="469" width="0.0802%" height="15" fill="rgb(212,174,12)" fg:x="618" fg:w="1"/><text x="49.8089%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="49.7995%" y="453" width="0.0802%" height="15" fill="rgb(246,67,9)" fg:x="621" fg:w="1"/><text x="50.0495%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="49.7995%" y="437" width="0.0802%" height="15" fill="rgb(239,35,23)" fg:x="621" fg:w="1"/><text x="50.0495%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="49.7995%" y="421" width="0.0802%" height="15" fill="rgb(211,167,0)" fg:x="621" fg:w="1"/><text x="50.0495%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="49.8797%" y="453" width="0.1604%" height="15" fill="rgb(225,119,45)" fg:x="622" fg:w="2"/><text x="50.1297%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="49.9599%" y="437" width="0.0802%" height="15" fill="rgb(210,162,6)" fg:x="623" fg:w="1"/><text x="50.2099%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="49.7995%" y="469" width="0.6415%" height="15" fill="rgb(208,118,35)" fg:x="621" fg:w="8"/><text x="50.0495%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="50.0401%" y="453" width="0.4010%" height="15" fill="rgb(239,4,53)" fg:x="624" fg:w="5"/><text x="50.2901%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="50.0401%" y="437" width="0.4010%" height="15" fill="rgb(213,130,21)" fg:x="624" fg:w="5"/><text x="50.2901%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="50.0401%" y="421" width="0.4010%" height="15" fill="rgb(235,148,0)" fg:x="624" fg:w="5"/><text x="50.2901%" y="431.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="50.0401%" y="405" width="0.4010%" height="15" fill="rgb(244,224,18)" fg:x="624" fg:w="5"/><text x="50.2901%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="50.4411%" y="469" width="0.1604%" height="15" fill="rgb(211,214,4)" fg:x="629" fg:w="2"/><text x="50.6911%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.5213%" y="453" width="0.0802%" height="15" fill="rgb(206,119,25)" fg:x="630" fg:w="1"/><text x="50.7713%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.04%)</title><rect x="49.6391%" y="501" width="1.0425%" height="15" fill="rgb(243,93,47)" fg:x="619" fg:w="13"/><text x="49.8891%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.04%)</title><rect x="49.6391%" y="485" width="1.0425%" height="15" fill="rgb(224,194,6)" fg:x="619" fg:w="13"/><text x="49.8891%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="50.6014%" y="469" width="0.0802%" height="15" fill="rgb(243,229,6)" fg:x="631" fg:w="1"/><text x="50.8514%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.6816%" y="453" width="0.0802%" height="15" fill="rgb(207,23,50)" fg:x="632" fg:w="1"/><text x="50.9316%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.6816%" y="437" width="0.0802%" height="15" fill="rgb(253,192,32)" fg:x="632" fg:w="1"/><text x="50.9316%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.6816%" y="421" width="0.0802%" height="15" fill="rgb(213,21,6)" fg:x="632" fg:w="1"/><text x="50.9316%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.1628%" y="437" width="0.0802%" height="15" fill="rgb(243,151,13)" fg:x="638" fg:w="1"/><text x="51.4128%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.1628%" y="421" width="0.0802%" height="15" fill="rgb(233,165,41)" fg:x="638" fg:w="1"/><text x="51.4128%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.1628%" y="405" width="0.0802%" height="15" fill="rgb(246,176,45)" fg:x="638" fg:w="1"/><text x="51.4128%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.64%)</title><rect x="50.6816%" y="469" width="0.6415%" height="15" fill="rgb(217,170,52)" fg:x="632" fg:w="8"/><text x="50.9316%" y="479.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.56%)</title><rect x="50.7618%" y="453" width="0.5613%" height="15" fill="rgb(214,203,54)" fg:x="633" fg:w="7"/><text x="51.0118%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="51.2430%" y="437" width="0.0802%" height="15" fill="rgb(248,215,49)" fg:x="639" fg:w="1"/><text x="51.4930%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::translate::HirFrame&gt; (1 samples, 0.08%)</title><rect x="51.3232%" y="453" width="0.0802%" height="15" fill="rgb(208,46,10)" fg:x="640" fg:w="1"/><text x="51.5732%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="51.3232%" y="469" width="0.1604%" height="15" fill="rgb(254,5,31)" fg:x="640" fg:w="2"/><text x="51.5732%" y="479.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="51.4034%" y="453" width="0.0802%" height="15" fill="rgb(222,104,33)" fg:x="641" fg:w="1"/><text x="51.6534%" y="463.50"></text></g><g><title>indefinite::rules::number::Number::check (335 samples, 26.86%)</title><rect x="24.8597%" y="565" width="26.8645%" height="15" fill="rgb(248,49,16)" fg:x="310" fg:w="335"/><text x="25.1097%" y="575.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (307 samples, 24.62%)</title><rect x="27.1051%" y="549" width="24.6191%" height="15" fill="rgb(232,198,41)" fg:x="338" fg:w="307"/><text x="27.3551%" y="559.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (307 samples, 24.62%)</title><rect x="27.1051%" y="533" width="24.6191%" height="15" fill="rgb(214,125,3)" fg:x="338" fg:w="307"/><text x="27.3551%" y="543.50">regex::builders::Builder::build_one_str..</text></g><g><title>regex_automata::meta::regex::Builder::build (307 samples, 24.62%)</title><rect x="27.1051%" y="517" width="24.6191%" height="15" fill="rgb(229,220,28)" fg:x="338" fg:w="307"/><text x="27.3551%" y="527.50">regex_automata::meta::regex::Builder::b..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (13 samples, 1.04%)</title><rect x="50.6816%" y="501" width="1.0425%" height="15" fill="rgb(222,64,37)" fg:x="632" fg:w="13"/><text x="50.9316%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (13 samples, 1.04%)</title><rect x="50.6816%" y="485" width="1.0425%" height="15" fill="rgb(249,184,13)" fg:x="632" fg:w="13"/><text x="50.9316%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (3 samples, 0.24%)</title><rect x="51.4836%" y="469" width="0.2406%" height="15" fill="rgb(252,176,6)" fg:x="642" fg:w="3"/><text x="51.7336%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="51.6439%" y="453" width="0.0802%" height="15" fill="rgb(228,153,7)" fg:x="644" fg:w="1"/><text x="51.8939%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.6439%" y="437" width="0.0802%" height="15" fill="rgb(242,193,5)" fg:x="644" fg:w="1"/><text x="51.8939%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.6439%" y="421" width="0.0802%" height="15" fill="rgb(232,140,9)" fg:x="644" fg:w="1"/><text x="51.8939%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="51.7241%" y="501" width="0.0802%" height="15" fill="rgb(213,222,16)" fg:x="645" fg:w="1"/><text x="51.9741%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="51.7241%" y="533" width="0.1604%" height="15" fill="rgb(222,75,50)" fg:x="645" fg:w="2"/><text x="51.9741%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="51.7241%" y="517" width="0.1604%" height="15" fill="rgb(205,180,2)" fg:x="645" fg:w="2"/><text x="51.9741%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="51.8043%" y="501" width="0.0802%" height="15" fill="rgb(216,34,7)" fg:x="646" fg:w="1"/><text x="52.0543%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.8845%" y="517" width="0.0802%" height="15" fill="rgb(253,16,32)" fg:x="647" fg:w="1"/><text x="52.1345%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.9647%" y="501" width="0.0802%" height="15" fill="rgb(208,97,28)" fg:x="648" fg:w="1"/><text x="52.2147%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="51.9647%" y="485" width="0.0802%" height="15" fill="rgb(225,92,11)" fg:x="648" fg:w="1"/><text x="52.2147%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.9647%" y="469" width="0.0802%" height="15" fill="rgb(243,38,12)" fg:x="648" fg:w="1"/><text x="52.2147%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="51.8845%" y="533" width="0.2406%" height="15" fill="rgb(208,139,16)" fg:x="647" fg:w="3"/><text x="52.1345%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="51.9647%" y="517" width="0.1604%" height="15" fill="rgb(227,24,9)" fg:x="648" fg:w="2"/><text x="52.2147%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="52.0449%" y="501" width="0.0802%" height="15" fill="rgb(206,62,11)" fg:x="649" fg:w="1"/><text x="52.2949%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="52.0449%" y="485" width="0.0802%" height="15" fill="rgb(228,134,27)" fg:x="649" fg:w="1"/><text x="52.2949%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.0449%" y="469" width="0.0802%" height="15" fill="rgb(205,55,33)" fg:x="649" fg:w="1"/><text x="52.2949%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="52.1251%" y="517" width="0.0802%" height="15" fill="rgb(243,75,43)" fg:x="650" fg:w="1"/><text x="52.3751%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.1251%" y="501" width="0.0802%" height="15" fill="rgb(223,27,42)" fg:x="650" fg:w="1"/><text x="52.3751%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.1251%" y="485" width="0.0802%" height="15" fill="rgb(232,189,33)" fg:x="650" fg:w="1"/><text x="52.3751%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.1251%" y="469" width="0.0802%" height="15" fill="rgb(210,9,39)" fg:x="650" fg:w="1"/><text x="52.3751%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="52.2053%" y="485" width="0.1604%" height="15" fill="rgb(242,85,26)" fg:x="651" fg:w="2"/><text x="52.4553%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="52.2053%" y="469" width="0.1604%" height="15" fill="rgb(248,44,4)" fg:x="651" fg:w="2"/><text x="52.4553%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.2855%" y="453" width="0.0802%" height="15" fill="rgb(250,96,46)" fg:x="652" fg:w="1"/><text x="52.5355%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="52.3657%" y="485" width="0.4010%" height="15" fill="rgb(229,116,26)" fg:x="653" fg:w="5"/><text x="52.6157%" y="495.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="52.3657%" y="469" width="0.4010%" height="15" fill="rgb(246,94,34)" fg:x="653" fg:w="5"/><text x="52.6157%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="52.5261%" y="453" width="0.2406%" height="15" fill="rgb(251,73,21)" fg:x="655" fg:w="3"/><text x="52.7761%" y="463.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="52.5261%" y="437" width="0.2406%" height="15" fill="rgb(254,121,25)" fg:x="655" fg:w="3"/><text x="52.7761%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.6864%" y="421" width="0.0802%" height="15" fill="rgb(215,161,49)" fg:x="657" fg:w="1"/><text x="52.9364%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="52.7666%" y="469" width="0.0802%" height="15" fill="rgb(221,43,13)" fg:x="658" fg:w="1"/><text x="53.0166%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="52.7666%" y="453" width="0.0802%" height="15" fill="rgb(249,5,37)" fg:x="658" fg:w="1"/><text x="53.0166%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="52.9270%" y="453" width="0.3208%" height="15" fill="rgb(226,25,44)" fg:x="660" fg:w="4"/><text x="53.1770%" y="463.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="53.1676%" y="437" width="0.0802%" height="15" fill="rgb(238,189,16)" fg:x="663" fg:w="1"/><text x="53.4176%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.1676%" y="421" width="0.0802%" height="15" fill="rgb(251,186,8)" fg:x="663" fg:w="1"/><text x="53.4176%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.1676%" y="405" width="0.0802%" height="15" fill="rgb(254,34,31)" fg:x="663" fg:w="1"/><text x="53.4176%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="52.8468%" y="469" width="0.4812%" height="15" fill="rgb(225,215,27)" fg:x="659" fg:w="6"/><text x="53.0968%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="53.2478%" y="453" width="0.0802%" height="15" fill="rgb(221,192,48)" fg:x="664" fg:w="1"/><text x="53.4978%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="53.3280%" y="453" width="0.0802%" height="15" fill="rgb(219,137,20)" fg:x="665" fg:w="1"/><text x="53.5780%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="53.3280%" y="437" width="0.0802%" height="15" fill="rgb(219,84,11)" fg:x="665" fg:w="1"/><text x="53.5780%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="53.3280%" y="421" width="0.0802%" height="15" fill="rgb(224,10,23)" fg:x="665" fg:w="1"/><text x="53.5780%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="53.4082%" y="437" width="0.0802%" height="15" fill="rgb(248,22,39)" fg:x="666" fg:w="1"/><text x="53.6582%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.4082%" y="421" width="0.0802%" height="15" fill="rgb(212,154,20)" fg:x="666" fg:w="1"/><text x="53.6582%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4082%" y="405" width="0.0802%" height="15" fill="rgb(236,199,50)" fg:x="666" fg:w="1"/><text x="53.6582%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="53.4884%" y="437" width="0.5613%" height="15" fill="rgb(211,9,17)" fg:x="667" fg:w="7"/><text x="53.7384%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="54.0497%" y="437" width="0.0802%" height="15" fill="rgb(243,216,36)" fg:x="674" fg:w="1"/><text x="54.2997%" y="447.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="54.1299%" y="421" width="0.0802%" height="15" fill="rgb(250,2,10)" fg:x="675" fg:w="1"/><text x="54.3799%" y="431.50"></text></g><g><title>regex_automata::meta::strategy::new (19 samples, 1.52%)</title><rect x="52.7666%" y="485" width="1.5237%" height="15" fill="rgb(226,50,48)" fg:x="658" fg:w="19"/><text x="53.0166%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (12 samples, 0.96%)</title><rect x="53.3280%" y="469" width="0.9623%" height="15" fill="rgb(243,81,16)" fg:x="665" fg:w="12"/><text x="53.5780%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="53.4082%" y="453" width="0.8821%" height="15" fill="rgb(250,14,2)" fg:x="666" fg:w="11"/><text x="53.6582%" y="463.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="54.1299%" y="437" width="0.1604%" height="15" fill="rgb(233,135,29)" fg:x="675" fg:w="2"/><text x="54.3799%" y="447.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::fixup_slot_ranges (1 samples, 0.08%)</title><rect x="54.2101%" y="421" width="0.0802%" height="15" fill="rgb(224,64,43)" fg:x="676" fg:w="1"/><text x="54.4601%" y="431.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="54.2903%" y="437" width="0.1604%" height="15" fill="rgb(238,84,13)" fg:x="677" fg:w="2"/><text x="54.5403%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.3705%" y="421" width="0.0802%" height="15" fill="rgb(253,48,26)" fg:x="678" fg:w="1"/><text x="54.6205%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.3705%" y="405" width="0.0802%" height="15" fill="rgb(205,223,31)" fg:x="678" fg:w="1"/><text x="54.6205%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.3705%" y="389" width="0.0802%" height="15" fill="rgb(221,41,32)" fg:x="678" fg:w="1"/><text x="54.6205%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="54.4507%" y="437" width="0.2406%" height="15" fill="rgb(213,158,31)" fg:x="679" fg:w="3"/><text x="54.7007%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="54.5309%" y="421" width="0.1604%" height="15" fill="rgb(245,126,43)" fg:x="680" fg:w="2"/><text x="54.7809%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="54.6111%" y="405" width="0.0802%" height="15" fill="rgb(227,7,22)" fg:x="681" fg:w="1"/><text x="54.8611%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="54.6913%" y="437" width="0.0802%" height="15" fill="rgb(252,90,44)" fg:x="682" fg:w="1"/><text x="54.9413%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="54.6913%" y="421" width="0.0802%" height="15" fill="rgb(253,91,0)" fg:x="682" fg:w="1"/><text x="54.9413%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="54.2903%" y="453" width="0.5613%" height="15" fill="rgb(252,175,49)" fg:x="677" fg:w="7"/><text x="54.5403%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="54.7715%" y="437" width="0.0802%" height="15" fill="rgb(246,150,1)" fg:x="683" fg:w="1"/><text x="55.0215%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.7715%" y="421" width="0.0802%" height="15" fill="rgb(241,192,25)" fg:x="683" fg:w="1"/><text x="55.0215%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.7715%" y="405" width="0.0802%" height="15" fill="rgb(239,187,11)" fg:x="683" fg:w="1"/><text x="55.0215%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.7715%" y="389" width="0.0802%" height="15" fill="rgb(218,202,51)" fg:x="683" fg:w="1"/><text x="55.0215%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="54.2903%" y="485" width="0.6415%" height="15" fill="rgb(225,176,8)" fg:x="677" fg:w="8"/><text x="54.5403%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="54.2903%" y="469" width="0.6415%" height="15" fill="rgb(219,122,41)" fg:x="677" fg:w="8"/><text x="54.5403%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="54.8516%" y="453" width="0.0802%" height="15" fill="rgb(248,140,20)" fg:x="684" fg:w="1"/><text x="55.1016%" y="463.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="54.8516%" y="437" width="0.0802%" height="15" fill="rgb(245,41,37)" fg:x="684" fg:w="1"/><text x="55.1016%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="54.9318%" y="453" width="0.2406%" height="15" fill="rgb(235,82,39)" fg:x="685" fg:w="3"/><text x="55.1818%" y="463.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (2 samples, 0.16%)</title><rect x="55.0120%" y="437" width="0.1604%" height="15" fill="rgb(230,108,42)" fg:x="686" fg:w="2"/><text x="55.2620%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="55.1724%" y="453" width="0.2406%" height="15" fill="rgb(215,150,50)" fg:x="688" fg:w="3"/><text x="55.4224%" y="463.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="55.2526%" y="437" width="0.1604%" height="15" fill="rgb(233,212,5)" fg:x="689" fg:w="2"/><text x="55.5026%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="55.4130%" y="453" width="0.0802%" height="15" fill="rgb(245,80,22)" fg:x="691" fg:w="1"/><text x="55.6630%" y="463.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="55.4130%" y="437" width="0.0802%" height="15" fill="rgb(238,129,16)" fg:x="691" fg:w="1"/><text x="55.6630%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.4130%" y="421" width="0.0802%" height="15" fill="rgb(240,19,0)" fg:x="691" fg:w="1"/><text x="55.6630%" y="431.50"></text></g><g><title>regex::regex::string::Regex::new (44 samples, 3.53%)</title><rect x="52.1251%" y="533" width="3.5285%" height="15" fill="rgb(232,42,35)" fg:x="650" fg:w="44"/><text x="52.3751%" y="543.50">reg..</text></g><g><title>regex::builders::Builder::build_one_string (43 samples, 3.45%)</title><rect x="52.2053%" y="517" width="3.4483%" height="15" fill="rgb(223,130,24)" fg:x="651" fg:w="43"/><text x="52.4553%" y="527.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (43 samples, 3.45%)</title><rect x="52.2053%" y="501" width="3.4483%" height="15" fill="rgb(237,16,22)" fg:x="651" fg:w="43"/><text x="52.4553%" y="511.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="54.9318%" y="485" width="0.7217%" height="15" fill="rgb(248,192,20)" fg:x="685" fg:w="9"/><text x="55.1818%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="54.9318%" y="469" width="0.7217%" height="15" fill="rgb(233,167,2)" fg:x="685" fg:w="9"/><text x="55.1818%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.4932%" y="453" width="0.1604%" height="15" fill="rgb(252,71,44)" fg:x="692" fg:w="2"/><text x="55.7432%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.4932%" y="437" width="0.1604%" height="15" fill="rgb(238,37,47)" fg:x="692" fg:w="2"/><text x="55.7432%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.5734%" y="421" width="0.0802%" height="15" fill="rgb(214,202,54)" fg:x="693" fg:w="1"/><text x="55.8234%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.0545%" y="453" width="0.0802%" height="15" fill="rgb(254,165,40)" fg:x="699" fg:w="1"/><text x="56.3045%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.0545%" y="437" width="0.0802%" height="15" fill="rgb(246,173,38)" fg:x="699" fg:w="1"/><text x="56.3045%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.0545%" y="421" width="0.0802%" height="15" fill="rgb(215,3,27)" fg:x="699" fg:w="1"/><text x="56.3045%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="56.1347%" y="453" width="0.0802%" height="15" fill="rgb(239,169,51)" fg:x="700" fg:w="1"/><text x="56.3847%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="56.1347%" y="437" width="0.0802%" height="15" fill="rgb(212,5,25)" fg:x="700" fg:w="1"/><text x="56.3847%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="55.8140%" y="469" width="0.5613%" height="15" fill="rgb(243,45,17)" fg:x="696" fg:w="7"/><text x="56.0640%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="56.2149%" y="453" width="0.1604%" height="15" fill="rgb(242,97,9)" fg:x="701" fg:w="2"/><text x="56.4649%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="55.8140%" y="485" width="0.7217%" height="15" fill="rgb(228,71,31)" fg:x="696" fg:w="9"/><text x="56.0640%" y="495.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="56.3753%" y="469" width="0.1604%" height="15" fill="rgb(252,184,16)" fg:x="703" fg:w="2"/><text x="56.6253%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="56.3753%" y="453" width="0.1604%" height="15" fill="rgb(236,169,46)" fg:x="703" fg:w="2"/><text x="56.6253%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.3753%" y="437" width="0.1604%" height="15" fill="rgb(207,17,47)" fg:x="703" fg:w="2"/><text x="56.6253%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.4555%" y="421" width="0.0802%" height="15" fill="rgb(206,201,28)" fg:x="704" fg:w="1"/><text x="56.7055%" y="431.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (582 samples, 46.67%)</title><rect x="9.9439%" y="645" width="46.6720%" height="15" fill="rgb(224,184,23)" fg:x="124" fg:w="582"/><text x="10.1939%" y="655.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replie..</text></g><g><title>plugins_core::looking::model::qualify_name (580 samples, 46.51%)</title><rect x="10.1043%" y="629" width="46.5116%" height="15" fill="rgb(208,139,48)" fg:x="126" fg:w="580"/><text x="10.3543%" y="639.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (580 samples, 46.51%)</title><rect x="10.1043%" y="613" width="46.5116%" height="15" fill="rgb(208,130,10)" fg:x="126" fg:w="580"/><text x="10.3543%" y="623.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (580 samples, 46.51%)</title><rect x="10.1043%" y="597" width="46.5116%" height="15" fill="rgb(211,213,45)" fg:x="126" fg:w="580"/><text x="10.3543%" y="607.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (576 samples, 46.19%)</title><rect x="10.4250%" y="581" width="46.1909%" height="15" fill="rgb(235,100,30)" fg:x="130" fg:w="576"/><text x="10.6750%" y="591.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (61 samples, 4.89%)</title><rect x="51.7241%" y="565" width="4.8917%" height="15" fill="rgb(206,144,31)" fg:x="645" fg:w="61"/><text x="51.9741%" y="575.50">indefi..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (61 samples, 4.89%)</title><rect x="51.7241%" y="549" width="4.8917%" height="15" fill="rgb(224,200,26)" fg:x="645" fg:w="61"/><text x="51.9741%" y="559.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="55.6536%" y="533" width="0.9623%" height="15" fill="rgb(247,104,53)" fg:x="694" fg:w="12"/><text x="55.9036%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="55.7338%" y="517" width="0.8821%" height="15" fill="rgb(220,14,17)" fg:x="695" fg:w="11"/><text x="55.9838%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="55.7338%" y="501" width="0.8821%" height="15" fill="rgb(230,140,40)" fg:x="695" fg:w="11"/><text x="55.9838%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="56.5357%" y="485" width="0.0802%" height="15" fill="rgb(229,2,41)" fg:x="705" fg:w="1"/><text x="56.7857%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="56.6159%" y="613" width="0.0802%" height="15" fill="rgb(232,89,16)" fg:x="706" fg:w="1"/><text x="56.8659%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="56.6159%" y="597" width="0.0802%" height="15" fill="rgb(247,59,52)" fg:x="706" fg:w="1"/><text x="56.8659%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="56.6159%" y="581" width="0.0802%" height="15" fill="rgb(226,110,21)" fg:x="706" fg:w="1"/><text x="56.8659%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="56.6159%" y="565" width="0.0802%" height="15" fill="rgb(224,176,43)" fg:x="706" fg:w="1"/><text x="56.8659%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="56.6961%" y="613" width="0.0802%" height="15" fill="rgb(221,73,6)" fg:x="707" fg:w="1"/><text x="56.9461%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="56.6961%" y="597" width="0.0802%" height="15" fill="rgb(232,78,19)" fg:x="707" fg:w="1"/><text x="56.9461%" y="607.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (586 samples, 46.99%)</title><rect x="9.8637%" y="677" width="46.9928%" height="15" fill="rgb(233,112,48)" fg:x="123" fg:w="586"/><text x="10.1137%" y="687.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perfo..</text></g><g><title>plugins_core::looking::model::new_area_observation (585 samples, 46.91%)</title><rect x="9.9439%" y="661" width="46.9126%" height="15" fill="rgb(243,131,47)" fg:x="124" fg:w="585"/><text x="10.1939%" y="671.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="56.6159%" y="645" width="0.2406%" height="15" fill="rgb(226,51,1)" fg:x="706" fg:w="3"/><text x="56.8659%" y="655.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="56.6159%" y="629" width="0.2406%" height="15" fill="rgb(247,58,7)" fg:x="706" fg:w="3"/><text x="56.8659%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.7763%" y="613" width="0.0802%" height="15" fill="rgb(209,7,32)" fg:x="708" fg:w="1"/><text x="57.0263%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.7763%" y="597" width="0.0802%" height="15" fill="rgb(209,39,41)" fg:x="708" fg:w="1"/><text x="57.0263%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="56.7763%" y="581" width="0.0802%" height="15" fill="rgb(226,182,46)" fg:x="708" fg:w="1"/><text x="57.0263%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="56.7763%" y="565" width="0.0802%" height="15" fill="rgb(230,219,10)" fg:x="708" fg:w="1"/><text x="57.0263%" y="575.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="56.7763%" y="549" width="0.0802%" height="15" fill="rgb(227,175,30)" fg:x="708" fg:w="1"/><text x="57.0263%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.7763%" y="533" width="0.0802%" height="15" fill="rgb(217,2,50)" fg:x="708" fg:w="1"/><text x="57.0263%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.7763%" y="517" width="0.0802%" height="15" fill="rgb(229,160,0)" fg:x="708" fg:w="1"/><text x="57.0263%" y="527.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="56.7763%" y="501" width="0.0802%" height="15" fill="rgb(207,78,37)" fg:x="708" fg:w="1"/><text x="57.0263%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="56.8565%" y="629" width="0.0802%" height="15" fill="rgb(225,57,0)" fg:x="709" fg:w="1"/><text x="57.1065%" y="639.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="56.8565%" y="613" width="0.0802%" height="15" fill="rgb(232,154,2)" fg:x="709" fg:w="1"/><text x="57.1065%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.8565%" y="597" width="0.0802%" height="15" fill="rgb(241,212,25)" fg:x="709" fg:w="1"/><text x="57.1065%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.8565%" y="581" width="0.0802%" height="15" fill="rgb(226,69,20)" fg:x="709" fg:w="1"/><text x="57.1065%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.8565%" y="565" width="0.0802%" height="15" fill="rgb(247,184,54)" fg:x="709" fg:w="1"/><text x="57.1065%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.8565%" y="549" width="0.0802%" height="15" fill="rgb(210,145,0)" fg:x="709" fg:w="1"/><text x="57.1065%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.8565%" y="533" width="0.0802%" height="15" fill="rgb(253,82,12)" fg:x="709" fg:w="1"/><text x="57.1065%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.8565%" y="517" width="0.0802%" height="15" fill="rgb(245,42,11)" fg:x="709" fg:w="1"/><text x="57.1065%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.8565%" y="501" width="0.0802%" height="15" fill="rgb(219,147,32)" fg:x="709" fg:w="1"/><text x="57.1065%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="56.8565%" y="485" width="0.0802%" height="15" fill="rgb(246,12,7)" fg:x="709" fg:w="1"/><text x="57.1065%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="56.8565%" y="469" width="0.0802%" height="15" fill="rgb(243,50,9)" fg:x="709" fg:w="1"/><text x="57.1065%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="56.8565%" y="453" width="0.0802%" height="15" fill="rgb(219,149,6)" fg:x="709" fg:w="1"/><text x="57.1065%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="56.8565%" y="437" width="0.0802%" height="15" fill="rgb(241,51,42)" fg:x="709" fg:w="1"/><text x="57.1065%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.8565%" y="421" width="0.0802%" height="15" fill="rgb(226,128,27)" fg:x="709" fg:w="1"/><text x="57.1065%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.9366%" y="501" width="0.0802%" height="15" fill="rgb(244,144,4)" fg:x="710" fg:w="1"/><text x="57.1866%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="56.9366%" y="613" width="0.1604%" height="15" fill="rgb(221,4,13)" fg:x="710" fg:w="2"/><text x="57.1866%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="56.9366%" y="597" width="0.1604%" height="15" fill="rgb(208,170,28)" fg:x="710" fg:w="2"/><text x="57.1866%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="56.9366%" y="581" width="0.1604%" height="15" fill="rgb(226,131,13)" fg:x="710" fg:w="2"/><text x="57.1866%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="56.9366%" y="565" width="0.1604%" height="15" fill="rgb(215,72,41)" fg:x="710" fg:w="2"/><text x="57.1866%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="56.9366%" y="549" width="0.1604%" height="15" fill="rgb(243,108,20)" fg:x="710" fg:w="2"/><text x="57.1866%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="56.9366%" y="533" width="0.1604%" height="15" fill="rgb(230,189,17)" fg:x="710" fg:w="2"/><text x="57.1866%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="56.9366%" y="517" width="0.1604%" height="15" fill="rgb(220,50,17)" fg:x="710" fg:w="2"/><text x="57.1866%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="57.0168%" y="501" width="0.0802%" height="15" fill="rgb(248,152,48)" fg:x="711" fg:w="1"/><text x="57.2668%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.0168%" y="485" width="0.0802%" height="15" fill="rgb(244,91,11)" fg:x="711" fg:w="1"/><text x="57.2668%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="57.0168%" y="469" width="0.0802%" height="15" fill="rgb(220,157,5)" fg:x="711" fg:w="1"/><text x="57.2668%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="57.0168%" y="453" width="0.0802%" height="15" fill="rgb(253,137,8)" fg:x="711" fg:w="1"/><text x="57.2668%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="57.0970%" y="501" width="0.0802%" height="15" fill="rgb(217,137,51)" fg:x="712" fg:w="1"/><text x="57.3470%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="57.1772%" y="485" width="0.1604%" height="15" fill="rgb(218,209,53)" fg:x="713" fg:w="2"/><text x="57.4272%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="57.1772%" y="469" width="0.1604%" height="15" fill="rgb(249,137,25)" fg:x="713" fg:w="2"/><text x="57.4272%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="57.2574%" y="453" width="0.0802%" height="15" fill="rgb(239,155,26)" fg:x="714" fg:w="1"/><text x="57.5074%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.2574%" y="437" width="0.0802%" height="15" fill="rgb(227,85,46)" fg:x="714" fg:w="1"/><text x="57.5074%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (7 samples, 0.56%)</title><rect x="56.8565%" y="661" width="0.5613%" height="15" fill="rgb(251,107,43)" fg:x="709" fg:w="7"/><text x="57.1065%" y="671.50"></text></g><g><title>engine::internal::Entities::prepare_entity (7 samples, 0.56%)</title><rect x="56.8565%" y="645" width="0.5613%" height="15" fill="rgb(234,170,33)" fg:x="709" fg:w="7"/><text x="57.1065%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.48%)</title><rect x="56.9366%" y="629" width="0.4812%" height="15" fill="rgb(206,29,35)" fg:x="710" fg:w="6"/><text x="57.1866%" y="639.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="57.0970%" y="613" width="0.3208%" height="15" fill="rgb(227,138,25)" fg:x="712" fg:w="4"/><text x="57.3470%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="57.0970%" y="597" width="0.3208%" height="15" fill="rgb(249,131,35)" fg:x="712" fg:w="4"/><text x="57.3470%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="57.0970%" y="581" width="0.3208%" height="15" fill="rgb(239,6,40)" fg:x="712" fg:w="4"/><text x="57.3470%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="57.0970%" y="565" width="0.3208%" height="15" fill="rgb(246,136,47)" fg:x="712" fg:w="4"/><text x="57.3470%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="57.0970%" y="549" width="0.3208%" height="15" fill="rgb(253,58,26)" fg:x="712" fg:w="4"/><text x="57.3470%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="57.0970%" y="533" width="0.3208%" height="15" fill="rgb(237,141,10)" fg:x="712" fg:w="4"/><text x="57.3470%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="57.0970%" y="517" width="0.3208%" height="15" fill="rgb(234,156,12)" fg:x="712" fg:w="4"/><text x="57.3470%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="57.1772%" y="501" width="0.2406%" height="15" fill="rgb(243,224,36)" fg:x="713" fg:w="3"/><text x="57.4272%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.3376%" y="485" width="0.0802%" height="15" fill="rgb(205,229,51)" fg:x="715" fg:w="1"/><text x="57.5876%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="57.3376%" y="469" width="0.0802%" height="15" fill="rgb(223,189,4)" fg:x="715" fg:w="1"/><text x="57.5876%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.3376%" y="453" width="0.0802%" height="15" fill="rgb(249,167,54)" fg:x="715" fg:w="1"/><text x="57.5876%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="57.3376%" y="437" width="0.0802%" height="15" fill="rgb(218,34,28)" fg:x="715" fg:w="1"/><text x="57.5876%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="57.4980%" y="597" width="0.0802%" height="15" fill="rgb(232,109,42)" fg:x="717" fg:w="1"/><text x="57.7480%" y="607.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="57.4980%" y="581" width="0.0802%" height="15" fill="rgb(248,214,46)" fg:x="717" fg:w="1"/><text x="57.7480%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="57.4980%" y="565" width="0.0802%" height="15" fill="rgb(244,216,40)" fg:x="717" fg:w="1"/><text x="57.7480%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="57.4980%" y="549" width="0.0802%" height="15" fill="rgb(231,226,31)" fg:x="717" fg:w="1"/><text x="57.7480%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="57.4980%" y="533" width="0.0802%" height="15" fill="rgb(238,38,43)" fg:x="717" fg:w="1"/><text x="57.7480%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.4980%" y="517" width="0.0802%" height="15" fill="rgb(208,88,43)" fg:x="717" fg:w="1"/><text x="57.7480%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.4980%" y="501" width="0.0802%" height="15" fill="rgb(205,136,37)" fg:x="717" fg:w="1"/><text x="57.7480%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="57.4980%" y="485" width="0.0802%" height="15" fill="rgb(237,34,14)" fg:x="717" fg:w="1"/><text x="57.7480%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.4980%" y="469" width="0.0802%" height="15" fill="rgb(236,193,44)" fg:x="717" fg:w="1"/><text x="57.7480%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.4980%" y="453" width="0.0802%" height="15" fill="rgb(231,48,10)" fg:x="717" fg:w="1"/><text x="57.7480%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="57.4980%" y="437" width="0.0802%" height="15" fill="rgb(213,141,34)" fg:x="717" fg:w="1"/><text x="57.7480%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="57.4980%" y="421" width="0.0802%" height="15" fill="rgb(249,130,34)" fg:x="717" fg:w="1"/><text x="57.7480%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="57.4980%" y="405" width="0.0802%" height="15" fill="rgb(219,42,41)" fg:x="717" fg:w="1"/><text x="57.7480%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="57.4980%" y="389" width="0.0802%" height="15" fill="rgb(224,100,54)" fg:x="717" fg:w="1"/><text x="57.7480%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="57.4980%" y="373" width="0.0802%" height="15" fill="rgb(229,200,27)" fg:x="717" fg:w="1"/><text x="57.7480%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="57.4980%" y="357" width="0.0802%" height="15" fill="rgb(217,118,10)" fg:x="717" fg:w="1"/><text x="57.7480%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="57.4980%" y="341" width="0.0802%" height="15" fill="rgb(206,22,3)" fg:x="717" fg:w="1"/><text x="57.7480%" y="351.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="57.4178%" y="661" width="0.2406%" height="15" fill="rgb(232,163,46)" fg:x="716" fg:w="3"/><text x="57.6678%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="57.4980%" y="645" width="0.1604%" height="15" fill="rgb(206,95,13)" fg:x="717" fg:w="2"/><text x="57.7480%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="57.4980%" y="629" width="0.1604%" height="15" fill="rgb(253,154,18)" fg:x="717" fg:w="2"/><text x="57.7480%" y="639.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="57.4980%" y="613" width="0.1604%" height="15" fill="rgb(219,32,23)" fg:x="717" fg:w="2"/><text x="57.7480%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.5782%" y="597" width="0.0802%" height="15" fill="rgb(230,191,45)" fg:x="718" fg:w="1"/><text x="57.8282%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.5782%" y="581" width="0.0802%" height="15" fill="rgb(229,64,36)" fg:x="718" fg:w="1"/><text x="57.8282%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.5782%" y="565" width="0.0802%" height="15" fill="rgb(205,129,25)" fg:x="718" fg:w="1"/><text x="57.8282%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.5782%" y="549" width="0.0802%" height="15" fill="rgb(254,112,7)" fg:x="718" fg:w="1"/><text x="57.8282%" y="559.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (11 samples, 0.88%)</title><rect x="56.8565%" y="677" width="0.8821%" height="15" fill="rgb(226,53,48)" fg:x="709" fg:w="11"/><text x="57.1065%" y="687.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="57.6584%" y="661" width="0.0802%" height="15" fill="rgb(214,153,38)" fg:x="719" fg:w="1"/><text x="57.9084%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="57.6584%" y="645" width="0.0802%" height="15" fill="rgb(243,101,7)" fg:x="719" fg:w="1"/><text x="57.9084%" y="655.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="57.6584%" y="629" width="0.0802%" height="15" fill="rgb(240,140,22)" fg:x="719" fg:w="1"/><text x="57.9084%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="57.6584%" y="613" width="0.0802%" height="15" fill="rgb(235,114,2)" fg:x="719" fg:w="1"/><text x="57.9084%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="57.6584%" y="597" width="0.0802%" height="15" fill="rgb(242,59,12)" fg:x="719" fg:w="1"/><text x="57.9084%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="57.6584%" y="581" width="0.0802%" height="15" fill="rgb(252,134,9)" fg:x="719" fg:w="1"/><text x="57.9084%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="57.6584%" y="565" width="0.0802%" height="15" fill="rgb(236,4,44)" fg:x="719" fg:w="1"/><text x="57.9084%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="57.7386%" y="613" width="0.1604%" height="15" fill="rgb(254,172,41)" fg:x="720" fg:w="2"/><text x="57.9886%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.8188%" y="597" width="0.0802%" height="15" fill="rgb(244,63,20)" fg:x="721" fg:w="1"/><text x="58.0688%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="57.8188%" y="581" width="0.0802%" height="15" fill="rgb(250,73,31)" fg:x="721" fg:w="1"/><text x="58.0688%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.8188%" y="565" width="0.0802%" height="15" fill="rgb(241,38,36)" fg:x="721" fg:w="1"/><text x="58.0688%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.8188%" y="549" width="0.0802%" height="15" fill="rgb(245,211,2)" fg:x="721" fg:w="1"/><text x="58.0688%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="57.7386%" y="629" width="0.2406%" height="15" fill="rgb(206,120,28)" fg:x="720" fg:w="3"/><text x="57.9886%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="57.8990%" y="613" width="0.0802%" height="15" fill="rgb(211,59,34)" fg:x="722" fg:w="1"/><text x="58.1490%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (4 samples, 0.32%)</title><rect x="57.7386%" y="645" width="0.3208%" height="15" fill="rgb(233,168,5)" fg:x="720" fg:w="4"/><text x="57.9886%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.9791%" y="629" width="0.0802%" height="15" fill="rgb(234,33,13)" fg:x="723" fg:w="1"/><text x="58.2291%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="58.0593%" y="597" width="0.0802%" height="15" fill="rgb(231,150,26)" fg:x="724" fg:w="1"/><text x="58.3093%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1395%" y="597" width="0.0802%" height="15" fill="rgb(217,191,4)" fg:x="725" fg:w="1"/><text x="58.3895%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="58.0593%" y="613" width="0.2406%" height="15" fill="rgb(246,198,38)" fg:x="724" fg:w="3"/><text x="58.3093%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="58.2197%" y="597" width="0.0802%" height="15" fill="rgb(245,64,37)" fg:x="726" fg:w="1"/><text x="58.4697%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="58.2197%" y="581" width="0.0802%" height="15" fill="rgb(250,30,36)" fg:x="726" fg:w="1"/><text x="58.4697%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="58.2197%" y="565" width="0.0802%" height="15" fill="rgb(217,86,53)" fg:x="726" fg:w="1"/><text x="58.4697%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="58.2197%" y="549" width="0.0802%" height="15" fill="rgb(228,157,16)" fg:x="726" fg:w="1"/><text x="58.4697%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="58.2197%" y="533" width="0.0802%" height="15" fill="rgb(217,59,31)" fg:x="726" fg:w="1"/><text x="58.4697%" y="543.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="58.2197%" y="517" width="0.0802%" height="15" fill="rgb(237,138,41)" fg:x="726" fg:w="1"/><text x="58.4697%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="58.2999%" y="613" width="0.0802%" height="15" fill="rgb(227,91,49)" fg:x="727" fg:w="1"/><text x="58.5499%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="58.2999%" y="597" width="0.0802%" height="15" fill="rgb(247,21,44)" fg:x="727" fg:w="1"/><text x="58.5499%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.2999%" y="581" width="0.0802%" height="15" fill="rgb(219,210,51)" fg:x="727" fg:w="1"/><text x="58.5499%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="58.2999%" y="565" width="0.0802%" height="15" fill="rgb(209,140,6)" fg:x="727" fg:w="1"/><text x="58.5499%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="58.3801%" y="613" width="0.0802%" height="15" fill="rgb(221,188,24)" fg:x="728" fg:w="1"/><text x="58.6301%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="58.3801%" y="597" width="0.0802%" height="15" fill="rgb(232,154,20)" fg:x="728" fg:w="1"/><text x="58.6301%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="58.3801%" y="581" width="0.0802%" height="15" fill="rgb(244,137,50)" fg:x="728" fg:w="1"/><text x="58.6301%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="58.3801%" y="565" width="0.0802%" height="15" fill="rgb(225,185,43)" fg:x="728" fg:w="1"/><text x="58.6301%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.3801%" y="549" width="0.0802%" height="15" fill="rgb(213,205,38)" fg:x="728" fg:w="1"/><text x="58.6301%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="58.4603%" y="533" width="0.0802%" height="15" fill="rgb(236,73,12)" fg:x="729" fg:w="1"/><text x="58.7103%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="58.4603%" y="549" width="0.1604%" height="15" fill="rgb(235,219,13)" fg:x="729" fg:w="2"/><text x="58.7103%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.5405%" y="533" width="0.0802%" height="15" fill="rgb(218,59,36)" fg:x="730" fg:w="1"/><text x="58.7905%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="58.6207%" y="533" width="0.1604%" height="15" fill="rgb(205,110,39)" fg:x="731" fg:w="2"/><text x="58.8707%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="58.6207%" y="517" width="0.1604%" height="15" fill="rgb(218,206,42)" fg:x="731" fg:w="2"/><text x="58.8707%" y="527.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="58.7009%" y="501" width="0.0802%" height="15" fill="rgb(248,125,24)" fg:x="732" fg:w="1"/><text x="58.9509%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="58.7009%" y="485" width="0.0802%" height="15" fill="rgb(242,28,27)" fg:x="732" fg:w="1"/><text x="58.9509%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="58.7009%" y="469" width="0.0802%" height="15" fill="rgb(216,228,15)" fg:x="732" fg:w="1"/><text x="58.9509%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="58.7009%" y="453" width="0.0802%" height="15" fill="rgb(235,116,46)" fg:x="732" fg:w="1"/><text x="58.9509%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="58.7009%" y="437" width="0.0802%" height="15" fill="rgb(224,18,32)" fg:x="732" fg:w="1"/><text x="58.9509%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="58.7009%" y="421" width="0.0802%" height="15" fill="rgb(252,5,12)" fg:x="732" fg:w="1"/><text x="58.9509%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="58.7009%" y="405" width="0.0802%" height="15" fill="rgb(251,36,5)" fg:x="732" fg:w="1"/><text x="58.9509%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="58.7009%" y="389" width="0.0802%" height="15" fill="rgb(217,53,14)" fg:x="732" fg:w="1"/><text x="58.9509%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="58.7009%" y="373" width="0.0802%" height="15" fill="rgb(215,86,45)" fg:x="732" fg:w="1"/><text x="58.9509%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="58.7009%" y="357" width="0.0802%" height="15" fill="rgb(242,169,11)" fg:x="732" fg:w="1"/><text x="58.9509%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="58.7009%" y="341" width="0.0802%" height="15" fill="rgb(211,213,45)" fg:x="732" fg:w="1"/><text x="58.9509%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="58.7009%" y="325" width="0.0802%" height="15" fill="rgb(205,88,11)" fg:x="732" fg:w="1"/><text x="58.9509%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="58.7009%" y="309" width="0.0802%" height="15" fill="rgb(252,69,26)" fg:x="732" fg:w="1"/><text x="58.9509%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="58.7009%" y="293" width="0.0802%" height="15" fill="rgb(246,123,37)" fg:x="732" fg:w="1"/><text x="58.9509%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="58.7009%" y="277" width="0.0802%" height="15" fill="rgb(212,205,5)" fg:x="732" fg:w="1"/><text x="58.9509%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="58.7009%" y="261" width="0.0802%" height="15" fill="rgb(253,148,0)" fg:x="732" fg:w="1"/><text x="58.9509%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="58.7009%" y="245" width="0.0802%" height="15" fill="rgb(239,22,4)" fg:x="732" fg:w="1"/><text x="58.9509%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="58.7009%" y="229" width="0.0802%" height="15" fill="rgb(226,26,53)" fg:x="732" fg:w="1"/><text x="58.9509%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="58.7009%" y="213" width="0.0802%" height="15" fill="rgb(225,229,45)" fg:x="732" fg:w="1"/><text x="58.9509%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="58.7009%" y="197" width="0.0802%" height="15" fill="rgb(220,60,37)" fg:x="732" fg:w="1"/><text x="58.9509%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="58.7009%" y="181" width="0.0802%" height="15" fill="rgb(217,180,35)" fg:x="732" fg:w="1"/><text x="58.9509%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="58.7009%" y="165" width="0.0802%" height="15" fill="rgb(229,7,53)" fg:x="732" fg:w="1"/><text x="58.9509%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="58.7009%" y="149" width="0.0802%" height="15" fill="rgb(254,137,3)" fg:x="732" fg:w="1"/><text x="58.9509%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.7009%" y="133" width="0.0802%" height="15" fill="rgb(215,140,41)" fg:x="732" fg:w="1"/><text x="58.9509%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="58.7009%" y="117" width="0.0802%" height="15" fill="rgb(250,80,15)" fg:x="732" fg:w="1"/><text x="58.9509%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.7009%" y="101" width="0.0802%" height="15" fill="rgb(252,191,6)" fg:x="732" fg:w="1"/><text x="58.9509%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="58.7009%" y="85" width="0.0802%" height="15" fill="rgb(246,217,18)" fg:x="732" fg:w="1"/><text x="58.9509%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="58.7009%" y="69" width="0.0802%" height="15" fill="rgb(223,93,7)" fg:x="732" fg:w="1"/><text x="58.9509%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="58.7009%" y="53" width="0.0802%" height="15" fill="rgb(225,55,52)" fg:x="732" fg:w="1"/><text x="58.9509%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.7009%" y="37" width="0.0802%" height="15" fill="rgb(240,31,24)" fg:x="732" fg:w="1"/><text x="58.9509%" y="47.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.7811%" y="517" width="0.0802%" height="15" fill="rgb(205,56,52)" fg:x="733" fg:w="1"/><text x="59.0311%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.8613%" y="341" width="0.0802%" height="15" fill="rgb(246,146,12)" fg:x="734" fg:w="1"/><text x="59.1113%" y="351.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="58.6207%" y="549" width="0.4010%" height="15" fill="rgb(239,84,36)" fg:x="731" fg:w="5"/><text x="58.8707%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="58.7811%" y="533" width="0.2406%" height="15" fill="rgb(207,41,40)" fg:x="733" fg:w="3"/><text x="59.0311%" y="543.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="58.8613%" y="517" width="0.1604%" height="15" fill="rgb(241,179,25)" fg:x="734" fg:w="2"/><text x="59.1113%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="58.8613%" y="501" width="0.1604%" height="15" fill="rgb(210,0,34)" fg:x="734" fg:w="2"/><text x="59.1113%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="58.8613%" y="485" width="0.1604%" height="15" fill="rgb(225,217,29)" fg:x="734" fg:w="2"/><text x="59.1113%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="58.8613%" y="469" width="0.1604%" height="15" fill="rgb(216,191,38)" fg:x="734" fg:w="2"/><text x="59.1113%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="58.8613%" y="453" width="0.1604%" height="15" fill="rgb(232,140,52)" fg:x="734" fg:w="2"/><text x="59.1113%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="58.8613%" y="437" width="0.1604%" height="15" fill="rgb(223,158,51)" fg:x="734" fg:w="2"/><text x="59.1113%" y="447.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="58.8613%" y="421" width="0.1604%" height="15" fill="rgb(235,29,51)" fg:x="734" fg:w="2"/><text x="59.1113%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.8613%" y="405" width="0.1604%" height="15" fill="rgb(215,181,18)" fg:x="734" fg:w="2"/><text x="59.1113%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.8613%" y="389" width="0.1604%" height="15" fill="rgb(227,125,34)" fg:x="734" fg:w="2"/><text x="59.1113%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.8613%" y="373" width="0.1604%" height="15" fill="rgb(230,197,49)" fg:x="734" fg:w="2"/><text x="59.1113%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.8613%" y="357" width="0.1604%" height="15" fill="rgb(239,141,16)" fg:x="734" fg:w="2"/><text x="59.1113%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.9415%" y="341" width="0.0802%" height="15" fill="rgb(225,105,43)" fg:x="735" fg:w="1"/><text x="59.1915%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.9415%" y="325" width="0.0802%" height="15" fill="rgb(214,131,14)" fg:x="735" fg:w="1"/><text x="59.1915%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.9415%" y="309" width="0.0802%" height="15" fill="rgb(229,177,11)" fg:x="735" fg:w="1"/><text x="59.1915%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.9415%" y="293" width="0.0802%" height="15" fill="rgb(231,180,14)" fg:x="735" fg:w="1"/><text x="59.1915%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="58.9415%" y="277" width="0.0802%" height="15" fill="rgb(232,88,2)" fg:x="735" fg:w="1"/><text x="59.1915%" y="287.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="58.9415%" y="261" width="0.0802%" height="15" fill="rgb(205,220,8)" fg:x="735" fg:w="1"/><text x="59.1915%" y="271.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (8 samples, 0.64%)</title><rect x="58.4603%" y="565" width="0.6415%" height="15" fill="rgb(225,23,53)" fg:x="729" fg:w="8"/><text x="58.7103%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="59.0217%" y="549" width="0.0802%" height="15" fill="rgb(213,62,29)" fg:x="736" fg:w="1"/><text x="59.2717%" y="559.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="59.0217%" y="533" width="0.0802%" height="15" fill="rgb(227,75,7)" fg:x="736" fg:w="1"/><text x="59.2717%" y="543.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="59.0217%" y="517" width="0.0802%" height="15" fill="rgb(207,105,14)" fg:x="736" fg:w="1"/><text x="59.2717%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="59.0217%" y="501" width="0.0802%" height="15" fill="rgb(245,62,29)" fg:x="736" fg:w="1"/><text x="59.2717%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.0217%" y="485" width="0.0802%" height="15" fill="rgb(236,202,4)" fg:x="736" fg:w="1"/><text x="59.2717%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.0217%" y="469" width="0.0802%" height="15" fill="rgb(250,67,1)" fg:x="736" fg:w="1"/><text x="59.2717%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="59.1820%" y="437" width="0.0802%" height="15" fill="rgb(253,115,44)" fg:x="738" fg:w="1"/><text x="59.4320%" y="447.50"></text></g><g><title>kernel::model::EntityKey::new (1 samples, 0.08%)</title><rect x="59.2622%" y="421" width="0.0802%" height="15" fill="rgb(251,139,18)" fg:x="739" fg:w="1"/><text x="59.5122%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.5028%" y="309" width="0.0802%" height="15" fill="rgb(218,22,32)" fg:x="742" fg:w="1"/><text x="59.7528%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.5028%" y="293" width="0.0802%" height="15" fill="rgb(243,53,5)" fg:x="742" fg:w="1"/><text x="59.7528%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="59.5028%" y="277" width="0.0802%" height="15" fill="rgb(227,56,16)" fg:x="742" fg:w="1"/><text x="59.7528%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="59.5028%" y="341" width="0.1604%" height="15" fill="rgb(245,53,0)" fg:x="742" fg:w="2"/><text x="59.7528%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.5028%" y="325" width="0.1604%" height="15" fill="rgb(216,170,35)" fg:x="742" fg:w="2"/><text x="59.7528%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.5830%" y="309" width="0.0802%" height="15" fill="rgb(211,200,8)" fg:x="743" fg:w="1"/><text x="59.8330%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.5830%" y="293" width="0.0802%" height="15" fill="rgb(228,204,44)" fg:x="743" fg:w="1"/><text x="59.8330%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.5830%" y="277" width="0.0802%" height="15" fill="rgb(214,121,17)" fg:x="743" fg:w="1"/><text x="59.8330%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.5830%" y="261" width="0.0802%" height="15" fill="rgb(233,64,38)" fg:x="743" fg:w="1"/><text x="59.8330%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.5830%" y="245" width="0.0802%" height="15" fill="rgb(253,54,19)" fg:x="743" fg:w="1"/><text x="59.8330%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="59.5830%" y="229" width="0.0802%" height="15" fill="rgb(253,94,18)" fg:x="743" fg:w="1"/><text x="59.8330%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="59.5830%" y="213" width="0.0802%" height="15" fill="rgb(227,57,52)" fg:x="743" fg:w="1"/><text x="59.8330%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.5830%" y="197" width="0.0802%" height="15" fill="rgb(230,228,50)" fg:x="743" fg:w="1"/><text x="59.8330%" y="207.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (5 samples, 0.40%)</title><rect x="59.3424%" y="405" width="0.4010%" height="15" fill="rgb(217,205,27)" fg:x="740" fg:w="5"/><text x="59.5924%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (5 samples, 0.40%)</title><rect x="59.3424%" y="389" width="0.4010%" height="15" fill="rgb(252,71,50)" fg:x="740" fg:w="5"/><text x="59.5924%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="59.3424%" y="373" width="0.4010%" height="15" fill="rgb(209,86,4)" fg:x="740" fg:w="5"/><text x="59.5924%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="59.3424%" y="357" width="0.4010%" height="15" fill="rgb(229,94,0)" fg:x="740" fg:w="5"/><text x="59.5924%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.6632%" y="341" width="0.0802%" height="15" fill="rgb(252,223,21)" fg:x="744" fg:w="1"/><text x="59.9132%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.6632%" y="325" width="0.0802%" height="15" fill="rgb(230,210,4)" fg:x="744" fg:w="1"/><text x="59.9132%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.8236%" y="357" width="0.0802%" height="15" fill="rgb(240,149,38)" fg:x="746" fg:w="1"/><text x="60.0736%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8236%" y="341" width="0.0802%" height="15" fill="rgb(254,105,20)" fg:x="746" fg:w="1"/><text x="60.0736%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="59.9038%" y="325" width="0.1604%" height="15" fill="rgb(253,87,46)" fg:x="747" fg:w="2"/><text x="60.1538%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="59.9038%" y="309" width="0.1604%" height="15" fill="rgb(253,116,33)" fg:x="747" fg:w="2"/><text x="60.1538%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.9038%" y="293" width="0.1604%" height="15" fill="rgb(229,198,5)" fg:x="747" fg:w="2"/><text x="60.1538%" y="303.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (15 samples, 1.20%)</title><rect x="59.1820%" y="517" width="1.2029%" height="15" fill="rgb(242,38,37)" fg:x="738" fg:w="15"/><text x="59.4320%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.20%)</title><rect x="59.1820%" y="501" width="1.2029%" height="15" fill="rgb(242,69,53)" fg:x="738" fg:w="15"/><text x="59.4320%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="59.1820%" y="485" width="1.2029%" height="15" fill="rgb(249,80,16)" fg:x="738" fg:w="15"/><text x="59.4320%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 1.20%)</title><rect x="59.1820%" y="469" width="1.2029%" height="15" fill="rgb(206,128,11)" fg:x="738" fg:w="15"/><text x="59.4320%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (15 samples, 1.20%)</title><rect x="59.1820%" y="453" width="1.2029%" height="15" fill="rgb(212,35,20)" fg:x="738" fg:w="15"/><text x="59.4320%" y="463.50"></text></g><g><title>engine::internal::Entities::prepare_entity (14 samples, 1.12%)</title><rect x="59.2622%" y="437" width="1.1227%" height="15" fill="rgb(236,79,13)" fg:x="739" fg:w="14"/><text x="59.5122%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity (13 samples, 1.04%)</title><rect x="59.3424%" y="421" width="1.0425%" height="15" fill="rgb(233,123,3)" fg:x="740" fg:w="13"/><text x="59.5924%" y="431.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="59.7434%" y="405" width="0.6415%" height="15" fill="rgb(214,93,52)" fg:x="745" fg:w="8"/><text x="59.9934%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (7 samples, 0.56%)</title><rect x="59.8236%" y="389" width="0.5613%" height="15" fill="rgb(251,37,40)" fg:x="746" fg:w="7"/><text x="60.0736%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="59.8236%" y="373" width="0.5613%" height="15" fill="rgb(227,80,54)" fg:x="746" fg:w="7"/><text x="60.0736%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.48%)</title><rect x="59.9038%" y="357" width="0.4812%" height="15" fill="rgb(254,48,11)" fg:x="747" fg:w="6"/><text x="60.1538%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="59.9038%" y="341" width="0.4812%" height="15" fill="rgb(235,193,26)" fg:x="747" fg:w="6"/><text x="60.1538%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="60.0642%" y="325" width="0.3208%" height="15" fill="rgb(229,99,21)" fg:x="749" fg:w="4"/><text x="60.3142%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="60.0642%" y="309" width="0.3208%" height="15" fill="rgb(211,140,41)" fg:x="749" fg:w="4"/><text x="60.3142%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="60.0642%" y="293" width="0.3208%" height="15" fill="rgb(240,227,30)" fg:x="749" fg:w="4"/><text x="60.3142%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="60.0642%" y="277" width="0.3208%" height="15" fill="rgb(215,224,45)" fg:x="749" fg:w="4"/><text x="60.3142%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="60.2245%" y="261" width="0.1604%" height="15" fill="rgb(206,123,31)" fg:x="751" fg:w="2"/><text x="60.4745%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.3047%" y="245" width="0.0802%" height="15" fill="rgb(210,138,16)" fg:x="752" fg:w="1"/><text x="60.5547%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="60.3047%" y="229" width="0.0802%" height="15" fill="rgb(228,57,28)" fg:x="752" fg:w="1"/><text x="60.5547%" y="239.50"></text></g><g><title>plugins_core::tools::get_contained_keys (17 samples, 1.36%)</title><rect x="59.1018%" y="565" width="1.3633%" height="15" fill="rgb(242,170,10)" fg:x="737" fg:w="17"/><text x="59.3518%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (17 samples, 1.36%)</title><rect x="59.1018%" y="549" width="1.3633%" height="15" fill="rgb(228,214,39)" fg:x="737" fg:w="17"/><text x="59.3518%" y="559.50"></text></g><g><title>kernel::model::Entity::load_scope (17 samples, 1.36%)</title><rect x="59.1018%" y="533" width="1.3633%" height="15" fill="rgb(218,179,33)" fg:x="737" fg:w="17"/><text x="59.3518%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.3849%" y="517" width="0.0802%" height="15" fill="rgb(235,193,39)" fg:x="753" fg:w="1"/><text x="60.6349%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.4651%" y="549" width="0.0802%" height="15" fill="rgb(219,221,36)" fg:x="754" fg:w="1"/><text x="60.7151%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.4651%" y="533" width="0.0802%" height="15" fill="rgb(248,218,19)" fg:x="754" fg:w="1"/><text x="60.7151%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.4651%" y="517" width="0.0802%" height="15" fill="rgb(205,50,9)" fg:x="754" fg:w="1"/><text x="60.7151%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.4651%" y="501" width="0.0802%" height="15" fill="rgb(238,81,28)" fg:x="754" fg:w="1"/><text x="60.7151%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.4651%" y="485" width="0.0802%" height="15" fill="rgb(235,110,19)" fg:x="754" fg:w="1"/><text x="60.7151%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.4651%" y="469" width="0.0802%" height="15" fill="rgb(214,7,14)" fg:x="754" fg:w="1"/><text x="60.7151%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.4651%" y="453" width="0.0802%" height="15" fill="rgb(211,77,3)" fg:x="754" fg:w="1"/><text x="60.7151%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.4651%" y="437" width="0.0802%" height="15" fill="rgb(229,5,9)" fg:x="754" fg:w="1"/><text x="60.7151%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.4651%" y="421" width="0.0802%" height="15" fill="rgb(225,90,11)" fg:x="754" fg:w="1"/><text x="60.7151%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.4651%" y="405" width="0.0802%" height="15" fill="rgb(242,56,8)" fg:x="754" fg:w="1"/><text x="60.7151%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.4651%" y="389" width="0.0802%" height="15" fill="rgb(249,212,39)" fg:x="754" fg:w="1"/><text x="60.7151%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.4651%" y="373" width="0.0802%" height="15" fill="rgb(236,90,9)" fg:x="754" fg:w="1"/><text x="60.7151%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.4651%" y="357" width="0.0802%" height="15" fill="rgb(206,88,35)" fg:x="754" fg:w="1"/><text x="60.7151%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 2.17%)</title><rect x="58.4603%" y="597" width="2.1652%" height="15" fill="rgb(205,126,30)" fg:x="729" fg:w="27"/><text x="58.7103%" y="607.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 2.17%)</title><rect x="58.4603%" y="581" width="2.1652%" height="15" fill="rgb(230,176,12)" fg:x="729" fg:w="27"/><text x="58.7103%" y="591.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="60.4651%" y="565" width="0.1604%" height="15" fill="rgb(243,19,9)" fg:x="754" fg:w="2"/><text x="60.7151%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="60.5453%" y="549" width="0.0802%" height="15" fill="rgb(245,171,17)" fg:x="755" fg:w="1"/><text x="60.7953%" y="559.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="60.5453%" y="533" width="0.0802%" height="15" fill="rgb(227,52,21)" fg:x="755" fg:w="1"/><text x="60.7953%" y="543.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="60.7859%" y="533" width="0.0802%" height="15" fill="rgb(238,69,14)" fg:x="758" fg:w="1"/><text x="61.0359%" y="543.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="60.7859%" y="517" width="0.0802%" height="15" fill="rgb(241,156,39)" fg:x="758" fg:w="1"/><text x="61.0359%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="60.7859%" y="549" width="0.2406%" height="15" fill="rgb(212,227,28)" fg:x="758" fg:w="3"/><text x="61.0359%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="60.8661%" y="533" width="0.1604%" height="15" fill="rgb(209,118,27)" fg:x="759" fg:w="2"/><text x="61.1161%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="60.9463%" y="517" width="0.0802%" height="15" fill="rgb(226,102,5)" fg:x="760" fg:w="1"/><text x="61.1963%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.9463%" y="501" width="0.0802%" height="15" fill="rgb(223,34,3)" fg:x="760" fg:w="1"/><text x="61.1963%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.9463%" y="485" width="0.0802%" height="15" fill="rgb(221,81,38)" fg:x="760" fg:w="1"/><text x="61.1963%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.9463%" y="469" width="0.0802%" height="15" fill="rgb(236,219,28)" fg:x="760" fg:w="1"/><text x="61.1963%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="60.9463%" y="453" width="0.0802%" height="15" fill="rgb(213,200,14)" fg:x="760" fg:w="1"/><text x="61.1963%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="60.9463%" y="437" width="0.0802%" height="15" fill="rgb(240,33,19)" fg:x="760" fg:w="1"/><text x="61.1963%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.9463%" y="421" width="0.0802%" height="15" fill="rgb(233,113,27)" fg:x="760" fg:w="1"/><text x="61.1963%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.9463%" y="405" width="0.0802%" height="15" fill="rgb(220,221,18)" fg:x="760" fg:w="1"/><text x="61.1963%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="61.9888%" y="341" width="0.0802%" height="15" fill="rgb(238,92,8)" fg:x="773" fg:w="1"/><text x="62.2388%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="61.9888%" y="325" width="0.0802%" height="15" fill="rgb(222,164,16)" fg:x="773" fg:w="1"/><text x="62.2388%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="61.9888%" y="309" width="0.0802%" height="15" fill="rgb(241,119,3)" fg:x="773" fg:w="1"/><text x="62.2388%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.0690%" y="341" width="0.0802%" height="15" fill="rgb(241,44,8)" fg:x="774" fg:w="1"/><text x="62.3190%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="61.9086%" y="357" width="0.3208%" height="15" fill="rgb(230,36,40)" fg:x="772" fg:w="4"/><text x="62.1586%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.1492%" y="341" width="0.0802%" height="15" fill="rgb(243,16,36)" fg:x="775" fg:w="1"/><text x="62.3992%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.1492%" y="325" width="0.0802%" height="15" fill="rgb(231,4,26)" fg:x="775" fg:w="1"/><text x="62.3992%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="61.7482%" y="373" width="0.5613%" height="15" fill="rgb(240,9,31)" fg:x="770" fg:w="7"/><text x="61.9982%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="62.2294%" y="357" width="0.0802%" height="15" fill="rgb(207,173,15)" fg:x="776" fg:w="1"/><text x="62.4794%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2294%" y="341" width="0.0802%" height="15" fill="rgb(224,192,53)" fg:x="776" fg:w="1"/><text x="62.4794%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.72%)</title><rect x="61.7482%" y="389" width="0.7217%" height="15" fill="rgb(223,67,28)" fg:x="770" fg:w="9"/><text x="61.9982%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="62.3095%" y="373" width="0.1604%" height="15" fill="rgb(211,20,47)" fg:x="777" fg:w="2"/><text x="62.5595%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="62.3095%" y="357" width="0.1604%" height="15" fill="rgb(240,228,2)" fg:x="777" fg:w="2"/><text x="62.5595%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="62.3897%" y="341" width="0.0802%" height="15" fill="rgb(248,151,12)" fg:x="778" fg:w="1"/><text x="62.6397%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="62.3897%" y="325" width="0.0802%" height="15" fill="rgb(244,8,39)" fg:x="778" fg:w="1"/><text x="62.6397%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="62.3897%" y="309" width="0.0802%" height="15" fill="rgb(222,26,8)" fg:x="778" fg:w="1"/><text x="62.6397%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.3897%" y="293" width="0.0802%" height="15" fill="rgb(213,106,44)" fg:x="778" fg:w="1"/><text x="62.6397%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (14 samples, 1.12%)</title><rect x="61.4274%" y="437" width="1.1227%" height="15" fill="rgb(214,129,20)" fg:x="766" fg:w="14"/><text x="61.6774%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="61.5878%" y="421" width="0.9623%" height="15" fill="rgb(212,32,13)" fg:x="768" fg:w="12"/><text x="61.8378%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.96%)</title><rect x="61.5878%" y="405" width="0.9623%" height="15" fill="rgb(208,168,33)" fg:x="768" fg:w="12"/><text x="61.8378%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.4699%" y="389" width="0.0802%" height="15" fill="rgb(231,207,8)" fg:x="779" fg:w="1"/><text x="62.7199%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.44%)</title><rect x="61.1868%" y="453" width="1.4435%" height="15" fill="rgb(235,219,23)" fg:x="763" fg:w="18"/><text x="61.4368%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.5501%" y="437" width="0.0802%" height="15" fill="rgb(226,216,26)" fg:x="780" fg:w="1"/><text x="62.8001%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.5501%" y="421" width="0.0802%" height="15" fill="rgb(239,137,16)" fg:x="780" fg:w="1"/><text x="62.8001%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="62.5501%" y="405" width="0.0802%" height="15" fill="rgb(207,12,36)" fg:x="780" fg:w="1"/><text x="62.8001%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 1.68%)</title><rect x="61.0265%" y="501" width="1.6840%" height="15" fill="rgb(210,214,24)" fg:x="761" fg:w="21"/><text x="61.2765%" y="511.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (20 samples, 1.60%)</title><rect x="61.1067%" y="485" width="1.6038%" height="15" fill="rgb(206,56,30)" fg:x="762" fg:w="20"/><text x="61.3567%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 1.60%)</title><rect x="61.1067%" y="469" width="1.6038%" height="15" fill="rgb(228,143,26)" fg:x="762" fg:w="20"/><text x="61.3567%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="62.6303%" y="453" width="0.0802%" height="15" fill="rgb(216,218,46)" fg:x="781" fg:w="1"/><text x="62.8803%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6303%" y="437" width="0.0802%" height="15" fill="rgb(206,6,19)" fg:x="781" fg:w="1"/><text x="62.8803%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (22 samples, 1.76%)</title><rect x="61.0265%" y="533" width="1.7642%" height="15" fill="rgb(239,177,51)" fg:x="761" fg:w="22"/><text x="61.2765%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (22 samples, 1.76%)</title><rect x="61.0265%" y="517" width="1.7642%" height="15" fill="rgb(216,55,25)" fg:x="761" fg:w="22"/><text x="61.2765%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="62.7105%" y="501" width="0.0802%" height="15" fill="rgb(231,163,29)" fg:x="782" fg:w="1"/><text x="62.9605%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7105%" y="485" width="0.0802%" height="15" fill="rgb(232,149,50)" fg:x="782" fg:w="1"/><text x="62.9605%" y="495.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="62.7907%" y="485" width="0.2406%" height="15" fill="rgb(223,142,48)" fg:x="783" fg:w="3"/><text x="63.0407%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="63.0313%" y="485" width="0.1604%" height="15" fill="rgb(245,83,23)" fg:x="786" fg:w="2"/><text x="63.2813%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (3 samples, 0.24%)</title><rect x="63.1917%" y="485" width="0.2406%" height="15" fill="rgb(224,63,2)" fg:x="788" fg:w="3"/><text x="63.4417%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="63.2719%" y="469" width="0.1604%" height="15" fill="rgb(218,65,53)" fg:x="789" fg:w="2"/><text x="63.5219%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="63.2719%" y="453" width="0.1604%" height="15" fill="rgb(221,84,29)" fg:x="789" fg:w="2"/><text x="63.5219%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="63.3520%" y="437" width="0.0802%" height="15" fill="rgb(234,0,32)" fg:x="790" fg:w="1"/><text x="63.6020%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="63.4322%" y="485" width="0.0802%" height="15" fill="rgb(206,20,16)" fg:x="791" fg:w="1"/><text x="63.6822%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="63.4322%" y="469" width="0.0802%" height="15" fill="rgb(244,172,18)" fg:x="791" fg:w="1"/><text x="63.6822%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.4322%" y="453" width="0.0802%" height="15" fill="rgb(254,133,1)" fg:x="791" fg:w="1"/><text x="63.6822%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.4322%" y="437" width="0.0802%" height="15" fill="rgb(222,206,41)" fg:x="791" fg:w="1"/><text x="63.6822%" y="447.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="63.4322%" y="421" width="0.0802%" height="15" fill="rgb(212,3,42)" fg:x="791" fg:w="1"/><text x="63.6822%" y="431.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="63.4322%" y="405" width="0.0802%" height="15" fill="rgb(241,11,4)" fg:x="791" fg:w="1"/><text x="63.6822%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="63.5124%" y="469" width="0.0802%" height="15" fill="rgb(205,19,26)" fg:x="792" fg:w="1"/><text x="63.7624%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="63.5124%" y="485" width="0.1604%" height="15" fill="rgb(210,179,32)" fg:x="792" fg:w="2"/><text x="63.7624%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="63.5926%" y="469" width="0.0802%" height="15" fill="rgb(227,116,49)" fg:x="793" fg:w="1"/><text x="63.8426%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="63.5926%" y="453" width="0.0802%" height="15" fill="rgb(211,146,6)" fg:x="793" fg:w="1"/><text x="63.8426%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.5926%" y="437" width="0.0802%" height="15" fill="rgb(219,44,39)" fg:x="793" fg:w="1"/><text x="63.8426%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.5926%" y="421" width="0.0802%" height="15" fill="rgb(234,128,11)" fg:x="793" fg:w="1"/><text x="63.8426%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="63.5926%" y="405" width="0.0802%" height="15" fill="rgb(220,183,53)" fg:x="793" fg:w="1"/><text x="63.8426%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7530%" y="469" width="0.0802%" height="15" fill="rgb(213,219,32)" fg:x="795" fg:w="1"/><text x="64.0030%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="63.8332%" y="437" width="0.1604%" height="15" fill="rgb(232,156,16)" fg:x="796" fg:w="2"/><text x="64.0832%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.9134%" y="421" width="0.0802%" height="15" fill="rgb(246,135,34)" fg:x="797" fg:w="1"/><text x="64.1634%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9134%" y="405" width="0.0802%" height="15" fill="rgb(241,99,0)" fg:x="797" fg:w="1"/><text x="64.1634%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="63.9936%" y="437" width="0.2406%" height="15" fill="rgb(222,103,45)" fg:x="798" fg:w="3"/><text x="64.2436%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="63.9936%" y="421" width="0.2406%" height="15" fill="rgb(212,57,4)" fg:x="798" fg:w="3"/><text x="64.2436%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="64.0738%" y="405" width="0.1604%" height="15" fill="rgb(215,68,47)" fg:x="799" fg:w="2"/><text x="64.3238%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="64.0738%" y="389" width="0.1604%" height="15" fill="rgb(230,84,2)" fg:x="799" fg:w="2"/><text x="64.3238%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="64.0738%" y="373" width="0.1604%" height="15" fill="rgb(220,102,14)" fg:x="799" fg:w="2"/><text x="64.3238%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.0738%" y="357" width="0.1604%" height="15" fill="rgb(240,10,32)" fg:x="799" fg:w="2"/><text x="64.3238%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="64.2342%" y="421" width="0.0802%" height="15" fill="rgb(215,47,27)" fg:x="801" fg:w="1"/><text x="64.4842%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="64.2342%" y="405" width="0.0802%" height="15" fill="rgb(233,188,43)" fg:x="801" fg:w="1"/><text x="64.4842%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2342%" y="389" width="0.0802%" height="15" fill="rgb(253,190,1)" fg:x="801" fg:w="1"/><text x="64.4842%" y="399.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (83 samples, 6.66%)</title><rect x="57.7386%" y="677" width="6.6560%" height="15" fill="rgb(206,114,52)" fg:x="720" fg:w="83"/><text x="57.9886%" y="687.50">kernel::p..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (83 samples, 6.66%)</title><rect x="57.7386%" y="661" width="6.6560%" height="15" fill="rgb(233,120,37)" fg:x="720" fg:w="83"/><text x="57.9886%" y="671.50">&lt;plugins_..</text></g><g><title>plugins_rpc::querying::have_surroundings (79 samples, 6.34%)</title><rect x="58.0593%" y="645" width="6.3352%" height="15" fill="rgb(214,52,39)" fg:x="724" fg:w="79"/><text x="58.3093%" y="655.50">plugins_..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (79 samples, 6.34%)</title><rect x="58.0593%" y="629" width="6.3352%" height="15" fill="rgb(223,80,29)" fg:x="724" fg:w="79"/><text x="58.3093%" y="639.50">&lt;plugins..</text></g><g><title>core::iter::adapters::try_process (74 samples, 5.93%)</title><rect x="58.4603%" y="613" width="5.9342%" height="15" fill="rgb(230,101,40)" fg:x="729" fg:w="74"/><text x="58.7103%" y="623.50">core::it..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (47 samples, 3.77%)</title><rect x="60.6255%" y="597" width="3.7690%" height="15" fill="rgb(219,211,8)" fg:x="756" fg:w="47"/><text x="60.8755%" y="607.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (46 samples, 3.69%)</title><rect x="60.7057%" y="581" width="3.6889%" height="15" fill="rgb(252,126,28)" fg:x="757" fg:w="46"/><text x="60.9557%" y="591.50">&lt;cor..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (46 samples, 3.69%)</title><rect x="60.7057%" y="565" width="3.6889%" height="15" fill="rgb(215,56,38)" fg:x="757" fg:w="46"/><text x="60.9557%" y="575.50">plug..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (42 samples, 3.37%)</title><rect x="61.0265%" y="549" width="3.3681%" height="15" fill="rgb(249,55,44)" fg:x="761" fg:w="42"/><text x="61.2765%" y="559.50">&lt;rp..</text></g><g><title>kernel::model::EntityPtr::to_json_value (20 samples, 1.60%)</title><rect x="62.7907%" y="533" width="1.6038%" height="15" fill="rgb(220,221,32)" fg:x="783" fg:w="20"/><text x="63.0407%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (20 samples, 1.60%)</title><rect x="62.7907%" y="517" width="1.6038%" height="15" fill="rgb(212,216,41)" fg:x="783" fg:w="20"/><text x="63.0407%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (20 samples, 1.60%)</title><rect x="62.7907%" y="501" width="1.6038%" height="15" fill="rgb(228,213,43)" fg:x="783" fg:w="20"/><text x="63.0407%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="63.6728%" y="485" width="0.7217%" height="15" fill="rgb(211,31,26)" fg:x="794" fg:w="9"/><text x="63.9228%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (7 samples, 0.56%)</title><rect x="63.8332%" y="469" width="0.5613%" height="15" fill="rgb(229,202,19)" fg:x="796" fg:w="7"/><text x="64.0832%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="63.8332%" y="453" width="0.5613%" height="15" fill="rgb(229,105,46)" fg:x="796" fg:w="7"/><text x="64.0832%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="64.2342%" y="437" width="0.1604%" height="15" fill="rgb(235,108,1)" fg:x="801" fg:w="2"/><text x="64.4842%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3144%" y="421" width="0.0802%" height="15" fill="rgb(245,111,35)" fg:x="802" fg:w="1"/><text x="64.5644%" y="431.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="64.3945%" y="613" width="0.0802%" height="15" fill="rgb(219,185,31)" fg:x="803" fg:w="1"/><text x="64.6445%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (805 samples, 64.55%)</title><rect x="0.0000%" y="757" width="64.5549%" height="15" fill="rgb(214,4,43)" fg:x="0" fg:w="805"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (805 samples, 64.55%)</title><rect x="0.0000%" y="741" width="64.5549%" height="15" fill="rgb(235,227,40)" fg:x="0" fg:w="805"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (805 samples, 64.55%)</title><rect x="0.0000%" y="725" width="64.5549%" height="15" fill="rgb(230,88,30)" fg:x="0" fg:w="805"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (682 samples, 54.69%)</title><rect x="9.8637%" y="709" width="54.6913%" height="15" fill="rgb(216,217,1)" fg:x="123" fg:w="682"/><text x="10.1137%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (682 samples, 54.69%)</title><rect x="9.8637%" y="693" width="54.6913%" height="15" fill="rgb(248,139,50)" fg:x="123" fg:w="682"/><text x="10.1137%" y="703.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>std::time::Instant::elapsed (2 samples, 0.16%)</title><rect x="64.3945%" y="677" width="0.1604%" height="15" fill="rgb(233,1,21)" fg:x="803" fg:w="2"/><text x="64.6445%" y="687.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.16%)</title><rect x="64.3945%" y="661" width="0.1604%" height="15" fill="rgb(215,183,12)" fg:x="803" fg:w="2"/><text x="64.6445%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.16%)</title><rect x="64.3945%" y="645" width="0.1604%" height="15" fill="rgb(229,104,42)" fg:x="803" fg:w="2"/><text x="64.6445%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="64.3945%" y="629" width="0.1604%" height="15" fill="rgb(243,34,48)" fg:x="803" fg:w="2"/><text x="64.6445%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="64.4747%" y="613" width="0.0802%" height="15" fill="rgb(239,11,44)" fg:x="804" fg:w="1"/><text x="64.7247%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.5549%" y="565" width="0.0802%" height="15" fill="rgb(231,98,35)" fg:x="805" fg:w="1"/><text x="64.8049%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="64.5549%" y="549" width="0.0802%" height="15" fill="rgb(233,28,25)" fg:x="805" fg:w="1"/><text x="64.8049%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5549%" y="533" width="0.0802%" height="15" fill="rgb(234,123,11)" fg:x="805" fg:w="1"/><text x="64.8049%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.5549%" y="709" width="0.1604%" height="15" fill="rgb(220,69,3)" fg:x="805" fg:w="2"/><text x="64.8049%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (2 samples, 0.16%)</title><rect x="64.5549%" y="693" width="0.1604%" height="15" fill="rgb(214,64,36)" fg:x="805" fg:w="2"/><text x="64.8049%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.5549%" y="677" width="0.1604%" height="15" fill="rgb(211,138,32)" fg:x="805" fg:w="2"/><text x="64.8049%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="64.5549%" y="661" width="0.1604%" height="15" fill="rgb(213,118,47)" fg:x="805" fg:w="2"/><text x="64.8049%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.5549%" y="645" width="0.1604%" height="15" fill="rgb(243,124,49)" fg:x="805" fg:w="2"/><text x="64.8049%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="64.5549%" y="629" width="0.1604%" height="15" fill="rgb(221,30,28)" fg:x="805" fg:w="2"/><text x="64.8049%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="64.5549%" y="613" width="0.1604%" height="15" fill="rgb(246,37,13)" fg:x="805" fg:w="2"/><text x="64.8049%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="64.5549%" y="597" width="0.1604%" height="15" fill="rgb(249,66,14)" fg:x="805" fg:w="2"/><text x="64.8049%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="64.5549%" y="581" width="0.1604%" height="15" fill="rgb(213,166,5)" fg:x="805" fg:w="2"/><text x="64.8049%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.6351%" y="565" width="0.0802%" height="15" fill="rgb(221,66,24)" fg:x="806" fg:w="1"/><text x="64.8851%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.7153%" y="645" width="0.0802%" height="15" fill="rgb(210,132,17)" fg:x="807" fg:w="1"/><text x="64.9653%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="64.7153%" y="677" width="0.1604%" height="15" fill="rgb(243,202,5)" fg:x="807" fg:w="2"/><text x="64.9653%" y="687.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="64.7153%" y="661" width="0.1604%" height="15" fill="rgb(233,70,48)" fg:x="807" fg:w="2"/><text x="64.9653%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="64.7955%" y="645" width="0.0802%" height="15" fill="rgb(238,41,26)" fg:x="808" fg:w="1"/><text x="65.0455%" y="655.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="64.7955%" y="629" width="0.0802%" height="15" fill="rgb(241,19,31)" fg:x="808" fg:w="1"/><text x="65.0455%" y="639.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="64.7955%" y="613" width="0.0802%" height="15" fill="rgb(214,76,10)" fg:x="808" fg:w="1"/><text x="65.0455%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (3 samples, 0.24%)</title><rect x="64.7153%" y="709" width="0.2406%" height="15" fill="rgb(254,202,22)" fg:x="807" fg:w="3"/><text x="64.9653%" y="719.50"></text></g><g><title>engine::session::Session::new (3 samples, 0.24%)</title><rect x="64.7153%" y="693" width="0.2406%" height="15" fill="rgb(214,72,24)" fg:x="807" fg:w="3"/><text x="64.9653%" y="703.50"></text></g><g><title>engine::session::Session::initialize (1 samples, 0.08%)</title><rect x="64.8757%" y="677" width="0.0802%" height="15" fill="rgb(221,92,46)" fg:x="809" fg:w="1"/><text x="65.1257%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="64.8757%" y="661" width="0.0802%" height="15" fill="rgb(246,13,50)" fg:x="809" fg:w="1"/><text x="65.1257%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="64.8757%" y="645" width="0.0802%" height="15" fill="rgb(240,165,38)" fg:x="809" fg:w="1"/><text x="65.1257%" y="655.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.08%)</title><rect x="64.8757%" y="629" width="0.0802%" height="15" fill="rgb(241,24,51)" fg:x="809" fg:w="1"/><text x="65.1257%" y="639.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="64.8757%" y="613" width="0.0802%" height="15" fill="rgb(227,51,44)" fg:x="809" fg:w="1"/><text x="65.1257%" y="623.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="64.8757%" y="597" width="0.0802%" height="15" fill="rgb(231,121,3)" fg:x="809" fg:w="1"/><text x="65.1257%" y="607.50"></text></g><g><title>_IO_default_uflow (1 samples, 0.08%)</title><rect x="64.8757%" y="581" width="0.0802%" height="15" fill="rgb(245,3,41)" fg:x="809" fg:w="1"/><text x="65.1257%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="65.0361%" y="613" width="0.0802%" height="15" fill="rgb(214,13,26)" fg:x="811" fg:w="1"/><text x="65.2861%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.0361%" y="597" width="0.0802%" height="15" fill="rgb(252,75,11)" fg:x="811" fg:w="1"/><text x="65.2861%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.0361%" y="581" width="0.0802%" height="15" fill="rgb(218,226,17)" fg:x="811" fg:w="1"/><text x="65.2861%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.1163%" y="597" width="0.0802%" height="15" fill="rgb(248,89,38)" fg:x="812" fg:w="1"/><text x="65.3663%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="65.1965%" y="581" width="0.0802%" height="15" fill="rgb(237,73,46)" fg:x="813" fg:w="1"/><text x="65.4465%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.1965%" y="565" width="0.0802%" height="15" fill="rgb(242,78,33)" fg:x="813" fg:w="1"/><text x="65.4465%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="65.1163%" y="613" width="0.2406%" height="15" fill="rgb(235,60,3)" fg:x="812" fg:w="3"/><text x="65.3663%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.1965%" y="597" width="0.1604%" height="15" fill="rgb(216,172,19)" fg:x="813" fg:w="2"/><text x="65.4465%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.2767%" y="581" width="0.0802%" height="15" fill="rgb(227,6,42)" fg:x="814" fg:w="1"/><text x="65.5267%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.2767%" y="565" width="0.0802%" height="15" fill="rgb(223,207,42)" fg:x="814" fg:w="1"/><text x="65.5267%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.2767%" y="549" width="0.0802%" height="15" fill="rgb(246,138,30)" fg:x="814" fg:w="1"/><text x="65.5267%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.2767%" y="533" width="0.0802%" height="15" fill="rgb(251,199,47)" fg:x="814" fg:w="1"/><text x="65.5267%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="65.0361%" y="629" width="0.4010%" height="15" fill="rgb(228,218,44)" fg:x="811" fg:w="5"/><text x="65.2861%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.3569%" y="613" width="0.0802%" height="15" fill="rgb(220,68,6)" fg:x="815" fg:w="1"/><text x="65.6069%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.3569%" y="597" width="0.0802%" height="15" fill="rgb(240,60,26)" fg:x="815" fg:w="1"/><text x="65.6069%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.3569%" y="581" width="0.0802%" height="15" fill="rgb(211,200,19)" fg:x="815" fg:w="1"/><text x="65.6069%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.3569%" y="565" width="0.0802%" height="15" fill="rgb(242,145,30)" fg:x="815" fg:w="1"/><text x="65.6069%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.3569%" y="549" width="0.0802%" height="15" fill="rgb(225,64,13)" fg:x="815" fg:w="1"/><text x="65.6069%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3569%" y="533" width="0.0802%" height="15" fill="rgb(218,103,35)" fg:x="815" fg:w="1"/><text x="65.6069%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.4370%" y="629" width="0.0802%" height="15" fill="rgb(216,93,46)" fg:x="816" fg:w="1"/><text x="65.6870%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.4370%" y="613" width="0.0802%" height="15" fill="rgb(225,159,27)" fg:x="816" fg:w="1"/><text x="65.6870%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.4370%" y="597" width="0.0802%" height="15" fill="rgb(225,204,11)" fg:x="816" fg:w="1"/><text x="65.6870%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.4370%" y="581" width="0.0802%" height="15" fill="rgb(205,56,4)" fg:x="816" fg:w="1"/><text x="65.6870%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="65.5172%" y="581" width="0.0802%" height="15" fill="rgb(206,6,35)" fg:x="817" fg:w="1"/><text x="65.7672%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.5172%" y="565" width="0.0802%" height="15" fill="rgb(247,73,52)" fg:x="817" fg:w="1"/><text x="65.7672%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5172%" y="549" width="0.0802%" height="15" fill="rgb(246,97,4)" fg:x="817" fg:w="1"/><text x="65.7672%" y="559.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="65.0361%" y="693" width="0.6415%" height="15" fill="rgb(212,37,15)" fg:x="811" fg:w="8"/><text x="65.2861%" y="703.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.64%)</title><rect x="65.0361%" y="677" width="0.6415%" height="15" fill="rgb(208,130,40)" fg:x="811" fg:w="8"/><text x="65.2861%" y="687.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.64%)</title><rect x="65.0361%" y="661" width="0.6415%" height="15" fill="rgb(236,55,29)" fg:x="811" fg:w="8"/><text x="65.2861%" y="671.50"></text></g><g><title>engine::session::Session::check_for_changes (8 samples, 0.64%)</title><rect x="65.0361%" y="645" width="0.6415%" height="15" fill="rgb(209,156,45)" fg:x="811" fg:w="8"/><text x="65.2861%" y="655.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="65.5172%" y="629" width="0.1604%" height="15" fill="rgb(249,107,4)" fg:x="817" fg:w="2"/><text x="65.7672%" y="639.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="65.5172%" y="613" width="0.1604%" height="15" fill="rgb(227,7,13)" fg:x="817" fg:w="2"/><text x="65.7672%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="65.5172%" y="597" width="0.1604%" height="15" fill="rgb(250,129,14)" fg:x="817" fg:w="2"/><text x="65.7672%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="65.5974%" y="581" width="0.0802%" height="15" fill="rgb(229,92,13)" fg:x="818" fg:w="1"/><text x="65.8474%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="65.5974%" y="565" width="0.0802%" height="15" fill="rgb(245,98,39)" fg:x="818" fg:w="1"/><text x="65.8474%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="65.5974%" y="549" width="0.0802%" height="15" fill="rgb(234,135,48)" fg:x="818" fg:w="1"/><text x="65.8474%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="65.5974%" y="533" width="0.0802%" height="15" fill="rgb(230,98,28)" fg:x="818" fg:w="1"/><text x="65.8474%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="65.5974%" y="517" width="0.0802%" height="15" fill="rgb(223,121,0)" fg:x="818" fg:w="1"/><text x="65.8474%" y="527.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="65.5974%" y="501" width="0.0802%" height="15" fill="rgb(234,173,33)" fg:x="818" fg:w="1"/><text x="65.8474%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="65.5974%" y="485" width="0.0802%" height="15" fill="rgb(245,47,8)" fg:x="818" fg:w="1"/><text x="65.8474%" y="495.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="65.6776%" y="693" width="0.0802%" height="15" fill="rgb(205,17,20)" fg:x="819" fg:w="1"/><text x="65.9276%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="65.6776%" y="677" width="0.0802%" height="15" fill="rgb(232,151,16)" fg:x="819" fg:w="1"/><text x="65.9276%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="65.6776%" y="661" width="0.0802%" height="15" fill="rgb(208,30,32)" fg:x="819" fg:w="1"/><text x="65.9276%" y="671.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="65.6776%" y="645" width="0.0802%" height="15" fill="rgb(254,26,3)" fg:x="819" fg:w="1"/><text x="65.9276%" y="655.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="65.6776%" y="629" width="0.0802%" height="15" fill="rgb(240,177,30)" fg:x="819" fg:w="1"/><text x="65.9276%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="65.7578%" y="677" width="0.0802%" height="15" fill="rgb(248,76,44)" fg:x="820" fg:w="1"/><text x="66.0078%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="65.7578%" y="661" width="0.0802%" height="15" fill="rgb(241,186,54)" fg:x="820" fg:w="1"/><text x="66.0078%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.7578%" y="645" width="0.0802%" height="15" fill="rgb(249,171,29)" fg:x="820" fg:w="1"/><text x="66.0078%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.7578%" y="629" width="0.0802%" height="15" fill="rgb(237,151,44)" fg:x="820" fg:w="1"/><text x="66.0078%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.7578%" y="613" width="0.0802%" height="15" fill="rgb(228,174,30)" fg:x="820" fg:w="1"/><text x="66.0078%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.7578%" y="597" width="0.0802%" height="15" fill="rgb(252,14,37)" fg:x="820" fg:w="1"/><text x="66.0078%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.7578%" y="581" width="0.0802%" height="15" fill="rgb(207,111,40)" fg:x="820" fg:w="1"/><text x="66.0078%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.7578%" y="565" width="0.0802%" height="15" fill="rgb(248,171,54)" fg:x="820" fg:w="1"/><text x="66.0078%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.7578%" y="549" width="0.0802%" height="15" fill="rgb(211,127,2)" fg:x="820" fg:w="1"/><text x="66.0078%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.7578%" y="533" width="0.0802%" height="15" fill="rgb(236,87,47)" fg:x="820" fg:w="1"/><text x="66.0078%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.7578%" y="517" width="0.0802%" height="15" fill="rgb(223,190,45)" fg:x="820" fg:w="1"/><text x="66.0078%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.7578%" y="501" width="0.0802%" height="15" fill="rgb(215,5,16)" fg:x="820" fg:w="1"/><text x="66.0078%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.7578%" y="485" width="0.0802%" height="15" fill="rgb(252,82,33)" fg:x="820" fg:w="1"/><text x="66.0078%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="65.7578%" y="469" width="0.0802%" height="15" fill="rgb(247,213,44)" fg:x="820" fg:w="1"/><text x="66.0078%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="65.7578%" y="453" width="0.0802%" height="15" fill="rgb(205,196,44)" fg:x="820" fg:w="1"/><text x="66.0078%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="65.8380%" y="677" width="0.0802%" height="15" fill="rgb(237,96,54)" fg:x="821" fg:w="1"/><text x="66.0880%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.8380%" y="661" width="0.0802%" height="15" fill="rgb(230,113,34)" fg:x="821" fg:w="1"/><text x="66.0880%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="65.8380%" y="645" width="0.0802%" height="15" fill="rgb(221,224,12)" fg:x="821" fg:w="1"/><text x="66.0880%" y="655.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="65.8380%" y="629" width="0.0802%" height="15" fill="rgb(219,112,44)" fg:x="821" fg:w="1"/><text x="66.0880%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="65.8380%" y="613" width="0.0802%" height="15" fill="rgb(210,31,13)" fg:x="821" fg:w="1"/><text x="66.0880%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="65.8380%" y="597" width="0.0802%" height="15" fill="rgb(230,25,16)" fg:x="821" fg:w="1"/><text x="66.0880%" y="607.50"></text></g><g><title>kernel::model::Entity::gid (1 samples, 0.08%)</title><rect x="65.8380%" y="581" width="0.0802%" height="15" fill="rgb(246,108,53)" fg:x="821" fg:w="1"/><text x="66.0880%" y="591.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="65.8380%" y="565" width="0.0802%" height="15" fill="rgb(241,172,50)" fg:x="821" fg:w="1"/><text x="66.0880%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.9182%" y="581" width="0.0802%" height="15" fill="rgb(235,141,10)" fg:x="822" fg:w="1"/><text x="66.1682%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.9182%" y="565" width="0.0802%" height="15" fill="rgb(220,174,43)" fg:x="822" fg:w="1"/><text x="66.1682%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.9182%" y="549" width="0.0802%" height="15" fill="rgb(215,181,40)" fg:x="822" fg:w="1"/><text x="66.1682%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.9182%" y="533" width="0.0802%" height="15" fill="rgb(230,97,2)" fg:x="822" fg:w="1"/><text x="66.1682%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.9182%" y="517" width="0.0802%" height="15" fill="rgb(211,25,27)" fg:x="822" fg:w="1"/><text x="66.1682%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.9182%" y="501" width="0.0802%" height="15" fill="rgb(230,87,26)" fg:x="822" fg:w="1"/><text x="66.1682%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.9182%" y="485" width="0.0802%" height="15" fill="rgb(227,160,17)" fg:x="822" fg:w="1"/><text x="66.1682%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.9984%" y="549" width="0.0802%" height="15" fill="rgb(244,85,34)" fg:x="823" fg:w="1"/><text x="66.2484%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.9984%" y="533" width="0.0802%" height="15" fill="rgb(207,70,0)" fg:x="823" fg:w="1"/><text x="66.2484%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="65.9984%" y="565" width="0.1604%" height="15" fill="rgb(223,129,7)" fg:x="823" fg:w="2"/><text x="66.2484%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.0786%" y="549" width="0.0802%" height="15" fill="rgb(246,105,7)" fg:x="824" fg:w="1"/><text x="66.3286%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.0786%" y="533" width="0.0802%" height="15" fill="rgb(215,154,42)" fg:x="824" fg:w="1"/><text x="66.3286%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.0786%" y="517" width="0.0802%" height="15" fill="rgb(220,215,30)" fg:x="824" fg:w="1"/><text x="66.3286%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="65.9984%" y="581" width="0.2406%" height="15" fill="rgb(228,81,51)" fg:x="823" fg:w="3"/><text x="66.2484%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.1588%" y="565" width="0.0802%" height="15" fill="rgb(247,71,54)" fg:x="825" fg:w="1"/><text x="66.4088%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="65.9182%" y="613" width="0.4010%" height="15" fill="rgb(234,176,34)" fg:x="822" fg:w="5"/><text x="66.1682%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="65.9182%" y="597" width="0.4010%" height="15" fill="rgb(241,103,54)" fg:x="822" fg:w="5"/><text x="66.1682%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.2390%" y="581" width="0.0802%" height="15" fill="rgb(228,22,34)" fg:x="826" fg:w="1"/><text x="66.4890%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.2390%" y="565" width="0.0802%" height="15" fill="rgb(241,179,48)" fg:x="826" fg:w="1"/><text x="66.4890%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.2390%" y="549" width="0.0802%" height="15" fill="rgb(235,167,37)" fg:x="826" fg:w="1"/><text x="66.4890%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.2390%" y="533" width="0.0802%" height="15" fill="rgb(213,109,30)" fg:x="826" fg:w="1"/><text x="66.4890%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2390%" y="517" width="0.0802%" height="15" fill="rgb(222,172,16)" fg:x="826" fg:w="1"/><text x="66.4890%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.2390%" y="501" width="0.0802%" height="15" fill="rgb(233,192,5)" fg:x="826" fg:w="1"/><text x="66.4890%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.3192%" y="613" width="0.1604%" height="15" fill="rgb(247,189,41)" fg:x="827" fg:w="2"/><text x="66.5692%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="66.3192%" y="597" width="0.1604%" height="15" fill="rgb(218,134,47)" fg:x="827" fg:w="2"/><text x="66.5692%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.3192%" y="581" width="0.1604%" height="15" fill="rgb(216,29,3)" fg:x="827" fg:w="2"/><text x="66.5692%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.3192%" y="565" width="0.1604%" height="15" fill="rgb(246,140,12)" fg:x="827" fg:w="2"/><text x="66.5692%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.3192%" y="549" width="0.1604%" height="15" fill="rgb(230,136,11)" fg:x="827" fg:w="2"/><text x="66.5692%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="66.3192%" y="533" width="0.1604%" height="15" fill="rgb(247,22,47)" fg:x="827" fg:w="2"/><text x="66.5692%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3994%" y="517" width="0.0802%" height="15" fill="rgb(218,84,22)" fg:x="828" fg:w="1"/><text x="66.6494%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="66.4796%" y="565" width="0.1604%" height="15" fill="rgb(216,87,39)" fg:x="829" fg:w="2"/><text x="66.7296%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="66.6399%" y="565" width="0.0802%" height="15" fill="rgb(221,178,8)" fg:x="831" fg:w="1"/><text x="66.8899%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.6399%" y="549" width="0.0802%" height="15" fill="rgb(230,42,11)" fg:x="831" fg:w="1"/><text x="66.8899%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.6399%" y="533" width="0.0802%" height="15" fill="rgb(237,229,4)" fg:x="831" fg:w="1"/><text x="66.8899%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.6399%" y="517" width="0.0802%" height="15" fill="rgb(222,31,33)" fg:x="831" fg:w="1"/><text x="66.8899%" y="527.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.88%)</title><rect x="65.9182%" y="677" width="0.8821%" height="15" fill="rgb(210,17,39)" fg:x="822" fg:w="11"/><text x="66.1682%" y="687.50"></text></g><g><title>engine::session::Session::save_entity_changes (11 samples, 0.88%)</title><rect x="65.9182%" y="661" width="0.8821%" height="15" fill="rgb(244,93,20)" fg:x="822" fg:w="11"/><text x="66.1682%" y="671.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (11 samples, 0.88%)</title><rect x="65.9182%" y="645" width="0.8821%" height="15" fill="rgb(210,40,47)" fg:x="822" fg:w="11"/><text x="66.1682%" y="655.50"></text></g><g><title>engine::session::Session::check_for_changes (11 samples, 0.88%)</title><rect x="65.9182%" y="629" width="0.8821%" height="15" fill="rgb(239,211,47)" fg:x="822" fg:w="11"/><text x="66.1682%" y="639.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.32%)</title><rect x="66.4796%" y="613" width="0.3208%" height="15" fill="rgb(251,223,49)" fg:x="829" fg:w="4"/><text x="66.7296%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="66.4796%" y="597" width="0.3208%" height="15" fill="rgb(221,149,5)" fg:x="829" fg:w="4"/><text x="66.7296%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="66.4796%" y="581" width="0.3208%" height="15" fill="rgb(219,224,51)" fg:x="829" fg:w="4"/><text x="66.7296%" y="591.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="66.7201%" y="565" width="0.0802%" height="15" fill="rgb(223,7,8)" fg:x="832" fg:w="1"/><text x="66.9701%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.7201%" y="549" width="0.0802%" height="15" fill="rgb(241,217,22)" fg:x="832" fg:w="1"/><text x="66.9701%" y="559.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="66.8003%" y="677" width="0.1604%" height="15" fill="rgb(248,209,0)" fg:x="833" fg:w="2"/><text x="67.0503%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="66.8003%" y="661" width="0.1604%" height="15" fill="rgb(217,205,4)" fg:x="833" fg:w="2"/><text x="67.0503%" y="671.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="66.8003%" y="645" width="0.1604%" height="15" fill="rgb(228,124,39)" fg:x="833" fg:w="2"/><text x="67.0503%" y="655.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="66.8003%" y="629" width="0.1604%" height="15" fill="rgb(250,116,42)" fg:x="833" fg:w="2"/><text x="67.0503%" y="639.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="66.8003%" y="613" width="0.1604%" height="15" fill="rgb(223,202,9)" fg:x="833" fg:w="2"/><text x="67.0503%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="66.8003%" y="597" width="0.1604%" height="15" fill="rgb(242,222,40)" fg:x="833" fg:w="2"/><text x="67.0503%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="66.8003%" y="581" width="0.1604%" height="15" fill="rgb(229,99,46)" fg:x="833" fg:w="2"/><text x="67.0503%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8805%" y="565" width="0.0802%" height="15" fill="rgb(225,56,46)" fg:x="834" fg:w="1"/><text x="67.1305%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8805%" y="549" width="0.0802%" height="15" fill="rgb(227,94,5)" fg:x="834" fg:w="1"/><text x="67.1305%" y="559.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="66.9607%" y="677" width="0.0802%" height="15" fill="rgb(205,112,38)" fg:x="835" fg:w="1"/><text x="67.2107%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="66.9607%" y="661" width="0.0802%" height="15" fill="rgb(231,133,46)" fg:x="835" fg:w="1"/><text x="67.2107%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="66.9607%" y="645" width="0.0802%" height="15" fill="rgb(217,16,9)" fg:x="835" fg:w="1"/><text x="67.2107%" y="655.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="66.9607%" y="629" width="0.0802%" height="15" fill="rgb(249,173,9)" fg:x="835" fg:w="1"/><text x="67.2107%" y="639.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="66.9607%" y="613" width="0.0802%" height="15" fill="rgb(205,163,53)" fg:x="835" fg:w="1"/><text x="67.2107%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.9607%" y="597" width="0.0802%" height="15" fill="rgb(217,54,41)" fg:x="835" fg:w="1"/><text x="67.2107%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.9607%" y="581" width="0.0802%" height="15" fill="rgb(228,216,12)" fg:x="835" fg:w="1"/><text x="67.2107%" y="591.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (29 samples, 2.33%)</title><rect x="64.9559%" y="709" width="2.3256%" height="15" fill="rgb(244,228,15)" fg:x="810" fg:w="29"/><text x="65.2059%" y="719.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::build (19 samples, 1.52%)</title><rect x="65.7578%" y="693" width="1.5237%" height="15" fill="rgb(221,176,53)" fg:x="820" fg:w="19"/><text x="66.0078%" y="703.50"></text></g><g><title>plugins_core::build::Build::with_username (3 samples, 0.24%)</title><rect x="67.0409%" y="677" width="0.2406%" height="15" fill="rgb(205,94,34)" fg:x="836" fg:w="3"/><text x="67.2909%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="67.1211%" y="661" width="0.1604%" height="15" fill="rgb(213,110,48)" fg:x="837" fg:w="2"/><text x="67.3711%" y="671.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="67.1211%" y="645" width="0.1604%" height="15" fill="rgb(236,142,28)" fg:x="837" fg:w="2"/><text x="67.3711%" y="655.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="67.1211%" y="629" width="0.1604%" height="15" fill="rgb(225,135,29)" fg:x="837" fg:w="2"/><text x="67.3711%" y="639.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (2 samples, 0.16%)</title><rect x="67.1211%" y="613" width="0.1604%" height="15" fill="rgb(252,45,31)" fg:x="837" fg:w="2"/><text x="67.3711%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="67.1211%" y="597" width="0.1604%" height="15" fill="rgb(211,187,50)" fg:x="837" fg:w="2"/><text x="67.3711%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="67.2013%" y="581" width="0.0802%" height="15" fill="rgb(229,109,7)" fg:x="838" fg:w="1"/><text x="67.4513%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.2013%" y="565" width="0.0802%" height="15" fill="rgb(251,131,51)" fg:x="838" fg:w="1"/><text x="67.4513%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.2013%" y="549" width="0.0802%" height="15" fill="rgb(251,180,35)" fg:x="838" fg:w="1"/><text x="67.4513%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.2013%" y="533" width="0.0802%" height="15" fill="rgb(211,46,32)" fg:x="838" fg:w="1"/><text x="67.4513%" y="543.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="67.2815%" y="677" width="0.0802%" height="15" fill="rgb(248,123,17)" fg:x="839" fg:w="1"/><text x="67.5315%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="67.2815%" y="661" width="0.0802%" height="15" fill="rgb(227,141,18)" fg:x="839" fg:w="1"/><text x="67.5315%" y="671.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="67.2815%" y="645" width="0.0802%" height="15" fill="rgb(216,102,9)" fg:x="839" fg:w="1"/><text x="67.5315%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="67.2815%" y="629" width="0.0802%" height="15" fill="rgb(253,47,13)" fg:x="839" fg:w="1"/><text x="67.5315%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="67.3617%" y="613" width="0.2406%" height="15" fill="rgb(226,93,23)" fg:x="840" fg:w="3"/><text x="67.6117%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="67.3617%" y="597" width="0.2406%" height="15" fill="rgb(247,104,17)" fg:x="840" fg:w="3"/><text x="67.6117%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="67.3617%" y="581" width="0.2406%" height="15" fill="rgb(233,203,26)" fg:x="840" fg:w="3"/><text x="67.6117%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="67.3617%" y="565" width="0.2406%" height="15" fill="rgb(244,98,49)" fg:x="840" fg:w="3"/><text x="67.6117%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="67.4419%" y="549" width="0.1604%" height="15" fill="rgb(235,134,22)" fg:x="841" fg:w="2"/><text x="67.6919%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.4419%" y="533" width="0.1604%" height="15" fill="rgb(221,70,32)" fg:x="841" fg:w="2"/><text x="67.6919%" y="543.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="67.4419%" y="517" width="0.1604%" height="15" fill="rgb(238,15,50)" fg:x="841" fg:w="2"/><text x="67.6919%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="67.3617%" y="629" width="0.4010%" height="15" fill="rgb(215,221,48)" fg:x="840" fg:w="5"/><text x="67.6117%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.6022%" y="613" width="0.1604%" height="15" fill="rgb(236,73,3)" fg:x="843" fg:w="2"/><text x="67.8522%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.6824%" y="597" width="0.0802%" height="15" fill="rgb(250,107,11)" fg:x="844" fg:w="1"/><text x="67.9324%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.6824%" y="581" width="0.0802%" height="15" fill="rgb(242,39,14)" fg:x="844" fg:w="1"/><text x="67.9324%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.7626%" y="613" width="0.0802%" height="15" fill="rgb(248,164,37)" fg:x="845" fg:w="1"/><text x="68.0126%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.8428%" y="613" width="0.0802%" height="15" fill="rgb(217,60,12)" fg:x="846" fg:w="1"/><text x="68.0928%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.8428%" y="597" width="0.0802%" height="15" fill="rgb(240,125,29)" fg:x="846" fg:w="1"/><text x="68.0928%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.8428%" y="581" width="0.0802%" height="15" fill="rgb(208,207,28)" fg:x="846" fg:w="1"/><text x="68.0928%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.8428%" y="565" width="0.0802%" height="15" fill="rgb(209,159,27)" fg:x="846" fg:w="1"/><text x="68.0928%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.8428%" y="549" width="0.0802%" height="15" fill="rgb(251,176,53)" fg:x="846" fg:w="1"/><text x="68.0928%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.8428%" y="533" width="0.0802%" height="15" fill="rgb(211,85,7)" fg:x="846" fg:w="1"/><text x="68.0928%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.9230%" y="597" width="0.0802%" height="15" fill="rgb(216,64,54)" fg:x="847" fg:w="1"/><text x="68.1730%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.9230%" y="581" width="0.0802%" height="15" fill="rgb(217,54,24)" fg:x="847" fg:w="1"/><text x="68.1730%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.9230%" y="613" width="0.1604%" height="15" fill="rgb(208,206,53)" fg:x="847" fg:w="2"/><text x="68.1730%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0032%" y="597" width="0.0802%" height="15" fill="rgb(251,74,39)" fg:x="848" fg:w="1"/><text x="68.2532%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.0032%" y="581" width="0.0802%" height="15" fill="rgb(226,47,5)" fg:x="848" fg:w="1"/><text x="68.2532%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.0032%" y="565" width="0.0802%" height="15" fill="rgb(234,111,33)" fg:x="848" fg:w="1"/><text x="68.2532%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="67.3617%" y="645" width="0.8019%" height="15" fill="rgb(251,14,10)" fg:x="840" fg:w="10"/><text x="67.6117%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="67.7626%" y="629" width="0.4010%" height="15" fill="rgb(232,43,0)" fg:x="845" fg:w="5"/><text x="68.0126%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.0834%" y="613" width="0.0802%" height="15" fill="rgb(222,68,43)" fg:x="849" fg:w="1"/><text x="68.3334%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.1636%" y="597" width="0.0802%" height="15" fill="rgb(217,24,23)" fg:x="850" fg:w="1"/><text x="68.4136%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.1636%" y="581" width="0.0802%" height="15" fill="rgb(229,209,14)" fg:x="850" fg:w="1"/><text x="68.4136%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.3240%" y="565" width="0.0802%" height="15" fill="rgb(250,149,48)" fg:x="852" fg:w="1"/><text x="68.5740%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.3240%" y="549" width="0.0802%" height="15" fill="rgb(210,120,37)" fg:x="852" fg:w="1"/><text x="68.5740%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.3240%" y="533" width="0.0802%" height="15" fill="rgb(210,21,8)" fg:x="852" fg:w="1"/><text x="68.5740%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3240%" y="517" width="0.0802%" height="15" fill="rgb(243,145,7)" fg:x="852" fg:w="1"/><text x="68.5740%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="68.1636%" y="645" width="0.3208%" height="15" fill="rgb(238,178,32)" fg:x="850" fg:w="4"/><text x="68.4136%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="68.1636%" y="629" width="0.3208%" height="15" fill="rgb(222,4,10)" fg:x="850" fg:w="4"/><text x="68.4136%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="68.1636%" y="613" width="0.3208%" height="15" fill="rgb(239,7,37)" fg:x="850" fg:w="4"/><text x="68.4136%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.2438%" y="597" width="0.2406%" height="15" fill="rgb(215,31,37)" fg:x="851" fg:w="3"/><text x="68.4938%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.2438%" y="581" width="0.2406%" height="15" fill="rgb(224,83,33)" fg:x="851" fg:w="3"/><text x="68.4938%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.4042%" y="565" width="0.0802%" height="15" fill="rgb(239,55,3)" fg:x="853" fg:w="1"/><text x="68.6542%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.5646%" y="581" width="0.0802%" height="15" fill="rgb(247,92,11)" fg:x="855" fg:w="1"/><text x="68.8146%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5646%" y="565" width="0.0802%" height="15" fill="rgb(239,200,7)" fg:x="855" fg:w="1"/><text x="68.8146%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.4844%" y="629" width="0.2406%" height="15" fill="rgb(227,115,8)" fg:x="854" fg:w="3"/><text x="68.7344%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="68.4844%" y="613" width="0.2406%" height="15" fill="rgb(215,189,27)" fg:x="854" fg:w="3"/><text x="68.7344%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.4844%" y="597" width="0.2406%" height="15" fill="rgb(251,216,39)" fg:x="854" fg:w="3"/><text x="68.7344%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.6447%" y="581" width="0.0802%" height="15" fill="rgb(207,29,47)" fg:x="856" fg:w="1"/><text x="68.8947%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.6447%" y="565" width="0.0802%" height="15" fill="rgb(210,71,34)" fg:x="856" fg:w="1"/><text x="68.8947%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6447%" y="549" width="0.0802%" height="15" fill="rgb(253,217,51)" fg:x="856" fg:w="1"/><text x="68.8947%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="68.8051%" y="597" width="0.0802%" height="15" fill="rgb(222,117,46)" fg:x="858" fg:w="1"/><text x="69.0551%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9655%" y="565" width="0.0802%" height="15" fill="rgb(226,132,6)" fg:x="860" fg:w="1"/><text x="69.2155%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9655%" y="549" width="0.0802%" height="15" fill="rgb(254,145,51)" fg:x="860" fg:w="1"/><text x="69.2155%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9655%" y="533" width="0.0802%" height="15" fill="rgb(231,199,27)" fg:x="860" fg:w="1"/><text x="69.2155%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (5 samples, 0.40%)</title><rect x="68.8853%" y="597" width="0.4010%" height="15" fill="rgb(245,158,14)" fg:x="859" fg:w="5"/><text x="69.1353%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="68.8853%" y="581" width="0.4010%" height="15" fill="rgb(240,113,14)" fg:x="859" fg:w="5"/><text x="69.1353%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="69.0457%" y="565" width="0.2406%" height="15" fill="rgb(210,20,13)" fg:x="861" fg:w="3"/><text x="69.2957%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="69.2061%" y="549" width="0.0802%" height="15" fill="rgb(241,144,13)" fg:x="863" fg:w="1"/><text x="69.4561%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.2061%" y="533" width="0.0802%" height="15" fill="rgb(235,43,34)" fg:x="863" fg:w="1"/><text x="69.4561%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="69.2061%" y="517" width="0.0802%" height="15" fill="rgb(208,36,20)" fg:x="863" fg:w="1"/><text x="69.4561%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.2061%" y="501" width="0.0802%" height="15" fill="rgb(239,204,10)" fg:x="863" fg:w="1"/><text x="69.4561%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.2061%" y="485" width="0.0802%" height="15" fill="rgb(217,84,43)" fg:x="863" fg:w="1"/><text x="69.4561%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="69.2863%" y="597" width="0.1604%" height="15" fill="rgb(241,170,50)" fg:x="864" fg:w="2"/><text x="69.5363%" y="607.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="69.3665%" y="581" width="0.0802%" height="15" fill="rgb(226,205,29)" fg:x="865" fg:w="1"/><text x="69.6165%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="69.3665%" y="565" width="0.0802%" height="15" fill="rgb(233,113,1)" fg:x="865" fg:w="1"/><text x="69.6165%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3665%" y="549" width="0.0802%" height="15" fill="rgb(253,98,13)" fg:x="865" fg:w="1"/><text x="69.6165%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="68.7249%" y="629" width="0.8019%" height="15" fill="rgb(211,115,12)" fg:x="857" fg:w="10"/><text x="68.9749%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="68.7249%" y="613" width="0.8019%" height="15" fill="rgb(208,12,16)" fg:x="857" fg:w="10"/><text x="68.9749%" y="623.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="69.4467%" y="597" width="0.0802%" height="15" fill="rgb(237,193,54)" fg:x="866" fg:w="1"/><text x="69.6967%" y="607.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.4467%" y="581" width="0.0802%" height="15" fill="rgb(243,22,42)" fg:x="866" fg:w="1"/><text x="69.6967%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.6071%" y="533" width="0.3208%" height="15" fill="rgb(233,151,36)" fg:x="868" fg:w="4"/><text x="69.8571%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.6872%" y="517" width="0.2406%" height="15" fill="rgb(237,57,45)" fg:x="869" fg:w="3"/><text x="69.9372%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.6872%" y="501" width="0.2406%" height="15" fill="rgb(221,88,17)" fg:x="869" fg:w="3"/><text x="69.9372%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.6872%" y="485" width="0.2406%" height="15" fill="rgb(230,79,15)" fg:x="869" fg:w="3"/><text x="69.9372%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.6872%" y="469" width="0.2406%" height="15" fill="rgb(213,57,13)" fg:x="869" fg:w="3"/><text x="69.9372%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.6872%" y="453" width="0.2406%" height="15" fill="rgb(222,116,39)" fg:x="869" fg:w="3"/><text x="69.9372%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.7674%" y="437" width="0.1604%" height="15" fill="rgb(245,107,2)" fg:x="870" fg:w="2"/><text x="70.0174%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.7674%" y="421" width="0.1604%" height="15" fill="rgb(238,1,10)" fg:x="870" fg:w="2"/><text x="70.0174%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8476%" y="405" width="0.0802%" height="15" fill="rgb(249,4,48)" fg:x="871" fg:w="1"/><text x="70.0976%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.9278%" y="517" width="0.0802%" height="15" fill="rgb(223,151,18)" fg:x="872" fg:w="1"/><text x="70.1778%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="69.6071%" y="565" width="0.4812%" height="15" fill="rgb(227,65,43)" fg:x="868" fg:w="6"/><text x="69.8571%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="69.6071%" y="549" width="0.4812%" height="15" fill="rgb(218,40,45)" fg:x="868" fg:w="6"/><text x="69.8571%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="69.9278%" y="533" width="0.1604%" height="15" fill="rgb(252,121,31)" fg:x="872" fg:w="2"/><text x="70.1778%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="70.0080%" y="517" width="0.0802%" height="15" fill="rgb(219,158,43)" fg:x="873" fg:w="1"/><text x="70.2580%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="69.5269%" y="629" width="0.6415%" height="15" fill="rgb(231,162,42)" fg:x="867" fg:w="8"/><text x="69.7769%" y="639.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="69.5269%" y="613" width="0.6415%" height="15" fill="rgb(217,179,25)" fg:x="867" fg:w="8"/><text x="69.7769%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="69.5269%" y="597" width="0.6415%" height="15" fill="rgb(206,212,31)" fg:x="867" fg:w="8"/><text x="69.7769%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="69.5269%" y="581" width="0.6415%" height="15" fill="rgb(235,144,12)" fg:x="867" fg:w="8"/><text x="69.7769%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.0882%" y="565" width="0.0802%" height="15" fill="rgb(213,51,10)" fg:x="874" fg:w="1"/><text x="70.3382%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0882%" y="549" width="0.0802%" height="15" fill="rgb(231,145,14)" fg:x="874" fg:w="1"/><text x="70.3382%" y="559.50"></text></g><g><title>engine::session::Session::close (37 samples, 2.97%)</title><rect x="67.2815%" y="709" width="2.9671%" height="15" fill="rgb(235,15,28)" fg:x="839" fg:w="37"/><text x="67.5315%" y="719.50">eng..</text></g><g><title>engine::session::Session::save_entity_changes (37 samples, 2.97%)</title><rect x="67.2815%" y="693" width="2.9671%" height="15" fill="rgb(237,206,10)" fg:x="839" fg:w="37"/><text x="67.5315%" y="703.50">eng..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (36 samples, 2.89%)</title><rect x="67.3617%" y="677" width="2.8869%" height="15" fill="rgb(236,227,27)" fg:x="840" fg:w="36"/><text x="67.6117%" y="687.50">en..</text></g><g><title>engine::session::Session::check_for_changes (36 samples, 2.89%)</title><rect x="67.3617%" y="661" width="2.8869%" height="15" fill="rgb(246,83,35)" fg:x="840" fg:w="36"/><text x="67.6117%" y="671.50">en..</text></g><g><title>kernel::compare::any_entity_changes (22 samples, 1.76%)</title><rect x="68.4844%" y="645" width="1.7642%" height="15" fill="rgb(220,136,24)" fg:x="854" fg:w="22"/><text x="68.7344%" y="655.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="70.1684%" y="629" width="0.0802%" height="15" fill="rgb(217,3,25)" fg:x="875" fg:w="1"/><text x="70.4184%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="70.1684%" y="613" width="0.0802%" height="15" fill="rgb(239,24,14)" fg:x="875" fg:w="1"/><text x="70.4184%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="70.1684%" y="597" width="0.0802%" height="15" fill="rgb(244,16,53)" fg:x="875" fg:w="1"/><text x="70.4184%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.1684%" y="581" width="0.0802%" height="15" fill="rgb(208,175,44)" fg:x="875" fg:w="1"/><text x="70.4184%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="70.4090%" y="581" width="0.0802%" height="15" fill="rgb(252,18,48)" fg:x="878" fg:w="1"/><text x="70.6590%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="70.4090%" y="565" width="0.0802%" height="15" fill="rgb(234,199,32)" fg:x="878" fg:w="1"/><text x="70.6590%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.4892%" y="549" width="0.0802%" height="15" fill="rgb(225,77,54)" fg:x="879" fg:w="1"/><text x="70.7392%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.4892%" y="533" width="0.0802%" height="15" fill="rgb(225,42,25)" fg:x="879" fg:w="1"/><text x="70.7392%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="70.4892%" y="517" width="0.0802%" height="15" fill="rgb(242,227,46)" fg:x="879" fg:w="1"/><text x="70.7392%" y="527.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="70.4892%" y="501" width="0.0802%" height="15" fill="rgb(246,197,35)" fg:x="879" fg:w="1"/><text x="70.7392%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="70.4892%" y="485" width="0.0802%" height="15" fill="rgb(215,159,26)" fg:x="879" fg:w="1"/><text x="70.7392%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="70.4892%" y="469" width="0.0802%" height="15" fill="rgb(212,194,50)" fg:x="879" fg:w="1"/><text x="70.7392%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="70.5694%" y="517" width="0.1604%" height="15" fill="rgb(246,132,1)" fg:x="880" fg:w="2"/><text x="70.8194%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="70.6496%" y="501" width="0.0802%" height="15" fill="rgb(217,71,7)" fg:x="881" fg:w="1"/><text x="70.8996%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="70.6496%" y="485" width="0.0802%" height="15" fill="rgb(252,59,32)" fg:x="881" fg:w="1"/><text x="70.8996%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6496%" y="469" width="0.0802%" height="15" fill="rgb(253,204,25)" fg:x="881" fg:w="1"/><text x="70.8996%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="70.5694%" y="549" width="0.4010%" height="15" fill="rgb(232,21,16)" fg:x="880" fg:w="5"/><text x="70.8194%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="70.5694%" y="533" width="0.4010%" height="15" fill="rgb(248,90,29)" fg:x="880" fg:w="5"/><text x="70.8194%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="70.7298%" y="517" width="0.2406%" height="15" fill="rgb(249,223,7)" fg:x="882" fg:w="3"/><text x="70.9798%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="70.8099%" y="501" width="0.1604%" height="15" fill="rgb(231,119,42)" fg:x="883" fg:w="2"/><text x="71.0599%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.8901%" y="485" width="0.0802%" height="15" fill="rgb(215,41,35)" fg:x="884" fg:w="1"/><text x="71.1401%" y="495.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="71.0505%" y="501" width="0.0802%" height="15" fill="rgb(220,44,45)" fg:x="886" fg:w="1"/><text x="71.3005%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0505%" y="485" width="0.0802%" height="15" fill="rgb(253,197,36)" fg:x="886" fg:w="1"/><text x="71.3005%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1307%" y="485" width="0.0802%" height="15" fill="rgb(245,225,54)" fg:x="887" fg:w="1"/><text x="71.3807%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2109%" y="485" width="0.0802%" height="15" fill="rgb(239,94,37)" fg:x="888" fg:w="1"/><text x="71.4609%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2911%" y="469" width="0.0802%" height="15" fill="rgb(242,217,10)" fg:x="889" fg:w="1"/><text x="71.5411%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="71.2911%" y="485" width="0.5613%" height="15" fill="rgb(250,193,7)" fg:x="889" fg:w="7"/><text x="71.5411%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="71.3713%" y="469" width="0.4812%" height="15" fill="rgb(230,104,19)" fg:x="890" fg:w="6"/><text x="71.6213%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7723%" y="453" width="0.0802%" height="15" fill="rgb(230,181,4)" fg:x="895" fg:w="1"/><text x="72.0223%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="71.8524%" y="469" width="0.4812%" height="15" fill="rgb(216,219,49)" fg:x="896" fg:w="6"/><text x="72.1024%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="72.2534%" y="453" width="0.0802%" height="15" fill="rgb(254,144,0)" fg:x="901" fg:w="1"/><text x="72.5034%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.2534%" y="437" width="0.0802%" height="15" fill="rgb(205,209,38)" fg:x="901" fg:w="1"/><text x="72.5034%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="71.8524%" y="485" width="0.5613%" height="15" fill="rgb(240,21,42)" fg:x="896" fg:w="7"/><text x="72.1024%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="72.3336%" y="469" width="0.0802%" height="15" fill="rgb(241,132,3)" fg:x="902" fg:w="1"/><text x="72.5836%" y="479.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.7346%" y="421" width="0.0802%" height="15" fill="rgb(225,14,2)" fg:x="907" fg:w="1"/><text x="72.9846%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="72.8148%" y="421" width="0.1604%" height="15" fill="rgb(210,141,35)" fg:x="908" fg:w="2"/><text x="73.0648%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="72.9751%" y="421" width="0.0802%" height="15" fill="rgb(251,14,44)" fg:x="910" fg:w="1"/><text x="73.2251%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (44 samples, 3.53%)</title><rect x="73.0553%" y="421" width="3.5285%" height="15" fill="rgb(247,48,18)" fg:x="911" fg:w="44"/><text x="73.3053%" y="431.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (44 samples, 3.53%)</title><rect x="73.0553%" y="405" width="3.5285%" height="15" fill="rgb(225,0,40)" fg:x="911" fg:w="44"/><text x="73.3053%" y="415.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.53%)</title><rect x="73.0553%" y="389" width="3.5285%" height="15" fill="rgb(221,31,33)" fg:x="911" fg:w="44"/><text x="73.3053%" y="399.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="76.5838%" y="421" width="0.4812%" height="15" fill="rgb(237,42,40)" fg:x="955" fg:w="6"/><text x="76.8338%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9848%" y="405" width="0.0802%" height="15" fill="rgb(233,51,29)" fg:x="960" fg:w="1"/><text x="77.2348%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 4.73%)</title><rect x="72.4138%" y="469" width="4.7314%" height="15" fill="rgb(226,58,20)" fg:x="903" fg:w="59"/><text x="72.6638%" y="479.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (58 samples, 4.65%)</title><rect x="72.4940%" y="453" width="4.6512%" height="15" fill="rgb(208,98,7)" fg:x="904" fg:w="58"/><text x="72.7440%" y="463.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (58 samples, 4.65%)</title><rect x="72.4940%" y="437" width="4.6512%" height="15" fill="rgb(228,143,44)" fg:x="904" fg:w="58"/><text x="72.7440%" y="447.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="77.0650%" y="421" width="0.0802%" height="15" fill="rgb(246,55,38)" fg:x="961" fg:w="1"/><text x="77.3150%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="77.2253%" y="453" width="0.0802%" height="15" fill="rgb(247,87,16)" fg:x="963" fg:w="1"/><text x="77.4753%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="77.1451%" y="469" width="0.3208%" height="15" fill="rgb(234,129,42)" fg:x="962" fg:w="4"/><text x="77.3951%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="77.3055%" y="453" width="0.1604%" height="15" fill="rgb(220,82,16)" fg:x="964" fg:w="2"/><text x="77.5555%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.3857%" y="437" width="0.0802%" height="15" fill="rgb(211,88,4)" fg:x="965" fg:w="1"/><text x="77.6357%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.3857%" y="421" width="0.0802%" height="15" fill="rgb(248,151,21)" fg:x="965" fg:w="1"/><text x="77.6357%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.3857%" y="405" width="0.0802%" height="15" fill="rgb(238,163,6)" fg:x="965" fg:w="1"/><text x="77.6357%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (64 samples, 5.13%)</title><rect x="72.4138%" y="485" width="5.1323%" height="15" fill="rgb(209,183,11)" fg:x="903" fg:w="64"/><text x="72.6638%" y="495.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="77.4659%" y="469" width="0.0802%" height="15" fill="rgb(219,37,20)" fg:x="966" fg:w="1"/><text x="77.7159%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="77.4659%" y="453" width="0.0802%" height="15" fill="rgb(210,158,4)" fg:x="966" fg:w="1"/><text x="77.7159%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::new (81 samples, 6.50%)</title><rect x="71.1307%" y="501" width="6.4956%" height="15" fill="rgb(221,167,53)" fg:x="887" fg:w="81"/><text x="71.3807%" y="511.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="77.5461%" y="485" width="0.0802%" height="15" fill="rgb(237,151,45)" fg:x="967" fg:w="1"/><text x="77.7961%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="77.6263%" y="501" width="0.3208%" height="15" fill="rgb(231,39,3)" fg:x="968" fg:w="4"/><text x="77.8763%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="77.6263%" y="485" width="0.3208%" height="15" fill="rgb(212,167,28)" fg:x="968" fg:w="4"/><text x="77.8763%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="77.6263%" y="469" width="0.3208%" height="15" fill="rgb(232,178,8)" fg:x="968" fg:w="4"/><text x="77.8763%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="77.6263%" y="453" width="0.3208%" height="15" fill="rgb(225,151,20)" fg:x="968" fg:w="4"/><text x="77.8763%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="77.6263%" y="437" width="0.3208%" height="15" fill="rgb(238,3,37)" fg:x="968" fg:w="4"/><text x="77.8763%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="77.6263%" y="421" width="0.3208%" height="15" fill="rgb(251,147,42)" fg:x="968" fg:w="4"/><text x="77.8763%" y="431.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="77.6263%" y="405" width="0.3208%" height="15" fill="rgb(208,173,10)" fg:x="968" fg:w="4"/><text x="77.8763%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="78.1075%" y="469" width="0.0802%" height="15" fill="rgb(246,225,4)" fg:x="974" fg:w="1"/><text x="78.3575%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.1075%" y="453" width="0.0802%" height="15" fill="rgb(248,102,6)" fg:x="974" fg:w="1"/><text x="78.3575%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (91 samples, 7.30%)</title><rect x="70.9703%" y="517" width="7.2975%" height="15" fill="rgb(232,6,21)" fg:x="885" fg:w="91"/><text x="71.2203%" y="527.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="77.9471%" y="501" width="0.3208%" height="15" fill="rgb(221,179,22)" fg:x="972" fg:w="4"/><text x="78.1971%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="78.0273%" y="485" width="0.2406%" height="15" fill="rgb(252,50,20)" fg:x="973" fg:w="3"/><text x="78.2773%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.1877%" y="469" width="0.0802%" height="15" fill="rgb(222,56,38)" fg:x="975" fg:w="1"/><text x="78.4377%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.1877%" y="453" width="0.0802%" height="15" fill="rgb(206,193,29)" fg:x="975" fg:w="1"/><text x="78.4377%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1877%" y="437" width="0.0802%" height="15" fill="rgb(239,192,45)" fg:x="975" fg:w="1"/><text x="78.4377%" y="447.50"></text></g><g><title>regex::regex::string::Regex::new (92 samples, 7.38%)</title><rect x="70.9703%" y="549" width="7.3777%" height="15" fill="rgb(254,18,36)" fg:x="885" fg:w="92"/><text x="71.2203%" y="559.50">regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (92 samples, 7.38%)</title><rect x="70.9703%" y="533" width="7.3777%" height="15" fill="rgb(221,127,11)" fg:x="885" fg:w="92"/><text x="71.2203%" y="543.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="78.2678%" y="517" width="0.0802%" height="15" fill="rgb(234,146,35)" fg:x="976" fg:w="1"/><text x="78.5178%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5886%" y="485" width="0.0802%" height="15" fill="rgb(254,201,37)" fg:x="980" fg:w="1"/><text x="78.8386%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.9094%" y="469" width="0.0802%" height="15" fill="rgb(211,202,23)" fg:x="984" fg:w="1"/><text x="79.1594%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="78.9896%" y="469" width="0.0802%" height="15" fill="rgb(237,91,2)" fg:x="985" fg:w="1"/><text x="79.2396%" y="479.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (108 samples, 8.66%)</title><rect x="70.4892%" y="565" width="8.6608%" height="15" fill="rgb(226,228,36)" fg:x="879" fg:w="108"/><text x="70.7392%" y="575.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="78.3480%" y="549" width="0.8019%" height="15" fill="rgb(213,63,50)" fg:x="977" fg:w="10"/><text x="78.5980%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="78.4282%" y="533" width="0.7217%" height="15" fill="rgb(235,194,19)" fg:x="978" fg:w="9"/><text x="78.6782%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="78.4282%" y="517" width="0.7217%" height="15" fill="rgb(207,204,18)" fg:x="978" fg:w="9"/><text x="78.6782%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="78.5886%" y="501" width="0.5613%" height="15" fill="rgb(248,8,7)" fg:x="980" fg:w="7"/><text x="78.8386%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="78.6688%" y="485" width="0.4812%" height="15" fill="rgb(223,145,47)" fg:x="981" fg:w="6"/><text x="78.9188%" y="495.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="79.0698%" y="469" width="0.0802%" height="15" fill="rgb(228,84,11)" fg:x="986" fg:w="1"/><text x="79.3198%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="79.0698%" y="453" width="0.0802%" height="15" fill="rgb(218,76,45)" fg:x="986" fg:w="1"/><text x="79.3198%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.1500%" y="501" width="0.0802%" height="15" fill="rgb(223,80,15)" fg:x="987" fg:w="1"/><text x="79.4000%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.1500%" y="485" width="0.0802%" height="15" fill="rgb(219,218,33)" fg:x="987" fg:w="1"/><text x="79.4000%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="79.2302%" y="501" width="0.0802%" height="15" fill="rgb(208,51,11)" fg:x="988" fg:w="1"/><text x="79.4802%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.2302%" y="485" width="0.0802%" height="15" fill="rgb(229,165,39)" fg:x="988" fg:w="1"/><text x="79.4802%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2302%" y="469" width="0.0802%" height="15" fill="rgb(241,100,24)" fg:x="988" fg:w="1"/><text x="79.4802%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="79.1500%" y="549" width="0.2406%" height="15" fill="rgb(228,14,23)" fg:x="987" fg:w="3"/><text x="79.4000%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="79.1500%" y="533" width="0.2406%" height="15" fill="rgb(247,116,52)" fg:x="987" fg:w="3"/><text x="79.4000%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="79.1500%" y="517" width="0.2406%" height="15" fill="rgb(216,149,33)" fg:x="987" fg:w="3"/><text x="79.4000%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="79.3103%" y="501" width="0.0802%" height="15" fill="rgb(238,142,29)" fg:x="989" fg:w="1"/><text x="79.5603%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="79.3103%" y="485" width="0.0802%" height="15" fill="rgb(224,83,40)" fg:x="989" fg:w="1"/><text x="79.5603%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.3103%" y="469" width="0.0802%" height="15" fill="rgb(234,165,11)" fg:x="989" fg:w="1"/><text x="79.5603%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="79.3905%" y="501" width="0.0802%" height="15" fill="rgb(215,96,23)" fg:x="990" fg:w="1"/><text x="79.6405%" y="511.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="79.3905%" y="485" width="0.0802%" height="15" fill="rgb(233,179,26)" fg:x="990" fg:w="1"/><text x="79.6405%" y="495.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="79.3905%" y="469" width="0.0802%" height="15" fill="rgb(225,129,33)" fg:x="990" fg:w="1"/><text x="79.6405%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="79.3905%" y="533" width="0.1604%" height="15" fill="rgb(237,49,13)" fg:x="990" fg:w="2"/><text x="79.6405%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="79.3905%" y="517" width="0.1604%" height="15" fill="rgb(211,3,31)" fg:x="990" fg:w="2"/><text x="79.6405%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="79.4707%" y="501" width="0.0802%" height="15" fill="rgb(216,152,19)" fg:x="991" fg:w="1"/><text x="79.7207%" y="511.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="79.4707%" y="485" width="0.0802%" height="15" fill="rgb(251,121,35)" fg:x="991" fg:w="1"/><text x="79.7207%" y="495.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="80.1925%" y="421" width="0.0802%" height="15" fill="rgb(210,217,47)" fg:x="1000" fg:w="1"/><text x="80.4425%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="80.1925%" y="453" width="0.1604%" height="15" fill="rgb(244,116,22)" fg:x="1000" fg:w="2"/><text x="80.4425%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="80.1925%" y="437" width="0.1604%" height="15" fill="rgb(228,17,21)" fg:x="1000" fg:w="2"/><text x="80.4425%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.2727%" y="421" width="0.0802%" height="15" fill="rgb(240,149,34)" fg:x="1001" fg:w="1"/><text x="80.5227%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3528%" y="453" width="0.0802%" height="15" fill="rgb(208,125,47)" fg:x="1002" fg:w="1"/><text x="80.6028%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.3528%" y="437" width="0.0802%" height="15" fill="rgb(249,186,39)" fg:x="1002" fg:w="1"/><text x="80.6028%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="80.3528%" y="421" width="0.0802%" height="15" fill="rgb(240,220,33)" fg:x="1002" fg:w="1"/><text x="80.6028%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3528%" y="405" width="0.0802%" height="15" fill="rgb(243,110,23)" fg:x="1002" fg:w="1"/><text x="80.6028%" y="415.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.36%)</title><rect x="79.3905%" y="549" width="1.3633%" height="15" fill="rgb(219,163,46)" fg:x="990" fg:w="17"/><text x="79.6405%" y="559.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.20%)</title><rect x="79.5509%" y="533" width="1.2029%" height="15" fill="rgb(216,126,30)" fg:x="992" fg:w="15"/><text x="79.8009%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.20%)</title><rect x="79.5509%" y="517" width="1.2029%" height="15" fill="rgb(208,139,11)" fg:x="992" fg:w="15"/><text x="79.8009%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.20%)</title><rect x="79.5509%" y="501" width="1.2029%" height="15" fill="rgb(213,118,36)" fg:x="992" fg:w="15"/><text x="79.8009%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.12%)</title><rect x="79.6311%" y="485" width="1.1227%" height="15" fill="rgb(226,43,17)" fg:x="993" fg:w="14"/><text x="79.8811%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.96%)</title><rect x="79.7915%" y="469" width="0.9623%" height="15" fill="rgb(254,217,4)" fg:x="995" fg:w="12"/><text x="80.0415%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="80.4330%" y="453" width="0.3208%" height="15" fill="rgb(210,134,47)" fg:x="1003" fg:w="4"/><text x="80.6830%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7538%" y="469" width="0.0802%" height="15" fill="rgb(237,24,49)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="80.7538%" y="501" width="0.1604%" height="15" fill="rgb(251,39,46)" fg:x="1007" fg:w="2"/><text x="81.0038%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="80.7538%" y="485" width="0.1604%" height="15" fill="rgb(251,220,3)" fg:x="1007" fg:w="2"/><text x="81.0038%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (1 samples, 0.08%)</title><rect x="80.8340%" y="469" width="0.0802%" height="15" fill="rgb(228,105,12)" fg:x="1008" fg:w="1"/><text x="81.0840%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="81.3152%" y="469" width="0.1604%" height="15" fill="rgb(215,196,1)" fg:x="1014" fg:w="2"/><text x="81.5652%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.20%)</title><rect x="81.0746%" y="485" width="1.2029%" height="15" fill="rgb(214,33,39)" fg:x="1011" fg:w="15"/><text x="81.3246%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="81.4755%" y="469" width="0.8019%" height="15" fill="rgb(220,19,52)" fg:x="1016" fg:w="10"/><text x="81.7255%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="82.1171%" y="453" width="0.1604%" height="15" fill="rgb(221,78,38)" fg:x="1024" fg:w="2"/><text x="82.3671%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="82.2775%" y="485" width="0.0802%" height="15" fill="rgb(253,30,16)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="82.2775%" y="469" width="0.0802%" height="15" fill="rgb(242,65,0)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="82.2775%" y="453" width="0.0802%" height="15" fill="rgb(235,201,12)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="82.3577%" y="485" width="0.4010%" height="15" fill="rgb(233,161,9)" fg:x="1027" fg:w="5"/><text x="82.6077%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="82.4379%" y="469" width="0.3208%" height="15" fill="rgb(241,207,41)" fg:x="1028" fg:w="4"/><text x="82.6879%" y="479.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="83.0794%" y="453" width="0.1604%" height="15" fill="rgb(212,69,46)" fg:x="1036" fg:w="2"/><text x="83.3294%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="83.0794%" y="437" width="0.1604%" height="15" fill="rgb(239,69,45)" fg:x="1036" fg:w="2"/><text x="83.3294%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.0794%" y="421" width="0.1604%" height="15" fill="rgb(242,117,48)" fg:x="1036" fg:w="2"/><text x="83.3294%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="83.0794%" y="405" width="0.1604%" height="15" fill="rgb(228,41,36)" fg:x="1036" fg:w="2"/><text x="83.3294%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="83.2398%" y="453" width="0.4812%" height="15" fill="rgb(212,3,32)" fg:x="1038" fg:w="6"/><text x="83.4898%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="83.4002%" y="437" width="0.3208%" height="15" fill="rgb(233,41,49)" fg:x="1040" fg:w="4"/><text x="83.6502%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="83.5605%" y="421" width="0.1604%" height="15" fill="rgb(252,170,49)" fg:x="1042" fg:w="2"/><text x="83.8105%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.5605%" y="405" width="0.1604%" height="15" fill="rgb(229,53,26)" fg:x="1042" fg:w="2"/><text x="83.8105%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="83.5605%" y="389" width="0.1604%" height="15" fill="rgb(217,157,12)" fg:x="1042" fg:w="2"/><text x="83.8105%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="83.7209%" y="453" width="0.2406%" height="15" fill="rgb(227,17,9)" fg:x="1044" fg:w="3"/><text x="83.9709%" y="463.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="83.8011%" y="437" width="0.1604%" height="15" fill="rgb(218,84,12)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="447.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="83.8011%" y="421" width="0.1604%" height="15" fill="rgb(212,79,24)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (16 samples, 1.28%)</title><rect x="82.7586%" y="485" width="1.2831%" height="15" fill="rgb(217,222,37)" fg:x="1032" fg:w="16"/><text x="83.0086%" y="495.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (16 samples, 1.28%)</title><rect x="82.7586%" y="469" width="1.2831%" height="15" fill="rgb(246,208,8)" fg:x="1032" fg:w="16"/><text x="83.0086%" y="479.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="83.9615%" y="453" width="0.0802%" height="15" fill="rgb(244,133,10)" fg:x="1047" fg:w="1"/><text x="84.2115%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="84.0417%" y="485" width="0.0802%" height="15" fill="rgb(209,219,41)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="84.0417%" y="469" width="0.0802%" height="15" fill="rgb(253,175,45)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="84.0417%" y="453" width="0.0802%" height="15" fill="rgb(235,100,37)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="84.2021%" y="437" width="0.0802%" height="15" fill="rgb(225,87,19)" fg:x="1050" fg:w="1"/><text x="84.4521%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="84.3625%" y="389" width="0.0802%" height="15" fill="rgb(217,152,17)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.3625%" y="373" width="0.0802%" height="15" fill="rgb(235,72,13)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.3625%" y="357" width="0.0802%" height="15" fill="rgb(233,140,18)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.3625%" y="341" width="0.0802%" height="15" fill="rgb(207,212,28)" fg:x="1052" fg:w="1"/><text x="84.6125%" y="351.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="85.0040%" y="373" width="0.3208%" height="15" fill="rgb(220,130,25)" fg:x="1060" fg:w="4"/><text x="85.2540%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.3248%" y="373" width="0.1604%" height="15" fill="rgb(205,55,34)" fg:x="1064" fg:w="2"/><text x="85.5748%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="85.4852%" y="373" width="0.0802%" height="15" fill="rgb(237,54,35)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="85.5654%" y="373" width="0.3208%" height="15" fill="rgb(208,67,23)" fg:x="1067" fg:w="4"/><text x="85.8154%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.7257%" y="357" width="0.1604%" height="15" fill="rgb(206,207,50)" fg:x="1069" fg:w="2"/><text x="85.9757%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.7257%" y="341" width="0.1604%" height="15" fill="rgb(213,211,42)" fg:x="1069" fg:w="2"/><text x="85.9757%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="85.7257%" y="325" width="0.1604%" height="15" fill="rgb(252,197,50)" fg:x="1069" fg:w="2"/><text x="85.9757%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.1267%" y="341" width="0.0802%" height="15" fill="rgb(251,211,41)" fg:x="1074" fg:w="1"/><text x="86.3767%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="86.2069%" y="341" width="0.1604%" height="15" fill="rgb(229,211,5)" fg:x="1075" fg:w="2"/><text x="86.4569%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2871%" y="325" width="0.0802%" height="15" fill="rgb(239,36,31)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="86.2871%" y="309" width="0.0802%" height="15" fill="rgb(248,67,31)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="86.2871%" y="293" width="0.0802%" height="15" fill="rgb(249,55,44)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.96%)</title><rect x="85.8861%" y="373" width="0.9623%" height="15" fill="rgb(216,82,12)" fg:x="1071" fg:w="12"/><text x="86.1361%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.88%)</title><rect x="85.9663%" y="357" width="0.8821%" height="15" fill="rgb(242,174,1)" fg:x="1072" fg:w="11"/><text x="86.2163%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="86.3673%" y="341" width="0.4812%" height="15" fill="rgb(208,120,29)" fg:x="1077" fg:w="6"/><text x="86.6173%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="86.8484%" y="373" width="0.0802%" height="15" fill="rgb(221,105,43)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="86.8484%" y="357" width="0.0802%" height="15" fill="rgb(234,124,22)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.8484%" y="341" width="0.0802%" height="15" fill="rgb(212,23,30)" fg:x="1083" fg:w="1"/><text x="87.0984%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (37 samples, 2.97%)</title><rect x="86.9286%" y="373" width="2.9671%" height="15" fill="rgb(219,122,53)" fg:x="1084" fg:w="37"/><text x="87.1786%" y="383.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 2.97%)</title><rect x="86.9286%" y="357" width="2.9671%" height="15" fill="rgb(248,84,24)" fg:x="1084" fg:w="37"/><text x="87.1786%" y="367.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.89%)</title><rect x="87.0088%" y="341" width="2.8869%" height="15" fill="rgb(245,115,18)" fg:x="1085" fg:w="36"/><text x="87.2588%" y="351.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="89.8957%" y="373" width="0.3208%" height="15" fill="rgb(227,176,51)" fg:x="1121" fg:w="4"/><text x="90.1457%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="90.0561%" y="357" width="0.1604%" height="15" fill="rgb(229,63,42)" fg:x="1123" fg:w="2"/><text x="90.3061%" y="367.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="90.2165%" y="373" width="0.0802%" height="15" fill="rgb(247,202,24)" fg:x="1125" fg:w="1"/><text x="90.4665%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.3769%" y="325" width="0.0802%" height="15" fill="rgb(244,173,20)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 6.34%)</title><rect x="84.2021%" y="469" width="6.3352%" height="15" fill="rgb(242,81,47)" fg:x="1050" fg:w="79"/><text x="84.4521%" y="479.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (79 samples, 6.34%)</title><rect x="84.2021%" y="453" width="6.3352%" height="15" fill="rgb(231,185,54)" fg:x="1050" fg:w="79"/><text x="84.4521%" y="463.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (78 samples, 6.26%)</title><rect x="84.2823%" y="437" width="6.2550%" height="15" fill="rgb(243,55,32)" fg:x="1051" fg:w="78"/><text x="84.5323%" y="447.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (78 samples, 6.26%)</title><rect x="84.2823%" y="421" width="6.2550%" height="15" fill="rgb(208,167,19)" fg:x="1051" fg:w="78"/><text x="84.5323%" y="431.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (77 samples, 6.17%)</title><rect x="84.3625%" y="405" width="6.1748%" height="15" fill="rgb(231,72,35)" fg:x="1052" fg:w="77"/><text x="84.6125%" y="415.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (76 samples, 6.09%)</title><rect x="84.4427%" y="389" width="6.0946%" height="15" fill="rgb(250,173,51)" fg:x="1053" fg:w="76"/><text x="84.6927%" y="399.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="90.2967%" y="373" width="0.2406%" height="15" fill="rgb(209,5,22)" fg:x="1126" fg:w="3"/><text x="90.5467%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.3769%" y="357" width="0.1604%" height="15" fill="rgb(250,174,19)" fg:x="1127" fg:w="2"/><text x="90.6269%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.3769%" y="341" width="0.1604%" height="15" fill="rgb(217,3,49)" fg:x="1127" fg:w="2"/><text x="90.6269%" y="351.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="90.4571%" y="325" width="0.0802%" height="15" fill="rgb(218,225,5)" fg:x="1128" fg:w="1"/><text x="90.7071%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="90.4571%" y="309" width="0.0802%" height="15" fill="rgb(236,89,11)" fg:x="1128" fg:w="1"/><text x="90.7071%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.6977%" y="453" width="0.0802%" height="15" fill="rgb(206,33,28)" fg:x="1131" fg:w="1"/><text x="90.9477%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="90.7779%" y="453" width="0.5613%" height="15" fill="rgb(241,56,42)" fg:x="1132" fg:w="7"/><text x="91.0279%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.2590%" y="437" width="0.0802%" height="15" fill="rgb(222,44,11)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.2590%" y="421" width="0.0802%" height="15" fill="rgb(234,111,20)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.2590%" y="405" width="0.0802%" height="15" fill="rgb(237,77,6)" fg:x="1138" fg:w="1"/><text x="91.5090%" y="415.50"></text></g><g><title>regex_automata::meta::strategy::new (135 samples, 10.83%)</title><rect x="80.9142%" y="501" width="10.8260%" height="15" fill="rgb(235,111,23)" fg:x="1009" fg:w="135"/><text x="81.1642%" y="511.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (95 samples, 7.62%)</title><rect x="84.1219%" y="485" width="7.6183%" height="15" fill="rgb(251,135,29)" fg:x="1049" fg:w="95"/><text x="84.3719%" y="495.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.20%)</title><rect x="90.5373%" y="469" width="1.2029%" height="15" fill="rgb(217,57,1)" fg:x="1129" fg:w="15"/><text x="90.7873%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="91.3392%" y="453" width="0.4010%" height="15" fill="rgb(249,119,31)" fg:x="1139" fg:w="5"/><text x="91.5892%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="91.9006%" y="453" width="0.0802%" height="15" fill="rgb(233,164,33)" fg:x="1146" fg:w="1"/><text x="92.1506%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="91.9808%" y="453" width="0.1604%" height="15" fill="rgb(250,217,43)" fg:x="1147" fg:w="2"/><text x="92.2308%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="91.9808%" y="437" width="0.1604%" height="15" fill="rgb(232,154,50)" fg:x="1147" fg:w="2"/><text x="92.2308%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="92.0609%" y="421" width="0.0802%" height="15" fill="rgb(227,190,8)" fg:x="1148" fg:w="1"/><text x="92.3109%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="92.0609%" y="405" width="0.0802%" height="15" fill="rgb(209,217,32)" fg:x="1148" fg:w="1"/><text x="92.3109%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="91.8204%" y="469" width="0.4010%" height="15" fill="rgb(243,203,50)" fg:x="1145" fg:w="5"/><text x="92.0704%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="92.1411%" y="453" width="0.0802%" height="15" fill="rgb(232,152,27)" fg:x="1149" fg:w="1"/><text x="92.3911%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="92.2213%" y="469" width="0.0802%" height="15" fill="rgb(240,34,29)" fg:x="1150" fg:w="1"/><text x="92.4713%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.2213%" y="453" width="0.0802%" height="15" fill="rgb(215,185,52)" fg:x="1150" fg:w="1"/><text x="92.4713%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="91.7402%" y="501" width="0.6415%" height="15" fill="rgb(240,89,49)" fg:x="1144" fg:w="8"/><text x="91.9902%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="91.7402%" y="485" width="0.6415%" height="15" fill="rgb(225,12,52)" fg:x="1144" fg:w="8"/><text x="91.9902%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.3015%" y="469" width="0.0802%" height="15" fill="rgb(239,128,45)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.3015%" y="453" width="0.0802%" height="15" fill="rgb(211,78,47)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.3015%" y="437" width="0.0802%" height="15" fill="rgb(232,31,21)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.3015%" y="421" width="0.0802%" height="15" fill="rgb(222,168,14)" fg:x="1151" fg:w="1"/><text x="92.5515%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="92.4619%" y="453" width="0.1604%" height="15" fill="rgb(209,128,24)" fg:x="1153" fg:w="2"/><text x="92.7119%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.5421%" y="437" width="0.0802%" height="15" fill="rgb(249,35,13)" fg:x="1154" fg:w="1"/><text x="92.7921%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.5421%" y="421" width="0.0802%" height="15" fill="rgb(218,7,2)" fg:x="1154" fg:w="1"/><text x="92.7921%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="92.4619%" y="469" width="0.3208%" height="15" fill="rgb(238,107,27)" fg:x="1153" fg:w="4"/><text x="92.7119%" y="479.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="92.6223%" y="453" width="0.1604%" height="15" fill="rgb(217,88,38)" fg:x="1155" fg:w="2"/><text x="92.8723%" y="463.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="92.7025%" y="437" width="0.0802%" height="15" fill="rgb(230,207,0)" fg:x="1156" fg:w="1"/><text x="92.9525%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="92.7827%" y="469" width="0.1604%" height="15" fill="rgb(249,64,54)" fg:x="1157" fg:w="2"/><text x="93.0327%" y="479.50"></text></g><g><title>indefinite::rules::number::Number::check (175 samples, 14.03%)</title><rect x="79.1500%" y="565" width="14.0337%" height="15" fill="rgb(231,7,11)" fg:x="987" fg:w="175"/><text x="79.4000%" y="575.50">indefinite::rules::nu..</text></g><g><title>regex::regex::string::Regex::new (155 samples, 12.43%)</title><rect x="80.7538%" y="549" width="12.4298%" height="15" fill="rgb(205,149,21)" fg:x="1007" fg:w="155"/><text x="81.0038%" y="559.50">regex::regex::strin..</text></g><g><title>regex::builders::Builder::build_one_string (155 samples, 12.43%)</title><rect x="80.7538%" y="533" width="12.4298%" height="15" fill="rgb(215,126,34)" fg:x="1007" fg:w="155"/><text x="81.0038%" y="543.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (155 samples, 12.43%)</title><rect x="80.7538%" y="517" width="12.4298%" height="15" fill="rgb(241,132,45)" fg:x="1007" fg:w="155"/><text x="81.0038%" y="527.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.80%)</title><rect x="92.3817%" y="501" width="0.8019%" height="15" fill="rgb(252,69,32)" fg:x="1152" fg:w="10"/><text x="92.6317%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.80%)</title><rect x="92.3817%" y="485" width="0.8019%" height="15" fill="rgb(232,204,19)" fg:x="1152" fg:w="10"/><text x="92.6317%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (3 samples, 0.24%)</title><rect x="92.9431%" y="469" width="0.2406%" height="15" fill="rgb(249,15,47)" fg:x="1159" fg:w="3"/><text x="93.1931%" y="479.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="93.1836%" y="549" width="0.0802%" height="15" fill="rgb(209,227,23)" fg:x="1162" fg:w="1"/><text x="93.4336%" y="559.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="93.1836%" y="533" width="0.0802%" height="15" fill="rgb(248,92,24)" fg:x="1162" fg:w="1"/><text x="93.4336%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="93.1836%" y="517" width="0.0802%" height="15" fill="rgb(247,59,2)" fg:x="1162" fg:w="1"/><text x="93.4336%" y="527.50"></text></g><g><title>core::ptr::write (1 samples, 0.08%)</title><rect x="93.1836%" y="501" width="0.0802%" height="15" fill="rgb(221,30,5)" fg:x="1162" fg:w="1"/><text x="93.4336%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="93.4242%" y="501" width="0.0802%" height="15" fill="rgb(208,108,53)" fg:x="1165" fg:w="1"/><text x="93.6742%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::next_state_id (1 samples, 0.08%)</title><rect x="93.4242%" y="485" width="0.0802%" height="15" fill="rgb(211,183,26)" fg:x="1165" fg:w="1"/><text x="93.6742%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="93.4242%" y="533" width="0.1604%" height="15" fill="rgb(232,132,4)" fg:x="1165" fg:w="2"/><text x="93.6742%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="93.4242%" y="517" width="0.1604%" height="15" fill="rgb(253,128,37)" fg:x="1165" fg:w="2"/><text x="93.6742%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="93.5044%" y="501" width="0.0802%" height="15" fill="rgb(221,58,24)" fg:x="1166" fg:w="1"/><text x="93.7544%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.5846%" y="533" width="0.0802%" height="15" fill="rgb(230,54,45)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.6648%" y="501" width="0.0802%" height="15" fill="rgb(254,21,18)" fg:x="1168" fg:w="1"/><text x="93.9148%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="93.7450%" y="485" width="0.0802%" height="15" fill="rgb(221,108,0)" fg:x="1169" fg:w="1"/><text x="93.9950%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.7450%" y="469" width="0.0802%" height="15" fill="rgb(206,95,1)" fg:x="1169" fg:w="1"/><text x="93.9950%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="93.6648%" y="533" width="0.2406%" height="15" fill="rgb(237,52,5)" fg:x="1168" fg:w="3"/><text x="93.9148%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="93.6648%" y="517" width="0.2406%" height="15" fill="rgb(218,150,34)" fg:x="1168" fg:w="3"/><text x="93.9148%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="93.7450%" y="501" width="0.1604%" height="15" fill="rgb(235,194,28)" fg:x="1169" fg:w="2"/><text x="93.9950%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="93.8252%" y="485" width="0.0802%" height="15" fill="rgb(245,92,18)" fg:x="1170" fg:w="1"/><text x="94.0752%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.8252%" y="469" width="0.0802%" height="15" fill="rgb(253,203,53)" fg:x="1170" fg:w="1"/><text x="94.0752%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="93.9856%" y="485" width="0.1604%" height="15" fill="rgb(249,185,47)" fg:x="1172" fg:w="2"/><text x="94.2356%" y="495.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="93.9856%" y="469" width="0.1604%" height="15" fill="rgb(252,194,52)" fg:x="1172" fg:w="2"/><text x="94.2356%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="93.9856%" y="453" width="0.1604%" height="15" fill="rgb(210,53,36)" fg:x="1172" fg:w="2"/><text x="94.2356%" y="463.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="93.9856%" y="437" width="0.1604%" height="15" fill="rgb(237,37,25)" fg:x="1172" fg:w="2"/><text x="94.2356%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="94.2261%" y="453" width="0.4812%" height="15" fill="rgb(242,116,27)" fg:x="1175" fg:w="6"/><text x="94.4761%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="94.1460%" y="469" width="0.6415%" height="15" fill="rgb(213,185,26)" fg:x="1174" fg:w="8"/><text x="94.3960%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="94.7073%" y="453" width="0.0802%" height="15" fill="rgb(225,204,8)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="94.7073%" y="437" width="0.0802%" height="15" fill="rgb(254,111,37)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="94.7073%" y="421" width="0.0802%" height="15" fill="rgb(242,35,9)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7073%" y="405" width="0.0802%" height="15" fill="rgb(232,138,49)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7073%" y="389" width="0.0802%" height="15" fill="rgb(247,56,4)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7073%" y="373" width="0.0802%" height="15" fill="rgb(226,179,17)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.7875%" y="437" width="0.0802%" height="15" fill="rgb(216,163,45)" fg:x="1182" fg:w="1"/><text x="95.0375%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7875%" y="421" width="0.0802%" height="15" fill="rgb(211,157,3)" fg:x="1182" fg:w="1"/><text x="95.0375%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7875%" y="405" width="0.0802%" height="15" fill="rgb(234,44,20)" fg:x="1182" fg:w="1"/><text x="95.0375%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="94.7875%" y="453" width="0.1604%" height="15" fill="rgb(254,138,23)" fg:x="1182" fg:w="2"/><text x="95.0375%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="94.8677%" y="437" width="0.0802%" height="15" fill="rgb(206,119,39)" fg:x="1183" fg:w="1"/><text x="95.1177%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="94.8677%" y="421" width="0.0802%" height="15" fill="rgb(231,105,52)" fg:x="1183" fg:w="1"/><text x="95.1177%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.8677%" y="405" width="0.0802%" height="15" fill="rgb(250,20,5)" fg:x="1183" fg:w="1"/><text x="95.1177%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.8677%" y="389" width="0.0802%" height="15" fill="rgb(215,198,30)" fg:x="1183" fg:w="1"/><text x="95.1177%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="94.9479%" y="437" width="0.0802%" height="15" fill="rgb(246,142,8)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="447.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.96%)</title><rect x="94.1460%" y="485" width="0.9623%" height="15" fill="rgb(243,26,38)" fg:x="1174" fg:w="12"/><text x="94.3960%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="94.7875%" y="469" width="0.3208%" height="15" fill="rgb(205,133,28)" fg:x="1182" fg:w="4"/><text x="95.0375%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="94.9479%" y="453" width="0.1604%" height="15" fill="rgb(212,34,0)" fg:x="1184" fg:w="2"/><text x="95.1979%" y="463.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="95.0281%" y="437" width="0.0802%" height="15" fill="rgb(251,226,22)" fg:x="1185" fg:w="1"/><text x="95.2781%" y="447.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="95.0281%" y="421" width="0.0802%" height="15" fill="rgb(252,119,9)" fg:x="1185" fg:w="1"/><text x="95.2781%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.1083%" y="485" width="0.1604%" height="15" fill="rgb(213,150,50)" fg:x="1186" fg:w="2"/><text x="95.3583%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.1083%" y="469" width="0.1604%" height="15" fill="rgb(212,24,39)" fg:x="1186" fg:w="2"/><text x="95.3583%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.1083%" y="453" width="0.1604%" height="15" fill="rgb(213,46,39)" fg:x="1186" fg:w="2"/><text x="95.3583%" y="463.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="95.1885%" y="437" width="0.0802%" height="15" fill="rgb(239,106,12)" fg:x="1187" fg:w="1"/><text x="95.4385%" y="447.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (18 samples, 1.44%)</title><rect x="93.9054%" y="501" width="1.4435%" height="15" fill="rgb(249,229,21)" fg:x="1171" fg:w="18"/><text x="94.1554%" y="511.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="95.2686%" y="485" width="0.0802%" height="15" fill="rgb(212,158,3)" fg:x="1188" fg:w="1"/><text x="95.5186%" y="495.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.2686%" y="469" width="0.0802%" height="15" fill="rgb(253,26,48)" fg:x="1188" fg:w="1"/><text x="95.5186%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.2686%" y="453" width="0.0802%" height="15" fill="rgb(238,178,20)" fg:x="1188" fg:w="1"/><text x="95.5186%" y="463.50"></text></g><g><title>regex::regex::string::Regex::new (19 samples, 1.52%)</title><rect x="93.9054%" y="533" width="1.5237%" height="15" fill="rgb(208,86,15)" fg:x="1171" fg:w="19"/><text x="94.1554%" y="543.50"></text></g><g><title>regex::builders::Builder::build_one_string (19 samples, 1.52%)</title><rect x="93.9054%" y="517" width="1.5237%" height="15" fill="rgb(239,42,53)" fg:x="1171" fg:w="19"/><text x="94.1554%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="95.3488%" y="501" width="0.0802%" height="15" fill="rgb(245,226,8)" fg:x="1189" fg:w="1"/><text x="95.5988%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="95.4290%" y="485" width="0.3208%" height="15" fill="rgb(216,176,32)" fg:x="1190" fg:w="4"/><text x="95.6790%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="95.4290%" y="469" width="0.3208%" height="15" fill="rgb(231,186,21)" fg:x="1190" fg:w="4"/><text x="95.6790%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.6696%" y="453" width="0.0802%" height="15" fill="rgb(205,95,49)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="95.6696%" y="437" width="0.0802%" height="15" fill="rgb(217,145,8)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="447.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (32 samples, 2.57%)</title><rect x="93.2638%" y="549" width="2.5662%" height="15" fill="rgb(239,144,48)" fg:x="1163" fg:w="32"/><text x="93.5138%" y="559.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.4290%" y="533" width="0.4010%" height="15" fill="rgb(214,189,23)" fg:x="1190" fg:w="5"/><text x="95.6790%" y="543.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.4290%" y="517" width="0.4010%" height="15" fill="rgb(229,157,17)" fg:x="1190" fg:w="5"/><text x="95.6790%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.4290%" y="501" width="0.4010%" height="15" fill="rgb(230,5,48)" fg:x="1190" fg:w="5"/><text x="95.6790%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="95.7498%" y="485" width="0.0802%" height="15" fill="rgb(224,156,48)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="95.7498%" y="469" width="0.0802%" height="15" fill="rgb(223,14,29)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7498%" y="453" width="0.0802%" height="15" fill="rgb(229,96,36)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7498%" y="437" width="0.0802%" height="15" fill="rgb(231,102,53)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="447.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (318 samples, 25.50%)</title><rect x="70.4090%" y="645" width="25.5012%" height="15" fill="rgb(210,77,38)" fg:x="878" fg:w="318"/><text x="70.6590%" y="655.50">&lt;&amp;kernel::model::entry::Entry as plugins_..</text></g><g><title>plugins_core::looking::model::qualify_name (318 samples, 25.50%)</title><rect x="70.4090%" y="629" width="25.5012%" height="15" fill="rgb(235,131,6)" fg:x="878" fg:w="318"/><text x="70.6590%" y="639.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (318 samples, 25.50%)</title><rect x="70.4090%" y="613" width="25.5012%" height="15" fill="rgb(252,55,38)" fg:x="878" fg:w="318"/><text x="70.6590%" y="623.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (318 samples, 25.50%)</title><rect x="70.4090%" y="597" width="25.5012%" height="15" fill="rgb(246,38,14)" fg:x="878" fg:w="318"/><text x="70.6590%" y="607.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (317 samples, 25.42%)</title><rect x="70.4892%" y="581" width="25.4210%" height="15" fill="rgb(242,27,5)" fg:x="879" fg:w="317"/><text x="70.7392%" y="591.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (34 samples, 2.73%)</title><rect x="93.1836%" y="565" width="2.7265%" height="15" fill="rgb(228,65,35)" fg:x="1162" fg:w="34"/><text x="93.4336%" y="575.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="95.8300%" y="549" width="0.0802%" height="15" fill="rgb(245,93,11)" fg:x="1195" fg:w="1"/><text x="96.0800%" y="559.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (321 samples, 25.74%)</title><rect x="70.3288%" y="677" width="25.7418%" height="15" fill="rgb(213,1,31)" fg:x="877" fg:w="321"/><text x="70.5788%" y="687.50">&lt;plugins_core::looking::actions::LookActi..</text></g><g><title>plugins_core::looking::model::new_area_observation (321 samples, 25.74%)</title><rect x="70.3288%" y="661" width="25.7418%" height="15" fill="rgb(237,205,14)" fg:x="877" fg:w="321"/><text x="70.5788%" y="671.50">plugins_core::looking::model::new_area_ob..</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="95.9102%" y="645" width="0.1604%" height="15" fill="rgb(232,118,45)" fg:x="1196" fg:w="2"/><text x="96.1602%" y="655.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="95.9904%" y="629" width="0.0802%" height="15" fill="rgb(218,5,6)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="95.9904%" y="613" width="0.0802%" height="15" fill="rgb(251,87,51)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.9904%" y="597" width="0.0802%" height="15" fill="rgb(207,225,20)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="95.9904%" y="581" width="0.0802%" height="15" fill="rgb(222,78,54)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.9904%" y="565" width="0.0802%" height="15" fill="rgb(232,85,16)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.9904%" y="549" width="0.0802%" height="15" fill="rgb(244,25,33)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="95.9904%" y="533" width="0.0802%" height="15" fill="rgb(233,24,36)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="95.9904%" y="517" width="0.0802%" height="15" fill="rgb(253,49,54)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="95.9904%" y="501" width="0.0802%" height="15" fill="rgb(245,12,22)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="95.9904%" y="485" width="0.0802%" height="15" fill="rgb(253,141,28)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="95.9904%" y="469" width="0.0802%" height="15" fill="rgb(225,207,27)" fg:x="1197" fg:w="1"/><text x="96.2404%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="96.0706%" y="613" width="0.0802%" height="15" fill="rgb(220,84,2)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="96.0706%" y="597" width="0.0802%" height="15" fill="rgb(224,37,37)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.0706%" y="581" width="0.0802%" height="15" fill="rgb(220,143,18)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.0706%" y="565" width="0.0802%" height="15" fill="rgb(210,88,33)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.0706%" y="549" width="0.0802%" height="15" fill="rgb(219,87,51)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.0706%" y="533" width="0.0802%" height="15" fill="rgb(211,7,35)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.0706%" y="517" width="0.0802%" height="15" fill="rgb(232,77,2)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.0706%" y="501" width="0.0802%" height="15" fill="rgb(249,94,25)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.0706%" y="485" width="0.0802%" height="15" fill="rgb(215,112,2)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.0706%" y="469" width="0.0802%" height="15" fill="rgb(226,115,48)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.0706%" y="453" width="0.0802%" height="15" fill="rgb(249,196,10)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="96.0706%" y="661" width="0.1604%" height="15" fill="rgb(237,109,14)" fg:x="1198" fg:w="2"/><text x="96.3206%" y="671.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="96.0706%" y="645" width="0.1604%" height="15" fill="rgb(217,103,53)" fg:x="1198" fg:w="2"/><text x="96.3206%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="96.0706%" y="629" width="0.1604%" height="15" fill="rgb(244,137,9)" fg:x="1198" fg:w="2"/><text x="96.3206%" y="639.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="96.1508%" y="613" width="0.0802%" height="15" fill="rgb(227,201,3)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.1508%" y="597" width="0.0802%" height="15" fill="rgb(243,94,6)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.1508%" y="581" width="0.0802%" height="15" fill="rgb(235,118,5)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.1508%" y="565" width="0.0802%" height="15" fill="rgb(247,10,30)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.1508%" y="549" width="0.0802%" height="15" fill="rgb(205,26,28)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="559.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (3 samples, 0.24%)</title><rect x="96.0706%" y="677" width="0.2406%" height="15" fill="rgb(206,99,35)" fg:x="1198" fg:w="3"/><text x="96.3206%" y="687.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (1 samples, 0.08%)</title><rect x="96.2310%" y="661" width="0.0802%" height="15" fill="rgb(238,130,40)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="96.2310%" y="645" width="0.0802%" height="15" fill="rgb(224,126,31)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="96.2310%" y="629" width="0.0802%" height="15" fill="rgb(254,105,17)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="639.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="96.2310%" y="613" width="0.0802%" height="15" fill="rgb(216,87,36)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.2310%" y="597" width="0.0802%" height="15" fill="rgb(240,21,12)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.2310%" y="581" width="0.0802%" height="15" fill="rgb(245,192,34)" fg:x="1200" fg:w="1"/><text x="96.4810%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::evaluate (1 samples, 0.08%)</title><rect x="96.3111%" y="677" width="0.0802%" height="15" fill="rgb(226,100,49)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="96.3111%" y="661" width="0.0802%" height="15" fill="rgb(245,188,27)" fg:x="1201" fg:w="1"/><text x="96.5611%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.4715%" y="613" width="0.1604%" height="15" fill="rgb(212,170,8)" fg:x="1203" fg:w="2"/><text x="96.7215%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.5517%" y="597" width="0.0802%" height="15" fill="rgb(217,113,29)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="96.5517%" y="581" width="0.0802%" height="15" fill="rgb(237,30,3)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.5517%" y="565" width="0.0802%" height="15" fill="rgb(227,19,28)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (5 samples, 0.40%)</title><rect x="96.3913%" y="645" width="0.4010%" height="15" fill="rgb(239,172,45)" fg:x="1202" fg:w="5"/><text x="96.6413%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="96.4715%" y="629" width="0.3208%" height="15" fill="rgb(254,55,39)" fg:x="1203" fg:w="4"/><text x="96.7215%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="96.6319%" y="613" width="0.1604%" height="15" fill="rgb(249,208,12)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="96.8725%" y="613" width="0.0802%" height="15" fill="rgb(240,52,13)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.8725%" y="597" width="0.0802%" height="15" fill="rgb(252,149,13)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8725%" y="581" width="0.0802%" height="15" fill="rgb(232,81,48)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0329%" y="517" width="0.0802%" height="15" fill="rgb(222,144,2)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="97.1131%" y="517" width="0.0802%" height="15" fill="rgb(216,81,32)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1131%" y="501" width="0.0802%" height="15" fill="rgb(244,78,51)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1933%" y="501" width="0.0802%" height="15" fill="rgb(217,66,21)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1933%" y="485" width="0.0802%" height="15" fill="rgb(247,101,42)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.1933%" y="469" width="0.0802%" height="15" fill="rgb(227,81,39)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.1933%" y="453" width="0.0802%" height="15" fill="rgb(220,223,44)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.1933%" y="437" width="0.0802%" height="15" fill="rgb(205,218,2)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1933%" y="421" width="0.0802%" height="15" fill="rgb(212,207,28)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1933%" y="405" width="0.0802%" height="15" fill="rgb(224,12,41)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.1933%" y="389" width="0.0802%" height="15" fill="rgb(216,118,12)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.1933%" y="373" width="0.0802%" height="15" fill="rgb(252,97,46)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.1933%" y="357" width="0.0802%" height="15" fill="rgb(244,206,19)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.1933%" y="341" width="0.0802%" height="15" fill="rgb(231,84,31)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1933%" y="325" width="0.0802%" height="15" fill="rgb(244,133,0)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="97.2735%" y="453" width="0.0802%" height="15" fill="rgb(223,15,50)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2735%" y="437" width="0.0802%" height="15" fill="rgb(250,118,49)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2735%" y="421" width="0.0802%" height="15" fill="rgb(248,25,38)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.2735%" y="405" width="0.0802%" height="15" fill="rgb(215,70,14)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.2735%" y="389" width="0.0802%" height="15" fill="rgb(215,28,15)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.2735%" y="373" width="0.0802%" height="15" fill="rgb(243,6,28)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2735%" y="357" width="0.0802%" height="15" fill="rgb(222,130,1)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2735%" y="341" width="0.0802%" height="15" fill="rgb(236,166,44)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.2735%" y="325" width="0.0802%" height="15" fill="rgb(221,108,14)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.2735%" y="309" width="0.0802%" height="15" fill="rgb(252,3,45)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.2735%" y="293" width="0.0802%" height="15" fill="rgb(237,68,30)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.2735%" y="277" width="0.0802%" height="15" fill="rgb(211,79,22)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2735%" y="261" width="0.0802%" height="15" fill="rgb(252,185,21)" fg:x="1213" fg:w="1"/><text x="97.5235%" y="271.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (6 samples, 0.48%)</title><rect x="96.9527%" y="565" width="0.4812%" height="15" fill="rgb(225,189,26)" fg:x="1209" fg:w="6"/><text x="97.2027%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="97.0329%" y="549" width="0.4010%" height="15" fill="rgb(241,30,40)" fg:x="1210" fg:w="5"/><text x="97.2829%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="97.0329%" y="533" width="0.4010%" height="15" fill="rgb(235,215,44)" fg:x="1210" fg:w="5"/><text x="97.2829%" y="543.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.24%)</title><rect x="97.1933%" y="517" width="0.2406%" height="15" fill="rgb(205,8,29)" fg:x="1212" fg:w="3"/><text x="97.4433%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="97.2735%" y="501" width="0.1604%" height="15" fill="rgb(241,137,42)" fg:x="1213" fg:w="2"/><text x="97.5235%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="97.2735%" y="485" width="0.1604%" height="15" fill="rgb(237,155,2)" fg:x="1213" fg:w="2"/><text x="97.5235%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="97.2735%" y="469" width="0.1604%" height="15" fill="rgb(245,29,42)" fg:x="1213" fg:w="2"/><text x="97.5235%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.3536%" y="453" width="0.0802%" height="15" fill="rgb(234,101,35)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.3536%" y="437" width="0.0802%" height="15" fill="rgb(228,64,37)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.3536%" y="421" width="0.0802%" height="15" fill="rgb(217,214,36)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.3536%" y="405" width="0.0802%" height="15" fill="rgb(243,70,3)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3536%" y="389" width="0.0802%" height="15" fill="rgb(253,158,52)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3536%" y="373" width="0.0802%" height="15" fill="rgb(234,111,54)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.3536%" y="357" width="0.0802%" height="15" fill="rgb(217,70,32)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.3536%" y="341" width="0.0802%" height="15" fill="rgb(234,18,33)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="97.3536%" y="325" width="0.0802%" height="15" fill="rgb(234,12,49)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4338%" y="261" width="0.0802%" height="15" fill="rgb(236,10,21)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="97.4338%" y="293" width="0.1604%" height="15" fill="rgb(248,182,45)" fg:x="1215" fg:w="2"/><text x="97.6838%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.4338%" y="277" width="0.1604%" height="15" fill="rgb(217,95,36)" fg:x="1215" fg:w="2"/><text x="97.6838%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.5140%" y="261" width="0.0802%" height="15" fill="rgb(212,110,31)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5140%" y="245" width="0.0802%" height="15" fill="rgb(206,32,53)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="97.4338%" y="405" width="0.2406%" height="15" fill="rgb(246,141,37)" fg:x="1215" fg:w="3"/><text x="97.6838%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="97.4338%" y="389" width="0.2406%" height="15" fill="rgb(219,16,7)" fg:x="1215" fg:w="3"/><text x="97.6838%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.4338%" y="373" width="0.2406%" height="15" fill="rgb(230,205,45)" fg:x="1215" fg:w="3"/><text x="97.6838%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.4338%" y="357" width="0.2406%" height="15" fill="rgb(231,43,49)" fg:x="1215" fg:w="3"/><text x="97.6838%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="97.4338%" y="341" width="0.2406%" height="15" fill="rgb(212,106,34)" fg:x="1215" fg:w="3"/><text x="97.6838%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.4338%" y="325" width="0.2406%" height="15" fill="rgb(206,83,17)" fg:x="1215" fg:w="3"/><text x="97.6838%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.4338%" y="309" width="0.2406%" height="15" fill="rgb(244,154,49)" fg:x="1215" fg:w="3"/><text x="97.6838%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5942%" y="293" width="0.0802%" height="15" fill="rgb(244,149,49)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5942%" y="277" width="0.0802%" height="15" fill="rgb(227,134,18)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5942%" y="261" width="0.0802%" height="15" fill="rgb(237,116,36)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5942%" y="245" width="0.0802%" height="15" fill="rgb(205,129,40)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.6744%" y="325" width="0.0802%" height="15" fill="rgb(236,178,4)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.6744%" y="309" width="0.0802%" height="15" fill="rgb(251,76,53)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (5 samples, 0.40%)</title><rect x="97.4338%" y="517" width="0.4010%" height="15" fill="rgb(242,92,40)" fg:x="1215" fg:w="5"/><text x="97.6838%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="97.4338%" y="501" width="0.4010%" height="15" fill="rgb(209,45,30)" fg:x="1215" fg:w="5"/><text x="97.6838%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="97.4338%" y="485" width="0.4010%" height="15" fill="rgb(218,157,36)" fg:x="1215" fg:w="5"/><text x="97.6838%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.40%)</title><rect x="97.4338%" y="469" width="0.4010%" height="15" fill="rgb(222,186,16)" fg:x="1215" fg:w="5"/><text x="97.6838%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="97.4338%" y="453" width="0.4010%" height="15" fill="rgb(254,72,35)" fg:x="1215" fg:w="5"/><text x="97.6838%" y="463.50"></text></g><g><title>engine::internal::Entities::prepare_entity (5 samples, 0.40%)</title><rect x="97.4338%" y="437" width="0.4010%" height="15" fill="rgb(224,25,35)" fg:x="1215" fg:w="5"/><text x="97.6838%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="97.4338%" y="421" width="0.4010%" height="15" fill="rgb(206,135,52)" fg:x="1215" fg:w="5"/><text x="97.6838%" y="431.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="97.6744%" y="405" width="0.1604%" height="15" fill="rgb(229,174,47)" fg:x="1218" fg:w="2"/><text x="97.9244%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.6744%" y="389" width="0.1604%" height="15" fill="rgb(242,184,21)" fg:x="1218" fg:w="2"/><text x="97.9244%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.6744%" y="373" width="0.1604%" height="15" fill="rgb(213,22,45)" fg:x="1218" fg:w="2"/><text x="97.9244%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.6744%" y="357" width="0.1604%" height="15" fill="rgb(237,81,54)" fg:x="1218" fg:w="2"/><text x="97.9244%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.6744%" y="341" width="0.1604%" height="15" fill="rgb(248,177,18)" fg:x="1218" fg:w="2"/><text x="97.9244%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.7546%" y="325" width="0.0802%" height="15" fill="rgb(254,31,16)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7546%" y="309" width="0.0802%" height="15" fill="rgb(235,20,31)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.7546%" y="293" width="0.0802%" height="15" fill="rgb(240,56,43)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="97.7546%" y="277" width="0.0802%" height="15" fill="rgb(237,197,51)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="287.50"></text></g><g><title>plugins_core::tools::get_contained_keys (6 samples, 0.48%)</title><rect x="97.4338%" y="565" width="0.4812%" height="15" fill="rgb(241,162,44)" fg:x="1215" fg:w="6"/><text x="97.6838%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="97.4338%" y="549" width="0.4812%" height="15" fill="rgb(224,23,20)" fg:x="1215" fg:w="6"/><text x="97.6838%" y="559.50"></text></g><g><title>kernel::model::Entity::load_scope (6 samples, 0.48%)</title><rect x="97.4338%" y="533" width="0.4812%" height="15" fill="rgb(250,109,34)" fg:x="1215" fg:w="6"/><text x="97.6838%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.8348%" y="517" width="0.0802%" height="15" fill="rgb(214,175,50)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.8348%" y="501" width="0.0802%" height="15" fill="rgb(213,182,5)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="96.9527%" y="597" width="1.0425%" height="15" fill="rgb(209,199,19)" fg:x="1209" fg:w="13"/><text x="97.2027%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.04%)</title><rect x="96.9527%" y="581" width="1.0425%" height="15" fill="rgb(236,224,42)" fg:x="1209" fg:w="13"/><text x="97.2027%" y="591.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="97.9150%" y="565" width="0.0802%" height="15" fill="rgb(246,226,29)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.9150%" y="549" width="0.0802%" height="15" fill="rgb(227,223,11)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="559.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.9150%" y="533" width="0.0802%" height="15" fill="rgb(219,7,51)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9150%" y="517" width="0.0802%" height="15" fill="rgb(245,167,10)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9150%" y="501" width="0.0802%" height="15" fill="rgb(237,224,16)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9150%" y="485" width="0.0802%" height="15" fill="rgb(226,132,13)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9150%" y="469" width="0.0802%" height="15" fill="rgb(214,140,3)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.9150%" y="453" width="0.0802%" height="15" fill="rgb(221,177,4)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.9150%" y="437" width="0.0802%" height="15" fill="rgb(238,139,3)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9952%" y="549" width="0.0802%" height="15" fill="rgb(216,17,39)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9952%" y="533" width="0.0802%" height="15" fill="rgb(238,120,9)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.9952%" y="517" width="0.0802%" height="15" fill="rgb(244,92,53)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.9952%" y="501" width="0.0802%" height="15" fill="rgb(224,148,33)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.9952%" y="485" width="0.0802%" height="15" fill="rgb(243,6,36)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9952%" y="469" width="0.0802%" height="15" fill="rgb(230,102,11)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9952%" y="453" width="0.0802%" height="15" fill="rgb(234,148,36)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.9952%" y="437" width="0.0802%" height="15" fill="rgb(251,153,25)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.9952%" y="421" width="0.0802%" height="15" fill="rgb(215,129,8)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.9952%" y="405" width="0.0802%" height="15" fill="rgb(224,128,35)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.9952%" y="389" width="0.0802%" height="15" fill="rgb(237,56,52)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9952%" y="373" width="0.0802%" height="15" fill="rgb(234,213,19)" fg:x="1222" fg:w="1"/><text x="98.2452%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3962%" y="341" width="0.0802%" height="15" fill="rgb(252,82,23)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.3962%" y="357" width="0.2406%" height="15" fill="rgb(254,201,21)" fg:x="1227" fg:w="3"/><text x="98.6462%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.4763%" y="341" width="0.1604%" height="15" fill="rgb(250,186,11)" fg:x="1228" fg:w="2"/><text x="98.7263%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.5565%" y="325" width="0.0802%" height="15" fill="rgb(211,174,5)" fg:x="1229" fg:w="1"/><text x="98.8065%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.3962%" y="373" width="0.3208%" height="15" fill="rgb(214,121,10)" fg:x="1227" fg:w="4"/><text x="98.6462%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.6367%" y="357" width="0.0802%" height="15" fill="rgb(241,66,2)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6367%" y="341" width="0.0802%" height="15" fill="rgb(220,167,19)" fg:x="1230" fg:w="1"/><text x="98.8867%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.40%)</title><rect x="98.3962%" y="389" width="0.4010%" height="15" fill="rgb(231,54,50)" fg:x="1227" fg:w="5"/><text x="98.6462%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7169%" y="373" width="0.0802%" height="15" fill="rgb(239,217,53)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7169%" y="357" width="0.0802%" height="15" fill="rgb(248,8,0)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.7169%" y="341" width="0.0802%" height="15" fill="rgb(229,118,37)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7169%" y="325" width="0.0802%" height="15" fill="rgb(253,223,43)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.7169%" y="309" width="0.0802%" height="15" fill="rgb(211,77,36)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7169%" y="293" width="0.0802%" height="15" fill="rgb(219,3,53)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.64%)</title><rect x="98.2358%" y="437" width="0.6415%" height="15" fill="rgb(244,45,42)" fg:x="1225" fg:w="8"/><text x="98.4858%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="98.2358%" y="421" width="0.6415%" height="15" fill="rgb(225,95,27)" fg:x="1225" fg:w="8"/><text x="98.4858%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="98.2358%" y="405" width="0.6415%" height="15" fill="rgb(207,74,8)" fg:x="1225" fg:w="8"/><text x="98.4858%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.7971%" y="389" width="0.0802%" height="15" fill="rgb(243,63,36)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7971%" y="373" width="0.0802%" height="15" fill="rgb(211,180,12)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.72%)</title><rect x="98.2358%" y="453" width="0.7217%" height="15" fill="rgb(254,166,49)" fg:x="1225" fg:w="9"/><text x="98.4858%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.8773%" y="437" width="0.0802%" height="15" fill="rgb(205,19,0)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8773%" y="421" width="0.0802%" height="15" fill="rgb(224,172,32)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="431.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (12 samples, 0.96%)</title><rect x="98.1556%" y="485" width="0.9623%" height="15" fill="rgb(254,136,30)" fg:x="1224" fg:w="12"/><text x="98.4056%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="98.2358%" y="469" width="0.8821%" height="15" fill="rgb(246,19,35)" fg:x="1225" fg:w="11"/><text x="98.4858%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="98.9575%" y="453" width="0.1604%" height="15" fill="rgb(219,24,36)" fg:x="1234" fg:w="2"/><text x="99.2075%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0377%" y="437" width="0.0802%" height="15" fill="rgb(251,55,1)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 1.20%)</title><rect x="98.0754%" y="501" width="1.2029%" height="15" fill="rgb(218,117,39)" fg:x="1223" fg:w="15"/><text x="98.3254%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="99.1179%" y="485" width="0.1604%" height="15" fill="rgb(248,169,11)" fg:x="1236" fg:w="2"/><text x="99.3679%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="99.1179%" y="469" width="0.1604%" height="15" fill="rgb(244,40,44)" fg:x="1236" fg:w="2"/><text x="99.3679%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.1981%" y="453" width="0.0802%" height="15" fill="rgb(234,62,37)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (18 samples, 1.44%)</title><rect x="98.0754%" y="533" width="1.4435%" height="15" fill="rgb(207,117,42)" fg:x="1223" fg:w="18"/><text x="98.3254%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 1.44%)</title><rect x="98.0754%" y="517" width="1.4435%" height="15" fill="rgb(213,43,2)" fg:x="1223" fg:w="18"/><text x="98.3254%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="99.2783%" y="501" width="0.2406%" height="15" fill="rgb(244,202,51)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="99.3585%" y="485" width="0.1604%" height="15" fill="rgb(253,174,46)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="99.5188%" y="485" width="0.1604%" height="15" fill="rgb(251,23,1)" fg:x="1241" fg:w="2"/><text x="99.7688%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="99.5188%" y="469" width="0.1604%" height="15" fill="rgb(253,26,1)" fg:x="1241" fg:w="2"/><text x="99.7688%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="99.5188%" y="453" width="0.1604%" height="15" fill="rgb(216,89,31)" fg:x="1241" fg:w="2"/><text x="99.7688%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6792%" y="485" width="0.0802%" height="15" fill="rgb(209,109,5)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.6792%" y="469" width="0.0802%" height="15" fill="rgb(229,63,13)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.6792%" y="453" width="0.0802%" height="15" fill="rgb(238,137,54)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.7594%" y="437" width="0.0802%" height="15" fill="rgb(228,1,9)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.7594%" y="421" width="0.0802%" height="15" fill="rgb(249,120,48)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="431.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (38 samples, 3.05%)</title><rect x="96.8725%" y="629" width="3.0473%" height="15" fill="rgb(209,72,36)" fg:x="1208" fg:w="38"/><text x="97.1225%" y="639.50">&lt;pl..</text></g><g><title>core::iter::adapters::try_process (37 samples, 2.97%)</title><rect x="96.9527%" y="613" width="2.9671%" height="15" fill="rgb(247,98,49)" fg:x="1209" fg:w="37"/><text x="97.2027%" y="623.50">cor..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (24 samples, 1.92%)</title><rect x="97.9952%" y="597" width="1.9246%" height="15" fill="rgb(233,75,36)" fg:x="1222" fg:w="24"/><text x="98.2452%" y="607.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (24 samples, 1.92%)</title><rect x="97.9952%" y="581" width="1.9246%" height="15" fill="rgb(225,14,24)" fg:x="1222" fg:w="24"/><text x="98.2452%" y="591.50">&lt;..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (24 samples, 1.92%)</title><rect x="97.9952%" y="565" width="1.9246%" height="15" fill="rgb(237,193,20)" fg:x="1222" fg:w="24"/><text x="98.2452%" y="575.50">p..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (23 samples, 1.84%)</title><rect x="98.0754%" y="549" width="1.8444%" height="15" fill="rgb(239,122,19)" fg:x="1223" fg:w="23"/><text x="98.3254%" y="559.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (5 samples, 0.40%)</title><rect x="99.5188%" y="533" width="0.4010%" height="15" fill="rgb(231,220,10)" fg:x="1241" fg:w="5"/><text x="99.7688%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="99.5188%" y="517" width="0.4010%" height="15" fill="rgb(220,66,15)" fg:x="1241" fg:w="5"/><text x="99.7688%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="99.5188%" y="501" width="0.4010%" height="15" fill="rgb(215,171,52)" fg:x="1241" fg:w="5"/><text x="99.7688%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.7594%" y="485" width="0.1604%" height="15" fill="rgb(241,169,50)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="99.7594%" y="469" width="0.1604%" height="15" fill="rgb(236,189,0)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.7594%" y="453" width="0.1604%" height="15" fill="rgb(217,147,20)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.8396%" y="437" width="0.0802%" height="15" fill="rgb(206,188,39)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.8396%" y="421" width="0.0802%" height="15" fill="rgb(227,118,25)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.8396%" y="405" width="0.0802%" height="15" fill="rgb(248,171,40)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8396%" y="389" width="0.0802%" height="15" fill="rgb(251,90,54)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="399.50"></text></g><g><title>all (1,247 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(234,11,46)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-a8fb0ec0 (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(229,134,13)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1055.50">simple-a8fb0ec0</text></g><g><title>_start (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(223,129,3)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(221,124,13)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(234,3,18)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,247 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(249,199,20)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(224,134,6)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(254,83,26)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(217,88,9)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(225,73,2)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(226,44,39)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(228,53,17)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(212,27,27)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,247 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(241,50,6)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(225,28,51)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,247 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(215,33,16)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(243,40,39)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,247 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(225,11,42)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,247 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(241,220,38)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (442 samples, 35.45%)</title><rect x="64.5549%" y="757" width="35.4451%" height="15" fill="rgb(244,52,35)" fg:x="805" fg:w="442"/><text x="64.8049%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (442 samples, 35.45%)</title><rect x="64.5549%" y="741" width="35.4451%" height="15" fill="rgb(246,42,46)" fg:x="805" fg:w="442"/><text x="64.8049%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (442 samples, 35.45%)</title><rect x="64.5549%" y="725" width="35.4451%" height="15" fill="rgb(205,184,13)" fg:x="805" fg:w="442"/><text x="64.8049%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (371 samples, 29.75%)</title><rect x="70.2486%" y="709" width="29.7514%" height="15" fill="rgb(209,48,36)" fg:x="876" fg:w="371"/><text x="70.4986%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (371 samples, 29.75%)</title><rect x="70.2486%" y="693" width="29.7514%" height="15" fill="rgb(244,34,51)" fg:x="876" fg:w="371"/><text x="70.4986%" y="703.50">engine::perform::StandardPerformer::evaluate_and..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (45 samples, 3.61%)</title><rect x="96.3913%" y="677" width="3.6087%" height="15" fill="rgb(221,107,33)" fg:x="1202" fg:w="45"/><text x="96.6413%" y="687.50">kern..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (45 samples, 3.61%)</title><rect x="96.3913%" y="661" width="3.6087%" height="15" fill="rgb(224,203,12)" fg:x="1202" fg:w="45"/><text x="96.6413%" y="671.50">&lt;plu..</text></g><g><title>plugins_rpc::querying::have_surroundings (40 samples, 3.21%)</title><rect x="96.7923%" y="645" width="3.2077%" height="15" fill="rgb(230,215,18)" fg:x="1207" fg:w="40"/><text x="97.0423%" y="655.50">plu..</text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="99.9198%" y="629" width="0.0802%" height="15" fill="rgb(206,185,35)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="639.50"></text></g></svg></svg>