<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1215"><g><title>&lt;engine::session::Session as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="629" width="0.0823%" height="15" fill="rgb(211,32,1)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0823%" y="629" width="0.0823%" height="15" fill="rgb(246,2,12)" fg:x="1" fg:w="1"/><text x="0.3323%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0823%" y="613" width="0.0823%" height="15" fill="rgb(243,37,27)" fg:x="1" fg:w="1"/><text x="0.3323%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="0.0823%" y="597" width="0.0823%" height="15" fill="rgb(248,211,31)" fg:x="1" fg:w="1"/><text x="0.3323%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0823%" y="581" width="0.0823%" height="15" fill="rgb(242,146,47)" fg:x="1" fg:w="1"/><text x="0.3323%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2469%" y="613" width="0.0823%" height="15" fill="rgb(206,70,20)" fg:x="3" fg:w="1"/><text x="0.4969%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4115%" y="533" width="0.0823%" height="15" fill="rgb(215,10,51)" fg:x="5" fg:w="1"/><text x="0.6615%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.3292%" y="549" width="0.4938%" height="15" fill="rgb(243,178,53)" fg:x="4" fg:w="6"/><text x="0.5792%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="0.4938%" y="533" width="0.3292%" height="15" fill="rgb(233,221,20)" fg:x="6" fg:w="4"/><text x="0.7438%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="0.5761%" y="517" width="0.2469%" height="15" fill="rgb(218,95,35)" fg:x="7" fg:w="3"/><text x="0.8261%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.6584%" y="501" width="0.1646%" height="15" fill="rgb(229,13,5)" fg:x="8" fg:w="2"/><text x="0.9084%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.6584%" y="485" width="0.1646%" height="15" fill="rgb(252,164,30)" fg:x="8" fg:w="2"/><text x="0.9084%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.6584%" y="469" width="0.1646%" height="15" fill="rgb(232,68,36)" fg:x="8" fg:w="2"/><text x="0.9084%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.58%)</title><rect x="0.3292%" y="581" width="0.5761%" height="15" fill="rgb(219,59,54)" fg:x="4" fg:w="7"/><text x="0.5792%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.58%)</title><rect x="0.3292%" y="565" width="0.5761%" height="15" fill="rgb(250,92,33)" fg:x="4" fg:w="7"/><text x="0.5792%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8230%" y="549" width="0.0823%" height="15" fill="rgb(229,162,54)" fg:x="10" fg:w="1"/><text x="1.0730%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.99%)</title><rect x="0.0000%" y="645" width="0.9877%" height="15" fill="rgb(244,114,52)" fg:x="0" fg:w="12"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (10 samples, 0.82%)</title><rect x="0.1646%" y="629" width="0.8230%" height="15" fill="rgb(212,211,43)" fg:x="2" fg:w="10"/><text x="0.4146%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.66%)</title><rect x="0.3292%" y="613" width="0.6584%" height="15" fill="rgb(226,147,8)" fg:x="4" fg:w="8"/><text x="0.5792%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (8 samples, 0.66%)</title><rect x="0.3292%" y="597" width="0.6584%" height="15" fill="rgb(226,23,13)" fg:x="4" fg:w="8"/><text x="0.5792%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="0.9053%" y="581" width="0.0823%" height="15" fill="rgb(240,63,4)" fg:x="11" fg:w="1"/><text x="1.1553%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9053%" y="565" width="0.0823%" height="15" fill="rgb(221,1,32)" fg:x="11" fg:w="1"/><text x="1.1553%" y="575.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.9877%" y="533" width="0.0823%" height="15" fill="rgb(242,117,10)" fg:x="12" fg:w="1"/><text x="1.2377%" y="543.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.9877%" y="517" width="0.0823%" height="15" fill="rgb(249,172,44)" fg:x="12" fg:w="1"/><text x="1.2377%" y="527.50"></text></g><g><title>_IO_default_xsputn (1 samples, 0.08%)</title><rect x="0.9877%" y="501" width="0.0823%" height="15" fill="rgb(244,46,45)" fg:x="12" fg:w="1"/><text x="1.2377%" y="511.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.33%)</title><rect x="0.9877%" y="581" width="0.3292%" height="15" fill="rgb(206,43,17)" fg:x="12" fg:w="4"/><text x="1.2377%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.33%)</title><rect x="0.9877%" y="565" width="0.3292%" height="15" fill="rgb(239,218,39)" fg:x="12" fg:w="4"/><text x="1.2377%" y="575.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.33%)</title><rect x="0.9877%" y="549" width="0.3292%" height="15" fill="rgb(208,169,54)" fg:x="12" fg:w="4"/><text x="1.2377%" y="559.50"></text></g><g><title>dlopen (3 samples, 0.25%)</title><rect x="1.0700%" y="533" width="0.2469%" height="15" fill="rgb(247,25,42)" fg:x="13" fg:w="3"/><text x="1.3200%" y="543.50"></text></g><g><title>_dl_catch_error (3 samples, 0.25%)</title><rect x="1.0700%" y="517" width="0.2469%" height="15" fill="rgb(226,23,31)" fg:x="13" fg:w="3"/><text x="1.3200%" y="527.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.25%)</title><rect x="1.0700%" y="501" width="0.2469%" height="15" fill="rgb(247,16,28)" fg:x="13" fg:w="3"/><text x="1.3200%" y="511.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.1523%" y="485" width="0.1646%" height="15" fill="rgb(231,147,38)" fg:x="14" fg:w="2"/><text x="1.4023%" y="495.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.1523%" y="469" width="0.1646%" height="15" fill="rgb(253,81,48)" fg:x="14" fg:w="2"/><text x="1.4023%" y="479.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.41%)</title><rect x="0.9877%" y="645" width="0.4115%" height="15" fill="rgb(249,222,43)" fg:x="12" fg:w="5"/><text x="1.2377%" y="655.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (5 samples, 0.41%)</title><rect x="0.9877%" y="629" width="0.4115%" height="15" fill="rgb(221,3,27)" fg:x="12" fg:w="5"/><text x="1.2377%" y="639.50"></text></g><g><title>engine::session::Session::new (5 samples, 0.41%)</title><rect x="0.9877%" y="613" width="0.4115%" height="15" fill="rgb(228,180,5)" fg:x="12" fg:w="5"/><text x="1.2377%" y="623.50"></text></g><g><title>engine::session::Session::initialize (5 samples, 0.41%)</title><rect x="0.9877%" y="597" width="0.4115%" height="15" fill="rgb(227,131,42)" fg:x="12" fg:w="5"/><text x="1.2377%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="1.3169%" y="581" width="0.0823%" height="15" fill="rgb(212,3,39)" fg:x="16" fg:w="1"/><text x="1.5669%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.3169%" y="565" width="0.0823%" height="15" fill="rgb(226,45,5)" fg:x="16" fg:w="1"/><text x="1.5669%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::entry::Entry&gt;&gt; (1 samples, 0.08%)</title><rect x="1.3992%" y="629" width="0.0823%" height="15" fill="rgb(215,167,45)" fg:x="17" fg:w="1"/><text x="1.6492%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3992%" y="613" width="0.0823%" height="15" fill="rgb(250,218,53)" fg:x="17" fg:w="1"/><text x="1.6492%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5638%" y="517" width="0.0823%" height="15" fill="rgb(207,140,0)" fg:x="19" fg:w="1"/><text x="1.8138%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.5638%" y="501" width="0.0823%" height="15" fill="rgb(238,133,51)" fg:x="19" fg:w="1"/><text x="1.8138%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.33%)</title><rect x="1.5638%" y="549" width="0.3292%" height="15" fill="rgb(218,203,53)" fg:x="19" fg:w="4"/><text x="1.8138%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="1.5638%" y="533" width="0.3292%" height="15" fill="rgb(226,184,25)" fg:x="19" fg:w="4"/><text x="1.8138%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="1.6461%" y="517" width="0.2469%" height="15" fill="rgb(231,121,21)" fg:x="20" fg:w="3"/><text x="1.8961%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8107%" y="501" width="0.0823%" height="15" fill="rgb(251,14,34)" fg:x="22" fg:w="1"/><text x="2.0607%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8107%" y="485" width="0.0823%" height="15" fill="rgb(249,193,11)" fg:x="22" fg:w="1"/><text x="2.0607%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.8107%" y="469" width="0.0823%" height="15" fill="rgb(220,172,37)" fg:x="22" fg:w="1"/><text x="2.0607%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.8107%" y="453" width="0.0823%" height="15" fill="rgb(231,229,43)" fg:x="22" fg:w="1"/><text x="2.0607%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.8107%" y="437" width="0.0823%" height="15" fill="rgb(250,161,5)" fg:x="22" fg:w="1"/><text x="2.0607%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="1.8930%" y="533" width="0.0823%" height="15" fill="rgb(218,225,18)" fg:x="23" fg:w="1"/><text x="2.1430%" y="543.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="1.8930%" y="517" width="0.0823%" height="15" fill="rgb(245,45,42)" fg:x="23" fg:w="1"/><text x="2.1430%" y="527.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="1.8930%" y="501" width="0.0823%" height="15" fill="rgb(211,115,1)" fg:x="23" fg:w="1"/><text x="2.1430%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.8930%" y="485" width="0.0823%" height="15" fill="rgb(248,133,52)" fg:x="23" fg:w="1"/><text x="2.1430%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.1399%" y="453" width="0.0823%" height="15" fill="rgb(238,100,21)" fg:x="26" fg:w="1"/><text x="2.3899%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.1399%" y="437" width="0.0823%" height="15" fill="rgb(247,144,11)" fg:x="26" fg:w="1"/><text x="2.3899%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.2222%" y="453" width="0.0823%" height="15" fill="rgb(206,164,16)" fg:x="27" fg:w="1"/><text x="2.4722%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.2222%" y="437" width="0.0823%" height="15" fill="rgb(222,34,3)" fg:x="27" fg:w="1"/><text x="2.4722%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2222%" y="421" width="0.0823%" height="15" fill="rgb(248,82,4)" fg:x="27" fg:w="1"/><text x="2.4722%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3045%" y="421" width="0.0823%" height="15" fill="rgb(228,81,46)" fg:x="28" fg:w="1"/><text x="2.5545%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.3045%" y="405" width="0.0823%" height="15" fill="rgb(227,67,47)" fg:x="28" fg:w="1"/><text x="2.5545%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3045%" y="389" width="0.0823%" height="15" fill="rgb(215,93,53)" fg:x="28" fg:w="1"/><text x="2.5545%" y="399.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.99%)</title><rect x="1.4815%" y="629" width="0.9877%" height="15" fill="rgb(248,194,39)" fg:x="18" fg:w="12"/><text x="1.7315%" y="639.50"></text></g><g><title>engine::session::state::State::close (12 samples, 0.99%)</title><rect x="1.4815%" y="613" width="0.9877%" height="15" fill="rgb(215,5,19)" fg:x="18" fg:w="12"/><text x="1.7315%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (12 samples, 0.99%)</title><rect x="1.4815%" y="597" width="0.9877%" height="15" fill="rgb(226,215,51)" fg:x="18" fg:w="12"/><text x="1.7315%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (12 samples, 0.99%)</title><rect x="1.4815%" y="581" width="0.9877%" height="15" fill="rgb(225,56,26)" fg:x="18" fg:w="12"/><text x="1.7315%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (12 samples, 0.99%)</title><rect x="1.4815%" y="565" width="0.9877%" height="15" fill="rgb(222,75,29)" fg:x="18" fg:w="12"/><text x="1.7315%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.58%)</title><rect x="1.8930%" y="549" width="0.5761%" height="15" fill="rgb(236,139,6)" fg:x="23" fg:w="7"/><text x="2.1430%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="1.9753%" y="533" width="0.4938%" height="15" fill="rgb(223,137,36)" fg:x="24" fg:w="6"/><text x="2.2253%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="1.9753%" y="517" width="0.4938%" height="15" fill="rgb(226,99,2)" fg:x="24" fg:w="6"/><text x="2.2253%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="1.9753%" y="501" width="0.4938%" height="15" fill="rgb(206,133,23)" fg:x="24" fg:w="6"/><text x="2.2253%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.49%)</title><rect x="1.9753%" y="485" width="0.4938%" height="15" fill="rgb(243,173,15)" fg:x="24" fg:w="6"/><text x="2.2253%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="1.9753%" y="469" width="0.4938%" height="15" fill="rgb(228,69,28)" fg:x="24" fg:w="6"/><text x="2.2253%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.3045%" y="453" width="0.1646%" height="15" fill="rgb(212,51,22)" fg:x="28" fg:w="2"/><text x="2.5545%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.3045%" y="437" width="0.1646%" height="15" fill="rgb(227,113,0)" fg:x="28" fg:w="2"/><text x="2.5545%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3868%" y="421" width="0.0823%" height="15" fill="rgb(252,84,27)" fg:x="29" fg:w="1"/><text x="2.6368%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.3868%" y="405" width="0.0823%" height="15" fill="rgb(223,145,39)" fg:x="29" fg:w="1"/><text x="2.6368%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3868%" y="389" width="0.0823%" height="15" fill="rgb(239,219,30)" fg:x="29" fg:w="1"/><text x="2.6368%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.3868%" y="373" width="0.0823%" height="15" fill="rgb(224,196,39)" fg:x="29" fg:w="1"/><text x="2.6368%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3868%" y="357" width="0.0823%" height="15" fill="rgb(205,35,43)" fg:x="29" fg:w="1"/><text x="2.6368%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3868%" y="341" width="0.0823%" height="15" fill="rgb(228,201,21)" fg:x="29" fg:w="1"/><text x="2.6368%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.4691%" y="597" width="0.0823%" height="15" fill="rgb(237,118,16)" fg:x="30" fg:w="1"/><text x="2.7191%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.4691%" y="581" width="0.0823%" height="15" fill="rgb(241,17,19)" fg:x="30" fg:w="1"/><text x="2.7191%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.4691%" y="565" width="0.0823%" height="15" fill="rgb(214,10,25)" fg:x="30" fg:w="1"/><text x="2.7191%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.4691%" y="549" width="0.0823%" height="15" fill="rgb(238,37,29)" fg:x="30" fg:w="1"/><text x="2.7191%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.4691%" y="533" width="0.0823%" height="15" fill="rgb(253,83,25)" fg:x="30" fg:w="1"/><text x="2.7191%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.4691%" y="517" width="0.0823%" height="15" fill="rgb(234,192,12)" fg:x="30" fg:w="1"/><text x="2.7191%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4691%" y="501" width="0.0823%" height="15" fill="rgb(241,216,45)" fg:x="30" fg:w="1"/><text x="2.7191%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="2.4691%" y="613" width="0.1646%" height="15" fill="rgb(242,22,33)" fg:x="30" fg:w="2"/><text x="2.7191%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="2.5514%" y="597" width="0.0823%" height="15" fill="rgb(231,105,49)" fg:x="31" fg:w="1"/><text x="2.8014%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="2.5514%" y="581" width="0.0823%" height="15" fill="rgb(218,204,15)" fg:x="31" fg:w="1"/><text x="2.8014%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5514%" y="565" width="0.0823%" height="15" fill="rgb(235,138,41)" fg:x="31" fg:w="1"/><text x="2.8014%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5514%" y="549" width="0.0823%" height="15" fill="rgb(246,0,9)" fg:x="31" fg:w="1"/><text x="2.8014%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="2.5514%" y="533" width="0.0823%" height="15" fill="rgb(210,74,4)" fg:x="31" fg:w="1"/><text x="2.8014%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5514%" y="517" width="0.0823%" height="15" fill="rgb(250,60,41)" fg:x="31" fg:w="1"/><text x="2.8014%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.6337%" y="565" width="0.0823%" height="15" fill="rgb(220,115,12)" fg:x="32" fg:w="1"/><text x="2.8837%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.6337%" y="549" width="0.0823%" height="15" fill="rgb(237,100,13)" fg:x="32" fg:w="1"/><text x="2.8837%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.6337%" y="533" width="0.0823%" height="15" fill="rgb(213,55,26)" fg:x="32" fg:w="1"/><text x="2.8837%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6337%" y="517" width="0.0823%" height="15" fill="rgb(216,17,4)" fg:x="32" fg:w="1"/><text x="2.8837%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.6337%" y="501" width="0.0823%" height="15" fill="rgb(220,153,47)" fg:x="32" fg:w="1"/><text x="2.8837%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6337%" y="485" width="0.0823%" height="15" fill="rgb(215,131,9)" fg:x="32" fg:w="1"/><text x="2.8837%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6337%" y="469" width="0.0823%" height="15" fill="rgb(233,46,42)" fg:x="32" fg:w="1"/><text x="2.8837%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6337%" y="453" width="0.0823%" height="15" fill="rgb(226,86,7)" fg:x="32" fg:w="1"/><text x="2.8837%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="2.6337%" y="597" width="0.1646%" height="15" fill="rgb(239,226,21)" fg:x="32" fg:w="2"/><text x="2.8837%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="2.6337%" y="581" width="0.1646%" height="15" fill="rgb(244,137,22)" fg:x="32" fg:w="2"/><text x="2.8837%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="2.7160%" y="565" width="0.0823%" height="15" fill="rgb(211,139,35)" fg:x="33" fg:w="1"/><text x="2.9660%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.7160%" y="549" width="0.0823%" height="15" fill="rgb(214,62,50)" fg:x="33" fg:w="1"/><text x="2.9660%" y="559.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.41%)</title><rect x="2.4691%" y="629" width="0.4115%" height="15" fill="rgb(212,113,44)" fg:x="30" fg:w="5"/><text x="2.7191%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.25%)</title><rect x="2.6337%" y="613" width="0.2469%" height="15" fill="rgb(226,150,43)" fg:x="32" fg:w="3"/><text x="2.8837%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.7984%" y="597" width="0.0823%" height="15" fill="rgb(250,71,37)" fg:x="34" fg:w="1"/><text x="3.0484%" y="607.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7984%" y="581" width="0.0823%" height="15" fill="rgb(219,76,19)" fg:x="34" fg:w="1"/><text x="3.0484%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.7984%" y="565" width="0.0823%" height="15" fill="rgb(250,39,11)" fg:x="34" fg:w="1"/><text x="3.0484%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7984%" y="549" width="0.0823%" height="15" fill="rgb(230,64,31)" fg:x="34" fg:w="1"/><text x="3.0484%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.7984%" y="533" width="0.0823%" height="15" fill="rgb(208,222,23)" fg:x="34" fg:w="1"/><text x="3.0484%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8807%" y="533" width="0.0823%" height="15" fill="rgb(227,125,18)" fg:x="35" fg:w="1"/><text x="3.1307%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8807%" y="517" width="0.0823%" height="15" fill="rgb(234,210,9)" fg:x="35" fg:w="1"/><text x="3.1307%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8807%" y="501" width="0.0823%" height="15" fill="rgb(217,127,24)" fg:x="35" fg:w="1"/><text x="3.1307%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8807%" y="485" width="0.0823%" height="15" fill="rgb(239,141,48)" fg:x="35" fg:w="1"/><text x="3.1307%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8807%" y="469" width="0.0823%" height="15" fill="rgb(227,109,8)" fg:x="35" fg:w="1"/><text x="3.1307%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="2.8807%" y="549" width="0.1646%" height="15" fill="rgb(235,184,23)" fg:x="35" fg:w="2"/><text x="3.1307%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9630%" y="533" width="0.0823%" height="15" fill="rgb(227,226,48)" fg:x="36" fg:w="1"/><text x="3.2130%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="2.8807%" y="597" width="0.2469%" height="15" fill="rgb(206,150,11)" fg:x="35" fg:w="3"/><text x="3.1307%" y="607.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="2.8807%" y="581" width="0.2469%" height="15" fill="rgb(254,2,33)" fg:x="35" fg:w="3"/><text x="3.1307%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.25%)</title><rect x="2.8807%" y="565" width="0.2469%" height="15" fill="rgb(243,160,20)" fg:x="35" fg:w="3"/><text x="3.1307%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.0453%" y="549" width="0.0823%" height="15" fill="rgb(218,208,30)" fg:x="37" fg:w="1"/><text x="3.2953%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.0453%" y="533" width="0.0823%" height="15" fill="rgb(224,120,49)" fg:x="37" fg:w="1"/><text x="3.2953%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.0453%" y="517" width="0.0823%" height="15" fill="rgb(246,12,2)" fg:x="37" fg:w="1"/><text x="3.2953%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0453%" y="501" width="0.0823%" height="15" fill="rgb(236,117,3)" fg:x="37" fg:w="1"/><text x="3.2953%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.1276%" y="597" width="0.0823%" height="15" fill="rgb(216,128,52)" fg:x="38" fg:w="1"/><text x="3.3776%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.1276%" y="581" width="0.0823%" height="15" fill="rgb(246,145,19)" fg:x="38" fg:w="1"/><text x="3.3776%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.1276%" y="565" width="0.0823%" height="15" fill="rgb(222,11,46)" fg:x="38" fg:w="1"/><text x="3.3776%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.1276%" y="549" width="0.0823%" height="15" fill="rgb(245,82,36)" fg:x="38" fg:w="1"/><text x="3.3776%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.1276%" y="533" width="0.0823%" height="15" fill="rgb(250,73,51)" fg:x="38" fg:w="1"/><text x="3.3776%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.1276%" y="517" width="0.0823%" height="15" fill="rgb(221,189,23)" fg:x="38" fg:w="1"/><text x="3.3776%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.1276%" y="501" width="0.0823%" height="15" fill="rgb(210,33,7)" fg:x="38" fg:w="1"/><text x="3.3776%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="3.1276%" y="485" width="0.0823%" height="15" fill="rgb(210,107,22)" fg:x="38" fg:w="1"/><text x="3.3776%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="3.1276%" y="469" width="0.0823%" height="15" fill="rgb(222,116,37)" fg:x="38" fg:w="1"/><text x="3.3776%" y="479.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="3.1276%" y="453" width="0.0823%" height="15" fill="rgb(254,17,48)" fg:x="38" fg:w="1"/><text x="3.3776%" y="463.50"></text></g><g><title>plugins_core::build::Build::into_entry (5 samples, 0.41%)</title><rect x="2.8807%" y="629" width="0.4115%" height="15" fill="rgb(224,36,32)" fg:x="35" fg:w="5"/><text x="3.1307%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="2.8807%" y="613" width="0.4115%" height="15" fill="rgb(232,90,46)" fg:x="35" fg:w="5"/><text x="3.1307%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.2099%" y="597" width="0.0823%" height="15" fill="rgb(241,66,40)" fg:x="39" fg:w="1"/><text x="3.4599%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.2099%" y="581" width="0.0823%" height="15" fill="rgb(249,184,29)" fg:x="39" fg:w="1"/><text x="3.4599%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.2099%" y="565" width="0.0823%" height="15" fill="rgb(231,181,1)" fg:x="39" fg:w="1"/><text x="3.4599%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.2099%" y="549" width="0.0823%" height="15" fill="rgb(224,94,2)" fg:x="39" fg:w="1"/><text x="3.4599%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.2099%" y="533" width="0.0823%" height="15" fill="rgb(229,170,15)" fg:x="39" fg:w="1"/><text x="3.4599%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2099%" y="517" width="0.0823%" height="15" fill="rgb(240,127,35)" fg:x="39" fg:w="1"/><text x="3.4599%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2099%" y="501" width="0.0823%" height="15" fill="rgb(248,196,34)" fg:x="39" fg:w="1"/><text x="3.4599%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2099%" y="485" width="0.0823%" height="15" fill="rgb(236,137,7)" fg:x="39" fg:w="1"/><text x="3.4599%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.2099%" y="469" width="0.0823%" height="15" fill="rgb(235,127,16)" fg:x="39" fg:w="1"/><text x="3.4599%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.2099%" y="453" width="0.0823%" height="15" fill="rgb(250,192,54)" fg:x="39" fg:w="1"/><text x="3.4599%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.2099%" y="437" width="0.0823%" height="15" fill="rgb(218,98,20)" fg:x="39" fg:w="1"/><text x="3.4599%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.2099%" y="421" width="0.0823%" height="15" fill="rgb(230,176,47)" fg:x="39" fg:w="1"/><text x="3.4599%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.2099%" y="405" width="0.0823%" height="15" fill="rgb(244,2,33)" fg:x="39" fg:w="1"/><text x="3.4599%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.2099%" y="389" width="0.0823%" height="15" fill="rgb(231,100,17)" fg:x="39" fg:w="1"/><text x="3.4599%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.2099%" y="373" width="0.0823%" height="15" fill="rgb(245,23,12)" fg:x="39" fg:w="1"/><text x="3.4599%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.2099%" y="357" width="0.0823%" height="15" fill="rgb(249,55,22)" fg:x="39" fg:w="1"/><text x="3.4599%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.2099%" y="341" width="0.0823%" height="15" fill="rgb(207,134,9)" fg:x="39" fg:w="1"/><text x="3.4599%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2099%" y="325" width="0.0823%" height="15" fill="rgb(218,134,0)" fg:x="39" fg:w="1"/><text x="3.4599%" y="335.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.2922%" y="629" width="0.0823%" height="15" fill="rgb(213,212,33)" fg:x="40" fg:w="1"/><text x="3.5422%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.2922%" y="613" width="0.0823%" height="15" fill="rgb(252,106,18)" fg:x="40" fg:w="1"/><text x="3.5422%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.2922%" y="597" width="0.0823%" height="15" fill="rgb(208,126,42)" fg:x="40" fg:w="1"/><text x="3.5422%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.2922%" y="581" width="0.0823%" height="15" fill="rgb(246,175,29)" fg:x="40" fg:w="1"/><text x="3.5422%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2922%" y="565" width="0.0823%" height="15" fill="rgb(215,13,50)" fg:x="40" fg:w="1"/><text x="3.5422%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.2922%" y="549" width="0.0823%" height="15" fill="rgb(216,172,15)" fg:x="40" fg:w="1"/><text x="3.5422%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.3745%" y="613" width="0.0823%" height="15" fill="rgb(212,103,13)" fg:x="41" fg:w="1"/><text x="3.6245%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.3745%" y="597" width="0.0823%" height="15" fill="rgb(231,171,36)" fg:x="41" fg:w="1"/><text x="3.6245%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.3745%" y="581" width="0.0823%" height="15" fill="rgb(250,123,20)" fg:x="41" fg:w="1"/><text x="3.6245%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.3745%" y="565" width="0.0823%" height="15" fill="rgb(212,53,50)" fg:x="41" fg:w="1"/><text x="3.6245%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.4568%" y="549" width="0.0823%" height="15" fill="rgb(243,54,12)" fg:x="42" fg:w="1"/><text x="3.7068%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.4568%" y="533" width="0.0823%" height="15" fill="rgb(234,101,34)" fg:x="42" fg:w="1"/><text x="3.7068%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.4568%" y="517" width="0.0823%" height="15" fill="rgb(254,67,22)" fg:x="42" fg:w="1"/><text x="3.7068%" y="527.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="3.4568%" y="501" width="0.0823%" height="15" fill="rgb(250,35,47)" fg:x="42" fg:w="1"/><text x="3.7068%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.4568%" y="485" width="0.0823%" height="15" fill="rgb(226,126,38)" fg:x="42" fg:w="1"/><text x="3.7068%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.6214%" y="485" width="0.0823%" height="15" fill="rgb(216,138,53)" fg:x="44" fg:w="1"/><text x="3.8714%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.33%)</title><rect x="3.4568%" y="613" width="0.3292%" height="15" fill="rgb(246,199,43)" fg:x="42" fg:w="4"/><text x="3.7068%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="3.4568%" y="597" width="0.3292%" height="15" fill="rgb(232,125,11)" fg:x="42" fg:w="4"/><text x="3.7068%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.33%)</title><rect x="3.4568%" y="581" width="0.3292%" height="15" fill="rgb(218,219,45)" fg:x="42" fg:w="4"/><text x="3.7068%" y="591.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.33%)</title><rect x="3.4568%" y="565" width="0.3292%" height="15" fill="rgb(216,102,54)" fg:x="42" fg:w="4"/><text x="3.7068%" y="575.50"></text></g><g><title>plugins_core::tools::leads_to (3 samples, 0.25%)</title><rect x="3.5391%" y="549" width="0.2469%" height="15" fill="rgb(250,228,7)" fg:x="43" fg:w="3"/><text x="3.7891%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.6214%" y="533" width="0.1646%" height="15" fill="rgb(226,125,25)" fg:x="44" fg:w="2"/><text x="3.8714%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="3.6214%" y="517" width="0.1646%" height="15" fill="rgb(224,165,27)" fg:x="44" fg:w="2"/><text x="3.8714%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.6214%" y="501" width="0.1646%" height="15" fill="rgb(233,86,3)" fg:x="44" fg:w="2"/><text x="3.8714%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7037%" y="485" width="0.0823%" height="15" fill="rgb(228,116,20)" fg:x="45" fg:w="1"/><text x="3.9537%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7037%" y="469" width="0.0823%" height="15" fill="rgb(209,192,17)" fg:x="45" fg:w="1"/><text x="3.9537%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7037%" y="453" width="0.0823%" height="15" fill="rgb(224,88,34)" fg:x="45" fg:w="1"/><text x="3.9537%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7037%" y="437" width="0.0823%" height="15" fill="rgb(233,38,6)" fg:x="45" fg:w="1"/><text x="3.9537%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7037%" y="421" width="0.0823%" height="15" fill="rgb(212,59,30)" fg:x="45" fg:w="1"/><text x="3.9537%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7037%" y="405" width="0.0823%" height="15" fill="rgb(213,80,3)" fg:x="45" fg:w="1"/><text x="3.9537%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.7037%" y="389" width="0.0823%" height="15" fill="rgb(251,178,7)" fg:x="45" fg:w="1"/><text x="3.9537%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7037%" y="373" width="0.0823%" height="15" fill="rgb(213,154,26)" fg:x="45" fg:w="1"/><text x="3.9537%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.7037%" y="357" width="0.0823%" height="15" fill="rgb(238,165,49)" fg:x="45" fg:w="1"/><text x="3.9537%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.7037%" y="341" width="0.0823%" height="15" fill="rgb(248,91,46)" fg:x="45" fg:w="1"/><text x="3.9537%" y="351.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="3.7860%" y="597" width="0.0823%" height="15" fill="rgb(244,21,52)" fg:x="46" fg:w="1"/><text x="4.0360%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.8683%" y="549" width="0.1646%" height="15" fill="rgb(247,122,20)" fg:x="47" fg:w="2"/><text x="4.1183%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="3.9506%" y="533" width="0.0823%" height="15" fill="rgb(218,27,9)" fg:x="48" fg:w="1"/><text x="4.2006%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="3.9506%" y="517" width="0.0823%" height="15" fill="rgb(246,7,6)" fg:x="48" fg:w="1"/><text x="4.2006%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.9506%" y="501" width="0.0823%" height="15" fill="rgb(227,135,54)" fg:x="48" fg:w="1"/><text x="4.2006%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.9506%" y="485" width="0.0823%" height="15" fill="rgb(247,14,11)" fg:x="48" fg:w="1"/><text x="4.2006%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.9506%" y="469" width="0.0823%" height="15" fill="rgb(206,149,34)" fg:x="48" fg:w="1"/><text x="4.2006%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.9506%" y="453" width="0.0823%" height="15" fill="rgb(227,228,4)" fg:x="48" fg:w="1"/><text x="4.2006%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.9506%" y="437" width="0.0823%" height="15" fill="rgb(238,218,28)" fg:x="48" fg:w="1"/><text x="4.2006%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.9506%" y="421" width="0.0823%" height="15" fill="rgb(252,86,40)" fg:x="48" fg:w="1"/><text x="4.2006%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.9506%" y="405" width="0.0823%" height="15" fill="rgb(251,225,11)" fg:x="48" fg:w="1"/><text x="4.2006%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.9506%" y="389" width="0.0823%" height="15" fill="rgb(206,46,49)" fg:x="48" fg:w="1"/><text x="4.2006%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.9506%" y="373" width="0.0823%" height="15" fill="rgb(245,128,24)" fg:x="48" fg:w="1"/><text x="4.2006%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.9506%" y="357" width="0.0823%" height="15" fill="rgb(219,177,34)" fg:x="48" fg:w="1"/><text x="4.2006%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.9506%" y="341" width="0.0823%" height="15" fill="rgb(218,60,48)" fg:x="48" fg:w="1"/><text x="4.2006%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9506%" y="325" width="0.0823%" height="15" fill="rgb(221,11,5)" fg:x="48" fg:w="1"/><text x="4.2006%" y="335.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.0329%" y="517" width="0.0823%" height="15" fill="rgb(220,148,13)" fg:x="49" fg:w="1"/><text x="4.2829%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.0329%" y="501" width="0.0823%" height="15" fill="rgb(210,16,3)" fg:x="49" fg:w="1"/><text x="4.2829%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.1152%" y="501" width="0.0823%" height="15" fill="rgb(236,80,2)" fg:x="50" fg:w="1"/><text x="4.3652%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.1975%" y="485" width="0.0823%" height="15" fill="rgb(239,129,19)" fg:x="51" fg:w="1"/><text x="4.4475%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.1975%" y="469" width="0.0823%" height="15" fill="rgb(220,106,35)" fg:x="51" fg:w="1"/><text x="4.4475%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.1975%" y="453" width="0.0823%" height="15" fill="rgb(252,139,45)" fg:x="51" fg:w="1"/><text x="4.4475%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.1975%" y="437" width="0.0823%" height="15" fill="rgb(229,8,36)" fg:x="51" fg:w="1"/><text x="4.4475%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.2798%" y="469" width="0.0823%" height="15" fill="rgb(230,126,33)" fg:x="52" fg:w="1"/><text x="4.5298%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2798%" y="453" width="0.0823%" height="15" fill="rgb(239,140,21)" fg:x="52" fg:w="1"/><text x="4.5298%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3621%" y="469" width="0.0823%" height="15" fill="rgb(254,104,9)" fg:x="53" fg:w="1"/><text x="4.6121%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3621%" y="453" width="0.0823%" height="15" fill="rgb(239,52,14)" fg:x="53" fg:w="1"/><text x="4.6121%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.3621%" y="437" width="0.0823%" height="15" fill="rgb(208,227,44)" fg:x="53" fg:w="1"/><text x="4.6121%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="4.2798%" y="485" width="0.2469%" height="15" fill="rgb(246,18,19)" fg:x="52" fg:w="3"/><text x="4.5298%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4444%" y="469" width="0.0823%" height="15" fill="rgb(235,228,25)" fg:x="54" fg:w="1"/><text x="4.6944%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4444%" y="453" width="0.0823%" height="15" fill="rgb(240,156,20)" fg:x="54" fg:w="1"/><text x="4.6944%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4444%" y="437" width="0.0823%" height="15" fill="rgb(224,8,20)" fg:x="54" fg:w="1"/><text x="4.6944%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="4.1152%" y="517" width="0.4938%" height="15" fill="rgb(214,12,52)" fg:x="50" fg:w="6"/><text x="4.3652%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="4.1975%" y="501" width="0.4115%" height="15" fill="rgb(211,220,47)" fg:x="51" fg:w="5"/><text x="4.4475%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5267%" y="485" width="0.0823%" height="15" fill="rgb(250,173,5)" fg:x="55" fg:w="1"/><text x="4.7767%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5267%" y="469" width="0.0823%" height="15" fill="rgb(250,125,52)" fg:x="55" fg:w="1"/><text x="4.7767%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5267%" y="453" width="0.0823%" height="15" fill="rgb(209,133,18)" fg:x="55" fg:w="1"/><text x="4.7767%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="4.6091%" y="453" width="0.0823%" height="15" fill="rgb(216,173,22)" fg:x="56" fg:w="1"/><text x="4.8591%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.6091%" y="517" width="0.1646%" height="15" fill="rgb(205,3,22)" fg:x="56" fg:w="2"/><text x="4.8591%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="4.6091%" y="501" width="0.1646%" height="15" fill="rgb(248,22,20)" fg:x="56" fg:w="2"/><text x="4.8591%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.6091%" y="485" width="0.1646%" height="15" fill="rgb(233,6,29)" fg:x="56" fg:w="2"/><text x="4.8591%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.6091%" y="469" width="0.1646%" height="15" fill="rgb(240,22,54)" fg:x="56" fg:w="2"/><text x="4.8591%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6914%" y="453" width="0.0823%" height="15" fill="rgb(231,133,32)" fg:x="57" fg:w="1"/><text x="4.9414%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6914%" y="437" width="0.0823%" height="15" fill="rgb(248,193,4)" fg:x="57" fg:w="1"/><text x="4.9414%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.6914%" y="421" width="0.0823%" height="15" fill="rgb(211,178,46)" fg:x="57" fg:w="1"/><text x="4.9414%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6914%" y="405" width="0.0823%" height="15" fill="rgb(224,5,42)" fg:x="57" fg:w="1"/><text x="4.9414%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8560%" y="469" width="0.0823%" height="15" fill="rgb(239,176,25)" fg:x="59" fg:w="1"/><text x="5.1060%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.8560%" y="453" width="0.0823%" height="15" fill="rgb(245,187,50)" fg:x="59" fg:w="1"/><text x="5.1060%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.0206%" y="373" width="0.1646%" height="15" fill="rgb(248,24,15)" fg:x="61" fg:w="2"/><text x="5.2706%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.0206%" y="357" width="0.1646%" height="15" fill="rgb(205,166,13)" fg:x="61" fg:w="2"/><text x="5.2706%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.1029%" y="341" width="0.0823%" height="15" fill="rgb(208,114,23)" fg:x="62" fg:w="1"/><text x="5.3529%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1029%" y="325" width="0.0823%" height="15" fill="rgb(239,127,18)" fg:x="62" fg:w="1"/><text x="5.3529%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="5.0206%" y="437" width="0.2469%" height="15" fill="rgb(219,154,28)" fg:x="61" fg:w="3"/><text x="5.2706%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="5.0206%" y="421" width="0.2469%" height="15" fill="rgb(225,157,23)" fg:x="61" fg:w="3"/><text x="5.2706%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="5.0206%" y="405" width="0.2469%" height="15" fill="rgb(219,8,6)" fg:x="61" fg:w="3"/><text x="5.2706%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="5.0206%" y="389" width="0.2469%" height="15" fill="rgb(212,47,6)" fg:x="61" fg:w="3"/><text x="5.2706%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1852%" y="373" width="0.0823%" height="15" fill="rgb(224,190,4)" fg:x="63" fg:w="1"/><text x="5.4352%" y="383.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.65%)</title><rect x="3.7860%" y="613" width="1.6461%" height="15" fill="rgb(239,183,29)" fg:x="46" fg:w="20"/><text x="4.0360%" y="623.50"></text></g><g><title>engine::session::Session::save_changes (19 samples, 1.56%)</title><rect x="3.8683%" y="597" width="1.5638%" height="15" fill="rgb(213,57,7)" fg:x="47" fg:w="19"/><text x="4.1183%" y="607.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.56%)</title><rect x="3.8683%" y="581" width="1.5638%" height="15" fill="rgb(216,148,1)" fg:x="47" fg:w="19"/><text x="4.1183%" y="591.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.56%)</title><rect x="3.8683%" y="565" width="1.5638%" height="15" fill="rgb(236,182,29)" fg:x="47" fg:w="19"/><text x="4.1183%" y="575.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (17 samples, 1.40%)</title><rect x="4.0329%" y="549" width="1.3992%" height="15" fill="rgb(244,120,48)" fg:x="49" fg:w="17"/><text x="4.2829%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.40%)</title><rect x="4.0329%" y="533" width="1.3992%" height="15" fill="rgb(206,71,34)" fg:x="49" fg:w="17"/><text x="4.2829%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.66%)</title><rect x="4.7737%" y="517" width="0.6584%" height="15" fill="rgb(242,32,6)" fg:x="58" fg:w="8"/><text x="5.0237%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.66%)</title><rect x="4.7737%" y="501" width="0.6584%" height="15" fill="rgb(241,35,3)" fg:x="58" fg:w="8"/><text x="5.0237%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.66%)</title><rect x="4.7737%" y="485" width="0.6584%" height="15" fill="rgb(222,62,19)" fg:x="58" fg:w="8"/><text x="5.0237%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="4.9383%" y="469" width="0.4938%" height="15" fill="rgb(223,110,41)" fg:x="60" fg:w="6"/><text x="5.1883%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.41%)</title><rect x="5.0206%" y="453" width="0.4115%" height="15" fill="rgb(208,224,4)" fg:x="61" fg:w="5"/><text x="5.2706%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="5.2675%" y="437" width="0.1646%" height="15" fill="rgb(241,137,19)" fg:x="64" fg:w="2"/><text x="5.5175%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.2675%" y="421" width="0.1646%" height="15" fill="rgb(244,24,17)" fg:x="64" fg:w="2"/><text x="5.5175%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="5.4321%" y="565" width="0.0823%" height="15" fill="rgb(245,178,49)" fg:x="66" fg:w="1"/><text x="5.6821%" y="575.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="5.4321%" y="549" width="0.0823%" height="15" fill="rgb(219,160,38)" fg:x="66" fg:w="1"/><text x="5.6821%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.4321%" y="533" width="0.0823%" height="15" fill="rgb(228,137,14)" fg:x="66" fg:w="1"/><text x="5.6821%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="5.4321%" y="581" width="0.1646%" height="15" fill="rgb(237,134,11)" fg:x="66" fg:w="2"/><text x="5.6821%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="5.5144%" y="565" width="0.0823%" height="15" fill="rgb(211,126,44)" fg:x="67" fg:w="1"/><text x="5.7644%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.5144%" y="549" width="0.0823%" height="15" fill="rgb(226,171,33)" fg:x="67" fg:w="1"/><text x="5.7644%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.5144%" y="533" width="0.0823%" height="15" fill="rgb(253,99,13)" fg:x="67" fg:w="1"/><text x="5.7644%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5144%" y="517" width="0.0823%" height="15" fill="rgb(244,48,7)" fg:x="67" fg:w="1"/><text x="5.7644%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5144%" y="501" width="0.0823%" height="15" fill="rgb(244,217,54)" fg:x="67" fg:w="1"/><text x="5.7644%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5144%" y="485" width="0.0823%" height="15" fill="rgb(224,15,18)" fg:x="67" fg:w="1"/><text x="5.7644%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5144%" y="469" width="0.0823%" height="15" fill="rgb(244,99,12)" fg:x="67" fg:w="1"/><text x="5.7644%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5144%" y="453" width="0.0823%" height="15" fill="rgb(233,226,8)" fg:x="67" fg:w="1"/><text x="5.7644%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5144%" y="437" width="0.0823%" height="15" fill="rgb(229,211,3)" fg:x="67" fg:w="1"/><text x="5.7644%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5144%" y="421" width="0.0823%" height="15" fill="rgb(216,140,21)" fg:x="67" fg:w="1"/><text x="5.7644%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.5144%" y="405" width="0.0823%" height="15" fill="rgb(234,122,30)" fg:x="67" fg:w="1"/><text x="5.7644%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5967%" y="533" width="0.0823%" height="15" fill="rgb(236,25,46)" fg:x="68" fg:w="1"/><text x="5.8467%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5967%" y="517" width="0.0823%" height="15" fill="rgb(217,52,54)" fg:x="68" fg:w="1"/><text x="5.8467%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5967%" y="501" width="0.0823%" height="15" fill="rgb(222,29,26)" fg:x="68" fg:w="1"/><text x="5.8467%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.5967%" y="581" width="0.1646%" height="15" fill="rgb(216,177,29)" fg:x="68" fg:w="2"/><text x="5.8467%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.5967%" y="565" width="0.1646%" height="15" fill="rgb(247,136,51)" fg:x="68" fg:w="2"/><text x="5.8467%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.5967%" y="549" width="0.1646%" height="15" fill="rgb(231,47,47)" fg:x="68" fg:w="2"/><text x="5.8467%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.6790%" y="533" width="0.0823%" height="15" fill="rgb(211,192,36)" fg:x="69" fg:w="1"/><text x="5.9290%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6790%" y="517" width="0.0823%" height="15" fill="rgb(229,156,32)" fg:x="69" fg:w="1"/><text x="5.9290%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.6790%" y="501" width="0.0823%" height="15" fill="rgb(248,213,20)" fg:x="69" fg:w="1"/><text x="5.9290%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6790%" y="485" width="0.0823%" height="15" fill="rgb(217,64,7)" fg:x="69" fg:w="1"/><text x="5.9290%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.6790%" y="469" width="0.0823%" height="15" fill="rgb(232,142,8)" fg:x="69" fg:w="1"/><text x="5.9290%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6790%" y="453" width="0.0823%" height="15" fill="rgb(224,92,44)" fg:x="69" fg:w="1"/><text x="5.9290%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.6790%" y="437" width="0.0823%" height="15" fill="rgb(214,169,17)" fg:x="69" fg:w="1"/><text x="5.9290%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6790%" y="421" width="0.0823%" height="15" fill="rgb(210,59,37)" fg:x="69" fg:w="1"/><text x="5.9290%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="5.4321%" y="597" width="0.4115%" height="15" fill="rgb(214,116,48)" fg:x="66" fg:w="5"/><text x="5.6821%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.7613%" y="581" width="0.0823%" height="15" fill="rgb(244,191,6)" fg:x="70" fg:w="1"/><text x="6.0113%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.7613%" y="565" width="0.0823%" height="15" fill="rgb(241,50,52)" fg:x="70" fg:w="1"/><text x="6.0113%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.7613%" y="549" width="0.0823%" height="15" fill="rgb(236,75,39)" fg:x="70" fg:w="1"/><text x="6.0113%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.7613%" y="533" width="0.0823%" height="15" fill="rgb(236,99,0)" fg:x="70" fg:w="1"/><text x="6.0113%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="5.7613%" y="517" width="0.0823%" height="15" fill="rgb(207,202,15)" fg:x="70" fg:w="1"/><text x="6.0113%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.7613%" y="501" width="0.0823%" height="15" fill="rgb(233,207,14)" fg:x="70" fg:w="1"/><text x="6.0113%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.8436%" y="549" width="0.0823%" height="15" fill="rgb(226,27,51)" fg:x="71" fg:w="1"/><text x="6.0936%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.8436%" y="533" width="0.0823%" height="15" fill="rgb(206,104,42)" fg:x="71" fg:w="1"/><text x="6.0936%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.8436%" y="517" width="0.0823%" height="15" fill="rgb(212,225,4)" fg:x="71" fg:w="1"/><text x="6.0936%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8436%" y="501" width="0.0823%" height="15" fill="rgb(233,96,42)" fg:x="71" fg:w="1"/><text x="6.0936%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.8436%" y="485" width="0.0823%" height="15" fill="rgb(229,21,32)" fg:x="71" fg:w="1"/><text x="6.0936%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8436%" y="469" width="0.0823%" height="15" fill="rgb(226,216,24)" fg:x="71" fg:w="1"/><text x="6.0936%" y="479.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="5.8436%" y="581" width="0.1646%" height="15" fill="rgb(221,163,17)" fg:x="71" fg:w="2"/><text x="6.0936%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="5.8436%" y="565" width="0.1646%" height="15" fill="rgb(216,216,42)" fg:x="71" fg:w="2"/><text x="6.0936%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.9259%" y="549" width="0.0823%" height="15" fill="rgb(240,118,7)" fg:x="72" fg:w="1"/><text x="6.1759%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.9259%" y="533" width="0.0823%" height="15" fill="rgb(221,67,37)" fg:x="72" fg:w="1"/><text x="6.1759%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.9259%" y="517" width="0.0823%" height="15" fill="rgb(241,32,44)" fg:x="72" fg:w="1"/><text x="6.1759%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9259%" y="501" width="0.0823%" height="15" fill="rgb(235,204,43)" fg:x="72" fg:w="1"/><text x="6.1759%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9259%" y="485" width="0.0823%" height="15" fill="rgb(213,116,10)" fg:x="72" fg:w="1"/><text x="6.1759%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9259%" y="469" width="0.0823%" height="15" fill="rgb(239,15,48)" fg:x="72" fg:w="1"/><text x="6.1759%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9259%" y="453" width="0.0823%" height="15" fill="rgb(207,123,36)" fg:x="72" fg:w="1"/><text x="6.1759%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9259%" y="437" width="0.0823%" height="15" fill="rgb(209,103,30)" fg:x="72" fg:w="1"/><text x="6.1759%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9259%" y="421" width="0.0823%" height="15" fill="rgb(238,100,19)" fg:x="72" fg:w="1"/><text x="6.1759%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9259%" y="405" width="0.0823%" height="15" fill="rgb(244,30,14)" fg:x="72" fg:w="1"/><text x="6.1759%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9259%" y="389" width="0.0823%" height="15" fill="rgb(249,174,6)" fg:x="72" fg:w="1"/><text x="6.1759%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9259%" y="373" width="0.0823%" height="15" fill="rgb(235,213,41)" fg:x="72" fg:w="1"/><text x="6.1759%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9259%" y="357" width="0.0823%" height="15" fill="rgb(213,118,6)" fg:x="72" fg:w="1"/><text x="6.1759%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9259%" y="341" width="0.0823%" height="15" fill="rgb(235,44,51)" fg:x="72" fg:w="1"/><text x="6.1759%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9259%" y="325" width="0.0823%" height="15" fill="rgb(217,9,53)" fg:x="72" fg:w="1"/><text x="6.1759%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.9259%" y="309" width="0.0823%" height="15" fill="rgb(237,172,34)" fg:x="72" fg:w="1"/><text x="6.1759%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.9259%" y="293" width="0.0823%" height="15" fill="rgb(206,206,11)" fg:x="72" fg:w="1"/><text x="6.1759%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.9259%" y="277" width="0.0823%" height="15" fill="rgb(214,149,29)" fg:x="72" fg:w="1"/><text x="6.1759%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.9259%" y="261" width="0.0823%" height="15" fill="rgb(208,123,3)" fg:x="72" fg:w="1"/><text x="6.1759%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9259%" y="245" width="0.0823%" height="15" fill="rgb(229,126,4)" fg:x="72" fg:w="1"/><text x="6.1759%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0082%" y="485" width="0.0823%" height="15" fill="rgb(222,92,36)" fg:x="73" fg:w="1"/><text x="6.2582%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0082%" y="469" width="0.0823%" height="15" fill="rgb(216,39,41)" fg:x="73" fg:w="1"/><text x="6.2582%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0082%" y="453" width="0.0823%" height="15" fill="rgb(253,127,28)" fg:x="73" fg:w="1"/><text x="6.2582%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.0082%" y="437" width="0.0823%" height="15" fill="rgb(249,152,51)" fg:x="73" fg:w="1"/><text x="6.2582%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0082%" y="421" width="0.0823%" height="15" fill="rgb(209,123,42)" fg:x="73" fg:w="1"/><text x="6.2582%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.0082%" y="405" width="0.0823%" height="15" fill="rgb(241,118,22)" fg:x="73" fg:w="1"/><text x="6.2582%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.0082%" y="389" width="0.0823%" height="15" fill="rgb(208,25,7)" fg:x="73" fg:w="1"/><text x="6.2582%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.0082%" y="373" width="0.0823%" height="15" fill="rgb(243,144,39)" fg:x="73" fg:w="1"/><text x="6.2582%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.0082%" y="357" width="0.0823%" height="15" fill="rgb(250,50,5)" fg:x="73" fg:w="1"/><text x="6.2582%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.0082%" y="341" width="0.0823%" height="15" fill="rgb(207,67,11)" fg:x="73" fg:w="1"/><text x="6.2582%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.0082%" y="325" width="0.0823%" height="15" fill="rgb(245,204,40)" fg:x="73" fg:w="1"/><text x="6.2582%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.0082%" y="309" width="0.0823%" height="15" fill="rgb(238,228,24)" fg:x="73" fg:w="1"/><text x="6.2582%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.0082%" y="293" width="0.0823%" height="15" fill="rgb(217,116,22)" fg:x="73" fg:w="1"/><text x="6.2582%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.0082%" y="277" width="0.0823%" height="15" fill="rgb(234,98,12)" fg:x="73" fg:w="1"/><text x="6.2582%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.0082%" y="261" width="0.0823%" height="15" fill="rgb(242,170,50)" fg:x="73" fg:w="1"/><text x="6.2582%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0082%" y="245" width="0.0823%" height="15" fill="rgb(235,7,5)" fg:x="73" fg:w="1"/><text x="6.2582%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.0082%" y="533" width="0.1646%" height="15" fill="rgb(241,114,28)" fg:x="73" fg:w="2"/><text x="6.2582%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.0082%" y="517" width="0.1646%" height="15" fill="rgb(246,112,42)" fg:x="73" fg:w="2"/><text x="6.2582%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.0082%" y="501" width="0.1646%" height="15" fill="rgb(248,228,14)" fg:x="73" fg:w="2"/><text x="6.2582%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.0905%" y="485" width="0.0823%" height="15" fill="rgb(208,133,18)" fg:x="74" fg:w="1"/><text x="6.3405%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.0905%" y="469" width="0.0823%" height="15" fill="rgb(207,35,49)" fg:x="74" fg:w="1"/><text x="6.3405%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0905%" y="453" width="0.0823%" height="15" fill="rgb(205,68,36)" fg:x="74" fg:w="1"/><text x="6.3405%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (10 samples, 0.82%)</title><rect x="5.4321%" y="613" width="0.8230%" height="15" fill="rgb(245,62,40)" fg:x="66" fg:w="10"/><text x="5.6821%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="5.8436%" y="597" width="0.4115%" height="15" fill="rgb(228,27,24)" fg:x="71" fg:w="5"/><text x="6.0936%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.25%)</title><rect x="6.0082%" y="581" width="0.2469%" height="15" fill="rgb(253,19,12)" fg:x="73" fg:w="3"/><text x="6.2582%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.25%)</title><rect x="6.0082%" y="565" width="0.2469%" height="15" fill="rgb(232,28,20)" fg:x="73" fg:w="3"/><text x="6.2582%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="6.0082%" y="549" width="0.2469%" height="15" fill="rgb(218,35,51)" fg:x="73" fg:w="3"/><text x="6.2582%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.1728%" y="533" width="0.0823%" height="15" fill="rgb(212,90,40)" fg:x="75" fg:w="1"/><text x="6.4228%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.1728%" y="517" width="0.0823%" height="15" fill="rgb(220,172,12)" fg:x="75" fg:w="1"/><text x="6.4228%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.1728%" y="501" width="0.0823%" height="15" fill="rgb(226,159,20)" fg:x="75" fg:w="1"/><text x="6.4228%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1728%" y="485" width="0.0823%" height="15" fill="rgb(234,205,16)" fg:x="75" fg:w="1"/><text x="6.4228%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.1728%" y="469" width="0.0823%" height="15" fill="rgb(207,9,39)" fg:x="75" fg:w="1"/><text x="6.4228%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.1728%" y="453" width="0.0823%" height="15" fill="rgb(249,143,15)" fg:x="75" fg:w="1"/><text x="6.4228%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2551%" y="565" width="0.0823%" height="15" fill="rgb(253,133,29)" fg:x="76" fg:w="1"/><text x="6.5051%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3374%" y="421" width="0.0823%" height="15" fill="rgb(221,187,0)" fg:x="77" fg:w="1"/><text x="6.5874%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="6.2551%" y="597" width="0.3292%" height="15" fill="rgb(205,204,26)" fg:x="76" fg:w="4"/><text x="6.5051%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="6.2551%" y="581" width="0.3292%" height="15" fill="rgb(224,68,54)" fg:x="76" fg:w="4"/><text x="6.5051%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.25%)</title><rect x="6.3374%" y="565" width="0.2469%" height="15" fill="rgb(209,67,4)" fg:x="77" fg:w="3"/><text x="6.5874%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.25%)</title><rect x="6.3374%" y="549" width="0.2469%" height="15" fill="rgb(228,229,18)" fg:x="77" fg:w="3"/><text x="6.5874%" y="559.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.25%)</title><rect x="6.3374%" y="533" width="0.2469%" height="15" fill="rgb(231,89,13)" fg:x="77" fg:w="3"/><text x="6.5874%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.25%)</title><rect x="6.3374%" y="517" width="0.2469%" height="15" fill="rgb(210,182,18)" fg:x="77" fg:w="3"/><text x="6.5874%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.25%)</title><rect x="6.3374%" y="501" width="0.2469%" height="15" fill="rgb(240,105,2)" fg:x="77" fg:w="3"/><text x="6.5874%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="6.3374%" y="485" width="0.2469%" height="15" fill="rgb(207,170,50)" fg:x="77" fg:w="3"/><text x="6.5874%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (3 samples, 0.25%)</title><rect x="6.3374%" y="469" width="0.2469%" height="15" fill="rgb(232,133,24)" fg:x="77" fg:w="3"/><text x="6.5874%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="6.3374%" y="453" width="0.2469%" height="15" fill="rgb(235,166,27)" fg:x="77" fg:w="3"/><text x="6.5874%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.25%)</title><rect x="6.3374%" y="437" width="0.2469%" height="15" fill="rgb(209,19,13)" fg:x="77" fg:w="3"/><text x="6.5874%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="6.4198%" y="421" width="0.1646%" height="15" fill="rgb(226,79,39)" fg:x="78" fg:w="2"/><text x="6.6698%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.5021%" y="405" width="0.0823%" height="15" fill="rgb(222,163,10)" fg:x="79" fg:w="1"/><text x="6.7521%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5021%" y="389" width="0.0823%" height="15" fill="rgb(214,44,19)" fg:x="79" fg:w="1"/><text x="6.7521%" y="399.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.5844%" y="581" width="0.0823%" height="15" fill="rgb(210,217,13)" fg:x="80" fg:w="1"/><text x="6.8344%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="6.5844%" y="565" width="0.0823%" height="15" fill="rgb(237,61,54)" fg:x="80" fg:w="1"/><text x="6.8344%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.5844%" y="549" width="0.0823%" height="15" fill="rgb(226,184,24)" fg:x="80" fg:w="1"/><text x="6.8344%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.5844%" y="533" width="0.0823%" height="15" fill="rgb(223,226,4)" fg:x="80" fg:w="1"/><text x="6.8344%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.5844%" y="517" width="0.0823%" height="15" fill="rgb(210,26,41)" fg:x="80" fg:w="1"/><text x="6.8344%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5844%" y="501" width="0.0823%" height="15" fill="rgb(220,221,6)" fg:x="80" fg:w="1"/><text x="6.8344%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5844%" y="485" width="0.0823%" height="15" fill="rgb(225,89,49)" fg:x="80" fg:w="1"/><text x="6.8344%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="6.6667%" y="581" width="0.0823%" height="15" fill="rgb(218,70,45)" fg:x="81" fg:w="1"/><text x="6.9167%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.6667%" y="565" width="0.0823%" height="15" fill="rgb(238,166,21)" fg:x="81" fg:w="1"/><text x="6.9167%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.6667%" y="549" width="0.0823%" height="15" fill="rgb(224,141,44)" fg:x="81" fg:w="1"/><text x="6.9167%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.6667%" y="533" width="0.0823%" height="15" fill="rgb(230,12,49)" fg:x="81" fg:w="1"/><text x="6.9167%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.6667%" y="517" width="0.0823%" height="15" fill="rgb(212,174,12)" fg:x="81" fg:w="1"/><text x="6.9167%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.6667%" y="501" width="0.0823%" height="15" fill="rgb(246,67,9)" fg:x="81" fg:w="1"/><text x="6.9167%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.6667%" y="485" width="0.0823%" height="15" fill="rgb(239,35,23)" fg:x="81" fg:w="1"/><text x="6.9167%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.6667%" y="469" width="0.0823%" height="15" fill="rgb(211,167,0)" fg:x="81" fg:w="1"/><text x="6.9167%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.6667%" y="453" width="0.0823%" height="15" fill="rgb(225,119,45)" fg:x="81" fg:w="1"/><text x="6.9167%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.6667%" y="437" width="0.0823%" height="15" fill="rgb(210,162,6)" fg:x="81" fg:w="1"/><text x="6.9167%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.6667%" y="421" width="0.0823%" height="15" fill="rgb(208,118,35)" fg:x="81" fg:w="1"/><text x="6.9167%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.6667%" y="405" width="0.0823%" height="15" fill="rgb(239,4,53)" fg:x="81" fg:w="1"/><text x="6.9167%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.6667%" y="389" width="0.0823%" height="15" fill="rgb(213,130,21)" fg:x="81" fg:w="1"/><text x="6.9167%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6667%" y="373" width="0.0823%" height="15" fill="rgb(235,148,0)" fg:x="81" fg:w="1"/><text x="6.9167%" y="383.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (42 samples, 3.46%)</title><rect x="3.3745%" y="629" width="3.4568%" height="15" fill="rgb(244,224,18)" fg:x="41" fg:w="42"/><text x="3.6245%" y="639.50">plu..</text></g><g><title>plugins_core::build::Build::occupying (7 samples, 0.58%)</title><rect x="6.2551%" y="613" width="0.5761%" height="15" fill="rgb(211,214,4)" fg:x="76" fg:w="7"/><text x="6.5051%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.25%)</title><rect x="6.5844%" y="597" width="0.2469%" height="15" fill="rgb(206,119,25)" fg:x="80" fg:w="3"/><text x="6.8344%" y="607.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="6.7490%" y="581" width="0.0823%" height="15" fill="rgb(243,93,47)" fg:x="82" fg:w="1"/><text x="6.9990%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.7490%" y="565" width="0.0823%" height="15" fill="rgb(224,194,6)" fg:x="82" fg:w="1"/><text x="6.9990%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="6.7490%" y="549" width="0.0823%" height="15" fill="rgb(243,229,6)" fg:x="82" fg:w="1"/><text x="6.9990%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.7490%" y="533" width="0.0823%" height="15" fill="rgb(207,23,50)" fg:x="82" fg:w="1"/><text x="6.9990%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7490%" y="517" width="0.0823%" height="15" fill="rgb(253,192,32)" fg:x="82" fg:w="1"/><text x="6.9990%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7490%" y="501" width="0.0823%" height="15" fill="rgb(213,21,6)" fg:x="82" fg:w="1"/><text x="6.9990%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.7490%" y="485" width="0.0823%" height="15" fill="rgb(243,151,13)" fg:x="82" fg:w="1"/><text x="6.9990%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7490%" y="469" width="0.0823%" height="15" fill="rgb(233,165,41)" fg:x="82" fg:w="1"/><text x="6.9990%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7490%" y="453" width="0.0823%" height="15" fill="rgb(246,176,45)" fg:x="82" fg:w="1"/><text x="6.9990%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.7490%" y="437" width="0.0823%" height="15" fill="rgb(217,170,52)" fg:x="82" fg:w="1"/><text x="6.9990%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.7490%" y="421" width="0.0823%" height="15" fill="rgb(214,203,54)" fg:x="82" fg:w="1"/><text x="6.9990%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.7490%" y="405" width="0.0823%" height="15" fill="rgb(248,215,49)" fg:x="82" fg:w="1"/><text x="6.9990%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.7490%" y="389" width="0.0823%" height="15" fill="rgb(208,46,10)" fg:x="82" fg:w="1"/><text x="6.9990%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.7490%" y="373" width="0.0823%" height="15" fill="rgb(254,5,31)" fg:x="82" fg:w="1"/><text x="6.9990%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="6.8313%" y="581" width="0.0823%" height="15" fill="rgb(222,104,33)" fg:x="83" fg:w="1"/><text x="7.0813%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="6.8313%" y="565" width="0.0823%" height="15" fill="rgb(248,49,16)" fg:x="83" fg:w="1"/><text x="7.0813%" y="575.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="6.8313%" y="549" width="0.0823%" height="15" fill="rgb(232,198,41)" fg:x="83" fg:w="1"/><text x="7.0813%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="6.8313%" y="533" width="0.0823%" height="15" fill="rgb(214,125,3)" fg:x="83" fg:w="1"/><text x="7.0813%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="6.8313%" y="517" width="0.0823%" height="15" fill="rgb(229,220,28)" fg:x="83" fg:w="1"/><text x="7.0813%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="6.9136%" y="581" width="0.0823%" height="15" fill="rgb(222,64,37)" fg:x="84" fg:w="1"/><text x="7.1636%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.9136%" y="565" width="0.0823%" height="15" fill="rgb(249,184,13)" fg:x="84" fg:w="1"/><text x="7.1636%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9136%" y="549" width="0.0823%" height="15" fill="rgb(252,176,6)" fg:x="84" fg:w="1"/><text x="7.1636%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.25%)</title><rect x="6.8313%" y="629" width="0.2469%" height="15" fill="rgb(228,153,7)" fg:x="83" fg:w="3"/><text x="7.0813%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.25%)</title><rect x="6.8313%" y="613" width="0.2469%" height="15" fill="rgb(242,193,5)" fg:x="83" fg:w="3"/><text x="7.0813%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="6.8313%" y="597" width="0.2469%" height="15" fill="rgb(232,140,9)" fg:x="83" fg:w="3"/><text x="7.0813%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.9959%" y="581" width="0.0823%" height="15" fill="rgb(213,222,16)" fg:x="85" fg:w="1"/><text x="7.2459%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.9959%" y="565" width="0.0823%" height="15" fill="rgb(222,75,50)" fg:x="85" fg:w="1"/><text x="7.2459%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.9959%" y="549" width="0.0823%" height="15" fill="rgb(205,180,2)" fg:x="85" fg:w="1"/><text x="7.2459%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.9959%" y="533" width="0.0823%" height="15" fill="rgb(216,34,7)" fg:x="85" fg:w="1"/><text x="7.2459%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.9959%" y="517" width="0.0823%" height="15" fill="rgb(253,16,32)" fg:x="85" fg:w="1"/><text x="7.2459%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9959%" y="501" width="0.0823%" height="15" fill="rgb(208,97,28)" fg:x="85" fg:w="1"/><text x="7.2459%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9959%" y="485" width="0.0823%" height="15" fill="rgb(225,92,11)" fg:x="85" fg:w="1"/><text x="7.2459%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.9959%" y="469" width="0.0823%" height="15" fill="rgb(243,38,12)" fg:x="85" fg:w="1"/><text x="7.2459%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9959%" y="453" width="0.0823%" height="15" fill="rgb(208,139,16)" fg:x="85" fg:w="1"/><text x="7.2459%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.9959%" y="437" width="0.0823%" height="15" fill="rgb(227,24,9)" fg:x="85" fg:w="1"/><text x="7.2459%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9959%" y="421" width="0.0823%" height="15" fill="rgb(206,62,11)" fg:x="85" fg:w="1"/><text x="7.2459%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1605%" y="517" width="0.0823%" height="15" fill="rgb(228,134,27)" fg:x="87" fg:w="1"/><text x="7.4105%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1605%" y="501" width="0.0823%" height="15" fill="rgb(205,55,33)" fg:x="87" fg:w="1"/><text x="7.4105%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1605%" y="485" width="0.0823%" height="15" fill="rgb(243,75,43)" fg:x="87" fg:w="1"/><text x="7.4105%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.1605%" y="469" width="0.0823%" height="15" fill="rgb(223,27,42)" fg:x="87" fg:w="1"/><text x="7.4105%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.1605%" y="453" width="0.0823%" height="15" fill="rgb(232,189,33)" fg:x="87" fg:w="1"/><text x="7.4105%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.1605%" y="437" width="0.0823%" height="15" fill="rgb(210,9,39)" fg:x="87" fg:w="1"/><text x="7.4105%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.1605%" y="421" width="0.0823%" height="15" fill="rgb(242,85,26)" fg:x="87" fg:w="1"/><text x="7.4105%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.1605%" y="405" width="0.0823%" height="15" fill="rgb(248,44,4)" fg:x="87" fg:w="1"/><text x="7.4105%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.1605%" y="389" width="0.0823%" height="15" fill="rgb(250,96,46)" fg:x="87" fg:w="1"/><text x="7.4105%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.1605%" y="373" width="0.0823%" height="15" fill="rgb(229,116,26)" fg:x="87" fg:w="1"/><text x="7.4105%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.1605%" y="357" width="0.0823%" height="15" fill="rgb(246,94,34)" fg:x="87" fg:w="1"/><text x="7.4105%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.1605%" y="341" width="0.0823%" height="15" fill="rgb(251,73,21)" fg:x="87" fg:w="1"/><text x="7.4105%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.1605%" y="325" width="0.0823%" height="15" fill="rgb(254,121,25)" fg:x="87" fg:w="1"/><text x="7.4105%" y="335.50"></text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.25%)</title><rect x="7.0782%" y="629" width="0.2469%" height="15" fill="rgb(215,161,49)" fg:x="86" fg:w="3"/><text x="7.3282%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="7.1605%" y="613" width="0.1646%" height="15" fill="rgb(221,43,13)" fg:x="87" fg:w="2"/><text x="7.4105%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::new (2 samples, 0.16%)</title><rect x="7.1605%" y="597" width="0.1646%" height="15" fill="rgb(249,5,37)" fg:x="87" fg:w="2"/><text x="7.4105%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="7.1605%" y="581" width="0.1646%" height="15" fill="rgb(226,25,44)" fg:x="87" fg:w="2"/><text x="7.4105%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="7.1605%" y="565" width="0.1646%" height="15" fill="rgb(238,189,16)" fg:x="87" fg:w="2"/><text x="7.4105%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.1605%" y="549" width="0.1646%" height="15" fill="rgb(251,186,8)" fg:x="87" fg:w="2"/><text x="7.4105%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.1605%" y="533" width="0.1646%" height="15" fill="rgb(254,34,31)" fg:x="87" fg:w="2"/><text x="7.4105%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2428%" y="517" width="0.0823%" height="15" fill="rgb(225,215,27)" fg:x="88" fg:w="1"/><text x="7.4928%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (73 samples, 6.01%)</title><rect x="1.3992%" y="645" width="6.0082%" height="15" fill="rgb(221,192,48)" fg:x="17" fg:w="73"/><text x="1.6492%" y="655.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::route (1 samples, 0.08%)</title><rect x="7.3251%" y="629" width="0.0823%" height="15" fill="rgb(219,137,20)" fg:x="89" fg:w="1"/><text x="7.5751%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.3251%" y="613" width="0.0823%" height="15" fill="rgb(219,84,11)" fg:x="89" fg:w="1"/><text x="7.5751%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.3251%" y="597" width="0.0823%" height="15" fill="rgb(224,10,23)" fg:x="89" fg:w="1"/><text x="7.5751%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.4074%" y="629" width="0.0823%" height="15" fill="rgb(248,22,39)" fg:x="90" fg:w="1"/><text x="7.6574%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4074%" y="613" width="0.0823%" height="15" fill="rgb(212,154,20)" fg:x="90" fg:w="1"/><text x="7.6574%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.4897%" y="517" width="0.0823%" height="15" fill="rgb(236,199,50)" fg:x="91" fg:w="1"/><text x="7.7397%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.4897%" y="501" width="0.0823%" height="15" fill="rgb(211,9,17)" fg:x="91" fg:w="1"/><text x="7.7397%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.4897%" y="485" width="0.0823%" height="15" fill="rgb(243,216,36)" fg:x="91" fg:w="1"/><text x="7.7397%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4897%" y="469" width="0.0823%" height="15" fill="rgb(250,2,10)" fg:x="91" fg:w="1"/><text x="7.7397%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.4897%" y="453" width="0.0823%" height="15" fill="rgb(226,50,48)" fg:x="91" fg:w="1"/><text x="7.7397%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.4897%" y="437" width="0.0823%" height="15" fill="rgb(243,81,16)" fg:x="91" fg:w="1"/><text x="7.7397%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.4897%" y="421" width="0.0823%" height="15" fill="rgb(250,14,2)" fg:x="91" fg:w="1"/><text x="7.7397%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.4897%" y="405" width="0.0823%" height="15" fill="rgb(233,135,29)" fg:x="91" fg:w="1"/><text x="7.7397%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.4897%" y="389" width="0.0823%" height="15" fill="rgb(224,64,43)" fg:x="91" fg:w="1"/><text x="7.7397%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.4897%" y="373" width="0.0823%" height="15" fill="rgb(238,84,13)" fg:x="91" fg:w="1"/><text x="7.7397%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="7.4897%" y="629" width="0.1646%" height="15" fill="rgb(253,48,26)" fg:x="91" fg:w="2"/><text x="7.7397%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="7.4897%" y="613" width="0.1646%" height="15" fill="rgb(205,223,31)" fg:x="91" fg:w="2"/><text x="7.7397%" y="623.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="7.4897%" y="597" width="0.1646%" height="15" fill="rgb(221,41,32)" fg:x="91" fg:w="2"/><text x="7.7397%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="7.4897%" y="581" width="0.1646%" height="15" fill="rgb(213,158,31)" fg:x="91" fg:w="2"/><text x="7.7397%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="7.4897%" y="565" width="0.1646%" height="15" fill="rgb(245,126,43)" fg:x="91" fg:w="2"/><text x="7.7397%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="7.4897%" y="549" width="0.1646%" height="15" fill="rgb(227,7,22)" fg:x="91" fg:w="2"/><text x="7.7397%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="7.4897%" y="533" width="0.1646%" height="15" fill="rgb(252,90,44)" fg:x="91" fg:w="2"/><text x="7.7397%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.5720%" y="517" width="0.0823%" height="15" fill="rgb(253,91,0)" fg:x="92" fg:w="1"/><text x="7.8220%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.5720%" y="501" width="0.0823%" height="15" fill="rgb(252,175,49)" fg:x="92" fg:w="1"/><text x="7.8220%" y="511.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="7.5720%" y="485" width="0.0823%" height="15" fill="rgb(246,150,1)" fg:x="92" fg:w="1"/><text x="7.8220%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.6543%" y="597" width="0.0823%" height="15" fill="rgb(241,192,25)" fg:x="93" fg:w="1"/><text x="7.9043%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="7.6543%" y="581" width="0.0823%" height="15" fill="rgb(239,187,11)" fg:x="93" fg:w="1"/><text x="7.9043%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="7.6543%" y="565" width="0.0823%" height="15" fill="rgb(218,202,51)" fg:x="93" fg:w="1"/><text x="7.9043%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.9835%" y="533" width="0.0823%" height="15" fill="rgb(225,176,8)" fg:x="97" fg:w="1"/><text x="8.2335%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0658%" y="533" width="0.1646%" height="15" fill="rgb(219,122,41)" fg:x="98" fg:w="2"/><text x="8.3158%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0658%" y="517" width="0.1646%" height="15" fill="rgb(248,140,20)" fg:x="98" fg:w="2"/><text x="8.3158%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0658%" y="501" width="0.1646%" height="15" fill="rgb(245,41,37)" fg:x="98" fg:w="2"/><text x="8.3158%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0658%" y="485" width="0.1646%" height="15" fill="rgb(235,82,39)" fg:x="98" fg:w="2"/><text x="8.3158%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1481%" y="469" width="0.0823%" height="15" fill="rgb(230,108,42)" fg:x="99" fg:w="1"/><text x="8.3981%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1481%" y="453" width="0.0823%" height="15" fill="rgb(215,150,50)" fg:x="99" fg:w="1"/><text x="8.3981%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1481%" y="437" width="0.0823%" height="15" fill="rgb(233,212,5)" fg:x="99" fg:w="1"/><text x="8.3981%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1481%" y="421" width="0.0823%" height="15" fill="rgb(245,80,22)" fg:x="99" fg:w="1"/><text x="8.3981%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="7.8189%" y="565" width="0.4938%" height="15" fill="rgb(238,129,16)" fg:x="95" fg:w="6"/><text x="8.0689%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="7.8189%" y="549" width="0.4938%" height="15" fill="rgb(240,19,0)" fg:x="95" fg:w="6"/><text x="8.0689%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2305%" y="533" width="0.0823%" height="15" fill="rgb(232,42,35)" fg:x="100" fg:w="1"/><text x="8.4805%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2305%" y="517" width="0.0823%" height="15" fill="rgb(223,130,24)" fg:x="100" fg:w="1"/><text x="8.4805%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3128%" y="565" width="0.0823%" height="15" fill="rgb(237,16,22)" fg:x="101" fg:w="1"/><text x="8.5628%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.3128%" y="549" width="0.0823%" height="15" fill="rgb(248,192,20)" fg:x="101" fg:w="1"/><text x="8.5628%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3128%" y="533" width="0.0823%" height="15" fill="rgb(233,167,2)" fg:x="101" fg:w="1"/><text x="8.5628%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.3951%" y="453" width="0.0823%" height="15" fill="rgb(252,71,44)" fg:x="102" fg:w="1"/><text x="8.6451%" y="463.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="8.3951%" y="549" width="0.1646%" height="15" fill="rgb(238,37,47)" fg:x="102" fg:w="2"/><text x="8.6451%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.3951%" y="533" width="0.1646%" height="15" fill="rgb(214,202,54)" fg:x="102" fg:w="2"/><text x="8.6451%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.3951%" y="517" width="0.1646%" height="15" fill="rgb(254,165,40)" fg:x="102" fg:w="2"/><text x="8.6451%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.3951%" y="501" width="0.1646%" height="15" fill="rgb(246,173,38)" fg:x="102" fg:w="2"/><text x="8.6451%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.3951%" y="485" width="0.1646%" height="15" fill="rgb(215,3,27)" fg:x="102" fg:w="2"/><text x="8.6451%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.3951%" y="469" width="0.1646%" height="15" fill="rgb(239,169,51)" fg:x="102" fg:w="2"/><text x="8.6451%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="8.4774%" y="453" width="0.0823%" height="15" fill="rgb(212,5,25)" fg:x="103" fg:w="1"/><text x="8.7274%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.4774%" y="437" width="0.0823%" height="15" fill="rgb(243,45,17)" fg:x="103" fg:w="1"/><text x="8.7274%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4774%" y="421" width="0.0823%" height="15" fill="rgb(242,97,9)" fg:x="103" fg:w="1"/><text x="8.7274%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5597%" y="517" width="0.0823%" height="15" fill="rgb(228,71,31)" fg:x="104" fg:w="1"/><text x="8.8097%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.5597%" y="501" width="0.0823%" height="15" fill="rgb(252,184,16)" fg:x="104" fg:w="1"/><text x="8.8097%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="8.7243%" y="485" width="0.0823%" height="15" fill="rgb(236,169,46)" fg:x="106" fg:w="1"/><text x="8.9743%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="8.8066%" y="453" width="0.0823%" height="15" fill="rgb(207,17,47)" fg:x="107" fg:w="1"/><text x="9.0566%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="8.8066%" y="469" width="0.1646%" height="15" fill="rgb(206,201,28)" fg:x="107" fg:w="2"/><text x="9.0566%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8889%" y="453" width="0.0823%" height="15" fill="rgb(224,184,23)" fg:x="108" fg:w="1"/><text x="9.1389%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.8889%" y="437" width="0.0823%" height="15" fill="rgb(208,139,48)" fg:x="108" fg:w="1"/><text x="9.1389%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8889%" y="421" width="0.0823%" height="15" fill="rgb(208,130,10)" fg:x="108" fg:w="1"/><text x="9.1389%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9712%" y="437" width="0.0823%" height="15" fill="rgb(211,213,45)" fg:x="109" fg:w="1"/><text x="9.2212%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9712%" y="421" width="0.0823%" height="15" fill="rgb(235,100,30)" fg:x="109" fg:w="1"/><text x="9.2212%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9712%" y="405" width="0.0823%" height="15" fill="rgb(206,144,31)" fg:x="109" fg:w="1"/><text x="9.2212%" y="415.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.82%)</title><rect x="8.5597%" y="549" width="0.8230%" height="15" fill="rgb(224,200,26)" fg:x="104" fg:w="10"/><text x="8.8097%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.82%)</title><rect x="8.5597%" y="533" width="0.8230%" height="15" fill="rgb(247,104,53)" fg:x="104" fg:w="10"/><text x="8.8097%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.74%)</title><rect x="8.6420%" y="517" width="0.7407%" height="15" fill="rgb(220,14,17)" fg:x="105" fg:w="9"/><text x="8.8920%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.66%)</title><rect x="8.7243%" y="501" width="0.6584%" height="15" fill="rgb(230,140,40)" fg:x="106" fg:w="8"/><text x="8.9743%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.58%)</title><rect x="8.8066%" y="485" width="0.5761%" height="15" fill="rgb(229,2,41)" fg:x="107" fg:w="7"/><text x="9.0566%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="8.9712%" y="469" width="0.4115%" height="15" fill="rgb(232,89,16)" fg:x="109" fg:w="5"/><text x="9.2212%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="8.9712%" y="453" width="0.4115%" height="15" fill="rgb(247,59,52)" fg:x="109" fg:w="5"/><text x="9.2212%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="9.0535%" y="437" width="0.3292%" height="15" fill="rgb(226,110,21)" fg:x="110" fg:w="4"/><text x="9.3035%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="9.0535%" y="421" width="0.3292%" height="15" fill="rgb(224,176,43)" fg:x="110" fg:w="4"/><text x="9.3035%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="9.0535%" y="405" width="0.3292%" height="15" fill="rgb(221,73,6)" fg:x="110" fg:w="4"/><text x="9.3035%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="9.1358%" y="389" width="0.2469%" height="15" fill="rgb(232,78,19)" fg:x="111" fg:w="3"/><text x="9.3858%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.2181%" y="373" width="0.1646%" height="15" fill="rgb(233,112,48)" fg:x="112" fg:w="2"/><text x="9.4681%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.3004%" y="357" width="0.0823%" height="15" fill="rgb(243,131,47)" fg:x="113" fg:w="1"/><text x="9.5504%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.4650%" y="405" width="0.0823%" height="15" fill="rgb(226,51,1)" fg:x="115" fg:w="1"/><text x="9.7150%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.4650%" y="389" width="0.0823%" height="15" fill="rgb(247,58,7)" fg:x="115" fg:w="1"/><text x="9.7150%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.4650%" y="373" width="0.0823%" height="15" fill="rgb(209,7,32)" fg:x="115" fg:w="1"/><text x="9.7150%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4650%" y="357" width="0.0823%" height="15" fill="rgb(209,39,41)" fg:x="115" fg:w="1"/><text x="9.7150%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="9.5473%" y="357" width="0.1646%" height="15" fill="rgb(226,182,46)" fg:x="116" fg:w="2"/><text x="9.7973%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.6296%" y="341" width="0.0823%" height="15" fill="rgb(230,219,10)" fg:x="117" fg:w="1"/><text x="9.8796%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.6296%" y="325" width="0.0823%" height="15" fill="rgb(227,175,30)" fg:x="117" fg:w="1"/><text x="9.8796%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6296%" y="309" width="0.0823%" height="15" fill="rgb(217,2,50)" fg:x="117" fg:w="1"/><text x="9.8796%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="9.5473%" y="389" width="0.2469%" height="15" fill="rgb(229,160,0)" fg:x="116" fg:w="3"/><text x="9.7973%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="9.5473%" y="373" width="0.2469%" height="15" fill="rgb(207,78,37)" fg:x="116" fg:w="3"/><text x="9.7973%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.7119%" y="357" width="0.0823%" height="15" fill="rgb(225,57,0)" fg:x="118" fg:w="1"/><text x="9.9619%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="9.7119%" y="341" width="0.0823%" height="15" fill="rgb(232,154,2)" fg:x="118" fg:w="1"/><text x="9.9619%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="9.4650%" y="421" width="0.4115%" height="15" fill="rgb(241,212,25)" fg:x="115" fg:w="5"/><text x="9.7150%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="9.5473%" y="405" width="0.3292%" height="15" fill="rgb(226,69,20)" fg:x="116" fg:w="4"/><text x="9.7973%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.7942%" y="389" width="0.0823%" height="15" fill="rgb(247,184,54)" fg:x="119" fg:w="1"/><text x="10.0442%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="9.4650%" y="485" width="0.4938%" height="15" fill="rgb(210,145,0)" fg:x="115" fg:w="6"/><text x="9.7150%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="9.4650%" y="469" width="0.4938%" height="15" fill="rgb(253,82,12)" fg:x="115" fg:w="6"/><text x="9.7150%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="9.4650%" y="453" width="0.4938%" height="15" fill="rgb(245,42,11)" fg:x="115" fg:w="6"/><text x="9.7150%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="9.4650%" y="437" width="0.4938%" height="15" fill="rgb(219,147,32)" fg:x="115" fg:w="6"/><text x="9.7150%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.8765%" y="421" width="0.0823%" height="15" fill="rgb(246,12,7)" fg:x="120" fg:w="1"/><text x="10.1265%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="9.8765%" y="405" width="0.0823%" height="15" fill="rgb(243,50,9)" fg:x="120" fg:w="1"/><text x="10.1265%" y="415.50"></text></g><g><title>engine::session::state::State::close (29 samples, 2.39%)</title><rect x="7.6543%" y="629" width="2.3868%" height="15" fill="rgb(219,149,6)" fg:x="93" fg:w="29"/><text x="7.9043%" y="639.50">en..</text></g><g><title>engine::session::state::State::flush_entities (29 samples, 2.39%)</title><rect x="7.6543%" y="613" width="2.3868%" height="15" fill="rgb(241,51,42)" fg:x="93" fg:w="29"/><text x="7.9043%" y="623.50">en..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (28 samples, 2.30%)</title><rect x="7.7366%" y="597" width="2.3045%" height="15" fill="rgb(226,128,27)" fg:x="94" fg:w="28"/><text x="7.9866%" y="607.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (28 samples, 2.30%)</title><rect x="7.7366%" y="581" width="2.3045%" height="15" fill="rgb(244,144,4)" fg:x="94" fg:w="28"/><text x="7.9866%" y="591.50">e..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.65%)</title><rect x="8.3951%" y="565" width="1.6461%" height="15" fill="rgb(221,4,13)" fg:x="102" fg:w="20"/><text x="8.6451%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.66%)</title><rect x="9.3827%" y="549" width="0.6584%" height="15" fill="rgb(208,170,28)" fg:x="114" fg:w="8"/><text x="9.6327%" y="559.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.66%)</title><rect x="9.3827%" y="533" width="0.6584%" height="15" fill="rgb(226,131,13)" fg:x="114" fg:w="8"/><text x="9.6327%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.66%)</title><rect x="9.3827%" y="517" width="0.6584%" height="15" fill="rgb(215,72,41)" fg:x="114" fg:w="8"/><text x="9.6327%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.58%)</title><rect x="9.4650%" y="501" width="0.5761%" height="15" fill="rgb(243,108,20)" fg:x="115" fg:w="7"/><text x="9.7150%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9588%" y="485" width="0.0823%" height="15" fill="rgb(230,189,17)" fg:x="121" fg:w="1"/><text x="10.2088%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9588%" y="469" width="0.0823%" height="15" fill="rgb(220,50,17)" fg:x="121" fg:w="1"/><text x="10.2088%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9588%" y="453" width="0.0823%" height="15" fill="rgb(248,152,48)" fg:x="121" fg:w="1"/><text x="10.2088%" y="463.50"></text></g><g><title>engine::session::Session::close (33 samples, 2.72%)</title><rect x="7.4074%" y="645" width="2.7160%" height="15" fill="rgb(244,91,11)" fg:x="90" fg:w="33"/><text x="7.6574%" y="655.50">en..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="10.0412%" y="629" width="0.0823%" height="15" fill="rgb(220,157,5)" fg:x="122" fg:w="1"/><text x="10.2912%" y="639.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="10.0412%" y="613" width="0.0823%" height="15" fill="rgb(253,137,8)" fg:x="122" fg:w="1"/><text x="10.2912%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="10.0412%" y="597" width="0.0823%" height="15" fill="rgb(217,137,51)" fg:x="122" fg:w="1"/><text x="10.2912%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="10.0412%" y="581" width="0.0823%" height="15" fill="rgb(218,209,53)" fg:x="122" fg:w="1"/><text x="10.2912%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="10.0412%" y="565" width="0.0823%" height="15" fill="rgb(249,137,25)" fg:x="122" fg:w="1"/><text x="10.2912%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="10.1235%" y="533" width="0.0823%" height="15" fill="rgb(239,155,26)" fg:x="123" fg:w="1"/><text x="10.3735%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="10.1235%" y="517" width="0.0823%" height="15" fill="rgb(227,85,46)" fg:x="123" fg:w="1"/><text x="10.3735%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="10.1235%" y="501" width="0.0823%" height="15" fill="rgb(251,107,43)" fg:x="123" fg:w="1"/><text x="10.3735%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.1235%" y="485" width="0.0823%" height="15" fill="rgb(234,170,33)" fg:x="123" fg:w="1"/><text x="10.3735%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2881%" y="293" width="0.0823%" height="15" fill="rgb(206,29,35)" fg:x="125" fg:w="1"/><text x="10.5381%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.2881%" y="277" width="0.0823%" height="15" fill="rgb(227,138,25)" fg:x="125" fg:w="1"/><text x="10.5381%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.2881%" y="261" width="0.0823%" height="15" fill="rgb(249,131,35)" fg:x="125" fg:w="1"/><text x="10.5381%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.3704%" y="261" width="0.0823%" height="15" fill="rgb(239,6,40)" fg:x="126" fg:w="1"/><text x="10.6204%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.3704%" y="245" width="0.0823%" height="15" fill="rgb(246,136,47)" fg:x="126" fg:w="1"/><text x="10.6204%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="10.2881%" y="309" width="0.2469%" height="15" fill="rgb(253,58,26)" fg:x="125" fg:w="3"/><text x="10.5381%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="10.3704%" y="293" width="0.1646%" height="15" fill="rgb(237,141,10)" fg:x="126" fg:w="2"/><text x="10.6204%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.3704%" y="277" width="0.1646%" height="15" fill="rgb(234,156,12)" fg:x="126" fg:w="2"/><text x="10.6204%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.4527%" y="261" width="0.0823%" height="15" fill="rgb(243,224,36)" fg:x="127" fg:w="1"/><text x="10.7027%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.4527%" y="245" width="0.0823%" height="15" fill="rgb(205,229,51)" fg:x="127" fg:w="1"/><text x="10.7027%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.4527%" y="229" width="0.0823%" height="15" fill="rgb(223,189,4)" fg:x="127" fg:w="1"/><text x="10.7027%" y="239.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="10.2881%" y="437" width="0.3292%" height="15" fill="rgb(249,167,54)" fg:x="125" fg:w="4"/><text x="10.5381%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="10.2881%" y="421" width="0.3292%" height="15" fill="rgb(218,34,28)" fg:x="125" fg:w="4"/><text x="10.5381%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="10.2881%" y="405" width="0.3292%" height="15" fill="rgb(232,109,42)" fg:x="125" fg:w="4"/><text x="10.5381%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="10.2881%" y="389" width="0.3292%" height="15" fill="rgb(248,214,46)" fg:x="125" fg:w="4"/><text x="10.5381%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="10.2881%" y="373" width="0.3292%" height="15" fill="rgb(244,216,40)" fg:x="125" fg:w="4"/><text x="10.5381%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="10.2881%" y="357" width="0.3292%" height="15" fill="rgb(231,226,31)" fg:x="125" fg:w="4"/><text x="10.5381%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="10.2881%" y="341" width="0.3292%" height="15" fill="rgb(238,38,43)" fg:x="125" fg:w="4"/><text x="10.5381%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="10.2881%" y="325" width="0.3292%" height="15" fill="rgb(208,88,43)" fg:x="125" fg:w="4"/><text x="10.5381%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5350%" y="309" width="0.0823%" height="15" fill="rgb(205,136,37)" fg:x="128" fg:w="1"/><text x="10.7850%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.5350%" y="293" width="0.0823%" height="15" fill="rgb(237,34,14)" fg:x="128" fg:w="1"/><text x="10.7850%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5350%" y="277" width="0.0823%" height="15" fill="rgb(236,193,44)" fg:x="128" fg:w="1"/><text x="10.7850%" y="287.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="10.5350%" y="261" width="0.0823%" height="15" fill="rgb(231,48,10)" fg:x="128" fg:w="1"/><text x="10.7850%" y="271.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.58%)</title><rect x="10.1235%" y="549" width="0.5761%" height="15" fill="rgb(213,141,34)" fg:x="123" fg:w="7"/><text x="10.3735%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="10.2058%" y="533" width="0.4938%" height="15" fill="rgb(249,130,34)" fg:x="124" fg:w="6"/><text x="10.4558%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="10.2058%" y="517" width="0.4938%" height="15" fill="rgb(219,42,41)" fg:x="124" fg:w="6"/><text x="10.4558%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.41%)</title><rect x="10.2881%" y="501" width="0.4115%" height="15" fill="rgb(224,100,54)" fg:x="125" fg:w="5"/><text x="10.5381%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.41%)</title><rect x="10.2881%" y="485" width="0.4115%" height="15" fill="rgb(229,200,27)" fg:x="125" fg:w="5"/><text x="10.5381%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="10.2881%" y="469" width="0.4115%" height="15" fill="rgb(217,118,10)" fg:x="125" fg:w="5"/><text x="10.5381%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.41%)</title><rect x="10.2881%" y="453" width="0.4115%" height="15" fill="rgb(206,22,3)" fg:x="125" fg:w="5"/><text x="10.5381%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.6173%" y="437" width="0.0823%" height="15" fill="rgb(232,163,46)" fg:x="129" fg:w="1"/><text x="10.8673%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.6173%" y="421" width="0.0823%" height="15" fill="rgb(206,95,13)" fg:x="129" fg:w="1"/><text x="10.8673%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.6173%" y="405" width="0.0823%" height="15" fill="rgb(253,154,18)" fg:x="129" fg:w="1"/><text x="10.8673%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.6173%" y="389" width="0.0823%" height="15" fill="rgb(219,32,23)" fg:x="129" fg:w="1"/><text x="10.8673%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.6173%" y="373" width="0.0823%" height="15" fill="rgb(230,191,45)" fg:x="129" fg:w="1"/><text x="10.8673%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.6173%" y="357" width="0.0823%" height="15" fill="rgb(229,64,36)" fg:x="129" fg:w="1"/><text x="10.8673%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.6173%" y="341" width="0.0823%" height="15" fill="rgb(205,129,25)" fg:x="129" fg:w="1"/><text x="10.8673%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (8 samples, 0.66%)</title><rect x="10.1235%" y="565" width="0.6584%" height="15" fill="rgb(254,112,7)" fg:x="123" fg:w="8"/><text x="10.3735%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="10.6996%" y="549" width="0.0823%" height="15" fill="rgb(226,53,48)" fg:x="130" fg:w="1"/><text x="10.9496%" y="559.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="10.6996%" y="533" width="0.0823%" height="15" fill="rgb(214,153,38)" fg:x="130" fg:w="1"/><text x="10.9496%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="10.6996%" y="517" width="0.0823%" height="15" fill="rgb(243,101,7)" fg:x="130" fg:w="1"/><text x="10.9496%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="10.6996%" y="501" width="0.0823%" height="15" fill="rgb(240,140,22)" fg:x="130" fg:w="1"/><text x="10.9496%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="10.6996%" y="485" width="0.0823%" height="15" fill="rgb(235,114,2)" fg:x="130" fg:w="1"/><text x="10.9496%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.6996%" y="469" width="0.0823%" height="15" fill="rgb(242,59,12)" fg:x="130" fg:w="1"/><text x="10.9496%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.6996%" y="453" width="0.0823%" height="15" fill="rgb(252,134,9)" fg:x="130" fg:w="1"/><text x="10.9496%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.6996%" y="437" width="0.0823%" height="15" fill="rgb(236,4,44)" fg:x="130" fg:w="1"/><text x="10.9496%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="10.6996%" y="421" width="0.0823%" height="15" fill="rgb(254,172,41)" fg:x="130" fg:w="1"/><text x="10.9496%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.6996%" y="405" width="0.0823%" height="15" fill="rgb(244,63,20)" fg:x="130" fg:w="1"/><text x="10.9496%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.6996%" y="389" width="0.0823%" height="15" fill="rgb(250,73,31)" fg:x="130" fg:w="1"/><text x="10.9496%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.6996%" y="373" width="0.0823%" height="15" fill="rgb(241,38,36)" fg:x="130" fg:w="1"/><text x="10.9496%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="10.6996%" y="357" width="0.0823%" height="15" fill="rgb(245,211,2)" fg:x="130" fg:w="1"/><text x="10.9496%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.6996%" y="341" width="0.0823%" height="15" fill="rgb(206,120,28)" fg:x="130" fg:w="1"/><text x="10.9496%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.6996%" y="325" width="0.0823%" height="15" fill="rgb(211,59,34)" fg:x="130" fg:w="1"/><text x="10.9496%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.6996%" y="309" width="0.0823%" height="15" fill="rgb(233,168,5)" fg:x="130" fg:w="1"/><text x="10.9496%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.6996%" y="293" width="0.0823%" height="15" fill="rgb(234,33,13)" fg:x="130" fg:w="1"/><text x="10.9496%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.6996%" y="277" width="0.0823%" height="15" fill="rgb(231,150,26)" fg:x="130" fg:w="1"/><text x="10.9496%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="10.6996%" y="261" width="0.0823%" height="15" fill="rgb(217,191,4)" fg:x="130" fg:w="1"/><text x="10.9496%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="10.6996%" y="245" width="0.0823%" height="15" fill="rgb(246,198,38)" fg:x="130" fg:w="1"/><text x="10.9496%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="10.6996%" y="229" width="0.0823%" height="15" fill="rgb(245,64,37)" fg:x="130" fg:w="1"/><text x="10.9496%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="10.6996%" y="213" width="0.0823%" height="15" fill="rgb(250,30,36)" fg:x="130" fg:w="1"/><text x="10.9496%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="10.6996%" y="197" width="0.0823%" height="15" fill="rgb(217,86,53)" fg:x="130" fg:w="1"/><text x="10.9496%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="10.6996%" y="181" width="0.0823%" height="15" fill="rgb(228,157,16)" fg:x="130" fg:w="1"/><text x="10.9496%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.6996%" y="165" width="0.0823%" height="15" fill="rgb(217,59,31)" fg:x="130" fg:w="1"/><text x="10.9496%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="10.6996%" y="149" width="0.0823%" height="15" fill="rgb(237,138,41)" fg:x="130" fg:w="1"/><text x="10.9496%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.6996%" y="133" width="0.0823%" height="15" fill="rgb(227,91,49)" fg:x="130" fg:w="1"/><text x="10.9496%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="10.6996%" y="117" width="0.0823%" height="15" fill="rgb(247,21,44)" fg:x="130" fg:w="1"/><text x="10.9496%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="10.6996%" y="101" width="0.0823%" height="15" fill="rgb(219,210,51)" fg:x="130" fg:w="1"/><text x="10.9496%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="10.6996%" y="85" width="0.0823%" height="15" fill="rgb(209,140,6)" fg:x="130" fg:w="1"/><text x="10.9496%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.6996%" y="69" width="0.0823%" height="15" fill="rgb(221,188,24)" fg:x="130" fg:w="1"/><text x="10.9496%" y="79.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="10.7819%" y="421" width="0.0823%" height="15" fill="rgb(232,154,20)" fg:x="131" fg:w="1"/><text x="11.0319%" y="431.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7819%" y="405" width="0.0823%" height="15" fill="rgb(244,137,50)" fg:x="131" fg:w="1"/><text x="11.0319%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7819%" y="389" width="0.0823%" height="15" fill="rgb(225,185,43)" fg:x="131" fg:w="1"/><text x="11.0319%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.7819%" y="373" width="0.0823%" height="15" fill="rgb(213,205,38)" fg:x="131" fg:w="1"/><text x="11.0319%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.7819%" y="357" width="0.0823%" height="15" fill="rgb(236,73,12)" fg:x="131" fg:w="1"/><text x="11.0319%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.7819%" y="341" width="0.0823%" height="15" fill="rgb(235,219,13)" fg:x="131" fg:w="1"/><text x="11.0319%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.7819%" y="325" width="0.0823%" height="15" fill="rgb(218,59,36)" fg:x="131" fg:w="1"/><text x="11.0319%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.7819%" y="309" width="0.0823%" height="15" fill="rgb(205,110,39)" fg:x="131" fg:w="1"/><text x="11.0319%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.7819%" y="293" width="0.0823%" height="15" fill="rgb(218,206,42)" fg:x="131" fg:w="1"/><text x="11.0319%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.7819%" y="277" width="0.0823%" height="15" fill="rgb(248,125,24)" fg:x="131" fg:w="1"/><text x="11.0319%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.7819%" y="261" width="0.0823%" height="15" fill="rgb(242,28,27)" fg:x="131" fg:w="1"/><text x="11.0319%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.7819%" y="245" width="0.0823%" height="15" fill="rgb(216,228,15)" fg:x="131" fg:w="1"/><text x="11.0319%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.7819%" y="229" width="0.0823%" height="15" fill="rgb(235,116,46)" fg:x="131" fg:w="1"/><text x="11.0319%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0288%" y="341" width="0.0823%" height="15" fill="rgb(224,18,32)" fg:x="134" fg:w="1"/><text x="11.2788%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0288%" y="325" width="0.0823%" height="15" fill="rgb(252,5,12)" fg:x="134" fg:w="1"/><text x="11.2788%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0288%" y="309" width="0.0823%" height="15" fill="rgb(251,36,5)" fg:x="134" fg:w="1"/><text x="11.2788%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.0288%" y="293" width="0.0823%" height="15" fill="rgb(217,53,14)" fg:x="134" fg:w="1"/><text x="11.2788%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0288%" y="277" width="0.0823%" height="15" fill="rgb(215,86,45)" fg:x="134" fg:w="1"/><text x="11.2788%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0288%" y="261" width="0.0823%" height="15" fill="rgb(242,169,11)" fg:x="134" fg:w="1"/><text x="11.2788%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.0288%" y="245" width="0.0823%" height="15" fill="rgb(211,213,45)" fg:x="134" fg:w="1"/><text x="11.2788%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.0288%" y="229" width="0.0823%" height="15" fill="rgb(205,88,11)" fg:x="134" fg:w="1"/><text x="11.2788%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.0288%" y="213" width="0.0823%" height="15" fill="rgb(252,69,26)" fg:x="134" fg:w="1"/><text x="11.2788%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.0288%" y="197" width="0.0823%" height="15" fill="rgb(246,123,37)" fg:x="134" fg:w="1"/><text x="11.2788%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.0288%" y="181" width="0.0823%" height="15" fill="rgb(212,205,5)" fg:x="134" fg:w="1"/><text x="11.2788%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.0288%" y="165" width="0.0823%" height="15" fill="rgb(253,148,0)" fg:x="134" fg:w="1"/><text x="11.2788%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.0288%" y="149" width="0.0823%" height="15" fill="rgb(239,22,4)" fg:x="134" fg:w="1"/><text x="11.2788%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.0288%" y="133" width="0.0823%" height="15" fill="rgb(226,26,53)" fg:x="134" fg:w="1"/><text x="11.2788%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.0288%" y="117" width="0.0823%" height="15" fill="rgb(225,229,45)" fg:x="134" fg:w="1"/><text x="11.2788%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0288%" y="101" width="0.0823%" height="15" fill="rgb(220,60,37)" fg:x="134" fg:w="1"/><text x="11.2788%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.25%)</title><rect x="10.9465%" y="389" width="0.2469%" height="15" fill="rgb(217,180,35)" fg:x="133" fg:w="3"/><text x="11.1965%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="10.9465%" y="373" width="0.2469%" height="15" fill="rgb(229,7,53)" fg:x="133" fg:w="3"/><text x="11.1965%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="11.0288%" y="357" width="0.1646%" height="15" fill="rgb(254,137,3)" fg:x="134" fg:w="2"/><text x="11.2788%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.1111%" y="341" width="0.0823%" height="15" fill="rgb(215,140,41)" fg:x="135" fg:w="1"/><text x="11.3611%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1111%" y="325" width="0.0823%" height="15" fill="rgb(250,80,15)" fg:x="135" fg:w="1"/><text x="11.3611%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.1111%" y="309" width="0.0823%" height="15" fill="rgb(252,191,6)" fg:x="135" fg:w="1"/><text x="11.3611%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1111%" y="293" width="0.0823%" height="15" fill="rgb(246,217,18)" fg:x="135" fg:w="1"/><text x="11.3611%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.1111%" y="277" width="0.0823%" height="15" fill="rgb(223,93,7)" fg:x="135" fg:w="1"/><text x="11.3611%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1111%" y="261" width="0.0823%" height="15" fill="rgb(225,55,52)" fg:x="135" fg:w="1"/><text x="11.3611%" y="271.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="11.1111%" y="245" width="0.0823%" height="15" fill="rgb(240,31,24)" fg:x="135" fg:w="1"/><text x="11.3611%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.2757%" y="293" width="0.1646%" height="15" fill="rgb(205,56,52)" fg:x="137" fg:w="2"/><text x="11.5257%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.2757%" y="277" width="0.1646%" height="15" fill="rgb(246,146,12)" fg:x="137" fg:w="2"/><text x="11.5257%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3580%" y="261" width="0.0823%" height="15" fill="rgb(239,84,36)" fg:x="138" fg:w="1"/><text x="11.6080%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3580%" y="245" width="0.0823%" height="15" fill="rgb(207,41,40)" fg:x="138" fg:w="1"/><text x="11.6080%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.3580%" y="229" width="0.0823%" height="15" fill="rgb(241,179,25)" fg:x="138" fg:w="1"/><text x="11.6080%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.3580%" y="213" width="0.0823%" height="15" fill="rgb(210,0,34)" fg:x="138" fg:w="1"/><text x="11.6080%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.3580%" y="197" width="0.0823%" height="15" fill="rgb(225,217,29)" fg:x="138" fg:w="1"/><text x="11.6080%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.3580%" y="181" width="0.0823%" height="15" fill="rgb(216,191,38)" fg:x="138" fg:w="1"/><text x="11.6080%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.3580%" y="165" width="0.0823%" height="15" fill="rgb(232,140,52)" fg:x="138" fg:w="1"/><text x="11.6080%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.3580%" y="149" width="0.0823%" height="15" fill="rgb(223,158,51)" fg:x="138" fg:w="1"/><text x="11.6080%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.3580%" y="133" width="0.0823%" height="15" fill="rgb(235,29,51)" fg:x="138" fg:w="1"/><text x="11.6080%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.3580%" y="117" width="0.0823%" height="15" fill="rgb(215,181,18)" fg:x="138" fg:w="1"/><text x="11.6080%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.3580%" y="101" width="0.0823%" height="15" fill="rgb(227,125,34)" fg:x="138" fg:w="1"/><text x="11.6080%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3580%" y="85" width="0.0823%" height="15" fill="rgb(230,197,49)" fg:x="138" fg:w="1"/><text x="11.6080%" y="95.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="11.1934%" y="325" width="0.4115%" height="15" fill="rgb(239,141,16)" fg:x="136" fg:w="5"/><text x="11.4434%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="11.1934%" y="309" width="0.4115%" height="15" fill="rgb(225,105,43)" fg:x="136" fg:w="5"/><text x="11.4434%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.4403%" y="293" width="0.1646%" height="15" fill="rgb(214,131,14)" fg:x="139" fg:w="2"/><text x="11.6903%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.4403%" y="277" width="0.1646%" height="15" fill="rgb(229,177,11)" fg:x="139" fg:w="2"/><text x="11.6903%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="11.4403%" y="261" width="0.1646%" height="15" fill="rgb(231,180,14)" fg:x="139" fg:w="2"/><text x="11.6903%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="11.4403%" y="245" width="0.1646%" height="15" fill="rgb(232,88,2)" fg:x="139" fg:w="2"/><text x="11.6903%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="11.4403%" y="229" width="0.1646%" height="15" fill="rgb(205,220,8)" fg:x="139" fg:w="2"/><text x="11.6903%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="11.4403%" y="213" width="0.1646%" height="15" fill="rgb(225,23,53)" fg:x="139" fg:w="2"/><text x="11.6903%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="11.4403%" y="197" width="0.1646%" height="15" fill="rgb(213,62,29)" fg:x="139" fg:w="2"/><text x="11.6903%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="11.4403%" y="181" width="0.1646%" height="15" fill="rgb(227,75,7)" fg:x="139" fg:w="2"/><text x="11.6903%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="11.4403%" y="165" width="0.1646%" height="15" fill="rgb(207,105,14)" fg:x="139" fg:w="2"/><text x="11.6903%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="11.4403%" y="149" width="0.1646%" height="15" fill="rgb(245,62,29)" fg:x="139" fg:w="2"/><text x="11.6903%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="11.4403%" y="133" width="0.1646%" height="15" fill="rgb(236,202,4)" fg:x="139" fg:w="2"/><text x="11.6903%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.4403%" y="117" width="0.1646%" height="15" fill="rgb(250,67,1)" fg:x="139" fg:w="2"/><text x="11.6903%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.49%)</title><rect x="11.1934%" y="341" width="0.4938%" height="15" fill="rgb(253,115,44)" fg:x="136" fg:w="6"/><text x="11.4434%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6049%" y="325" width="0.0823%" height="15" fill="rgb(251,139,18)" fg:x="141" fg:w="1"/><text x="11.8549%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (9 samples, 0.74%)</title><rect x="11.1934%" y="389" width="0.7407%" height="15" fill="rgb(218,22,32)" fg:x="136" fg:w="9"/><text x="11.4434%" y="399.50"></text></g><g><title>kernel::model::props::load_props (9 samples, 0.74%)</title><rect x="11.1934%" y="373" width="0.7407%" height="15" fill="rgb(243,53,5)" fg:x="136" fg:w="9"/><text x="11.4434%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (9 samples, 0.74%)</title><rect x="11.1934%" y="357" width="0.7407%" height="15" fill="rgb(227,56,16)" fg:x="136" fg:w="9"/><text x="11.4434%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="11.6872%" y="341" width="0.2469%" height="15" fill="rgb(245,53,0)" fg:x="142" fg:w="3"/><text x="11.9372%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="11.6872%" y="325" width="0.2469%" height="15" fill="rgb(216,170,35)" fg:x="142" fg:w="3"/><text x="11.9372%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.7695%" y="309" width="0.1646%" height="15" fill="rgb(211,200,8)" fg:x="143" fg:w="2"/><text x="12.0195%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.7695%" y="293" width="0.1646%" height="15" fill="rgb(228,204,44)" fg:x="143" fg:w="2"/><text x="12.0195%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="11.7695%" y="277" width="0.1646%" height="15" fill="rgb(214,121,17)" fg:x="143" fg:w="2"/><text x="12.0195%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.7695%" y="261" width="0.1646%" height="15" fill="rgb(233,64,38)" fg:x="143" fg:w="2"/><text x="12.0195%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.7695%" y="245" width="0.1646%" height="15" fill="rgb(253,54,19)" fg:x="143" fg:w="2"/><text x="12.0195%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.7695%" y="229" width="0.1646%" height="15" fill="rgb(253,94,18)" fg:x="143" fg:w="2"/><text x="12.0195%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.8519%" y="213" width="0.0823%" height="15" fill="rgb(227,57,52)" fg:x="144" fg:w="1"/><text x="12.1019%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.8519%" y="197" width="0.0823%" height="15" fill="rgb(230,228,50)" fg:x="144" fg:w="1"/><text x="12.1019%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="11.8519%" y="181" width="0.0823%" height="15" fill="rgb(217,205,27)" fg:x="144" fg:w="1"/><text x="12.1019%" y="191.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="11.8519%" y="165" width="0.0823%" height="15" fill="rgb(252,71,50)" fg:x="144" fg:w="1"/><text x="12.1019%" y="175.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="11.8519%" y="149" width="0.0823%" height="15" fill="rgb(209,86,4)" fg:x="144" fg:w="1"/><text x="12.1019%" y="159.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="11.9342%" y="389" width="0.0823%" height="15" fill="rgb(229,94,0)" fg:x="145" fg:w="1"/><text x="12.1842%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="11.9342%" y="373" width="0.0823%" height="15" fill="rgb(252,223,21)" fg:x="145" fg:w="1"/><text x="12.1842%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="11.9342%" y="357" width="0.0823%" height="15" fill="rgb(230,210,4)" fg:x="145" fg:w="1"/><text x="12.1842%" y="367.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="11.9342%" y="341" width="0.0823%" height="15" fill="rgb(240,149,38)" fg:x="145" fg:w="1"/><text x="12.1842%" y="351.50"></text></g><g><title>kernel::model::base::When::to_utc_time (1 samples, 0.08%)</title><rect x="11.9342%" y="325" width="0.0823%" height="15" fill="rgb(254,105,20)" fg:x="145" fg:w="1"/><text x="12.1842%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.0988%" y="341" width="0.0823%" height="15" fill="rgb(253,87,46)" fg:x="147" fg:w="1"/><text x="12.3488%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.0988%" y="325" width="0.0823%" height="15" fill="rgb(253,116,33)" fg:x="147" fg:w="1"/><text x="12.3488%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.0988%" y="309" width="0.0823%" height="15" fill="rgb(229,198,5)" fg:x="147" fg:w="1"/><text x="12.3488%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.0988%" y="293" width="0.0823%" height="15" fill="rgb(242,38,37)" fg:x="147" fg:w="1"/><text x="12.3488%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.0988%" y="277" width="0.0823%" height="15" fill="rgb(242,69,53)" fg:x="147" fg:w="1"/><text x="12.3488%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="12.0988%" y="261" width="0.0823%" height="15" fill="rgb(249,80,16)" fg:x="147" fg:w="1"/><text x="12.3488%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="12.0988%" y="245" width="0.0823%" height="15" fill="rgb(206,128,11)" fg:x="147" fg:w="1"/><text x="12.3488%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="12.0988%" y="229" width="0.0823%" height="15" fill="rgb(212,35,20)" fg:x="147" fg:w="1"/><text x="12.3488%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="12.0988%" y="213" width="0.0823%" height="15" fill="rgb(236,79,13)" fg:x="147" fg:w="1"/><text x="12.3488%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.0988%" y="197" width="0.0823%" height="15" fill="rgb(233,123,3)" fg:x="147" fg:w="1"/><text x="12.3488%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4280%" y="213" width="0.0823%" height="15" fill="rgb(214,93,52)" fg:x="151" fg:w="1"/><text x="12.6780%" y="223.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.25%)</title><rect x="12.3457%" y="245" width="0.2469%" height="15" fill="rgb(251,37,40)" fg:x="150" fg:w="3"/><text x="12.5957%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="12.4280%" y="229" width="0.1646%" height="15" fill="rgb(227,80,54)" fg:x="151" fg:w="2"/><text x="12.6780%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5103%" y="213" width="0.0823%" height="15" fill="rgb(254,48,11)" fg:x="152" fg:w="1"/><text x="12.7603%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5103%" y="197" width="0.0823%" height="15" fill="rgb(235,193,26)" fg:x="152" fg:w="1"/><text x="12.7603%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="12.5103%" y="181" width="0.0823%" height="15" fill="rgb(229,99,21)" fg:x="152" fg:w="1"/><text x="12.7603%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5103%" y="165" width="0.0823%" height="15" fill="rgb(211,140,41)" fg:x="152" fg:w="1"/><text x="12.7603%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="12.6749%" y="229" width="0.1646%" height="15" fill="rgb(240,227,30)" fg:x="154" fg:w="2"/><text x="12.9249%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.7572%" y="213" width="0.0823%" height="15" fill="rgb(215,224,45)" fg:x="155" fg:w="1"/><text x="13.0072%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.7572%" y="197" width="0.0823%" height="15" fill="rgb(206,123,31)" fg:x="155" fg:w="1"/><text x="13.0072%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.7572%" y="181" width="0.0823%" height="15" fill="rgb(210,138,16)" fg:x="155" fg:w="1"/><text x="13.0072%" y="191.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="12.8395%" y="213" width="0.0823%" height="15" fill="rgb(228,57,28)" fg:x="156" fg:w="1"/><text x="13.0895%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="12.8395%" y="197" width="0.0823%" height="15" fill="rgb(242,170,10)" fg:x="156" fg:w="1"/><text x="13.0895%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.8395%" y="181" width="0.0823%" height="15" fill="rgb(228,214,39)" fg:x="156" fg:w="1"/><text x="13.0895%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.8395%" y="165" width="0.0823%" height="15" fill="rgb(218,179,33)" fg:x="156" fg:w="1"/><text x="13.0895%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.66%)</title><rect x="12.3457%" y="309" width="0.6584%" height="15" fill="rgb(235,193,39)" fg:x="150" fg:w="8"/><text x="12.5957%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.66%)</title><rect x="12.3457%" y="293" width="0.6584%" height="15" fill="rgb(219,221,36)" fg:x="150" fg:w="8"/><text x="12.5957%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (8 samples, 0.66%)</title><rect x="12.3457%" y="277" width="0.6584%" height="15" fill="rgb(248,218,19)" fg:x="150" fg:w="8"/><text x="12.5957%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (8 samples, 0.66%)</title><rect x="12.3457%" y="261" width="0.6584%" height="15" fill="rgb(205,50,9)" fg:x="150" fg:w="8"/><text x="12.5957%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (5 samples, 0.41%)</title><rect x="12.5926%" y="245" width="0.4115%" height="15" fill="rgb(238,81,28)" fg:x="153" fg:w="5"/><text x="12.8426%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="12.8395%" y="229" width="0.1646%" height="15" fill="rgb(235,110,19)" fg:x="156" fg:w="2"/><text x="13.0895%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="12.9218%" y="213" width="0.0823%" height="15" fill="rgb(214,7,14)" fg:x="157" fg:w="1"/><text x="13.1718%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="13.0041%" y="277" width="0.0823%" height="15" fill="rgb(211,77,3)" fg:x="158" fg:w="1"/><text x="13.2541%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0041%" y="261" width="0.0823%" height="15" fill="rgb(229,5,9)" fg:x="158" fg:w="1"/><text x="13.2541%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="13.0041%" y="293" width="0.1646%" height="15" fill="rgb(225,90,11)" fg:x="158" fg:w="2"/><text x="13.2541%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.0864%" y="277" width="0.0823%" height="15" fill="rgb(242,56,8)" fg:x="159" fg:w="1"/><text x="13.3364%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.0864%" y="261" width="0.0823%" height="15" fill="rgb(249,212,39)" fg:x="159" fg:w="1"/><text x="13.3364%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="13.2510%" y="261" width="0.0823%" height="15" fill="rgb(236,90,9)" fg:x="161" fg:w="1"/><text x="13.5010%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.25%)</title><rect x="13.3333%" y="261" width="0.2469%" height="15" fill="rgb(206,88,35)" fg:x="162" fg:w="3"/><text x="13.5833%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.4979%" y="245" width="0.0823%" height="15" fill="rgb(205,126,30)" fg:x="164" fg:w="1"/><text x="13.7479%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="13.4979%" y="229" width="0.0823%" height="15" fill="rgb(230,176,12)" fg:x="164" fg:w="1"/><text x="13.7479%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="13.5802%" y="261" width="0.0823%" height="15" fill="rgb(243,19,9)" fg:x="165" fg:w="1"/><text x="13.8302%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.5802%" y="245" width="0.0823%" height="15" fill="rgb(245,171,17)" fg:x="165" fg:w="1"/><text x="13.8302%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="13.6626%" y="261" width="0.0823%" height="15" fill="rgb(227,52,21)" fg:x="166" fg:w="1"/><text x="13.9126%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6626%" y="245" width="0.0823%" height="15" fill="rgb(238,69,14)" fg:x="166" fg:w="1"/><text x="13.9126%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8272%" y="245" width="0.0823%" height="15" fill="rgb(241,156,39)" fg:x="168" fg:w="1"/><text x="14.0772%" y="255.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="13.9095%" y="245" width="0.0823%" height="15" fill="rgb(212,227,28)" fg:x="169" fg:w="1"/><text x="14.1595%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (35 samples, 2.88%)</title><rect x="14.0741%" y="229" width="2.8807%" height="15" fill="rgb(209,118,27)" fg:x="171" fg:w="35"/><text x="14.3241%" y="239.50">co..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.7901%" y="213" width="0.1646%" height="15" fill="rgb(226,102,5)" fg:x="204" fg:w="2"/><text x="17.0401%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (38 samples, 3.13%)</title><rect x="13.9918%" y="245" width="3.1276%" height="15" fill="rgb(223,34,3)" fg:x="170" fg:w="38"/><text x="14.2418%" y="255.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (2 samples, 0.16%)</title><rect x="16.9547%" y="229" width="0.1646%" height="15" fill="rgb(221,81,38)" fg:x="206" fg:w="2"/><text x="17.2047%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0370%" y="213" width="0.0823%" height="15" fill="rgb(236,219,28)" fg:x="207" fg:w="1"/><text x="17.2870%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.58%)</title><rect x="17.1193%" y="245" width="0.5761%" height="15" fill="rgb(213,200,14)" fg:x="208" fg:w="7"/><text x="17.3693%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="17.2016%" y="229" width="0.4938%" height="15" fill="rgb(240,33,19)" fg:x="209" fg:w="6"/><text x="17.4516%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="17.5309%" y="213" width="0.1646%" height="15" fill="rgb(233,113,27)" fg:x="213" fg:w="2"/><text x="17.7809%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6132%" y="197" width="0.0823%" height="15" fill="rgb(220,221,18)" fg:x="214" fg:w="1"/><text x="17.8632%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="18.1893%" y="181" width="0.0823%" height="15" fill="rgb(238,92,8)" fg:x="221" fg:w="1"/><text x="18.4393%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="18.2716%" y="181" width="0.1646%" height="15" fill="rgb(222,164,16)" fg:x="222" fg:w="2"/><text x="18.5216%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="18.4362%" y="181" width="0.0823%" height="15" fill="rgb(241,119,3)" fg:x="224" fg:w="1"/><text x="18.6862%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.4362%" y="165" width="0.0823%" height="15" fill="rgb(241,44,8)" fg:x="224" fg:w="1"/><text x="18.6862%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.4362%" y="149" width="0.0823%" height="15" fill="rgb(230,36,40)" fg:x="224" fg:w="1"/><text x="18.6862%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.4362%" y="133" width="0.0823%" height="15" fill="rgb(243,16,36)" fg:x="224" fg:w="1"/><text x="18.6862%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="18.5185%" y="149" width="0.1646%" height="15" fill="rgb(231,4,26)" fg:x="225" fg:w="2"/><text x="18.7685%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="18.5185%" y="133" width="0.1646%" height="15" fill="rgb(240,9,31)" fg:x="225" fg:w="2"/><text x="18.7685%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="18.5185%" y="117" width="0.1646%" height="15" fill="rgb(207,173,15)" fg:x="225" fg:w="2"/><text x="18.7685%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.33%)</title><rect x="18.5185%" y="181" width="0.3292%" height="15" fill="rgb(224,192,53)" fg:x="225" fg:w="4"/><text x="18.7685%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="18.5185%" y="165" width="0.3292%" height="15" fill="rgb(223,67,28)" fg:x="225" fg:w="4"/><text x="18.7685%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="18.6831%" y="149" width="0.1646%" height="15" fill="rgb(211,20,47)" fg:x="227" fg:w="2"/><text x="18.9331%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.7654%" y="133" width="0.0823%" height="15" fill="rgb(240,228,2)" fg:x="228" fg:w="1"/><text x="19.0154%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.8477%" y="149" width="0.0823%" height="15" fill="rgb(248,151,12)" fg:x="229" fg:w="1"/><text x="19.0977%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.8477%" y="133" width="0.0823%" height="15" fill="rgb(244,8,39)" fg:x="229" fg:w="1"/><text x="19.0977%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.8477%" y="117" width="0.0823%" height="15" fill="rgb(222,26,8)" fg:x="229" fg:w="1"/><text x="19.0977%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="18.8477%" y="181" width="0.1646%" height="15" fill="rgb(213,106,44)" fg:x="229" fg:w="2"/><text x="19.0977%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="18.8477%" y="165" width="0.1646%" height="15" fill="rgb(214,129,20)" fg:x="229" fg:w="2"/><text x="19.0977%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="18.9300%" y="149" width="0.0823%" height="15" fill="rgb(212,32,13)" fg:x="230" fg:w="1"/><text x="19.1800%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (150 samples, 12.35%)</title><rect x="19.0123%" y="181" width="12.3457%" height="15" fill="rgb(208,168,33)" fg:x="231" fg:w="150"/><text x="19.2623%" y="191.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (150 samples, 12.35%)</title><rect x="19.0123%" y="165" width="12.3457%" height="15" fill="rgb(231,207,8)" fg:x="231" fg:w="150"/><text x="19.2623%" y="175.50">regex_automata::nf..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (150 samples, 12.35%)</title><rect x="19.0123%" y="149" width="12.3457%" height="15" fill="rgb(235,219,23)" fg:x="231" fg:w="150"/><text x="19.2623%" y="159.50">alloc::vec::Vec&lt;T,..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.58%)</title><rect x="31.3580%" y="181" width="0.5761%" height="15" fill="rgb(226,216,26)" fg:x="381" fg:w="7"/><text x="31.6080%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="31.6872%" y="165" width="0.2469%" height="15" fill="rgb(239,137,16)" fg:x="385" fg:w="3"/><text x="31.9372%" y="175.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (2 samples, 0.16%)</title><rect x="31.9342%" y="181" width="0.1646%" height="15" fill="rgb(207,12,36)" fg:x="388" fg:w="2"/><text x="32.1842%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 14.40%)</title><rect x="17.7778%" y="229" width="14.4033%" height="15" fill="rgb(210,214,24)" fg:x="216" fg:w="175"/><text x="18.0278%" y="239.50">&lt;core::iter::adapters:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (175 samples, 14.40%)</title><rect x="17.7778%" y="213" width="14.4033%" height="15" fill="rgb(206,56,30)" fg:x="216" fg:w="175"/><text x="18.0278%" y="223.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (175 samples, 14.40%)</title><rect x="17.7778%" y="197" width="14.4033%" height="15" fill="rgb(228,143,26)" fg:x="216" fg:w="175"/><text x="18.0278%" y="207.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="32.0988%" y="181" width="0.0823%" height="15" fill="rgb(216,218,46)" fg:x="390" fg:w="1"/><text x="32.3488%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.2634%" y="213" width="0.0823%" height="15" fill="rgb(206,6,19)" fg:x="392" fg:w="1"/><text x="32.5134%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="32.3457%" y="213" width="0.3292%" height="15" fill="rgb(239,177,51)" fg:x="393" fg:w="4"/><text x="32.5957%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="32.5103%" y="197" width="0.1646%" height="15" fill="rgb(216,55,25)" fg:x="395" fg:w="2"/><text x="32.7603%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.5103%" y="181" width="0.1646%" height="15" fill="rgb(231,163,29)" fg:x="395" fg:w="2"/><text x="32.7603%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.5103%" y="165" width="0.1646%" height="15" fill="rgb(232,149,50)" fg:x="395" fg:w="2"/><text x="32.7603%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.49%)</title><rect x="32.6749%" y="213" width="0.4938%" height="15" fill="rgb(223,142,48)" fg:x="397" fg:w="6"/><text x="32.9249%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.0864%" y="197" width="0.0823%" height="15" fill="rgb(245,83,23)" fg:x="402" fg:w="1"/><text x="33.3364%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.07%)</title><rect x="32.1811%" y="229" width="1.0700%" height="15" fill="rgb(224,63,2)" fg:x="391" fg:w="13"/><text x="32.4311%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="33.1687%" y="213" width="0.0823%" height="15" fill="rgb(218,65,53)" fg:x="403" fg:w="1"/><text x="33.4187%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="33.1687%" y="197" width="0.0823%" height="15" fill="rgb(221,84,29)" fg:x="403" fg:w="1"/><text x="33.4187%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="33.2510%" y="213" width="0.0823%" height="15" fill="rgb(234,0,32)" fg:x="404" fg:w="1"/><text x="33.5010%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="33.2510%" y="229" width="0.1646%" height="15" fill="rgb(206,20,16)" fg:x="404" fg:w="2"/><text x="33.5010%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="33.3333%" y="213" width="0.0823%" height="15" fill="rgb(244,172,18)" fg:x="405" fg:w="1"/><text x="33.5833%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="33.3333%" y="197" width="0.0823%" height="15" fill="rgb(254,133,1)" fg:x="405" fg:w="1"/><text x="33.5833%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="33.4156%" y="213" width="0.0823%" height="15" fill="rgb(222,206,41)" fg:x="406" fg:w="1"/><text x="33.6656%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="33.4156%" y="197" width="0.0823%" height="15" fill="rgb(212,3,42)" fg:x="406" fg:w="1"/><text x="33.6656%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (241 samples, 19.84%)</title><rect x="13.7449%" y="261" width="19.8354%" height="15" fill="rgb(241,11,4)" fg:x="167" fg:w="241"/><text x="13.9949%" y="271.50">regex_automata::meta::strategy:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (193 samples, 15.88%)</title><rect x="17.6955%" y="245" width="15.8848%" height="15" fill="rgb(205,19,26)" fg:x="215" fg:w="193"/><text x="17.9455%" y="255.50">regex_automata::nfa::tho..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="33.4156%" y="229" width="0.1646%" height="15" fill="rgb(210,179,32)" fg:x="406" fg:w="2"/><text x="33.6656%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="33.4979%" y="213" width="0.0823%" height="15" fill="rgb(227,116,49)" fg:x="407" fg:w="1"/><text x="33.7479%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="33.7449%" y="213" width="0.1646%" height="15" fill="rgb(211,146,6)" fg:x="410" fg:w="2"/><text x="33.9949%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="33.9095%" y="213" width="0.0823%" height="15" fill="rgb(219,44,39)" fg:x="412" fg:w="1"/><text x="34.1595%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="33.9095%" y="197" width="0.0823%" height="15" fill="rgb(234,128,11)" fg:x="412" fg:w="1"/><text x="34.1595%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="33.9095%" y="181" width="0.0823%" height="15" fill="rgb(220,183,53)" fg:x="412" fg:w="1"/><text x="34.1595%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="33.9095%" y="165" width="0.0823%" height="15" fill="rgb(213,219,32)" fg:x="412" fg:w="1"/><text x="34.1595%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="33.9918%" y="213" width="0.0823%" height="15" fill="rgb(232,156,16)" fg:x="413" fg:w="1"/><text x="34.2418%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="33.7449%" y="229" width="0.4938%" height="15" fill="rgb(246,135,34)" fg:x="410" fg:w="6"/><text x="33.9949%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="34.0741%" y="213" width="0.1646%" height="15" fill="rgb(241,99,0)" fg:x="414" fg:w="2"/><text x="34.3241%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="34.0741%" y="197" width="0.1646%" height="15" fill="rgb(222,103,45)" fg:x="414" fg:w="2"/><text x="34.3241%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.0741%" y="181" width="0.1646%" height="15" fill="rgb(212,57,4)" fg:x="414" fg:w="2"/><text x="34.3241%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="34.0741%" y="165" width="0.1646%" height="15" fill="rgb(215,68,47)" fg:x="414" fg:w="2"/><text x="34.3241%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (3 samples, 0.25%)</title><rect x="34.2387%" y="229" width="0.2469%" height="15" fill="rgb(230,84,2)" fg:x="416" fg:w="3"/><text x="34.4887%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.3210%" y="213" width="0.1646%" height="15" fill="rgb(220,102,14)" fg:x="417" fg:w="2"/><text x="34.5710%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.99%)</title><rect x="33.5802%" y="261" width="0.9877%" height="15" fill="rgb(240,10,32)" fg:x="408" fg:w="12"/><text x="33.8302%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.91%)</title><rect x="33.6626%" y="245" width="0.9053%" height="15" fill="rgb(215,47,27)" fg:x="409" fg:w="11"/><text x="33.9126%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="34.4856%" y="229" width="0.0823%" height="15" fill="rgb(233,188,43)" fg:x="419" fg:w="1"/><text x="34.7356%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="34.8148%" y="213" width="0.0823%" height="15" fill="rgb(253,190,1)" fg:x="423" fg:w="1"/><text x="35.0648%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="34.7325%" y="229" width="0.2469%" height="15" fill="rgb(206,114,52)" fg:x="422" fg:w="3"/><text x="34.9825%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="34.8971%" y="213" width="0.0823%" height="15" fill="rgb(233,120,37)" fg:x="424" fg:w="1"/><text x="35.1471%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="34.8971%" y="197" width="0.0823%" height="15" fill="rgb(214,52,39)" fg:x="424" fg:w="1"/><text x="35.1471%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="34.8971%" y="181" width="0.0823%" height="15" fill="rgb(223,80,29)" fg:x="424" fg:w="1"/><text x="35.1471%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="34.9794%" y="229" width="0.0823%" height="15" fill="rgb(230,101,40)" fg:x="425" fg:w="1"/><text x="35.2294%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (269 samples, 22.14%)</title><rect x="13.0041%" y="309" width="22.1399%" height="15" fill="rgb(219,211,8)" fg:x="158" fg:w="269"/><text x="13.2541%" y="319.50">&lt;regex::regex::string::Regex as cor..</text></g><g><title>regex::builders::Builder::build_one_string (267 samples, 21.98%)</title><rect x="13.1687%" y="293" width="21.9753%" height="15" fill="rgb(252,126,28)" fg:x="160" fg:w="267"/><text x="13.4187%" y="303.50">regex::builders::Builder::build_one..</text></g><g><title>regex_automata::meta::regex::Builder::build (267 samples, 21.98%)</title><rect x="13.1687%" y="277" width="21.9753%" height="15" fill="rgb(215,56,38)" fg:x="160" fg:w="267"/><text x="13.4187%" y="287.50">regex_automata::meta::regex::Builde..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.58%)</title><rect x="34.5679%" y="261" width="0.5761%" height="15" fill="rgb(249,55,44)" fg:x="420" fg:w="7"/><text x="34.8179%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.58%)</title><rect x="34.5679%" y="245" width="0.5761%" height="15" fill="rgb(220,221,32)" fg:x="420" fg:w="7"/><text x="34.8179%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="35.0617%" y="229" width="0.0823%" height="15" fill="rgb(212,216,41)" fg:x="426" fg:w="1"/><text x="35.3117%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="35.1440%" y="309" width="0.0823%" height="15" fill="rgb(228,213,43)" fg:x="427" fg:w="1"/><text x="35.3940%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="35.1440%" y="293" width="0.0823%" height="15" fill="rgb(211,31,26)" fg:x="427" fg:w="1"/><text x="35.3940%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.1440%" y="277" width="0.0823%" height="15" fill="rgb(229,202,19)" fg:x="427" fg:w="1"/><text x="35.3940%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.8025%" y="229" width="0.0823%" height="15" fill="rgb(229,105,46)" fg:x="435" fg:w="1"/><text x="36.0525%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.8025%" y="213" width="0.0823%" height="15" fill="rgb(235,108,1)" fg:x="435" fg:w="1"/><text x="36.0525%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.8025%" y="197" width="0.0823%" height="15" fill="rgb(245,111,35)" fg:x="435" fg:w="1"/><text x="36.0525%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.8848%" y="229" width="0.0823%" height="15" fill="rgb(219,185,31)" fg:x="436" fg:w="1"/><text x="36.1348%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.8848%" y="213" width="0.0823%" height="15" fill="rgb(214,4,43)" fg:x="436" fg:w="1"/><text x="36.1348%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="35.8848%" y="197" width="0.0823%" height="15" fill="rgb(235,227,40)" fg:x="436" fg:w="1"/><text x="36.1348%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.8848%" y="181" width="0.0823%" height="15" fill="rgb(230,88,30)" fg:x="436" fg:w="1"/><text x="36.1348%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.82%)</title><rect x="35.3086%" y="245" width="0.8230%" height="15" fill="rgb(216,217,1)" fg:x="429" fg:w="10"/><text x="35.5586%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="35.9671%" y="229" width="0.1646%" height="15" fill="rgb(248,139,50)" fg:x="437" fg:w="2"/><text x="36.2171%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.91%)</title><rect x="35.3086%" y="261" width="0.9053%" height="15" fill="rgb(233,1,21)" fg:x="429" fg:w="11"/><text x="35.5586%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="36.1317%" y="245" width="0.0823%" height="15" fill="rgb(215,183,12)" fg:x="439" fg:w="1"/><text x="36.3817%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (293 samples, 24.12%)</title><rect x="12.1811%" y="325" width="24.1152%" height="15" fill="rgb(229,104,42)" fg:x="148" fg:w="293"/><text x="12.4311%" y="335.50">indefinite::helper::Helper::get_first_..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.07%)</title><rect x="35.2263%" y="309" width="1.0700%" height="15" fill="rgb(243,34,48)" fg:x="428" fg:w="13"/><text x="35.4763%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.07%)</title><rect x="35.2263%" y="293" width="1.0700%" height="15" fill="rgb(239,11,44)" fg:x="428" fg:w="13"/><text x="35.4763%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.07%)</title><rect x="35.2263%" y="277" width="1.0700%" height="15" fill="rgb(231,98,35)" fg:x="428" fg:w="13"/><text x="35.4763%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="36.2140%" y="261" width="0.0823%" height="15" fill="rgb(233,28,25)" fg:x="440" fg:w="1"/><text x="36.4640%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.3786%" y="261" width="0.0823%" height="15" fill="rgb(234,123,11)" fg:x="442" fg:w="1"/><text x="36.6286%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.3786%" y="245" width="0.0823%" height="15" fill="rgb(220,69,3)" fg:x="442" fg:w="1"/><text x="36.6286%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.3786%" y="229" width="0.0823%" height="15" fill="rgb(214,64,36)" fg:x="442" fg:w="1"/><text x="36.6286%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.33%)</title><rect x="36.4609%" y="261" width="0.3292%" height="15" fill="rgb(211,138,32)" fg:x="443" fg:w="4"/><text x="36.7109%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="36.4609%" y="245" width="0.3292%" height="15" fill="rgb(213,118,47)" fg:x="443" fg:w="4"/><text x="36.7109%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="36.6255%" y="229" width="0.1646%" height="15" fill="rgb(243,124,49)" fg:x="445" fg:w="2"/><text x="36.8755%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="36.6255%" y="213" width="0.1646%" height="15" fill="rgb(221,30,28)" fg:x="445" fg:w="2"/><text x="36.8755%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.7078%" y="197" width="0.0823%" height="15" fill="rgb(246,37,13)" fg:x="446" fg:w="1"/><text x="36.9578%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (2 samples, 0.16%)</title><rect x="36.7901%" y="261" width="0.1646%" height="15" fill="rgb(249,66,14)" fg:x="447" fg:w="2"/><text x="37.0401%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.7901%" y="245" width="0.1646%" height="15" fill="rgb(213,166,5)" fg:x="447" fg:w="2"/><text x="37.0401%" y="255.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="37.3663%" y="245" width="0.0823%" height="15" fill="rgb(221,66,24)" fg:x="454" fg:w="1"/><text x="37.6163%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="37.6132%" y="229" width="0.1646%" height="15" fill="rgb(210,132,17)" fg:x="457" fg:w="2"/><text x="37.8632%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (38 samples, 3.13%)</title><rect x="37.4486%" y="245" width="3.1276%" height="15" fill="rgb(243,202,5)" fg:x="455" fg:w="38"/><text x="37.6986%" y="255.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (34 samples, 2.80%)</title><rect x="37.7778%" y="229" width="2.7984%" height="15" fill="rgb(233,70,48)" fg:x="459" fg:w="34"/><text x="38.0278%" y="239.50">co..</text></g><g><title>__libc_free (6 samples, 0.49%)</title><rect x="40.0823%" y="213" width="0.4938%" height="15" fill="rgb(238,41,26)" fg:x="487" fg:w="6"/><text x="40.3323%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="40.7407%" y="229" width="0.4115%" height="15" fill="rgb(241,19,31)" fg:x="495" fg:w="5"/><text x="40.9907%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="41.0700%" y="213" width="0.0823%" height="15" fill="rgb(214,76,10)" fg:x="499" fg:w="1"/><text x="41.3200%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.74%)</title><rect x="40.5761%" y="245" width="0.7407%" height="15" fill="rgb(254,202,22)" fg:x="493" fg:w="9"/><text x="40.8261%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="41.1523%" y="229" width="0.1646%" height="15" fill="rgb(214,72,24)" fg:x="500" fg:w="2"/><text x="41.4023%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="41.2346%" y="213" width="0.0823%" height="15" fill="rgb(221,92,46)" fg:x="501" fg:w="1"/><text x="41.4846%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.2346%" y="197" width="0.0823%" height="15" fill="rgb(246,13,50)" fg:x="501" fg:w="1"/><text x="41.4846%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="41.4815%" y="213" width="0.1646%" height="15" fill="rgb(240,165,38)" fg:x="504" fg:w="2"/><text x="41.7315%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="41.4815%" y="197" width="0.1646%" height="15" fill="rgb(241,24,51)" fg:x="504" fg:w="2"/><text x="41.7315%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.4815%" y="181" width="0.1646%" height="15" fill="rgb(227,51,44)" fg:x="504" fg:w="2"/><text x="41.7315%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="41.4815%" y="165" width="0.1646%" height="15" fill="rgb(231,121,3)" fg:x="504" fg:w="2"/><text x="41.7315%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.82%)</title><rect x="41.6461%" y="213" width="0.8230%" height="15" fill="rgb(245,3,41)" fg:x="506" fg:w="10"/><text x="41.8961%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.49%)</title><rect x="41.9753%" y="197" width="0.4938%" height="15" fill="rgb(214,13,26)" fg:x="510" fg:w="6"/><text x="42.2253%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="42.2222%" y="181" width="0.2469%" height="15" fill="rgb(252,75,11)" fg:x="513" fg:w="3"/><text x="42.4722%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="42.2222%" y="165" width="0.2469%" height="15" fill="rgb(218,226,17)" fg:x="513" fg:w="3"/><text x="42.4722%" y="175.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="42.2222%" y="149" width="0.2469%" height="15" fill="rgb(248,89,38)" fg:x="513" fg:w="3"/><text x="42.4722%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (25 samples, 2.06%)</title><rect x="41.3169%" y="245" width="2.0576%" height="15" fill="rgb(237,73,46)" fg:x="502" fg:w="25"/><text x="41.5669%" y="255.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (25 samples, 2.06%)</title><rect x="41.3169%" y="229" width="2.0576%" height="15" fill="rgb(242,78,33)" fg:x="502" fg:w="25"/><text x="41.5669%" y="239.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (11 samples, 0.91%)</title><rect x="42.4691%" y="213" width="0.9053%" height="15" fill="rgb(235,60,3)" fg:x="516" fg:w="11"/><text x="42.7191%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (11 samples, 0.91%)</title><rect x="42.4691%" y="197" width="0.9053%" height="15" fill="rgb(216,172,19)" fg:x="516" fg:w="11"/><text x="42.7191%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (11 samples, 0.91%)</title><rect x="42.4691%" y="181" width="0.9053%" height="15" fill="rgb(227,6,42)" fg:x="516" fg:w="11"/><text x="42.7191%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.7037%" y="197" width="0.0823%" height="15" fill="rgb(223,207,42)" fg:x="531" fg:w="1"/><text x="43.9537%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="43.7860%" y="197" width="0.0823%" height="15" fill="rgb(246,138,30)" fg:x="532" fg:w="1"/><text x="44.0360%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.7860%" y="181" width="0.0823%" height="15" fill="rgb(251,199,47)" fg:x="532" fg:w="1"/><text x="44.0360%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="43.8683%" y="181" width="0.0823%" height="15" fill="rgb(228,218,44)" fg:x="533" fg:w="1"/><text x="44.1183%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="43.9506%" y="149" width="0.0823%" height="15" fill="rgb(220,68,6)" fg:x="534" fg:w="1"/><text x="44.2006%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="45.1029%" y="133" width="0.4938%" height="15" fill="rgb(240,60,26)" fg:x="548" fg:w="6"/><text x="45.3529%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.5967%" y="133" width="0.0823%" height="15" fill="rgb(211,200,19)" fg:x="554" fg:w="1"/><text x="45.8467%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.49%)</title><rect x="45.6790%" y="133" width="0.4938%" height="15" fill="rgb(242,145,30)" fg:x="555" fg:w="6"/><text x="45.9290%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="45.9259%" y="117" width="0.2469%" height="15" fill="rgb(225,64,13)" fg:x="558" fg:w="3"/><text x="46.1759%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="45.9259%" y="101" width="0.2469%" height="15" fill="rgb(218,103,35)" fg:x="558" fg:w="3"/><text x="46.1759%" y="111.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="45.9259%" y="85" width="0.2469%" height="15" fill="rgb(216,93,46)" fg:x="558" fg:w="3"/><text x="46.1759%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (5 samples, 0.41%)</title><rect x="46.1728%" y="133" width="0.4115%" height="15" fill="rgb(225,159,27)" fg:x="561" fg:w="5"/><text x="46.4228%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.9959%" y="101" width="0.0823%" height="15" fill="rgb(225,204,11)" fg:x="571" fg:w="1"/><text x="47.2459%" y="111.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="47.2428%" y="69" width="0.3292%" height="15" fill="rgb(205,56,4)" fg:x="574" fg:w="4"/><text x="47.4928%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.74%)</title><rect x="47.0782%" y="101" width="0.7407%" height="15" fill="rgb(206,6,35)" fg:x="572" fg:w="9"/><text x="47.3282%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.58%)</title><rect x="47.2428%" y="85" width="0.5761%" height="15" fill="rgb(247,73,52)" fg:x="574" fg:w="7"/><text x="47.4928%" y="95.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="47.5720%" y="69" width="0.2469%" height="15" fill="rgb(246,97,4)" fg:x="578" fg:w="3"/><text x="47.8220%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.1481%" y="85" width="0.0823%" height="15" fill="rgb(212,37,15)" fg:x="585" fg:w="1"/><text x="48.3981%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (22 samples, 1.81%)</title><rect x="46.5844%" y="133" width="1.8107%" height="15" fill="rgb(208,130,40)" fg:x="566" fg:w="22"/><text x="46.8344%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.56%)</title><rect x="46.8313%" y="117" width="1.5638%" height="15" fill="rgb(236,55,29)" fg:x="569" fg:w="19"/><text x="47.0813%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.58%)</title><rect x="47.8189%" y="101" width="0.5761%" height="15" fill="rgb(209,156,45)" fg:x="581" fg:w="7"/><text x="48.0689%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="48.2305%" y="85" width="0.1646%" height="15" fill="rgb(249,107,4)" fg:x="586" fg:w="2"/><text x="48.4805%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.3128%" y="69" width="0.0823%" height="15" fill="rgb(227,7,13)" fg:x="587" fg:w="1"/><text x="48.5628%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.3128%" y="53" width="0.0823%" height="15" fill="rgb(250,129,14)" fg:x="587" fg:w="1"/><text x="48.5628%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.3128%" y="37" width="0.0823%" height="15" fill="rgb(229,92,13)" fg:x="587" fg:w="1"/><text x="48.5628%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.3951%" y="117" width="0.0823%" height="15" fill="rgb(245,98,39)" fg:x="588" fg:w="1"/><text x="48.6451%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.3951%" y="101" width="0.0823%" height="15" fill="rgb(234,135,48)" fg:x="588" fg:w="1"/><text x="48.6451%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="48.4774%" y="117" width="0.0823%" height="15" fill="rgb(230,98,28)" fg:x="589" fg:w="1"/><text x="48.7274%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.4774%" y="101" width="0.0823%" height="15" fill="rgb(223,121,0)" fg:x="589" fg:w="1"/><text x="48.7274%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.4774%" y="85" width="0.0823%" height="15" fill="rgb(234,173,33)" fg:x="589" fg:w="1"/><text x="48.7274%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.4774%" y="69" width="0.0823%" height="15" fill="rgb(245,47,8)" fg:x="589" fg:w="1"/><text x="48.7274%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.5597%" y="101" width="0.0823%" height="15" fill="rgb(205,17,20)" fg:x="590" fg:w="1"/><text x="48.8097%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (131 samples, 10.78%)</title><rect x="48.3951%" y="133" width="10.7819%" height="15" fill="rgb(232,151,16)" fg:x="588" fg:w="131"/><text x="48.6451%" y="143.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (129 samples, 10.62%)</title><rect x="48.5597%" y="117" width="10.6173%" height="15" fill="rgb(208,30,32)" fg:x="590" fg:w="129"/><text x="48.8097%" y="127.50">regex_automata:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (128 samples, 10.53%)</title><rect x="48.6420%" y="101" width="10.5350%" height="15" fill="rgb(254,26,3)" fg:x="591" fg:w="128"/><text x="48.8920%" y="111.50">alloc::vec::Vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="59.1770%" y="133" width="0.1646%" height="15" fill="rgb(240,177,30)" fg:x="719" fg:w="2"/><text x="59.4270%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2593%" y="117" width="0.0823%" height="15" fill="rgb(248,76,44)" fg:x="720" fg:w="1"/><text x="59.5093%" y="127.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="59.3416%" y="133" width="0.0823%" height="15" fill="rgb(241,186,54)" fg:x="721" fg:w="1"/><text x="59.5916%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="59.4239%" y="133" width="0.0823%" height="15" fill="rgb(249,171,29)" fg:x="722" fg:w="1"/><text x="59.6739%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (197 samples, 16.21%)</title><rect x="43.5391%" y="229" width="16.2140%" height="15" fill="rgb(237,151,44)" fg:x="529" fg:w="197"/><text x="43.7891%" y="239.50">&lt;core::iter::adapters::ma..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (196 samples, 16.13%)</title><rect x="43.6214%" y="213" width="16.1317%" height="15" fill="rgb(228,174,30)" fg:x="530" fg:w="196"/><text x="43.8714%" y="223.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (193 samples, 15.88%)</title><rect x="43.8683%" y="197" width="15.8848%" height="15" fill="rgb(252,14,37)" fg:x="533" fg:w="193"/><text x="44.1183%" y="207.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (192 samples, 15.80%)</title><rect x="43.9506%" y="181" width="15.8025%" height="15" fill="rgb(207,111,40)" fg:x="534" fg:w="192"/><text x="44.2006%" y="191.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (192 samples, 15.80%)</title><rect x="43.9506%" y="165" width="15.8025%" height="15" fill="rgb(248,171,54)" fg:x="534" fg:w="192"/><text x="44.2006%" y="175.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (191 samples, 15.72%)</title><rect x="44.0329%" y="149" width="15.7202%" height="15" fill="rgb(211,127,2)" fg:x="535" fg:w="191"/><text x="44.2829%" y="159.50">regex_automata::nfa::tho..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.25%)</title><rect x="59.5062%" y="133" width="0.2469%" height="15" fill="rgb(236,87,47)" fg:x="723" fg:w="3"/><text x="59.7562%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="59.5062%" y="117" width="0.2469%" height="15" fill="rgb(223,190,45)" fg:x="723" fg:w="3"/><text x="59.7562%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="59.5062%" y="101" width="0.2469%" height="15" fill="rgb(215,5,16)" fg:x="723" fg:w="3"/><text x="59.7562%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="59.5885%" y="85" width="0.1646%" height="15" fill="rgb(252,82,33)" fg:x="724" fg:w="2"/><text x="59.8385%" y="95.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="59.8354%" y="213" width="0.3292%" height="15" fill="rgb(247,213,44)" fg:x="727" fg:w="4"/><text x="60.0854%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.1646%" y="213" width="0.0823%" height="15" fill="rgb(205,196,44)" fg:x="731" fg:w="1"/><text x="60.4146%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1646%" y="197" width="0.0823%" height="15" fill="rgb(237,96,54)" fg:x="731" fg:w="1"/><text x="60.4146%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="60.8230%" y="197" width="0.4938%" height="15" fill="rgb(230,113,34)" fg:x="739" fg:w="6"/><text x="61.0730%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="60.8230%" y="181" width="0.4938%" height="15" fill="rgb(221,224,12)" fg:x="739" fg:w="6"/><text x="61.0730%" y="191.50"></text></g><g><title>realloc (6 samples, 0.49%)</title><rect x="60.8230%" y="165" width="0.4938%" height="15" fill="rgb(219,112,44)" fg:x="739" fg:w="6"/><text x="61.0730%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (15 samples, 1.23%)</title><rect x="60.2469%" y="213" width="1.2346%" height="15" fill="rgb(210,31,13)" fg:x="732" fg:w="15"/><text x="60.4969%" y="223.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (2 samples, 0.16%)</title><rect x="61.3169%" y="197" width="0.1646%" height="15" fill="rgb(230,25,16)" fg:x="745" fg:w="2"/><text x="61.5669%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.66%)</title><rect x="61.4815%" y="213" width="0.6584%" height="15" fill="rgb(246,108,53)" fg:x="747" fg:w="8"/><text x="61.7315%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="62.1399%" y="213" width="0.1646%" height="15" fill="rgb(241,172,50)" fg:x="755" fg:w="2"/><text x="62.3899%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (231 samples, 19.01%)</title><rect x="43.3745%" y="245" width="19.0123%" height="15" fill="rgb(235,141,10)" fg:x="527" fg:w="231"/><text x="43.6245%" y="255.50">regex_automata::nfa::thompson:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (32 samples, 2.63%)</title><rect x="59.7531%" y="229" width="2.6337%" height="15" fill="rgb(220,174,43)" fg:x="726" fg:w="32"/><text x="60.0031%" y="239.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="62.3045%" y="213" width="0.0823%" height="15" fill="rgb(215,181,40)" fg:x="757" fg:w="1"/><text x="62.5545%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3045%" y="197" width="0.0823%" height="15" fill="rgb(230,97,2)" fg:x="757" fg:w="1"/><text x="62.5545%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (310 samples, 25.51%)</title><rect x="36.9547%" y="261" width="25.5144%" height="15" fill="rgb(211,25,27)" fg:x="449" fg:w="310"/><text x="37.2047%" y="271.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="62.3868%" y="245" width="0.0823%" height="15" fill="rgb(230,87,26)" fg:x="758" fg:w="1"/><text x="62.6368%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.5514%" y="229" width="0.0823%" height="15" fill="rgb(227,160,17)" fg:x="760" fg:w="1"/><text x="62.8014%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.5514%" y="213" width="0.0823%" height="15" fill="rgb(244,85,34)" fg:x="760" fg:w="1"/><text x="62.8014%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5514%" y="197" width="0.0823%" height="15" fill="rgb(207,70,0)" fg:x="760" fg:w="1"/><text x="62.8014%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="62.6337%" y="229" width="0.0823%" height="15" fill="rgb(223,129,7)" fg:x="761" fg:w="1"/><text x="62.8837%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="62.6337%" y="213" width="0.0823%" height="15" fill="rgb(246,105,7)" fg:x="761" fg:w="1"/><text x="62.8837%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.6337%" y="197" width="0.0823%" height="15" fill="rgb(215,154,42)" fg:x="761" fg:w="1"/><text x="62.8837%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.6337%" y="181" width="0.0823%" height="15" fill="rgb(220,215,30)" fg:x="761" fg:w="1"/><text x="62.8837%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6337%" y="165" width="0.0823%" height="15" fill="rgb(228,81,51)" fg:x="761" fg:w="1"/><text x="62.8837%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="62.4691%" y="261" width="0.3292%" height="15" fill="rgb(247,71,54)" fg:x="759" fg:w="4"/><text x="62.7191%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="62.4691%" y="245" width="0.3292%" height="15" fill="rgb(234,176,34)" fg:x="759" fg:w="4"/><text x="62.7191%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="62.7160%" y="229" width="0.0823%" height="15" fill="rgb(241,103,54)" fg:x="762" fg:w="1"/><text x="62.9660%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.8807%" y="197" width="0.0823%" height="15" fill="rgb(228,22,34)" fg:x="764" fg:w="1"/><text x="63.1307%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.8807%" y="181" width="0.0823%" height="15" fill="rgb(241,179,48)" fg:x="764" fg:w="1"/><text x="63.1307%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.8807%" y="165" width="0.0823%" height="15" fill="rgb(235,167,37)" fg:x="764" fg:w="1"/><text x="63.1307%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.33%)</title><rect x="62.7984%" y="213" width="0.3292%" height="15" fill="rgb(213,109,30)" fg:x="763" fg:w="4"/><text x="63.0484%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="62.9630%" y="197" width="0.1646%" height="15" fill="rgb(222,172,16)" fg:x="765" fg:w="2"/><text x="63.2130%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.49%)</title><rect x="62.7984%" y="229" width="0.4938%" height="15" fill="rgb(233,192,5)" fg:x="763" fg:w="6"/><text x="63.0484%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (2 samples, 0.16%)</title><rect x="63.1276%" y="213" width="0.1646%" height="15" fill="rgb(247,189,41)" fg:x="767" fg:w="2"/><text x="63.3776%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="63.2099%" y="197" width="0.0823%" height="15" fill="rgb(218,134,47)" fg:x="768" fg:w="1"/><text x="63.4599%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="63.2922%" y="213" width="0.0823%" height="15" fill="rgb(216,29,3)" fg:x="769" fg:w="1"/><text x="63.5422%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="63.2922%" y="229" width="0.1646%" height="15" fill="rgb(246,140,12)" fg:x="769" fg:w="2"/><text x="63.5422%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="63.3745%" y="213" width="0.0823%" height="15" fill="rgb(230,136,11)" fg:x="770" fg:w="1"/><text x="63.6245%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (330 samples, 27.16%)</title><rect x="36.3786%" y="277" width="27.1605%" height="15" fill="rgb(247,22,47)" fg:x="442" fg:w="330"/><text x="36.6286%" y="287.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.74%)</title><rect x="62.7984%" y="261" width="0.7407%" height="15" fill="rgb(218,84,22)" fg:x="763" fg:w="9"/><text x="63.0484%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.74%)</title><rect x="62.7984%" y="245" width="0.7407%" height="15" fill="rgb(216,87,39)" fg:x="763" fg:w="9"/><text x="63.0484%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="63.4568%" y="229" width="0.0823%" height="15" fill="rgb(221,178,8)" fg:x="771" fg:w="1"/><text x="63.7068%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (332 samples, 27.33%)</title><rect x="36.2963%" y="309" width="27.3251%" height="15" fill="rgb(230,42,11)" fg:x="441" fg:w="332"/><text x="36.5463%" y="319.50">&lt;regex::regex::string::Regex as core::conver..</text></g><g><title>regex::builders::Builder::build_one_string (331 samples, 27.24%)</title><rect x="36.3786%" y="293" width="27.2428%" height="15" fill="rgb(237,229,4)" fg:x="442" fg:w="331"/><text x="36.6286%" y="303.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="63.5391%" y="277" width="0.0823%" height="15" fill="rgb(222,31,33)" fg:x="772" fg:w="1"/><text x="63.7891%" y="287.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="63.6214%" y="309" width="0.0823%" height="15" fill="rgb(210,17,39)" fg:x="773" fg:w="1"/><text x="63.8714%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="63.7860%" y="261" width="0.0823%" height="15" fill="rgb(244,93,20)" fg:x="775" fg:w="1"/><text x="64.0360%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.25%)</title><rect x="63.7860%" y="277" width="0.2469%" height="15" fill="rgb(210,40,47)" fg:x="775" fg:w="3"/><text x="64.0360%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="63.8683%" y="261" width="0.1646%" height="15" fill="rgb(239,211,47)" fg:x="776" fg:w="2"/><text x="64.1183%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.9506%" y="245" width="0.0823%" height="15" fill="rgb(251,223,49)" fg:x="777" fg:w="1"/><text x="64.2006%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.9506%" y="229" width="0.0823%" height="15" fill="rgb(221,149,5)" fg:x="777" fg:w="1"/><text x="64.2006%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.9506%" y="213" width="0.0823%" height="15" fill="rgb(219,224,51)" fg:x="777" fg:w="1"/><text x="64.2006%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.25%)</title><rect x="64.0329%" y="261" width="0.2469%" height="15" fill="rgb(223,7,8)" fg:x="778" fg:w="3"/><text x="64.2829%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.1975%" y="245" width="0.0823%" height="15" fill="rgb(241,217,22)" fg:x="780" fg:w="1"/><text x="64.4475%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.66%)</title><rect x="63.7037%" y="309" width="0.6584%" height="15" fill="rgb(248,209,0)" fg:x="774" fg:w="8"/><text x="63.9537%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.58%)</title><rect x="63.7860%" y="293" width="0.5761%" height="15" fill="rgb(217,205,4)" fg:x="775" fg:w="7"/><text x="64.0360%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.33%)</title><rect x="64.0329%" y="277" width="0.3292%" height="15" fill="rgb(228,124,39)" fg:x="778" fg:w="4"/><text x="64.2829%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="64.2798%" y="261" width="0.0823%" height="15" fill="rgb(250,116,42)" fg:x="781" fg:w="1"/><text x="64.5298%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2798%" y="245" width="0.0823%" height="15" fill="rgb(223,202,9)" fg:x="781" fg:w="1"/><text x="64.5298%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.25%)</title><rect x="64.4444%" y="293" width="0.2469%" height="15" fill="rgb(242,222,40)" fg:x="783" fg:w="3"/><text x="64.6944%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.25%)</title><rect x="64.4444%" y="277" width="0.2469%" height="15" fill="rgb(229,99,46)" fg:x="783" fg:w="3"/><text x="64.6944%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="64.6091%" y="261" width="0.0823%" height="15" fill="rgb(225,56,46)" fg:x="785" fg:w="1"/><text x="64.8591%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="64.6091%" y="245" width="0.0823%" height="15" fill="rgb(227,94,5)" fg:x="785" fg:w="1"/><text x="64.8591%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="65.4321%" y="213" width="0.2469%" height="15" fill="rgb(205,112,38)" fg:x="795" fg:w="3"/><text x="65.6821%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="65.4321%" y="197" width="0.2469%" height="15" fill="rgb(231,133,46)" fg:x="795" fg:w="3"/><text x="65.6821%" y="207.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="65.4321%" y="181" width="0.2469%" height="15" fill="rgb(217,16,9)" fg:x="795" fg:w="3"/><text x="65.6821%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.33%)</title><rect x="65.6790%" y="213" width="0.3292%" height="15" fill="rgb(249,173,9)" fg:x="798" fg:w="4"/><text x="65.9290%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.40%)</title><rect x="64.6914%" y="229" width="1.3992%" height="15" fill="rgb(205,163,53)" fg:x="786" fg:w="17"/><text x="64.9414%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="66.0082%" y="213" width="0.0823%" height="15" fill="rgb(217,54,41)" fg:x="802" fg:w="1"/><text x="66.2582%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0082%" y="197" width="0.0823%" height="15" fill="rgb(228,216,12)" fg:x="802" fg:w="1"/><text x="66.2582%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (20 samples, 1.65%)</title><rect x="64.6914%" y="245" width="1.6461%" height="15" fill="rgb(244,228,15)" fg:x="786" fg:w="20"/><text x="64.9414%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.25%)</title><rect x="66.0905%" y="229" width="0.2469%" height="15" fill="rgb(221,176,53)" fg:x="803" fg:w="3"/><text x="66.3405%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="66.0905%" y="213" width="0.2469%" height="15" fill="rgb(205,94,34)" fg:x="803" fg:w="3"/><text x="66.3405%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="66.0905%" y="197" width="0.2469%" height="15" fill="rgb(213,110,48)" fg:x="803" fg:w="3"/><text x="66.3405%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="66.0905%" y="181" width="0.2469%" height="15" fill="rgb(236,142,28)" fg:x="803" fg:w="3"/><text x="66.3405%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (366 samples, 30.12%)</title><rect x="36.2963%" y="325" width="30.1235%" height="15" fill="rgb(225,135,29)" fg:x="441" fg:w="366"/><text x="36.5463%" y="335.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (25 samples, 2.06%)</title><rect x="64.3621%" y="309" width="2.0576%" height="15" fill="rgb(252,45,31)" fg:x="782" fg:w="25"/><text x="64.6121%" y="319.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.73%)</title><rect x="64.6914%" y="293" width="1.7284%" height="15" fill="rgb(211,187,50)" fg:x="786" fg:w="21"/><text x="64.9414%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.73%)</title><rect x="64.6914%" y="277" width="1.7284%" height="15" fill="rgb(229,109,7)" fg:x="786" fg:w="21"/><text x="64.9414%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.73%)</title><rect x="64.6914%" y="261" width="1.7284%" height="15" fill="rgb(251,131,51)" fg:x="786" fg:w="21"/><text x="64.9414%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="66.3374%" y="245" width="0.0823%" height="15" fill="rgb(251,180,35)" fg:x="806" fg:w="1"/><text x="66.5874%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="66.3374%" y="229" width="0.0823%" height="15" fill="rgb(211,46,32)" fg:x="806" fg:w="1"/><text x="66.5874%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.3374%" y="213" width="0.0823%" height="15" fill="rgb(248,123,17)" fg:x="806" fg:w="1"/><text x="66.5874%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.3374%" y="197" width="0.0823%" height="15" fill="rgb(227,141,18)" fg:x="806" fg:w="1"/><text x="66.5874%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3374%" y="181" width="0.0823%" height="15" fill="rgb(216,102,9)" fg:x="806" fg:w="1"/><text x="66.5874%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4198%" y="309" width="0.0823%" height="15" fill="rgb(253,47,13)" fg:x="807" fg:w="1"/><text x="66.6698%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 0.16%)</title><rect x="66.5021%" y="309" width="0.1646%" height="15" fill="rgb(226,93,23)" fg:x="808" fg:w="2"/><text x="66.7521%" y="319.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="66.5844%" y="293" width="0.0823%" height="15" fill="rgb(247,104,17)" fg:x="809" fg:w="1"/><text x="66.8344%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="66.6667%" y="277" width="0.0823%" height="15" fill="rgb(233,203,26)" fg:x="810" fg:w="1"/><text x="66.9167%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.7490%" y="245" width="0.0823%" height="15" fill="rgb(244,98,49)" fg:x="811" fg:w="1"/><text x="66.9990%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.7490%" y="229" width="0.0823%" height="15" fill="rgb(235,134,22)" fg:x="811" fg:w="1"/><text x="66.9990%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="66.7490%" y="213" width="0.0823%" height="15" fill="rgb(221,70,32)" fg:x="811" fg:w="1"/><text x="66.9990%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.7490%" y="197" width="0.0823%" height="15" fill="rgb(238,15,50)" fg:x="811" fg:w="1"/><text x="66.9990%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7490%" y="181" width="0.0823%" height="15" fill="rgb(215,221,48)" fg:x="811" fg:w="1"/><text x="66.9990%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.7490%" y="165" width="0.0823%" height="15" fill="rgb(236,73,3)" fg:x="811" fg:w="1"/><text x="66.9990%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.8313%" y="245" width="0.0823%" height="15" fill="rgb(250,107,11)" fg:x="812" fg:w="1"/><text x="67.0813%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.8313%" y="229" width="0.0823%" height="15" fill="rgb(242,39,14)" fg:x="812" fg:w="1"/><text x="67.0813%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.8313%" y="213" width="0.0823%" height="15" fill="rgb(248,164,37)" fg:x="812" fg:w="1"/><text x="67.0813%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="66.9959%" y="181" width="0.1646%" height="15" fill="rgb(217,60,12)" fg:x="814" fg:w="2"/><text x="67.2459%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.33%)</title><rect x="66.9136%" y="245" width="0.3292%" height="15" fill="rgb(240,125,29)" fg:x="813" fg:w="4"/><text x="67.1636%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="66.9136%" y="229" width="0.3292%" height="15" fill="rgb(208,207,28)" fg:x="813" fg:w="4"/><text x="67.1636%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (4 samples, 0.33%)</title><rect x="66.9136%" y="213" width="0.3292%" height="15" fill="rgb(209,159,27)" fg:x="813" fg:w="4"/><text x="67.1636%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="66.9136%" y="197" width="0.3292%" height="15" fill="rgb(251,176,53)" fg:x="813" fg:w="4"/><text x="67.1636%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="67.1605%" y="181" width="0.0823%" height="15" fill="rgb(211,85,7)" fg:x="816" fg:w="1"/><text x="67.4105%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="67.4897%" y="213" width="0.4115%" height="15" fill="rgb(216,64,54)" fg:x="820" fg:w="5"/><text x="67.7397%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.66%)</title><rect x="67.3251%" y="229" width="0.6584%" height="15" fill="rgb(217,54,24)" fg:x="818" fg:w="8"/><text x="67.5751%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="67.9012%" y="213" width="0.0823%" height="15" fill="rgb(208,206,53)" fg:x="825" fg:w="1"/><text x="68.1512%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="67.9012%" y="197" width="0.0823%" height="15" fill="rgb(251,74,39)" fg:x="825" fg:w="1"/><text x="68.1512%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="67.9835%" y="229" width="0.0823%" height="15" fill="rgb(226,47,5)" fg:x="826" fg:w="1"/><text x="68.2335%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="67.9835%" y="213" width="0.0823%" height="15" fill="rgb(234,111,33)" fg:x="826" fg:w="1"/><text x="68.2335%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="67.9835%" y="197" width="0.0823%" height="15" fill="rgb(251,14,10)" fg:x="826" fg:w="1"/><text x="68.2335%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.0658%" y="197" width="0.0823%" height="15" fill="rgb(232,43,0)" fg:x="827" fg:w="1"/><text x="68.3158%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.0658%" y="181" width="0.0823%" height="15" fill="rgb(222,68,43)" fg:x="827" fg:w="1"/><text x="68.3158%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0658%" y="165" width="0.0823%" height="15" fill="rgb(217,24,23)" fg:x="827" fg:w="1"/><text x="68.3158%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="68.0658%" y="213" width="0.2469%" height="15" fill="rgb(229,209,14)" fg:x="827" fg:w="3"/><text x="68.3158%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="68.1481%" y="197" width="0.1646%" height="15" fill="rgb(250,149,48)" fg:x="828" fg:w="2"/><text x="68.3981%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="68.1481%" y="181" width="0.1646%" height="15" fill="rgb(210,120,37)" fg:x="828" fg:w="2"/><text x="68.3981%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="68.1481%" y="165" width="0.1646%" height="15" fill="rgb(210,21,8)" fg:x="828" fg:w="2"/><text x="68.3981%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="68.3128%" y="213" width="0.0823%" height="15" fill="rgb(243,145,7)" fg:x="830" fg:w="1"/><text x="68.5628%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="68.4774%" y="197" width="0.0823%" height="15" fill="rgb(238,178,32)" fg:x="832" fg:w="1"/><text x="68.7274%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="68.5597%" y="197" width="0.0823%" height="15" fill="rgb(222,4,10)" fg:x="833" fg:w="1"/><text x="68.8097%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.5597%" y="181" width="0.0823%" height="15" fill="rgb(239,7,37)" fg:x="833" fg:w="1"/><text x="68.8097%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.5597%" y="165" width="0.0823%" height="15" fill="rgb(215,31,37)" fg:x="833" fg:w="1"/><text x="68.8097%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.5597%" y="149" width="0.0823%" height="15" fill="rgb(224,83,33)" fg:x="833" fg:w="1"/><text x="68.8097%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="68.6420%" y="197" width="0.1646%" height="15" fill="rgb(239,55,3)" fg:x="834" fg:w="2"/><text x="68.8920%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (20 samples, 1.65%)</title><rect x="67.2428%" y="245" width="1.6461%" height="15" fill="rgb(247,92,11)" fg:x="817" fg:w="20"/><text x="67.4928%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.82%)</title><rect x="68.0658%" y="229" width="0.8230%" height="15" fill="rgb(239,200,7)" fg:x="827" fg:w="10"/><text x="68.3158%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="68.3951%" y="213" width="0.4938%" height="15" fill="rgb(227,115,8)" fg:x="831" fg:w="6"/><text x="68.6451%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="68.8066%" y="197" width="0.0823%" height="15" fill="rgb(215,189,27)" fg:x="836" fg:w="1"/><text x="69.0566%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="68.9712%" y="197" width="0.0823%" height="15" fill="rgb(251,216,39)" fg:x="838" fg:w="1"/><text x="69.2212%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="68.9712%" y="181" width="0.0823%" height="15" fill="rgb(207,29,47)" fg:x="838" fg:w="1"/><text x="69.2212%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="68.8889%" y="213" width="0.2469%" height="15" fill="rgb(210,71,34)" fg:x="837" fg:w="3"/><text x="69.1389%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="69.0535%" y="197" width="0.0823%" height="15" fill="rgb(253,217,51)" fg:x="839" fg:w="1"/><text x="69.3035%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.0535%" y="181" width="0.0823%" height="15" fill="rgb(222,117,46)" fg:x="839" fg:w="1"/><text x="69.3035%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.0535%" y="165" width="0.0823%" height="15" fill="rgb(226,132,6)" fg:x="839" fg:w="1"/><text x="69.3035%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0535%" y="149" width="0.0823%" height="15" fill="rgb(254,145,51)" fg:x="839" fg:w="1"/><text x="69.3035%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="69.1358%" y="213" width="0.0823%" height="15" fill="rgb(231,199,27)" fg:x="840" fg:w="1"/><text x="69.3858%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="68.8889%" y="245" width="0.4115%" height="15" fill="rgb(245,158,14)" fg:x="837" fg:w="5"/><text x="69.1389%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="68.8889%" y="229" width="0.4115%" height="15" fill="rgb(240,113,14)" fg:x="837" fg:w="5"/><text x="69.1389%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="69.2181%" y="213" width="0.0823%" height="15" fill="rgb(210,20,13)" fg:x="841" fg:w="1"/><text x="69.4681%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.41%)</title><rect x="69.3827%" y="213" width="0.4115%" height="15" fill="rgb(241,144,13)" fg:x="843" fg:w="5"/><text x="69.6327%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.33%)</title><rect x="69.4650%" y="197" width="0.3292%" height="15" fill="rgb(235,43,34)" fg:x="844" fg:w="4"/><text x="69.7150%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="69.6296%" y="181" width="0.1646%" height="15" fill="rgb(208,36,20)" fg:x="846" fg:w="2"/><text x="69.8796%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="69.6296%" y="165" width="0.1646%" height="15" fill="rgb(239,204,10)" fg:x="846" fg:w="2"/><text x="69.8796%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="69.6296%" y="149" width="0.1646%" height="15" fill="rgb(217,84,43)" fg:x="846" fg:w="2"/><text x="69.8796%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.7942%" y="197" width="0.0823%" height="15" fill="rgb(241,170,50)" fg:x="848" fg:w="1"/><text x="70.0442%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.7942%" y="181" width="0.0823%" height="15" fill="rgb(226,205,29)" fg:x="848" fg:w="1"/><text x="70.0442%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="69.8765%" y="197" width="0.0823%" height="15" fill="rgb(233,113,1)" fg:x="849" fg:w="1"/><text x="70.1265%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="69.8765%" y="181" width="0.0823%" height="15" fill="rgb(253,98,13)" fg:x="849" fg:w="1"/><text x="70.1265%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8765%" y="165" width="0.0823%" height="15" fill="rgb(211,115,12)" fg:x="849" fg:w="1"/><text x="70.1265%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.33%)</title><rect x="69.7942%" y="213" width="0.3292%" height="15" fill="rgb(208,12,16)" fg:x="848" fg:w="4"/><text x="70.0442%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="69.9588%" y="197" width="0.1646%" height="15" fill="rgb(237,193,54)" fg:x="850" fg:w="2"/><text x="70.2088%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (42 samples, 3.46%)</title><rect x="66.7490%" y="261" width="3.4568%" height="15" fill="rgb(243,22,42)" fg:x="811" fg:w="42"/><text x="66.9990%" y="271.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.91%)</title><rect x="69.3004%" y="245" width="0.9053%" height="15" fill="rgb(233,151,36)" fg:x="842" fg:w="11"/><text x="69.5504%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.91%)</title><rect x="69.3004%" y="229" width="0.9053%" height="15" fill="rgb(237,57,45)" fg:x="842" fg:w="11"/><text x="69.5504%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="70.1235%" y="213" width="0.0823%" height="15" fill="rgb(221,88,17)" fg:x="852" fg:w="1"/><text x="70.3735%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="70.1235%" y="197" width="0.0823%" height="15" fill="rgb(230,79,15)" fg:x="852" fg:w="1"/><text x="70.3735%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="70.2058%" y="261" width="0.0823%" height="15" fill="rgb(213,57,13)" fg:x="853" fg:w="1"/><text x="70.4558%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (45 samples, 3.70%)</title><rect x="66.6667%" y="293" width="3.7037%" height="15" fill="rgb(222,116,39)" fg:x="810" fg:w="45"/><text x="66.9167%" y="303.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (44 samples, 3.62%)</title><rect x="66.7490%" y="277" width="3.6214%" height="15" fill="rgb(245,107,2)" fg:x="811" fg:w="44"/><text x="66.9990%" y="287.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="70.2881%" y="261" width="0.0823%" height="15" fill="rgb(238,1,10)" fg:x="854" fg:w="1"/><text x="70.5381%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3704%" y="245" width="0.0823%" height="15" fill="rgb(249,4,48)" fg:x="855" fg:w="1"/><text x="70.6204%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.4527%" y="245" width="0.0823%" height="15" fill="rgb(223,151,18)" fg:x="856" fg:w="1"/><text x="70.7027%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.4527%" y="229" width="0.0823%" height="15" fill="rgb(227,65,43)" fg:x="856" fg:w="1"/><text x="70.7027%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.4527%" y="213" width="0.0823%" height="15" fill="rgb(218,40,45)" fg:x="856" fg:w="1"/><text x="70.7027%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.25%)</title><rect x="70.3704%" y="261" width="0.2469%" height="15" fill="rgb(252,121,31)" fg:x="855" fg:w="3"/><text x="70.6204%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="70.5350%" y="245" width="0.0823%" height="15" fill="rgb(219,158,43)" fg:x="857" fg:w="1"/><text x="70.7850%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.5350%" y="229" width="0.0823%" height="15" fill="rgb(231,162,42)" fg:x="857" fg:w="1"/><text x="70.7850%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.41%)</title><rect x="70.3704%" y="293" width="0.4115%" height="15" fill="rgb(217,179,25)" fg:x="855" fg:w="5"/><text x="70.6204%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="70.3704%" y="277" width="0.4115%" height="15" fill="rgb(206,212,31)" fg:x="855" fg:w="5"/><text x="70.6204%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="70.6173%" y="261" width="0.1646%" height="15" fill="rgb(235,144,12)" fg:x="858" fg:w="2"/><text x="70.8673%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="70.7819%" y="261" width="0.0823%" height="15" fill="rgb(213,51,10)" fg:x="860" fg:w="1"/><text x="71.0319%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="70.7819%" y="245" width="0.0823%" height="15" fill="rgb(231,145,14)" fg:x="860" fg:w="1"/><text x="71.0319%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="70.7819%" y="229" width="0.0823%" height="15" fill="rgb(235,15,28)" fg:x="860" fg:w="1"/><text x="71.0319%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7819%" y="213" width="0.0823%" height="15" fill="rgb(237,206,10)" fg:x="860" fg:w="1"/><text x="71.0319%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="70.7819%" y="293" width="0.3292%" height="15" fill="rgb(236,227,27)" fg:x="860" fg:w="4"/><text x="71.0319%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="70.7819%" y="277" width="0.3292%" height="15" fill="rgb(246,83,35)" fg:x="860" fg:w="4"/><text x="71.0319%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.25%)</title><rect x="70.8642%" y="261" width="0.2469%" height="15" fill="rgb(220,136,24)" fg:x="861" fg:w="3"/><text x="71.1142%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.25%)</title><rect x="70.8642%" y="245" width="0.2469%" height="15" fill="rgb(217,3,25)" fg:x="861" fg:w="3"/><text x="71.1142%" y="255.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="70.8642%" y="229" width="0.2469%" height="15" fill="rgb(239,24,14)" fg:x="861" fg:w="3"/><text x="71.1142%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.4403%" y="213" width="0.0823%" height="15" fill="rgb(244,16,53)" fg:x="868" fg:w="1"/><text x="71.6903%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="71.5226%" y="213" width="0.0823%" height="15" fill="rgb(208,175,44)" fg:x="869" fg:w="1"/><text x="71.7726%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.58%)</title><rect x="71.1111%" y="229" width="0.5761%" height="15" fill="rgb(252,18,48)" fg:x="864" fg:w="7"/><text x="71.3611%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="71.6049%" y="213" width="0.0823%" height="15" fill="rgb(234,199,32)" fg:x="870" fg:w="1"/><text x="71.8549%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.6049%" y="197" width="0.0823%" height="15" fill="rgb(225,77,54)" fg:x="870" fg:w="1"/><text x="71.8549%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.6049%" y="181" width="0.0823%" height="15" fill="rgb(225,42,25)" fg:x="870" fg:w="1"/><text x="71.8549%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6049%" y="165" width="0.0823%" height="15" fill="rgb(242,227,46)" fg:x="870" fg:w="1"/><text x="71.8549%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.82%)</title><rect x="71.1111%" y="245" width="0.8230%" height="15" fill="rgb(246,197,35)" fg:x="864" fg:w="10"/><text x="71.3611%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.25%)</title><rect x="71.6872%" y="229" width="0.2469%" height="15" fill="rgb(215,159,26)" fg:x="871" fg:w="3"/><text x="71.9372%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="71.7695%" y="213" width="0.1646%" height="15" fill="rgb(212,194,50)" fg:x="872" fg:w="2"/><text x="72.0195%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="71.7695%" y="197" width="0.1646%" height="15" fill="rgb(246,132,1)" fg:x="872" fg:w="2"/><text x="72.0195%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8519%" y="181" width="0.0823%" height="15" fill="rgb(217,71,7)" fg:x="873" fg:w="1"/><text x="72.1019%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (745 samples, 61.32%)</title><rect x="10.8642%" y="405" width="61.3169%" height="15" fill="rgb(252,59,32)" fg:x="132" fg:w="745"/><text x="11.1142%" y="415.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::obs..</text></g><g><title>plugins_core::looking::model::qualify_name (731 samples, 60.16%)</title><rect x="12.0165%" y="389" width="60.1646%" height="15" fill="rgb(253,204,25)" fg:x="146" fg:w="731"/><text x="12.2665%" y="399.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (730 samples, 60.08%)</title><rect x="12.0988%" y="373" width="60.0823%" height="15" fill="rgb(232,21,16)" fg:x="147" fg:w="730"/><text x="12.3488%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (730 samples, 60.08%)</title><rect x="12.0988%" y="357" width="60.0823%" height="15" fill="rgb(248,90,29)" fg:x="147" fg:w="730"/><text x="12.3488%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (729 samples, 60.00%)</title><rect x="12.1811%" y="341" width="60.0000%" height="15" fill="rgb(249,223,7)" fg:x="148" fg:w="729"/><text x="12.4311%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (70 samples, 5.76%)</title><rect x="66.4198%" y="325" width="5.7613%" height="15" fill="rgb(231,119,42)" fg:x="807" fg:w="70"/><text x="66.6698%" y="335.50">indefin..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (67 samples, 5.51%)</title><rect x="66.6667%" y="309" width="5.5144%" height="15" fill="rgb(215,41,35)" fg:x="810" fg:w="67"/><text x="66.9167%" y="319.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.07%)</title><rect x="71.1111%" y="293" width="1.0700%" height="15" fill="rgb(220,44,45)" fg:x="864" fg:w="13"/><text x="71.3611%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.07%)</title><rect x="71.1111%" y="277" width="1.0700%" height="15" fill="rgb(253,197,36)" fg:x="864" fg:w="13"/><text x="71.3611%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.07%)</title><rect x="71.1111%" y="261" width="1.0700%" height="15" fill="rgb(245,225,54)" fg:x="864" fg:w="13"/><text x="71.3611%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (3 samples, 0.25%)</title><rect x="71.9342%" y="245" width="0.2469%" height="15" fill="rgb(239,94,37)" fg:x="874" fg:w="3"/><text x="72.1842%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (3 samples, 0.25%)</title><rect x="71.9342%" y="229" width="0.2469%" height="15" fill="rgb(242,217,10)" fg:x="874" fg:w="3"/><text x="72.1842%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="71.9342%" y="213" width="0.2469%" height="15" fill="rgb(250,193,7)" fg:x="874" fg:w="3"/><text x="72.1842%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="71.9342%" y="197" width="0.2469%" height="15" fill="rgb(230,104,19)" fg:x="874" fg:w="3"/><text x="72.1842%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="71.9342%" y="181" width="0.2469%" height="15" fill="rgb(230,181,4)" fg:x="874" fg:w="3"/><text x="72.1842%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.1811%" y="405" width="0.1646%" height="15" fill="rgb(216,219,49)" fg:x="877" fg:w="2"/><text x="72.4311%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="72.3457%" y="405" width="0.0823%" height="15" fill="rgb(254,144,0)" fg:x="879" fg:w="1"/><text x="72.5957%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="72.3457%" y="389" width="0.0823%" height="15" fill="rgb(205,209,38)" fg:x="879" fg:w="1"/><text x="72.5957%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="72.3457%" y="373" width="0.0823%" height="15" fill="rgb(240,21,42)" fg:x="879" fg:w="1"/><text x="72.5957%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.3457%" y="357" width="0.0823%" height="15" fill="rgb(241,132,3)" fg:x="879" fg:w="1"/><text x="72.5957%" y="367.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.3457%" y="341" width="0.0823%" height="15" fill="rgb(225,14,2)" fg:x="879" fg:w="1"/><text x="72.5957%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.3457%" y="325" width="0.0823%" height="15" fill="rgb(210,141,35)" fg:x="879" fg:w="1"/><text x="72.5957%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.3457%" y="309" width="0.0823%" height="15" fill="rgb(251,14,44)" fg:x="879" fg:w="1"/><text x="72.5957%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.3457%" y="293" width="0.0823%" height="15" fill="rgb(247,48,18)" fg:x="879" fg:w="1"/><text x="72.5957%" y="303.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.5103%" y="373" width="0.0823%" height="15" fill="rgb(225,0,40)" fg:x="881" fg:w="1"/><text x="72.7603%" y="383.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="72.5926%" y="277" width="0.0823%" height="15" fill="rgb(221,31,33)" fg:x="882" fg:w="1"/><text x="72.8426%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.7572%" y="229" width="0.0823%" height="15" fill="rgb(237,42,40)" fg:x="884" fg:w="1"/><text x="73.0072%" y="239.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.7572%" y="213" width="0.0823%" height="15" fill="rgb(233,51,29)" fg:x="884" fg:w="1"/><text x="73.0072%" y="223.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.7572%" y="197" width="0.0823%" height="15" fill="rgb(226,58,20)" fg:x="884" fg:w="1"/><text x="73.0072%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7572%" y="181" width="0.0823%" height="15" fill="rgb(208,98,7)" fg:x="884" fg:w="1"/><text x="73.0072%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7572%" y="165" width="0.0823%" height="15" fill="rgb(228,143,44)" fg:x="884" fg:w="1"/><text x="73.0072%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7572%" y="149" width="0.0823%" height="15" fill="rgb(246,55,38)" fg:x="884" fg:w="1"/><text x="73.0072%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7572%" y="133" width="0.0823%" height="15" fill="rgb(247,87,16)" fg:x="884" fg:w="1"/><text x="73.0072%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7572%" y="117" width="0.0823%" height="15" fill="rgb(234,129,42)" fg:x="884" fg:w="1"/><text x="73.0072%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.7572%" y="101" width="0.0823%" height="15" fill="rgb(220,82,16)" fg:x="884" fg:w="1"/><text x="73.0072%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8395%" y="213" width="0.0823%" height="15" fill="rgb(211,88,4)" fg:x="885" fg:w="1"/><text x="73.0895%" y="223.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.25%)</title><rect x="72.7572%" y="261" width="0.2469%" height="15" fill="rgb(248,151,21)" fg:x="884" fg:w="3"/><text x="73.0072%" y="271.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="72.7572%" y="245" width="0.2469%" height="15" fill="rgb(238,163,6)" fg:x="884" fg:w="3"/><text x="73.0072%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="72.8395%" y="229" width="0.1646%" height="15" fill="rgb(209,183,11)" fg:x="885" fg:w="2"/><text x="73.0895%" y="239.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.9218%" y="213" width="0.0823%" height="15" fill="rgb(219,37,20)" fg:x="886" fg:w="1"/><text x="73.1718%" y="223.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.9218%" y="197" width="0.0823%" height="15" fill="rgb(210,158,4)" fg:x="886" fg:w="1"/><text x="73.1718%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.9218%" y="181" width="0.0823%" height="15" fill="rgb(221,167,53)" fg:x="886" fg:w="1"/><text x="73.1718%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9218%" y="165" width="0.0823%" height="15" fill="rgb(237,151,45)" fg:x="886" fg:w="1"/><text x="73.1718%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.9218%" y="149" width="0.0823%" height="15" fill="rgb(231,39,3)" fg:x="886" fg:w="1"/><text x="73.1718%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9218%" y="133" width="0.0823%" height="15" fill="rgb(212,167,28)" fg:x="886" fg:w="1"/><text x="73.1718%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.9218%" y="117" width="0.0823%" height="15" fill="rgb(232,178,8)" fg:x="886" fg:w="1"/><text x="73.1718%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.9218%" y="101" width="0.0823%" height="15" fill="rgb(225,151,20)" fg:x="886" fg:w="1"/><text x="73.1718%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9218%" y="85" width="0.0823%" height="15" fill="rgb(238,3,37)" fg:x="886" fg:w="1"/><text x="73.1718%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9218%" y="69" width="0.0823%" height="15" fill="rgb(251,147,42)" fg:x="886" fg:w="1"/><text x="73.1718%" y="79.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.0041%" y="165" width="0.0823%" height="15" fill="rgb(208,173,10)" fg:x="887" fg:w="1"/><text x="73.2541%" y="175.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.0041%" y="149" width="0.0823%" height="15" fill="rgb(246,225,4)" fg:x="887" fg:w="1"/><text x="73.2541%" y="159.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="73.0041%" y="245" width="0.1646%" height="15" fill="rgb(248,102,6)" fg:x="887" fg:w="2"/><text x="73.2541%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.0041%" y="229" width="0.1646%" height="15" fill="rgb(232,6,21)" fg:x="887" fg:w="2"/><text x="73.2541%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.0041%" y="213" width="0.1646%" height="15" fill="rgb(221,179,22)" fg:x="887" fg:w="2"/><text x="73.2541%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.0041%" y="197" width="0.1646%" height="15" fill="rgb(252,50,20)" fg:x="887" fg:w="2"/><text x="73.2541%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.0041%" y="181" width="0.1646%" height="15" fill="rgb(222,56,38)" fg:x="887" fg:w="2"/><text x="73.2541%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.0864%" y="165" width="0.0823%" height="15" fill="rgb(206,193,29)" fg:x="888" fg:w="1"/><text x="73.3364%" y="175.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.0864%" y="149" width="0.0823%" height="15" fill="rgb(239,192,45)" fg:x="888" fg:w="1"/><text x="73.3364%" y="159.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.3333%" y="117" width="0.0823%" height="15" fill="rgb(254,18,36)" fg:x="891" fg:w="1"/><text x="73.5833%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.3333%" y="101" width="0.0823%" height="15" fill="rgb(221,127,11)" fg:x="891" fg:w="1"/><text x="73.5833%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3333%" y="85" width="0.0823%" height="15" fill="rgb(234,146,35)" fg:x="891" fg:w="1"/><text x="73.5833%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.3333%" y="69" width="0.0823%" height="15" fill="rgb(254,201,37)" fg:x="891" fg:w="1"/><text x="73.5833%" y="79.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="73.2510%" y="213" width="0.3292%" height="15" fill="rgb(211,202,23)" fg:x="890" fg:w="4"/><text x="73.5010%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="73.2510%" y="197" width="0.3292%" height="15" fill="rgb(237,91,2)" fg:x="890" fg:w="4"/><text x="73.5010%" y="207.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="73.2510%" y="181" width="0.3292%" height="15" fill="rgb(226,228,36)" fg:x="890" fg:w="4"/><text x="73.5010%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="73.2510%" y="165" width="0.3292%" height="15" fill="rgb(213,63,50)" fg:x="890" fg:w="4"/><text x="73.5010%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="73.2510%" y="149" width="0.3292%" height="15" fill="rgb(235,194,19)" fg:x="890" fg:w="4"/><text x="73.5010%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.25%)</title><rect x="73.3333%" y="133" width="0.2469%" height="15" fill="rgb(207,204,18)" fg:x="891" fg:w="3"/><text x="73.5833%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.4156%" y="117" width="0.1646%" height="15" fill="rgb(248,8,7)" fg:x="892" fg:w="2"/><text x="73.6656%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.4156%" y="101" width="0.1646%" height="15" fill="rgb(223,145,47)" fg:x="892" fg:w="2"/><text x="73.6656%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4979%" y="85" width="0.0823%" height="15" fill="rgb(228,84,11)" fg:x="893" fg:w="1"/><text x="73.7479%" y="95.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (13 samples, 1.07%)</title><rect x="72.5926%" y="293" width="1.0700%" height="15" fill="rgb(218,76,45)" fg:x="882" fg:w="13"/><text x="72.8426%" y="303.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.99%)</title><rect x="72.6749%" y="277" width="0.9877%" height="15" fill="rgb(223,80,15)" fg:x="883" fg:w="12"/><text x="72.9249%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (8 samples, 0.66%)</title><rect x="73.0041%" y="261" width="0.6584%" height="15" fill="rgb(219,218,33)" fg:x="887" fg:w="8"/><text x="73.2541%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="73.1687%" y="245" width="0.4938%" height="15" fill="rgb(208,51,11)" fg:x="889" fg:w="6"/><text x="73.4187%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="73.1687%" y="229" width="0.4938%" height="15" fill="rgb(229,165,39)" fg:x="889" fg:w="6"/><text x="73.4187%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5802%" y="213" width="0.0823%" height="15" fill="rgb(241,100,24)" fg:x="894" fg:w="1"/><text x="73.8302%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5802%" y="197" width="0.0823%" height="15" fill="rgb(228,14,23)" fg:x="894" fg:w="1"/><text x="73.8302%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="73.5802%" y="181" width="0.0823%" height="15" fill="rgb(247,116,52)" fg:x="894" fg:w="1"/><text x="73.8302%" y="191.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.5802%" y="165" width="0.0823%" height="15" fill="rgb(216,149,33)" fg:x="894" fg:w="1"/><text x="73.8302%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.5802%" y="149" width="0.0823%" height="15" fill="rgb(238,142,29)" fg:x="894" fg:w="1"/><text x="73.8302%" y="159.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (14 samples, 1.15%)</title><rect x="72.5926%" y="373" width="1.1523%" height="15" fill="rgb(224,83,40)" fg:x="882" fg:w="14"/><text x="72.8426%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.15%)</title><rect x="72.5926%" y="357" width="1.1523%" height="15" fill="rgb(234,165,11)" fg:x="882" fg:w="14"/><text x="72.8426%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.15%)</title><rect x="72.5926%" y="341" width="1.1523%" height="15" fill="rgb(215,96,23)" fg:x="882" fg:w="14"/><text x="72.8426%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 1.15%)</title><rect x="72.5926%" y="325" width="1.1523%" height="15" fill="rgb(233,179,26)" fg:x="882" fg:w="14"/><text x="72.8426%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (14 samples, 1.15%)</title><rect x="72.5926%" y="309" width="1.1523%" height="15" fill="rgb(225,129,33)" fg:x="882" fg:w="14"/><text x="72.8426%" y="319.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;&amp;kernel::model::EntityPtr&gt; for kernel::model::entity::EntityRef&gt;::from (1 samples, 0.08%)</title><rect x="73.6626%" y="293" width="0.0823%" height="15" fill="rgb(237,49,13)" fg:x="895" fg:w="1"/><text x="73.9126%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6626%" y="277" width="0.0823%" height="15" fill="rgb(211,3,31)" fg:x="895" fg:w="1"/><text x="73.9126%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6626%" y="261" width="0.0823%" height="15" fill="rgb(216,152,19)" fg:x="895" fg:w="1"/><text x="73.9126%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.6626%" y="245" width="0.0823%" height="15" fill="rgb(251,121,35)" fg:x="895" fg:w="1"/><text x="73.9126%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.6626%" y="229" width="0.0823%" height="15" fill="rgb(210,217,47)" fg:x="895" fg:w="1"/><text x="73.9126%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.6626%" y="213" width="0.0823%" height="15" fill="rgb(244,116,22)" fg:x="895" fg:w="1"/><text x="73.9126%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.6626%" y="197" width="0.0823%" height="15" fill="rgb(228,17,21)" fg:x="895" fg:w="1"/><text x="73.9126%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.6626%" y="181" width="0.0823%" height="15" fill="rgb(240,149,34)" fg:x="895" fg:w="1"/><text x="73.9126%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.6626%" y="165" width="0.0823%" height="15" fill="rgb(208,125,47)" fg:x="895" fg:w="1"/><text x="73.9126%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.6626%" y="149" width="0.0823%" height="15" fill="rgb(249,186,39)" fg:x="895" fg:w="1"/><text x="73.9126%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.6626%" y="133" width="0.0823%" height="15" fill="rgb(240,220,33)" fg:x="895" fg:w="1"/><text x="73.9126%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.6626%" y="117" width="0.0823%" height="15" fill="rgb(243,110,23)" fg:x="895" fg:w="1"/><text x="73.9126%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6626%" y="101" width="0.0823%" height="15" fill="rgb(219,163,46)" fg:x="895" fg:w="1"/><text x="73.9126%" y="111.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="73.7449%" y="373" width="0.0823%" height="15" fill="rgb(216,126,30)" fg:x="896" fg:w="1"/><text x="73.9949%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (776 samples, 63.87%)</title><rect x="10.1235%" y="629" width="63.8683%" height="15" fill="rgb(208,139,11)" fg:x="123" fg:w="776"/><text x="10.3735%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (776 samples, 63.87%)</title><rect x="10.1235%" y="613" width="63.8683%" height="15" fill="rgb(213,118,36)" fg:x="123" fg:w="776"/><text x="10.3735%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (776 samples, 63.87%)</title><rect x="10.1235%" y="597" width="63.8683%" height="15" fill="rgb(226,43,17)" fg:x="123" fg:w="776"/><text x="10.3735%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (776 samples, 63.87%)</title><rect x="10.1235%" y="581" width="63.8683%" height="15" fill="rgb(254,217,4)" fg:x="123" fg:w="776"/><text x="10.3735%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (768 samples, 63.21%)</title><rect x="10.7819%" y="565" width="63.2099%" height="15" fill="rgb(210,134,47)" fg:x="131" fg:w="768"/><text x="11.0319%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (768 samples, 63.21%)</title><rect x="10.7819%" y="549" width="63.2099%" height="15" fill="rgb(237,24,49)" fg:x="131" fg:w="768"/><text x="11.0319%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (768 samples, 63.21%)</title><rect x="10.7819%" y="533" width="63.2099%" height="15" fill="rgb(251,39,46)" fg:x="131" fg:w="768"/><text x="11.0319%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (768 samples, 63.21%)</title><rect x="10.7819%" y="517" width="63.2099%" height="15" fill="rgb(251,220,3)" fg:x="131" fg:w="768"/><text x="11.0319%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (768 samples, 63.21%)</title><rect x="10.7819%" y="501" width="63.2099%" height="15" fill="rgb(228,105,12)" fg:x="131" fg:w="768"/><text x="11.0319%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (768 samples, 63.21%)</title><rect x="10.7819%" y="485" width="63.2099%" height="15" fill="rgb(215,196,1)" fg:x="131" fg:w="768"/><text x="11.0319%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (768 samples, 63.21%)</title><rect x="10.7819%" y="469" width="63.2099%" height="15" fill="rgb(214,33,39)" fg:x="131" fg:w="768"/><text x="11.0319%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (768 samples, 63.21%)</title><rect x="10.7819%" y="453" width="63.2099%" height="15" fill="rgb(220,19,52)" fg:x="131" fg:w="768"/><text x="11.0319%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (768 samples, 63.21%)</title><rect x="10.7819%" y="437" width="63.2099%" height="15" fill="rgb(221,78,38)" fg:x="131" fg:w="768"/><text x="11.0319%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (767 samples, 63.13%)</title><rect x="10.8642%" y="421" width="63.1276%" height="15" fill="rgb(253,30,16)" fg:x="132" fg:w="767"/><text x="11.1142%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (19 samples, 1.56%)</title><rect x="72.4280%" y="405" width="1.5638%" height="15" fill="rgb(242,65,0)" fg:x="880" fg:w="19"/><text x="72.6780%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (18 samples, 1.48%)</title><rect x="72.5103%" y="389" width="1.4815%" height="15" fill="rgb(235,201,12)" fg:x="881" fg:w="18"/><text x="72.7603%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.8272%" y="373" width="0.1646%" height="15" fill="rgb(233,161,9)" fg:x="897" fg:w="2"/><text x="74.0772%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.8272%" y="357" width="0.1646%" height="15" fill="rgb(241,207,41)" fg:x="897" fg:w="2"/><text x="74.0772%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="73.9095%" y="341" width="0.0823%" height="15" fill="rgb(212,69,46)" fg:x="898" fg:w="1"/><text x="74.1595%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="73.9095%" y="325" width="0.0823%" height="15" fill="rgb(239,69,45)" fg:x="898" fg:w="1"/><text x="74.1595%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="73.9095%" y="309" width="0.0823%" height="15" fill="rgb(242,117,48)" fg:x="898" fg:w="1"/><text x="74.1595%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9095%" y="293" width="0.0823%" height="15" fill="rgb(228,41,36)" fg:x="898" fg:w="1"/><text x="74.1595%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9095%" y="277" width="0.0823%" height="15" fill="rgb(212,3,32)" fg:x="898" fg:w="1"/><text x="74.1595%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9095%" y="261" width="0.0823%" height="15" fill="rgb(233,41,49)" fg:x="898" fg:w="1"/><text x="74.1595%" y="271.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="73.9918%" y="597" width="0.0823%" height="15" fill="rgb(252,170,49)" fg:x="899" fg:w="1"/><text x="74.2418%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.9918%" y="581" width="0.0823%" height="15" fill="rgb(229,53,26)" fg:x="899" fg:w="1"/><text x="74.2418%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.9918%" y="565" width="0.0823%" height="15" fill="rgb(217,157,12)" fg:x="899" fg:w="1"/><text x="74.2418%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.9918%" y="549" width="0.0823%" height="15" fill="rgb(227,17,9)" fg:x="899" fg:w="1"/><text x="74.2418%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.9918%" y="533" width="0.0823%" height="15" fill="rgb(218,84,12)" fg:x="899" fg:w="1"/><text x="74.2418%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9918%" y="517" width="0.0823%" height="15" fill="rgb(212,79,24)" fg:x="899" fg:w="1"/><text x="74.2418%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9918%" y="501" width="0.0823%" height="15" fill="rgb(217,222,37)" fg:x="899" fg:w="1"/><text x="74.2418%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9918%" y="485" width="0.0823%" height="15" fill="rgb(246,208,8)" fg:x="899" fg:w="1"/><text x="74.2418%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9918%" y="469" width="0.0823%" height="15" fill="rgb(244,133,10)" fg:x="899" fg:w="1"/><text x="74.2418%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9918%" y="453" width="0.0823%" height="15" fill="rgb(209,219,41)" fg:x="899" fg:w="1"/><text x="74.2418%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.0741%" y="501" width="0.0823%" height="15" fill="rgb(253,175,45)" fg:x="900" fg:w="1"/><text x="74.3241%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.0741%" y="485" width="0.0823%" height="15" fill="rgb(235,100,37)" fg:x="900" fg:w="1"/><text x="74.3241%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.1564%" y="501" width="0.0823%" height="15" fill="rgb(225,87,19)" fg:x="901" fg:w="1"/><text x="74.4064%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.1564%" y="485" width="0.0823%" height="15" fill="rgb(217,152,17)" fg:x="901" fg:w="1"/><text x="74.4064%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.1564%" y="469" width="0.0823%" height="15" fill="rgb(235,72,13)" fg:x="901" fg:w="1"/><text x="74.4064%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.1564%" y="453" width="0.0823%" height="15" fill="rgb(233,140,18)" fg:x="901" fg:w="1"/><text x="74.4064%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.1564%" y="437" width="0.0823%" height="15" fill="rgb(207,212,28)" fg:x="901" fg:w="1"/><text x="74.4064%" y="447.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="73.9918%" y="613" width="0.3292%" height="15" fill="rgb(220,130,25)" fg:x="899" fg:w="4"/><text x="74.2418%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.25%)</title><rect x="74.0741%" y="597" width="0.2469%" height="15" fill="rgb(205,55,34)" fg:x="900" fg:w="3"/><text x="74.3241%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="74.0741%" y="581" width="0.2469%" height="15" fill="rgb(237,54,35)" fg:x="900" fg:w="3"/><text x="74.3241%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="74.0741%" y="565" width="0.2469%" height="15" fill="rgb(208,67,23)" fg:x="900" fg:w="3"/><text x="74.3241%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="74.0741%" y="549" width="0.2469%" height="15" fill="rgb(206,207,50)" fg:x="900" fg:w="3"/><text x="74.3241%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="74.0741%" y="533" width="0.2469%" height="15" fill="rgb(213,211,42)" fg:x="900" fg:w="3"/><text x="74.3241%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.25%)</title><rect x="74.0741%" y="517" width="0.2469%" height="15" fill="rgb(252,197,50)" fg:x="900" fg:w="3"/><text x="74.3241%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.2387%" y="501" width="0.0823%" height="15" fill="rgb(251,211,41)" fg:x="902" fg:w="1"/><text x="74.4887%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2387%" y="485" width="0.0823%" height="15" fill="rgb(229,211,5)" fg:x="902" fg:w="1"/><text x="74.4887%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2387%" y="469" width="0.0823%" height="15" fill="rgb(239,36,31)" fg:x="902" fg:w="1"/><text x="74.4887%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.41%)</title><rect x="73.9918%" y="629" width="0.4115%" height="15" fill="rgb(248,67,31)" fg:x="899" fg:w="5"/><text x="74.2418%" y="639.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="74.3210%" y="613" width="0.0823%" height="15" fill="rgb(249,55,44)" fg:x="903" fg:w="1"/><text x="74.5710%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.3210%" y="597" width="0.0823%" height="15" fill="rgb(216,82,12)" fg:x="903" fg:w="1"/><text x="74.5710%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.3210%" y="581" width="0.0823%" height="15" fill="rgb(242,174,1)" fg:x="903" fg:w="1"/><text x="74.5710%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="74.4033%" y="581" width="0.0823%" height="15" fill="rgb(208,120,29)" fg:x="904" fg:w="1"/><text x="74.6533%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="74.4033%" y="565" width="0.0823%" height="15" fill="rgb(221,105,43)" fg:x="904" fg:w="1"/><text x="74.6533%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="74.4033%" y="549" width="0.0823%" height="15" fill="rgb(234,124,22)" fg:x="904" fg:w="1"/><text x="74.6533%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.4033%" y="533" width="0.0823%" height="15" fill="rgb(212,23,30)" fg:x="904" fg:w="1"/><text x="74.6533%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.4033%" y="517" width="0.0823%" height="15" fill="rgb(219,122,53)" fg:x="904" fg:w="1"/><text x="74.6533%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.4033%" y="501" width="0.0823%" height="15" fill="rgb(248,84,24)" fg:x="904" fg:w="1"/><text x="74.6533%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.4033%" y="485" width="0.0823%" height="15" fill="rgb(245,115,18)" fg:x="904" fg:w="1"/><text x="74.6533%" y="495.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="74.4856%" y="565" width="0.1646%" height="15" fill="rgb(227,176,51)" fg:x="905" fg:w="2"/><text x="74.7356%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.4856%" y="549" width="0.1646%" height="15" fill="rgb(229,63,42)" fg:x="905" fg:w="2"/><text x="74.7356%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.4856%" y="533" width="0.1646%" height="15" fill="rgb(247,202,24)" fg:x="905" fg:w="2"/><text x="74.7356%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.5679%" y="517" width="0.0823%" height="15" fill="rgb(244,173,20)" fg:x="906" fg:w="1"/><text x="74.8179%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.5679%" y="501" width="0.0823%" height="15" fill="rgb(242,81,47)" fg:x="906" fg:w="1"/><text x="74.8179%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5679%" y="485" width="0.0823%" height="15" fill="rgb(231,185,54)" fg:x="906" fg:w="1"/><text x="74.8179%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5679%" y="469" width="0.0823%" height="15" fill="rgb(243,55,32)" fg:x="906" fg:w="1"/><text x="74.8179%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5679%" y="453" width="0.0823%" height="15" fill="rgb(208,167,19)" fg:x="906" fg:w="1"/><text x="74.8179%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (5 samples, 0.41%)</title><rect x="74.4033%" y="629" width="0.4115%" height="15" fill="rgb(231,72,35)" fg:x="904" fg:w="5"/><text x="74.6533%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.41%)</title><rect x="74.4033%" y="613" width="0.4115%" height="15" fill="rgb(250,173,51)" fg:x="904" fg:w="5"/><text x="74.6533%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="74.4033%" y="597" width="0.4115%" height="15" fill="rgb(209,5,22)" fg:x="904" fg:w="5"/><text x="74.6533%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.33%)</title><rect x="74.4856%" y="581" width="0.3292%" height="15" fill="rgb(250,174,19)" fg:x="905" fg:w="4"/><text x="74.7356%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.6502%" y="565" width="0.1646%" height="15" fill="rgb(217,3,49)" fg:x="907" fg:w="2"/><text x="74.9002%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.6502%" y="549" width="0.1646%" height="15" fill="rgb(218,225,5)" fg:x="907" fg:w="2"/><text x="74.9002%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="74.6502%" y="533" width="0.1646%" height="15" fill="rgb(236,89,11)" fg:x="907" fg:w="2"/><text x="74.9002%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.6502%" y="517" width="0.1646%" height="15" fill="rgb(206,33,28)" fg:x="907" fg:w="2"/><text x="74.9002%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.6502%" y="501" width="0.1646%" height="15" fill="rgb(241,56,42)" fg:x="907" fg:w="2"/><text x="74.9002%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.7325%" y="485" width="0.0823%" height="15" fill="rgb(222,44,11)" fg:x="908" fg:w="1"/><text x="74.9825%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.7325%" y="469" width="0.0823%" height="15" fill="rgb(234,111,20)" fg:x="908" fg:w="1"/><text x="74.9825%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.7325%" y="453" width="0.0823%" height="15" fill="rgb(237,77,6)" fg:x="908" fg:w="1"/><text x="74.9825%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.7325%" y="437" width="0.0823%" height="15" fill="rgb(235,111,23)" fg:x="908" fg:w="1"/><text x="74.9825%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.7325%" y="421" width="0.0823%" height="15" fill="rgb(251,135,29)" fg:x="908" fg:w="1"/><text x="74.9825%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.7325%" y="405" width="0.0823%" height="15" fill="rgb(217,57,1)" fg:x="908" fg:w="1"/><text x="74.9825%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7325%" y="389" width="0.0823%" height="15" fill="rgb(249,119,31)" fg:x="908" fg:w="1"/><text x="74.9825%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8148%" y="613" width="0.0823%" height="15" fill="rgb(233,164,33)" fg:x="909" fg:w="1"/><text x="75.0648%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (911 samples, 74.98%)</title><rect x="0.0000%" y="693" width="74.9794%" height="15" fill="rgb(250,217,43)" fg:x="0" fg:w="911"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (911 samples, 74.98%)</title><rect x="0.0000%" y="677" width="74.9794%" height="15" fill="rgb(232,154,50)" fg:x="0" fg:w="911"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (911 samples, 74.98%)</title><rect x="0.0000%" y="661" width="74.9794%" height="15" fill="rgb(227,190,8)" fg:x="0" fg:w="911"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (788 samples, 64.86%)</title><rect x="10.1235%" y="645" width="64.8560%" height="15" fill="rgb(209,217,32)" fg:x="123" fg:w="788"/><text x="10.3735%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="74.8148%" y="629" width="0.1646%" height="15" fill="rgb(243,203,50)" fg:x="909" fg:w="2"/><text x="75.0648%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="74.8971%" y="613" width="0.0823%" height="15" fill="rgb(232,152,27)" fg:x="910" fg:w="1"/><text x="75.1471%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.8971%" y="597" width="0.0823%" height="15" fill="rgb(240,34,29)" fg:x="910" fg:w="1"/><text x="75.1471%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8971%" y="581" width="0.0823%" height="15" fill="rgb(215,185,52)" fg:x="910" fg:w="1"/><text x="75.1471%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8971%" y="565" width="0.0823%" height="15" fill="rgb(240,89,49)" fg:x="910" fg:w="1"/><text x="75.1471%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.9794%" y="645" width="0.1646%" height="15" fill="rgb(225,12,52)" fg:x="911" fg:w="2"/><text x="75.2294%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (2 samples, 0.16%)</title><rect x="74.9794%" y="629" width="0.1646%" height="15" fill="rgb(239,128,45)" fg:x="911" fg:w="2"/><text x="75.2294%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.9794%" y="613" width="0.1646%" height="15" fill="rgb(211,78,47)" fg:x="911" fg:w="2"/><text x="75.2294%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="74.9794%" y="597" width="0.1646%" height="15" fill="rgb(232,31,21)" fg:x="911" fg:w="2"/><text x="75.2294%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.9794%" y="581" width="0.1646%" height="15" fill="rgb(222,168,14)" fg:x="911" fg:w="2"/><text x="75.2294%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.9794%" y="565" width="0.1646%" height="15" fill="rgb(209,128,24)" fg:x="911" fg:w="2"/><text x="75.2294%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.9794%" y="549" width="0.1646%" height="15" fill="rgb(249,35,13)" fg:x="911" fg:w="2"/><text x="75.2294%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0617%" y="533" width="0.0823%" height="15" fill="rgb(218,7,2)" fg:x="912" fg:w="1"/><text x="75.3117%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (2 samples, 0.16%)</title><rect x="75.1440%" y="645" width="0.1646%" height="15" fill="rgb(238,107,27)" fg:x="913" fg:w="2"/><text x="75.3940%" y="655.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (2 samples, 0.16%)</title><rect x="75.1440%" y="629" width="0.1646%" height="15" fill="rgb(217,88,38)" fg:x="913" fg:w="2"/><text x="75.3940%" y="639.50"></text></g><g><title>engine::session::Session::new (2 samples, 0.16%)</title><rect x="75.1440%" y="613" width="0.1646%" height="15" fill="rgb(230,207,0)" fg:x="913" fg:w="2"/><text x="75.3940%" y="623.50"></text></g><g><title>engine::session::Session::initialize (2 samples, 0.16%)</title><rect x="75.1440%" y="597" width="0.1646%" height="15" fill="rgb(249,64,54)" fg:x="913" fg:w="2"/><text x="75.3940%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (2 samples, 0.16%)</title><rect x="75.1440%" y="581" width="0.1646%" height="15" fill="rgb(231,7,11)" fg:x="913" fg:w="2"/><text x="75.3940%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="75.1440%" y="565" width="0.1646%" height="15" fill="rgb(205,149,21)" fg:x="913" fg:w="2"/><text x="75.3940%" y="575.50"></text></g><g><title>libloading::safe::Library::new (1 samples, 0.08%)</title><rect x="75.2263%" y="549" width="0.0823%" height="15" fill="rgb(215,126,34)" fg:x="914" fg:w="1"/><text x="75.4763%" y="559.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="75.2263%" y="533" width="0.0823%" height="15" fill="rgb(241,132,45)" fg:x="914" fg:w="1"/><text x="75.4763%" y="543.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="75.2263%" y="517" width="0.0823%" height="15" fill="rgb(252,69,32)" fg:x="914" fg:w="1"/><text x="75.4763%" y="527.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="75.2263%" y="501" width="0.0823%" height="15" fill="rgb(232,204,19)" fg:x="914" fg:w="1"/><text x="75.4763%" y="511.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="75.2263%" y="485" width="0.0823%" height="15" fill="rgb(249,15,47)" fg:x="914" fg:w="1"/><text x="75.4763%" y="495.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="75.2263%" y="469" width="0.0823%" height="15" fill="rgb(209,227,23)" fg:x="914" fg:w="1"/><text x="75.4763%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="75.3086%" y="613" width="0.0823%" height="15" fill="rgb(248,92,24)" fg:x="915" fg:w="1"/><text x="75.5586%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3086%" y="597" width="0.0823%" height="15" fill="rgb(247,59,2)" fg:x="915" fg:w="1"/><text x="75.5586%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.3086%" y="581" width="0.0823%" height="15" fill="rgb(221,30,5)" fg:x="915" fg:w="1"/><text x="75.5586%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.3086%" y="565" width="0.0823%" height="15" fill="rgb(208,108,53)" fg:x="915" fg:w="1"/><text x="75.5586%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.3086%" y="549" width="0.0823%" height="15" fill="rgb(211,183,26)" fg:x="915" fg:w="1"/><text x="75.5586%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.3086%" y="533" width="0.0823%" height="15" fill="rgb(232,132,4)" fg:x="915" fg:w="1"/><text x="75.5586%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.3086%" y="517" width="0.0823%" height="15" fill="rgb(253,128,37)" fg:x="915" fg:w="1"/><text x="75.5586%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.3086%" y="501" width="0.0823%" height="15" fill="rgb(221,58,24)" fg:x="915" fg:w="1"/><text x="75.5586%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.3909%" y="549" width="0.0823%" height="15" fill="rgb(230,54,45)" fg:x="916" fg:w="1"/><text x="75.6409%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3909%" y="533" width="0.0823%" height="15" fill="rgb(254,21,18)" fg:x="916" fg:w="1"/><text x="75.6409%" y="543.50"></text></g><g><title>engine::session::Session::flush (3 samples, 0.25%)</title><rect x="75.3086%" y="629" width="0.2469%" height="15" fill="rgb(221,108,0)" fg:x="915" fg:w="3"/><text x="75.5586%" y="639.50"></text></g><g><title>engine::session::state::State::close (2 samples, 0.16%)</title><rect x="75.3909%" y="613" width="0.1646%" height="15" fill="rgb(206,95,1)" fg:x="916" fg:w="2"/><text x="75.6409%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (2 samples, 0.16%)</title><rect x="75.3909%" y="597" width="0.1646%" height="15" fill="rgb(237,52,5)" fg:x="916" fg:w="2"/><text x="75.6409%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (2 samples, 0.16%)</title><rect x="75.3909%" y="581" width="0.1646%" height="15" fill="rgb(218,150,34)" fg:x="916" fg:w="2"/><text x="75.6409%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (2 samples, 0.16%)</title><rect x="75.3909%" y="565" width="0.1646%" height="15" fill="rgb(235,194,28)" fg:x="916" fg:w="2"/><text x="75.6409%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4733%" y="549" width="0.0823%" height="15" fill="rgb(245,92,18)" fg:x="917" fg:w="1"/><text x="75.7233%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.4733%" y="533" width="0.0823%" height="15" fill="rgb(253,203,53)" fg:x="917" fg:w="1"/><text x="75.7233%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4733%" y="517" width="0.0823%" height="15" fill="rgb(249,185,47)" fg:x="917" fg:w="1"/><text x="75.7233%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4733%" y="501" width="0.0823%" height="15" fill="rgb(252,194,52)" fg:x="917" fg:w="1"/><text x="75.7233%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4733%" y="485" width="0.0823%" height="15" fill="rgb(210,53,36)" fg:x="917" fg:w="1"/><text x="75.7233%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="75.5556%" y="629" width="0.0823%" height="15" fill="rgb(237,37,25)" fg:x="918" fg:w="1"/><text x="75.8056%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="75.5556%" y="613" width="0.0823%" height="15" fill="rgb(242,116,27)" fg:x="918" fg:w="1"/><text x="75.8056%" y="623.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="75.6379%" y="581" width="0.0823%" height="15" fill="rgb(213,185,26)" fg:x="919" fg:w="1"/><text x="75.8879%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="75.6379%" y="597" width="0.1646%" height="15" fill="rgb(225,204,8)" fg:x="919" fg:w="2"/><text x="75.8879%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.7202%" y="581" width="0.0823%" height="15" fill="rgb(254,111,37)" fg:x="920" fg:w="1"/><text x="75.9702%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.7202%" y="565" width="0.0823%" height="15" fill="rgb(242,35,9)" fg:x="920" fg:w="1"/><text x="75.9702%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.7202%" y="549" width="0.0823%" height="15" fill="rgb(232,138,49)" fg:x="920" fg:w="1"/><text x="75.9702%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7202%" y="533" width="0.0823%" height="15" fill="rgb(247,56,4)" fg:x="920" fg:w="1"/><text x="75.9702%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.7202%" y="517" width="0.0823%" height="15" fill="rgb(226,179,17)" fg:x="920" fg:w="1"/><text x="75.9702%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7202%" y="501" width="0.0823%" height="15" fill="rgb(216,163,45)" fg:x="920" fg:w="1"/><text x="75.9702%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.7202%" y="485" width="0.0823%" height="15" fill="rgb(211,157,3)" fg:x="920" fg:w="1"/><text x="75.9702%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.7202%" y="469" width="0.0823%" height="15" fill="rgb(234,44,20)" fg:x="920" fg:w="1"/><text x="75.9702%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7202%" y="453" width="0.0823%" height="15" fill="rgb(254,138,23)" fg:x="920" fg:w="1"/><text x="75.9702%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.7202%" y="437" width="0.0823%" height="15" fill="rgb(206,119,39)" fg:x="920" fg:w="1"/><text x="75.9702%" y="447.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.33%)</title><rect x="75.6379%" y="629" width="0.3292%" height="15" fill="rgb(231,105,52)" fg:x="919" fg:w="4"/><text x="75.8879%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="75.6379%" y="613" width="0.3292%" height="15" fill="rgb(250,20,5)" fg:x="919" fg:w="4"/><text x="75.8879%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="75.8025%" y="597" width="0.1646%" height="15" fill="rgb(215,198,30)" fg:x="921" fg:w="2"/><text x="76.0525%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="75.8025%" y="581" width="0.1646%" height="15" fill="rgb(246,142,8)" fg:x="921" fg:w="2"/><text x="76.0525%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="75.8025%" y="565" width="0.1646%" height="15" fill="rgb(243,26,38)" fg:x="921" fg:w="2"/><text x="76.0525%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="75.8025%" y="549" width="0.1646%" height="15" fill="rgb(205,133,28)" fg:x="921" fg:w="2"/><text x="76.0525%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="75.8025%" y="533" width="0.1646%" height="15" fill="rgb(212,34,0)" fg:x="921" fg:w="2"/><text x="76.0525%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.8025%" y="517" width="0.1646%" height="15" fill="rgb(251,226,22)" fg:x="921" fg:w="2"/><text x="76.0525%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.8025%" y="501" width="0.1646%" height="15" fill="rgb(252,119,9)" fg:x="921" fg:w="2"/><text x="76.0525%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.8025%" y="485" width="0.1646%" height="15" fill="rgb(213,150,50)" fg:x="921" fg:w="2"/><text x="76.0525%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.8025%" y="469" width="0.1646%" height="15" fill="rgb(212,24,39)" fg:x="921" fg:w="2"/><text x="76.0525%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="75.8025%" y="453" width="0.1646%" height="15" fill="rgb(213,46,39)" fg:x="921" fg:w="2"/><text x="76.0525%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.8025%" y="437" width="0.1646%" height="15" fill="rgb(239,106,12)" fg:x="921" fg:w="2"/><text x="76.0525%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.8025%" y="421" width="0.1646%" height="15" fill="rgb(249,229,21)" fg:x="921" fg:w="2"/><text x="76.0525%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.8025%" y="405" width="0.1646%" height="15" fill="rgb(212,158,3)" fg:x="921" fg:w="2"/><text x="76.0525%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8848%" y="389" width="0.0823%" height="15" fill="rgb(253,26,48)" fg:x="922" fg:w="1"/><text x="76.1348%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8848%" y="373" width="0.0823%" height="15" fill="rgb(238,178,20)" fg:x="922" fg:w="1"/><text x="76.1348%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.8848%" y="357" width="0.0823%" height="15" fill="rgb(208,86,15)" fg:x="922" fg:w="1"/><text x="76.1348%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.8848%" y="341" width="0.0823%" height="15" fill="rgb(239,42,53)" fg:x="922" fg:w="1"/><text x="76.1348%" y="351.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="75.9671%" y="613" width="0.0823%" height="15" fill="rgb(245,226,8)" fg:x="923" fg:w="1"/><text x="76.2171%" y="623.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="75.9671%" y="597" width="0.0823%" height="15" fill="rgb(216,176,32)" fg:x="923" fg:w="1"/><text x="76.2171%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.9671%" y="581" width="0.0823%" height="15" fill="rgb(231,186,21)" fg:x="923" fg:w="1"/><text x="76.2171%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9671%" y="565" width="0.0823%" height="15" fill="rgb(205,95,49)" fg:x="923" fg:w="1"/><text x="76.2171%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0494%" y="581" width="0.0823%" height="15" fill="rgb(217,145,8)" fg:x="924" fg:w="1"/><text x="76.2994%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="76.1317%" y="565" width="0.0823%" height="15" fill="rgb(239,144,48)" fg:x="925" fg:w="1"/><text x="76.3817%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="76.1317%" y="549" width="0.0823%" height="15" fill="rgb(214,189,23)" fg:x="925" fg:w="1"/><text x="76.3817%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.1317%" y="533" width="0.0823%" height="15" fill="rgb(229,157,17)" fg:x="925" fg:w="1"/><text x="76.3817%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.1317%" y="517" width="0.0823%" height="15" fill="rgb(230,5,48)" fg:x="925" fg:w="1"/><text x="76.3817%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.1317%" y="501" width="0.0823%" height="15" fill="rgb(224,156,48)" fg:x="925" fg:w="1"/><text x="76.3817%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1317%" y="485" width="0.0823%" height="15" fill="rgb(223,14,29)" fg:x="925" fg:w="1"/><text x="76.3817%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.2140%" y="549" width="0.0823%" height="15" fill="rgb(229,96,36)" fg:x="926" fg:w="1"/><text x="76.4640%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.2140%" y="533" width="0.0823%" height="15" fill="rgb(231,102,53)" fg:x="926" fg:w="1"/><text x="76.4640%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="76.2140%" y="517" width="0.0823%" height="15" fill="rgb(210,77,38)" fg:x="926" fg:w="1"/><text x="76.4640%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="76.2140%" y="501" width="0.0823%" height="15" fill="rgb(235,131,6)" fg:x="926" fg:w="1"/><text x="76.4640%" y="511.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="76.2140%" y="485" width="0.0823%" height="15" fill="rgb(252,55,38)" fg:x="926" fg:w="1"/><text x="76.4640%" y="495.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.2140%" y="469" width="0.0823%" height="15" fill="rgb(246,38,14)" fg:x="926" fg:w="1"/><text x="76.4640%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2140%" y="453" width="0.0823%" height="15" fill="rgb(242,27,5)" fg:x="926" fg:w="1"/><text x="76.4640%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.2140%" y="437" width="0.0823%" height="15" fill="rgb(228,65,35)" fg:x="926" fg:w="1"/><text x="76.4640%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2140%" y="421" width="0.0823%" height="15" fill="rgb(245,93,11)" fg:x="926" fg:w="1"/><text x="76.4640%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.2140%" y="405" width="0.0823%" height="15" fill="rgb(213,1,31)" fg:x="926" fg:w="1"/><text x="76.4640%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.2140%" y="389" width="0.0823%" height="15" fill="rgb(237,205,14)" fg:x="926" fg:w="1"/><text x="76.4640%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="76.2140%" y="373" width="0.0823%" height="15" fill="rgb(232,118,45)" fg:x="926" fg:w="1"/><text x="76.4640%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.33%)</title><rect x="76.0494%" y="613" width="0.3292%" height="15" fill="rgb(218,5,6)" fg:x="924" fg:w="4"/><text x="76.2994%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="76.0494%" y="597" width="0.3292%" height="15" fill="rgb(251,87,51)" fg:x="924" fg:w="4"/><text x="76.2994%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.25%)</title><rect x="76.1317%" y="581" width="0.2469%" height="15" fill="rgb(207,225,20)" fg:x="925" fg:w="3"/><text x="76.3817%" y="591.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="76.2140%" y="565" width="0.1646%" height="15" fill="rgb(222,78,54)" fg:x="926" fg:w="2"/><text x="76.4640%" y="575.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="76.2963%" y="549" width="0.0823%" height="15" fill="rgb(232,85,16)" fg:x="927" fg:w="1"/><text x="76.5463%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="76.2963%" y="533" width="0.0823%" height="15" fill="rgb(244,25,33)" fg:x="927" fg:w="1"/><text x="76.5463%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="76.2963%" y="517" width="0.0823%" height="15" fill="rgb(233,24,36)" fg:x="927" fg:w="1"/><text x="76.5463%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="76.2963%" y="501" width="0.0823%" height="15" fill="rgb(253,49,54)" fg:x="927" fg:w="1"/><text x="76.5463%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="76.2963%" y="485" width="0.0823%" height="15" fill="rgb(245,12,22)" fg:x="927" fg:w="1"/><text x="76.5463%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2963%" y="469" width="0.0823%" height="15" fill="rgb(253,141,28)" fg:x="927" fg:w="1"/><text x="76.5463%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.3786%" y="485" width="0.0823%" height="15" fill="rgb(225,207,27)" fg:x="928" fg:w="1"/><text x="76.6286%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.3786%" y="469" width="0.0823%" height="15" fill="rgb(220,84,2)" fg:x="928" fg:w="1"/><text x="76.6286%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.3786%" y="453" width="0.0823%" height="15" fill="rgb(224,37,37)" fg:x="928" fg:w="1"/><text x="76.6286%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.3786%" y="437" width="0.0823%" height="15" fill="rgb(220,143,18)" fg:x="928" fg:w="1"/><text x="76.6286%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="76.3786%" y="501" width="0.1646%" height="15" fill="rgb(210,88,33)" fg:x="928" fg:w="2"/><text x="76.6286%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.4609%" y="485" width="0.0823%" height="15" fill="rgb(219,87,51)" fg:x="929" fg:w="1"/><text x="76.7109%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.5432%" y="485" width="0.0823%" height="15" fill="rgb(211,7,35)" fg:x="930" fg:w="1"/><text x="76.7932%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.5432%" y="469" width="0.0823%" height="15" fill="rgb(232,77,2)" fg:x="930" fg:w="1"/><text x="76.7932%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.6255%" y="469" width="0.0823%" height="15" fill="rgb(249,94,25)" fg:x="931" fg:w="1"/><text x="76.8755%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.6255%" y="453" width="0.0823%" height="15" fill="rgb(215,112,2)" fg:x="931" fg:w="1"/><text x="76.8755%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.6255%" y="437" width="0.0823%" height="15" fill="rgb(226,115,48)" fg:x="931" fg:w="1"/><text x="76.8755%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.6255%" y="421" width="0.0823%" height="15" fill="rgb(249,196,10)" fg:x="931" fg:w="1"/><text x="76.8755%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7078%" y="469" width="0.0823%" height="15" fill="rgb(237,109,14)" fg:x="932" fg:w="1"/><text x="76.9578%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.7078%" y="453" width="0.0823%" height="15" fill="rgb(217,103,53)" fg:x="932" fg:w="1"/><text x="76.9578%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.7078%" y="437" width="0.0823%" height="15" fill="rgb(244,137,9)" fg:x="932" fg:w="1"/><text x="76.9578%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="76.3786%" y="517" width="0.4938%" height="15" fill="rgb(227,201,3)" fg:x="928" fg:w="6"/><text x="76.6286%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="76.5432%" y="501" width="0.3292%" height="15" fill="rgb(243,94,6)" fg:x="930" fg:w="4"/><text x="76.7932%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="76.6255%" y="485" width="0.2469%" height="15" fill="rgb(235,118,5)" fg:x="931" fg:w="3"/><text x="76.8755%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.7901%" y="469" width="0.0823%" height="15" fill="rgb(247,10,30)" fg:x="933" fg:w="1"/><text x="77.0401%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.7901%" y="453" width="0.0823%" height="15" fill="rgb(205,26,28)" fg:x="933" fg:w="1"/><text x="77.0401%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.7901%" y="437" width="0.0823%" height="15" fill="rgb(206,99,35)" fg:x="933" fg:w="1"/><text x="77.0401%" y="447.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.58%)</title><rect x="76.3786%" y="613" width="0.5761%" height="15" fill="rgb(238,130,40)" fg:x="928" fg:w="7"/><text x="76.6286%" y="623.50"></text></g><g><title>engine::session::Session::save_changes (7 samples, 0.58%)</title><rect x="76.3786%" y="597" width="0.5761%" height="15" fill="rgb(224,126,31)" fg:x="928" fg:w="7"/><text x="76.6286%" y="607.50"></text></g><g><title>engine::session::state::State::close (7 samples, 0.58%)</title><rect x="76.3786%" y="581" width="0.5761%" height="15" fill="rgb(254,105,17)" fg:x="928" fg:w="7"/><text x="76.6286%" y="591.50"></text></g><g><title>engine::session::state::State::flush_entities (7 samples, 0.58%)</title><rect x="76.3786%" y="565" width="0.5761%" height="15" fill="rgb(216,87,36)" fg:x="928" fg:w="7"/><text x="76.6286%" y="575.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (7 samples, 0.58%)</title><rect x="76.3786%" y="549" width="0.5761%" height="15" fill="rgb(240,21,12)" fg:x="928" fg:w="7"/><text x="76.6286%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (7 samples, 0.58%)</title><rect x="76.3786%" y="533" width="0.5761%" height="15" fill="rgb(245,192,34)" fg:x="928" fg:w="7"/><text x="76.6286%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="76.8724%" y="517" width="0.0823%" height="15" fill="rgb(226,100,49)" fg:x="934" fg:w="1"/><text x="77.1224%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8724%" y="501" width="0.0823%" height="15" fill="rgb(245,188,27)" fg:x="934" fg:w="1"/><text x="77.1224%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.8724%" y="485" width="0.0823%" height="15" fill="rgb(212,170,8)" fg:x="934" fg:w="1"/><text x="77.1224%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.8724%" y="469" width="0.0823%" height="15" fill="rgb(217,113,29)" fg:x="934" fg:w="1"/><text x="77.1224%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="76.8724%" y="453" width="0.0823%" height="15" fill="rgb(237,30,3)" fg:x="934" fg:w="1"/><text x="77.1224%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.8724%" y="437" width="0.0823%" height="15" fill="rgb(227,19,28)" fg:x="934" fg:w="1"/><text x="77.1224%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.8724%" y="421" width="0.0823%" height="15" fill="rgb(239,172,45)" fg:x="934" fg:w="1"/><text x="77.1224%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.8724%" y="405" width="0.0823%" height="15" fill="rgb(254,55,39)" fg:x="934" fg:w="1"/><text x="77.1224%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8724%" y="389" width="0.0823%" height="15" fill="rgb(249,208,12)" fg:x="934" fg:w="1"/><text x="77.1224%" y="399.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="76.9547%" y="581" width="0.0823%" height="15" fill="rgb(240,52,13)" fg:x="935" fg:w="1"/><text x="77.2047%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="76.9547%" y="565" width="0.0823%" height="15" fill="rgb(252,149,13)" fg:x="935" fg:w="1"/><text x="77.2047%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.9547%" y="549" width="0.0823%" height="15" fill="rgb(232,81,48)" fg:x="935" fg:w="1"/><text x="77.2047%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.9547%" y="533" width="0.0823%" height="15" fill="rgb(222,144,2)" fg:x="935" fg:w="1"/><text x="77.2047%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.9547%" y="517" width="0.0823%" height="15" fill="rgb(216,81,32)" fg:x="935" fg:w="1"/><text x="77.2047%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9547%" y="501" width="0.0823%" height="15" fill="rgb(244,78,51)" fg:x="935" fg:w="1"/><text x="77.2047%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9547%" y="485" width="0.0823%" height="15" fill="rgb(217,66,21)" fg:x="935" fg:w="1"/><text x="77.2047%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9547%" y="469" width="0.0823%" height="15" fill="rgb(247,101,42)" fg:x="935" fg:w="1"/><text x="77.2047%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9547%" y="453" width="0.0823%" height="15" fill="rgb(227,81,39)" fg:x="935" fg:w="1"/><text x="77.2047%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.9547%" y="437" width="0.0823%" height="15" fill="rgb(220,223,44)" fg:x="935" fg:w="1"/><text x="77.2047%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.9547%" y="421" width="0.0823%" height="15" fill="rgb(205,218,2)" fg:x="935" fg:w="1"/><text x="77.2047%" y="431.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="76.9547%" y="613" width="0.1646%" height="15" fill="rgb(212,207,28)" fg:x="935" fg:w="2"/><text x="77.2047%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="76.9547%" y="597" width="0.1646%" height="15" fill="rgb(224,12,41)" fg:x="935" fg:w="2"/><text x="77.2047%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="77.0370%" y="581" width="0.0823%" height="15" fill="rgb(216,118,12)" fg:x="936" fg:w="1"/><text x="77.2870%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="77.0370%" y="565" width="0.0823%" height="15" fill="rgb(252,97,46)" fg:x="936" fg:w="1"/><text x="77.2870%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.0370%" y="549" width="0.0823%" height="15" fill="rgb(244,206,19)" fg:x="936" fg:w="1"/><text x="77.2870%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.0370%" y="533" width="0.0823%" height="15" fill="rgb(231,84,31)" fg:x="936" fg:w="1"/><text x="77.2870%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.0370%" y="517" width="0.0823%" height="15" fill="rgb(244,133,0)" fg:x="936" fg:w="1"/><text x="77.2870%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.0370%" y="501" width="0.0823%" height="15" fill="rgb(223,15,50)" fg:x="936" fg:w="1"/><text x="77.2870%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.0370%" y="485" width="0.0823%" height="15" fill="rgb(250,118,49)" fg:x="936" fg:w="1"/><text x="77.2870%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.1193%" y="597" width="0.0823%" height="15" fill="rgb(248,25,38)" fg:x="937" fg:w="1"/><text x="77.3693%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.1193%" y="581" width="0.0823%" height="15" fill="rgb(215,70,14)" fg:x="937" fg:w="1"/><text x="77.3693%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.1193%" y="565" width="0.0823%" height="15" fill="rgb(215,28,15)" fg:x="937" fg:w="1"/><text x="77.3693%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.1193%" y="549" width="0.0823%" height="15" fill="rgb(243,6,28)" fg:x="937" fg:w="1"/><text x="77.3693%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1193%" y="533" width="0.0823%" height="15" fill="rgb(222,130,1)" fg:x="937" fg:w="1"/><text x="77.3693%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.1193%" y="517" width="0.0823%" height="15" fill="rgb(236,166,44)" fg:x="937" fg:w="1"/><text x="77.3693%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.1193%" y="501" width="0.0823%" height="15" fill="rgb(221,108,14)" fg:x="937" fg:w="1"/><text x="77.3693%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1193%" y="485" width="0.0823%" height="15" fill="rgb(252,3,45)" fg:x="937" fg:w="1"/><text x="77.3693%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (16 samples, 1.32%)</title><rect x="75.9671%" y="629" width="1.3169%" height="15" fill="rgb(237,68,30)" fg:x="923" fg:w="16"/><text x="76.2171%" y="639.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="77.1193%" y="613" width="0.1646%" height="15" fill="rgb(211,79,22)" fg:x="937" fg:w="2"/><text x="77.3693%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="77.2016%" y="597" width="0.0823%" height="15" fill="rgb(252,185,21)" fg:x="938" fg:w="1"/><text x="77.4516%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="77.2016%" y="581" width="0.0823%" height="15" fill="rgb(225,189,26)" fg:x="938" fg:w="1"/><text x="77.4516%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.2016%" y="565" width="0.0823%" height="15" fill="rgb(241,30,40)" fg:x="938" fg:w="1"/><text x="77.4516%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.2016%" y="549" width="0.0823%" height="15" fill="rgb(235,215,44)" fg:x="938" fg:w="1"/><text x="77.4516%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2016%" y="533" width="0.0823%" height="15" fill="rgb(205,8,29)" fg:x="938" fg:w="1"/><text x="77.4516%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="77.2840%" y="629" width="0.0823%" height="15" fill="rgb(241,137,42)" fg:x="939" fg:w="1"/><text x="77.5340%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="77.2840%" y="613" width="0.0823%" height="15" fill="rgb(237,155,2)" fg:x="939" fg:w="1"/><text x="77.5340%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.2840%" y="597" width="0.0823%" height="15" fill="rgb(245,29,42)" fg:x="939" fg:w="1"/><text x="77.5340%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.2840%" y="581" width="0.0823%" height="15" fill="rgb(234,101,35)" fg:x="939" fg:w="1"/><text x="77.5340%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.2840%" y="565" width="0.0823%" height="15" fill="rgb(228,64,37)" fg:x="939" fg:w="1"/><text x="77.5340%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="77.2840%" y="549" width="0.0823%" height="15" fill="rgb(217,214,36)" fg:x="939" fg:w="1"/><text x="77.5340%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.2840%" y="533" width="0.0823%" height="15" fill="rgb(243,70,3)" fg:x="939" fg:w="1"/><text x="77.5340%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.2840%" y="517" width="0.0823%" height="15" fill="rgb(253,158,52)" fg:x="939" fg:w="1"/><text x="77.5340%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2840%" y="501" width="0.0823%" height="15" fill="rgb(234,111,54)" fg:x="939" fg:w="1"/><text x="77.5340%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="77.3663%" y="629" width="0.0823%" height="15" fill="rgb(217,70,32)" fg:x="940" fg:w="1"/><text x="77.6163%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="77.3663%" y="613" width="0.0823%" height="15" fill="rgb(234,18,33)" fg:x="940" fg:w="1"/><text x="77.6163%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="77.3663%" y="597" width="0.0823%" height="15" fill="rgb(234,12,49)" fg:x="940" fg:w="1"/><text x="77.6163%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="77.3663%" y="581" width="0.0823%" height="15" fill="rgb(236,10,21)" fg:x="940" fg:w="1"/><text x="77.6163%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="77.3663%" y="565" width="0.0823%" height="15" fill="rgb(248,182,45)" fg:x="940" fg:w="1"/><text x="77.6163%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="77.3663%" y="549" width="0.0823%" height="15" fill="rgb(217,95,36)" fg:x="940" fg:w="1"/><text x="77.6163%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.3663%" y="533" width="0.0823%" height="15" fill="rgb(212,110,31)" fg:x="940" fg:w="1"/><text x="77.6163%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="77.3663%" y="517" width="0.0823%" height="15" fill="rgb(206,32,53)" fg:x="940" fg:w="1"/><text x="77.6163%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3663%" y="501" width="0.0823%" height="15" fill="rgb(246,141,37)" fg:x="940" fg:w="1"/><text x="77.6163%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.3663%" y="485" width="0.0823%" height="15" fill="rgb(219,16,7)" fg:x="940" fg:w="1"/><text x="77.6163%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3663%" y="469" width="0.0823%" height="15" fill="rgb(230,205,45)" fg:x="940" fg:w="1"/><text x="77.6163%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5309%" y="597" width="0.0823%" height="15" fill="rgb(231,43,49)" fg:x="942" fg:w="1"/><text x="77.7809%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="77.6132%" y="549" width="0.0823%" height="15" fill="rgb(212,106,34)" fg:x="943" fg:w="1"/><text x="77.8632%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.6132%" y="533" width="0.0823%" height="15" fill="rgb(206,83,17)" fg:x="943" fg:w="1"/><text x="77.8632%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.6132%" y="517" width="0.0823%" height="15" fill="rgb(244,154,49)" fg:x="943" fg:w="1"/><text x="77.8632%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="77.6132%" y="581" width="0.1646%" height="15" fill="rgb(244,149,49)" fg:x="943" fg:w="2"/><text x="77.8632%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="77.6132%" y="565" width="0.1646%" height="15" fill="rgb(227,134,18)" fg:x="943" fg:w="2"/><text x="77.8632%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.6955%" y="549" width="0.0823%" height="15" fill="rgb(237,116,36)" fg:x="944" fg:w="1"/><text x="77.9455%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="77.6955%" y="533" width="0.0823%" height="15" fill="rgb(205,129,40)" fg:x="944" fg:w="1"/><text x="77.9455%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6955%" y="517" width="0.0823%" height="15" fill="rgb(236,178,4)" fg:x="944" fg:w="1"/><text x="77.9455%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.6955%" y="501" width="0.0823%" height="15" fill="rgb(251,76,53)" fg:x="944" fg:w="1"/><text x="77.9455%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6955%" y="485" width="0.0823%" height="15" fill="rgb(242,92,40)" fg:x="944" fg:w="1"/><text x="77.9455%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.6955%" y="469" width="0.0823%" height="15" fill="rgb(209,45,30)" fg:x="944" fg:w="1"/><text x="77.9455%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.6955%" y="453" width="0.0823%" height="15" fill="rgb(218,157,36)" fg:x="944" fg:w="1"/><text x="77.9455%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6955%" y="437" width="0.0823%" height="15" fill="rgb(222,186,16)" fg:x="944" fg:w="1"/><text x="77.9455%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="77.5309%" y="613" width="0.3292%" height="15" fill="rgb(254,72,35)" fg:x="942" fg:w="4"/><text x="77.7809%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="77.6132%" y="597" width="0.2469%" height="15" fill="rgb(224,25,35)" fg:x="943" fg:w="3"/><text x="77.8632%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="77.7778%" y="581" width="0.0823%" height="15" fill="rgb(206,135,52)" fg:x="945" fg:w="1"/><text x="78.0278%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.7778%" y="565" width="0.0823%" height="15" fill="rgb(229,174,47)" fg:x="945" fg:w="1"/><text x="78.0278%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.7778%" y="549" width="0.0823%" height="15" fill="rgb(242,184,21)" fg:x="945" fg:w="1"/><text x="78.0278%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="77.7778%" y="533" width="0.0823%" height="15" fill="rgb(213,22,45)" fg:x="945" fg:w="1"/><text x="78.0278%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (32 samples, 2.63%)</title><rect x="75.3086%" y="645" width="2.6337%" height="15" fill="rgb(237,81,54)" fg:x="915" fg:w="32"/><text x="75.5586%" y="655.50">&lt;t..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (6 samples, 0.49%)</title><rect x="77.4486%" y="629" width="0.4938%" height="15" fill="rgb(248,177,18)" fg:x="941" fg:w="6"/><text x="77.6986%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="77.8601%" y="613" width="0.0823%" height="15" fill="rgb(254,31,16)" fg:x="946" fg:w="1"/><text x="78.1101%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.0247%" y="485" width="0.0823%" height="15" fill="rgb(235,20,31)" fg:x="948" fg:w="1"/><text x="78.2747%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.0247%" y="533" width="0.1646%" height="15" fill="rgb(240,56,43)" fg:x="948" fg:w="2"/><text x="78.2747%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.0247%" y="517" width="0.1646%" height="15" fill="rgb(237,197,51)" fg:x="948" fg:w="2"/><text x="78.2747%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.0247%" y="501" width="0.1646%" height="15" fill="rgb(241,162,44)" fg:x="948" fg:w="2"/><text x="78.2747%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1070%" y="485" width="0.0823%" height="15" fill="rgb(224,23,20)" fg:x="949" fg:w="1"/><text x="78.3570%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1070%" y="469" width="0.0823%" height="15" fill="rgb(250,109,34)" fg:x="949" fg:w="1"/><text x="78.3570%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.1070%" y="453" width="0.0823%" height="15" fill="rgb(214,175,50)" fg:x="949" fg:w="1"/><text x="78.3570%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.25%)</title><rect x="78.0247%" y="565" width="0.2469%" height="15" fill="rgb(213,182,5)" fg:x="948" fg:w="3"/><text x="78.2747%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="78.0247%" y="549" width="0.2469%" height="15" fill="rgb(209,199,19)" fg:x="948" fg:w="3"/><text x="78.2747%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.1893%" y="533" width="0.0823%" height="15" fill="rgb(236,224,42)" fg:x="950" fg:w="1"/><text x="78.4393%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.1893%" y="517" width="0.0823%" height="15" fill="rgb(246,226,29)" fg:x="950" fg:w="1"/><text x="78.4393%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.1893%" y="501" width="0.0823%" height="15" fill="rgb(227,223,11)" fg:x="950" fg:w="1"/><text x="78.4393%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.2716%" y="565" width="0.0823%" height="15" fill="rgb(219,7,51)" fg:x="951" fg:w="1"/><text x="78.5216%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.2716%" y="549" width="0.0823%" height="15" fill="rgb(245,167,10)" fg:x="951" fg:w="1"/><text x="78.5216%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.2716%" y="533" width="0.0823%" height="15" fill="rgb(237,224,16)" fg:x="951" fg:w="1"/><text x="78.5216%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.2716%" y="517" width="0.0823%" height="15" fill="rgb(226,132,13)" fg:x="951" fg:w="1"/><text x="78.5216%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2716%" y="501" width="0.0823%" height="15" fill="rgb(214,140,3)" fg:x="951" fg:w="1"/><text x="78.5216%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3539%" y="485" width="0.0823%" height="15" fill="rgb(221,177,4)" fg:x="952" fg:w="1"/><text x="78.6039%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="78.3539%" y="549" width="0.1646%" height="15" fill="rgb(238,139,3)" fg:x="952" fg:w="2"/><text x="78.6039%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.3539%" y="533" width="0.1646%" height="15" fill="rgb(216,17,39)" fg:x="952" fg:w="2"/><text x="78.6039%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="78.3539%" y="517" width="0.1646%" height="15" fill="rgb(238,120,9)" fg:x="952" fg:w="2"/><text x="78.6039%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.3539%" y="501" width="0.1646%" height="15" fill="rgb(244,92,53)" fg:x="952" fg:w="2"/><text x="78.6039%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.4362%" y="485" width="0.0823%" height="15" fill="rgb(224,148,33)" fg:x="953" fg:w="1"/><text x="78.6862%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.4362%" y="469" width="0.0823%" height="15" fill="rgb(243,6,36)" fg:x="953" fg:w="1"/><text x="78.6862%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.5185%" y="517" width="0.1646%" height="15" fill="rgb(230,102,11)" fg:x="954" fg:w="2"/><text x="78.7685%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6008%" y="501" width="0.0823%" height="15" fill="rgb(234,148,36)" fg:x="955" fg:w="1"/><text x="78.8508%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="78.6008%" y="485" width="0.0823%" height="15" fill="rgb(251,153,25)" fg:x="955" fg:w="1"/><text x="78.8508%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6831%" y="341" width="0.0823%" height="15" fill="rgb(215,129,8)" fg:x="956" fg:w="1"/><text x="78.9331%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6831%" y="325" width="0.0823%" height="15" fill="rgb(224,128,35)" fg:x="956" fg:w="1"/><text x="78.9331%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6831%" y="309" width="0.0823%" height="15" fill="rgb(237,56,52)" fg:x="956" fg:w="1"/><text x="78.9331%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="78.6831%" y="501" width="0.1646%" height="15" fill="rgb(234,213,19)" fg:x="956" fg:w="2"/><text x="78.9331%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.6831%" y="485" width="0.1646%" height="15" fill="rgb(252,82,23)" fg:x="956" fg:w="2"/><text x="78.9331%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.6831%" y="469" width="0.1646%" height="15" fill="rgb(254,201,21)" fg:x="956" fg:w="2"/><text x="78.9331%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.6831%" y="453" width="0.1646%" height="15" fill="rgb(250,186,11)" fg:x="956" fg:w="2"/><text x="78.9331%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.6831%" y="437" width="0.1646%" height="15" fill="rgb(211,174,5)" fg:x="956" fg:w="2"/><text x="78.9331%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.6831%" y="421" width="0.1646%" height="15" fill="rgb(214,121,10)" fg:x="956" fg:w="2"/><text x="78.9331%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.6831%" y="405" width="0.1646%" height="15" fill="rgb(241,66,2)" fg:x="956" fg:w="2"/><text x="78.9331%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.6831%" y="389" width="0.1646%" height="15" fill="rgb(220,167,19)" fg:x="956" fg:w="2"/><text x="78.9331%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.6831%" y="373" width="0.1646%" height="15" fill="rgb(231,54,50)" fg:x="956" fg:w="2"/><text x="78.9331%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.6831%" y="357" width="0.1646%" height="15" fill="rgb(239,217,53)" fg:x="956" fg:w="2"/><text x="78.9331%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.7654%" y="341" width="0.0823%" height="15" fill="rgb(248,8,0)" fg:x="957" fg:w="1"/><text x="79.0154%" y="351.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="78.5185%" y="549" width="0.4115%" height="15" fill="rgb(229,118,37)" fg:x="954" fg:w="5"/><text x="78.7685%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="78.5185%" y="533" width="0.4115%" height="15" fill="rgb(253,223,43)" fg:x="954" fg:w="5"/><text x="78.7685%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.25%)</title><rect x="78.6831%" y="517" width="0.2469%" height="15" fill="rgb(211,77,36)" fg:x="956" fg:w="3"/><text x="78.9331%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8477%" y="501" width="0.0823%" height="15" fill="rgb(219,3,53)" fg:x="958" fg:w="1"/><text x="79.0977%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8477%" y="485" width="0.0823%" height="15" fill="rgb(244,45,42)" fg:x="958" fg:w="1"/><text x="79.0977%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="78.8477%" y="469" width="0.0823%" height="15" fill="rgb(225,95,27)" fg:x="958" fg:w="1"/><text x="79.0977%" y="479.50"></text></g><g><title>engine::session::Session::close (13 samples, 1.07%)</title><rect x="77.9424%" y="645" width="1.0700%" height="15" fill="rgb(207,74,8)" fg:x="947" fg:w="13"/><text x="78.1924%" y="655.50"></text></g><g><title>engine::session::state::State::close (13 samples, 1.07%)</title><rect x="77.9424%" y="629" width="1.0700%" height="15" fill="rgb(243,63,36)" fg:x="947" fg:w="13"/><text x="78.1924%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (13 samples, 1.07%)</title><rect x="77.9424%" y="613" width="1.0700%" height="15" fill="rgb(211,180,12)" fg:x="947" fg:w="13"/><text x="78.1924%" y="623.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (13 samples, 1.07%)</title><rect x="77.9424%" y="597" width="1.0700%" height="15" fill="rgb(254,166,49)" fg:x="947" fg:w="13"/><text x="78.1924%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (12 samples, 0.99%)</title><rect x="78.0247%" y="581" width="0.9877%" height="15" fill="rgb(205,19,0)" fg:x="948" fg:w="12"/><text x="78.2747%" y="591.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.66%)</title><rect x="78.3539%" y="565" width="0.6584%" height="15" fill="rgb(224,172,32)" fg:x="952" fg:w="8"/><text x="78.6039%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="78.9300%" y="549" width="0.0823%" height="15" fill="rgb(254,136,30)" fg:x="959" fg:w="1"/><text x="79.1800%" y="559.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="78.9300%" y="533" width="0.0823%" height="15" fill="rgb(246,19,35)" fg:x="959" fg:w="1"/><text x="79.1800%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.9300%" y="517" width="0.0823%" height="15" fill="rgb(219,24,36)" fg:x="959" fg:w="1"/><text x="79.1800%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9300%" y="501" width="0.0823%" height="15" fill="rgb(251,55,1)" fg:x="959" fg:w="1"/><text x="79.1800%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.9300%" y="485" width="0.0823%" height="15" fill="rgb(218,117,39)" fg:x="959" fg:w="1"/><text x="79.1800%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9300%" y="469" width="0.0823%" height="15" fill="rgb(248,169,11)" fg:x="959" fg:w="1"/><text x="79.1800%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.9300%" y="453" width="0.0823%" height="15" fill="rgb(244,40,44)" fg:x="959" fg:w="1"/><text x="79.1800%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9300%" y="437" width="0.0823%" height="15" fill="rgb(234,62,37)" fg:x="959" fg:w="1"/><text x="79.1800%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.9300%" y="421" width="0.0823%" height="15" fill="rgb(207,117,42)" fg:x="959" fg:w="1"/><text x="79.1800%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.9300%" y="405" width="0.0823%" height="15" fill="rgb(213,43,2)" fg:x="959" fg:w="1"/><text x="79.1800%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9300%" y="389" width="0.0823%" height="15" fill="rgb(244,202,51)" fg:x="959" fg:w="1"/><text x="79.1800%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.9300%" y="373" width="0.0823%" height="15" fill="rgb(253,174,46)" fg:x="959" fg:w="1"/><text x="79.1800%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9300%" y="357" width="0.0823%" height="15" fill="rgb(251,23,1)" fg:x="959" fg:w="1"/><text x="79.1800%" y="367.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0123%" y="549" width="0.0823%" height="15" fill="rgb(253,26,1)" fg:x="960" fg:w="1"/><text x="79.2623%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0123%" y="533" width="0.0823%" height="15" fill="rgb(216,89,31)" fg:x="960" fg:w="1"/><text x="79.2623%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="79.0947%" y="501" width="0.0823%" height="15" fill="rgb(209,109,5)" fg:x="961" fg:w="1"/><text x="79.3447%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="79.0947%" y="485" width="0.0823%" height="15" fill="rgb(229,63,13)" fg:x="961" fg:w="1"/><text x="79.3447%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="79.0947%" y="469" width="0.0823%" height="15" fill="rgb(238,137,54)" fg:x="961" fg:w="1"/><text x="79.3447%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0947%" y="453" width="0.0823%" height="15" fill="rgb(228,1,9)" fg:x="961" fg:w="1"/><text x="79.3447%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0947%" y="437" width="0.0823%" height="15" fill="rgb(249,120,48)" fg:x="961" fg:w="1"/><text x="79.3447%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0947%" y="421" width="0.0823%" height="15" fill="rgb(209,72,36)" fg:x="961" fg:w="1"/><text x="79.3447%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.0947%" y="405" width="0.0823%" height="15" fill="rgb(247,98,49)" fg:x="961" fg:w="1"/><text x="79.3447%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.0947%" y="389" width="0.0823%" height="15" fill="rgb(233,75,36)" fg:x="961" fg:w="1"/><text x="79.3447%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.0947%" y="373" width="0.0823%" height="15" fill="rgb(225,14,24)" fg:x="961" fg:w="1"/><text x="79.3447%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.0947%" y="357" width="0.0823%" height="15" fill="rgb(237,193,20)" fg:x="961" fg:w="1"/><text x="79.3447%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.0947%" y="341" width="0.0823%" height="15" fill="rgb(239,122,19)" fg:x="961" fg:w="1"/><text x="79.3447%" y="351.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="79.0947%" y="549" width="0.1646%" height="15" fill="rgb(231,220,10)" fg:x="961" fg:w="2"/><text x="79.3447%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="79.0947%" y="533" width="0.1646%" height="15" fill="rgb(220,66,15)" fg:x="961" fg:w="2"/><text x="79.3447%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="79.0947%" y="517" width="0.1646%" height="15" fill="rgb(215,171,52)" fg:x="961" fg:w="2"/><text x="79.3447%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1770%" y="501" width="0.0823%" height="15" fill="rgb(241,169,50)" fg:x="962" fg:w="1"/><text x="79.4270%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1770%" y="485" width="0.0823%" height="15" fill="rgb(236,189,0)" fg:x="962" fg:w="1"/><text x="79.4270%" y="495.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (4 samples, 0.33%)</title><rect x="79.0123%" y="565" width="0.3292%" height="15" fill="rgb(217,147,20)" fg:x="960" fg:w="4"/><text x="79.2623%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="79.2593%" y="549" width="0.0823%" height="15" fill="rgb(206,188,39)" fg:x="963" fg:w="1"/><text x="79.5093%" y="559.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.2593%" y="533" width="0.0823%" height="15" fill="rgb(227,118,25)" fg:x="963" fg:w="1"/><text x="79.5093%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="79.3416%" y="389" width="0.0823%" height="15" fill="rgb(248,171,40)" fg:x="964" fg:w="1"/><text x="79.5916%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="79.3416%" y="373" width="0.0823%" height="15" fill="rgb(251,90,54)" fg:x="964" fg:w="1"/><text x="79.5916%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.3416%" y="357" width="0.0823%" height="15" fill="rgb(234,11,46)" fg:x="964" fg:w="1"/><text x="79.5916%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.3416%" y="341" width="0.0823%" height="15" fill="rgb(229,134,13)" fg:x="964" fg:w="1"/><text x="79.5916%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.3416%" y="325" width="0.0823%" height="15" fill="rgb(223,129,3)" fg:x="964" fg:w="1"/><text x="79.5916%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4239%" y="341" width="0.0823%" height="15" fill="rgb(221,124,13)" fg:x="965" fg:w="1"/><text x="79.6739%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4239%" y="325" width="0.0823%" height="15" fill="rgb(234,3,18)" fg:x="965" fg:w="1"/><text x="79.6739%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4239%" y="309" width="0.0823%" height="15" fill="rgb(249,199,20)" fg:x="965" fg:w="1"/><text x="79.6739%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4239%" y="293" width="0.0823%" height="15" fill="rgb(224,134,6)" fg:x="965" fg:w="1"/><text x="79.6739%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4239%" y="277" width="0.0823%" height="15" fill="rgb(254,83,26)" fg:x="965" fg:w="1"/><text x="79.6739%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4239%" y="261" width="0.0823%" height="15" fill="rgb(217,88,9)" fg:x="965" fg:w="1"/><text x="79.6739%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4239%" y="245" width="0.0823%" height="15" fill="rgb(225,73,2)" fg:x="965" fg:w="1"/><text x="79.6739%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.4239%" y="229" width="0.0823%" height="15" fill="rgb(226,44,39)" fg:x="965" fg:w="1"/><text x="79.6739%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.4239%" y="213" width="0.0823%" height="15" fill="rgb(228,53,17)" fg:x="965" fg:w="1"/><text x="79.6739%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.4239%" y="197" width="0.0823%" height="15" fill="rgb(212,27,27)" fg:x="965" fg:w="1"/><text x="79.6739%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.4239%" y="181" width="0.0823%" height="15" fill="rgb(241,50,6)" fg:x="965" fg:w="1"/><text x="79.6739%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.4239%" y="165" width="0.0823%" height="15" fill="rgb(225,28,51)" fg:x="965" fg:w="1"/><text x="79.6739%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.4239%" y="149" width="0.0823%" height="15" fill="rgb(215,33,16)" fg:x="965" fg:w="1"/><text x="79.6739%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.4239%" y="133" width="0.0823%" height="15" fill="rgb(243,40,39)" fg:x="965" fg:w="1"/><text x="79.6739%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.4239%" y="117" width="0.0823%" height="15" fill="rgb(225,11,42)" fg:x="965" fg:w="1"/><text x="79.6739%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.4239%" y="101" width="0.0823%" height="15" fill="rgb(241,220,38)" fg:x="965" fg:w="1"/><text x="79.6739%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4239%" y="85" width="0.0823%" height="15" fill="rgb(244,52,35)" fg:x="965" fg:w="1"/><text x="79.6739%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="79.4239%" y="389" width="0.1646%" height="15" fill="rgb(246,42,46)" fg:x="965" fg:w="2"/><text x="79.6739%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="79.4239%" y="373" width="0.1646%" height="15" fill="rgb(205,184,13)" fg:x="965" fg:w="2"/><text x="79.6739%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="79.4239%" y="357" width="0.1646%" height="15" fill="rgb(209,48,36)" fg:x="965" fg:w="2"/><text x="79.6739%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.5062%" y="341" width="0.0823%" height="15" fill="rgb(244,34,51)" fg:x="966" fg:w="1"/><text x="79.7562%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.5062%" y="325" width="0.0823%" height="15" fill="rgb(221,107,33)" fg:x="966" fg:w="1"/><text x="79.7562%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.5062%" y="309" width="0.0823%" height="15" fill="rgb(224,203,12)" fg:x="966" fg:w="1"/><text x="79.7562%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.5062%" y="293" width="0.0823%" height="15" fill="rgb(230,215,18)" fg:x="966" fg:w="1"/><text x="79.7562%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.5062%" y="277" width="0.0823%" height="15" fill="rgb(206,185,35)" fg:x="966" fg:w="1"/><text x="79.7562%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.5062%" y="261" width="0.0823%" height="15" fill="rgb(228,140,34)" fg:x="966" fg:w="1"/><text x="79.7562%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5885%" y="325" width="0.0823%" height="15" fill="rgb(208,93,13)" fg:x="967" fg:w="1"/><text x="79.8385%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5885%" y="309" width="0.0823%" height="15" fill="rgb(221,193,39)" fg:x="967" fg:w="1"/><text x="79.8385%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5885%" y="293" width="0.0823%" height="15" fill="rgb(241,132,34)" fg:x="967" fg:w="1"/><text x="79.8385%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5885%" y="277" width="0.0823%" height="15" fill="rgb(221,141,10)" fg:x="967" fg:w="1"/><text x="79.8385%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.5885%" y="341" width="0.1646%" height="15" fill="rgb(226,90,31)" fg:x="967" fg:w="2"/><text x="79.8385%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6708%" y="325" width="0.0823%" height="15" fill="rgb(243,75,5)" fg:x="968" fg:w="1"/><text x="79.9208%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.25%)</title><rect x="79.5885%" y="389" width="0.2469%" height="15" fill="rgb(227,156,21)" fg:x="967" fg:w="3"/><text x="79.8385%" y="399.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="79.5885%" y="373" width="0.2469%" height="15" fill="rgb(250,195,8)" fg:x="967" fg:w="3"/><text x="79.8385%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.25%)</title><rect x="79.5885%" y="357" width="0.2469%" height="15" fill="rgb(220,134,5)" fg:x="967" fg:w="3"/><text x="79.8385%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.7531%" y="341" width="0.0823%" height="15" fill="rgb(246,106,34)" fg:x="969" fg:w="1"/><text x="80.0031%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7531%" y="325" width="0.0823%" height="15" fill="rgb(205,1,4)" fg:x="969" fg:w="1"/><text x="80.0031%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.7531%" y="309" width="0.0823%" height="15" fill="rgb(224,151,29)" fg:x="969" fg:w="1"/><text x="80.0031%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7531%" y="293" width="0.0823%" height="15" fill="rgb(251,196,0)" fg:x="969" fg:w="1"/><text x="80.0031%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.7531%" y="277" width="0.0823%" height="15" fill="rgb(212,127,0)" fg:x="969" fg:w="1"/><text x="80.0031%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7531%" y="261" width="0.0823%" height="15" fill="rgb(236,71,53)" fg:x="969" fg:w="1"/><text x="80.0031%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.7531%" y="245" width="0.0823%" height="15" fill="rgb(227,99,0)" fg:x="969" fg:w="1"/><text x="80.0031%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7531%" y="229" width="0.0823%" height="15" fill="rgb(239,89,21)" fg:x="969" fg:w="1"/><text x="80.0031%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.7531%" y="213" width="0.0823%" height="15" fill="rgb(243,122,19)" fg:x="969" fg:w="1"/><text x="80.0031%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.7531%" y="197" width="0.0823%" height="15" fill="rgb(229,192,45)" fg:x="969" fg:w="1"/><text x="80.0031%" y="207.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="79.8354%" y="389" width="0.0823%" height="15" fill="rgb(235,165,35)" fg:x="970" fg:w="1"/><text x="80.0854%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="79.8354%" y="373" width="0.0823%" height="15" fill="rgb(253,202,0)" fg:x="970" fg:w="1"/><text x="80.0854%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="79.9177%" y="341" width="0.0823%" height="15" fill="rgb(235,51,20)" fg:x="971" fg:w="1"/><text x="80.1677%" y="351.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="79.9177%" y="325" width="0.0823%" height="15" fill="rgb(218,95,46)" fg:x="971" fg:w="1"/><text x="80.1677%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="79.9177%" y="309" width="0.0823%" height="15" fill="rgb(212,81,10)" fg:x="971" fg:w="1"/><text x="80.1677%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="79.9177%" y="293" width="0.0823%" height="15" fill="rgb(240,59,0)" fg:x="971" fg:w="1"/><text x="80.1677%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="79.9177%" y="277" width="0.0823%" height="15" fill="rgb(212,191,42)" fg:x="971" fg:w="1"/><text x="80.1677%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="79.9177%" y="261" width="0.0823%" height="15" fill="rgb(233,140,3)" fg:x="971" fg:w="1"/><text x="80.1677%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="79.9177%" y="245" width="0.0823%" height="15" fill="rgb(215,69,23)" fg:x="971" fg:w="1"/><text x="80.1677%" y="255.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="79.9177%" y="229" width="0.0823%" height="15" fill="rgb(240,202,20)" fg:x="971" fg:w="1"/><text x="80.1677%" y="239.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="80.0000%" y="325" width="0.0823%" height="15" fill="rgb(209,146,50)" fg:x="972" fg:w="1"/><text x="80.2500%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.0823%" y="309" width="0.0823%" height="15" fill="rgb(253,102,54)" fg:x="973" fg:w="1"/><text x="80.3323%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.0823%" y="293" width="0.0823%" height="15" fill="rgb(250,173,47)" fg:x="973" fg:w="1"/><text x="80.3323%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="80.0823%" y="277" width="0.0823%" height="15" fill="rgb(232,142,7)" fg:x="973" fg:w="1"/><text x="80.3323%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="80.0823%" y="261" width="0.0823%" height="15" fill="rgb(230,157,47)" fg:x="973" fg:w="1"/><text x="80.3323%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="80.0823%" y="245" width="0.0823%" height="15" fill="rgb(214,177,35)" fg:x="973" fg:w="1"/><text x="80.3323%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="80.0823%" y="229" width="0.0823%" height="15" fill="rgb(234,119,46)" fg:x="973" fg:w="1"/><text x="80.3323%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.0823%" y="213" width="0.0823%" height="15" fill="rgb(241,180,50)" fg:x="973" fg:w="1"/><text x="80.3323%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.0823%" y="197" width="0.0823%" height="15" fill="rgb(221,54,25)" fg:x="973" fg:w="1"/><text x="80.3323%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.1646%" y="261" width="0.0823%" height="15" fill="rgb(209,157,44)" fg:x="974" fg:w="1"/><text x="80.4146%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.1646%" y="245" width="0.0823%" height="15" fill="rgb(246,115,41)" fg:x="974" fg:w="1"/><text x="80.4146%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1646%" y="229" width="0.0823%" height="15" fill="rgb(229,86,1)" fg:x="974" fg:w="1"/><text x="80.4146%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.74%)</title><rect x="80.3292%" y="245" width="0.7407%" height="15" fill="rgb(240,108,53)" fg:x="976" fg:w="9"/><text x="80.5792%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.66%)</title><rect x="80.4115%" y="229" width="0.6584%" height="15" fill="rgb(227,134,2)" fg:x="977" fg:w="8"/><text x="80.6615%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="81.0700%" y="245" width="0.1646%" height="15" fill="rgb(213,129,25)" fg:x="985" fg:w="2"/><text x="81.3200%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="81.0700%" y="229" width="0.1646%" height="15" fill="rgb(226,35,21)" fg:x="985" fg:w="2"/><text x="81.3200%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="81.2346%" y="181" width="0.0823%" height="15" fill="rgb(208,129,26)" fg:x="987" fg:w="1"/><text x="81.4846%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.2346%" y="165" width="0.0823%" height="15" fill="rgb(224,83,6)" fg:x="987" fg:w="1"/><text x="81.4846%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.2346%" y="149" width="0.0823%" height="15" fill="rgb(227,52,39)" fg:x="987" fg:w="1"/><text x="81.4846%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.2346%" y="133" width="0.0823%" height="15" fill="rgb(241,30,17)" fg:x="987" fg:w="1"/><text x="81.4846%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="81.3169%" y="181" width="0.1646%" height="15" fill="rgb(246,186,42)" fg:x="988" fg:w="2"/><text x="81.5669%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="81.3169%" y="165" width="0.1646%" height="15" fill="rgb(221,169,15)" fg:x="988" fg:w="2"/><text x="81.5669%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="81.3169%" y="149" width="0.1646%" height="15" fill="rgb(235,108,21)" fg:x="988" fg:w="2"/><text x="81.5669%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="81.3169%" y="133" width="0.1646%" height="15" fill="rgb(219,148,30)" fg:x="988" fg:w="2"/><text x="81.5669%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="81.3169%" y="117" width="0.1646%" height="15" fill="rgb(220,109,5)" fg:x="988" fg:w="2"/><text x="81.5669%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (42 samples, 3.46%)</title><rect x="81.4815%" y="181" width="3.4568%" height="15" fill="rgb(213,203,48)" fg:x="990" fg:w="42"/><text x="81.7315%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (42 samples, 3.46%)</title><rect x="81.4815%" y="165" width="3.4568%" height="15" fill="rgb(244,71,33)" fg:x="990" fg:w="42"/><text x="81.7315%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (42 samples, 3.46%)</title><rect x="81.4815%" y="149" width="3.4568%" height="15" fill="rgb(209,23,2)" fg:x="990" fg:w="42"/><text x="81.7315%" y="159.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="84.9383%" y="181" width="0.0823%" height="15" fill="rgb(219,97,7)" fg:x="1032" fg:w="1"/><text x="85.1883%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 3.87%)</title><rect x="81.2346%" y="229" width="3.8683%" height="15" fill="rgb(216,161,23)" fg:x="987" fg:w="47"/><text x="81.4846%" y="239.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (47 samples, 3.87%)</title><rect x="81.2346%" y="213" width="3.8683%" height="15" fill="rgb(207,45,42)" fg:x="987" fg:w="47"/><text x="81.4846%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (47 samples, 3.87%)</title><rect x="81.2346%" y="197" width="3.8683%" height="15" fill="rgb(241,61,4)" fg:x="987" fg:w="47"/><text x="81.4846%" y="207.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="85.0206%" y="181" width="0.0823%" height="15" fill="rgb(236,170,1)" fg:x="1033" fg:w="1"/><text x="85.2706%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="85.1029%" y="213" width="0.0823%" height="15" fill="rgb(239,72,5)" fg:x="1034" fg:w="1"/><text x="85.3529%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="85.1029%" y="229" width="0.1646%" height="15" fill="rgb(214,13,50)" fg:x="1034" fg:w="2"/><text x="85.3529%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="85.1852%" y="213" width="0.0823%" height="15" fill="rgb(224,88,9)" fg:x="1035" fg:w="1"/><text x="85.4352%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (50 samples, 4.12%)</title><rect x="81.2346%" y="245" width="4.1152%" height="15" fill="rgb(238,192,34)" fg:x="987" fg:w="50"/><text x="81.4846%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="85.2675%" y="229" width="0.0823%" height="15" fill="rgb(217,203,50)" fg:x="1036" fg:w="1"/><text x="85.5175%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (63 samples, 5.19%)</title><rect x="80.2469%" y="261" width="5.1852%" height="15" fill="rgb(241,123,32)" fg:x="975" fg:w="63"/><text x="80.4969%" y="271.50">regex_..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="85.3498%" y="245" width="0.0823%" height="15" fill="rgb(248,151,39)" fg:x="1037" fg:w="1"/><text x="85.5998%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="85.3498%" y="229" width="0.0823%" height="15" fill="rgb(208,89,6)" fg:x="1037" fg:w="1"/><text x="85.5998%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="85.4321%" y="261" width="0.1646%" height="15" fill="rgb(254,43,26)" fg:x="1038" fg:w="2"/><text x="85.6821%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="85.4321%" y="245" width="0.1646%" height="15" fill="rgb(216,158,13)" fg:x="1038" fg:w="2"/><text x="85.6821%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="85.4321%" y="229" width="0.1646%" height="15" fill="rgb(212,47,37)" fg:x="1038" fg:w="2"/><text x="85.6821%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="85.4321%" y="213" width="0.1646%" height="15" fill="rgb(254,16,10)" fg:x="1038" fg:w="2"/><text x="85.6821%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.4321%" y="197" width="0.1646%" height="15" fill="rgb(223,228,16)" fg:x="1038" fg:w="2"/><text x="85.6821%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.4321%" y="181" width="0.1646%" height="15" fill="rgb(249,108,50)" fg:x="1038" fg:w="2"/><text x="85.6821%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="85.4321%" y="165" width="0.1646%" height="15" fill="rgb(208,220,5)" fg:x="1038" fg:w="2"/><text x="85.6821%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (67 samples, 5.51%)</title><rect x="80.1646%" y="309" width="5.5144%" height="15" fill="rgb(217,89,48)" fg:x="974" fg:w="67"/><text x="80.4146%" y="319.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (67 samples, 5.51%)</title><rect x="80.1646%" y="293" width="5.5144%" height="15" fill="rgb(212,113,41)" fg:x="974" fg:w="67"/><text x="80.4146%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (67 samples, 5.51%)</title><rect x="80.1646%" y="277" width="5.5144%" height="15" fill="rgb(231,127,5)" fg:x="974" fg:w="67"/><text x="80.4146%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="85.5967%" y="261" width="0.0823%" height="15" fill="rgb(217,141,17)" fg:x="1040" fg:w="1"/><text x="85.8467%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="85.5967%" y="245" width="0.0823%" height="15" fill="rgb(245,125,54)" fg:x="1040" fg:w="1"/><text x="85.8467%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="85.5967%" y="229" width="0.0823%" height="15" fill="rgb(248,125,3)" fg:x="1040" fg:w="1"/><text x="85.8467%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="85.5967%" y="213" width="0.0823%" height="15" fill="rgb(236,119,51)" fg:x="1040" fg:w="1"/><text x="85.8467%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (1 samples, 0.08%)</title><rect x="85.6790%" y="309" width="0.0823%" height="15" fill="rgb(239,99,8)" fg:x="1041" fg:w="1"/><text x="85.9290%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7613%" y="261" width="0.0823%" height="15" fill="rgb(224,228,4)" fg:x="1042" fg:w="1"/><text x="86.0113%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="85.7613%" y="277" width="0.1646%" height="15" fill="rgb(220,131,45)" fg:x="1042" fg:w="2"/><text x="86.0113%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.8436%" y="261" width="0.0823%" height="15" fill="rgb(215,62,5)" fg:x="1043" fg:w="1"/><text x="86.0936%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.25%)</title><rect x="85.7613%" y="309" width="0.2469%" height="15" fill="rgb(253,12,24)" fg:x="1042" fg:w="3"/><text x="86.0113%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.25%)</title><rect x="85.7613%" y="293" width="0.2469%" height="15" fill="rgb(248,120,50)" fg:x="1042" fg:w="3"/><text x="86.0113%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="85.9259%" y="277" width="0.0823%" height="15" fill="rgb(245,194,10)" fg:x="1044" fg:w="1"/><text x="86.1759%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.9259%" y="261" width="0.0823%" height="15" fill="rgb(241,149,38)" fg:x="1044" fg:w="1"/><text x="86.1759%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.9259%" y="245" width="0.0823%" height="15" fill="rgb(219,215,7)" fg:x="1044" fg:w="1"/><text x="86.1759%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (74 samples, 6.09%)</title><rect x="80.0823%" y="325" width="6.0905%" height="15" fill="rgb(208,120,31)" fg:x="973" fg:w="74"/><text x="80.3323%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="86.0082%" y="309" width="0.1646%" height="15" fill="rgb(244,30,8)" fg:x="1045" fg:w="2"/><text x="86.2582%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="86.0082%" y="293" width="0.1646%" height="15" fill="rgb(238,35,44)" fg:x="1045" fg:w="2"/><text x="86.2582%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="86.0905%" y="277" width="0.0823%" height="15" fill="rgb(243,218,37)" fg:x="1046" fg:w="1"/><text x="86.3405%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="86.0905%" y="261" width="0.0823%" height="15" fill="rgb(218,169,10)" fg:x="1046" fg:w="1"/><text x="86.3405%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="86.0905%" y="245" width="0.0823%" height="15" fill="rgb(221,144,10)" fg:x="1046" fg:w="1"/><text x="86.3405%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.0905%" y="229" width="0.0823%" height="15" fill="rgb(226,41,38)" fg:x="1046" fg:w="1"/><text x="86.3405%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.0905%" y="213" width="0.0823%" height="15" fill="rgb(228,3,1)" fg:x="1046" fg:w="1"/><text x="86.3405%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="86.0905%" y="197" width="0.0823%" height="15" fill="rgb(209,129,12)" fg:x="1046" fg:w="1"/><text x="86.3405%" y="207.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="86.0905%" y="181" width="0.0823%" height="15" fill="rgb(213,136,33)" fg:x="1046" fg:w="1"/><text x="86.3405%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="86.0905%" y="165" width="0.0823%" height="15" fill="rgb(209,181,29)" fg:x="1046" fg:w="1"/><text x="86.3405%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.2551%" y="229" width="0.0823%" height="15" fill="rgb(234,173,18)" fg:x="1048" fg:w="1"/><text x="86.5051%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.2551%" y="213" width="0.0823%" height="15" fill="rgb(227,73,47)" fg:x="1048" fg:w="1"/><text x="86.5051%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.2551%" y="197" width="0.0823%" height="15" fill="rgb(234,9,34)" fg:x="1048" fg:w="1"/><text x="86.5051%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.2551%" y="181" width="0.0823%" height="15" fill="rgb(235,172,15)" fg:x="1048" fg:w="1"/><text x="86.5051%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="86.2551%" y="261" width="0.1646%" height="15" fill="rgb(245,61,2)" fg:x="1048" fg:w="2"/><text x="86.5051%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="86.2551%" y="245" width="0.1646%" height="15" fill="rgb(238,39,47)" fg:x="1048" fg:w="2"/><text x="86.5051%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="86.3374%" y="229" width="0.0823%" height="15" fill="rgb(234,37,24)" fg:x="1049" fg:w="1"/><text x="86.5874%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.4198%" y="261" width="0.0823%" height="15" fill="rgb(248,223,24)" fg:x="1050" fg:w="1"/><text x="86.6698%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.4198%" y="245" width="0.0823%" height="15" fill="rgb(223,12,15)" fg:x="1050" fg:w="1"/><text x="86.6698%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.4198%" y="229" width="0.0823%" height="15" fill="rgb(249,6,3)" fg:x="1050" fg:w="1"/><text x="86.6698%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.4198%" y="213" width="0.0823%" height="15" fill="rgb(237,105,33)" fg:x="1050" fg:w="1"/><text x="86.6698%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.74%)</title><rect x="86.5021%" y="245" width="0.7407%" height="15" fill="rgb(252,208,35)" fg:x="1051" fg:w="9"/><text x="86.7521%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.74%)</title><rect x="86.5021%" y="229" width="0.7407%" height="15" fill="rgb(215,181,35)" fg:x="1051" fg:w="9"/><text x="86.7521%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.1605%" y="213" width="0.0823%" height="15" fill="rgb(246,212,3)" fg:x="1059" fg:w="1"/><text x="87.4105%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="87.2428%" y="229" width="0.0823%" height="15" fill="rgb(247,156,24)" fg:x="1060" fg:w="1"/><text x="87.4928%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="87.2428%" y="213" width="0.0823%" height="15" fill="rgb(248,9,31)" fg:x="1060" fg:w="1"/><text x="87.4928%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="87.2428%" y="245" width="0.4115%" height="15" fill="rgb(234,26,45)" fg:x="1060" fg:w="5"/><text x="87.4928%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="87.3251%" y="229" width="0.3292%" height="15" fill="rgb(249,11,32)" fg:x="1061" fg:w="4"/><text x="87.5751%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.41%)</title><rect x="87.7366%" y="213" width="0.4115%" height="15" fill="rgb(249,162,33)" fg:x="1066" fg:w="5"/><text x="87.9866%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.25%)</title><rect x="87.9012%" y="197" width="0.2469%" height="15" fill="rgb(232,4,32)" fg:x="1068" fg:w="3"/><text x="88.1512%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.0658%" y="181" width="0.0823%" height="15" fill="rgb(212,5,45)" fg:x="1070" fg:w="1"/><text x="88.3158%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.0658%" y="165" width="0.0823%" height="15" fill="rgb(227,95,13)" fg:x="1070" fg:w="1"/><text x="88.3158%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.0658%" y="149" width="0.0823%" height="15" fill="rgb(223,205,10)" fg:x="1070" fg:w="1"/><text x="88.3158%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.25%)</title><rect x="88.1481%" y="197" width="0.2469%" height="15" fill="rgb(222,178,8)" fg:x="1071" fg:w="3"/><text x="88.3981%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="88.2305%" y="181" width="0.1646%" height="15" fill="rgb(216,13,22)" fg:x="1072" fg:w="2"/><text x="88.4805%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.33%)</title><rect x="88.1481%" y="213" width="0.3292%" height="15" fill="rgb(240,167,12)" fg:x="1071" fg:w="4"/><text x="88.3981%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="88.3951%" y="197" width="0.0823%" height="15" fill="rgb(235,68,35)" fg:x="1074" fg:w="1"/><text x="88.6451%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.91%)</title><rect x="87.6543%" y="245" width="0.9053%" height="15" fill="rgb(253,40,27)" fg:x="1065" fg:w="11"/><text x="87.9043%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.91%)</title><rect x="87.6543%" y="229" width="0.9053%" height="15" fill="rgb(214,19,28)" fg:x="1065" fg:w="11"/><text x="87.9043%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="88.4774%" y="213" width="0.0823%" height="15" fill="rgb(210,167,45)" fg:x="1075" fg:w="1"/><text x="88.7274%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="88.9712%" y="133" width="0.3292%" height="15" fill="rgb(232,97,40)" fg:x="1081" fg:w="4"/><text x="89.2212%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.3004%" y="133" width="0.0823%" height="15" fill="rgb(250,35,23)" fg:x="1085" fg:w="1"/><text x="89.5504%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="89.3827%" y="133" width="0.1646%" height="15" fill="rgb(248,47,53)" fg:x="1086" fg:w="2"/><text x="89.6327%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.3827%" y="117" width="0.1646%" height="15" fill="rgb(226,58,50)" fg:x="1086" fg:w="2"/><text x="89.6327%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.3827%" y="101" width="0.1646%" height="15" fill="rgb(217,105,26)" fg:x="1086" fg:w="2"/><text x="89.6327%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.3827%" y="85" width="0.1646%" height="15" fill="rgb(208,64,1)" fg:x="1086" fg:w="2"/><text x="89.6327%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.5473%" y="133" width="0.0823%" height="15" fill="rgb(214,80,1)" fg:x="1088" fg:w="1"/><text x="89.7973%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.5473%" y="117" width="0.0823%" height="15" fill="rgb(206,175,26)" fg:x="1088" fg:w="1"/><text x="89.7973%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.5473%" y="101" width="0.0823%" height="15" fill="rgb(235,156,37)" fg:x="1088" fg:w="1"/><text x="89.7973%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.5473%" y="85" width="0.0823%" height="15" fill="rgb(213,100,9)" fg:x="1088" fg:w="1"/><text x="89.7973%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.8765%" y="69" width="0.0823%" height="15" fill="rgb(241,15,13)" fg:x="1092" fg:w="1"/><text x="90.1265%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="89.7942%" y="101" width="0.3292%" height="15" fill="rgb(205,97,43)" fg:x="1091" fg:w="4"/><text x="90.0442%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="89.8765%" y="85" width="0.2469%" height="15" fill="rgb(216,106,32)" fg:x="1092" fg:w="3"/><text x="90.1265%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.9588%" y="69" width="0.1646%" height="15" fill="rgb(226,200,8)" fg:x="1093" fg:w="2"/><text x="90.2088%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.4527%" y="85" width="0.0823%" height="15" fill="rgb(244,54,29)" fg:x="1099" fg:w="1"/><text x="90.7027%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.99%)</title><rect x="89.6296%" y="133" width="0.9877%" height="15" fill="rgb(252,169,12)" fg:x="1089" fg:w="12"/><text x="89.8796%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.91%)</title><rect x="89.7119%" y="117" width="0.9053%" height="15" fill="rgb(231,199,11)" fg:x="1090" fg:w="11"/><text x="89.9619%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.49%)</title><rect x="90.1235%" y="101" width="0.4938%" height="15" fill="rgb(233,191,18)" fg:x="1095" fg:w="6"/><text x="90.3735%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.5350%" y="85" width="0.0823%" height="15" fill="rgb(215,83,47)" fg:x="1100" fg:w="1"/><text x="90.7850%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.5350%" y="69" width="0.0823%" height="15" fill="rgb(251,67,19)" fg:x="1100" fg:w="1"/><text x="90.7850%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5350%" y="53" width="0.0823%" height="15" fill="rgb(240,7,20)" fg:x="1100" fg:w="1"/><text x="90.7850%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.5350%" y="37" width="0.0823%" height="15" fill="rgb(210,150,26)" fg:x="1100" fg:w="1"/><text x="90.7850%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (45 samples, 3.70%)</title><rect x="90.6173%" y="133" width="3.7037%" height="15" fill="rgb(228,75,42)" fg:x="1101" fg:w="45"/><text x="90.8673%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (44 samples, 3.62%)</title><rect x="90.6996%" y="117" width="3.6214%" height="15" fill="rgb(237,134,48)" fg:x="1102" fg:w="44"/><text x="90.9496%" y="127.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.62%)</title><rect x="90.6996%" y="101" width="3.6214%" height="15" fill="rgb(205,80,50)" fg:x="1102" fg:w="44"/><text x="90.9496%" y="111.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.3210%" y="133" width="0.0823%" height="15" fill="rgb(217,74,48)" fg:x="1146" fg:w="1"/><text x="94.5710%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 5.84%)</title><rect x="88.6420%" y="229" width="5.8436%" height="15" fill="rgb(205,82,50)" fg:x="1077" fg:w="71"/><text x="88.8920%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.84%)</title><rect x="88.6420%" y="213" width="5.8436%" height="15" fill="rgb(228,1,33)" fg:x="1077" fg:w="71"/><text x="88.8920%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.84%)</title><rect x="88.6420%" y="197" width="5.8436%" height="15" fill="rgb(214,50,23)" fg:x="1077" fg:w="71"/><text x="88.8920%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.84%)</title><rect x="88.6420%" y="181" width="5.8436%" height="15" fill="rgb(210,62,9)" fg:x="1077" fg:w="71"/><text x="88.8920%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (71 samples, 5.84%)</title><rect x="88.6420%" y="165" width="5.8436%" height="15" fill="rgb(210,104,37)" fg:x="1077" fg:w="71"/><text x="88.8920%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.84%)</title><rect x="88.6420%" y="149" width="5.8436%" height="15" fill="rgb(232,104,43)" fg:x="1077" fg:w="71"/><text x="88.8920%" y="159.50">regex_a..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="94.4033%" y="133" width="0.0823%" height="15" fill="rgb(244,52,6)" fg:x="1147" fg:w="1"/><text x="94.6533%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.4856%" y="213" width="0.1646%" height="15" fill="rgb(211,174,52)" fg:x="1148" fg:w="2"/><text x="94.7356%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="94.6502%" y="213" width="0.3292%" height="15" fill="rgb(229,48,4)" fg:x="1150" fg:w="4"/><text x="94.9002%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.8148%" y="197" width="0.1646%" height="15" fill="rgb(205,155,16)" fg:x="1152" fg:w="2"/><text x="95.0648%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.8148%" y="181" width="0.1646%" height="15" fill="rgb(211,141,53)" fg:x="1152" fg:w="2"/><text x="95.0648%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.8148%" y="165" width="0.1646%" height="15" fill="rgb(240,148,11)" fg:x="1152" fg:w="2"/><text x="95.0648%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (106 samples, 8.72%)</title><rect x="86.5021%" y="261" width="8.7243%" height="15" fill="rgb(214,45,23)" fg:x="1051" fg:w="106"/><text x="86.7521%" y="271.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (81 samples, 6.67%)</title><rect x="88.5597%" y="245" width="6.6667%" height="15" fill="rgb(248,74,26)" fg:x="1076" fg:w="81"/><text x="88.8097%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.74%)</title><rect x="94.4856%" y="229" width="0.7407%" height="15" fill="rgb(218,121,16)" fg:x="1148" fg:w="9"/><text x="94.7356%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="94.9794%" y="213" width="0.2469%" height="15" fill="rgb(218,10,47)" fg:x="1154" fg:w="3"/><text x="95.2294%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.2263%" y="229" width="0.0823%" height="15" fill="rgb(227,99,14)" fg:x="1157" fg:w="1"/><text x="95.4763%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="95.2263%" y="213" width="0.0823%" height="15" fill="rgb(229,83,46)" fg:x="1157" fg:w="1"/><text x="95.4763%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="95.2263%" y="197" width="0.0823%" height="15" fill="rgb(228,25,1)" fg:x="1157" fg:w="1"/><text x="95.4763%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="95.2263%" y="181" width="0.0823%" height="15" fill="rgb(252,190,15)" fg:x="1157" fg:w="1"/><text x="95.4763%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="95.2263%" y="165" width="0.0823%" height="15" fill="rgb(213,103,51)" fg:x="1157" fg:w="1"/><text x="95.4763%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.2263%" y="261" width="0.1646%" height="15" fill="rgb(220,38,44)" fg:x="1157" fg:w="2"/><text x="95.4763%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.2263%" y="245" width="0.1646%" height="15" fill="rgb(210,45,26)" fg:x="1157" fg:w="2"/><text x="95.4763%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="95.3086%" y="229" width="0.0823%" height="15" fill="rgb(205,95,48)" fg:x="1158" fg:w="1"/><text x="95.5586%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="95.3086%" y="213" width="0.0823%" height="15" fill="rgb(225,179,37)" fg:x="1158" fg:w="1"/><text x="95.5586%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8025%" y="197" width="0.0823%" height="15" fill="rgb(230,209,3)" fg:x="1164" fg:w="1"/><text x="96.0525%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.8848%" y="197" width="0.0823%" height="15" fill="rgb(248,12,46)" fg:x="1165" fg:w="1"/><text x="96.1348%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.8848%" y="181" width="0.0823%" height="15" fill="rgb(234,18,0)" fg:x="1165" fg:w="1"/><text x="96.1348%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.8848%" y="165" width="0.0823%" height="15" fill="rgb(238,197,14)" fg:x="1165" fg:w="1"/><text x="96.1348%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (120 samples, 9.88%)</title><rect x="86.1728%" y="309" width="9.8765%" height="15" fill="rgb(251,162,48)" fg:x="1047" fg:w="120"/><text x="86.4228%" y="319.50">&lt;regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (120 samples, 9.88%)</title><rect x="86.1728%" y="293" width="9.8765%" height="15" fill="rgb(237,73,42)" fg:x="1047" fg:w="120"/><text x="86.4228%" y="303.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (120 samples, 9.88%)</title><rect x="86.1728%" y="277" width="9.8765%" height="15" fill="rgb(211,108,8)" fg:x="1047" fg:w="120"/><text x="86.4228%" y="287.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.66%)</title><rect x="95.3909%" y="261" width="0.6584%" height="15" fill="rgb(213,45,22)" fg:x="1159" fg:w="8"/><text x="95.6409%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.66%)</title><rect x="95.3909%" y="245" width="0.6584%" height="15" fill="rgb(252,154,5)" fg:x="1159" fg:w="8"/><text x="95.6409%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.66%)</title><rect x="95.3909%" y="229" width="0.6584%" height="15" fill="rgb(221,79,52)" fg:x="1159" fg:w="8"/><text x="95.6409%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.58%)</title><rect x="95.4733%" y="213" width="0.5761%" height="15" fill="rgb(229,220,36)" fg:x="1160" fg:w="7"/><text x="95.7233%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.9671%" y="197" width="0.0823%" height="15" fill="rgb(211,17,16)" fg:x="1166" fg:w="1"/><text x="96.2171%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.0494%" y="309" width="0.0823%" height="15" fill="rgb(222,55,31)" fg:x="1167" fg:w="1"/><text x="96.2994%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.0494%" y="293" width="0.0823%" height="15" fill="rgb(221,221,31)" fg:x="1167" fg:w="1"/><text x="96.2994%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="96.0494%" y="277" width="0.0823%" height="15" fill="rgb(227,168,26)" fg:x="1167" fg:w="1"/><text x="96.2994%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.0494%" y="261" width="0.0823%" height="15" fill="rgb(224,139,9)" fg:x="1167" fg:w="1"/><text x="96.2994%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.1317%" y="293" width="0.0823%" height="15" fill="rgb(254,172,0)" fg:x="1168" fg:w="1"/><text x="96.3817%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.1317%" y="277" width="0.0823%" height="15" fill="rgb(235,203,1)" fg:x="1168" fg:w="1"/><text x="96.3817%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (128 samples, 10.53%)</title><rect x="86.1728%" y="325" width="10.5350%" height="15" fill="rgb(216,205,24)" fg:x="1047" fg:w="128"/><text x="86.4228%" y="335.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.58%)</title><rect x="96.1317%" y="309" width="0.5761%" height="15" fill="rgb(233,24,6)" fg:x="1168" fg:w="7"/><text x="96.3817%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="96.2140%" y="293" width="0.4938%" height="15" fill="rgb(244,110,9)" fg:x="1169" fg:w="6"/><text x="96.4640%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="96.2140%" y="277" width="0.4938%" height="15" fill="rgb(239,222,42)" fg:x="1169" fg:w="6"/><text x="96.4640%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="96.2140%" y="261" width="0.4938%" height="15" fill="rgb(218,145,13)" fg:x="1169" fg:w="6"/><text x="96.4640%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="96.2963%" y="245" width="0.4115%" height="15" fill="rgb(207,69,11)" fg:x="1170" fg:w="5"/><text x="96.5463%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="96.2963%" y="229" width="0.4115%" height="15" fill="rgb(220,223,22)" fg:x="1170" fg:w="5"/><text x="96.5463%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="96.5432%" y="213" width="0.1646%" height="15" fill="rgb(245,102,5)" fg:x="1173" fg:w="2"/><text x="96.7932%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="96.7078%" y="309" width="0.0823%" height="15" fill="rgb(211,148,2)" fg:x="1175" fg:w="1"/><text x="96.9578%" y="319.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="96.7901%" y="245" width="0.0823%" height="15" fill="rgb(241,13,44)" fg:x="1176" fg:w="1"/><text x="97.0401%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.8724%" y="229" width="0.0823%" height="15" fill="rgb(219,137,21)" fg:x="1177" fg:w="1"/><text x="97.1224%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.9547%" y="213" width="0.0823%" height="15" fill="rgb(242,206,5)" fg:x="1178" fg:w="1"/><text x="97.2047%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="96.9547%" y="229" width="0.3292%" height="15" fill="rgb(217,114,22)" fg:x="1178" fg:w="4"/><text x="97.2047%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.25%)</title><rect x="97.0370%" y="213" width="0.2469%" height="15" fill="rgb(253,206,42)" fg:x="1179" fg:w="3"/><text x="97.2870%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="97.2840%" y="229" width="0.0823%" height="15" fill="rgb(236,102,18)" fg:x="1182" fg:w="1"/><text x="97.5340%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="97.2840%" y="213" width="0.0823%" height="15" fill="rgb(208,59,49)" fg:x="1182" fg:w="1"/><text x="97.5340%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.3663%" y="213" width="0.0823%" height="15" fill="rgb(215,194,28)" fg:x="1183" fg:w="1"/><text x="97.6163%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.3663%" y="197" width="0.0823%" height="15" fill="rgb(243,207,11)" fg:x="1183" fg:w="1"/><text x="97.6163%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3663%" y="181" width="0.0823%" height="15" fill="rgb(254,179,35)" fg:x="1183" fg:w="1"/><text x="97.6163%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3663%" y="165" width="0.0823%" height="15" fill="rgb(235,97,3)" fg:x="1183" fg:w="1"/><text x="97.6163%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="97.4486%" y="197" width="0.0823%" height="15" fill="rgb(215,155,33)" fg:x="1184" fg:w="1"/><text x="97.6986%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.25%)</title><rect x="97.3663%" y="229" width="0.2469%" height="15" fill="rgb(223,128,12)" fg:x="1183" fg:w="3"/><text x="97.6163%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="97.4486%" y="213" width="0.1646%" height="15" fill="rgb(208,157,18)" fg:x="1184" fg:w="2"/><text x="97.6986%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="97.5309%" y="197" width="0.0823%" height="15" fill="rgb(249,70,54)" fg:x="1185" fg:w="1"/><text x="97.7809%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.91%)</title><rect x="96.8724%" y="245" width="0.9053%" height="15" fill="rgb(244,118,24)" fg:x="1177" fg:w="11"/><text x="97.1224%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="97.6132%" y="229" width="0.1646%" height="15" fill="rgb(211,54,0)" fg:x="1186" fg:w="2"/><text x="97.8632%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="97.6955%" y="213" width="0.0823%" height="15" fill="rgb(245,137,45)" fg:x="1187" fg:w="1"/><text x="97.9455%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="97.6955%" y="197" width="0.0823%" height="15" fill="rgb(232,154,31)" fg:x="1187" fg:w="1"/><text x="97.9455%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.6955%" y="181" width="0.0823%" height="15" fill="rgb(253,6,39)" fg:x="1187" fg:w="1"/><text x="97.9455%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.6955%" y="165" width="0.0823%" height="15" fill="rgb(234,183,24)" fg:x="1187" fg:w="1"/><text x="97.9455%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6955%" y="149" width="0.0823%" height="15" fill="rgb(252,84,40)" fg:x="1187" fg:w="1"/><text x="97.9455%" y="159.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="97.8601%" y="197" width="0.0823%" height="15" fill="rgb(224,65,2)" fg:x="1189" fg:w="1"/><text x="98.1101%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.8601%" y="181" width="0.0823%" height="15" fill="rgb(229,38,24)" fg:x="1189" fg:w="1"/><text x="98.1101%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8601%" y="165" width="0.0823%" height="15" fill="rgb(218,131,50)" fg:x="1189" fg:w="1"/><text x="98.1101%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.8601%" y="149" width="0.0823%" height="15" fill="rgb(233,106,18)" fg:x="1189" fg:w="1"/><text x="98.1101%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="97.7778%" y="213" width="0.2469%" height="15" fill="rgb(220,216,11)" fg:x="1188" fg:w="3"/><text x="98.0278%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.9424%" y="197" width="0.0823%" height="15" fill="rgb(251,100,45)" fg:x="1190" fg:w="1"/><text x="98.1924%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="97.9424%" y="181" width="0.0823%" height="15" fill="rgb(235,143,32)" fg:x="1190" fg:w="1"/><text x="98.1924%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="97.9424%" y="165" width="0.0823%" height="15" fill="rgb(248,124,34)" fg:x="1190" fg:w="1"/><text x="98.1924%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="97.7778%" y="245" width="0.3292%" height="15" fill="rgb(225,221,4)" fg:x="1188" fg:w="4"/><text x="98.0278%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="97.7778%" y="229" width="0.3292%" height="15" fill="rgb(242,27,43)" fg:x="1188" fg:w="4"/><text x="98.0278%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="98.0247%" y="213" width="0.0823%" height="15" fill="rgb(227,54,8)" fg:x="1191" fg:w="1"/><text x="98.2747%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.0247%" y="197" width="0.0823%" height="15" fill="rgb(253,139,49)" fg:x="1191" fg:w="1"/><text x="98.2747%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (17 samples, 1.40%)</title><rect x="96.7901%" y="293" width="1.3992%" height="15" fill="rgb(231,26,43)" fg:x="1176" fg:w="17"/><text x="97.0401%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (17 samples, 1.40%)</title><rect x="96.7901%" y="277" width="1.3992%" height="15" fill="rgb(207,121,39)" fg:x="1176" fg:w="17"/><text x="97.0401%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (17 samples, 1.40%)</title><rect x="96.7901%" y="261" width="1.3992%" height="15" fill="rgb(223,101,35)" fg:x="1176" fg:w="17"/><text x="97.0401%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="98.1070%" y="245" width="0.0823%" height="15" fill="rgb(232,87,23)" fg:x="1192" fg:w="1"/><text x="98.3570%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="98.1070%" y="229" width="0.0823%" height="15" fill="rgb(225,180,29)" fg:x="1192" fg:w="1"/><text x="98.3570%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="98.1070%" y="213" width="0.0823%" height="15" fill="rgb(225,25,17)" fg:x="1192" fg:w="1"/><text x="98.3570%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="98.1893%" y="293" width="0.0823%" height="15" fill="rgb(223,8,52)" fg:x="1193" fg:w="1"/><text x="98.4393%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="98.1893%" y="277" width="0.0823%" height="15" fill="rgb(246,42,21)" fg:x="1193" fg:w="1"/><text x="98.4393%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="98.1893%" y="261" width="0.0823%" height="15" fill="rgb(205,64,43)" fg:x="1193" fg:w="1"/><text x="98.4393%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.1893%" y="245" width="0.0823%" height="15" fill="rgb(221,160,13)" fg:x="1193" fg:w="1"/><text x="98.4393%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.1893%" y="229" width="0.0823%" height="15" fill="rgb(239,58,35)" fg:x="1193" fg:w="1"/><text x="98.4393%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.1893%" y="213" width="0.0823%" height="15" fill="rgb(251,26,40)" fg:x="1193" fg:w="1"/><text x="98.4393%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="98.2716%" y="245" width="0.0823%" height="15" fill="rgb(247,0,4)" fg:x="1194" fg:w="1"/><text x="98.5216%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2716%" y="229" width="0.0823%" height="15" fill="rgb(218,130,10)" fg:x="1194" fg:w="1"/><text x="98.5216%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="98.2716%" y="293" width="0.1646%" height="15" fill="rgb(239,32,7)" fg:x="1194" fg:w="2"/><text x="98.5216%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="98.2716%" y="277" width="0.1646%" height="15" fill="rgb(210,192,24)" fg:x="1194" fg:w="2"/><text x="98.5216%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="98.2716%" y="261" width="0.1646%" height="15" fill="rgb(226,212,17)" fg:x="1194" fg:w="2"/><text x="98.5216%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="98.3539%" y="245" width="0.0823%" height="15" fill="rgb(219,201,28)" fg:x="1195" fg:w="1"/><text x="98.6039%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3539%" y="229" width="0.0823%" height="15" fill="rgb(235,207,41)" fg:x="1195" fg:w="1"/><text x="98.6039%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="98.5185%" y="229" width="0.0823%" height="15" fill="rgb(241,95,54)" fg:x="1197" fg:w="1"/><text x="98.7685%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="98.5185%" y="245" width="0.1646%" height="15" fill="rgb(248,12,23)" fg:x="1197" fg:w="2"/><text x="98.7685%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.6008%" y="229" width="0.0823%" height="15" fill="rgb(228,173,4)" fg:x="1198" fg:w="1"/><text x="98.8508%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (24 samples, 1.98%)</title><rect x="96.7901%" y="309" width="1.9753%" height="15" fill="rgb(254,99,5)" fg:x="1176" fg:w="24"/><text x="97.0401%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="98.4362%" y="293" width="0.3292%" height="15" fill="rgb(212,184,17)" fg:x="1196" fg:w="4"/><text x="98.6862%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.25%)</title><rect x="98.5185%" y="277" width="0.2469%" height="15" fill="rgb(252,174,1)" fg:x="1197" fg:w="3"/><text x="98.7685%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.25%)</title><rect x="98.5185%" y="261" width="0.2469%" height="15" fill="rgb(241,118,51)" fg:x="1197" fg:w="3"/><text x="98.7685%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="98.6831%" y="245" width="0.0823%" height="15" fill="rgb(227,94,47)" fg:x="1199" fg:w="1"/><text x="98.9331%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="98.6831%" y="229" width="0.0823%" height="15" fill="rgb(229,104,2)" fg:x="1199" fg:w="1"/><text x="98.9331%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.6831%" y="213" width="0.0823%" height="15" fill="rgb(219,28,31)" fg:x="1199" fg:w="1"/><text x="98.9331%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.6831%" y="197" width="0.0823%" height="15" fill="rgb(233,109,36)" fg:x="1199" fg:w="1"/><text x="98.9331%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6831%" y="181" width="0.0823%" height="15" fill="rgb(246,88,11)" fg:x="1199" fg:w="1"/><text x="98.9331%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (237 samples, 19.51%)</title><rect x="79.3416%" y="405" width="19.5062%" height="15" fill="rgb(209,212,17)" fg:x="964" fg:w="237"/><text x="79.5916%" y="415.50">&lt;&amp;kernel::model::entry::Entry a..</text></g><g><title>plugins_core::looking::model::qualify_name (230 samples, 18.93%)</title><rect x="79.9177%" y="389" width="18.9300%" height="15" fill="rgb(243,59,29)" fg:x="971" fg:w="230"/><text x="80.1677%" y="399.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (230 samples, 18.93%)</title><rect x="79.9177%" y="373" width="18.9300%" height="15" fill="rgb(244,205,48)" fg:x="971" fg:w="230"/><text x="80.1677%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (230 samples, 18.93%)</title><rect x="79.9177%" y="357" width="18.9300%" height="15" fill="rgb(227,30,6)" fg:x="971" fg:w="230"/><text x="80.1677%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (229 samples, 18.85%)</title><rect x="80.0000%" y="341" width="18.8477%" height="15" fill="rgb(220,205,48)" fg:x="972" fg:w="229"/><text x="80.2500%" y="351.50">indefinite::methods::apply_ru..</text></g><g><title>indefinite::rules::other::Other::run (26 samples, 2.14%)</title><rect x="96.7078%" y="325" width="2.1399%" height="15" fill="rgb(250,94,14)" fg:x="1175" fg:w="26"/><text x="96.9578%" y="335.50">i..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="98.7654%" y="309" width="0.0823%" height="15" fill="rgb(216,119,42)" fg:x="1200" fg:w="1"/><text x="99.0154%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8477%" y="181" width="0.0823%" height="15" fill="rgb(232,155,0)" fg:x="1201" fg:w="1"/><text x="99.0977%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8477%" y="165" width="0.0823%" height="15" fill="rgb(212,24,32)" fg:x="1201" fg:w="1"/><text x="99.0977%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8477%" y="149" width="0.0823%" height="15" fill="rgb(216,69,20)" fg:x="1201" fg:w="1"/><text x="99.0977%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8477%" y="133" width="0.0823%" height="15" fill="rgb(229,73,31)" fg:x="1201" fg:w="1"/><text x="99.0977%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8477%" y="117" width="0.0823%" height="15" fill="rgb(224,219,20)" fg:x="1201" fg:w="1"/><text x="99.0977%" y="127.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8477%" y="101" width="0.0823%" height="15" fill="rgb(215,146,41)" fg:x="1201" fg:w="1"/><text x="99.0977%" y="111.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8477%" y="85" width="0.0823%" height="15" fill="rgb(244,71,31)" fg:x="1201" fg:w="1"/><text x="99.0977%" y="95.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8477%" y="69" width="0.0823%" height="15" fill="rgb(224,24,11)" fg:x="1201" fg:w="1"/><text x="99.0977%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8477%" y="53" width="0.0823%" height="15" fill="rgb(229,76,15)" fg:x="1201" fg:w="1"/><text x="99.0977%" y="63.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="98.8477%" y="229" width="0.1646%" height="15" fill="rgb(209,93,2)" fg:x="1201" fg:w="2"/><text x="99.0977%" y="239.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="98.8477%" y="213" width="0.1646%" height="15" fill="rgb(216,200,50)" fg:x="1201" fg:w="2"/><text x="99.0977%" y="223.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="98.8477%" y="197" width="0.1646%" height="15" fill="rgb(211,67,34)" fg:x="1201" fg:w="2"/><text x="99.0977%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9300%" y="181" width="0.0823%" height="15" fill="rgb(225,87,47)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9300%" y="165" width="0.0823%" height="15" fill="rgb(217,185,16)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9300%" y="149" width="0.0823%" height="15" fill="rgb(205,0,0)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9300%" y="133" width="0.0823%" height="15" fill="rgb(207,116,45)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.9300%" y="117" width="0.0823%" height="15" fill="rgb(221,156,26)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9300%" y="101" width="0.0823%" height="15" fill="rgb(213,140,4)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9300%" y="85" width="0.0823%" height="15" fill="rgb(231,224,15)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="95.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9300%" y="69" width="0.0823%" height="15" fill="rgb(244,76,20)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="79.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9300%" y="53" width="0.0823%" height="15" fill="rgb(238,117,7)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="63.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9300%" y="37" width="0.0823%" height="15" fill="rgb(235,1,10)" fg:x="1202" fg:w="1"/><text x="99.1800%" y="47.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.25%)</title><rect x="98.8477%" y="261" width="0.2469%" height="15" fill="rgb(216,165,6)" fg:x="1201" fg:w="3"/><text x="99.0977%" y="271.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="98.8477%" y="245" width="0.2469%" height="15" fill="rgb(246,91,35)" fg:x="1201" fg:w="3"/><text x="99.0977%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.0123%" y="229" width="0.0823%" height="15" fill="rgb(228,96,24)" fg:x="1203" fg:w="1"/><text x="99.2623%" y="239.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.0123%" y="213" width="0.0823%" height="15" fill="rgb(254,217,53)" fg:x="1203" fg:w="1"/><text x="99.2623%" y="223.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.0123%" y="197" width="0.0823%" height="15" fill="rgb(209,60,0)" fg:x="1203" fg:w="1"/><text x="99.2623%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0123%" y="181" width="0.0823%" height="15" fill="rgb(250,93,26)" fg:x="1203" fg:w="1"/><text x="99.2623%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0123%" y="165" width="0.0823%" height="15" fill="rgb(211,9,40)" fg:x="1203" fg:w="1"/><text x="99.2623%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0123%" y="149" width="0.0823%" height="15" fill="rgb(242,57,20)" fg:x="1203" fg:w="1"/><text x="99.2623%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0123%" y="133" width="0.0823%" height="15" fill="rgb(248,85,48)" fg:x="1203" fg:w="1"/><text x="99.2623%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.0123%" y="117" width="0.0823%" height="15" fill="rgb(212,117,2)" fg:x="1203" fg:w="1"/><text x="99.2623%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0123%" y="101" width="0.0823%" height="15" fill="rgb(243,19,3)" fg:x="1203" fg:w="1"/><text x="99.2623%" y="111.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.0947%" y="245" width="0.1646%" height="15" fill="rgb(232,217,24)" fg:x="1204" fg:w="2"/><text x="99.3447%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1770%" y="229" width="0.0823%" height="15" fill="rgb(224,175,40)" fg:x="1205" fg:w="1"/><text x="99.4270%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1770%" y="213" width="0.0823%" height="15" fill="rgb(212,162,32)" fg:x="1205" fg:w="1"/><text x="99.4270%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1770%" y="197" width="0.0823%" height="15" fill="rgb(215,9,4)" fg:x="1205" fg:w="1"/><text x="99.4270%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1770%" y="181" width="0.0823%" height="15" fill="rgb(242,42,7)" fg:x="1205" fg:w="1"/><text x="99.4270%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.16%)</title><rect x="99.2593%" y="213" width="0.1646%" height="15" fill="rgb(242,184,45)" fg:x="1206" fg:w="2"/><text x="99.5093%" y="223.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (9 samples, 0.74%)</title><rect x="98.8477%" y="373" width="0.7407%" height="15" fill="rgb(228,111,51)" fg:x="1201" fg:w="9"/><text x="99.0977%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.74%)</title><rect x="98.8477%" y="357" width="0.7407%" height="15" fill="rgb(236,147,17)" fg:x="1201" fg:w="9"/><text x="99.0977%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.74%)</title><rect x="98.8477%" y="341" width="0.7407%" height="15" fill="rgb(210,75,22)" fg:x="1201" fg:w="9"/><text x="99.0977%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.74%)</title><rect x="98.8477%" y="325" width="0.7407%" height="15" fill="rgb(217,159,45)" fg:x="1201" fg:w="9"/><text x="99.0977%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.74%)</title><rect x="98.8477%" y="309" width="0.7407%" height="15" fill="rgb(245,165,53)" fg:x="1201" fg:w="9"/><text x="99.0977%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (9 samples, 0.74%)</title><rect x="98.8477%" y="293" width="0.7407%" height="15" fill="rgb(251,190,50)" fg:x="1201" fg:w="9"/><text x="99.0977%" y="303.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.74%)</title><rect x="98.8477%" y="277" width="0.7407%" height="15" fill="rgb(208,203,29)" fg:x="1201" fg:w="9"/><text x="99.0977%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.49%)</title><rect x="99.0947%" y="261" width="0.4938%" height="15" fill="rgb(207,209,35)" fg:x="1204" fg:w="6"/><text x="99.3447%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="99.2593%" y="245" width="0.3292%" height="15" fill="rgb(230,144,49)" fg:x="1206" fg:w="4"/><text x="99.5093%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="99.2593%" y="229" width="0.3292%" height="15" fill="rgb(229,31,6)" fg:x="1206" fg:w="4"/><text x="99.5093%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.4239%" y="213" width="0.1646%" height="15" fill="rgb(251,129,24)" fg:x="1208" fg:w="2"/><text x="99.6739%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.4239%" y="197" width="0.1646%" height="15" fill="rgb(235,105,15)" fg:x="1208" fg:w="2"/><text x="99.6739%" y="207.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.4239%" y="181" width="0.1646%" height="15" fill="rgb(216,52,43)" fg:x="1208" fg:w="2"/><text x="99.6739%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5062%" y="165" width="0.0823%" height="15" fill="rgb(238,144,41)" fg:x="1209" fg:w="1"/><text x="99.7562%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5062%" y="149" width="0.0823%" height="15" fill="rgb(243,63,9)" fg:x="1209" fg:w="1"/><text x="99.7562%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.5062%" y="133" width="0.0823%" height="15" fill="rgb(246,208,1)" fg:x="1209" fg:w="1"/><text x="99.7562%" y="143.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.5062%" y="117" width="0.0823%" height="15" fill="rgb(233,182,18)" fg:x="1209" fg:w="1"/><text x="99.7562%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.5062%" y="101" width="0.0823%" height="15" fill="rgb(242,224,8)" fg:x="1209" fg:w="1"/><text x="99.7562%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5062%" y="85" width="0.0823%" height="15" fill="rgb(243,54,37)" fg:x="1209" fg:w="1"/><text x="99.7562%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5062%" y="69" width="0.0823%" height="15" fill="rgb(233,192,12)" fg:x="1209" fg:w="1"/><text x="99.7562%" y="79.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5062%" y="53" width="0.0823%" height="15" fill="rgb(251,192,53)" fg:x="1209" fg:w="1"/><text x="99.7562%" y="63.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (251 samples, 20.66%)</title><rect x="79.0123%" y="629" width="20.6584%" height="15" fill="rgb(246,141,26)" fg:x="960" fg:w="251"/><text x="79.2623%" y="639.50">&lt;engine::session::Session as kern..</text></g><g><title>kernel::plugins::mw::apply_middleware (251 samples, 20.66%)</title><rect x="79.0123%" y="613" width="20.6584%" height="15" fill="rgb(239,195,19)" fg:x="960" fg:w="251"/><text x="79.2623%" y="623.50">kernel::plugins::mw::apply_middle..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (251 samples, 20.66%)</title><rect x="79.0123%" y="597" width="20.6584%" height="15" fill="rgb(241,16,39)" fg:x="960" fg:w="251"/><text x="79.2623%" y="607.50">kernel::plugins::mw::MiddlewareNe..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (251 samples, 20.66%)</title><rect x="79.0123%" y="581" width="20.6584%" height="15" fill="rgb(223,13,53)" fg:x="960" fg:w="251"/><text x="79.2623%" y="591.50">&lt;engine::session::ExpandSurroundi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (247 samples, 20.33%)</title><rect x="79.3416%" y="565" width="20.3292%" height="15" fill="rgb(214,227,0)" fg:x="964" fg:w="247"/><text x="79.5916%" y="575.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (247 samples, 20.33%)</title><rect x="79.3416%" y="549" width="20.3292%" height="15" fill="rgb(228,103,26)" fg:x="964" fg:w="247"/><text x="79.5916%" y="559.50">&lt;plugins_dynlib::DynamicMiddlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (247 samples, 20.33%)</title><rect x="79.3416%" y="533" width="20.3292%" height="15" fill="rgb(254,177,53)" fg:x="964" fg:w="247"/><text x="79.5916%" y="543.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (247 samples, 20.33%)</title><rect x="79.3416%" y="517" width="20.3292%" height="15" fill="rgb(208,201,34)" fg:x="964" fg:w="247"/><text x="79.5916%" y="527.50">core::ops::function::FnOnce::cal..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (247 samples, 20.33%)</title><rect x="79.3416%" y="501" width="20.3292%" height="15" fill="rgb(212,39,5)" fg:x="964" fg:w="247"/><text x="79.5916%" y="511.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (247 samples, 20.33%)</title><rect x="79.3416%" y="485" width="20.3292%" height="15" fill="rgb(246,117,3)" fg:x="964" fg:w="247"/><text x="79.5916%" y="495.50">core::ops::function::FnOnce::cal..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (247 samples, 20.33%)</title><rect x="79.3416%" y="469" width="20.3292%" height="15" fill="rgb(244,118,39)" fg:x="964" fg:w="247"/><text x="79.5916%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (247 samples, 20.33%)</title><rect x="79.3416%" y="453" width="20.3292%" height="15" fill="rgb(241,64,10)" fg:x="964" fg:w="247"/><text x="79.5916%" y="463.50">&lt;engine::session::state::State a..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (247 samples, 20.33%)</title><rect x="79.3416%" y="437" width="20.3292%" height="15" fill="rgb(229,39,44)" fg:x="964" fg:w="247"/><text x="79.5916%" y="447.50">&lt;plugins_core::looking::actions:..</text></g><g><title>plugins_core::looking::model::new_area_observation (247 samples, 20.33%)</title><rect x="79.3416%" y="421" width="20.3292%" height="15" fill="rgb(230,226,3)" fg:x="964" fg:w="247"/><text x="79.5916%" y="431.50">plugins_core::looking::model::ne..</text></g><g><title>kernel::model::entry::Entry::scope (10 samples, 0.82%)</title><rect x="98.8477%" y="405" width="0.8230%" height="15" fill="rgb(222,13,42)" fg:x="1201" fg:w="10"/><text x="99.0977%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.82%)</title><rect x="98.8477%" y="389" width="0.8230%" height="15" fill="rgb(247,180,54)" fg:x="1201" fg:w="10"/><text x="99.0977%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5885%" y="373" width="0.0823%" height="15" fill="rgb(205,96,16)" fg:x="1210" fg:w="1"/><text x="99.8385%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5885%" y="357" width="0.0823%" height="15" fill="rgb(205,100,21)" fg:x="1210" fg:w="1"/><text x="99.8385%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5885%" y="341" width="0.0823%" height="15" fill="rgb(248,51,4)" fg:x="1210" fg:w="1"/><text x="99.8385%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5885%" y="325" width="0.0823%" height="15" fill="rgb(217,197,30)" fg:x="1210" fg:w="1"/><text x="99.8385%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5885%" y="309" width="0.0823%" height="15" fill="rgb(240,179,40)" fg:x="1210" fg:w="1"/><text x="99.8385%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.6708%" y="597" width="0.0823%" height="15" fill="rgb(212,185,35)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="99.6708%" y="581" width="0.0823%" height="15" fill="rgb(251,222,31)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.6708%" y="565" width="0.0823%" height="15" fill="rgb(208,140,36)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.6708%" y="549" width="0.0823%" height="15" fill="rgb(220,148,1)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.6708%" y="533" width="0.0823%" height="15" fill="rgb(254,4,28)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6708%" y="517" width="0.0823%" height="15" fill="rgb(222,185,44)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6708%" y="501" width="0.0823%" height="15" fill="rgb(215,74,39)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6708%" y="485" width="0.0823%" height="15" fill="rgb(247,86,4)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6708%" y="469" width="0.0823%" height="15" fill="rgb(231,105,32)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6708%" y="453" width="0.0823%" height="15" fill="rgb(222,65,35)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6708%" y="437" width="0.0823%" height="15" fill="rgb(218,145,35)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.6708%" y="421" width="0.0823%" height="15" fill="rgb(208,7,15)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.6708%" y="405" width="0.0823%" height="15" fill="rgb(209,83,13)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.6708%" y="389" width="0.0823%" height="15" fill="rgb(218,3,10)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6708%" y="373" width="0.0823%" height="15" fill="rgb(211,219,4)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6708%" y="357" width="0.0823%" height="15" fill="rgb(228,194,12)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.6708%" y="341" width="0.0823%" height="15" fill="rgb(210,175,7)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.6708%" y="325" width="0.0823%" height="15" fill="rgb(243,132,6)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.6708%" y="309" width="0.0823%" height="15" fill="rgb(207,72,18)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.6708%" y="293" width="0.0823%" height="15" fill="rgb(236,1,18)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6708%" y="277" width="0.0823%" height="15" fill="rgb(227,0,18)" fg:x="1211" fg:w="1"/><text x="99.9208%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.6708%" y="629" width="0.1646%" height="15" fill="rgb(247,37,5)" fg:x="1211" fg:w="2"/><text x="99.9208%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.6708%" y="613" width="0.1646%" height="15" fill="rgb(237,179,24)" fg:x="1211" fg:w="2"/><text x="99.9208%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.7531%" y="597" width="0.0823%" height="15" fill="rgb(226,53,20)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.7531%" y="581" width="0.0823%" height="15" fill="rgb(247,75,7)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7531%" y="565" width="0.0823%" height="15" fill="rgb(233,96,12)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7531%" y="549" width="0.0823%" height="15" fill="rgb(224,125,0)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7531%" y="533" width="0.0823%" height="15" fill="rgb(224,92,25)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7531%" y="517" width="0.0823%" height="15" fill="rgb(224,42,24)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7531%" y="501" width="0.0823%" height="15" fill="rgb(234,132,49)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7531%" y="485" width="0.0823%" height="15" fill="rgb(248,100,35)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7531%" y="469" width="0.0823%" height="15" fill="rgb(239,94,40)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7531%" y="453" width="0.0823%" height="15" fill="rgb(235,139,28)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7531%" y="437" width="0.0823%" height="15" fill="rgb(217,144,7)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7531%" y="421" width="0.0823%" height="15" fill="rgb(227,55,4)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7531%" y="405" width="0.0823%" height="15" fill="rgb(252,82,54)" fg:x="1212" fg:w="1"/><text x="100.0031%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.8354%" y="581" width="0.0823%" height="15" fill="rgb(245,172,4)" fg:x="1213" fg:w="1"/><text x="100.0854%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="99.8354%" y="565" width="0.0823%" height="15" fill="rgb(207,26,27)" fg:x="1213" fg:w="1"/><text x="100.0854%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.8354%" y="549" width="0.0823%" height="15" fill="rgb(252,98,18)" fg:x="1213" fg:w="1"/><text x="100.0854%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.8354%" y="533" width="0.0823%" height="15" fill="rgb(244,8,26)" fg:x="1213" fg:w="1"/><text x="100.0854%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.8354%" y="517" width="0.0823%" height="15" fill="rgb(237,173,45)" fg:x="1213" fg:w="1"/><text x="100.0854%" y="527.50"></text></g><g><title>all (1,215 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(208,213,49)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-b9ccdf7e (1,215 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(212,122,37)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="991.50">simple-b9ccdf7e</text></g><g><title>_start (1,215 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(213,80,17)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,215 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(206,210,43)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,215 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(229,214,3)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,215 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(235,213,29)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,215 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(248,135,26)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,215 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(242,188,12)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,215 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(245,38,12)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,215 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(218,42,13)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,215 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(238,132,49)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,215 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(209,196,19)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,215 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(244,131,22)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,215 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(223,18,34)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,215 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(252,124,54)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,215 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(229,106,42)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,215 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(221,129,1)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,215 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(229,74,15)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,215 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(210,206,50)" fg:x="0" fg:w="1215"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (304 samples, 25.02%)</title><rect x="74.9794%" y="693" width="25.0206%" height="15" fill="rgb(251,114,31)" fg:x="911" fg:w="304"/><text x="75.2294%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (304 samples, 25.02%)</title><rect x="74.9794%" y="677" width="25.0206%" height="15" fill="rgb(215,225,28)" fg:x="911" fg:w="304"/><text x="75.2294%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (304 samples, 25.02%)</title><rect x="74.9794%" y="661" width="25.0206%" height="15" fill="rgb(237,109,14)" fg:x="911" fg:w="304"/><text x="75.2294%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (255 samples, 20.99%)</title><rect x="79.0123%" y="645" width="20.9877%" height="15" fill="rgb(230,13,37)" fg:x="960" fg:w="255"/><text x="79.2623%" y="655.50">engine::session::Session::evaluat..</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="99.8354%" y="629" width="0.1646%" height="15" fill="rgb(231,40,28)" fg:x="1213" fg:w="2"/><text x="100.0854%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.8354%" y="613" width="0.1646%" height="15" fill="rgb(231,202,18)" fg:x="1213" fg:w="2"/><text x="100.0854%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.8354%" y="597" width="0.1646%" height="15" fill="rgb(225,33,18)" fg:x="1213" fg:w="2"/><text x="100.0854%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.9177%" y="581" width="0.0823%" height="15" fill="rgb(223,64,47)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.9177%" y="565" width="0.0823%" height="15" fill="rgb(234,114,13)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9177%" y="549" width="0.0823%" height="15" fill="rgb(248,56,40)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9177%" y="533" width="0.0823%" height="15" fill="rgb(221,194,21)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9177%" y="517" width="0.0823%" height="15" fill="rgb(242,108,46)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9177%" y="501" width="0.0823%" height="15" fill="rgb(220,106,10)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9177%" y="485" width="0.0823%" height="15" fill="rgb(211,88,4)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9177%" y="469" width="0.0823%" height="15" fill="rgb(214,95,34)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9177%" y="453" width="0.0823%" height="15" fill="rgb(250,160,33)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9177%" y="437" width="0.0823%" height="15" fill="rgb(225,29,10)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.9177%" y="421" width="0.0823%" height="15" fill="rgb(224,28,30)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.9177%" y="405" width="0.0823%" height="15" fill="rgb(231,77,4)" fg:x="1214" fg:w="1"/><text x="100.1677%" y="415.50"></text></g></svg></svg>