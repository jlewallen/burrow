<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text><svg id="frames" x="10" width="1180" total_samples="1249"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2402%" y="693" width="0.0801%" height="15" fill="rgb(213,158,31)" fg:x="3" fg:w="1"/><text x="0.4902%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.1601%" y="725" width="0.2402%" height="15" fill="rgb(245,126,43)" fg:x="2" fg:w="3"/><text x="0.4101%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.1601%" y="709" width="0.2402%" height="15" fill="rgb(227,7,22)" fg:x="2" fg:w="3"/><text x="0.4101%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="0.3203%" y="693" width="0.0801%" height="15" fill="rgb(252,90,44)" fg:x="4" fg:w="1"/><text x="0.5703%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3203%" y="677" width="0.0801%" height="15" fill="rgb(253,91,0)" fg:x="4" fg:w="1"/><text x="0.5703%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5604%" y="645" width="0.0801%" height="15" fill="rgb(252,175,49)" fg:x="7" fg:w="1"/><text x="0.8104%" y="655.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.6405%" y="629" width="0.2402%" height="15" fill="rgb(246,150,1)" fg:x="8" fg:w="3"/><text x="0.8905%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.56%)</title><rect x="0.4003%" y="709" width="0.5604%" height="15" fill="rgb(241,192,25)" fg:x="5" fg:w="7"/><text x="0.6503%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.4003%" y="693" width="0.5604%" height="15" fill="rgb(239,187,11)" fg:x="5" fg:w="7"/><text x="0.6503%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.48%)</title><rect x="0.4804%" y="677" width="0.4804%" height="15" fill="rgb(218,202,51)" fg:x="6" fg:w="6"/><text x="0.7304%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.40%)</title><rect x="0.5604%" y="661" width="0.4003%" height="15" fill="rgb(225,176,8)" fg:x="7" fg:w="5"/><text x="0.8104%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (4 samples, 0.32%)</title><rect x="0.6405%" y="645" width="0.3203%" height="15" fill="rgb(219,122,41)" fg:x="8" fg:w="4"/><text x="0.8905%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="0.8807%" y="629" width="0.0801%" height="15" fill="rgb(248,140,20)" fg:x="11" fg:w="1"/><text x="1.1307%" y="639.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.4412%" y="613" width="0.2402%" height="15" fill="rgb(245,41,37)" fg:x="18" fg:w="3"/><text x="1.6912%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.6813%" y="613" width="0.0801%" height="15" fill="rgb(235,82,39)" fg:x="21" fg:w="1"/><text x="1.9313%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6813%" y="597" width="0.0801%" height="15" fill="rgb(230,108,42)" fg:x="21" fg:w="1"/><text x="1.9313%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8415%" y="597" width="0.0801%" height="15" fill="rgb(215,150,50)" fg:x="23" fg:w="1"/><text x="2.0915%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="1.9215%" y="581" width="0.1601%" height="15" fill="rgb(233,212,5)" fg:x="24" fg:w="2"/><text x="2.1715%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.0016%" y="565" width="0.0801%" height="15" fill="rgb(245,80,22)" fg:x="25" fg:w="1"/><text x="2.2516%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0016%" y="549" width="0.0801%" height="15" fill="rgb(238,129,16)" fg:x="25" fg:w="1"/><text x="2.2516%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.0016%" y="533" width="0.0801%" height="15" fill="rgb(240,19,0)" fg:x="25" fg:w="1"/><text x="2.2516%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0016%" y="517" width="0.0801%" height="15" fill="rgb(232,42,35)" fg:x="25" fg:w="1"/><text x="2.2516%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.04%)</title><rect x="1.2010%" y="645" width="1.0408%" height="15" fill="rgb(223,130,24)" fg:x="15" fg:w="13"/><text x="1.4510%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="1.3611%" y="629" width="0.8807%" height="15" fill="rgb(237,16,22)" fg:x="17" fg:w="11"/><text x="1.6111%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="1.7614%" y="613" width="0.4804%" height="15" fill="rgb(248,192,20)" fg:x="22" fg:w="6"/><text x="2.0114%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.9215%" y="597" width="0.3203%" height="15" fill="rgb(233,167,2)" fg:x="24" fg:w="4"/><text x="2.1715%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.0817%" y="581" width="0.1601%" height="15" fill="rgb(252,71,44)" fg:x="26" fg:w="2"/><text x="2.3317%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1617%" y="565" width="0.0801%" height="15" fill="rgb(238,37,47)" fg:x="27" fg:w="1"/><text x="2.4117%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.2418%" y="613" width="0.1601%" height="15" fill="rgb(214,202,54)" fg:x="28" fg:w="2"/><text x="2.4918%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.4019%" y="613" width="0.0801%" height="15" fill="rgb(254,165,40)" fg:x="30" fg:w="1"/><text x="2.6519%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4019%" y="597" width="0.0801%" height="15" fill="rgb(246,173,38)" fg:x="30" fg:w="1"/><text x="2.6519%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4820%" y="597" width="0.0801%" height="15" fill="rgb(215,3,27)" fg:x="31" fg:w="1"/><text x="2.7320%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="2.5620%" y="597" width="0.1601%" height="15" fill="rgb(239,169,51)" fg:x="32" fg:w="2"/><text x="2.8120%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6421%" y="581" width="0.0801%" height="15" fill="rgb(212,5,25)" fg:x="33" fg:w="1"/><text x="2.8921%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.7222%" y="533" width="0.0801%" height="15" fill="rgb(243,45,17)" fg:x="34" fg:w="1"/><text x="2.9722%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="2.7222%" y="597" width="0.1601%" height="15" fill="rgb(242,97,9)" fg:x="34" fg:w="2"/><text x="2.9722%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="2.7222%" y="581" width="0.1601%" height="15" fill="rgb(228,71,31)" fg:x="34" fg:w="2"/><text x="2.9722%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.7222%" y="565" width="0.1601%" height="15" fill="rgb(252,184,16)" fg:x="34" fg:w="2"/><text x="2.9722%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.7222%" y="549" width="0.1601%" height="15" fill="rgb(236,169,46)" fg:x="34" fg:w="2"/><text x="2.9722%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.8022%" y="533" width="0.0801%" height="15" fill="rgb(207,17,47)" fg:x="35" fg:w="1"/><text x="3.0522%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.8022%" y="517" width="0.0801%" height="15" fill="rgb(206,201,28)" fg:x="35" fg:w="1"/><text x="3.0522%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="2.2418%" y="629" width="0.8006%" height="15" fill="rgb(224,184,23)" fg:x="28" fg:w="10"/><text x="2.4918%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="2.4820%" y="613" width="0.5604%" height="15" fill="rgb(208,139,48)" fg:x="31" fg:w="7"/><text x="2.7320%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.8823%" y="597" width="0.1601%" height="15" fill="rgb(208,130,10)" fg:x="36" fg:w="2"/><text x="3.1323%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 2.16%)</title><rect x="0.9608%" y="693" width="2.1617%" height="15" fill="rgb(211,213,45)" fg:x="12" fg:w="27"/><text x="1.2108%" y="703.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (25 samples, 2.00%)</title><rect x="1.1209%" y="677" width="2.0016%" height="15" fill="rgb(235,100,30)" fg:x="14" fg:w="25"/><text x="1.3709%" y="687.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 1.92%)</title><rect x="1.2010%" y="661" width="1.9215%" height="15" fill="rgb(206,144,31)" fg:x="15" fg:w="24"/><text x="1.4510%" y="671.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="2.2418%" y="645" width="0.8807%" height="15" fill="rgb(224,200,26)" fg:x="28" fg:w="11"/><text x="2.4918%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0424%" y="629" width="0.0801%" height="15" fill="rgb(247,104,53)" fg:x="38" fg:w="1"/><text x="3.2924%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 2.80%)</title><rect x="0.4003%" y="725" width="2.8022%" height="15" fill="rgb(220,14,17)" fg:x="5" fg:w="35"/><text x="0.6503%" y="735.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (28 samples, 2.24%)</title><rect x="0.9608%" y="709" width="2.2418%" height="15" fill="rgb(230,140,40)" fg:x="12" fg:w="28"/><text x="1.2108%" y="719.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1225%" y="693" width="0.0801%" height="15" fill="rgb(229,2,41)" fg:x="39" fg:w="1"/><text x="3.3725%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.2826%" y="677" width="0.0801%" height="15" fill="rgb(232,89,16)" fg:x="41" fg:w="1"/><text x="3.5326%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="3.2826%" y="661" width="0.0801%" height="15" fill="rgb(247,59,52)" fg:x="41" fg:w="1"/><text x="3.5326%" y="671.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.7630%" y="629" width="0.0801%" height="15" fill="rgb(226,110,21)" fg:x="47" fg:w="1"/><text x="4.0130%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.8431%" y="629" width="0.0801%" height="15" fill="rgb(224,176,43)" fg:x="48" fg:w="1"/><text x="4.0931%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.8431%" y="613" width="0.0801%" height="15" fill="rgb(221,73,6)" fg:x="48" fg:w="1"/><text x="4.0931%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.8431%" y="597" width="0.0801%" height="15" fill="rgb(232,78,19)" fg:x="48" fg:w="1"/><text x="4.0931%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.8431%" y="581" width="0.0801%" height="15" fill="rgb(233,112,48)" fg:x="48" fg:w="1"/><text x="4.0931%" y="591.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="3.9231%" y="629" width="0.0801%" height="15" fill="rgb(243,131,47)" fg:x="49" fg:w="1"/><text x="4.1731%" y="639.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="3.9231%" y="613" width="0.0801%" height="15" fill="rgb(226,51,1)" fg:x="49" fg:w="1"/><text x="4.1731%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.9231%" y="597" width="0.0801%" height="15" fill="rgb(247,58,7)" fg:x="49" fg:w="1"/><text x="4.1731%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.9231%" y="581" width="0.0801%" height="15" fill="rgb(209,7,32)" fg:x="49" fg:w="1"/><text x="4.1731%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.9231%" y="565" width="0.0801%" height="15" fill="rgb(209,39,41)" fg:x="49" fg:w="1"/><text x="4.1731%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.9231%" y="549" width="0.0801%" height="15" fill="rgb(226,182,46)" fg:x="49" fg:w="1"/><text x="4.1731%" y="559.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="4.0032%" y="581" width="0.0801%" height="15" fill="rgb(230,219,10)" fg:x="50" fg:w="1"/><text x="4.2532%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="3.6829%" y="645" width="0.6405%" height="15" fill="rgb(227,175,30)" fg:x="46" fg:w="8"/><text x="3.9329%" y="655.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="4.0032%" y="629" width="0.3203%" height="15" fill="rgb(217,2,50)" fg:x="50" fg:w="4"/><text x="4.2532%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="4.0032%" y="613" width="0.3203%" height="15" fill="rgb(229,160,0)" fg:x="50" fg:w="4"/><text x="4.2532%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="4.0032%" y="597" width="0.3203%" height="15" fill="rgb(207,78,37)" fg:x="50" fg:w="4"/><text x="4.2532%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="4.0833%" y="581" width="0.2402%" height="15" fill="rgb(225,57,0)" fg:x="51" fg:w="3"/><text x="4.3333%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="4.0833%" y="565" width="0.2402%" height="15" fill="rgb(232,154,2)" fg:x="51" fg:w="3"/><text x="4.3333%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="4.0833%" y="549" width="0.2402%" height="15" fill="rgb(241,212,25)" fg:x="51" fg:w="3"/><text x="4.3333%" y="559.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="4.0833%" y="533" width="0.2402%" height="15" fill="rgb(226,69,20)" fg:x="51" fg:w="3"/><text x="4.3333%" y="543.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (7 samples, 0.56%)</title><rect x="4.3235%" y="629" width="0.5604%" height="15" fill="rgb(247,184,54)" fg:x="54" fg:w="7"/><text x="4.5735%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.56%)</title><rect x="4.3235%" y="613" width="0.5604%" height="15" fill="rgb(210,145,0)" fg:x="54" fg:w="7"/><text x="4.5735%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.48%)</title><rect x="4.4035%" y="597" width="0.4804%" height="15" fill="rgb(253,82,12)" fg:x="55" fg:w="6"/><text x="4.6535%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="4.5637%" y="581" width="0.3203%" height="15" fill="rgb(245,42,11)" fg:x="57" fg:w="4"/><text x="4.8137%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="4.6437%" y="565" width="0.2402%" height="15" fill="rgb(219,147,32)" fg:x="58" fg:w="3"/><text x="4.8937%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="4.6437%" y="549" width="0.2402%" height="15" fill="rgb(246,12,7)" fg:x="58" fg:w="3"/><text x="4.8937%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="4.6437%" y="533" width="0.2402%" height="15" fill="rgb(243,50,9)" fg:x="58" fg:w="3"/><text x="4.8937%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="4.6437%" y="517" width="0.2402%" height="15" fill="rgb(219,149,6)" fg:x="58" fg:w="3"/><text x="4.8937%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="4.6437%" y="501" width="0.2402%" height="15" fill="rgb(241,51,42)" fg:x="58" fg:w="3"/><text x="4.8937%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="4.6437%" y="485" width="0.2402%" height="15" fill="rgb(226,128,27)" fg:x="58" fg:w="3"/><text x="4.8937%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="4.6437%" y="469" width="0.2402%" height="15" fill="rgb(244,144,4)" fg:x="58" fg:w="3"/><text x="4.8937%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="4.6437%" y="453" width="0.2402%" height="15" fill="rgb(221,4,13)" fg:x="58" fg:w="3"/><text x="4.8937%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="4.6437%" y="437" width="0.2402%" height="15" fill="rgb(208,170,28)" fg:x="58" fg:w="3"/><text x="4.8937%" y="447.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="4.6437%" y="421" width="0.2402%" height="15" fill="rgb(226,131,13)" fg:x="58" fg:w="3"/><text x="4.8937%" y="431.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="4.6437%" y="405" width="0.2402%" height="15" fill="rgb(215,72,41)" fg:x="58" fg:w="3"/><text x="4.8937%" y="415.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="4.8839%" y="517" width="0.0801%" height="15" fill="rgb(243,108,20)" fg:x="61" fg:w="1"/><text x="5.1339%" y="527.50"></text></g><g><title>glob::is_dir (9 samples, 0.72%)</title><rect x="4.8839%" y="581" width="0.7206%" height="15" fill="rgb(230,189,17)" fg:x="61" fg:w="9"/><text x="5.1339%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (9 samples, 0.72%)</title><rect x="4.8839%" y="565" width="0.7206%" height="15" fill="rgb(220,50,17)" fg:x="61" fg:w="9"/><text x="5.1339%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (9 samples, 0.72%)</title><rect x="4.8839%" y="549" width="0.7206%" height="15" fill="rgb(248,152,48)" fg:x="61" fg:w="9"/><text x="5.1339%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (9 samples, 0.72%)</title><rect x="4.8839%" y="533" width="0.7206%" height="15" fill="rgb(244,91,11)" fg:x="61" fg:w="9"/><text x="5.1339%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (8 samples, 0.64%)</title><rect x="4.9640%" y="517" width="0.6405%" height="15" fill="rgb(220,157,5)" fg:x="62" fg:w="8"/><text x="5.2140%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (7 samples, 0.56%)</title><rect x="5.0440%" y="501" width="0.5604%" height="15" fill="rgb(253,137,8)" fg:x="63" fg:w="7"/><text x="5.2940%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (7 samples, 0.56%)</title><rect x="5.0440%" y="485" width="0.5604%" height="15" fill="rgb(217,137,51)" fg:x="63" fg:w="7"/><text x="5.2940%" y="495.50"></text></g><g><title>statx (7 samples, 0.56%)</title><rect x="5.0440%" y="469" width="0.5604%" height="15" fill="rgb(218,209,53)" fg:x="63" fg:w="7"/><text x="5.2940%" y="479.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.80%)</title><rect x="4.8839%" y="613" width="0.8006%" height="15" fill="rgb(249,137,25)" fg:x="61" fg:w="10"/><text x="5.1339%" y="623.50"></text></g><g><title>glob::fill_todo (10 samples, 0.80%)</title><rect x="4.8839%" y="597" width="0.8006%" height="15" fill="rgb(239,155,26)" fg:x="61" fg:w="10"/><text x="5.1339%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="5.6045%" y="581" width="0.0801%" height="15" fill="rgb(227,85,46)" fg:x="70" fg:w="1"/><text x="5.8545%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="5.6045%" y="565" width="0.0801%" height="15" fill="rgb(251,107,43)" fg:x="70" fg:w="1"/><text x="5.8545%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.6045%" y="549" width="0.0801%" height="15" fill="rgb(234,170,33)" fg:x="70" fg:w="1"/><text x="5.8545%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="5.6045%" y="533" width="0.0801%" height="15" fill="rgb(206,29,35)" fg:x="70" fg:w="1"/><text x="5.8545%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="5.6045%" y="517" width="0.0801%" height="15" fill="rgb(227,138,25)" fg:x="70" fg:w="1"/><text x="5.8545%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="5.6045%" y="501" width="0.0801%" height="15" fill="rgb(249,131,35)" fg:x="70" fg:w="1"/><text x="5.8545%" y="511.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="5.6045%" y="485" width="0.0801%" height="15" fill="rgb(239,6,40)" fg:x="70" fg:w="1"/><text x="5.8545%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2 samples, 0.16%)</title><rect x="5.7646%" y="405" width="0.1601%" height="15" fill="rgb(246,136,47)" fg:x="72" fg:w="2"/><text x="6.0146%" y="415.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="5.6845%" y="581" width="0.3203%" height="15" fill="rgb(253,58,26)" fg:x="71" fg:w="4"/><text x="5.9345%" y="591.50"></text></g><g><title>std::path::PathBuf::_push (4 samples, 0.32%)</title><rect x="5.6845%" y="565" width="0.3203%" height="15" fill="rgb(237,141,10)" fg:x="71" fg:w="4"/><text x="5.9345%" y="575.50"></text></g><g><title>std::ffi::os_str::OsString::push (4 samples, 0.32%)</title><rect x="5.6845%" y="549" width="0.3203%" height="15" fill="rgb(234,156,12)" fg:x="71" fg:w="4"/><text x="5.9345%" y="559.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (4 samples, 0.32%)</title><rect x="5.6845%" y="533" width="0.3203%" height="15" fill="rgb(243,224,36)" fg:x="71" fg:w="4"/><text x="5.9345%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.32%)</title><rect x="5.6845%" y="517" width="0.3203%" height="15" fill="rgb(205,229,51)" fg:x="71" fg:w="4"/><text x="5.9345%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.32%)</title><rect x="5.6845%" y="501" width="0.3203%" height="15" fill="rgb(223,189,4)" fg:x="71" fg:w="4"/><text x="5.9345%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.32%)</title><rect x="5.6845%" y="485" width="0.3203%" height="15" fill="rgb(249,167,54)" fg:x="71" fg:w="4"/><text x="5.9345%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.32%)</title><rect x="5.6845%" y="469" width="0.3203%" height="15" fill="rgb(218,34,28)" fg:x="71" fg:w="4"/><text x="5.9345%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.32%)</title><rect x="5.6845%" y="453" width="0.3203%" height="15" fill="rgb(232,109,42)" fg:x="71" fg:w="4"/><text x="5.9345%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="5.7646%" y="437" width="0.2402%" height="15" fill="rgb(248,214,46)" fg:x="72" fg:w="3"/><text x="6.0146%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.24%)</title><rect x="5.7646%" y="421" width="0.2402%" height="15" fill="rgb(244,216,40)" fg:x="72" fg:w="3"/><text x="6.0146%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.9247%" y="405" width="0.0801%" height="15" fill="rgb(231,226,31)" fg:x="74" fg:w="1"/><text x="6.1747%" y="415.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (22 samples, 1.76%)</title><rect x="4.3235%" y="645" width="1.7614%" height="15" fill="rgb(238,38,43)" fg:x="54" fg:w="22"/><text x="4.5735%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (15 samples, 1.20%)</title><rect x="4.8839%" y="629" width="1.2010%" height="15" fill="rgb(208,88,43)" fg:x="61" fg:w="15"/><text x="5.1339%" y="639.50"></text></g><g><title>glob::glob (5 samples, 0.40%)</title><rect x="5.6845%" y="613" width="0.4003%" height="15" fill="rgb(205,136,37)" fg:x="71" fg:w="5"/><text x="5.9345%" y="623.50"></text></g><g><title>glob::glob_with (5 samples, 0.40%)</title><rect x="5.6845%" y="597" width="0.4003%" height="15" fill="rgb(237,34,14)" fg:x="71" fg:w="5"/><text x="5.9345%" y="607.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="6.0048%" y="581" width="0.0801%" height="15" fill="rgb(236,193,44)" fg:x="75" fg:w="1"/><text x="6.2548%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.0048%" y="565" width="0.0801%" height="15" fill="rgb(231,48,10)" fg:x="75" fg:w="1"/><text x="6.2548%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="6.3251%" y="581" width="0.1601%" height="15" fill="rgb(213,141,34)" fg:x="79" fg:w="2"/><text x="6.5751%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.4051%" y="565" width="0.0801%" height="15" fill="rgb(249,130,34)" fg:x="80" fg:w="1"/><text x="6.6551%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.4051%" y="549" width="0.0801%" height="15" fill="rgb(219,42,41)" fg:x="80" fg:w="1"/><text x="6.6551%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4051%" y="533" width="0.0801%" height="15" fill="rgb(224,100,54)" fg:x="80" fg:w="1"/><text x="6.6551%" y="543.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="6.3251%" y="613" width="0.2402%" height="15" fill="rgb(229,200,27)" fg:x="79" fg:w="3"/><text x="6.5751%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="6.3251%" y="597" width="0.2402%" height="15" fill="rgb(217,118,10)" fg:x="79" fg:w="3"/><text x="6.5751%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="6.4852%" y="581" width="0.0801%" height="15" fill="rgb(206,22,3)" fg:x="81" fg:w="1"/><text x="6.7352%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.4852%" y="565" width="0.0801%" height="15" fill="rgb(232,163,46)" fg:x="81" fg:w="1"/><text x="6.7352%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="6.5653%" y="581" width="0.0801%" height="15" fill="rgb(206,95,13)" fg:x="82" fg:w="1"/><text x="6.8153%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="6.5653%" y="565" width="0.0801%" height="15" fill="rgb(253,154,18)" fg:x="82" fg:w="1"/><text x="6.8153%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.5653%" y="549" width="0.0801%" height="15" fill="rgb(219,32,23)" fg:x="82" fg:w="1"/><text x="6.8153%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.5653%" y="533" width="0.0801%" height="15" fill="rgb(230,191,45)" fg:x="82" fg:w="1"/><text x="6.8153%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5653%" y="517" width="0.0801%" height="15" fill="rgb(229,64,36)" fg:x="82" fg:w="1"/><text x="6.8153%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6453%" y="581" width="0.0801%" height="15" fill="rgb(205,129,25)" fg:x="83" fg:w="1"/><text x="6.8953%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="6.5653%" y="613" width="0.2402%" height="15" fill="rgb(254,112,7)" fg:x="82" fg:w="3"/><text x="6.8153%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="6.5653%" y="597" width="0.2402%" height="15" fill="rgb(226,53,48)" fg:x="82" fg:w="3"/><text x="6.8153%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.7254%" y="581" width="0.0801%" height="15" fill="rgb(214,153,38)" fg:x="84" fg:w="1"/><text x="6.9754%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.7254%" y="565" width="0.0801%" height="15" fill="rgb(243,101,7)" fg:x="84" fg:w="1"/><text x="6.9754%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.7254%" y="549" width="0.0801%" height="15" fill="rgb(240,140,22)" fg:x="84" fg:w="1"/><text x="6.9754%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="6.8054%" y="581" width="0.0801%" height="15" fill="rgb(235,114,2)" fg:x="85" fg:w="1"/><text x="7.0554%" y="591.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (3 samples, 0.24%)</title><rect x="6.8054%" y="597" width="0.2402%" height="15" fill="rgb(242,59,12)" fg:x="85" fg:w="3"/><text x="7.0554%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="6.8855%" y="581" width="0.1601%" height="15" fill="rgb(252,134,9)" fg:x="86" fg:w="2"/><text x="7.1355%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="6.8855%" y="565" width="0.1601%" height="15" fill="rgb(236,4,44)" fg:x="86" fg:w="2"/><text x="7.1355%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="6.8054%" y="613" width="0.3203%" height="15" fill="rgb(254,172,41)" fg:x="85" fg:w="4"/><text x="7.0554%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0456%" y="597" width="0.0801%" height="15" fill="rgb(244,63,20)" fg:x="88" fg:w="1"/><text x="7.2956%" y="607.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="7.1257%" y="613" width="0.0801%" height="15" fill="rgb(250,73,31)" fg:x="89" fg:w="1"/><text x="7.3757%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="7.1257%" y="597" width="0.0801%" height="15" fill="rgb(241,38,36)" fg:x="89" fg:w="1"/><text x="7.3757%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="7.1257%" y="581" width="0.0801%" height="15" fill="rgb(245,211,2)" fg:x="89" fg:w="1"/><text x="7.3757%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.1257%" y="565" width="0.0801%" height="15" fill="rgb(206,120,28)" fg:x="89" fg:w="1"/><text x="7.3757%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::key (1 samples, 0.08%)</title><rect x="7.2058%" y="613" width="0.0801%" height="15" fill="rgb(211,59,34)" fg:x="90" fg:w="1"/><text x="7.4558%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="7.2858%" y="613" width="0.0801%" height="15" fill="rgb(233,168,5)" fg:x="91" fg:w="1"/><text x="7.5358%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="7.2858%" y="597" width="0.0801%" height="15" fill="rgb(234,33,13)" fg:x="91" fg:w="1"/><text x="7.5358%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="7.2858%" y="581" width="0.0801%" height="15" fill="rgb(231,150,26)" fg:x="91" fg:w="1"/><text x="7.5358%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="7.2858%" y="565" width="0.0801%" height="15" fill="rgb(217,191,4)" fg:x="91" fg:w="1"/><text x="7.5358%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.4460%" y="565" width="0.0801%" height="15" fill="rgb(246,198,38)" fg:x="93" fg:w="1"/><text x="7.6960%" y="575.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="7.3659%" y="613" width="0.2402%" height="15" fill="rgb(245,64,37)" fg:x="92" fg:w="3"/><text x="7.6159%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="7.3659%" y="597" width="0.2402%" height="15" fill="rgb(250,30,36)" fg:x="92" fg:w="3"/><text x="7.6159%" y="607.50"></text></g><g><title>replies::identifier_to_key (3 samples, 0.24%)</title><rect x="7.3659%" y="581" width="0.2402%" height="15" fill="rgb(217,86,53)" fg:x="92" fg:w="3"/><text x="7.6159%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.5260%" y="565" width="0.0801%" height="15" fill="rgb(228,157,16)" fg:x="94" fg:w="1"/><text x="7.7760%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.5260%" y="549" width="0.0801%" height="15" fill="rgb(217,59,31)" fg:x="94" fg:w="1"/><text x="7.7760%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.5260%" y="533" width="0.0801%" height="15" fill="rgb(237,138,41)" fg:x="94" fg:w="1"/><text x="7.7760%" y="543.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="7.6861%" y="581" width="0.0801%" height="15" fill="rgb(227,91,49)" fg:x="96" fg:w="1"/><text x="7.9361%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="7.6861%" y="565" width="0.0801%" height="15" fill="rgb(247,21,44)" fg:x="96" fg:w="1"/><text x="7.9361%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="7.6861%" y="549" width="0.0801%" height="15" fill="rgb(219,210,51)" fg:x="96" fg:w="1"/><text x="7.9361%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.6861%" y="533" width="0.0801%" height="15" fill="rgb(209,140,6)" fg:x="96" fg:w="1"/><text x="7.9361%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6861%" y="517" width="0.0801%" height="15" fill="rgb(221,188,24)" fg:x="96" fg:w="1"/><text x="7.9361%" y="527.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="7.7662%" y="581" width="0.0801%" height="15" fill="rgb(232,154,20)" fg:x="97" fg:w="1"/><text x="8.0162%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::actions::RemoveRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="7.8463%" y="581" width="0.1601%" height="15" fill="rgb(244,137,50)" fg:x="98" fg:w="2"/><text x="8.0963%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="7.9263%" y="565" width="0.0801%" height="15" fill="rgb(225,185,43)" fg:x="99" fg:w="1"/><text x="8.1763%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9263%" y="549" width="0.0801%" height="15" fill="rgb(213,205,38)" fg:x="99" fg:w="1"/><text x="8.1763%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (6 samples, 0.48%)</title><rect x="7.6061%" y="613" width="0.4804%" height="15" fill="rgb(236,73,12)" fg:x="95" fg:w="6"/><text x="7.8561%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (6 samples, 0.48%)</title><rect x="7.6061%" y="597" width="0.4804%" height="15" fill="rgb(235,219,13)" fg:x="95" fg:w="6"/><text x="7.8561%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="8.0064%" y="581" width="0.0801%" height="15" fill="rgb(218,59,36)" fg:x="100" fg:w="1"/><text x="8.2564%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.0064%" y="565" width="0.0801%" height="15" fill="rgb(205,110,39)" fg:x="100" fg:w="1"/><text x="8.2564%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.0064%" y="549" width="0.0801%" height="15" fill="rgb(218,206,42)" fg:x="100" fg:w="1"/><text x="8.2564%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.0064%" y="533" width="0.0801%" height="15" fill="rgb(248,125,24)" fg:x="100" fg:w="1"/><text x="8.2564%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0064%" y="517" width="0.0801%" height="15" fill="rgb(242,28,27)" fg:x="100" fg:w="1"/><text x="8.2564%" y="527.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="8.0865%" y="613" width="0.0801%" height="15" fill="rgb(216,228,15)" fg:x="101" fg:w="1"/><text x="8.3365%" y="623.50"></text></g><g><title>kernel::plugins::Schema::empty (1 samples, 0.08%)</title><rect x="8.0865%" y="597" width="0.0801%" height="15" fill="rgb(235,116,46)" fg:x="101" fg:w="1"/><text x="8.3365%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (27 samples, 2.16%)</title><rect x="6.0849%" y="645" width="2.1617%" height="15" fill="rgb(224,18,32)" fg:x="76" fg:w="27"/><text x="6.3349%" y="655.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 2.16%)</title><rect x="6.0849%" y="629" width="2.1617%" height="15" fill="rgb(252,5,12)" fg:x="76" fg:w="27"/><text x="6.3349%" y="639.50">&lt;..</text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="8.1665%" y="613" width="0.0801%" height="15" fill="rgb(251,36,5)" fg:x="102" fg:w="1"/><text x="8.4165%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="8.1665%" y="597" width="0.0801%" height="15" fill="rgb(217,53,14)" fg:x="102" fg:w="1"/><text x="8.4165%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.3267%" y="629" width="0.1601%" height="15" fill="rgb(215,86,45)" fg:x="104" fg:w="2"/><text x="8.5767%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (6 samples, 0.48%)</title><rect x="8.2466%" y="645" width="0.4804%" height="15" fill="rgb(242,169,11)" fg:x="103" fg:w="6"/><text x="8.4966%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (3 samples, 0.24%)</title><rect x="8.4868%" y="629" width="0.2402%" height="15" fill="rgb(211,213,45)" fg:x="106" fg:w="3"/><text x="8.7368%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.5669%" y="613" width="0.1601%" height="15" fill="rgb(205,88,11)" fg:x="107" fg:w="2"/><text x="8.8169%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (67 samples, 5.36%)</title><rect x="3.5228%" y="661" width="5.3643%" height="15" fill="rgb(252,69,26)" fg:x="44" fg:w="67"/><text x="3.7728%" y="671.50">kernel:..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="8.7270%" y="645" width="0.1601%" height="15" fill="rgb(246,123,37)" fg:x="109" fg:w="2"/><text x="8.9770%" y="655.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="8.7270%" y="629" width="0.1601%" height="15" fill="rgb(212,205,5)" fg:x="109" fg:w="2"/><text x="8.9770%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.9672%" y="629" width="0.0801%" height="15" fill="rgb(253,148,0)" fg:x="112" fg:w="1"/><text x="9.2172%" y="639.50"></text></g><g><title>engine::session::Session::initialize (74 samples, 5.92%)</title><rect x="3.3627%" y="677" width="5.9247%" height="15" fill="rgb(239,22,4)" fg:x="42" fg:w="74"/><text x="3.6127%" y="687.50">engine::..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (5 samples, 0.40%)</title><rect x="8.8871%" y="661" width="0.4003%" height="15" fill="rgb(226,26,53)" fg:x="111" fg:w="5"/><text x="9.1371%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="8.8871%" y="645" width="0.4003%" height="15" fill="rgb(225,229,45)" fg:x="111" fg:w="5"/><text x="9.1371%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="9.0472%" y="629" width="0.2402%" height="15" fill="rgb(220,60,37)" fg:x="113" fg:w="3"/><text x="9.2972%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="9.0472%" y="613" width="0.2402%" height="15" fill="rgb(217,180,35)" fg:x="113" fg:w="3"/><text x="9.2972%" y="623.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="9.0472%" y="597" width="0.2402%" height="15" fill="rgb(229,7,53)" fg:x="113" fg:w="3"/><text x="9.2972%" y="607.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (77 samples, 6.16%)</title><rect x="3.2026%" y="725" width="6.1649%" height="15" fill="rgb(254,137,3)" fg:x="40" fg:w="77"/><text x="3.4526%" y="735.50">&lt;engine:..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (77 samples, 6.16%)</title><rect x="3.2026%" y="709" width="6.1649%" height="15" fill="rgb(215,140,41)" fg:x="40" fg:w="77"/><text x="3.4526%" y="719.50">engine::..</text></g><g><title>engine::session::Session::new (77 samples, 6.16%)</title><rect x="3.2026%" y="693" width="6.1649%" height="15" fill="rgb(250,80,15)" fg:x="40" fg:w="77"/><text x="3.4526%" y="703.50">engine::..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="9.2874%" y="677" width="0.0801%" height="15" fill="rgb(252,191,6)" fg:x="116" fg:w="1"/><text x="9.5374%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.2874%" y="661" width="0.0801%" height="15" fill="rgb(246,217,18)" fg:x="116" fg:w="1"/><text x="9.5374%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="9.2874%" y="645" width="0.0801%" height="15" fill="rgb(223,93,7)" fg:x="116" fg:w="1"/><text x="9.5374%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.4476%" y="709" width="0.0801%" height="15" fill="rgb(225,55,52)" fg:x="118" fg:w="1"/><text x="9.6976%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.4476%" y="693" width="0.0801%" height="15" fill="rgb(240,31,24)" fg:x="118" fg:w="1"/><text x="9.6976%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.4476%" y="677" width="0.0801%" height="15" fill="rgb(205,56,52)" fg:x="118" fg:w="1"/><text x="9.6976%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="9.5276%" y="709" width="0.0801%" height="15" fill="rgb(246,146,12)" fg:x="119" fg:w="1"/><text x="9.7776%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5276%" y="693" width="0.0801%" height="15" fill="rgb(239,84,36)" fg:x="119" fg:w="1"/><text x="9.7776%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.7678%" y="549" width="0.0801%" height="15" fill="rgb(207,41,40)" fg:x="122" fg:w="1"/><text x="10.0178%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7678%" y="533" width="0.0801%" height="15" fill="rgb(241,179,25)" fg:x="122" fg:w="1"/><text x="10.0178%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="9.7678%" y="565" width="0.1601%" height="15" fill="rgb(210,0,34)" fg:x="122" fg:w="2"/><text x="10.0178%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8479%" y="549" width="0.0801%" height="15" fill="rgb(225,217,29)" fg:x="123" fg:w="1"/><text x="10.0979%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="9.6878%" y="581" width="0.3203%" height="15" fill="rgb(216,191,38)" fg:x="121" fg:w="4"/><text x="9.9378%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="9.9279%" y="565" width="0.0801%" height="15" fill="rgb(232,140,52)" fg:x="124" fg:w="1"/><text x="10.1779%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.9279%" y="549" width="0.0801%" height="15" fill="rgb(223,158,51)" fg:x="124" fg:w="1"/><text x="10.1779%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.9279%" y="533" width="0.0801%" height="15" fill="rgb(235,29,51)" fg:x="124" fg:w="1"/><text x="10.1779%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="9.6077%" y="613" width="0.5604%" height="15" fill="rgb(215,181,18)" fg:x="120" fg:w="7"/><text x="9.8577%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="9.6878%" y="597" width="0.4804%" height="15" fill="rgb(227,125,34)" fg:x="121" fg:w="6"/><text x="9.9378%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="10.0080%" y="581" width="0.1601%" height="15" fill="rgb(230,197,49)" fg:x="125" fg:w="2"/><text x="10.2580%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="10.1681%" y="613" width="0.0801%" height="15" fill="rgb(239,141,16)" fg:x="127" fg:w="1"/><text x="10.4181%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="10.1681%" y="597" width="0.0801%" height="15" fill="rgb(225,105,43)" fg:x="127" fg:w="1"/><text x="10.4181%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.1681%" y="581" width="0.0801%" height="15" fill="rgb(214,131,14)" fg:x="127" fg:w="1"/><text x="10.4181%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.1681%" y="565" width="0.0801%" height="15" fill="rgb(229,177,11)" fg:x="127" fg:w="1"/><text x="10.4181%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.1681%" y="549" width="0.0801%" height="15" fill="rgb(231,180,14)" fg:x="127" fg:w="1"/><text x="10.4181%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.1681%" y="533" width="0.0801%" height="15" fill="rgb(232,88,2)" fg:x="127" fg:w="1"/><text x="10.4181%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.1681%" y="517" width="0.0801%" height="15" fill="rgb(205,220,8)" fg:x="127" fg:w="1"/><text x="10.4181%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.3283%" y="597" width="0.0801%" height="15" fill="rgb(225,23,53)" fg:x="129" fg:w="1"/><text x="10.5783%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.3283%" y="581" width="0.0801%" height="15" fill="rgb(213,62,29)" fg:x="129" fg:w="1"/><text x="10.5783%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3283%" y="565" width="0.0801%" height="15" fill="rgb(227,75,7)" fg:x="129" fg:w="1"/><text x="10.5783%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3283%" y="549" width="0.0801%" height="15" fill="rgb(207,105,14)" fg:x="129" fg:w="1"/><text x="10.5783%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.3283%" y="533" width="0.0801%" height="15" fill="rgb(245,62,29)" fg:x="129" fg:w="1"/><text x="10.5783%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.4083%" y="581" width="0.0801%" height="15" fill="rgb(236,202,4)" fg:x="130" fg:w="1"/><text x="10.6583%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.4083%" y="565" width="0.0801%" height="15" fill="rgb(250,67,1)" fg:x="130" fg:w="1"/><text x="10.6583%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.4884%" y="581" width="0.0801%" height="15" fill="rgb(253,115,44)" fg:x="131" fg:w="1"/><text x="10.7384%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.5685%" y="565" width="0.0801%" height="15" fill="rgb(251,139,18)" fg:x="132" fg:w="1"/><text x="10.8185%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5685%" y="549" width="0.0801%" height="15" fill="rgb(218,22,32)" fg:x="132" fg:w="1"/><text x="10.8185%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="10.6485%" y="565" width="0.3203%" height="15" fill="rgb(243,53,5)" fg:x="133" fg:w="4"/><text x="10.8985%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="10.7286%" y="549" width="0.2402%" height="15" fill="rgb(227,56,16)" fg:x="134" fg:w="3"/><text x="10.9786%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.8887%" y="533" width="0.0801%" height="15" fill="rgb(245,53,0)" fg:x="136" fg:w="1"/><text x="11.1387%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="10.8887%" y="517" width="0.0801%" height="15" fill="rgb(216,170,35)" fg:x="136" fg:w="1"/><text x="11.1387%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.0488%" y="549" width="0.0801%" height="15" fill="rgb(211,200,8)" fg:x="138" fg:w="1"/><text x="11.2988%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.1289%" y="501" width="0.0801%" height="15" fill="rgb(228,204,44)" fg:x="139" fg:w="1"/><text x="11.3789%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.1289%" y="485" width="0.0801%" height="15" fill="rgb(214,121,17)" fg:x="139" fg:w="1"/><text x="11.3789%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.1289%" y="469" width="0.0801%" height="15" fill="rgb(233,64,38)" fg:x="139" fg:w="1"/><text x="11.3789%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.1289%" y="453" width="0.0801%" height="15" fill="rgb(253,54,19)" fg:x="139" fg:w="1"/><text x="11.3789%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.1289%" y="549" width="0.1601%" height="15" fill="rgb(253,94,18)" fg:x="139" fg:w="2"/><text x="11.3789%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.1289%" y="533" width="0.1601%" height="15" fill="rgb(227,57,52)" fg:x="139" fg:w="2"/><text x="11.3789%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.1289%" y="517" width="0.1601%" height="15" fill="rgb(230,228,50)" fg:x="139" fg:w="2"/><text x="11.3789%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="11.2090%" y="501" width="0.0801%" height="15" fill="rgb(217,205,27)" fg:x="140" fg:w="1"/><text x="11.4590%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="11.2890%" y="533" width="0.2402%" height="15" fill="rgb(252,71,50)" fg:x="141" fg:w="3"/><text x="11.5390%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="11.2890%" y="517" width="0.2402%" height="15" fill="rgb(209,86,4)" fg:x="141" fg:w="3"/><text x="11.5390%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.4492%" y="501" width="0.0801%" height="15" fill="rgb(229,94,0)" fg:x="143" fg:w="1"/><text x="11.6992%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.4492%" y="485" width="0.0801%" height="15" fill="rgb(252,223,21)" fg:x="143" fg:w="1"/><text x="11.6992%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.4492%" y="469" width="0.0801%" height="15" fill="rgb(230,210,4)" fg:x="143" fg:w="1"/><text x="11.6992%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.4492%" y="453" width="0.0801%" height="15" fill="rgb(240,149,38)" fg:x="143" fg:w="1"/><text x="11.6992%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.4492%" y="437" width="0.0801%" height="15" fill="rgb(254,105,20)" fg:x="143" fg:w="1"/><text x="11.6992%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5292%" y="533" width="0.0801%" height="15" fill="rgb(253,87,46)" fg:x="144" fg:w="1"/><text x="11.7792%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.5292%" y="517" width="0.0801%" height="15" fill="rgb(253,116,33)" fg:x="144" fg:w="1"/><text x="11.7792%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.5292%" y="501" width="0.0801%" height="15" fill="rgb(229,198,5)" fg:x="144" fg:w="1"/><text x="11.7792%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="11.2890%" y="549" width="0.4003%" height="15" fill="rgb(242,38,37)" fg:x="141" fg:w="5"/><text x="11.5390%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6093%" y="533" width="0.0801%" height="15" fill="rgb(242,69,53)" fg:x="145" fg:w="1"/><text x="11.8593%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.6093%" y="517" width="0.0801%" height="15" fill="rgb(249,80,16)" fg:x="145" fg:w="1"/><text x="11.8593%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.6093%" y="501" width="0.0801%" height="15" fill="rgb(206,128,11)" fg:x="145" fg:w="1"/><text x="11.8593%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="10.9688%" y="565" width="0.8006%" height="15" fill="rgb(212,35,20)" fg:x="137" fg:w="10"/><text x="11.2188%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6894%" y="549" width="0.0801%" height="15" fill="rgb(236,79,13)" fg:x="146" fg:w="1"/><text x="11.9394%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (16 samples, 1.28%)</title><rect x="10.5685%" y="581" width="1.2810%" height="15" fill="rgb(233,123,3)" fg:x="132" fg:w="16"/><text x="10.8185%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.7694%" y="565" width="0.0801%" height="15" fill="rgb(214,93,52)" fg:x="147" fg:w="1"/><text x="12.0194%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.7694%" y="549" width="0.0801%" height="15" fill="rgb(251,37,40)" fg:x="147" fg:w="1"/><text x="12.0194%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.7694%" y="533" width="0.0801%" height="15" fill="rgb(227,80,54)" fg:x="147" fg:w="1"/><text x="12.0194%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 1.76%)</title><rect x="10.2482%" y="613" width="1.7614%" height="15" fill="rgb(254,48,11)" fg:x="128" fg:w="22"/><text x="10.4982%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.60%)</title><rect x="10.4083%" y="597" width="1.6013%" height="15" fill="rgb(235,193,26)" fg:x="130" fg:w="20"/><text x="10.6583%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.8495%" y="581" width="0.1601%" height="15" fill="rgb(229,99,21)" fg:x="148" fg:w="2"/><text x="12.0995%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.8495%" y="565" width="0.1601%" height="15" fill="rgb(211,140,41)" fg:x="148" fg:w="2"/><text x="12.0995%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="11.9295%" y="549" width="0.0801%" height="15" fill="rgb(240,227,30)" fg:x="149" fg:w="1"/><text x="12.1795%" y="559.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="12.0096%" y="581" width="0.0801%" height="15" fill="rgb(215,224,45)" fg:x="150" fg:w="1"/><text x="12.2596%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.0096%" y="565" width="0.0801%" height="15" fill="rgb(206,123,31)" fg:x="150" fg:w="1"/><text x="12.2596%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="12.0096%" y="549" width="0.0801%" height="15" fill="rgb(210,138,16)" fg:x="150" fg:w="1"/><text x="12.2596%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="12.0096%" y="597" width="0.1601%" height="15" fill="rgb(228,57,28)" fg:x="150" fg:w="2"/><text x="12.2596%" y="607.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="12.0897%" y="581" width="0.0801%" height="15" fill="rgb(242,170,10)" fg:x="151" fg:w="1"/><text x="12.3397%" y="591.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="12.0897%" y="565" width="0.0801%" height="15" fill="rgb(228,214,39)" fg:x="151" fg:w="1"/><text x="12.3397%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1697%" y="565" width="0.0801%" height="15" fill="rgb(218,179,33)" fg:x="152" fg:w="1"/><text x="12.4197%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.1697%" y="549" width="0.0801%" height="15" fill="rgb(235,193,39)" fg:x="152" fg:w="1"/><text x="12.4197%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="12.2498%" y="517" width="0.1601%" height="15" fill="rgb(219,221,36)" fg:x="153" fg:w="2"/><text x="12.4998%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.2498%" y="501" width="0.1601%" height="15" fill="rgb(248,218,19)" fg:x="153" fg:w="2"/><text x="12.4998%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.3299%" y="485" width="0.0801%" height="15" fill="rgb(205,50,9)" fg:x="154" fg:w="1"/><text x="12.5799%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.3299%" y="469" width="0.0801%" height="15" fill="rgb(238,81,28)" fg:x="154" fg:w="1"/><text x="12.5799%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3299%" y="453" width="0.0801%" height="15" fill="rgb(235,110,19)" fg:x="154" fg:w="1"/><text x="12.5799%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="12.5701%" y="469" width="0.0801%" height="15" fill="rgb(214,7,14)" fg:x="157" fg:w="1"/><text x="12.8201%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="12.4900%" y="501" width="0.2402%" height="15" fill="rgb(211,77,3)" fg:x="156" fg:w="3"/><text x="12.7400%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="12.4900%" y="485" width="0.2402%" height="15" fill="rgb(229,5,9)" fg:x="156" fg:w="3"/><text x="12.7400%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.6501%" y="469" width="0.0801%" height="15" fill="rgb(225,90,11)" fg:x="158" fg:w="1"/><text x="12.9001%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6501%" y="453" width="0.0801%" height="15" fill="rgb(242,56,8)" fg:x="158" fg:w="1"/><text x="12.9001%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6501%" y="437" width="0.0801%" height="15" fill="rgb(249,212,39)" fg:x="158" fg:w="1"/><text x="12.9001%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="12.2498%" y="549" width="0.5604%" height="15" fill="rgb(236,90,9)" fg:x="153" fg:w="7"/><text x="12.4998%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="12.2498%" y="533" width="0.5604%" height="15" fill="rgb(206,88,35)" fg:x="153" fg:w="7"/><text x="12.4998%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="12.4099%" y="517" width="0.4003%" height="15" fill="rgb(205,126,30)" fg:x="155" fg:w="5"/><text x="12.6599%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7302%" y="501" width="0.0801%" height="15" fill="rgb(230,176,12)" fg:x="159" fg:w="1"/><text x="12.9802%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.8102%" y="549" width="0.1601%" height="15" fill="rgb(243,19,9)" fg:x="160" fg:w="2"/><text x="13.0602%" y="559.50"></text></g><g><title>engine::session::Session::flush (43 samples, 3.44%)</title><rect x="9.6077%" y="709" width="3.4428%" height="15" fill="rgb(245,171,17)" fg:x="120" fg:w="43"/><text x="9.8577%" y="719.50">eng..</text></g><g><title>engine::session::state::State::close (43 samples, 3.44%)</title><rect x="9.6077%" y="693" width="3.4428%" height="15" fill="rgb(227,52,21)" fg:x="120" fg:w="43"/><text x="9.8577%" y="703.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (43 samples, 3.44%)</title><rect x="9.6077%" y="677" width="3.4428%" height="15" fill="rgb(238,69,14)" fg:x="120" fg:w="43"/><text x="9.8577%" y="687.50">eng..</text></g><g><title>core::iter::adapters::try_process (43 samples, 3.44%)</title><rect x="9.6077%" y="661" width="3.4428%" height="15" fill="rgb(241,156,39)" fg:x="120" fg:w="43"/><text x="9.8577%" y="671.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43 samples, 3.44%)</title><rect x="9.6077%" y="645" width="3.4428%" height="15" fill="rgb(212,227,28)" fg:x="120" fg:w="43"/><text x="9.8577%" y="655.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (43 samples, 3.44%)</title><rect x="9.6077%" y="629" width="3.4428%" height="15" fill="rgb(209,118,27)" fg:x="120" fg:w="43"/><text x="9.8577%" y="639.50">eng..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="12.0096%" y="613" width="1.0408%" height="15" fill="rgb(226,102,5)" fg:x="150" fg:w="13"/><text x="12.2596%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.88%)</title><rect x="12.1697%" y="597" width="0.8807%" height="15" fill="rgb(223,34,3)" fg:x="152" fg:w="11"/><text x="12.4197%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.88%)</title><rect x="12.1697%" y="581" width="0.8807%" height="15" fill="rgb(221,81,38)" fg:x="152" fg:w="11"/><text x="12.4197%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="12.2498%" y="565" width="0.8006%" height="15" fill="rgb(236,219,28)" fg:x="153" fg:w="10"/><text x="12.4998%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9704%" y="549" width="0.0801%" height="15" fill="rgb(213,200,14)" fg:x="162" fg:w="1"/><text x="13.2204%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.0504%" y="677" width="0.0801%" height="15" fill="rgb(240,33,19)" fg:x="163" fg:w="1"/><text x="13.3004%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0504%" y="661" width="0.0801%" height="15" fill="rgb(233,113,27)" fg:x="163" fg:w="1"/><text x="13.3004%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0504%" y="645" width="0.0801%" height="15" fill="rgb(220,221,18)" fg:x="163" fg:w="1"/><text x="13.3004%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.1305%" y="677" width="0.0801%" height="15" fill="rgb(238,92,8)" fg:x="164" fg:w="1"/><text x="13.3805%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1305%" y="661" width="0.0801%" height="15" fill="rgb(222,164,16)" fg:x="164" fg:w="1"/><text x="13.3805%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="13.0504%" y="709" width="0.2402%" height="15" fill="rgb(241,119,3)" fg:x="163" fg:w="3"/><text x="13.3004%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="13.0504%" y="693" width="0.2402%" height="15" fill="rgb(241,44,8)" fg:x="163" fg:w="3"/><text x="13.3004%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2106%" y="677" width="0.0801%" height="15" fill="rgb(230,36,40)" fg:x="165" fg:w="1"/><text x="13.4606%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.2106%" y="661" width="0.0801%" height="15" fill="rgb(243,16,36)" fg:x="165" fg:w="1"/><text x="13.4606%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.2106%" y="645" width="0.0801%" height="15" fill="rgb(231,4,26)" fg:x="165" fg:w="1"/><text x="13.4606%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2106%" y="629" width="0.0801%" height="15" fill="rgb(240,9,31)" fg:x="165" fg:w="1"/><text x="13.4606%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.3707%" y="629" width="0.0801%" height="15" fill="rgb(207,173,15)" fg:x="167" fg:w="1"/><text x="13.6207%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3707%" y="613" width="0.0801%" height="15" fill="rgb(224,192,53)" fg:x="167" fg:w="1"/><text x="13.6207%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.3707%" y="661" width="0.1601%" height="15" fill="rgb(223,67,28)" fg:x="167" fg:w="2"/><text x="13.6207%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.3707%" y="645" width="0.1601%" height="15" fill="rgb(211,20,47)" fg:x="167" fg:w="2"/><text x="13.6207%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4508%" y="629" width="0.0801%" height="15" fill="rgb(240,228,2)" fg:x="168" fg:w="1"/><text x="13.7008%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4508%" y="613" width="0.0801%" height="15" fill="rgb(248,151,12)" fg:x="168" fg:w="1"/><text x="13.7008%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.4508%" y="597" width="0.0801%" height="15" fill="rgb(244,8,39)" fg:x="168" fg:w="1"/><text x="13.7008%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.4508%" y="581" width="0.0801%" height="15" fill="rgb(222,26,8)" fg:x="168" fg:w="1"/><text x="13.7008%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.4508%" y="565" width="0.0801%" height="15" fill="rgb(213,106,44)" fg:x="168" fg:w="1"/><text x="13.7008%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4508%" y="549" width="0.0801%" height="15" fill="rgb(214,129,20)" fg:x="168" fg:w="1"/><text x="13.7008%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4508%" y="533" width="0.0801%" height="15" fill="rgb(212,32,13)" fg:x="168" fg:w="1"/><text x="13.7008%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.4508%" y="517" width="0.0801%" height="15" fill="rgb(208,168,33)" fg:x="168" fg:w="1"/><text x="13.7008%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.4508%" y="501" width="0.0801%" height="15" fill="rgb(231,207,8)" fg:x="168" fg:w="1"/><text x="13.7008%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.4508%" y="485" width="0.0801%" height="15" fill="rgb(235,219,23)" fg:x="168" fg:w="1"/><text x="13.7008%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.4508%" y="469" width="0.0801%" height="15" fill="rgb(226,216,26)" fg:x="168" fg:w="1"/><text x="13.7008%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="13.4508%" y="453" width="0.0801%" height="15" fill="rgb(239,137,16)" fg:x="168" fg:w="1"/><text x="13.7008%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="13.4508%" y="437" width="0.0801%" height="15" fill="rgb(207,12,36)" fg:x="168" fg:w="1"/><text x="13.7008%" y="447.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="13.2906%" y="693" width="0.3203%" height="15" fill="rgb(210,214,24)" fg:x="166" fg:w="4"/><text x="13.5406%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="13.3707%" y="677" width="0.2402%" height="15" fill="rgb(206,56,30)" fg:x="167" fg:w="3"/><text x="13.6207%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.5308%" y="661" width="0.0801%" height="15" fill="rgb(228,143,26)" fg:x="169" fg:w="1"/><text x="13.7808%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.5308%" y="645" width="0.0801%" height="15" fill="rgb(216,218,46)" fg:x="169" fg:w="1"/><text x="13.7808%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.5308%" y="629" width="0.0801%" height="15" fill="rgb(206,6,19)" fg:x="169" fg:w="1"/><text x="13.7808%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.5308%" y="613" width="0.0801%" height="15" fill="rgb(239,177,51)" fg:x="169" fg:w="1"/><text x="13.7808%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.5308%" y="597" width="0.0801%" height="15" fill="rgb(216,55,25)" fg:x="169" fg:w="1"/><text x="13.7808%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6109%" y="645" width="0.0801%" height="15" fill="rgb(231,163,29)" fg:x="170" fg:w="1"/><text x="13.8609%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="13.6109%" y="661" width="0.1601%" height="15" fill="rgb(232,149,50)" fg:x="170" fg:w="2"/><text x="13.8609%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.6910%" y="645" width="0.0801%" height="15" fill="rgb(223,142,48)" fg:x="171" fg:w="1"/><text x="13.9410%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6910%" y="629" width="0.0801%" height="15" fill="rgb(245,83,23)" fg:x="171" fg:w="1"/><text x="13.9410%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.6910%" y="613" width="0.0801%" height="15" fill="rgb(224,63,2)" fg:x="171" fg:w="1"/><text x="13.9410%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6910%" y="597" width="0.0801%" height="15" fill="rgb(218,65,53)" fg:x="171" fg:w="1"/><text x="13.9410%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="13.6910%" y="581" width="0.0801%" height="15" fill="rgb(221,84,29)" fg:x="171" fg:w="1"/><text x="13.9410%" y="591.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="13.6910%" y="565" width="0.0801%" height="15" fill="rgb(234,0,32)" fg:x="171" fg:w="1"/><text x="13.9410%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.7710%" y="645" width="0.0801%" height="15" fill="rgb(206,20,16)" fg:x="172" fg:w="1"/><text x="14.0210%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7710%" y="629" width="0.0801%" height="15" fill="rgb(244,172,18)" fg:x="172" fg:w="1"/><text x="14.0210%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.7710%" y="613" width="0.0801%" height="15" fill="rgb(254,133,1)" fg:x="172" fg:w="1"/><text x="14.0210%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.7710%" y="597" width="0.0801%" height="15" fill="rgb(222,206,41)" fg:x="172" fg:w="1"/><text x="14.0210%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (5 samples, 0.40%)</title><rect x="13.6109%" y="677" width="0.4003%" height="15" fill="rgb(212,3,42)" fg:x="170" fg:w="5"/><text x="13.8609%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="13.7710%" y="661" width="0.2402%" height="15" fill="rgb(241,11,4)" fg:x="172" fg:w="3"/><text x="14.0210%" y="671.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="13.8511%" y="645" width="0.1601%" height="15" fill="rgb(205,19,26)" fg:x="173" fg:w="2"/><text x="14.1011%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.8511%" y="629" width="0.1601%" height="15" fill="rgb(210,179,32)" fg:x="173" fg:w="2"/><text x="14.1011%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="13.8511%" y="613" width="0.1601%" height="15" fill="rgb(227,116,49)" fg:x="173" fg:w="2"/><text x="14.1011%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.8511%" y="597" width="0.1601%" height="15" fill="rgb(211,146,6)" fg:x="173" fg:w="2"/><text x="14.1011%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.9311%" y="581" width="0.0801%" height="15" fill="rgb(219,44,39)" fg:x="174" fg:w="1"/><text x="14.1811%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.0112%" y="581" width="0.0801%" height="15" fill="rgb(234,128,11)" fg:x="175" fg:w="1"/><text x="14.2612%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0112%" y="565" width="0.0801%" height="15" fill="rgb(220,183,53)" fg:x="175" fg:w="1"/><text x="14.2612%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="14.0112%" y="629" width="0.1601%" height="15" fill="rgb(213,219,32)" fg:x="175" fg:w="2"/><text x="14.2612%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.0112%" y="613" width="0.1601%" height="15" fill="rgb(232,156,16)" fg:x="175" fg:w="2"/><text x="14.2612%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0112%" y="597" width="0.1601%" height="15" fill="rgb(246,135,34)" fg:x="175" fg:w="2"/><text x="14.2612%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.0913%" y="581" width="0.0801%" height="15" fill="rgb(241,99,0)" fg:x="176" fg:w="1"/><text x="14.3413%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0913%" y="565" width="0.0801%" height="15" fill="rgb(222,103,45)" fg:x="176" fg:w="1"/><text x="14.3413%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.0913%" y="549" width="0.0801%" height="15" fill="rgb(212,57,4)" fg:x="176" fg:w="1"/><text x="14.3413%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0913%" y="533" width="0.0801%" height="15" fill="rgb(215,68,47)" fg:x="176" fg:w="1"/><text x="14.3413%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0913%" y="517" width="0.0801%" height="15" fill="rgb(230,84,2)" fg:x="176" fg:w="1"/><text x="14.3413%" y="527.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="14.1713%" y="629" width="0.0801%" height="15" fill="rgb(220,102,14)" fg:x="177" fg:w="1"/><text x="14.4213%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1713%" y="613" width="0.0801%" height="15" fill="rgb(240,10,32)" fg:x="177" fg:w="1"/><text x="14.4213%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.1713%" y="597" width="0.0801%" height="15" fill="rgb(215,47,27)" fg:x="177" fg:w="1"/><text x="14.4213%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="14.0112%" y="661" width="0.3203%" height="15" fill="rgb(233,188,43)" fg:x="175" fg:w="4"/><text x="14.2612%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="14.0112%" y="645" width="0.3203%" height="15" fill="rgb(253,190,1)" fg:x="175" fg:w="4"/><text x="14.2612%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="14.2514%" y="629" width="0.0801%" height="15" fill="rgb(206,114,52)" fg:x="178" fg:w="1"/><text x="14.5014%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.2514%" y="613" width="0.0801%" height="15" fill="rgb(233,120,37)" fg:x="178" fg:w="1"/><text x="14.5014%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="14.2514%" y="597" width="0.0801%" height="15" fill="rgb(214,52,39)" fg:x="178" fg:w="1"/><text x="14.5014%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="14.2514%" y="581" width="0.0801%" height="15" fill="rgb(223,80,29)" fg:x="178" fg:w="1"/><text x="14.5014%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.2514%" y="565" width="0.0801%" height="15" fill="rgb(230,101,40)" fg:x="178" fg:w="1"/><text x="14.5014%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="14.0112%" y="677" width="0.4003%" height="15" fill="rgb(219,211,8)" fg:x="175" fg:w="5"/><text x="14.2612%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="14.3315%" y="661" width="0.0801%" height="15" fill="rgb(252,126,28)" fg:x="179" fg:w="1"/><text x="14.5815%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.20%)</title><rect x="13.2906%" y="709" width="1.2010%" height="15" fill="rgb(215,56,38)" fg:x="166" fg:w="15"/><text x="13.5406%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (11 samples, 0.88%)</title><rect x="13.6109%" y="693" width="0.8807%" height="15" fill="rgb(249,55,44)" fg:x="170" fg:w="11"/><text x="13.8609%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="14.4115%" y="677" width="0.0801%" height="15" fill="rgb(220,221,32)" fg:x="180" fg:w="1"/><text x="14.6615%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="14.4115%" y="661" width="0.0801%" height="15" fill="rgb(212,216,41)" fg:x="180" fg:w="1"/><text x="14.6615%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="14.4115%" y="645" width="0.0801%" height="15" fill="rgb(228,213,43)" fg:x="180" fg:w="1"/><text x="14.6615%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="14.4916%" y="661" width="0.0801%" height="15" fill="rgb(211,31,26)" fg:x="181" fg:w="1"/><text x="14.7416%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.4916%" y="645" width="0.0801%" height="15" fill="rgb(229,202,19)" fg:x="181" fg:w="1"/><text x="14.7416%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.4916%" y="629" width="0.0801%" height="15" fill="rgb(229,105,46)" fg:x="181" fg:w="1"/><text x="14.7416%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6517%" y="629" width="0.0801%" height="15" fill="rgb(235,108,1)" fg:x="183" fg:w="1"/><text x="14.9017%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6517%" y="613" width="0.0801%" height="15" fill="rgb(245,111,35)" fg:x="183" fg:w="1"/><text x="14.9017%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6517%" y="597" width="0.0801%" height="15" fill="rgb(219,185,31)" fg:x="183" fg:w="1"/><text x="14.9017%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="14.7318%" y="613" width="0.0801%" height="15" fill="rgb(214,4,43)" fg:x="184" fg:w="1"/><text x="14.9818%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (5 samples, 0.40%)</title><rect x="14.4916%" y="709" width="0.4003%" height="15" fill="rgb(235,227,40)" fg:x="181" fg:w="5"/><text x="14.7416%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (5 samples, 0.40%)</title><rect x="14.4916%" y="693" width="0.4003%" height="15" fill="rgb(230,88,30)" fg:x="181" fg:w="5"/><text x="14.7416%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (5 samples, 0.40%)</title><rect x="14.4916%" y="677" width="0.4003%" height="15" fill="rgb(216,217,1)" fg:x="181" fg:w="5"/><text x="14.7416%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (4 samples, 0.32%)</title><rect x="14.5717%" y="661" width="0.3203%" height="15" fill="rgb(248,139,50)" fg:x="182" fg:w="4"/><text x="14.8217%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="14.5717%" y="645" width="0.3203%" height="15" fill="rgb(233,1,21)" fg:x="182" fg:w="4"/><text x="14.8217%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="14.7318%" y="629" width="0.1601%" height="15" fill="rgb(215,183,12)" fg:x="184" fg:w="2"/><text x="14.9818%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.8118%" y="613" width="0.0801%" height="15" fill="rgb(229,104,42)" fg:x="185" fg:w="1"/><text x="15.0618%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8118%" y="597" width="0.0801%" height="15" fill="rgb(243,34,48)" fg:x="185" fg:w="1"/><text x="15.0618%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.8118%" y="581" width="0.0801%" height="15" fill="rgb(239,11,44)" fg:x="185" fg:w="1"/><text x="15.0618%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.8118%" y="565" width="0.0801%" height="15" fill="rgb(231,98,35)" fg:x="185" fg:w="1"/><text x="15.0618%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.9720%" y="645" width="0.0801%" height="15" fill="rgb(233,28,25)" fg:x="187" fg:w="1"/><text x="15.2220%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.9720%" y="629" width="0.0801%" height="15" fill="rgb(234,123,11)" fg:x="187" fg:w="1"/><text x="15.2220%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.9720%" y="613" width="0.0801%" height="15" fill="rgb(220,69,3)" fg:x="187" fg:w="1"/><text x="15.2220%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9720%" y="597" width="0.0801%" height="15" fill="rgb(214,64,36)" fg:x="187" fg:w="1"/><text x="15.2220%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.9720%" y="581" width="0.0801%" height="15" fill="rgb(211,138,32)" fg:x="187" fg:w="1"/><text x="15.2220%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9720%" y="565" width="0.0801%" height="15" fill="rgb(213,118,47)" fg:x="187" fg:w="1"/><text x="15.2220%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.9720%" y="549" width="0.0801%" height="15" fill="rgb(243,124,49)" fg:x="187" fg:w="1"/><text x="15.2220%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="14.9720%" y="677" width="0.1601%" height="15" fill="rgb(221,30,28)" fg:x="187" fg:w="2"/><text x="15.2220%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="14.9720%" y="661" width="0.1601%" height="15" fill="rgb(246,37,13)" fg:x="187" fg:w="2"/><text x="15.2220%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="15.0520%" y="645" width="0.0801%" height="15" fill="rgb(249,66,14)" fg:x="188" fg:w="1"/><text x="15.3020%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.0520%" y="629" width="0.0801%" height="15" fill="rgb(213,166,5)" fg:x="188" fg:w="1"/><text x="15.3020%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.0520%" y="613" width="0.0801%" height="15" fill="rgb(221,66,24)" fg:x="188" fg:w="1"/><text x="15.3020%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.0520%" y="597" width="0.0801%" height="15" fill="rgb(210,132,17)" fg:x="188" fg:w="1"/><text x="15.3020%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.0520%" y="581" width="0.0801%" height="15" fill="rgb(243,202,5)" fg:x="188" fg:w="1"/><text x="15.3020%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.1321%" y="677" width="0.0801%" height="15" fill="rgb(233,70,48)" fg:x="189" fg:w="1"/><text x="15.3821%" y="687.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="15.1321%" y="661" width="0.0801%" height="15" fill="rgb(238,41,26)" fg:x="189" fg:w="1"/><text x="15.3821%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.1321%" y="645" width="0.0801%" height="15" fill="rgb(241,19,31)" fg:x="189" fg:w="1"/><text x="15.3821%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="15.1321%" y="629" width="0.0801%" height="15" fill="rgb(214,76,10)" fg:x="189" fg:w="1"/><text x="15.3821%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="15.1321%" y="613" width="0.0801%" height="15" fill="rgb(254,202,22)" fg:x="189" fg:w="1"/><text x="15.3821%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.1321%" y="597" width="0.0801%" height="15" fill="rgb(214,72,24)" fg:x="189" fg:w="1"/><text x="15.3821%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.1321%" y="581" width="0.0801%" height="15" fill="rgb(221,92,46)" fg:x="189" fg:w="1"/><text x="15.3821%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.2922%" y="629" width="0.0801%" height="15" fill="rgb(246,13,50)" fg:x="191" fg:w="1"/><text x="15.5422%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.2922%" y="613" width="0.0801%" height="15" fill="rgb(240,165,38)" fg:x="191" fg:w="1"/><text x="15.5422%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="15.2922%" y="661" width="0.1601%" height="15" fill="rgb(241,24,51)" fg:x="191" fg:w="2"/><text x="15.5422%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.2922%" y="645" width="0.1601%" height="15" fill="rgb(227,51,44)" fg:x="191" fg:w="2"/><text x="15.5422%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3723%" y="629" width="0.0801%" height="15" fill="rgb(231,121,3)" fg:x="192" fg:w="1"/><text x="15.6223%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3723%" y="613" width="0.0801%" height="15" fill="rgb(245,3,41)" fg:x="192" fg:w="1"/><text x="15.6223%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.3723%" y="597" width="0.0801%" height="15" fill="rgb(214,13,26)" fg:x="192" fg:w="1"/><text x="15.6223%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.3723%" y="581" width="0.0801%" height="15" fill="rgb(252,75,11)" fg:x="192" fg:w="1"/><text x="15.6223%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.3723%" y="565" width="0.0801%" height="15" fill="rgb(218,226,17)" fg:x="192" fg:w="1"/><text x="15.6223%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3723%" y="549" width="0.0801%" height="15" fill="rgb(248,89,38)" fg:x="192" fg:w="1"/><text x="15.6223%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3723%" y="533" width="0.0801%" height="15" fill="rgb(237,73,46)" fg:x="192" fg:w="1"/><text x="15.6223%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.3723%" y="517" width="0.0801%" height="15" fill="rgb(242,78,33)" fg:x="192" fg:w="1"/><text x="15.6223%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.3723%" y="501" width="0.0801%" height="15" fill="rgb(235,60,3)" fg:x="192" fg:w="1"/><text x="15.6223%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.3723%" y="485" width="0.0801%" height="15" fill="rgb(216,172,19)" fg:x="192" fg:w="1"/><text x="15.6223%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.3723%" y="469" width="0.0801%" height="15" fill="rgb(227,6,42)" fg:x="192" fg:w="1"/><text x="15.6223%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3723%" y="453" width="0.0801%" height="15" fill="rgb(223,207,42)" fg:x="192" fg:w="1"/><text x="15.6223%" y="463.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="15.4524%" y="629" width="0.0801%" height="15" fill="rgb(246,138,30)" fg:x="193" fg:w="1"/><text x="15.7024%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="15.4524%" y="613" width="0.0801%" height="15" fill="rgb(251,199,47)" fg:x="193" fg:w="1"/><text x="15.7024%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.4524%" y="597" width="0.0801%" height="15" fill="rgb(228,218,44)" fg:x="193" fg:w="1"/><text x="15.7024%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4524%" y="581" width="0.0801%" height="15" fill="rgb(220,68,6)" fg:x="193" fg:w="1"/><text x="15.7024%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.4524%" y="565" width="0.0801%" height="15" fill="rgb(240,60,26)" fg:x="193" fg:w="1"/><text x="15.7024%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4524%" y="549" width="0.0801%" height="15" fill="rgb(211,200,19)" fg:x="193" fg:w="1"/><text x="15.7024%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.4524%" y="533" width="0.0801%" height="15" fill="rgb(242,145,30)" fg:x="193" fg:w="1"/><text x="15.7024%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4524%" y="517" width="0.0801%" height="15" fill="rgb(225,64,13)" fg:x="193" fg:w="1"/><text x="15.7024%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.4524%" y="501" width="0.0801%" height="15" fill="rgb(218,103,35)" fg:x="193" fg:w="1"/><text x="15.7024%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5324%" y="597" width="0.0801%" height="15" fill="rgb(216,93,46)" fg:x="194" fg:w="1"/><text x="15.7824%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5324%" y="581" width="0.0801%" height="15" fill="rgb(225,159,27)" fg:x="194" fg:w="1"/><text x="15.7824%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5324%" y="565" width="0.0801%" height="15" fill="rgb(225,204,11)" fg:x="194" fg:w="1"/><text x="15.7824%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.5324%" y="549" width="0.0801%" height="15" fill="rgb(205,56,4)" fg:x="194" fg:w="1"/><text x="15.7824%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.5324%" y="533" width="0.0801%" height="15" fill="rgb(206,6,35)" fg:x="194" fg:w="1"/><text x="15.7824%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.5324%" y="517" width="0.0801%" height="15" fill="rgb(247,73,52)" fg:x="194" fg:w="1"/><text x="15.7824%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.5324%" y="501" width="0.0801%" height="15" fill="rgb(246,97,4)" fg:x="194" fg:w="1"/><text x="15.7824%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.5324%" y="485" width="0.0801%" height="15" fill="rgb(212,37,15)" fg:x="194" fg:w="1"/><text x="15.7824%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.5324%" y="469" width="0.0801%" height="15" fill="rgb(208,130,40)" fg:x="194" fg:w="1"/><text x="15.7824%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.5324%" y="453" width="0.0801%" height="15" fill="rgb(236,55,29)" fg:x="194" fg:w="1"/><text x="15.7824%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.5324%" y="437" width="0.0801%" height="15" fill="rgb(209,156,45)" fg:x="194" fg:w="1"/><text x="15.7824%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.5324%" y="421" width="0.0801%" height="15" fill="rgb(249,107,4)" fg:x="194" fg:w="1"/><text x="15.7824%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.6125%" y="597" width="0.0801%" height="15" fill="rgb(227,7,13)" fg:x="195" fg:w="1"/><text x="15.8625%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (7 samples, 0.56%)</title><rect x="15.2122%" y="677" width="0.5604%" height="15" fill="rgb(250,129,14)" fg:x="190" fg:w="7"/><text x="15.4622%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="15.4524%" y="661" width="0.3203%" height="15" fill="rgb(229,92,13)" fg:x="193" fg:w="4"/><text x="15.7024%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="15.4524%" y="645" width="0.3203%" height="15" fill="rgb(245,98,39)" fg:x="193" fg:w="4"/><text x="15.7024%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="15.5324%" y="629" width="0.2402%" height="15" fill="rgb(234,135,48)" fg:x="194" fg:w="3"/><text x="15.7824%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="15.5324%" y="613" width="0.2402%" height="15" fill="rgb(230,98,28)" fg:x="194" fg:w="3"/><text x="15.7824%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6926%" y="597" width="0.0801%" height="15" fill="rgb(223,121,0)" fg:x="196" fg:w="1"/><text x="15.9426%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6926%" y="581" width="0.0801%" height="15" fill="rgb(234,173,33)" fg:x="196" fg:w="1"/><text x="15.9426%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.6926%" y="565" width="0.0801%" height="15" fill="rgb(245,47,8)" fg:x="196" fg:w="1"/><text x="15.9426%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6926%" y="549" width="0.0801%" height="15" fill="rgb(205,17,20)" fg:x="196" fg:w="1"/><text x="15.9426%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.6926%" y="533" width="0.0801%" height="15" fill="rgb(232,151,16)" fg:x="196" fg:w="1"/><text x="15.9426%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6926%" y="517" width="0.0801%" height="15" fill="rgb(208,30,32)" fg:x="196" fg:w="1"/><text x="15.9426%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.7726%" y="661" width="0.0801%" height="15" fill="rgb(254,26,3)" fg:x="197" fg:w="1"/><text x="16.0226%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.8527%" y="645" width="0.0801%" height="15" fill="rgb(240,177,30)" fg:x="198" fg:w="1"/><text x="16.1027%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="15.8527%" y="629" width="0.0801%" height="15" fill="rgb(248,76,44)" fg:x="198" fg:w="1"/><text x="16.1027%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="15.9327%" y="629" width="0.0801%" height="15" fill="rgb(241,186,54)" fg:x="199" fg:w="1"/><text x="16.1827%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0128%" y="581" width="0.0801%" height="15" fill="rgb(249,171,29)" fg:x="200" fg:w="1"/><text x="16.2628%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (16 samples, 1.28%)</title><rect x="14.8919%" y="709" width="1.2810%" height="15" fill="rgb(237,151,44)" fg:x="186" fg:w="16"/><text x="15.1419%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (16 samples, 1.28%)</title><rect x="14.8919%" y="693" width="1.2810%" height="15" fill="rgb(228,174,30)" fg:x="186" fg:w="16"/><text x="15.1419%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (5 samples, 0.40%)</title><rect x="15.7726%" y="677" width="0.4003%" height="15" fill="rgb(252,14,37)" fg:x="197" fg:w="5"/><text x="16.0226%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="15.8527%" y="661" width="0.3203%" height="15" fill="rgb(207,111,40)" fg:x="198" fg:w="4"/><text x="16.1027%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (3 samples, 0.24%)</title><rect x="15.9327%" y="645" width="0.2402%" height="15" fill="rgb(248,171,54)" fg:x="199" fg:w="3"/><text x="16.1827%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.0128%" y="629" width="0.1601%" height="15" fill="rgb(211,127,2)" fg:x="200" fg:w="2"/><text x="16.2628%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="16.0128%" y="613" width="0.1601%" height="15" fill="rgb(236,87,47)" fg:x="200" fg:w="2"/><text x="16.2628%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.0128%" y="597" width="0.1601%" height="15" fill="rgb(223,190,45)" fg:x="200" fg:w="2"/><text x="16.2628%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0929%" y="581" width="0.0801%" height="15" fill="rgb(215,5,16)" fg:x="201" fg:w="1"/><text x="16.3429%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.0929%" y="565" width="0.0801%" height="15" fill="rgb(252,82,33)" fg:x="201" fg:w="1"/><text x="16.3429%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="16.0929%" y="549" width="0.0801%" height="15" fill="rgb(247,213,44)" fg:x="201" fg:w="1"/><text x="16.3429%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="16.2530%" y="693" width="0.0801%" height="15" fill="rgb(205,196,44)" fg:x="203" fg:w="1"/><text x="16.5030%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.2530%" y="677" width="0.0801%" height="15" fill="rgb(237,96,54)" fg:x="203" fg:w="1"/><text x="16.5030%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.2530%" y="661" width="0.0801%" height="15" fill="rgb(230,113,34)" fg:x="203" fg:w="1"/><text x="16.5030%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.2530%" y="645" width="0.0801%" height="15" fill="rgb(221,224,12)" fg:x="203" fg:w="1"/><text x="16.5030%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="16.2530%" y="629" width="0.0801%" height="15" fill="rgb(219,112,44)" fg:x="203" fg:w="1"/><text x="16.5030%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.2530%" y="613" width="0.0801%" height="15" fill="rgb(210,31,13)" fg:x="203" fg:w="1"/><text x="16.5030%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2530%" y="597" width="0.0801%" height="15" fill="rgb(230,25,16)" fg:x="203" fg:w="1"/><text x="16.5030%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.3331%" y="661" width="0.0801%" height="15" fill="rgb(246,108,53)" fg:x="204" fg:w="1"/><text x="16.5831%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.3331%" y="693" width="0.1601%" height="15" fill="rgb(241,172,50)" fg:x="204" fg:w="2"/><text x="16.5831%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="16.3331%" y="677" width="0.1601%" height="15" fill="rgb(235,141,10)" fg:x="204" fg:w="2"/><text x="16.5831%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.4131%" y="661" width="0.0801%" height="15" fill="rgb(220,174,43)" fg:x="205" fg:w="1"/><text x="16.6631%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.4131%" y="645" width="0.0801%" height="15" fill="rgb(215,181,40)" fg:x="205" fg:w="1"/><text x="16.6631%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4131%" y="629" width="0.0801%" height="15" fill="rgb(230,97,2)" fg:x="205" fg:w="1"/><text x="16.6631%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5733%" y="581" width="0.0801%" height="15" fill="rgb(211,25,27)" fg:x="207" fg:w="1"/><text x="16.8233%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5733%" y="565" width="0.0801%" height="15" fill="rgb(230,87,26)" fg:x="207" fg:w="1"/><text x="16.8233%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5733%" y="549" width="0.0801%" height="15" fill="rgb(227,160,17)" fg:x="207" fg:w="1"/><text x="16.8233%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5733%" y="533" width="0.0801%" height="15" fill="rgb(244,85,34)" fg:x="207" fg:w="1"/><text x="16.8233%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5733%" y="517" width="0.0801%" height="15" fill="rgb(207,70,0)" fg:x="207" fg:w="1"/><text x="16.8233%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.5733%" y="501" width="0.0801%" height="15" fill="rgb(223,129,7)" fg:x="207" fg:w="1"/><text x="16.8233%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.5733%" y="485" width="0.0801%" height="15" fill="rgb(246,105,7)" fg:x="207" fg:w="1"/><text x="16.8233%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.5733%" y="469" width="0.0801%" height="15" fill="rgb(215,154,42)" fg:x="207" fg:w="1"/><text x="16.8233%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.5733%" y="453" width="0.0801%" height="15" fill="rgb(220,215,30)" fg:x="207" fg:w="1"/><text x="16.8233%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.5733%" y="437" width="0.0801%" height="15" fill="rgb(228,81,51)" fg:x="207" fg:w="1"/><text x="16.8233%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.5733%" y="421" width="0.0801%" height="15" fill="rgb(247,71,54)" fg:x="207" fg:w="1"/><text x="16.8233%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.5733%" y="405" width="0.0801%" height="15" fill="rgb(234,176,34)" fg:x="207" fg:w="1"/><text x="16.8233%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.5733%" y="389" width="0.0801%" height="15" fill="rgb(241,103,54)" fg:x="207" fg:w="1"/><text x="16.8233%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.5733%" y="373" width="0.0801%" height="15" fill="rgb(228,22,34)" fg:x="207" fg:w="1"/><text x="16.8233%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5733%" y="357" width="0.0801%" height="15" fill="rgb(241,179,48)" fg:x="207" fg:w="1"/><text x="16.8233%" y="367.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.5733%" y="613" width="0.1601%" height="15" fill="rgb(235,167,37)" fg:x="207" fg:w="2"/><text x="16.8233%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.5733%" y="597" width="0.1601%" height="15" fill="rgb(213,109,30)" fg:x="207" fg:w="2"/><text x="16.8233%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.6533%" y="581" width="0.0801%" height="15" fill="rgb(222,172,16)" fg:x="208" fg:w="1"/><text x="16.9033%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.6533%" y="565" width="0.0801%" height="15" fill="rgb(233,192,5)" fg:x="208" fg:w="1"/><text x="16.9033%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.6533%" y="549" width="0.0801%" height="15" fill="rgb(247,189,41)" fg:x="208" fg:w="1"/><text x="16.9033%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.6533%" y="533" width="0.0801%" height="15" fill="rgb(218,134,47)" fg:x="208" fg:w="1"/><text x="16.9033%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.6533%" y="517" width="0.0801%" height="15" fill="rgb(216,29,3)" fg:x="208" fg:w="1"/><text x="16.9033%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.6533%" y="501" width="0.0801%" height="15" fill="rgb(246,140,12)" fg:x="208" fg:w="1"/><text x="16.9033%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="16.7334%" y="613" width="0.0801%" height="15" fill="rgb(230,136,11)" fg:x="209" fg:w="1"/><text x="16.9834%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.7334%" y="597" width="0.0801%" height="15" fill="rgb(247,22,47)" fg:x="209" fg:w="1"/><text x="16.9834%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7334%" y="581" width="0.0801%" height="15" fill="rgb(218,84,22)" fg:x="209" fg:w="1"/><text x="16.9834%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7334%" y="565" width="0.0801%" height="15" fill="rgb(216,87,39)" fg:x="209" fg:w="1"/><text x="16.9834%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.7334%" y="549" width="0.0801%" height="15" fill="rgb(221,178,8)" fg:x="209" fg:w="1"/><text x="16.9834%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="16.4932%" y="693" width="0.4003%" height="15" fill="rgb(230,42,11)" fg:x="206" fg:w="5"/><text x="16.7432%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="16.4932%" y="677" width="0.4003%" height="15" fill="rgb(237,229,4)" fg:x="206" fg:w="5"/><text x="16.7432%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.40%)</title><rect x="16.4932%" y="661" width="0.4003%" height="15" fill="rgb(222,31,33)" fg:x="206" fg:w="5"/><text x="16.7432%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (5 samples, 0.40%)</title><rect x="16.4932%" y="645" width="0.4003%" height="15" fill="rgb(210,17,39)" fg:x="206" fg:w="5"/><text x="16.7432%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="16.5733%" y="629" width="0.3203%" height="15" fill="rgb(244,93,20)" fg:x="207" fg:w="4"/><text x="16.8233%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8135%" y="613" width="0.0801%" height="15" fill="rgb(210,40,47)" fg:x="210" fg:w="1"/><text x="17.0635%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8135%" y="597" width="0.0801%" height="15" fill="rgb(239,211,47)" fg:x="210" fg:w="1"/><text x="17.0635%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.8135%" y="581" width="0.0801%" height="15" fill="rgb(251,223,49)" fg:x="210" fg:w="1"/><text x="17.0635%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.8135%" y="565" width="0.0801%" height="15" fill="rgb(221,149,5)" fg:x="210" fg:w="1"/><text x="17.0635%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.8135%" y="549" width="0.0801%" height="15" fill="rgb(219,224,51)" fg:x="210" fg:w="1"/><text x="17.0635%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8135%" y="533" width="0.0801%" height="15" fill="rgb(223,7,8)" fg:x="210" fg:w="1"/><text x="17.0635%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8135%" y="517" width="0.0801%" height="15" fill="rgb(241,217,22)" fg:x="210" fg:w="1"/><text x="17.0635%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.8135%" y="501" width="0.0801%" height="15" fill="rgb(248,209,0)" fg:x="210" fg:w="1"/><text x="17.0635%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.8135%" y="485" width="0.0801%" height="15" fill="rgb(217,205,4)" fg:x="210" fg:w="1"/><text x="17.0635%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.8135%" y="469" width="0.0801%" height="15" fill="rgb(228,124,39)" fg:x="210" fg:w="1"/><text x="17.0635%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.8135%" y="453" width="0.0801%" height="15" fill="rgb(250,116,42)" fg:x="210" fg:w="1"/><text x="17.0635%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8135%" y="437" width="0.0801%" height="15" fill="rgb(223,202,9)" fg:x="210" fg:w="1"/><text x="17.0635%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.9736%" y="597" width="0.0801%" height="15" fill="rgb(242,222,40)" fg:x="212" fg:w="1"/><text x="17.2236%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0536%" y="581" width="0.0801%" height="15" fill="rgb(229,99,46)" fg:x="213" fg:w="1"/><text x="17.3036%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="16.9736%" y="629" width="0.2402%" height="15" fill="rgb(225,56,46)" fg:x="212" fg:w="3"/><text x="17.2236%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="16.9736%" y="613" width="0.2402%" height="15" fill="rgb(227,94,5)" fg:x="212" fg:w="3"/><text x="17.2236%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (2 samples, 0.16%)</title><rect x="17.0536%" y="597" width="0.1601%" height="15" fill="rgb(205,112,38)" fg:x="213" fg:w="2"/><text x="17.3036%" y="607.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="17.1337%" y="581" width="0.0801%" height="15" fill="rgb(231,133,46)" fg:x="214" fg:w="1"/><text x="17.3837%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="17.4540%" y="533" width="0.1601%" height="15" fill="rgb(217,16,9)" fg:x="218" fg:w="2"/><text x="17.7040%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.5340%" y="517" width="0.0801%" height="15" fill="rgb(249,173,9)" fg:x="219" fg:w="1"/><text x="17.7840%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="17.4540%" y="549" width="0.2402%" height="15" fill="rgb(205,163,53)" fg:x="218" fg:w="3"/><text x="17.7040%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.6141%" y="533" width="0.0801%" height="15" fill="rgb(217,54,41)" fg:x="220" fg:w="1"/><text x="17.8641%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.6141%" y="517" width="0.0801%" height="15" fill="rgb(228,216,12)" fg:x="220" fg:w="1"/><text x="17.8641%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="17.3739%" y="565" width="0.4003%" height="15" fill="rgb(244,228,15)" fg:x="217" fg:w="5"/><text x="17.6239%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.6942%" y="549" width="0.0801%" height="15" fill="rgb(221,176,53)" fg:x="221" fg:w="1"/><text x="17.9442%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.6942%" y="533" width="0.0801%" height="15" fill="rgb(205,94,34)" fg:x="221" fg:w="1"/><text x="17.9442%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="17.2138%" y="581" width="0.6405%" height="15" fill="rgb(213,110,48)" fg:x="215" fg:w="8"/><text x="17.4638%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.7742%" y="565" width="0.0801%" height="15" fill="rgb(236,142,28)" fg:x="222" fg:w="1"/><text x="18.0242%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.7742%" y="549" width="0.0801%" height="15" fill="rgb(225,135,29)" fg:x="222" fg:w="1"/><text x="18.0242%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="17.8543%" y="581" width="0.0801%" height="15" fill="rgb(252,45,31)" fg:x="223" fg:w="1"/><text x="18.1043%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="17.8543%" y="565" width="0.0801%" height="15" fill="rgb(211,187,50)" fg:x="223" fg:w="1"/><text x="18.1043%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.8543%" y="549" width="0.0801%" height="15" fill="rgb(229,109,7)" fg:x="223" fg:w="1"/><text x="18.1043%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.8543%" y="533" width="0.0801%" height="15" fill="rgb(251,131,51)" fg:x="223" fg:w="1"/><text x="18.1043%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="17.8543%" y="517" width="0.0801%" height="15" fill="rgb(251,180,35)" fg:x="223" fg:w="1"/><text x="18.1043%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="17.9343%" y="549" width="0.0801%" height="15" fill="rgb(211,46,32)" fg:x="224" fg:w="1"/><text x="18.1843%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.9343%" y="533" width="0.0801%" height="15" fill="rgb(248,123,17)" fg:x="224" fg:w="1"/><text x="18.1843%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.9343%" y="517" width="0.0801%" height="15" fill="rgb(227,141,18)" fg:x="224" fg:w="1"/><text x="18.1843%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="17.9343%" y="565" width="0.1601%" height="15" fill="rgb(216,102,9)" fg:x="224" fg:w="2"/><text x="18.1843%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.0144%" y="549" width="0.0801%" height="15" fill="rgb(253,47,13)" fg:x="225" fg:w="1"/><text x="18.2644%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.0144%" y="533" width="0.0801%" height="15" fill="rgb(226,93,23)" fg:x="225" fg:w="1"/><text x="18.2644%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="18.0144%" y="517" width="0.0801%" height="15" fill="rgb(247,104,17)" fg:x="225" fg:w="1"/><text x="18.2644%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="18.1745%" y="549" width="0.1601%" height="15" fill="rgb(233,203,26)" fg:x="227" fg:w="2"/><text x="18.4245%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="18.3347%" y="549" width="0.2402%" height="15" fill="rgb(244,98,49)" fg:x="229" fg:w="3"/><text x="18.5847%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.4147%" y="533" width="0.1601%" height="15" fill="rgb(235,134,22)" fg:x="230" fg:w="2"/><text x="18.6647%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.4948%" y="517" width="0.0801%" height="15" fill="rgb(221,70,32)" fg:x="231" fg:w="1"/><text x="18.7448%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.4948%" y="501" width="0.0801%" height="15" fill="rgb(238,15,50)" fg:x="231" fg:w="1"/><text x="18.7448%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.4948%" y="485" width="0.0801%" height="15" fill="rgb(215,221,48)" fg:x="231" fg:w="1"/><text x="18.7448%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.7350%" y="501" width="0.0801%" height="15" fill="rgb(236,73,3)" fg:x="234" fg:w="1"/><text x="18.9850%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.7350%" y="485" width="0.0801%" height="15" fill="rgb(250,107,11)" fg:x="234" fg:w="1"/><text x="18.9850%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="18.8151%" y="485" width="0.1601%" height="15" fill="rgb(242,39,14)" fg:x="235" fg:w="2"/><text x="19.0651%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.8151%" y="469" width="0.1601%" height="15" fill="rgb(248,164,37)" fg:x="235" fg:w="2"/><text x="19.0651%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.8951%" y="453" width="0.0801%" height="15" fill="rgb(217,60,12)" fg:x="236" fg:w="1"/><text x="19.1451%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.8951%" y="437" width="0.0801%" height="15" fill="rgb(240,125,29)" fg:x="236" fg:w="1"/><text x="19.1451%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="18.8151%" y="501" width="0.2402%" height="15" fill="rgb(208,207,28)" fg:x="235" fg:w="3"/><text x="19.0651%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9752%" y="485" width="0.0801%" height="15" fill="rgb(209,159,27)" fg:x="237" fg:w="1"/><text x="19.2252%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.9752%" y="469" width="0.0801%" height="15" fill="rgb(251,176,53)" fg:x="237" fg:w="1"/><text x="19.2252%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.9752%" y="453" width="0.0801%" height="15" fill="rgb(211,85,7)" fg:x="237" fg:w="1"/><text x="19.2252%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.9752%" y="437" width="0.0801%" height="15" fill="rgb(216,64,54)" fg:x="237" fg:w="1"/><text x="19.2252%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.0552%" y="469" width="0.0801%" height="15" fill="rgb(217,54,24)" fg:x="238" fg:w="1"/><text x="19.3052%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="18.7350%" y="533" width="0.4804%" height="15" fill="rgb(208,206,53)" fg:x="234" fg:w="6"/><text x="18.9850%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="18.7350%" y="517" width="0.4804%" height="15" fill="rgb(251,74,39)" fg:x="234" fg:w="6"/><text x="18.9850%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.0552%" y="501" width="0.1601%" height="15" fill="rgb(226,47,5)" fg:x="238" fg:w="2"/><text x="19.3052%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="19.0552%" y="485" width="0.1601%" height="15" fill="rgb(234,111,33)" fg:x="238" fg:w="2"/><text x="19.3052%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="19.1353%" y="469" width="0.0801%" height="15" fill="rgb(251,14,10)" fg:x="239" fg:w="1"/><text x="19.3853%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.2154%" y="533" width="0.0801%" height="15" fill="rgb(232,43,0)" fg:x="240" fg:w="1"/><text x="19.4654%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="19.3755%" y="517" width="0.3203%" height="15" fill="rgb(222,68,43)" fg:x="242" fg:w="4"/><text x="19.6255%" y="527.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="19.3755%" y="501" width="0.3203%" height="15" fill="rgb(217,24,23)" fg:x="242" fg:w="4"/><text x="19.6255%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="19.3755%" y="485" width="0.3203%" height="15" fill="rgb(229,209,14)" fg:x="242" fg:w="4"/><text x="19.6255%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="19.3755%" y="469" width="0.3203%" height="15" fill="rgb(250,149,48)" fg:x="242" fg:w="4"/><text x="19.6255%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="19.4556%" y="453" width="0.2402%" height="15" fill="rgb(210,120,37)" fg:x="243" fg:w="3"/><text x="19.7056%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="19.4556%" y="437" width="0.2402%" height="15" fill="rgb(210,21,8)" fg:x="243" fg:w="3"/><text x="19.7056%" y="447.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="19.4556%" y="421" width="0.2402%" height="15" fill="rgb(243,145,7)" fg:x="243" fg:w="3"/><text x="19.7056%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="19.6958%" y="501" width="0.3203%" height="15" fill="rgb(238,178,32)" fg:x="246" fg:w="4"/><text x="19.9458%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="19.6958%" y="485" width="0.3203%" height="15" fill="rgb(222,4,10)" fg:x="246" fg:w="4"/><text x="19.9458%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="19.7758%" y="469" width="0.2402%" height="15" fill="rgb(239,7,37)" fg:x="247" fg:w="3"/><text x="20.0258%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="19.7758%" y="453" width="0.2402%" height="15" fill="rgb(215,31,37)" fg:x="247" fg:w="3"/><text x="20.0258%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="19.7758%" y="437" width="0.2402%" height="15" fill="rgb(224,83,33)" fg:x="247" fg:w="3"/><text x="20.0258%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="19.7758%" y="421" width="0.2402%" height="15" fill="rgb(239,55,3)" fg:x="247" fg:w="3"/><text x="20.0258%" y="431.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="19.7758%" y="405" width="0.2402%" height="15" fill="rgb(247,92,11)" fg:x="247" fg:w="3"/><text x="20.0258%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="19.6958%" y="517" width="0.4804%" height="15" fill="rgb(239,200,7)" fg:x="246" fg:w="6"/><text x="19.9458%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="20.0160%" y="501" width="0.1601%" height="15" fill="rgb(227,115,8)" fg:x="250" fg:w="2"/><text x="20.2660%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.0961%" y="485" width="0.0801%" height="15" fill="rgb(215,189,27)" fg:x="251" fg:w="1"/><text x="20.3461%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.0961%" y="469" width="0.0801%" height="15" fill="rgb(251,216,39)" fg:x="251" fg:w="1"/><text x="20.3461%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="19.2954%" y="533" width="0.9608%" height="15" fill="rgb(207,29,47)" fg:x="241" fg:w="12"/><text x="19.5454%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.1761%" y="517" width="0.0801%" height="15" fill="rgb(210,71,34)" fg:x="252" fg:w="1"/><text x="20.4261%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.1761%" y="501" width="0.0801%" height="15" fill="rgb(253,217,51)" fg:x="252" fg:w="1"/><text x="20.4261%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.1761%" y="485" width="0.0801%" height="15" fill="rgb(222,117,46)" fg:x="252" fg:w="1"/><text x="20.4261%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.84%)</title><rect x="18.5749%" y="549" width="1.8415%" height="15" fill="rgb(226,132,6)" fg:x="232" fg:w="23"/><text x="18.8249%" y="559.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.2562%" y="533" width="0.1601%" height="15" fill="rgb(254,145,51)" fg:x="253" fg:w="2"/><text x="20.5062%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.3363%" y="517" width="0.0801%" height="15" fill="rgb(231,199,27)" fg:x="254" fg:w="1"/><text x="20.5863%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (34 samples, 2.72%)</title><rect x="17.9343%" y="581" width="2.7222%" height="15" fill="rgb(245,158,14)" fg:x="224" fg:w="34"/><text x="18.1843%" y="591.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (32 samples, 2.56%)</title><rect x="18.0945%" y="565" width="2.5620%" height="15" fill="rgb(240,113,14)" fg:x="226" fg:w="32"/><text x="18.3445%" y="575.50">se..</text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="20.4163%" y="549" width="0.2402%" height="15" fill="rgb(210,20,13)" fg:x="255" fg:w="3"/><text x="20.6663%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="20.4964%" y="533" width="0.1601%" height="15" fill="rgb(241,144,13)" fg:x="256" fg:w="2"/><text x="20.7464%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.5765%" y="517" width="0.0801%" height="15" fill="rgb(235,43,34)" fg:x="257" fg:w="1"/><text x="20.8265%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.5765%" y="501" width="0.0801%" height="15" fill="rgb(208,36,20)" fg:x="257" fg:w="1"/><text x="20.8265%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.5765%" y="485" width="0.0801%" height="15" fill="rgb(239,204,10)" fg:x="257" fg:w="1"/><text x="20.8265%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.5765%" y="469" width="0.0801%" height="15" fill="rgb(217,84,43)" fg:x="257" fg:w="1"/><text x="20.8265%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.7366%" y="549" width="0.0801%" height="15" fill="rgb(241,170,50)" fg:x="259" fg:w="1"/><text x="20.9866%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="20.7366%" y="565" width="0.1601%" height="15" fill="rgb(226,205,29)" fg:x="259" fg:w="2"/><text x="20.9866%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="20.8167%" y="549" width="0.0801%" height="15" fill="rgb(233,113,1)" fg:x="260" fg:w="1"/><text x="21.0667%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="20.8167%" y="533" width="0.0801%" height="15" fill="rgb(253,98,13)" fg:x="260" fg:w="1"/><text x="21.0667%" y="543.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.8167%" y="517" width="0.0801%" height="15" fill="rgb(211,115,12)" fg:x="260" fg:w="1"/><text x="21.0667%" y="527.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="20.8167%" y="501" width="0.0801%" height="15" fill="rgb(208,12,16)" fg:x="260" fg:w="1"/><text x="21.0667%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="20.8167%" y="485" width="0.0801%" height="15" fill="rgb(237,193,54)" fg:x="260" fg:w="1"/><text x="21.0667%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.8967%" y="533" width="0.0801%" height="15" fill="rgb(243,22,42)" fg:x="261" fg:w="1"/><text x="21.1467%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="20.9768%" y="533" width="0.3203%" height="15" fill="rgb(233,151,36)" fg:x="262" fg:w="4"/><text x="21.2268%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="21.1369%" y="517" width="0.1601%" height="15" fill="rgb(237,57,45)" fg:x="264" fg:w="2"/><text x="21.3869%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="21.2970%" y="533" width="0.0801%" height="15" fill="rgb(221,88,17)" fg:x="266" fg:w="1"/><text x="21.5470%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.2970%" y="517" width="0.0801%" height="15" fill="rgb(230,79,15)" fg:x="266" fg:w="1"/><text x="21.5470%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.2970%" y="501" width="0.0801%" height="15" fill="rgb(213,57,13)" fg:x="266" fg:w="1"/><text x="21.5470%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.5372%" y="437" width="0.0801%" height="15" fill="rgb(222,116,39)" fg:x="269" fg:w="1"/><text x="21.7872%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="21.6173%" y="421" width="0.1601%" height="15" fill="rgb(245,107,2)" fg:x="270" fg:w="2"/><text x="21.8673%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="21.6173%" y="405" width="0.1601%" height="15" fill="rgb(238,1,10)" fg:x="270" fg:w="2"/><text x="21.8673%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="21.6173%" y="389" width="0.1601%" height="15" fill="rgb(249,4,48)" fg:x="270" fg:w="2"/><text x="21.8673%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="21.6173%" y="373" width="0.1601%" height="15" fill="rgb(223,151,18)" fg:x="270" fg:w="2"/><text x="21.8673%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="21.5372%" y="485" width="0.3203%" height="15" fill="rgb(227,65,43)" fg:x="269" fg:w="4"/><text x="21.7872%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="21.5372%" y="469" width="0.3203%" height="15" fill="rgb(218,40,45)" fg:x="269" fg:w="4"/><text x="21.7872%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="21.5372%" y="453" width="0.3203%" height="15" fill="rgb(252,121,31)" fg:x="269" fg:w="4"/><text x="21.7872%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="21.6173%" y="437" width="0.2402%" height="15" fill="rgb(219,158,43)" fg:x="270" fg:w="3"/><text x="21.8673%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.7774%" y="421" width="0.0801%" height="15" fill="rgb(231,162,42)" fg:x="272" fg:w="1"/><text x="22.0274%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.2578%" y="453" width="0.1601%" height="15" fill="rgb(217,179,25)" fg:x="278" fg:w="2"/><text x="22.5078%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="22.3379%" y="437" width="0.0801%" height="15" fill="rgb(206,212,31)" fg:x="279" fg:w="1"/><text x="22.5879%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="22.4179%" y="437" width="0.0801%" height="15" fill="rgb(235,144,12)" fg:x="280" fg:w="1"/><text x="22.6679%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="22.4980%" y="437" width="0.1601%" height="15" fill="rgb(213,51,10)" fg:x="281" fg:w="2"/><text x="22.7480%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.4980%" y="421" width="0.1601%" height="15" fill="rgb(231,145,14)" fg:x="281" fg:w="2"/><text x="22.7480%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5781%" y="405" width="0.0801%" height="15" fill="rgb(235,15,28)" fg:x="282" fg:w="1"/><text x="22.8281%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (16 samples, 1.28%)</title><rect x="21.4572%" y="501" width="1.2810%" height="15" fill="rgb(237,206,10)" fg:x="268" fg:w="16"/><text x="21.7072%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.88%)</title><rect x="21.8575%" y="485" width="0.8807%" height="15" fill="rgb(236,227,27)" fg:x="273" fg:w="11"/><text x="22.1075%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="22.0176%" y="469" width="0.7206%" height="15" fill="rgb(246,83,35)" fg:x="275" fg:w="9"/><text x="22.2676%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="22.4179%" y="453" width="0.3203%" height="15" fill="rgb(220,136,24)" fg:x="280" fg:w="4"/><text x="22.6679%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.6581%" y="437" width="0.0801%" height="15" fill="rgb(217,3,25)" fg:x="283" fg:w="1"/><text x="22.9081%" y="447.50"></text></g><g><title>engine::session::Session::flush (74 samples, 5.92%)</title><rect x="16.8935%" y="693" width="5.9247%" height="15" fill="rgb(239,24,14)" fg:x="211" fg:w="74"/><text x="17.1435%" y="703.50">engine::..</text></g><g><title>engine::session::Session::save_changes (74 samples, 5.92%)</title><rect x="16.8935%" y="677" width="5.9247%" height="15" fill="rgb(244,16,53)" fg:x="211" fg:w="74"/><text x="17.1435%" y="687.50">engine::..</text></g><g><title>engine::session::state::State::close (74 samples, 5.92%)</title><rect x="16.8935%" y="661" width="5.9247%" height="15" fill="rgb(208,175,44)" fg:x="211" fg:w="74"/><text x="17.1435%" y="671.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (73 samples, 5.84%)</title><rect x="16.9736%" y="645" width="5.8447%" height="15" fill="rgb(252,18,48)" fg:x="212" fg:w="73"/><text x="17.2236%" y="655.50">engine:..</text></g><g><title>core::iter::adapters::try_process (70 samples, 5.60%)</title><rect x="17.2138%" y="629" width="5.6045%" height="15" fill="rgb(234,199,32)" fg:x="215" fg:w="70"/><text x="17.4638%" y="639.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (70 samples, 5.60%)</title><rect x="17.2138%" y="613" width="5.6045%" height="15" fill="rgb(225,77,54)" fg:x="215" fg:w="70"/><text x="17.4638%" y="623.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (70 samples, 5.60%)</title><rect x="17.2138%" y="597" width="5.6045%" height="15" fill="rgb(225,42,25)" fg:x="215" fg:w="70"/><text x="17.4638%" y="607.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (27 samples, 2.16%)</title><rect x="20.6565%" y="581" width="2.1617%" height="15" fill="rgb(242,227,46)" fg:x="258" fg:w="27"/><text x="20.9065%" y="591.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (24 samples, 1.92%)</title><rect x="20.8967%" y="565" width="1.9215%" height="15" fill="rgb(246,197,35)" fg:x="261" fg:w="24"/><text x="21.1467%" y="575.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (24 samples, 1.92%)</title><rect x="20.8967%" y="549" width="1.9215%" height="15" fill="rgb(215,159,26)" fg:x="261" fg:w="24"/><text x="21.1467%" y="559.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (18 samples, 1.44%)</title><rect x="21.3771%" y="533" width="1.4412%" height="15" fill="rgb(212,194,50)" fg:x="267" fg:w="18"/><text x="21.6271%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (18 samples, 1.44%)</title><rect x="21.3771%" y="517" width="1.4412%" height="15" fill="rgb(246,132,1)" fg:x="267" fg:w="18"/><text x="21.6271%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="22.7382%" y="501" width="0.0801%" height="15" fill="rgb(217,71,7)" fg:x="284" fg:w="1"/><text x="22.9882%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.7382%" y="485" width="0.0801%" height="15" fill="rgb(252,59,32)" fg:x="284" fg:w="1"/><text x="22.9882%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="22.8183%" y="693" width="0.0801%" height="15" fill="rgb(253,204,25)" fg:x="285" fg:w="1"/><text x="23.0683%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="22.8183%" y="677" width="0.0801%" height="15" fill="rgb(232,21,16)" fg:x="285" fg:w="1"/><text x="23.0683%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="22.8183%" y="661" width="0.0801%" height="15" fill="rgb(248,90,29)" fg:x="285" fg:w="1"/><text x="23.0683%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.8183%" y="645" width="0.0801%" height="15" fill="rgb(249,223,7)" fg:x="285" fg:w="1"/><text x="23.0683%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.8183%" y="629" width="0.0801%" height="15" fill="rgb(231,119,42)" fg:x="285" fg:w="1"/><text x="23.0683%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="22.9784%" y="677" width="0.3203%" height="15" fill="rgb(215,41,35)" fg:x="287" fg:w="4"/><text x="23.2284%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="23.0584%" y="661" width="0.2402%" height="15" fill="rgb(220,44,45)" fg:x="288" fg:w="3"/><text x="23.3084%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.1385%" y="645" width="0.1601%" height="15" fill="rgb(253,197,36)" fg:x="289" fg:w="2"/><text x="23.3885%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.1385%" y="629" width="0.1601%" height="15" fill="rgb(245,225,54)" fg:x="289" fg:w="2"/><text x="23.3885%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="23.1385%" y="613" width="0.1601%" height="15" fill="rgb(239,94,37)" fg:x="289" fg:w="2"/><text x="23.3885%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.1385%" y="597" width="0.1601%" height="15" fill="rgb(242,217,10)" fg:x="289" fg:w="2"/><text x="23.3885%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="23.1385%" y="581" width="0.1601%" height="15" fill="rgb(250,193,7)" fg:x="289" fg:w="2"/><text x="23.3885%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="23.1385%" y="565" width="0.1601%" height="15" fill="rgb(230,104,19)" fg:x="289" fg:w="2"/><text x="23.3885%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.2186%" y="549" width="0.0801%" height="15" fill="rgb(230,181,4)" fg:x="290" fg:w="1"/><text x="23.4686%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.2186%" y="533" width="0.0801%" height="15" fill="rgb(216,219,49)" fg:x="290" fg:w="1"/><text x="23.4686%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="23.2986%" y="661" width="0.0801%" height="15" fill="rgb(254,144,0)" fg:x="291" fg:w="1"/><text x="23.5486%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.2986%" y="645" width="0.0801%" height="15" fill="rgb(205,209,38)" fg:x="291" fg:w="1"/><text x="23.5486%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.2986%" y="629" width="0.0801%" height="15" fill="rgb(240,21,42)" fg:x="291" fg:w="1"/><text x="23.5486%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.2986%" y="613" width="0.0801%" height="15" fill="rgb(241,132,3)" fg:x="291" fg:w="1"/><text x="23.5486%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.2986%" y="597" width="0.0801%" height="15" fill="rgb(225,14,2)" fg:x="291" fg:w="1"/><text x="23.5486%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.2986%" y="581" width="0.0801%" height="15" fill="rgb(210,141,35)" fg:x="291" fg:w="1"/><text x="23.5486%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.2986%" y="565" width="0.0801%" height="15" fill="rgb(251,14,44)" fg:x="291" fg:w="1"/><text x="23.5486%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.2986%" y="549" width="0.0801%" height="15" fill="rgb(247,48,18)" fg:x="291" fg:w="1"/><text x="23.5486%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.2986%" y="533" width="0.0801%" height="15" fill="rgb(225,0,40)" fg:x="291" fg:w="1"/><text x="23.5486%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.2986%" y="517" width="0.0801%" height="15" fill="rgb(221,31,33)" fg:x="291" fg:w="1"/><text x="23.5486%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.2986%" y="501" width="0.0801%" height="15" fill="rgb(237,42,40)" fg:x="291" fg:w="1"/><text x="23.5486%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.2986%" y="485" width="0.0801%" height="15" fill="rgb(233,51,29)" fg:x="291" fg:w="1"/><text x="23.5486%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.2986%" y="469" width="0.0801%" height="15" fill="rgb(226,58,20)" fg:x="291" fg:w="1"/><text x="23.5486%" y="479.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="23.3787%" y="661" width="0.0801%" height="15" fill="rgb(208,98,7)" fg:x="292" fg:w="1"/><text x="23.6287%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="23.3787%" y="645" width="0.0801%" height="15" fill="rgb(228,143,44)" fg:x="292" fg:w="1"/><text x="23.6287%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="23.3787%" y="629" width="0.0801%" height="15" fill="rgb(246,55,38)" fg:x="292" fg:w="1"/><text x="23.6287%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.3787%" y="613" width="0.0801%" height="15" fill="rgb(247,87,16)" fg:x="292" fg:w="1"/><text x="23.6287%" y="623.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="23.4588%" y="661" width="0.1601%" height="15" fill="rgb(234,129,42)" fg:x="293" fg:w="2"/><text x="23.7088%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="23.4588%" y="645" width="0.1601%" height="15" fill="rgb(220,82,16)" fg:x="293" fg:w="2"/><text x="23.7088%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.6189%" y="597" width="0.0801%" height="15" fill="rgb(211,88,4)" fg:x="295" fg:w="1"/><text x="23.8689%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.6189%" y="581" width="0.0801%" height="15" fill="rgb(248,151,21)" fg:x="295" fg:w="1"/><text x="23.8689%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="23.6189%" y="565" width="0.0801%" height="15" fill="rgb(238,163,6)" fg:x="295" fg:w="1"/><text x="23.8689%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.6189%" y="549" width="0.0801%" height="15" fill="rgb(209,183,11)" fg:x="295" fg:w="1"/><text x="23.8689%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="23.6189%" y="533" width="0.0801%" height="15" fill="rgb(219,37,20)" fg:x="295" fg:w="1"/><text x="23.8689%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="23.6189%" y="517" width="0.0801%" height="15" fill="rgb(210,158,4)" fg:x="295" fg:w="1"/><text x="23.8689%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="23.6189%" y="501" width="0.0801%" height="15" fill="rgb(221,167,53)" fg:x="295" fg:w="1"/><text x="23.8689%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="23.6189%" y="485" width="0.0801%" height="15" fill="rgb(237,151,45)" fg:x="295" fg:w="1"/><text x="23.8689%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.6189%" y="469" width="0.0801%" height="15" fill="rgb(231,39,3)" fg:x="295" fg:w="1"/><text x="23.8689%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="23.6189%" y="453" width="0.0801%" height="15" fill="rgb(212,167,28)" fg:x="295" fg:w="1"/><text x="23.8689%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="23.6189%" y="437" width="0.0801%" height="15" fill="rgb(232,178,8)" fg:x="295" fg:w="1"/><text x="23.8689%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="23.6189%" y="421" width="0.0801%" height="15" fill="rgb(225,151,20)" fg:x="295" fg:w="1"/><text x="23.8689%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="23.6189%" y="405" width="0.0801%" height="15" fill="rgb(238,3,37)" fg:x="295" fg:w="1"/><text x="23.8689%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="23.6189%" y="389" width="0.0801%" height="15" fill="rgb(251,147,42)" fg:x="295" fg:w="1"/><text x="23.8689%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6189%" y="373" width="0.0801%" height="15" fill="rgb(208,173,10)" fg:x="295" fg:w="1"/><text x="23.8689%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.6990%" y="597" width="0.0801%" height="15" fill="rgb(246,225,4)" fg:x="296" fg:w="1"/><text x="23.9490%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="23.6189%" y="613" width="0.2402%" height="15" fill="rgb(248,102,6)" fg:x="295" fg:w="3"/><text x="23.8689%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.7790%" y="597" width="0.0801%" height="15" fill="rgb(232,6,21)" fg:x="297" fg:w="1"/><text x="24.0290%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.7790%" y="581" width="0.0801%" height="15" fill="rgb(221,179,22)" fg:x="297" fg:w="1"/><text x="24.0290%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="23.7790%" y="565" width="0.0801%" height="15" fill="rgb(252,50,20)" fg:x="297" fg:w="1"/><text x="24.0290%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.7790%" y="549" width="0.0801%" height="15" fill="rgb(222,56,38)" fg:x="297" fg:w="1"/><text x="24.0290%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.7790%" y="533" width="0.0801%" height="15" fill="rgb(206,193,29)" fg:x="297" fg:w="1"/><text x="24.0290%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="23.6189%" y="645" width="0.3203%" height="15" fill="rgb(239,192,45)" fg:x="295" fg:w="4"/><text x="23.8689%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="23.6189%" y="629" width="0.3203%" height="15" fill="rgb(254,18,36)" fg:x="295" fg:w="4"/><text x="23.8689%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="23.8591%" y="613" width="0.0801%" height="15" fill="rgb(221,127,11)" fg:x="298" fg:w="1"/><text x="24.1091%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.8591%" y="597" width="0.0801%" height="15" fill="rgb(234,146,35)" fg:x="298" fg:w="1"/><text x="24.1091%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="23.8591%" y="581" width="0.0801%" height="15" fill="rgb(254,201,37)" fg:x="298" fg:w="1"/><text x="24.1091%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="23.8591%" y="565" width="0.0801%" height="15" fill="rgb(211,202,23)" fg:x="298" fg:w="1"/><text x="24.1091%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="23.8591%" y="549" width="0.0801%" height="15" fill="rgb(237,91,2)" fg:x="298" fg:w="1"/><text x="24.1091%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.8591%" y="533" width="0.0801%" height="15" fill="rgb(226,228,36)" fg:x="298" fg:w="1"/><text x="24.1091%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.9392%" y="613" width="0.0801%" height="15" fill="rgb(213,63,50)" fg:x="299" fg:w="1"/><text x="24.1892%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="24.0192%" y="613" width="0.0801%" height="15" fill="rgb(235,194,19)" fg:x="300" fg:w="1"/><text x="24.2692%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.0192%" y="597" width="0.0801%" height="15" fill="rgb(207,204,18)" fg:x="300" fg:w="1"/><text x="24.2692%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0993%" y="565" width="0.0801%" height="15" fill="rgb(248,8,7)" fg:x="301" fg:w="1"/><text x="24.3493%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.96%)</title><rect x="23.2986%" y="677" width="0.9608%" height="15" fill="rgb(223,145,47)" fg:x="291" fg:w="12"/><text x="23.5486%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="23.6189%" y="661" width="0.6405%" height="15" fill="rgb(228,84,11)" fg:x="295" fg:w="8"/><text x="23.8689%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="23.9392%" y="645" width="0.3203%" height="15" fill="rgb(218,76,45)" fg:x="299" fg:w="4"/><text x="24.1892%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="23.9392%" y="629" width="0.3203%" height="15" fill="rgb(223,80,15)" fg:x="299" fg:w="4"/><text x="24.1892%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="24.0993%" y="613" width="0.1601%" height="15" fill="rgb(219,218,33)" fg:x="301" fg:w="2"/><text x="24.3493%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="24.0993%" y="597" width="0.1601%" height="15" fill="rgb(208,51,11)" fg:x="301" fg:w="2"/><text x="24.3493%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.0993%" y="581" width="0.1601%" height="15" fill="rgb(229,165,39)" fg:x="301" fg:w="2"/><text x="24.3493%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.1793%" y="565" width="0.0801%" height="15" fill="rgb(241,100,24)" fg:x="302" fg:w="1"/><text x="24.4293%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.1793%" y="549" width="0.0801%" height="15" fill="rgb(228,14,23)" fg:x="302" fg:w="1"/><text x="24.4293%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="24.1793%" y="533" width="0.0801%" height="15" fill="rgb(247,116,52)" fg:x="302" fg:w="1"/><text x="24.4293%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.1793%" y="517" width="0.0801%" height="15" fill="rgb(216,149,33)" fg:x="302" fg:w="1"/><text x="24.4293%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.1793%" y="501" width="0.0801%" height="15" fill="rgb(238,142,29)" fg:x="302" fg:w="1"/><text x="24.4293%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.1793%" y="485" width="0.0801%" height="15" fill="rgb(224,83,40)" fg:x="302" fg:w="1"/><text x="24.4293%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1793%" y="469" width="0.0801%" height="15" fill="rgb(234,165,11)" fg:x="302" fg:w="1"/><text x="24.4293%" y="479.50"></text></g><g><title>plugins_core::build::Build::save (19 samples, 1.52%)</title><rect x="22.8983%" y="693" width="1.5212%" height="15" fill="rgb(215,96,23)" fg:x="286" fg:w="19"/><text x="23.1483%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="24.2594%" y="677" width="0.1601%" height="15" fill="rgb(233,179,26)" fg:x="303" fg:w="2"/><text x="24.5094%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="24.2594%" y="661" width="0.1601%" height="15" fill="rgb(225,129,33)" fg:x="303" fg:w="2"/><text x="24.5094%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.3395%" y="645" width="0.0801%" height="15" fill="rgb(237,49,13)" fg:x="304" fg:w="1"/><text x="24.5895%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.3395%" y="629" width="0.0801%" height="15" fill="rgb(211,3,31)" fg:x="304" fg:w="1"/><text x="24.5895%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.3395%" y="613" width="0.0801%" height="15" fill="rgb(216,152,19)" fg:x="304" fg:w="1"/><text x="24.5895%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="24.3395%" y="597" width="0.0801%" height="15" fill="rgb(251,121,35)" fg:x="304" fg:w="1"/><text x="24.5895%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="24.3395%" y="581" width="0.0801%" height="15" fill="rgb(210,217,47)" fg:x="304" fg:w="1"/><text x="24.5895%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="24.3395%" y="565" width="0.0801%" height="15" fill="rgb(244,116,22)" fg:x="304" fg:w="1"/><text x="24.5895%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="24.3395%" y="549" width="0.0801%" height="15" fill="rgb(228,17,21)" fg:x="304" fg:w="1"/><text x="24.5895%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.3395%" y="533" width="0.0801%" height="15" fill="rgb(240,149,34)" fg:x="304" fg:w="1"/><text x="24.5895%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="24.3395%" y="517" width="0.0801%" height="15" fill="rgb(208,125,47)" fg:x="304" fg:w="1"/><text x="24.5895%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="24.3395%" y="501" width="0.0801%" height="15" fill="rgb(249,186,39)" fg:x="304" fg:w="1"/><text x="24.5895%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="24.3395%" y="485" width="0.0801%" height="15" fill="rgb(240,220,33)" fg:x="304" fg:w="1"/><text x="24.5895%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="24.3395%" y="469" width="0.0801%" height="15" fill="rgb(243,110,23)" fg:x="304" fg:w="1"/><text x="24.5895%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="24.3395%" y="453" width="0.0801%" height="15" fill="rgb(219,163,46)" fg:x="304" fg:w="1"/><text x="24.5895%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.3395%" y="437" width="0.0801%" height="15" fill="rgb(216,126,30)" fg:x="304" fg:w="1"/><text x="24.5895%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="24.4195%" y="693" width="0.0801%" height="15" fill="rgb(208,139,11)" fg:x="305" fg:w="1"/><text x="24.6695%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="24.4195%" y="677" width="0.0801%" height="15" fill="rgb(213,118,36)" fg:x="305" fg:w="1"/><text x="24.6695%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="24.4195%" y="661" width="0.0801%" height="15" fill="rgb(226,43,17)" fg:x="305" fg:w="1"/><text x="24.6695%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="24.4195%" y="645" width="0.0801%" height="15" fill="rgb(254,217,4)" fg:x="305" fg:w="1"/><text x="24.6695%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.4195%" y="629" width="0.0801%" height="15" fill="rgb(210,134,47)" fg:x="305" fg:w="1"/><text x="24.6695%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="24.4195%" y="613" width="0.0801%" height="15" fill="rgb(237,24,49)" fg:x="305" fg:w="1"/><text x="24.6695%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="24.4996%" y="661" width="0.0801%" height="15" fill="rgb(251,39,46)" fg:x="306" fg:w="1"/><text x="24.7496%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="24.4996%" y="645" width="0.0801%" height="15" fill="rgb(251,220,3)" fg:x="306" fg:w="1"/><text x="24.7496%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="24.5797%" y="613" width="0.0801%" height="15" fill="rgb(228,105,12)" fg:x="307" fg:w="1"/><text x="24.8297%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="24.5797%" y="597" width="0.0801%" height="15" fill="rgb(215,196,1)" fg:x="307" fg:w="1"/><text x="24.8297%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.5797%" y="581" width="0.0801%" height="15" fill="rgb(214,33,39)" fg:x="307" fg:w="1"/><text x="24.8297%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="24.5797%" y="565" width="0.0801%" height="15" fill="rgb(220,19,52)" fg:x="307" fg:w="1"/><text x="24.8297%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="24.5797%" y="549" width="0.0801%" height="15" fill="rgb(221,78,38)" fg:x="307" fg:w="1"/><text x="24.8297%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.5797%" y="533" width="0.0801%" height="15" fill="rgb(253,30,16)" fg:x="307" fg:w="1"/><text x="24.8297%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="24.5797%" y="629" width="0.1601%" height="15" fill="rgb(242,65,0)" fg:x="307" fg:w="2"/><text x="24.8297%" y="639.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="24.6597%" y="613" width="0.0801%" height="15" fill="rgb(235,201,12)" fg:x="308" fg:w="1"/><text x="24.9097%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="24.5797%" y="661" width="0.2402%" height="15" fill="rgb(233,161,9)" fg:x="307" fg:w="3"/><text x="24.8297%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="24.5797%" y="645" width="0.2402%" height="15" fill="rgb(241,207,41)" fg:x="307" fg:w="3"/><text x="24.8297%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="24.7398%" y="629" width="0.0801%" height="15" fill="rgb(212,69,46)" fg:x="309" fg:w="1"/><text x="24.9898%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="24.7398%" y="613" width="0.0801%" height="15" fill="rgb(239,69,45)" fg:x="309" fg:w="1"/><text x="24.9898%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.7398%" y="597" width="0.0801%" height="15" fill="rgb(242,117,48)" fg:x="309" fg:w="1"/><text x="24.9898%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.7398%" y="581" width="0.0801%" height="15" fill="rgb(228,41,36)" fg:x="309" fg:w="1"/><text x="24.9898%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="24.7398%" y="565" width="0.0801%" height="15" fill="rgb(212,3,32)" fg:x="309" fg:w="1"/><text x="24.9898%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.7398%" y="549" width="0.0801%" height="15" fill="rgb(233,41,49)" fg:x="309" fg:w="1"/><text x="24.9898%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="24.8199%" y="645" width="0.0801%" height="15" fill="rgb(252,170,49)" fg:x="310" fg:w="1"/><text x="25.0699%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.8199%" y="629" width="0.0801%" height="15" fill="rgb(229,53,26)" fg:x="310" fg:w="1"/><text x="25.0699%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="24.8199%" y="613" width="0.0801%" height="15" fill="rgb(217,157,12)" fg:x="310" fg:w="1"/><text x="25.0699%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.8199%" y="597" width="0.0801%" height="15" fill="rgb(227,17,9)" fg:x="310" fg:w="1"/><text x="25.0699%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="24.8999%" y="645" width="0.1601%" height="15" fill="rgb(218,84,12)" fg:x="311" fg:w="2"/><text x="25.1499%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="24.8999%" y="629" width="0.1601%" height="15" fill="rgb(212,79,24)" fg:x="311" fg:w="2"/><text x="25.1499%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.9800%" y="613" width="0.0801%" height="15" fill="rgb(217,222,37)" fg:x="312" fg:w="1"/><text x="25.2300%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.9800%" y="597" width="0.0801%" height="15" fill="rgb(246,208,8)" fg:x="312" fg:w="1"/><text x="25.2300%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (8 samples, 0.64%)</title><rect x="24.4996%" y="693" width="0.6405%" height="15" fill="rgb(244,133,10)" fg:x="306" fg:w="8"/><text x="24.7496%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (8 samples, 0.64%)</title><rect x="24.4996%" y="677" width="0.6405%" height="15" fill="rgb(209,219,41)" fg:x="306" fg:w="8"/><text x="24.7496%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (4 samples, 0.32%)</title><rect x="24.8199%" y="661" width="0.3203%" height="15" fill="rgb(253,175,45)" fg:x="310" fg:w="4"/><text x="25.0699%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="25.0600%" y="645" width="0.0801%" height="15" fill="rgb(235,100,37)" fg:x="313" fg:w="1"/><text x="25.3100%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.0600%" y="629" width="0.0801%" height="15" fill="rgb(225,87,19)" fg:x="313" fg:w="1"/><text x="25.3100%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="25.0600%" y="613" width="0.0801%" height="15" fill="rgb(217,152,17)" fg:x="313" fg:w="1"/><text x="25.3100%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.0600%" y="597" width="0.0801%" height="15" fill="rgb(235,72,13)" fg:x="313" fg:w="1"/><text x="25.3100%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0600%" y="581" width="0.0801%" height="15" fill="rgb(233,140,18)" fg:x="313" fg:w="1"/><text x="25.3100%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.1401%" y="661" width="0.0801%" height="15" fill="rgb(207,212,28)" fg:x="314" fg:w="1"/><text x="25.3901%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.1401%" y="645" width="0.0801%" height="15" fill="rgb(220,130,25)" fg:x="314" fg:w="1"/><text x="25.3901%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.1401%" y="629" width="0.0801%" height="15" fill="rgb(205,55,34)" fg:x="314" fg:w="1"/><text x="25.3901%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.1401%" y="613" width="0.0801%" height="15" fill="rgb(237,54,35)" fg:x="314" fg:w="1"/><text x="25.3901%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.1401%" y="597" width="0.0801%" height="15" fill="rgb(208,67,23)" fg:x="314" fg:w="1"/><text x="25.3901%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.1401%" y="581" width="0.0801%" height="15" fill="rgb(206,207,50)" fg:x="314" fg:w="1"/><text x="25.3901%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.1401%" y="565" width="0.0801%" height="15" fill="rgb(213,211,42)" fg:x="314" fg:w="1"/><text x="25.3901%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.1401%" y="549" width="0.0801%" height="15" fill="rgb(252,197,50)" fg:x="314" fg:w="1"/><text x="25.3901%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="25.1401%" y="533" width="0.0801%" height="15" fill="rgb(251,211,41)" fg:x="314" fg:w="1"/><text x="25.3901%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.1401%" y="517" width="0.0801%" height="15" fill="rgb(229,211,5)" fg:x="314" fg:w="1"/><text x="25.3901%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="25.2202%" y="629" width="0.0801%" height="15" fill="rgb(239,36,31)" fg:x="315" fg:w="1"/><text x="25.4702%" y="639.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="25.2202%" y="613" width="0.0801%" height="15" fill="rgb(248,67,31)" fg:x="315" fg:w="1"/><text x="25.4702%" y="623.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="25.2202%" y="597" width="0.0801%" height="15" fill="rgb(249,55,44)" fg:x="315" fg:w="1"/><text x="25.4702%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.2202%" y="581" width="0.0801%" height="15" fill="rgb(216,82,12)" fg:x="315" fg:w="1"/><text x="25.4702%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.2202%" y="565" width="0.0801%" height="15" fill="rgb(242,174,1)" fg:x="315" fg:w="1"/><text x="25.4702%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.2202%" y="549" width="0.0801%" height="15" fill="rgb(208,120,29)" fg:x="315" fg:w="1"/><text x="25.4702%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="25.1401%" y="677" width="0.2402%" height="15" fill="rgb(221,105,43)" fg:x="314" fg:w="3"/><text x="25.3901%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="25.2202%" y="661" width="0.1601%" height="15" fill="rgb(234,124,22)" fg:x="315" fg:w="2"/><text x="25.4702%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.2202%" y="645" width="0.1601%" height="15" fill="rgb(212,23,30)" fg:x="315" fg:w="2"/><text x="25.4702%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.3002%" y="629" width="0.0801%" height="15" fill="rgb(219,122,53)" fg:x="316" fg:w="1"/><text x="25.5502%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.3002%" y="613" width="0.0801%" height="15" fill="rgb(248,84,24)" fg:x="316" fg:w="1"/><text x="25.5502%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="25.3002%" y="597" width="0.0801%" height="15" fill="rgb(245,115,18)" fg:x="316" fg:w="1"/><text x="25.5502%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="25.3803%" y="661" width="0.0801%" height="15" fill="rgb(227,176,51)" fg:x="317" fg:w="1"/><text x="25.6303%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.3803%" y="645" width="0.0801%" height="15" fill="rgb(229,63,42)" fg:x="317" fg:w="1"/><text x="25.6303%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="25.3803%" y="629" width="0.0801%" height="15" fill="rgb(247,202,24)" fg:x="317" fg:w="1"/><text x="25.6303%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="25.3803%" y="613" width="0.0801%" height="15" fill="rgb(244,173,20)" fg:x="317" fg:w="1"/><text x="25.6303%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (6 samples, 0.48%)</title><rect x="25.1401%" y="693" width="0.4804%" height="15" fill="rgb(242,81,47)" fg:x="314" fg:w="6"/><text x="25.3901%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="25.3803%" y="677" width="0.2402%" height="15" fill="rgb(231,185,54)" fg:x="317" fg:w="3"/><text x="25.6303%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="25.4604%" y="661" width="0.1601%" height="15" fill="rgb(243,55,32)" fg:x="318" fg:w="2"/><text x="25.7104%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="25.4604%" y="645" width="0.1601%" height="15" fill="rgb(208,167,19)" fg:x="318" fg:w="2"/><text x="25.7104%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (2 samples, 0.16%)</title><rect x="25.4604%" y="629" width="0.1601%" height="15" fill="rgb(231,72,35)" fg:x="318" fg:w="2"/><text x="25.7104%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="25.5404%" y="613" width="0.0801%" height="15" fill="rgb(250,173,51)" fg:x="319" fg:w="1"/><text x="25.7904%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.5404%" y="597" width="0.0801%" height="15" fill="rgb(209,5,22)" fg:x="319" fg:w="1"/><text x="25.7904%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="25.6205%" y="677" width="0.0801%" height="15" fill="rgb(250,174,19)" fg:x="320" fg:w="1"/><text x="25.8705%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="25.6205%" y="661" width="0.0801%" height="15" fill="rgb(217,3,49)" fg:x="320" fg:w="1"/><text x="25.8705%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="25.6205%" y="645" width="0.0801%" height="15" fill="rgb(218,225,5)" fg:x="320" fg:w="1"/><text x="25.8705%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="25.6205%" y="629" width="0.0801%" height="15" fill="rgb(236,89,11)" fg:x="320" fg:w="1"/><text x="25.8705%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.6205%" y="613" width="0.0801%" height="15" fill="rgb(206,33,28)" fg:x="320" fg:w="1"/><text x="25.8705%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="25.7006%" y="677" width="0.0801%" height="15" fill="rgb(241,56,42)" fg:x="321" fg:w="1"/><text x="25.9506%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="25.7006%" y="661" width="0.0801%" height="15" fill="rgb(222,44,11)" fg:x="321" fg:w="1"/><text x="25.9506%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="25.6205%" y="693" width="0.2402%" height="15" fill="rgb(234,111,20)" fg:x="320" fg:w="3"/><text x="25.8705%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="25.7806%" y="677" width="0.0801%" height="15" fill="rgb(237,77,6)" fg:x="322" fg:w="1"/><text x="26.0306%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="25.7806%" y="661" width="0.0801%" height="15" fill="rgb(235,111,23)" fg:x="322" fg:w="1"/><text x="26.0306%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="25.7806%" y="645" width="0.0801%" height="15" fill="rgb(251,135,29)" fg:x="322" fg:w="1"/><text x="26.0306%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.7806%" y="629" width="0.0801%" height="15" fill="rgb(217,57,1)" fg:x="322" fg:w="1"/><text x="26.0306%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="25.7806%" y="613" width="0.0801%" height="15" fill="rgb(249,119,31)" fg:x="322" fg:w="1"/><text x="26.0306%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (122 samples, 9.77%)</title><rect x="16.1729%" y="709" width="9.7678%" height="15" fill="rgb(233,164,33)" fg:x="202" fg:w="122"/><text x="16.4229%" y="719.50">plugins_core::..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="25.8607%" y="693" width="0.0801%" height="15" fill="rgb(250,217,43)" fg:x="323" fg:w="1"/><text x="26.1107%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="25.9408%" y="661" width="0.0801%" height="15" fill="rgb(232,154,50)" fg:x="324" fg:w="1"/><text x="26.1908%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="25.9408%" y="645" width="0.0801%" height="15" fill="rgb(227,190,8)" fg:x="324" fg:w="1"/><text x="26.1908%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="25.9408%" y="629" width="0.0801%" height="15" fill="rgb(209,217,32)" fg:x="324" fg:w="1"/><text x="26.1908%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="25.9408%" y="613" width="0.0801%" height="15" fill="rgb(243,203,50)" fg:x="324" fg:w="1"/><text x="26.1908%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="25.9408%" y="597" width="0.0801%" height="15" fill="rgb(232,152,27)" fg:x="324" fg:w="1"/><text x="26.1908%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.9408%" y="581" width="0.0801%" height="15" fill="rgb(240,34,29)" fg:x="324" fg:w="1"/><text x="26.1908%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.9408%" y="565" width="0.0801%" height="15" fill="rgb(215,185,52)" fg:x="324" fg:w="1"/><text x="26.1908%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="25.9408%" y="549" width="0.0801%" height="15" fill="rgb(240,89,49)" fg:x="324" fg:w="1"/><text x="26.1908%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="25.9408%" y="533" width="0.0801%" height="15" fill="rgb(225,12,52)" fg:x="324" fg:w="1"/><text x="26.1908%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="25.9408%" y="517" width="0.0801%" height="15" fill="rgb(239,128,45)" fg:x="324" fg:w="1"/><text x="26.1908%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="25.9408%" y="501" width="0.0801%" height="15" fill="rgb(211,78,47)" fg:x="324" fg:w="1"/><text x="26.1908%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="25.9408%" y="485" width="0.0801%" height="15" fill="rgb(232,31,21)" fg:x="324" fg:w="1"/><text x="26.1908%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="26.0208%" y="629" width="0.0801%" height="15" fill="rgb(222,168,14)" fg:x="325" fg:w="1"/><text x="26.2708%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (3 samples, 0.24%)</title><rect x="25.9408%" y="709" width="0.2402%" height="15" fill="rgb(209,128,24)" fg:x="324" fg:w="3"/><text x="26.1908%" y="719.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.24%)</title><rect x="25.9408%" y="693" width="0.2402%" height="15" fill="rgb(249,35,13)" fg:x="324" fg:w="3"/><text x="26.1908%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="25.9408%" y="677" width="0.2402%" height="15" fill="rgb(218,7,2)" fg:x="324" fg:w="3"/><text x="26.1908%" y="687.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="26.0208%" y="661" width="0.1601%" height="15" fill="rgb(238,107,27)" fg:x="325" fg:w="2"/><text x="26.2708%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="26.0208%" y="645" width="0.1601%" height="15" fill="rgb(217,88,38)" fg:x="325" fg:w="2"/><text x="26.2708%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.1009%" y="629" width="0.0801%" height="15" fill="rgb(230,207,0)" fg:x="326" fg:w="1"/><text x="26.3509%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.1009%" y="613" width="0.0801%" height="15" fill="rgb(249,64,54)" fg:x="326" fg:w="1"/><text x="26.3509%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1009%" y="597" width="0.0801%" height="15" fill="rgb(231,7,11)" fg:x="326" fg:w="1"/><text x="26.3509%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.1809%" y="629" width="0.0801%" height="15" fill="rgb(205,149,21)" fg:x="327" fg:w="1"/><text x="26.4309%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.1809%" y="613" width="0.0801%" height="15" fill="rgb(215,126,34)" fg:x="327" fg:w="1"/><text x="26.4309%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1809%" y="597" width="0.0801%" height="15" fill="rgb(241,132,45)" fg:x="327" fg:w="1"/><text x="26.4309%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="26.2610%" y="629" width="0.0801%" height="15" fill="rgb(252,69,32)" fg:x="328" fg:w="1"/><text x="26.5110%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.3411%" y="565" width="0.0801%" height="15" fill="rgb(232,204,19)" fg:x="329" fg:w="1"/><text x="26.5911%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="26.1809%" y="661" width="0.3203%" height="15" fill="rgb(249,15,47)" fg:x="327" fg:w="4"/><text x="26.4309%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="26.1809%" y="645" width="0.3203%" height="15" fill="rgb(209,227,23)" fg:x="327" fg:w="4"/><text x="26.4309%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="26.3411%" y="629" width="0.1601%" height="15" fill="rgb(248,92,24)" fg:x="329" fg:w="2"/><text x="26.5911%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="26.3411%" y="613" width="0.1601%" height="15" fill="rgb(247,59,2)" fg:x="329" fg:w="2"/><text x="26.5911%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="26.3411%" y="597" width="0.1601%" height="15" fill="rgb(221,30,5)" fg:x="329" fg:w="2"/><text x="26.5911%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="26.3411%" y="581" width="0.1601%" height="15" fill="rgb(208,108,53)" fg:x="329" fg:w="2"/><text x="26.5911%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.4211%" y="565" width="0.0801%" height="15" fill="rgb(211,183,26)" fg:x="330" fg:w="1"/><text x="26.6711%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.4211%" y="549" width="0.0801%" height="15" fill="rgb(232,132,4)" fg:x="330" fg:w="1"/><text x="26.6711%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.4211%" y="533" width="0.0801%" height="15" fill="rgb(253,128,37)" fg:x="330" fg:w="1"/><text x="26.6711%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.4211%" y="517" width="0.0801%" height="15" fill="rgb(221,58,24)" fg:x="330" fg:w="1"/><text x="26.6711%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="26.5012%" y="645" width="0.0801%" height="15" fill="rgb(230,54,45)" fg:x="331" fg:w="1"/><text x="26.7512%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.5012%" y="629" width="0.0801%" height="15" fill="rgb(254,21,18)" fg:x="331" fg:w="1"/><text x="26.7512%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="26.5813%" y="629" width="0.0801%" height="15" fill="rgb(221,108,0)" fg:x="332" fg:w="1"/><text x="26.8313%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="26.5813%" y="613" width="0.0801%" height="15" fill="rgb(206,95,1)" fg:x="332" fg:w="1"/><text x="26.8313%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="26.5813%" y="597" width="0.0801%" height="15" fill="rgb(237,52,5)" fg:x="332" fg:w="1"/><text x="26.8313%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.5813%" y="581" width="0.0801%" height="15" fill="rgb(218,150,34)" fg:x="332" fg:w="1"/><text x="26.8313%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.5813%" y="565" width="0.0801%" height="15" fill="rgb(235,194,28)" fg:x="332" fg:w="1"/><text x="26.8313%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="26.5813%" y="549" width="0.0801%" height="15" fill="rgb(245,92,18)" fg:x="332" fg:w="1"/><text x="26.8313%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8215%" y="597" width="0.0801%" height="15" fill="rgb(253,203,53)" fg:x="335" fg:w="1"/><text x="27.0715%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9015%" y="597" width="0.0801%" height="15" fill="rgb(249,185,47)" fg:x="336" fg:w="1"/><text x="27.1515%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="26.9816%" y="581" width="0.0801%" height="15" fill="rgb(252,194,52)" fg:x="337" fg:w="1"/><text x="27.2316%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="26.9816%" y="597" width="0.1601%" height="15" fill="rgb(210,53,36)" fg:x="337" fg:w="2"/><text x="27.2316%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="27.0616%" y="581" width="0.0801%" height="15" fill="rgb(237,37,25)" fg:x="338" fg:w="1"/><text x="27.3116%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.0616%" y="565" width="0.0801%" height="15" fill="rgb(242,116,27)" fg:x="338" fg:w="1"/><text x="27.3116%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.0616%" y="549" width="0.0801%" height="15" fill="rgb(213,185,26)" fg:x="338" fg:w="1"/><text x="27.3116%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.0616%" y="533" width="0.0801%" height="15" fill="rgb(225,204,8)" fg:x="338" fg:w="1"/><text x="27.3116%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.0616%" y="517" width="0.0801%" height="15" fill="rgb(254,111,37)" fg:x="338" fg:w="1"/><text x="27.3116%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.0616%" y="501" width="0.0801%" height="15" fill="rgb(242,35,9)" fg:x="338" fg:w="1"/><text x="27.3116%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.72%)</title><rect x="26.5012%" y="661" width="0.7206%" height="15" fill="rgb(232,138,49)" fg:x="331" fg:w="9"/><text x="26.7512%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="26.5813%" y="645" width="0.6405%" height="15" fill="rgb(247,56,4)" fg:x="332" fg:w="8"/><text x="26.8313%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="26.6613%" y="629" width="0.5604%" height="15" fill="rgb(226,179,17)" fg:x="333" fg:w="7"/><text x="26.9113%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="26.6613%" y="613" width="0.5604%" height="15" fill="rgb(216,163,45)" fg:x="333" fg:w="7"/><text x="26.9113%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="27.1417%" y="597" width="0.0801%" height="15" fill="rgb(211,157,3)" fg:x="339" fg:w="1"/><text x="27.3917%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.1417%" y="581" width="0.0801%" height="15" fill="rgb(234,44,20)" fg:x="339" fg:w="1"/><text x="27.3917%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1417%" y="565" width="0.0801%" height="15" fill="rgb(254,138,23)" fg:x="339" fg:w="1"/><text x="27.3917%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.12%)</title><rect x="26.1809%" y="677" width="1.1209%" height="15" fill="rgb(206,119,39)" fg:x="327" fg:w="14"/><text x="26.4309%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.2218%" y="661" width="0.0801%" height="15" fill="rgb(231,105,52)" fg:x="340" fg:w="1"/><text x="27.4718%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.2218%" y="645" width="0.0801%" height="15" fill="rgb(250,20,5)" fg:x="340" fg:w="1"/><text x="27.4718%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.2218%" y="629" width="0.0801%" height="15" fill="rgb(215,198,30)" fg:x="340" fg:w="1"/><text x="27.4718%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="27.3018%" y="645" width="0.0801%" height="15" fill="rgb(246,142,8)" fg:x="341" fg:w="1"/><text x="27.5518%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="27.3018%" y="629" width="0.0801%" height="15" fill="rgb(243,26,38)" fg:x="341" fg:w="1"/><text x="27.5518%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (17 samples, 1.36%)</title><rect x="26.1809%" y="709" width="1.3611%" height="15" fill="rgb(205,133,28)" fg:x="327" fg:w="17"/><text x="26.4309%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (17 samples, 1.36%)</title><rect x="26.1809%" y="693" width="1.3611%" height="15" fill="rgb(212,34,0)" fg:x="327" fg:w="17"/><text x="26.4309%" y="703.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (3 samples, 0.24%)</title><rect x="27.3018%" y="677" width="0.2402%" height="15" fill="rgb(251,226,22)" fg:x="341" fg:w="3"/><text x="27.5518%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="27.3018%" y="661" width="0.2402%" height="15" fill="rgb(252,119,9)" fg:x="341" fg:w="3"/><text x="27.5518%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="27.3819%" y="645" width="0.1601%" height="15" fill="rgb(213,150,50)" fg:x="342" fg:w="2"/><text x="27.6319%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="27.4620%" y="629" width="0.0801%" height="15" fill="rgb(212,24,39)" fg:x="343" fg:w="1"/><text x="27.7120%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.6221%" y="661" width="0.0801%" height="15" fill="rgb(213,46,39)" fg:x="345" fg:w="1"/><text x="27.8721%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="27.6221%" y="677" width="0.1601%" height="15" fill="rgb(239,106,12)" fg:x="345" fg:w="2"/><text x="27.8721%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.7022%" y="661" width="0.0801%" height="15" fill="rgb(249,229,21)" fg:x="346" fg:w="1"/><text x="27.9522%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.7022%" y="645" width="0.0801%" height="15" fill="rgb(212,158,3)" fg:x="346" fg:w="1"/><text x="27.9522%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.7022%" y="629" width="0.0801%" height="15" fill="rgb(253,26,48)" fg:x="346" fg:w="1"/><text x="27.9522%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.7822%" y="629" width="0.0801%" height="15" fill="rgb(238,178,20)" fg:x="347" fg:w="1"/><text x="28.0322%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (5 samples, 0.40%)</title><rect x="27.5420%" y="693" width="0.4003%" height="15" fill="rgb(208,86,15)" fg:x="344" fg:w="5"/><text x="27.7920%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="27.7822%" y="677" width="0.1601%" height="15" fill="rgb(239,42,53)" fg:x="347" fg:w="2"/><text x="28.0322%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="27.7822%" y="661" width="0.1601%" height="15" fill="rgb(245,226,8)" fg:x="347" fg:w="2"/><text x="28.0322%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="27.7822%" y="645" width="0.1601%" height="15" fill="rgb(216,176,32)" fg:x="347" fg:w="2"/><text x="28.0322%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="27.8623%" y="629" width="0.0801%" height="15" fill="rgb(231,186,21)" fg:x="348" fg:w="1"/><text x="28.1123%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="27.8623%" y="613" width="0.0801%" height="15" fill="rgb(205,95,49)" fg:x="348" fg:w="1"/><text x="28.1123%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.8623%" y="597" width="0.0801%" height="15" fill="rgb(217,145,8)" fg:x="348" fg:w="1"/><text x="28.1123%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.8623%" y="581" width="0.0801%" height="15" fill="rgb(239,144,48)" fg:x="348" fg:w="1"/><text x="28.1123%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="28.1025%" y="661" width="0.0801%" height="15" fill="rgb(214,189,23)" fg:x="351" fg:w="1"/><text x="28.3525%" y="671.50"></text></g><g><title>plugins_core::build::Build::new_world (4 samples, 0.32%)</title><rect x="27.9424%" y="693" width="0.3203%" height="15" fill="rgb(229,157,17)" fg:x="349" fg:w="4"/><text x="28.1924%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="28.0224%" y="677" width="0.2402%" height="15" fill="rgb(230,5,48)" fg:x="350" fg:w="3"/><text x="28.2724%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="28.1825%" y="661" width="0.0801%" height="15" fill="rgb(224,156,48)" fg:x="352" fg:w="1"/><text x="28.4325%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.1825%" y="645" width="0.0801%" height="15" fill="rgb(223,14,29)" fg:x="352" fg:w="1"/><text x="28.4325%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="28.2626%" y="661" width="0.0801%" height="15" fill="rgb(229,96,36)" fg:x="353" fg:w="1"/><text x="28.5126%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.2626%" y="645" width="0.0801%" height="15" fill="rgb(231,102,53)" fg:x="353" fg:w="1"/><text x="28.5126%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.2626%" y="629" width="0.0801%" height="15" fill="rgb(210,77,38)" fg:x="353" fg:w="1"/><text x="28.5126%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="28.2626%" y="613" width="0.0801%" height="15" fill="rgb(235,131,6)" fg:x="353" fg:w="1"/><text x="28.5126%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.2626%" y="597" width="0.0801%" height="15" fill="rgb(252,55,38)" fg:x="353" fg:w="1"/><text x="28.5126%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="28.4227%" y="613" width="0.0801%" height="15" fill="rgb(246,38,14)" fg:x="355" fg:w="1"/><text x="28.6727%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.4227%" y="597" width="0.0801%" height="15" fill="rgb(242,27,5)" fg:x="355" fg:w="1"/><text x="28.6727%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.4227%" y="581" width="0.0801%" height="15" fill="rgb(228,65,35)" fg:x="355" fg:w="1"/><text x="28.6727%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="28.4227%" y="565" width="0.0801%" height="15" fill="rgb(245,93,11)" fg:x="355" fg:w="1"/><text x="28.6727%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.4227%" y="549" width="0.0801%" height="15" fill="rgb(213,1,31)" fg:x="355" fg:w="1"/><text x="28.6727%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="28.5028%" y="613" width="0.0801%" height="15" fill="rgb(237,205,14)" fg:x="356" fg:w="1"/><text x="28.7528%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5829%" y="565" width="0.0801%" height="15" fill="rgb(232,118,45)" fg:x="357" fg:w="1"/><text x="28.8329%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="28.3427%" y="645" width="0.4003%" height="15" fill="rgb(218,5,6)" fg:x="354" fg:w="5"/><text x="28.5927%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (5 samples, 0.40%)</title><rect x="28.3427%" y="629" width="0.4003%" height="15" fill="rgb(251,87,51)" fg:x="354" fg:w="5"/><text x="28.5927%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="28.5829%" y="613" width="0.1601%" height="15" fill="rgb(207,225,20)" fg:x="357" fg:w="2"/><text x="28.8329%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="28.5829%" y="597" width="0.1601%" height="15" fill="rgb(222,78,54)" fg:x="357" fg:w="2"/><text x="28.8329%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="28.5829%" y="581" width="0.1601%" height="15" fill="rgb(232,85,16)" fg:x="357" fg:w="2"/><text x="28.8329%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.6629%" y="565" width="0.0801%" height="15" fill="rgb(244,25,33)" fg:x="358" fg:w="1"/><text x="28.9129%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.6629%" y="549" width="0.0801%" height="15" fill="rgb(233,24,36)" fg:x="358" fg:w="1"/><text x="28.9129%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="28.6629%" y="533" width="0.0801%" height="15" fill="rgb(253,49,54)" fg:x="358" fg:w="1"/><text x="28.9129%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="28.7430%" y="645" width="0.0801%" height="15" fill="rgb(245,12,22)" fg:x="359" fg:w="1"/><text x="28.9930%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="28.9031%" y="613" width="0.0801%" height="15" fill="rgb(253,141,28)" fg:x="361" fg:w="1"/><text x="29.1531%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="28.9031%" y="597" width="0.0801%" height="15" fill="rgb(225,207,27)" fg:x="361" fg:w="1"/><text x="29.1531%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.9031%" y="581" width="0.0801%" height="15" fill="rgb(220,84,2)" fg:x="361" fg:w="1"/><text x="29.1531%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="28.9031%" y="565" width="0.0801%" height="15" fill="rgb(224,37,37)" fg:x="361" fg:w="1"/><text x="29.1531%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.9031%" y="549" width="0.0801%" height="15" fill="rgb(220,143,18)" fg:x="361" fg:w="1"/><text x="29.1531%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="28.9031%" y="533" width="0.0801%" height="15" fill="rgb(210,88,33)" fg:x="361" fg:w="1"/><text x="29.1531%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.9031%" y="517" width="0.0801%" height="15" fill="rgb(219,87,51)" fg:x="361" fg:w="1"/><text x="29.1531%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.9031%" y="501" width="0.0801%" height="15" fill="rgb(211,7,35)" fg:x="361" fg:w="1"/><text x="29.1531%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.9031%" y="485" width="0.0801%" height="15" fill="rgb(232,77,2)" fg:x="361" fg:w="1"/><text x="29.1531%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9031%" y="469" width="0.0801%" height="15" fill="rgb(249,94,25)" fg:x="361" fg:w="1"/><text x="29.1531%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.80%)</title><rect x="28.2626%" y="677" width="0.8006%" height="15" fill="rgb(215,112,2)" fg:x="353" fg:w="10"/><text x="28.5126%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.72%)</title><rect x="28.3427%" y="661" width="0.7206%" height="15" fill="rgb(226,115,48)" fg:x="354" fg:w="9"/><text x="28.5927%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="28.8231%" y="645" width="0.2402%" height="15" fill="rgb(249,196,10)" fg:x="360" fg:w="3"/><text x="29.0731%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="28.8231%" y="629" width="0.2402%" height="15" fill="rgb(237,109,14)" fg:x="360" fg:w="3"/><text x="29.0731%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="28.9832%" y="613" width="0.0801%" height="15" fill="rgb(217,103,53)" fg:x="362" fg:w="1"/><text x="29.2332%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (247 samples, 19.78%)</title><rect x="9.3675%" y="725" width="19.7758%" height="15" fill="rgb(244,137,9)" fg:x="117" fg:w="247"/><text x="9.6175%" y="735.50">&lt;tests::HoldingKeyInVessel as t..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (20 samples, 1.60%)</title><rect x="27.5420%" y="709" width="1.6013%" height="15" fill="rgb(227,201,3)" fg:x="344" fg:w="20"/><text x="27.7920%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.88%)</title><rect x="28.2626%" y="693" width="0.8807%" height="15" fill="rgb(243,94,6)" fg:x="353" fg:w="11"/><text x="28.5126%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.0633%" y="677" width="0.0801%" height="15" fill="rgb(235,118,5)" fg:x="363" fg:w="1"/><text x="29.3133%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.0633%" y="661" width="0.0801%" height="15" fill="rgb(247,10,30)" fg:x="363" fg:w="1"/><text x="29.3133%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.1433%" y="709" width="0.0801%" height="15" fill="rgb(205,26,28)" fg:x="364" fg:w="1"/><text x="29.3933%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="29.2234%" y="709" width="0.0801%" height="15" fill="rgb(206,99,35)" fg:x="365" fg:w="1"/><text x="29.4734%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.2234%" y="693" width="0.0801%" height="15" fill="rgb(238,130,40)" fg:x="365" fg:w="1"/><text x="29.4734%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.2234%" y="677" width="0.0801%" height="15" fill="rgb(224,126,31)" fg:x="365" fg:w="1"/><text x="29.4734%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="29.3034%" y="709" width="0.2402%" height="15" fill="rgb(254,105,17)" fg:x="366" fg:w="3"/><text x="29.5534%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="29.3034%" y="693" width="0.2402%" height="15" fill="rgb(216,87,36)" fg:x="366" fg:w="3"/><text x="29.5534%" y="703.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="29.3034%" y="677" width="0.2402%" height="15" fill="rgb(240,21,12)" fg:x="366" fg:w="3"/><text x="29.5534%" y="687.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="29.3034%" y="661" width="0.2402%" height="15" fill="rgb(245,192,34)" fg:x="366" fg:w="3"/><text x="29.5534%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="29.3034%" y="645" width="0.2402%" height="15" fill="rgb(226,100,49)" fg:x="366" fg:w="3"/><text x="29.5534%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (3 samples, 0.24%)</title><rect x="29.3034%" y="629" width="0.2402%" height="15" fill="rgb(245,188,27)" fg:x="366" fg:w="3"/><text x="29.5534%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (3 samples, 0.24%)</title><rect x="29.3034%" y="613" width="0.2402%" height="15" fill="rgb(212,170,8)" fg:x="366" fg:w="3"/><text x="29.5534%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="29.3034%" y="597" width="0.2402%" height="15" fill="rgb(217,113,29)" fg:x="366" fg:w="3"/><text x="29.5534%" y="607.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="29.3034%" y="581" width="0.2402%" height="15" fill="rgb(237,30,3)" fg:x="366" fg:w="3"/><text x="29.5534%" y="591.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="29.5436%" y="709" width="0.0801%" height="15" fill="rgb(227,19,28)" fg:x="369" fg:w="1"/><text x="29.7936%" y="719.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="29.5436%" y="693" width="0.0801%" height="15" fill="rgb(239,172,45)" fg:x="369" fg:w="1"/><text x="29.7936%" y="703.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="29.5436%" y="677" width="0.0801%" height="15" fill="rgb(254,55,39)" fg:x="369" fg:w="1"/><text x="29.7936%" y="687.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="29.5436%" y="661" width="0.0801%" height="15" fill="rgb(249,208,12)" fg:x="369" fg:w="1"/><text x="29.7936%" y="671.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="29.5436%" y="645" width="0.0801%" height="15" fill="rgb(240,52,13)" fg:x="369" fg:w="1"/><text x="29.7936%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="29.5436%" y="629" width="0.0801%" height="15" fill="rgb(252,149,13)" fg:x="369" fg:w="1"/><text x="29.7936%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="29.5436%" y="613" width="0.0801%" height="15" fill="rgb(232,81,48)" fg:x="369" fg:w="1"/><text x="29.7936%" y="623.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="29.5436%" y="597" width="0.0801%" height="15" fill="rgb(222,144,2)" fg:x="369" fg:w="1"/><text x="29.7936%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="29.7038%" y="645" width="0.0801%" height="15" fill="rgb(216,81,32)" fg:x="371" fg:w="1"/><text x="29.9538%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="29.6237%" y="677" width="0.2402%" height="15" fill="rgb(244,78,51)" fg:x="370" fg:w="3"/><text x="29.8737%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="29.6237%" y="661" width="0.2402%" height="15" fill="rgb(217,66,21)" fg:x="370" fg:w="3"/><text x="29.8737%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.7838%" y="645" width="0.0801%" height="15" fill="rgb(247,101,42)" fg:x="372" fg:w="1"/><text x="30.0338%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.8639%" y="645" width="0.0801%" height="15" fill="rgb(227,81,39)" fg:x="373" fg:w="1"/><text x="30.1139%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.8639%" y="629" width="0.0801%" height="15" fill="rgb(220,223,44)" fg:x="373" fg:w="1"/><text x="30.1139%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.8639%" y="613" width="0.0801%" height="15" fill="rgb(205,218,2)" fg:x="373" fg:w="1"/><text x="30.1139%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="30.1041%" y="565" width="0.1601%" height="15" fill="rgb(212,207,28)" fg:x="376" fg:w="2"/><text x="30.3541%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="30.1841%" y="549" width="0.0801%" height="15" fill="rgb(224,12,41)" fg:x="377" fg:w="1"/><text x="30.4341%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.1841%" y="533" width="0.0801%" height="15" fill="rgb(216,118,12)" fg:x="377" fg:w="1"/><text x="30.4341%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="30.1041%" y="581" width="0.3203%" height="15" fill="rgb(252,97,46)" fg:x="376" fg:w="4"/><text x="30.3541%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="30.2642%" y="565" width="0.1601%" height="15" fill="rgb(244,206,19)" fg:x="378" fg:w="2"/><text x="30.5142%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="30.1041%" y="629" width="0.4003%" height="15" fill="rgb(231,84,31)" fg:x="376" fg:w="5"/><text x="30.3541%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="30.1041%" y="613" width="0.4003%" height="15" fill="rgb(244,133,0)" fg:x="376" fg:w="5"/><text x="30.3541%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="30.1041%" y="597" width="0.4003%" height="15" fill="rgb(223,15,50)" fg:x="376" fg:w="5"/><text x="30.3541%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="30.4243%" y="581" width="0.0801%" height="15" fill="rgb(250,118,49)" fg:x="380" fg:w="1"/><text x="30.6743%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.4243%" y="565" width="0.0801%" height="15" fill="rgb(248,25,38)" fg:x="380" fg:w="1"/><text x="30.6743%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.4243%" y="549" width="0.0801%" height="15" fill="rgb(215,70,14)" fg:x="380" fg:w="1"/><text x="30.6743%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="30.5044%" y="629" width="0.2402%" height="15" fill="rgb(215,28,15)" fg:x="381" fg:w="3"/><text x="30.7544%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="30.5044%" y="613" width="0.2402%" height="15" fill="rgb(243,6,28)" fg:x="381" fg:w="3"/><text x="30.7544%" y="623.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="30.5044%" y="597" width="0.2402%" height="15" fill="rgb(222,130,1)" fg:x="381" fg:w="3"/><text x="30.7544%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="30.5845%" y="581" width="0.1601%" height="15" fill="rgb(236,166,44)" fg:x="382" fg:w="2"/><text x="30.8345%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="30.5845%" y="565" width="0.1601%" height="15" fill="rgb(221,108,14)" fg:x="382" fg:w="2"/><text x="30.8345%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="30.5845%" y="549" width="0.1601%" height="15" fill="rgb(252,3,45)" fg:x="382" fg:w="2"/><text x="30.8345%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.5845%" y="533" width="0.1601%" height="15" fill="rgb(237,68,30)" fg:x="382" fg:w="2"/><text x="30.8345%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.5845%" y="517" width="0.1601%" height="15" fill="rgb(211,79,22)" fg:x="382" fg:w="2"/><text x="30.8345%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="30.7446%" y="597" width="0.3203%" height="15" fill="rgb(252,185,21)" fg:x="384" fg:w="4"/><text x="30.9946%" y="607.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="30.7446%" y="581" width="0.3203%" height="15" fill="rgb(225,189,26)" fg:x="384" fg:w="4"/><text x="30.9946%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="30.9047%" y="565" width="0.1601%" height="15" fill="rgb(241,30,40)" fg:x="386" fg:w="2"/><text x="31.1547%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="30.9047%" y="549" width="0.1601%" height="15" fill="rgb(235,215,44)" fg:x="386" fg:w="2"/><text x="31.1547%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="30.7446%" y="613" width="0.4003%" height="15" fill="rgb(205,8,29)" fg:x="384" fg:w="5"/><text x="30.9946%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="31.0649%" y="597" width="0.0801%" height="15" fill="rgb(241,137,42)" fg:x="388" fg:w="1"/><text x="31.3149%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="31.0649%" y="581" width="0.0801%" height="15" fill="rgb(237,155,2)" fg:x="388" fg:w="1"/><text x="31.3149%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="31.0649%" y="565" width="0.0801%" height="15" fill="rgb(245,29,42)" fg:x="388" fg:w="1"/><text x="31.3149%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="31.2250%" y="597" width="0.1601%" height="15" fill="rgb(234,101,35)" fg:x="390" fg:w="2"/><text x="31.4750%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="31.4652%" y="549" width="0.0801%" height="15" fill="rgb(228,64,37)" fg:x="393" fg:w="1"/><text x="31.7152%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="31.4652%" y="581" width="0.1601%" height="15" fill="rgb(217,214,36)" fg:x="393" fg:w="2"/><text x="31.7152%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="31.4652%" y="565" width="0.1601%" height="15" fill="rgb(243,70,3)" fg:x="393" fg:w="2"/><text x="31.7152%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="31.5452%" y="549" width="0.0801%" height="15" fill="rgb(253,158,52)" fg:x="394" fg:w="1"/><text x="31.7952%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="31.6253%" y="581" width="0.0801%" height="15" fill="rgb(234,111,54)" fg:x="395" fg:w="1"/><text x="31.8753%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="31.7854%" y="565" width="0.3203%" height="15" fill="rgb(217,70,32)" fg:x="397" fg:w="4"/><text x="32.0354%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="31.7854%" y="549" width="0.3203%" height="15" fill="rgb(234,18,33)" fg:x="397" fg:w="4"/><text x="32.0354%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="31.8655%" y="533" width="0.2402%" height="15" fill="rgb(234,12,49)" fg:x="398" fg:w="3"/><text x="32.1155%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="31.9456%" y="517" width="0.1601%" height="15" fill="rgb(236,10,21)" fg:x="399" fg:w="2"/><text x="32.1956%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="31.9456%" y="501" width="0.1601%" height="15" fill="rgb(248,182,45)" fg:x="399" fg:w="2"/><text x="32.1956%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.9456%" y="485" width="0.1601%" height="15" fill="rgb(217,95,36)" fg:x="399" fg:w="2"/><text x="32.1956%" y="495.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="31.9456%" y="469" width="0.1601%" height="15" fill="rgb(212,110,31)" fg:x="399" fg:w="2"/><text x="32.1956%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="32.4259%" y="549" width="0.1601%" height="15" fill="rgb(206,32,53)" fg:x="405" fg:w="2"/><text x="32.6759%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="32.4259%" y="533" width="0.1601%" height="15" fill="rgb(246,141,37)" fg:x="405" fg:w="2"/><text x="32.6759%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.5060%" y="517" width="0.0801%" height="15" fill="rgb(219,16,7)" fg:x="406" fg:w="1"/><text x="32.7560%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.5060%" y="501" width="0.0801%" height="15" fill="rgb(230,205,45)" fg:x="406" fg:w="1"/><text x="32.7560%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.5060%" y="485" width="0.0801%" height="15" fill="rgb(231,43,49)" fg:x="406" fg:w="1"/><text x="32.7560%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.5060%" y="469" width="0.0801%" height="15" fill="rgb(212,106,34)" fg:x="406" fg:w="1"/><text x="32.7560%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.5060%" y="453" width="0.0801%" height="15" fill="rgb(206,83,17)" fg:x="406" fg:w="1"/><text x="32.7560%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="32.1057%" y="565" width="0.5604%" height="15" fill="rgb(244,154,49)" fg:x="401" fg:w="7"/><text x="32.3557%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="32.5861%" y="549" width="0.0801%" height="15" fill="rgb(244,149,49)" fg:x="407" fg:w="1"/><text x="32.8361%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="32.5861%" y="533" width="0.0801%" height="15" fill="rgb(227,134,18)" fg:x="407" fg:w="1"/><text x="32.8361%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.5861%" y="517" width="0.0801%" height="15" fill="rgb(237,116,36)" fg:x="407" fg:w="1"/><text x="32.8361%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.5861%" y="501" width="0.0801%" height="15" fill="rgb(205,129,40)" fg:x="407" fg:w="1"/><text x="32.8361%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.5861%" y="485" width="0.0801%" height="15" fill="rgb(236,178,4)" fg:x="407" fg:w="1"/><text x="32.8361%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="31.7054%" y="581" width="1.1209%" height="15" fill="rgb(251,76,53)" fg:x="396" fg:w="14"/><text x="31.9554%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="32.6661%" y="565" width="0.1601%" height="15" fill="rgb(242,92,40)" fg:x="408" fg:w="2"/><text x="32.9161%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="32.6661%" y="549" width="0.1601%" height="15" fill="rgb(209,45,30)" fg:x="408" fg:w="2"/><text x="32.9161%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="32.6661%" y="533" width="0.1601%" height="15" fill="rgb(218,157,36)" fg:x="408" fg:w="2"/><text x="32.9161%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.52%)</title><rect x="31.3851%" y="597" width="1.5212%" height="15" fill="rgb(222,186,16)" fg:x="392" fg:w="19"/><text x="31.6351%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.8263%" y="581" width="0.0801%" height="15" fill="rgb(254,72,35)" fg:x="410" fg:w="1"/><text x="33.0763%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (28 samples, 2.24%)</title><rect x="30.7446%" y="629" width="2.2418%" height="15" fill="rgb(224,25,35)" fg:x="384" fg:w="28"/><text x="30.9946%" y="639.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.84%)</title><rect x="31.1449%" y="613" width="1.8415%" height="15" fill="rgb(206,135,52)" fg:x="389" fg:w="23"/><text x="31.3949%" y="623.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="32.9063%" y="597" width="0.0801%" height="15" fill="rgb(229,174,47)" fg:x="411" fg:w="1"/><text x="33.1563%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="32.9063%" y="581" width="0.0801%" height="15" fill="rgb(242,184,21)" fg:x="411" fg:w="1"/><text x="33.1563%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="32.9063%" y="565" width="0.0801%" height="15" fill="rgb(213,22,45)" fg:x="411" fg:w="1"/><text x="33.1563%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="33.2266%" y="565" width="0.1601%" height="15" fill="rgb(237,81,54)" fg:x="415" fg:w="2"/><text x="33.4766%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.3867%" y="565" width="0.0801%" height="15" fill="rgb(248,177,18)" fg:x="417" fg:w="1"/><text x="33.6367%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.3867%" y="549" width="0.0801%" height="15" fill="rgb(254,31,16)" fg:x="417" fg:w="1"/><text x="33.6367%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="33.4668%" y="549" width="0.1601%" height="15" fill="rgb(235,20,31)" fg:x="418" fg:w="2"/><text x="33.7168%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.6269%" y="549" width="0.0801%" height="15" fill="rgb(240,56,43)" fg:x="420" fg:w="1"/><text x="33.8769%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.6269%" y="533" width="0.0801%" height="15" fill="rgb(237,197,51)" fg:x="420" fg:w="1"/><text x="33.8769%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.7070%" y="533" width="0.0801%" height="15" fill="rgb(241,162,44)" fg:x="421" fg:w="1"/><text x="33.9570%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7070%" y="517" width="0.0801%" height="15" fill="rgb(224,23,20)" fg:x="421" fg:w="1"/><text x="33.9570%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.8671%" y="485" width="0.0801%" height="15" fill="rgb(250,109,34)" fg:x="423" fg:w="1"/><text x="34.1171%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.9472%" y="485" width="0.0801%" height="15" fill="rgb(214,175,50)" fg:x="424" fg:w="1"/><text x="34.1972%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.9472%" y="469" width="0.0801%" height="15" fill="rgb(213,182,5)" fg:x="424" fg:w="1"/><text x="34.1972%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4 samples, 0.32%)</title><rect x="33.7870%" y="517" width="0.3203%" height="15" fill="rgb(209,199,19)" fg:x="422" fg:w="4"/><text x="34.0370%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="33.7870%" y="501" width="0.3203%" height="15" fill="rgb(236,224,42)" fg:x="422" fg:w="4"/><text x="34.0370%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="34.0272%" y="485" width="0.0801%" height="15" fill="rgb(246,226,29)" fg:x="425" fg:w="1"/><text x="34.2772%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.0272%" y="469" width="0.0801%" height="15" fill="rgb(227,223,11)" fg:x="425" fg:w="1"/><text x="34.2772%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="33.2266%" y="597" width="0.9608%" height="15" fill="rgb(219,7,51)" fg:x="415" fg:w="12"/><text x="33.4766%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 0.96%)</title><rect x="33.2266%" y="581" width="0.9608%" height="15" fill="rgb(245,167,10)" fg:x="415" fg:w="12"/><text x="33.4766%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="33.4668%" y="565" width="0.7206%" height="15" fill="rgb(237,224,16)" fg:x="418" fg:w="9"/><text x="33.7168%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="33.7070%" y="549" width="0.4804%" height="15" fill="rgb(226,132,13)" fg:x="421" fg:w="6"/><text x="33.9570%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="33.7870%" y="533" width="0.4003%" height="15" fill="rgb(214,140,3)" fg:x="422" fg:w="5"/><text x="34.0370%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="34.1073%" y="517" width="0.0801%" height="15" fill="rgb(221,177,4)" fg:x="426" fg:w="1"/><text x="34.3573%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1073%" y="501" width="0.0801%" height="15" fill="rgb(238,139,3)" fg:x="426" fg:w="1"/><text x="34.3573%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="34.1873%" y="597" width="0.1601%" height="15" fill="rgb(216,17,39)" fg:x="427" fg:w="2"/><text x="34.4373%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.3475%" y="597" width="0.0801%" height="15" fill="rgb(238,120,9)" fg:x="429" fg:w="1"/><text x="34.5975%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="34.4275%" y="597" width="0.0801%" height="15" fill="rgb(244,92,53)" fg:x="430" fg:w="1"/><text x="34.6775%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="34.4275%" y="581" width="0.0801%" height="15" fill="rgb(224,148,33)" fg:x="430" fg:w="1"/><text x="34.6775%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="34.4275%" y="565" width="0.0801%" height="15" fill="rgb(243,6,36)" fg:x="430" fg:w="1"/><text x="34.6775%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="34.4275%" y="549" width="0.0801%" height="15" fill="rgb(230,102,11)" fg:x="430" fg:w="1"/><text x="34.6775%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.4275%" y="533" width="0.0801%" height="15" fill="rgb(234,148,36)" fg:x="430" fg:w="1"/><text x="34.6775%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.16%)</title><rect x="34.6677%" y="533" width="0.1601%" height="15" fill="rgb(251,153,25)" fg:x="433" fg:w="2"/><text x="34.9177%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="34.7478%" y="517" width="0.0801%" height="15" fill="rgb(215,129,8)" fg:x="434" fg:w="1"/><text x="34.9978%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="34.7478%" y="501" width="0.0801%" height="15" fill="rgb(224,128,35)" fg:x="434" fg:w="1"/><text x="34.9978%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (24 samples, 1.92%)</title><rect x="33.0665%" y="613" width="1.9215%" height="15" fill="rgb(237,56,52)" fg:x="413" fg:w="24"/><text x="33.3165%" y="623.50">&lt;..</text></g><g><title>treediff::diff::diff (6 samples, 0.48%)</title><rect x="34.5076%" y="597" width="0.4804%" height="15" fill="rgb(234,213,19)" fg:x="431" fg:w="6"/><text x="34.7576%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.48%)</title><rect x="34.5076%" y="581" width="0.4804%" height="15" fill="rgb(252,82,23)" fg:x="431" fg:w="6"/><text x="34.7576%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.40%)</title><rect x="34.5877%" y="565" width="0.4003%" height="15" fill="rgb(254,201,21)" fg:x="432" fg:w="5"/><text x="34.8377%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="34.6677%" y="549" width="0.3203%" height="15" fill="rgb(250,186,11)" fg:x="433" fg:w="4"/><text x="34.9177%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="34.8279%" y="533" width="0.1601%" height="15" fill="rgb(211,174,5)" fg:x="435" fg:w="2"/><text x="35.0779%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="34.8279%" y="517" width="0.1601%" height="15" fill="rgb(214,121,10)" fg:x="435" fg:w="2"/><text x="35.0779%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.2282%" y="581" width="0.0801%" height="15" fill="rgb(241,66,2)" fg:x="440" fg:w="1"/><text x="35.4782%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="35.3082%" y="581" width="0.1601%" height="15" fill="rgb(220,167,19)" fg:x="441" fg:w="2"/><text x="35.5582%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="35.4684%" y="581" width="0.0801%" height="15" fill="rgb(231,54,50)" fg:x="443" fg:w="1"/><text x="35.7184%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="35.4684%" y="565" width="0.0801%" height="15" fill="rgb(239,217,53)" fg:x="443" fg:w="1"/><text x="35.7184%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="35.5484%" y="581" width="0.0801%" height="15" fill="rgb(248,8,0)" fg:x="444" fg:w="1"/><text x="35.7984%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="35.5484%" y="565" width="0.0801%" height="15" fill="rgb(229,118,37)" fg:x="444" fg:w="1"/><text x="35.7984%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.5484%" y="549" width="0.0801%" height="15" fill="rgb(253,223,43)" fg:x="444" fg:w="1"/><text x="35.7984%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.9488%" y="517" width="0.0801%" height="15" fill="rgb(211,77,36)" fg:x="449" fg:w="1"/><text x="36.1988%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="35.8687%" y="533" width="0.2402%" height="15" fill="rgb(219,3,53)" fg:x="448" fg:w="3"/><text x="36.1187%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="36.0288%" y="517" width="0.0801%" height="15" fill="rgb(244,45,42)" fg:x="450" fg:w="1"/><text x="36.2788%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="36.0288%" y="501" width="0.0801%" height="15" fill="rgb(225,95,27)" fg:x="450" fg:w="1"/><text x="36.2788%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="36.1089%" y="469" width="0.0801%" height="15" fill="rgb(207,74,8)" fg:x="451" fg:w="1"/><text x="36.3589%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="36.1089%" y="533" width="0.1601%" height="15" fill="rgb(243,63,36)" fg:x="451" fg:w="2"/><text x="36.3589%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="36.1089%" y="517" width="0.1601%" height="15" fill="rgb(211,180,12)" fg:x="451" fg:w="2"/><text x="36.3589%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="36.1089%" y="501" width="0.1601%" height="15" fill="rgb(254,166,49)" fg:x="451" fg:w="2"/><text x="36.3589%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="36.1089%" y="485" width="0.1601%" height="15" fill="rgb(205,19,0)" fg:x="451" fg:w="2"/><text x="36.3589%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.1890%" y="469" width="0.0801%" height="15" fill="rgb(224,172,32)" fg:x="452" fg:w="1"/><text x="36.4390%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (16 samples, 1.28%)</title><rect x="35.7086%" y="565" width="1.2810%" height="15" fill="rgb(254,136,30)" fg:x="446" fg:w="16"/><text x="35.9586%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (16 samples, 1.28%)</title><rect x="35.7086%" y="549" width="1.2810%" height="15" fill="rgb(246,19,35)" fg:x="446" fg:w="16"/><text x="35.9586%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.72%)</title><rect x="36.2690%" y="533" width="0.7206%" height="15" fill="rgb(219,24,36)" fg:x="453" fg:w="9"/><text x="36.5190%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="36.5893%" y="517" width="0.4003%" height="15" fill="rgb(251,55,1)" fg:x="457" fg:w="5"/><text x="36.8393%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="36.6693%" y="501" width="0.3203%" height="15" fill="rgb(218,117,39)" fg:x="458" fg:w="4"/><text x="36.9193%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="36.8295%" y="485" width="0.1601%" height="15" fill="rgb(248,169,11)" fg:x="460" fg:w="2"/><text x="37.0795%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="36.8295%" y="469" width="0.1601%" height="15" fill="rgb(244,40,44)" fg:x="460" fg:w="2"/><text x="37.0795%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="36.9896%" y="565" width="0.2402%" height="15" fill="rgb(234,62,37)" fg:x="462" fg:w="3"/><text x="37.2396%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (29 samples, 2.32%)</title><rect x="34.9880%" y="613" width="2.3219%" height="15" fill="rgb(207,117,42)" fg:x="437" fg:w="29"/><text x="35.2380%" y="623.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (29 samples, 2.32%)</title><rect x="34.9880%" y="597" width="2.3219%" height="15" fill="rgb(213,43,2)" fg:x="437" fg:w="29"/><text x="35.2380%" y="607.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (21 samples, 1.68%)</title><rect x="35.6285%" y="581" width="1.6813%" height="15" fill="rgb(244,202,51)" fg:x="445" fg:w="21"/><text x="35.8785%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="37.2298%" y="565" width="0.0801%" height="15" fill="rgb(253,174,46)" fg:x="465" fg:w="1"/><text x="37.4798%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="37.6301%" y="469" width="0.1601%" height="15" fill="rgb(251,23,1)" fg:x="470" fg:w="2"/><text x="37.8801%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="37.6301%" y="453" width="0.1601%" height="15" fill="rgb(253,26,1)" fg:x="470" fg:w="2"/><text x="37.8801%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="37.7102%" y="437" width="0.0801%" height="15" fill="rgb(216,89,31)" fg:x="471" fg:w="1"/><text x="37.9602%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="37.7102%" y="421" width="0.0801%" height="15" fill="rgb(209,109,5)" fg:x="471" fg:w="1"/><text x="37.9602%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="37.7102%" y="405" width="0.0801%" height="15" fill="rgb(229,63,13)" fg:x="471" fg:w="1"/><text x="37.9602%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="37.7102%" y="389" width="0.0801%" height="15" fill="rgb(238,137,54)" fg:x="471" fg:w="1"/><text x="37.9602%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="37.8703%" y="421" width="0.1601%" height="15" fill="rgb(228,1,9)" fg:x="473" fg:w="2"/><text x="38.1203%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.9504%" y="405" width="0.0801%" height="15" fill="rgb(249,120,48)" fg:x="474" fg:w="1"/><text x="38.2004%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="37.8703%" y="453" width="0.3203%" height="15" fill="rgb(209,72,36)" fg:x="473" fg:w="4"/><text x="38.1203%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="37.8703%" y="437" width="0.3203%" height="15" fill="rgb(247,98,49)" fg:x="473" fg:w="4"/><text x="38.1203%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="38.0304%" y="421" width="0.1601%" height="15" fill="rgb(233,75,36)" fg:x="475" fg:w="2"/><text x="38.2804%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.1105%" y="405" width="0.0801%" height="15" fill="rgb(225,14,24)" fg:x="476" fg:w="1"/><text x="38.3605%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="38.1906%" y="453" width="0.1601%" height="15" fill="rgb(237,193,20)" fg:x="477" fg:w="2"/><text x="38.4406%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.1906%" y="437" width="0.1601%" height="15" fill="rgb(239,122,19)" fg:x="477" fg:w="2"/><text x="38.4406%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.88%)</title><rect x="37.5500%" y="485" width="0.8807%" height="15" fill="rgb(231,220,10)" fg:x="469" fg:w="11"/><text x="37.8000%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="37.7902%" y="469" width="0.6405%" height="15" fill="rgb(220,66,15)" fg:x="472" fg:w="8"/><text x="38.0402%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.3507%" y="453" width="0.0801%" height="15" fill="rgb(215,171,52)" fg:x="479" fg:w="1"/><text x="38.6007%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="38.4307%" y="469" width="0.0801%" height="15" fill="rgb(241,169,50)" fg:x="480" fg:w="1"/><text x="38.6807%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.12%)</title><rect x="37.5500%" y="517" width="1.1209%" height="15" fill="rgb(236,189,0)" fg:x="469" fg:w="14"/><text x="37.8000%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.12%)</title><rect x="37.5500%" y="501" width="1.1209%" height="15" fill="rgb(217,147,20)" fg:x="469" fg:w="14"/><text x="37.8000%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="38.4307%" y="485" width="0.2402%" height="15" fill="rgb(206,188,39)" fg:x="480" fg:w="3"/><text x="38.6807%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.5108%" y="469" width="0.1601%" height="15" fill="rgb(227,118,25)" fg:x="481" fg:w="2"/><text x="38.7608%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="38.6709%" y="517" width="0.1601%" height="15" fill="rgb(248,171,40)" fg:x="483" fg:w="2"/><text x="38.9209%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.6709%" y="501" width="0.1601%" height="15" fill="rgb(251,90,54)" fg:x="483" fg:w="2"/><text x="38.9209%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 1.52%)</title><rect x="37.3899%" y="549" width="1.5212%" height="15" fill="rgb(234,11,46)" fg:x="467" fg:w="19"/><text x="37.6399%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 1.52%)</title><rect x="37.3899%" y="533" width="1.5212%" height="15" fill="rgb(229,134,13)" fg:x="467" fg:w="19"/><text x="37.6399%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.8311%" y="517" width="0.0801%" height="15" fill="rgb(223,129,3)" fg:x="485" fg:w="1"/><text x="39.0811%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.8311%" y="501" width="0.0801%" height="15" fill="rgb(221,124,13)" fg:x="485" fg:w="1"/><text x="39.0811%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.8311%" y="485" width="0.0801%" height="15" fill="rgb(234,3,18)" fg:x="485" fg:w="1"/><text x="39.0811%" y="495.50"></text></g><g><title>engine::session::state::State::flush_entities (117 samples, 9.37%)</title><rect x="29.6237%" y="693" width="9.3675%" height="15" fill="rgb(249,199,20)" fg:x="370" fg:w="117"/><text x="29.8737%" y="703.50">engine::sessi..</text></g><g><title>core::iter::adapters::try_process (114 samples, 9.13%)</title><rect x="29.8639%" y="677" width="9.1273%" height="15" fill="rgb(224,134,6)" fg:x="373" fg:w="114"/><text x="30.1139%" y="687.50">core::iter::a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (114 samples, 9.13%)</title><rect x="29.8639%" y="661" width="9.1273%" height="15" fill="rgb(254,83,26)" fg:x="373" fg:w="114"/><text x="30.1139%" y="671.50">&lt;alloc::vec::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (113 samples, 9.05%)</title><rect x="29.9440%" y="645" width="9.0472%" height="15" fill="rgb(217,88,9)" fg:x="374" fg:w="113"/><text x="30.1940%" y="655.50">engine::sessi..</text></g><g><title>kernel::model::any_entity_changes (75 samples, 6.00%)</title><rect x="32.9864%" y="629" width="6.0048%" height="15" fill="rgb(225,73,2)" fg:x="412" fg:w="75"/><text x="33.2364%" y="639.50">kernel::..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (21 samples, 1.68%)</title><rect x="37.3098%" y="613" width="1.6813%" height="15" fill="rgb(226,44,39)" fg:x="466" fg:w="21"/><text x="37.5598%" y="623.50"></text></g><g><title>serde_json::de::from_trait (21 samples, 1.68%)</title><rect x="37.3098%" y="597" width="1.6813%" height="15" fill="rgb(228,53,17)" fg:x="466" fg:w="21"/><text x="37.5598%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21 samples, 1.68%)</title><rect x="37.3098%" y="581" width="1.6813%" height="15" fill="rgb(212,27,27)" fg:x="466" fg:w="21"/><text x="37.5598%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 1.68%)</title><rect x="37.3098%" y="565" width="1.6813%" height="15" fill="rgb(241,50,6)" fg:x="466" fg:w="21"/><text x="37.5598%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="38.9111%" y="549" width="0.0801%" height="15" fill="rgb(225,28,51)" fg:x="486" fg:w="1"/><text x="39.1611%" y="559.50"></text></g><g><title>engine::session::state::State::close (118 samples, 9.45%)</title><rect x="29.6237%" y="709" width="9.4476%" height="15" fill="rgb(215,33,16)" fg:x="370" fg:w="118"/><text x="29.8737%" y="719.50">engine::sessio..</text></g><g><title>engine::session::state::State::flush_futures (1 samples, 0.08%)</title><rect x="38.9912%" y="693" width="0.0801%" height="15" fill="rgb(243,40,39)" fg:x="487" fg:w="1"/><text x="39.2412%" y="703.50"></text></g><g><title>engine::session::Session::close (126 samples, 10.09%)</title><rect x="29.1433%" y="725" width="10.0881%" height="15" fill="rgb(225,11,42)" fg:x="364" fg:w="126"/><text x="29.3933%" y="735.50">engine::session..</text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.16%)</title><rect x="39.0713%" y="709" width="0.1601%" height="15" fill="rgb(241,220,38)" fg:x="488" fg:w="2"/><text x="39.3213%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="39.4716%" y="661" width="0.0801%" height="15" fill="rgb(244,52,35)" fg:x="493" fg:w="1"/><text x="39.7216%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4716%" y="645" width="0.0801%" height="15" fill="rgb(246,42,46)" fg:x="493" fg:w="1"/><text x="39.7216%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (2 samples, 0.16%)</title><rect x="39.4716%" y="693" width="0.1601%" height="15" fill="rgb(205,184,13)" fg:x="493" fg:w="2"/><text x="39.7216%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="39.4716%" y="677" width="0.1601%" height="15" fill="rgb(209,48,36)" fg:x="493" fg:w="2"/><text x="39.7216%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="39.5516%" y="661" width="0.0801%" height="15" fill="rgb(244,34,51)" fg:x="494" fg:w="1"/><text x="39.8016%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="39.5516%" y="645" width="0.0801%" height="15" fill="rgb(221,107,33)" fg:x="494" fg:w="1"/><text x="39.8016%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="39.5516%" y="629" width="0.0801%" height="15" fill="rgb(224,203,12)" fg:x="494" fg:w="1"/><text x="39.8016%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="39.5516%" y="613" width="0.0801%" height="15" fill="rgb(230,215,18)" fg:x="494" fg:w="1"/><text x="39.8016%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="39.5516%" y="597" width="0.0801%" height="15" fill="rgb(206,185,35)" fg:x="494" fg:w="1"/><text x="39.8016%" y="607.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="39.6317%" y="693" width="0.0801%" height="15" fill="rgb(228,140,34)" fg:x="495" fg:w="1"/><text x="39.8817%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="39.6317%" y="677" width="0.0801%" height="15" fill="rgb(208,93,13)" fg:x="495" fg:w="1"/><text x="39.8817%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (1 samples, 0.08%)</title><rect x="39.7118%" y="693" width="0.0801%" height="15" fill="rgb(221,193,39)" fg:x="496" fg:w="1"/><text x="39.9618%" y="703.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="39.8719%" y="581" width="0.0801%" height="15" fill="rgb(241,132,34)" fg:x="498" fg:w="1"/><text x="40.1219%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="39.8719%" y="565" width="0.0801%" height="15" fill="rgb(221,141,10)" fg:x="498" fg:w="1"/><text x="40.1219%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="39.8719%" y="549" width="0.0801%" height="15" fill="rgb(226,90,31)" fg:x="498" fg:w="1"/><text x="40.1219%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="39.8719%" y="533" width="0.0801%" height="15" fill="rgb(243,75,5)" fg:x="498" fg:w="1"/><text x="40.1219%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="39.8719%" y="517" width="0.0801%" height="15" fill="rgb(227,156,21)" fg:x="498" fg:w="1"/><text x="40.1219%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="39.8719%" y="501" width="0.0801%" height="15" fill="rgb(250,195,8)" fg:x="498" fg:w="1"/><text x="40.1219%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="39.8719%" y="485" width="0.0801%" height="15" fill="rgb(220,134,5)" fg:x="498" fg:w="1"/><text x="40.1219%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="39.8719%" y="469" width="0.0801%" height="15" fill="rgb(246,106,34)" fg:x="498" fg:w="1"/><text x="40.1219%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="39.8719%" y="453" width="0.0801%" height="15" fill="rgb(205,1,4)" fg:x="498" fg:w="1"/><text x="40.1219%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="39.8719%" y="437" width="0.0801%" height="15" fill="rgb(224,151,29)" fg:x="498" fg:w="1"/><text x="40.1219%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="39.8719%" y="421" width="0.0801%" height="15" fill="rgb(251,196,0)" fg:x="498" fg:w="1"/><text x="40.1219%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="39.8719%" y="405" width="0.0801%" height="15" fill="rgb(212,127,0)" fg:x="498" fg:w="1"/><text x="40.1219%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.8719%" y="389" width="0.0801%" height="15" fill="rgb(236,71,53)" fg:x="498" fg:w="1"/><text x="40.1219%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="39.8719%" y="373" width="0.0801%" height="15" fill="rgb(227,99,0)" fg:x="498" fg:w="1"/><text x="40.1219%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.8719%" y="357" width="0.0801%" height="15" fill="rgb(239,89,21)" fg:x="498" fg:w="1"/><text x="40.1219%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="39.8719%" y="341" width="0.0801%" height="15" fill="rgb(243,122,19)" fg:x="498" fg:w="1"/><text x="40.1219%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="39.8719%" y="325" width="0.0801%" height="15" fill="rgb(229,192,45)" fg:x="498" fg:w="1"/><text x="40.1219%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="39.8719%" y="309" width="0.0801%" height="15" fill="rgb(235,165,35)" fg:x="498" fg:w="1"/><text x="40.1219%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.8719%" y="293" width="0.0801%" height="15" fill="rgb(253,202,0)" fg:x="498" fg:w="1"/><text x="40.1219%" y="303.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="39.8719%" y="677" width="0.1601%" height="15" fill="rgb(235,51,20)" fg:x="498" fg:w="2"/><text x="40.1219%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="39.8719%" y="661" width="0.1601%" height="15" fill="rgb(218,95,46)" fg:x="498" fg:w="2"/><text x="40.1219%" y="671.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="39.8719%" y="645" width="0.1601%" height="15" fill="rgb(212,81,10)" fg:x="498" fg:w="2"/><text x="40.1219%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="39.8719%" y="629" width="0.1601%" height="15" fill="rgb(240,59,0)" fg:x="498" fg:w="2"/><text x="40.1219%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="39.8719%" y="613" width="0.1601%" height="15" fill="rgb(212,191,42)" fg:x="498" fg:w="2"/><text x="40.1219%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="39.8719%" y="597" width="0.1601%" height="15" fill="rgb(233,140,3)" fg:x="498" fg:w="2"/><text x="40.1219%" y="607.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="39.9520%" y="581" width="0.0801%" height="15" fill="rgb(215,69,23)" fg:x="499" fg:w="1"/><text x="40.2020%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="39.9520%" y="565" width="0.0801%" height="15" fill="rgb(240,202,20)" fg:x="499" fg:w="1"/><text x="40.2020%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="39.9520%" y="549" width="0.0801%" height="15" fill="rgb(209,146,50)" fg:x="499" fg:w="1"/><text x="40.2020%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="39.9520%" y="533" width="0.0801%" height="15" fill="rgb(253,102,54)" fg:x="499" fg:w="1"/><text x="40.2020%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="39.9520%" y="517" width="0.0801%" height="15" fill="rgb(250,173,47)" fg:x="499" fg:w="1"/><text x="40.2020%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="39.9520%" y="501" width="0.0801%" height="15" fill="rgb(232,142,7)" fg:x="499" fg:w="1"/><text x="40.2020%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="39.9520%" y="485" width="0.0801%" height="15" fill="rgb(230,157,47)" fg:x="499" fg:w="1"/><text x="40.2020%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="39.9520%" y="469" width="0.0801%" height="15" fill="rgb(214,177,35)" fg:x="499" fg:w="1"/><text x="40.2020%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="39.9520%" y="453" width="0.0801%" height="15" fill="rgb(234,119,46)" fg:x="499" fg:w="1"/><text x="40.2020%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Perform&gt; (1 samples, 0.08%)</title><rect x="40.0320%" y="677" width="0.0801%" height="15" fill="rgb(241,180,50)" fg:x="500" fg:w="1"/><text x="40.2820%" y="687.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="40.1121%" y="661" width="0.2402%" height="15" fill="rgb(221,54,25)" fg:x="501" fg:w="3"/><text x="40.3621%" y="671.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="40.1121%" y="645" width="0.2402%" height="15" fill="rgb(209,157,44)" fg:x="501" fg:w="3"/><text x="40.3621%" y="655.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (3 samples, 0.24%)</title><rect x="40.1121%" y="629" width="0.2402%" height="15" fill="rgb(246,115,41)" fg:x="501" fg:w="3"/><text x="40.3621%" y="639.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="40.1922%" y="613" width="0.1601%" height="15" fill="rgb(229,86,1)" fg:x="502" fg:w="2"/><text x="40.4422%" y="623.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="40.2722%" y="597" width="0.0801%" height="15" fill="rgb(240,108,53)" fg:x="503" fg:w="1"/><text x="40.5222%" y="607.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="40.2722%" y="581" width="0.0801%" height="15" fill="rgb(227,134,2)" fg:x="503" fg:w="1"/><text x="40.5222%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="40.5124%" y="549" width="0.0801%" height="15" fill="rgb(213,129,25)" fg:x="506" fg:w="1"/><text x="40.7624%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.5124%" y="533" width="0.0801%" height="15" fill="rgb(226,35,21)" fg:x="506" fg:w="1"/><text x="40.7624%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="40.5124%" y="517" width="0.0801%" height="15" fill="rgb(208,129,26)" fg:x="506" fg:w="1"/><text x="40.7624%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="40.6725%" y="485" width="0.2402%" height="15" fill="rgb(224,83,6)" fg:x="508" fg:w="3"/><text x="40.9225%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="40.6725%" y="469" width="0.2402%" height="15" fill="rgb(227,52,39)" fg:x="508" fg:w="3"/><text x="40.9225%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="40.8327%" y="453" width="0.0801%" height="15" fill="rgb(241,30,17)" fg:x="510" fg:w="1"/><text x="41.0827%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="40.8327%" y="437" width="0.0801%" height="15" fill="rgb(246,186,42)" fg:x="510" fg:w="1"/><text x="41.0827%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="40.9127%" y="469" width="0.0801%" height="15" fill="rgb(221,169,15)" fg:x="511" fg:w="1"/><text x="41.1627%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="40.9127%" y="485" width="0.1601%" height="15" fill="rgb(235,108,21)" fg:x="511" fg:w="2"/><text x="41.1627%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="40.9928%" y="469" width="0.0801%" height="15" fill="rgb(219,148,30)" fg:x="512" fg:w="1"/><text x="41.2428%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="40.9928%" y="453" width="0.0801%" height="15" fill="rgb(220,109,5)" fg:x="512" fg:w="1"/><text x="41.2428%" y="463.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="41.0729%" y="485" width="0.1601%" height="15" fill="rgb(213,203,48)" fg:x="513" fg:w="2"/><text x="41.3229%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.1529%" y="469" width="0.0801%" height="15" fill="rgb(244,71,33)" fg:x="514" fg:w="1"/><text x="41.4029%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.2330%" y="405" width="0.0801%" height="15" fill="rgb(209,23,2)" fg:x="515" fg:w="1"/><text x="41.4830%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="41.2330%" y="389" width="0.0801%" height="15" fill="rgb(219,97,7)" fg:x="515" fg:w="1"/><text x="41.4830%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="41.3131%" y="357" width="0.1601%" height="15" fill="rgb(216,161,23)" fg:x="516" fg:w="2"/><text x="41.5631%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="41.3131%" y="341" width="0.1601%" height="15" fill="rgb(207,45,42)" fg:x="516" fg:w="2"/><text x="41.5631%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="41.3931%" y="325" width="0.0801%" height="15" fill="rgb(241,61,4)" fg:x="517" fg:w="1"/><text x="41.6431%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="41.3931%" y="309" width="0.0801%" height="15" fill="rgb(236,170,1)" fg:x="517" fg:w="1"/><text x="41.6431%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="41.3131%" y="389" width="0.2402%" height="15" fill="rgb(239,72,5)" fg:x="516" fg:w="3"/><text x="41.5631%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="41.3131%" y="373" width="0.2402%" height="15" fill="rgb(214,13,50)" fg:x="516" fg:w="3"/><text x="41.5631%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="41.4732%" y="357" width="0.0801%" height="15" fill="rgb(224,88,9)" fg:x="518" fg:w="1"/><text x="41.7232%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="41.5532%" y="389" width="0.0801%" height="15" fill="rgb(238,192,34)" fg:x="519" fg:w="1"/><text x="41.8032%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.5532%" y="373" width="0.0801%" height="15" fill="rgb(217,203,50)" fg:x="519" fg:w="1"/><text x="41.8032%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="41.5532%" y="357" width="0.0801%" height="15" fill="rgb(241,123,32)" fg:x="519" fg:w="1"/><text x="41.8032%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="41.5532%" y="341" width="0.0801%" height="15" fill="rgb(248,151,39)" fg:x="519" fg:w="1"/><text x="41.8032%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="41.5532%" y="325" width="0.0801%" height="15" fill="rgb(208,89,6)" fg:x="519" fg:w="1"/><text x="41.8032%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="41.5532%" y="309" width="0.0801%" height="15" fill="rgb(254,43,26)" fg:x="519" fg:w="1"/><text x="41.8032%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.5532%" y="293" width="0.0801%" height="15" fill="rgb(216,158,13)" fg:x="519" fg:w="1"/><text x="41.8032%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="41.7134%" y="357" width="0.0801%" height="15" fill="rgb(212,47,37)" fg:x="521" fg:w="1"/><text x="41.9634%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="41.7934%" y="341" width="0.0801%" height="15" fill="rgb(254,16,10)" fg:x="522" fg:w="1"/><text x="42.0434%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (9 samples, 0.72%)</title><rect x="41.2330%" y="485" width="0.7206%" height="15" fill="rgb(223,228,16)" fg:x="515" fg:w="9"/><text x="41.4830%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (9 samples, 0.72%)</title><rect x="41.2330%" y="469" width="0.7206%" height="15" fill="rgb(249,108,50)" fg:x="515" fg:w="9"/><text x="41.4830%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.72%)</title><rect x="41.2330%" y="453" width="0.7206%" height="15" fill="rgb(208,220,5)" fg:x="515" fg:w="9"/><text x="41.4830%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (9 samples, 0.72%)</title><rect x="41.2330%" y="437" width="0.7206%" height="15" fill="rgb(217,89,48)" fg:x="515" fg:w="9"/><text x="41.4830%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.72%)</title><rect x="41.2330%" y="421" width="0.7206%" height="15" fill="rgb(212,113,41)" fg:x="515" fg:w="9"/><text x="41.4830%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (8 samples, 0.64%)</title><rect x="41.3131%" y="405" width="0.6405%" height="15" fill="rgb(231,127,5)" fg:x="516" fg:w="8"/><text x="41.5631%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="41.6333%" y="389" width="0.3203%" height="15" fill="rgb(217,141,17)" fg:x="520" fg:w="4"/><text x="41.8833%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="41.7134%" y="373" width="0.2402%" height="15" fill="rgb(245,125,54)" fg:x="521" fg:w="3"/><text x="41.9634%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="41.7934%" y="357" width="0.1601%" height="15" fill="rgb(248,125,3)" fg:x="522" fg:w="2"/><text x="42.0434%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.8735%" y="341" width="0.0801%" height="15" fill="rgb(236,119,51)" fg:x="523" fg:w="1"/><text x="42.1235%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="41.8735%" y="325" width="0.0801%" height="15" fill="rgb(239,99,8)" fg:x="523" fg:w="1"/><text x="42.1235%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="41.8735%" y="309" width="0.0801%" height="15" fill="rgb(224,228,4)" fg:x="523" fg:w="1"/><text x="42.1235%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="41.8735%" y="293" width="0.0801%" height="15" fill="rgb(220,131,45)" fg:x="523" fg:w="1"/><text x="42.1235%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="41.8735%" y="277" width="0.0801%" height="15" fill="rgb(215,62,5)" fg:x="523" fg:w="1"/><text x="42.1235%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.1137%" y="277" width="0.0801%" height="15" fill="rgb(253,12,24)" fg:x="526" fg:w="1"/><text x="42.3637%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.1137%" y="261" width="0.0801%" height="15" fill="rgb(248,120,50)" fg:x="526" fg:w="1"/><text x="42.3637%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.1137%" y="245" width="0.0801%" height="15" fill="rgb(245,194,10)" fg:x="526" fg:w="1"/><text x="42.3637%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.1137%" y="229" width="0.0801%" height="15" fill="rgb(241,149,38)" fg:x="526" fg:w="1"/><text x="42.3637%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="42.1137%" y="213" width="0.0801%" height="15" fill="rgb(219,215,7)" fg:x="526" fg:w="1"/><text x="42.3637%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="42.1137%" y="341" width="0.1601%" height="15" fill="rgb(208,120,31)" fg:x="526" fg:w="2"/><text x="42.3637%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="42.1137%" y="325" width="0.1601%" height="15" fill="rgb(244,30,8)" fg:x="526" fg:w="2"/><text x="42.3637%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="42.1137%" y="309" width="0.1601%" height="15" fill="rgb(238,35,44)" fg:x="526" fg:w="2"/><text x="42.3637%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="42.1137%" y="293" width="0.1601%" height="15" fill="rgb(243,218,37)" fg:x="526" fg:w="2"/><text x="42.3637%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.1938%" y="277" width="0.0801%" height="15" fill="rgb(218,169,10)" fg:x="527" fg:w="1"/><text x="42.4438%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.1938%" y="261" width="0.0801%" height="15" fill="rgb(221,144,10)" fg:x="527" fg:w="1"/><text x="42.4438%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="42.1938%" y="245" width="0.0801%" height="15" fill="rgb(226,41,38)" fg:x="527" fg:w="1"/><text x="42.4438%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="42.1137%" y="357" width="0.2402%" height="15" fill="rgb(228,3,1)" fg:x="526" fg:w="3"/><text x="42.3637%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.2738%" y="341" width="0.0801%" height="15" fill="rgb(209,129,12)" fg:x="528" fg:w="1"/><text x="42.5238%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="42.2738%" y="325" width="0.0801%" height="15" fill="rgb(213,136,33)" fg:x="528" fg:w="1"/><text x="42.5238%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="42.2738%" y="309" width="0.0801%" height="15" fill="rgb(209,181,29)" fg:x="528" fg:w="1"/><text x="42.5238%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.2738%" y="293" width="0.0801%" height="15" fill="rgb(234,173,18)" fg:x="528" fg:w="1"/><text x="42.5238%" y="303.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (24 samples, 1.92%)</title><rect x="40.5124%" y="581" width="1.9215%" height="15" fill="rgb(227,73,47)" fg:x="506" fg:w="24"/><text x="40.7624%" y="591.50">&lt;..</text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (24 samples, 1.92%)</title><rect x="40.5124%" y="565" width="1.9215%" height="15" fill="rgb(234,9,34)" fg:x="506" fg:w="24"/><text x="40.7624%" y="575.50">&lt;..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (23 samples, 1.84%)</title><rect x="40.5925%" y="549" width="1.8415%" height="15" fill="rgb(235,172,15)" fg:x="507" fg:w="23"/><text x="40.8425%" y="559.50">&lt;..</text></g><g><title>kernel::model::EntityPtrResolver::entity (23 samples, 1.84%)</title><rect x="40.5925%" y="533" width="1.8415%" height="15" fill="rgb(245,61,2)" fg:x="507" fg:w="23"/><text x="40.8425%" y="543.50">k..</text></g><g><title>engine::session::Session::load_entity (23 samples, 1.84%)</title><rect x="40.5925%" y="517" width="1.8415%" height="15" fill="rgb(238,39,47)" fg:x="507" fg:w="23"/><text x="40.8425%" y="527.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (23 samples, 1.84%)</title><rect x="40.5925%" y="501" width="1.8415%" height="15" fill="rgb(234,37,24)" fg:x="507" fg:w="23"/><text x="40.8425%" y="511.50">e..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="41.9536%" y="485" width="0.4804%" height="15" fill="rgb(248,223,24)" fg:x="524" fg:w="6"/><text x="42.2036%" y="495.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="41.9536%" y="469" width="0.4804%" height="15" fill="rgb(223,12,15)" fg:x="524" fg:w="6"/><text x="42.2036%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="41.9536%" y="453" width="0.4804%" height="15" fill="rgb(249,6,3)" fg:x="524" fg:w="6"/><text x="42.2036%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="41.9536%" y="437" width="0.4804%" height="15" fill="rgb(237,105,33)" fg:x="524" fg:w="6"/><text x="42.2036%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="41.9536%" y="421" width="0.4804%" height="15" fill="rgb(252,208,35)" fg:x="524" fg:w="6"/><text x="42.2036%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="42.0336%" y="405" width="0.4003%" height="15" fill="rgb(215,181,35)" fg:x="525" fg:w="5"/><text x="42.2836%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="42.1137%" y="389" width="0.3203%" height="15" fill="rgb(246,212,3)" fg:x="526" fg:w="4"/><text x="42.3637%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="42.1137%" y="373" width="0.3203%" height="15" fill="rgb(247,156,24)" fg:x="526" fg:w="4"/><text x="42.3637%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.3539%" y="357" width="0.0801%" height="15" fill="rgb(248,9,31)" fg:x="529" fg:w="1"/><text x="42.6039%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.3539%" y="341" width="0.0801%" height="15" fill="rgb(234,26,45)" fg:x="529" fg:w="1"/><text x="42.6039%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.3539%" y="325" width="0.0801%" height="15" fill="rgb(249,11,32)" fg:x="529" fg:w="1"/><text x="42.6039%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.6741%" y="485" width="0.0801%" height="15" fill="rgb(249,162,33)" fg:x="533" fg:w="1"/><text x="42.9241%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.8343%" y="309" width="0.0801%" height="15" fill="rgb(232,4,32)" fg:x="535" fg:w="1"/><text x="43.0843%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="42.8343%" y="341" width="0.2402%" height="15" fill="rgb(212,5,45)" fg:x="535" fg:w="3"/><text x="43.0843%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="42.8343%" y="325" width="0.2402%" height="15" fill="rgb(227,95,13)" fg:x="535" fg:w="3"/><text x="43.0843%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="42.9143%" y="309" width="0.1601%" height="15" fill="rgb(223,205,10)" fg:x="536" fg:w="2"/><text x="43.1643%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="42.9143%" y="293" width="0.1601%" height="15" fill="rgb(222,178,8)" fg:x="536" fg:w="2"/><text x="43.1643%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="42.9143%" y="277" width="0.1601%" height="15" fill="rgb(216,13,22)" fg:x="536" fg:w="2"/><text x="43.1643%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="43.0745%" y="325" width="0.1601%" height="15" fill="rgb(240,167,12)" fg:x="538" fg:w="2"/><text x="43.3245%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="43.0745%" y="309" width="0.1601%" height="15" fill="rgb(235,68,35)" fg:x="538" fg:w="2"/><text x="43.3245%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="43.0745%" y="293" width="0.1601%" height="15" fill="rgb(253,40,27)" fg:x="538" fg:w="2"/><text x="43.3245%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="43.0745%" y="277" width="0.1601%" height="15" fill="rgb(214,19,28)" fg:x="538" fg:w="2"/><text x="43.3245%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="43.0745%" y="261" width="0.1601%" height="15" fill="rgb(210,167,45)" fg:x="538" fg:w="2"/><text x="43.3245%" y="271.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.48%)</title><rect x="42.8343%" y="389" width="0.4804%" height="15" fill="rgb(232,97,40)" fg:x="535" fg:w="6"/><text x="43.0843%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (6 samples, 0.48%)</title><rect x="42.8343%" y="373" width="0.4804%" height="15" fill="rgb(250,35,23)" fg:x="535" fg:w="6"/><text x="43.0843%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="42.8343%" y="357" width="0.4804%" height="15" fill="rgb(248,47,53)" fg:x="535" fg:w="6"/><text x="43.0843%" y="367.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="43.0745%" y="341" width="0.2402%" height="15" fill="rgb(226,58,50)" fg:x="538" fg:w="3"/><text x="43.3245%" y="351.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="43.2346%" y="325" width="0.0801%" height="15" fill="rgb(217,105,26)" fg:x="540" fg:w="1"/><text x="43.4846%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="43.2346%" y="309" width="0.0801%" height="15" fill="rgb(208,64,1)" fg:x="540" fg:w="1"/><text x="43.4846%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="43.2346%" y="293" width="0.0801%" height="15" fill="rgb(214,80,1)" fg:x="540" fg:w="1"/><text x="43.4846%" y="303.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (7 samples, 0.56%)</title><rect x="42.8343%" y="405" width="0.5604%" height="15" fill="rgb(206,175,26)" fg:x="535" fg:w="7"/><text x="43.0843%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="43.3147%" y="389" width="0.0801%" height="15" fill="rgb(235,156,37)" fg:x="541" fg:w="1"/><text x="43.5647%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="43.3147%" y="373" width="0.0801%" height="15" fill="rgb(213,100,9)" fg:x="541" fg:w="1"/><text x="43.5647%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.3147%" y="357" width="0.0801%" height="15" fill="rgb(241,15,13)" fg:x="541" fg:w="1"/><text x="43.5647%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.4748%" y="357" width="0.0801%" height="15" fill="rgb(205,97,43)" fg:x="543" fg:w="1"/><text x="43.7248%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.4748%" y="341" width="0.0801%" height="15" fill="rgb(216,106,32)" fg:x="543" fg:w="1"/><text x="43.7248%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.4748%" y="325" width="0.0801%" height="15" fill="rgb(226,200,8)" fg:x="543" fg:w="1"/><text x="43.7248%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.4748%" y="309" width="0.0801%" height="15" fill="rgb(244,54,29)" fg:x="543" fg:w="1"/><text x="43.7248%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="43.4748%" y="293" width="0.0801%" height="15" fill="rgb(252,169,12)" fg:x="543" fg:w="1"/><text x="43.7248%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="43.4748%" y="277" width="0.0801%" height="15" fill="rgb(231,199,11)" fg:x="543" fg:w="1"/><text x="43.7248%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="43.4748%" y="261" width="0.0801%" height="15" fill="rgb(233,191,18)" fg:x="543" fg:w="1"/><text x="43.7248%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="43.4748%" y="245" width="0.0801%" height="15" fill="rgb(215,83,47)" fg:x="543" fg:w="1"/><text x="43.7248%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.4748%" y="229" width="0.0801%" height="15" fill="rgb(251,67,19)" fg:x="543" fg:w="1"/><text x="43.7248%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="43.4748%" y="213" width="0.0801%" height="15" fill="rgb(240,7,20)" fg:x="543" fg:w="1"/><text x="43.7248%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="43.4748%" y="197" width="0.0801%" height="15" fill="rgb(210,150,26)" fg:x="543" fg:w="1"/><text x="43.7248%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="43.4748%" y="181" width="0.0801%" height="15" fill="rgb(228,75,42)" fg:x="543" fg:w="1"/><text x="43.7248%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="43.4748%" y="165" width="0.0801%" height="15" fill="rgb(237,134,48)" fg:x="543" fg:w="1"/><text x="43.7248%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="43.4748%" y="149" width="0.0801%" height="15" fill="rgb(205,80,50)" fg:x="543" fg:w="1"/><text x="43.7248%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.4748%" y="133" width="0.0801%" height="15" fill="rgb(217,74,48)" fg:x="543" fg:w="1"/><text x="43.7248%" y="143.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="43.4748%" y="373" width="0.1601%" height="15" fill="rgb(205,82,50)" fg:x="543" fg:w="2"/><text x="43.7248%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="43.5548%" y="357" width="0.0801%" height="15" fill="rgb(228,1,33)" fg:x="544" fg:w="1"/><text x="43.8048%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="43.5548%" y="341" width="0.0801%" height="15" fill="rgb(214,50,23)" fg:x="544" fg:w="1"/><text x="43.8048%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="43.6349%" y="341" width="0.0801%" height="15" fill="rgb(210,62,9)" fg:x="545" fg:w="1"/><text x="43.8849%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="43.7150%" y="277" width="0.0801%" height="15" fill="rgb(210,104,37)" fg:x="546" fg:w="1"/><text x="43.9650%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="43.6349%" y="373" width="0.2402%" height="15" fill="rgb(232,104,43)" fg:x="545" fg:w="3"/><text x="43.8849%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="43.6349%" y="357" width="0.2402%" height="15" fill="rgb(244,52,6)" fg:x="545" fg:w="3"/><text x="43.8849%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="43.7150%" y="341" width="0.1601%" height="15" fill="rgb(211,174,52)" fg:x="546" fg:w="2"/><text x="43.9650%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.7150%" y="325" width="0.1601%" height="15" fill="rgb(229,48,4)" fg:x="546" fg:w="2"/><text x="43.9650%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="43.7150%" y="309" width="0.1601%" height="15" fill="rgb(205,155,16)" fg:x="546" fg:w="2"/><text x="43.9650%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="43.7150%" y="293" width="0.1601%" height="15" fill="rgb(211,141,53)" fg:x="546" fg:w="2"/><text x="43.9650%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="43.7950%" y="277" width="0.0801%" height="15" fill="rgb(240,148,11)" fg:x="547" fg:w="1"/><text x="44.0450%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="43.7950%" y="261" width="0.0801%" height="15" fill="rgb(214,45,23)" fg:x="547" fg:w="1"/><text x="44.0450%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="43.7950%" y="245" width="0.0801%" height="15" fill="rgb(248,74,26)" fg:x="547" fg:w="1"/><text x="44.0450%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.1153%" y="293" width="0.0801%" height="15" fill="rgb(218,121,16)" fg:x="551" fg:w="1"/><text x="44.3653%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.1153%" y="277" width="0.0801%" height="15" fill="rgb(218,10,47)" fg:x="551" fg:w="1"/><text x="44.3653%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="44.1153%" y="261" width="0.0801%" height="15" fill="rgb(227,99,14)" fg:x="551" fg:w="1"/><text x="44.3653%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="44.1153%" y="245" width="0.0801%" height="15" fill="rgb(229,83,46)" fg:x="551" fg:w="1"/><text x="44.3653%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="44.1153%" y="229" width="0.0801%" height="15" fill="rgb(228,25,1)" fg:x="551" fg:w="1"/><text x="44.3653%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.1153%" y="213" width="0.0801%" height="15" fill="rgb(252,190,15)" fg:x="551" fg:w="1"/><text x="44.3653%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="44.1153%" y="197" width="0.0801%" height="15" fill="rgb(213,103,51)" fg:x="551" fg:w="1"/><text x="44.3653%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="44.1153%" y="181" width="0.0801%" height="15" fill="rgb(220,38,44)" fg:x="551" fg:w="1"/><text x="44.3653%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="44.1153%" y="165" width="0.0801%" height="15" fill="rgb(210,45,26)" fg:x="551" fg:w="1"/><text x="44.3653%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="44.1153%" y="149" width="0.0801%" height="15" fill="rgb(205,95,48)" fg:x="551" fg:w="1"/><text x="44.3653%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="44.1153%" y="133" width="0.0801%" height="15" fill="rgb(225,179,37)" fg:x="551" fg:w="1"/><text x="44.3653%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.1153%" y="117" width="0.0801%" height="15" fill="rgb(230,209,3)" fg:x="551" fg:w="1"/><text x="44.3653%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="43.9552%" y="341" width="0.3203%" height="15" fill="rgb(248,12,46)" fg:x="549" fg:w="4"/><text x="44.2052%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="43.9552%" y="325" width="0.3203%" height="15" fill="rgb(234,18,0)" fg:x="549" fg:w="4"/><text x="44.2052%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="44.0352%" y="309" width="0.2402%" height="15" fill="rgb(238,197,14)" fg:x="550" fg:w="3"/><text x="44.2852%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.1954%" y="293" width="0.0801%" height="15" fill="rgb(251,162,48)" fg:x="552" fg:w="1"/><text x="44.4454%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.2754%" y="341" width="0.0801%" height="15" fill="rgb(237,73,42)" fg:x="553" fg:w="1"/><text x="44.5254%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="44.4355%" y="309" width="0.0801%" height="15" fill="rgb(211,108,8)" fg:x="555" fg:w="1"/><text x="44.6855%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="44.4355%" y="293" width="0.0801%" height="15" fill="rgb(213,45,22)" fg:x="555" fg:w="1"/><text x="44.6855%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (11 samples, 0.88%)</title><rect x="43.8751%" y="373" width="0.8807%" height="15" fill="rgb(252,154,5)" fg:x="548" fg:w="11"/><text x="44.1251%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (10 samples, 0.80%)</title><rect x="43.9552%" y="357" width="0.8006%" height="15" fill="rgb(221,79,52)" fg:x="549" fg:w="10"/><text x="44.2052%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="44.3555%" y="341" width="0.4003%" height="15" fill="rgb(229,220,36)" fg:x="554" fg:w="5"/><text x="44.6055%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="44.3555%" y="325" width="0.4003%" height="15" fill="rgb(211,17,16)" fg:x="554" fg:w="5"/><text x="44.6055%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="44.5156%" y="309" width="0.2402%" height="15" fill="rgb(222,55,31)" fg:x="556" fg:w="3"/><text x="44.7656%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="44.5156%" y="293" width="0.2402%" height="15" fill="rgb(221,221,31)" fg:x="556" fg:w="3"/><text x="44.7656%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="44.7558%" y="325" width="0.1601%" height="15" fill="rgb(227,168,26)" fg:x="559" fg:w="2"/><text x="45.0058%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="44.7558%" y="309" width="0.1601%" height="15" fill="rgb(224,139,9)" fg:x="559" fg:w="2"/><text x="45.0058%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="44.7558%" y="293" width="0.1601%" height="15" fill="rgb(254,172,0)" fg:x="559" fg:w="2"/><text x="45.0058%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="44.7558%" y="277" width="0.1601%" height="15" fill="rgb(235,203,1)" fg:x="559" fg:w="2"/><text x="45.0058%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="44.7558%" y="261" width="0.1601%" height="15" fill="rgb(216,205,24)" fg:x="559" fg:w="2"/><text x="45.0058%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="44.7558%" y="245" width="0.1601%" height="15" fill="rgb(233,24,6)" fg:x="559" fg:w="2"/><text x="45.0058%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="44.7558%" y="229" width="0.1601%" height="15" fill="rgb(244,110,9)" fg:x="559" fg:w="2"/><text x="45.0058%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="44.7558%" y="213" width="0.1601%" height="15" fill="rgb(239,222,42)" fg:x="559" fg:w="2"/><text x="45.0058%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="44.7558%" y="197" width="0.1601%" height="15" fill="rgb(218,145,13)" fg:x="559" fg:w="2"/><text x="45.0058%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="44.7558%" y="181" width="0.1601%" height="15" fill="rgb(207,69,11)" fg:x="559" fg:w="2"/><text x="45.0058%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="44.7558%" y="165" width="0.1601%" height="15" fill="rgb(220,223,22)" fg:x="559" fg:w="2"/><text x="45.0058%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="44.7558%" y="149" width="0.1601%" height="15" fill="rgb(245,102,5)" fg:x="559" fg:w="2"/><text x="45.0058%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="44.7558%" y="133" width="0.1601%" height="15" fill="rgb(211,148,2)" fg:x="559" fg:w="2"/><text x="45.0058%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="44.7558%" y="117" width="0.1601%" height="15" fill="rgb(241,13,44)" fg:x="559" fg:w="2"/><text x="45.0058%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="44.7558%" y="341" width="0.2402%" height="15" fill="rgb(219,137,21)" fg:x="559" fg:w="3"/><text x="45.0058%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="44.9159%" y="325" width="0.0801%" height="15" fill="rgb(242,206,5)" fg:x="561" fg:w="1"/><text x="45.1659%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="44.9960%" y="341" width="0.0801%" height="15" fill="rgb(217,114,22)" fg:x="562" fg:w="1"/><text x="45.2460%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="45.0761%" y="341" width="0.0801%" height="15" fill="rgb(253,206,42)" fg:x="563" fg:w="1"/><text x="45.3261%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.2362%" y="309" width="0.0801%" height="15" fill="rgb(236,102,18)" fg:x="565" fg:w="1"/><text x="45.4862%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="45.3163%" y="277" width="0.0801%" height="15" fill="rgb(208,59,49)" fg:x="566" fg:w="1"/><text x="45.5663%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="45.3963%" y="277" width="0.0801%" height="15" fill="rgb(215,194,28)" fg:x="567" fg:w="1"/><text x="45.6463%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.3963%" y="261" width="0.0801%" height="15" fill="rgb(243,207,11)" fg:x="567" fg:w="1"/><text x="45.6463%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (10 samples, 0.80%)</title><rect x="44.7558%" y="357" width="0.8006%" height="15" fill="rgb(254,179,35)" fg:x="559" fg:w="10"/><text x="45.0058%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="45.1561%" y="341" width="0.4003%" height="15" fill="rgb(235,97,3)" fg:x="564" fg:w="5"/><text x="45.4061%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="45.1561%" y="325" width="0.4003%" height="15" fill="rgb(215,155,33)" fg:x="564" fg:w="5"/><text x="45.4061%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="45.3163%" y="309" width="0.2402%" height="15" fill="rgb(223,128,12)" fg:x="566" fg:w="3"/><text x="45.5663%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="45.3163%" y="293" width="0.2402%" height="15" fill="rgb(208,157,18)" fg:x="566" fg:w="3"/><text x="45.5663%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="45.4764%" y="277" width="0.0801%" height="15" fill="rgb(249,70,54)" fg:x="568" fg:w="1"/><text x="45.7264%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="45.4764%" y="261" width="0.0801%" height="15" fill="rgb(244,118,24)" fg:x="568" fg:w="1"/><text x="45.7264%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="45.4764%" y="245" width="0.0801%" height="15" fill="rgb(211,54,0)" fg:x="568" fg:w="1"/><text x="45.7264%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.4764%" y="229" width="0.0801%" height="15" fill="rgb(245,137,45)" fg:x="568" fg:w="1"/><text x="45.7264%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (11 samples, 0.88%)</title><rect x="44.7558%" y="373" width="0.8807%" height="15" fill="rgb(232,154,31)" fg:x="559" fg:w="11"/><text x="45.0058%" y="383.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="45.5564%" y="357" width="0.0801%" height="15" fill="rgb(253,6,39)" fg:x="569" fg:w="1"/><text x="45.8064%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="45.5564%" y="341" width="0.0801%" height="15" fill="rgb(234,183,24)" fg:x="569" fg:w="1"/><text x="45.8064%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="45.7166%" y="325" width="0.1601%" height="15" fill="rgb(252,84,40)" fg:x="571" fg:w="2"/><text x="45.9666%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="45.7166%" y="309" width="0.1601%" height="15" fill="rgb(224,65,2)" fg:x="571" fg:w="2"/><text x="45.9666%" y="319.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="45.7166%" y="293" width="0.1601%" height="15" fill="rgb(229,38,24)" fg:x="571" fg:w="2"/><text x="45.9666%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="45.7166%" y="277" width="0.1601%" height="15" fill="rgb(218,131,50)" fg:x="571" fg:w="2"/><text x="45.9666%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="45.7966%" y="261" width="0.0801%" height="15" fill="rgb(233,106,18)" fg:x="572" fg:w="1"/><text x="46.0466%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="45.7966%" y="245" width="0.0801%" height="15" fill="rgb(220,216,11)" fg:x="572" fg:w="1"/><text x="46.0466%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="45.7966%" y="229" width="0.0801%" height="15" fill="rgb(251,100,45)" fg:x="572" fg:w="1"/><text x="46.0466%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="45.7966%" y="213" width="0.0801%" height="15" fill="rgb(235,143,32)" fg:x="572" fg:w="1"/><text x="46.0466%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="45.7966%" y="197" width="0.0801%" height="15" fill="rgb(248,124,34)" fg:x="572" fg:w="1"/><text x="46.0466%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="45.7966%" y="181" width="0.0801%" height="15" fill="rgb(225,221,4)" fg:x="572" fg:w="1"/><text x="46.0466%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="45.7966%" y="165" width="0.0801%" height="15" fill="rgb(242,27,43)" fg:x="572" fg:w="1"/><text x="46.0466%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="45.7966%" y="149" width="0.0801%" height="15" fill="rgb(227,54,8)" fg:x="572" fg:w="1"/><text x="46.0466%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.7966%" y="133" width="0.0801%" height="15" fill="rgb(253,139,49)" fg:x="572" fg:w="1"/><text x="46.0466%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="45.7966%" y="117" width="0.0801%" height="15" fill="rgb(231,26,43)" fg:x="572" fg:w="1"/><text x="46.0466%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.7966%" y="101" width="0.0801%" height="15" fill="rgb(207,121,39)" fg:x="572" fg:w="1"/><text x="46.0466%" y="111.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="45.8767%" y="309" width="0.0801%" height="15" fill="rgb(223,101,35)" fg:x="573" fg:w="1"/><text x="46.1267%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="45.9568%" y="293" width="0.0801%" height="15" fill="rgb(232,87,23)" fg:x="574" fg:w="1"/><text x="46.2068%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="46.0368%" y="229" width="0.0801%" height="15" fill="rgb(225,180,29)" fg:x="575" fg:w="1"/><text x="46.2868%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="46.0368%" y="213" width="0.0801%" height="15" fill="rgb(225,25,17)" fg:x="575" fg:w="1"/><text x="46.2868%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="46.0368%" y="293" width="0.1601%" height="15" fill="rgb(223,8,52)" fg:x="575" fg:w="2"/><text x="46.2868%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="46.0368%" y="277" width="0.1601%" height="15" fill="rgb(246,42,21)" fg:x="575" fg:w="2"/><text x="46.2868%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="46.0368%" y="261" width="0.1601%" height="15" fill="rgb(205,64,43)" fg:x="575" fg:w="2"/><text x="46.2868%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="46.0368%" y="245" width="0.1601%" height="15" fill="rgb(221,160,13)" fg:x="575" fg:w="2"/><text x="46.2868%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="46.1169%" y="229" width="0.0801%" height="15" fill="rgb(239,58,35)" fg:x="576" fg:w="1"/><text x="46.3669%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="46.1169%" y="213" width="0.0801%" height="15" fill="rgb(251,26,40)" fg:x="576" fg:w="1"/><text x="46.3669%" y="223.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="46.1970%" y="277" width="0.0801%" height="15" fill="rgb(247,0,4)" fg:x="577" fg:w="1"/><text x="46.4470%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.3571%" y="245" width="0.0801%" height="15" fill="rgb(218,130,10)" fg:x="579" fg:w="1"/><text x="46.6071%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="46.4371%" y="245" width="0.0801%" height="15" fill="rgb(239,32,7)" fg:x="580" fg:w="1"/><text x="46.6871%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.4371%" y="229" width="0.0801%" height="15" fill="rgb(210,192,24)" fg:x="580" fg:w="1"/><text x="46.6871%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.4371%" y="213" width="0.0801%" height="15" fill="rgb(226,212,17)" fg:x="580" fg:w="1"/><text x="46.6871%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.5973%" y="229" width="0.0801%" height="15" fill="rgb(219,201,28)" fg:x="582" fg:w="1"/><text x="46.8473%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.04%)</title><rect x="46.6773%" y="229" width="1.0408%" height="15" fill="rgb(235,207,41)" fg:x="583" fg:w="13"/><text x="46.9273%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="46.6773%" y="213" width="1.0408%" height="15" fill="rgb(241,95,54)" fg:x="583" fg:w="13"/><text x="46.9273%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.6381%" y="197" width="0.0801%" height="15" fill="rgb(248,12,23)" fg:x="595" fg:w="1"/><text x="47.8881%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="47.7982%" y="213" width="0.0801%" height="15" fill="rgb(228,173,4)" fg:x="597" fg:w="1"/><text x="48.0482%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="47.7982%" y="197" width="0.0801%" height="15" fill="rgb(254,99,5)" fg:x="597" fg:w="1"/><text x="48.0482%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="47.7182%" y="229" width="0.2402%" height="15" fill="rgb(212,184,17)" fg:x="596" fg:w="3"/><text x="47.9682%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="47.8783%" y="213" width="0.0801%" height="15" fill="rgb(252,174,1)" fg:x="598" fg:w="1"/><text x="48.1283%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="48.0384%" y="165" width="0.1601%" height="15" fill="rgb(241,118,51)" fg:x="600" fg:w="2"/><text x="48.2884%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="48.1986%" y="165" width="0.1601%" height="15" fill="rgb(227,94,47)" fg:x="602" fg:w="2"/><text x="48.4486%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.2786%" y="149" width="0.0801%" height="15" fill="rgb(229,104,2)" fg:x="603" fg:w="1"/><text x="48.5286%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.2786%" y="133" width="0.0801%" height="15" fill="rgb(219,28,31)" fg:x="603" fg:w="1"/><text x="48.5286%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.2786%" y="117" width="0.0801%" height="15" fill="rgb(233,109,36)" fg:x="603" fg:w="1"/><text x="48.5286%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (49 samples, 3.92%)</title><rect x="48.3587%" y="165" width="3.9231%" height="15" fill="rgb(246,88,11)" fg:x="604" fg:w="49"/><text x="48.6087%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 3.92%)</title><rect x="48.3587%" y="149" width="3.9231%" height="15" fill="rgb(209,212,17)" fg:x="604" fg:w="49"/><text x="48.6087%" y="159.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (48 samples, 3.84%)</title><rect x="48.4388%" y="133" width="3.8431%" height="15" fill="rgb(243,59,29)" fg:x="605" fg:w="48"/><text x="48.6888%" y="143.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="52.2818%" y="165" width="0.0801%" height="15" fill="rgb(244,205,48)" fg:x="653" fg:w="1"/><text x="52.5318%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="52.3619%" y="165" width="0.0801%" height="15" fill="rgb(227,30,6)" fg:x="654" fg:w="1"/><text x="52.6119%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 4.56%)</title><rect x="47.9584%" y="213" width="4.5637%" height="15" fill="rgb(220,205,48)" fg:x="599" fg:w="57"/><text x="48.2084%" y="223.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (57 samples, 4.56%)</title><rect x="47.9584%" y="197" width="4.5637%" height="15" fill="rgb(250,94,14)" fg:x="599" fg:w="57"/><text x="48.2084%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (57 samples, 4.56%)</title><rect x="47.9584%" y="181" width="4.5637%" height="15" fill="rgb(216,119,42)" fg:x="599" fg:w="57"/><text x="48.2084%" y="191.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="52.4420%" y="165" width="0.0801%" height="15" fill="rgb(232,155,0)" fg:x="655" fg:w="1"/><text x="52.6920%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.4420%" y="149" width="0.0801%" height="15" fill="rgb(212,24,32)" fg:x="655" fg:w="1"/><text x="52.6920%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.4420%" y="133" width="0.0801%" height="15" fill="rgb(216,69,20)" fg:x="655" fg:w="1"/><text x="52.6920%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.4420%" y="117" width="0.0801%" height="15" fill="rgb(229,73,31)" fg:x="655" fg:w="1"/><text x="52.6920%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="52.6021%" y="197" width="0.1601%" height="15" fill="rgb(224,219,20)" fg:x="657" fg:w="2"/><text x="52.8521%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="52.5220%" y="213" width="0.4003%" height="15" fill="rgb(215,146,41)" fg:x="656" fg:w="5"/><text x="52.7720%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="52.7622%" y="197" width="0.1601%" height="15" fill="rgb(244,71,31)" fg:x="659" fg:w="2"/><text x="53.0122%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="52.9223%" y="213" width="0.0801%" height="15" fill="rgb(224,24,11)" fg:x="661" fg:w="1"/><text x="53.1723%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (64 samples, 5.12%)</title><rect x="47.9584%" y="229" width="5.1241%" height="15" fill="rgb(229,76,15)" fg:x="599" fg:w="64"/><text x="48.2084%" y="239.50">regex_..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="53.0024%" y="213" width="0.0801%" height="15" fill="rgb(209,93,2)" fg:x="662" fg:w="1"/><text x="53.2524%" y="223.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="53.0024%" y="197" width="0.0801%" height="15" fill="rgb(216,200,50)" fg:x="662" fg:w="1"/><text x="53.2524%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (83 samples, 6.65%)</title><rect x="46.5172%" y="245" width="6.6453%" height="15" fill="rgb(211,67,34)" fg:x="581" fg:w="83"/><text x="46.7672%" y="255.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="53.0825%" y="229" width="0.0801%" height="15" fill="rgb(225,87,47)" fg:x="663" fg:w="1"/><text x="53.3325%" y="239.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="53.0825%" y="213" width="0.0801%" height="15" fill="rgb(217,185,16)" fg:x="663" fg:w="1"/><text x="53.3325%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="53.1625%" y="197" width="0.0801%" height="15" fill="rgb(205,0,0)" fg:x="664" fg:w="1"/><text x="53.4125%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="53.1625%" y="245" width="0.6405%" height="15" fill="rgb(207,116,45)" fg:x="664" fg:w="8"/><text x="53.4125%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="53.1625%" y="229" width="0.6405%" height="15" fill="rgb(221,156,26)" fg:x="664" fg:w="8"/><text x="53.4125%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="53.1625%" y="213" width="0.6405%" height="15" fill="rgb(213,140,4)" fg:x="664" fg:w="8"/><text x="53.4125%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.56%)</title><rect x="53.2426%" y="197" width="0.5604%" height="15" fill="rgb(231,224,15)" fg:x="665" fg:w="7"/><text x="53.4926%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="53.2426%" y="181" width="0.5604%" height="15" fill="rgb(244,76,20)" fg:x="665" fg:w="7"/><text x="53.4926%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="53.2426%" y="165" width="0.5604%" height="15" fill="rgb(238,117,7)" fg:x="665" fg:w="7"/><text x="53.4926%" y="175.50"></text></g><g><title>__libc_malloc (7 samples, 0.56%)</title><rect x="53.2426%" y="149" width="0.5604%" height="15" fill="rgb(235,1,10)" fg:x="665" fg:w="7"/><text x="53.4926%" y="159.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="53.8030%" y="197" width="0.0801%" height="15" fill="rgb(216,165,6)" fg:x="672" fg:w="1"/><text x="54.0530%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (95 samples, 7.61%)</title><rect x="46.3571%" y="261" width="7.6061%" height="15" fill="rgb(246,91,35)" fg:x="579" fg:w="95"/><text x="46.6071%" y="271.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="53.8030%" y="245" width="0.1601%" height="15" fill="rgb(228,96,24)" fg:x="672" fg:w="2"/><text x="54.0530%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="53.8030%" y="229" width="0.1601%" height="15" fill="rgb(254,217,53)" fg:x="672" fg:w="2"/><text x="54.0530%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="53.8030%" y="213" width="0.1601%" height="15" fill="rgb(209,60,0)" fg:x="672" fg:w="2"/><text x="54.0530%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="53.8831%" y="197" width="0.0801%" height="15" fill="rgb(250,93,26)" fg:x="673" fg:w="1"/><text x="54.1331%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (98 samples, 7.85%)</title><rect x="46.1970%" y="293" width="7.8463%" height="15" fill="rgb(211,9,40)" fg:x="577" fg:w="98"/><text x="46.4470%" y="303.50">&lt;regex::reg..</text></g><g><title>regex::builders::string::RegexBuilder::build (97 samples, 7.77%)</title><rect x="46.2770%" y="277" width="7.7662%" height="15" fill="rgb(242,57,20)" fg:x="578" fg:w="97"/><text x="46.5270%" y="287.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="53.9632%" y="261" width="0.0801%" height="15" fill="rgb(248,85,48)" fg:x="674" fg:w="1"/><text x="54.2132%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.0432%" y="293" width="0.0801%" height="15" fill="rgb(212,117,2)" fg:x="675" fg:w="1"/><text x="54.2932%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.1233%" y="277" width="0.0801%" height="15" fill="rgb(243,19,3)" fg:x="676" fg:w="1"/><text x="54.3733%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="54.1233%" y="293" width="0.2402%" height="15" fill="rgb(232,217,24)" fg:x="676" fg:w="3"/><text x="54.3733%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="54.2034%" y="277" width="0.1601%" height="15" fill="rgb(224,175,40)" fg:x="677" fg:w="2"/><text x="54.4534%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="54.2034%" y="261" width="0.1601%" height="15" fill="rgb(212,162,32)" fg:x="677" fg:w="2"/><text x="54.4534%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="54.2034%" y="245" width="0.1601%" height="15" fill="rgb(215,9,4)" fg:x="677" fg:w="2"/><text x="54.4534%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="54.2034%" y="229" width="0.1601%" height="15" fill="rgb(242,42,7)" fg:x="677" fg:w="2"/><text x="54.4534%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="54.2034%" y="213" width="0.1601%" height="15" fill="rgb(242,184,45)" fg:x="677" fg:w="2"/><text x="54.4534%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.2834%" y="197" width="0.0801%" height="15" fill="rgb(228,111,51)" fg:x="678" fg:w="1"/><text x="54.5334%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (108 samples, 8.65%)</title><rect x="45.9568%" y="309" width="8.6469%" height="15" fill="rgb(236,147,17)" fg:x="574" fg:w="108"/><text x="46.2068%" y="319.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="54.3635%" y="293" width="0.2402%" height="15" fill="rgb(210,75,22)" fg:x="679" fg:w="3"/><text x="54.6135%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="54.3635%" y="277" width="0.2402%" height="15" fill="rgb(217,159,45)" fg:x="679" fg:w="3"/><text x="54.6135%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="54.3635%" y="261" width="0.2402%" height="15" fill="rgb(245,165,53)" fg:x="679" fg:w="3"/><text x="54.6135%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="54.3635%" y="245" width="0.2402%" height="15" fill="rgb(251,190,50)" fg:x="679" fg:w="3"/><text x="54.6135%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="54.3635%" y="229" width="0.2402%" height="15" fill="rgb(208,203,29)" fg:x="679" fg:w="3"/><text x="54.6135%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="54.5236%" y="213" width="0.0801%" height="15" fill="rgb(207,209,35)" fg:x="681" fg:w="1"/><text x="54.7736%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.6837%" y="277" width="0.0801%" height="15" fill="rgb(230,144,49)" fg:x="683" fg:w="1"/><text x="54.9337%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.0040%" y="245" width="0.0801%" height="15" fill="rgb(229,31,6)" fg:x="687" fg:w="1"/><text x="55.2540%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.0040%" y="229" width="0.0801%" height="15" fill="rgb(251,129,24)" fg:x="687" fg:w="1"/><text x="55.2540%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="55.0040%" y="213" width="0.0801%" height="15" fill="rgb(235,105,15)" fg:x="687" fg:w="1"/><text x="55.2540%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.0040%" y="197" width="0.0801%" height="15" fill="rgb(216,52,43)" fg:x="687" fg:w="1"/><text x="55.2540%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.0040%" y="181" width="0.0801%" height="15" fill="rgb(238,144,41)" fg:x="687" fg:w="1"/><text x="55.2540%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.0040%" y="165" width="0.0801%" height="15" fill="rgb(243,63,9)" fg:x="687" fg:w="1"/><text x="55.2540%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.0841%" y="245" width="0.0801%" height="15" fill="rgb(246,208,1)" fg:x="688" fg:w="1"/><text x="55.3341%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.0841%" y="229" width="0.0801%" height="15" fill="rgb(233,182,18)" fg:x="688" fg:w="1"/><text x="55.3341%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.0841%" y="213" width="0.0801%" height="15" fill="rgb(242,224,8)" fg:x="688" fg:w="1"/><text x="55.3341%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="55.1641%" y="245" width="0.0801%" height="15" fill="rgb(243,54,37)" fg:x="689" fg:w="1"/><text x="55.4141%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.1641%" y="229" width="0.0801%" height="15" fill="rgb(233,192,12)" fg:x="689" fg:w="1"/><text x="55.4141%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="55.2442%" y="229" width="0.4804%" height="15" fill="rgb(251,192,53)" fg:x="690" fg:w="6"/><text x="55.4942%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="55.4844%" y="213" width="0.2402%" height="15" fill="rgb(246,141,26)" fg:x="693" fg:w="3"/><text x="55.7344%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="55.7246%" y="229" width="0.0801%" height="15" fill="rgb(239,195,19)" fg:x="696" fg:w="1"/><text x="55.9746%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="55.8847%" y="181" width="0.0801%" height="15" fill="rgb(241,16,39)" fg:x="698" fg:w="1"/><text x="56.1347%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="55.8046%" y="213" width="0.3203%" height="15" fill="rgb(223,13,53)" fg:x="697" fg:w="4"/><text x="56.0546%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="55.8847%" y="197" width="0.2402%" height="15" fill="rgb(214,227,0)" fg:x="698" fg:w="3"/><text x="56.1347%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="55.9648%" y="181" width="0.1601%" height="15" fill="rgb(228,103,26)" fg:x="699" fg:w="2"/><text x="56.2148%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="55.9648%" y="165" width="0.1601%" height="15" fill="rgb(254,177,53)" fg:x="699" fg:w="2"/><text x="56.2148%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="55.9648%" y="149" width="0.1601%" height="15" fill="rgb(208,201,34)" fg:x="699" fg:w="2"/><text x="56.2148%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.9648%" y="133" width="0.1601%" height="15" fill="rgb(212,39,5)" fg:x="699" fg:w="2"/><text x="56.2148%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.9648%" y="117" width="0.1601%" height="15" fill="rgb(246,117,3)" fg:x="699" fg:w="2"/><text x="56.2148%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="55.9648%" y="101" width="0.1601%" height="15" fill="rgb(244,118,39)" fg:x="699" fg:w="2"/><text x="56.2148%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="56.1249%" y="213" width="0.0801%" height="15" fill="rgb(241,64,10)" fg:x="701" fg:w="1"/><text x="56.3749%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (15 samples, 1.20%)</title><rect x="55.2442%" y="245" width="1.2010%" height="15" fill="rgb(229,39,44)" fg:x="690" fg:w="15"/><text x="55.4942%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.64%)</title><rect x="55.8046%" y="229" width="0.6405%" height="15" fill="rgb(230,226,3)" fg:x="697" fg:w="8"/><text x="56.0546%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="56.2050%" y="213" width="0.2402%" height="15" fill="rgb(222,13,42)" fg:x="702" fg:w="3"/><text x="56.4550%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="56.2050%" y="197" width="0.2402%" height="15" fill="rgb(247,180,54)" fg:x="702" fg:w="3"/><text x="56.4550%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="56.6053%" y="197" width="0.0801%" height="15" fill="rgb(205,96,16)" fg:x="707" fg:w="1"/><text x="56.8553%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="56.4452%" y="213" width="0.3203%" height="15" fill="rgb(205,100,21)" fg:x="705" fg:w="4"/><text x="56.6952%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="56.6853%" y="197" width="0.0801%" height="15" fill="rgb(248,51,4)" fg:x="708" fg:w="1"/><text x="56.9353%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.6853%" y="181" width="0.0801%" height="15" fill="rgb(217,197,30)" fg:x="708" fg:w="1"/><text x="56.9353%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.6853%" y="165" width="0.0801%" height="15" fill="rgb(240,179,40)" fg:x="708" fg:w="1"/><text x="56.9353%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.6853%" y="149" width="0.0801%" height="15" fill="rgb(212,185,35)" fg:x="708" fg:w="1"/><text x="56.9353%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="56.4452%" y="245" width="0.4003%" height="15" fill="rgb(251,222,31)" fg:x="705" fg:w="5"/><text x="56.6952%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="56.4452%" y="229" width="0.4003%" height="15" fill="rgb(208,140,36)" fg:x="705" fg:w="5"/><text x="56.6952%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="56.7654%" y="213" width="0.0801%" height="15" fill="rgb(220,148,1)" fg:x="709" fg:w="1"/><text x="57.0154%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.9255%" y="197" width="0.0801%" height="15" fill="rgb(254,4,28)" fg:x="711" fg:w="1"/><text x="57.1755%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.9255%" y="181" width="0.0801%" height="15" fill="rgb(222,185,44)" fg:x="711" fg:w="1"/><text x="57.1755%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.9255%" y="165" width="0.0801%" height="15" fill="rgb(215,74,39)" fg:x="711" fg:w="1"/><text x="57.1755%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (32 samples, 2.56%)</title><rect x="54.6837%" y="293" width="2.5620%" height="15" fill="rgb(247,86,4)" fg:x="683" fg:w="32"/><text x="54.9337%" y="303.50">&lt;r..</text></g><g><title>regex::builders::string::RegexBuilder::build (31 samples, 2.48%)</title><rect x="54.7638%" y="277" width="2.4820%" height="15" fill="rgb(231,105,32)" fg:x="684" fg:w="31"/><text x="55.0138%" y="287.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (30 samples, 2.40%)</title><rect x="54.8439%" y="261" width="2.4019%" height="15" fill="rgb(222,65,35)" fg:x="685" fg:w="30"/><text x="55.0939%" y="271.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="56.8455%" y="245" width="0.4003%" height="15" fill="rgb(218,145,35)" fg:x="710" fg:w="5"/><text x="57.0955%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="56.8455%" y="229" width="0.4003%" height="15" fill="rgb(208,7,15)" fg:x="710" fg:w="5"/><text x="57.0955%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="56.8455%" y="213" width="0.4003%" height="15" fill="rgb(209,83,13)" fg:x="710" fg:w="5"/><text x="57.0955%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="57.0056%" y="197" width="0.2402%" height="15" fill="rgb(218,3,10)" fg:x="712" fg:w="3"/><text x="57.2556%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.2458%" y="245" width="0.0801%" height="15" fill="rgb(211,219,4)" fg:x="715" fg:w="1"/><text x="57.4958%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="57.2458%" y="293" width="0.2402%" height="15" fill="rgb(228,194,12)" fg:x="715" fg:w="3"/><text x="57.4958%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="57.2458%" y="277" width="0.2402%" height="15" fill="rgb(210,175,7)" fg:x="715" fg:w="3"/><text x="57.4958%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="57.2458%" y="261" width="0.2402%" height="15" fill="rgb(243,132,6)" fg:x="715" fg:w="3"/><text x="57.4958%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="57.3259%" y="245" width="0.1601%" height="15" fill="rgb(207,72,18)" fg:x="716" fg:w="2"/><text x="57.5759%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="57.3259%" y="229" width="0.1601%" height="15" fill="rgb(236,1,18)" fg:x="716" fg:w="2"/><text x="57.5759%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="57.3259%" y="213" width="0.1601%" height="15" fill="rgb(227,0,18)" fg:x="716" fg:w="2"/><text x="57.5759%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="57.4860%" y="245" width="0.0801%" height="15" fill="rgb(247,37,5)" fg:x="718" fg:w="1"/><text x="57.7360%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.4860%" y="229" width="0.0801%" height="15" fill="rgb(237,179,24)" fg:x="718" fg:w="1"/><text x="57.7360%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="57.4860%" y="293" width="0.1601%" height="15" fill="rgb(226,53,20)" fg:x="718" fg:w="2"/><text x="57.7360%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="57.4860%" y="277" width="0.1601%" height="15" fill="rgb(247,75,7)" fg:x="718" fg:w="2"/><text x="57.7360%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="57.4860%" y="261" width="0.1601%" height="15" fill="rgb(233,96,12)" fg:x="718" fg:w="2"/><text x="57.7360%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="57.5661%" y="245" width="0.0801%" height="15" fill="rgb(224,125,0)" fg:x="719" fg:w="1"/><text x="57.8161%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.5661%" y="229" width="0.0801%" height="15" fill="rgb(224,92,25)" fg:x="719" fg:w="1"/><text x="57.8161%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.8062%" y="213" width="0.0801%" height="15" fill="rgb(224,42,24)" fg:x="722" fg:w="1"/><text x="58.0562%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="57.8062%" y="197" width="0.0801%" height="15" fill="rgb(234,132,49)" fg:x="722" fg:w="1"/><text x="58.0562%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (43 samples, 3.44%)</title><rect x="54.6037%" y="309" width="3.4428%" height="15" fill="rgb(248,100,35)" fg:x="682" fg:w="43"/><text x="54.8537%" y="319.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="57.6461%" y="293" width="0.4003%" height="15" fill="rgb(239,94,40)" fg:x="720" fg:w="5"/><text x="57.8961%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="57.6461%" y="277" width="0.4003%" height="15" fill="rgb(235,139,28)" fg:x="720" fg:w="5"/><text x="57.8961%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="57.6461%" y="261" width="0.4003%" height="15" fill="rgb(217,144,7)" fg:x="720" fg:w="5"/><text x="57.8961%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="57.7262%" y="245" width="0.3203%" height="15" fill="rgb(227,55,4)" fg:x="721" fg:w="4"/><text x="57.9762%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="57.7262%" y="229" width="0.3203%" height="15" fill="rgb(252,82,54)" fg:x="721" fg:w="4"/><text x="57.9762%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="57.8863%" y="213" width="0.1601%" height="15" fill="rgb(245,172,4)" fg:x="723" fg:w="2"/><text x="58.1363%" y="223.50"></text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="58.0464%" y="309" width="0.2402%" height="15" fill="rgb(207,26,27)" fg:x="725" fg:w="3"/><text x="58.2964%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.2866%" y="245" width="0.0801%" height="15" fill="rgb(252,98,18)" fg:x="728" fg:w="1"/><text x="58.5366%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.2866%" y="229" width="0.0801%" height="15" fill="rgb(244,8,26)" fg:x="728" fg:w="1"/><text x="58.5366%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="58.3667%" y="245" width="0.0801%" height="15" fill="rgb(237,173,45)" fg:x="729" fg:w="1"/><text x="58.6167%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.3667%" y="229" width="0.0801%" height="15" fill="rgb(208,213,49)" fg:x="729" fg:w="1"/><text x="58.6167%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="58.4468%" y="229" width="0.9608%" height="15" fill="rgb(212,122,37)" fg:x="730" fg:w="12"/><text x="58.6968%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="58.4468%" y="213" width="0.9608%" height="15" fill="rgb(213,80,17)" fg:x="730" fg:w="12"/><text x="58.6968%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="59.1673%" y="197" width="0.2402%" height="15" fill="rgb(206,210,43)" fg:x="739" fg:w="3"/><text x="59.4173%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="59.4075%" y="213" width="0.0801%" height="15" fill="rgb(229,214,3)" fg:x="742" fg:w="1"/><text x="59.6575%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="59.4075%" y="197" width="0.0801%" height="15" fill="rgb(235,213,29)" fg:x="742" fg:w="1"/><text x="59.6575%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.4075%" y="181" width="0.0801%" height="15" fill="rgb(248,135,26)" fg:x="742" fg:w="1"/><text x="59.6575%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="59.4876%" y="213" width="0.1601%" height="15" fill="rgb(242,188,12)" fg:x="743" fg:w="2"/><text x="59.7376%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="59.4075%" y="229" width="0.3203%" height="15" fill="rgb(245,38,12)" fg:x="742" fg:w="4"/><text x="59.6575%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="59.6477%" y="213" width="0.0801%" height="15" fill="rgb(218,42,13)" fg:x="745" fg:w="1"/><text x="59.8977%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="59.6477%" y="197" width="0.0801%" height="15" fill="rgb(238,132,49)" fg:x="745" fg:w="1"/><text x="59.8977%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.8078%" y="197" width="0.0801%" height="15" fill="rgb(209,196,19)" fg:x="747" fg:w="1"/><text x="60.0578%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.8078%" y="181" width="0.0801%" height="15" fill="rgb(244,131,22)" fg:x="747" fg:w="1"/><text x="60.0578%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8078%" y="165" width="0.0801%" height="15" fill="rgb(223,18,34)" fg:x="747" fg:w="1"/><text x="60.0578%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="59.8879%" y="197" width="0.1601%" height="15" fill="rgb(252,124,54)" fg:x="748" fg:w="2"/><text x="60.1379%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="59.8879%" y="181" width="0.1601%" height="15" fill="rgb(229,106,42)" fg:x="748" fg:w="2"/><text x="60.1379%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.8879%" y="165" width="0.1601%" height="15" fill="rgb(221,129,1)" fg:x="748" fg:w="2"/><text x="60.1379%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="59.8879%" y="149" width="0.1601%" height="15" fill="rgb(229,74,15)" fg:x="748" fg:w="2"/><text x="60.1379%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="60.0480%" y="197" width="0.2402%" height="15" fill="rgb(210,206,50)" fg:x="750" fg:w="3"/><text x="60.2980%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="60.0480%" y="181" width="0.2402%" height="15" fill="rgb(251,114,31)" fg:x="750" fg:w="3"/><text x="60.2980%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="60.0480%" y="165" width="0.2402%" height="15" fill="rgb(215,225,28)" fg:x="750" fg:w="3"/><text x="60.2980%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="60.0480%" y="149" width="0.2402%" height="15" fill="rgb(237,109,14)" fg:x="750" fg:w="3"/><text x="60.2980%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="60.0480%" y="133" width="0.2402%" height="15" fill="rgb(230,13,37)" fg:x="750" fg:w="3"/><text x="60.2980%" y="143.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="60.2882%" y="181" width="0.0801%" height="15" fill="rgb(231,40,28)" fg:x="753" fg:w="1"/><text x="60.5382%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="60.2882%" y="165" width="0.0801%" height="15" fill="rgb(231,202,18)" fg:x="753" fg:w="1"/><text x="60.5382%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.72%)</title><rect x="59.7278%" y="229" width="0.7206%" height="15" fill="rgb(225,33,18)" fg:x="746" fg:w="9"/><text x="59.9778%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="59.7278%" y="213" width="0.7206%" height="15" fill="rgb(223,64,47)" fg:x="746" fg:w="9"/><text x="59.9778%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="60.2882%" y="197" width="0.1601%" height="15" fill="rgb(234,114,13)" fg:x="753" fg:w="2"/><text x="60.5382%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="60.3683%" y="181" width="0.0801%" height="15" fill="rgb(248,56,40)" fg:x="754" fg:w="1"/><text x="60.6183%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="60.8487%" y="117" width="0.2402%" height="15" fill="rgb(221,194,21)" fg:x="760" fg:w="3"/><text x="61.0987%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="61.0889%" y="117" width="0.3203%" height="15" fill="rgb(242,108,46)" fg:x="763" fg:w="4"/><text x="61.3389%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.3291%" y="101" width="0.0801%" height="15" fill="rgb(220,106,10)" fg:x="766" fg:w="1"/><text x="61.5791%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.3291%" y="85" width="0.0801%" height="15" fill="rgb(211,88,4)" fg:x="766" fg:w="1"/><text x="61.5791%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.3291%" y="69" width="0.0801%" height="15" fill="rgb(214,95,34)" fg:x="766" fg:w="1"/><text x="61.5791%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="61.4091%" y="117" width="0.0801%" height="15" fill="rgb(250,160,33)" fg:x="767" fg:w="1"/><text x="61.6591%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="61.4892%" y="117" width="0.0801%" height="15" fill="rgb(225,29,10)" fg:x="768" fg:w="1"/><text x="61.7392%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.4892%" y="101" width="0.0801%" height="15" fill="rgb(224,28,30)" fg:x="768" fg:w="1"/><text x="61.7392%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.4892%" y="85" width="0.0801%" height="15" fill="rgb(231,77,4)" fg:x="768" fg:w="1"/><text x="61.7392%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.4892%" y="69" width="0.0801%" height="15" fill="rgb(209,63,21)" fg:x="768" fg:w="1"/><text x="61.7392%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8895%" y="53" width="0.0801%" height="15" fill="rgb(226,22,11)" fg:x="773" fg:w="1"/><text x="62.1395%" y="63.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="61.9696%" y="53" width="0.0801%" height="15" fill="rgb(216,82,30)" fg:x="774" fg:w="1"/><text x="62.2196%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="61.9696%" y="37" width="0.0801%" height="15" fill="rgb(246,227,38)" fg:x="774" fg:w="1"/><text x="62.2196%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="61.8094%" y="85" width="0.4804%" height="15" fill="rgb(251,203,53)" fg:x="772" fg:w="6"/><text x="62.0594%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="61.8895%" y="69" width="0.4003%" height="15" fill="rgb(254,101,1)" fg:x="773" fg:w="5"/><text x="62.1395%" y="79.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="62.0496%" y="53" width="0.2402%" height="15" fill="rgb(241,180,5)" fg:x="775" fg:w="3"/><text x="62.2996%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (15 samples, 1.20%)</title><rect x="61.5693%" y="117" width="1.2010%" height="15" fill="rgb(218,168,4)" fg:x="769" fg:w="15"/><text x="61.8193%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (14 samples, 1.12%)</title><rect x="61.6493%" y="101" width="1.1209%" height="15" fill="rgb(224,223,32)" fg:x="770" fg:w="14"/><text x="61.8993%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="62.2898%" y="85" width="0.4804%" height="15" fill="rgb(236,106,22)" fg:x="778" fg:w="6"/><text x="62.5398%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="62.7702%" y="101" width="0.1601%" height="15" fill="rgb(206,121,5)" fg:x="784" fg:w="2"/><text x="63.0202%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="62.7702%" y="85" width="0.1601%" height="15" fill="rgb(233,87,28)" fg:x="784" fg:w="2"/><text x="63.0202%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.7702%" y="69" width="0.1601%" height="15" fill="rgb(236,137,17)" fg:x="784" fg:w="2"/><text x="63.0202%" y="79.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.8503%" y="53" width="0.0801%" height="15" fill="rgb(209,183,38)" fg:x="785" fg:w="1"/><text x="63.1003%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.64%)</title><rect x="62.7702%" y="117" width="2.6421%" height="15" fill="rgb(206,162,44)" fg:x="784" fg:w="33"/><text x="63.0202%" y="127.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.48%)</title><rect x="62.9303%" y="101" width="2.4820%" height="15" fill="rgb(237,70,39)" fg:x="786" fg:w="31"/><text x="63.1803%" y="111.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.48%)</title><rect x="62.9303%" y="85" width="2.4820%" height="15" fill="rgb(212,176,5)" fg:x="786" fg:w="31"/><text x="63.1803%" y="95.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="65.4123%" y="117" width="0.1601%" height="15" fill="rgb(232,95,16)" fg:x="817" fg:w="2"/><text x="65.6623%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4924%" y="101" width="0.0801%" height="15" fill="rgb(219,115,35)" fg:x="818" fg:w="1"/><text x="65.7424%" y="111.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="65.5725%" y="117" width="0.0801%" height="15" fill="rgb(251,67,27)" fg:x="819" fg:w="1"/><text x="65.8225%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 5.68%)</title><rect x="60.4484%" y="213" width="5.6845%" height="15" fill="rgb(222,95,40)" fg:x="755" fg:w="71"/><text x="60.6984%" y="223.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.68%)</title><rect x="60.4484%" y="197" width="5.6845%" height="15" fill="rgb(250,35,16)" fg:x="755" fg:w="71"/><text x="60.6984%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.68%)</title><rect x="60.4484%" y="181" width="5.6845%" height="15" fill="rgb(224,86,44)" fg:x="755" fg:w="71"/><text x="60.6984%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.68%)</title><rect x="60.4484%" y="165" width="5.6845%" height="15" fill="rgb(237,53,53)" fg:x="755" fg:w="71"/><text x="60.6984%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (71 samples, 5.68%)</title><rect x="60.4484%" y="149" width="5.6845%" height="15" fill="rgb(208,171,33)" fg:x="755" fg:w="71"/><text x="60.6984%" y="159.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.68%)</title><rect x="60.4484%" y="133" width="5.6845%" height="15" fill="rgb(222,64,27)" fg:x="755" fg:w="71"/><text x="60.6984%" y="143.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="65.6525%" y="117" width="0.4804%" height="15" fill="rgb(221,121,35)" fg:x="820" fg:w="6"/><text x="65.9025%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="65.8127%" y="101" width="0.3203%" height="15" fill="rgb(228,137,42)" fg:x="822" fg:w="4"/><text x="66.0627%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="65.8927%" y="85" width="0.2402%" height="15" fill="rgb(227,54,21)" fg:x="823" fg:w="3"/><text x="66.1427%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0528%" y="69" width="0.0801%" height="15" fill="rgb(240,168,33)" fg:x="825" fg:w="1"/><text x="66.3028%" y="79.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="66.3731%" y="197" width="0.1601%" height="15" fill="rgb(243,159,6)" fg:x="829" fg:w="2"/><text x="66.6231%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="66.5332%" y="197" width="0.4804%" height="15" fill="rgb(205,211,41)" fg:x="831" fg:w="6"/><text x="66.7832%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="66.7734%" y="181" width="0.2402%" height="15" fill="rgb(253,30,1)" fg:x="834" fg:w="3"/><text x="67.0234%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="66.7734%" y="165" width="0.2402%" height="15" fill="rgb(226,80,18)" fg:x="834" fg:w="3"/><text x="67.0234%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="66.7734%" y="149" width="0.2402%" height="15" fill="rgb(253,156,46)" fg:x="834" fg:w="3"/><text x="67.0234%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (108 samples, 8.65%)</title><rect x="58.4468%" y="245" width="8.6469%" height="15" fill="rgb(248,87,27)" fg:x="730" fg:w="108"/><text x="58.6968%" y="255.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (83 samples, 6.65%)</title><rect x="60.4484%" y="229" width="6.6453%" height="15" fill="rgb(227,122,2)" fg:x="755" fg:w="83"/><text x="60.6984%" y="239.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.96%)</title><rect x="66.1329%" y="213" width="0.9608%" height="15" fill="rgb(229,94,39)" fg:x="826" fg:w="12"/><text x="66.3829%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="67.0136%" y="197" width="0.0801%" height="15" fill="rgb(225,173,31)" fg:x="837" fg:w="1"/><text x="67.2636%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="67.0937%" y="213" width="0.0801%" height="15" fill="rgb(239,176,30)" fg:x="838" fg:w="1"/><text x="67.3437%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="67.0937%" y="245" width="0.1601%" height="15" fill="rgb(212,104,21)" fg:x="838" fg:w="2"/><text x="67.3437%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="67.0937%" y="229" width="0.1601%" height="15" fill="rgb(240,209,40)" fg:x="838" fg:w="2"/><text x="67.3437%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="67.1737%" y="213" width="0.0801%" height="15" fill="rgb(234,195,5)" fg:x="839" fg:w="1"/><text x="67.4237%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="67.1737%" y="197" width="0.0801%" height="15" fill="rgb(238,213,1)" fg:x="839" fg:w="1"/><text x="67.4237%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="67.2538%" y="213" width="0.0801%" height="15" fill="rgb(235,182,54)" fg:x="840" fg:w="1"/><text x="67.5038%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="67.2538%" y="197" width="0.0801%" height="15" fill="rgb(229,50,46)" fg:x="840" fg:w="1"/><text x="67.5038%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="67.3339%" y="213" width="0.1601%" height="15" fill="rgb(219,145,13)" fg:x="841" fg:w="2"/><text x="67.5839%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (1 samples, 0.08%)</title><rect x="67.4139%" y="197" width="0.0801%" height="15" fill="rgb(220,226,10)" fg:x="842" fg:w="1"/><text x="67.6639%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (116 samples, 9.29%)</title><rect x="58.2866%" y="261" width="9.2874%" height="15" fill="rgb(248,47,30)" fg:x="728" fg:w="116"/><text x="58.5366%" y="271.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="67.2538%" y="245" width="0.3203%" height="15" fill="rgb(231,209,44)" fg:x="840" fg:w="4"/><text x="67.5038%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="67.2538%" y="229" width="0.3203%" height="15" fill="rgb(209,80,30)" fg:x="840" fg:w="4"/><text x="67.5038%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="67.4940%" y="213" width="0.0801%" height="15" fill="rgb(232,9,14)" fg:x="843" fg:w="1"/><text x="67.7440%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="67.5741%" y="261" width="0.0801%" height="15" fill="rgb(243,91,43)" fg:x="844" fg:w="1"/><text x="67.8241%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (118 samples, 9.45%)</title><rect x="58.2866%" y="293" width="9.4476%" height="15" fill="rgb(231,90,52)" fg:x="728" fg:w="118"/><text x="58.5366%" y="303.50">&lt;regex::regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (118 samples, 9.45%)</title><rect x="58.2866%" y="277" width="9.4476%" height="15" fill="rgb(253,192,44)" fg:x="728" fg:w="118"/><text x="58.5366%" y="287.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Config::match_kind (1 samples, 0.08%)</title><rect x="67.6541%" y="261" width="0.0801%" height="15" fill="rgb(241,66,31)" fg:x="845" fg:w="1"/><text x="67.9041%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="67.7342%" y="293" width="0.0801%" height="15" fill="rgb(235,81,37)" fg:x="846" fg:w="1"/><text x="67.9842%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="67.7342%" y="277" width="0.0801%" height="15" fill="rgb(223,221,9)" fg:x="846" fg:w="1"/><text x="67.9842%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="67.7342%" y="261" width="0.0801%" height="15" fill="rgb(242,180,7)" fg:x="846" fg:w="1"/><text x="67.9842%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7342%" y="245" width="0.0801%" height="15" fill="rgb(243,78,19)" fg:x="846" fg:w="1"/><text x="67.9842%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.3747%" y="197" width="0.0801%" height="15" fill="rgb(233,23,17)" fg:x="854" fg:w="1"/><text x="68.6247%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.3747%" y="181" width="0.0801%" height="15" fill="rgb(252,122,45)" fg:x="854" fg:w="1"/><text x="68.6247%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.3747%" y="165" width="0.0801%" height="15" fill="rgb(247,108,20)" fg:x="854" fg:w="1"/><text x="68.6247%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4548%" y="197" width="0.0801%" height="15" fill="rgb(235,84,21)" fg:x="855" fg:w="1"/><text x="68.7048%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.4548%" y="181" width="0.0801%" height="15" fill="rgb(247,129,10)" fg:x="855" fg:w="1"/><text x="68.7048%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.96%)</title><rect x="67.8143%" y="213" width="0.9608%" height="15" fill="rgb(208,173,14)" fg:x="847" fg:w="12"/><text x="68.0643%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="68.5348%" y="197" width="0.2402%" height="15" fill="rgb(236,31,38)" fg:x="856" fg:w="3"/><text x="68.7848%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.04%)</title><rect x="67.8143%" y="229" width="1.0408%" height="15" fill="rgb(232,65,17)" fg:x="847" fg:w="13"/><text x="68.0643%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="68.7750%" y="213" width="0.0801%" height="15" fill="rgb(224,45,49)" fg:x="859" fg:w="1"/><text x="69.0250%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.7750%" y="197" width="0.0801%" height="15" fill="rgb(225,2,53)" fg:x="859" fg:w="1"/><text x="69.0250%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.7750%" y="181" width="0.0801%" height="15" fill="rgb(248,210,53)" fg:x="859" fg:w="1"/><text x="69.0250%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (318 samples, 25.46%)</title><rect x="43.4748%" y="389" width="25.4604%" height="15" fill="rgb(211,1,30)" fg:x="543" fg:w="318"/><text x="43.7248%" y="399.50">&lt;&amp;kernel::model::EntityPtr as plugins_cor..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (291 samples, 23.30%)</title><rect x="45.6365%" y="373" width="23.2986%" height="15" fill="rgb(224,96,15)" fg:x="570" fg:w="291"/><text x="45.8865%" y="383.50">plugins_core::looking::model::Unquali..</text></g><g><title>indefinite::indefinite (291 samples, 23.30%)</title><rect x="45.6365%" y="357" width="23.2986%" height="15" fill="rgb(252,45,11)" fg:x="570" fg:w="291"/><text x="45.8865%" y="367.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (291 samples, 23.30%)</title><rect x="45.6365%" y="341" width="23.2986%" height="15" fill="rgb(220,125,38)" fg:x="570" fg:w="291"/><text x="45.8865%" y="351.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (288 samples, 23.06%)</title><rect x="45.8767%" y="325" width="23.0584%" height="15" fill="rgb(243,161,33)" fg:x="573" fg:w="288"/><text x="46.1267%" y="335.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::number::Number::check (133 samples, 10.65%)</title><rect x="58.2866%" y="309" width="10.6485%" height="15" fill="rgb(248,197,34)" fg:x="728" fg:w="133"/><text x="58.5366%" y="319.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::is_match_at (14 samples, 1.12%)</title><rect x="67.8143%" y="293" width="1.1209%" height="15" fill="rgb(228,165,23)" fg:x="847" fg:w="14"/><text x="68.0643%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.12%)</title><rect x="67.8143%" y="277" width="1.1209%" height="15" fill="rgb(236,94,38)" fg:x="847" fg:w="14"/><text x="68.0643%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.12%)</title><rect x="67.8143%" y="261" width="1.1209%" height="15" fill="rgb(220,13,23)" fg:x="847" fg:w="14"/><text x="68.0643%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.12%)</title><rect x="67.8143%" y="245" width="1.1209%" height="15" fill="rgb(234,26,39)" fg:x="847" fg:w="14"/><text x="68.0643%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="68.8551%" y="229" width="0.0801%" height="15" fill="rgb(205,117,44)" fg:x="860" fg:w="1"/><text x="69.1051%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="68.8551%" y="213" width="0.0801%" height="15" fill="rgb(250,42,2)" fg:x="860" fg:w="1"/><text x="69.1051%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.8551%" y="197" width="0.0801%" height="15" fill="rgb(223,83,14)" fg:x="860" fg:w="1"/><text x="69.1051%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.8551%" y="181" width="0.0801%" height="15" fill="rgb(241,147,50)" fg:x="860" fg:w="1"/><text x="69.1051%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8551%" y="165" width="0.0801%" height="15" fill="rgb(218,90,6)" fg:x="860" fg:w="1"/><text x="69.1051%" y="175.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="68.9351%" y="373" width="0.0801%" height="15" fill="rgb(210,191,5)" fg:x="861" fg:w="1"/><text x="69.1851%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="68.9351%" y="389" width="0.4003%" height="15" fill="rgb(225,139,19)" fg:x="861" fg:w="5"/><text x="69.1851%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.0152%" y="373" width="0.3203%" height="15" fill="rgb(210,1,33)" fg:x="862" fg:w="4"/><text x="69.2652%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.0152%" y="357" width="0.3203%" height="15" fill="rgb(213,50,3)" fg:x="862" fg:w="4"/><text x="69.2652%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.32%)</title><rect x="69.0152%" y="341" width="0.3203%" height="15" fill="rgb(234,227,4)" fg:x="862" fg:w="4"/><text x="69.2652%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="69.0152%" y="325" width="0.3203%" height="15" fill="rgb(246,63,5)" fg:x="862" fg:w="4"/><text x="69.2652%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.32%)</title><rect x="69.0152%" y="309" width="0.3203%" height="15" fill="rgb(245,136,27)" fg:x="862" fg:w="4"/><text x="69.2652%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.0152%" y="293" width="0.3203%" height="15" fill="rgb(247,199,27)" fg:x="862" fg:w="4"/><text x="69.2652%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.0152%" y="277" width="0.3203%" height="15" fill="rgb(252,158,49)" fg:x="862" fg:w="4"/><text x="69.2652%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="69.2554%" y="261" width="0.0801%" height="15" fill="rgb(254,73,1)" fg:x="865" fg:w="1"/><text x="69.5054%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3355%" y="325" width="0.0801%" height="15" fill="rgb(248,93,19)" fg:x="866" fg:w="1"/><text x="69.5855%" y="335.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="69.3355%" y="357" width="0.1601%" height="15" fill="rgb(206,67,5)" fg:x="866" fg:w="2"/><text x="69.5855%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.3355%" y="341" width="0.1601%" height="15" fill="rgb(209,210,4)" fg:x="866" fg:w="2"/><text x="69.5855%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.4155%" y="325" width="0.0801%" height="15" fill="rgb(214,185,36)" fg:x="867" fg:w="1"/><text x="69.6655%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4155%" y="309" width="0.0801%" height="15" fill="rgb(233,191,26)" fg:x="867" fg:w="1"/><text x="69.6655%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.4155%" y="293" width="0.0801%" height="15" fill="rgb(248,94,17)" fg:x="867" fg:w="1"/><text x="69.6655%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4155%" y="277" width="0.0801%" height="15" fill="rgb(250,64,4)" fg:x="867" fg:w="1"/><text x="69.6655%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.4155%" y="261" width="0.0801%" height="15" fill="rgb(218,41,53)" fg:x="867" fg:w="1"/><text x="69.6655%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4155%" y="245" width="0.0801%" height="15" fill="rgb(251,176,28)" fg:x="867" fg:w="1"/><text x="69.6655%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.4956%" y="325" width="0.1601%" height="15" fill="rgb(247,22,9)" fg:x="868" fg:w="2"/><text x="69.7456%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.4956%" y="309" width="0.1601%" height="15" fill="rgb(218,201,14)" fg:x="868" fg:w="2"/><text x="69.7456%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5757%" y="293" width="0.0801%" height="15" fill="rgb(218,94,10)" fg:x="869" fg:w="1"/><text x="69.8257%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="69.4956%" y="357" width="0.2402%" height="15" fill="rgb(222,183,52)" fg:x="868" fg:w="3"/><text x="69.7456%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="69.4956%" y="341" width="0.2402%" height="15" fill="rgb(242,140,25)" fg:x="868" fg:w="3"/><text x="69.7456%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.6557%" y="325" width="0.0801%" height="15" fill="rgb(235,197,38)" fg:x="870" fg:w="1"/><text x="69.9057%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6557%" y="309" width="0.0801%" height="15" fill="rgb(237,136,15)" fg:x="870" fg:w="1"/><text x="69.9057%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.6557%" y="293" width="0.0801%" height="15" fill="rgb(223,44,49)" fg:x="870" fg:w="1"/><text x="69.9057%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6557%" y="277" width="0.0801%" height="15" fill="rgb(227,71,15)" fg:x="870" fg:w="1"/><text x="69.9057%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.6557%" y="261" width="0.0801%" height="15" fill="rgb(225,153,20)" fg:x="870" fg:w="1"/><text x="69.9057%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6557%" y="245" width="0.0801%" height="15" fill="rgb(210,190,26)" fg:x="870" fg:w="1"/><text x="69.9057%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.7358%" y="341" width="0.0801%" height="15" fill="rgb(223,147,5)" fg:x="871" fg:w="1"/><text x="69.9858%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.7358%" y="325" width="0.0801%" height="15" fill="rgb(207,14,23)" fg:x="871" fg:w="1"/><text x="69.9858%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7358%" y="309" width="0.0801%" height="15" fill="rgb(211,195,53)" fg:x="871" fg:w="1"/><text x="69.9858%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.7358%" y="293" width="0.0801%" height="15" fill="rgb(237,75,46)" fg:x="871" fg:w="1"/><text x="69.9858%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7358%" y="277" width="0.0801%" height="15" fill="rgb(254,55,14)" fg:x="871" fg:w="1"/><text x="69.9858%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.7358%" y="261" width="0.0801%" height="15" fill="rgb(230,185,30)" fg:x="871" fg:w="1"/><text x="69.9858%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7358%" y="245" width="0.0801%" height="15" fill="rgb(220,14,11)" fg:x="871" fg:w="1"/><text x="69.9858%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (7 samples, 0.56%)</title><rect x="69.3355%" y="373" width="0.5604%" height="15" fill="rgb(215,169,44)" fg:x="866" fg:w="7"/><text x="69.5855%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="69.7358%" y="357" width="0.1601%" height="15" fill="rgb(253,203,20)" fg:x="871" fg:w="2"/><text x="69.9858%" y="367.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="69.8159%" y="341" width="0.0801%" height="15" fill="rgb(229,225,17)" fg:x="872" fg:w="1"/><text x="70.0659%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.8159%" y="325" width="0.0801%" height="15" fill="rgb(236,76,26)" fg:x="872" fg:w="1"/><text x="70.0659%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.8959%" y="309" width="0.0801%" height="15" fill="rgb(234,15,30)" fg:x="873" fg:w="1"/><text x="70.1459%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8959%" y="293" width="0.0801%" height="15" fill="rgb(211,113,48)" fg:x="873" fg:w="1"/><text x="70.1459%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8959%" y="277" width="0.0801%" height="15" fill="rgb(221,31,36)" fg:x="873" fg:w="1"/><text x="70.1459%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.8959%" y="261" width="0.0801%" height="15" fill="rgb(215,118,52)" fg:x="873" fg:w="1"/><text x="70.1459%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8959%" y="245" width="0.0801%" height="15" fill="rgb(241,151,27)" fg:x="873" fg:w="1"/><text x="70.1459%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8959%" y="229" width="0.0801%" height="15" fill="rgb(253,51,3)" fg:x="873" fg:w="1"/><text x="70.1459%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.9760%" y="213" width="0.0801%" height="15" fill="rgb(216,201,24)" fg:x="874" fg:w="1"/><text x="70.2260%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.9760%" y="197" width="0.0801%" height="15" fill="rgb(231,107,4)" fg:x="874" fg:w="1"/><text x="70.2260%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.9760%" y="181" width="0.0801%" height="15" fill="rgb(243,97,54)" fg:x="874" fg:w="1"/><text x="70.2260%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.9760%" y="165" width="0.0801%" height="15" fill="rgb(221,32,51)" fg:x="874" fg:w="1"/><text x="70.2260%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9760%" y="149" width="0.0801%" height="15" fill="rgb(218,171,35)" fg:x="874" fg:w="1"/><text x="70.2260%" y="159.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="69.9760%" y="309" width="0.1601%" height="15" fill="rgb(214,20,53)" fg:x="874" fg:w="2"/><text x="70.2260%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.9760%" y="293" width="0.1601%" height="15" fill="rgb(239,9,52)" fg:x="874" fg:w="2"/><text x="70.2260%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9760%" y="277" width="0.1601%" height="15" fill="rgb(215,114,45)" fg:x="874" fg:w="2"/><text x="70.2260%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.9760%" y="261" width="0.1601%" height="15" fill="rgb(208,118,9)" fg:x="874" fg:w="2"/><text x="70.2260%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9760%" y="245" width="0.1601%" height="15" fill="rgb(235,7,39)" fg:x="874" fg:w="2"/><text x="70.2260%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.9760%" y="229" width="0.1601%" height="15" fill="rgb(243,225,15)" fg:x="874" fg:w="2"/><text x="70.2260%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0560%" y="213" width="0.0801%" height="15" fill="rgb(225,216,18)" fg:x="875" fg:w="1"/><text x="70.3060%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0560%" y="197" width="0.0801%" height="15" fill="rgb(233,36,38)" fg:x="875" fg:w="1"/><text x="70.3060%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.0560%" y="181" width="0.0801%" height="15" fill="rgb(239,88,23)" fg:x="875" fg:w="1"/><text x="70.3060%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0560%" y="165" width="0.0801%" height="15" fill="rgb(219,181,35)" fg:x="875" fg:w="1"/><text x="70.3060%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.0560%" y="149" width="0.0801%" height="15" fill="rgb(215,18,46)" fg:x="875" fg:w="1"/><text x="70.3060%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1361%" y="229" width="0.0801%" height="15" fill="rgb(241,38,11)" fg:x="876" fg:w="1"/><text x="70.3861%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.1361%" y="213" width="0.0801%" height="15" fill="rgb(248,169,45)" fg:x="876" fg:w="1"/><text x="70.3861%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.1361%" y="197" width="0.0801%" height="15" fill="rgb(239,50,49)" fg:x="876" fg:w="1"/><text x="70.3861%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1361%" y="181" width="0.0801%" height="15" fill="rgb(231,96,31)" fg:x="876" fg:w="1"/><text x="70.3861%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.1361%" y="245" width="0.1601%" height="15" fill="rgb(224,193,37)" fg:x="876" fg:w="2"/><text x="70.3861%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2162%" y="229" width="0.0801%" height="15" fill="rgb(227,153,50)" fg:x="877" fg:w="1"/><text x="70.4662%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="69.3355%" y="389" width="1.0408%" height="15" fill="rgb(249,228,3)" fg:x="866" fg:w="13"/><text x="69.5855%" y="399.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="69.8959%" y="373" width="0.4804%" height="15" fill="rgb(219,164,43)" fg:x="873" fg:w="6"/><text x="70.1459%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="69.8959%" y="357" width="0.4804%" height="15" fill="rgb(216,45,41)" fg:x="873" fg:w="6"/><text x="70.1459%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="69.8959%" y="341" width="0.4804%" height="15" fill="rgb(210,226,51)" fg:x="873" fg:w="6"/><text x="70.1459%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="69.8959%" y="325" width="0.4804%" height="15" fill="rgb(209,117,49)" fg:x="873" fg:w="6"/><text x="70.1459%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="70.1361%" y="309" width="0.2402%" height="15" fill="rgb(206,196,24)" fg:x="876" fg:w="3"/><text x="70.3861%" y="319.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.1361%" y="293" width="0.2402%" height="15" fill="rgb(253,218,3)" fg:x="876" fg:w="3"/><text x="70.3861%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="70.1361%" y="277" width="0.2402%" height="15" fill="rgb(252,166,2)" fg:x="876" fg:w="3"/><text x="70.3861%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.1361%" y="261" width="0.2402%" height="15" fill="rgb(236,218,26)" fg:x="876" fg:w="3"/><text x="70.3861%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2962%" y="245" width="0.0801%" height="15" fill="rgb(254,84,19)" fg:x="878" fg:w="1"/><text x="70.5462%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2962%" y="229" width="0.0801%" height="15" fill="rgb(219,137,29)" fg:x="878" fg:w="1"/><text x="70.5462%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="70.2962%" y="213" width="0.0801%" height="15" fill="rgb(227,47,52)" fg:x="878" fg:w="1"/><text x="70.5462%" y="223.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="70.3763%" y="389" width="0.0801%" height="15" fill="rgb(229,167,24)" fg:x="879" fg:w="1"/><text x="70.6263%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="70.3763%" y="373" width="0.0801%" height="15" fill="rgb(233,164,1)" fg:x="879" fg:w="1"/><text x="70.6263%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="70.3763%" y="357" width="0.0801%" height="15" fill="rgb(218,88,48)" fg:x="879" fg:w="1"/><text x="70.6263%" y="367.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="70.3763%" y="341" width="0.0801%" height="15" fill="rgb(226,214,24)" fg:x="879" fg:w="1"/><text x="70.6263%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.4564%" y="389" width="0.0801%" height="15" fill="rgb(233,29,12)" fg:x="880" fg:w="1"/><text x="70.7064%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.4564%" y="373" width="0.0801%" height="15" fill="rgb(219,120,34)" fg:x="880" fg:w="1"/><text x="70.7064%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4564%" y="357" width="0.0801%" height="15" fill="rgb(226,78,44)" fg:x="880" fg:w="1"/><text x="70.7064%" y="367.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (350 samples, 28.02%)</title><rect x="42.5941%" y="549" width="28.0224%" height="15" fill="rgb(240,15,48)" fg:x="532" fg:w="350"/><text x="42.8441%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (350 samples, 28.02%)</title><rect x="42.5941%" y="533" width="28.0224%" height="15" fill="rgb(253,176,7)" fg:x="532" fg:w="350"/><text x="42.8441%" y="543.50">&lt;plugins_dynlib::DynamicMiddleware as kernel:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (350 samples, 28.02%)</title><rect x="42.5941%" y="517" width="28.0224%" height="15" fill="rgb(206,166,28)" fg:x="532" fg:w="350"/><text x="42.8441%" y="527.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (350 samples, 28.02%)</title><rect x="42.5941%" y="501" width="28.0224%" height="15" fill="rgb(241,53,51)" fg:x="532" fg:w="350"/><text x="42.8441%" y="511.50">core::ops::function::FnOnce::call_once{{vtabl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (348 samples, 27.86%)</title><rect x="42.7542%" y="485" width="27.8623%" height="15" fill="rgb(249,112,30)" fg:x="534" fg:w="348"/><text x="43.0042%" y="495.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (347 samples, 27.78%)</title><rect x="42.8343%" y="469" width="27.7822%" height="15" fill="rgb(217,85,30)" fg:x="535" fg:w="347"/><text x="43.0843%" y="479.50">core::ops::function::FnOnce::call_once{{vtabl..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (347 samples, 27.78%)</title><rect x="42.8343%" y="453" width="27.7822%" height="15" fill="rgb(233,49,7)" fg:x="535" fg:w="347"/><text x="43.0843%" y="463.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::functio..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (347 samples, 27.78%)</title><rect x="42.8343%" y="437" width="27.7822%" height="15" fill="rgb(234,109,9)" fg:x="535" fg:w="347"/><text x="43.0843%" y="447.50">&lt;engine::session::state::State as kernel::act..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (347 samples, 27.78%)</title><rect x="42.8343%" y="421" width="27.7822%" height="15" fill="rgb(253,95,22)" fg:x="535" fg:w="347"/><text x="43.0843%" y="431.50">&lt;plugins_core::looking::actions::LookAction a..</text></g><g><title>plugins_core::looking::model::new_area_observation (340 samples, 27.22%)</title><rect x="43.3947%" y="405" width="27.2218%" height="15" fill="rgb(233,176,25)" fg:x="542" fg:w="340"/><text x="43.6447%" y="415.50">plugins_core::looking::model::new_area_obser..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="70.5364%" y="389" width="0.0801%" height="15" fill="rgb(236,33,39)" fg:x="881" fg:w="1"/><text x="70.7864%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5364%" y="373" width="0.0801%" height="15" fill="rgb(223,226,42)" fg:x="881" fg:w="1"/><text x="70.7864%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.6165%" y="517" width="0.0801%" height="15" fill="rgb(216,99,33)" fg:x="882" fg:w="1"/><text x="70.8665%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6165%" y="501" width="0.0801%" height="15" fill="rgb(235,84,23)" fg:x="882" fg:w="1"/><text x="70.8665%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.6966%" y="485" width="0.0801%" height="15" fill="rgb(232,2,27)" fg:x="883" fg:w="1"/><text x="70.9466%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="70.6966%" y="501" width="0.3203%" height="15" fill="rgb(241,23,22)" fg:x="883" fg:w="4"/><text x="70.9466%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="70.7766%" y="485" width="0.2402%" height="15" fill="rgb(211,73,27)" fg:x="884" fg:w="3"/><text x="71.0266%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.7766%" y="469" width="0.2402%" height="15" fill="rgb(235,109,49)" fg:x="884" fg:w="3"/><text x="71.0266%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.9367%" y="453" width="0.0801%" height="15" fill="rgb(230,99,29)" fg:x="886" fg:w="1"/><text x="71.1867%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.9367%" y="437" width="0.0801%" height="15" fill="rgb(245,199,7)" fg:x="886" fg:w="1"/><text x="71.1867%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.9367%" y="421" width="0.0801%" height="15" fill="rgb(217,179,10)" fg:x="886" fg:w="1"/><text x="71.1867%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9367%" y="405" width="0.0801%" height="15" fill="rgb(254,99,47)" fg:x="886" fg:w="1"/><text x="71.1867%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="71.0168%" y="453" width="0.0801%" height="15" fill="rgb(251,121,7)" fg:x="887" fg:w="1"/><text x="71.2668%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="71.0969%" y="437" width="0.1601%" height="15" fill="rgb(250,177,26)" fg:x="888" fg:w="2"/><text x="71.3469%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.0969%" y="421" width="0.1601%" height="15" fill="rgb(232,88,15)" fg:x="888" fg:w="2"/><text x="71.3469%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0969%" y="405" width="0.1601%" height="15" fill="rgb(251,54,54)" fg:x="888" fg:w="2"/><text x="71.3469%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.1769%" y="389" width="0.0801%" height="15" fill="rgb(208,177,15)" fg:x="889" fg:w="1"/><text x="71.4269%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1769%" y="373" width="0.0801%" height="15" fill="rgb(205,97,32)" fg:x="889" fg:w="1"/><text x="71.4269%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1769%" y="357" width="0.0801%" height="15" fill="rgb(217,192,13)" fg:x="889" fg:w="1"/><text x="71.4269%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1769%" y="341" width="0.0801%" height="15" fill="rgb(215,163,41)" fg:x="889" fg:w="1"/><text x="71.4269%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2570%" y="421" width="0.0801%" height="15" fill="rgb(246,83,29)" fg:x="890" fg:w="1"/><text x="71.5070%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2570%" y="405" width="0.0801%" height="15" fill="rgb(219,2,45)" fg:x="890" fg:w="1"/><text x="71.5070%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2570%" y="389" width="0.0801%" height="15" fill="rgb(242,215,33)" fg:x="890" fg:w="1"/><text x="71.5070%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2570%" y="373" width="0.0801%" height="15" fill="rgb(217,1,6)" fg:x="890" fg:w="1"/><text x="71.5070%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2570%" y="357" width="0.0801%" height="15" fill="rgb(207,85,52)" fg:x="890" fg:w="1"/><text x="71.5070%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.2570%" y="341" width="0.0801%" height="15" fill="rgb(231,171,19)" fg:x="890" fg:w="1"/><text x="71.5070%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.2570%" y="325" width="0.0801%" height="15" fill="rgb(207,128,4)" fg:x="890" fg:w="1"/><text x="71.5070%" y="335.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="71.2570%" y="437" width="0.1601%" height="15" fill="rgb(219,208,4)" fg:x="890" fg:w="2"/><text x="71.5070%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.3371%" y="421" width="0.0801%" height="15" fill="rgb(235,161,42)" fg:x="891" fg:w="1"/><text x="71.5871%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="71.3371%" y="405" width="0.0801%" height="15" fill="rgb(247,218,18)" fg:x="891" fg:w="1"/><text x="71.5871%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.3371%" y="389" width="0.0801%" height="15" fill="rgb(232,114,51)" fg:x="891" fg:w="1"/><text x="71.5871%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.4171%" y="357" width="0.0801%" height="15" fill="rgb(222,95,3)" fg:x="892" fg:w="1"/><text x="71.6671%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="71.4171%" y="437" width="0.1601%" height="15" fill="rgb(240,65,29)" fg:x="892" fg:w="2"/><text x="71.6671%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4171%" y="421" width="0.1601%" height="15" fill="rgb(249,209,20)" fg:x="892" fg:w="2"/><text x="71.6671%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4171%" y="405" width="0.1601%" height="15" fill="rgb(241,48,37)" fg:x="892" fg:w="2"/><text x="71.6671%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.4171%" y="389" width="0.1601%" height="15" fill="rgb(230,140,42)" fg:x="892" fg:w="2"/><text x="71.6671%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4171%" y="373" width="0.1601%" height="15" fill="rgb(230,176,45)" fg:x="892" fg:w="2"/><text x="71.6671%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.4972%" y="357" width="0.0801%" height="15" fill="rgb(245,112,21)" fg:x="893" fg:w="1"/><text x="71.7472%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4972%" y="341" width="0.0801%" height="15" fill="rgb(207,183,35)" fg:x="893" fg:w="1"/><text x="71.7472%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4972%" y="325" width="0.0801%" height="15" fill="rgb(227,44,33)" fg:x="893" fg:w="1"/><text x="71.7472%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.4972%" y="309" width="0.0801%" height="15" fill="rgb(246,120,21)" fg:x="893" fg:w="1"/><text x="71.7472%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4972%" y="293" width="0.0801%" height="15" fill="rgb(235,57,52)" fg:x="893" fg:w="1"/><text x="71.7472%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4972%" y="277" width="0.0801%" height="15" fill="rgb(238,84,10)" fg:x="893" fg:w="1"/><text x="71.7472%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="71.4972%" y="261" width="0.0801%" height="15" fill="rgb(251,200,32)" fg:x="893" fg:w="1"/><text x="71.7472%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4972%" y="245" width="0.0801%" height="15" fill="rgb(247,159,13)" fg:x="893" fg:w="1"/><text x="71.7472%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4972%" y="229" width="0.0801%" height="15" fill="rgb(238,64,4)" fg:x="893" fg:w="1"/><text x="71.7472%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.4972%" y="213" width="0.0801%" height="15" fill="rgb(221,131,51)" fg:x="893" fg:w="1"/><text x="71.7472%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.6573%" y="293" width="0.0801%" height="15" fill="rgb(242,5,29)" fg:x="895" fg:w="1"/><text x="71.9073%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.6573%" y="277" width="0.0801%" height="15" fill="rgb(214,130,32)" fg:x="895" fg:w="1"/><text x="71.9073%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6573%" y="261" width="0.0801%" height="15" fill="rgb(244,210,16)" fg:x="895" fg:w="1"/><text x="71.9073%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6573%" y="245" width="0.0801%" height="15" fill="rgb(234,48,26)" fg:x="895" fg:w="1"/><text x="71.9073%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="71.6573%" y="229" width="0.0801%" height="15" fill="rgb(231,82,38)" fg:x="895" fg:w="1"/><text x="71.9073%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (15 samples, 1.20%)</title><rect x="70.6966%" y="517" width="1.2010%" height="15" fill="rgb(254,128,41)" fg:x="883" fg:w="15"/><text x="70.9466%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.88%)</title><rect x="71.0168%" y="501" width="0.8807%" height="15" fill="rgb(212,73,49)" fg:x="887" fg:w="11"/><text x="71.2668%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="71.0168%" y="485" width="0.8807%" height="15" fill="rgb(205,62,54)" fg:x="887" fg:w="11"/><text x="71.2668%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="71.0168%" y="469" width="0.8807%" height="15" fill="rgb(228,0,8)" fg:x="887" fg:w="11"/><text x="71.2668%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="71.0969%" y="453" width="0.8006%" height="15" fill="rgb(251,28,17)" fg:x="888" fg:w="10"/><text x="71.3469%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="71.5773%" y="437" width="0.3203%" height="15" fill="rgb(238,105,27)" fg:x="894" fg:w="4"/><text x="71.8273%" y="447.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="71.5773%" y="421" width="0.3203%" height="15" fill="rgb(237,216,33)" fg:x="894" fg:w="4"/><text x="71.8273%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="71.5773%" y="405" width="0.3203%" height="15" fill="rgb(229,228,25)" fg:x="894" fg:w="4"/><text x="71.8273%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="71.5773%" y="389" width="0.3203%" height="15" fill="rgb(233,75,23)" fg:x="894" fg:w="4"/><text x="71.8273%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.6573%" y="373" width="0.2402%" height="15" fill="rgb(231,207,16)" fg:x="895" fg:w="3"/><text x="71.9073%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.6573%" y="357" width="0.2402%" height="15" fill="rgb(231,191,45)" fg:x="895" fg:w="3"/><text x="71.9073%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.6573%" y="341" width="0.2402%" height="15" fill="rgb(224,133,17)" fg:x="895" fg:w="3"/><text x="71.9073%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.6573%" y="325" width="0.2402%" height="15" fill="rgb(209,178,27)" fg:x="895" fg:w="3"/><text x="71.9073%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="71.6573%" y="309" width="0.2402%" height="15" fill="rgb(218,37,11)" fg:x="895" fg:w="3"/><text x="71.9073%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7374%" y="293" width="0.1601%" height="15" fill="rgb(251,226,25)" fg:x="896" fg:w="2"/><text x="71.9874%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.7374%" y="277" width="0.1601%" height="15" fill="rgb(209,222,27)" fg:x="896" fg:w="2"/><text x="71.9874%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7374%" y="261" width="0.1601%" height="15" fill="rgb(238,22,21)" fg:x="896" fg:w="2"/><text x="71.9874%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8175%" y="245" width="0.0801%" height="15" fill="rgb(233,161,25)" fg:x="897" fg:w="1"/><text x="72.0675%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8975%" y="485" width="0.0801%" height="15" fill="rgb(226,122,53)" fg:x="898" fg:w="1"/><text x="72.1475%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8975%" y="469" width="0.0801%" height="15" fill="rgb(220,123,17)" fg:x="898" fg:w="1"/><text x="72.1475%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8975%" y="453" width="0.0801%" height="15" fill="rgb(230,224,35)" fg:x="898" fg:w="1"/><text x="72.1475%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8975%" y="437" width="0.0801%" height="15" fill="rgb(246,83,8)" fg:x="898" fg:w="1"/><text x="72.1475%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8975%" y="421" width="0.0801%" height="15" fill="rgb(230,214,17)" fg:x="898" fg:w="1"/><text x="72.1475%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8975%" y="405" width="0.0801%" height="15" fill="rgb(222,97,18)" fg:x="898" fg:w="1"/><text x="72.1475%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8975%" y="389" width="0.0801%" height="15" fill="rgb(206,79,1)" fg:x="898" fg:w="1"/><text x="72.1475%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8975%" y="373" width="0.0801%" height="15" fill="rgb(214,121,34)" fg:x="898" fg:w="1"/><text x="72.1475%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8975%" y="357" width="0.0801%" height="15" fill="rgb(249,199,46)" fg:x="898" fg:w="1"/><text x="72.1475%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8975%" y="341" width="0.0801%" height="15" fill="rgb(214,222,46)" fg:x="898" fg:w="1"/><text x="72.1475%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.8975%" y="325" width="0.0801%" height="15" fill="rgb(248,168,30)" fg:x="898" fg:w="1"/><text x="72.1475%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.8975%" y="309" width="0.0801%" height="15" fill="rgb(226,14,28)" fg:x="898" fg:w="1"/><text x="72.1475%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.8975%" y="293" width="0.0801%" height="15" fill="rgb(253,123,1)" fg:x="898" fg:w="1"/><text x="72.1475%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.8975%" y="277" width="0.0801%" height="15" fill="rgb(225,24,42)" fg:x="898" fg:w="1"/><text x="72.1475%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8975%" y="261" width="0.0801%" height="15" fill="rgb(216,161,37)" fg:x="898" fg:w="1"/><text x="72.1475%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="71.9776%" y="485" width="0.0801%" height="15" fill="rgb(251,164,26)" fg:x="899" fg:w="1"/><text x="72.2276%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="71.8975%" y="501" width="0.3203%" height="15" fill="rgb(219,177,3)" fg:x="898" fg:w="4"/><text x="72.1475%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.0576%" y="485" width="0.1601%" height="15" fill="rgb(222,65,0)" fg:x="900" fg:w="2"/><text x="72.3076%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.0576%" y="469" width="0.1601%" height="15" fill="rgb(223,69,54)" fg:x="900" fg:w="2"/><text x="72.3076%" y="479.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="71.8975%" y="517" width="0.4003%" height="15" fill="rgb(235,30,27)" fg:x="898" fg:w="5"/><text x="72.1475%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="72.2178%" y="501" width="0.0801%" height="15" fill="rgb(220,183,50)" fg:x="902" fg:w="1"/><text x="72.4678%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.2178%" y="485" width="0.0801%" height="15" fill="rgb(248,198,15)" fg:x="902" fg:w="1"/><text x="72.4678%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2978%" y="485" width="0.0801%" height="15" fill="rgb(222,211,4)" fg:x="903" fg:w="1"/><text x="72.5478%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2978%" y="469" width="0.0801%" height="15" fill="rgb(214,102,34)" fg:x="903" fg:w="1"/><text x="72.5478%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2978%" y="453" width="0.0801%" height="15" fill="rgb(245,92,5)" fg:x="903" fg:w="1"/><text x="72.5478%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.2978%" y="437" width="0.0801%" height="15" fill="rgb(252,72,51)" fg:x="903" fg:w="1"/><text x="72.5478%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.2978%" y="421" width="0.0801%" height="15" fill="rgb(252,208,19)" fg:x="903" fg:w="1"/><text x="72.5478%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.2978%" y="405" width="0.0801%" height="15" fill="rgb(211,69,7)" fg:x="903" fg:w="1"/><text x="72.5478%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.2978%" y="389" width="0.0801%" height="15" fill="rgb(211,27,16)" fg:x="903" fg:w="1"/><text x="72.5478%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.2978%" y="373" width="0.0801%" height="15" fill="rgb(219,216,14)" fg:x="903" fg:w="1"/><text x="72.5478%" y="383.50"></text></g><g><title>engine::session::Session::captured (409 samples, 32.75%)</title><rect x="39.7918%" y="693" width="32.7462%" height="15" fill="rgb(219,71,8)" fg:x="497" fg:w="409"/><text x="40.0418%" y="703.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (405 samples, 32.43%)</title><rect x="40.1121%" y="677" width="32.4259%" height="15" fill="rgb(223,170,53)" fg:x="501" fg:w="405"/><text x="40.3621%" y="687.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (402 samples, 32.19%)</title><rect x="40.3523%" y="661" width="32.1857%" height="15" fill="rgb(246,21,26)" fg:x="504" fg:w="402"/><text x="40.6023%" y="671.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (402 samples, 32.19%)</title><rect x="40.3523%" y="645" width="32.1857%" height="15" fill="rgb(248,20,46)" fg:x="504" fg:w="402"/><text x="40.6023%" y="655.50">&lt;engine::session::Session as kernel::actions::Perfor..</text></g><g><title>kernel::plugins::mw::apply_middleware (401 samples, 32.11%)</title><rect x="40.4323%" y="629" width="32.1057%" height="15" fill="rgb(252,94,11)" fg:x="505" fg:w="401"/><text x="40.6823%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (401 samples, 32.11%)</title><rect x="40.4323%" y="613" width="32.1057%" height="15" fill="rgb(236,163,8)" fg:x="505" fg:w="401"/><text x="40.6823%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (401 samples, 32.11%)</title><rect x="40.4323%" y="597" width="32.1057%" height="15" fill="rgb(217,221,45)" fg:x="505" fg:w="401"/><text x="40.6823%" y="607.50">&lt;engine::session::ExpandSurroundingsMiddleware as ke..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (376 samples, 30.10%)</title><rect x="42.4339%" y="581" width="30.1041%" height="15" fill="rgb(238,38,17)" fg:x="530" fg:w="376"/><text x="42.6839%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (376 samples, 30.10%)</title><rect x="42.4339%" y="565" width="30.1041%" height="15" fill="rgb(242,210,23)" fg:x="530" fg:w="376"/><text x="42.6839%" y="575.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins:..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (24 samples, 1.92%)</title><rect x="70.6165%" y="549" width="1.9215%" height="15" fill="rgb(250,86,53)" fg:x="882" fg:w="24"/><text x="70.8665%" y="559.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (24 samples, 1.92%)</title><rect x="70.6165%" y="533" width="1.9215%" height="15" fill="rgb(223,168,25)" fg:x="882" fg:w="24"/><text x="70.8665%" y="543.50">p..</text></g><g><title>plugins_core::tools::worn_by (3 samples, 0.24%)</title><rect x="72.2978%" y="517" width="0.2402%" height="15" fill="rgb(251,189,4)" fg:x="903" fg:w="3"/><text x="72.5478%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="72.2978%" y="501" width="0.2402%" height="15" fill="rgb(245,19,28)" fg:x="903" fg:w="3"/><text x="72.5478%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.3779%" y="485" width="0.1601%" height="15" fill="rgb(207,10,34)" fg:x="904" fg:w="2"/><text x="72.6279%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.3779%" y="469" width="0.1601%" height="15" fill="rgb(235,153,31)" fg:x="904" fg:w="2"/><text x="72.6279%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.4580%" y="453" width="0.0801%" height="15" fill="rgb(228,72,37)" fg:x="905" fg:w="1"/><text x="72.7080%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="72.5380%" y="677" width="0.0801%" height="15" fill="rgb(215,15,16)" fg:x="906" fg:w="1"/><text x="72.7880%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.5380%" y="661" width="0.0801%" height="15" fill="rgb(250,119,29)" fg:x="906" fg:w="1"/><text x="72.7880%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.5380%" y="645" width="0.0801%" height="15" fill="rgb(214,59,1)" fg:x="906" fg:w="1"/><text x="72.7880%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.5380%" y="629" width="0.0801%" height="15" fill="rgb(223,109,25)" fg:x="906" fg:w="1"/><text x="72.7880%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.5380%" y="613" width="0.0801%" height="15" fill="rgb(230,198,22)" fg:x="906" fg:w="1"/><text x="72.7880%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.5380%" y="597" width="0.0801%" height="15" fill="rgb(245,184,46)" fg:x="906" fg:w="1"/><text x="72.7880%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.5380%" y="581" width="0.0801%" height="15" fill="rgb(253,73,16)" fg:x="906" fg:w="1"/><text x="72.7880%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.5380%" y="565" width="0.0801%" height="15" fill="rgb(206,94,45)" fg:x="906" fg:w="1"/><text x="72.7880%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="72.6181%" y="677" width="0.0801%" height="15" fill="rgb(236,83,27)" fg:x="907" fg:w="1"/><text x="72.8681%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.6982%" y="661" width="0.0801%" height="15" fill="rgb(220,196,8)" fg:x="908" fg:w="1"/><text x="72.9482%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="72.6982%" y="645" width="0.0801%" height="15" fill="rgb(254,185,14)" fg:x="908" fg:w="1"/><text x="72.9482%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.6982%" y="629" width="0.0801%" height="15" fill="rgb(226,50,22)" fg:x="908" fg:w="1"/><text x="72.9482%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.7782%" y="581" width="0.0801%" height="15" fill="rgb(253,147,0)" fg:x="909" fg:w="1"/><text x="73.0282%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.7782%" y="597" width="0.1601%" height="15" fill="rgb(252,46,33)" fg:x="909" fg:w="2"/><text x="73.0282%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8583%" y="581" width="0.0801%" height="15" fill="rgb(242,22,54)" fg:x="910" fg:w="1"/><text x="73.1083%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.7782%" y="645" width="0.2402%" height="15" fill="rgb(223,178,32)" fg:x="909" fg:w="3"/><text x="73.0282%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.7782%" y="629" width="0.2402%" height="15" fill="rgb(214,106,53)" fg:x="909" fg:w="3"/><text x="73.0282%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.7782%" y="613" width="0.2402%" height="15" fill="rgb(232,65,50)" fg:x="909" fg:w="3"/><text x="73.0282%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.9384%" y="597" width="0.0801%" height="15" fill="rgb(231,110,28)" fg:x="911" fg:w="1"/><text x="73.1884%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.9384%" y="581" width="0.0801%" height="15" fill="rgb(216,71,40)" fg:x="911" fg:w="1"/><text x="73.1884%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.9384%" y="565" width="0.0801%" height="15" fill="rgb(229,89,53)" fg:x="911" fg:w="1"/><text x="73.1884%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.9384%" y="549" width="0.0801%" height="15" fill="rgb(210,124,14)" fg:x="911" fg:w="1"/><text x="73.1884%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.9384%" y="533" width="0.0801%" height="15" fill="rgb(236,213,6)" fg:x="911" fg:w="1"/><text x="73.1884%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.9384%" y="517" width="0.0801%" height="15" fill="rgb(228,41,5)" fg:x="911" fg:w="1"/><text x="73.1884%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.9384%" y="501" width="0.0801%" height="15" fill="rgb(221,167,25)" fg:x="911" fg:w="1"/><text x="73.1884%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.9384%" y="485" width="0.0801%" height="15" fill="rgb(228,144,37)" fg:x="911" fg:w="1"/><text x="73.1884%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.9384%" y="469" width="0.0801%" height="15" fill="rgb(227,189,38)" fg:x="911" fg:w="1"/><text x="73.1884%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.9384%" y="453" width="0.0801%" height="15" fill="rgb(218,8,2)" fg:x="911" fg:w="1"/><text x="73.1884%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.9384%" y="437" width="0.0801%" height="15" fill="rgb(209,61,28)" fg:x="911" fg:w="1"/><text x="73.1884%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.9384%" y="421" width="0.0801%" height="15" fill="rgb(233,140,39)" fg:x="911" fg:w="1"/><text x="73.1884%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.9384%" y="405" width="0.0801%" height="15" fill="rgb(251,66,48)" fg:x="911" fg:w="1"/><text x="73.1884%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="72.9384%" y="389" width="0.0801%" height="15" fill="rgb(210,44,45)" fg:x="911" fg:w="1"/><text x="73.1884%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="72.9384%" y="373" width="0.0801%" height="15" fill="rgb(214,136,46)" fg:x="911" fg:w="1"/><text x="73.1884%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.0184%" y="597" width="0.0801%" height="15" fill="rgb(207,130,50)" fg:x="912" fg:w="1"/><text x="73.2684%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.0184%" y="581" width="0.0801%" height="15" fill="rgb(228,102,49)" fg:x="912" fg:w="1"/><text x="73.2684%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="73.0184%" y="565" width="0.0801%" height="15" fill="rgb(253,55,1)" fg:x="912" fg:w="1"/><text x="73.2684%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.0184%" y="549" width="0.0801%" height="15" fill="rgb(238,222,9)" fg:x="912" fg:w="1"/><text x="73.2684%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.0184%" y="533" width="0.0801%" height="15" fill="rgb(246,99,6)" fg:x="912" fg:w="1"/><text x="73.2684%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="73.0184%" y="517" width="0.0801%" height="15" fill="rgb(219,110,26)" fg:x="912" fg:w="1"/><text x="73.2684%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.0184%" y="501" width="0.0801%" height="15" fill="rgb(239,160,33)" fg:x="912" fg:w="1"/><text x="73.2684%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.0184%" y="485" width="0.0801%" height="15" fill="rgb(220,202,23)" fg:x="912" fg:w="1"/><text x="73.2684%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="73.0184%" y="469" width="0.0801%" height="15" fill="rgb(208,80,26)" fg:x="912" fg:w="1"/><text x="73.2684%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.0184%" y="453" width="0.0801%" height="15" fill="rgb(243,85,7)" fg:x="912" fg:w="1"/><text x="73.2684%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.0184%" y="437" width="0.0801%" height="15" fill="rgb(228,77,47)" fg:x="912" fg:w="1"/><text x="73.2684%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.0985%" y="597" width="0.0801%" height="15" fill="rgb(212,226,8)" fg:x="913" fg:w="1"/><text x="73.3485%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="73.0184%" y="645" width="0.2402%" height="15" fill="rgb(241,120,54)" fg:x="912" fg:w="3"/><text x="73.2684%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="73.0184%" y="629" width="0.2402%" height="15" fill="rgb(226,80,16)" fg:x="912" fg:w="3"/><text x="73.2684%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="73.0184%" y="613" width="0.2402%" height="15" fill="rgb(240,76,13)" fg:x="912" fg:w="3"/><text x="73.2684%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1785%" y="597" width="0.0801%" height="15" fill="rgb(252,74,8)" fg:x="914" fg:w="1"/><text x="73.4285%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1785%" y="581" width="0.0801%" height="15" fill="rgb(244,155,2)" fg:x="914" fg:w="1"/><text x="73.4285%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1785%" y="565" width="0.0801%" height="15" fill="rgb(215,81,35)" fg:x="914" fg:w="1"/><text x="73.4285%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.1785%" y="549" width="0.0801%" height="15" fill="rgb(206,55,2)" fg:x="914" fg:w="1"/><text x="73.4285%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1785%" y="533" width="0.0801%" height="15" fill="rgb(231,2,34)" fg:x="914" fg:w="1"/><text x="73.4285%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1785%" y="517" width="0.0801%" height="15" fill="rgb(242,176,48)" fg:x="914" fg:w="1"/><text x="73.4285%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.1785%" y="501" width="0.0801%" height="15" fill="rgb(249,31,36)" fg:x="914" fg:w="1"/><text x="73.4285%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1785%" y="485" width="0.0801%" height="15" fill="rgb(205,18,17)" fg:x="914" fg:w="1"/><text x="73.4285%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2586%" y="581" width="0.0801%" height="15" fill="rgb(254,130,5)" fg:x="915" fg:w="1"/><text x="73.5086%" y="591.50"></text></g><g><title>engine::session::internal::Added::find_refs (11 samples, 0.88%)</title><rect x="72.6982%" y="677" width="0.8807%" height="15" fill="rgb(229,42,45)" fg:x="908" fg:w="11"/><text x="72.9482%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (10 samples, 0.80%)</title><rect x="72.7782%" y="661" width="0.8006%" height="15" fill="rgb(245,95,25)" fg:x="909" fg:w="10"/><text x="73.0282%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="73.2586%" y="645" width="0.3203%" height="15" fill="rgb(249,193,38)" fg:x="915" fg:w="4"/><text x="73.5086%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="73.2586%" y="629" width="0.3203%" height="15" fill="rgb(241,140,43)" fg:x="915" fg:w="4"/><text x="73.5086%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="73.2586%" y="613" width="0.3203%" height="15" fill="rgb(245,78,48)" fg:x="915" fg:w="4"/><text x="73.5086%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="73.2586%" y="597" width="0.3203%" height="15" fill="rgb(214,92,39)" fg:x="915" fg:w="4"/><text x="73.5086%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="73.3387%" y="581" width="0.2402%" height="15" fill="rgb(211,189,14)" fg:x="916" fg:w="3"/><text x="73.5887%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4988%" y="565" width="0.0801%" height="15" fill="rgb(218,7,24)" fg:x="918" fg:w="1"/><text x="73.7488%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4988%" y="549" width="0.0801%" height="15" fill="rgb(224,200,49)" fg:x="918" fg:w="1"/><text x="73.7488%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.4988%" y="533" width="0.0801%" height="15" fill="rgb(218,210,14)" fg:x="918" fg:w="1"/><text x="73.7488%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4988%" y="517" width="0.0801%" height="15" fill="rgb(234,142,31)" fg:x="918" fg:w="1"/><text x="73.7488%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5789%" y="645" width="0.0801%" height="15" fill="rgb(227,165,2)" fg:x="919" fg:w="1"/><text x="73.8289%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5789%" y="629" width="0.0801%" height="15" fill="rgb(232,44,46)" fg:x="919" fg:w="1"/><text x="73.8289%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5789%" y="613" width="0.0801%" height="15" fill="rgb(236,149,47)" fg:x="919" fg:w="1"/><text x="73.8289%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.5789%" y="661" width="0.1601%" height="15" fill="rgb(227,45,31)" fg:x="919" fg:w="2"/><text x="73.8289%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6589%" y="645" width="0.0801%" height="15" fill="rgb(240,176,51)" fg:x="920" fg:w="1"/><text x="73.9089%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6589%" y="629" width="0.0801%" height="15" fill="rgb(249,146,41)" fg:x="920" fg:w="1"/><text x="73.9089%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.6589%" y="613" width="0.0801%" height="15" fill="rgb(213,208,4)" fg:x="920" fg:w="1"/><text x="73.9089%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.6589%" y="597" width="0.0801%" height="15" fill="rgb(245,84,36)" fg:x="920" fg:w="1"/><text x="73.9089%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.6589%" y="581" width="0.0801%" height="15" fill="rgb(254,84,18)" fg:x="920" fg:w="1"/><text x="73.9089%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.6589%" y="565" width="0.0801%" height="15" fill="rgb(225,38,54)" fg:x="920" fg:w="1"/><text x="73.9089%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.6589%" y="549" width="0.0801%" height="15" fill="rgb(246,50,30)" fg:x="920" fg:w="1"/><text x="73.9089%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.6589%" y="533" width="0.0801%" height="15" fill="rgb(246,148,9)" fg:x="920" fg:w="1"/><text x="73.9089%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.6589%" y="517" width="0.0801%" height="15" fill="rgb(223,75,4)" fg:x="920" fg:w="1"/><text x="73.9089%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.6589%" y="501" width="0.0801%" height="15" fill="rgb(239,148,41)" fg:x="920" fg:w="1"/><text x="73.9089%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.6589%" y="485" width="0.0801%" height="15" fill="rgb(205,195,3)" fg:x="920" fg:w="1"/><text x="73.9089%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6589%" y="469" width="0.0801%" height="15" fill="rgb(254,161,1)" fg:x="920" fg:w="1"/><text x="73.9089%" y="479.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.7390%" y="661" width="0.0801%" height="15" fill="rgb(211,229,8)" fg:x="921" fg:w="1"/><text x="73.9890%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7390%" y="645" width="0.0801%" height="15" fill="rgb(220,97,9)" fg:x="921" fg:w="1"/><text x="73.9890%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.8191%" y="581" width="0.1601%" height="15" fill="rgb(240,218,8)" fg:x="922" fg:w="2"/><text x="74.0691%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.9792%" y="565" width="0.1601%" height="15" fill="rgb(250,44,0)" fg:x="924" fg:w="2"/><text x="74.2292%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.9792%" y="549" width="0.1601%" height="15" fill="rgb(236,41,53)" fg:x="924" fg:w="2"/><text x="74.2292%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.0592%" y="533" width="0.0801%" height="15" fill="rgb(218,227,13)" fg:x="925" fg:w="1"/><text x="74.3092%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.0592%" y="517" width="0.0801%" height="15" fill="rgb(217,94,32)" fg:x="925" fg:w="1"/><text x="74.3092%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="73.8191%" y="613" width="0.4804%" height="15" fill="rgb(213,217,12)" fg:x="922" fg:w="6"/><text x="74.0691%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="73.8191%" y="597" width="0.4804%" height="15" fill="rgb(229,13,46)" fg:x="922" fg:w="6"/><text x="74.0691%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="73.9792%" y="581" width="0.3203%" height="15" fill="rgb(243,139,5)" fg:x="924" fg:w="4"/><text x="74.2292%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.1393%" y="565" width="0.1601%" height="15" fill="rgb(249,38,45)" fg:x="926" fg:w="2"/><text x="74.3893%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.1393%" y="549" width="0.1601%" height="15" fill="rgb(216,70,11)" fg:x="926" fg:w="2"/><text x="74.3893%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="74.2194%" y="533" width="0.0801%" height="15" fill="rgb(253,101,25)" fg:x="927" fg:w="1"/><text x="74.4694%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.2194%" y="517" width="0.0801%" height="15" fill="rgb(207,197,30)" fg:x="927" fg:w="1"/><text x="74.4694%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.2194%" y="501" width="0.0801%" height="15" fill="rgb(238,87,13)" fg:x="927" fg:w="1"/><text x="74.4694%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="73.8191%" y="661" width="0.6405%" height="15" fill="rgb(215,155,8)" fg:x="922" fg:w="8"/><text x="74.0691%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="73.8191%" y="645" width="0.6405%" height="15" fill="rgb(239,166,38)" fg:x="922" fg:w="8"/><text x="74.0691%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="73.8191%" y="629" width="0.6405%" height="15" fill="rgb(240,194,35)" fg:x="922" fg:w="8"/><text x="74.0691%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.2994%" y="613" width="0.1601%" height="15" fill="rgb(219,10,44)" fg:x="928" fg:w="2"/><text x="74.5494%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.2994%" y="597" width="0.1601%" height="15" fill="rgb(251,220,35)" fg:x="928" fg:w="2"/><text x="74.5494%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.3795%" y="581" width="0.0801%" height="15" fill="rgb(218,117,13)" fg:x="929" fg:w="1"/><text x="74.6295%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.6197%" y="517" width="0.0801%" height="15" fill="rgb(221,213,40)" fg:x="932" fg:w="1"/><text x="74.8697%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6197%" y="501" width="0.0801%" height="15" fill="rgb(251,224,35)" fg:x="932" fg:w="1"/><text x="74.8697%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.6197%" y="485" width="0.0801%" height="15" fill="rgb(241,33,39)" fg:x="932" fg:w="1"/><text x="74.8697%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.5396%" y="549" width="0.2402%" height="15" fill="rgb(222,74,17)" fg:x="931" fg:w="3"/><text x="74.7896%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.5396%" y="533" width="0.2402%" height="15" fill="rgb(225,103,0)" fg:x="931" fg:w="3"/><text x="74.7896%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.6998%" y="517" width="0.0801%" height="15" fill="rgb(240,0,12)" fg:x="933" fg:w="1"/><text x="74.9498%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6998%" y="501" width="0.0801%" height="15" fill="rgb(233,213,37)" fg:x="933" fg:w="1"/><text x="74.9498%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6998%" y="485" width="0.0801%" height="15" fill="rgb(225,84,52)" fg:x="933" fg:w="1"/><text x="74.9498%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.5396%" y="565" width="0.3203%" height="15" fill="rgb(247,160,51)" fg:x="931" fg:w="4"/><text x="74.7896%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7798%" y="549" width="0.0801%" height="15" fill="rgb(244,60,51)" fg:x="934" fg:w="1"/><text x="75.0298%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="74.4596%" y="597" width="0.4804%" height="15" fill="rgb(233,114,7)" fg:x="930" fg:w="6"/><text x="74.7096%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="74.4596%" y="581" width="0.4804%" height="15" fill="rgb(246,136,16)" fg:x="930" fg:w="6"/><text x="74.7096%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.8599%" y="565" width="0.0801%" height="15" fill="rgb(243,114,45)" fg:x="935" fg:w="1"/><text x="75.1099%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (31 samples, 2.48%)</title><rect x="72.5380%" y="693" width="2.4820%" height="15" fill="rgb(247,183,43)" fg:x="906" fg:w="31"/><text x="72.7880%" y="703.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (18 samples, 1.44%)</title><rect x="73.5789%" y="677" width="1.4412%" height="15" fill="rgb(251,210,42)" fg:x="919" fg:w="18"/><text x="73.8289%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="74.4596%" y="661" width="0.5604%" height="15" fill="rgb(221,88,35)" fg:x="930" fg:w="7"/><text x="74.7096%" y="671.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="74.4596%" y="645" width="0.5604%" height="15" fill="rgb(242,21,20)" fg:x="930" fg:w="7"/><text x="74.7096%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="74.4596%" y="629" width="0.5604%" height="15" fill="rgb(233,226,36)" fg:x="930" fg:w="7"/><text x="74.7096%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="74.4596%" y="613" width="0.5604%" height="15" fill="rgb(243,189,34)" fg:x="930" fg:w="7"/><text x="74.7096%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.9400%" y="597" width="0.0801%" height="15" fill="rgb(207,145,50)" fg:x="936" fg:w="1"/><text x="75.1900%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="75.0200%" y="645" width="0.3203%" height="15" fill="rgb(242,1,50)" fg:x="937" fg:w="4"/><text x="75.2700%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="75.1001%" y="629" width="0.2402%" height="15" fill="rgb(231,65,32)" fg:x="938" fg:w="3"/><text x="75.3501%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2602%" y="613" width="0.0801%" height="15" fill="rgb(208,68,49)" fg:x="940" fg:w="1"/><text x="75.5102%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2602%" y="597" width="0.0801%" height="15" fill="rgb(253,54,49)" fg:x="940" fg:w="1"/><text x="75.5102%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2602%" y="581" width="0.0801%" height="15" fill="rgb(245,186,24)" fg:x="940" fg:w="1"/><text x="75.5102%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2602%" y="565" width="0.0801%" height="15" fill="rgb(209,2,41)" fg:x="940" fg:w="1"/><text x="75.5102%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.2602%" y="549" width="0.0801%" height="15" fill="rgb(242,208,54)" fg:x="940" fg:w="1"/><text x="75.5102%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.2602%" y="533" width="0.0801%" height="15" fill="rgb(225,9,51)" fg:x="940" fg:w="1"/><text x="75.5102%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.2602%" y="517" width="0.0801%" height="15" fill="rgb(207,207,25)" fg:x="940" fg:w="1"/><text x="75.5102%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2602%" y="501" width="0.0801%" height="15" fill="rgb(253,96,18)" fg:x="940" fg:w="1"/><text x="75.5102%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2602%" y="485" width="0.0801%" height="15" fill="rgb(252,215,20)" fg:x="940" fg:w="1"/><text x="75.5102%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.2602%" y="469" width="0.0801%" height="15" fill="rgb(245,227,26)" fg:x="940" fg:w="1"/><text x="75.5102%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.2602%" y="453" width="0.0801%" height="15" fill="rgb(241,208,0)" fg:x="940" fg:w="1"/><text x="75.5102%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.2602%" y="437" width="0.0801%" height="15" fill="rgb(224,130,10)" fg:x="940" fg:w="1"/><text x="75.5102%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.2602%" y="421" width="0.0801%" height="15" fill="rgb(237,29,0)" fg:x="940" fg:w="1"/><text x="75.5102%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2602%" y="405" width="0.0801%" height="15" fill="rgb(219,27,41)" fg:x="940" fg:w="1"/><text x="75.5102%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3403%" y="629" width="0.0801%" height="15" fill="rgb(245,101,19)" fg:x="941" fg:w="1"/><text x="75.5903%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3403%" y="613" width="0.0801%" height="15" fill="rgb(243,44,37)" fg:x="941" fg:w="1"/><text x="75.5903%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3403%" y="597" width="0.0801%" height="15" fill="rgb(228,213,43)" fg:x="941" fg:w="1"/><text x="75.5903%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="75.3403%" y="645" width="0.1601%" height="15" fill="rgb(219,163,21)" fg:x="941" fg:w="2"/><text x="75.5903%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.4203%" y="629" width="0.0801%" height="15" fill="rgb(234,86,24)" fg:x="942" fg:w="1"/><text x="75.6703%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4203%" y="613" width="0.0801%" height="15" fill="rgb(225,10,24)" fg:x="942" fg:w="1"/><text x="75.6703%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.4203%" y="597" width="0.0801%" height="15" fill="rgb(218,109,7)" fg:x="942" fg:w="1"/><text x="75.6703%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4203%" y="581" width="0.0801%" height="15" fill="rgb(210,20,26)" fg:x="942" fg:w="1"/><text x="75.6703%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.4203%" y="565" width="0.0801%" height="15" fill="rgb(216,18,1)" fg:x="942" fg:w="1"/><text x="75.6703%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4203%" y="549" width="0.0801%" height="15" fill="rgb(206,163,23)" fg:x="942" fg:w="1"/><text x="75.6703%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.4203%" y="533" width="0.0801%" height="15" fill="rgb(229,150,31)" fg:x="942" fg:w="1"/><text x="75.6703%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5004%" y="597" width="0.0801%" height="15" fill="rgb(231,10,5)" fg:x="943" fg:w="1"/><text x="75.7504%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.5805%" y="549" width="0.1601%" height="15" fill="rgb(250,40,50)" fg:x="944" fg:w="2"/><text x="75.8305%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.5805%" y="533" width="0.1601%" height="15" fill="rgb(217,119,7)" fg:x="944" fg:w="2"/><text x="75.8305%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.5805%" y="517" width="0.1601%" height="15" fill="rgb(245,214,40)" fg:x="944" fg:w="2"/><text x="75.8305%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.5805%" y="501" width="0.1601%" height="15" fill="rgb(216,187,1)" fg:x="944" fg:w="2"/><text x="75.8305%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="75.6605%" y="485" width="0.0801%" height="15" fill="rgb(237,146,21)" fg:x="945" fg:w="1"/><text x="75.9105%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.6605%" y="469" width="0.0801%" height="15" fill="rgb(210,174,47)" fg:x="945" fg:w="1"/><text x="75.9105%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.6605%" y="453" width="0.0801%" height="15" fill="rgb(218,111,39)" fg:x="945" fg:w="1"/><text x="75.9105%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="75.5004%" y="645" width="0.3203%" height="15" fill="rgb(224,95,19)" fg:x="943" fg:w="4"/><text x="75.7504%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="75.5004%" y="629" width="0.3203%" height="15" fill="rgb(234,15,38)" fg:x="943" fg:w="4"/><text x="75.7504%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="75.5004%" y="613" width="0.3203%" height="15" fill="rgb(246,56,12)" fg:x="943" fg:w="4"/><text x="75.7504%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="75.5805%" y="597" width="0.2402%" height="15" fill="rgb(247,16,17)" fg:x="944" fg:w="3"/><text x="75.8305%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="75.5805%" y="581" width="0.2402%" height="15" fill="rgb(215,151,11)" fg:x="944" fg:w="3"/><text x="75.8305%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="75.5805%" y="565" width="0.2402%" height="15" fill="rgb(225,16,24)" fg:x="944" fg:w="3"/><text x="75.8305%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.7406%" y="549" width="0.0801%" height="15" fill="rgb(217,117,5)" fg:x="946" fg:w="1"/><text x="75.9906%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.7406%" y="533" width="0.0801%" height="15" fill="rgb(246,187,53)" fg:x="946" fg:w="1"/><text x="75.9906%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.7406%" y="517" width="0.0801%" height="15" fill="rgb(241,71,40)" fg:x="946" fg:w="1"/><text x="75.9906%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="75.7406%" y="501" width="0.0801%" height="15" fill="rgb(231,67,39)" fg:x="946" fg:w="1"/><text x="75.9906%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.9007%" y="517" width="0.1601%" height="15" fill="rgb(222,120,24)" fg:x="948" fg:w="2"/><text x="76.1507%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.9007%" y="501" width="0.1601%" height="15" fill="rgb(248,3,3)" fg:x="948" fg:w="2"/><text x="76.1507%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.9007%" y="485" width="0.1601%" height="15" fill="rgb(228,218,5)" fg:x="948" fg:w="2"/><text x="76.1507%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.9007%" y="469" width="0.1601%" height="15" fill="rgb(212,202,43)" fg:x="948" fg:w="2"/><text x="76.1507%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9808%" y="453" width="0.0801%" height="15" fill="rgb(235,183,2)" fg:x="949" fg:w="1"/><text x="76.2308%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9808%" y="437" width="0.0801%" height="15" fill="rgb(230,165,10)" fg:x="949" fg:w="1"/><text x="76.2308%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9808%" y="421" width="0.0801%" height="15" fill="rgb(219,54,40)" fg:x="949" fg:w="1"/><text x="76.2308%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.9007%" y="549" width="0.2402%" height="15" fill="rgb(244,73,9)" fg:x="948" fg:w="3"/><text x="76.1507%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.9007%" y="533" width="0.2402%" height="15" fill="rgb(212,32,45)" fg:x="948" fg:w="3"/><text x="76.1507%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.0608%" y="517" width="0.0801%" height="15" fill="rgb(205,58,31)" fg:x="950" fg:w="1"/><text x="76.3108%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.0608%" y="501" width="0.0801%" height="15" fill="rgb(250,120,43)" fg:x="950" fg:w="1"/><text x="76.3108%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="75.9007%" y="581" width="0.3203%" height="15" fill="rgb(235,13,10)" fg:x="948" fg:w="4"/><text x="76.1507%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="75.9007%" y="565" width="0.3203%" height="15" fill="rgb(232,219,31)" fg:x="948" fg:w="4"/><text x="76.1507%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1409%" y="549" width="0.0801%" height="15" fill="rgb(218,157,51)" fg:x="951" fg:w="1"/><text x="76.3909%" y="559.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (463 samples, 37.07%)</title><rect x="39.2314%" y="725" width="37.0697%" height="15" fill="rgb(211,91,52)" fg:x="490" fg:w="463"/><text x="39.4814%" y="735.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (462 samples, 36.99%)</title><rect x="39.3114%" y="709" width="36.9896%" height="15" fill="rgb(240,173,1)" fg:x="491" fg:w="462"/><text x="39.5614%" y="719.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (16 samples, 1.28%)</title><rect x="75.0200%" y="693" width="1.2810%" height="15" fill="rgb(248,20,47)" fg:x="937" fg:w="16"/><text x="75.2700%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.28%)</title><rect x="75.0200%" y="677" width="1.2810%" height="15" fill="rgb(217,221,40)" fg:x="937" fg:w="16"/><text x="75.2700%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.28%)</title><rect x="75.0200%" y="661" width="1.2810%" height="15" fill="rgb(226,149,51)" fg:x="937" fg:w="16"/><text x="75.2700%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="75.8207%" y="645" width="0.4804%" height="15" fill="rgb(252,193,7)" fg:x="947" fg:w="6"/><text x="76.0707%" y="655.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="75.8207%" y="629" width="0.4804%" height="15" fill="rgb(205,123,0)" fg:x="947" fg:w="6"/><text x="76.0707%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="75.9007%" y="613" width="0.4003%" height="15" fill="rgb(233,173,25)" fg:x="948" fg:w="5"/><text x="76.1507%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="75.9007%" y="597" width="0.4003%" height="15" fill="rgb(216,63,32)" fg:x="948" fg:w="5"/><text x="76.1507%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.2210%" y="581" width="0.0801%" height="15" fill="rgb(209,56,45)" fg:x="952" fg:w="1"/><text x="76.4710%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2210%" y="565" width="0.0801%" height="15" fill="rgb(226,111,49)" fg:x="952" fg:w="1"/><text x="76.4710%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (955 samples, 76.46%)</title><rect x="0.0000%" y="773" width="76.4612%" height="15" fill="rgb(244,181,21)" fg:x="0" fg:w="955"/><text x="0.2500%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (955 samples, 76.46%)</title><rect x="0.0000%" y="757" width="76.4612%" height="15" fill="rgb(222,126,15)" fg:x="0" fg:w="955"/><text x="0.2500%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (955 samples, 76.46%)</title><rect x="0.0000%" y="741" width="76.4612%" height="15" fill="rgb(222,95,17)" fg:x="0" fg:w="955"/><text x="0.2500%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (2 samples, 0.16%)</title><rect x="76.3010%" y="725" width="0.1601%" height="15" fill="rgb(254,46,5)" fg:x="953" fg:w="2"/><text x="76.5510%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6213%" y="645" width="0.0801%" height="15" fill="rgb(236,216,35)" fg:x="957" fg:w="1"/><text x="76.8713%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.6213%" y="709" width="0.1601%" height="15" fill="rgb(217,187,26)" fg:x="957" fg:w="2"/><text x="76.8713%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="76.6213%" y="693" width="0.1601%" height="15" fill="rgb(207,192,25)" fg:x="957" fg:w="2"/><text x="76.8713%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="76.6213%" y="677" width="0.1601%" height="15" fill="rgb(253,135,27)" fg:x="957" fg:w="2"/><text x="76.8713%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="76.6213%" y="661" width="0.1601%" height="15" fill="rgb(211,122,29)" fg:x="957" fg:w="2"/><text x="76.8713%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="76.7014%" y="645" width="0.0801%" height="15" fill="rgb(233,162,40)" fg:x="958" fg:w="1"/><text x="76.9514%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7014%" y="629" width="0.0801%" height="15" fill="rgb(222,184,47)" fg:x="958" fg:w="1"/><text x="76.9514%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.0216%" y="613" width="0.0801%" height="15" fill="rgb(249,99,23)" fg:x="962" fg:w="1"/><text x="77.2716%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="77.1017%" y="597" width="0.1601%" height="15" fill="rgb(214,60,12)" fg:x="963" fg:w="2"/><text x="77.3517%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="76.8615%" y="645" width="0.4804%" height="15" fill="rgb(250,229,36)" fg:x="960" fg:w="6"/><text x="77.1115%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="76.8615%" y="629" width="0.4804%" height="15" fill="rgb(232,195,10)" fg:x="960" fg:w="6"/><text x="77.1115%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.1017%" y="613" width="0.2402%" height="15" fill="rgb(205,213,31)" fg:x="963" fg:w="3"/><text x="77.3517%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.2618%" y="597" width="0.0801%" height="15" fill="rgb(237,43,8)" fg:x="965" fg:w="1"/><text x="77.5118%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2618%" y="581" width="0.0801%" height="15" fill="rgb(216,208,3)" fg:x="965" fg:w="1"/><text x="77.5118%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.5020%" y="613" width="0.0801%" height="15" fill="rgb(228,179,44)" fg:x="968" fg:w="1"/><text x="77.7520%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5020%" y="597" width="0.0801%" height="15" fill="rgb(230,192,27)" fg:x="968" fg:w="1"/><text x="77.7520%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6621%" y="565" width="0.0801%" height="15" fill="rgb(251,30,38)" fg:x="970" fg:w="1"/><text x="77.9121%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="77.6621%" y="597" width="0.1601%" height="15" fill="rgb(246,55,52)" fg:x="970" fg:w="2"/><text x="77.9121%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="77.6621%" y="581" width="0.1601%" height="15" fill="rgb(249,79,26)" fg:x="970" fg:w="2"/><text x="77.9121%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7422%" y="565" width="0.0801%" height="15" fill="rgb(220,202,16)" fg:x="971" fg:w="1"/><text x="77.9922%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7422%" y="549" width="0.0801%" height="15" fill="rgb(250,170,23)" fg:x="971" fg:w="1"/><text x="77.9922%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7422%" y="533" width="0.0801%" height="15" fill="rgb(230,7,37)" fg:x="971" fg:w="1"/><text x="77.9922%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8223%" y="581" width="0.0801%" height="15" fill="rgb(213,71,1)" fg:x="972" fg:w="1"/><text x="78.0723%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.52%)</title><rect x="76.4612%" y="725" width="1.5212%" height="15" fill="rgb(227,87,39)" fg:x="955" fg:w="19"/><text x="76.7112%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (15 samples, 1.20%)</title><rect x="76.7814%" y="709" width="1.2010%" height="15" fill="rgb(210,41,29)" fg:x="959" fg:w="15"/><text x="77.0314%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.12%)</title><rect x="76.8615%" y="693" width="1.1209%" height="15" fill="rgb(206,191,31)" fg:x="960" fg:w="14"/><text x="77.1115%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (14 samples, 1.12%)</title><rect x="76.8615%" y="677" width="1.1209%" height="15" fill="rgb(247,75,54)" fg:x="960" fg:w="14"/><text x="77.1115%" y="687.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.12%)</title><rect x="76.8615%" y="661" width="1.1209%" height="15" fill="rgb(208,54,50)" fg:x="960" fg:w="14"/><text x="77.1115%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="77.3419%" y="645" width="0.6405%" height="15" fill="rgb(214,90,37)" fg:x="966" fg:w="8"/><text x="77.5919%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="77.5020%" y="629" width="0.4804%" height="15" fill="rgb(220,132,6)" fg:x="968" fg:w="6"/><text x="77.7520%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="77.5821%" y="613" width="0.4003%" height="15" fill="rgb(213,167,7)" fg:x="969" fg:w="5"/><text x="77.8321%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.8223%" y="597" width="0.1601%" height="15" fill="rgb(243,36,27)" fg:x="972" fg:w="2"/><text x="78.0723%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.9023%" y="581" width="0.0801%" height="15" fill="rgb(235,147,12)" fg:x="973" fg:w="1"/><text x="78.1523%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9023%" y="565" width="0.0801%" height="15" fill="rgb(212,198,44)" fg:x="973" fg:w="1"/><text x="78.1523%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.0624%" y="597" width="0.0801%" height="15" fill="rgb(218,68,50)" fg:x="975" fg:w="1"/><text x="78.3124%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.0624%" y="581" width="0.0801%" height="15" fill="rgb(224,79,48)" fg:x="975" fg:w="1"/><text x="78.3124%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.0624%" y="565" width="0.0801%" height="15" fill="rgb(213,191,50)" fg:x="975" fg:w="1"/><text x="78.3124%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.0624%" y="549" width="0.0801%" height="15" fill="rgb(254,146,10)" fg:x="975" fg:w="1"/><text x="78.3124%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.0624%" y="533" width="0.0801%" height="15" fill="rgb(215,175,11)" fg:x="975" fg:w="1"/><text x="78.3124%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.0624%" y="517" width="0.0801%" height="15" fill="rgb(207,49,7)" fg:x="975" fg:w="1"/><text x="78.3124%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.0624%" y="501" width="0.0801%" height="15" fill="rgb(234,144,29)" fg:x="975" fg:w="1"/><text x="78.3124%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.0624%" y="485" width="0.0801%" height="15" fill="rgb(213,222,48)" fg:x="975" fg:w="1"/><text x="78.3124%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.0624%" y="469" width="0.0801%" height="15" fill="rgb(222,8,6)" fg:x="975" fg:w="1"/><text x="78.3124%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.0624%" y="453" width="0.0801%" height="15" fill="rgb(221,114,49)" fg:x="975" fg:w="1"/><text x="78.3124%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.0624%" y="437" width="0.0801%" height="15" fill="rgb(250,140,42)" fg:x="975" fg:w="1"/><text x="78.3124%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0624%" y="421" width="0.0801%" height="15" fill="rgb(250,150,27)" fg:x="975" fg:w="1"/><text x="78.3124%" y="431.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="78.0624%" y="629" width="0.1601%" height="15" fill="rgb(252,159,3)" fg:x="975" fg:w="2"/><text x="78.3124%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="78.0624%" y="613" width="0.1601%" height="15" fill="rgb(241,182,3)" fg:x="975" fg:w="2"/><text x="78.3124%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.1425%" y="597" width="0.0801%" height="15" fill="rgb(236,3,9)" fg:x="976" fg:w="1"/><text x="78.3925%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1425%" y="581" width="0.0801%" height="15" fill="rgb(223,227,51)" fg:x="976" fg:w="1"/><text x="78.3925%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="78.0624%" y="645" width="0.4804%" height="15" fill="rgb(232,133,30)" fg:x="975" fg:w="6"/><text x="78.3124%" y="655.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (4 samples, 0.32%)</title><rect x="78.2226%" y="629" width="0.3203%" height="15" fill="rgb(209,93,27)" fg:x="977" fg:w="4"/><text x="78.4726%" y="639.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="78.2226%" y="613" width="0.3203%" height="15" fill="rgb(208,108,34)" fg:x="977" fg:w="4"/><text x="78.4726%" y="623.50"></text></g><g><title>glob::fill_todo (4 samples, 0.32%)</title><rect x="78.2226%" y="597" width="0.3203%" height="15" fill="rgb(215,189,13)" fg:x="977" fg:w="4"/><text x="78.4726%" y="607.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="78.2226%" y="581" width="0.3203%" height="15" fill="rgb(206,88,23)" fg:x="977" fg:w="4"/><text x="78.4726%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="78.2226%" y="565" width="0.3203%" height="15" fill="rgb(240,173,0)" fg:x="977" fg:w="4"/><text x="78.4726%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="78.2226%" y="549" width="0.3203%" height="15" fill="rgb(223,106,52)" fg:x="977" fg:w="4"/><text x="78.4726%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="78.2226%" y="533" width="0.3203%" height="15" fill="rgb(206,130,16)" fg:x="977" fg:w="4"/><text x="78.4726%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="78.2226%" y="517" width="0.3203%" height="15" fill="rgb(220,54,25)" fg:x="977" fg:w="4"/><text x="78.4726%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="78.2226%" y="501" width="0.3203%" height="15" fill="rgb(210,4,38)" fg:x="977" fg:w="4"/><text x="78.4726%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="78.2226%" y="485" width="0.3203%" height="15" fill="rgb(238,94,39)" fg:x="977" fg:w="4"/><text x="78.4726%" y="495.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="78.2226%" y="469" width="0.3203%" height="15" fill="rgb(234,124,34)" fg:x="977" fg:w="4"/><text x="78.4726%" y="479.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="78.6229%" y="581" width="0.0801%" height="15" fill="rgb(221,91,40)" fg:x="982" fg:w="1"/><text x="78.8729%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="78.6229%" y="565" width="0.0801%" height="15" fill="rgb(246,53,28)" fg:x="982" fg:w="1"/><text x="78.8729%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="78.7030%" y="581" width="0.0801%" height="15" fill="rgb(229,109,7)" fg:x="983" fg:w="1"/><text x="78.9530%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7030%" y="565" width="0.0801%" height="15" fill="rgb(249,117,8)" fg:x="983" fg:w="1"/><text x="78.9530%" y="575.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="78.6229%" y="613" width="0.2402%" height="15" fill="rgb(210,181,1)" fg:x="982" fg:w="3"/><text x="78.8729%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="78.6229%" y="597" width="0.2402%" height="15" fill="rgb(211,66,1)" fg:x="982" fg:w="3"/><text x="78.8729%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="78.7830%" y="581" width="0.0801%" height="15" fill="rgb(221,90,14)" fg:x="984" fg:w="1"/><text x="79.0330%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.7830%" y="565" width="0.0801%" height="15" fill="rgb(219,222,44)" fg:x="984" fg:w="1"/><text x="79.0330%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="78.8631%" y="581" width="0.0801%" height="15" fill="rgb(246,34,33)" fg:x="985" fg:w="1"/><text x="79.1131%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="78.8631%" y="565" width="0.0801%" height="15" fill="rgb(227,135,41)" fg:x="985" fg:w="1"/><text x="79.1131%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="78.8631%" y="613" width="0.1601%" height="15" fill="rgb(226,15,14)" fg:x="985" fg:w="2"/><text x="79.1131%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="78.8631%" y="597" width="0.1601%" height="15" fill="rgb(236,148,47)" fg:x="985" fg:w="2"/><text x="79.1131%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.9432%" y="581" width="0.0801%" height="15" fill="rgb(233,162,52)" fg:x="986" fg:w="1"/><text x="79.1932%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.9432%" y="565" width="0.0801%" height="15" fill="rgb(244,35,28)" fg:x="986" fg:w="1"/><text x="79.1932%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.9432%" y="549" width="0.0801%" height="15" fill="rgb(205,121,10)" fg:x="986" fg:w="1"/><text x="79.1932%" y="559.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="79.0232%" y="613" width="0.0801%" height="15" fill="rgb(250,58,18)" fg:x="987" fg:w="1"/><text x="79.2732%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="79.0232%" y="597" width="0.0801%" height="15" fill="rgb(216,37,13)" fg:x="987" fg:w="1"/><text x="79.2732%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="79.0232%" y="581" width="0.0801%" height="15" fill="rgb(221,215,42)" fg:x="987" fg:w="1"/><text x="79.2732%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1033%" y="581" width="0.0801%" height="15" fill="rgb(217,214,19)" fg:x="988" fg:w="1"/><text x="79.3533%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="79.1033%" y="613" width="0.1601%" height="15" fill="rgb(233,139,13)" fg:x="988" fg:w="2"/><text x="79.3533%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="79.1033%" y="597" width="0.1601%" height="15" fill="rgb(247,168,23)" fg:x="988" fg:w="2"/><text x="79.3533%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="79.1833%" y="581" width="0.0801%" height="15" fill="rgb(207,202,1)" fg:x="989" fg:w="1"/><text x="79.4333%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.36%)</title><rect x="77.9824%" y="661" width="1.3611%" height="15" fill="rgb(220,155,48)" fg:x="974" fg:w="17"/><text x="78.2324%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="78.5428%" y="645" width="0.8006%" height="15" fill="rgb(250,43,26)" fg:x="981" fg:w="10"/><text x="78.7928%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="78.5428%" y="629" width="0.8006%" height="15" fill="rgb(212,190,23)" fg:x="981" fg:w="10"/><text x="78.7928%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="79.2634%" y="613" width="0.0801%" height="15" fill="rgb(216,39,24)" fg:x="990" fg:w="1"/><text x="79.5134%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="79.2634%" y="597" width="0.0801%" height="15" fill="rgb(252,113,16)" fg:x="990" fg:w="1"/><text x="79.5134%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="79.2634%" y="581" width="0.0801%" height="15" fill="rgb(208,113,19)" fg:x="990" fg:w="1"/><text x="79.5134%" y="591.50"></text></g><g><title>engine::session::Session::initialize (18 samples, 1.44%)</title><rect x="77.9824%" y="677" width="1.4412%" height="15" fill="rgb(234,107,25)" fg:x="974" fg:w="18"/><text x="78.2324%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="79.3435%" y="661" width="0.0801%" height="15" fill="rgb(234,217,51)" fg:x="991" fg:w="1"/><text x="79.5935%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.3435%" y="645" width="0.0801%" height="15" fill="rgb(251,29,42)" fg:x="991" fg:w="1"/><text x="79.5935%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.3435%" y="629" width="0.0801%" height="15" fill="rgb(221,62,51)" fg:x="991" fg:w="1"/><text x="79.5935%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (20 samples, 1.60%)</title><rect x="77.9824%" y="725" width="1.6013%" height="15" fill="rgb(240,192,43)" fg:x="974" fg:w="20"/><text x="78.2324%" y="735.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (20 samples, 1.60%)</title><rect x="77.9824%" y="709" width="1.6013%" height="15" fill="rgb(224,157,47)" fg:x="974" fg:w="20"/><text x="78.2324%" y="719.50"></text></g><g><title>engine::session::Session::new (20 samples, 1.60%)</title><rect x="77.9824%" y="693" width="1.6013%" height="15" fill="rgb(226,84,45)" fg:x="974" fg:w="20"/><text x="78.2324%" y="703.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="79.4235%" y="677" width="0.1601%" height="15" fill="rgb(208,207,23)" fg:x="992" fg:w="2"/><text x="79.6735%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.4235%" y="661" width="0.1601%" height="15" fill="rgb(253,34,51)" fg:x="992" fg:w="2"/><text x="79.6735%" y="671.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (1 samples, 0.08%)</title><rect x="79.5036%" y="645" width="0.0801%" height="15" fill="rgb(227,26,34)" fg:x="993" fg:w="1"/><text x="79.7536%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.5837%" y="565" width="0.0801%" height="15" fill="rgb(245,75,19)" fg:x="994" fg:w="1"/><text x="79.8337%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.5837%" y="549" width="0.0801%" height="15" fill="rgb(250,191,31)" fg:x="994" fg:w="1"/><text x="79.8337%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="79.6637%" y="565" width="0.1601%" height="15" fill="rgb(224,11,50)" fg:x="995" fg:w="2"/><text x="79.9137%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="79.6637%" y="549" width="0.1601%" height="15" fill="rgb(231,171,7)" fg:x="995" fg:w="2"/><text x="79.9137%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.9039%" y="533" width="0.0801%" height="15" fill="rgb(252,214,10)" fg:x="998" fg:w="1"/><text x="80.1539%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.9039%" y="517" width="0.0801%" height="15" fill="rgb(249,45,46)" fg:x="998" fg:w="1"/><text x="80.1539%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9039%" y="501" width="0.0801%" height="15" fill="rgb(240,173,7)" fg:x="998" fg:w="1"/><text x="80.1539%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="79.5837%" y="581" width="0.4804%" height="15" fill="rgb(235,214,13)" fg:x="994" fg:w="6"/><text x="79.8337%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="79.8239%" y="565" width="0.2402%" height="15" fill="rgb(245,156,8)" fg:x="997" fg:w="3"/><text x="80.0739%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="79.8239%" y="549" width="0.2402%" height="15" fill="rgb(235,46,12)" fg:x="997" fg:w="3"/><text x="80.0739%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9840%" y="533" width="0.0801%" height="15" fill="rgb(221,81,14)" fg:x="999" fg:w="1"/><text x="80.2340%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="79.5837%" y="613" width="0.5604%" height="15" fill="rgb(238,207,9)" fg:x="994" fg:w="7"/><text x="79.8337%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="79.5837%" y="597" width="0.5604%" height="15" fill="rgb(224,129,35)" fg:x="994" fg:w="7"/><text x="79.8337%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.0641%" y="581" width="0.0801%" height="15" fill="rgb(243,218,34)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="80.1441%" y="597" width="0.0801%" height="15" fill="rgb(220,166,13)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.1441%" y="581" width="0.0801%" height="15" fill="rgb(227,167,49)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.1441%" y="565" width="0.0801%" height="15" fill="rgb(234,142,12)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="80.1441%" y="549" width="0.0801%" height="15" fill="rgb(207,100,48)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="80.2242%" y="581" width="0.1601%" height="15" fill="rgb(210,25,14)" fg:x="1002" fg:w="2"/><text x="80.4742%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="80.2242%" y="565" width="0.1601%" height="15" fill="rgb(246,116,27)" fg:x="1002" fg:w="2"/><text x="80.4742%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="80.2242%" y="549" width="0.1601%" height="15" fill="rgb(214,193,42)" fg:x="1002" fg:w="2"/><text x="80.4742%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="80.3042%" y="533" width="0.0801%" height="15" fill="rgb(214,122,8)" fg:x="1003" fg:w="1"/><text x="80.5542%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.3843%" y="565" width="0.0801%" height="15" fill="rgb(244,173,18)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.3843%" y="549" width="0.0801%" height="15" fill="rgb(232,68,19)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.3843%" y="533" width="0.0801%" height="15" fill="rgb(236,224,1)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.3843%" y="517" width="0.0801%" height="15" fill="rgb(240,11,8)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.3843%" y="501" width="0.0801%" height="15" fill="rgb(244,159,20)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="80.3843%" y="485" width="0.0801%" height="15" fill="rgb(240,223,54)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="80.4644%" y="565" width="0.1601%" height="15" fill="rgb(237,146,5)" fg:x="1005" fg:w="2"/><text x="80.7144%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.6245%" y="549" width="0.0801%" height="15" fill="rgb(218,221,32)" fg:x="1007" fg:w="1"/><text x="80.8745%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="80.3843%" y="581" width="0.4804%" height="15" fill="rgb(244,96,26)" fg:x="1004" fg:w="6"/><text x="80.6343%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="80.6245%" y="565" width="0.2402%" height="15" fill="rgb(245,184,37)" fg:x="1007" fg:w="3"/><text x="80.8745%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="80.7046%" y="549" width="0.1601%" height="15" fill="rgb(248,91,47)" fg:x="1008" fg:w="2"/><text x="80.9546%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.7846%" y="533" width="0.0801%" height="15" fill="rgb(243,199,8)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.7846%" y="517" width="0.0801%" height="15" fill="rgb(249,12,15)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.7846%" y="501" width="0.0801%" height="15" fill="rgb(245,97,12)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.7846%" y="485" width="0.0801%" height="15" fill="rgb(244,61,1)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.7846%" y="469" width="0.0801%" height="15" fill="rgb(222,194,10)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.7846%" y="453" width="0.0801%" height="15" fill="rgb(226,178,8)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.7846%" y="437" width="0.0801%" height="15" fill="rgb(241,32,34)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="80.1441%" y="613" width="0.8006%" height="15" fill="rgb(254,26,6)" fg:x="1001" fg:w="10"/><text x="80.3941%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="80.2242%" y="597" width="0.7206%" height="15" fill="rgb(249,71,11)" fg:x="1002" fg:w="9"/><text x="80.4742%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.8647%" y="581" width="0.0801%" height="15" fill="rgb(232,170,27)" fg:x="1010" fg:w="1"/><text x="81.1147%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="80.9448%" y="597" width="0.0801%" height="15" fill="rgb(214,223,17)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="607.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="80.9448%" y="581" width="0.0801%" height="15" fill="rgb(250,18,15)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.9448%" y="565" width="0.0801%" height="15" fill="rgb(212,153,51)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="575.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.9448%" y="549" width="0.0801%" height="15" fill="rgb(219,194,12)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="80.9448%" y="533" width="0.0801%" height="15" fill="rgb(212,58,17)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="80.9448%" y="517" width="0.0801%" height="15" fill="rgb(254,5,10)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9448%" y="501" width="0.0801%" height="15" fill="rgb(246,91,7)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.1049%" y="517" width="0.0801%" height="15" fill="rgb(218,108,49)" fg:x="1013" fg:w="1"/><text x="81.3549%" y="527.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.68%)</title><rect x="79.5837%" y="709" width="1.6813%" height="15" fill="rgb(238,123,20)" fg:x="994" fg:w="21"/><text x="79.8337%" y="719.50"></text></g><g><title>engine::session::state::State::close (21 samples, 1.68%)</title><rect x="79.5837%" y="693" width="1.6813%" height="15" fill="rgb(231,69,23)" fg:x="994" fg:w="21"/><text x="79.8337%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (21 samples, 1.68%)</title><rect x="79.5837%" y="677" width="1.6813%" height="15" fill="rgb(230,209,3)" fg:x="994" fg:w="21"/><text x="79.8337%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (21 samples, 1.68%)</title><rect x="79.5837%" y="661" width="1.6813%" height="15" fill="rgb(231,19,0)" fg:x="994" fg:w="21"/><text x="79.8337%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.68%)</title><rect x="79.5837%" y="645" width="1.6813%" height="15" fill="rgb(226,192,25)" fg:x="994" fg:w="21"/><text x="79.8337%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.68%)</title><rect x="79.5837%" y="629" width="1.6813%" height="15" fill="rgb(223,175,53)" fg:x="994" fg:w="21"/><text x="79.8337%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="80.9448%" y="613" width="0.3203%" height="15" fill="rgb(248,35,51)" fg:x="1011" fg:w="4"/><text x="81.1948%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="81.0248%" y="597" width="0.2402%" height="15" fill="rgb(230,37,26)" fg:x="1012" fg:w="3"/><text x="81.2748%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="81.0248%" y="581" width="0.2402%" height="15" fill="rgb(206,120,22)" fg:x="1012" fg:w="3"/><text x="81.2748%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="81.0248%" y="565" width="0.2402%" height="15" fill="rgb(207,165,28)" fg:x="1012" fg:w="3"/><text x="81.2748%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="81.1049%" y="549" width="0.1601%" height="15" fill="rgb(226,23,46)" fg:x="1013" fg:w="2"/><text x="81.3549%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="81.1049%" y="533" width="0.1601%" height="15" fill="rgb(208,130,44)" fg:x="1013" fg:w="2"/><text x="81.3549%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1849%" y="517" width="0.0801%" height="15" fill="rgb(231,67,8)" fg:x="1014" fg:w="1"/><text x="81.4349%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.1849%" y="501" width="0.0801%" height="15" fill="rgb(205,183,22)" fg:x="1014" fg:w="1"/><text x="81.4349%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1849%" y="485" width="0.0801%" height="15" fill="rgb(224,47,9)" fg:x="1014" fg:w="1"/><text x="81.4349%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.1849%" y="469" width="0.0801%" height="15" fill="rgb(250,183,49)" fg:x="1014" fg:w="1"/><text x="81.4349%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="81.2650%" y="661" width="0.0801%" height="15" fill="rgb(220,151,39)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.2650%" y="645" width="0.0801%" height="15" fill="rgb(220,118,20)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="81.2650%" y="629" width="0.0801%" height="15" fill="rgb(231,65,51)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.2650%" y="613" width="0.0801%" height="15" fill="rgb(253,125,37)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2650%" y="597" width="0.0801%" height="15" fill="rgb(232,102,6)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.2650%" y="581" width="0.0801%" height="15" fill="rgb(251,105,13)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.2650%" y="565" width="0.0801%" height="15" fill="rgb(222,179,29)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.2650%" y="549" width="0.0801%" height="15" fill="rgb(229,180,53)" fg:x="1015" fg:w="1"/><text x="81.5150%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="81.2650%" y="709" width="0.2402%" height="15" fill="rgb(238,104,13)" fg:x="1015" fg:w="3"/><text x="81.5150%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="81.2650%" y="693" width="0.2402%" height="15" fill="rgb(210,130,5)" fg:x="1015" fg:w="3"/><text x="81.5150%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="81.2650%" y="677" width="0.2402%" height="15" fill="rgb(233,87,49)" fg:x="1015" fg:w="3"/><text x="81.5150%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="81.3451%" y="661" width="0.1601%" height="15" fill="rgb(243,34,9)" fg:x="1016" fg:w="2"/><text x="81.5951%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4251%" y="645" width="0.0801%" height="15" fill="rgb(235,225,10)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="81.4251%" y="629" width="0.0801%" height="15" fill="rgb(212,0,30)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.4251%" y="613" width="0.0801%" height="15" fill="rgb(211,177,0)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="81.5052%" y="709" width="0.0801%" height="15" fill="rgb(225,220,11)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="719.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="81.5052%" y="693" width="0.0801%" height="15" fill="rgb(215,10,13)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="81.5052%" y="677" width="0.0801%" height="15" fill="rgb(240,177,14)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="687.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="81.5052%" y="661" width="0.0801%" height="15" fill="rgb(243,7,39)" fg:x="1018" fg:w="1"/><text x="81.7552%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="81.6653%" y="677" width="0.0801%" height="15" fill="rgb(212,99,0)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="81.6653%" y="661" width="0.0801%" height="15" fill="rgb(225,162,48)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="81.6653%" y="645" width="0.0801%" height="15" fill="rgb(246,16,25)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.6653%" y="629" width="0.0801%" height="15" fill="rgb(220,150,2)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.6653%" y="613" width="0.0801%" height="15" fill="rgb(237,113,11)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.6653%" y="597" width="0.0801%" height="15" fill="rgb(236,70,20)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="81.6653%" y="581" width="0.0801%" height="15" fill="rgb(234,94,7)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.6653%" y="565" width="0.0801%" height="15" fill="rgb(250,221,0)" fg:x="1020" fg:w="1"/><text x="81.9153%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.7454%" y="661" width="0.0801%" height="15" fill="rgb(245,149,46)" fg:x="1021" fg:w="1"/><text x="81.9954%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="81.8255%" y="613" width="0.0801%" height="15" fill="rgb(215,37,27)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.8255%" y="597" width="0.0801%" height="15" fill="rgb(232,65,3)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.8255%" y="581" width="0.0801%" height="15" fill="rgb(214,2,16)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="81.7454%" y="677" width="0.2402%" height="15" fill="rgb(227,131,50)" fg:x="1021" fg:w="3"/><text x="81.9954%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="81.8255%" y="661" width="0.1601%" height="15" fill="rgb(247,131,45)" fg:x="1022" fg:w="2"/><text x="82.0755%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="81.8255%" y="645" width="0.1601%" height="15" fill="rgb(215,97,47)" fg:x="1022" fg:w="2"/><text x="82.0755%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="81.8255%" y="629" width="0.1601%" height="15" fill="rgb(233,143,12)" fg:x="1022" fg:w="2"/><text x="82.0755%" y="639.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="81.9055%" y="613" width="0.0801%" height="15" fill="rgb(222,57,17)" fg:x="1023" fg:w="1"/><text x="82.1555%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.48%)</title><rect x="81.5853%" y="709" width="0.4804%" height="15" fill="rgb(214,119,38)" fg:x="1019" fg:w="6"/><text x="81.8353%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="81.5853%" y="693" width="0.4804%" height="15" fill="rgb(217,28,47)" fg:x="1019" fg:w="6"/><text x="81.8353%" y="703.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="81.9856%" y="677" width="0.0801%" height="15" fill="rgb(231,14,52)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.9856%" y="661" width="0.0801%" height="15" fill="rgb(220,158,18)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="671.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="81.9856%" y="645" width="0.0801%" height="15" fill="rgb(222,143,46)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.9856%" y="629" width="0.0801%" height="15" fill="rgb(227,165,5)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="639.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="81.9856%" y="613" width="0.0801%" height="15" fill="rgb(216,222,49)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.9856%" y="597" width="0.0801%" height="15" fill="rgb(238,73,39)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.9856%" y="581" width="0.0801%" height="15" fill="rgb(252,115,9)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.0657%" y="693" width="0.0801%" height="15" fill="rgb(238,202,4)" fg:x="1025" fg:w="1"/><text x="82.3157%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="82.1457%" y="693" width="0.0801%" height="15" fill="rgb(252,153,44)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="82.1457%" y="677" width="0.0801%" height="15" fill="rgb(235,128,27)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="687.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="82.1457%" y="661" width="0.0801%" height="15" fill="rgb(221,121,47)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.1457%" y="645" width="0.0801%" height="15" fill="rgb(247,211,47)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="82.1457%" y="629" width="0.0801%" height="15" fill="rgb(252,47,49)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="82.2258%" y="613" width="0.0801%" height="15" fill="rgb(219,119,53)" fg:x="1027" fg:w="1"/><text x="82.4758%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.2258%" y="597" width="0.0801%" height="15" fill="rgb(243,165,53)" fg:x="1027" fg:w="1"/><text x="82.4758%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.2258%" y="581" width="0.0801%" height="15" fill="rgb(230,12,35)" fg:x="1027" fg:w="1"/><text x="82.4758%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.2258%" y="565" width="0.0801%" height="15" fill="rgb(239,57,49)" fg:x="1027" fg:w="1"/><text x="82.4758%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="82.2258%" y="693" width="0.1601%" height="15" fill="rgb(231,154,7)" fg:x="1027" fg:w="2"/><text x="82.4758%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="82.2258%" y="677" width="0.1601%" height="15" fill="rgb(248,81,34)" fg:x="1027" fg:w="2"/><text x="82.4758%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="82.2258%" y="661" width="0.1601%" height="15" fill="rgb(247,9,5)" fg:x="1027" fg:w="2"/><text x="82.4758%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="82.2258%" y="645" width="0.1601%" height="15" fill="rgb(228,172,27)" fg:x="1027" fg:w="2"/><text x="82.4758%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="82.2258%" y="629" width="0.1601%" height="15" fill="rgb(230,57,44)" fg:x="1027" fg:w="2"/><text x="82.4758%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="82.3058%" y="613" width="0.0801%" height="15" fill="rgb(249,35,22)" fg:x="1028" fg:w="1"/><text x="82.5558%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="82.3058%" y="597" width="0.0801%" height="15" fill="rgb(250,137,27)" fg:x="1028" fg:w="1"/><text x="82.5558%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.3058%" y="581" width="0.0801%" height="15" fill="rgb(251,57,31)" fg:x="1028" fg:w="1"/><text x="82.5558%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.4660%" y="565" width="0.1601%" height="15" fill="rgb(238,60,0)" fg:x="1030" fg:w="2"/><text x="82.7160%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.5460%" y="549" width="0.0801%" height="15" fill="rgb(242,185,39)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="82.5460%" y="533" width="0.0801%" height="15" fill="rgb(240,63,43)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.5460%" y="517" width="0.0801%" height="15" fill="rgb(236,155,6)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.5460%" y="501" width="0.0801%" height="15" fill="rgb(215,11,29)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.5460%" y="485" width="0.0801%" height="15" fill="rgb(228,180,48)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5460%" y="469" width="0.0801%" height="15" fill="rgb(241,102,12)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="82.4660%" y="581" width="0.2402%" height="15" fill="rgb(246,213,4)" fg:x="1030" fg:w="3"/><text x="82.7160%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.6261%" y="565" width="0.0801%" height="15" fill="rgb(218,134,35)" fg:x="1032" fg:w="1"/><text x="82.8761%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.7062%" y="565" width="0.0801%" height="15" fill="rgb(251,117,35)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.7062%" y="549" width="0.0801%" height="15" fill="rgb(206,156,45)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.7862%" y="533" width="0.0801%" height="15" fill="rgb(218,52,27)" fg:x="1034" fg:w="1"/><text x="83.0362%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.8663%" y="533" width="0.0801%" height="15" fill="rgb(238,83,36)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8663%" y="517" width="0.0801%" height="15" fill="rgb(218,53,43)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.8663%" y="501" width="0.0801%" height="15" fill="rgb(239,54,39)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.8663%" y="485" width="0.0801%" height="15" fill="rgb(212,198,13)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.9464%" y="533" width="0.0801%" height="15" fill="rgb(234,54,46)" fg:x="1036" fg:w="1"/><text x="83.1964%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.9464%" y="517" width="0.0801%" height="15" fill="rgb(217,120,7)" fg:x="1036" fg:w="1"/><text x="83.1964%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="82.7062%" y="581" width="0.4003%" height="15" fill="rgb(246,39,15)" fg:x="1033" fg:w="5"/><text x="82.9562%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="82.7862%" y="565" width="0.3203%" height="15" fill="rgb(242,143,31)" fg:x="1034" fg:w="4"/><text x="83.0362%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="82.7862%" y="549" width="0.3203%" height="15" fill="rgb(252,60,24)" fg:x="1034" fg:w="4"/><text x="83.0362%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.0264%" y="533" width="0.0801%" height="15" fill="rgb(249,220,7)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="543.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="83.0264%" y="517" width="0.0801%" height="15" fill="rgb(236,67,13)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="83.1065%" y="549" width="0.0801%" height="15" fill="rgb(210,62,39)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="83.1865%" y="549" width="0.0801%" height="15" fill="rgb(219,122,53)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="83.1865%" y="533" width="0.0801%" height="15" fill="rgb(218,87,25)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="543.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.1865%" y="517" width="0.0801%" height="15" fill="rgb(234,179,48)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="527.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="83.1865%" y="501" width="0.0801%" height="15" fill="rgb(248,90,0)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.1865%" y="485" width="0.0801%" height="15" fill="rgb(207,228,37)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="83.1065%" y="565" width="0.2402%" height="15" fill="rgb(235,214,15)" fg:x="1038" fg:w="3"/><text x="83.3565%" y="575.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="83.2666%" y="549" width="0.0801%" height="15" fill="rgb(210,144,39)" fg:x="1040" fg:w="1"/><text x="83.5166%" y="559.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="83.2666%" y="533" width="0.0801%" height="15" fill="rgb(222,67,41)" fg:x="1040" fg:w="1"/><text x="83.5166%" y="543.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3467%" y="533" width="0.0801%" height="15" fill="rgb(205,35,37)" fg:x="1041" fg:w="1"/><text x="83.5967%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.3467%" y="517" width="0.0801%" height="15" fill="rgb(216,125,40)" fg:x="1041" fg:w="1"/><text x="83.5967%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3467%" y="501" width="0.0801%" height="15" fill="rgb(228,227,20)" fg:x="1041" fg:w="1"/><text x="83.5967%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.4267%" y="485" width="0.0801%" height="15" fill="rgb(242,173,45)" fg:x="1042" fg:w="1"/><text x="83.6767%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.4267%" y="469" width="0.0801%" height="15" fill="rgb(215,79,24)" fg:x="1042" fg:w="1"/><text x="83.6767%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.4267%" y="453" width="0.0801%" height="15" fill="rgb(238,164,38)" fg:x="1042" fg:w="1"/><text x="83.6767%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4267%" y="437" width="0.0801%" height="15" fill="rgb(245,196,38)" fg:x="1042" fg:w="1"/><text x="83.6767%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="83.4267%" y="421" width="0.0801%" height="15" fill="rgb(231,217,29)" fg:x="1042" fg:w="1"/><text x="83.6767%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="83.4267%" y="517" width="0.2402%" height="15" fill="rgb(245,6,4)" fg:x="1042" fg:w="3"/><text x="83.6767%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="83.4267%" y="501" width="0.2402%" height="15" fill="rgb(214,76,49)" fg:x="1042" fg:w="3"/><text x="83.6767%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="83.5068%" y="485" width="0.1601%" height="15" fill="rgb(205,96,12)" fg:x="1043" fg:w="2"/><text x="83.7568%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.5869%" y="469" width="0.0801%" height="15" fill="rgb(243,131,4)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="83.5869%" y="453" width="0.0801%" height="15" fill="rgb(214,114,4)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="463.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.36%)</title><rect x="82.3859%" y="693" width="1.3611%" height="15" fill="rgb(234,215,15)" fg:x="1029" fg:w="17"/><text x="82.6359%" y="703.50"></text></g><g><title>engine::session::Session::save_changes (17 samples, 1.36%)</title><rect x="82.3859%" y="677" width="1.3611%" height="15" fill="rgb(250,216,45)" fg:x="1029" fg:w="17"/><text x="82.6359%" y="687.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.36%)</title><rect x="82.3859%" y="661" width="1.3611%" height="15" fill="rgb(236,128,4)" fg:x="1029" fg:w="17"/><text x="82.6359%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.36%)</title><rect x="82.3859%" y="645" width="1.3611%" height="15" fill="rgb(234,50,33)" fg:x="1029" fg:w="17"/><text x="82.6359%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.36%)</title><rect x="82.3859%" y="629" width="1.3611%" height="15" fill="rgb(253,131,37)" fg:x="1029" fg:w="17"/><text x="82.6359%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.36%)</title><rect x="82.3859%" y="613" width="1.3611%" height="15" fill="rgb(218,55,27)" fg:x="1029" fg:w="17"/><text x="82.6359%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.36%)</title><rect x="82.3859%" y="597" width="1.3611%" height="15" fill="rgb(241,220,28)" fg:x="1029" fg:w="17"/><text x="82.6359%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="83.1065%" y="581" width="0.6405%" height="15" fill="rgb(241,90,48)" fg:x="1038" fg:w="8"/><text x="83.3565%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="83.3467%" y="565" width="0.4003%" height="15" fill="rgb(216,43,37)" fg:x="1041" fg:w="5"/><text x="83.5967%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="83.3467%" y="549" width="0.4003%" height="15" fill="rgb(207,173,9)" fg:x="1041" fg:w="5"/><text x="83.5967%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="83.4267%" y="533" width="0.3203%" height="15" fill="rgb(240,126,30)" fg:x="1042" fg:w="4"/><text x="83.6767%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6669%" y="517" width="0.0801%" height="15" fill="rgb(228,178,53)" fg:x="1045" fg:w="1"/><text x="83.9169%" y="527.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="83.7470%" y="677" width="0.0801%" height="15" fill="rgb(217,33,4)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.7470%" y="661" width="0.0801%" height="15" fill="rgb(206,124,34)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.7470%" y="645" width="0.0801%" height="15" fill="rgb(208,122,53)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.7470%" y="629" width="0.0801%" height="15" fill="rgb(215,202,26)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.7470%" y="613" width="0.0801%" height="15" fill="rgb(232,198,31)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.7470%" y="597" width="0.0801%" height="15" fill="rgb(222,23,35)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.7470%" y="581" width="0.0801%" height="15" fill="rgb(242,27,53)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.7470%" y="565" width="0.0801%" height="15" fill="rgb(210,216,42)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.7470%" y="549" width="0.0801%" height="15" fill="rgb(234,39,38)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.7470%" y="533" width="0.0801%" height="15" fill="rgb(235,126,54)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.7470%" y="517" width="0.0801%" height="15" fill="rgb(235,150,33)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.7470%" y="501" width="0.0801%" height="15" fill="rgb(249,49,53)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.7470%" y="485" width="0.0801%" height="15" fill="rgb(238,60,50)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.7470%" y="469" width="0.0801%" height="15" fill="rgb(210,5,2)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7470%" y="453" width="0.0801%" height="15" fill="rgb(214,207,24)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.8271%" y="661" width="0.0801%" height="15" fill="rgb(228,173,2)" fg:x="1047" fg:w="1"/><text x="84.0771%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.8271%" y="645" width="0.0801%" height="15" fill="rgb(244,26,8)" fg:x="1047" fg:w="1"/><text x="84.0771%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8271%" y="629" width="0.0801%" height="15" fill="rgb(249,153,35)" fg:x="1047" fg:w="1"/><text x="84.0771%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.8271%" y="613" width="0.0801%" height="15" fill="rgb(221,215,40)" fg:x="1047" fg:w="1"/><text x="84.0771%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8271%" y="597" width="0.0801%" height="15" fill="rgb(238,106,35)" fg:x="1047" fg:w="1"/><text x="84.0771%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.8271%" y="581" width="0.0801%" height="15" fill="rgb(207,195,21)" fg:x="1047" fg:w="1"/><text x="84.0771%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.8271%" y="565" width="0.0801%" height="15" fill="rgb(205,43,29)" fg:x="1047" fg:w="1"/><text x="84.0771%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.8271%" y="549" width="0.0801%" height="15" fill="rgb(236,35,21)" fg:x="1047" fg:w="1"/><text x="84.0771%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9071%" y="533" width="0.0801%" height="15" fill="rgb(244,74,8)" fg:x="1048" fg:w="1"/><text x="84.1571%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.9071%" y="517" width="0.0801%" height="15" fill="rgb(241,229,7)" fg:x="1048" fg:w="1"/><text x="84.1571%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="83.9071%" y="613" width="0.1601%" height="15" fill="rgb(212,223,25)" fg:x="1048" fg:w="2"/><text x="84.1571%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="83.9071%" y="597" width="0.1601%" height="15" fill="rgb(234,58,53)" fg:x="1048" fg:w="2"/><text x="84.1571%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.9071%" y="581" width="0.1601%" height="15" fill="rgb(244,36,1)" fg:x="1048" fg:w="2"/><text x="84.1571%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="83.9071%" y="565" width="0.1601%" height="15" fill="rgb(222,40,54)" fg:x="1048" fg:w="2"/><text x="84.1571%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.9071%" y="549" width="0.1601%" height="15" fill="rgb(210,207,39)" fg:x="1048" fg:w="2"/><text x="84.1571%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.9872%" y="533" width="0.0801%" height="15" fill="rgb(234,52,14)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.9872%" y="517" width="0.0801%" height="15" fill="rgb(239,108,46)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="83.9071%" y="645" width="0.2402%" height="15" fill="rgb(252,223,5)" fg:x="1048" fg:w="3"/><text x="84.1571%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="83.9071%" y="629" width="0.2402%" height="15" fill="rgb(227,181,11)" fg:x="1048" fg:w="3"/><text x="84.1571%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="84.0673%" y="613" width="0.0801%" height="15" fill="rgb(248,126,40)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.0673%" y="597" width="0.0801%" height="15" fill="rgb(243,1,18)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="84.0673%" y="581" width="0.0801%" height="15" fill="rgb(214,145,23)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="84.0673%" y="565" width="0.0801%" height="15" fill="rgb(241,218,11)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="83.7470%" y="693" width="0.4804%" height="15" fill="rgb(214,219,24)" fg:x="1046" fg:w="6"/><text x="83.9970%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="83.8271%" y="677" width="0.4003%" height="15" fill="rgb(235,32,7)" fg:x="1047" fg:w="5"/><text x="84.0771%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="83.9071%" y="661" width="0.3203%" height="15" fill="rgb(227,121,28)" fg:x="1048" fg:w="4"/><text x="84.1571%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="84.1473%" y="645" width="0.0801%" height="15" fill="rgb(216,129,49)" fg:x="1051" fg:w="1"/><text x="84.3973%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.1473%" y="629" width="0.0801%" height="15" fill="rgb(207,194,50)" fg:x="1051" fg:w="1"/><text x="84.3973%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="84.1473%" y="613" width="0.0801%" height="15" fill="rgb(207,4,18)" fg:x="1051" fg:w="1"/><text x="84.3973%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.1473%" y="597" width="0.0801%" height="15" fill="rgb(213,50,30)" fg:x="1051" fg:w="1"/><text x="84.3973%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.1473%" y="581" width="0.0801%" height="15" fill="rgb(208,77,22)" fg:x="1051" fg:w="1"/><text x="84.3973%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.1473%" y="565" width="0.0801%" height="15" fill="rgb(244,204,34)" fg:x="1051" fg:w="1"/><text x="84.3973%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1473%" y="549" width="0.0801%" height="15" fill="rgb(230,20,17)" fg:x="1051" fg:w="1"/><text x="84.3973%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2274%" y="597" width="0.0801%" height="15" fill="rgb(237,83,15)" fg:x="1052" fg:w="1"/><text x="84.4774%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2274%" y="581" width="0.0801%" height="15" fill="rgb(221,109,25)" fg:x="1052" fg:w="1"/><text x="84.4774%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.2274%" y="565" width="0.0801%" height="15" fill="rgb(205,194,52)" fg:x="1052" fg:w="1"/><text x="84.4774%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="84.2274%" y="661" width="0.1601%" height="15" fill="rgb(244,173,54)" fg:x="1052" fg:w="2"/><text x="84.4774%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="84.2274%" y="645" width="0.1601%" height="15" fill="rgb(227,181,18)" fg:x="1052" fg:w="2"/><text x="84.4774%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="84.2274%" y="629" width="0.1601%" height="15" fill="rgb(238,36,30)" fg:x="1052" fg:w="2"/><text x="84.4774%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="84.2274%" y="613" width="0.1601%" height="15" fill="rgb(254,85,0)" fg:x="1052" fg:w="2"/><text x="84.4774%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.3074%" y="597" width="0.0801%" height="15" fill="rgb(247,63,33)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.3074%" y="581" width="0.0801%" height="15" fill="rgb(220,7,54)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.3074%" y="565" width="0.0801%" height="15" fill="rgb(238,227,21)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.3074%" y="549" width="0.0801%" height="15" fill="rgb(237,29,31)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.3074%" y="533" width="0.0801%" height="15" fill="rgb(211,21,50)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.3074%" y="517" width="0.0801%" height="15" fill="rgb(239,119,2)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="84.2274%" y="693" width="0.2402%" height="15" fill="rgb(250,2,39)" fg:x="1052" fg:w="3"/><text x="84.4774%" y="703.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="84.2274%" y="677" width="0.2402%" height="15" fill="rgb(244,46,53)" fg:x="1052" fg:w="3"/><text x="84.4774%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="84.3875%" y="661" width="0.0801%" height="15" fill="rgb(209,21,19)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3875%" y="645" width="0.0801%" height="15" fill="rgb(236,145,4)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="655.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3875%" y="629" width="0.0801%" height="15" fill="rgb(220,133,36)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="84.3875%" y="613" width="0.0801%" height="15" fill="rgb(244,18,3)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (31 samples, 2.48%)</title><rect x="82.0657%" y="709" width="2.4820%" height="15" fill="rgb(232,171,48)" fg:x="1025" fg:w="31"/><text x="82.3157%" y="719.50">pl..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="84.4676%" y="693" width="0.0801%" height="15" fill="rgb(223,223,53)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="84.4676%" y="677" width="0.0801%" height="15" fill="rgb(246,92,13)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="84.4676%" y="661" width="0.0801%" height="15" fill="rgb(229,171,10)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4676%" y="645" width="0.0801%" height="15" fill="rgb(213,131,26)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.5476%" y="677" width="0.0801%" height="15" fill="rgb(242,87,54)" fg:x="1056" fg:w="1"/><text x="84.7976%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.5476%" y="661" width="0.0801%" height="15" fill="rgb(237,21,35)" fg:x="1056" fg:w="1"/><text x="84.7976%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.5476%" y="645" width="0.0801%" height="15" fill="rgb(253,13,47)" fg:x="1056" fg:w="1"/><text x="84.7976%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.5476%" y="629" width="0.0801%" height="15" fill="rgb(215,122,49)" fg:x="1056" fg:w="1"/><text x="84.7976%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="84.7078%" y="661" width="0.0801%" height="15" fill="rgb(209,179,30)" fg:x="1058" fg:w="1"/><text x="84.9578%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.7078%" y="645" width="0.0801%" height="15" fill="rgb(235,100,24)" fg:x="1058" fg:w="1"/><text x="84.9578%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.7078%" y="629" width="0.0801%" height="15" fill="rgb(209,67,24)" fg:x="1058" fg:w="1"/><text x="84.9578%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.7078%" y="613" width="0.0801%" height="15" fill="rgb(206,74,32)" fg:x="1058" fg:w="1"/><text x="84.9578%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.7078%" y="597" width="0.0801%" height="15" fill="rgb(212,45,25)" fg:x="1058" fg:w="1"/><text x="84.9578%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="84.8679%" y="645" width="0.0801%" height="15" fill="rgb(239,26,3)" fg:x="1060" fg:w="1"/><text x="85.1179%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="84.9480%" y="597" width="0.0801%" height="15" fill="rgb(218,36,15)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.9480%" y="581" width="0.0801%" height="15" fill="rgb(206,108,24)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.9480%" y="565" width="0.0801%" height="15" fill="rgb(234,204,42)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.9480%" y="549" width="0.0801%" height="15" fill="rgb(229,2,11)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.9480%" y="533" width="0.0801%" height="15" fill="rgb(221,20,48)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.9480%" y="517" width="0.0801%" height="15" fill="rgb(244,164,10)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.9480%" y="501" width="0.0801%" height="15" fill="rgb(243,229,2)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.9480%" y="485" width="0.0801%" height="15" fill="rgb(232,131,37)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="84.9480%" y="629" width="0.1601%" height="15" fill="rgb(217,156,11)" fg:x="1061" fg:w="2"/><text x="85.1980%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="84.9480%" y="613" width="0.1601%" height="15" fill="rgb(239,99,48)" fg:x="1061" fg:w="2"/><text x="85.1980%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="85.0280%" y="597" width="0.0801%" height="15" fill="rgb(231,209,9)" fg:x="1062" fg:w="1"/><text x="85.2780%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.0280%" y="581" width="0.0801%" height="15" fill="rgb(254,97,27)" fg:x="1062" fg:w="1"/><text x="85.2780%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="85.0280%" y="565" width="0.0801%" height="15" fill="rgb(223,151,38)" fg:x="1062" fg:w="1"/><text x="85.2780%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="85.0280%" y="549" width="0.0801%" height="15" fill="rgb(219,206,35)" fg:x="1062" fg:w="1"/><text x="85.2780%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0280%" y="533" width="0.0801%" height="15" fill="rgb(216,130,31)" fg:x="1062" fg:w="1"/><text x="85.2780%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="85.1081%" y="629" width="0.0801%" height="15" fill="rgb(251,97,34)" fg:x="1063" fg:w="1"/><text x="85.3581%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1081%" y="613" width="0.0801%" height="15" fill="rgb(246,159,47)" fg:x="1063" fg:w="1"/><text x="85.3581%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (9 samples, 0.72%)</title><rect x="84.5476%" y="709" width="0.7206%" height="15" fill="rgb(232,87,10)" fg:x="1056" fg:w="9"/><text x="84.7976%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.72%)</title><rect x="84.5476%" y="693" width="0.7206%" height="15" fill="rgb(249,1,37)" fg:x="1056" fg:w="9"/><text x="84.7976%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="84.6277%" y="677" width="0.6405%" height="15" fill="rgb(239,135,14)" fg:x="1057" fg:w="8"/><text x="84.8777%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="84.7878%" y="661" width="0.4804%" height="15" fill="rgb(253,116,46)" fg:x="1059" fg:w="6"/><text x="85.0378%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="84.9480%" y="645" width="0.3203%" height="15" fill="rgb(222,217,37)" fg:x="1061" fg:w="4"/><text x="85.1980%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="85.1882%" y="629" width="0.0801%" height="15" fill="rgb(252,96,8)" fg:x="1064" fg:w="1"/><text x="85.4382%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.1882%" y="613" width="0.0801%" height="15" fill="rgb(254,103,41)" fg:x="1064" fg:w="1"/><text x="85.4382%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="85.1882%" y="597" width="0.0801%" height="15" fill="rgb(218,213,19)" fg:x="1064" fg:w="1"/><text x="85.4382%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1882%" y="581" width="0.0801%" height="15" fill="rgb(253,95,21)" fg:x="1064" fg:w="1"/><text x="85.4382%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="85.2682%" y="693" width="0.0801%" height="15" fill="rgb(229,26,28)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="85.2682%" y="677" width="0.0801%" height="15" fill="rgb(230,129,16)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.2682%" y="661" width="0.0801%" height="15" fill="rgb(236,126,17)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2682%" y="645" width="0.0801%" height="15" fill="rgb(209,33,33)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="85.2682%" y="629" width="0.0801%" height="15" fill="rgb(227,85,29)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2682%" y="613" width="0.0801%" height="15" fill="rgb(241,53,46)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.2682%" y="597" width="0.0801%" height="15" fill="rgb(228,167,53)" fg:x="1065" fg:w="1"/><text x="85.5182%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="85.3483%" y="677" width="0.1601%" height="15" fill="rgb(238,195,45)" fg:x="1066" fg:w="2"/><text x="85.5983%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="85.4283%" y="661" width="0.0801%" height="15" fill="rgb(252,124,45)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="85.4283%" y="645" width="0.0801%" height="15" fill="rgb(251,38,35)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="85.4283%" y="629" width="0.0801%" height="15" fill="rgb(227,33,2)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="85.4283%" y="613" width="0.0801%" height="15" fill="rgb(223,157,46)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="85.4283%" y="597" width="0.0801%" height="15" fill="rgb(222,78,41)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.4283%" y="581" width="0.0801%" height="15" fill="rgb(248,176,11)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="85.4283%" y="565" width="0.0801%" height="15" fill="rgb(241,221,18)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="85.4283%" y="549" width="0.0801%" height="15" fill="rgb(218,85,22)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="85.4283%" y="533" width="0.0801%" height="15" fill="rgb(222,223,7)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.4283%" y="517" width="0.0801%" height="15" fill="rgb(254,59,39)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="85.4283%" y="501" width="0.0801%" height="15" fill="rgb(247,100,27)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="85.4283%" y="485" width="0.0801%" height="15" fill="rgb(237,207,10)" fg:x="1067" fg:w="1"/><text x="85.6783%" y="495.50"></text></g><g><title>plugins_core::build::Build::new_world (3 samples, 0.24%)</title><rect x="85.3483%" y="693" width="0.2402%" height="15" fill="rgb(220,121,28)" fg:x="1066" fg:w="3"/><text x="85.5983%" y="703.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="85.5084%" y="677" width="0.0801%" height="15" fill="rgb(213,223,20)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="687.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="85.5084%" y="661" width="0.0801%" height="15" fill="rgb(205,121,27)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5084%" y="645" width="0.0801%" height="15" fill="rgb(253,24,53)" fg:x="1068" fg:w="1"/><text x="85.7584%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.6685%" y="581" width="0.0801%" height="15" fill="rgb(224,224,47)" fg:x="1070" fg:w="1"/><text x="85.9185%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="85.5885%" y="677" width="0.2402%" height="15" fill="rgb(250,125,36)" fg:x="1069" fg:w="3"/><text x="85.8385%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="85.5885%" y="661" width="0.2402%" height="15" fill="rgb(240,144,38)" fg:x="1069" fg:w="3"/><text x="85.8385%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.6685%" y="645" width="0.1601%" height="15" fill="rgb(250,15,50)" fg:x="1070" fg:w="2"/><text x="85.9185%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.6685%" y="629" width="0.1601%" height="15" fill="rgb(210,24,26)" fg:x="1070" fg:w="2"/><text x="85.9185%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="85.6685%" y="613" width="0.1601%" height="15" fill="rgb(234,53,53)" fg:x="1070" fg:w="2"/><text x="85.9185%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.6685%" y="597" width="0.1601%" height="15" fill="rgb(208,108,28)" fg:x="1070" fg:w="2"/><text x="85.9185%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.7486%" y="581" width="0.0801%" height="15" fill="rgb(227,143,7)" fg:x="1071" fg:w="1"/><text x="85.9986%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.7486%" y="565" width="0.0801%" height="15" fill="rgb(238,189,38)" fg:x="1071" fg:w="1"/><text x="85.9986%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.7486%" y="549" width="0.0801%" height="15" fill="rgb(222,69,15)" fg:x="1071" fg:w="1"/><text x="85.9986%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.7486%" y="533" width="0.0801%" height="15" fill="rgb(213,169,7)" fg:x="1071" fg:w="1"/><text x="85.9986%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (80 samples, 6.41%)</title><rect x="79.5837%" y="725" width="6.4051%" height="15" fill="rgb(251,219,4)" fg:x="994" fg:w="80"/><text x="79.8337%" y="735.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (9 samples, 0.72%)</title><rect x="85.2682%" y="709" width="0.7206%" height="15" fill="rgb(241,55,40)" fg:x="1065" fg:w="9"/><text x="85.5182%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.40%)</title><rect x="85.5885%" y="693" width="0.4003%" height="15" fill="rgb(243,57,30)" fg:x="1069" fg:w="5"/><text x="85.8385%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="85.8287%" y="677" width="0.1601%" height="15" fill="rgb(234,50,30)" fg:x="1072" fg:w="2"/><text x="86.0787%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="85.9087%" y="661" width="0.0801%" height="15" fill="rgb(239,23,42)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="85.9087%" y="645" width="0.0801%" height="15" fill="rgb(217,38,19)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="85.9087%" y="629" width="0.0801%" height="15" fill="rgb(215,179,16)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="85.9087%" y="613" width="0.0801%" height="15" fill="rgb(254,21,37)" fg:x="1073" fg:w="1"/><text x="86.1587%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="86.0689%" y="709" width="0.0801%" height="15" fill="rgb(219,207,48)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.0689%" y="693" width="0.0801%" height="15" fill="rgb(227,225,41)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.0689%" y="677" width="0.0801%" height="15" fill="rgb(223,130,1)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.0689%" y="661" width="0.0801%" height="15" fill="rgb(249,54,42)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.0689%" y="645" width="0.0801%" height="15" fill="rgb(248,69,25)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.0689%" y="629" width="0.0801%" height="15" fill="rgb(234,21,32)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.0689%" y="613" width="0.0801%" height="15" fill="rgb(252,136,6)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.0689%" y="597" width="0.0801%" height="15" fill="rgb(245,87,12)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="86.0689%" y="581" width="0.0801%" height="15" fill="rgb(208,12,15)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="86.0689%" y="565" width="0.0801%" height="15" fill="rgb(250,98,2)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="86.0689%" y="549" width="0.0801%" height="15" fill="rgb(205,213,15)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="86.0689%" y="533" width="0.0801%" height="15" fill="rgb(248,192,44)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.0689%" y="517" width="0.0801%" height="15" fill="rgb(221,89,17)" fg:x="1075" fg:w="1"/><text x="86.3189%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="86.1489%" y="677" width="0.0801%" height="15" fill="rgb(209,55,3)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="86.1489%" y="661" width="0.0801%" height="15" fill="rgb(247,23,45)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="86.1489%" y="645" width="0.0801%" height="15" fill="rgb(235,152,23)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="86.2290%" y="597" width="0.2402%" height="15" fill="rgb(244,63,13)" fg:x="1077" fg:w="3"/><text x="86.4790%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="86.3090%" y="581" width="0.1601%" height="15" fill="rgb(227,30,37)" fg:x="1078" fg:w="2"/><text x="86.5590%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="86.3090%" y="565" width="0.1601%" height="15" fill="rgb(224,49,42)" fg:x="1078" fg:w="2"/><text x="86.5590%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="86.3090%" y="549" width="0.1601%" height="15" fill="rgb(218,129,5)" fg:x="1078" fg:w="2"/><text x="86.5590%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="86.2290%" y="613" width="0.3203%" height="15" fill="rgb(240,199,54)" fg:x="1077" fg:w="4"/><text x="86.4790%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.4692%" y="597" width="0.0801%" height="15" fill="rgb(234,31,13)" fg:x="1080" fg:w="1"/><text x="86.7192%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="86.5492%" y="581" width="0.0801%" height="15" fill="rgb(219,73,54)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.5492%" y="565" width="0.0801%" height="15" fill="rgb(251,162,10)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.6293%" y="565" width="0.0801%" height="15" fill="rgb(240,138,47)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="86.7094%" y="549" width="0.0801%" height="15" fill="rgb(216,138,26)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.7094%" y="533" width="0.0801%" height="15" fill="rgb(243,17,35)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="86.7094%" y="517" width="0.0801%" height="15" fill="rgb(241,60,18)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.7094%" y="501" width="0.0801%" height="15" fill="rgb(234,2,44)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.7094%" y="485" width="0.0801%" height="15" fill="rgb(225,225,33)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.7094%" y="469" width="0.0801%" height="15" fill="rgb(234,50,31)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.7094%" y="453" width="0.0801%" height="15" fill="rgb(249,6,25)" fg:x="1083" fg:w="1"/><text x="86.9594%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="86.7894%" y="533" width="0.0801%" height="15" fill="rgb(241,5,17)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.7894%" y="517" width="0.0801%" height="15" fill="rgb(207,116,10)" fg:x="1084" fg:w="1"/><text x="87.0394%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="86.5492%" y="597" width="0.4003%" height="15" fill="rgb(222,128,18)" fg:x="1081" fg:w="5"/><text x="86.7992%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="86.6293%" y="581" width="0.3203%" height="15" fill="rgb(229,109,25)" fg:x="1082" fg:w="4"/><text x="86.8793%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="86.7094%" y="565" width="0.2402%" height="15" fill="rgb(222,102,25)" fg:x="1083" fg:w="3"/><text x="86.9594%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="86.7894%" y="549" width="0.1601%" height="15" fill="rgb(239,211,5)" fg:x="1084" fg:w="2"/><text x="87.0394%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.8695%" y="533" width="0.0801%" height="15" fill="rgb(223,136,26)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="86.8695%" y="517" width="0.0801%" height="15" fill="rgb(227,30,15)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.8695%" y="501" width="0.0801%" height="15" fill="rgb(247,76,4)" fg:x="1085" fg:w="1"/><text x="87.1195%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="86.5492%" y="613" width="0.4804%" height="15" fill="rgb(245,38,48)" fg:x="1081" fg:w="6"/><text x="86.7992%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="86.9496%" y="597" width="0.0801%" height="15" fill="rgb(210,220,14)" fg:x="1086" fg:w="1"/><text x="87.1996%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="86.9496%" y="581" width="0.0801%" height="15" fill="rgb(224,60,51)" fg:x="1086" fg:w="1"/><text x="87.1996%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.9496%" y="565" width="0.0801%" height="15" fill="rgb(212,133,49)" fg:x="1086" fg:w="1"/><text x="87.1996%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.9496%" y="549" width="0.0801%" height="15" fill="rgb(231,39,22)" fg:x="1086" fg:w="1"/><text x="87.1996%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="86.2290%" y="629" width="0.8807%" height="15" fill="rgb(236,173,22)" fg:x="1077" fg:w="11"/><text x="86.4790%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="87.0296%" y="613" width="0.0801%" height="15" fill="rgb(210,70,0)" fg:x="1087" fg:w="1"/><text x="87.2796%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="87.0296%" y="597" width="0.0801%" height="15" fill="rgb(215,170,11)" fg:x="1087" fg:w="1"/><text x="87.2796%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="87.1097%" y="629" width="0.0801%" height="15" fill="rgb(220,154,28)" fg:x="1088" fg:w="1"/><text x="87.3597%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.1898%" y="565" width="0.0801%" height="15" fill="rgb(240,160,41)" fg:x="1089" fg:w="1"/><text x="87.4398%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="87.1898%" y="597" width="0.2402%" height="15" fill="rgb(243,215,41)" fg:x="1089" fg:w="3"/><text x="87.4398%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="87.1898%" y="581" width="0.2402%" height="15" fill="rgb(214,208,31)" fg:x="1089" fg:w="3"/><text x="87.4398%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="87.2698%" y="565" width="0.1601%" height="15" fill="rgb(247,57,22)" fg:x="1090" fg:w="2"/><text x="87.5198%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="87.3499%" y="549" width="0.0801%" height="15" fill="rgb(228,73,52)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="87.3499%" y="533" width="0.0801%" height="15" fill="rgb(252,60,9)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="87.3499%" y="517" width="0.0801%" height="15" fill="rgb(233,9,51)" fg:x="1091" fg:w="1"/><text x="87.5999%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="87.4299%" y="597" width="0.0801%" height="15" fill="rgb(223,67,14)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.4299%" y="581" width="0.0801%" height="15" fill="rgb(222,86,2)" fg:x="1092" fg:w="1"/><text x="87.6799%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="87.1898%" y="613" width="0.4003%" height="15" fill="rgb(243,58,54)" fg:x="1089" fg:w="5"/><text x="87.4398%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="87.5100%" y="597" width="0.0801%" height="15" fill="rgb(210,200,39)" fg:x="1093" fg:w="1"/><text x="87.7600%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="87.5100%" y="581" width="0.0801%" height="15" fill="rgb(238,135,9)" fg:x="1093" fg:w="1"/><text x="87.7600%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="87.5100%" y="565" width="0.0801%" height="15" fill="rgb(232,179,7)" fg:x="1093" fg:w="1"/><text x="87.7600%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.5901%" y="581" width="0.0801%" height="15" fill="rgb(245,65,41)" fg:x="1094" fg:w="1"/><text x="87.8401%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.6701%" y="581" width="0.0801%" height="15" fill="rgb(227,43,8)" fg:x="1095" fg:w="1"/><text x="87.9201%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="87.6701%" y="565" width="0.0801%" height="15" fill="rgb(235,91,14)" fg:x="1095" fg:w="1"/><text x="87.9201%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="87.7502%" y="581" width="0.1601%" height="15" fill="rgb(235,219,31)" fg:x="1096" fg:w="2"/><text x="88.0002%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="87.7502%" y="565" width="0.1601%" height="15" fill="rgb(227,121,25)" fg:x="1096" fg:w="2"/><text x="88.0002%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="87.9103%" y="581" width="0.0801%" height="15" fill="rgb(254,129,24)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.9103%" y="565" width="0.0801%" height="15" fill="rgb(226,144,49)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.9103%" y="549" width="0.0801%" height="15" fill="rgb(214,187,32)" fg:x="1098" fg:w="1"/><text x="88.1603%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.0705%" y="533" width="0.0801%" height="15" fill="rgb(243,129,46)" fg:x="1100" fg:w="1"/><text x="88.3205%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.3106%" y="501" width="0.0801%" height="15" fill="rgb(221,185,35)" fg:x="1103" fg:w="1"/><text x="88.5606%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.3106%" y="485" width="0.0801%" height="15" fill="rgb(205,0,32)" fg:x="1103" fg:w="1"/><text x="88.5606%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="88.0705%" y="549" width="0.4804%" height="15" fill="rgb(229,179,12)" fg:x="1100" fg:w="6"/><text x="88.3205%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="88.1505%" y="533" width="0.4003%" height="15" fill="rgb(252,107,19)" fg:x="1101" fg:w="5"/><text x="88.4005%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="88.3106%" y="517" width="0.2402%" height="15" fill="rgb(220,95,27)" fg:x="1103" fg:w="3"/><text x="88.5606%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="88.3907%" y="501" width="0.1601%" height="15" fill="rgb(240,113,40)" fg:x="1104" fg:w="2"/><text x="88.6407%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.4708%" y="485" width="0.0801%" height="15" fill="rgb(208,4,43)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.04%)</title><rect x="87.5901%" y="613" width="1.0408%" height="15" fill="rgb(247,189,30)" fg:x="1094" fg:w="13"/><text x="87.8401%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="87.5901%" y="597" width="1.0408%" height="15" fill="rgb(231,157,17)" fg:x="1094" fg:w="13"/><text x="87.8401%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="87.9904%" y="581" width="0.6405%" height="15" fill="rgb(224,139,6)" fg:x="1099" fg:w="8"/><text x="88.2404%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="87.9904%" y="565" width="0.6405%" height="15" fill="rgb(223,83,16)" fg:x="1099" fg:w="8"/><text x="88.2404%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="88.5508%" y="549" width="0.0801%" height="15" fill="rgb(232,211,20)" fg:x="1106" fg:w="1"/><text x="88.8008%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="88.7110%" y="437" width="0.0801%" height="15" fill="rgb(225,203,35)" fg:x="1108" fg:w="1"/><text x="88.9610%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="88.7110%" y="421" width="0.0801%" height="15" fill="rgb(215,211,44)" fg:x="1108" fg:w="1"/><text x="88.9610%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="88.7110%" y="405" width="0.0801%" height="15" fill="rgb(248,213,26)" fg:x="1108" fg:w="1"/><text x="88.9610%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.7110%" y="389" width="0.0801%" height="15" fill="rgb(214,23,52)" fg:x="1108" fg:w="1"/><text x="88.9610%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="88.7110%" y="517" width="0.1601%" height="15" fill="rgb(225,173,50)" fg:x="1108" fg:w="2"/><text x="88.9610%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="88.7110%" y="501" width="0.1601%" height="15" fill="rgb(206,150,22)" fg:x="1108" fg:w="2"/><text x="88.9610%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="88.7110%" y="485" width="0.1601%" height="15" fill="rgb(239,64,23)" fg:x="1108" fg:w="2"/><text x="88.9610%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="88.7110%" y="469" width="0.1601%" height="15" fill="rgb(242,50,38)" fg:x="1108" fg:w="2"/><text x="88.9610%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="88.7110%" y="453" width="0.1601%" height="15" fill="rgb(217,91,15)" fg:x="1108" fg:w="2"/><text x="88.9610%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="88.7910%" y="437" width="0.0801%" height="15" fill="rgb(230,172,6)" fg:x="1109" fg:w="1"/><text x="89.0410%" y="447.50"></text></g><g><title>engine::session::Session::close (38 samples, 3.04%)</title><rect x="85.9888%" y="725" width="3.0424%" height="15" fill="rgb(221,98,26)" fg:x="1074" fg:w="38"/><text x="86.2388%" y="735.50">eng..</text></g><g><title>engine::session::state::State::close (36 samples, 2.88%)</title><rect x="86.1489%" y="709" width="2.8823%" height="15" fill="rgb(227,210,45)" fg:x="1076" fg:w="36"/><text x="86.3989%" y="719.50">en..</text></g><g><title>engine::session::state::State::flush_entities (36 samples, 2.88%)</title><rect x="86.1489%" y="693" width="2.8823%" height="15" fill="rgb(206,8,30)" fg:x="1076" fg:w="36"/><text x="86.3989%" y="703.50">en..</text></g><g><title>core::iter::adapters::try_process (35 samples, 2.80%)</title><rect x="86.2290%" y="677" width="2.8022%" height="15" fill="rgb(241,219,17)" fg:x="1077" fg:w="35"/><text x="86.4790%" y="687.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 2.80%)</title><rect x="86.2290%" y="661" width="2.8022%" height="15" fill="rgb(247,121,29)" fg:x="1077" fg:w="35"/><text x="86.4790%" y="671.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (35 samples, 2.80%)</title><rect x="86.2290%" y="645" width="2.8022%" height="15" fill="rgb(219,169,49)" fg:x="1077" fg:w="35"/><text x="86.4790%" y="655.50">en..</text></g><g><title>kernel::model::any_entity_changes (23 samples, 1.84%)</title><rect x="87.1898%" y="629" width="1.8415%" height="15" fill="rgb(253,49,49)" fg:x="1089" fg:w="23"/><text x="87.4398%" y="639.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="88.6309%" y="613" width="0.4003%" height="15" fill="rgb(217,178,3)" fg:x="1107" fg:w="5"/><text x="88.8809%" y="623.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="88.6309%" y="597" width="0.4003%" height="15" fill="rgb(234,73,37)" fg:x="1107" fg:w="5"/><text x="88.8809%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="88.6309%" y="581" width="0.4003%" height="15" fill="rgb(250,98,22)" fg:x="1107" fg:w="5"/><text x="88.8809%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="88.6309%" y="565" width="0.4003%" height="15" fill="rgb(220,108,37)" fg:x="1107" fg:w="5"/><text x="88.8809%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="88.7110%" y="549" width="0.3203%" height="15" fill="rgb(225,168,10)" fg:x="1108" fg:w="4"/><text x="88.9610%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="88.7110%" y="533" width="0.3203%" height="15" fill="rgb(247,215,21)" fg:x="1108" fg:w="4"/><text x="88.9610%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="88.8711%" y="517" width="0.1601%" height="15" fill="rgb(253,189,31)" fg:x="1110" fg:w="2"/><text x="89.1211%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="88.8711%" y="501" width="0.1601%" height="15" fill="rgb(241,54,22)" fg:x="1110" fg:w="2"/><text x="89.1211%" y="511.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="89.0312%" y="693" width="0.0801%" height="15" fill="rgb(211,87,4)" fg:x="1112" fg:w="1"/><text x="89.2812%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="89.0312%" y="677" width="0.0801%" height="15" fill="rgb(245,112,24)" fg:x="1112" fg:w="1"/><text x="89.2812%" y="687.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="89.0312%" y="661" width="0.0801%" height="15" fill="rgb(235,190,41)" fg:x="1112" fg:w="1"/><text x="89.2812%" y="671.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="89.0312%" y="645" width="0.0801%" height="15" fill="rgb(214,89,8)" fg:x="1112" fg:w="1"/><text x="89.2812%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="89.0312%" y="629" width="0.0801%" height="15" fill="rgb(249,155,35)" fg:x="1112" fg:w="1"/><text x="89.2812%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="89.1113%" y="677" width="0.0801%" height="15" fill="rgb(249,88,26)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="89.1113%" y="661" width="0.0801%" height="15" fill="rgb(232,56,8)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="89.1113%" y="645" width="0.0801%" height="15" fill="rgb(240,95,3)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="89.1113%" y="629" width="0.0801%" height="15" fill="rgb(222,44,28)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="639.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="89.1113%" y="613" width="0.0801%" height="15" fill="rgb(234,16,30)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="623.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="89.1113%" y="597" width="0.0801%" height="15" fill="rgb(223,26,17)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="607.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="89.1113%" y="581" width="0.0801%" height="15" fill="rgb(239,187,47)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="89.1113%" y="565" width="0.0801%" height="15" fill="rgb(247,102,50)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="575.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="89.1113%" y="549" width="0.0801%" height="15" fill="rgb(231,216,22)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="89.1113%" y="533" width="0.0801%" height="15" fill="rgb(216,201,26)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="543.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="89.1113%" y="517" width="0.0801%" height="15" fill="rgb(214,186,23)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="527.50"></text></g><g><title>core::fmt::builders::DebugTuple::finish (1 samples, 0.08%)</title><rect x="89.1113%" y="501" width="0.0801%" height="15" fill="rgb(235,184,4)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="89.1113%" y="485" width="0.0801%" height="15" fill="rgb(244,46,17)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="495.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="89.1914%" y="661" width="0.0801%" height="15" fill="rgb(248,74,46)" fg:x="1114" fg:w="1"/><text x="89.4414%" y="671.50"></text></g><g><title>std::time::SystemTime::duration_since (1 samples, 0.08%)</title><rect x="89.1914%" y="645" width="0.0801%" height="15" fill="rgb(243,79,5)" fg:x="1114" fg:w="1"/><text x="89.4414%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="89.1914%" y="629" width="0.0801%" height="15" fill="rgb(213,148,1)" fg:x="1114" fg:w="1"/><text x="89.4414%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="89.2714%" y="485" width="0.0801%" height="15" fill="rgb(221,30,0)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="89.2714%" y="469" width="0.0801%" height="15" fill="rgb(207,85,29)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.2714%" y="453" width="0.0801%" height="15" fill="rgb(239,31,46)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.2714%" y="437" width="0.0801%" height="15" fill="rgb(219,6,1)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.2714%" y="421" width="0.0801%" height="15" fill="rgb(229,90,29)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.2714%" y="405" width="0.0801%" height="15" fill="rgb(242,201,42)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="89.3515%" y="485" width="0.1601%" height="15" fill="rgb(243,80,54)" fg:x="1116" fg:w="2"/><text x="89.6015%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="89.3515%" y="469" width="0.1601%" height="15" fill="rgb(223,166,15)" fg:x="1116" fg:w="2"/><text x="89.6015%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="89.3515%" y="453" width="0.1601%" height="15" fill="rgb(238,78,27)" fg:x="1116" fg:w="2"/><text x="89.6015%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="89.4315%" y="437" width="0.0801%" height="15" fill="rgb(235,28,43)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.4315%" y="421" width="0.0801%" height="15" fill="rgb(240,210,28)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="89.4315%" y="405" width="0.0801%" height="15" fill="rgb(253,6,46)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.4315%" y="389" width="0.0801%" height="15" fill="rgb(250,159,47)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="89.4315%" y="373" width="0.0801%" height="15" fill="rgb(216,139,2)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="89.4315%" y="357" width="0.0801%" height="15" fill="rgb(221,124,44)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="89.4315%" y="341" width="0.0801%" height="15" fill="rgb(205,37,22)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="89.4315%" y="325" width="0.0801%" height="15" fill="rgb(250,55,8)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="89.4315%" y="309" width="0.0801%" height="15" fill="rgb(215,83,48)" fg:x="1117" fg:w="1"/><text x="89.6815%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="89.5116%" y="325" width="0.0801%" height="15" fill="rgb(253,2,32)" fg:x="1118" fg:w="1"/><text x="89.7616%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="89.5116%" y="309" width="0.0801%" height="15" fill="rgb(236,67,28)" fg:x="1118" fg:w="1"/><text x="89.7616%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="89.5116%" y="293" width="0.0801%" height="15" fill="rgb(252,55,15)" fg:x="1118" fg:w="1"/><text x="89.7616%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="89.5116%" y="421" width="0.1601%" height="15" fill="rgb(243,173,17)" fg:x="1118" fg:w="2"/><text x="89.7616%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="89.5116%" y="405" width="0.1601%" height="15" fill="rgb(215,212,13)" fg:x="1118" fg:w="2"/><text x="89.7616%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="89.5116%" y="389" width="0.1601%" height="15" fill="rgb(253,176,6)" fg:x="1118" fg:w="2"/><text x="89.7616%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="89.5116%" y="373" width="0.1601%" height="15" fill="rgb(236,105,26)" fg:x="1118" fg:w="2"/><text x="89.7616%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="89.5116%" y="357" width="0.1601%" height="15" fill="rgb(239,226,32)" fg:x="1118" fg:w="2"/><text x="89.7616%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="89.5116%" y="341" width="0.1601%" height="15" fill="rgb(236,104,51)" fg:x="1118" fg:w="2"/><text x="89.7616%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="89.5917%" y="325" width="0.0801%" height="15" fill="rgb(220,172,33)" fg:x="1119" fg:w="1"/><text x="89.8417%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="89.5917%" y="309" width="0.0801%" height="15" fill="rgb(224,182,25)" fg:x="1119" fg:w="1"/><text x="89.8417%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.48%)</title><rect x="89.2714%" y="581" width="0.4804%" height="15" fill="rgb(236,184,24)" fg:x="1115" fg:w="6"/><text x="89.5214%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (6 samples, 0.48%)</title><rect x="89.2714%" y="565" width="0.4804%" height="15" fill="rgb(241,221,14)" fg:x="1115" fg:w="6"/><text x="89.5214%" y="575.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="89.2714%" y="549" width="0.4804%" height="15" fill="rgb(227,146,5)" fg:x="1115" fg:w="6"/><text x="89.5214%" y="559.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="89.2714%" y="533" width="0.4804%" height="15" fill="rgb(214,15,23)" fg:x="1115" fg:w="6"/><text x="89.5214%" y="543.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="89.2714%" y="517" width="0.4804%" height="15" fill="rgb(233,157,31)" fg:x="1115" fg:w="6"/><text x="89.5214%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="89.2714%" y="501" width="0.4804%" height="15" fill="rgb(211,27,52)" fg:x="1115" fg:w="6"/><text x="89.5214%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="89.5116%" y="485" width="0.2402%" height="15" fill="rgb(212,223,15)" fg:x="1118" fg:w="3"/><text x="89.7616%" y="495.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="89.5116%" y="469" width="0.2402%" height="15" fill="rgb(254,211,0)" fg:x="1118" fg:w="3"/><text x="89.7616%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="89.5116%" y="453" width="0.2402%" height="15" fill="rgb(205,43,38)" fg:x="1118" fg:w="3"/><text x="89.7616%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="89.5116%" y="437" width="0.2402%" height="15" fill="rgb(242,206,46)" fg:x="1118" fg:w="3"/><text x="89.7616%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="89.6717%" y="421" width="0.0801%" height="15" fill="rgb(220,221,12)" fg:x="1120" fg:w="1"/><text x="89.9217%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.8319%" y="309" width="0.0801%" height="15" fill="rgb(217,156,35)" fg:x="1122" fg:w="1"/><text x="90.0819%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="89.8319%" y="405" width="0.1601%" height="15" fill="rgb(207,181,49)" fg:x="1122" fg:w="2"/><text x="90.0819%" y="415.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (2 samples, 0.16%)</title><rect x="89.8319%" y="389" width="0.1601%" height="15" fill="rgb(235,103,47)" fg:x="1122" fg:w="2"/><text x="90.0819%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (2 samples, 0.16%)</title><rect x="89.8319%" y="373" width="0.1601%" height="15" fill="rgb(222,63,28)" fg:x="1122" fg:w="2"/><text x="90.0819%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="89.8319%" y="357" width="0.1601%" height="15" fill="rgb(244,137,21)" fg:x="1122" fg:w="2"/><text x="90.0819%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="89.8319%" y="341" width="0.1601%" height="15" fill="rgb(228,35,27)" fg:x="1122" fg:w="2"/><text x="90.0819%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="89.8319%" y="325" width="0.1601%" height="15" fill="rgb(226,191,41)" fg:x="1122" fg:w="2"/><text x="90.0819%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.9119%" y="309" width="0.0801%" height="15" fill="rgb(210,154,3)" fg:x="1123" fg:w="1"/><text x="90.1619%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="89.9920%" y="373" width="0.0801%" height="15" fill="rgb(216,60,49)" fg:x="1124" fg:w="1"/><text x="90.2420%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="90.0721%" y="373" width="0.0801%" height="15" fill="rgb(226,17,20)" fg:x="1125" fg:w="1"/><text x="90.3221%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="90.0721%" y="357" width="0.0801%" height="15" fill="rgb(206,115,35)" fg:x="1125" fg:w="1"/><text x="90.3221%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.0721%" y="341" width="0.0801%" height="15" fill="rgb(227,88,1)" fg:x="1125" fg:w="1"/><text x="90.3221%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0721%" y="325" width="0.0801%" height="15" fill="rgb(230,222,24)" fg:x="1125" fg:w="1"/><text x="90.3221%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.0721%" y="309" width="0.0801%" height="15" fill="rgb(214,124,32)" fg:x="1125" fg:w="1"/><text x="90.3221%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0721%" y="293" width="0.0801%" height="15" fill="rgb(240,41,36)" fg:x="1125" fg:w="1"/><text x="90.3221%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.0721%" y="277" width="0.0801%" height="15" fill="rgb(221,17,52)" fg:x="1125" fg:w="1"/><text x="90.3221%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.0721%" y="261" width="0.0801%" height="15" fill="rgb(252,70,16)" fg:x="1125" fg:w="1"/><text x="90.3221%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="90.1521%" y="357" width="0.0801%" height="15" fill="rgb(250,177,4)" fg:x="1126" fg:w="1"/><text x="90.4021%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.1521%" y="341" width="0.0801%" height="15" fill="rgb(240,188,47)" fg:x="1126" fg:w="1"/><text x="90.4021%" y="351.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="90.1521%" y="373" width="0.1601%" height="15" fill="rgb(215,92,12)" fg:x="1126" fg:w="2"/><text x="90.4021%" y="383.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="90.2322%" y="357" width="0.0801%" height="15" fill="rgb(242,110,29)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.2322%" y="341" width="0.0801%" height="15" fill="rgb(208,211,26)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="90.2322%" y="325" width="0.0801%" height="15" fill="rgb(244,147,6)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="90.2322%" y="309" width="0.0801%" height="15" fill="rgb(211,130,42)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="90.2322%" y="293" width="0.0801%" height="15" fill="rgb(220,63,1)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="90.2322%" y="277" width="0.0801%" height="15" fill="rgb(241,212,30)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.2322%" y="261" width="0.0801%" height="15" fill="rgb(233,153,17)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="90.2322%" y="245" width="0.0801%" height="15" fill="rgb(236,3,10)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="90.2322%" y="229" width="0.0801%" height="15" fill="rgb(232,41,21)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="90.2322%" y="213" width="0.0801%" height="15" fill="rgb(206,63,51)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="90.2322%" y="197" width="0.0801%" height="15" fill="rgb(250,214,3)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="90.2322%" y="181" width="0.0801%" height="15" fill="rgb(254,89,27)" fg:x="1127" fg:w="1"/><text x="90.4822%" y="191.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="90.3122%" y="373" width="0.0801%" height="15" fill="rgb(249,41,14)" fg:x="1128" fg:w="1"/><text x="90.5622%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.3923%" y="357" width="0.0801%" height="15" fill="rgb(221,196,51)" fg:x="1129" fg:w="1"/><text x="90.6423%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="90.3923%" y="341" width="0.0801%" height="15" fill="rgb(214,116,26)" fg:x="1129" fg:w="1"/><text x="90.6423%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3923%" y="325" width="0.0801%" height="15" fill="rgb(236,67,7)" fg:x="1129" fg:w="1"/><text x="90.6423%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="90.4724%" y="341" width="0.1601%" height="15" fill="rgb(253,179,32)" fg:x="1130" fg:w="2"/><text x="90.7224%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="90.4724%" y="325" width="0.1601%" height="15" fill="rgb(218,33,15)" fg:x="1130" fg:w="2"/><text x="90.7224%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="90.5524%" y="309" width="0.0801%" height="15" fill="rgb(217,202,41)" fg:x="1131" fg:w="1"/><text x="90.8024%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="90.3923%" y="373" width="0.3203%" height="15" fill="rgb(234,133,5)" fg:x="1129" fg:w="4"/><text x="90.6423%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="90.4724%" y="357" width="0.2402%" height="15" fill="rgb(240,47,40)" fg:x="1130" fg:w="3"/><text x="90.7224%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="90.6325%" y="341" width="0.0801%" height="15" fill="rgb(234,166,26)" fg:x="1132" fg:w="1"/><text x="90.8825%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.6325%" y="325" width="0.0801%" height="15" fill="rgb(244,125,51)" fg:x="1132" fg:w="1"/><text x="90.8825%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="90.6325%" y="309" width="0.0801%" height="15" fill="rgb(229,171,11)" fg:x="1132" fg:w="1"/><text x="90.8825%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="90.6325%" y="293" width="0.0801%" height="15" fill="rgb(224,38,45)" fg:x="1132" fg:w="1"/><text x="90.8825%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="90.6325%" y="277" width="0.0801%" height="15" fill="rgb(237,27,7)" fg:x="1132" fg:w="1"/><text x="90.8825%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="90.7126%" y="325" width="0.0801%" height="15" fill="rgb(216,52,7)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="335.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="90.7126%" y="309" width="0.0801%" height="15" fill="rgb(243,11,11)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="90.7126%" y="293" width="0.0801%" height="15" fill="rgb(253,167,20)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="90.7126%" y="277" width="0.0801%" height="15" fill="rgb(215,207,5)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="90.7126%" y="261" width="0.0801%" height="15" fill="rgb(252,127,31)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="90.7126%" y="245" width="0.0801%" height="15" fill="rgb(209,106,27)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="90.7126%" y="229" width="0.0801%" height="15" fill="rgb(214,220,18)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="90.7126%" y="213" width="0.0801%" height="15" fill="rgb(237,89,12)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="90.7126%" y="197" width="0.0801%" height="15" fill="rgb(209,167,36)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="90.7126%" y="181" width="0.0801%" height="15" fill="rgb(243,45,22)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="90.7926%" y="293" width="0.0801%" height="15" fill="rgb(239,2,46)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="90.7926%" y="277" width="0.0801%" height="15" fill="rgb(241,101,0)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="90.7926%" y="261" width="0.0801%" height="15" fill="rgb(244,34,31)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="90.7926%" y="245" width="0.0801%" height="15" fill="rgb(248,23,22)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="90.7926%" y="229" width="0.0801%" height="15" fill="rgb(218,27,48)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="90.7926%" y="213" width="0.0801%" height="15" fill="rgb(232,78,1)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="90.8727%" y="245" width="0.0801%" height="15" fill="rgb(233,169,12)" fg:x="1135" fg:w="1"/><text x="91.1227%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="90.9528%" y="229" width="0.4003%" height="15" fill="rgb(225,222,54)" fg:x="1136" fg:w="5"/><text x="91.2028%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="91.0328%" y="213" width="0.3203%" height="15" fill="rgb(245,126,29)" fg:x="1137" fg:w="4"/><text x="91.2828%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="91.3531%" y="165" width="0.0801%" height="15" fill="rgb(241,63,48)" fg:x="1141" fg:w="1"/><text x="91.6031%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.4331%" y="165" width="0.0801%" height="15" fill="rgb(235,126,38)" fg:x="1142" fg:w="1"/><text x="91.6831%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="91.5132%" y="165" width="0.0801%" height="15" fill="rgb(232,96,49)" fg:x="1143" fg:w="1"/><text x="91.7632%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="91.5132%" y="149" width="0.0801%" height="15" fill="rgb(211,146,40)" fg:x="1143" fg:w="1"/><text x="91.7632%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="91.5132%" y="133" width="0.0801%" height="15" fill="rgb(247,93,44)" fg:x="1143" fg:w="1"/><text x="91.7632%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5132%" y="117" width="0.0801%" height="15" fill="rgb(251,41,49)" fg:x="1143" fg:w="1"/><text x="91.7632%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 1.20%)</title><rect x="91.3531%" y="213" width="1.2010%" height="15" fill="rgb(218,155,12)" fg:x="1141" fg:w="15"/><text x="91.6031%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (15 samples, 1.20%)</title><rect x="91.3531%" y="197" width="1.2010%" height="15" fill="rgb(221,161,30)" fg:x="1141" fg:w="15"/><text x="91.6031%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (15 samples, 1.20%)</title><rect x="91.3531%" y="181" width="1.2010%" height="15" fill="rgb(221,179,11)" fg:x="1141" fg:w="15"/><text x="91.6031%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.96%)</title><rect x="91.5933%" y="165" width="0.9608%" height="15" fill="rgb(224,170,48)" fg:x="1144" fg:w="12"/><text x="91.8433%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.96%)</title><rect x="91.5933%" y="149" width="0.9608%" height="15" fill="rgb(223,117,5)" fg:x="1144" fg:w="12"/><text x="91.8433%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.96%)</title><rect x="91.5933%" y="133" width="0.9608%" height="15" fill="rgb(209,52,20)" fg:x="1144" fg:w="12"/><text x="91.8433%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="92.6341%" y="197" width="0.0801%" height="15" fill="rgb(209,19,41)" fg:x="1157" fg:w="1"/><text x="92.8841%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="92.7142%" y="197" width="0.0801%" height="15" fill="rgb(210,177,12)" fg:x="1158" fg:w="1"/><text x="92.9642%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.7142%" y="181" width="0.0801%" height="15" fill="rgb(211,159,37)" fg:x="1158" fg:w="1"/><text x="92.9642%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7142%" y="165" width="0.0801%" height="15" fill="rgb(209,20,2)" fg:x="1158" fg:w="1"/><text x="92.9642%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.7142%" y="149" width="0.0801%" height="15" fill="rgb(244,3,46)" fg:x="1158" fg:w="1"/><text x="92.9642%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (24 samples, 1.92%)</title><rect x="90.9528%" y="245" width="1.9215%" height="15" fill="rgb(220,94,38)" fg:x="1136" fg:w="24"/><text x="91.2028%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (19 samples, 1.52%)</title><rect x="91.3531%" y="229" width="1.5212%" height="15" fill="rgb(253,14,31)" fg:x="1141" fg:w="19"/><text x="91.6031%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="92.5540%" y="213" width="0.3203%" height="15" fill="rgb(234,176,13)" fg:x="1156" fg:w="4"/><text x="92.8040%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="92.7942%" y="197" width="0.0801%" height="15" fill="rgb(218,62,25)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="92.7942%" y="181" width="0.0801%" height="15" fill="rgb(216,124,40)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="92.8743%" y="245" width="0.0801%" height="15" fill="rgb(228,170,12)" fg:x="1160" fg:w="1"/><text x="93.1243%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="92.8743%" y="229" width="0.0801%" height="15" fill="rgb(231,226,5)" fg:x="1160" fg:w="1"/><text x="93.1243%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.8743%" y="213" width="0.0801%" height="15" fill="rgb(237,122,22)" fg:x="1160" fg:w="1"/><text x="93.1243%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.8743%" y="197" width="0.0801%" height="15" fill="rgb(209,185,25)" fg:x="1160" fg:w="1"/><text x="93.1243%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (28 samples, 2.24%)</title><rect x="90.8727%" y="293" width="2.2418%" height="15" fill="rgb(228,200,32)" fg:x="1135" fg:w="28"/><text x="91.1227%" y="303.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (28 samples, 2.24%)</title><rect x="90.8727%" y="277" width="2.2418%" height="15" fill="rgb(217,140,10)" fg:x="1135" fg:w="28"/><text x="91.1227%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (28 samples, 2.24%)</title><rect x="90.8727%" y="261" width="2.2418%" height="15" fill="rgb(253,17,24)" fg:x="1135" fg:w="28"/><text x="91.1227%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="92.9544%" y="245" width="0.1601%" height="15" fill="rgb(212,61,6)" fg:x="1161" fg:w="2"/><text x="93.2044%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="92.9544%" y="229" width="0.1601%" height="15" fill="rgb(205,14,25)" fg:x="1161" fg:w="2"/><text x="93.2044%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="92.9544%" y="213" width="0.1601%" height="15" fill="rgb(232,69,41)" fg:x="1161" fg:w="2"/><text x="93.2044%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="93.0344%" y="197" width="0.0801%" height="15" fill="rgb(241,106,47)" fg:x="1162" fg:w="1"/><text x="93.2844%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="93.1145%" y="229" width="0.0801%" height="15" fill="rgb(210,213,53)" fg:x="1163" fg:w="1"/><text x="93.3645%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="93.1946%" y="229" width="0.0801%" height="15" fill="rgb(253,175,27)" fg:x="1164" fg:w="1"/><text x="93.4446%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="93.1145%" y="245" width="0.3203%" height="15" fill="rgb(211,171,24)" fg:x="1163" fg:w="4"/><text x="93.3645%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="93.2746%" y="229" width="0.1601%" height="15" fill="rgb(229,80,7)" fg:x="1165" fg:w="2"/><text x="93.5246%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="93.2746%" y="213" width="0.1601%" height="15" fill="rgb(212,46,39)" fg:x="1165" fg:w="2"/><text x="93.5246%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="93.2746%" y="197" width="0.1601%" height="15" fill="rgb(240,80,45)" fg:x="1165" fg:w="2"/><text x="93.5246%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="93.2746%" y="181" width="0.1601%" height="15" fill="rgb(253,177,40)" fg:x="1165" fg:w="2"/><text x="93.5246%" y="191.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (34 samples, 2.72%)</title><rect x="90.7926%" y="309" width="2.7222%" height="15" fill="rgb(249,200,15)" fg:x="1134" fg:w="34"/><text x="91.0426%" y="319.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="93.1145%" y="293" width="0.4003%" height="15" fill="rgb(217,78,26)" fg:x="1163" fg:w="5"/><text x="93.3645%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="93.1145%" y="277" width="0.4003%" height="15" fill="rgb(254,151,32)" fg:x="1163" fg:w="5"/><text x="93.3645%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="93.1145%" y="261" width="0.4003%" height="15" fill="rgb(226,165,27)" fg:x="1163" fg:w="5"/><text x="93.3645%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="93.4347%" y="245" width="0.0801%" height="15" fill="rgb(250,206,4)" fg:x="1167" fg:w="1"/><text x="93.6847%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="93.4347%" y="229" width="0.0801%" height="15" fill="rgb(231,229,27)" fg:x="1167" fg:w="1"/><text x="93.6847%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.4347%" y="213" width="0.0801%" height="15" fill="rgb(239,217,8)" fg:x="1167" fg:w="1"/><text x="93.6847%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.4347%" y="197" width="0.0801%" height="15" fill="rgb(225,204,27)" fg:x="1167" fg:w="1"/><text x="93.6847%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.4347%" y="181" width="0.0801%" height="15" fill="rgb(230,56,32)" fg:x="1167" fg:w="1"/><text x="93.6847%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5148%" y="245" width="0.0801%" height="15" fill="rgb(222,56,27)" fg:x="1168" fg:w="1"/><text x="93.7648%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.5148%" y="229" width="0.0801%" height="15" fill="rgb(253,108,27)" fg:x="1168" fg:w="1"/><text x="93.7648%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.5148%" y="213" width="0.0801%" height="15" fill="rgb(212,87,36)" fg:x="1168" fg:w="1"/><text x="93.7648%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.5148%" y="197" width="0.0801%" height="15" fill="rgb(247,82,36)" fg:x="1168" fg:w="1"/><text x="93.7648%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.5148%" y="181" width="0.0801%" height="15" fill="rgb(222,143,9)" fg:x="1168" fg:w="1"/><text x="93.7648%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.5148%" y="165" width="0.0801%" height="15" fill="rgb(238,162,48)" fg:x="1168" fg:w="1"/><text x="93.7648%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.5949%" y="213" width="0.0801%" height="15" fill="rgb(221,59,43)" fg:x="1169" fg:w="1"/><text x="93.8449%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="93.5949%" y="245" width="0.1601%" height="15" fill="rgb(205,166,41)" fg:x="1169" fg:w="2"/><text x="93.8449%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="93.5949%" y="229" width="0.1601%" height="15" fill="rgb(241,186,40)" fg:x="1169" fg:w="2"/><text x="93.8449%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="93.6749%" y="213" width="0.0801%" height="15" fill="rgb(216,119,35)" fg:x="1170" fg:w="1"/><text x="93.9249%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.6749%" y="197" width="0.0801%" height="15" fill="rgb(208,68,38)" fg:x="1170" fg:w="1"/><text x="93.9249%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.6749%" y="181" width="0.0801%" height="15" fill="rgb(217,113,1)" fg:x="1170" fg:w="1"/><text x="93.9249%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.7550%" y="229" width="0.0801%" height="15" fill="rgb(242,153,3)" fg:x="1171" fg:w="1"/><text x="94.0050%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="93.8351%" y="229" width="0.1601%" height="15" fill="rgb(229,76,35)" fg:x="1172" fg:w="2"/><text x="94.0851%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="93.9151%" y="213" width="0.0801%" height="15" fill="rgb(229,125,34)" fg:x="1173" fg:w="1"/><text x="94.1651%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="94.0753%" y="197" width="0.0801%" height="15" fill="rgb(238,179,36)" fg:x="1175" fg:w="1"/><text x="94.3253%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (9 samples, 0.72%)</title><rect x="93.5148%" y="309" width="0.7206%" height="15" fill="rgb(244,183,19)" fg:x="1168" fg:w="9"/><text x="93.7648%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (9 samples, 0.72%)</title><rect x="93.5148%" y="293" width="0.7206%" height="15" fill="rgb(216,85,49)" fg:x="1168" fg:w="9"/><text x="93.7648%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (9 samples, 0.72%)</title><rect x="93.5148%" y="277" width="0.7206%" height="15" fill="rgb(208,161,47)" fg:x="1168" fg:w="9"/><text x="93.7648%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.72%)</title><rect x="93.5148%" y="261" width="0.7206%" height="15" fill="rgb(233,210,18)" fg:x="1168" fg:w="9"/><text x="93.7648%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.48%)</title><rect x="93.7550%" y="245" width="0.4804%" height="15" fill="rgb(205,104,42)" fg:x="1171" fg:w="6"/><text x="94.0050%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="93.9952%" y="229" width="0.2402%" height="15" fill="rgb(248,90,43)" fg:x="1174" fg:w="3"/><text x="94.2452%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="94.0753%" y="213" width="0.1601%" height="15" fill="rgb(206,198,11)" fg:x="1175" fg:w="2"/><text x="94.3253%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="94.1553%" y="197" width="0.0801%" height="15" fill="rgb(239,165,27)" fg:x="1176" fg:w="1"/><text x="94.4053%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="94.2354%" y="245" width="0.0801%" height="15" fill="rgb(246,44,32)" fg:x="1177" fg:w="1"/><text x="94.4854%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.2354%" y="229" width="0.0801%" height="15" fill="rgb(252,65,42)" fg:x="1177" fg:w="1"/><text x="94.4854%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="94.3155%" y="229" width="0.0801%" height="15" fill="rgb(246,197,18)" fg:x="1178" fg:w="1"/><text x="94.5655%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="94.3155%" y="213" width="0.0801%" height="15" fill="rgb(216,192,4)" fg:x="1178" fg:w="1"/><text x="94.5655%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="94.3955%" y="229" width="0.1601%" height="15" fill="rgb(208,117,10)" fg:x="1179" fg:w="2"/><text x="94.6455%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="94.3955%" y="213" width="0.1601%" height="15" fill="rgb(240,61,47)" fg:x="1179" fg:w="2"/><text x="94.6455%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="94.4756%" y="197" width="0.0801%" height="15" fill="rgb(228,178,21)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="94.7158%" y="197" width="0.0801%" height="15" fill="rgb(219,96,54)" fg:x="1183" fg:w="1"/><text x="94.9658%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="94.7158%" y="181" width="0.0801%" height="15" fill="rgb(250,177,24)" fg:x="1183" fg:w="1"/><text x="94.9658%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.7158%" y="165" width="0.0801%" height="15" fill="rgb(242,154,46)" fg:x="1183" fg:w="1"/><text x="94.9658%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7158%" y="149" width="0.0801%" height="15" fill="rgb(226,176,29)" fg:x="1183" fg:w="1"/><text x="94.9658%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.7158%" y="133" width="0.0801%" height="15" fill="rgb(226,29,2)" fg:x="1183" fg:w="1"/><text x="94.9658%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="94.5556%" y="229" width="0.3203%" height="15" fill="rgb(237,104,14)" fg:x="1181" fg:w="4"/><text x="94.8056%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="94.6357%" y="213" width="0.2402%" height="15" fill="rgb(245,207,31)" fg:x="1182" fg:w="3"/><text x="94.8857%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="94.7958%" y="197" width="0.0801%" height="15" fill="rgb(229,211,45)" fg:x="1184" fg:w="1"/><text x="95.0458%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="94.7958%" y="181" width="0.0801%" height="15" fill="rgb(229,113,15)" fg:x="1184" fg:w="1"/><text x="95.0458%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="94.7958%" y="165" width="0.0801%" height="15" fill="rgb(237,147,15)" fg:x="1184" fg:w="1"/><text x="95.0458%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.8759%" y="181" width="0.0801%" height="15" fill="rgb(244,120,12)" fg:x="1185" fg:w="1"/><text x="95.1259%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.0360%" y="117" width="0.0801%" height="15" fill="rgb(205,120,12)" fg:x="1187" fg:w="1"/><text x="95.2860%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="95.1161%" y="117" width="0.1601%" height="15" fill="rgb(231,26,45)" fg:x="1188" fg:w="2"/><text x="95.3661%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1962%" y="101" width="0.0801%" height="15" fill="rgb(246,98,1)" fg:x="1189" fg:w="1"/><text x="95.4462%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1962%" y="85" width="0.0801%" height="15" fill="rgb(207,68,45)" fg:x="1189" fg:w="1"/><text x="95.4462%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.1962%" y="69" width="0.0801%" height="15" fill="rgb(231,27,38)" fg:x="1189" fg:w="1"/><text x="95.4462%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="95.2762%" y="117" width="0.0801%" height="15" fill="rgb(214,223,3)" fg:x="1190" fg:w="1"/><text x="95.5262%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.2762%" y="101" width="0.0801%" height="15" fill="rgb(228,195,46)" fg:x="1190" fg:w="1"/><text x="95.5262%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.2762%" y="85" width="0.0801%" height="15" fill="rgb(231,100,42)" fg:x="1190" fg:w="1"/><text x="95.5262%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.2762%" y="69" width="0.0801%" height="15" fill="rgb(236,53,4)" fg:x="1190" fg:w="1"/><text x="95.5262%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="95.3563%" y="117" width="0.0801%" height="15" fill="rgb(230,152,12)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="95.3563%" y="101" width="0.0801%" height="15" fill="rgb(226,101,19)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3563%" y="85" width="0.0801%" height="15" fill="rgb(250,149,32)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3563%" y="69" width="0.0801%" height="15" fill="rgb(232,178,12)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3563%" y="53" width="0.0801%" height="15" fill="rgb(246,151,17)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (12 samples, 0.96%)</title><rect x="95.4363%" y="117" width="0.9608%" height="15" fill="rgb(252,17,51)" fg:x="1192" fg:w="12"/><text x="95.6863%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (12 samples, 0.96%)</title><rect x="95.4363%" y="101" width="0.9608%" height="15" fill="rgb(250,207,23)" fg:x="1192" fg:w="12"/><text x="95.6863%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.96%)</title><rect x="95.4363%" y="85" width="0.9608%" height="15" fill="rgb(205,27,5)" fg:x="1192" fg:w="12"/><text x="95.6863%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="96.3971%" y="117" width="0.1601%" height="15" fill="rgb(224,32,19)" fg:x="1204" fg:w="2"/><text x="96.6471%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4772%" y="101" width="0.0801%" height="15" fill="rgb(247,214,40)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="111.50"></text></g><g><title>regex_automata::meta::strategy::new (29 samples, 2.32%)</title><rect x="94.3155%" y="245" width="2.3219%" height="15" fill="rgb(239,199,17)" fg:x="1178" fg:w="29"/><text x="94.5655%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (22 samples, 1.76%)</title><rect x="94.8759%" y="229" width="1.7614%" height="15" fill="rgb(251,159,9)" fg:x="1185" fg:w="22"/><text x="95.1259%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.76%)</title><rect x="94.8759%" y="213" width="1.7614%" height="15" fill="rgb(225,78,32)" fg:x="1185" fg:w="22"/><text x="95.1259%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (22 samples, 1.76%)</title><rect x="94.8759%" y="197" width="1.7614%" height="15" fill="rgb(206,97,47)" fg:x="1185" fg:w="22"/><text x="95.1259%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.68%)</title><rect x="94.9560%" y="181" width="1.6813%" height="15" fill="rgb(227,107,4)" fg:x="1186" fg:w="21"/><text x="95.2060%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (21 samples, 1.68%)</title><rect x="94.9560%" y="165" width="1.6813%" height="15" fill="rgb(241,146,50)" fg:x="1186" fg:w="21"/><text x="95.2060%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (21 samples, 1.68%)</title><rect x="94.9560%" y="149" width="1.6813%" height="15" fill="rgb(232,92,30)" fg:x="1186" fg:w="21"/><text x="95.2060%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.68%)</title><rect x="94.9560%" y="133" width="1.6813%" height="15" fill="rgb(222,0,40)" fg:x="1186" fg:w="21"/><text x="95.2060%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.5572%" y="117" width="0.0801%" height="15" fill="rgb(219,54,33)" fg:x="1206" fg:w="1"/><text x="96.8072%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.6373%" y="213" width="0.1601%" height="15" fill="rgb(226,209,28)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="96.6373%" y="197" width="0.1601%" height="15" fill="rgb(254,205,35)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.6373%" y="181" width="0.1601%" height="15" fill="rgb(230,159,3)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.6373%" y="165" width="0.1601%" height="15" fill="rgb(232,190,24)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="96.6373%" y="149" width="0.1601%" height="15" fill="rgb(217,227,44)" fg:x="1207" fg:w="2"/><text x="96.8873%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (33 samples, 2.64%)</title><rect x="94.2354%" y="293" width="2.6421%" height="15" fill="rgb(236,211,1)" fg:x="1177" fg:w="33"/><text x="94.4854%" y="303.50">&lt;r..</text></g><g><title>regex::builders::string::RegexBuilder::build (33 samples, 2.64%)</title><rect x="94.2354%" y="277" width="2.6421%" height="15" fill="rgb(250,127,46)" fg:x="1177" fg:w="33"/><text x="94.4854%" y="287.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (33 samples, 2.64%)</title><rect x="94.2354%" y="261" width="2.6421%" height="15" fill="rgb(229,213,6)" fg:x="1177" fg:w="33"/><text x="94.4854%" y="271.50">re..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.6373%" y="245" width="0.2402%" height="15" fill="rgb(237,15,36)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.6373%" y="229" width="0.2402%" height="15" fill="rgb(213,131,41)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="96.7974%" y="213" width="0.0801%" height="15" fill="rgb(225,82,44)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7974%" y="197" width="0.0801%" height="15" fill="rgb(249,42,11)" fg:x="1209" fg:w="1"/><text x="97.0474%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="96.9576%" y="261" width="0.1601%" height="15" fill="rgb(253,11,29)" fg:x="1211" fg:w="2"/><text x="97.2076%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="96.9576%" y="245" width="0.1601%" height="15" fill="rgb(206,8,54)" fg:x="1211" fg:w="2"/><text x="97.2076%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.9576%" y="229" width="0.1601%" height="15" fill="rgb(222,186,2)" fg:x="1211" fg:w="2"/><text x="97.2076%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="96.8775%" y="293" width="0.3203%" height="15" fill="rgb(221,206,53)" fg:x="1210" fg:w="4"/><text x="97.1275%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="96.8775%" y="277" width="0.3203%" height="15" fill="rgb(230,150,21)" fg:x="1210" fg:w="4"/><text x="97.1275%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.1177%" y="261" width="0.0801%" height="15" fill="rgb(253,202,10)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.1177%" y="245" width="0.0801%" height="15" fill="rgb(238,109,40)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1177%" y="229" width="0.0801%" height="15" fill="rgb(247,120,22)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="97.1978%" y="277" width="0.1601%" height="15" fill="rgb(207,43,30)" fg:x="1214" fg:w="2"/><text x="97.4478%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="97.1978%" y="261" width="0.1601%" height="15" fill="rgb(213,211,24)" fg:x="1214" fg:w="2"/><text x="97.4478%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.5180%" y="197" width="0.0801%" height="15" fill="rgb(239,73,39)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5180%" y="181" width="0.0801%" height="15" fill="rgb(245,182,19)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.5180%" y="165" width="0.0801%" height="15" fill="rgb(247,143,26)" fg:x="1218" fg:w="1"/><text x="97.7680%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (96 samples, 7.69%)</title><rect x="89.9920%" y="389" width="7.6861%" height="15" fill="rgb(228,191,23)" fg:x="1124" fg:w="96"/><text x="90.2420%" y="399.50">&lt;&amp;kernel::m..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (87 samples, 6.97%)</title><rect x="90.7126%" y="373" width="6.9656%" height="15" fill="rgb(253,165,31)" fg:x="1133" fg:w="87"/><text x="90.9626%" y="383.50">plugins_c..</text></g><g><title>indefinite::indefinite (87 samples, 6.97%)</title><rect x="90.7126%" y="357" width="6.9656%" height="15" fill="rgb(234,138,20)" fg:x="1133" fg:w="87"/><text x="90.9626%" y="367.50">indefinit..</text></g><g><title>indefinite::methods::indefinite (87 samples, 6.97%)</title><rect x="90.7126%" y="341" width="6.9656%" height="15" fill="rgb(218,191,29)" fg:x="1133" fg:w="87"/><text x="90.9626%" y="351.50">indefinit..</text></g><g><title>indefinite::methods::apply_rules (86 samples, 6.89%)</title><rect x="90.7926%" y="325" width="6.8855%" height="15" fill="rgb(221,157,19)" fg:x="1134" fg:w="86"/><text x="91.0426%" y="335.50">indefinit..</text></g><g><title>indefinite::rules::number::Number::check (43 samples, 3.44%)</title><rect x="94.2354%" y="309" width="3.4428%" height="15" fill="rgb(237,26,42)" fg:x="1177" fg:w="43"/><text x="94.4854%" y="319.50">ind..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="97.1978%" y="293" width="0.4804%" height="15" fill="rgb(220,163,24)" fg:x="1214" fg:w="6"/><text x="97.4478%" y="303.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="97.3579%" y="277" width="0.3203%" height="15" fill="rgb(242,115,20)" fg:x="1216" fg:w="4"/><text x="97.6079%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="97.3579%" y="261" width="0.3203%" height="15" fill="rgb(210,206,9)" fg:x="1216" fg:w="4"/><text x="97.6079%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="97.3579%" y="245" width="0.3203%" height="15" fill="rgb(208,71,17)" fg:x="1216" fg:w="4"/><text x="97.6079%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="97.4380%" y="229" width="0.2402%" height="15" fill="rgb(233,7,5)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="97.4380%" y="213" width="0.2402%" height="15" fill="rgb(207,92,33)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5981%" y="197" width="0.0801%" height="15" fill="rgb(218,87,9)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="97.5981%" y="181" width="0.0801%" height="15" fill="rgb(219,47,37)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5981%" y="165" width="0.0801%" height="15" fill="rgb(221,152,34)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="175.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.6781%" y="389" width="0.0801%" height="15" fill="rgb(235,176,21)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="373" width="0.0801%" height="15" fill="rgb(232,212,21)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6781%" y="357" width="0.0801%" height="15" fill="rgb(245,82,39)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="341" width="0.0801%" height="15" fill="rgb(241,52,51)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="325" width="0.0801%" height="15" fill="rgb(219,91,24)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (1 samples, 0.08%)</title><rect x="97.7582%" y="373" width="0.0801%" height="15" fill="rgb(241,142,12)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="97.7582%" y="357" width="0.0801%" height="15" fill="rgb(230,27,9)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.7582%" y="341" width="0.0801%" height="15" fill="rgb(249,181,32)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7582%" y="325" width="0.0801%" height="15" fill="rgb(230,107,3)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7582%" y="309" width="0.0801%" height="15" fill="rgb(246,204,14)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7582%" y="293" width="0.0801%" height="15" fill="rgb(213,192,47)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7582%" y="277" width="0.0801%" height="15" fill="rgb(240,44,36)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7582%" y="261" width="0.0801%" height="15" fill="rgb(244,209,38)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.7582%" y="245" width="0.0801%" height="15" fill="rgb(219,34,37)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.7582%" y="229" width="0.0801%" height="15" fill="rgb(210,28,6)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.7582%" y="213" width="0.0801%" height="15" fill="rgb(244,110,52)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.7582%" y="197" width="0.0801%" height="15" fill="rgb(254,124,47)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.7582%" y="181" width="0.0801%" height="15" fill="rgb(254,110,13)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.7582%" y="165" width="0.0801%" height="15" fill="rgb(252,57,21)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.7582%" y="149" width="0.0801%" height="15" fill="rgb(242,60,45)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.7582%" y="133" width="0.0801%" height="15" fill="rgb(234,49,30)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.7582%" y="117" width="0.0801%" height="15" fill="rgb(218,98,6)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7582%" y="101" width="0.0801%" height="15" fill="rgb(220,174,29)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="111.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.8383%" y="309" width="0.0801%" height="15" fill="rgb(236,163,23)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8383%" y="293" width="0.0801%" height="15" fill="rgb(242,114,45)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8383%" y="277" width="0.0801%" height="15" fill="rgb(232,10,53)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.8383%" y="261" width="0.0801%" height="15" fill="rgb(245,108,29)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8383%" y="245" width="0.0801%" height="15" fill="rgb(240,89,53)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.8383%" y="229" width="0.0801%" height="15" fill="rgb(226,60,45)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9984%" y="213" width="0.0801%" height="15" fill="rgb(230,41,44)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9984%" y="197" width="0.0801%" height="15" fill="rgb(230,26,20)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.9984%" y="181" width="0.0801%" height="15" fill="rgb(237,170,32)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9984%" y="165" width="0.0801%" height="15" fill="rgb(212,35,42)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="97.7582%" y="389" width="0.4003%" height="15" fill="rgb(227,31,34)" fg:x="1221" fg:w="5"/><text x="98.0082%" y="399.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="97.8383%" y="373" width="0.3203%" height="15" fill="rgb(216,19,18)" fg:x="1222" fg:w="4"/><text x="98.0883%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="97.8383%" y="357" width="0.3203%" height="15" fill="rgb(211,133,42)" fg:x="1222" fg:w="4"/><text x="98.0883%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="97.8383%" y="341" width="0.3203%" height="15" fill="rgb(244,66,13)" fg:x="1222" fg:w="4"/><text x="98.0883%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="97.8383%" y="325" width="0.3203%" height="15" fill="rgb(218,185,50)" fg:x="1222" fg:w="4"/><text x="98.0883%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.9183%" y="309" width="0.2402%" height="15" fill="rgb(219,149,13)" fg:x="1223" fg:w="3"/><text x="98.1683%" y="319.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.9183%" y="293" width="0.2402%" height="15" fill="rgb(221,125,0)" fg:x="1223" fg:w="3"/><text x="98.1683%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.9183%" y="277" width="0.2402%" height="15" fill="rgb(247,126,27)" fg:x="1223" fg:w="3"/><text x="98.1683%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.9183%" y="261" width="0.2402%" height="15" fill="rgb(250,138,30)" fg:x="1223" fg:w="3"/><text x="98.1683%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.9984%" y="245" width="0.1601%" height="15" fill="rgb(230,151,9)" fg:x="1224" fg:w="2"/><text x="98.2484%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.9984%" y="229" width="0.1601%" height="15" fill="rgb(233,80,38)" fg:x="1224" fg:w="2"/><text x="98.2484%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.0785%" y="213" width="0.0801%" height="15" fill="rgb(232,68,43)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="223.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.0785%" y="197" width="0.0801%" height="15" fill="rgb(254,5,50)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="207.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (106 samples, 8.49%)</title><rect x="89.7518%" y="549" width="8.4868%" height="15" fill="rgb(225,45,5)" fg:x="1121" fg:w="106"/><text x="90.0018%" y="559.50">kernel::plug..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (106 samples, 8.49%)</title><rect x="89.7518%" y="533" width="8.4868%" height="15" fill="rgb(239,22,3)" fg:x="1121" fg:w="106"/><text x="90.0018%" y="543.50">&lt;plugins_dyn..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (106 samples, 8.49%)</title><rect x="89.7518%" y="517" width="8.4868%" height="15" fill="rgb(243,129,0)" fg:x="1121" fg:w="106"/><text x="90.0018%" y="527.50">kernel::plug..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (106 samples, 8.49%)</title><rect x="89.7518%" y="501" width="8.4868%" height="15" fill="rgb(223,164,0)" fg:x="1121" fg:w="106"/><text x="90.0018%" y="511.50">core::ops::f..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (106 samples, 8.49%)</title><rect x="89.7518%" y="485" width="8.4868%" height="15" fill="rgb(221,46,29)" fg:x="1121" fg:w="106"/><text x="90.0018%" y="495.50">kernel::plug..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (106 samples, 8.49%)</title><rect x="89.7518%" y="469" width="8.4868%" height="15" fill="rgb(205,97,47)" fg:x="1121" fg:w="106"/><text x="90.0018%" y="479.50">core::ops::f..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (106 samples, 8.49%)</title><rect x="89.7518%" y="453" width="8.4868%" height="15" fill="rgb(249,14,8)" fg:x="1121" fg:w="106"/><text x="90.0018%" y="463.50">&lt;alloc::boxe..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (106 samples, 8.49%)</title><rect x="89.7518%" y="437" width="8.4868%" height="15" fill="rgb(216,77,3)" fg:x="1121" fg:w="106"/><text x="90.0018%" y="447.50">&lt;engine::ses..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (106 samples, 8.49%)</title><rect x="89.7518%" y="421" width="8.4868%" height="15" fill="rgb(206,168,54)" fg:x="1121" fg:w="106"/><text x="90.0018%" y="431.50">&lt;plugins_cor..</text></g><g><title>plugins_core::looking::model::new_area_observation (103 samples, 8.25%)</title><rect x="89.9920%" y="405" width="8.2466%" height="15" fill="rgb(236,3,41)" fg:x="1124" fg:w="103"/><text x="90.2420%" y="415.50">plugins_cor..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="98.1585%" y="389" width="0.0801%" height="15" fill="rgb(231,132,24)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="98.1585%" y="373" width="0.0801%" height="15" fill="rgb(227,221,40)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="98.1585%" y="357" width="0.0801%" height="15" fill="rgb(233,151,11)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="367.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="98.1585%" y="341" width="0.0801%" height="15" fill="rgb(247,81,35)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.1585%" y="325" width="0.0801%" height="15" fill="rgb(243,128,48)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.2386%" y="501" width="0.0801%" height="15" fill="rgb(253,16,10)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2386%" y="485" width="0.0801%" height="15" fill="rgb(228,67,27)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2386%" y="469" width="0.0801%" height="15" fill="rgb(231,105,25)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.2386%" y="453" width="0.0801%" height="15" fill="rgb(213,166,47)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.2386%" y="437" width="0.0801%" height="15" fill="rgb(209,27,10)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.2386%" y="421" width="0.0801%" height="15" fill="rgb(241,44,30)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2386%" y="405" width="0.0801%" height="15" fill="rgb(223,216,15)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2386%" y="389" width="0.0801%" height="15" fill="rgb(227,14,7)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="98.3187%" y="437" width="0.0801%" height="15" fill="rgb(237,14,5)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3187%" y="421" width="0.0801%" height="15" fill="rgb(232,14,36)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3187%" y="405" width="0.0801%" height="15" fill="rgb(234,0,38)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.3187%" y="389" width="0.0801%" height="15" fill="rgb(207,170,14)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3187%" y="373" width="0.0801%" height="15" fill="rgb(252,45,13)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3187%" y="357" width="0.0801%" height="15" fill="rgb(213,142,7)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3187%" y="341" width="0.0801%" height="15" fill="rgb(216,157,23)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.3187%" y="325" width="0.0801%" height="15" fill="rgb(212,145,33)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.3987%" y="341" width="0.1601%" height="15" fill="rgb(233,26,13)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.3987%" y="325" width="0.1601%" height="15" fill="rgb(219,196,19)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4788%" y="309" width="0.0801%" height="15" fill="rgb(246,56,21)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4788%" y="293" width="0.0801%" height="15" fill="rgb(222,28,53)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.4788%" y="277" width="0.0801%" height="15" fill="rgb(224,5,27)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.4788%" y="261" width="0.0801%" height="15" fill="rgb(220,153,33)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4788%" y="245" width="0.0801%" height="15" fill="rgb(226,58,19)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.4788%" y="229" width="0.0801%" height="15" fill="rgb(239,112,23)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="239.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="98.3987%" y="437" width="0.2402%" height="15" fill="rgb(251,213,20)" fg:x="1229" fg:w="3"/><text x="98.6487%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.3987%" y="421" width="0.2402%" height="15" fill="rgb(215,181,21)" fg:x="1229" fg:w="3"/><text x="98.6487%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.3987%" y="405" width="0.2402%" height="15" fill="rgb(240,8,35)" fg:x="1229" fg:w="3"/><text x="98.6487%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="98.3987%" y="389" width="0.2402%" height="15" fill="rgb(232,203,3)" fg:x="1229" fg:w="3"/><text x="98.6487%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.3987%" y="373" width="0.2402%" height="15" fill="rgb(214,202,43)" fg:x="1229" fg:w="3"/><text x="98.6487%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="98.3987%" y="357" width="0.2402%" height="15" fill="rgb(254,35,11)" fg:x="1229" fg:w="3"/><text x="98.6487%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5588%" y="341" width="0.0801%" height="15" fill="rgb(239,173,13)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5588%" y="325" width="0.0801%" height="15" fill="rgb(220,141,0)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.5588%" y="309" width="0.0801%" height="15" fill="rgb(210,98,12)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5588%" y="293" width="0.0801%" height="15" fill="rgb(254,153,22)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5588%" y="277" width="0.0801%" height="15" fill="rgb(247,223,17)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.5588%" y="261" width="0.0801%" height="15" fill="rgb(246,56,7)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5588%" y="245" width="0.0801%" height="15" fill="rgb(240,226,12)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.5588%" y="229" width="0.0801%" height="15" fill="rgb(205,87,46)" fg:x="1231" fg:w="1"/><text x="98.8088%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6389%" y="309" width="0.0801%" height="15" fill="rgb(245,214,51)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6389%" y="293" width="0.0801%" height="15" fill="rgb(223,172,33)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.6389%" y="277" width="0.0801%" height="15" fill="rgb(227,203,34)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.6389%" y="261" width="0.0801%" height="15" fill="rgb(248,143,44)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.6389%" y="245" width="0.0801%" height="15" fill="rgb(226,162,5)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6389%" y="229" width="0.0801%" height="15" fill="rgb(211,143,1)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="239.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.56%)</title><rect x="98.2386%" y="517" width="0.5604%" height="15" fill="rgb(224,96,15)" fg:x="1227" fg:w="7"/><text x="98.4886%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="98.3187%" y="501" width="0.4804%" height="15" fill="rgb(222,4,38)" fg:x="1228" fg:w="6"/><text x="98.5687%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="98.3187%" y="485" width="0.4804%" height="15" fill="rgb(253,228,15)" fg:x="1228" fg:w="6"/><text x="98.5687%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="98.3187%" y="469" width="0.4804%" height="15" fill="rgb(242,194,12)" fg:x="1228" fg:w="6"/><text x="98.5687%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.3187%" y="453" width="0.4804%" height="15" fill="rgb(214,177,31)" fg:x="1228" fg:w="6"/><text x="98.5687%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.6389%" y="437" width="0.1601%" height="15" fill="rgb(226,58,51)" fg:x="1232" fg:w="2"/><text x="98.8889%" y="447.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.6389%" y="421" width="0.1601%" height="15" fill="rgb(250,119,16)" fg:x="1232" fg:w="2"/><text x="98.8889%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.6389%" y="405" width="0.1601%" height="15" fill="rgb(223,128,53)" fg:x="1232" fg:w="2"/><text x="98.8889%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6389%" y="389" width="0.1601%" height="15" fill="rgb(251,199,15)" fg:x="1232" fg:w="2"/><text x="98.8889%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.6389%" y="373" width="0.1601%" height="15" fill="rgb(235,168,42)" fg:x="1232" fg:w="2"/><text x="98.8889%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6389%" y="357" width="0.1601%" height="15" fill="rgb(250,210,17)" fg:x="1232" fg:w="2"/><text x="98.8889%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.6389%" y="341" width="0.1601%" height="15" fill="rgb(226,36,41)" fg:x="1232" fg:w="2"/><text x="98.8889%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6389%" y="325" width="0.1601%" height="15" fill="rgb(225,87,10)" fg:x="1232" fg:w="2"/><text x="98.8889%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7190%" y="309" width="0.0801%" height="15" fill="rgb(228,83,9)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7190%" y="293" width="0.0801%" height="15" fill="rgb(225,16,36)" fg:x="1233" fg:w="1"/><text x="98.9690%" y="303.50"></text></g><g><title>plugins_core::tools::occupied_by (1 samples, 0.08%)</title><rect x="98.7990%" y="517" width="0.0801%" height="15" fill="rgb(242,198,13)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.7990%" y="501" width="0.0801%" height="15" fill="rgb(239,25,51)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7990%" y="485" width="0.0801%" height="15" fill="rgb(239,28,37)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7990%" y="469" width="0.0801%" height="15" fill="rgb(234,70,17)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.7990%" y="453" width="0.0801%" height="15" fill="rgb(231,215,53)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.7990%" y="437" width="0.0801%" height="15" fill="rgb(218,140,42)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.7990%" y="421" width="0.0801%" height="15" fill="rgb(233,227,45)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="431.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (9 samples, 0.72%)</title><rect x="98.2386%" y="533" width="0.7206%" height="15" fill="rgb(225,189,21)" fg:x="1227" fg:w="9"/><text x="98.4886%" y="543.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="98.8791%" y="517" width="0.0801%" height="15" fill="rgb(237,176,54)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.8791%" y="501" width="0.0801%" height="15" fill="rgb(215,131,46)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8791%" y="485" width="0.0801%" height="15" fill="rgb(218,95,20)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8791%" y="469" width="0.0801%" height="15" fill="rgb(208,198,12)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.8791%" y="453" width="0.0801%" height="15" fill="rgb(239,107,50)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.8791%" y="437" width="0.0801%" height="15" fill="rgb(240,217,37)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="447.50"></text></g><g><title>engine::session::Session::captured (124 samples, 9.93%)</title><rect x="89.1113%" y="693" width="9.9279%" height="15" fill="rgb(242,197,49)" fg:x="1113" fg:w="124"/><text x="89.3613%" y="703.50">engine::sessio..</text></g><g><title>engine::session::logs::capture (123 samples, 9.85%)</title><rect x="89.1914%" y="677" width="9.8479%" height="15" fill="rgb(219,171,17)" fg:x="1114" fg:w="123"/><text x="89.4414%" y="687.50">engine::sessio..</text></g><g><title>tracing_core::dispatcher::with_default (122 samples, 9.77%)</title><rect x="89.2714%" y="661" width="9.7678%" height="15" fill="rgb(209,81,40)" fg:x="1115" fg:w="122"/><text x="89.5214%" y="671.50">tracing_core::..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (122 samples, 9.77%)</title><rect x="89.2714%" y="645" width="9.7678%" height="15" fill="rgb(237,156,30)" fg:x="1115" fg:w="122"/><text x="89.5214%" y="655.50">&lt;engine::sessi..</text></g><g><title>kernel::plugins::mw::apply_middleware (122 samples, 9.77%)</title><rect x="89.2714%" y="629" width="9.7678%" height="15" fill="rgb(212,127,16)" fg:x="1115" fg:w="122"/><text x="89.5214%" y="639.50">kernel::plugin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (122 samples, 9.77%)</title><rect x="89.2714%" y="613" width="9.7678%" height="15" fill="rgb(226,66,32)" fg:x="1115" fg:w="122"/><text x="89.5214%" y="623.50">kernel::plugin..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (122 samples, 9.77%)</title><rect x="89.2714%" y="597" width="9.7678%" height="15" fill="rgb(245,22,46)" fg:x="1115" fg:w="122"/><text x="89.5214%" y="607.50">&lt;engine::sessi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (116 samples, 9.29%)</title><rect x="89.7518%" y="581" width="9.2874%" height="15" fill="rgb(210,112,21)" fg:x="1121" fg:w="116"/><text x="90.0018%" y="591.50">kernel::plugi..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (116 samples, 9.29%)</title><rect x="89.7518%" y="565" width="9.2874%" height="15" fill="rgb(207,118,39)" fg:x="1121" fg:w="116"/><text x="90.0018%" y="575.50">&lt;plugins_rune..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (10 samples, 0.80%)</title><rect x="98.2386%" y="549" width="0.8006%" height="15" fill="rgb(205,206,35)" fg:x="1227" fg:w="10"/><text x="98.4886%" y="559.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::new_from_surroundings (1 samples, 0.08%)</title><rect x="98.9592%" y="533" width="0.0801%" height="15" fill="rgb(222,120,2)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9592%" y="517" width="0.0801%" height="15" fill="rgb(205,38,18)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.0392%" y="677" width="0.0801%" height="15" fill="rgb(226,61,2)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0392%" y="661" width="0.0801%" height="15" fill="rgb(242,161,23)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.0392%" y="645" width="0.0801%" height="15" fill="rgb(213,13,52)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.0392%" y="629" width="0.0801%" height="15" fill="rgb(246,209,47)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.0392%" y="613" width="0.0801%" height="15" fill="rgb(214,41,3)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.0392%" y="597" width="0.0801%" height="15" fill="rgb(236,119,38)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.0392%" y="581" width="0.0801%" height="15" fill="rgb(218,50,11)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.0392%" y="565" width="0.0801%" height="15" fill="rgb(228,38,11)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.0392%" y="549" width="0.0801%" height="15" fill="rgb(212,13,9)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.0392%" y="533" width="0.0801%" height="15" fill="rgb(208,211,9)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.0392%" y="517" width="0.0801%" height="15" fill="rgb(239,39,32)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.0392%" y="501" width="0.0801%" height="15" fill="rgb(254,179,26)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.0392%" y="485" width="0.0801%" height="15" fill="rgb(249,165,28)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.0392%" y="469" width="0.0801%" height="15" fill="rgb(225,59,50)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1193%" y="645" width="0.0801%" height="15" fill="rgb(209,122,5)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1193%" y="629" width="0.0801%" height="15" fill="rgb(214,65,34)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1193%" y="613" width="0.0801%" height="15" fill="rgb(249,183,32)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1193%" y="597" width="0.0801%" height="15" fill="rgb(218,122,24)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1193%" y="581" width="0.0801%" height="15" fill="rgb(224,109,18)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1193%" y="565" width="0.0801%" height="15" fill="rgb(210,68,50)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1193%" y="549" width="0.0801%" height="15" fill="rgb(212,184,34)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1193%" y="533" width="0.0801%" height="15" fill="rgb(238,105,48)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1193%" y="517" width="0.0801%" height="15" fill="rgb(222,134,54)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1193%" y="501" width="0.0801%" height="15" fill="rgb(246,24,43)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1193%" y="485" width="0.0801%" height="15" fill="rgb(227,169,22)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1193%" y="469" width="0.0801%" height="15" fill="rgb(253,152,4)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1193%" y="453" width="0.0801%" height="15" fill="rgb(219,158,36)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1193%" y="437" width="0.0801%" height="15" fill="rgb(251,128,40)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1193%" y="421" width="0.0801%" height="15" fill="rgb(254,101,39)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1193%" y="405" width="0.0801%" height="15" fill="rgb(221,168,40)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="415.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="99.1193%" y="677" width="0.1601%" height="15" fill="rgb(221,14,27)" fg:x="1238" fg:w="2"/><text x="99.3693%" y="687.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="99.1193%" y="661" width="0.1601%" height="15" fill="rgb(207,36,43)" fg:x="1238" fg:w="2"/><text x="99.3693%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1994%" y="645" width="0.0801%" height="15" fill="rgb(240,172,53)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1994%" y="629" width="0.0801%" height="15" fill="rgb(241,138,43)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="639.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1994%" y="613" width="0.0801%" height="15" fill="rgb(227,78,19)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1994%" y="597" width="0.0801%" height="15" fill="rgb(215,127,44)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.1994%" y="581" width="0.0801%" height="15" fill="rgb(227,13,10)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.1994%" y="565" width="0.0801%" height="15" fill="rgb(249,177,6)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1994%" y="549" width="0.0801%" height="15" fill="rgb(215,154,26)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1994%" y="533" width="0.0801%" height="15" fill="rgb(250,168,20)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1994%" y="517" width="0.0801%" height="15" fill="rgb(222,53,38)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1994%" y="501" width="0.0801%" height="15" fill="rgb(245,154,5)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.1994%" y="485" width="0.0801%" height="15" fill="rgb(214,89,50)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.1994%" y="469" width="0.0801%" height="15" fill="rgb(232,73,14)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.1994%" y="453" width="0.0801%" height="15" fill="rgb(230,101,20)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1994%" y="437" width="0.0801%" height="15" fill="rgb(208,56,28)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.1994%" y="421" width="0.0801%" height="15" fill="rgb(247,205,22)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.1994%" y="405" width="0.0801%" height="15" fill="rgb(252,109,51)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.1994%" y="389" width="0.0801%" height="15" fill="rgb(220,40,24)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.1994%" y="373" width="0.0801%" height="15" fill="rgb(251,108,7)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.1994%" y="357" width="0.0801%" height="15" fill="rgb(238,102,51)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1994%" y="341" width="0.0801%" height="15" fill="rgb(219,149,34)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2794%" y="533" width="0.0801%" height="15" fill="rgb(239,70,0)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2794%" y="517" width="0.0801%" height="15" fill="rgb(246,214,23)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="527.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.2794%" y="501" width="0.0801%" height="15" fill="rgb(239,221,51)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2794%" y="485" width="0.0801%" height="15" fill="rgb(254,62,14)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2794%" y="469" width="0.0801%" height="15" fill="rgb(253,57,33)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.2794%" y="565" width="0.1601%" height="15" fill="rgb(229,34,6)" fg:x="1240" fg:w="2"/><text x="99.5294%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2794%" y="549" width="0.1601%" height="15" fill="rgb(235,191,23)" fg:x="1240" fg:w="2"/><text x="99.5294%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3595%" y="533" width="0.0801%" height="15" fill="rgb(217,207,27)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.2794%" y="661" width="0.2402%" height="15" fill="rgb(232,41,44)" fg:x="1240" fg:w="3"/><text x="99.5294%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.2794%" y="645" width="0.2402%" height="15" fill="rgb(221,188,19)" fg:x="1240" fg:w="3"/><text x="99.5294%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.2794%" y="629" width="0.2402%" height="15" fill="rgb(245,180,45)" fg:x="1240" fg:w="3"/><text x="99.5294%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.2794%" y="613" width="0.2402%" height="15" fill="rgb(250,220,42)" fg:x="1240" fg:w="3"/><text x="99.5294%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.2794%" y="597" width="0.2402%" height="15" fill="rgb(234,16,34)" fg:x="1240" fg:w="3"/><text x="99.5294%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.2794%" y="581" width="0.2402%" height="15" fill="rgb(233,217,23)" fg:x="1240" fg:w="3"/><text x="99.5294%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4396%" y="565" width="0.0801%" height="15" fill="rgb(209,22,46)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4396%" y="549" width="0.0801%" height="15" fill="rgb(213,101,18)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.4396%" y="533" width="0.0801%" height="15" fill="rgb(215,179,52)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4396%" y="517" width="0.0801%" height="15" fill="rgb(223,50,25)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4396%" y="501" width="0.0801%" height="15" fill="rgb(224,51,44)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.4396%" y="485" width="0.0801%" height="15" fill="rgb(224,13,54)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4396%" y="469" width="0.0801%" height="15" fill="rgb(219,58,47)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.56%)</title><rect x="99.0392%" y="693" width="0.5604%" height="15" fill="rgb(246,124,34)" fg:x="1237" fg:w="7"/><text x="99.2892%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.2794%" y="677" width="0.3203%" height="15" fill="rgb(245,109,25)" fg:x="1240" fg:w="4"/><text x="99.5294%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.5196%" y="661" width="0.0801%" height="15" fill="rgb(235,48,23)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5196%" y="645" width="0.0801%" height="15" fill="rgb(229,203,36)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5196%" y="629" width="0.0801%" height="15" fill="rgb(234,180,9)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5196%" y="613" width="0.0801%" height="15" fill="rgb(228,98,45)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5196%" y="597" width="0.0801%" height="15" fill="rgb(240,24,36)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5196%" y="581" width="0.0801%" height="15" fill="rgb(227,154,19)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5196%" y="565" width="0.0801%" height="15" fill="rgb(231,2,48)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5196%" y="549" width="0.0801%" height="15" fill="rgb(219,216,0)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.5196%" y="533" width="0.0801%" height="15" fill="rgb(251,88,0)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5997%" y="549" width="0.0801%" height="15" fill="rgb(242,45,45)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5997%" y="533" width="0.0801%" height="15" fill="rgb(218,149,45)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5997%" y="517" width="0.0801%" height="15" fill="rgb(247,194,10)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5997%" y="501" width="0.0801%" height="15" fill="rgb(234,33,37)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.5997%" y="645" width="0.2402%" height="15" fill="rgb(218,61,13)" fg:x="1244" fg:w="3"/><text x="99.8497%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5997%" y="629" width="0.2402%" height="15" fill="rgb(210,80,52)" fg:x="1244" fg:w="3"/><text x="99.8497%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5997%" y="613" width="0.2402%" height="15" fill="rgb(218,203,27)" fg:x="1244" fg:w="3"/><text x="99.8497%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="99.5997%" y="597" width="0.2402%" height="15" fill="rgb(209,126,33)" fg:x="1244" fg:w="3"/><text x="99.8497%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5997%" y="581" width="0.2402%" height="15" fill="rgb(234,173,41)" fg:x="1244" fg:w="3"/><text x="99.8497%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="99.5997%" y="565" width="0.2402%" height="15" fill="rgb(228,166,9)" fg:x="1244" fg:w="3"/><text x="99.8497%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6797%" y="549" width="0.1601%" height="15" fill="rgb(208,124,43)" fg:x="1245" fg:w="2"/><text x="99.9297%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.6797%" y="533" width="0.1601%" height="15" fill="rgb(212,154,38)" fg:x="1245" fg:w="2"/><text x="99.9297%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="99.6797%" y="517" width="0.1601%" height="15" fill="rgb(246,179,35)" fg:x="1245" fg:w="2"/><text x="99.9297%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.7598%" y="501" width="0.0801%" height="15" fill="rgb(251,3,50)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7598%" y="485" width="0.0801%" height="15" fill="rgb(219,96,8)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="495.50"></text></g><g><title>all (1,249 samples, 100%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(251,216,33)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1087.50"></text></g><g><title>simple-9b79c65b (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(243,145,29)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1071.50">simple-9b79c65b</text></g><g><title>_start (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(210,75,20)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1055.50">_start</text></g><g><title>__libc_start_main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(235,56,8)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1039.50">__libc_start_main</text></g><g><title>main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(226,175,49)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1023.50">main</text></g><g><title>std::rt::lang_start_internal (1,249 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(242,204,23)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(225,104,24)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(253,34,1)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(233,199,23)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(247,7,51)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(214,146,12)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(234,181,43)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(239,148,6)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,249 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(206,151,17)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="879.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(213,215,10)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="863.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,249 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(215,220,44)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(245,205,37)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="831.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,249 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(245,130,43)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,249 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(231,227,38)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="799.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (294 samples, 23.54%)</title><rect x="76.4612%" y="773" width="23.5388%" height="15" fill="rgb(233,185,4)" fg:x="955" fg:w="294"/><text x="76.7112%" y="783.50">&lt;criterion::routine::Function&lt;M,F,T&gt; ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (294 samples, 23.54%)</title><rect x="76.4612%" y="757" width="23.5388%" height="15" fill="rgb(224,154,43)" fg:x="955" fg:w="294"/><text x="76.7112%" y="767.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (294 samples, 23.54%)</title><rect x="76.4612%" y="741" width="23.5388%" height="15" fill="rgb(235,156,15)" fg:x="955" fg:w="294"/><text x="76.7112%" y="751.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (137 samples, 10.97%)</title><rect x="89.0312%" y="725" width="10.9688%" height="15" fill="rgb(211,55,43)" fg:x="1112" fg:w="137"/><text x="89.2812%" y="735.50">engine::session:..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (137 samples, 10.97%)</title><rect x="89.0312%" y="709" width="10.9688%" height="15" fill="rgb(247,149,40)" fg:x="1112" fg:w="137"/><text x="89.2812%" y="719.50">engine::session:..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.40%)</title><rect x="99.5997%" y="693" width="0.4003%" height="15" fill="rgb(232,171,16)" fg:x="1244" fg:w="5"/><text x="99.8497%" y="703.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="99.5997%" y="677" width="0.4003%" height="15" fill="rgb(215,117,49)" fg:x="1244" fg:w="5"/><text x="99.8497%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.5997%" y="661" width="0.4003%" height="15" fill="rgb(246,194,11)" fg:x="1244" fg:w="5"/><text x="99.8497%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8399%" y="645" width="0.1601%" height="15" fill="rgb(242,101,44)" fg:x="1247" fg:w="2"/><text x="100.0899%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8399%" y="629" width="0.1601%" height="15" fill="rgb(226,174,6)" fg:x="1247" fg:w="2"/><text x="100.0899%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8399%" y="613" width="0.1601%" height="15" fill="rgb(213,150,20)" fg:x="1247" fg:w="2"/><text x="100.0899%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9199%" y="597" width="0.0801%" height="15" fill="rgb(222,124,42)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9199%" y="581" width="0.0801%" height="15" fill="rgb(250,19,47)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.9199%" y="565" width="0.0801%" height="15" fill="rgb(241,217,19)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="575.50"></text></g></svg></svg>