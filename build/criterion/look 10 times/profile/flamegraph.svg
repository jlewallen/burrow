<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1257"><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0000%" y="597" width="0.0796%" height="15" fill="rgb(209,67,4)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="629" width="0.1591%" height="15" fill="rgb(228,229,18)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="613" width="0.1591%" height="15" fill="rgb(231,89,13)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0796%" y="597" width="0.0796%" height="15" fill="rgb(210,182,18)" fg:x="1" fg:w="1"/><text x="0.3296%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0796%" y="581" width="0.0796%" height="15" fill="rgb(240,105,2)" fg:x="1" fg:w="1"/><text x="0.3296%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0796%" y="565" width="0.0796%" height="15" fill="rgb(207,170,50)" fg:x="1" fg:w="1"/><text x="0.3296%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0796%" y="549" width="0.0796%" height="15" fill="rgb(232,133,24)" fg:x="1" fg:w="1"/><text x="0.3296%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0000%" y="645" width="0.2387%" height="15" fill="rgb(235,166,27)" fg:x="0" fg:w="3"/><text x="0.2500%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1591%" y="629" width="0.0796%" height="15" fill="rgb(209,19,13)" fg:x="2" fg:w="1"/><text x="0.4091%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="709" width="0.3182%" height="15" fill="rgb(226,79,39)" fg:x="0" fg:w="4"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (4 samples, 0.32%)</title><rect x="0.0000%" y="693" width="0.3182%" height="15" fill="rgb(222,163,10)" fg:x="0" fg:w="4"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0000%" y="677" width="0.3182%" height="15" fill="rgb(214,44,19)" fg:x="0" fg:w="4"/><text x="0.2500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="0.0000%" y="661" width="0.3182%" height="15" fill="rgb(210,217,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2387%" y="645" width="0.0796%" height="15" fill="rgb(237,61,54)" fg:x="3" fg:w="1"/><text x="0.4887%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="0.3182%" y="661" width="0.3182%" height="15" fill="rgb(226,184,24)" fg:x="4" fg:w="4"/><text x="0.5682%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="0.3182%" y="645" width="0.3182%" height="15" fill="rgb(223,226,4)" fg:x="4" fg:w="4"/><text x="0.5682%" y="655.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="0.3182%" y="629" width="0.3182%" height="15" fill="rgb(210,26,41)" fg:x="4" fg:w="4"/><text x="0.5682%" y="639.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="0.3182%" y="613" width="0.3182%" height="15" fill="rgb(220,221,6)" fg:x="4" fg:w="4"/><text x="0.5682%" y="623.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="0.3182%" y="597" width="0.3182%" height="15" fill="rgb(225,89,49)" fg:x="4" fg:w="4"/><text x="0.5682%" y="607.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="0.3182%" y="581" width="0.3182%" height="15" fill="rgb(218,70,45)" fg:x="4" fg:w="4"/><text x="0.5682%" y="591.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="0.3182%" y="565" width="0.3182%" height="15" fill="rgb(238,166,21)" fg:x="4" fg:w="4"/><text x="0.5682%" y="575.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="0.3978%" y="549" width="0.2387%" height="15" fill="rgb(224,141,44)" fg:x="5" fg:w="3"/><text x="0.6478%" y="559.50"></text></g><g><title>engine::session::Session::initialize (5 samples, 0.40%)</title><rect x="0.3182%" y="677" width="0.3978%" height="15" fill="rgb(230,12,49)" fg:x="4" fg:w="5"/><text x="0.5682%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="0.6364%" y="661" width="0.0796%" height="15" fill="rgb(212,174,12)" fg:x="8" fg:w="1"/><text x="0.8864%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="0.6364%" y="645" width="0.0796%" height="15" fill="rgb(246,67,9)" fg:x="8" fg:w="1"/><text x="0.8864%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.6364%" y="629" width="0.0796%" height="15" fill="rgb(239,35,23)" fg:x="8" fg:w="1"/><text x="0.8864%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.48%)</title><rect x="0.3182%" y="709" width="0.4773%" height="15" fill="rgb(211,167,0)" fg:x="4" fg:w="6"/><text x="0.5682%" y="719.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.48%)</title><rect x="0.3182%" y="693" width="0.4773%" height="15" fill="rgb(225,119,45)" fg:x="4" fg:w="6"/><text x="0.5682%" y="703.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="0.7160%" y="677" width="0.0796%" height="15" fill="rgb(210,162,6)" fg:x="9" fg:w="1"/><text x="0.9660%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="0.7160%" y="661" width="0.0796%" height="15" fill="rgb(208,118,35)" fg:x="9" fg:w="1"/><text x="0.9660%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.7160%" y="645" width="0.0796%" height="15" fill="rgb(239,4,53)" fg:x="9" fg:w="1"/><text x="0.9660%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.7955%" y="645" width="0.0796%" height="15" fill="rgb(213,130,21)" fg:x="10" fg:w="1"/><text x="1.0455%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="0.7955%" y="629" width="0.0796%" height="15" fill="rgb(235,148,0)" fg:x="10" fg:w="1"/><text x="1.0455%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="0.7955%" y="613" width="0.0796%" height="15" fill="rgb(244,224,18)" fg:x="10" fg:w="1"/><text x="1.0455%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="0.7955%" y="597" width="0.0796%" height="15" fill="rgb(211,214,4)" fg:x="10" fg:w="1"/><text x="1.0455%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="0.8751%" y="597" width="0.0796%" height="15" fill="rgb(206,119,25)" fg:x="11" fg:w="1"/><text x="1.1251%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="0.8751%" y="581" width="0.0796%" height="15" fill="rgb(243,93,47)" fg:x="11" fg:w="1"/><text x="1.1251%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="0.8751%" y="565" width="0.0796%" height="15" fill="rgb(224,194,6)" fg:x="11" fg:w="1"/><text x="1.1251%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="0.8751%" y="549" width="0.0796%" height="15" fill="rgb(243,229,6)" fg:x="11" fg:w="1"/><text x="1.1251%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.8751%" y="533" width="0.0796%" height="15" fill="rgb(207,23,50)" fg:x="11" fg:w="1"/><text x="1.1251%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="0.9547%" y="549" width="0.0796%" height="15" fill="rgb(253,192,32)" fg:x="12" fg:w="1"/><text x="1.2047%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="0.9547%" y="533" width="0.0796%" height="15" fill="rgb(213,21,6)" fg:x="12" fg:w="1"/><text x="1.2047%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="0.9547%" y="517" width="0.0796%" height="15" fill="rgb(243,151,13)" fg:x="12" fg:w="1"/><text x="1.2047%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="0.9547%" y="565" width="0.2387%" height="15" fill="rgb(233,165,41)" fg:x="12" fg:w="3"/><text x="1.2047%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.0342%" y="549" width="0.1591%" height="15" fill="rgb(246,176,45)" fg:x="13" fg:w="2"/><text x="1.2842%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.1138%" y="533" width="0.0796%" height="15" fill="rgb(217,170,52)" fg:x="14" fg:w="1"/><text x="1.3638%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.1138%" y="517" width="0.0796%" height="15" fill="rgb(214,203,54)" fg:x="14" fg:w="1"/><text x="1.3638%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.1933%" y="533" width="0.0796%" height="15" fill="rgb(248,215,49)" fg:x="15" fg:w="1"/><text x="1.4433%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="0.9547%" y="597" width="0.3978%" height="15" fill="rgb(208,46,10)" fg:x="12" fg:w="5"/><text x="1.2047%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="0.9547%" y="581" width="0.3978%" height="15" fill="rgb(254,5,31)" fg:x="12" fg:w="5"/><text x="1.2047%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.1933%" y="565" width="0.1591%" height="15" fill="rgb(222,104,33)" fg:x="15" fg:w="2"/><text x="1.4433%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.1933%" y="549" width="0.1591%" height="15" fill="rgb(248,49,16)" fg:x="15" fg:w="2"/><text x="1.4433%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="1.2729%" y="533" width="0.0796%" height="15" fill="rgb(232,198,41)" fg:x="16" fg:w="1"/><text x="1.5229%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="0.8751%" y="613" width="0.5569%" height="15" fill="rgb(214,125,3)" fg:x="11" fg:w="7"/><text x="1.1251%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.3524%" y="597" width="0.0796%" height="15" fill="rgb(229,220,28)" fg:x="17" fg:w="1"/><text x="1.6024%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5115%" y="565" width="0.0796%" height="15" fill="rgb(222,64,37)" fg:x="19" fg:w="1"/><text x="1.7615%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.4320%" y="613" width="0.3182%" height="15" fill="rgb(249,184,13)" fg:x="18" fg:w="4"/><text x="1.6820%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="1.4320%" y="597" width="0.3182%" height="15" fill="rgb(252,176,6)" fg:x="18" fg:w="4"/><text x="1.6820%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.4320%" y="581" width="0.3182%" height="15" fill="rgb(228,153,7)" fg:x="18" fg:w="4"/><text x="1.6820%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.5911%" y="565" width="0.1591%" height="15" fill="rgb(242,193,5)" fg:x="20" fg:w="2"/><text x="1.8411%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.5911%" y="549" width="0.1591%" height="15" fill="rgb(232,140,9)" fg:x="20" fg:w="2"/><text x="1.8411%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.5911%" y="533" width="0.1591%" height="15" fill="rgb(213,222,16)" fg:x="20" fg:w="2"/><text x="1.8411%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6706%" y="517" width="0.0796%" height="15" fill="rgb(222,75,50)" fg:x="21" fg:w="1"/><text x="1.9206%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6706%" y="501" width="0.0796%" height="15" fill="rgb(205,180,2)" fg:x="21" fg:w="1"/><text x="1.9206%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="1.7502%" y="565" width="0.0796%" height="15" fill="rgb(216,34,7)" fg:x="22" fg:w="1"/><text x="2.0002%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="1.7502%" y="549" width="0.0796%" height="15" fill="rgb(253,16,32)" fg:x="22" fg:w="1"/><text x="2.0002%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.7502%" y="533" width="0.0796%" height="15" fill="rgb(208,97,28)" fg:x="22" fg:w="1"/><text x="2.0002%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.8298%" y="517" width="0.0796%" height="15" fill="rgb(225,92,11)" fg:x="23" fg:w="1"/><text x="2.0798%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.8298%" y="501" width="0.0796%" height="15" fill="rgb(243,38,12)" fg:x="23" fg:w="1"/><text x="2.0798%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.8298%" y="485" width="0.0796%" height="15" fill="rgb(208,139,16)" fg:x="23" fg:w="1"/><text x="2.0798%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.9093%" y="517" width="0.0796%" height="15" fill="rgb(227,24,9)" fg:x="24" fg:w="1"/><text x="2.1593%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.9889%" y="485" width="0.0796%" height="15" fill="rgb(206,62,11)" fg:x="25" fg:w="1"/><text x="2.2389%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.9889%" y="469" width="0.0796%" height="15" fill="rgb(228,134,27)" fg:x="25" fg:w="1"/><text x="2.2389%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.9889%" y="453" width="0.0796%" height="15" fill="rgb(205,55,33)" fg:x="25" fg:w="1"/><text x="2.2389%" y="463.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.43%)</title><rect x="0.7955%" y="693" width="1.4320%" height="15" fill="rgb(243,75,43)" fg:x="10" fg:w="18"/><text x="1.0455%" y="703.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.43%)</title><rect x="0.7955%" y="677" width="1.4320%" height="15" fill="rgb(223,27,42)" fg:x="10" fg:w="18"/><text x="1.0455%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.43%)</title><rect x="0.7955%" y="661" width="1.4320%" height="15" fill="rgb(232,189,33)" fg:x="10" fg:w="18"/><text x="1.0455%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (17 samples, 1.35%)</title><rect x="0.8751%" y="645" width="1.3524%" height="15" fill="rgb(210,9,39)" fg:x="11" fg:w="17"/><text x="1.1251%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.35%)</title><rect x="0.8751%" y="629" width="1.3524%" height="15" fill="rgb(242,85,26)" fg:x="11" fg:w="17"/><text x="1.1251%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="1.7502%" y="613" width="0.4773%" height="15" fill="rgb(248,44,4)" fg:x="22" fg:w="6"/><text x="2.0002%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="1.7502%" y="597" width="0.4773%" height="15" fill="rgb(250,96,46)" fg:x="22" fg:w="6"/><text x="2.0002%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="1.7502%" y="581" width="0.4773%" height="15" fill="rgb(229,116,26)" fg:x="22" fg:w="6"/><text x="2.0002%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="1.8298%" y="565" width="0.3978%" height="15" fill="rgb(246,94,34)" fg:x="23" fg:w="5"/><text x="2.0798%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="1.8298%" y="549" width="0.3978%" height="15" fill="rgb(251,73,21)" fg:x="23" fg:w="5"/><text x="2.0798%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="1.8298%" y="533" width="0.3978%" height="15" fill="rgb(254,121,25)" fg:x="23" fg:w="5"/><text x="2.0798%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="1.9889%" y="517" width="0.2387%" height="15" fill="rgb(215,161,49)" fg:x="25" fg:w="3"/><text x="2.2389%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="1.9889%" y="501" width="0.2387%" height="15" fill="rgb(221,43,13)" fg:x="25" fg:w="3"/><text x="2.2389%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0684%" y="485" width="0.1591%" height="15" fill="rgb(249,5,37)" fg:x="26" fg:w="2"/><text x="2.3184%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.0684%" y="469" width="0.1591%" height="15" fill="rgb(226,25,44)" fg:x="26" fg:w="2"/><text x="2.3184%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1480%" y="453" width="0.0796%" height="15" fill="rgb(238,189,16)" fg:x="27" fg:w="1"/><text x="2.3980%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.1480%" y="437" width="0.0796%" height="15" fill="rgb(251,186,8)" fg:x="27" fg:w="1"/><text x="2.3980%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1480%" y="421" width="0.0796%" height="15" fill="rgb(254,34,31)" fg:x="27" fg:w="1"/><text x="2.3980%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1480%" y="405" width="0.0796%" height="15" fill="rgb(225,215,27)" fg:x="27" fg:w="1"/><text x="2.3980%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="2.2275%" y="661" width="0.0796%" height="15" fill="rgb(221,192,48)" fg:x="28" fg:w="1"/><text x="2.4775%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="2.2275%" y="645" width="0.0796%" height="15" fill="rgb(219,137,20)" fg:x="28" fg:w="1"/><text x="2.4775%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.2275%" y="629" width="0.0796%" height="15" fill="rgb(219,84,11)" fg:x="28" fg:w="1"/><text x="2.4775%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.2275%" y="613" width="0.0796%" height="15" fill="rgb(224,10,23)" fg:x="28" fg:w="1"/><text x="2.4775%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.2275%" y="597" width="0.0796%" height="15" fill="rgb(248,22,39)" fg:x="28" fg:w="1"/><text x="2.4775%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.2275%" y="581" width="0.0796%" height="15" fill="rgb(212,154,20)" fg:x="28" fg:w="1"/><text x="2.4775%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="2.2275%" y="565" width="0.0796%" height="15" fill="rgb(236,199,50)" fg:x="28" fg:w="1"/><text x="2.4775%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.2275%" y="549" width="0.0796%" height="15" fill="rgb(211,9,17)" fg:x="28" fg:w="1"/><text x="2.4775%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.2275%" y="533" width="0.0796%" height="15" fill="rgb(243,216,36)" fg:x="28" fg:w="1"/><text x="2.4775%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.2275%" y="517" width="0.0796%" height="15" fill="rgb(250,2,10)" fg:x="28" fg:w="1"/><text x="2.4775%" y="527.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="2.2275%" y="501" width="0.0796%" height="15" fill="rgb(226,50,48)" fg:x="28" fg:w="1"/><text x="2.4775%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.2275%" y="485" width="0.0796%" height="15" fill="rgb(243,81,16)" fg:x="28" fg:w="1"/><text x="2.4775%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.2275%" y="469" width="0.0796%" height="15" fill="rgb(250,14,2)" fg:x="28" fg:w="1"/><text x="2.4775%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.3071%" y="645" width="0.0796%" height="15" fill="rgb(233,135,29)" fg:x="29" fg:w="1"/><text x="2.5571%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.3071%" y="629" width="0.0796%" height="15" fill="rgb(224,64,43)" fg:x="29" fg:w="1"/><text x="2.5571%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.3071%" y="613" width="0.0796%" height="15" fill="rgb(238,84,13)" fg:x="29" fg:w="1"/><text x="2.5571%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.3071%" y="597" width="0.0796%" height="15" fill="rgb(253,48,26)" fg:x="29" fg:w="1"/><text x="2.5571%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.3071%" y="581" width="0.0796%" height="15" fill="rgb(205,223,31)" fg:x="29" fg:w="1"/><text x="2.5571%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.3071%" y="565" width="0.0796%" height="15" fill="rgb(221,41,32)" fg:x="29" fg:w="1"/><text x="2.5571%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.3071%" y="549" width="0.0796%" height="15" fill="rgb(213,158,31)" fg:x="29" fg:w="1"/><text x="2.5571%" y="559.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="2.3071%" y="661" width="0.1591%" height="15" fill="rgb(245,126,43)" fg:x="29" fg:w="2"/><text x="2.5571%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.3866%" y="645" width="0.0796%" height="15" fill="rgb(227,7,22)" fg:x="30" fg:w="1"/><text x="2.6366%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3866%" y="629" width="0.0796%" height="15" fill="rgb(252,90,44)" fg:x="30" fg:w="1"/><text x="2.6366%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="2.2275%" y="677" width="0.3182%" height="15" fill="rgb(253,91,0)" fg:x="28" fg:w="4"/><text x="2.4775%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="2.4662%" y="661" width="0.0796%" height="15" fill="rgb(252,175,49)" fg:x="31" fg:w="1"/><text x="2.7162%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="2.4662%" y="645" width="0.0796%" height="15" fill="rgb(246,150,1)" fg:x="31" fg:w="1"/><text x="2.7162%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4662%" y="629" width="0.0796%" height="15" fill="rgb(241,192,25)" fg:x="31" fg:w="1"/><text x="2.7162%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4662%" y="613" width="0.0796%" height="15" fill="rgb(239,187,11)" fg:x="31" fg:w="1"/><text x="2.7162%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="2.4662%" y="597" width="0.0796%" height="15" fill="rgb(218,202,51)" fg:x="31" fg:w="1"/><text x="2.7162%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4662%" y="581" width="0.0796%" height="15" fill="rgb(225,176,8)" fg:x="31" fg:w="1"/><text x="2.7162%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="2.5457%" y="661" width="0.0796%" height="15" fill="rgb(219,122,41)" fg:x="32" fg:w="1"/><text x="2.7957%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="2.5457%" y="645" width="0.0796%" height="15" fill="rgb(248,140,20)" fg:x="32" fg:w="1"/><text x="2.7957%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.5457%" y="629" width="0.0796%" height="15" fill="rgb(245,41,37)" fg:x="32" fg:w="1"/><text x="2.7957%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.5457%" y="613" width="0.0796%" height="15" fill="rgb(235,82,39)" fg:x="32" fg:w="1"/><text x="2.7957%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.5457%" y="597" width="0.0796%" height="15" fill="rgb(230,108,42)" fg:x="32" fg:w="1"/><text x="2.7957%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.5457%" y="581" width="0.0796%" height="15" fill="rgb(215,150,50)" fg:x="32" fg:w="1"/><text x="2.7957%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5457%" y="565" width="0.0796%" height="15" fill="rgb(233,212,5)" fg:x="32" fg:w="1"/><text x="2.7957%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5457%" y="549" width="0.0796%" height="15" fill="rgb(245,80,22)" fg:x="32" fg:w="1"/><text x="2.7957%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.5457%" y="533" width="0.0796%" height="15" fill="rgb(238,129,16)" fg:x="32" fg:w="1"/><text x="2.7957%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.5457%" y="517" width="0.0796%" height="15" fill="rgb(240,19,0)" fg:x="32" fg:w="1"/><text x="2.7957%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.5457%" y="501" width="0.0796%" height="15" fill="rgb(232,42,35)" fg:x="32" fg:w="1"/><text x="2.7957%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5457%" y="485" width="0.0796%" height="15" fill="rgb(223,130,24)" fg:x="32" fg:w="1"/><text x="2.7957%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5457%" y="469" width="0.0796%" height="15" fill="rgb(237,16,22)" fg:x="32" fg:w="1"/><text x="2.7957%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.5457%" y="453" width="0.0796%" height="15" fill="rgb(248,192,20)" fg:x="32" fg:w="1"/><text x="2.7957%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.5457%" y="437" width="0.0796%" height="15" fill="rgb(233,167,2)" fg:x="32" fg:w="1"/><text x="2.7957%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.5457%" y="421" width="0.0796%" height="15" fill="rgb(252,71,44)" fg:x="32" fg:w="1"/><text x="2.7957%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.5457%" y="405" width="0.0796%" height="15" fill="rgb(238,37,47)" fg:x="32" fg:w="1"/><text x="2.7957%" y="415.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="2.6253%" y="661" width="0.2387%" height="15" fill="rgb(214,202,54)" fg:x="33" fg:w="3"/><text x="2.8753%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (3 samples, 0.24%)</title><rect x="2.6253%" y="645" width="0.2387%" height="15" fill="rgb(254,165,40)" fg:x="33" fg:w="3"/><text x="2.8753%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="2.6253%" y="629" width="0.2387%" height="15" fill="rgb(246,173,38)" fg:x="33" fg:w="3"/><text x="2.8753%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7844%" y="613" width="0.0796%" height="15" fill="rgb(215,3,27)" fg:x="35" fg:w="1"/><text x="3.0344%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.7844%" y="597" width="0.0796%" height="15" fill="rgb(239,169,51)" fg:x="35" fg:w="1"/><text x="3.0344%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7844%" y="581" width="0.0796%" height="15" fill="rgb(212,5,25)" fg:x="35" fg:w="1"/><text x="3.0344%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.8640%" y="613" width="0.0796%" height="15" fill="rgb(243,45,17)" fg:x="36" fg:w="1"/><text x="3.1140%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.8640%" y="597" width="0.0796%" height="15" fill="rgb(242,97,9)" fg:x="36" fg:w="1"/><text x="3.1140%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.8640%" y="581" width="0.0796%" height="15" fill="rgb(228,71,31)" fg:x="36" fg:w="1"/><text x="3.1140%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8640%" y="565" width="0.0796%" height="15" fill="rgb(252,184,16)" fg:x="36" fg:w="1"/><text x="3.1140%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8640%" y="549" width="0.0796%" height="15" fill="rgb(236,169,46)" fg:x="36" fg:w="1"/><text x="3.1140%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.8640%" y="533" width="0.0796%" height="15" fill="rgb(207,17,47)" fg:x="36" fg:w="1"/><text x="3.1140%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8640%" y="517" width="0.0796%" height="15" fill="rgb(206,201,28)" fg:x="36" fg:w="1"/><text x="3.1140%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="2.8640%" y="501" width="0.0796%" height="15" fill="rgb(224,184,23)" fg:x="36" fg:w="1"/><text x="3.1140%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.8640%" y="485" width="0.0796%" height="15" fill="rgb(208,139,48)" fg:x="36" fg:w="1"/><text x="3.1140%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (10 samples, 0.80%)</title><rect x="2.2275%" y="693" width="0.7955%" height="15" fill="rgb(208,130,10)" fg:x="28" fg:w="10"/><text x="2.4775%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="2.5457%" y="677" width="0.4773%" height="15" fill="rgb(211,213,45)" fg:x="32" fg:w="6"/><text x="2.7957%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="2.8640%" y="661" width="0.1591%" height="15" fill="rgb(235,100,30)" fg:x="36" fg:w="2"/><text x="3.1140%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="2.8640%" y="645" width="0.1591%" height="15" fill="rgb(206,144,31)" fg:x="36" fg:w="2"/><text x="3.1140%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="2.8640%" y="629" width="0.1591%" height="15" fill="rgb(224,200,26)" fg:x="36" fg:w="2"/><text x="3.1140%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="2.9435%" y="613" width="0.0796%" height="15" fill="rgb(247,104,53)" fg:x="37" fg:w="1"/><text x="3.1935%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.9435%" y="597" width="0.0796%" height="15" fill="rgb(220,14,17)" fg:x="37" fg:w="1"/><text x="3.1935%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.9435%" y="581" width="0.0796%" height="15" fill="rgb(230,140,40)" fg:x="37" fg:w="1"/><text x="3.1935%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.9435%" y="565" width="0.0796%" height="15" fill="rgb(229,2,41)" fg:x="37" fg:w="1"/><text x="3.1935%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.9435%" y="549" width="0.0796%" height="15" fill="rgb(232,89,16)" fg:x="37" fg:w="1"/><text x="3.1935%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.9435%" y="533" width="0.0796%" height="15" fill="rgb(247,59,52)" fg:x="37" fg:w="1"/><text x="3.1935%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.0231%" y="645" width="0.0796%" height="15" fill="rgb(226,110,21)" fg:x="38" fg:w="1"/><text x="3.2731%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0231%" y="629" width="0.0796%" height="15" fill="rgb(224,176,43)" fg:x="38" fg:w="1"/><text x="3.2731%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0231%" y="613" width="0.0796%" height="15" fill="rgb(221,73,6)" fg:x="38" fg:w="1"/><text x="3.2731%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0231%" y="597" width="0.0796%" height="15" fill="rgb(232,78,19)" fg:x="38" fg:w="1"/><text x="3.2731%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0231%" y="581" width="0.0796%" height="15" fill="rgb(233,112,48)" fg:x="38" fg:w="1"/><text x="3.2731%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0231%" y="565" width="0.0796%" height="15" fill="rgb(243,131,47)" fg:x="38" fg:w="1"/><text x="3.2731%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="3.0231%" y="549" width="0.0796%" height="15" fill="rgb(226,51,1)" fg:x="38" fg:w="1"/><text x="3.2731%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="3.0231%" y="533" width="0.0796%" height="15" fill="rgb(247,58,7)" fg:x="38" fg:w="1"/><text x="3.2731%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.0231%" y="517" width="0.0796%" height="15" fill="rgb(209,7,32)" fg:x="38" fg:w="1"/><text x="3.2731%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="3.0231%" y="661" width="0.1591%" height="15" fill="rgb(209,39,41)" fg:x="38" fg:w="2"/><text x="3.2731%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.1026%" y="645" width="0.0796%" height="15" fill="rgb(226,182,46)" fg:x="39" fg:w="1"/><text x="3.3526%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1026%" y="629" width="0.0796%" height="15" fill="rgb(230,219,10)" fg:x="39" fg:w="1"/><text x="3.3526%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.1026%" y="613" width="0.0796%" height="15" fill="rgb(227,175,30)" fg:x="39" fg:w="1"/><text x="3.3526%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.1026%" y="597" width="0.0796%" height="15" fill="rgb(217,2,50)" fg:x="39" fg:w="1"/><text x="3.3526%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="3.0231%" y="693" width="0.2387%" height="15" fill="rgb(229,160,0)" fg:x="38" fg:w="3"/><text x="3.2731%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="3.0231%" y="677" width="0.2387%" height="15" fill="rgb(207,78,37)" fg:x="38" fg:w="3"/><text x="3.2731%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.1822%" y="661" width="0.0796%" height="15" fill="rgb(225,57,0)" fg:x="40" fg:w="1"/><text x="3.4322%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="3.1822%" y="645" width="0.0796%" height="15" fill="rgb(232,154,2)" fg:x="40" fg:w="1"/><text x="3.4322%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.3413%" y="597" width="0.0796%" height="15" fill="rgb(241,212,25)" fg:x="42" fg:w="1"/><text x="3.5913%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.3413%" y="581" width="0.0796%" height="15" fill="rgb(226,69,20)" fg:x="42" fg:w="1"/><text x="3.5913%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.3413%" y="565" width="0.0796%" height="15" fill="rgb(247,184,54)" fg:x="42" fg:w="1"/><text x="3.5913%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3413%" y="549" width="0.0796%" height="15" fill="rgb(210,145,0)" fg:x="42" fg:w="1"/><text x="3.5913%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3413%" y="533" width="0.0796%" height="15" fill="rgb(253,82,12)" fg:x="42" fg:w="1"/><text x="3.5913%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3413%" y="517" width="0.0796%" height="15" fill="rgb(245,42,11)" fg:x="42" fg:w="1"/><text x="3.5913%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3413%" y="501" width="0.0796%" height="15" fill="rgb(219,147,32)" fg:x="42" fg:w="1"/><text x="3.5913%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3413%" y="485" width="0.0796%" height="15" fill="rgb(246,12,7)" fg:x="42" fg:w="1"/><text x="3.5913%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3413%" y="469" width="0.0796%" height="15" fill="rgb(243,50,9)" fg:x="42" fg:w="1"/><text x="3.5913%" y="479.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.4208%" y="597" width="0.0796%" height="15" fill="rgb(219,149,6)" fg:x="43" fg:w="1"/><text x="3.6708%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.4208%" y="581" width="0.0796%" height="15" fill="rgb(241,51,42)" fg:x="43" fg:w="1"/><text x="3.6708%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="3.4208%" y="565" width="0.0796%" height="15" fill="rgb(226,128,27)" fg:x="43" fg:w="1"/><text x="3.6708%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.4208%" y="549" width="0.0796%" height="15" fill="rgb(244,144,4)" fg:x="43" fg:w="1"/><text x="3.6708%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.4208%" y="533" width="0.0796%" height="15" fill="rgb(221,4,13)" fg:x="43" fg:w="1"/><text x="3.6708%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5004%" y="517" width="0.0796%" height="15" fill="rgb(208,170,28)" fg:x="44" fg:w="1"/><text x="3.7504%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5004%" y="501" width="0.0796%" height="15" fill="rgb(226,131,13)" fg:x="44" fg:w="1"/><text x="3.7504%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5004%" y="485" width="0.0796%" height="15" fill="rgb(215,72,41)" fg:x="44" fg:w="1"/><text x="3.7504%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5004%" y="469" width="0.0796%" height="15" fill="rgb(243,108,20)" fg:x="44" fg:w="1"/><text x="3.7504%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5004%" y="453" width="0.0796%" height="15" fill="rgb(230,189,17)" fg:x="44" fg:w="1"/><text x="3.7504%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5004%" y="437" width="0.0796%" height="15" fill="rgb(220,50,17)" fg:x="44" fg:w="1"/><text x="3.7504%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.5004%" y="421" width="0.0796%" height="15" fill="rgb(248,152,48)" fg:x="44" fg:w="1"/><text x="3.7504%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.5004%" y="405" width="0.0796%" height="15" fill="rgb(244,91,11)" fg:x="44" fg:w="1"/><text x="3.7504%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.5004%" y="389" width="0.0796%" height="15" fill="rgb(220,157,5)" fg:x="44" fg:w="1"/><text x="3.7504%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5004%" y="373" width="0.0796%" height="15" fill="rgb(253,137,8)" fg:x="44" fg:w="1"/><text x="3.7504%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5004%" y="357" width="0.0796%" height="15" fill="rgb(217,137,51)" fg:x="44" fg:w="1"/><text x="3.7504%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.5004%" y="341" width="0.0796%" height="15" fill="rgb(218,209,53)" fg:x="44" fg:w="1"/><text x="3.7504%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.5004%" y="325" width="0.0796%" height="15" fill="rgb(249,137,25)" fg:x="44" fg:w="1"/><text x="3.7504%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.5004%" y="309" width="0.0796%" height="15" fill="rgb(239,155,26)" fg:x="44" fg:w="1"/><text x="3.7504%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.5004%" y="293" width="0.0796%" height="15" fill="rgb(227,85,46)" fg:x="44" fg:w="1"/><text x="3.7504%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5004%" y="277" width="0.0796%" height="15" fill="rgb(251,107,43)" fg:x="44" fg:w="1"/><text x="3.7504%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="3.3413%" y="613" width="0.3182%" height="15" fill="rgb(234,170,33)" fg:x="42" fg:w="4"/><text x="3.5913%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.5004%" y="597" width="0.1591%" height="15" fill="rgb(206,29,35)" fg:x="44" fg:w="2"/><text x="3.7504%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.5004%" y="581" width="0.1591%" height="15" fill="rgb(227,138,25)" fg:x="44" fg:w="2"/><text x="3.7504%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="3.5004%" y="565" width="0.1591%" height="15" fill="rgb(249,131,35)" fg:x="44" fg:w="2"/><text x="3.7504%" y="575.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="3.5004%" y="549" width="0.1591%" height="15" fill="rgb(239,6,40)" fg:x="44" fg:w="2"/><text x="3.7504%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.5004%" y="533" width="0.1591%" height="15" fill="rgb(246,136,47)" fg:x="44" fg:w="2"/><text x="3.7504%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5800%" y="517" width="0.0796%" height="15" fill="rgb(253,58,26)" fg:x="45" fg:w="1"/><text x="3.8300%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5800%" y="501" width="0.0796%" height="15" fill="rgb(237,141,10)" fg:x="45" fg:w="1"/><text x="3.8300%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5800%" y="485" width="0.0796%" height="15" fill="rgb(234,156,12)" fg:x="45" fg:w="1"/><text x="3.8300%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5800%" y="469" width="0.0796%" height="15" fill="rgb(243,224,36)" fg:x="45" fg:w="1"/><text x="3.8300%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.5800%" y="453" width="0.0796%" height="15" fill="rgb(205,229,51)" fg:x="45" fg:w="1"/><text x="3.8300%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5800%" y="437" width="0.0796%" height="15" fill="rgb(223,189,4)" fg:x="45" fg:w="1"/><text x="3.8300%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.5800%" y="421" width="0.0796%" height="15" fill="rgb(249,167,54)" fg:x="45" fg:w="1"/><text x="3.8300%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5800%" y="405" width="0.0796%" height="15" fill="rgb(218,34,28)" fg:x="45" fg:w="1"/><text x="3.8300%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5800%" y="389" width="0.0796%" height="15" fill="rgb(232,109,42)" fg:x="45" fg:w="1"/><text x="3.8300%" y="399.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.6595%" y="597" width="0.0796%" height="15" fill="rgb(248,214,46)" fg:x="46" fg:w="1"/><text x="3.9095%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.6595%" y="581" width="0.0796%" height="15" fill="rgb(244,216,40)" fg:x="46" fg:w="1"/><text x="3.9095%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.6595%" y="565" width="0.0796%" height="15" fill="rgb(231,226,31)" fg:x="46" fg:w="1"/><text x="3.9095%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.6595%" y="549" width="0.0796%" height="15" fill="rgb(238,38,43)" fg:x="46" fg:w="1"/><text x="3.9095%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.6595%" y="533" width="0.0796%" height="15" fill="rgb(208,88,43)" fg:x="46" fg:w="1"/><text x="3.9095%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6595%" y="517" width="0.0796%" height="15" fill="rgb(205,136,37)" fg:x="46" fg:w="1"/><text x="3.9095%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6595%" y="501" width="0.0796%" height="15" fill="rgb(237,34,14)" fg:x="46" fg:w="1"/><text x="3.9095%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6595%" y="485" width="0.0796%" height="15" fill="rgb(236,193,44)" fg:x="46" fg:w="1"/><text x="3.9095%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.6595%" y="469" width="0.0796%" height="15" fill="rgb(231,48,10)" fg:x="46" fg:w="1"/><text x="3.9095%" y="479.50"></text></g><g><title>plugins_core::build::Build::leads_to (6 samples, 0.48%)</title><rect x="3.3413%" y="629" width="0.4773%" height="15" fill="rgb(213,141,34)" fg:x="42" fg:w="6"/><text x="3.5913%" y="639.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="3.6595%" y="613" width="0.1591%" height="15" fill="rgb(249,130,34)" fg:x="46" fg:w="2"/><text x="3.9095%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.7391%" y="597" width="0.0796%" height="15" fill="rgb(219,42,41)" fg:x="47" fg:w="1"/><text x="3.9891%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.56%)</title><rect x="3.3413%" y="677" width="0.5569%" height="15" fill="rgb(224,100,54)" fg:x="42" fg:w="7"/><text x="3.5913%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="3.3413%" y="661" width="0.5569%" height="15" fill="rgb(229,200,27)" fg:x="42" fg:w="7"/><text x="3.5913%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="3.3413%" y="645" width="0.5569%" height="15" fill="rgb(217,118,10)" fg:x="42" fg:w="7"/><text x="3.5913%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.8186%" y="629" width="0.0796%" height="15" fill="rgb(206,22,3)" fg:x="48" fg:w="1"/><text x="4.0686%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.8186%" y="613" width="0.0796%" height="15" fill="rgb(232,163,46)" fg:x="48" fg:w="1"/><text x="4.0686%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.8186%" y="597" width="0.0796%" height="15" fill="rgb(206,95,13)" fg:x="48" fg:w="1"/><text x="4.0686%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.8186%" y="581" width="0.0796%" height="15" fill="rgb(253,154,18)" fg:x="48" fg:w="1"/><text x="4.0686%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8186%" y="565" width="0.0796%" height="15" fill="rgb(219,32,23)" fg:x="48" fg:w="1"/><text x="4.0686%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8186%" y="549" width="0.0796%" height="15" fill="rgb(230,191,45)" fg:x="48" fg:w="1"/><text x="4.0686%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="3.9777%" y="661" width="0.0796%" height="15" fill="rgb(229,64,36)" fg:x="50" fg:w="1"/><text x="4.2277%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9777%" y="645" width="0.0796%" height="15" fill="rgb(205,129,25)" fg:x="50" fg:w="1"/><text x="4.2277%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9777%" y="629" width="0.0796%" height="15" fill="rgb(254,112,7)" fg:x="50" fg:w="1"/><text x="4.2277%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="3.9777%" y="613" width="0.0796%" height="15" fill="rgb(226,53,48)" fg:x="50" fg:w="1"/><text x="4.2277%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.0573%" y="613" width="0.0796%" height="15" fill="rgb(214,153,38)" fg:x="51" fg:w="1"/><text x="4.3073%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.0573%" y="597" width="0.0796%" height="15" fill="rgb(243,101,7)" fg:x="51" fg:w="1"/><text x="4.3073%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0573%" y="581" width="0.0796%" height="15" fill="rgb(240,140,22)" fg:x="51" fg:w="1"/><text x="4.3073%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.0573%" y="565" width="0.0796%" height="15" fill="rgb(235,114,2)" fg:x="51" fg:w="1"/><text x="4.3073%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.2164%" y="565" width="0.0796%" height="15" fill="rgb(242,59,12)" fg:x="53" fg:w="1"/><text x="4.4664%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.2164%" y="549" width="0.0796%" height="15" fill="rgb(252,134,9)" fg:x="53" fg:w="1"/><text x="4.4664%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2164%" y="533" width="0.0796%" height="15" fill="rgb(236,4,44)" fg:x="53" fg:w="1"/><text x="4.4664%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.2959%" y="549" width="0.0796%" height="15" fill="rgb(254,172,41)" fg:x="54" fg:w="1"/><text x="4.5459%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.3755%" y="533" width="0.0796%" height="15" fill="rgb(244,63,20)" fg:x="55" fg:w="1"/><text x="4.6255%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.3755%" y="517" width="0.0796%" height="15" fill="rgb(250,73,31)" fg:x="55" fg:w="1"/><text x="4.6255%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.3755%" y="501" width="0.0796%" height="15" fill="rgb(241,38,36)" fg:x="55" fg:w="1"/><text x="4.6255%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.3755%" y="485" width="0.0796%" height="15" fill="rgb(245,211,2)" fg:x="55" fg:w="1"/><text x="4.6255%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4551%" y="501" width="0.0796%" height="15" fill="rgb(206,120,28)" fg:x="56" fg:w="1"/><text x="4.7051%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4551%" y="485" width="0.0796%" height="15" fill="rgb(211,59,34)" fg:x="56" fg:w="1"/><text x="4.7051%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.5346%" y="485" width="0.0796%" height="15" fill="rgb(233,168,5)" fg:x="57" fg:w="1"/><text x="4.7846%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5346%" y="469" width="0.0796%" height="15" fill="rgb(234,33,13)" fg:x="57" fg:w="1"/><text x="4.7846%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5346%" y="453" width="0.0796%" height="15" fill="rgb(231,150,26)" fg:x="57" fg:w="1"/><text x="4.7846%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5346%" y="437" width="0.0796%" height="15" fill="rgb(217,191,4)" fg:x="57" fg:w="1"/><text x="4.7846%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.4551%" y="533" width="0.2387%" height="15" fill="rgb(246,198,38)" fg:x="56" fg:w="3"/><text x="4.7051%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="4.4551%" y="517" width="0.2387%" height="15" fill="rgb(245,64,37)" fg:x="56" fg:w="3"/><text x="4.7051%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.5346%" y="501" width="0.1591%" height="15" fill="rgb(250,30,36)" fg:x="57" fg:w="2"/><text x="4.7846%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.6142%" y="485" width="0.0796%" height="15" fill="rgb(217,86,53)" fg:x="58" fg:w="1"/><text x="4.8642%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.6142%" y="469" width="0.0796%" height="15" fill="rgb(228,157,16)" fg:x="58" fg:w="1"/><text x="4.8642%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6142%" y="453" width="0.0796%" height="15" fill="rgb(217,59,31)" fg:x="58" fg:w="1"/><text x="4.8642%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6142%" y="437" width="0.0796%" height="15" fill="rgb(237,138,41)" fg:x="58" fg:w="1"/><text x="4.8642%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6142%" y="421" width="0.0796%" height="15" fill="rgb(227,91,49)" fg:x="58" fg:w="1"/><text x="4.8642%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="4.2164%" y="581" width="0.5569%" height="15" fill="rgb(247,21,44)" fg:x="53" fg:w="7"/><text x="4.4664%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="4.2959%" y="565" width="0.4773%" height="15" fill="rgb(219,210,51)" fg:x="54" fg:w="6"/><text x="4.5459%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.3755%" y="549" width="0.3978%" height="15" fill="rgb(209,140,6)" fg:x="55" fg:w="5"/><text x="4.6255%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6937%" y="533" width="0.0796%" height="15" fill="rgb(221,188,24)" fg:x="59" fg:w="1"/><text x="4.9437%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6937%" y="517" width="0.0796%" height="15" fill="rgb(232,154,20)" fg:x="59" fg:w="1"/><text x="4.9437%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6937%" y="501" width="0.0796%" height="15" fill="rgb(244,137,50)" fg:x="59" fg:w="1"/><text x="4.9437%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="4.7733%" y="565" width="0.0796%" height="15" fill="rgb(225,185,43)" fg:x="60" fg:w="1"/><text x="5.0233%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.7733%" y="549" width="0.0796%" height="15" fill="rgb(213,205,38)" fg:x="60" fg:w="1"/><text x="5.0233%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9324%" y="533" width="0.0796%" height="15" fill="rgb(236,73,12)" fg:x="62" fg:w="1"/><text x="5.1824%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.9324%" y="517" width="0.0796%" height="15" fill="rgb(235,219,13)" fg:x="62" fg:w="1"/><text x="5.1824%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9324%" y="501" width="0.0796%" height="15" fill="rgb(218,59,36)" fg:x="62" fg:w="1"/><text x="5.1824%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1710%" y="389" width="0.0796%" height="15" fill="rgb(205,110,39)" fg:x="65" fg:w="1"/><text x="5.4210%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.2506%" y="373" width="0.0796%" height="15" fill="rgb(218,206,42)" fg:x="66" fg:w="1"/><text x="5.5006%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2506%" y="357" width="0.0796%" height="15" fill="rgb(248,125,24)" fg:x="66" fg:w="1"/><text x="5.5006%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2506%" y="341" width="0.0796%" height="15" fill="rgb(242,28,27)" fg:x="66" fg:w="1"/><text x="5.5006%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2506%" y="325" width="0.0796%" height="15" fill="rgb(216,228,15)" fg:x="66" fg:w="1"/><text x="5.5006%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.1710%" y="437" width="0.2387%" height="15" fill="rgb(235,116,46)" fg:x="65" fg:w="3"/><text x="5.4210%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.1710%" y="421" width="0.2387%" height="15" fill="rgb(224,18,32)" fg:x="65" fg:w="3"/><text x="5.4210%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.1710%" y="405" width="0.2387%" height="15" fill="rgb(252,5,12)" fg:x="65" fg:w="3"/><text x="5.4210%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.2506%" y="389" width="0.1591%" height="15" fill="rgb(251,36,5)" fg:x="66" fg:w="2"/><text x="5.5006%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3302%" y="373" width="0.0796%" height="15" fill="rgb(217,53,14)" fg:x="67" fg:w="1"/><text x="5.5802%" y="383.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.59%)</title><rect x="3.8982%" y="677" width="1.5911%" height="15" fill="rgb(215,86,45)" fg:x="49" fg:w="20"/><text x="4.1482%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (18 samples, 1.43%)</title><rect x="4.0573%" y="661" width="1.4320%" height="15" fill="rgb(242,169,11)" fg:x="51" fg:w="18"/><text x="4.3073%" y="671.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.43%)</title><rect x="4.0573%" y="645" width="1.4320%" height="15" fill="rgb(211,213,45)" fg:x="51" fg:w="18"/><text x="4.3073%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.43%)</title><rect x="4.0573%" y="629" width="1.4320%" height="15" fill="rgb(205,88,11)" fg:x="51" fg:w="18"/><text x="4.3073%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (17 samples, 1.35%)</title><rect x="4.1368%" y="613" width="1.3524%" height="15" fill="rgb(252,69,26)" fg:x="52" fg:w="17"/><text x="4.3868%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.35%)</title><rect x="4.1368%" y="597" width="1.3524%" height="15" fill="rgb(246,123,37)" fg:x="52" fg:w="17"/><text x="4.3868%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="4.7733%" y="581" width="0.7160%" height="15" fill="rgb(212,205,5)" fg:x="60" fg:w="9"/><text x="5.0233%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="4.8528%" y="565" width="0.6364%" height="15" fill="rgb(253,148,0)" fg:x="61" fg:w="8"/><text x="5.1028%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="4.8528%" y="549" width="0.6364%" height="15" fill="rgb(239,22,4)" fg:x="61" fg:w="8"/><text x="5.1028%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="5.0119%" y="533" width="0.4773%" height="15" fill="rgb(226,26,53)" fg:x="63" fg:w="6"/><text x="5.2619%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="5.0119%" y="517" width="0.4773%" height="15" fill="rgb(225,229,45)" fg:x="63" fg:w="6"/><text x="5.2619%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="5.0119%" y="501" width="0.4773%" height="15" fill="rgb(220,60,37)" fg:x="63" fg:w="6"/><text x="5.2619%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="5.0119%" y="485" width="0.4773%" height="15" fill="rgb(217,180,35)" fg:x="63" fg:w="6"/><text x="5.2619%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="5.0915%" y="469" width="0.3978%" height="15" fill="rgb(229,7,53)" fg:x="64" fg:w="5"/><text x="5.3415%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="5.0915%" y="453" width="0.3978%" height="15" fill="rgb(254,137,3)" fg:x="64" fg:w="5"/><text x="5.3415%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4097%" y="437" width="0.0796%" height="15" fill="rgb(215,140,41)" fg:x="68" fg:w="1"/><text x="5.6597%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.4893%" y="565" width="0.0796%" height="15" fill="rgb(250,80,15)" fg:x="69" fg:w="1"/><text x="5.7393%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.4893%" y="549" width="0.0796%" height="15" fill="rgb(252,191,6)" fg:x="69" fg:w="1"/><text x="5.7393%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.4893%" y="661" width="0.1591%" height="15" fill="rgb(246,217,18)" fg:x="69" fg:w="2"/><text x="5.7393%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="5.4893%" y="645" width="0.1591%" height="15" fill="rgb(223,93,7)" fg:x="69" fg:w="2"/><text x="5.7393%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="5.4893%" y="629" width="0.1591%" height="15" fill="rgb(225,55,52)" fg:x="69" fg:w="2"/><text x="5.7393%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="5.4893%" y="613" width="0.1591%" height="15" fill="rgb(240,31,24)" fg:x="69" fg:w="2"/><text x="5.7393%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="5.4893%" y="597" width="0.1591%" height="15" fill="rgb(205,56,52)" fg:x="69" fg:w="2"/><text x="5.7393%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="5.4893%" y="581" width="0.1591%" height="15" fill="rgb(246,146,12)" fg:x="69" fg:w="2"/><text x="5.7393%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.5688%" y="565" width="0.0796%" height="15" fill="rgb(239,84,36)" fg:x="70" fg:w="1"/><text x="5.8188%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="5.5688%" y="549" width="0.0796%" height="15" fill="rgb(207,41,40)" fg:x="70" fg:w="1"/><text x="5.8188%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.5688%" y="533" width="0.0796%" height="15" fill="rgb(241,179,25)" fg:x="70" fg:w="1"/><text x="5.8188%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.5688%" y="517" width="0.0796%" height="15" fill="rgb(210,0,34)" fg:x="70" fg:w="1"/><text x="5.8188%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5688%" y="501" width="0.0796%" height="15" fill="rgb(225,217,29)" fg:x="70" fg:w="1"/><text x="5.8188%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5688%" y="485" width="0.0796%" height="15" fill="rgb(216,191,38)" fg:x="70" fg:w="1"/><text x="5.8188%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="5.5688%" y="469" width="0.0796%" height="15" fill="rgb(232,140,52)" fg:x="70" fg:w="1"/><text x="5.8188%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="5.5688%" y="453" width="0.0796%" height="15" fill="rgb(223,158,51)" fg:x="70" fg:w="1"/><text x="5.8188%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="5.5688%" y="437" width="0.0796%" height="15" fill="rgb(235,29,51)" fg:x="70" fg:w="1"/><text x="5.8188%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="5.5688%" y="421" width="0.0796%" height="15" fill="rgb(215,181,18)" fg:x="70" fg:w="1"/><text x="5.8188%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.5688%" y="405" width="0.0796%" height="15" fill="rgb(227,125,34)" fg:x="70" fg:w="1"/><text x="5.8188%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.5688%" y="389" width="0.0796%" height="15" fill="rgb(230,197,49)" fg:x="70" fg:w="1"/><text x="5.8188%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5688%" y="373" width="0.0796%" height="15" fill="rgb(239,141,16)" fg:x="70" fg:w="1"/><text x="5.8188%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="5.5688%" y="357" width="0.0796%" height="15" fill="rgb(225,105,43)" fg:x="70" fg:w="1"/><text x="5.8188%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="5.5688%" y="341" width="0.0796%" height="15" fill="rgb(214,131,14)" fg:x="70" fg:w="1"/><text x="5.8188%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.6484%" y="501" width="0.0796%" height="15" fill="rgb(229,177,11)" fg:x="71" fg:w="1"/><text x="5.8984%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6484%" y="485" width="0.0796%" height="15" fill="rgb(231,180,14)" fg:x="71" fg:w="1"/><text x="5.8984%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.6484%" y="469" width="0.0796%" height="15" fill="rgb(232,88,2)" fg:x="71" fg:w="1"/><text x="5.8984%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6484%" y="453" width="0.0796%" height="15" fill="rgb(205,220,8)" fg:x="71" fg:w="1"/><text x="5.8984%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.6484%" y="437" width="0.0796%" height="15" fill="rgb(225,23,53)" fg:x="71" fg:w="1"/><text x="5.8984%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.6484%" y="421" width="0.0796%" height="15" fill="rgb(213,62,29)" fg:x="71" fg:w="1"/><text x="5.8984%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.6484%" y="405" width="0.0796%" height="15" fill="rgb(227,75,7)" fg:x="71" fg:w="1"/><text x="5.8984%" y="415.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="5.6484%" y="645" width="0.1591%" height="15" fill="rgb(207,105,14)" fg:x="71" fg:w="2"/><text x="5.8984%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="5.6484%" y="629" width="0.1591%" height="15" fill="rgb(245,62,29)" fg:x="71" fg:w="2"/><text x="5.8984%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.6484%" y="613" width="0.1591%" height="15" fill="rgb(236,202,4)" fg:x="71" fg:w="2"/><text x="5.8984%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="5.6484%" y="597" width="0.1591%" height="15" fill="rgb(250,67,1)" fg:x="71" fg:w="2"/><text x="5.8984%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="5.6484%" y="581" width="0.1591%" height="15" fill="rgb(253,115,44)" fg:x="71" fg:w="2"/><text x="5.8984%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="5.6484%" y="565" width="0.1591%" height="15" fill="rgb(251,139,18)" fg:x="71" fg:w="2"/><text x="5.8984%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="5.6484%" y="549" width="0.1591%" height="15" fill="rgb(218,22,32)" fg:x="71" fg:w="2"/><text x="5.8984%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="5.6484%" y="533" width="0.1591%" height="15" fill="rgb(243,53,5)" fg:x="71" fg:w="2"/><text x="5.8984%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="5.6484%" y="517" width="0.1591%" height="15" fill="rgb(227,56,16)" fg:x="71" fg:w="2"/><text x="5.8984%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="5.7279%" y="501" width="0.0796%" height="15" fill="rgb(245,53,0)" fg:x="72" fg:w="1"/><text x="5.9779%" y="511.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.8075%" y="645" width="0.0796%" height="15" fill="rgb(216,170,35)" fg:x="73" fg:w="1"/><text x="6.0575%" y="655.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8075%" y="629" width="0.0796%" height="15" fill="rgb(211,200,8)" fg:x="73" fg:w="1"/><text x="6.0575%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.8075%" y="613" width="0.0796%" height="15" fill="rgb(228,204,44)" fg:x="73" fg:w="1"/><text x="6.0575%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8075%" y="597" width="0.0796%" height="15" fill="rgb(214,121,17)" fg:x="73" fg:w="1"/><text x="6.0575%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.8075%" y="581" width="0.0796%" height="15" fill="rgb(233,64,38)" fg:x="73" fg:w="1"/><text x="6.0575%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8075%" y="565" width="0.0796%" height="15" fill="rgb(253,54,19)" fg:x="73" fg:w="1"/><text x="6.0575%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8075%" y="549" width="0.0796%" height="15" fill="rgb(253,94,18)" fg:x="73" fg:w="1"/><text x="6.0575%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.8870%" y="597" width="0.0796%" height="15" fill="rgb(227,57,52)" fg:x="74" fg:w="1"/><text x="6.1370%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.8870%" y="581" width="0.0796%" height="15" fill="rgb(230,228,50)" fg:x="74" fg:w="1"/><text x="6.1370%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.8870%" y="565" width="0.0796%" height="15" fill="rgb(217,205,27)" fg:x="74" fg:w="1"/><text x="6.1370%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.8870%" y="549" width="0.0796%" height="15" fill="rgb(252,71,50)" fg:x="74" fg:w="1"/><text x="6.1370%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.8870%" y="533" width="0.0796%" height="15" fill="rgb(209,86,4)" fg:x="74" fg:w="1"/><text x="6.1370%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.8870%" y="517" width="0.0796%" height="15" fill="rgb(229,94,0)" fg:x="74" fg:w="1"/><text x="6.1370%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.8870%" y="501" width="0.0796%" height="15" fill="rgb(252,223,21)" fg:x="74" fg:w="1"/><text x="6.1370%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.8870%" y="485" width="0.0796%" height="15" fill="rgb(230,210,4)" fg:x="74" fg:w="1"/><text x="6.1370%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8870%" y="469" width="0.0796%" height="15" fill="rgb(240,149,38)" fg:x="74" fg:w="1"/><text x="6.1370%" y="479.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="5.4893%" y="677" width="0.5569%" height="15" fill="rgb(254,105,20)" fg:x="69" fg:w="7"/><text x="5.7393%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="5.6484%" y="661" width="0.3978%" height="15" fill="rgb(253,87,46)" fg:x="71" fg:w="5"/><text x="5.8984%" y="671.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="5.8870%" y="645" width="0.1591%" height="15" fill="rgb(253,116,33)" fg:x="74" fg:w="2"/><text x="6.1370%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="5.8870%" y="629" width="0.1591%" height="15" fill="rgb(229,198,5)" fg:x="74" fg:w="2"/><text x="6.1370%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="5.8870%" y="613" width="0.1591%" height="15" fill="rgb(242,38,37)" fg:x="74" fg:w="2"/><text x="6.1370%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.9666%" y="597" width="0.0796%" height="15" fill="rgb(242,69,53)" fg:x="75" fg:w="1"/><text x="6.2166%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.9666%" y="581" width="0.0796%" height="15" fill="rgb(249,80,16)" fg:x="75" fg:w="1"/><text x="6.2166%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.9666%" y="565" width="0.0796%" height="15" fill="rgb(206,128,11)" fg:x="75" fg:w="1"/><text x="6.2166%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.9666%" y="549" width="0.0796%" height="15" fill="rgb(212,35,20)" fg:x="75" fg:w="1"/><text x="6.2166%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="6.0461%" y="677" width="0.0796%" height="15" fill="rgb(236,79,13)" fg:x="76" fg:w="1"/><text x="6.2961%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.1257%" y="661" width="0.0796%" height="15" fill="rgb(233,123,3)" fg:x="77" fg:w="1"/><text x="6.3757%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.1257%" y="645" width="0.0796%" height="15" fill="rgb(214,93,52)" fg:x="77" fg:w="1"/><text x="6.3757%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.1257%" y="629" width="0.0796%" height="15" fill="rgb(251,37,40)" fg:x="77" fg:w="1"/><text x="6.3757%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.1257%" y="613" width="0.0796%" height="15" fill="rgb(227,80,54)" fg:x="77" fg:w="1"/><text x="6.3757%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.1257%" y="597" width="0.0796%" height="15" fill="rgb(254,48,11)" fg:x="77" fg:w="1"/><text x="6.3757%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="6.1257%" y="581" width="0.0796%" height="15" fill="rgb(235,193,26)" fg:x="77" fg:w="1"/><text x="6.3757%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.1257%" y="565" width="0.0796%" height="15" fill="rgb(229,99,21)" fg:x="77" fg:w="1"/><text x="6.3757%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.2053%" y="613" width="0.0796%" height="15" fill="rgb(211,140,41)" fg:x="78" fg:w="1"/><text x="6.4553%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.2053%" y="597" width="0.0796%" height="15" fill="rgb(240,227,30)" fg:x="78" fg:w="1"/><text x="6.4553%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.2053%" y="581" width="0.0796%" height="15" fill="rgb(215,224,45)" fg:x="78" fg:w="1"/><text x="6.4553%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2053%" y="565" width="0.0796%" height="15" fill="rgb(206,123,31)" fg:x="78" fg:w="1"/><text x="6.4553%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2053%" y="549" width="0.0796%" height="15" fill="rgb(210,138,16)" fg:x="78" fg:w="1"/><text x="6.4553%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.2053%" y="533" width="0.0796%" height="15" fill="rgb(228,57,28)" fg:x="78" fg:w="1"/><text x="6.4553%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2053%" y="517" width="0.0796%" height="15" fill="rgb(242,170,10)" fg:x="78" fg:w="1"/><text x="6.4553%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.2053%" y="501" width="0.0796%" height="15" fill="rgb(228,214,39)" fg:x="78" fg:w="1"/><text x="6.4553%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.2053%" y="485" width="0.0796%" height="15" fill="rgb(218,179,33)" fg:x="78" fg:w="1"/><text x="6.4553%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="6.2053%" y="469" width="0.0796%" height="15" fill="rgb(235,193,39)" fg:x="78" fg:w="1"/><text x="6.4553%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.2053%" y="453" width="0.0796%" height="15" fill="rgb(219,221,36)" fg:x="78" fg:w="1"/><text x="6.4553%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.2053%" y="437" width="0.0796%" height="15" fill="rgb(248,218,19)" fg:x="78" fg:w="1"/><text x="6.4553%" y="447.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="6.2053%" y="645" width="0.1591%" height="15" fill="rgb(205,50,9)" fg:x="78" fg:w="2"/><text x="6.4553%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="6.2053%" y="629" width="0.1591%" height="15" fill="rgb(238,81,28)" fg:x="78" fg:w="2"/><text x="6.4553%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.2848%" y="613" width="0.0796%" height="15" fill="rgb(235,110,19)" fg:x="79" fg:w="1"/><text x="6.5348%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.2848%" y="597" width="0.0796%" height="15" fill="rgb(214,7,14)" fg:x="79" fg:w="1"/><text x="6.5348%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.2848%" y="581" width="0.0796%" height="15" fill="rgb(211,77,3)" fg:x="79" fg:w="1"/><text x="6.5348%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.2848%" y="565" width="0.0796%" height="15" fill="rgb(229,5,9)" fg:x="79" fg:w="1"/><text x="6.5348%" y="575.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="6.2848%" y="549" width="0.0796%" height="15" fill="rgb(225,90,11)" fg:x="79" fg:w="1"/><text x="6.5348%" y="559.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.2848%" y="533" width="0.0796%" height="15" fill="rgb(242,56,8)" fg:x="79" fg:w="1"/><text x="6.5348%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3644%" y="549" width="0.0796%" height="15" fill="rgb(249,212,39)" fg:x="80" fg:w="1"/><text x="6.6144%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3644%" y="533" width="0.0796%" height="15" fill="rgb(236,90,9)" fg:x="80" fg:w="1"/><text x="6.6144%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.3644%" y="517" width="0.0796%" height="15" fill="rgb(206,88,35)" fg:x="80" fg:w="1"/><text x="6.6144%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3644%" y="501" width="0.0796%" height="15" fill="rgb(205,126,30)" fg:x="80" fg:w="1"/><text x="6.6144%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3644%" y="485" width="0.0796%" height="15" fill="rgb(230,176,12)" fg:x="80" fg:w="1"/><text x="6.6144%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.3644%" y="469" width="0.0796%" height="15" fill="rgb(243,19,9)" fg:x="80" fg:w="1"/><text x="6.6144%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.3644%" y="453" width="0.0796%" height="15" fill="rgb(245,171,17)" fg:x="80" fg:w="1"/><text x="6.6144%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.3644%" y="437" width="0.0796%" height="15" fill="rgb(227,52,21)" fg:x="80" fg:w="1"/><text x="6.6144%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.3644%" y="421" width="0.0796%" height="15" fill="rgb(238,69,14)" fg:x="80" fg:w="1"/><text x="6.6144%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.3644%" y="405" width="0.0796%" height="15" fill="rgb(241,156,39)" fg:x="80" fg:w="1"/><text x="6.6144%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="6.3644%" y="597" width="0.1591%" height="15" fill="rgb(212,227,28)" fg:x="80" fg:w="2"/><text x="6.6144%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.3644%" y="581" width="0.1591%" height="15" fill="rgb(209,118,27)" fg:x="80" fg:w="2"/><text x="6.6144%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.3644%" y="565" width="0.1591%" height="15" fill="rgb(226,102,5)" fg:x="80" fg:w="2"/><text x="6.6144%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.4439%" y="549" width="0.0796%" height="15" fill="rgb(223,34,3)" fg:x="81" fg:w="1"/><text x="6.6939%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.4439%" y="533" width="0.0796%" height="15" fill="rgb(221,81,38)" fg:x="81" fg:w="1"/><text x="6.6939%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.4439%" y="517" width="0.0796%" height="15" fill="rgb(236,219,28)" fg:x="81" fg:w="1"/><text x="6.6939%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.4439%" y="501" width="0.0796%" height="15" fill="rgb(213,200,14)" fg:x="81" fg:w="1"/><text x="6.6939%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.4439%" y="485" width="0.0796%" height="15" fill="rgb(240,33,19)" fg:x="81" fg:w="1"/><text x="6.6939%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.4439%" y="469" width="0.0796%" height="15" fill="rgb(233,113,27)" fg:x="81" fg:w="1"/><text x="6.6939%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="6.4439%" y="453" width="0.0796%" height="15" fill="rgb(220,221,18)" fg:x="81" fg:w="1"/><text x="6.6939%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (42 samples, 3.34%)</title><rect x="3.2617%" y="693" width="3.3413%" height="15" fill="rgb(238,92,8)" fg:x="41" fg:w="42"/><text x="3.5117%" y="703.50">plu..</text></g><g><title>plugins_core::build::Build::occupying (6 samples, 0.48%)</title><rect x="6.1257%" y="677" width="0.4773%" height="15" fill="rgb(222,164,16)" fg:x="77" fg:w="6"/><text x="6.3757%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="6.2053%" y="661" width="0.3978%" height="15" fill="rgb(241,119,3)" fg:x="78" fg:w="5"/><text x="6.4553%" y="671.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (3 samples, 0.24%)</title><rect x="6.3644%" y="645" width="0.2387%" height="15" fill="rgb(241,44,8)" fg:x="80" fg:w="3"/><text x="6.6144%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="6.3644%" y="629" width="0.2387%" height="15" fill="rgb(230,36,40)" fg:x="80" fg:w="3"/><text x="6.6144%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="6.3644%" y="613" width="0.2387%" height="15" fill="rgb(243,16,36)" fg:x="80" fg:w="3"/><text x="6.6144%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.5235%" y="597" width="0.0796%" height="15" fill="rgb(231,4,26)" fg:x="82" fg:w="1"/><text x="6.7735%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.5235%" y="581" width="0.0796%" height="15" fill="rgb(240,9,31)" fg:x="82" fg:w="1"/><text x="6.7735%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.5235%" y="565" width="0.0796%" height="15" fill="rgb(207,173,15)" fg:x="82" fg:w="1"/><text x="6.7735%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5235%" y="549" width="0.0796%" height="15" fill="rgb(224,192,53)" fg:x="82" fg:w="1"/><text x="6.7735%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5235%" y="533" width="0.0796%" height="15" fill="rgb(223,67,28)" fg:x="82" fg:w="1"/><text x="6.7735%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5235%" y="517" width="0.0796%" height="15" fill="rgb(211,20,47)" fg:x="82" fg:w="1"/><text x="6.7735%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5235%" y="501" width="0.0796%" height="15" fill="rgb(240,228,2)" fg:x="82" fg:w="1"/><text x="6.7735%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5235%" y="485" width="0.0796%" height="15" fill="rgb(248,151,12)" fg:x="82" fg:w="1"/><text x="6.7735%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.5235%" y="469" width="0.0796%" height="15" fill="rgb(244,8,39)" fg:x="82" fg:w="1"/><text x="6.7735%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.5235%" y="453" width="0.0796%" height="15" fill="rgb(222,26,8)" fg:x="82" fg:w="1"/><text x="6.7735%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.5235%" y="437" width="0.0796%" height="15" fill="rgb(213,106,44)" fg:x="82" fg:w="1"/><text x="6.7735%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.5235%" y="421" width="0.0796%" height="15" fill="rgb(214,129,20)" fg:x="82" fg:w="1"/><text x="6.7735%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.5235%" y="405" width="0.0796%" height="15" fill="rgb(212,32,13)" fg:x="82" fg:w="1"/><text x="6.7735%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="6.6030%" y="645" width="0.0796%" height="15" fill="rgb(208,168,33)" fg:x="83" fg:w="1"/><text x="6.8530%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="6.6030%" y="629" width="0.0796%" height="15" fill="rgb(231,207,8)" fg:x="83" fg:w="1"/><text x="6.8530%" y="639.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="6.6030%" y="613" width="0.0796%" height="15" fill="rgb(235,219,23)" fg:x="83" fg:w="1"/><text x="6.8530%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.6826%" y="645" width="0.0796%" height="15" fill="rgb(226,216,26)" fg:x="84" fg:w="1"/><text x="6.9326%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.6826%" y="629" width="0.0796%" height="15" fill="rgb(239,137,16)" fg:x="84" fg:w="1"/><text x="6.9326%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.6826%" y="613" width="0.0796%" height="15" fill="rgb(207,12,36)" fg:x="84" fg:w="1"/><text x="6.9326%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.6826%" y="597" width="0.0796%" height="15" fill="rgb(210,214,24)" fg:x="84" fg:w="1"/><text x="6.9326%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.6826%" y="581" width="0.0796%" height="15" fill="rgb(206,56,30)" fg:x="84" fg:w="1"/><text x="6.9326%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.7621%" y="597" width="0.0796%" height="15" fill="rgb(228,143,26)" fg:x="85" fg:w="1"/><text x="7.0121%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7621%" y="581" width="0.0796%" height="15" fill="rgb(216,218,46)" fg:x="85" fg:w="1"/><text x="7.0121%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7621%" y="565" width="0.0796%" height="15" fill="rgb(206,6,19)" fg:x="85" fg:w="1"/><text x="7.0121%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7621%" y="549" width="0.0796%" height="15" fill="rgb(239,177,51)" fg:x="85" fg:w="1"/><text x="7.0121%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7621%" y="533" width="0.0796%" height="15" fill="rgb(216,55,25)" fg:x="85" fg:w="1"/><text x="7.0121%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7621%" y="517" width="0.0796%" height="15" fill="rgb(231,163,29)" fg:x="85" fg:w="1"/><text x="7.0121%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="6.7621%" y="501" width="0.0796%" height="15" fill="rgb(232,149,50)" fg:x="85" fg:w="1"/><text x="7.0121%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7621%" y="485" width="0.0796%" height="15" fill="rgb(223,142,48)" fg:x="85" fg:w="1"/><text x="7.0121%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="6.6030%" y="693" width="0.3182%" height="15" fill="rgb(245,83,23)" fg:x="83" fg:w="4"/><text x="6.8530%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="6.6030%" y="677" width="0.3182%" height="15" fill="rgb(224,63,2)" fg:x="83" fg:w="4"/><text x="6.8530%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="6.6030%" y="661" width="0.3182%" height="15" fill="rgb(218,65,53)" fg:x="83" fg:w="4"/><text x="6.8530%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="6.7621%" y="645" width="0.1591%" height="15" fill="rgb(221,84,29)" fg:x="85" fg:w="2"/><text x="7.0121%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.7621%" y="629" width="0.1591%" height="15" fill="rgb(234,0,32)" fg:x="85" fg:w="2"/><text x="7.0121%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="6.7621%" y="613" width="0.1591%" height="15" fill="rgb(206,20,16)" fg:x="85" fg:w="2"/><text x="7.0121%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.8417%" y="597" width="0.0796%" height="15" fill="rgb(244,172,18)" fg:x="86" fg:w="1"/><text x="7.0917%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.8417%" y="581" width="0.0796%" height="15" fill="rgb(254,133,1)" fg:x="86" fg:w="1"/><text x="7.0917%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8417%" y="565" width="0.0796%" height="15" fill="rgb(222,206,41)" fg:x="86" fg:w="1"/><text x="7.0917%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8417%" y="549" width="0.0796%" height="15" fill="rgb(212,3,42)" fg:x="86" fg:w="1"/><text x="7.0917%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8417%" y="533" width="0.0796%" height="15" fill="rgb(241,11,4)" fg:x="86" fg:w="1"/><text x="7.0917%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8417%" y="517" width="0.0796%" height="15" fill="rgb(205,19,26)" fg:x="86" fg:w="1"/><text x="7.0917%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.8417%" y="501" width="0.0796%" height="15" fill="rgb(210,179,32)" fg:x="86" fg:w="1"/><text x="7.0917%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8417%" y="485" width="0.0796%" height="15" fill="rgb(227,116,49)" fg:x="86" fg:w="1"/><text x="7.0917%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.8417%" y="469" width="0.0796%" height="15" fill="rgb(211,146,6)" fg:x="86" fg:w="1"/><text x="7.0917%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.8417%" y="453" width="0.0796%" height="15" fill="rgb(219,44,39)" fg:x="86" fg:w="1"/><text x="7.0917%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.8417%" y="437" width="0.0796%" height="15" fill="rgb(234,128,11)" fg:x="86" fg:w="1"/><text x="7.0917%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8417%" y="421" width="0.0796%" height="15" fill="rgb(220,183,53)" fg:x="86" fg:w="1"/><text x="7.0917%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="6.9212%" y="661" width="0.0796%" height="15" fill="rgb(213,219,32)" fg:x="87" fg:w="1"/><text x="7.1712%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="6.9212%" y="645" width="0.0796%" height="15" fill="rgb(232,156,16)" fg:x="87" fg:w="1"/><text x="7.1712%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="6.9212%" y="629" width="0.0796%" height="15" fill="rgb(246,135,34)" fg:x="87" fg:w="1"/><text x="7.1712%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="6.9212%" y="613" width="0.0796%" height="15" fill="rgb(241,99,0)" fg:x="87" fg:w="1"/><text x="7.1712%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.9212%" y="597" width="0.0796%" height="15" fill="rgb(222,103,45)" fg:x="87" fg:w="1"/><text x="7.1712%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.9212%" y="581" width="0.0796%" height="15" fill="rgb(212,57,4)" fg:x="87" fg:w="1"/><text x="7.1712%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="6.9212%" y="565" width="0.0796%" height="15" fill="rgb(215,68,47)" fg:x="87" fg:w="1"/><text x="7.1712%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9212%" y="549" width="0.0796%" height="15" fill="rgb(230,84,2)" fg:x="87" fg:w="1"/><text x="7.1712%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.9212%" y="677" width="0.1591%" height="15" fill="rgb(220,102,14)" fg:x="87" fg:w="2"/><text x="7.1712%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.0008%" y="661" width="0.0796%" height="15" fill="rgb(240,10,32)" fg:x="88" fg:w="1"/><text x="7.2508%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.0008%" y="645" width="0.0796%" height="15" fill="rgb(215,47,27)" fg:x="88" fg:w="1"/><text x="7.2508%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.0008%" y="629" width="0.0796%" height="15" fill="rgb(233,188,43)" fg:x="88" fg:w="1"/><text x="7.2508%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.0008%" y="613" width="0.0796%" height="15" fill="rgb(253,190,1)" fg:x="88" fg:w="1"/><text x="7.2508%" y="623.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.0008%" y="597" width="0.0796%" height="15" fill="rgb(206,114,52)" fg:x="88" fg:w="1"/><text x="7.2508%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0008%" y="581" width="0.0796%" height="15" fill="rgb(233,120,37)" fg:x="88" fg:w="1"/><text x="7.2508%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0008%" y="565" width="0.0796%" height="15" fill="rgb(214,52,39)" fg:x="88" fg:w="1"/><text x="7.2508%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (80 samples, 6.36%)</title><rect x="0.7955%" y="709" width="6.3644%" height="15" fill="rgb(223,80,29)" fg:x="10" fg:w="80"/><text x="1.0455%" y="719.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="6.9212%" y="693" width="0.2387%" height="15" fill="rgb(230,101,40)" fg:x="87" fg:w="3"/><text x="7.1712%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="7.0804%" y="677" width="0.0796%" height="15" fill="rgb(219,211,8)" fg:x="89" fg:w="1"/><text x="7.3304%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1599%" y="709" width="0.0796%" height="15" fill="rgb(252,126,28)" fg:x="90" fg:w="1"/><text x="7.4099%" y="719.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="7.2395%" y="693" width="0.0796%" height="15" fill="rgb(215,56,38)" fg:x="91" fg:w="1"/><text x="7.4895%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.3986%" y="613" width="0.0796%" height="15" fill="rgb(249,55,44)" fg:x="93" fg:w="1"/><text x="7.6486%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.3986%" y="597" width="0.0796%" height="15" fill="rgb(220,221,32)" fg:x="93" fg:w="1"/><text x="7.6486%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.3986%" y="581" width="0.0796%" height="15" fill="rgb(212,216,41)" fg:x="93" fg:w="1"/><text x="7.6486%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.3986%" y="565" width="0.0796%" height="15" fill="rgb(228,213,43)" fg:x="93" fg:w="1"/><text x="7.6486%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.5577%" y="597" width="0.0796%" height="15" fill="rgb(211,31,26)" fg:x="95" fg:w="1"/><text x="7.8077%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.5577%" y="581" width="0.0796%" height="15" fill="rgb(229,202,19)" fg:x="95" fg:w="1"/><text x="7.8077%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.6372%" y="597" width="0.0796%" height="15" fill="rgb(229,105,46)" fg:x="96" fg:w="1"/><text x="7.8872%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.6372%" y="581" width="0.0796%" height="15" fill="rgb(235,108,1)" fg:x="96" fg:w="1"/><text x="7.8872%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.6372%" y="565" width="0.0796%" height="15" fill="rgb(245,111,35)" fg:x="96" fg:w="1"/><text x="7.8872%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.6372%" y="549" width="0.0796%" height="15" fill="rgb(219,185,31)" fg:x="96" fg:w="1"/><text x="7.8872%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7963%" y="565" width="0.0796%" height="15" fill="rgb(214,4,43)" fg:x="98" fg:w="1"/><text x="8.0463%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8759%" y="549" width="0.0796%" height="15" fill="rgb(235,227,40)" fg:x="99" fg:w="1"/><text x="8.1259%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8759%" y="533" width="0.0796%" height="15" fill="rgb(230,88,30)" fg:x="99" fg:w="1"/><text x="8.1259%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8759%" y="517" width="0.0796%" height="15" fill="rgb(216,217,1)" fg:x="99" fg:w="1"/><text x="8.1259%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.8759%" y="501" width="0.0796%" height="15" fill="rgb(248,139,50)" fg:x="99" fg:w="1"/><text x="8.1259%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="7.3986%" y="629" width="0.6364%" height="15" fill="rgb(233,1,21)" fg:x="93" fg:w="8"/><text x="7.6486%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="7.4781%" y="613" width="0.5569%" height="15" fill="rgb(215,183,12)" fg:x="94" fg:w="7"/><text x="7.7281%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.7168%" y="597" width="0.3182%" height="15" fill="rgb(229,104,42)" fg:x="97" fg:w="4"/><text x="7.9668%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.7963%" y="581" width="0.2387%" height="15" fill="rgb(243,34,48)" fg:x="98" fg:w="3"/><text x="8.0463%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.8759%" y="565" width="0.1591%" height="15" fill="rgb(239,11,44)" fg:x="99" fg:w="2"/><text x="8.1259%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.9554%" y="549" width="0.0796%" height="15" fill="rgb(231,98,35)" fg:x="100" fg:w="1"/><text x="8.2054%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.9554%" y="533" width="0.0796%" height="15" fill="rgb(233,28,25)" fg:x="100" fg:w="1"/><text x="8.2054%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.0350%" y="597" width="0.0796%" height="15" fill="rgb(234,123,11)" fg:x="101" fg:w="1"/><text x="8.2850%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.1146%" y="581" width="0.0796%" height="15" fill="rgb(220,69,3)" fg:x="102" fg:w="1"/><text x="8.3646%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.1941%" y="565" width="0.0796%" height="15" fill="rgb(214,64,36)" fg:x="103" fg:w="1"/><text x="8.4441%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.2737%" y="549" width="0.0796%" height="15" fill="rgb(211,138,32)" fg:x="104" fg:w="1"/><text x="8.5237%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2737%" y="533" width="0.0796%" height="15" fill="rgb(213,118,47)" fg:x="104" fg:w="1"/><text x="8.5237%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="8.3532%" y="549" width="0.0796%" height="15" fill="rgb(243,124,49)" fg:x="105" fg:w="1"/><text x="8.6032%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.3532%" y="533" width="0.0796%" height="15" fill="rgb(221,30,28)" fg:x="105" fg:w="1"/><text x="8.6032%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.3532%" y="517" width="0.0796%" height="15" fill="rgb(246,37,13)" fg:x="105" fg:w="1"/><text x="8.6032%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="8.0350%" y="629" width="0.4773%" height="15" fill="rgb(249,66,14)" fg:x="101" fg:w="6"/><text x="8.2850%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="8.0350%" y="613" width="0.4773%" height="15" fill="rgb(213,166,5)" fg:x="101" fg:w="6"/><text x="8.2850%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="8.1146%" y="597" width="0.3978%" height="15" fill="rgb(221,66,24)" fg:x="102" fg:w="5"/><text x="8.3646%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.1941%" y="581" width="0.3182%" height="15" fill="rgb(210,132,17)" fg:x="103" fg:w="4"/><text x="8.4441%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.2737%" y="565" width="0.2387%" height="15" fill="rgb(243,202,5)" fg:x="104" fg:w="3"/><text x="8.5237%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.4328%" y="549" width="0.0796%" height="15" fill="rgb(233,70,48)" fg:x="106" fg:w="1"/><text x="8.6828%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.4328%" y="533" width="0.0796%" height="15" fill="rgb(238,41,26)" fg:x="106" fg:w="1"/><text x="8.6828%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4328%" y="517" width="0.0796%" height="15" fill="rgb(241,19,31)" fg:x="106" fg:w="1"/><text x="8.6828%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5123%" y="565" width="0.0796%" height="15" fill="rgb(214,76,10)" fg:x="107" fg:w="1"/><text x="8.7623%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5919%" y="565" width="0.0796%" height="15" fill="rgb(254,202,22)" fg:x="108" fg:w="1"/><text x="8.8419%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5919%" y="549" width="0.0796%" height="15" fill="rgb(214,72,24)" fg:x="108" fg:w="1"/><text x="8.8419%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7510%" y="549" width="0.0796%" height="15" fill="rgb(221,92,46)" fg:x="110" fg:w="1"/><text x="9.0010%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7510%" y="533" width="0.0796%" height="15" fill="rgb(246,13,50)" fg:x="110" fg:w="1"/><text x="9.0010%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="8.8305%" y="517" width="0.2387%" height="15" fill="rgb(240,165,38)" fg:x="111" fg:w="3"/><text x="9.0805%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.9897%" y="501" width="0.0796%" height="15" fill="rgb(241,24,51)" fg:x="113" fg:w="1"/><text x="9.2397%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9897%" y="485" width="0.0796%" height="15" fill="rgb(227,51,44)" fg:x="113" fg:w="1"/><text x="9.2397%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="8.5123%" y="597" width="0.6364%" height="15" fill="rgb(231,121,3)" fg:x="107" fg:w="8"/><text x="8.7623%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="8.5123%" y="581" width="0.6364%" height="15" fill="rgb(245,3,41)" fg:x="107" fg:w="8"/><text x="8.7623%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="8.6714%" y="565" width="0.4773%" height="15" fill="rgb(214,13,26)" fg:x="109" fg:w="6"/><text x="8.9214%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8305%" y="549" width="0.3182%" height="15" fill="rgb(252,75,11)" fg:x="111" fg:w="4"/><text x="9.0805%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.8305%" y="533" width="0.3182%" height="15" fill="rgb(218,226,17)" fg:x="111" fg:w="4"/><text x="9.0805%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.0692%" y="517" width="0.0796%" height="15" fill="rgb(248,89,38)" fg:x="114" fg:w="1"/><text x="9.3192%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.0692%" y="501" width="0.0796%" height="15" fill="rgb(237,73,46)" fg:x="114" fg:w="1"/><text x="9.3192%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.0692%" y="485" width="0.0796%" height="15" fill="rgb(242,78,33)" fg:x="114" fg:w="1"/><text x="9.3192%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="9.1488%" y="581" width="0.3182%" height="15" fill="rgb(235,60,3)" fg:x="115" fg:w="4"/><text x="9.3988%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="9.2283%" y="565" width="0.2387%" height="15" fill="rgb(216,172,19)" fg:x="116" fg:w="3"/><text x="9.4783%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.3079%" y="549" width="0.1591%" height="15" fill="rgb(227,6,42)" fg:x="117" fg:w="2"/><text x="9.5579%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.3079%" y="533" width="0.1591%" height="15" fill="rgb(223,207,42)" fg:x="117" fg:w="2"/><text x="9.5579%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.3079%" y="517" width="0.1591%" height="15" fill="rgb(246,138,30)" fg:x="117" fg:w="2"/><text x="9.5579%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.3874%" y="501" width="0.0796%" height="15" fill="rgb(251,199,47)" fg:x="118" fg:w="1"/><text x="9.6374%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4670%" y="581" width="0.0796%" height="15" fill="rgb(228,218,44)" fg:x="119" fg:w="1"/><text x="9.7170%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (14 samples, 1.11%)</title><rect x="8.5123%" y="613" width="1.1138%" height="15" fill="rgb(220,68,6)" fg:x="107" fg:w="14"/><text x="8.7623%" y="623.50"></text></g><g><title>treediff::diff::diff (6 samples, 0.48%)</title><rect x="9.1488%" y="597" width="0.4773%" height="15" fill="rgb(240,60,26)" fg:x="115" fg:w="6"/><text x="9.3988%" y="607.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="9.5465%" y="581" width="0.0796%" height="15" fill="rgb(211,200,19)" fg:x="120" fg:w="1"/><text x="9.7965%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5465%" y="565" width="0.0796%" height="15" fill="rgb(242,145,30)" fg:x="120" fg:w="1"/><text x="9.7965%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.6261%" y="581" width="0.1591%" height="15" fill="rgb(225,64,13)" fg:x="121" fg:w="2"/><text x="9.8761%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.6261%" y="565" width="0.1591%" height="15" fill="rgb(218,103,35)" fg:x="121" fg:w="2"/><text x="9.8761%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="9.6261%" y="549" width="0.1591%" height="15" fill="rgb(216,93,46)" fg:x="121" fg:w="2"/><text x="9.8761%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="10.0239%" y="533" width="0.1591%" height="15" fill="rgb(225,159,27)" fg:x="126" fg:w="2"/><text x="10.2739%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0239%" y="517" width="0.1591%" height="15" fill="rgb(225,204,11)" fg:x="126" fg:w="2"/><text x="10.2739%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.0239%" y="501" width="0.1591%" height="15" fill="rgb(205,56,4)" fg:x="126" fg:w="2"/><text x="10.2739%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0239%" y="485" width="0.1591%" height="15" fill="rgb(206,6,35)" fg:x="126" fg:w="2"/><text x="10.2739%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.0239%" y="469" width="0.1591%" height="15" fill="rgb(247,73,52)" fg:x="126" fg:w="2"/><text x="10.2739%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.2625%" y="501" width="0.1591%" height="15" fill="rgb(246,97,4)" fg:x="129" fg:w="2"/><text x="10.5125%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.2625%" y="485" width="0.1591%" height="15" fill="rgb(212,37,15)" fg:x="129" fg:w="2"/><text x="10.5125%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.2625%" y="469" width="0.1591%" height="15" fill="rgb(208,130,40)" fg:x="129" fg:w="2"/><text x="10.5125%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4216%" y="469" width="0.0796%" height="15" fill="rgb(236,55,29)" fg:x="131" fg:w="1"/><text x="10.6716%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4216%" y="453" width="0.0796%" height="15" fill="rgb(209,156,45)" fg:x="131" fg:w="1"/><text x="10.6716%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4216%" y="437" width="0.0796%" height="15" fill="rgb(249,107,4)" fg:x="131" fg:w="1"/><text x="10.6716%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="10.2625%" y="517" width="0.4773%" height="15" fill="rgb(227,7,13)" fg:x="129" fg:w="6"/><text x="10.5125%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="10.4216%" y="501" width="0.3182%" height="15" fill="rgb(250,129,14)" fg:x="131" fg:w="4"/><text x="10.6716%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="10.4216%" y="485" width="0.3182%" height="15" fill="rgb(229,92,13)" fg:x="131" fg:w="4"/><text x="10.6716%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="10.5012%" y="469" width="0.2387%" height="15" fill="rgb(245,98,39)" fg:x="132" fg:w="3"/><text x="10.7512%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.5807%" y="453" width="0.1591%" height="15" fill="rgb(234,135,48)" fg:x="133" fg:w="2"/><text x="10.8307%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.5807%" y="437" width="0.1591%" height="15" fill="rgb(230,98,28)" fg:x="133" fg:w="2"/><text x="10.8307%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.6603%" y="421" width="0.0796%" height="15" fill="rgb(223,121,0)" fg:x="134" fg:w="1"/><text x="10.9103%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6603%" y="405" width="0.0796%" height="15" fill="rgb(234,173,33)" fg:x="134" fg:w="1"/><text x="10.9103%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6603%" y="389" width="0.0796%" height="15" fill="rgb(245,47,8)" fg:x="134" fg:w="1"/><text x="10.9103%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6603%" y="373" width="0.0796%" height="15" fill="rgb(205,17,20)" fg:x="134" fg:w="1"/><text x="10.9103%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.80%)</title><rect x="10.0239%" y="565" width="0.7955%" height="15" fill="rgb(232,151,16)" fg:x="126" fg:w="10"/><text x="10.2739%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="10.0239%" y="549" width="0.7955%" height="15" fill="rgb(208,30,32)" fg:x="126" fg:w="10"/><text x="10.2739%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="10.1830%" y="533" width="0.6364%" height="15" fill="rgb(254,26,3)" fg:x="128" fg:w="8"/><text x="10.4330%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7399%" y="517" width="0.0796%" height="15" fill="rgb(240,177,30)" fg:x="135" fg:w="1"/><text x="10.9899%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.27%)</title><rect x="9.6261%" y="613" width="1.2729%" height="15" fill="rgb(248,76,44)" fg:x="121" fg:w="16"/><text x="9.8761%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.27%)</title><rect x="9.6261%" y="597" width="1.2729%" height="15" fill="rgb(241,186,54)" fg:x="121" fg:w="16"/><text x="9.8761%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (14 samples, 1.11%)</title><rect x="9.7852%" y="581" width="1.1138%" height="15" fill="rgb(249,171,29)" fg:x="123" fg:w="14"/><text x="10.0352%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8194%" y="565" width="0.0796%" height="15" fill="rgb(237,151,44)" fg:x="136" fg:w="1"/><text x="11.0694%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.9785%" y="421" width="0.1591%" height="15" fill="rgb(228,174,30)" fg:x="138" fg:w="2"/><text x="11.2285%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.9785%" y="405" width="0.1591%" height="15" fill="rgb(252,14,37)" fg:x="138" fg:w="2"/><text x="11.2285%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="10.9785%" y="389" width="0.1591%" height="15" fill="rgb(207,111,40)" fg:x="138" fg:w="2"/><text x="11.2285%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="10.9785%" y="373" width="0.1591%" height="15" fill="rgb(248,171,54)" fg:x="138" fg:w="2"/><text x="11.2285%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.9785%" y="357" width="0.1591%" height="15" fill="rgb(211,127,2)" fg:x="138" fg:w="2"/><text x="11.2285%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.9785%" y="341" width="0.1591%" height="15" fill="rgb(236,87,47)" fg:x="138" fg:w="2"/><text x="11.2285%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.9785%" y="325" width="0.1591%" height="15" fill="rgb(223,190,45)" fg:x="138" fg:w="2"/><text x="11.2285%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="10.9785%" y="453" width="0.2387%" height="15" fill="rgb(215,5,16)" fg:x="138" fg:w="3"/><text x="11.2285%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="10.9785%" y="437" width="0.2387%" height="15" fill="rgb(252,82,33)" fg:x="138" fg:w="3"/><text x="11.2285%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1376%" y="421" width="0.0796%" height="15" fill="rgb(247,213,44)" fg:x="140" fg:w="1"/><text x="11.3876%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.1376%" y="405" width="0.0796%" height="15" fill="rgb(205,196,44)" fg:x="140" fg:w="1"/><text x="11.3876%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="10.9785%" y="485" width="0.3182%" height="15" fill="rgb(237,96,54)" fg:x="138" fg:w="4"/><text x="11.2285%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="10.9785%" y="469" width="0.3182%" height="15" fill="rgb(230,113,34)" fg:x="138" fg:w="4"/><text x="11.2285%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.2172%" y="453" width="0.0796%" height="15" fill="rgb(221,224,12)" fg:x="141" fg:w="1"/><text x="11.4672%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="10.8990%" y="517" width="0.4773%" height="15" fill="rgb(219,112,44)" fg:x="137" fg:w="6"/><text x="11.1490%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="10.9785%" y="501" width="0.3978%" height="15" fill="rgb(210,31,13)" fg:x="138" fg:w="5"/><text x="11.2285%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.2967%" y="485" width="0.0796%" height="15" fill="rgb(230,25,16)" fg:x="142" fg:w="1"/><text x="11.5467%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.3763%" y="517" width="0.0796%" height="15" fill="rgb(246,108,53)" fg:x="143" fg:w="1"/><text x="11.6263%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3763%" y="501" width="0.0796%" height="15" fill="rgb(241,172,50)" fg:x="143" fg:w="1"/><text x="11.6263%" y="511.50"></text></g><g><title>engine::session::Session::close (54 samples, 4.30%)</title><rect x="7.2395%" y="709" width="4.2959%" height="15" fill="rgb(235,141,10)" fg:x="91" fg:w="54"/><text x="7.4895%" y="719.50">engin..</text></g><g><title>engine::session::state::State::close (53 samples, 4.22%)</title><rect x="7.3190%" y="693" width="4.2164%" height="15" fill="rgb(220,174,43)" fg:x="92" fg:w="53"/><text x="7.5690%" y="703.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (53 samples, 4.22%)</title><rect x="7.3190%" y="677" width="4.2164%" height="15" fill="rgb(215,181,40)" fg:x="92" fg:w="53"/><text x="7.5690%" y="687.50">engin..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (53 samples, 4.22%)</title><rect x="7.3190%" y="661" width="4.2164%" height="15" fill="rgb(230,97,2)" fg:x="92" fg:w="53"/><text x="7.5690%" y="671.50">engin..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (53 samples, 4.22%)</title><rect x="7.3190%" y="645" width="4.2164%" height="15" fill="rgb(211,25,27)" fg:x="92" fg:w="53"/><text x="7.5690%" y="655.50">engin..</text></g><g><title>kernel::model::any_entity_changes (38 samples, 3.02%)</title><rect x="8.5123%" y="629" width="3.0231%" height="15" fill="rgb(230,87,26)" fg:x="107" fg:w="38"/><text x="8.7623%" y="639.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="10.8990%" y="613" width="0.6364%" height="15" fill="rgb(227,160,17)" fg:x="137" fg:w="8"/><text x="11.1490%" y="623.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="10.8990%" y="597" width="0.6364%" height="15" fill="rgb(244,85,34)" fg:x="137" fg:w="8"/><text x="11.1490%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="10.8990%" y="581" width="0.6364%" height="15" fill="rgb(207,70,0)" fg:x="137" fg:w="8"/><text x="11.1490%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="10.8990%" y="565" width="0.6364%" height="15" fill="rgb(223,129,7)" fg:x="137" fg:w="8"/><text x="11.1490%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="10.8990%" y="549" width="0.6364%" height="15" fill="rgb(246,105,7)" fg:x="137" fg:w="8"/><text x="11.1490%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="10.8990%" y="533" width="0.6364%" height="15" fill="rgb(215,154,42)" fg:x="137" fg:w="8"/><text x="11.1490%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4558%" y="517" width="0.0796%" height="15" fill="rgb(220,215,30)" fg:x="144" fg:w="1"/><text x="11.7058%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4558%" y="501" width="0.0796%" height="15" fill="rgb(228,81,51)" fg:x="144" fg:w="1"/><text x="11.7058%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4558%" y="485" width="0.0796%" height="15" fill="rgb(247,71,54)" fg:x="144" fg:w="1"/><text x="11.7058%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="11.9332%" y="565" width="0.0796%" height="15" fill="rgb(234,176,34)" fg:x="150" fg:w="1"/><text x="12.1832%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="11.9332%" y="549" width="0.0796%" height="15" fill="rgb(241,103,54)" fg:x="150" fg:w="1"/><text x="12.1832%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.9332%" y="533" width="0.0796%" height="15" fill="rgb(228,22,34)" fg:x="150" fg:w="1"/><text x="12.1832%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.9332%" y="517" width="0.0796%" height="15" fill="rgb(241,179,48)" fg:x="150" fg:w="1"/><text x="12.1832%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="11.9332%" y="501" width="0.0796%" height="15" fill="rgb(235,167,37)" fg:x="150" fg:w="1"/><text x="12.1832%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9332%" y="485" width="0.0796%" height="15" fill="rgb(213,109,30)" fg:x="150" fg:w="1"/><text x="12.1832%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9332%" y="469" width="0.0796%" height="15" fill="rgb(222,172,16)" fg:x="150" fg:w="1"/><text x="12.1832%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9332%" y="453" width="0.0796%" height="15" fill="rgb(233,192,5)" fg:x="150" fg:w="1"/><text x="12.1832%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.9332%" y="437" width="0.0796%" height="15" fill="rgb(247,189,41)" fg:x="150" fg:w="1"/><text x="12.1832%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.0127%" y="469" width="0.0796%" height="15" fill="rgb(218,134,47)" fg:x="151" fg:w="1"/><text x="12.2627%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0127%" y="453" width="0.0796%" height="15" fill="rgb(216,29,3)" fg:x="151" fg:w="1"/><text x="12.2627%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="12.0127%" y="549" width="0.1591%" height="15" fill="rgb(246,140,12)" fg:x="151" fg:w="2"/><text x="12.2627%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.0127%" y="533" width="0.1591%" height="15" fill="rgb(230,136,11)" fg:x="151" fg:w="2"/><text x="12.2627%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.0127%" y="517" width="0.1591%" height="15" fill="rgb(247,22,47)" fg:x="151" fg:w="2"/><text x="12.2627%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.0127%" y="501" width="0.1591%" height="15" fill="rgb(218,84,22)" fg:x="151" fg:w="2"/><text x="12.2627%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.0127%" y="485" width="0.1591%" height="15" fill="rgb(216,87,39)" fg:x="151" fg:w="2"/><text x="12.2627%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.0923%" y="469" width="0.0796%" height="15" fill="rgb(221,178,8)" fg:x="152" fg:w="1"/><text x="12.3423%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.1718%" y="469" width="0.0796%" height="15" fill="rgb(230,42,11)" fg:x="153" fg:w="1"/><text x="12.4218%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.1718%" y="453" width="0.0796%" height="15" fill="rgb(237,229,4)" fg:x="153" fg:w="1"/><text x="12.4218%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="12.1718%" y="437" width="0.0796%" height="15" fill="rgb(222,31,33)" fg:x="153" fg:w="1"/><text x="12.4218%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.1718%" y="421" width="0.0796%" height="15" fill="rgb(210,17,39)" fg:x="153" fg:w="1"/><text x="12.4218%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.1718%" y="405" width="0.0796%" height="15" fill="rgb(244,93,20)" fg:x="153" fg:w="1"/><text x="12.4218%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.1718%" y="389" width="0.0796%" height="15" fill="rgb(210,40,47)" fg:x="153" fg:w="1"/><text x="12.4218%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="12.1718%" y="373" width="0.0796%" height="15" fill="rgb(239,211,47)" fg:x="153" fg:w="1"/><text x="12.4218%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="12.1718%" y="357" width="0.0796%" height="15" fill="rgb(251,223,49)" fg:x="153" fg:w="1"/><text x="12.4218%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.32%)</title><rect x="12.0127%" y="565" width="0.3182%" height="15" fill="rgb(221,149,5)" fg:x="151" fg:w="4"/><text x="12.2627%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.1718%" y="549" width="0.1591%" height="15" fill="rgb(219,224,51)" fg:x="153" fg:w="2"/><text x="12.4218%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.1718%" y="533" width="0.1591%" height="15" fill="rgb(223,7,8)" fg:x="153" fg:w="2"/><text x="12.4218%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="12.1718%" y="517" width="0.1591%" height="15" fill="rgb(241,217,22)" fg:x="153" fg:w="2"/><text x="12.4218%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.1718%" y="501" width="0.1591%" height="15" fill="rgb(248,209,0)" fg:x="153" fg:w="2"/><text x="12.4218%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.1718%" y="485" width="0.1591%" height="15" fill="rgb(217,205,4)" fg:x="153" fg:w="2"/><text x="12.4218%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.2514%" y="469" width="0.0796%" height="15" fill="rgb(228,124,39)" fg:x="154" fg:w="1"/><text x="12.5014%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.2514%" y="453" width="0.0796%" height="15" fill="rgb(250,116,42)" fg:x="154" fg:w="1"/><text x="12.5014%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="12.2514%" y="437" width="0.0796%" height="15" fill="rgb(223,202,9)" fg:x="154" fg:w="1"/><text x="12.5014%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.2514%" y="421" width="0.0796%" height="15" fill="rgb(242,222,40)" fg:x="154" fg:w="1"/><text x="12.5014%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.2514%" y="405" width="0.0796%" height="15" fill="rgb(229,99,46)" fg:x="154" fg:w="1"/><text x="12.5014%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="12.2514%" y="389" width="0.0796%" height="15" fill="rgb(225,56,46)" fg:x="154" fg:w="1"/><text x="12.5014%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.2514%" y="373" width="0.0796%" height="15" fill="rgb(227,94,5)" fg:x="154" fg:w="1"/><text x="12.5014%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.2514%" y="357" width="0.0796%" height="15" fill="rgb(205,112,38)" fg:x="154" fg:w="1"/><text x="12.5014%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.64%)</title><rect x="11.7741%" y="613" width="0.6364%" height="15" fill="rgb(231,133,46)" fg:x="148" fg:w="8"/><text x="12.0241%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="11.9332%" y="597" width="0.4773%" height="15" fill="rgb(217,16,9)" fg:x="150" fg:w="6"/><text x="12.1832%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="11.9332%" y="581" width="0.4773%" height="15" fill="rgb(249,173,9)" fg:x="150" fg:w="6"/><text x="12.1832%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.3309%" y="565" width="0.0796%" height="15" fill="rgb(205,163,53)" fg:x="155" fg:w="1"/><text x="12.5809%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.3309%" y="549" width="0.0796%" height="15" fill="rgb(217,54,41)" fg:x="155" fg:w="1"/><text x="12.5809%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.3309%" y="533" width="0.0796%" height="15" fill="rgb(228,216,12)" fg:x="155" fg:w="1"/><text x="12.5809%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3309%" y="517" width="0.0796%" height="15" fill="rgb(244,228,15)" fg:x="155" fg:w="1"/><text x="12.5809%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3309%" y="501" width="0.0796%" height="15" fill="rgb(221,176,53)" fg:x="155" fg:w="1"/><text x="12.5809%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3309%" y="485" width="0.0796%" height="15" fill="rgb(205,94,34)" fg:x="155" fg:w="1"/><text x="12.5809%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3309%" y="469" width="0.0796%" height="15" fill="rgb(213,110,48)" fg:x="155" fg:w="1"/><text x="12.5809%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.3309%" y="453" width="0.0796%" height="15" fill="rgb(236,142,28)" fg:x="155" fg:w="1"/><text x="12.5809%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3309%" y="437" width="0.0796%" height="15" fill="rgb(225,135,29)" fg:x="155" fg:w="1"/><text x="12.5809%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3309%" y="421" width="0.0796%" height="15" fill="rgb(252,45,31)" fg:x="155" fg:w="1"/><text x="12.5809%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.3309%" y="405" width="0.0796%" height="15" fill="rgb(211,187,50)" fg:x="155" fg:w="1"/><text x="12.5809%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.3309%" y="389" width="0.0796%" height="15" fill="rgb(229,109,7)" fg:x="155" fg:w="1"/><text x="12.5809%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (11 samples, 0.88%)</title><rect x="11.6945%" y="677" width="0.8751%" height="15" fill="rgb(251,131,51)" fg:x="147" fg:w="11"/><text x="11.9445%" y="687.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (11 samples, 0.88%)</title><rect x="11.6945%" y="661" width="0.8751%" height="15" fill="rgb(251,180,35)" fg:x="147" fg:w="11"/><text x="11.9445%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (10 samples, 0.80%)</title><rect x="11.7741%" y="645" width="0.7955%" height="15" fill="rgb(211,46,32)" fg:x="148" fg:w="10"/><text x="12.0241%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.80%)</title><rect x="11.7741%" y="629" width="0.7955%" height="15" fill="rgb(248,123,17)" fg:x="148" fg:w="10"/><text x="12.0241%" y="639.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="12.4105%" y="613" width="0.1591%" height="15" fill="rgb(227,141,18)" fg:x="156" fg:w="2"/><text x="12.6605%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.4105%" y="597" width="0.1591%" height="15" fill="rgb(216,102,9)" fg:x="156" fg:w="2"/><text x="12.6605%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.4901%" y="581" width="0.0796%" height="15" fill="rgb(253,47,13)" fg:x="157" fg:w="1"/><text x="12.7401%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4901%" y="565" width="0.0796%" height="15" fill="rgb(226,93,23)" fg:x="157" fg:w="1"/><text x="12.7401%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.4901%" y="549" width="0.0796%" height="15" fill="rgb(247,104,17)" fg:x="157" fg:w="1"/><text x="12.7401%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.4901%" y="533" width="0.0796%" height="15" fill="rgb(233,203,26)" fg:x="157" fg:w="1"/><text x="12.7401%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.4901%" y="517" width="0.0796%" height="15" fill="rgb(244,98,49)" fg:x="157" fg:w="1"/><text x="12.7401%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.4901%" y="501" width="0.0796%" height="15" fill="rgb(235,134,22)" fg:x="157" fg:w="1"/><text x="12.7401%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4901%" y="485" width="0.0796%" height="15" fill="rgb(221,70,32)" fg:x="157" fg:w="1"/><text x="12.7401%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.4901%" y="469" width="0.0796%" height="15" fill="rgb(238,15,50)" fg:x="157" fg:w="1"/><text x="12.7401%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.4901%" y="453" width="0.0796%" height="15" fill="rgb(215,221,48)" fg:x="157" fg:w="1"/><text x="12.7401%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="12.6492%" y="501" width="0.0796%" height="15" fill="rgb(236,73,3)" fg:x="159" fg:w="1"/><text x="12.8992%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="12.6492%" y="485" width="0.0796%" height="15" fill="rgb(250,107,11)" fg:x="159" fg:w="1"/><text x="12.8992%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.6492%" y="469" width="0.0796%" height="15" fill="rgb(242,39,14)" fg:x="159" fg:w="1"/><text x="12.8992%" y="479.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="12.7287%" y="501" width="0.0796%" height="15" fill="rgb(248,164,37)" fg:x="160" fg:w="1"/><text x="12.9787%" y="511.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7287%" y="485" width="0.0796%" height="15" fill="rgb(217,60,12)" fg:x="160" fg:w="1"/><text x="12.9787%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7287%" y="469" width="0.0796%" height="15" fill="rgb(240,125,29)" fg:x="160" fg:w="1"/><text x="12.9787%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7287%" y="453" width="0.0796%" height="15" fill="rgb(208,207,28)" fg:x="160" fg:w="1"/><text x="12.9787%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.7287%" y="437" width="0.0796%" height="15" fill="rgb(209,159,27)" fg:x="160" fg:w="1"/><text x="12.9787%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.7287%" y="421" width="0.0796%" height="15" fill="rgb(251,176,53)" fg:x="160" fg:w="1"/><text x="12.9787%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.7287%" y="405" width="0.0796%" height="15" fill="rgb(211,85,7)" fg:x="160" fg:w="1"/><text x="12.9787%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7287%" y="389" width="0.0796%" height="15" fill="rgb(216,64,54)" fg:x="160" fg:w="1"/><text x="12.9787%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7287%" y="373" width="0.0796%" height="15" fill="rgb(217,54,24)" fg:x="160" fg:w="1"/><text x="12.9787%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.7287%" y="357" width="0.0796%" height="15" fill="rgb(208,206,53)" fg:x="160" fg:w="1"/><text x="12.9787%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.7287%" y="341" width="0.0796%" height="15" fill="rgb(251,74,39)" fg:x="160" fg:w="1"/><text x="12.9787%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.7287%" y="325" width="0.0796%" height="15" fill="rgb(226,47,5)" fg:x="160" fg:w="1"/><text x="12.9787%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.7287%" y="309" width="0.0796%" height="15" fill="rgb(234,111,33)" fg:x="160" fg:w="1"/><text x="12.9787%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7287%" y="293" width="0.0796%" height="15" fill="rgb(251,14,10)" fg:x="160" fg:w="1"/><text x="12.9787%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8878%" y="325" width="0.0796%" height="15" fill="rgb(232,43,0)" fg:x="162" fg:w="1"/><text x="13.1378%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8878%" y="309" width="0.0796%" height="15" fill="rgb(222,68,43)" fg:x="162" fg:w="1"/><text x="13.1378%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="12.8083%" y="469" width="0.2387%" height="15" fill="rgb(217,24,23)" fg:x="161" fg:w="3"/><text x="13.0583%" y="479.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="12.8083%" y="453" width="0.2387%" height="15" fill="rgb(229,209,14)" fg:x="161" fg:w="3"/><text x="13.0583%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="12.8083%" y="437" width="0.2387%" height="15" fill="rgb(250,149,48)" fg:x="161" fg:w="3"/><text x="13.0583%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.8878%" y="421" width="0.1591%" height="15" fill="rgb(210,120,37)" fg:x="162" fg:w="2"/><text x="13.1378%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.8878%" y="405" width="0.1591%" height="15" fill="rgb(210,21,8)" fg:x="162" fg:w="2"/><text x="13.1378%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="12.8878%" y="389" width="0.1591%" height="15" fill="rgb(243,145,7)" fg:x="162" fg:w="2"/><text x="13.1378%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.8878%" y="373" width="0.1591%" height="15" fill="rgb(238,178,32)" fg:x="162" fg:w="2"/><text x="13.1378%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="12.8878%" y="357" width="0.1591%" height="15" fill="rgb(222,4,10)" fg:x="162" fg:w="2"/><text x="13.1378%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="12.8878%" y="341" width="0.1591%" height="15" fill="rgb(239,7,37)" fg:x="162" fg:w="2"/><text x="13.1378%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9674%" y="325" width="0.0796%" height="15" fill="rgb(215,31,37)" fg:x="163" fg:w="1"/><text x="13.2174%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9674%" y="309" width="0.0796%" height="15" fill="rgb(224,83,33)" fg:x="163" fg:w="1"/><text x="13.2174%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1265%" y="389" width="0.0796%" height="15" fill="rgb(239,55,3)" fg:x="165" fg:w="1"/><text x="13.3765%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1265%" y="373" width="0.0796%" height="15" fill="rgb(247,92,11)" fg:x="165" fg:w="1"/><text x="13.3765%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1265%" y="357" width="0.0796%" height="15" fill="rgb(239,200,7)" fg:x="165" fg:w="1"/><text x="13.3765%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1265%" y="341" width="0.0796%" height="15" fill="rgb(227,115,8)" fg:x="165" fg:w="1"/><text x="13.3765%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="13.0469%" y="421" width="0.2387%" height="15" fill="rgb(215,189,27)" fg:x="164" fg:w="3"/><text x="13.2969%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.1265%" y="405" width="0.1591%" height="15" fill="rgb(251,216,39)" fg:x="165" fg:w="2"/><text x="13.3765%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2060%" y="389" width="0.0796%" height="15" fill="rgb(207,29,47)" fg:x="166" fg:w="1"/><text x="13.4560%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.2856%" y="421" width="0.0796%" height="15" fill="rgb(210,71,34)" fg:x="167" fg:w="1"/><text x="13.5356%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="13.2856%" y="405" width="0.0796%" height="15" fill="rgb(253,217,51)" fg:x="167" fg:w="1"/><text x="13.5356%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.2856%" y="389" width="0.0796%" height="15" fill="rgb(222,117,46)" fg:x="167" fg:w="1"/><text x="13.5356%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.2856%" y="373" width="0.0796%" height="15" fill="rgb(226,132,6)" fg:x="167" fg:w="1"/><text x="13.5356%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.2856%" y="357" width="0.0796%" height="15" fill="rgb(254,145,51)" fg:x="167" fg:w="1"/><text x="13.5356%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.2856%" y="341" width="0.0796%" height="15" fill="rgb(231,199,27)" fg:x="167" fg:w="1"/><text x="13.5356%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.2856%" y="325" width="0.0796%" height="15" fill="rgb(245,158,14)" fg:x="167" fg:w="1"/><text x="13.5356%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.2856%" y="309" width="0.0796%" height="15" fill="rgb(240,113,14)" fg:x="167" fg:w="1"/><text x="13.5356%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="13.0469%" y="469" width="0.5569%" height="15" fill="rgb(210,20,13)" fg:x="164" fg:w="7"/><text x="13.2969%" y="479.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.56%)</title><rect x="13.0469%" y="453" width="0.5569%" height="15" fill="rgb(241,144,13)" fg:x="164" fg:w="7"/><text x="13.2969%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="13.0469%" y="437" width="0.5569%" height="15" fill="rgb(235,43,34)" fg:x="164" fg:w="7"/><text x="13.2969%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.3652%" y="421" width="0.2387%" height="15" fill="rgb(208,36,20)" fg:x="168" fg:w="3"/><text x="13.6152%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.3652%" y="405" width="0.2387%" height="15" fill="rgb(239,204,10)" fg:x="168" fg:w="3"/><text x="13.6152%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="13.3652%" y="389" width="0.2387%" height="15" fill="rgb(217,84,43)" fg:x="168" fg:w="3"/><text x="13.6152%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.3652%" y="373" width="0.2387%" height="15" fill="rgb(241,170,50)" fg:x="168" fg:w="3"/><text x="13.6152%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="13.3652%" y="357" width="0.2387%" height="15" fill="rgb(226,205,29)" fg:x="168" fg:w="3"/><text x="13.6152%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="13.3652%" y="341" width="0.2387%" height="15" fill="rgb(233,113,1)" fg:x="168" fg:w="3"/><text x="13.6152%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.5243%" y="325" width="0.0796%" height="15" fill="rgb(253,98,13)" fg:x="170" fg:w="1"/><text x="13.7743%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.5243%" y="309" width="0.0796%" height="15" fill="rgb(211,115,12)" fg:x="170" fg:w="1"/><text x="13.7743%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="13.6038%" y="421" width="0.1591%" height="15" fill="rgb(208,12,16)" fg:x="171" fg:w="2"/><text x="13.8538%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="13.6038%" y="405" width="0.1591%" height="15" fill="rgb(237,193,54)" fg:x="171" fg:w="2"/><text x="13.8538%" y="415.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="13.6038%" y="389" width="0.1591%" height="15" fill="rgb(243,22,42)" fg:x="171" fg:w="2"/><text x="13.8538%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="13.6038%" y="373" width="0.1591%" height="15" fill="rgb(233,151,36)" fg:x="171" fg:w="2"/><text x="13.8538%" y="383.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="13.6834%" y="357" width="0.0796%" height="15" fill="rgb(237,57,45)" fg:x="172" fg:w="1"/><text x="13.9334%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.2403%" y="293" width="0.0796%" height="15" fill="rgb(221,88,17)" fg:x="179" fg:w="1"/><text x="14.4903%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.32%)</title><rect x="14.1607%" y="309" width="0.3182%" height="15" fill="rgb(230,79,15)" fg:x="178" fg:w="4"/><text x="14.4107%" y="319.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="14.3198%" y="293" width="0.1591%" height="15" fill="rgb(213,57,13)" fg:x="180" fg:w="2"/><text x="14.5698%" y="303.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="14.3994%" y="277" width="0.0796%" height="15" fill="rgb(222,116,39)" fg:x="181" fg:w="1"/><text x="14.6494%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (8 samples, 0.64%)</title><rect x="13.9220%" y="325" width="0.6364%" height="15" fill="rgb(245,107,2)" fg:x="175" fg:w="8"/><text x="14.1720%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="14.4789%" y="309" width="0.0796%" height="15" fill="rgb(238,1,10)" fg:x="182" fg:w="1"/><text x="14.7289%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="14.4789%" y="293" width="0.0796%" height="15" fill="rgb(249,4,48)" fg:x="182" fg:w="1"/><text x="14.7289%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="13.9220%" y="389" width="0.7160%" height="15" fill="rgb(223,151,18)" fg:x="175" fg:w="9"/><text x="14.1720%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="13.9220%" y="373" width="0.7160%" height="15" fill="rgb(227,65,43)" fg:x="175" fg:w="9"/><text x="14.1720%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (9 samples, 0.72%)</title><rect x="13.9220%" y="357" width="0.7160%" height="15" fill="rgb(218,40,45)" fg:x="175" fg:w="9"/><text x="14.1720%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (9 samples, 0.72%)</title><rect x="13.9220%" y="341" width="0.7160%" height="15" fill="rgb(252,121,31)" fg:x="175" fg:w="9"/><text x="14.1720%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="14.5585%" y="325" width="0.0796%" height="15" fill="rgb(219,158,43)" fg:x="183" fg:w="1"/><text x="14.8085%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="14.5585%" y="309" width="0.0796%" height="15" fill="rgb(231,162,42)" fg:x="183" fg:w="1"/><text x="14.8085%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.5585%" y="293" width="0.0796%" height="15" fill="rgb(217,179,25)" fg:x="183" fg:w="1"/><text x="14.8085%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.6380%" y="373" width="0.0796%" height="15" fill="rgb(206,212,31)" fg:x="184" fg:w="1"/><text x="14.8880%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.6380%" y="357" width="0.0796%" height="15" fill="rgb(235,144,12)" fg:x="184" fg:w="1"/><text x="14.8880%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.6380%" y="341" width="0.0796%" height="15" fill="rgb(213,51,10)" fg:x="184" fg:w="1"/><text x="14.8880%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6380%" y="325" width="0.0796%" height="15" fill="rgb(231,145,14)" fg:x="184" fg:w="1"/><text x="14.8880%" y="335.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="14.7176%" y="373" width="0.0796%" height="15" fill="rgb(235,15,28)" fg:x="185" fg:w="1"/><text x="14.9676%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.7971%" y="341" width="0.0796%" height="15" fill="rgb(237,206,10)" fg:x="186" fg:w="1"/><text x="15.0471%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="14.8767%" y="341" width="0.2387%" height="15" fill="rgb(236,227,27)" fg:x="187" fg:w="3"/><text x="15.1267%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="14.8767%" y="325" width="0.2387%" height="15" fill="rgb(246,83,35)" fg:x="187" fg:w="3"/><text x="15.1267%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.24%)</title><rect x="14.8767%" y="309" width="0.2387%" height="15" fill="rgb(220,136,24)" fg:x="187" fg:w="3"/><text x="15.1267%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="14.9562%" y="293" width="0.1591%" height="15" fill="rgb(217,3,25)" fg:x="188" fg:w="2"/><text x="15.2062%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.9562%" y="277" width="0.1591%" height="15" fill="rgb(239,24,14)" fg:x="188" fg:w="2"/><text x="15.2062%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="14.9562%" y="261" width="0.1591%" height="15" fill="rgb(244,16,53)" fg:x="188" fg:w="2"/><text x="15.2062%" y="271.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="15.2745%" y="325" width="0.3182%" height="15" fill="rgb(208,175,44)" fg:x="192" fg:w="4"/><text x="15.5245%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6722%" y="309" width="0.0796%" height="15" fill="rgb(252,18,48)" fg:x="197" fg:w="1"/><text x="15.9222%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.35%)</title><rect x="15.5927%" y="325" width="1.3524%" height="15" fill="rgb(234,199,32)" fg:x="196" fg:w="17"/><text x="15.8427%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.19%)</title><rect x="15.7518%" y="309" width="1.1933%" height="15" fill="rgb(225,77,54)" fg:x="198" fg:w="15"/><text x="16.0018%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.8656%" y="293" width="0.0796%" height="15" fill="rgb(225,42,25)" fg:x="212" fg:w="1"/><text x="17.1156%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="17.0247%" y="309" width="0.0796%" height="15" fill="rgb(242,227,46)" fg:x="214" fg:w="1"/><text x="17.2747%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="17.0247%" y="293" width="0.0796%" height="15" fill="rgb(246,197,35)" fg:x="214" fg:w="1"/><text x="17.2747%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (14 samples, 1.11%)</title><rect x="16.9451%" y="325" width="1.1138%" height="15" fill="rgb(215,159,26)" fg:x="213" fg:w="14"/><text x="17.1951%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (12 samples, 0.95%)</title><rect x="17.1042%" y="309" width="0.9547%" height="15" fill="rgb(212,194,50)" fg:x="215" fg:w="12"/><text x="17.3542%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="18.2975%" y="261" width="0.1591%" height="15" fill="rgb(246,132,1)" fg:x="230" fg:w="2"/><text x="18.5475%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.3771%" y="245" width="0.0796%" height="15" fill="rgb(217,71,7)" fg:x="231" fg:w="1"/><text x="18.6271%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.3771%" y="229" width="0.0796%" height="15" fill="rgb(252,59,32)" fg:x="231" fg:w="1"/><text x="18.6271%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.3771%" y="213" width="0.0796%" height="15" fill="rgb(253,204,25)" fg:x="231" fg:w="1"/><text x="18.6271%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="18.4566%" y="261" width="0.0796%" height="15" fill="rgb(232,21,16)" fg:x="232" fg:w="1"/><text x="18.7066%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.4566%" y="245" width="0.0796%" height="15" fill="rgb(248,90,29)" fg:x="232" fg:w="1"/><text x="18.7066%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="18.5362%" y="261" width="0.1591%" height="15" fill="rgb(249,223,7)" fg:x="233" fg:w="2"/><text x="18.7862%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="18.5362%" y="245" width="0.1591%" height="15" fill="rgb(231,119,42)" fg:x="233" fg:w="2"/><text x="18.7862%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="18.5362%" y="229" width="0.1591%" height="15" fill="rgb(215,41,35)" fg:x="233" fg:w="2"/><text x="18.7862%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.6158%" y="213" width="0.0796%" height="15" fill="rgb(220,44,45)" fg:x="234" fg:w="1"/><text x="18.8658%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.6158%" y="197" width="0.0796%" height="15" fill="rgb(253,197,36)" fg:x="234" fg:w="1"/><text x="18.8658%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="18.6953%" y="245" width="0.0796%" height="15" fill="rgb(245,225,54)" fg:x="235" fg:w="1"/><text x="18.9453%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="18.6953%" y="261" width="0.1591%" height="15" fill="rgb(239,94,37)" fg:x="235" fg:w="2"/><text x="18.9453%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="18.7749%" y="245" width="0.0796%" height="15" fill="rgb(242,217,10)" fg:x="236" fg:w="1"/><text x="19.0249%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="18.7749%" y="229" width="0.0796%" height="15" fill="rgb(250,193,7)" fg:x="236" fg:w="1"/><text x="19.0249%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (61 samples, 4.85%)</title><rect x="18.8544%" y="261" width="4.8528%" height="15" fill="rgb(230,104,19)" fg:x="237" fg:w="61"/><text x="19.1044%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (61 samples, 4.85%)</title><rect x="18.8544%" y="245" width="4.8528%" height="15" fill="rgb(230,181,4)" fg:x="237" fg:w="61"/><text x="19.1044%" y="255.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (61 samples, 4.85%)</title><rect x="18.8544%" y="229" width="4.8528%" height="15" fill="rgb(216,219,49)" fg:x="237" fg:w="61"/><text x="19.1044%" y="239.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="23.7072%" y="261" width="0.3978%" height="15" fill="rgb(254,144,0)" fg:x="298" fg:w="5"/><text x="23.9572%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.0255%" y="245" width="0.0796%" height="15" fill="rgb(205,209,38)" fg:x="302" fg:w="1"/><text x="24.2755%" y="255.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="24.1050%" y="261" width="0.0796%" height="15" fill="rgb(240,21,42)" fg:x="303" fg:w="1"/><text x="24.3550%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 6.60%)</title><rect x="18.0589%" y="309" width="6.6030%" height="15" fill="rgb(241,132,3)" fg:x="227" fg:w="83"/><text x="18.3089%" y="319.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (82 samples, 6.52%)</title><rect x="18.1384%" y="293" width="6.5235%" height="15" fill="rgb(225,14,2)" fg:x="228" fg:w="82"/><text x="18.3884%" y="303.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (82 samples, 6.52%)</title><rect x="18.1384%" y="277" width="6.5235%" height="15" fill="rgb(210,141,35)" fg:x="228" fg:w="82"/><text x="18.3884%" y="287.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="24.1846%" y="261" width="0.4773%" height="15" fill="rgb(251,14,44)" fg:x="304" fg:w="6"/><text x="24.4346%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="24.3437%" y="245" width="0.3182%" height="15" fill="rgb(247,48,18)" fg:x="306" fg:w="4"/><text x="24.5937%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="24.3437%" y="229" width="0.3182%" height="15" fill="rgb(225,0,40)" fg:x="306" fg:w="4"/><text x="24.5937%" y="239.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="24.3437%" y="213" width="0.3182%" height="15" fill="rgb(221,31,33)" fg:x="306" fg:w="4"/><text x="24.5937%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.7414%" y="293" width="0.0796%" height="15" fill="rgb(237,42,40)" fg:x="311" fg:w="1"/><text x="24.9914%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.8210%" y="293" width="0.0796%" height="15" fill="rgb(233,51,29)" fg:x="312" fg:w="1"/><text x="25.0710%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (9 samples, 0.72%)</title><rect x="24.9006%" y="293" width="0.7160%" height="15" fill="rgb(226,58,20)" fg:x="313" fg:w="9"/><text x="25.1506%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="25.1392%" y="277" width="0.4773%" height="15" fill="rgb(208,98,7)" fg:x="316" fg:w="6"/><text x="25.3892%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="25.2188%" y="261" width="0.3978%" height="15" fill="rgb(228,143,44)" fg:x="317" fg:w="5"/><text x="25.4688%" y="271.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="25.2983%" y="245" width="0.3182%" height="15" fill="rgb(246,55,38)" fg:x="318" fg:w="4"/><text x="25.5483%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.0143%" y="277" width="0.0796%" height="15" fill="rgb(247,87,16)" fg:x="327" fg:w="1"/><text x="26.2643%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="25.6165%" y="293" width="0.5569%" height="15" fill="rgb(234,129,42)" fg:x="322" fg:w="7"/><text x="25.8665%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.0939%" y="277" width="0.0796%" height="15" fill="rgb(220,82,16)" fg:x="328" fg:w="1"/><text x="26.3439%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.0939%" y="261" width="0.0796%" height="15" fill="rgb(211,88,4)" fg:x="328" fg:w="1"/><text x="26.3439%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.0939%" y="245" width="0.0796%" height="15" fill="rgb(248,151,21)" fg:x="328" fg:w="1"/><text x="26.3439%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (4 samples, 0.32%)</title><rect x="26.1734%" y="293" width="0.3182%" height="15" fill="rgb(238,163,6)" fg:x="329" fg:w="4"/><text x="26.4234%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.91%)</title><rect x="24.6619%" y="309" width="1.9093%" height="15" fill="rgb(209,183,11)" fg:x="310" fg:w="24"/><text x="24.9119%" y="319.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="26.4916%" y="293" width="0.0796%" height="15" fill="rgb(219,37,20)" fg:x="333" fg:w="1"/><text x="26.7416%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (145 samples, 11.54%)</title><rect x="15.1154%" y="341" width="11.5354%" height="15" fill="rgb(210,158,4)" fg:x="190" fg:w="145"/><text x="15.3654%" y="351.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (108 samples, 8.59%)</title><rect x="18.0589%" y="325" width="8.5919%" height="15" fill="rgb(221,167,53)" fg:x="227" fg:w="108"/><text x="18.3089%" y="335.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="26.5712%" y="309" width="0.0796%" height="15" fill="rgb(237,151,45)" fg:x="334" fg:w="1"/><text x="26.8212%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="26.5712%" y="293" width="0.0796%" height="15" fill="rgb(231,39,3)" fg:x="334" fg:w="1"/><text x="26.8212%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.7303%" y="309" width="0.0796%" height="15" fill="rgb(212,167,28)" fg:x="336" fg:w="1"/><text x="26.9803%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.7303%" y="293" width="0.0796%" height="15" fill="rgb(232,178,8)" fg:x="336" fg:w="1"/><text x="26.9803%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7303%" y="277" width="0.0796%" height="15" fill="rgb(225,151,20)" fg:x="336" fg:w="1"/><text x="26.9803%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="26.8099%" y="293" width="0.0796%" height="15" fill="rgb(238,3,37)" fg:x="337" fg:w="1"/><text x="27.0599%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="26.8099%" y="277" width="0.0796%" height="15" fill="rgb(251,147,42)" fg:x="337" fg:w="1"/><text x="27.0599%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="26.8099%" y="261" width="0.0796%" height="15" fill="rgb(208,173,10)" fg:x="337" fg:w="1"/><text x="27.0599%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="26.6508%" y="341" width="0.4773%" height="15" fill="rgb(246,225,4)" fg:x="335" fg:w="6"/><text x="26.9008%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="26.6508%" y="325" width="0.4773%" height="15" fill="rgb(248,102,6)" fg:x="335" fg:w="6"/><text x="26.9008%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="26.8099%" y="309" width="0.3182%" height="15" fill="rgb(232,6,21)" fg:x="337" fg:w="4"/><text x="27.0599%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="26.8894%" y="293" width="0.2387%" height="15" fill="rgb(221,179,22)" fg:x="338" fg:w="3"/><text x="27.1394%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="26.8894%" y="277" width="0.2387%" height="15" fill="rgb(252,50,20)" fg:x="338" fg:w="3"/><text x="27.1394%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="26.8894%" y="261" width="0.2387%" height="15" fill="rgb(222,56,38)" fg:x="338" fg:w="3"/><text x="27.1394%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="26.8894%" y="245" width="0.2387%" height="15" fill="rgb(206,193,29)" fg:x="338" fg:w="3"/><text x="27.1394%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.1281%" y="293" width="0.0796%" height="15" fill="rgb(239,192,45)" fg:x="341" fg:w="1"/><text x="27.3781%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.1281%" y="277" width="0.0796%" height="15" fill="rgb(254,18,36)" fg:x="341" fg:w="1"/><text x="27.3781%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="27.2076%" y="293" width="0.1591%" height="15" fill="rgb(221,127,11)" fg:x="342" fg:w="2"/><text x="27.4576%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="27.2076%" y="277" width="0.1591%" height="15" fill="rgb(234,146,35)" fg:x="342" fg:w="2"/><text x="27.4576%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="27.2076%" y="261" width="0.1591%" height="15" fill="rgb(254,201,37)" fg:x="342" fg:w="2"/><text x="27.4576%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="27.2076%" y="245" width="0.1591%" height="15" fill="rgb(211,202,23)" fg:x="342" fg:w="2"/><text x="27.4576%" y="255.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="27.3667%" y="293" width="0.0796%" height="15" fill="rgb(237,91,2)" fg:x="344" fg:w="1"/><text x="27.6167%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="27.1281%" y="309" width="0.3978%" height="15" fill="rgb(226,228,36)" fg:x="341" fg:w="5"/><text x="27.3781%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_unicode_class (1 samples, 0.08%)</title><rect x="27.4463%" y="293" width="0.0796%" height="15" fill="rgb(213,63,50)" fg:x="345" fg:w="1"/><text x="27.6963%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (163 samples, 12.97%)</title><rect x="14.6380%" y="389" width="12.9674%" height="15" fill="rgb(235,194,19)" fg:x="184" fg:w="163"/><text x="14.8880%" y="399.50">&lt;regex::regex::stri..</text></g><g><title>regex::builders::Builder::build_one_string (161 samples, 12.81%)</title><rect x="14.7971%" y="373" width="12.8083%" height="15" fill="rgb(207,204,18)" fg:x="186" fg:w="161"/><text x="15.0471%" y="383.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (161 samples, 12.81%)</title><rect x="14.7971%" y="357" width="12.8083%" height="15" fill="rgb(248,8,7)" fg:x="186" fg:w="161"/><text x="15.0471%" y="367.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="27.1281%" y="341" width="0.4773%" height="15" fill="rgb(223,145,47)" fg:x="341" fg:w="6"/><text x="27.3781%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="27.1281%" y="325" width="0.4773%" height="15" fill="rgb(228,84,11)" fg:x="341" fg:w="6"/><text x="27.3781%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="27.5259%" y="309" width="0.0796%" height="15" fill="rgb(218,76,45)" fg:x="346" fg:w="1"/><text x="27.7759%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.6054%" y="357" width="0.0796%" height="15" fill="rgb(223,80,15)" fg:x="347" fg:w="1"/><text x="27.8554%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.6850%" y="357" width="0.0796%" height="15" fill="rgb(219,218,33)" fg:x="348" fg:w="1"/><text x="27.9350%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="27.6850%" y="341" width="0.0796%" height="15" fill="rgb(208,51,11)" fg:x="348" fg:w="1"/><text x="27.9350%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.6850%" y="325" width="0.0796%" height="15" fill="rgb(229,165,39)" fg:x="348" fg:w="1"/><text x="27.9350%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.6850%" y="309" width="0.0796%" height="15" fill="rgb(241,100,24)" fg:x="348" fg:w="1"/><text x="27.9350%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="27.6054%" y="389" width="0.3182%" height="15" fill="rgb(228,14,23)" fg:x="347" fg:w="4"/><text x="27.8554%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="27.6054%" y="373" width="0.3182%" height="15" fill="rgb(247,116,52)" fg:x="347" fg:w="4"/><text x="27.8554%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="27.7645%" y="357" width="0.1591%" height="15" fill="rgb(216,149,33)" fg:x="349" fg:w="2"/><text x="28.0145%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="27.7645%" y="341" width="0.1591%" height="15" fill="rgb(238,142,29)" fg:x="349" fg:w="2"/><text x="28.0145%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.8441%" y="325" width="0.0796%" height="15" fill="rgb(224,83,40)" fg:x="350" fg:w="1"/><text x="28.0941%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.0032%" y="325" width="0.0796%" height="15" fill="rgb(234,165,11)" fg:x="352" fg:w="1"/><text x="28.2532%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="28.4010%" y="309" width="0.1591%" height="15" fill="rgb(215,96,23)" fg:x="357" fg:w="2"/><text x="28.6510%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.4010%" y="293" width="0.1591%" height="15" fill="rgb(233,179,26)" fg:x="357" fg:w="2"/><text x="28.6510%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="28.4010%" y="277" width="0.1591%" height="15" fill="rgb(225,129,33)" fg:x="357" fg:w="2"/><text x="28.6510%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="28.0827%" y="325" width="0.5569%" height="15" fill="rgb(237,49,13)" fg:x="353" fg:w="7"/><text x="28.3327%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="28.5601%" y="309" width="0.0796%" height="15" fill="rgb(211,3,31)" fg:x="359" fg:w="1"/><text x="28.8101%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="28.0032%" y="341" width="0.7160%" height="15" fill="rgb(216,152,19)" fg:x="352" fg:w="9"/><text x="28.2532%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="28.6396%" y="325" width="0.0796%" height="15" fill="rgb(251,121,35)" fg:x="360" fg:w="1"/><text x="28.8896%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.6396%" y="309" width="0.0796%" height="15" fill="rgb(210,217,47)" fg:x="360" fg:w="1"/><text x="28.8896%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.6396%" y="293" width="0.0796%" height="15" fill="rgb(244,116,22)" fg:x="360" fg:w="1"/><text x="28.8896%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.6396%" y="277" width="0.0796%" height="15" fill="rgb(228,17,21)" fg:x="360" fg:w="1"/><text x="28.8896%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (189 samples, 15.04%)</title><rect x="13.7629%" y="405" width="15.0358%" height="15" fill="rgb(240,149,34)" fg:x="173" fg:w="189"/><text x="14.0129%" y="415.50">indefinite::helper::Hel..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="27.9236%" y="389" width="0.8751%" height="15" fill="rgb(208,125,47)" fg:x="351" fg:w="11"/><text x="28.1736%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.80%)</title><rect x="28.0032%" y="373" width="0.7955%" height="15" fill="rgb(249,186,39)" fg:x="352" fg:w="10"/><text x="28.2532%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.80%)</title><rect x="28.0032%" y="357" width="0.7955%" height="15" fill="rgb(240,220,33)" fg:x="352" fg:w="10"/><text x="28.2532%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="28.7192%" y="341" width="0.0796%" height="15" fill="rgb(243,110,23)" fg:x="361" fg:w="1"/><text x="28.9692%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="28.7192%" y="325" width="0.0796%" height="15" fill="rgb(219,163,46)" fg:x="361" fg:w="1"/><text x="28.9692%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.7192%" y="309" width="0.0796%" height="15" fill="rgb(216,126,30)" fg:x="361" fg:w="1"/><text x="28.9692%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.7192%" y="293" width="0.0796%" height="15" fill="rgb(208,139,11)" fg:x="361" fg:w="1"/><text x="28.9692%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7192%" y="277" width="0.0796%" height="15" fill="rgb(213,118,36)" fg:x="361" fg:w="1"/><text x="28.9692%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.0374%" y="309" width="0.0796%" height="15" fill="rgb(226,43,17)" fg:x="365" fg:w="1"/><text x="29.2874%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.0374%" y="293" width="0.0796%" height="15" fill="rgb(254,217,4)" fg:x="365" fg:w="1"/><text x="29.2874%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.0374%" y="277" width="0.0796%" height="15" fill="rgb(210,134,47)" fg:x="365" fg:w="1"/><text x="29.2874%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.0374%" y="261" width="0.0796%" height="15" fill="rgb(237,24,49)" fg:x="365" fg:w="1"/><text x="29.2874%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.1169%" y="309" width="0.0796%" height="15" fill="rgb(251,39,46)" fg:x="366" fg:w="1"/><text x="29.3669%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="28.8783%" y="341" width="0.3978%" height="15" fill="rgb(251,220,3)" fg:x="363" fg:w="5"/><text x="29.1283%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="28.8783%" y="325" width="0.3978%" height="15" fill="rgb(228,105,12)" fg:x="363" fg:w="5"/><text x="29.1283%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.1965%" y="309" width="0.0796%" height="15" fill="rgb(215,196,1)" fg:x="367" fg:w="1"/><text x="29.4465%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2761%" y="341" width="0.0796%" height="15" fill="rgb(214,33,39)" fg:x="368" fg:w="1"/><text x="29.5261%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="29.3556%" y="309" width="0.1591%" height="15" fill="rgb(220,19,52)" fg:x="369" fg:w="2"/><text x="29.6056%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="29.3556%" y="293" width="0.1591%" height="15" fill="rgb(221,78,38)" fg:x="369" fg:w="2"/><text x="29.6056%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.3556%" y="277" width="0.1591%" height="15" fill="rgb(253,30,16)" fg:x="369" fg:w="2"/><text x="29.6056%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="29.3556%" y="261" width="0.1591%" height="15" fill="rgb(242,65,0)" fg:x="369" fg:w="2"/><text x="29.6056%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="29.5147%" y="309" width="0.0796%" height="15" fill="rgb(235,201,12)" fg:x="371" fg:w="1"/><text x="29.7647%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.5147%" y="293" width="0.0796%" height="15" fill="rgb(233,161,9)" fg:x="371" fg:w="1"/><text x="29.7647%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="29.3556%" y="341" width="0.3182%" height="15" fill="rgb(241,207,41)" fg:x="369" fg:w="4"/><text x="29.6056%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="29.3556%" y="325" width="0.3182%" height="15" fill="rgb(212,69,46)" fg:x="369" fg:w="4"/><text x="29.6056%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="29.5943%" y="309" width="0.0796%" height="15" fill="rgb(239,69,45)" fg:x="372" fg:w="1"/><text x="29.8443%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.5943%" y="293" width="0.0796%" height="15" fill="rgb(242,117,48)" fg:x="372" fg:w="1"/><text x="29.8443%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.11%)</title><rect x="29.8329%" y="325" width="1.1138%" height="15" fill="rgb(228,41,36)" fg:x="375" fg:w="14"/><text x="30.0829%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.95%)</title><rect x="29.9920%" y="309" width="0.9547%" height="15" fill="rgb(212,3,32)" fg:x="377" fg:w="12"/><text x="30.2420%" y="319.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="30.7080%" y="293" width="0.2387%" height="15" fill="rgb(233,41,49)" fg:x="386" fg:w="3"/><text x="30.9580%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="30.9467%" y="325" width="0.4773%" height="15" fill="rgb(252,170,49)" fg:x="389" fg:w="6"/><text x="31.1967%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="31.0263%" y="309" width="0.3978%" height="15" fill="rgb(229,53,26)" fg:x="390" fg:w="5"/><text x="31.2763%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="31.9014%" y="293" width="0.1591%" height="15" fill="rgb(217,157,12)" fg:x="401" fg:w="2"/><text x="32.1514%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.9014%" y="277" width="0.1591%" height="15" fill="rgb(227,17,9)" fg:x="401" fg:w="2"/><text x="32.1514%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.9014%" y="261" width="0.1591%" height="15" fill="rgb(218,84,12)" fg:x="401" fg:w="2"/><text x="32.1514%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="32.0605%" y="293" width="0.1591%" height="15" fill="rgb(212,79,24)" fg:x="403" fg:w="2"/><text x="32.3105%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.0605%" y="277" width="0.1591%" height="15" fill="rgb(217,222,37)" fg:x="403" fg:w="2"/><text x="32.3105%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.0605%" y="261" width="0.1591%" height="15" fill="rgb(246,208,8)" fg:x="403" fg:w="2"/><text x="32.3105%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.0605%" y="245" width="0.1591%" height="15" fill="rgb(244,133,10)" fg:x="403" fg:w="2"/><text x="32.3105%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.80%)</title><rect x="32.2196%" y="293" width="0.7955%" height="15" fill="rgb(209,219,41)" fg:x="405" fg:w="10"/><text x="32.4696%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.56%)</title><rect x="32.4582%" y="277" width="0.5569%" height="15" fill="rgb(253,175,45)" fg:x="408" fg:w="7"/><text x="32.7082%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="32.6173%" y="261" width="0.3978%" height="15" fill="rgb(235,100,37)" fg:x="410" fg:w="5"/><text x="32.8673%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="32.6173%" y="245" width="0.3978%" height="15" fill="rgb(225,87,19)" fg:x="410" fg:w="5"/><text x="32.8673%" y="255.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="32.6173%" y="229" width="0.3978%" height="15" fill="rgb(217,152,17)" fg:x="410" fg:w="5"/><text x="32.8673%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (12 samples, 0.95%)</title><rect x="33.0151%" y="293" width="0.9547%" height="15" fill="rgb(235,72,13)" fg:x="415" fg:w="12"/><text x="33.2651%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (12 samples, 0.95%)</title><rect x="33.0151%" y="277" width="0.9547%" height="15" fill="rgb(233,140,18)" fg:x="415" fg:w="12"/><text x="33.2651%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (12 samples, 0.95%)</title><rect x="33.0151%" y="261" width="0.9547%" height="15" fill="rgb(207,212,28)" fg:x="415" fg:w="12"/><text x="33.2651%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (33 samples, 2.63%)</title><rect x="31.4240%" y="325" width="2.6253%" height="15" fill="rgb(220,130,25)" fg:x="395" fg:w="33"/><text x="31.6740%" y="335.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (33 samples, 2.63%)</title><rect x="31.4240%" y="309" width="2.6253%" height="15" fill="rgb(205,55,34)" fg:x="395" fg:w="33"/><text x="31.6740%" y="319.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="33.9698%" y="293" width="0.0796%" height="15" fill="rgb(237,54,35)" fg:x="427" fg:w="1"/><text x="34.2198%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="34.0493%" y="325" width="0.1591%" height="15" fill="rgb(208,67,23)" fg:x="428" fg:w="2"/><text x="34.2993%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="34.1289%" y="309" width="0.0796%" height="15" fill="rgb(206,207,50)" fg:x="429" fg:w="1"/><text x="34.3789%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="34.1289%" y="293" width="0.0796%" height="15" fill="rgb(213,211,42)" fg:x="429" fg:w="1"/><text x="34.3789%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="34.2880%" y="229" width="0.0796%" height="15" fill="rgb(252,197,50)" fg:x="431" fg:w="1"/><text x="34.5380%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="35.0835%" y="213" width="0.0796%" height="15" fill="rgb(251,211,41)" fg:x="441" fg:w="1"/><text x="35.3335%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="35.1631%" y="213" width="0.3182%" height="15" fill="rgb(229,211,5)" fg:x="442" fg:w="4"/><text x="35.4131%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="35.4813%" y="213" width="0.2387%" height="15" fill="rgb(239,36,31)" fg:x="446" fg:w="3"/><text x="35.7313%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (4 samples, 0.32%)</title><rect x="35.7200%" y="213" width="0.3182%" height="15" fill="rgb(248,67,31)" fg:x="449" fg:w="4"/><text x="35.9700%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.9586%" y="197" width="0.0796%" height="15" fill="rgb(249,55,44)" fg:x="452" fg:w="1"/><text x="36.2086%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.9586%" y="181" width="0.0796%" height="15" fill="rgb(216,82,12)" fg:x="452" fg:w="1"/><text x="36.2086%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.9586%" y="165" width="0.0796%" height="15" fill="rgb(242,174,1)" fg:x="452" fg:w="1"/><text x="36.2086%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="36.0382%" y="213" width="0.1591%" height="15" fill="rgb(208,120,29)" fg:x="453" fg:w="2"/><text x="36.2882%" y="223.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="36.5951%" y="181" width="0.2387%" height="15" fill="rgb(221,105,43)" fg:x="460" fg:w="3"/><text x="36.8451%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8337%" y="149" width="0.0796%" height="15" fill="rgb(234,124,22)" fg:x="463" fg:w="1"/><text x="37.0837%" y="159.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="36.9133%" y="149" width="0.0796%" height="15" fill="rgb(212,23,30)" fg:x="464" fg:w="1"/><text x="37.1633%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="36.9133%" y="133" width="0.0796%" height="15" fill="rgb(219,122,53)" fg:x="464" fg:w="1"/><text x="37.1633%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="36.8337%" y="181" width="0.3978%" height="15" fill="rgb(248,84,24)" fg:x="463" fg:w="5"/><text x="37.0837%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="36.8337%" y="165" width="0.3978%" height="15" fill="rgb(245,115,18)" fg:x="463" fg:w="5"/><text x="37.0837%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="36.9928%" y="149" width="0.2387%" height="15" fill="rgb(227,176,51)" fg:x="465" fg:w="3"/><text x="37.2428%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.4702%" y="165" width="0.0796%" height="15" fill="rgb(229,63,42)" fg:x="471" fg:w="1"/><text x="37.7202%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (20 samples, 1.59%)</title><rect x="36.1973%" y="213" width="1.5911%" height="15" fill="rgb(247,202,24)" fg:x="455" fg:w="20"/><text x="36.4473%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (18 samples, 1.43%)</title><rect x="36.3564%" y="197" width="1.4320%" height="15" fill="rgb(244,173,20)" fg:x="457" fg:w="18"/><text x="36.6064%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.56%)</title><rect x="37.2315%" y="181" width="0.5569%" height="15" fill="rgb(242,81,47)" fg:x="468" fg:w="7"/><text x="37.4815%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="37.5497%" y="165" width="0.2387%" height="15" fill="rgb(231,185,54)" fg:x="472" fg:w="3"/><text x="37.7997%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="37.6293%" y="149" width="0.1591%" height="15" fill="rgb(243,55,32)" fg:x="473" fg:w="2"/><text x="37.8793%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.6293%" y="133" width="0.1591%" height="15" fill="rgb(208,167,19)" fg:x="473" fg:w="2"/><text x="37.8793%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="37.6293%" y="117" width="0.1591%" height="15" fill="rgb(231,72,35)" fg:x="473" fg:w="2"/><text x="37.8793%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="37.7884%" y="197" width="0.0796%" height="15" fill="rgb(250,173,51)" fg:x="475" fg:w="1"/><text x="38.0384%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (73 samples, 5.81%)</title><rect x="37.7884%" y="213" width="5.8075%" height="15" fill="rgb(209,5,22)" fg:x="475" fg:w="73"/><text x="38.0384%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (72 samples, 5.73%)</title><rect x="37.8679%" y="197" width="5.7279%" height="15" fill="rgb(250,174,19)" fg:x="476" fg:w="72"/><text x="38.1179%" y="207.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (71 samples, 5.65%)</title><rect x="37.9475%" y="181" width="5.6484%" height="15" fill="rgb(217,3,49)" fg:x="477" fg:w="71"/><text x="38.1975%" y="191.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="43.5959%" y="213" width="0.3978%" height="15" fill="rgb(218,225,5)" fg:x="548" fg:w="5"/><text x="43.8459%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.9141%" y="197" width="0.0796%" height="15" fill="rgb(236,89,11)" fg:x="552" fg:w="1"/><text x="44.1641%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="43.9936%" y="213" width="0.0796%" height="15" fill="rgb(206,33,28)" fg:x="553" fg:w="1"/><text x="44.2436%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (130 samples, 10.34%)</title><rect x="34.2084%" y="309" width="10.3421%" height="15" fill="rgb(241,56,42)" fg:x="430" fg:w="130"/><text x="34.4584%" y="319.50">&lt;core::iter::ad..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (129 samples, 10.26%)</title><rect x="34.2880%" y="293" width="10.2625%" height="15" fill="rgb(222,44,11)" fg:x="431" fg:w="129"/><text x="34.5380%" y="303.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (129 samples, 10.26%)</title><rect x="34.2880%" y="277" width="10.2625%" height="15" fill="rgb(234,111,20)" fg:x="431" fg:w="129"/><text x="34.5380%" y="287.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (129 samples, 10.26%)</title><rect x="34.2880%" y="261" width="10.2625%" height="15" fill="rgb(237,77,6)" fg:x="431" fg:w="129"/><text x="34.5380%" y="271.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (129 samples, 10.26%)</title><rect x="34.2880%" y="245" width="10.2625%" height="15" fill="rgb(235,111,23)" fg:x="431" fg:w="129"/><text x="34.5380%" y="255.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (128 samples, 10.18%)</title><rect x="34.3675%" y="229" width="10.1830%" height="15" fill="rgb(251,135,29)" fg:x="432" fg:w="128"/><text x="34.6175%" y="239.50">regex_automata:..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="44.0732%" y="213" width="0.4773%" height="15" fill="rgb(217,57,1)" fg:x="554" fg:w="6"/><text x="44.3232%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="44.1527%" y="197" width="0.3978%" height="15" fill="rgb(249,119,31)" fg:x="555" fg:w="5"/><text x="44.4027%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="44.2323%" y="181" width="0.3182%" height="15" fill="rgb(233,164,33)" fg:x="556" fg:w="4"/><text x="44.4823%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="44.3119%" y="165" width="0.2387%" height="15" fill="rgb(250,217,43)" fg:x="557" fg:w="3"/><text x="44.5619%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.7096%" y="293" width="0.0796%" height="15" fill="rgb(232,154,50)" fg:x="562" fg:w="1"/><text x="44.9596%" y="303.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="44.7892%" y="293" width="0.2387%" height="15" fill="rgb(227,190,8)" fg:x="563" fg:w="3"/><text x="45.0392%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (15 samples, 1.19%)</title><rect x="45.0278%" y="293" width="1.1933%" height="15" fill="rgb(209,217,32)" fg:x="566" fg:w="15"/><text x="45.2778%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="45.7438%" y="277" width="0.4773%" height="15" fill="rgb(243,203,50)" fg:x="575" fg:w="6"/><text x="45.9938%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="45.8234%" y="261" width="0.3978%" height="15" fill="rgb(232,152,27)" fg:x="576" fg:w="5"/><text x="46.0734%" y="271.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="45.8234%" y="245" width="0.3978%" height="15" fill="rgb(240,34,29)" fg:x="576" fg:w="5"/><text x="46.0734%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (158 samples, 12.57%)</title><rect x="34.2084%" y="325" width="12.5696%" height="15" fill="rgb(215,185,52)" fg:x="430" fg:w="158"/><text x="34.4584%" y="335.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (28 samples, 2.23%)</title><rect x="44.5505%" y="309" width="2.2275%" height="15" fill="rgb(240,89,49)" fg:x="560" fg:w="28"/><text x="44.8005%" y="319.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="46.2212%" y="293" width="0.5569%" height="15" fill="rgb(225,12,52)" fg:x="581" fg:w="7"/><text x="46.4712%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (217 samples, 17.26%)</title><rect x="29.6738%" y="341" width="17.2633%" height="15" fill="rgb(239,128,45)" fg:x="373" fg:w="217"/><text x="29.9238%" y="351.50">regex_automata::meta::strat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="46.7780%" y="325" width="0.1591%" height="15" fill="rgb(211,78,47)" fg:x="588" fg:w="2"/><text x="47.0280%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="46.7780%" y="309" width="0.1591%" height="15" fill="rgb(232,31,21)" fg:x="588" fg:w="2"/><text x="47.0280%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="46.8576%" y="293" width="0.0796%" height="15" fill="rgb(222,168,14)" fg:x="589" fg:w="1"/><text x="47.1076%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="47.2554%" y="293" width="0.0796%" height="15" fill="rgb(209,128,24)" fg:x="594" fg:w="1"/><text x="47.5054%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="47.3349%" y="293" width="0.0796%" height="15" fill="rgb(249,35,13)" fg:x="595" fg:w="1"/><text x="47.5849%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="47.3349%" y="277" width="0.0796%" height="15" fill="rgb(218,7,2)" fg:x="595" fg:w="1"/><text x="47.5849%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="47.3349%" y="261" width="0.0796%" height="15" fill="rgb(238,107,27)" fg:x="595" fg:w="1"/><text x="47.5849%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="47.4145%" y="293" width="0.1591%" height="15" fill="rgb(217,88,38)" fg:x="596" fg:w="2"/><text x="47.6645%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="47.4940%" y="277" width="0.0796%" height="15" fill="rgb(230,207,0)" fg:x="597" fg:w="1"/><text x="47.7440%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="47.5736%" y="277" width="0.3182%" height="15" fill="rgb(249,64,54)" fg:x="598" fg:w="4"/><text x="47.8236%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="47.5736%" y="261" width="0.3182%" height="15" fill="rgb(231,7,11)" fg:x="598" fg:w="4"/><text x="47.8236%" y="271.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="47.5736%" y="245" width="0.3182%" height="15" fill="rgb(205,149,21)" fg:x="598" fg:w="4"/><text x="47.8236%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (12 samples, 0.95%)</title><rect x="47.0167%" y="309" width="0.9547%" height="15" fill="rgb(215,126,34)" fg:x="591" fg:w="12"/><text x="47.2667%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="47.5736%" y="293" width="0.3978%" height="15" fill="rgb(241,132,45)" fg:x="598" fg:w="5"/><text x="47.8236%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="47.8918%" y="277" width="0.0796%" height="15" fill="rgb(252,69,32)" fg:x="602" fg:w="1"/><text x="48.1418%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (15 samples, 1.19%)</title><rect x="46.9372%" y="341" width="1.1933%" height="15" fill="rgb(232,204,19)" fg:x="590" fg:w="15"/><text x="47.1872%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (15 samples, 1.19%)</title><rect x="46.9372%" y="325" width="1.1933%" height="15" fill="rgb(249,15,47)" fg:x="590" fg:w="15"/><text x="47.1872%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="47.9714%" y="309" width="0.1591%" height="15" fill="rgb(209,227,23)" fg:x="603" fg:w="2"/><text x="48.2214%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.2896%" y="277" width="0.0796%" height="15" fill="rgb(248,92,24)" fg:x="607" fg:w="1"/><text x="48.5396%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.3691%" y="277" width="0.0796%" height="15" fill="rgb(247,59,2)" fg:x="608" fg:w="1"/><text x="48.6191%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.3691%" y="261" width="0.0796%" height="15" fill="rgb(221,30,5)" fg:x="608" fg:w="1"/><text x="48.6191%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.3691%" y="245" width="0.0796%" height="15" fill="rgb(208,108,53)" fg:x="608" fg:w="1"/><text x="48.6191%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="48.1305%" y="293" width="0.4773%" height="15" fill="rgb(211,183,26)" fg:x="605" fg:w="6"/><text x="48.3805%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="48.4487%" y="277" width="0.1591%" height="15" fill="rgb(232,132,4)" fg:x="609" fg:w="2"/><text x="48.6987%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="48.1305%" y="309" width="0.5569%" height="15" fill="rgb(253,128,37)" fg:x="605" fg:w="7"/><text x="48.3805%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="48.6078%" y="293" width="0.0796%" height="15" fill="rgb(221,58,24)" fg:x="611" fg:w="1"/><text x="48.8578%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.6078%" y="277" width="0.0796%" height="15" fill="rgb(230,54,45)" fg:x="611" fg:w="1"/><text x="48.8578%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.6078%" y="261" width="0.0796%" height="15" fill="rgb(254,21,18)" fg:x="611" fg:w="1"/><text x="48.8578%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.6874%" y="293" width="0.0796%" height="15" fill="rgb(221,108,0)" fg:x="612" fg:w="1"/><text x="48.9374%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.7669%" y="277" width="0.0796%" height="15" fill="rgb(206,95,1)" fg:x="613" fg:w="1"/><text x="49.0169%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="48.7669%" y="293" width="0.1591%" height="15" fill="rgb(237,52,5)" fg:x="613" fg:w="2"/><text x="49.0169%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.8465%" y="277" width="0.0796%" height="15" fill="rgb(218,150,34)" fg:x="614" fg:w="1"/><text x="49.0965%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.8465%" y="261" width="0.0796%" height="15" fill="rgb(235,194,28)" fg:x="614" fg:w="1"/><text x="49.0965%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.9260%" y="277" width="0.0796%" height="15" fill="rgb(245,92,18)" fg:x="615" fg:w="1"/><text x="49.1760%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (5 samples, 0.40%)</title><rect x="48.6874%" y="309" width="0.3978%" height="15" fill="rgb(253,203,53)" fg:x="612" fg:w="5"/><text x="48.9374%" y="319.50"></text></g><g><title>regex_syntax::hir::Properties::capture (2 samples, 0.16%)</title><rect x="48.9260%" y="293" width="0.1591%" height="15" fill="rgb(249,185,47)" fg:x="615" fg:w="2"/><text x="49.1760%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.0056%" y="277" width="0.0796%" height="15" fill="rgb(252,194,52)" fg:x="616" fg:w="1"/><text x="49.2556%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="49.0851%" y="309" width="0.0796%" height="15" fill="rgb(210,53,36)" fg:x="617" fg:w="1"/><text x="49.3351%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="49.0851%" y="293" width="0.0796%" height="15" fill="rgb(237,37,25)" fg:x="617" fg:w="1"/><text x="49.3351%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.0851%" y="277" width="0.0796%" height="15" fill="rgb(242,116,27)" fg:x="617" fg:w="1"/><text x="49.3351%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (257 samples, 20.45%)</title><rect x="28.7987%" y="389" width="20.4455%" height="15" fill="rgb(213,185,26)" fg:x="362" fg:w="257"/><text x="29.0487%" y="399.50">&lt;regex::regex::string::Regex as ..</text></g><g><title>regex::builders::Builder::build_one_string (257 samples, 20.45%)</title><rect x="28.7987%" y="373" width="20.4455%" height="15" fill="rgb(225,204,8)" fg:x="362" fg:w="257"/><text x="29.0487%" y="383.50">regex::builders::Builder::build_..</text></g><g><title>regex_automata::meta::regex::Builder::build (257 samples, 20.45%)</title><rect x="28.7987%" y="357" width="20.4455%" height="15" fill="rgb(254,111,37)" fg:x="362" fg:w="257"/><text x="29.0487%" y="367.50">regex_automata::meta::regex::Bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (14 samples, 1.11%)</title><rect x="48.1305%" y="341" width="1.1138%" height="15" fill="rgb(242,35,9)" fg:x="605" fg:w="14"/><text x="48.3805%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (14 samples, 1.11%)</title><rect x="48.1305%" y="325" width="1.1138%" height="15" fill="rgb(232,138,49)" fg:x="605" fg:w="14"/><text x="48.3805%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.1647%" y="309" width="0.0796%" height="15" fill="rgb(247,56,4)" fg:x="618" fg:w="1"/><text x="49.4147%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.1647%" y="293" width="0.0796%" height="15" fill="rgb(226,179,17)" fg:x="618" fg:w="1"/><text x="49.4147%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.1647%" y="277" width="0.0796%" height="15" fill="rgb(216,163,45)" fg:x="618" fg:w="1"/><text x="49.4147%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.2442%" y="357" width="0.0796%" height="15" fill="rgb(211,157,3)" fg:x="619" fg:w="1"/><text x="49.4942%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.3238%" y="341" width="0.0796%" height="15" fill="rgb(234,44,20)" fg:x="620" fg:w="1"/><text x="49.5738%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.4033%" y="341" width="0.0796%" height="15" fill="rgb(254,138,23)" fg:x="621" fg:w="1"/><text x="49.6533%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.4033%" y="325" width="0.0796%" height="15" fill="rgb(206,119,39)" fg:x="621" fg:w="1"/><text x="49.6533%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.4033%" y="309" width="0.0796%" height="15" fill="rgb(231,105,52)" fg:x="621" fg:w="1"/><text x="49.6533%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="49.3238%" y="357" width="0.2387%" height="15" fill="rgb(250,20,5)" fg:x="620" fg:w="3"/><text x="49.5738%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="49.4829%" y="341" width="0.0796%" height="15" fill="rgb(215,198,30)" fg:x="622" fg:w="1"/><text x="49.7329%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.4829%" y="325" width="0.0796%" height="15" fill="rgb(246,142,8)" fg:x="622" fg:w="1"/><text x="49.7329%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.4829%" y="309" width="0.0796%" height="15" fill="rgb(243,26,38)" fg:x="622" fg:w="1"/><text x="49.7329%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.4829%" y="293" width="0.0796%" height="15" fill="rgb(205,133,28)" fg:x="622" fg:w="1"/><text x="49.7329%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="49.5625%" y="341" width="0.0796%" height="15" fill="rgb(212,34,0)" fg:x="623" fg:w="1"/><text x="49.8125%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.5625%" y="325" width="0.0796%" height="15" fill="rgb(251,226,22)" fg:x="623" fg:w="1"/><text x="49.8125%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="49.2442%" y="389" width="0.4773%" height="15" fill="rgb(252,119,9)" fg:x="619" fg:w="6"/><text x="49.4942%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="49.2442%" y="373" width="0.4773%" height="15" fill="rgb(213,150,50)" fg:x="619" fg:w="6"/><text x="49.4942%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="49.5625%" y="357" width="0.1591%" height="15" fill="rgb(212,24,39)" fg:x="623" fg:w="2"/><text x="49.8125%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="49.6420%" y="341" width="0.0796%" height="15" fill="rgb(213,46,39)" fg:x="624" fg:w="1"/><text x="49.8920%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="49.8011%" y="325" width="0.0796%" height="15" fill="rgb(239,106,12)" fg:x="626" fg:w="1"/><text x="50.0511%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.8011%" y="309" width="0.0796%" height="15" fill="rgb(249,229,21)" fg:x="626" fg:w="1"/><text x="50.0511%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.8011%" y="293" width="0.0796%" height="15" fill="rgb(212,158,3)" fg:x="626" fg:w="1"/><text x="50.0511%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.8011%" y="277" width="0.0796%" height="15" fill="rgb(253,26,48)" fg:x="626" fg:w="1"/><text x="50.0511%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="50.3580%" y="293" width="0.1591%" height="15" fill="rgb(238,178,20)" fg:x="633" fg:w="2"/><text x="50.6080%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.3580%" y="277" width="0.1591%" height="15" fill="rgb(208,86,15)" fg:x="633" fg:w="2"/><text x="50.6080%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="50.3580%" y="261" width="0.1591%" height="15" fill="rgb(239,42,53)" fg:x="633" fg:w="2"/><text x="50.6080%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.35%)</title><rect x="49.8807%" y="309" width="1.3524%" height="15" fill="rgb(245,226,8)" fg:x="627" fg:w="17"/><text x="50.1307%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (9 samples, 0.72%)</title><rect x="50.5171%" y="293" width="0.7160%" height="15" fill="rgb(216,176,32)" fg:x="635" fg:w="9"/><text x="50.7671%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (284 samples, 22.59%)</title><rect x="28.7987%" y="405" width="22.5935%" height="15" fill="rgb(231,186,21)" fg:x="362" fg:w="284"/><text x="29.0487%" y="415.50">indefinite::rules::number::Number::c..</text></g><g><title>regex::regex::string::Regex::is_match_at (21 samples, 1.67%)</title><rect x="49.7216%" y="389" width="1.6706%" height="15" fill="rgb(205,95,49)" fg:x="625" fg:w="21"/><text x="49.9716%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.67%)</title><rect x="49.7216%" y="373" width="1.6706%" height="15" fill="rgb(217,145,8)" fg:x="625" fg:w="21"/><text x="49.9716%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.67%)</title><rect x="49.7216%" y="357" width="1.6706%" height="15" fill="rgb(239,144,48)" fg:x="625" fg:w="21"/><text x="49.9716%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.67%)</title><rect x="49.7216%" y="341" width="1.6706%" height="15" fill="rgb(214,189,23)" fg:x="625" fg:w="21"/><text x="49.9716%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (19 samples, 1.51%)</title><rect x="49.8807%" y="325" width="1.5115%" height="15" fill="rgb(229,157,17)" fg:x="627" fg:w="19"/><text x="50.1307%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="51.2331%" y="309" width="0.1591%" height="15" fill="rgb(230,5,48)" fg:x="644" fg:w="2"/><text x="51.4831%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="51.2331%" y="293" width="0.1591%" height="15" fill="rgb(224,156,48)" fg:x="644" fg:w="2"/><text x="51.4831%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.2331%" y="277" width="0.1591%" height="15" fill="rgb(223,14,29)" fg:x="644" fg:w="2"/><text x="51.4831%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.2331%" y="261" width="0.1591%" height="15" fill="rgb(229,96,36)" fg:x="644" fg:w="2"/><text x="51.4831%" y="271.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="51.3922%" y="389" width="0.0796%" height="15" fill="rgb(231,102,53)" fg:x="646" fg:w="1"/><text x="51.6422%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.6309%" y="293" width="0.0796%" height="15" fill="rgb(210,77,38)" fg:x="649" fg:w="1"/><text x="51.8809%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.6309%" y="277" width="0.0796%" height="15" fill="rgb(235,131,6)" fg:x="649" fg:w="1"/><text x="51.8809%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.6309%" y="325" width="0.1591%" height="15" fill="rgb(252,55,38)" fg:x="649" fg:w="2"/><text x="51.8809%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.6309%" y="309" width="0.1591%" height="15" fill="rgb(246,38,14)" fg:x="649" fg:w="2"/><text x="51.8809%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.7104%" y="293" width="0.0796%" height="15" fill="rgb(242,27,5)" fg:x="650" fg:w="1"/><text x="51.9604%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.7900%" y="325" width="0.0796%" height="15" fill="rgb(228,65,35)" fg:x="651" fg:w="1"/><text x="52.0400%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.7900%" y="309" width="0.0796%" height="15" fill="rgb(245,93,11)" fg:x="651" fg:w="1"/><text x="52.0400%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.7900%" y="293" width="0.0796%" height="15" fill="rgb(213,1,31)" fg:x="651" fg:w="1"/><text x="52.0400%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="51.8695%" y="325" width="0.1591%" height="15" fill="rgb(237,205,14)" fg:x="652" fg:w="2"/><text x="52.1195%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.8695%" y="309" width="0.1591%" height="15" fill="rgb(232,118,45)" fg:x="652" fg:w="2"/><text x="52.1195%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="51.9491%" y="293" width="0.0796%" height="15" fill="rgb(218,5,6)" fg:x="653" fg:w="1"/><text x="52.1991%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.9491%" y="277" width="0.0796%" height="15" fill="rgb(251,87,51)" fg:x="653" fg:w="1"/><text x="52.1991%" y="287.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="52.0286%" y="325" width="0.0796%" height="15" fill="rgb(207,225,20)" fg:x="654" fg:w="1"/><text x="52.2786%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.0286%" y="309" width="0.0796%" height="15" fill="rgb(222,78,54)" fg:x="654" fg:w="1"/><text x="52.2786%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.0286%" y="293" width="0.0796%" height="15" fill="rgb(232,85,16)" fg:x="654" fg:w="1"/><text x="52.2786%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="52.1082%" y="309" width="0.0796%" height="15" fill="rgb(244,25,33)" fg:x="655" fg:w="1"/><text x="52.3582%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="52.1082%" y="293" width="0.0796%" height="15" fill="rgb(233,24,36)" fg:x="655" fg:w="1"/><text x="52.3582%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="52.1877%" y="309" width="0.0796%" height="15" fill="rgb(253,49,54)" fg:x="656" fg:w="1"/><text x="52.4377%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="52.4264%" y="293" width="0.3978%" height="15" fill="rgb(245,12,22)" fg:x="659" fg:w="5"/><text x="52.6764%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="52.2673%" y="309" width="0.6364%" height="15" fill="rgb(253,141,28)" fg:x="657" fg:w="8"/><text x="52.5173%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="52.8242%" y="293" width="0.0796%" height="15" fill="rgb(225,207,27)" fg:x="664" fg:w="1"/><text x="53.0742%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="52.9037%" y="293" width="0.1591%" height="15" fill="rgb(220,84,2)" fg:x="665" fg:w="2"/><text x="53.1537%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="52.9037%" y="277" width="0.1591%" height="15" fill="rgb(224,37,37)" fg:x="665" fg:w="2"/><text x="53.1537%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="52.9037%" y="261" width="0.1591%" height="15" fill="rgb(220,143,18)" fg:x="665" fg:w="2"/><text x="53.1537%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="52.9833%" y="245" width="0.0796%" height="15" fill="rgb(210,88,33)" fg:x="666" fg:w="1"/><text x="53.2333%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="53.0628%" y="277" width="0.0796%" height="15" fill="rgb(219,87,51)" fg:x="667" fg:w="1"/><text x="53.3128%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.1424%" y="277" width="0.0796%" height="15" fill="rgb(211,7,35)" fg:x="668" fg:w="1"/><text x="53.3924%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.2220%" y="277" width="0.0796%" height="15" fill="rgb(232,77,2)" fg:x="669" fg:w="1"/><text x="53.4720%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="53.3015%" y="277" width="0.1591%" height="15" fill="rgb(249,94,25)" fg:x="670" fg:w="2"/><text x="53.5515%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.3811%" y="261" width="0.0796%" height="15" fill="rgb(215,112,2)" fg:x="671" fg:w="1"/><text x="53.6311%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.3811%" y="245" width="0.0796%" height="15" fill="rgb(226,115,48)" fg:x="671" fg:w="1"/><text x="53.6311%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.3811%" y="229" width="0.0796%" height="15" fill="rgb(249,196,10)" fg:x="671" fg:w="1"/><text x="53.6311%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.6197%" y="261" width="0.0796%" height="15" fill="rgb(237,109,14)" fg:x="674" fg:w="1"/><text x="53.8697%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (21 samples, 1.67%)</title><rect x="52.1082%" y="325" width="1.6706%" height="15" fill="rgb(217,103,53)" fg:x="655" fg:w="21"/><text x="52.3582%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (11 samples, 0.88%)</title><rect x="52.9037%" y="309" width="0.8751%" height="15" fill="rgb(244,137,9)" fg:x="665" fg:w="11"/><text x="53.1537%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="53.0628%" y="293" width="0.7160%" height="15" fill="rgb(227,201,3)" fg:x="667" fg:w="9"/><text x="53.3128%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="53.4606%" y="277" width="0.3182%" height="15" fill="rgb(243,94,6)" fg:x="672" fg:w="4"/><text x="53.7106%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.6993%" y="261" width="0.0796%" height="15" fill="rgb(235,118,5)" fg:x="675" fg:w="1"/><text x="53.9493%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.6993%" y="245" width="0.0796%" height="15" fill="rgb(247,10,30)" fg:x="675" fg:w="1"/><text x="53.9493%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="53.6993%" y="229" width="0.0796%" height="15" fill="rgb(205,26,28)" fg:x="675" fg:w="1"/><text x="53.9493%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="53.6993%" y="213" width="0.0796%" height="15" fill="rgb(206,99,35)" fg:x="675" fg:w="1"/><text x="53.9493%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="53.7788%" y="277" width="0.0796%" height="15" fill="rgb(238,130,40)" fg:x="676" fg:w="1"/><text x="54.0288%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.7788%" y="261" width="0.0796%" height="15" fill="rgb(224,126,31)" fg:x="676" fg:w="1"/><text x="54.0288%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.7788%" y="245" width="0.0796%" height="15" fill="rgb(254,105,17)" fg:x="676" fg:w="1"/><text x="54.0288%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.7788%" y="229" width="0.0796%" height="15" fill="rgb(216,87,36)" fg:x="676" fg:w="1"/><text x="54.0288%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="53.8584%" y="229" width="0.2387%" height="15" fill="rgb(240,21,12)" fg:x="677" fg:w="3"/><text x="54.1084%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="53.7788%" y="293" width="0.3978%" height="15" fill="rgb(245,192,34)" fg:x="676" fg:w="5"/><text x="54.0288%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="53.8584%" y="277" width="0.3182%" height="15" fill="rgb(226,100,49)" fg:x="677" fg:w="4"/><text x="54.1084%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="53.8584%" y="261" width="0.3182%" height="15" fill="rgb(245,188,27)" fg:x="677" fg:w="4"/><text x="54.1084%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="53.8584%" y="245" width="0.3182%" height="15" fill="rgb(212,170,8)" fg:x="677" fg:w="4"/><text x="54.1084%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="54.0971%" y="229" width="0.0796%" height="15" fill="rgb(217,113,29)" fg:x="680" fg:w="1"/><text x="54.3471%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="54.0971%" y="213" width="0.0796%" height="15" fill="rgb(237,30,3)" fg:x="680" fg:w="1"/><text x="54.3471%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="53.7788%" y="325" width="0.4773%" height="15" fill="rgb(227,19,28)" fg:x="676" fg:w="6"/><text x="54.0288%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="53.7788%" y="309" width="0.4773%" height="15" fill="rgb(239,172,45)" fg:x="676" fg:w="6"/><text x="54.0288%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="54.1766%" y="293" width="0.0796%" height="15" fill="rgb(254,55,39)" fg:x="681" fg:w="1"/><text x="54.4266%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.1766%" y="277" width="0.0796%" height="15" fill="rgb(249,208,12)" fg:x="681" fg:w="1"/><text x="54.4266%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.1766%" y="261" width="0.0796%" height="15" fill="rgb(240,52,13)" fg:x="681" fg:w="1"/><text x="54.4266%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.1766%" y="245" width="0.0796%" height="15" fill="rgb(252,149,13)" fg:x="681" fg:w="1"/><text x="54.4266%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="54.2562%" y="293" width="0.0796%" height="15" fill="rgb(232,81,48)" fg:x="682" fg:w="1"/><text x="54.5062%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.2562%" y="277" width="0.0796%" height="15" fill="rgb(222,144,2)" fg:x="682" fg:w="1"/><text x="54.5062%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.2562%" y="261" width="0.0796%" height="15" fill="rgb(216,81,32)" fg:x="682" fg:w="1"/><text x="54.5062%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.2562%" y="245" width="0.0796%" height="15" fill="rgb(244,78,51)" fg:x="682" fg:w="1"/><text x="54.5062%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.5744%" y="261" width="0.0796%" height="15" fill="rgb(217,66,21)" fg:x="686" fg:w="1"/><text x="54.8244%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (6 samples, 0.48%)</title><rect x="54.3357%" y="277" width="0.4773%" height="15" fill="rgb(247,101,42)" fg:x="683" fg:w="6"/><text x="54.5857%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (2 samples, 0.16%)</title><rect x="54.6539%" y="261" width="0.1591%" height="15" fill="rgb(227,81,39)" fg:x="687" fg:w="2"/><text x="54.9039%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.7335%" y="245" width="0.0796%" height="15" fill="rgb(220,223,44)" fg:x="688" fg:w="1"/><text x="54.9835%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (7 samples, 0.56%)</title><rect x="54.3357%" y="293" width="0.5569%" height="15" fill="rgb(205,218,2)" fg:x="683" fg:w="7"/><text x="54.5857%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="54.8130%" y="277" width="0.0796%" height="15" fill="rgb(212,207,28)" fg:x="689" fg:w="1"/><text x="55.0630%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (43 samples, 3.42%)</title><rect x="51.5513%" y="373" width="3.4208%" height="15" fill="rgb(224,12,41)" fg:x="648" fg:w="43"/><text x="51.8013%" y="383.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (43 samples, 3.42%)</title><rect x="51.5513%" y="357" width="3.4208%" height="15" fill="rgb(216,118,12)" fg:x="648" fg:w="43"/><text x="51.8013%" y="367.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (43 samples, 3.42%)</title><rect x="51.5513%" y="341" width="3.4208%" height="15" fill="rgb(252,97,46)" fg:x="648" fg:w="43"/><text x="51.8013%" y="351.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="54.2562%" y="325" width="0.7160%" height="15" fill="rgb(244,206,19)" fg:x="682" fg:w="9"/><text x="54.5062%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="54.2562%" y="309" width="0.7160%" height="15" fill="rgb(231,84,31)" fg:x="682" fg:w="9"/><text x="54.5062%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="54.8926%" y="293" width="0.0796%" height="15" fill="rgb(244,133,0)" fg:x="690" fg:w="1"/><text x="55.1426%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="54.8926%" y="277" width="0.0796%" height="15" fill="rgb(223,15,50)" fg:x="690" fg:w="1"/><text x="55.1426%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.8926%" y="261" width="0.0796%" height="15" fill="rgb(250,118,49)" fg:x="690" fg:w="1"/><text x="55.1426%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.8926%" y="245" width="0.0796%" height="15" fill="rgb(248,25,38)" fg:x="690" fg:w="1"/><text x="55.1426%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.8926%" y="229" width="0.0796%" height="15" fill="rgb(215,70,14)" fg:x="690" fg:w="1"/><text x="55.1426%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="54.9722%" y="325" width="0.0796%" height="15" fill="rgb(215,28,15)" fg:x="691" fg:w="1"/><text x="55.2222%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="54.9722%" y="373" width="0.1591%" height="15" fill="rgb(243,6,28)" fg:x="691" fg:w="2"/><text x="55.2222%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="54.9722%" y="357" width="0.1591%" height="15" fill="rgb(222,130,1)" fg:x="691" fg:w="2"/><text x="55.2222%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="54.9722%" y="341" width="0.1591%" height="15" fill="rgb(236,166,44)" fg:x="691" fg:w="2"/><text x="55.2222%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="55.0517%" y="325" width="0.0796%" height="15" fill="rgb(221,108,14)" fg:x="692" fg:w="1"/><text x="55.3017%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="55.0517%" y="309" width="0.0796%" height="15" fill="rgb(252,3,45)" fg:x="692" fg:w="1"/><text x="55.3017%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="55.1313%" y="373" width="0.0796%" height="15" fill="rgb(237,68,30)" fg:x="693" fg:w="1"/><text x="55.3813%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="55.1313%" y="357" width="0.0796%" height="15" fill="rgb(211,79,22)" fg:x="693" fg:w="1"/><text x="55.3813%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="55.1313%" y="341" width="0.0796%" height="15" fill="rgb(252,185,21)" fg:x="693" fg:w="1"/><text x="55.3813%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.4495%" y="293" width="0.0796%" height="15" fill="rgb(225,189,26)" fg:x="697" fg:w="1"/><text x="55.6995%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4495%" y="277" width="0.0796%" height="15" fill="rgb(241,30,40)" fg:x="697" fg:w="1"/><text x="55.6995%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.4495%" y="261" width="0.0796%" height="15" fill="rgb(235,215,44)" fg:x="697" fg:w="1"/><text x="55.6995%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.5290%" y="293" width="0.0796%" height="15" fill="rgb(205,8,29)" fg:x="698" fg:w="1"/><text x="55.7790%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.5290%" y="277" width="0.0796%" height="15" fill="rgb(241,137,42)" fg:x="698" fg:w="1"/><text x="55.7790%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="55.3699%" y="309" width="0.3978%" height="15" fill="rgb(237,155,2)" fg:x="696" fg:w="5"/><text x="55.6199%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="55.6086%" y="293" width="0.1591%" height="15" fill="rgb(245,29,42)" fg:x="699" fg:w="2"/><text x="55.8586%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="55.3699%" y="325" width="0.4773%" height="15" fill="rgb(234,101,35)" fg:x="696" fg:w="6"/><text x="55.6199%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="55.7677%" y="309" width="0.0796%" height="15" fill="rgb(228,64,37)" fg:x="701" fg:w="1"/><text x="56.0177%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (56 samples, 4.46%)</title><rect x="51.4718%" y="389" width="4.4551%" height="15" fill="rgb(217,214,36)" fg:x="647" fg:w="56"/><text x="51.7218%" y="399.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="55.2108%" y="373" width="0.7160%" height="15" fill="rgb(243,70,3)" fg:x="694" fg:w="9"/><text x="55.4608%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="55.2108%" y="357" width="0.7160%" height="15" fill="rgb(253,158,52)" fg:x="694" fg:w="9"/><text x="55.4608%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="55.2108%" y="341" width="0.7160%" height="15" fill="rgb(234,111,54)" fg:x="694" fg:w="9"/><text x="55.4608%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="55.8473%" y="325" width="0.0796%" height="15" fill="rgb(217,70,32)" fg:x="702" fg:w="1"/><text x="56.0973%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (543 samples, 43.20%)</title><rect x="12.8083%" y="485" width="43.1981%" height="15" fill="rgb(234,18,33)" fg:x="161" fg:w="543"/><text x="13.0583%" y="495.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;..</text></g><g><title>plugins_core::looking::model::qualify_name (533 samples, 42.40%)</title><rect x="13.6038%" y="469" width="42.4025%" height="15" fill="rgb(234,12,49)" fg:x="171" fg:w="533"/><text x="13.8538%" y="479.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (533 samples, 42.40%)</title><rect x="13.6038%" y="453" width="42.4025%" height="15" fill="rgb(236,10,21)" fg:x="171" fg:w="533"/><text x="13.8538%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (533 samples, 42.40%)</title><rect x="13.6038%" y="437" width="42.4025%" height="15" fill="rgb(248,182,45)" fg:x="171" fg:w="533"/><text x="13.8538%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (531 samples, 42.24%)</title><rect x="13.7629%" y="421" width="42.2434%" height="15" fill="rgb(217,95,36)" fg:x="173" fg:w="531"/><text x="14.0129%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (58 samples, 4.61%)</title><rect x="51.3922%" y="405" width="4.6142%" height="15" fill="rgb(212,110,31)" fg:x="646" fg:w="58"/><text x="51.6422%" y="415.50">indef..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="55.9268%" y="389" width="0.0796%" height="15" fill="rgb(206,32,53)" fg:x="703" fg:w="1"/><text x="56.1768%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="56.0064%" y="485" width="0.0796%" height="15" fill="rgb(246,141,37)" fg:x="704" fg:w="1"/><text x="56.2564%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="56.0859%" y="485" width="0.0796%" height="15" fill="rgb(219,16,7)" fg:x="705" fg:w="1"/><text x="56.3359%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="56.0859%" y="469" width="0.0796%" height="15" fill="rgb(230,205,45)" fg:x="705" fg:w="1"/><text x="56.3359%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="56.0859%" y="453" width="0.0796%" height="15" fill="rgb(231,43,49)" fg:x="705" fg:w="1"/><text x="56.3359%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="56.0859%" y="437" width="0.0796%" height="15" fill="rgb(212,106,34)" fg:x="705" fg:w="1"/><text x="56.3359%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="56.0859%" y="421" width="0.0796%" height="15" fill="rgb(206,83,17)" fg:x="705" fg:w="1"/><text x="56.3359%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="56.0859%" y="405" width="0.0796%" height="15" fill="rgb(244,154,49)" fg:x="705" fg:w="1"/><text x="56.3359%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="56.0859%" y="389" width="0.0796%" height="15" fill="rgb(244,149,49)" fg:x="705" fg:w="1"/><text x="56.3359%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="56.0859%" y="373" width="0.0796%" height="15" fill="rgb(227,134,18)" fg:x="705" fg:w="1"/><text x="56.3359%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="56.0859%" y="357" width="0.0796%" height="15" fill="rgb(237,116,36)" fg:x="705" fg:w="1"/><text x="56.3359%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="56.0859%" y="341" width="0.0796%" height="15" fill="rgb(205,129,40)" fg:x="705" fg:w="1"/><text x="56.3359%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="56.0859%" y="325" width="0.0796%" height="15" fill="rgb(236,178,4)" fg:x="705" fg:w="1"/><text x="56.3359%" y="335.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="56.0859%" y="309" width="0.0796%" height="15" fill="rgb(251,76,53)" fg:x="705" fg:w="1"/><text x="56.3359%" y="319.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="56.0859%" y="293" width="0.0796%" height="15" fill="rgb(242,92,40)" fg:x="705" fg:w="1"/><text x="56.3359%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="56.0859%" y="277" width="0.0796%" height="15" fill="rgb(209,45,30)" fg:x="705" fg:w="1"/><text x="56.3359%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="56.0859%" y="261" width="0.0796%" height="15" fill="rgb(218,157,36)" fg:x="705" fg:w="1"/><text x="56.3359%" y="271.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="56.0859%" y="245" width="0.0796%" height="15" fill="rgb(222,186,16)" fg:x="705" fg:w="1"/><text x="56.3359%" y="255.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="56.0859%" y="229" width="0.0796%" height="15" fill="rgb(254,72,35)" fg:x="705" fg:w="1"/><text x="56.3359%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="56.0859%" y="213" width="0.0796%" height="15" fill="rgb(224,25,35)" fg:x="705" fg:w="1"/><text x="56.3359%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="56.0859%" y="197" width="0.0796%" height="15" fill="rgb(206,135,52)" fg:x="705" fg:w="1"/><text x="56.3359%" y="207.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="56.0859%" y="181" width="0.0796%" height="15" fill="rgb(229,174,47)" fg:x="705" fg:w="1"/><text x="56.3359%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="56.0859%" y="165" width="0.0796%" height="15" fill="rgb(242,184,21)" fg:x="705" fg:w="1"/><text x="56.3359%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.0859%" y="149" width="0.0796%" height="15" fill="rgb(213,22,45)" fg:x="705" fg:w="1"/><text x="56.3359%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="56.0859%" y="133" width="0.0796%" height="15" fill="rgb(237,81,54)" fg:x="705" fg:w="1"/><text x="56.3359%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="56.0859%" y="117" width="0.0796%" height="15" fill="rgb(248,177,18)" fg:x="705" fg:w="1"/><text x="56.3359%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="56.0859%" y="101" width="0.0796%" height="15" fill="rgb(254,31,16)" fg:x="705" fg:w="1"/><text x="56.3359%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.0859%" y="85" width="0.0796%" height="15" fill="rgb(235,20,31)" fg:x="705" fg:w="1"/><text x="56.3359%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="56.0859%" y="69" width="0.0796%" height="15" fill="rgb(240,56,43)" fg:x="705" fg:w="1"/><text x="56.3359%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.08%)</title><rect x="56.0859%" y="53" width="0.0796%" height="15" fill="rgb(237,197,51)" fg:x="705" fg:w="1"/><text x="56.3359%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.08%)</title><rect x="56.0859%" y="37" width="0.0796%" height="15" fill="rgb(241,162,44)" fg:x="705" fg:w="1"/><text x="56.3359%" y="47.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="56.2450%" y="453" width="0.1591%" height="15" fill="rgb(224,23,20)" fg:x="707" fg:w="2"/><text x="56.4950%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.2450%" y="437" width="0.1591%" height="15" fill="rgb(250,109,34)" fg:x="707" fg:w="2"/><text x="56.4950%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.3246%" y="421" width="0.0796%" height="15" fill="rgb(214,175,50)" fg:x="708" fg:w="1"/><text x="56.5746%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.3246%" y="405" width="0.0796%" height="15" fill="rgb(213,182,5)" fg:x="708" fg:w="1"/><text x="56.5746%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.3246%" y="389" width="0.0796%" height="15" fill="rgb(209,199,19)" fg:x="708" fg:w="1"/><text x="56.5746%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.3246%" y="373" width="0.0796%" height="15" fill="rgb(236,224,42)" fg:x="708" fg:w="1"/><text x="56.5746%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.3246%" y="357" width="0.0796%" height="15" fill="rgb(246,226,29)" fg:x="708" fg:w="1"/><text x="56.5746%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.3246%" y="341" width="0.0796%" height="15" fill="rgb(227,223,11)" fg:x="708" fg:w="1"/><text x="56.5746%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.3246%" y="325" width="0.0796%" height="15" fill="rgb(219,7,51)" fg:x="708" fg:w="1"/><text x="56.5746%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.3246%" y="309" width="0.0796%" height="15" fill="rgb(245,167,10)" fg:x="708" fg:w="1"/><text x="56.5746%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.3246%" y="293" width="0.0796%" height="15" fill="rgb(237,224,16)" fg:x="708" fg:w="1"/><text x="56.5746%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="56.3246%" y="277" width="0.0796%" height="15" fill="rgb(226,132,13)" fg:x="708" fg:w="1"/><text x="56.5746%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="56.3246%" y="261" width="0.0796%" height="15" fill="rgb(214,140,3)" fg:x="708" fg:w="1"/><text x="56.5746%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="56.3246%" y="245" width="0.0796%" height="15" fill="rgb(221,177,4)" fg:x="708" fg:w="1"/><text x="56.5746%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="56.3246%" y="229" width="0.0796%" height="15" fill="rgb(238,139,3)" fg:x="708" fg:w="1"/><text x="56.5746%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.3246%" y="213" width="0.0796%" height="15" fill="rgb(216,17,39)" fg:x="708" fg:w="1"/><text x="56.5746%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.4837%" y="421" width="0.0796%" height="15" fill="rgb(238,120,9)" fg:x="710" fg:w="1"/><text x="56.7337%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (554 samples, 44.07%)</title><rect x="12.5696%" y="677" width="44.0732%" height="15" fill="rgb(244,92,53)" fg:x="158" fg:w="554"/><text x="12.8196%" y="687.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (554 samples, 44.07%)</title><rect x="12.5696%" y="661" width="44.0732%" height="15" fill="rgb(224,148,33)" fg:x="158" fg:w="554"/><text x="12.8196%" y="671.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (554 samples, 44.07%)</title><rect x="12.5696%" y="645" width="44.0732%" height="15" fill="rgb(243,6,36)" fg:x="158" fg:w="554"/><text x="12.8196%" y="655.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (554 samples, 44.07%)</title><rect x="12.5696%" y="629" width="44.0732%" height="15" fill="rgb(230,102,11)" fg:x="158" fg:w="554"/><text x="12.8196%" y="639.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (554 samples, 44.07%)</title><rect x="12.5696%" y="613" width="44.0732%" height="15" fill="rgb(234,148,36)" fg:x="158" fg:w="554"/><text x="12.8196%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (554 samples, 44.07%)</title><rect x="12.5696%" y="597" width="44.0732%" height="15" fill="rgb(251,153,25)" fg:x="158" fg:w="554"/><text x="12.8196%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (554 samples, 44.07%)</title><rect x="12.5696%" y="581" width="44.0732%" height="15" fill="rgb(215,129,8)" fg:x="158" fg:w="554"/><text x="12.8196%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (554 samples, 44.07%)</title><rect x="12.5696%" y="565" width="44.0732%" height="15" fill="rgb(224,128,35)" fg:x="158" fg:w="554"/><text x="12.8196%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (554 samples, 44.07%)</title><rect x="12.5696%" y="549" width="44.0732%" height="15" fill="rgb(237,56,52)" fg:x="158" fg:w="554"/><text x="12.8196%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (554 samples, 44.07%)</title><rect x="12.5696%" y="533" width="44.0732%" height="15" fill="rgb(234,213,19)" fg:x="158" fg:w="554"/><text x="12.8196%" y="543.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (554 samples, 44.07%)</title><rect x="12.5696%" y="517" width="44.0732%" height="15" fill="rgb(252,82,23)" fg:x="158" fg:w="554"/><text x="12.8196%" y="527.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;:..</text></g><g><title>plugins_core::looking::model::new_area_observation (551 samples, 43.83%)</title><rect x="12.8083%" y="501" width="43.8345%" height="15" fill="rgb(254,201,21)" fg:x="161" fg:w="551"/><text x="13.0583%" y="511.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="56.1655%" y="485" width="0.4773%" height="15" fill="rgb(250,186,11)" fg:x="706" fg:w="6"/><text x="56.4155%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="56.2450%" y="469" width="0.3978%" height="15" fill="rgb(211,174,5)" fg:x="707" fg:w="5"/><text x="56.4950%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="56.4041%" y="453" width="0.2387%" height="15" fill="rgb(214,121,10)" fg:x="709" fg:w="3"/><text x="56.6541%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="56.4837%" y="437" width="0.1591%" height="15" fill="rgb(241,66,2)" fg:x="710" fg:w="2"/><text x="56.7337%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.5632%" y="421" width="0.0796%" height="15" fill="rgb(220,167,19)" fg:x="711" fg:w="1"/><text x="56.8132%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.5632%" y="405" width="0.0796%" height="15" fill="rgb(231,54,50)" fg:x="711" fg:w="1"/><text x="56.8132%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="56.5632%" y="389" width="0.0796%" height="15" fill="rgb(239,217,53)" fg:x="711" fg:w="1"/><text x="56.8132%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.5632%" y="373" width="0.0796%" height="15" fill="rgb(248,8,0)" fg:x="711" fg:w="1"/><text x="56.8132%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="56.6428%" y="645" width="0.0796%" height="15" fill="rgb(229,118,37)" fg:x="712" fg:w="1"/><text x="56.8928%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.6428%" y="629" width="0.0796%" height="15" fill="rgb(253,223,43)" fg:x="712" fg:w="1"/><text x="56.8928%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.7224%" y="581" width="0.0796%" height="15" fill="rgb(211,77,36)" fg:x="713" fg:w="1"/><text x="56.9724%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.7224%" y="565" width="0.0796%" height="15" fill="rgb(219,3,53)" fg:x="713" fg:w="1"/><text x="56.9724%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.7224%" y="549" width="0.0796%" height="15" fill="rgb(244,45,42)" fg:x="713" fg:w="1"/><text x="56.9724%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.7224%" y="533" width="0.0796%" height="15" fill="rgb(225,95,27)" fg:x="713" fg:w="1"/><text x="56.9724%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="56.7224%" y="597" width="0.1591%" height="15" fill="rgb(207,74,8)" fg:x="713" fg:w="2"/><text x="56.9724%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.8019%" y="581" width="0.0796%" height="15" fill="rgb(243,63,36)" fg:x="714" fg:w="1"/><text x="57.0519%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="56.7224%" y="613" width="0.2387%" height="15" fill="rgb(211,180,12)" fg:x="713" fg:w="3"/><text x="56.9724%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.8815%" y="597" width="0.0796%" height="15" fill="rgb(254,166,49)" fg:x="715" fg:w="1"/><text x="57.1315%" y="607.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="56.9610%" y="613" width="0.2387%" height="15" fill="rgb(205,19,0)" fg:x="716" fg:w="3"/><text x="57.2110%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="56.7224%" y="629" width="0.5569%" height="15" fill="rgb(224,172,32)" fg:x="713" fg:w="7"/><text x="56.9724%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="57.1997%" y="613" width="0.0796%" height="15" fill="rgb(254,136,30)" fg:x="719" fg:w="1"/><text x="57.4497%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (8 samples, 0.64%)</title><rect x="56.7224%" y="645" width="0.6364%" height="15" fill="rgb(246,19,35)" fg:x="713" fg:w="8"/><text x="56.9724%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="57.2792%" y="629" width="0.0796%" height="15" fill="rgb(219,24,36)" fg:x="720" fg:w="1"/><text x="57.5292%" y="639.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="57.5179%" y="597" width="0.1591%" height="15" fill="rgb(251,55,1)" fg:x="723" fg:w="2"/><text x="57.7679%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="57.4383%" y="613" width="0.3182%" height="15" fill="rgb(218,117,39)" fg:x="722" fg:w="4"/><text x="57.6883%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="57.6770%" y="597" width="0.0796%" height="15" fill="rgb(248,169,11)" fg:x="725" fg:w="1"/><text x="57.9270%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="57.6770%" y="581" width="0.0796%" height="15" fill="rgb(244,40,44)" fg:x="725" fg:w="1"/><text x="57.9270%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="57.6770%" y="565" width="0.0796%" height="15" fill="rgb(234,62,37)" fg:x="725" fg:w="1"/><text x="57.9270%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="57.6770%" y="549" width="0.0796%" height="15" fill="rgb(207,117,42)" fg:x="725" fg:w="1"/><text x="57.9270%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="57.6770%" y="533" width="0.0796%" height="15" fill="rgb(213,43,2)" fg:x="725" fg:w="1"/><text x="57.9270%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="57.6770%" y="517" width="0.0796%" height="15" fill="rgb(244,202,51)" fg:x="725" fg:w="1"/><text x="57.9270%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.16%)</title><rect x="57.7566%" y="613" width="0.1591%" height="15" fill="rgb(253,174,46)" fg:x="726" fg:w="2"/><text x="58.0066%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="57.7566%" y="597" width="0.1591%" height="15" fill="rgb(251,23,1)" fg:x="726" fg:w="2"/><text x="58.0066%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="57.8361%" y="581" width="0.0796%" height="15" fill="rgb(253,26,1)" fg:x="727" fg:w="1"/><text x="58.0861%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="57.8361%" y="565" width="0.0796%" height="15" fill="rgb(216,89,31)" fg:x="727" fg:w="1"/><text x="58.0861%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="57.9157%" y="549" width="0.2387%" height="15" fill="rgb(209,109,5)" fg:x="728" fg:w="3"/><text x="58.1657%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="58.0748%" y="533" width="0.0796%" height="15" fill="rgb(229,63,13)" fg:x="730" fg:w="1"/><text x="58.3248%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="58.0748%" y="517" width="0.0796%" height="15" fill="rgb(238,137,54)" fg:x="730" fg:w="1"/><text x="58.3248%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="58.0748%" y="501" width="0.0796%" height="15" fill="rgb(228,1,9)" fg:x="730" fg:w="1"/><text x="58.3248%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="58.0748%" y="485" width="0.0796%" height="15" fill="rgb(249,120,48)" fg:x="730" fg:w="1"/><text x="58.3248%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.1543%" y="533" width="0.0796%" height="15" fill="rgb(209,72,36)" fg:x="731" fg:w="1"/><text x="58.4043%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="58.2339%" y="437" width="0.0796%" height="15" fill="rgb(247,98,49)" fg:x="732" fg:w="1"/><text x="58.4839%" y="447.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="58.2339%" y="421" width="0.0796%" height="15" fill="rgb(233,75,36)" fg:x="732" fg:w="1"/><text x="58.4839%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="58.2339%" y="405" width="0.0796%" height="15" fill="rgb(225,14,24)" fg:x="732" fg:w="1"/><text x="58.4839%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="58.2339%" y="389" width="0.0796%" height="15" fill="rgb(237,193,20)" fg:x="732" fg:w="1"/><text x="58.4839%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="58.2339%" y="373" width="0.0796%" height="15" fill="rgb(239,122,19)" fg:x="732" fg:w="1"/><text x="58.4839%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.2339%" y="357" width="0.0796%" height="15" fill="rgb(231,220,10)" fg:x="732" fg:w="1"/><text x="58.4839%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.2339%" y="341" width="0.0796%" height="15" fill="rgb(220,66,15)" fg:x="732" fg:w="1"/><text x="58.4839%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.2339%" y="325" width="0.0796%" height="15" fill="rgb(215,171,52)" fg:x="732" fg:w="1"/><text x="58.4839%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.2339%" y="309" width="0.0796%" height="15" fill="rgb(241,169,50)" fg:x="732" fg:w="1"/><text x="58.4839%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.2339%" y="293" width="0.0796%" height="15" fill="rgb(236,189,0)" fg:x="732" fg:w="1"/><text x="58.4839%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.2339%" y="277" width="0.0796%" height="15" fill="rgb(217,147,20)" fg:x="732" fg:w="1"/><text x="58.4839%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.2339%" y="261" width="0.0796%" height="15" fill="rgb(206,188,39)" fg:x="732" fg:w="1"/><text x="58.4839%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.2339%" y="245" width="0.0796%" height="15" fill="rgb(227,118,25)" fg:x="732" fg:w="1"/><text x="58.4839%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.2339%" y="229" width="0.0796%" height="15" fill="rgb(248,171,40)" fg:x="732" fg:w="1"/><text x="58.4839%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.2339%" y="213" width="0.0796%" height="15" fill="rgb(251,90,54)" fg:x="732" fg:w="1"/><text x="58.4839%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.2339%" y="197" width="0.0796%" height="15" fill="rgb(234,11,46)" fg:x="732" fg:w="1"/><text x="58.4839%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.2339%" y="181" width="0.0796%" height="15" fill="rgb(229,134,13)" fg:x="732" fg:w="1"/><text x="58.4839%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.2339%" y="165" width="0.0796%" height="15" fill="rgb(223,129,3)" fg:x="732" fg:w="1"/><text x="58.4839%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.2339%" y="149" width="0.0796%" height="15" fill="rgb(221,124,13)" fg:x="732" fg:w="1"/><text x="58.4839%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.2339%" y="133" width="0.0796%" height="15" fill="rgb(234,3,18)" fg:x="732" fg:w="1"/><text x="58.4839%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.2339%" y="117" width="0.0796%" height="15" fill="rgb(249,199,20)" fg:x="732" fg:w="1"/><text x="58.4839%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.2339%" y="101" width="0.0796%" height="15" fill="rgb(224,134,6)" fg:x="732" fg:w="1"/><text x="58.4839%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.3134%" y="389" width="0.0796%" height="15" fill="rgb(254,83,26)" fg:x="733" fg:w="1"/><text x="58.5634%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.3134%" y="373" width="0.0796%" height="15" fill="rgb(217,88,9)" fg:x="733" fg:w="1"/><text x="58.5634%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.3134%" y="357" width="0.0796%" height="15" fill="rgb(225,73,2)" fg:x="733" fg:w="1"/><text x="58.5634%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.3134%" y="341" width="0.0796%" height="15" fill="rgb(226,44,39)" fg:x="733" fg:w="1"/><text x="58.5634%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="58.2339%" y="485" width="0.2387%" height="15" fill="rgb(228,53,17)" fg:x="732" fg:w="3"/><text x="58.4839%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="58.2339%" y="469" width="0.2387%" height="15" fill="rgb(212,27,27)" fg:x="732" fg:w="3"/><text x="58.4839%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="58.2339%" y="453" width="0.2387%" height="15" fill="rgb(241,50,6)" fg:x="732" fg:w="3"/><text x="58.4839%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="58.3134%" y="437" width="0.1591%" height="15" fill="rgb(225,28,51)" fg:x="733" fg:w="2"/><text x="58.5634%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="58.3134%" y="421" width="0.1591%" height="15" fill="rgb(215,33,16)" fg:x="733" fg:w="2"/><text x="58.5634%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.3134%" y="405" width="0.1591%" height="15" fill="rgb(243,40,39)" fg:x="733" fg:w="2"/><text x="58.5634%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.3930%" y="389" width="0.0796%" height="15" fill="rgb(225,11,42)" fg:x="734" fg:w="1"/><text x="58.6430%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.3930%" y="373" width="0.0796%" height="15" fill="rgb(241,220,38)" fg:x="734" fg:w="1"/><text x="58.6430%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="58.1543%" y="549" width="0.3978%" height="15" fill="rgb(244,52,35)" fg:x="731" fg:w="5"/><text x="58.4043%" y="559.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (4 samples, 0.32%)</title><rect x="58.2339%" y="533" width="0.3182%" height="15" fill="rgb(246,42,46)" fg:x="732" fg:w="4"/><text x="58.4839%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (4 samples, 0.32%)</title><rect x="58.2339%" y="517" width="0.3182%" height="15" fill="rgb(205,184,13)" fg:x="732" fg:w="4"/><text x="58.4839%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="58.2339%" y="501" width="0.3182%" height="15" fill="rgb(209,48,36)" fg:x="732" fg:w="4"/><text x="58.4839%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.4726%" y="485" width="0.0796%" height="15" fill="rgb(244,34,51)" fg:x="735" fg:w="1"/><text x="58.7226%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.4726%" y="469" width="0.0796%" height="15" fill="rgb(221,107,33)" fg:x="735" fg:w="1"/><text x="58.7226%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.4726%" y="453" width="0.0796%" height="15" fill="rgb(224,203,12)" fg:x="735" fg:w="1"/><text x="58.7226%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.4726%" y="437" width="0.0796%" height="15" fill="rgb(230,215,18)" fg:x="735" fg:w="1"/><text x="58.7226%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.5521%" y="517" width="0.0796%" height="15" fill="rgb(206,185,35)" fg:x="736" fg:w="1"/><text x="58.8021%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.5521%" y="501" width="0.0796%" height="15" fill="rgb(228,140,34)" fg:x="736" fg:w="1"/><text x="58.8021%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6317%" y="517" width="0.0796%" height="15" fill="rgb(208,93,13)" fg:x="737" fg:w="1"/><text x="58.8817%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.7112%" y="485" width="0.0796%" height="15" fill="rgb(221,193,39)" fg:x="738" fg:w="1"/><text x="58.9612%" y="495.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (12 samples, 0.95%)</title><rect x="57.9157%" y="565" width="0.9547%" height="15" fill="rgb(241,132,34)" fg:x="728" fg:w="12"/><text x="58.1657%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="58.5521%" y="549" width="0.3182%" height="15" fill="rgb(221,141,10)" fg:x="736" fg:w="4"/><text x="58.8021%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="58.5521%" y="533" width="0.3182%" height="15" fill="rgb(226,90,31)" fg:x="736" fg:w="4"/><text x="58.8021%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="58.7112%" y="517" width="0.1591%" height="15" fill="rgb(243,75,5)" fg:x="738" fg:w="2"/><text x="58.9612%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.7112%" y="501" width="0.1591%" height="15" fill="rgb(227,156,21)" fg:x="738" fg:w="2"/><text x="58.9612%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="58.7908%" y="485" width="0.0796%" height="15" fill="rgb(250,195,8)" fg:x="739" fg:w="1"/><text x="59.0408%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="58.7908%" y="469" width="0.0796%" height="15" fill="rgb(220,134,5)" fg:x="739" fg:w="1"/><text x="59.0408%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="58.7908%" y="453" width="0.0796%" height="15" fill="rgb(246,106,34)" fg:x="739" fg:w="1"/><text x="59.0408%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.7908%" y="437" width="0.0796%" height="15" fill="rgb(205,1,4)" fg:x="739" fg:w="1"/><text x="59.0408%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.7908%" y="421" width="0.0796%" height="15" fill="rgb(224,151,29)" fg:x="739" fg:w="1"/><text x="59.0408%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.9499%" y="485" width="0.0796%" height="15" fill="rgb(251,196,0)" fg:x="741" fg:w="1"/><text x="59.1999%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.9499%" y="469" width="0.0796%" height="15" fill="rgb(212,127,0)" fg:x="741" fg:w="1"/><text x="59.1999%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.9499%" y="453" width="0.0796%" height="15" fill="rgb(236,71,53)" fg:x="741" fg:w="1"/><text x="59.1999%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.9499%" y="437" width="0.0796%" height="15" fill="rgb(227,99,0)" fg:x="741" fg:w="1"/><text x="59.1999%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.9499%" y="421" width="0.0796%" height="15" fill="rgb(239,89,21)" fg:x="741" fg:w="1"/><text x="59.1999%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.9499%" y="405" width="0.0796%" height="15" fill="rgb(243,122,19)" fg:x="741" fg:w="1"/><text x="59.1999%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.9499%" y="389" width="0.0796%" height="15" fill="rgb(229,192,45)" fg:x="741" fg:w="1"/><text x="59.1999%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.9499%" y="373" width="0.0796%" height="15" fill="rgb(235,165,35)" fg:x="741" fg:w="1"/><text x="59.1999%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.9499%" y="357" width="0.0796%" height="15" fill="rgb(253,202,0)" fg:x="741" fg:w="1"/><text x="59.1999%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.9499%" y="341" width="0.0796%" height="15" fill="rgb(235,51,20)" fg:x="741" fg:w="1"/><text x="59.1999%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.9499%" y="325" width="0.0796%" height="15" fill="rgb(218,95,46)" fg:x="741" fg:w="1"/><text x="59.1999%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.9499%" y="309" width="0.0796%" height="15" fill="rgb(212,81,10)" fg:x="741" fg:w="1"/><text x="59.1999%" y="319.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="58.9499%" y="517" width="0.1591%" height="15" fill="rgb(240,59,0)" fg:x="741" fg:w="2"/><text x="59.1999%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.9499%" y="501" width="0.1591%" height="15" fill="rgb(212,191,42)" fg:x="741" fg:w="2"/><text x="59.1999%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.0294%" y="485" width="0.0796%" height="15" fill="rgb(233,140,3)" fg:x="742" fg:w="1"/><text x="59.2794%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0294%" y="469" width="0.0796%" height="15" fill="rgb(215,69,23)" fg:x="742" fg:w="1"/><text x="59.2794%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.0294%" y="453" width="0.0796%" height="15" fill="rgb(240,202,20)" fg:x="742" fg:w="1"/><text x="59.2794%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.0294%" y="437" width="0.0796%" height="15" fill="rgb(209,146,50)" fg:x="742" fg:w="1"/><text x="59.2794%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.0294%" y="421" width="0.0796%" height="15" fill="rgb(253,102,54)" fg:x="742" fg:w="1"/><text x="59.2794%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.0294%" y="405" width="0.0796%" height="15" fill="rgb(250,173,47)" fg:x="742" fg:w="1"/><text x="59.2794%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.0294%" y="389" width="0.0796%" height="15" fill="rgb(232,142,7)" fg:x="742" fg:w="1"/><text x="59.2794%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.0294%" y="373" width="0.0796%" height="15" fill="rgb(230,157,47)" fg:x="742" fg:w="1"/><text x="59.2794%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.0294%" y="357" width="0.0796%" height="15" fill="rgb(214,177,35)" fg:x="742" fg:w="1"/><text x="59.2794%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.0294%" y="341" width="0.0796%" height="15" fill="rgb(234,119,46)" fg:x="742" fg:w="1"/><text x="59.2794%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.0294%" y="325" width="0.0796%" height="15" fill="rgb(241,180,50)" fg:x="742" fg:w="1"/><text x="59.2794%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.0294%" y="309" width="0.0796%" height="15" fill="rgb(221,54,25)" fg:x="742" fg:w="1"/><text x="59.2794%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.0294%" y="293" width="0.0796%" height="15" fill="rgb(209,157,44)" fg:x="742" fg:w="1"/><text x="59.2794%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.0294%" y="277" width="0.0796%" height="15" fill="rgb(246,115,41)" fg:x="742" fg:w="1"/><text x="59.2794%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="59.1090%" y="389" width="0.0796%" height="15" fill="rgb(229,86,1)" fg:x="743" fg:w="1"/><text x="59.3590%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="59.1090%" y="373" width="0.0796%" height="15" fill="rgb(240,108,53)" fg:x="743" fg:w="1"/><text x="59.3590%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="59.1090%" y="357" width="0.0796%" height="15" fill="rgb(227,134,2)" fg:x="743" fg:w="1"/><text x="59.3590%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1090%" y="341" width="0.0796%" height="15" fill="rgb(213,129,25)" fg:x="743" fg:w="1"/><text x="59.3590%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1090%" y="325" width="0.0796%" height="15" fill="rgb(226,35,21)" fg:x="743" fg:w="1"/><text x="59.3590%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1090%" y="309" width="0.0796%" height="15" fill="rgb(208,129,26)" fg:x="743" fg:w="1"/><text x="59.3590%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.1090%" y="293" width="0.0796%" height="15" fill="rgb(224,83,6)" fg:x="743" fg:w="1"/><text x="59.3590%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.1090%" y="277" width="0.0796%" height="15" fill="rgb(227,52,39)" fg:x="743" fg:w="1"/><text x="59.3590%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.1090%" y="261" width="0.0796%" height="15" fill="rgb(241,30,17)" fg:x="743" fg:w="1"/><text x="59.3590%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.1090%" y="245" width="0.0796%" height="15" fill="rgb(246,186,42)" fg:x="743" fg:w="1"/><text x="59.3590%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.1090%" y="229" width="0.0796%" height="15" fill="rgb(221,169,15)" fg:x="743" fg:w="1"/><text x="59.3590%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.1090%" y="213" width="0.0796%" height="15" fill="rgb(235,108,21)" fg:x="743" fg:w="1"/><text x="59.3590%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.1090%" y="197" width="0.0796%" height="15" fill="rgb(219,148,30)" fg:x="743" fg:w="1"/><text x="59.3590%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.1090%" y="181" width="0.0796%" height="15" fill="rgb(220,109,5)" fg:x="743" fg:w="1"/><text x="59.3590%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.1090%" y="165" width="0.0796%" height="15" fill="rgb(213,203,48)" fg:x="743" fg:w="1"/><text x="59.3590%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.1090%" y="149" width="0.0796%" height="15" fill="rgb(244,71,33)" fg:x="743" fg:w="1"/><text x="59.3590%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.1090%" y="133" width="0.0796%" height="15" fill="rgb(209,23,2)" fg:x="743" fg:w="1"/><text x="59.3590%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.1090%" y="117" width="0.0796%" height="15" fill="rgb(219,97,7)" fg:x="743" fg:w="1"/><text x="59.3590%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.1090%" y="101" width="0.0796%" height="15" fill="rgb(216,161,23)" fg:x="743" fg:w="1"/><text x="59.3590%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="59.1885%" y="373" width="0.0796%" height="15" fill="rgb(207,45,42)" fg:x="744" fg:w="1"/><text x="59.4385%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.1885%" y="357" width="0.0796%" height="15" fill="rgb(241,61,4)" fg:x="744" fg:w="1"/><text x="59.4385%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="59.1090%" y="421" width="0.2387%" height="15" fill="rgb(236,170,1)" fg:x="743" fg:w="3"/><text x="59.3590%" y="431.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="59.1090%" y="405" width="0.2387%" height="15" fill="rgb(239,72,5)" fg:x="743" fg:w="3"/><text x="59.3590%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="59.1885%" y="389" width="0.1591%" height="15" fill="rgb(214,13,50)" fg:x="744" fg:w="2"/><text x="59.4385%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="59.2681%" y="373" width="0.0796%" height="15" fill="rgb(224,88,9)" fg:x="745" fg:w="1"/><text x="59.5181%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="59.2681%" y="357" width="0.0796%" height="15" fill="rgb(238,192,34)" fg:x="745" fg:w="1"/><text x="59.5181%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.2681%" y="341" width="0.0796%" height="15" fill="rgb(217,203,50)" fg:x="745" fg:w="1"/><text x="59.5181%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.2681%" y="325" width="0.0796%" height="15" fill="rgb(241,123,32)" fg:x="745" fg:w="1"/><text x="59.5181%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.2681%" y="309" width="0.0796%" height="15" fill="rgb(248,151,39)" fg:x="745" fg:w="1"/><text x="59.5181%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.2681%" y="293" width="0.0796%" height="15" fill="rgb(208,89,6)" fg:x="745" fg:w="1"/><text x="59.5181%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.2681%" y="277" width="0.0796%" height="15" fill="rgb(254,43,26)" fg:x="745" fg:w="1"/><text x="59.5181%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.2681%" y="261" width="0.0796%" height="15" fill="rgb(216,158,13)" fg:x="745" fg:w="1"/><text x="59.5181%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.2681%" y="245" width="0.0796%" height="15" fill="rgb(212,47,37)" fg:x="745" fg:w="1"/><text x="59.5181%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.2681%" y="229" width="0.0796%" height="15" fill="rgb(254,16,10)" fg:x="745" fg:w="1"/><text x="59.5181%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.2681%" y="213" width="0.0796%" height="15" fill="rgb(223,228,16)" fg:x="745" fg:w="1"/><text x="59.5181%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.2681%" y="197" width="0.0796%" height="15" fill="rgb(249,108,50)" fg:x="745" fg:w="1"/><text x="59.5181%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.2681%" y="181" width="0.0796%" height="15" fill="rgb(208,220,5)" fg:x="745" fg:w="1"/><text x="59.5181%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.2681%" y="165" width="0.0796%" height="15" fill="rgb(217,89,48)" fg:x="745" fg:w="1"/><text x="59.5181%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.2681%" y="149" width="0.0796%" height="15" fill="rgb(212,113,41)" fg:x="745" fg:w="1"/><text x="59.5181%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.2681%" y="133" width="0.0796%" height="15" fill="rgb(231,127,5)" fg:x="745" fg:w="1"/><text x="59.5181%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.2681%" y="117" width="0.0796%" height="15" fill="rgb(217,141,17)" fg:x="745" fg:w="1"/><text x="59.5181%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2681%" y="101" width="0.0796%" height="15" fill="rgb(245,125,54)" fg:x="745" fg:w="1"/><text x="59.5181%" y="111.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="59.3477%" y="405" width="0.0796%" height="15" fill="rgb(248,125,3)" fg:x="746" fg:w="1"/><text x="59.5977%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.3477%" y="389" width="0.0796%" height="15" fill="rgb(236,119,51)" fg:x="746" fg:w="1"/><text x="59.5977%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.3477%" y="373" width="0.0796%" height="15" fill="rgb(239,99,8)" fg:x="746" fg:w="1"/><text x="59.5977%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.3477%" y="357" width="0.0796%" height="15" fill="rgb(224,228,4)" fg:x="746" fg:w="1"/><text x="59.5977%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.3477%" y="341" width="0.0796%" height="15" fill="rgb(220,131,45)" fg:x="746" fg:w="1"/><text x="59.5977%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.3477%" y="325" width="0.0796%" height="15" fill="rgb(215,62,5)" fg:x="746" fg:w="1"/><text x="59.5977%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.3477%" y="309" width="0.0796%" height="15" fill="rgb(253,12,24)" fg:x="746" fg:w="1"/><text x="59.5977%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="59.3477%" y="293" width="0.0796%" height="15" fill="rgb(248,120,50)" fg:x="746" fg:w="1"/><text x="59.5977%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.3477%" y="277" width="0.0796%" height="15" fill="rgb(245,194,10)" fg:x="746" fg:w="1"/><text x="59.5977%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.3477%" y="261" width="0.0796%" height="15" fill="rgb(241,149,38)" fg:x="746" fg:w="1"/><text x="59.5977%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.3477%" y="245" width="0.0796%" height="15" fill="rgb(219,215,7)" fg:x="746" fg:w="1"/><text x="59.5977%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="59.4272%" y="373" width="0.0796%" height="15" fill="rgb(208,120,31)" fg:x="747" fg:w="1"/><text x="59.6772%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="59.5068%" y="373" width="0.1591%" height="15" fill="rgb(244,30,8)" fg:x="748" fg:w="2"/><text x="59.7568%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.5068%" y="357" width="0.1591%" height="15" fill="rgb(238,35,44)" fg:x="748" fg:w="2"/><text x="59.7568%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.5068%" y="341" width="0.1591%" height="15" fill="rgb(243,218,37)" fg:x="748" fg:w="2"/><text x="59.7568%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.5068%" y="325" width="0.1591%" height="15" fill="rgb(218,169,10)" fg:x="748" fg:w="2"/><text x="59.7568%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.5068%" y="309" width="0.1591%" height="15" fill="rgb(221,144,10)" fg:x="748" fg:w="2"/><text x="59.7568%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="59.5863%" y="293" width="0.0796%" height="15" fill="rgb(226,41,38)" fg:x="749" fg:w="1"/><text x="59.8363%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.5863%" y="277" width="0.0796%" height="15" fill="rgb(228,3,1)" fg:x="749" fg:w="1"/><text x="59.8363%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.5863%" y="261" width="0.0796%" height="15" fill="rgb(209,129,12)" fg:x="749" fg:w="1"/><text x="59.8363%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="59.5863%" y="245" width="0.0796%" height="15" fill="rgb(213,136,33)" fg:x="749" fg:w="1"/><text x="59.8363%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.5863%" y="229" width="0.0796%" height="15" fill="rgb(209,181,29)" fg:x="749" fg:w="1"/><text x="59.8363%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.5863%" y="213" width="0.0796%" height="15" fill="rgb(234,173,18)" fg:x="749" fg:w="1"/><text x="59.8363%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="59.5863%" y="197" width="0.0796%" height="15" fill="rgb(227,73,47)" fg:x="749" fg:w="1"/><text x="59.8363%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.5863%" y="181" width="0.0796%" height="15" fill="rgb(234,9,34)" fg:x="749" fg:w="1"/><text x="59.8363%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.5863%" y="165" width="0.0796%" height="15" fill="rgb(235,172,15)" fg:x="749" fg:w="1"/><text x="59.8363%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.5863%" y="149" width="0.0796%" height="15" fill="rgb(245,61,2)" fg:x="749" fg:w="1"/><text x="59.8363%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.48%)</title><rect x="59.3477%" y="421" width="0.4773%" height="15" fill="rgb(238,39,47)" fg:x="746" fg:w="6"/><text x="59.5977%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="59.4272%" y="405" width="0.3978%" height="15" fill="rgb(234,37,24)" fg:x="747" fg:w="5"/><text x="59.6772%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="59.4272%" y="389" width="0.3978%" height="15" fill="rgb(248,223,24)" fg:x="747" fg:w="5"/><text x="59.6772%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.6659%" y="373" width="0.1591%" height="15" fill="rgb(223,12,15)" fg:x="750" fg:w="2"/><text x="59.9159%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.6659%" y="357" width="0.1591%" height="15" fill="rgb(249,6,3)" fg:x="750" fg:w="2"/><text x="59.9159%" y="367.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (10 samples, 0.80%)</title><rect x="59.1090%" y="517" width="0.7955%" height="15" fill="rgb(237,105,33)" fg:x="743" fg:w="10"/><text x="59.3590%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.80%)</title><rect x="59.1090%" y="501" width="0.7955%" height="15" fill="rgb(252,208,35)" fg:x="743" fg:w="10"/><text x="59.3590%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="59.1090%" y="485" width="0.7955%" height="15" fill="rgb(215,181,35)" fg:x="743" fg:w="10"/><text x="59.3590%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (10 samples, 0.80%)</title><rect x="59.1090%" y="469" width="0.7955%" height="15" fill="rgb(246,212,3)" fg:x="743" fg:w="10"/><text x="59.3590%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (10 samples, 0.80%)</title><rect x="59.1090%" y="453" width="0.7955%" height="15" fill="rgb(247,156,24)" fg:x="743" fg:w="10"/><text x="59.3590%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="59.1090%" y="437" width="0.7955%" height="15" fill="rgb(248,9,31)" fg:x="743" fg:w="10"/><text x="59.3590%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="59.8250%" y="421" width="0.0796%" height="15" fill="rgb(234,26,45)" fg:x="752" fg:w="1"/><text x="60.0750%" y="431.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="59.8250%" y="405" width="0.0796%" height="15" fill="rgb(249,11,32)" fg:x="752" fg:w="1"/><text x="60.0750%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="59.8250%" y="389" width="0.0796%" height="15" fill="rgb(249,162,33)" fg:x="752" fg:w="1"/><text x="60.0750%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.9045%" y="517" width="0.0796%" height="15" fill="rgb(232,4,32)" fg:x="753" fg:w="1"/><text x="60.1545%" y="527.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="59.9841%" y="517" width="0.0796%" height="15" fill="rgb(212,5,45)" fg:x="754" fg:w="1"/><text x="60.2341%" y="527.50"></text></g><g><title>plugins_core::tools::get_contained_keys (17 samples, 1.35%)</title><rect x="58.8703%" y="565" width="1.3524%" height="15" fill="rgb(227,95,13)" fg:x="740" fg:w="17"/><text x="59.1203%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (17 samples, 1.35%)</title><rect x="58.8703%" y="549" width="1.3524%" height="15" fill="rgb(223,205,10)" fg:x="740" fg:w="17"/><text x="59.1203%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (17 samples, 1.35%)</title><rect x="58.8703%" y="533" width="1.3524%" height="15" fill="rgb(222,178,8)" fg:x="740" fg:w="17"/><text x="59.1203%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.0636%" y="517" width="0.1591%" height="15" fill="rgb(216,13,22)" fg:x="755" fg:w="2"/><text x="60.3136%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.0636%" y="501" width="0.1591%" height="15" fill="rgb(240,167,12)" fg:x="755" fg:w="2"/><text x="60.3136%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="60.0636%" y="485" width="0.1591%" height="15" fill="rgb(235,68,35)" fg:x="755" fg:w="2"/><text x="60.3136%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="60.0636%" y="469" width="0.1591%" height="15" fill="rgb(253,40,27)" fg:x="755" fg:w="2"/><text x="60.3136%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="60.0636%" y="453" width="0.1591%" height="15" fill="rgb(214,19,28)" fg:x="755" fg:w="2"/><text x="60.3136%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="60.0636%" y="437" width="0.1591%" height="15" fill="rgb(210,167,45)" fg:x="755" fg:w="2"/><text x="60.3136%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.0636%" y="421" width="0.1591%" height="15" fill="rgb(232,97,40)" fg:x="755" fg:w="2"/><text x="60.3136%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="60.1432%" y="405" width="0.0796%" height="15" fill="rgb(250,35,23)" fg:x="756" fg:w="1"/><text x="60.3932%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.2228%" y="549" width="0.0796%" height="15" fill="rgb(248,47,53)" fg:x="757" fg:w="1"/><text x="60.4728%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.2228%" y="533" width="0.0796%" height="15" fill="rgb(226,58,50)" fg:x="757" fg:w="1"/><text x="60.4728%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.2228%" y="517" width="0.0796%" height="15" fill="rgb(217,105,26)" fg:x="757" fg:w="1"/><text x="60.4728%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.2228%" y="501" width="0.0796%" height="15" fill="rgb(208,64,1)" fg:x="757" fg:w="1"/><text x="60.4728%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.2228%" y="485" width="0.0796%" height="15" fill="rgb(214,80,1)" fg:x="757" fg:w="1"/><text x="60.4728%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.2228%" y="469" width="0.0796%" height="15" fill="rgb(206,175,26)" fg:x="757" fg:w="1"/><text x="60.4728%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.2228%" y="453" width="0.0796%" height="15" fill="rgb(235,156,37)" fg:x="757" fg:w="1"/><text x="60.4728%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.2228%" y="437" width="0.0796%" height="15" fill="rgb(213,100,9)" fg:x="757" fg:w="1"/><text x="60.4728%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.2228%" y="421" width="0.0796%" height="15" fill="rgb(241,15,13)" fg:x="757" fg:w="1"/><text x="60.4728%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.2228%" y="405" width="0.0796%" height="15" fill="rgb(205,97,43)" fg:x="757" fg:w="1"/><text x="60.4728%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.2228%" y="389" width="0.0796%" height="15" fill="rgb(216,106,32)" fg:x="757" fg:w="1"/><text x="60.4728%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.2228%" y="373" width="0.0796%" height="15" fill="rgb(226,200,8)" fg:x="757" fg:w="1"/><text x="60.4728%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.2228%" y="357" width="0.0796%" height="15" fill="rgb(244,54,29)" fg:x="757" fg:w="1"/><text x="60.4728%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 2.55%)</title><rect x="57.9157%" y="597" width="2.5457%" height="15" fill="rgb(252,169,12)" fg:x="728" fg:w="32"/><text x="58.1657%" y="607.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 2.55%)</title><rect x="57.9157%" y="581" width="2.5457%" height="15" fill="rgb(231,199,11)" fg:x="728" fg:w="32"/><text x="58.1657%" y="591.50">&lt;c..</text></g><g><title>plugins_core::tools::get_occupant_keys (3 samples, 0.24%)</title><rect x="60.2228%" y="565" width="0.2387%" height="15" fill="rgb(233,191,18)" fg:x="757" fg:w="3"/><text x="60.4728%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="60.3023%" y="549" width="0.1591%" height="15" fill="rgb(215,83,47)" fg:x="758" fg:w="2"/><text x="60.5523%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="60.3023%" y="533" width="0.1591%" height="15" fill="rgb(251,67,19)" fg:x="758" fg:w="2"/><text x="60.5523%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.3819%" y="517" width="0.0796%" height="15" fill="rgb(240,7,20)" fg:x="759" fg:w="1"/><text x="60.6319%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.3819%" y="501" width="0.0796%" height="15" fill="rgb(210,150,26)" fg:x="759" fg:w="1"/><text x="60.6319%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3819%" y="485" width="0.0796%" height="15" fill="rgb(228,75,42)" fg:x="759" fg:w="1"/><text x="60.6319%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5410%" y="549" width="0.0796%" height="15" fill="rgb(237,134,48)" fg:x="761" fg:w="1"/><text x="60.7910%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.5410%" y="533" width="0.0796%" height="15" fill="rgb(205,80,50)" fg:x="761" fg:w="1"/><text x="60.7910%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.5410%" y="517" width="0.0796%" height="15" fill="rgb(217,74,48)" fg:x="761" fg:w="1"/><text x="60.7910%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.5410%" y="501" width="0.0796%" height="15" fill="rgb(205,82,50)" fg:x="761" fg:w="1"/><text x="60.7910%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.5410%" y="485" width="0.0796%" height="15" fill="rgb(228,1,33)" fg:x="761" fg:w="1"/><text x="60.7910%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.5410%" y="469" width="0.0796%" height="15" fill="rgb(214,50,23)" fg:x="761" fg:w="1"/><text x="60.7910%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.5410%" y="453" width="0.0796%" height="15" fill="rgb(210,62,9)" fg:x="761" fg:w="1"/><text x="60.7910%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.5410%" y="437" width="0.0796%" height="15" fill="rgb(210,104,37)" fg:x="761" fg:w="1"/><text x="60.7910%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.5410%" y="421" width="0.0796%" height="15" fill="rgb(232,104,43)" fg:x="761" fg:w="1"/><text x="60.7910%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.5410%" y="405" width="0.0796%" height="15" fill="rgb(244,52,6)" fg:x="761" fg:w="1"/><text x="60.7910%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.5410%" y="389" width="0.0796%" height="15" fill="rgb(211,174,52)" fg:x="761" fg:w="1"/><text x="60.7910%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5410%" y="373" width="0.0796%" height="15" fill="rgb(229,48,4)" fg:x="761" fg:w="1"/><text x="60.7910%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="60.6205%" y="549" width="0.1591%" height="15" fill="rgb(205,155,16)" fg:x="762" fg:w="2"/><text x="60.8705%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="60.6205%" y="533" width="0.1591%" height="15" fill="rgb(211,141,53)" fg:x="762" fg:w="2"/><text x="60.8705%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="60.6205%" y="517" width="0.1591%" height="15" fill="rgb(240,148,11)" fg:x="762" fg:w="2"/><text x="60.8705%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="60.6205%" y="501" width="0.1591%" height="15" fill="rgb(214,45,23)" fg:x="762" fg:w="2"/><text x="60.8705%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="60.6205%" y="485" width="0.1591%" height="15" fill="rgb(248,74,26)" fg:x="762" fg:w="2"/><text x="60.8705%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="60.6205%" y="469" width="0.1591%" height="15" fill="rgb(218,121,16)" fg:x="762" fg:w="2"/><text x="60.8705%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="60.6205%" y="453" width="0.1591%" height="15" fill="rgb(218,10,47)" fg:x="762" fg:w="2"/><text x="60.8705%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="60.6205%" y="437" width="0.1591%" height="15" fill="rgb(227,99,14)" fg:x="762" fg:w="2"/><text x="60.8705%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.7001%" y="421" width="0.0796%" height="15" fill="rgb(229,83,46)" fg:x="763" fg:w="1"/><text x="60.9501%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.7001%" y="405" width="0.0796%" height="15" fill="rgb(228,25,1)" fg:x="763" fg:w="1"/><text x="60.9501%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="60.7001%" y="389" width="0.0796%" height="15" fill="rgb(252,190,15)" fg:x="763" fg:w="1"/><text x="60.9501%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="60.7001%" y="373" width="0.0796%" height="15" fill="rgb(213,103,51)" fg:x="763" fg:w="1"/><text x="60.9501%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="60.7001%" y="357" width="0.0796%" height="15" fill="rgb(220,38,44)" fg:x="763" fg:w="1"/><text x="60.9501%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="60.7001%" y="341" width="0.0796%" height="15" fill="rgb(210,45,26)" fg:x="763" fg:w="1"/><text x="60.9501%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="60.7001%" y="325" width="0.0796%" height="15" fill="rgb(205,95,48)" fg:x="763" fg:w="1"/><text x="60.9501%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="60.7001%" y="309" width="0.0796%" height="15" fill="rgb(225,179,37)" fg:x="763" fg:w="1"/><text x="60.9501%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="60.7001%" y="293" width="0.0796%" height="15" fill="rgb(230,209,3)" fg:x="763" fg:w="1"/><text x="60.9501%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="60.7001%" y="277" width="0.0796%" height="15" fill="rgb(248,12,46)" fg:x="763" fg:w="1"/><text x="60.9501%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.7001%" y="261" width="0.0796%" height="15" fill="rgb(234,18,0)" fg:x="763" fg:w="1"/><text x="60.9501%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="60.7001%" y="245" width="0.0796%" height="15" fill="rgb(238,197,14)" fg:x="763" fg:w="1"/><text x="60.9501%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.08%)</title><rect x="60.7001%" y="229" width="0.0796%" height="15" fill="rgb(251,162,48)" fg:x="763" fg:w="1"/><text x="60.9501%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="60.8592%" y="213" width="0.0796%" height="15" fill="rgb(237,73,42)" fg:x="765" fg:w="1"/><text x="61.1092%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="60.8592%" y="197" width="0.0796%" height="15" fill="rgb(211,108,8)" fg:x="765" fg:w="1"/><text x="61.1092%" y="207.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.8592%" y="181" width="0.0796%" height="15" fill="rgb(213,45,22)" fg:x="765" fg:w="1"/><text x="61.1092%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="60.8592%" y="261" width="0.1591%" height="15" fill="rgb(252,154,5)" fg:x="765" fg:w="2"/><text x="61.1092%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="60.8592%" y="245" width="0.1591%" height="15" fill="rgb(221,79,52)" fg:x="765" fg:w="2"/><text x="61.1092%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.8592%" y="229" width="0.1591%" height="15" fill="rgb(229,220,36)" fg:x="765" fg:w="2"/><text x="61.1092%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="60.9387%" y="213" width="0.0796%" height="15" fill="rgb(211,17,16)" fg:x="766" fg:w="1"/><text x="61.1887%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9387%" y="197" width="0.0796%" height="15" fill="rgb(222,55,31)" fg:x="766" fg:w="1"/><text x="61.1887%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="60.8592%" y="341" width="0.3182%" height="15" fill="rgb(221,221,31)" fg:x="765" fg:w="4"/><text x="61.1092%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="60.8592%" y="325" width="0.3182%" height="15" fill="rgb(227,168,26)" fg:x="765" fg:w="4"/><text x="61.1092%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="60.8592%" y="309" width="0.3182%" height="15" fill="rgb(224,139,9)" fg:x="765" fg:w="4"/><text x="61.1092%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="60.8592%" y="293" width="0.3182%" height="15" fill="rgb(254,172,0)" fg:x="765" fg:w="4"/><text x="61.1092%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="60.8592%" y="277" width="0.3182%" height="15" fill="rgb(235,203,1)" fg:x="765" fg:w="4"/><text x="61.1092%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="61.0183%" y="261" width="0.1591%" height="15" fill="rgb(216,205,24)" fg:x="767" fg:w="2"/><text x="61.2683%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.0183%" y="245" width="0.1591%" height="15" fill="rgb(233,24,6)" fg:x="767" fg:w="2"/><text x="61.2683%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.48%)</title><rect x="60.7796%" y="437" width="0.4773%" height="15" fill="rgb(244,110,9)" fg:x="764" fg:w="6"/><text x="61.0296%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="60.7796%" y="421" width="0.4773%" height="15" fill="rgb(239,222,42)" fg:x="764" fg:w="6"/><text x="61.0296%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="60.7796%" y="405" width="0.4773%" height="15" fill="rgb(218,145,13)" fg:x="764" fg:w="6"/><text x="61.0296%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.48%)</title><rect x="60.7796%" y="389" width="0.4773%" height="15" fill="rgb(207,69,11)" fg:x="764" fg:w="6"/><text x="61.0296%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="60.8592%" y="373" width="0.3978%" height="15" fill="rgb(220,223,22)" fg:x="765" fg:w="5"/><text x="61.1092%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="60.8592%" y="357" width="0.3978%" height="15" fill="rgb(245,102,5)" fg:x="765" fg:w="5"/><text x="61.1092%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.1774%" y="341" width="0.0796%" height="15" fill="rgb(211,148,2)" fg:x="769" fg:w="1"/><text x="61.4274%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="61.1774%" y="325" width="0.0796%" height="15" fill="rgb(241,13,44)" fg:x="769" fg:w="1"/><text x="61.4274%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="61.1774%" y="309" width="0.0796%" height="15" fill="rgb(219,137,21)" fg:x="769" fg:w="1"/><text x="61.4274%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="60.7796%" y="453" width="0.5569%" height="15" fill="rgb(242,206,5)" fg:x="764" fg:w="7"/><text x="61.0296%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.2570%" y="437" width="0.0796%" height="15" fill="rgb(217,114,22)" fg:x="770" fg:w="1"/><text x="61.5070%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.64%)</title><rect x="60.7796%" y="533" width="0.6364%" height="15" fill="rgb(253,206,42)" fg:x="764" fg:w="8"/><text x="61.0296%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="60.7796%" y="517" width="0.6364%" height="15" fill="rgb(236,102,18)" fg:x="764" fg:w="8"/><text x="61.0296%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="60.7796%" y="501" width="0.6364%" height="15" fill="rgb(208,59,49)" fg:x="764" fg:w="8"/><text x="61.0296%" y="511.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.64%)</title><rect x="60.7796%" y="485" width="0.6364%" height="15" fill="rgb(215,194,28)" fg:x="764" fg:w="8"/><text x="61.0296%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="60.7796%" y="469" width="0.6364%" height="15" fill="rgb(243,207,11)" fg:x="764" fg:w="8"/><text x="61.0296%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="61.3365%" y="453" width="0.0796%" height="15" fill="rgb(254,179,35)" fg:x="771" fg:w="1"/><text x="61.5865%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.3365%" y="437" width="0.0796%" height="15" fill="rgb(235,97,3)" fg:x="771" fg:w="1"/><text x="61.5865%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.4161%" y="485" width="0.0796%" height="15" fill="rgb(215,155,33)" fg:x="772" fg:w="1"/><text x="61.6661%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.4161%" y="469" width="0.0796%" height="15" fill="rgb(223,128,12)" fg:x="772" fg:w="1"/><text x="61.6661%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4956%" y="453" width="0.0796%" height="15" fill="rgb(208,157,18)" fg:x="773" fg:w="1"/><text x="61.7456%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="61.4956%" y="485" width="0.1591%" height="15" fill="rgb(249,70,54)" fg:x="773" fg:w="2"/><text x="61.7456%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="61.4956%" y="469" width="0.1591%" height="15" fill="rgb(244,118,24)" fg:x="773" fg:w="2"/><text x="61.7456%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.5752%" y="453" width="0.0796%" height="15" fill="rgb(211,54,0)" fg:x="774" fg:w="1"/><text x="61.8252%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.5752%" y="437" width="0.0796%" height="15" fill="rgb(245,137,45)" fg:x="774" fg:w="1"/><text x="61.8252%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5752%" y="421" width="0.0796%" height="15" fill="rgb(232,154,31)" fg:x="774" fg:w="1"/><text x="61.8252%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.6547%" y="437" width="0.0796%" height="15" fill="rgb(253,6,39)" fg:x="775" fg:w="1"/><text x="61.9047%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.6547%" y="421" width="0.0796%" height="15" fill="rgb(234,183,24)" fg:x="775" fg:w="1"/><text x="61.9047%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6547%" y="405" width="0.0796%" height="15" fill="rgb(252,84,40)" fg:x="775" fg:w="1"/><text x="61.9047%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="61.6547%" y="453" width="0.2387%" height="15" fill="rgb(224,65,2)" fg:x="775" fg:w="3"/><text x="61.9047%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="61.7343%" y="437" width="0.1591%" height="15" fill="rgb(229,38,24)" fg:x="776" fg:w="2"/><text x="61.9843%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="61.7343%" y="421" width="0.1591%" height="15" fill="rgb(218,131,50)" fg:x="776" fg:w="2"/><text x="61.9843%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="61.7343%" y="405" width="0.1591%" height="15" fill="rgb(233,106,18)" fg:x="776" fg:w="2"/><text x="61.9843%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="61.7343%" y="389" width="0.1591%" height="15" fill="rgb(220,216,11)" fg:x="776" fg:w="2"/><text x="61.9843%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="61.7343%" y="373" width="0.1591%" height="15" fill="rgb(251,100,45)" fg:x="776" fg:w="2"/><text x="61.9843%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="61.8138%" y="357" width="0.0796%" height="15" fill="rgb(235,143,32)" fg:x="777" fg:w="1"/><text x="62.0638%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="61.8138%" y="341" width="0.0796%" height="15" fill="rgb(248,124,34)" fg:x="777" fg:w="1"/><text x="62.0638%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="61.6547%" y="469" width="0.3182%" height="15" fill="rgb(225,221,4)" fg:x="775" fg:w="4"/><text x="61.9047%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="61.8934%" y="453" width="0.0796%" height="15" fill="rgb(242,27,43)" fg:x="778" fg:w="1"/><text x="62.1434%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8934%" y="437" width="0.0796%" height="15" fill="rgb(227,54,8)" fg:x="778" fg:w="1"/><text x="62.1434%" y="447.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (16 samples, 1.27%)</title><rect x="60.7796%" y="549" width="1.2729%" height="15" fill="rgb(253,139,49)" fg:x="764" fg:w="16"/><text x="61.0296%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (8 samples, 0.64%)</title><rect x="61.4161%" y="533" width="0.6364%" height="15" fill="rgb(231,26,43)" fg:x="772" fg:w="8"/><text x="61.6661%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="61.4161%" y="517" width="0.6364%" height="15" fill="rgb(207,121,39)" fg:x="772" fg:w="8"/><text x="61.6661%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="61.4161%" y="501" width="0.6364%" height="15" fill="rgb(223,101,35)" fg:x="772" fg:w="8"/><text x="61.6661%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="61.6547%" y="485" width="0.3978%" height="15" fill="rgb(232,87,23)" fg:x="775" fg:w="5"/><text x="61.9047%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9730%" y="469" width="0.0796%" height="15" fill="rgb(225,180,29)" fg:x="779" fg:w="1"/><text x="62.2230%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0525%" y="549" width="0.0796%" height="15" fill="rgb(225,25,17)" fg:x="780" fg:w="1"/><text x="62.3025%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (635 samples, 50.52%)</title><rect x="11.6945%" y="693" width="50.5171%" height="15" fill="rgb(223,8,52)" fg:x="147" fg:w="635"/><text x="11.9445%" y="703.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (70 samples, 5.57%)</title><rect x="56.6428%" y="677" width="5.5688%" height="15" fill="rgb(246,42,21)" fg:x="712" fg:w="70"/><text x="56.8928%" y="687.50">kernel:..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (70 samples, 5.57%)</title><rect x="56.6428%" y="661" width="5.5688%" height="15" fill="rgb(205,64,43)" fg:x="712" fg:w="70"/><text x="56.8928%" y="671.50">&lt;plugin..</text></g><g><title>plugins_rpc::querying::have_surroundings (61 samples, 4.85%)</title><rect x="57.3588%" y="645" width="4.8528%" height="15" fill="rgb(221,160,13)" fg:x="721" fg:w="61"/><text x="57.6088%" y="655.50">plugin..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (61 samples, 4.85%)</title><rect x="57.3588%" y="629" width="4.8528%" height="15" fill="rgb(239,58,35)" fg:x="721" fg:w="61"/><text x="57.6088%" y="639.50">&lt;plugi..</text></g><g><title>core::iter::adapters::try_process (54 samples, 4.30%)</title><rect x="57.9157%" y="613" width="4.2959%" height="15" fill="rgb(251,26,40)" fg:x="728" fg:w="54"/><text x="58.1657%" y="623.50">core:..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (22 samples, 1.75%)</title><rect x="60.4614%" y="597" width="1.7502%" height="15" fill="rgb(247,0,4)" fg:x="760" fg:w="22"/><text x="60.7114%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22 samples, 1.75%)</title><rect x="60.4614%" y="581" width="1.7502%" height="15" fill="rgb(218,130,10)" fg:x="760" fg:w="22"/><text x="60.7114%" y="591.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (22 samples, 1.75%)</title><rect x="60.4614%" y="565" width="1.7502%" height="15" fill="rgb(239,32,7)" fg:x="760" fg:w="22"/><text x="60.7114%" y="575.50"></text></g><g><title>rpc_proto::&lt;impl core::convert::From&lt;&amp;rpc_proto::EntityKey&gt; for kernel::model::base::EntityKey&gt;::from (1 samples, 0.08%)</title><rect x="62.1321%" y="549" width="0.0796%" height="15" fill="rgb(210,192,24)" fg:x="781" fg:w="1"/><text x="62.3821%" y="559.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="62.1321%" y="533" width="0.0796%" height="15" fill="rgb(226,212,17)" fg:x="781" fg:w="1"/><text x="62.3821%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="62.2116%" y="677" width="0.0796%" height="15" fill="rgb(219,201,28)" fg:x="782" fg:w="1"/><text x="62.4616%" y="687.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.2912%" y="565" width="0.0796%" height="15" fill="rgb(235,207,41)" fg:x="783" fg:w="1"/><text x="62.5412%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="62.2912%" y="549" width="0.0796%" height="15" fill="rgb(241,95,54)" fg:x="783" fg:w="1"/><text x="62.5412%" y="559.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="62.2912%" y="645" width="0.1591%" height="15" fill="rgb(248,12,23)" fg:x="783" fg:w="2"/><text x="62.5412%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.2912%" y="629" width="0.1591%" height="15" fill="rgb(228,173,4)" fg:x="783" fg:w="2"/><text x="62.5412%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.2912%" y="613" width="0.1591%" height="15" fill="rgb(254,99,5)" fg:x="783" fg:w="2"/><text x="62.5412%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.2912%" y="597" width="0.1591%" height="15" fill="rgb(212,184,17)" fg:x="783" fg:w="2"/><text x="62.5412%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.2912%" y="581" width="0.1591%" height="15" fill="rgb(252,174,1)" fg:x="783" fg:w="2"/><text x="62.5412%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3707%" y="565" width="0.0796%" height="15" fill="rgb(241,118,51)" fg:x="784" fg:w="1"/><text x="62.6207%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3707%" y="549" width="0.0796%" height="15" fill="rgb(227,94,47)" fg:x="784" fg:w="1"/><text x="62.6207%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3707%" y="533" width="0.0796%" height="15" fill="rgb(229,104,2)" fg:x="784" fg:w="1"/><text x="62.6207%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3707%" y="517" width="0.0796%" height="15" fill="rgb(219,28,31)" fg:x="784" fg:w="1"/><text x="62.6207%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3707%" y="501" width="0.0796%" height="15" fill="rgb(233,109,36)" fg:x="784" fg:w="1"/><text x="62.6207%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3707%" y="485" width="0.0796%" height="15" fill="rgb(246,88,11)" fg:x="784" fg:w="1"/><text x="62.6207%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3707%" y="469" width="0.0796%" height="15" fill="rgb(209,212,17)" fg:x="784" fg:w="1"/><text x="62.6207%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3707%" y="453" width="0.0796%" height="15" fill="rgb(243,59,29)" fg:x="784" fg:w="1"/><text x="62.6207%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.3707%" y="437" width="0.0796%" height="15" fill="rgb(244,205,48)" fg:x="784" fg:w="1"/><text x="62.6207%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.3707%" y="421" width="0.0796%" height="15" fill="rgb(227,30,6)" fg:x="784" fg:w="1"/><text x="62.6207%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="62.2912%" y="661" width="0.2387%" height="15" fill="rgb(220,205,48)" fg:x="783" fg:w="3"/><text x="62.5412%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.4503%" y="645" width="0.0796%" height="15" fill="rgb(250,94,14)" fg:x="785" fg:w="1"/><text x="62.7003%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4503%" y="629" width="0.0796%" height="15" fill="rgb(216,119,42)" fg:x="785" fg:w="1"/><text x="62.7003%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.4503%" y="613" width="0.0796%" height="15" fill="rgb(232,155,0)" fg:x="785" fg:w="1"/><text x="62.7003%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4503%" y="597" width="0.0796%" height="15" fill="rgb(212,24,32)" fg:x="785" fg:w="1"/><text x="62.7003%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.4503%" y="581" width="0.0796%" height="15" fill="rgb(216,69,20)" fg:x="785" fg:w="1"/><text x="62.7003%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4503%" y="565" width="0.0796%" height="15" fill="rgb(229,73,31)" fg:x="785" fg:w="1"/><text x="62.7003%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.4503%" y="549" width="0.0796%" height="15" fill="rgb(224,219,20)" fg:x="785" fg:w="1"/><text x="62.7003%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.4503%" y="533" width="0.0796%" height="15" fill="rgb(215,146,41)" fg:x="785" fg:w="1"/><text x="62.7003%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.4503%" y="517" width="0.0796%" height="15" fill="rgb(244,71,31)" fg:x="785" fg:w="1"/><text x="62.7003%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="62.4503%" y="501" width="0.0796%" height="15" fill="rgb(224,24,11)" fg:x="785" fg:w="1"/><text x="62.7003%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="62.2116%" y="693" width="0.3978%" height="15" fill="rgb(229,76,15)" fg:x="782" fg:w="5"/><text x="62.4616%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="62.2912%" y="677" width="0.3182%" height="15" fill="rgb(209,93,2)" fg:x="783" fg:w="4"/><text x="62.5412%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.5298%" y="661" width="0.0796%" height="15" fill="rgb(216,200,50)" fg:x="786" fg:w="1"/><text x="62.7798%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.5298%" y="645" width="0.0796%" height="15" fill="rgb(211,67,34)" fg:x="786" fg:w="1"/><text x="62.7798%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.5298%" y="629" width="0.0796%" height="15" fill="rgb(225,87,47)" fg:x="786" fg:w="1"/><text x="62.7798%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5298%" y="613" width="0.0796%" height="15" fill="rgb(217,185,16)" fg:x="786" fg:w="1"/><text x="62.7798%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5298%" y="597" width="0.0796%" height="15" fill="rgb(205,0,0)" fg:x="786" fg:w="1"/><text x="62.7798%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5298%" y="581" width="0.0796%" height="15" fill="rgb(207,116,45)" fg:x="786" fg:w="1"/><text x="62.7798%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5298%" y="565" width="0.0796%" height="15" fill="rgb(221,156,26)" fg:x="786" fg:w="1"/><text x="62.7798%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.5298%" y="549" width="0.0796%" height="15" fill="rgb(213,140,4)" fg:x="786" fg:w="1"/><text x="62.7798%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="62.6094%" y="645" width="0.0796%" height="15" fill="rgb(231,224,15)" fg:x="787" fg:w="1"/><text x="62.8594%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="62.6094%" y="629" width="0.0796%" height="15" fill="rgb(244,76,20)" fg:x="787" fg:w="1"/><text x="62.8594%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.6094%" y="613" width="0.0796%" height="15" fill="rgb(238,117,7)" fg:x="787" fg:w="1"/><text x="62.8594%" y="623.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="62.6094%" y="597" width="0.0796%" height="15" fill="rgb(235,1,10)" fg:x="787" fg:w="1"/><text x="62.8594%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.6094%" y="581" width="0.0796%" height="15" fill="rgb(216,165,6)" fg:x="787" fg:w="1"/><text x="62.8594%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="62.6889%" y="645" width="0.0796%" height="15" fill="rgb(246,91,35)" fg:x="788" fg:w="1"/><text x="62.9389%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6889%" y="629" width="0.0796%" height="15" fill="rgb(228,96,24)" fg:x="788" fg:w="1"/><text x="62.9389%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6889%" y="613" width="0.0796%" height="15" fill="rgb(254,217,53)" fg:x="788" fg:w="1"/><text x="62.9389%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="62.6094%" y="693" width="0.2387%" height="15" fill="rgb(209,60,0)" fg:x="787" fg:w="3"/><text x="62.8594%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="62.6094%" y="677" width="0.2387%" height="15" fill="rgb(250,93,26)" fg:x="787" fg:w="3"/><text x="62.8594%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="62.6094%" y="661" width="0.2387%" height="15" fill="rgb(211,9,40)" fg:x="787" fg:w="3"/><text x="62.8594%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="62.7685%" y="645" width="0.0796%" height="15" fill="rgb(242,57,20)" fg:x="789" fg:w="1"/><text x="63.0185%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.7685%" y="629" width="0.0796%" height="15" fill="rgb(248,85,48)" fg:x="789" fg:w="1"/><text x="63.0185%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.7685%" y="613" width="0.0796%" height="15" fill="rgb(212,117,2)" fg:x="789" fg:w="1"/><text x="63.0185%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.7685%" y="597" width="0.0796%" height="15" fill="rgb(243,19,3)" fg:x="789" fg:w="1"/><text x="63.0185%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7685%" y="581" width="0.0796%" height="15" fill="rgb(232,217,24)" fg:x="789" fg:w="1"/><text x="63.0185%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.7685%" y="565" width="0.0796%" height="15" fill="rgb(224,175,40)" fg:x="789" fg:w="1"/><text x="63.0185%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7685%" y="549" width="0.0796%" height="15" fill="rgb(212,162,32)" fg:x="789" fg:w="1"/><text x="63.0185%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.7685%" y="533" width="0.0796%" height="15" fill="rgb(215,9,4)" fg:x="789" fg:w="1"/><text x="63.0185%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7685%" y="517" width="0.0796%" height="15" fill="rgb(242,42,7)" fg:x="789" fg:w="1"/><text x="63.0185%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.7685%" y="501" width="0.0796%" height="15" fill="rgb(242,184,45)" fg:x="789" fg:w="1"/><text x="63.0185%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7685%" y="485" width="0.0796%" height="15" fill="rgb(228,111,51)" fg:x="789" fg:w="1"/><text x="63.0185%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.7685%" y="469" width="0.0796%" height="15" fill="rgb(236,147,17)" fg:x="789" fg:w="1"/><text x="63.0185%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7685%" y="453" width="0.0796%" height="15" fill="rgb(210,75,22)" fg:x="789" fg:w="1"/><text x="63.0185%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.7685%" y="437" width="0.0796%" height="15" fill="rgb(217,159,45)" fg:x="789" fg:w="1"/><text x="63.0185%" y="447.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="62.8481%" y="693" width="0.0796%" height="15" fill="rgb(245,165,53)" fg:x="790" fg:w="1"/><text x="63.0981%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="62.8481%" y="677" width="0.0796%" height="15" fill="rgb(251,190,50)" fg:x="790" fg:w="1"/><text x="63.0981%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (792 samples, 63.01%)</title><rect x="0.0000%" y="757" width="63.0072%" height="15" fill="rgb(208,203,29)" fg:x="0" fg:w="792"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (792 samples, 63.01%)</title><rect x="0.0000%" y="741" width="63.0072%" height="15" fill="rgb(207,209,35)" fg:x="0" fg:w="792"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (792 samples, 63.01%)</title><rect x="0.0000%" y="725" width="63.0072%" height="15" fill="rgb(230,144,49)" fg:x="0" fg:w="792"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (647 samples, 51.47%)</title><rect x="11.5354%" y="709" width="51.4718%" height="15" fill="rgb(229,31,6)" fg:x="145" fg:w="647"/><text x="11.7854%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="62.9276%" y="693" width="0.0796%" height="15" fill="rgb(251,129,24)" fg:x="791" fg:w="1"/><text x="63.1776%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="62.9276%" y="677" width="0.0796%" height="15" fill="rgb(235,105,15)" fg:x="791" fg:w="1"/><text x="63.1776%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.9276%" y="661" width="0.0796%" height="15" fill="rgb(216,52,43)" fg:x="791" fg:w="1"/><text x="63.1776%" y="671.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.9276%" y="645" width="0.0796%" height="15" fill="rgb(238,144,41)" fg:x="791" fg:w="1"/><text x="63.1776%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.9276%" y="629" width="0.0796%" height="15" fill="rgb(243,63,9)" fg:x="791" fg:w="1"/><text x="63.1776%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.9276%" y="613" width="0.0796%" height="15" fill="rgb(246,208,1)" fg:x="791" fg:w="1"/><text x="63.1776%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.9276%" y="597" width="0.0796%" height="15" fill="rgb(233,182,18)" fg:x="791" fg:w="1"/><text x="63.1776%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.9276%" y="581" width="0.0796%" height="15" fill="rgb(242,224,8)" fg:x="791" fg:w="1"/><text x="63.1776%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.9276%" y="565" width="0.0796%" height="15" fill="rgb(243,54,37)" fg:x="791" fg:w="1"/><text x="63.1776%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.9276%" y="549" width="0.0796%" height="15" fill="rgb(233,192,12)" fg:x="791" fg:w="1"/><text x="63.1776%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.9276%" y="533" width="0.0796%" height="15" fill="rgb(251,192,53)" fg:x="791" fg:w="1"/><text x="63.1776%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.9276%" y="517" width="0.0796%" height="15" fill="rgb(246,141,26)" fg:x="791" fg:w="1"/><text x="63.1776%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.9276%" y="501" width="0.0796%" height="15" fill="rgb(239,195,19)" fg:x="791" fg:w="1"/><text x="63.1776%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.9276%" y="485" width="0.0796%" height="15" fill="rgb(241,16,39)" fg:x="791" fg:w="1"/><text x="63.1776%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.9276%" y="469" width="0.0796%" height="15" fill="rgb(223,13,53)" fg:x="791" fg:w="1"/><text x="63.1776%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.9276%" y="453" width="0.0796%" height="15" fill="rgb(214,227,0)" fg:x="791" fg:w="1"/><text x="63.1776%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.9276%" y="437" width="0.0796%" height="15" fill="rgb(228,103,26)" fg:x="791" fg:w="1"/><text x="63.1776%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9276%" y="421" width="0.0796%" height="15" fill="rgb(254,177,53)" fg:x="791" fg:w="1"/><text x="63.1776%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0072%" y="693" width="0.0796%" height="15" fill="rgb(208,201,34)" fg:x="792" fg:w="1"/><text x="63.2572%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0867%" y="565" width="0.0796%" height="15" fill="rgb(212,39,5)" fg:x="793" fg:w="1"/><text x="63.3367%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.0867%" y="613" width="0.1591%" height="15" fill="rgb(246,117,3)" fg:x="793" fg:w="2"/><text x="63.3367%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.0867%" y="597" width="0.1591%" height="15" fill="rgb(244,118,39)" fg:x="793" fg:w="2"/><text x="63.3367%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="63.0867%" y="581" width="0.1591%" height="15" fill="rgb(241,64,10)" fg:x="793" fg:w="2"/><text x="63.3367%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.1663%" y="565" width="0.0796%" height="15" fill="rgb(229,39,44)" fg:x="794" fg:w="1"/><text x="63.4163%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.1663%" y="549" width="0.0796%" height="15" fill="rgb(230,226,3)" fg:x="794" fg:w="1"/><text x="63.4163%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.1663%" y="533" width="0.0796%" height="15" fill="rgb(222,13,42)" fg:x="794" fg:w="1"/><text x="63.4163%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="63.0867%" y="629" width="0.3182%" height="15" fill="rgb(247,180,54)" fg:x="793" fg:w="4"/><text x="63.3367%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.2458%" y="613" width="0.1591%" height="15" fill="rgb(205,96,16)" fg:x="795" fg:w="2"/><text x="63.4958%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="63.0072%" y="709" width="0.4773%" height="15" fill="rgb(205,100,21)" fg:x="792" fg:w="6"/><text x="63.2572%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.40%)</title><rect x="63.0867%" y="693" width="0.3978%" height="15" fill="rgb(248,51,4)" fg:x="793" fg:w="5"/><text x="63.3367%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="63.0867%" y="677" width="0.3978%" height="15" fill="rgb(217,197,30)" fg:x="793" fg:w="5"/><text x="63.3367%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (5 samples, 0.40%)</title><rect x="63.0867%" y="661" width="0.3978%" height="15" fill="rgb(240,179,40)" fg:x="793" fg:w="5"/><text x="63.3367%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="63.0867%" y="645" width="0.3978%" height="15" fill="rgb(212,185,35)" fg:x="793" fg:w="5"/><text x="63.3367%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4049%" y="629" width="0.0796%" height="15" fill="rgb(251,222,31)" fg:x="797" fg:w="1"/><text x="63.6549%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="63.4845%" y="629" width="0.0796%" height="15" fill="rgb(208,140,36)" fg:x="798" fg:w="1"/><text x="63.7345%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="63.4845%" y="613" width="0.0796%" height="15" fill="rgb(220,148,1)" fg:x="798" fg:w="1"/><text x="63.7345%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="63.4845%" y="597" width="0.0796%" height="15" fill="rgb(254,4,28)" fg:x="798" fg:w="1"/><text x="63.7345%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="63.4845%" y="581" width="0.0796%" height="15" fill="rgb(222,185,44)" fg:x="798" fg:w="1"/><text x="63.7345%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.4845%" y="565" width="0.0796%" height="15" fill="rgb(215,74,39)" fg:x="798" fg:w="1"/><text x="63.7345%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="63.4845%" y="549" width="0.0796%" height="15" fill="rgb(247,86,4)" fg:x="798" fg:w="1"/><text x="63.7345%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="63.4845%" y="533" width="0.0796%" height="15" fill="rgb(231,105,32)" fg:x="798" fg:w="1"/><text x="63.7345%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="63.4845%" y="517" width="0.0796%" height="15" fill="rgb(222,65,35)" fg:x="798" fg:w="1"/><text x="63.7345%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.4845%" y="501" width="0.0796%" height="15" fill="rgb(218,145,35)" fg:x="798" fg:w="1"/><text x="63.7345%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="63.4845%" y="485" width="0.0796%" height="15" fill="rgb(208,7,15)" fg:x="798" fg:w="1"/><text x="63.7345%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.4845%" y="469" width="0.0796%" height="15" fill="rgb(209,83,13)" fg:x="798" fg:w="1"/><text x="63.7345%" y="479.50"></text></g><g><title>engine::session::Session::initialize (3 samples, 0.24%)</title><rect x="63.4845%" y="677" width="0.2387%" height="15" fill="rgb(218,3,10)" fg:x="798" fg:w="3"/><text x="63.7345%" y="687.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.24%)</title><rect x="63.4845%" y="661" width="0.2387%" height="15" fill="rgb(211,219,4)" fg:x="798" fg:w="3"/><text x="63.7345%" y="671.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="63.4845%" y="645" width="0.2387%" height="15" fill="rgb(228,194,12)" fg:x="798" fg:w="3"/><text x="63.7345%" y="655.50"></text></g><g><title>libloading::os::unix::Library::open (2 samples, 0.16%)</title><rect x="63.5640%" y="629" width="0.1591%" height="15" fill="rgb(210,175,7)" fg:x="799" fg:w="2"/><text x="63.8140%" y="639.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="63.5640%" y="613" width="0.1591%" height="15" fill="rgb(243,132,6)" fg:x="799" fg:w="2"/><text x="63.8140%" y="623.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="63.5640%" y="597" width="0.1591%" height="15" fill="rgb(207,72,18)" fg:x="799" fg:w="2"/><text x="63.8140%" y="607.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="63.5640%" y="581" width="0.1591%" height="15" fill="rgb(236,1,18)" fg:x="799" fg:w="2"/><text x="63.8140%" y="591.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="63.5640%" y="565" width="0.1591%" height="15" fill="rgb(227,0,18)" fg:x="799" fg:w="2"/><text x="63.8140%" y="575.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="63.5640%" y="549" width="0.1591%" height="15" fill="rgb(247,37,5)" fg:x="799" fg:w="2"/><text x="63.8140%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (4 samples, 0.32%)</title><rect x="63.4845%" y="709" width="0.3182%" height="15" fill="rgb(237,179,24)" fg:x="798" fg:w="4"/><text x="63.7345%" y="719.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.32%)</title><rect x="63.4845%" y="693" width="0.3182%" height="15" fill="rgb(226,53,20)" fg:x="798" fg:w="4"/><text x="63.7345%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::hooks (1 samples, 0.08%)</title><rect x="63.7232%" y="677" width="0.0796%" height="15" fill="rgb(247,75,7)" fg:x="801" fg:w="1"/><text x="63.9732%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="63.8027%" y="565" width="0.0796%" height="15" fill="rgb(233,96,12)" fg:x="802" fg:w="1"/><text x="64.0527%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="63.8027%" y="549" width="0.0796%" height="15" fill="rgb(224,125,0)" fg:x="802" fg:w="1"/><text x="64.0527%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.8027%" y="533" width="0.0796%" height="15" fill="rgb(224,92,25)" fg:x="802" fg:w="1"/><text x="64.0527%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="63.8027%" y="517" width="0.0796%" height="15" fill="rgb(224,42,24)" fg:x="802" fg:w="1"/><text x="64.0527%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="63.8027%" y="501" width="0.0796%" height="15" fill="rgb(234,132,49)" fg:x="802" fg:w="1"/><text x="64.0527%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="63.9618%" y="549" width="0.0796%" height="15" fill="rgb(248,100,35)" fg:x="804" fg:w="1"/><text x="64.2118%" y="559.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="64.0414%" y="437" width="0.0796%" height="15" fill="rgb(239,94,40)" fg:x="805" fg:w="1"/><text x="64.2914%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="63.8027%" y="613" width="0.3978%" height="15" fill="rgb(235,139,28)" fg:x="802" fg:w="5"/><text x="64.0527%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="63.8027%" y="597" width="0.3978%" height="15" fill="rgb(217,144,7)" fg:x="802" fg:w="5"/><text x="64.0527%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="63.8027%" y="581" width="0.3978%" height="15" fill="rgb(227,55,4)" fg:x="802" fg:w="5"/><text x="64.0527%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="63.8823%" y="565" width="0.3182%" height="15" fill="rgb(252,82,54)" fg:x="803" fg:w="4"/><text x="64.1323%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="64.0414%" y="549" width="0.1591%" height="15" fill="rgb(245,172,4)" fg:x="805" fg:w="2"/><text x="64.2914%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="64.0414%" y="533" width="0.1591%" height="15" fill="rgb(207,26,27)" fg:x="805" fg:w="2"/><text x="64.2914%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="64.0414%" y="517" width="0.1591%" height="15" fill="rgb(252,98,18)" fg:x="805" fg:w="2"/><text x="64.2914%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="64.0414%" y="501" width="0.1591%" height="15" fill="rgb(244,8,26)" fg:x="805" fg:w="2"/><text x="64.2914%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="64.0414%" y="485" width="0.1591%" height="15" fill="rgb(237,173,45)" fg:x="805" fg:w="2"/><text x="64.2914%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="64.0414%" y="469" width="0.1591%" height="15" fill="rgb(208,213,49)" fg:x="805" fg:w="2"/><text x="64.2914%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.0414%" y="453" width="0.1591%" height="15" fill="rgb(212,122,37)" fg:x="805" fg:w="2"/><text x="64.2914%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.1209%" y="437" width="0.0796%" height="15" fill="rgb(213,80,17)" fg:x="806" fg:w="1"/><text x="64.3709%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="64.2005%" y="613" width="0.0796%" height="15" fill="rgb(206,210,43)" fg:x="807" fg:w="1"/><text x="64.4505%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="64.2005%" y="597" width="0.0796%" height="15" fill="rgb(229,214,3)" fg:x="807" fg:w="1"/><text x="64.4505%" y="607.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="63.8027%" y="693" width="0.6364%" height="15" fill="rgb(235,213,29)" fg:x="802" fg:w="8"/><text x="64.0527%" y="703.50"></text></g><g><title>engine::session::state::State::close (8 samples, 0.64%)</title><rect x="63.8027%" y="677" width="0.6364%" height="15" fill="rgb(248,135,26)" fg:x="802" fg:w="8"/><text x="64.0527%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (8 samples, 0.64%)</title><rect x="63.8027%" y="661" width="0.6364%" height="15" fill="rgb(242,188,12)" fg:x="802" fg:w="8"/><text x="64.0527%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (8 samples, 0.64%)</title><rect x="63.8027%" y="645" width="0.6364%" height="15" fill="rgb(245,38,12)" fg:x="802" fg:w="8"/><text x="64.0527%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (8 samples, 0.64%)</title><rect x="63.8027%" y="629" width="0.6364%" height="15" fill="rgb(218,42,13)" fg:x="802" fg:w="8"/><text x="64.0527%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="64.2800%" y="613" width="0.1591%" height="15" fill="rgb(238,132,49)" fg:x="808" fg:w="2"/><text x="64.5300%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="64.2800%" y="597" width="0.1591%" height="15" fill="rgb(209,196,19)" fg:x="808" fg:w="2"/><text x="64.5300%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="64.2800%" y="581" width="0.1591%" height="15" fill="rgb(244,131,22)" fg:x="808" fg:w="2"/><text x="64.5300%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="64.3596%" y="565" width="0.0796%" height="15" fill="rgb(223,18,34)" fg:x="809" fg:w="1"/><text x="64.6096%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="64.3596%" y="549" width="0.0796%" height="15" fill="rgb(252,124,54)" fg:x="809" fg:w="1"/><text x="64.6096%" y="559.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="64.4391%" y="645" width="0.1591%" height="15" fill="rgb(229,106,42)" fg:x="810" fg:w="2"/><text x="64.6891%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="64.4391%" y="629" width="0.1591%" height="15" fill="rgb(221,129,1)" fg:x="810" fg:w="2"/><text x="64.6891%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="64.4391%" y="613" width="0.1591%" height="15" fill="rgb(229,74,15)" fg:x="810" fg:w="2"/><text x="64.6891%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5187%" y="597" width="0.0796%" height="15" fill="rgb(210,206,50)" fg:x="811" fg:w="1"/><text x="64.7687%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="64.4391%" y="661" width="0.2387%" height="15" fill="rgb(251,114,31)" fg:x="810" fg:w="3"/><text x="64.6891%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="64.5982%" y="645" width="0.0796%" height="15" fill="rgb(215,225,28)" fg:x="812" fg:w="1"/><text x="64.8482%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.5982%" y="629" width="0.0796%" height="15" fill="rgb(237,109,14)" fg:x="812" fg:w="1"/><text x="64.8482%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="64.5982%" y="613" width="0.0796%" height="15" fill="rgb(230,13,37)" fg:x="812" fg:w="1"/><text x="64.8482%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="64.5982%" y="597" width="0.0796%" height="15" fill="rgb(231,40,28)" fg:x="812" fg:w="1"/><text x="64.8482%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.6778%" y="613" width="0.0796%" height="15" fill="rgb(231,202,18)" fg:x="813" fg:w="1"/><text x="64.9278%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="64.6778%" y="597" width="0.0796%" height="15" fill="rgb(225,33,18)" fg:x="813" fg:w="1"/><text x="64.9278%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.6778%" y="581" width="0.0796%" height="15" fill="rgb(223,64,47)" fg:x="813" fg:w="1"/><text x="64.9278%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="64.4391%" y="693" width="0.3978%" height="15" fill="rgb(234,114,13)" fg:x="810" fg:w="5"/><text x="64.6891%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="64.4391%" y="677" width="0.3978%" height="15" fill="rgb(248,56,40)" fg:x="810" fg:w="5"/><text x="64.6891%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="64.6778%" y="661" width="0.1591%" height="15" fill="rgb(221,194,21)" fg:x="813" fg:w="2"/><text x="64.9278%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="64.6778%" y="645" width="0.1591%" height="15" fill="rgb(242,108,46)" fg:x="813" fg:w="2"/><text x="64.9278%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="64.6778%" y="629" width="0.1591%" height="15" fill="rgb(220,106,10)" fg:x="813" fg:w="2"/><text x="64.9278%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="64.7574%" y="613" width="0.0796%" height="15" fill="rgb(211,88,4)" fg:x="814" fg:w="1"/><text x="65.0074%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.7574%" y="597" width="0.0796%" height="15" fill="rgb(214,95,34)" fg:x="814" fg:w="1"/><text x="65.0074%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.7574%" y="581" width="0.0796%" height="15" fill="rgb(250,160,33)" fg:x="814" fg:w="1"/><text x="65.0074%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7574%" y="565" width="0.0796%" height="15" fill="rgb(225,29,10)" fg:x="814" fg:w="1"/><text x="65.0074%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7574%" y="549" width="0.0796%" height="15" fill="rgb(224,28,30)" fg:x="814" fg:w="1"/><text x="65.0074%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="64.8369%" y="693" width="0.0796%" height="15" fill="rgb(231,77,4)" fg:x="815" fg:w="1"/><text x="65.0869%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="64.8369%" y="677" width="0.0796%" height="15" fill="rgb(209,63,21)" fg:x="815" fg:w="1"/><text x="65.0869%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.8369%" y="661" width="0.0796%" height="15" fill="rgb(226,22,11)" fg:x="815" fg:w="1"/><text x="65.0869%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.8369%" y="645" width="0.0796%" height="15" fill="rgb(216,82,30)" fg:x="815" fg:w="1"/><text x="65.0869%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.8369%" y="629" width="0.0796%" height="15" fill="rgb(246,227,38)" fg:x="815" fg:w="1"/><text x="65.0869%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8369%" y="613" width="0.0796%" height="15" fill="rgb(251,203,53)" fg:x="815" fg:w="1"/><text x="65.0869%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.8369%" y="597" width="0.0796%" height="15" fill="rgb(254,101,1)" fg:x="815" fg:w="1"/><text x="65.0869%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8369%" y="581" width="0.0796%" height="15" fill="rgb(241,180,5)" fg:x="815" fg:w="1"/><text x="65.0869%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="64.9165%" y="629" width="0.0796%" height="15" fill="rgb(218,168,4)" fg:x="816" fg:w="1"/><text x="65.1665%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="64.9165%" y="613" width="0.0796%" height="15" fill="rgb(224,223,32)" fg:x="816" fg:w="1"/><text x="65.1665%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.9165%" y="597" width="0.0796%" height="15" fill="rgb(236,106,22)" fg:x="816" fg:w="1"/><text x="65.1665%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.9165%" y="581" width="0.0796%" height="15" fill="rgb(206,121,5)" fg:x="816" fg:w="1"/><text x="65.1665%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="64.9960%" y="629" width="0.0796%" height="15" fill="rgb(233,87,28)" fg:x="817" fg:w="1"/><text x="65.2460%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="64.9960%" y="613" width="0.0796%" height="15" fill="rgb(236,137,17)" fg:x="817" fg:w="1"/><text x="65.2460%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="64.9960%" y="597" width="0.0796%" height="15" fill="rgb(209,183,38)" fg:x="817" fg:w="1"/><text x="65.2460%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.9960%" y="581" width="0.0796%" height="15" fill="rgb(206,162,44)" fg:x="817" fg:w="1"/><text x="65.2460%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.9960%" y="565" width="0.0796%" height="15" fill="rgb(237,70,39)" fg:x="817" fg:w="1"/><text x="65.2460%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.9960%" y="549" width="0.0796%" height="15" fill="rgb(212,176,5)" fg:x="817" fg:w="1"/><text x="65.2460%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9960%" y="533" width="0.0796%" height="15" fill="rgb(232,95,16)" fg:x="817" fg:w="1"/><text x="65.2460%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.9960%" y="517" width="0.0796%" height="15" fill="rgb(219,115,35)" fg:x="817" fg:w="1"/><text x="65.2460%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9960%" y="501" width="0.0796%" height="15" fill="rgb(251,67,27)" fg:x="817" fg:w="1"/><text x="65.2460%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.9960%" y="485" width="0.0796%" height="15" fill="rgb(222,95,40)" fg:x="817" fg:w="1"/><text x="65.2460%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9960%" y="469" width="0.0796%" height="15" fill="rgb(250,35,16)" fg:x="817" fg:w="1"/><text x="65.2460%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.9960%" y="453" width="0.0796%" height="15" fill="rgb(224,86,44)" fg:x="817" fg:w="1"/><text x="65.2460%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9960%" y="437" width="0.0796%" height="15" fill="rgb(237,53,53)" fg:x="817" fg:w="1"/><text x="65.2460%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.0756%" y="597" width="0.0796%" height="15" fill="rgb(208,171,33)" fg:x="818" fg:w="1"/><text x="65.3256%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.0756%" y="581" width="0.0796%" height="15" fill="rgb(222,64,27)" fg:x="818" fg:w="1"/><text x="65.3256%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.0756%" y="565" width="0.0796%" height="15" fill="rgb(221,121,35)" fg:x="818" fg:w="1"/><text x="65.3256%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.0756%" y="549" width="0.0796%" height="15" fill="rgb(228,137,42)" fg:x="818" fg:w="1"/><text x="65.3256%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0756%" y="533" width="0.0796%" height="15" fill="rgb(227,54,21)" fg:x="818" fg:w="1"/><text x="65.3256%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.0756%" y="517" width="0.0796%" height="15" fill="rgb(240,168,33)" fg:x="818" fg:w="1"/><text x="65.3256%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0756%" y="501" width="0.0796%" height="15" fill="rgb(243,159,6)" fg:x="818" fg:w="1"/><text x="65.3256%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.0756%" y="485" width="0.0796%" height="15" fill="rgb(205,211,41)" fg:x="818" fg:w="1"/><text x="65.3256%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="64.9165%" y="677" width="0.3182%" height="15" fill="rgb(253,30,1)" fg:x="816" fg:w="4"/><text x="65.1665%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="64.9165%" y="661" width="0.3182%" height="15" fill="rgb(226,80,18)" fg:x="816" fg:w="4"/><text x="65.1665%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="64.9165%" y="645" width="0.3182%" height="15" fill="rgb(253,156,46)" fg:x="816" fg:w="4"/><text x="65.1665%" y="655.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="65.0756%" y="629" width="0.1591%" height="15" fill="rgb(248,87,27)" fg:x="818" fg:w="2"/><text x="65.3256%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="65.0756%" y="613" width="0.1591%" height="15" fill="rgb(227,122,2)" fg:x="818" fg:w="2"/><text x="65.3256%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="65.1551%" y="597" width="0.0796%" height="15" fill="rgb(229,94,39)" fg:x="819" fg:w="1"/><text x="65.4051%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="65.1551%" y="581" width="0.0796%" height="15" fill="rgb(225,173,31)" fg:x="819" fg:w="1"/><text x="65.4051%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="65.1551%" y="565" width="0.0796%" height="15" fill="rgb(239,176,30)" fg:x="819" fg:w="1"/><text x="65.4051%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.1551%" y="549" width="0.0796%" height="15" fill="rgb(212,104,21)" fg:x="819" fg:w="1"/><text x="65.4051%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.1551%" y="533" width="0.0796%" height="15" fill="rgb(240,209,40)" fg:x="819" fg:w="1"/><text x="65.4051%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1551%" y="517" width="0.0796%" height="15" fill="rgb(234,195,5)" fg:x="819" fg:w="1"/><text x="65.4051%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="65.2347%" y="565" width="0.0796%" height="15" fill="rgb(238,213,1)" fg:x="820" fg:w="1"/><text x="65.4847%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.2347%" y="549" width="0.0796%" height="15" fill="rgb(235,182,54)" fg:x="820" fg:w="1"/><text x="65.4847%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.2347%" y="533" width="0.0796%" height="15" fill="rgb(229,50,46)" fg:x="820" fg:w="1"/><text x="65.4847%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.2347%" y="517" width="0.0796%" height="15" fill="rgb(219,145,13)" fg:x="820" fg:w="1"/><text x="65.4847%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="65.3938%" y="533" width="0.0796%" height="15" fill="rgb(220,226,10)" fg:x="822" fg:w="1"/><text x="65.6438%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="65.3938%" y="517" width="0.0796%" height="15" fill="rgb(248,47,30)" fg:x="822" fg:w="1"/><text x="65.6438%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.3938%" y="501" width="0.0796%" height="15" fill="rgb(231,209,44)" fg:x="822" fg:w="1"/><text x="65.6438%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.3938%" y="485" width="0.0796%" height="15" fill="rgb(209,80,30)" fg:x="822" fg:w="1"/><text x="65.6438%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.3938%" y="469" width="0.0796%" height="15" fill="rgb(232,9,14)" fg:x="822" fg:w="1"/><text x="65.6438%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="65.2347%" y="581" width="0.4773%" height="15" fill="rgb(243,91,43)" fg:x="820" fg:w="6"/><text x="65.4847%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="65.3142%" y="565" width="0.3978%" height="15" fill="rgb(231,90,52)" fg:x="821" fg:w="5"/><text x="65.5642%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="65.3938%" y="549" width="0.3182%" height="15" fill="rgb(253,192,44)" fg:x="822" fg:w="4"/><text x="65.6438%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="65.4733%" y="533" width="0.2387%" height="15" fill="rgb(241,66,31)" fg:x="823" fg:w="3"/><text x="65.7233%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.5529%" y="517" width="0.1591%" height="15" fill="rgb(235,81,37)" fg:x="824" fg:w="2"/><text x="65.8029%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.5529%" y="501" width="0.1591%" height="15" fill="rgb(223,221,9)" fg:x="824" fg:w="2"/><text x="65.8029%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="65.5529%" y="485" width="0.1591%" height="15" fill="rgb(242,180,7)" fg:x="824" fg:w="2"/><text x="65.8029%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="65.5529%" y="469" width="0.1591%" height="15" fill="rgb(243,78,19)" fg:x="824" fg:w="2"/><text x="65.8029%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.6325%" y="453" width="0.0796%" height="15" fill="rgb(233,23,17)" fg:x="825" fg:w="1"/><text x="65.8825%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.6325%" y="437" width="0.0796%" height="15" fill="rgb(252,122,45)" fg:x="825" fg:w="1"/><text x="65.8825%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.6325%" y="421" width="0.0796%" height="15" fill="rgb(247,108,20)" fg:x="825" fg:w="1"/><text x="65.8825%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.7120%" y="581" width="0.0796%" height="15" fill="rgb(235,84,21)" fg:x="826" fg:w="1"/><text x="65.9620%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.7120%" y="565" width="0.0796%" height="15" fill="rgb(247,129,10)" fg:x="826" fg:w="1"/><text x="65.9620%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.7120%" y="549" width="0.0796%" height="15" fill="rgb(208,173,14)" fg:x="826" fg:w="1"/><text x="65.9620%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.7120%" y="533" width="0.0796%" height="15" fill="rgb(236,31,38)" fg:x="826" fg:w="1"/><text x="65.9620%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7120%" y="517" width="0.0796%" height="15" fill="rgb(232,65,17)" fg:x="826" fg:w="1"/><text x="65.9620%" y="527.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.64%)</title><rect x="65.2347%" y="677" width="0.6364%" height="15" fill="rgb(224,45,49)" fg:x="820" fg:w="8"/><text x="65.4847%" y="687.50"></text></g><g><title>engine::session::Session::save_changes (8 samples, 0.64%)</title><rect x="65.2347%" y="661" width="0.6364%" height="15" fill="rgb(225,2,53)" fg:x="820" fg:w="8"/><text x="65.4847%" y="671.50"></text></g><g><title>engine::session::state::State::close (8 samples, 0.64%)</title><rect x="65.2347%" y="645" width="0.6364%" height="15" fill="rgb(248,210,53)" fg:x="820" fg:w="8"/><text x="65.4847%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (8 samples, 0.64%)</title><rect x="65.2347%" y="629" width="0.6364%" height="15" fill="rgb(211,1,30)" fg:x="820" fg:w="8"/><text x="65.4847%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (8 samples, 0.64%)</title><rect x="65.2347%" y="613" width="0.6364%" height="15" fill="rgb(224,96,15)" fg:x="820" fg:w="8"/><text x="65.4847%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (8 samples, 0.64%)</title><rect x="65.2347%" y="597" width="0.6364%" height="15" fill="rgb(252,45,11)" fg:x="820" fg:w="8"/><text x="65.4847%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="65.7916%" y="581" width="0.0796%" height="15" fill="rgb(220,125,38)" fg:x="827" fg:w="1"/><text x="66.0416%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="65.7916%" y="565" width="0.0796%" height="15" fill="rgb(243,161,33)" fg:x="827" fg:w="1"/><text x="66.0416%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.7916%" y="549" width="0.0796%" height="15" fill="rgb(248,197,34)" fg:x="827" fg:w="1"/><text x="66.0416%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="65.7916%" y="533" width="0.0796%" height="15" fill="rgb(228,165,23)" fg:x="827" fg:w="1"/><text x="66.0416%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="65.7916%" y="517" width="0.0796%" height="15" fill="rgb(236,94,38)" fg:x="827" fg:w="1"/><text x="66.0416%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="65.7916%" y="501" width="0.0796%" height="15" fill="rgb(220,13,23)" fg:x="827" fg:w="1"/><text x="66.0416%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="65.7916%" y="485" width="0.0796%" height="15" fill="rgb(234,26,39)" fg:x="827" fg:w="1"/><text x="66.0416%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="65.7916%" y="469" width="0.0796%" height="15" fill="rgb(205,117,44)" fg:x="827" fg:w="1"/><text x="66.0416%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.7916%" y="453" width="0.0796%" height="15" fill="rgb(250,42,2)" fg:x="827" fg:w="1"/><text x="66.0416%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.7916%" y="437" width="0.0796%" height="15" fill="rgb(223,83,14)" fg:x="827" fg:w="1"/><text x="66.0416%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7916%" y="421" width="0.0796%" height="15" fill="rgb(241,147,50)" fg:x="827" fg:w="1"/><text x="66.0416%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="65.8711%" y="645" width="0.0796%" height="15" fill="rgb(218,90,6)" fg:x="828" fg:w="1"/><text x="66.1211%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="65.8711%" y="629" width="0.0796%" height="15" fill="rgb(210,191,5)" fg:x="828" fg:w="1"/><text x="66.1211%" y="639.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="65.8711%" y="613" width="0.0796%" height="15" fill="rgb(225,139,19)" fg:x="828" fg:w="1"/><text x="66.1211%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.8711%" y="597" width="0.0796%" height="15" fill="rgb(210,1,33)" fg:x="828" fg:w="1"/><text x="66.1211%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.9507%" y="645" width="0.0796%" height="15" fill="rgb(213,50,3)" fg:x="829" fg:w="1"/><text x="66.2007%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.9507%" y="629" width="0.0796%" height="15" fill="rgb(234,227,4)" fg:x="829" fg:w="1"/><text x="66.2007%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.9507%" y="613" width="0.0796%" height="15" fill="rgb(246,63,5)" fg:x="829" fg:w="1"/><text x="66.2007%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9507%" y="597" width="0.0796%" height="15" fill="rgb(245,136,27)" fg:x="829" fg:w="1"/><text x="66.2007%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9507%" y="581" width="0.0796%" height="15" fill="rgb(247,199,27)" fg:x="829" fg:w="1"/><text x="66.2007%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9507%" y="565" width="0.0796%" height="15" fill="rgb(252,158,49)" fg:x="829" fg:w="1"/><text x="66.2007%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9507%" y="549" width="0.0796%" height="15" fill="rgb(254,73,1)" fg:x="829" fg:w="1"/><text x="66.2007%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="65.8711%" y="661" width="0.2387%" height="15" fill="rgb(248,93,19)" fg:x="828" fg:w="3"/><text x="66.1211%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="66.0302%" y="645" width="0.0796%" height="15" fill="rgb(206,67,5)" fg:x="830" fg:w="1"/><text x="66.2802%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="66.0302%" y="629" width="0.0796%" height="15" fill="rgb(209,210,4)" fg:x="830" fg:w="1"/><text x="66.2802%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="66.0302%" y="613" width="0.0796%" height="15" fill="rgb(214,185,36)" fg:x="830" fg:w="1"/><text x="66.2802%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="66.0302%" y="597" width="0.0796%" height="15" fill="rgb(233,191,26)" fg:x="830" fg:w="1"/><text x="66.2802%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.0302%" y="581" width="0.0796%" height="15" fill="rgb(248,94,17)" fg:x="830" fg:w="1"/><text x="66.2802%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0302%" y="565" width="0.0796%" height="15" fill="rgb(250,64,4)" fg:x="830" fg:w="1"/><text x="66.2802%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0302%" y="549" width="0.0796%" height="15" fill="rgb(218,41,53)" fg:x="830" fg:w="1"/><text x="66.2802%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0302%" y="533" width="0.0796%" height="15" fill="rgb(251,176,28)" fg:x="830" fg:w="1"/><text x="66.2802%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0302%" y="517" width="0.0796%" height="15" fill="rgb(247,22,9)" fg:x="830" fg:w="1"/><text x="66.2802%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.0302%" y="501" width="0.0796%" height="15" fill="rgb(218,201,14)" fg:x="830" fg:w="1"/><text x="66.2802%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.1098%" y="501" width="0.0796%" height="15" fill="rgb(218,94,10)" fg:x="831" fg:w="1"/><text x="66.3598%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.1098%" y="485" width="0.0796%" height="15" fill="rgb(222,183,52)" fg:x="831" fg:w="1"/><text x="66.3598%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.1098%" y="469" width="0.0796%" height="15" fill="rgb(242,140,25)" fg:x="831" fg:w="1"/><text x="66.3598%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="66.1098%" y="597" width="0.1591%" height="15" fill="rgb(235,197,38)" fg:x="831" fg:w="2"/><text x="66.3598%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="66.1098%" y="581" width="0.1591%" height="15" fill="rgb(237,136,15)" fg:x="831" fg:w="2"/><text x="66.3598%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="66.1098%" y="565" width="0.1591%" height="15" fill="rgb(223,44,49)" fg:x="831" fg:w="2"/><text x="66.3598%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.1098%" y="549" width="0.1591%" height="15" fill="rgb(227,71,15)" fg:x="831" fg:w="2"/><text x="66.3598%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.1098%" y="533" width="0.1591%" height="15" fill="rgb(225,153,20)" fg:x="831" fg:w="2"/><text x="66.3598%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.1098%" y="517" width="0.1591%" height="15" fill="rgb(210,190,26)" fg:x="831" fg:w="2"/><text x="66.3598%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.1893%" y="501" width="0.0796%" height="15" fill="rgb(223,147,5)" fg:x="832" fg:w="1"/><text x="66.4393%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.2689%" y="517" width="0.0796%" height="15" fill="rgb(207,14,23)" fg:x="833" fg:w="1"/><text x="66.5189%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.2689%" y="501" width="0.0796%" height="15" fill="rgb(211,195,53)" fg:x="833" fg:w="1"/><text x="66.5189%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.2689%" y="485" width="0.0796%" height="15" fill="rgb(237,75,46)" fg:x="833" fg:w="1"/><text x="66.5189%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2689%" y="469" width="0.0796%" height="15" fill="rgb(254,55,14)" fg:x="833" fg:w="1"/><text x="66.5189%" y="479.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="65.8711%" y="677" width="0.5569%" height="15" fill="rgb(230,185,30)" fg:x="828" fg:w="7"/><text x="66.1211%" y="687.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="66.1098%" y="661" width="0.3182%" height="15" fill="rgb(220,14,11)" fg:x="831" fg:w="4"/><text x="66.3598%" y="671.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="66.1098%" y="645" width="0.3182%" height="15" fill="rgb(215,169,44)" fg:x="831" fg:w="4"/><text x="66.3598%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="66.1098%" y="629" width="0.3182%" height="15" fill="rgb(253,203,20)" fg:x="831" fg:w="4"/><text x="66.3598%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="66.1098%" y="613" width="0.3182%" height="15" fill="rgb(229,225,17)" fg:x="831" fg:w="4"/><text x="66.3598%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="66.2689%" y="597" width="0.1591%" height="15" fill="rgb(236,76,26)" fg:x="833" fg:w="2"/><text x="66.5189%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="66.2689%" y="581" width="0.1591%" height="15" fill="rgb(234,15,30)" fg:x="833" fg:w="2"/><text x="66.5189%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="66.2689%" y="565" width="0.1591%" height="15" fill="rgb(211,113,48)" fg:x="833" fg:w="2"/><text x="66.5189%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.2689%" y="549" width="0.1591%" height="15" fill="rgb(221,31,36)" fg:x="833" fg:w="2"/><text x="66.5189%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.2689%" y="533" width="0.1591%" height="15" fill="rgb(215,118,52)" fg:x="833" fg:w="2"/><text x="66.5189%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3484%" y="517" width="0.0796%" height="15" fill="rgb(241,151,27)" fg:x="834" fg:w="1"/><text x="66.5984%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="66.4280%" y="677" width="0.0796%" height="15" fill="rgb(253,51,3)" fg:x="835" fg:w="1"/><text x="66.6780%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.4280%" y="661" width="0.0796%" height="15" fill="rgb(216,201,24)" fg:x="835" fg:w="1"/><text x="66.6780%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.4280%" y="645" width="0.0796%" height="15" fill="rgb(231,107,4)" fg:x="835" fg:w="1"/><text x="66.6780%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.4280%" y="629" width="0.0796%" height="15" fill="rgb(243,97,54)" fg:x="835" fg:w="1"/><text x="66.6780%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.4280%" y="613" width="0.0796%" height="15" fill="rgb(221,32,51)" fg:x="835" fg:w="1"/><text x="66.6780%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.4280%" y="597" width="0.0796%" height="15" fill="rgb(218,171,35)" fg:x="835" fg:w="1"/><text x="66.6780%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.4280%" y="581" width="0.0796%" height="15" fill="rgb(214,20,53)" fg:x="835" fg:w="1"/><text x="66.6780%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.4280%" y="565" width="0.0796%" height="15" fill="rgb(239,9,52)" fg:x="835" fg:w="1"/><text x="66.6780%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.5076%" y="661" width="0.0796%" height="15" fill="rgb(215,114,45)" fg:x="836" fg:w="1"/><text x="66.7576%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="66.5076%" y="645" width="0.0796%" height="15" fill="rgb(208,118,9)" fg:x="836" fg:w="1"/><text x="66.7576%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="66.5076%" y="629" width="0.0796%" height="15" fill="rgb(235,7,39)" fg:x="836" fg:w="1"/><text x="66.7576%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="66.5076%" y="613" width="0.0796%" height="15" fill="rgb(243,225,15)" fg:x="836" fg:w="1"/><text x="66.7576%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="66.5076%" y="597" width="0.0796%" height="15" fill="rgb(225,216,18)" fg:x="836" fg:w="1"/><text x="66.7576%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.5076%" y="581" width="0.0796%" height="15" fill="rgb(233,36,38)" fg:x="836" fg:w="1"/><text x="66.7576%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="66.5076%" y="565" width="0.0796%" height="15" fill="rgb(239,88,23)" fg:x="836" fg:w="1"/><text x="66.7576%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.5076%" y="549" width="0.0796%" height="15" fill="rgb(219,181,35)" fg:x="836" fg:w="1"/><text x="66.7576%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="66.5076%" y="533" width="0.0796%" height="15" fill="rgb(215,18,46)" fg:x="836" fg:w="1"/><text x="66.7576%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.5076%" y="517" width="0.0796%" height="15" fill="rgb(241,38,11)" fg:x="836" fg:w="1"/><text x="66.7576%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5076%" y="501" width="0.0796%" height="15" fill="rgb(248,169,45)" fg:x="836" fg:w="1"/><text x="66.7576%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5076%" y="485" width="0.0796%" height="15" fill="rgb(239,50,49)" fg:x="836" fg:w="1"/><text x="66.7576%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5076%" y="469" width="0.0796%" height="15" fill="rgb(231,96,31)" fg:x="836" fg:w="1"/><text x="66.7576%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="66.5871%" y="597" width="0.0796%" height="15" fill="rgb(224,193,37)" fg:x="837" fg:w="1"/><text x="66.8371%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.5871%" y="581" width="0.0796%" height="15" fill="rgb(227,153,50)" fg:x="837" fg:w="1"/><text x="66.8371%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.5871%" y="565" width="0.0796%" height="15" fill="rgb(249,228,3)" fg:x="837" fg:w="1"/><text x="66.8371%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.5871%" y="549" width="0.0796%" height="15" fill="rgb(219,164,43)" fg:x="837" fg:w="1"/><text x="66.8371%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.5871%" y="533" width="0.0796%" height="15" fill="rgb(216,45,41)" fg:x="837" fg:w="1"/><text x="66.8371%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5871%" y="517" width="0.0796%" height="15" fill="rgb(210,226,51)" fg:x="837" fg:w="1"/><text x="66.8371%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (23 samples, 1.83%)</title><rect x="64.9165%" y="693" width="1.8298%" height="15" fill="rgb(209,117,49)" fg:x="816" fg:w="23"/><text x="65.1665%" y="703.50">p..</text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="66.5076%" y="677" width="0.2387%" height="15" fill="rgb(206,196,24)" fg:x="836" fg:w="3"/><text x="66.7576%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="66.5871%" y="661" width="0.1591%" height="15" fill="rgb(253,218,3)" fg:x="837" fg:w="2"/><text x="66.8371%" y="671.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="66.5871%" y="645" width="0.1591%" height="15" fill="rgb(252,166,2)" fg:x="837" fg:w="2"/><text x="66.8371%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="66.5871%" y="629" width="0.1591%" height="15" fill="rgb(236,218,26)" fg:x="837" fg:w="2"/><text x="66.8371%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="66.5871%" y="613" width="0.1591%" height="15" fill="rgb(254,84,19)" fg:x="837" fg:w="2"/><text x="66.8371%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="66.6667%" y="597" width="0.0796%" height="15" fill="rgb(219,137,29)" fg:x="838" fg:w="1"/><text x="66.9167%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="66.6667%" y="581" width="0.0796%" height="15" fill="rgb(227,47,52)" fg:x="838" fg:w="1"/><text x="66.9167%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="66.6667%" y="565" width="0.0796%" height="15" fill="rgb(229,167,24)" fg:x="838" fg:w="1"/><text x="66.9167%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.6667%" y="549" width="0.0796%" height="15" fill="rgb(233,164,1)" fg:x="838" fg:w="1"/><text x="66.9167%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.6667%" y="533" width="0.0796%" height="15" fill="rgb(218,88,48)" fg:x="838" fg:w="1"/><text x="66.9167%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.6667%" y="517" width="0.0796%" height="15" fill="rgb(226,214,24)" fg:x="838" fg:w="1"/><text x="66.9167%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.6667%" y="501" width="0.0796%" height="15" fill="rgb(233,29,12)" fg:x="838" fg:w="1"/><text x="66.9167%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="66.6667%" y="485" width="0.0796%" height="15" fill="rgb(219,120,34)" fg:x="838" fg:w="1"/><text x="66.9167%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.6667%" y="469" width="0.0796%" height="15" fill="rgb(226,78,44)" fg:x="838" fg:w="1"/><text x="66.9167%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.6667%" y="453" width="0.0796%" height="15" fill="rgb(240,15,48)" fg:x="838" fg:w="1"/><text x="66.9167%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.6667%" y="437" width="0.0796%" height="15" fill="rgb(253,176,7)" fg:x="838" fg:w="1"/><text x="66.9167%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.6667%" y="421" width="0.0796%" height="15" fill="rgb(206,166,28)" fg:x="838" fg:w="1"/><text x="66.9167%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6667%" y="405" width="0.0796%" height="15" fill="rgb(241,53,51)" fg:x="838" fg:w="1"/><text x="66.9167%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="66.7462%" y="693" width="0.0796%" height="15" fill="rgb(249,112,30)" fg:x="839" fg:w="1"/><text x="66.9962%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="66.7462%" y="677" width="0.0796%" height="15" fill="rgb(217,85,30)" fg:x="839" fg:w="1"/><text x="66.9962%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="66.7462%" y="661" width="0.0796%" height="15" fill="rgb(233,49,7)" fg:x="839" fg:w="1"/><text x="66.9962%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="66.7462%" y="645" width="0.0796%" height="15" fill="rgb(234,109,9)" fg:x="839" fg:w="1"/><text x="66.9962%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="66.7462%" y="629" width="0.0796%" height="15" fill="rgb(253,95,22)" fg:x="839" fg:w="1"/><text x="66.9962%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="66.7462%" y="613" width="0.0796%" height="15" fill="rgb(233,176,25)" fg:x="839" fg:w="1"/><text x="66.9962%" y="623.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="66.7462%" y="597" width="0.0796%" height="15" fill="rgb(236,33,39)" fg:x="839" fg:w="1"/><text x="66.9962%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="66.8258%" y="693" width="0.0796%" height="15" fill="rgb(223,226,42)" fg:x="840" fg:w="1"/><text x="67.0758%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="66.8258%" y="677" width="0.0796%" height="15" fill="rgb(216,99,33)" fg:x="840" fg:w="1"/><text x="67.0758%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.8258%" y="661" width="0.0796%" height="15" fill="rgb(235,84,23)" fg:x="840" fg:w="1"/><text x="67.0758%" y="671.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="66.8258%" y="645" width="0.0796%" height="15" fill="rgb(232,2,27)" fg:x="840" fg:w="1"/><text x="67.0758%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="66.8258%" y="629" width="0.0796%" height="15" fill="rgb(241,23,22)" fg:x="840" fg:w="1"/><text x="67.0758%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8258%" y="613" width="0.0796%" height="15" fill="rgb(211,73,27)" fg:x="840" fg:w="1"/><text x="67.0758%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8258%" y="597" width="0.0796%" height="15" fill="rgb(235,109,49)" fg:x="840" fg:w="1"/><text x="67.0758%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (40 samples, 3.18%)</title><rect x="63.8027%" y="709" width="3.1822%" height="15" fill="rgb(230,99,29)" fg:x="802" fg:w="40"/><text x="64.0527%" y="719.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="66.9053%" y="693" width="0.0796%" height="15" fill="rgb(245,199,7)" fg:x="841" fg:w="1"/><text x="67.1553%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.9053%" y="677" width="0.0796%" height="15" fill="rgb(217,179,10)" fg:x="841" fg:w="1"/><text x="67.1553%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="66.9053%" y="661" width="0.0796%" height="15" fill="rgb(254,99,47)" fg:x="841" fg:w="1"/><text x="67.1553%" y="671.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="66.9053%" y="645" width="0.0796%" height="15" fill="rgb(251,121,7)" fg:x="841" fg:w="1"/><text x="67.1553%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.9053%" y="629" width="0.0796%" height="15" fill="rgb(250,177,26)" fg:x="841" fg:w="1"/><text x="67.1553%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.9053%" y="613" width="0.0796%" height="15" fill="rgb(232,88,15)" fg:x="841" fg:w="1"/><text x="67.1553%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.9053%" y="597" width="0.0796%" height="15" fill="rgb(251,54,54)" fg:x="841" fg:w="1"/><text x="67.1553%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="66.9849%" y="709" width="0.0796%" height="15" fill="rgb(208,177,15)" fg:x="842" fg:w="1"/><text x="67.2349%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="66.9849%" y="693" width="0.0796%" height="15" fill="rgb(205,97,32)" fg:x="842" fg:w="1"/><text x="67.2349%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.9849%" y="677" width="0.0796%" height="15" fill="rgb(217,192,13)" fg:x="842" fg:w="1"/><text x="67.2349%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="67.1440%" y="693" width="0.0796%" height="15" fill="rgb(215,163,41)" fg:x="844" fg:w="1"/><text x="67.3940%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="67.1440%" y="677" width="0.0796%" height="15" fill="rgb(246,83,29)" fg:x="844" fg:w="1"/><text x="67.3940%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.1440%" y="661" width="0.0796%" height="15" fill="rgb(219,2,45)" fg:x="844" fg:w="1"/><text x="67.3940%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.1440%" y="645" width="0.0796%" height="15" fill="rgb(242,215,33)" fg:x="844" fg:w="1"/><text x="67.3940%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="67.1440%" y="629" width="0.0796%" height="15" fill="rgb(217,1,6)" fg:x="844" fg:w="1"/><text x="67.3940%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="67.1440%" y="613" width="0.0796%" height="15" fill="rgb(207,85,52)" fg:x="844" fg:w="1"/><text x="67.3940%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="67.1440%" y="597" width="0.0796%" height="15" fill="rgb(231,171,19)" fg:x="844" fg:w="1"/><text x="67.3940%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.1440%" y="581" width="0.0796%" height="15" fill="rgb(207,128,4)" fg:x="844" fg:w="1"/><text x="67.3940%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.1440%" y="565" width="0.0796%" height="15" fill="rgb(219,208,4)" fg:x="844" fg:w="1"/><text x="67.3940%" y="575.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="67.1440%" y="549" width="0.0796%" height="15" fill="rgb(235,161,42)" fg:x="844" fg:w="1"/><text x="67.3940%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.1440%" y="533" width="0.0796%" height="15" fill="rgb(247,218,18)" fg:x="844" fg:w="1"/><text x="67.3940%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="67.1440%" y="517" width="0.0796%" height="15" fill="rgb(232,114,51)" fg:x="844" fg:w="1"/><text x="67.3940%" y="527.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="67.1440%" y="501" width="0.0796%" height="15" fill="rgb(222,95,3)" fg:x="844" fg:w="1"/><text x="67.3940%" y="511.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.08%)</title><rect x="67.1440%" y="485" width="0.0796%" height="15" fill="rgb(240,65,29)" fg:x="844" fg:w="1"/><text x="67.3940%" y="495.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.08%)</title><rect x="67.1440%" y="469" width="0.0796%" height="15" fill="rgb(249,209,20)" fg:x="844" fg:w="1"/><text x="67.3940%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="67.1440%" y="453" width="0.0796%" height="15" fill="rgb(241,48,37)" fg:x="844" fg:w="1"/><text x="67.3940%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="67.1440%" y="437" width="0.0796%" height="15" fill="rgb(230,140,42)" fg:x="844" fg:w="1"/><text x="67.3940%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="67.1440%" y="421" width="0.0796%" height="15" fill="rgb(230,176,45)" fg:x="844" fg:w="1"/><text x="67.3940%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.1440%" y="405" width="0.0796%" height="15" fill="rgb(245,112,21)" fg:x="844" fg:w="1"/><text x="67.3940%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="67.1440%" y="389" width="0.0796%" height="15" fill="rgb(207,183,35)" fg:x="844" fg:w="1"/><text x="67.3940%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.1440%" y="373" width="0.0796%" height="15" fill="rgb(227,44,33)" fg:x="844" fg:w="1"/><text x="67.3940%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="67.2235%" y="533" width="0.0796%" height="15" fill="rgb(246,120,21)" fg:x="845" fg:w="1"/><text x="67.4735%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.2235%" y="517" width="0.0796%" height="15" fill="rgb(235,57,52)" fg:x="845" fg:w="1"/><text x="67.4735%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.2235%" y="501" width="0.0796%" height="15" fill="rgb(238,84,10)" fg:x="845" fg:w="1"/><text x="67.4735%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.2235%" y="485" width="0.0796%" height="15" fill="rgb(251,200,32)" fg:x="845" fg:w="1"/><text x="67.4735%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="67.2235%" y="629" width="0.1591%" height="15" fill="rgb(247,159,13)" fg:x="845" fg:w="2"/><text x="67.4735%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.2235%" y="613" width="0.1591%" height="15" fill="rgb(238,64,4)" fg:x="845" fg:w="2"/><text x="67.4735%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.2235%" y="597" width="0.1591%" height="15" fill="rgb(221,131,51)" fg:x="845" fg:w="2"/><text x="67.4735%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.2235%" y="581" width="0.1591%" height="15" fill="rgb(242,5,29)" fg:x="845" fg:w="2"/><text x="67.4735%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.2235%" y="565" width="0.1591%" height="15" fill="rgb(214,130,32)" fg:x="845" fg:w="2"/><text x="67.4735%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="67.2235%" y="549" width="0.1591%" height="15" fill="rgb(244,210,16)" fg:x="845" fg:w="2"/><text x="67.4735%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.3031%" y="533" width="0.0796%" height="15" fill="rgb(234,48,26)" fg:x="846" fg:w="1"/><text x="67.5531%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3827%" y="629" width="0.0796%" height="15" fill="rgb(231,82,38)" fg:x="847" fg:w="1"/><text x="67.6327%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.3827%" y="613" width="0.0796%" height="15" fill="rgb(254,128,41)" fg:x="847" fg:w="1"/><text x="67.6327%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3827%" y="597" width="0.0796%" height="15" fill="rgb(212,73,49)" fg:x="847" fg:w="1"/><text x="67.6327%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3827%" y="581" width="0.0796%" height="15" fill="rgb(205,62,54)" fg:x="847" fg:w="1"/><text x="67.6327%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3827%" y="565" width="0.0796%" height="15" fill="rgb(228,0,8)" fg:x="847" fg:w="1"/><text x="67.6327%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3827%" y="549" width="0.0796%" height="15" fill="rgb(251,28,17)" fg:x="847" fg:w="1"/><text x="67.6327%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.3827%" y="533" width="0.0796%" height="15" fill="rgb(238,105,27)" fg:x="847" fg:w="1"/><text x="67.6327%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.4622%" y="565" width="0.0796%" height="15" fill="rgb(237,216,33)" fg:x="848" fg:w="1"/><text x="67.7122%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4622%" y="549" width="0.0796%" height="15" fill="rgb(229,228,25)" fg:x="848" fg:w="1"/><text x="67.7122%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="67.6213%" y="517" width="0.1591%" height="15" fill="rgb(233,75,23)" fg:x="850" fg:w="2"/><text x="67.8713%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7009%" y="501" width="0.0796%" height="15" fill="rgb(231,207,16)" fg:x="851" fg:w="1"/><text x="67.9509%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="67.4622%" y="613" width="0.3978%" height="15" fill="rgb(231,191,45)" fg:x="848" fg:w="5"/><text x="67.7122%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="67.4622%" y="597" width="0.3978%" height="15" fill="rgb(224,133,17)" fg:x="848" fg:w="5"/><text x="67.7122%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="67.4622%" y="581" width="0.3978%" height="15" fill="rgb(209,178,27)" fg:x="848" fg:w="5"/><text x="67.7122%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="67.5418%" y="565" width="0.3182%" height="15" fill="rgb(218,37,11)" fg:x="849" fg:w="4"/><text x="67.7918%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="67.5418%" y="549" width="0.3182%" height="15" fill="rgb(251,226,25)" fg:x="849" fg:w="4"/><text x="67.7918%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.6213%" y="533" width="0.2387%" height="15" fill="rgb(209,222,27)" fg:x="850" fg:w="3"/><text x="67.8713%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.7804%" y="517" width="0.0796%" height="15" fill="rgb(238,22,21)" fg:x="852" fg:w="1"/><text x="68.0304%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9395%" y="581" width="0.0796%" height="15" fill="rgb(233,161,25)" fg:x="854" fg:w="1"/><text x="68.1895%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9395%" y="565" width="0.0796%" height="15" fill="rgb(226,122,53)" fg:x="854" fg:w="1"/><text x="68.1895%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9395%" y="549" width="0.0796%" height="15" fill="rgb(220,123,17)" fg:x="854" fg:w="1"/><text x="68.1895%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0191%" y="581" width="0.0796%" height="15" fill="rgb(230,224,35)" fg:x="855" fg:w="1"/><text x="68.2691%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.0191%" y="565" width="0.0796%" height="15" fill="rgb(246,83,8)" fg:x="855" fg:w="1"/><text x="68.2691%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.0191%" y="549" width="0.0796%" height="15" fill="rgb(230,214,17)" fg:x="855" fg:w="1"/><text x="68.2691%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0986%" y="581" width="0.0796%" height="15" fill="rgb(222,97,18)" fg:x="856" fg:w="1"/><text x="68.3486%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.0986%" y="565" width="0.0796%" height="15" fill="rgb(206,79,1)" fg:x="856" fg:w="1"/><text x="68.3486%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="68.0986%" y="549" width="0.0796%" height="15" fill="rgb(214,121,34)" fg:x="856" fg:w="1"/><text x="68.3486%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="68.0986%" y="533" width="0.0796%" height="15" fill="rgb(249,199,46)" fg:x="856" fg:w="1"/><text x="68.3486%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.1782%" y="533" width="0.0796%" height="15" fill="rgb(214,222,46)" fg:x="857" fg:w="1"/><text x="68.4282%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1782%" y="517" width="0.0796%" height="15" fill="rgb(248,168,30)" fg:x="857" fg:w="1"/><text x="68.4282%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.1782%" y="501" width="0.0796%" height="15" fill="rgb(226,14,28)" fg:x="857" fg:w="1"/><text x="68.4282%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.1782%" y="485" width="0.0796%" height="15" fill="rgb(253,123,1)" fg:x="857" fg:w="1"/><text x="68.4282%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1782%" y="469" width="0.0796%" height="15" fill="rgb(225,24,42)" fg:x="857" fg:w="1"/><text x="68.4282%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.2578%" y="517" width="0.0796%" height="15" fill="rgb(216,161,37)" fg:x="858" fg:w="1"/><text x="68.5078%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.3373%" y="501" width="0.0796%" height="15" fill="rgb(251,164,26)" fg:x="859" fg:w="1"/><text x="68.5873%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.3373%" y="485" width="0.0796%" height="15" fill="rgb(219,177,3)" fg:x="859" fg:w="1"/><text x="68.5873%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3373%" y="469" width="0.0796%" height="15" fill="rgb(222,65,0)" fg:x="859" fg:w="1"/><text x="68.5873%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4169%" y="469" width="0.0796%" height="15" fill="rgb(223,69,54)" fg:x="860" fg:w="1"/><text x="68.6669%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4169%" y="453" width="0.0796%" height="15" fill="rgb(235,30,27)" fg:x="860" fg:w="1"/><text x="68.6669%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4169%" y="437" width="0.0796%" height="15" fill="rgb(220,183,50)" fg:x="860" fg:w="1"/><text x="68.6669%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="67.8600%" y="613" width="0.7160%" height="15" fill="rgb(248,198,15)" fg:x="853" fg:w="9"/><text x="68.1100%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="67.8600%" y="597" width="0.7160%" height="15" fill="rgb(222,211,4)" fg:x="853" fg:w="9"/><text x="68.1100%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="68.1782%" y="581" width="0.3978%" height="15" fill="rgb(214,102,34)" fg:x="857" fg:w="5"/><text x="68.4282%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="68.1782%" y="565" width="0.3978%" height="15" fill="rgb(245,92,5)" fg:x="857" fg:w="5"/><text x="68.4282%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="68.1782%" y="549" width="0.3978%" height="15" fill="rgb(252,72,51)" fg:x="857" fg:w="5"/><text x="68.4282%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="68.2578%" y="533" width="0.3182%" height="15" fill="rgb(252,208,19)" fg:x="858" fg:w="4"/><text x="68.5078%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.3373%" y="517" width="0.2387%" height="15" fill="rgb(211,69,7)" fg:x="859" fg:w="3"/><text x="68.5873%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.4169%" y="501" width="0.1591%" height="15" fill="rgb(211,27,16)" fg:x="860" fg:w="2"/><text x="68.6669%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.4169%" y="485" width="0.1591%" height="15" fill="rgb(219,216,14)" fg:x="860" fg:w="2"/><text x="68.6669%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.4964%" y="469" width="0.0796%" height="15" fill="rgb(219,71,8)" fg:x="861" fg:w="1"/><text x="68.7464%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5760%" y="485" width="0.0796%" height="15" fill="rgb(223,170,53)" fg:x="862" fg:w="1"/><text x="68.8260%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5760%" y="469" width="0.0796%" height="15" fill="rgb(246,21,26)" fg:x="862" fg:w="1"/><text x="68.8260%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5760%" y="453" width="0.0796%" height="15" fill="rgb(248,20,46)" fg:x="862" fg:w="1"/><text x="68.8260%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.5760%" y="549" width="0.1591%" height="15" fill="rgb(252,94,11)" fg:x="862" fg:w="2"/><text x="68.8260%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.5760%" y="533" width="0.1591%" height="15" fill="rgb(236,163,8)" fg:x="862" fg:w="2"/><text x="68.8260%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.5760%" y="517" width="0.1591%" height="15" fill="rgb(217,221,45)" fg:x="862" fg:w="2"/><text x="68.8260%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.5760%" y="501" width="0.1591%" height="15" fill="rgb(238,38,17)" fg:x="862" fg:w="2"/><text x="68.8260%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6555%" y="485" width="0.0796%" height="15" fill="rgb(242,210,23)" fg:x="863" fg:w="1"/><text x="68.9055%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6555%" y="469" width="0.0796%" height="15" fill="rgb(250,86,53)" fg:x="863" fg:w="1"/><text x="68.9055%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6555%" y="453" width="0.0796%" height="15" fill="rgb(223,168,25)" fg:x="863" fg:w="1"/><text x="68.9055%" y="463.50"></text></g><g><title>engine::session::Session::close (22 samples, 1.75%)</title><rect x="67.0644%" y="709" width="1.7502%" height="15" fill="rgb(251,189,4)" fg:x="843" fg:w="22"/><text x="67.3144%" y="719.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.59%)</title><rect x="67.2235%" y="693" width="1.5911%" height="15" fill="rgb(245,19,28)" fg:x="845" fg:w="20"/><text x="67.4735%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.59%)</title><rect x="67.2235%" y="677" width="1.5911%" height="15" fill="rgb(207,10,34)" fg:x="845" fg:w="20"/><text x="67.4735%" y="687.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (20 samples, 1.59%)</title><rect x="67.2235%" y="661" width="1.5911%" height="15" fill="rgb(235,153,31)" fg:x="845" fg:w="20"/><text x="67.4735%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.59%)</title><rect x="67.2235%" y="645" width="1.5911%" height="15" fill="rgb(228,72,37)" fg:x="845" fg:w="20"/><text x="67.4735%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.35%)</title><rect x="67.4622%" y="629" width="1.3524%" height="15" fill="rgb(215,15,16)" fg:x="848" fg:w="17"/><text x="67.7122%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="68.5760%" y="613" width="0.2387%" height="15" fill="rgb(250,119,29)" fg:x="862" fg:w="3"/><text x="68.8260%" y="623.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="68.5760%" y="597" width="0.2387%" height="15" fill="rgb(214,59,1)" fg:x="862" fg:w="3"/><text x="68.8260%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="68.5760%" y="581" width="0.2387%" height="15" fill="rgb(223,109,25)" fg:x="862" fg:w="3"/><text x="68.8260%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.5760%" y="565" width="0.2387%" height="15" fill="rgb(230,198,22)" fg:x="862" fg:w="3"/><text x="68.8260%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.7351%" y="549" width="0.0796%" height="15" fill="rgb(245,184,46)" fg:x="864" fg:w="1"/><text x="68.9851%" y="559.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="68.8146%" y="549" width="0.0796%" height="15" fill="rgb(253,73,16)" fg:x="865" fg:w="1"/><text x="69.0646%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8146%" y="533" width="0.0796%" height="15" fill="rgb(206,94,45)" fg:x="865" fg:w="1"/><text x="69.0646%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8146%" y="517" width="0.0796%" height="15" fill="rgb(236,83,27)" fg:x="865" fg:w="1"/><text x="69.0646%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8146%" y="501" width="0.0796%" height="15" fill="rgb(220,196,8)" fg:x="865" fg:w="1"/><text x="69.0646%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="68.8146%" y="613" width="0.1591%" height="15" fill="rgb(254,185,14)" fg:x="865" fg:w="2"/><text x="69.0646%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="68.8146%" y="597" width="0.1591%" height="15" fill="rgb(226,50,22)" fg:x="865" fg:w="2"/><text x="69.0646%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="68.8146%" y="581" width="0.1591%" height="15" fill="rgb(253,147,0)" fg:x="865" fg:w="2"/><text x="69.0646%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="68.8146%" y="565" width="0.1591%" height="15" fill="rgb(252,46,33)" fg:x="865" fg:w="2"/><text x="69.0646%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8942%" y="549" width="0.0796%" height="15" fill="rgb(242,22,54)" fg:x="866" fg:w="1"/><text x="69.1442%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8942%" y="533" width="0.0796%" height="15" fill="rgb(223,178,32)" fg:x="866" fg:w="1"/><text x="69.1442%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.8942%" y="517" width="0.0796%" height="15" fill="rgb(214,106,53)" fg:x="866" fg:w="1"/><text x="69.1442%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8942%" y="501" width="0.0796%" height="15" fill="rgb(232,65,50)" fg:x="866" fg:w="1"/><text x="69.1442%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8942%" y="485" width="0.0796%" height="15" fill="rgb(231,110,28)" fg:x="866" fg:w="1"/><text x="69.1442%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.8942%" y="469" width="0.0796%" height="15" fill="rgb(216,71,40)" fg:x="866" fg:w="1"/><text x="69.1442%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.8942%" y="453" width="0.0796%" height="15" fill="rgb(229,89,53)" fg:x="866" fg:w="1"/><text x="69.1442%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8942%" y="437" width="0.0796%" height="15" fill="rgb(210,124,14)" fg:x="866" fg:w="1"/><text x="69.1442%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9737%" y="613" width="0.0796%" height="15" fill="rgb(236,213,6)" fg:x="867" fg:w="1"/><text x="69.2237%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9737%" y="597" width="0.0796%" height="15" fill="rgb(228,41,5)" fg:x="867" fg:w="1"/><text x="69.2237%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9737%" y="581" width="0.0796%" height="15" fill="rgb(221,167,25)" fg:x="867" fg:w="1"/><text x="69.2237%" y="591.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (4 samples, 0.32%)</title><rect x="68.8146%" y="677" width="0.3182%" height="15" fill="rgb(228,144,37)" fg:x="865" fg:w="4"/><text x="69.0646%" y="687.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="68.8146%" y="661" width="0.3182%" height="15" fill="rgb(227,189,38)" fg:x="865" fg:w="4"/><text x="69.0646%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="68.8146%" y="645" width="0.3182%" height="15" fill="rgb(218,8,2)" fg:x="865" fg:w="4"/><text x="69.0646%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="68.8146%" y="629" width="0.3182%" height="15" fill="rgb(209,61,28)" fg:x="865" fg:w="4"/><text x="69.0646%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.0533%" y="613" width="0.0796%" height="15" fill="rgb(233,140,39)" fg:x="868" fg:w="1"/><text x="69.3033%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0533%" y="597" width="0.0796%" height="15" fill="rgb(251,66,48)" fg:x="868" fg:w="1"/><text x="69.3033%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.0533%" y="581" width="0.0796%" height="15" fill="rgb(210,44,45)" fg:x="868" fg:w="1"/><text x="69.3033%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0533%" y="565" width="0.0796%" height="15" fill="rgb(214,136,46)" fg:x="868" fg:w="1"/><text x="69.3033%" y="575.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="69.0533%" y="549" width="0.0796%" height="15" fill="rgb(207,130,50)" fg:x="868" fg:w="1"/><text x="69.3033%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="69.2124%" y="453" width="0.0796%" height="15" fill="rgb(228,102,49)" fg:x="870" fg:w="1"/><text x="69.4624%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="69.2124%" y="469" width="0.2387%" height="15" fill="rgb(253,55,1)" fg:x="870" fg:w="3"/><text x="69.4624%" y="479.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="69.2920%" y="453" width="0.1591%" height="15" fill="rgb(238,222,9)" fg:x="871" fg:w="2"/><text x="69.5420%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="69.2920%" y="437" width="0.1591%" height="15" fill="rgb(246,99,6)" fg:x="871" fg:w="2"/><text x="69.5420%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.2920%" y="421" width="0.1591%" height="15" fill="rgb(219,110,26)" fg:x="871" fg:w="2"/><text x="69.5420%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2920%" y="405" width="0.1591%" height="15" fill="rgb(239,160,33)" fg:x="871" fg:w="2"/><text x="69.5420%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.2920%" y="389" width="0.1591%" height="15" fill="rgb(220,202,23)" fg:x="871" fg:w="2"/><text x="69.5420%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3715%" y="373" width="0.0796%" height="15" fill="rgb(208,80,26)" fg:x="872" fg:w="1"/><text x="69.6215%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3715%" y="357" width="0.0796%" height="15" fill="rgb(243,85,7)" fg:x="872" fg:w="1"/><text x="69.6215%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3715%" y="341" width="0.0796%" height="15" fill="rgb(228,77,47)" fg:x="872" fg:w="1"/><text x="69.6215%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3715%" y="325" width="0.0796%" height="15" fill="rgb(212,226,8)" fg:x="872" fg:w="1"/><text x="69.6215%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3715%" y="309" width="0.0796%" height="15" fill="rgb(241,120,54)" fg:x="872" fg:w="1"/><text x="69.6215%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.3715%" y="293" width="0.0796%" height="15" fill="rgb(226,80,16)" fg:x="872" fg:w="1"/><text x="69.6215%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.3715%" y="277" width="0.0796%" height="15" fill="rgb(240,76,13)" fg:x="872" fg:w="1"/><text x="69.6215%" y="287.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="69.4511%" y="453" width="0.0796%" height="15" fill="rgb(252,74,8)" fg:x="873" fg:w="1"/><text x="69.7011%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.4511%" y="437" width="0.0796%" height="15" fill="rgb(244,155,2)" fg:x="873" fg:w="1"/><text x="69.7011%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5306%" y="421" width="0.0796%" height="15" fill="rgb(215,81,35)" fg:x="874" fg:w="1"/><text x="69.7806%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.5306%" y="405" width="0.0796%" height="15" fill="rgb(206,55,2)" fg:x="874" fg:w="1"/><text x="69.7806%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.5306%" y="389" width="0.0796%" height="15" fill="rgb(231,2,34)" fg:x="874" fg:w="1"/><text x="69.7806%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.5306%" y="373" width="0.0796%" height="15" fill="rgb(242,176,48)" fg:x="874" fg:w="1"/><text x="69.7806%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.5306%" y="357" width="0.0796%" height="15" fill="rgb(249,31,36)" fg:x="874" fg:w="1"/><text x="69.7806%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.5306%" y="341" width="0.0796%" height="15" fill="rgb(205,18,17)" fg:x="874" fg:w="1"/><text x="69.7806%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.5306%" y="325" width="0.0796%" height="15" fill="rgb(254,130,5)" fg:x="874" fg:w="1"/><text x="69.7806%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.5306%" y="309" width="0.0796%" height="15" fill="rgb(229,42,45)" fg:x="874" fg:w="1"/><text x="69.7806%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.5306%" y="293" width="0.0796%" height="15" fill="rgb(245,95,25)" fg:x="874" fg:w="1"/><text x="69.7806%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.5306%" y="277" width="0.0796%" height="15" fill="rgb(249,193,38)" fg:x="874" fg:w="1"/><text x="69.7806%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.5306%" y="261" width="0.0796%" height="15" fill="rgb(241,140,43)" fg:x="874" fg:w="1"/><text x="69.7806%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.5306%" y="245" width="0.0796%" height="15" fill="rgb(245,78,48)" fg:x="874" fg:w="1"/><text x="69.7806%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.5306%" y="229" width="0.0796%" height="15" fill="rgb(214,92,39)" fg:x="874" fg:w="1"/><text x="69.7806%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5306%" y="213" width="0.0796%" height="15" fill="rgb(211,189,14)" fg:x="874" fg:w="1"/><text x="69.7806%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6102%" y="261" width="0.0796%" height="15" fill="rgb(218,7,24)" fg:x="875" fg:w="1"/><text x="69.8602%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="69.4511%" y="469" width="0.3182%" height="15" fill="rgb(224,200,49)" fg:x="873" fg:w="4"/><text x="69.7011%" y="479.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="69.5306%" y="453" width="0.2387%" height="15" fill="rgb(218,210,14)" fg:x="874" fg:w="3"/><text x="69.7806%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="69.5306%" y="437" width="0.2387%" height="15" fill="rgb(234,142,31)" fg:x="874" fg:w="3"/><text x="69.7806%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.6102%" y="421" width="0.1591%" height="15" fill="rgb(227,165,2)" fg:x="875" fg:w="2"/><text x="69.8602%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6102%" y="405" width="0.1591%" height="15" fill="rgb(232,44,46)" fg:x="875" fg:w="2"/><text x="69.8602%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.6102%" y="389" width="0.1591%" height="15" fill="rgb(236,149,47)" fg:x="875" fg:w="2"/><text x="69.8602%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6102%" y="373" width="0.1591%" height="15" fill="rgb(227,45,31)" fg:x="875" fg:w="2"/><text x="69.8602%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.6102%" y="357" width="0.1591%" height="15" fill="rgb(240,176,51)" fg:x="875" fg:w="2"/><text x="69.8602%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6102%" y="341" width="0.1591%" height="15" fill="rgb(249,146,41)" fg:x="875" fg:w="2"/><text x="69.8602%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.6102%" y="325" width="0.1591%" height="15" fill="rgb(213,208,4)" fg:x="875" fg:w="2"/><text x="69.8602%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6102%" y="309" width="0.1591%" height="15" fill="rgb(245,84,36)" fg:x="875" fg:w="2"/><text x="69.8602%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.6102%" y="293" width="0.1591%" height="15" fill="rgb(254,84,18)" fg:x="875" fg:w="2"/><text x="69.8602%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.6102%" y="277" width="0.1591%" height="15" fill="rgb(225,38,54)" fg:x="875" fg:w="2"/><text x="69.8602%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.6897%" y="261" width="0.0796%" height="15" fill="rgb(246,50,30)" fg:x="876" fg:w="1"/><text x="69.9397%" y="271.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="69.7693%" y="469" width="0.1591%" height="15" fill="rgb(246,148,9)" fg:x="877" fg:w="2"/><text x="70.0193%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.8488%" y="453" width="0.0796%" height="15" fill="rgb(223,75,4)" fg:x="878" fg:w="1"/><text x="70.0988%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="69.8488%" y="437" width="0.0796%" height="15" fill="rgb(239,148,41)" fg:x="878" fg:w="1"/><text x="70.0988%" y="447.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="69.8488%" y="421" width="0.0796%" height="15" fill="rgb(205,195,3)" fg:x="878" fg:w="1"/><text x="70.0988%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.8488%" y="405" width="0.0796%" height="15" fill="rgb(254,161,1)" fg:x="878" fg:w="1"/><text x="70.0988%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.8488%" y="389" width="0.0796%" height="15" fill="rgb(211,229,8)" fg:x="878" fg:w="1"/><text x="70.0988%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.8488%" y="373" width="0.0796%" height="15" fill="rgb(220,97,9)" fg:x="878" fg:w="1"/><text x="70.0988%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.8488%" y="357" width="0.0796%" height="15" fill="rgb(240,218,8)" fg:x="878" fg:w="1"/><text x="70.0988%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.8488%" y="341" width="0.0796%" height="15" fill="rgb(250,44,0)" fg:x="878" fg:w="1"/><text x="70.0988%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="69.8488%" y="325" width="0.0796%" height="15" fill="rgb(236,41,53)" fg:x="878" fg:w="1"/><text x="70.0988%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="69.8488%" y="309" width="0.0796%" height="15" fill="rgb(218,227,13)" fg:x="878" fg:w="1"/><text x="70.0988%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.8488%" y="293" width="0.0796%" height="15" fill="rgb(217,94,32)" fg:x="878" fg:w="1"/><text x="70.0988%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="69.8488%" y="277" width="0.0796%" height="15" fill="rgb(213,217,12)" fg:x="878" fg:w="1"/><text x="70.0988%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.8488%" y="261" width="0.0796%" height="15" fill="rgb(229,13,46)" fg:x="878" fg:w="1"/><text x="70.0988%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.9284%" y="421" width="0.0796%" height="15" fill="rgb(243,139,5)" fg:x="879" fg:w="1"/><text x="70.1784%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.9284%" y="405" width="0.0796%" height="15" fill="rgb(249,38,45)" fg:x="879" fg:w="1"/><text x="70.1784%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.9284%" y="389" width="0.0796%" height="15" fill="rgb(216,70,11)" fg:x="879" fg:w="1"/><text x="70.1784%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.9284%" y="373" width="0.0796%" height="15" fill="rgb(253,101,25)" fg:x="879" fg:w="1"/><text x="70.1784%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.9284%" y="357" width="0.0796%" height="15" fill="rgb(207,197,30)" fg:x="879" fg:w="1"/><text x="70.1784%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.9284%" y="341" width="0.0796%" height="15" fill="rgb(238,87,13)" fg:x="879" fg:w="1"/><text x="70.1784%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="69.9284%" y="325" width="0.0796%" height="15" fill="rgb(215,155,8)" fg:x="879" fg:w="1"/><text x="70.1784%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="69.9284%" y="309" width="0.0796%" height="15" fill="rgb(239,166,38)" fg:x="879" fg:w="1"/><text x="70.1784%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="69.9284%" y="293" width="0.0796%" height="15" fill="rgb(240,194,35)" fg:x="879" fg:w="1"/><text x="70.1784%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="69.9284%" y="277" width="0.0796%" height="15" fill="rgb(219,10,44)" fg:x="879" fg:w="1"/><text x="70.1784%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.9284%" y="261" width="0.0796%" height="15" fill="rgb(251,220,35)" fg:x="879" fg:w="1"/><text x="70.1784%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="69.9284%" y="245" width="0.0796%" height="15" fill="rgb(218,117,13)" fg:x="879" fg:w="1"/><text x="70.1784%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.9284%" y="229" width="0.0796%" height="15" fill="rgb(221,213,40)" fg:x="879" fg:w="1"/><text x="70.1784%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="69.9284%" y="213" width="0.0796%" height="15" fill="rgb(251,224,35)" fg:x="879" fg:w="1"/><text x="70.1784%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.9284%" y="197" width="0.0796%" height="15" fill="rgb(241,33,39)" fg:x="879" fg:w="1"/><text x="70.1784%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="69.9284%" y="181" width="0.0796%" height="15" fill="rgb(222,74,17)" fg:x="879" fg:w="1"/><text x="70.1784%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="69.9284%" y="165" width="0.0796%" height="15" fill="rgb(225,103,0)" fg:x="879" fg:w="1"/><text x="70.1784%" y="175.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="69.9284%" y="149" width="0.0796%" height="15" fill="rgb(240,0,12)" fg:x="879" fg:w="1"/><text x="70.1784%" y="159.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="70.0080%" y="325" width="0.0796%" height="15" fill="rgb(233,213,37)" fg:x="880" fg:w="1"/><text x="70.2580%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="70.0080%" y="309" width="0.0796%" height="15" fill="rgb(225,84,52)" fg:x="880" fg:w="1"/><text x="70.2580%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="70.0080%" y="293" width="0.0796%" height="15" fill="rgb(247,160,51)" fg:x="880" fg:w="1"/><text x="70.2580%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="70.0875%" y="309" width="0.0796%" height="15" fill="rgb(244,60,51)" fg:x="881" fg:w="1"/><text x="70.3375%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0875%" y="293" width="0.0796%" height="15" fill="rgb(233,114,7)" fg:x="881" fg:w="1"/><text x="70.3375%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0875%" y="277" width="0.0796%" height="15" fill="rgb(246,136,16)" fg:x="881" fg:w="1"/><text x="70.3375%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.0875%" y="261" width="0.0796%" height="15" fill="rgb(243,114,45)" fg:x="881" fg:w="1"/><text x="70.3375%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.0875%" y="245" width="0.0796%" height="15" fill="rgb(247,183,43)" fg:x="881" fg:w="1"/><text x="70.3375%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.0875%" y="229" width="0.0796%" height="15" fill="rgb(251,210,42)" fg:x="881" fg:w="1"/><text x="70.3375%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="70.0080%" y="389" width="0.2387%" height="15" fill="rgb(221,88,35)" fg:x="880" fg:w="3"/><text x="70.2580%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="70.0080%" y="373" width="0.2387%" height="15" fill="rgb(242,21,20)" fg:x="880" fg:w="3"/><text x="70.2580%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="70.0080%" y="357" width="0.2387%" height="15" fill="rgb(233,226,36)" fg:x="880" fg:w="3"/><text x="70.2580%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="70.0080%" y="341" width="0.2387%" height="15" fill="rgb(243,189,34)" fg:x="880" fg:w="3"/><text x="70.2580%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="70.0875%" y="325" width="0.1591%" height="15" fill="rgb(207,145,50)" fg:x="881" fg:w="2"/><text x="70.3375%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="70.1671%" y="309" width="0.0796%" height="15" fill="rgb(242,1,50)" fg:x="882" fg:w="1"/><text x="70.4171%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="70.1671%" y="293" width="0.0796%" height="15" fill="rgb(231,65,32)" fg:x="882" fg:w="1"/><text x="70.4171%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.1671%" y="277" width="0.0796%" height="15" fill="rgb(208,68,49)" fg:x="882" fg:w="1"/><text x="70.4171%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.3262%" y="341" width="0.0796%" height="15" fill="rgb(253,54,49)" fg:x="884" fg:w="1"/><text x="70.5762%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3262%" y="325" width="0.0796%" height="15" fill="rgb(245,186,24)" fg:x="884" fg:w="1"/><text x="70.5762%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="70.4057%" y="341" width="0.0796%" height="15" fill="rgb(209,2,41)" fg:x="885" fg:w="1"/><text x="70.6557%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.4057%" y="325" width="0.0796%" height="15" fill="rgb(242,208,54)" fg:x="885" fg:w="1"/><text x="70.6557%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4057%" y="309" width="0.0796%" height="15" fill="rgb(225,9,51)" fg:x="885" fg:w="1"/><text x="70.6557%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6444%" y="325" width="0.0796%" height="15" fill="rgb(207,207,25)" fg:x="888" fg:w="1"/><text x="70.8944%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7239%" y="309" width="0.0796%" height="15" fill="rgb(253,96,18)" fg:x="889" fg:w="1"/><text x="70.9739%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="70.7239%" y="325" width="0.2387%" height="15" fill="rgb(252,215,20)" fg:x="889" fg:w="3"/><text x="70.9739%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="70.8035%" y="309" width="0.1591%" height="15" fill="rgb(245,227,26)" fg:x="890" fg:w="2"/><text x="71.0535%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.8035%" y="293" width="0.1591%" height="15" fill="rgb(241,208,0)" fg:x="890" fg:w="2"/><text x="71.0535%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="70.9626%" y="325" width="0.3182%" height="15" fill="rgb(224,130,10)" fg:x="892" fg:w="4"/><text x="71.2126%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="70.9626%" y="309" width="0.3182%" height="15" fill="rgb(237,29,0)" fg:x="892" fg:w="4"/><text x="71.2126%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4399%" y="261" width="0.0796%" height="15" fill="rgb(219,27,41)" fg:x="898" fg:w="1"/><text x="71.6899%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="71.5195%" y="261" width="0.1591%" height="15" fill="rgb(245,101,19)" fg:x="899" fg:w="2"/><text x="71.7695%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="71.6786%" y="261" width="0.1591%" height="15" fill="rgb(243,44,37)" fg:x="901" fg:w="2"/><text x="71.9286%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.9173%" y="229" width="0.0796%" height="15" fill="rgb(228,213,43)" fg:x="904" fg:w="1"/><text x="72.1673%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.9173%" y="213" width="0.0796%" height="15" fill="rgb(219,163,21)" fg:x="904" fg:w="1"/><text x="72.1673%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9173%" y="197" width="0.0796%" height="15" fill="rgb(234,86,24)" fg:x="904" fg:w="1"/><text x="72.1673%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.9968%" y="213" width="0.0796%" height="15" fill="rgb(225,10,24)" fg:x="905" fg:w="1"/><text x="72.2468%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="71.8377%" y="261" width="0.3182%" height="15" fill="rgb(218,109,7)" fg:x="903" fg:w="4"/><text x="72.0877%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="71.8377%" y="245" width="0.3182%" height="15" fill="rgb(210,20,26)" fg:x="903" fg:w="4"/><text x="72.0877%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="71.9968%" y="229" width="0.1591%" height="15" fill="rgb(216,18,1)" fg:x="905" fg:w="2"/><text x="72.2468%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="72.0764%" y="213" width="0.0796%" height="15" fill="rgb(206,163,23)" fg:x="906" fg:w="1"/><text x="72.3264%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="72.0764%" y="197" width="0.0796%" height="15" fill="rgb(229,150,31)" fg:x="906" fg:w="1"/><text x="72.3264%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.0764%" y="181" width="0.0796%" height="15" fill="rgb(231,10,5)" fg:x="906" fg:w="1"/><text x="72.3264%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.0764%" y="165" width="0.0796%" height="15" fill="rgb(250,40,50)" fg:x="906" fg:w="1"/><text x="72.3264%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="72.1559%" y="245" width="0.0796%" height="15" fill="rgb(217,119,7)" fg:x="907" fg:w="1"/><text x="72.4059%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="72.1559%" y="261" width="0.1591%" height="15" fill="rgb(245,214,40)" fg:x="907" fg:w="2"/><text x="72.4059%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="72.2355%" y="245" width="0.0796%" height="15" fill="rgb(216,187,1)" fg:x="908" fg:w="1"/><text x="72.4855%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="72.2355%" y="229" width="0.0796%" height="15" fill="rgb(237,146,21)" fg:x="908" fg:w="1"/><text x="72.4855%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3150%" y="229" width="0.0796%" height="15" fill="rgb(210,174,47)" fg:x="909" fg:w="1"/><text x="72.5650%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (51 samples, 4.06%)</title><rect x="72.3150%" y="261" width="4.0573%" height="15" fill="rgb(218,111,39)" fg:x="909" fg:w="51"/><text x="72.5650%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (51 samples, 4.06%)</title><rect x="72.3150%" y="245" width="4.0573%" height="15" fill="rgb(224,95,19)" fg:x="909" fg:w="51"/><text x="72.5650%" y="255.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (50 samples, 3.98%)</title><rect x="72.3946%" y="229" width="3.9777%" height="15" fill="rgb(234,15,38)" fg:x="910" fg:w="50"/><text x="72.6446%" y="239.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="76.3723%" y="261" width="0.3978%" height="15" fill="rgb(246,56,12)" fg:x="960" fg:w="5"/><text x="76.6223%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 5.49%)</title><rect x="71.3604%" y="309" width="5.4893%" height="15" fill="rgb(247,16,17)" fg:x="897" fg:w="69"/><text x="71.6104%" y="319.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (69 samples, 5.49%)</title><rect x="71.3604%" y="293" width="5.4893%" height="15" fill="rgb(215,151,11)" fg:x="897" fg:w="69"/><text x="71.6104%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (68 samples, 5.41%)</title><rect x="71.4399%" y="277" width="5.4097%" height="15" fill="rgb(225,16,24)" fg:x="898" fg:w="68"/><text x="71.6899%" y="287.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="76.7701%" y="261" width="0.0796%" height="15" fill="rgb(217,117,5)" fg:x="965" fg:w="1"/><text x="77.0201%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.7701%" y="245" width="0.0796%" height="15" fill="rgb(246,187,53)" fg:x="965" fg:w="1"/><text x="77.0201%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.7701%" y="229" width="0.0796%" height="15" fill="rgb(241,71,40)" fg:x="965" fg:w="1"/><text x="77.0201%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7701%" y="213" width="0.0796%" height="15" fill="rgb(231,67,39)" fg:x="965" fg:w="1"/><text x="77.0201%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="76.8496%" y="293" width="0.1591%" height="15" fill="rgb(222,120,24)" fg:x="966" fg:w="2"/><text x="77.0996%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4861%" y="277" width="0.0796%" height="15" fill="rgb(248,3,3)" fg:x="974" fg:w="1"/><text x="77.7361%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.64%)</title><rect x="77.0088%" y="293" width="0.6364%" height="15" fill="rgb(228,218,5)" fg:x="968" fg:w="8"/><text x="77.2588%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.5656%" y="277" width="0.0796%" height="15" fill="rgb(212,202,43)" fg:x="975" fg:w="1"/><text x="77.8156%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.5656%" y="261" width="0.0796%" height="15" fill="rgb(235,183,2)" fg:x="975" fg:w="1"/><text x="77.8156%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.5656%" y="245" width="0.0796%" height="15" fill="rgb(230,165,10)" fg:x="975" fg:w="1"/><text x="77.8156%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (91 samples, 7.24%)</title><rect x="70.4853%" y="341" width="7.2395%" height="15" fill="rgb(219,54,40)" fg:x="886" fg:w="91"/><text x="70.7353%" y="351.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (81 samples, 6.44%)</title><rect x="71.2808%" y="325" width="6.4439%" height="15" fill="rgb(244,73,9)" fg:x="896" fg:w="81"/><text x="71.5308%" y="335.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="76.8496%" y="309" width="0.8751%" height="15" fill="rgb(212,32,45)" fg:x="966" fg:w="11"/><text x="77.0996%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="77.6452%" y="293" width="0.0796%" height="15" fill="rgb(205,58,31)" fg:x="976" fg:w="1"/><text x="77.8952%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="77.8839%" y="309" width="0.0796%" height="15" fill="rgb(250,120,43)" fg:x="979" fg:w="1"/><text x="78.1339%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="77.9634%" y="277" width="0.0796%" height="15" fill="rgb(235,13,10)" fg:x="980" fg:w="1"/><text x="78.2134%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="77.9634%" y="293" width="0.1591%" height="15" fill="rgb(232,219,31)" fg:x="980" fg:w="2"/><text x="78.2134%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="78.0430%" y="277" width="0.0796%" height="15" fill="rgb(218,157,51)" fg:x="981" fg:w="1"/><text x="78.2930%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="78.0430%" y="261" width="0.0796%" height="15" fill="rgb(211,91,52)" fg:x="981" fg:w="1"/><text x="78.2930%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="78.0430%" y="245" width="0.0796%" height="15" fill="rgb(240,173,1)" fg:x="981" fg:w="1"/><text x="78.2930%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="78.1225%" y="293" width="0.0796%" height="15" fill="rgb(248,20,47)" fg:x="982" fg:w="1"/><text x="78.3725%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="77.7247%" y="341" width="0.7160%" height="15" fill="rgb(217,221,40)" fg:x="977" fg:w="9"/><text x="77.9747%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="77.7247%" y="325" width="0.7160%" height="15" fill="rgb(226,149,51)" fg:x="977" fg:w="9"/><text x="77.9747%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="77.9634%" y="309" width="0.4773%" height="15" fill="rgb(252,193,7)" fg:x="980" fg:w="6"/><text x="78.2134%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="78.2021%" y="293" width="0.2387%" height="15" fill="rgb(205,123,0)" fg:x="983" fg:w="3"/><text x="78.4521%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="78.2021%" y="277" width="0.2387%" height="15" fill="rgb(233,173,25)" fg:x="983" fg:w="3"/><text x="78.4521%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="78.2021%" y="261" width="0.2387%" height="15" fill="rgb(216,63,32)" fg:x="983" fg:w="3"/><text x="78.4521%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="78.2021%" y="245" width="0.2387%" height="15" fill="rgb(209,56,45)" fg:x="983" fg:w="3"/><text x="78.4521%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (105 samples, 8.35%)</title><rect x="70.2466%" y="389" width="8.3532%" height="15" fill="rgb(226,111,49)" fg:x="883" fg:w="105"/><text x="70.4966%" y="399.50">&lt;regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (105 samples, 8.35%)</title><rect x="70.2466%" y="373" width="8.3532%" height="15" fill="rgb(244,181,21)" fg:x="883" fg:w="105"/><text x="70.4966%" y="383.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (104 samples, 8.27%)</title><rect x="70.3262%" y="357" width="8.2737%" height="15" fill="rgb(222,126,15)" fg:x="884" fg:w="104"/><text x="70.5762%" y="367.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="78.4407%" y="341" width="0.1591%" height="15" fill="rgb(222,95,17)" fg:x="986" fg:w="2"/><text x="78.6907%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="78.4407%" y="325" width="0.1591%" height="15" fill="rgb(254,46,5)" fg:x="986" fg:w="2"/><text x="78.6907%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="78.4407%" y="309" width="0.1591%" height="15" fill="rgb(236,216,35)" fg:x="986" fg:w="2"/><text x="78.6907%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="78.5203%" y="293" width="0.0796%" height="15" fill="rgb(217,187,26)" fg:x="987" fg:w="1"/><text x="78.7703%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="78.5998%" y="357" width="0.1591%" height="15" fill="rgb(207,192,25)" fg:x="988" fg:w="2"/><text x="78.8498%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="78.5998%" y="341" width="0.1591%" height="15" fill="rgb(253,135,27)" fg:x="988" fg:w="2"/><text x="78.8498%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.6794%" y="325" width="0.0796%" height="15" fill="rgb(211,122,29)" fg:x="989" fg:w="1"/><text x="78.9294%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.6794%" y="309" width="0.0796%" height="15" fill="rgb(233,162,40)" fg:x="989" fg:w="1"/><text x="78.9294%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="78.5998%" y="389" width="0.3182%" height="15" fill="rgb(222,184,47)" fg:x="988" fg:w="4"/><text x="78.8498%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="78.5998%" y="373" width="0.3182%" height="15" fill="rgb(249,99,23)" fg:x="988" fg:w="4"/><text x="78.8498%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="78.7589%" y="357" width="0.1591%" height="15" fill="rgb(214,60,12)" fg:x="990" fg:w="2"/><text x="79.0089%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (2 samples, 0.16%)</title><rect x="78.7589%" y="341" width="0.1591%" height="15" fill="rgb(250,229,36)" fg:x="990" fg:w="2"/><text x="79.0089%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="78.7589%" y="325" width="0.1591%" height="15" fill="rgb(232,195,10)" fg:x="990" fg:w="2"/><text x="79.0089%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="78.9181%" y="341" width="0.2387%" height="15" fill="rgb(205,213,31)" fg:x="992" fg:w="3"/><text x="79.1681%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="78.9181%" y="325" width="0.2387%" height="15" fill="rgb(237,43,8)" fg:x="992" fg:w="3"/><text x="79.1681%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0772%" y="309" width="0.0796%" height="15" fill="rgb(216,208,3)" fg:x="994" fg:w="1"/><text x="79.3272%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0772%" y="293" width="0.0796%" height="15" fill="rgb(228,179,44)" fg:x="994" fg:w="1"/><text x="79.3272%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (116 samples, 9.23%)</title><rect x="70.0080%" y="405" width="9.2283%" height="15" fill="rgb(230,192,27)" fg:x="880" fg:w="116"/><text x="70.2580%" y="415.50">indefinite::h..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="78.9181%" y="389" width="0.3182%" height="15" fill="rgb(251,30,38)" fg:x="992" fg:w="4"/><text x="79.1681%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="78.9181%" y="373" width="0.3182%" height="15" fill="rgb(246,55,52)" fg:x="992" fg:w="4"/><text x="79.1681%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="78.9181%" y="357" width="0.3182%" height="15" fill="rgb(249,79,26)" fg:x="992" fg:w="4"/><text x="79.1681%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="79.1567%" y="341" width="0.0796%" height="15" fill="rgb(220,202,16)" fg:x="995" fg:w="1"/><text x="79.4067%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="79.1567%" y="325" width="0.0796%" height="15" fill="rgb(250,170,23)" fg:x="995" fg:w="1"/><text x="79.4067%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.1567%" y="309" width="0.0796%" height="15" fill="rgb(230,7,37)" fg:x="995" fg:w="1"/><text x="79.4067%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.1567%" y="293" width="0.0796%" height="15" fill="rgb(213,71,1)" fg:x="995" fg:w="1"/><text x="79.4067%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1567%" y="277" width="0.0796%" height="15" fill="rgb(227,87,39)" fg:x="995" fg:w="1"/><text x="79.4067%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.3158%" y="341" width="0.0796%" height="15" fill="rgb(210,41,29)" fg:x="997" fg:w="1"/><text x="79.5658%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.3158%" y="325" width="0.0796%" height="15" fill="rgb(206,191,31)" fg:x="997" fg:w="1"/><text x="79.5658%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3158%" y="309" width="0.0796%" height="15" fill="rgb(247,75,54)" fg:x="997" fg:w="1"/><text x="79.5658%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="79.3954%" y="341" width="0.0796%" height="15" fill="rgb(208,54,50)" fg:x="998" fg:w="1"/><text x="79.6454%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.3954%" y="325" width="0.0796%" height="15" fill="rgb(214,90,37)" fg:x="998" fg:w="1"/><text x="79.6454%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4749%" y="309" width="0.0796%" height="15" fill="rgb(220,132,6)" fg:x="999" fg:w="1"/><text x="79.7249%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="79.4749%" y="325" width="0.5569%" height="15" fill="rgb(213,167,7)" fg:x="999" fg:w="7"/><text x="79.7249%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="79.5545%" y="309" width="0.4773%" height="15" fill="rgb(243,36,27)" fg:x="1000" fg:w="6"/><text x="79.8045%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9523%" y="293" width="0.0796%" height="15" fill="rgb(235,147,12)" fg:x="1005" fg:w="1"/><text x="80.2023%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.1114%" y="293" width="0.0796%" height="15" fill="rgb(212,198,44)" fg:x="1007" fg:w="1"/><text x="80.3614%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="80.0318%" y="325" width="0.2387%" height="15" fill="rgb(218,68,50)" fg:x="1006" fg:w="3"/><text x="80.2818%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="80.0318%" y="309" width="0.2387%" height="15" fill="rgb(224,79,48)" fg:x="1006" fg:w="3"/><text x="80.2818%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="80.1909%" y="293" width="0.0796%" height="15" fill="rgb(213,191,50)" fg:x="1008" fg:w="1"/><text x="80.4409%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.1909%" y="277" width="0.0796%" height="15" fill="rgb(254,146,10)" fg:x="1008" fg:w="1"/><text x="80.4409%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="80.2705%" y="293" width="0.0796%" height="15" fill="rgb(215,175,11)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.2705%" y="277" width="0.0796%" height="15" fill="rgb(207,49,7)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.2705%" y="261" width="0.0796%" height="15" fill="rgb(234,144,29)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.2705%" y="245" width="0.0796%" height="15" fill="rgb(213,222,48)" fg:x="1009" fg:w="1"/><text x="80.5205%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.80%)</title><rect x="80.3500%" y="293" width="0.7955%" height="15" fill="rgb(222,8,6)" fg:x="1010" fg:w="10"/><text x="80.6000%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.56%)</title><rect x="80.5887%" y="277" width="0.5569%" height="15" fill="rgb(221,114,49)" fg:x="1013" fg:w="7"/><text x="80.8387%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="80.9865%" y="261" width="0.1591%" height="15" fill="rgb(250,140,42)" fg:x="1018" fg:w="2"/><text x="81.2365%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="80.9865%" y="245" width="0.1591%" height="15" fill="rgb(250,150,27)" fg:x="1018" fg:w="2"/><text x="81.2365%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="80.9865%" y="229" width="0.1591%" height="15" fill="rgb(252,159,3)" fg:x="1018" fg:w="2"/><text x="81.2365%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="81.1456%" y="293" width="0.3978%" height="15" fill="rgb(241,182,3)" fg:x="1020" fg:w="5"/><text x="81.3956%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="81.1456%" y="277" width="0.3978%" height="15" fill="rgb(236,3,9)" fg:x="1020" fg:w="5"/><text x="81.3956%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="81.1456%" y="261" width="0.3978%" height="15" fill="rgb(223,227,51)" fg:x="1020" fg:w="5"/><text x="81.3956%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (17 samples, 1.35%)</title><rect x="80.2705%" y="325" width="1.3524%" height="15" fill="rgb(232,133,30)" fg:x="1009" fg:w="17"/><text x="80.5205%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (17 samples, 1.35%)</title><rect x="80.2705%" y="309" width="1.3524%" height="15" fill="rgb(209,93,27)" fg:x="1009" fg:w="17"/><text x="80.5205%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="81.5434%" y="293" width="0.0796%" height="15" fill="rgb(208,108,34)" fg:x="1025" fg:w="1"/><text x="81.7934%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="81.6229%" y="261" width="0.0796%" height="15" fill="rgb(215,189,13)" fg:x="1026" fg:w="1"/><text x="81.8729%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="82.4185%" y="213" width="0.5569%" height="15" fill="rgb(206,88,23)" fg:x="1036" fg:w="7"/><text x="82.6685%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.9753%" y="213" width="0.0796%" height="15" fill="rgb(240,173,0)" fg:x="1043" fg:w="1"/><text x="83.2253%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="83.0549%" y="213" width="0.3978%" height="15" fill="rgb(223,106,52)" fg:x="1044" fg:w="5"/><text x="83.3049%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="83.2936%" y="197" width="0.1591%" height="15" fill="rgb(206,130,16)" fg:x="1047" fg:w="2"/><text x="83.5436%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.2936%" y="181" width="0.1591%" height="15" fill="rgb(220,54,25)" fg:x="1047" fg:w="2"/><text x="83.5436%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="83.2936%" y="165" width="0.1591%" height="15" fill="rgb(210,4,38)" fg:x="1047" fg:w="2"/><text x="83.5436%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="83.4527%" y="213" width="0.0796%" height="15" fill="rgb(238,94,39)" fg:x="1049" fg:w="1"/><text x="83.7027%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.6118%" y="181" width="0.0796%" height="15" fill="rgb(234,124,34)" fg:x="1051" fg:w="1"/><text x="83.8618%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.6118%" y="165" width="0.0796%" height="15" fill="rgb(221,91,40)" fg:x="1051" fg:w="1"/><text x="83.8618%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.6118%" y="149" width="0.0796%" height="15" fill="rgb(246,53,28)" fg:x="1051" fg:w="1"/><text x="83.8618%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4073%" y="165" width="0.0796%" height="15" fill="rgb(229,109,7)" fg:x="1061" fg:w="1"/><text x="84.6573%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (13 samples, 1.03%)</title><rect x="83.5322%" y="213" width="1.0342%" height="15" fill="rgb(249,117,8)" fg:x="1050" fg:w="13"/><text x="83.7822%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (13 samples, 1.03%)</title><rect x="83.5322%" y="197" width="1.0342%" height="15" fill="rgb(210,181,1)" fg:x="1050" fg:w="13"/><text x="83.7822%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (11 samples, 0.88%)</title><rect x="83.6913%" y="181" width="0.8751%" height="15" fill="rgb(211,66,1)" fg:x="1052" fg:w="11"/><text x="83.9413%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="84.4869%" y="165" width="0.0796%" height="15" fill="rgb(221,90,14)" fg:x="1062" fg:w="1"/><text x="84.7369%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.4869%" y="149" width="0.0796%" height="15" fill="rgb(219,222,44)" fg:x="1062" fg:w="1"/><text x="84.7369%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4869%" y="133" width="0.0796%" height="15" fill="rgb(246,34,33)" fg:x="1062" fg:w="1"/><text x="84.7369%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.4869%" y="117" width="0.0796%" height="15" fill="rgb(227,135,41)" fg:x="1062" fg:w="1"/><text x="84.7369%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="84.5664%" y="213" width="0.1591%" height="15" fill="rgb(226,15,14)" fg:x="1063" fg:w="2"/><text x="84.8164%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="84.5664%" y="197" width="0.1591%" height="15" fill="rgb(236,148,47)" fg:x="1063" fg:w="2"/><text x="84.8164%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="84.5664%" y="181" width="0.1591%" height="15" fill="rgb(233,162,52)" fg:x="1063" fg:w="2"/><text x="84.8164%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.66%)</title><rect x="84.7255%" y="213" width="3.6595%" height="15" fill="rgb(244,35,28)" fg:x="1065" fg:w="46"/><text x="84.9755%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.66%)</title><rect x="84.7255%" y="197" width="3.6595%" height="15" fill="rgb(205,121,10)" fg:x="1065" fg:w="46"/><text x="84.9755%" y="207.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (46 samples, 3.66%)</title><rect x="84.7255%" y="181" width="3.6595%" height="15" fill="rgb(250,58,18)" fg:x="1065" fg:w="46"/><text x="84.9755%" y="191.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="88.3850%" y="213" width="0.1591%" height="15" fill="rgb(216,37,13)" fg:x="1111" fg:w="2"/><text x="88.6350%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 7.08%)</title><rect x="81.6229%" y="309" width="7.0804%" height="15" fill="rgb(221,215,42)" fg:x="1026" fg:w="89"/><text x="81.8729%" y="319.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (89 samples, 7.08%)</title><rect x="81.6229%" y="293" width="7.0804%" height="15" fill="rgb(217,214,19)" fg:x="1026" fg:w="89"/><text x="81.8729%" y="303.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (89 samples, 7.08%)</title><rect x="81.6229%" y="277" width="7.0804%" height="15" fill="rgb(233,139,13)" fg:x="1026" fg:w="89"/><text x="81.8729%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (88 samples, 7.00%)</title><rect x="81.7025%" y="261" width="7.0008%" height="15" fill="rgb(247,168,23)" fg:x="1027" fg:w="88"/><text x="81.9525%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (88 samples, 7.00%)</title><rect x="81.7025%" y="245" width="7.0008%" height="15" fill="rgb(207,202,1)" fg:x="1027" fg:w="88"/><text x="81.9525%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (88 samples, 7.00%)</title><rect x="81.7025%" y="229" width="7.0008%" height="15" fill="rgb(220,155,48)" fg:x="1027" fg:w="88"/><text x="81.9525%" y="239.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="88.5442%" y="213" width="0.1591%" height="15" fill="rgb(250,43,26)" fg:x="1113" fg:w="2"/><text x="88.7942%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.6237%" y="197" width="0.0796%" height="15" fill="rgb(212,190,23)" fg:x="1114" fg:w="1"/><text x="88.8737%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.6237%" y="181" width="0.0796%" height="15" fill="rgb(216,39,24)" fg:x="1114" fg:w="1"/><text x="88.8737%" y="191.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="88.6237%" y="165" width="0.0796%" height="15" fill="rgb(252,113,16)" fg:x="1114" fg:w="1"/><text x="88.8737%" y="175.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="88.6237%" y="149" width="0.0796%" height="15" fill="rgb(208,113,19)" fg:x="1114" fg:w="1"/><text x="88.8737%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.7828%" y="293" width="0.0796%" height="15" fill="rgb(234,107,25)" fg:x="1116" fg:w="1"/><text x="89.0328%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.80%)</title><rect x="88.8624%" y="293" width="0.7955%" height="15" fill="rgb(234,217,51)" fg:x="1117" fg:w="10"/><text x="89.1124%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="89.3397%" y="277" width="0.3182%" height="15" fill="rgb(251,29,42)" fg:x="1123" fg:w="4"/><text x="89.5897%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.4988%" y="261" width="0.1591%" height="15" fill="rgb(221,62,51)" fg:x="1125" fg:w="2"/><text x="89.7488%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.4988%" y="245" width="0.1591%" height="15" fill="rgb(240,192,43)" fg:x="1125" fg:w="2"/><text x="89.7488%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="89.6579%" y="293" width="0.3978%" height="15" fill="rgb(224,157,47)" fg:x="1127" fg:w="5"/><text x="89.9079%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (134 samples, 10.66%)</title><rect x="79.4749%" y="341" width="10.6603%" height="15" fill="rgb(226,84,45)" fg:x="999" fg:w="134"/><text x="79.7249%" y="351.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (107 samples, 8.51%)</title><rect x="81.6229%" y="325" width="8.5123%" height="15" fill="rgb(208,207,23)" fg:x="1026" fg:w="107"/><text x="81.8729%" y="335.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.43%)</title><rect x="88.7033%" y="309" width="1.4320%" height="15" fill="rgb(253,34,51)" fg:x="1115" fg:w="18"/><text x="88.9533%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="90.0557%" y="293" width="0.0796%" height="15" fill="rgb(227,26,34)" fg:x="1132" fg:w="1"/><text x="90.3057%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.0557%" y="277" width="0.0796%" height="15" fill="rgb(245,75,19)" fg:x="1132" fg:w="1"/><text x="90.3057%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.0557%" y="261" width="0.0796%" height="15" fill="rgb(250,191,31)" fg:x="1132" fg:w="1"/><text x="90.3057%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.0557%" y="245" width="0.0796%" height="15" fill="rgb(224,11,50)" fg:x="1132" fg:w="1"/><text x="90.3057%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="90.2148%" y="293" width="0.0796%" height="15" fill="rgb(231,171,7)" fg:x="1134" fg:w="1"/><text x="90.4648%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="90.2148%" y="309" width="0.1591%" height="15" fill="rgb(252,214,10)" fg:x="1134" fg:w="2"/><text x="90.4648%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="90.2944%" y="293" width="0.0796%" height="15" fill="rgb(249,45,46)" fg:x="1135" fg:w="1"/><text x="90.5444%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="90.1352%" y="341" width="0.3182%" height="15" fill="rgb(240,173,7)" fg:x="1133" fg:w="4"/><text x="90.3852%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="90.1352%" y="325" width="0.3182%" height="15" fill="rgb(235,214,13)" fg:x="1133" fg:w="4"/><text x="90.3852%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="90.3739%" y="309" width="0.0796%" height="15" fill="rgb(245,156,8)" fg:x="1136" fg:w="1"/><text x="90.6239%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3739%" y="293" width="0.0796%" height="15" fill="rgb(235,46,12)" fg:x="1136" fg:w="1"/><text x="90.6239%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.4535%" y="293" width="0.0796%" height="15" fill="rgb(221,81,14)" fg:x="1137" fg:w="1"/><text x="90.7035%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.4535%" y="277" width="0.0796%" height="15" fill="rgb(238,207,9)" fg:x="1137" fg:w="1"/><text x="90.7035%" y="287.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="90.4535%" y="261" width="0.0796%" height="15" fill="rgb(224,129,35)" fg:x="1137" fg:w="1"/><text x="90.7035%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="90.5330%" y="293" width="0.1591%" height="15" fill="rgb(243,218,34)" fg:x="1138" fg:w="2"/><text x="90.7830%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="90.4535%" y="309" width="0.3182%" height="15" fill="rgb(220,166,13)" fg:x="1137" fg:w="4"/><text x="90.7035%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="90.6921%" y="293" width="0.0796%" height="15" fill="rgb(227,167,49)" fg:x="1140" fg:w="1"/><text x="90.9421%" y="303.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="90.6921%" y="277" width="0.0796%" height="15" fill="rgb(234,142,12)" fg:x="1140" fg:w="1"/><text x="90.9421%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="90.6921%" y="261" width="0.0796%" height="15" fill="rgb(207,100,48)" fg:x="1140" fg:w="1"/><text x="90.9421%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="90.7717%" y="309" width="0.0796%" height="15" fill="rgb(210,25,14)" fg:x="1141" fg:w="1"/><text x="91.0217%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (147 samples, 11.69%)</title><rect x="79.2363%" y="389" width="11.6945%" height="15" fill="rgb(246,116,27)" fg:x="996" fg:w="147"/><text x="79.4863%" y="399.50">&lt;regex::regex::st..</text></g><g><title>regex::builders::Builder::build_one_string (146 samples, 11.61%)</title><rect x="79.3158%" y="373" width="11.6150%" height="15" fill="rgb(214,193,42)" fg:x="997" fg:w="146"/><text x="79.5658%" y="383.50">regex::builders::..</text></g><g><title>regex_automata::meta::regex::Builder::build (146 samples, 11.61%)</title><rect x="79.3158%" y="357" width="11.6150%" height="15" fill="rgb(214,122,8)" fg:x="997" fg:w="146"/><text x="79.5658%" y="367.50">regex_automata::m..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="90.4535%" y="341" width="0.4773%" height="15" fill="rgb(244,173,18)" fg:x="1137" fg:w="6"/><text x="90.7035%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="90.4535%" y="325" width="0.4773%" height="15" fill="rgb(232,68,19)" fg:x="1137" fg:w="6"/><text x="90.7035%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="90.8512%" y="309" width="0.0796%" height="15" fill="rgb(236,224,1)" fg:x="1142" fg:w="1"/><text x="91.1012%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="90.8512%" y="293" width="0.0796%" height="15" fill="rgb(240,11,8)" fg:x="1142" fg:w="1"/><text x="91.1012%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.8512%" y="277" width="0.0796%" height="15" fill="rgb(244,159,20)" fg:x="1142" fg:w="1"/><text x="91.1012%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.9308%" y="357" width="0.0796%" height="15" fill="rgb(240,223,54)" fg:x="1143" fg:w="1"/><text x="91.1808%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="90.9308%" y="341" width="0.0796%" height="15" fill="rgb(237,146,5)" fg:x="1143" fg:w="1"/><text x="91.1808%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.9308%" y="325" width="0.0796%" height="15" fill="rgb(218,221,32)" fg:x="1143" fg:w="1"/><text x="91.1808%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.9308%" y="309" width="0.0796%" height="15" fill="rgb(244,96,26)" fg:x="1143" fg:w="1"/><text x="91.1808%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.9308%" y="293" width="0.0796%" height="15" fill="rgb(245,184,37)" fg:x="1143" fg:w="1"/><text x="91.1808%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="90.9308%" y="389" width="0.1591%" height="15" fill="rgb(248,91,47)" fg:x="1143" fg:w="2"/><text x="91.1808%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="90.9308%" y="373" width="0.1591%" height="15" fill="rgb(243,199,8)" fg:x="1143" fg:w="2"/><text x="91.1808%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="91.0103%" y="357" width="0.0796%" height="15" fill="rgb(249,12,15)" fg:x="1144" fg:w="1"/><text x="91.2603%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="91.0103%" y="341" width="0.0796%" height="15" fill="rgb(245,97,12)" fg:x="1144" fg:w="1"/><text x="91.2603%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.0103%" y="325" width="0.0796%" height="15" fill="rgb(244,61,1)" fg:x="1144" fg:w="1"/><text x="91.2603%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="91.0899%" y="341" width="0.0796%" height="15" fill="rgb(222,194,10)" fg:x="1145" fg:w="1"/><text x="91.3399%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="91.0899%" y="325" width="0.0796%" height="15" fill="rgb(226,178,8)" fg:x="1145" fg:w="1"/><text x="91.3399%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="91.0899%" y="373" width="0.1591%" height="15" fill="rgb(241,32,34)" fg:x="1145" fg:w="2"/><text x="91.3399%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="91.0899%" y="357" width="0.1591%" height="15" fill="rgb(254,26,6)" fg:x="1145" fg:w="2"/><text x="91.3399%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="91.1695%" y="341" width="0.0796%" height="15" fill="rgb(249,71,11)" fg:x="1146" fg:w="1"/><text x="91.4195%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="91.2490%" y="309" width="0.1591%" height="15" fill="rgb(232,170,27)" fg:x="1147" fg:w="2"/><text x="91.4990%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.8059%" y="261" width="0.0796%" height="15" fill="rgb(214,223,17)" fg:x="1154" fg:w="1"/><text x="92.0559%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="91.7263%" y="293" width="0.2387%" height="15" fill="rgb(250,18,15)" fg:x="1153" fg:w="3"/><text x="91.9763%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="91.7263%" y="277" width="0.2387%" height="15" fill="rgb(212,153,51)" fg:x="1153" fg:w="3"/><text x="91.9763%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.8854%" y="261" width="0.0796%" height="15" fill="rgb(219,194,12)" fg:x="1155" fg:w="1"/><text x="92.1354%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.9650%" y="293" width="0.0796%" height="15" fill="rgb(212,58,17)" fg:x="1156" fg:w="1"/><text x="92.2150%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.9650%" y="277" width="0.0796%" height="15" fill="rgb(254,5,10)" fg:x="1156" fg:w="1"/><text x="92.2150%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="91.9650%" y="261" width="0.0796%" height="15" fill="rgb(246,91,7)" fg:x="1156" fg:w="1"/><text x="92.2150%" y="271.50"></text></g><g><title>indefinite::rules::number::Number::check (165 samples, 13.13%)</title><rect x="79.2363%" y="405" width="13.1265%" height="15" fill="rgb(218,108,49)" fg:x="996" fg:w="165"/><text x="79.4863%" y="415.50">indefinite::rules::n..</text></g><g><title>regex::regex::string::Regex::is_match_at (16 samples, 1.27%)</title><rect x="91.0899%" y="389" width="1.2729%" height="15" fill="rgb(238,123,20)" fg:x="1145" fg:w="16"/><text x="91.3399%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.11%)</title><rect x="91.2490%" y="373" width="1.1138%" height="15" fill="rgb(231,69,23)" fg:x="1147" fg:w="14"/><text x="91.4990%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.11%)</title><rect x="91.2490%" y="357" width="1.1138%" height="15" fill="rgb(230,209,3)" fg:x="1147" fg:w="14"/><text x="91.4990%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.11%)</title><rect x="91.2490%" y="341" width="1.1138%" height="15" fill="rgb(231,19,0)" fg:x="1147" fg:w="14"/><text x="91.4990%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.11%)</title><rect x="91.2490%" y="325" width="1.1138%" height="15" fill="rgb(226,192,25)" fg:x="1147" fg:w="14"/><text x="91.4990%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.95%)</title><rect x="91.4081%" y="309" width="0.9547%" height="15" fill="rgb(223,175,53)" fg:x="1149" fg:w="12"/><text x="91.6581%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="92.0446%" y="293" width="0.3182%" height="15" fill="rgb(248,35,51)" fg:x="1157" fg:w="4"/><text x="92.2946%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.4423%" y="325" width="0.0796%" height="15" fill="rgb(230,37,26)" fg:x="1162" fg:w="1"/><text x="92.6923%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.4423%" y="309" width="0.0796%" height="15" fill="rgb(206,120,22)" fg:x="1162" fg:w="1"/><text x="92.6923%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.4423%" y="293" width="0.0796%" height="15" fill="rgb(207,165,28)" fg:x="1162" fg:w="1"/><text x="92.6923%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="92.5219%" y="325" width="0.0796%" height="15" fill="rgb(226,23,46)" fg:x="1163" fg:w="1"/><text x="92.7719%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.5219%" y="309" width="0.0796%" height="15" fill="rgb(208,130,44)" fg:x="1163" fg:w="1"/><text x="92.7719%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="92.5219%" y="293" width="0.0796%" height="15" fill="rgb(231,67,8)" fg:x="1163" fg:w="1"/><text x="92.7719%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.5219%" y="277" width="0.0796%" height="15" fill="rgb(205,183,22)" fg:x="1163" fg:w="1"/><text x="92.7719%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="92.5219%" y="261" width="0.0796%" height="15" fill="rgb(224,47,9)" fg:x="1163" fg:w="1"/><text x="92.7719%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="92.6810%" y="309" width="0.0796%" height="15" fill="rgb(250,183,49)" fg:x="1165" fg:w="1"/><text x="92.9310%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="92.6810%" y="293" width="0.0796%" height="15" fill="rgb(220,151,39)" fg:x="1165" fg:w="1"/><text x="92.9310%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.6810%" y="277" width="0.0796%" height="15" fill="rgb(220,118,20)" fg:x="1165" fg:w="1"/><text x="92.9310%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="92.7605%" y="309" width="0.2387%" height="15" fill="rgb(231,65,51)" fg:x="1166" fg:w="3"/><text x="93.0105%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="92.7605%" y="293" width="0.2387%" height="15" fill="rgb(253,125,37)" fg:x="1166" fg:w="3"/><text x="93.0105%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="92.9992%" y="293" width="0.1591%" height="15" fill="rgb(232,102,6)" fg:x="1169" fg:w="2"/><text x="93.2492%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="92.9992%" y="277" width="0.1591%" height="15" fill="rgb(251,105,13)" fg:x="1169" fg:w="2"/><text x="93.2492%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="93.0788%" y="261" width="0.0796%" height="15" fill="rgb(222,179,29)" fg:x="1170" fg:w="1"/><text x="93.3288%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="93.1583%" y="277" width="0.1591%" height="15" fill="rgb(229,180,53)" fg:x="1171" fg:w="2"/><text x="93.4083%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.95%)</title><rect x="92.6014%" y="325" width="0.9547%" height="15" fill="rgb(238,104,13)" fg:x="1164" fg:w="12"/><text x="92.8514%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.56%)</title><rect x="92.9992%" y="309" width="0.5569%" height="15" fill="rgb(210,130,5)" fg:x="1169" fg:w="7"/><text x="93.2492%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="93.1583%" y="293" width="0.3978%" height="15" fill="rgb(233,87,49)" fg:x="1171" fg:w="5"/><text x="93.4083%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="93.3174%" y="277" width="0.2387%" height="15" fill="rgb(243,34,9)" fg:x="1173" fg:w="3"/><text x="93.5674%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="93.5561%" y="277" width="0.1591%" height="15" fill="rgb(235,225,10)" fg:x="1176" fg:w="2"/><text x="93.8061%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="93.5561%" y="261" width="0.1591%" height="15" fill="rgb(212,0,30)" fg:x="1176" fg:w="2"/><text x="93.8061%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="93.5561%" y="245" width="0.1591%" height="15" fill="rgb(211,177,0)" fg:x="1176" fg:w="2"/><text x="93.8061%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="93.5561%" y="229" width="0.1591%" height="15" fill="rgb(225,220,11)" fg:x="1176" fg:w="2"/><text x="93.8061%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="93.5561%" y="293" width="0.3182%" height="15" fill="rgb(215,10,13)" fg:x="1176" fg:w="4"/><text x="93.8061%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="93.7152%" y="277" width="0.1591%" height="15" fill="rgb(240,177,14)" fg:x="1178" fg:w="2"/><text x="93.9652%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="93.7947%" y="261" width="0.0796%" height="15" fill="rgb(243,7,39)" fg:x="1179" fg:w="1"/><text x="94.0447%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="93.9539%" y="277" width="0.0796%" height="15" fill="rgb(212,99,0)" fg:x="1181" fg:w="1"/><text x="94.2039%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="93.5561%" y="325" width="0.5569%" height="15" fill="rgb(225,162,48)" fg:x="1176" fg:w="7"/><text x="93.8061%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="93.5561%" y="309" width="0.5569%" height="15" fill="rgb(246,16,25)" fg:x="1176" fg:w="7"/><text x="93.8061%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="93.8743%" y="293" width="0.2387%" height="15" fill="rgb(220,150,2)" fg:x="1180" fg:w="3"/><text x="94.1243%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.0334%" y="277" width="0.0796%" height="15" fill="rgb(237,113,11)" fg:x="1182" fg:w="1"/><text x="94.2834%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.0334%" y="261" width="0.0796%" height="15" fill="rgb(236,70,20)" fg:x="1182" fg:w="1"/><text x="94.2834%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="94.1130%" y="293" width="0.1591%" height="15" fill="rgb(234,94,7)" fg:x="1183" fg:w="2"/><text x="94.3630%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="94.1130%" y="277" width="0.1591%" height="15" fill="rgb(250,221,0)" fg:x="1183" fg:w="2"/><text x="94.3630%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="94.1925%" y="261" width="0.0796%" height="15" fill="rgb(245,149,46)" fg:x="1184" fg:w="1"/><text x="94.4425%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (25 samples, 1.99%)</title><rect x="92.3628%" y="373" width="1.9889%" height="15" fill="rgb(215,37,27)" fg:x="1161" fg:w="25"/><text x="92.6128%" y="383.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (25 samples, 1.99%)</title><rect x="92.3628%" y="357" width="1.9889%" height="15" fill="rgb(232,65,3)" fg:x="1161" fg:w="25"/><text x="92.6128%" y="367.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.91%)</title><rect x="92.4423%" y="341" width="1.9093%" height="15" fill="rgb(214,2,16)" fg:x="1162" fg:w="24"/><text x="92.6923%" y="351.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="94.1130%" y="325" width="0.2387%" height="15" fill="rgb(227,131,50)" fg:x="1183" fg:w="3"/><text x="94.3630%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="94.1130%" y="309" width="0.2387%" height="15" fill="rgb(247,131,45)" fg:x="1183" fg:w="3"/><text x="94.3630%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="94.2721%" y="293" width="0.0796%" height="15" fill="rgb(215,97,47)" fg:x="1185" fg:w="1"/><text x="94.5221%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="94.2721%" y="277" width="0.0796%" height="15" fill="rgb(233,143,12)" fg:x="1185" fg:w="1"/><text x="94.5221%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="94.2721%" y="261" width="0.0796%" height="15" fill="rgb(222,57,17)" fg:x="1185" fg:w="1"/><text x="94.5221%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="94.3516%" y="373" width="0.0796%" height="15" fill="rgb(214,119,38)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="94.3516%" y="357" width="0.0796%" height="15" fill="rgb(217,28,47)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="94.3516%" y="341" width="0.0796%" height="15" fill="rgb(231,14,52)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="94.3516%" y="325" width="0.0796%" height="15" fill="rgb(220,158,18)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="94.3516%" y="309" width="0.0796%" height="15" fill="rgb(222,143,46)" fg:x="1186" fg:w="1"/><text x="94.6016%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.4312%" y="341" width="0.0796%" height="15" fill="rgb(227,165,5)" fg:x="1187" fg:w="1"/><text x="94.6812%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="94.4312%" y="325" width="0.0796%" height="15" fill="rgb(216,222,49)" fg:x="1187" fg:w="1"/><text x="94.6812%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="94.4312%" y="309" width="0.0796%" height="15" fill="rgb(238,73,39)" fg:x="1187" fg:w="1"/><text x="94.6812%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.4312%" y="293" width="0.0796%" height="15" fill="rgb(252,115,9)" fg:x="1187" fg:w="1"/><text x="94.6812%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="94.4312%" y="373" width="0.1591%" height="15" fill="rgb(238,202,4)" fg:x="1187" fg:w="2"/><text x="94.6812%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="94.4312%" y="357" width="0.1591%" height="15" fill="rgb(252,153,44)" fg:x="1187" fg:w="2"/><text x="94.6812%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="94.5107%" y="341" width="0.0796%" height="15" fill="rgb(235,128,27)" fg:x="1188" fg:w="1"/><text x="94.7607%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.9085%" y="293" width="0.0796%" height="15" fill="rgb(221,121,47)" fg:x="1193" fg:w="1"/><text x="95.1585%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9085%" y="277" width="0.0796%" height="15" fill="rgb(247,211,47)" fg:x="1193" fg:w="1"/><text x="95.1585%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.9085%" y="261" width="0.0796%" height="15" fill="rgb(252,47,49)" fg:x="1193" fg:w="1"/><text x="95.1585%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="94.5903%" y="325" width="0.4773%" height="15" fill="rgb(219,119,53)" fg:x="1189" fg:w="6"/><text x="94.8403%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="94.5903%" y="309" width="0.4773%" height="15" fill="rgb(243,165,53)" fg:x="1189" fg:w="6"/><text x="94.8403%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="94.9881%" y="293" width="0.0796%" height="15" fill="rgb(230,12,35)" fg:x="1194" fg:w="1"/><text x="95.2381%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (35 samples, 2.78%)</title><rect x="92.3628%" y="389" width="2.7844%" height="15" fill="rgb(239,57,49)" fg:x="1161" fg:w="35"/><text x="92.6128%" y="399.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="94.5903%" y="373" width="0.5569%" height="15" fill="rgb(231,154,7)" fg:x="1189" fg:w="7"/><text x="94.8403%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="94.5903%" y="357" width="0.5569%" height="15" fill="rgb(248,81,34)" fg:x="1189" fg:w="7"/><text x="94.8403%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="94.5903%" y="341" width="0.5569%" height="15" fill="rgb(247,9,5)" fg:x="1189" fg:w="7"/><text x="94.8403%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="95.0676%" y="325" width="0.0796%" height="15" fill="rgb(228,172,27)" fg:x="1195" fg:w="1"/><text x="95.3176%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (328 samples, 26.09%)</title><rect x="69.1329%" y="485" width="26.0939%" height="15" fill="rgb(230,57,44)" fg:x="869" fg:w="328"/><text x="69.3829%" y="495.50">&lt;&amp;kernel::model::entry::Entry as plugins_c..</text></g><g><title>plugins_core::looking::model::qualify_name (318 samples, 25.30%)</title><rect x="69.9284%" y="469" width="25.2983%" height="15" fill="rgb(249,35,22)" fg:x="879" fg:w="318"/><text x="70.1784%" y="479.50">plugins_core::looking::model::qualify_na..</text></g><g><title>indefinite::indefinite (318 samples, 25.30%)</title><rect x="69.9284%" y="453" width="25.2983%" height="15" fill="rgb(250,137,27)" fg:x="879" fg:w="318"/><text x="70.1784%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (318 samples, 25.30%)</title><rect x="69.9284%" y="437" width="25.2983%" height="15" fill="rgb(251,57,31)" fg:x="879" fg:w="318"/><text x="70.1784%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (317 samples, 25.22%)</title><rect x="70.0080%" y="421" width="25.2188%" height="15" fill="rgb(238,60,0)" fg:x="880" fg:w="317"/><text x="70.2580%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (36 samples, 2.86%)</title><rect x="92.3628%" y="405" width="2.8640%" height="15" fill="rgb(242,185,39)" fg:x="1161" fg:w="36"/><text x="92.6128%" y="415.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="95.1472%" y="389" width="0.0796%" height="15" fill="rgb(240,63,43)" fg:x="1196" fg:w="1"/><text x="95.3972%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="95.2267%" y="485" width="0.0796%" height="15" fill="rgb(236,155,6)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="95.2267%" y="469" width="0.0796%" height="15" fill="rgb(215,11,29)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="95.2267%" y="453" width="0.0796%" height="15" fill="rgb(228,180,48)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="95.2267%" y="437" width="0.0796%" height="15" fill="rgb(241,102,12)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="95.2267%" y="421" width="0.0796%" height="15" fill="rgb(246,213,4)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="95.2267%" y="405" width="0.0796%" height="15" fill="rgb(218,134,35)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="95.2267%" y="389" width="0.0796%" height="15" fill="rgb(251,117,35)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="95.2267%" y="373" width="0.0796%" height="15" fill="rgb(206,156,45)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="95.2267%" y="357" width="0.0796%" height="15" fill="rgb(218,52,27)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="95.2267%" y="341" width="0.0796%" height="15" fill="rgb(238,83,36)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="95.2267%" y="325" width="0.0796%" height="15" fill="rgb(218,53,43)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="95.2267%" y="309" width="0.0796%" height="15" fill="rgb(239,54,39)" fg:x="1197" fg:w="1"/><text x="95.4767%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="95.3063%" y="485" width="0.0796%" height="15" fill="rgb(212,198,13)" fg:x="1198" fg:w="1"/><text x="95.5563%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.3063%" y="469" width="0.0796%" height="15" fill="rgb(234,54,46)" fg:x="1198" fg:w="1"/><text x="95.5563%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="95.3858%" y="421" width="0.0796%" height="15" fill="rgb(217,120,7)" fg:x="1199" fg:w="1"/><text x="95.6358%" y="431.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (332 samples, 26.41%)</title><rect x="69.1329%" y="517" width="26.4121%" height="15" fill="rgb(246,39,15)" fg:x="869" fg:w="332"/><text x="69.3829%" y="527.50">&lt;plugins_core::looking::actions::LookActio..</text></g><g><title>plugins_core::looking::model::new_area_observation (332 samples, 26.41%)</title><rect x="69.1329%" y="501" width="26.4121%" height="15" fill="rgb(242,143,31)" fg:x="869" fg:w="332"/><text x="69.3829%" y="511.50">plugins_core::looking::model::new_area_obs..</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="95.3858%" y="485" width="0.1591%" height="15" fill="rgb(252,60,24)" fg:x="1199" fg:w="2"/><text x="95.6358%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="95.3858%" y="469" width="0.1591%" height="15" fill="rgb(249,220,7)" fg:x="1199" fg:w="2"/><text x="95.6358%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="95.3858%" y="453" width="0.1591%" height="15" fill="rgb(236,67,13)" fg:x="1199" fg:w="2"/><text x="95.6358%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="95.3858%" y="437" width="0.1591%" height="15" fill="rgb(210,62,39)" fg:x="1199" fg:w="2"/><text x="95.6358%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="95.4654%" y="421" width="0.0796%" height="15" fill="rgb(219,122,53)" fg:x="1200" fg:w="1"/><text x="95.7154%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="95.4654%" y="405" width="0.0796%" height="15" fill="rgb(218,87,25)" fg:x="1200" fg:w="1"/><text x="95.7154%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="95.4654%" y="389" width="0.0796%" height="15" fill="rgb(234,179,48)" fg:x="1200" fg:w="1"/><text x="95.7154%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="95.4654%" y="373" width="0.0796%" height="15" fill="rgb(248,90,0)" fg:x="1200" fg:w="1"/><text x="95.7154%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (333 samples, 26.49%)</title><rect x="69.1329%" y="677" width="26.4916%" height="15" fill="rgb(207,228,37)" fg:x="869" fg:w="333"/><text x="69.3829%" y="687.50">&lt;engine::session::Session as kernel::actio..</text></g><g><title>kernel::plugins::mw::apply_middleware (333 samples, 26.49%)</title><rect x="69.1329%" y="661" width="26.4916%" height="15" fill="rgb(235,214,15)" fg:x="869" fg:w="333"/><text x="69.3829%" y="671.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (333 samples, 26.49%)</title><rect x="69.1329%" y="645" width="26.4916%" height="15" fill="rgb(210,144,39)" fg:x="869" fg:w="333"/><text x="69.3829%" y="655.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (333 samples, 26.49%)</title><rect x="69.1329%" y="629" width="26.4916%" height="15" fill="rgb(222,67,41)" fg:x="869" fg:w="333"/><text x="69.3829%" y="639.50">&lt;plugins_dynlib::DynamicMiddleware as kern..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (333 samples, 26.49%)</title><rect x="69.1329%" y="613" width="26.4916%" height="15" fill="rgb(205,35,37)" fg:x="869" fg:w="333"/><text x="69.3829%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (333 samples, 26.49%)</title><rect x="69.1329%" y="597" width="26.4916%" height="15" fill="rgb(216,125,40)" fg:x="869" fg:w="333"/><text x="69.3829%" y="607.50">core::ops::function::FnOnce::call_once{{vt..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (333 samples, 26.49%)</title><rect x="69.1329%" y="581" width="26.4916%" height="15" fill="rgb(228,227,20)" fg:x="869" fg:w="333"/><text x="69.3829%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (333 samples, 26.49%)</title><rect x="69.1329%" y="565" width="26.4916%" height="15" fill="rgb(242,173,45)" fg:x="869" fg:w="333"/><text x="69.3829%" y="575.50">core::ops::function::FnOnce::call_once{{vt..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (333 samples, 26.49%)</title><rect x="69.1329%" y="549" width="26.4916%" height="15" fill="rgb(215,79,24)" fg:x="869" fg:w="333"/><text x="69.3829%" y="559.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::func..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (333 samples, 26.49%)</title><rect x="69.1329%" y="533" width="26.4916%" height="15" fill="rgb(238,164,38)" fg:x="869" fg:w="333"/><text x="69.3829%" y="543.50">&lt;engine::session::state::State as kernel::..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="95.5449%" y="517" width="0.0796%" height="15" fill="rgb(245,196,38)" fg:x="1201" fg:w="1"/><text x="95.7949%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.5449%" y="501" width="0.0796%" height="15" fill="rgb(231,217,29)" fg:x="1201" fg:w="1"/><text x="95.7949%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.7041%" y="581" width="0.1591%" height="15" fill="rgb(245,6,4)" fg:x="1203" fg:w="2"/><text x="95.9541%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.7041%" y="565" width="0.1591%" height="15" fill="rgb(214,76,49)" fg:x="1203" fg:w="2"/><text x="95.9541%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.7041%" y="549" width="0.1591%" height="15" fill="rgb(205,96,12)" fg:x="1203" fg:w="2"/><text x="95.9541%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="95.7041%" y="533" width="0.1591%" height="15" fill="rgb(243,131,4)" fg:x="1203" fg:w="2"/><text x="95.9541%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (4 samples, 0.32%)</title><rect x="95.6245%" y="645" width="0.3182%" height="15" fill="rgb(214,114,4)" fg:x="1202" fg:w="4"/><text x="95.8745%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="95.6245%" y="629" width="0.3182%" height="15" fill="rgb(234,215,15)" fg:x="1202" fg:w="4"/><text x="95.8745%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="95.6245%" y="613" width="0.3182%" height="15" fill="rgb(250,216,45)" fg:x="1202" fg:w="4"/><text x="95.8745%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="95.7041%" y="597" width="0.2387%" height="15" fill="rgb(236,128,4)" fg:x="1203" fg:w="3"/><text x="95.9541%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="95.8632%" y="581" width="0.0796%" height="15" fill="rgb(234,50,33)" fg:x="1205" fg:w="1"/><text x="96.1132%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="95.9427%" y="613" width="0.1591%" height="15" fill="rgb(253,131,37)" fg:x="1206" fg:w="2"/><text x="96.1927%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.9427%" y="597" width="0.1591%" height="15" fill="rgb(218,55,27)" fg:x="1206" fg:w="2"/><text x="96.1927%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.1018%" y="613" width="0.0796%" height="15" fill="rgb(241,220,28)" fg:x="1208" fg:w="1"/><text x="96.3518%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.1018%" y="597" width="0.0796%" height="15" fill="rgb(241,90,48)" fg:x="1208" fg:w="1"/><text x="96.3518%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="96.2609%" y="549" width="0.1591%" height="15" fill="rgb(216,43,37)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (2 samples, 0.16%)</title><rect x="96.2609%" y="533" width="0.1591%" height="15" fill="rgb(207,173,9)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="96.2609%" y="517" width="0.1591%" height="15" fill="rgb(240,126,30)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="96.2609%" y="501" width="0.1591%" height="15" fill="rgb(228,178,53)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="96.2609%" y="485" width="0.1591%" height="15" fill="rgb(217,33,4)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="96.2609%" y="469" width="0.1591%" height="15" fill="rgb(206,124,34)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="479.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="96.2609%" y="453" width="0.1591%" height="15" fill="rgb(208,122,53)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="96.2609%" y="437" width="0.1591%" height="15" fill="rgb(215,202,26)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="96.2609%" y="421" width="0.1591%" height="15" fill="rgb(232,198,31)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="96.2609%" y="405" width="0.1591%" height="15" fill="rgb(222,23,35)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="415.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="96.2609%" y="389" width="0.1591%" height="15" fill="rgb(242,27,53)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="96.2609%" y="373" width="0.1591%" height="15" fill="rgb(210,216,42)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="96.2609%" y="357" width="0.1591%" height="15" fill="rgb(234,39,38)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="96.2609%" y="341" width="0.1591%" height="15" fill="rgb(235,126,54)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="351.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="96.2609%" y="325" width="0.1591%" height="15" fill="rgb(235,150,33)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="96.2609%" y="309" width="0.1591%" height="15" fill="rgb(249,49,53)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="96.2609%" y="293" width="0.1591%" height="15" fill="rgb(238,60,50)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="96.2609%" y="277" width="0.1591%" height="15" fill="rgb(210,5,2)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="287.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="96.2609%" y="261" width="0.1591%" height="15" fill="rgb(214,207,24)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="96.2609%" y="245" width="0.1591%" height="15" fill="rgb(228,173,2)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="96.2609%" y="229" width="0.1591%" height="15" fill="rgb(244,26,8)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="96.2609%" y="213" width="0.1591%" height="15" fill="rgb(249,153,35)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="96.2609%" y="197" width="0.1591%" height="15" fill="rgb(221,215,40)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="96.2609%" y="181" width="0.1591%" height="15" fill="rgb(238,106,35)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="96.2609%" y="165" width="0.1591%" height="15" fill="rgb(207,195,21)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="96.2609%" y="149" width="0.1591%" height="15" fill="rgb(205,43,29)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.2609%" y="133" width="0.1591%" height="15" fill="rgb(236,35,21)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.16%)</title><rect x="96.2609%" y="117" width="0.1591%" height="15" fill="rgb(244,74,8)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.16%)</title><rect x="96.2609%" y="101" width="0.1591%" height="15" fill="rgb(241,229,7)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="111.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.16%)</title><rect x="96.2609%" y="85" width="0.1591%" height="15" fill="rgb(212,223,25)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="96.2609%" y="69" width="0.1591%" height="15" fill="rgb(234,58,53)" fg:x="1210" fg:w="2"/><text x="96.5109%" y="79.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="96.4996%" y="421" width="0.0796%" height="15" fill="rgb(244,36,1)" fg:x="1213" fg:w="1"/><text x="96.7496%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.4996%" y="405" width="0.0796%" height="15" fill="rgb(222,40,54)" fg:x="1213" fg:w="1"/><text x="96.7496%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.4996%" y="389" width="0.0796%" height="15" fill="rgb(210,207,39)" fg:x="1213" fg:w="1"/><text x="96.7496%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.4996%" y="373" width="0.0796%" height="15" fill="rgb(234,52,14)" fg:x="1213" fg:w="1"/><text x="96.7496%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.4996%" y="357" width="0.0796%" height="15" fill="rgb(239,108,46)" fg:x="1213" fg:w="1"/><text x="96.7496%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="96.4996%" y="437" width="0.1591%" height="15" fill="rgb(252,223,5)" fg:x="1213" fg:w="2"/><text x="96.7496%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.5792%" y="421" width="0.0796%" height="15" fill="rgb(227,181,11)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5792%" y="405" width="0.0796%" height="15" fill="rgb(248,126,40)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.5792%" y="389" width="0.0796%" height="15" fill="rgb(243,1,18)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5792%" y="373" width="0.0796%" height="15" fill="rgb(214,145,23)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.5792%" y="357" width="0.0796%" height="15" fill="rgb(241,218,11)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5792%" y="341" width="0.0796%" height="15" fill="rgb(214,219,24)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.5792%" y="325" width="0.0796%" height="15" fill="rgb(235,32,7)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="96.5792%" y="309" width="0.0796%" height="15" fill="rgb(227,121,28)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5792%" y="293" width="0.0796%" height="15" fill="rgb(216,129,49)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.5792%" y="277" width="0.0796%" height="15" fill="rgb(207,194,50)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="96.5792%" y="261" width="0.0796%" height="15" fill="rgb(207,4,18)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5792%" y="245" width="0.0796%" height="15" fill="rgb(213,50,30)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.5792%" y="229" width="0.0796%" height="15" fill="rgb(208,77,22)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="96.5792%" y="213" width="0.0796%" height="15" fill="rgb(244,204,34)" fg:x="1214" fg:w="1"/><text x="96.8292%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.6587%" y="389" width="0.0796%" height="15" fill="rgb(230,20,17)" fg:x="1215" fg:w="1"/><text x="96.9087%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.6587%" y="373" width="0.0796%" height="15" fill="rgb(237,83,15)" fg:x="1215" fg:w="1"/><text x="96.9087%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.6587%" y="357" width="0.0796%" height="15" fill="rgb(221,109,25)" fg:x="1215" fg:w="1"/><text x="96.9087%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.6587%" y="341" width="0.0796%" height="15" fill="rgb(205,194,52)" fg:x="1215" fg:w="1"/><text x="96.9087%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.6587%" y="325" width="0.0796%" height="15" fill="rgb(244,173,54)" fg:x="1215" fg:w="1"/><text x="96.9087%" y="335.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="96.4200%" y="549" width="0.3978%" height="15" fill="rgb(227,181,18)" fg:x="1212" fg:w="5"/><text x="96.6700%" y="559.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (4 samples, 0.32%)</title><rect x="96.4996%" y="533" width="0.3182%" height="15" fill="rgb(238,36,30)" fg:x="1213" fg:w="4"/><text x="96.7496%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (4 samples, 0.32%)</title><rect x="96.4996%" y="517" width="0.3182%" height="15" fill="rgb(254,85,0)" fg:x="1213" fg:w="4"/><text x="96.7496%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="96.4996%" y="501" width="0.3182%" height="15" fill="rgb(247,63,33)" fg:x="1213" fg:w="4"/><text x="96.7496%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="96.4996%" y="485" width="0.3182%" height="15" fill="rgb(220,7,54)" fg:x="1213" fg:w="4"/><text x="96.7496%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="96.4996%" y="469" width="0.3182%" height="15" fill="rgb(238,227,21)" fg:x="1213" fg:w="4"/><text x="96.7496%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="96.4996%" y="453" width="0.3182%" height="15" fill="rgb(237,29,31)" fg:x="1213" fg:w="4"/><text x="96.7496%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="96.6587%" y="437" width="0.1591%" height="15" fill="rgb(211,21,50)" fg:x="1215" fg:w="2"/><text x="96.9087%" y="447.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="96.6587%" y="421" width="0.1591%" height="15" fill="rgb(239,119,2)" fg:x="1215" fg:w="2"/><text x="96.9087%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="96.6587%" y="405" width="0.1591%" height="15" fill="rgb(250,2,39)" fg:x="1215" fg:w="2"/><text x="96.9087%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.7383%" y="389" width="0.0796%" height="15" fill="rgb(244,46,53)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.7383%" y="373" width="0.0796%" height="15" fill="rgb(209,21,19)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.7383%" y="357" width="0.0796%" height="15" fill="rgb(236,145,4)" fg:x="1216" fg:w="1"/><text x="96.9883%" y="367.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (8 samples, 0.64%)</title><rect x="96.2609%" y="565" width="0.6364%" height="15" fill="rgb(220,133,36)" fg:x="1210" fg:w="8"/><text x="96.5109%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="96.8178%" y="549" width="0.0796%" height="15" fill="rgb(244,18,3)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="96.8178%" y="533" width="0.0796%" height="15" fill="rgb(232,171,48)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.8178%" y="517" width="0.0796%" height="15" fill="rgb(223,223,53)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.8178%" y="501" width="0.0796%" height="15" fill="rgb(246,92,13)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="96.8178%" y="485" width="0.0796%" height="15" fill="rgb(229,171,10)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.8178%" y="469" width="0.0796%" height="15" fill="rgb(213,131,26)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.8178%" y="453" width="0.0796%" height="15" fill="rgb(242,87,54)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.8178%" y="437" width="0.0796%" height="15" fill="rgb(237,21,35)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.8178%" y="421" width="0.0796%" height="15" fill="rgb(253,13,47)" fg:x="1217" fg:w="1"/><text x="97.0678%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="96.8974%" y="421" width="0.0796%" height="15" fill="rgb(215,122,49)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="431.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="96.8974%" y="405" width="0.0796%" height="15" fill="rgb(209,179,30)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="96.8974%" y="389" width="0.0796%" height="15" fill="rgb(235,100,24)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="399.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="96.8974%" y="373" width="0.0796%" height="15" fill="rgb(209,67,24)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="96.8974%" y="357" width="0.0796%" height="15" fill="rgb(206,74,32)" fg:x="1218" fg:w="1"/><text x="97.1474%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="96.9769%" y="357" width="0.0796%" height="15" fill="rgb(212,45,25)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="96.9769%" y="341" width="0.0796%" height="15" fill="rgb(239,26,3)" fg:x="1219" fg:w="1"/><text x="97.2269%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.0565%" y="325" width="0.0796%" height="15" fill="rgb(218,36,15)" fg:x="1220" fg:w="1"/><text x="97.3065%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.1360%" y="293" width="0.0796%" height="15" fill="rgb(206,108,24)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1360%" y="277" width="0.0796%" height="15" fill="rgb(234,204,42)" fg:x="1221" fg:w="1"/><text x="97.3860%" y="287.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="96.9769%" y="405" width="0.3182%" height="15" fill="rgb(229,2,11)" fg:x="1219" fg:w="4"/><text x="97.2269%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="96.9769%" y="389" width="0.3182%" height="15" fill="rgb(221,20,48)" fg:x="1219" fg:w="4"/><text x="97.2269%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="96.9769%" y="373" width="0.3182%" height="15" fill="rgb(244,164,10)" fg:x="1219" fg:w="4"/><text x="97.2269%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.0565%" y="357" width="0.2387%" height="15" fill="rgb(243,229,2)" fg:x="1220" fg:w="3"/><text x="97.3065%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.0565%" y="341" width="0.2387%" height="15" fill="rgb(232,131,37)" fg:x="1220" fg:w="3"/><text x="97.3065%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.1360%" y="325" width="0.1591%" height="15" fill="rgb(217,156,11)" fg:x="1221" fg:w="2"/><text x="97.3860%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.1360%" y="309" width="0.1591%" height="15" fill="rgb(239,99,48)" fg:x="1221" fg:w="2"/><text x="97.3860%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2156%" y="293" width="0.0796%" height="15" fill="rgb(231,209,9)" fg:x="1222" fg:w="1"/><text x="97.4656%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2156%" y="277" width="0.0796%" height="15" fill="rgb(254,97,27)" fg:x="1222" fg:w="1"/><text x="97.4656%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2156%" y="261" width="0.0796%" height="15" fill="rgb(223,151,38)" fg:x="1222" fg:w="1"/><text x="97.4656%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2156%" y="245" width="0.0796%" height="15" fill="rgb(219,206,35)" fg:x="1222" fg:w="1"/><text x="97.4656%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2156%" y="229" width="0.0796%" height="15" fill="rgb(216,130,31)" fg:x="1222" fg:w="1"/><text x="97.4656%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.2156%" y="213" width="0.0796%" height="15" fill="rgb(251,97,34)" fg:x="1222" fg:w="1"/><text x="97.4656%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="97.2951%" y="373" width="0.0796%" height="15" fill="rgb(246,159,47)" fg:x="1223" fg:w="1"/><text x="97.5451%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.4543%" y="325" width="0.0796%" height="15" fill="rgb(232,87,10)" fg:x="1225" fg:w="1"/><text x="97.7043%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (8 samples, 0.64%)</title><rect x="96.9769%" y="421" width="0.6364%" height="15" fill="rgb(249,1,37)" fg:x="1219" fg:w="8"/><text x="97.2269%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="97.2951%" y="405" width="0.3182%" height="15" fill="rgb(239,135,14)" fg:x="1223" fg:w="4"/><text x="97.5451%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="97.2951%" y="389" width="0.3182%" height="15" fill="rgb(253,116,46)" fg:x="1223" fg:w="4"/><text x="97.5451%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="97.3747%" y="373" width="0.2387%" height="15" fill="rgb(222,217,37)" fg:x="1224" fg:w="3"/><text x="97.6247%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.3747%" y="357" width="0.2387%" height="15" fill="rgb(252,96,8)" fg:x="1224" fg:w="3"/><text x="97.6247%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.3747%" y="341" width="0.2387%" height="15" fill="rgb(254,103,41)" fg:x="1224" fg:w="3"/><text x="97.6247%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.5338%" y="325" width="0.0796%" height="15" fill="rgb(218,213,19)" fg:x="1226" fg:w="1"/><text x="97.7838%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5338%" y="309" width="0.0796%" height="15" fill="rgb(253,95,21)" fg:x="1226" fg:w="1"/><text x="97.7838%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5338%" y="293" width="0.0796%" height="15" fill="rgb(229,26,28)" fg:x="1226" fg:w="1"/><text x="97.7838%" y="303.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="96.8974%" y="437" width="0.7955%" height="15" fill="rgb(230,129,16)" fg:x="1218" fg:w="10"/><text x="97.1474%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.6134%" y="421" width="0.0796%" height="15" fill="rgb(236,126,17)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="431.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="97.6134%" y="405" width="0.0796%" height="15" fill="rgb(209,33,33)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="97.6134%" y="389" width="0.0796%" height="15" fill="rgb(227,85,29)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6134%" y="373" width="0.0796%" height="15" fill="rgb(241,53,46)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6134%" y="357" width="0.0796%" height="15" fill="rgb(228,167,53)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6134%" y="341" width="0.0796%" height="15" fill="rgb(238,195,45)" fg:x="1227" fg:w="1"/><text x="97.8634%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.88%)</title><rect x="96.8974%" y="453" width="0.8751%" height="15" fill="rgb(252,124,45)" fg:x="1218" fg:w="11"/><text x="97.1474%" y="463.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="97.6929%" y="437" width="0.0796%" height="15" fill="rgb(251,38,35)" fg:x="1228" fg:w="1"/><text x="97.9429%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.6929%" y="421" width="0.0796%" height="15" fill="rgb(227,33,2)" fg:x="1228" fg:w="1"/><text x="97.9429%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.6929%" y="405" width="0.0796%" height="15" fill="rgb(223,157,46)" fg:x="1228" fg:w="1"/><text x="97.9429%" y="415.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (12 samples, 0.95%)</title><rect x="96.8974%" y="517" width="0.9547%" height="15" fill="rgb(222,78,41)" fg:x="1218" fg:w="12"/><text x="97.1474%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (12 samples, 0.95%)</title><rect x="96.8974%" y="501" width="0.9547%" height="15" fill="rgb(248,176,11)" fg:x="1218" fg:w="12"/><text x="97.1474%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.95%)</title><rect x="96.8974%" y="485" width="0.9547%" height="15" fill="rgb(241,221,18)" fg:x="1218" fg:w="12"/><text x="97.1474%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (12 samples, 0.95%)</title><rect x="96.8974%" y="469" width="0.9547%" height="15" fill="rgb(218,85,22)" fg:x="1218" fg:w="12"/><text x="97.1474%" y="479.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;&amp;kernel::model::EntityPtr&gt; for kernel::model::entity::EntityRef&gt;::from (1 samples, 0.08%)</title><rect x="97.7725%" y="453" width="0.0796%" height="15" fill="rgb(222,223,7)" fg:x="1229" fg:w="1"/><text x="98.0225%" y="463.50"></text></g><g><title>plugins_core::tools::get_contained_keys (14 samples, 1.11%)</title><rect x="96.8974%" y="565" width="1.1138%" height="15" fill="rgb(254,59,39)" fg:x="1218" fg:w="14"/><text x="97.1474%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (14 samples, 1.11%)</title><rect x="96.8974%" y="549" width="1.1138%" height="15" fill="rgb(247,100,27)" fg:x="1218" fg:w="14"/><text x="97.1474%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (14 samples, 1.11%)</title><rect x="96.8974%" y="533" width="1.1138%" height="15" fill="rgb(237,207,10)" fg:x="1218" fg:w="14"/><text x="97.1474%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8520%" y="517" width="0.1591%" height="15" fill="rgb(220,121,28)" fg:x="1230" fg:w="2"/><text x="98.1020%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8520%" y="501" width="0.1591%" height="15" fill="rgb(213,223,20)" fg:x="1230" fg:w="2"/><text x="98.1020%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.9316%" y="485" width="0.0796%" height="15" fill="rgb(205,121,27)" fg:x="1231" fg:w="1"/><text x="98.1816%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.9316%" y="469" width="0.0796%" height="15" fill="rgb(253,24,53)" fg:x="1231" fg:w="1"/><text x="98.1816%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.9316%" y="453" width="0.0796%" height="15" fill="rgb(224,224,47)" fg:x="1231" fg:w="1"/><text x="98.1816%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9316%" y="437" width="0.0796%" height="15" fill="rgb(250,125,36)" fg:x="1231" fg:w="1"/><text x="98.1816%" y="447.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0111%" y="517" width="0.0796%" height="15" fill="rgb(240,144,38)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0111%" y="501" width="0.0796%" height="15" fill="rgb(250,15,50)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0111%" y="485" width="0.0796%" height="15" fill="rgb(210,24,26)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0111%" y="469" width="0.0796%" height="15" fill="rgb(234,53,53)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0111%" y="453" width="0.0796%" height="15" fill="rgb(208,108,28)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0111%" y="437" width="0.0796%" height="15" fill="rgb(227,143,7)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0111%" y="421" width="0.0796%" height="15" fill="rgb(238,189,38)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0111%" y="405" width="0.0796%" height="15" fill="rgb(222,69,15)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0111%" y="389" width="0.0796%" height="15" fill="rgb(213,169,7)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.0111%" y="373" width="0.0796%" height="15" fill="rgb(251,219,4)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.0111%" y="357" width="0.0796%" height="15" fill="rgb(241,55,40)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.0111%" y="341" width="0.0796%" height="15" fill="rgb(243,57,30)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.0111%" y="325" width="0.0796%" height="15" fill="rgb(234,50,30)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0111%" y="309" width="0.0796%" height="15" fill="rgb(239,23,42)" fg:x="1232" fg:w="1"/><text x="98.2611%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 1.99%)</title><rect x="96.1814%" y="597" width="1.9889%" height="15" fill="rgb(217,38,19)" fg:x="1209" fg:w="25"/><text x="96.4314%" y="607.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (25 samples, 1.99%)</title><rect x="96.1814%" y="581" width="1.9889%" height="15" fill="rgb(215,179,16)" fg:x="1209" fg:w="25"/><text x="96.4314%" y="591.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="98.0111%" y="565" width="0.1591%" height="15" fill="rgb(254,21,37)" fg:x="1232" fg:w="2"/><text x="98.2611%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="98.0111%" y="549" width="0.1591%" height="15" fill="rgb(219,207,48)" fg:x="1232" fg:w="2"/><text x="98.2611%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="98.0111%" y="533" width="0.1591%" height="15" fill="rgb(227,225,41)" fg:x="1232" fg:w="2"/><text x="98.2611%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0907%" y="517" width="0.0796%" height="15" fill="rgb(223,130,1)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0907%" y="501" width="0.0796%" height="15" fill="rgb(249,54,42)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.0907%" y="485" width="0.0796%" height="15" fill="rgb(248,69,25)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.0907%" y="469" width="0.0796%" height="15" fill="rgb(234,21,32)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.0907%" y="453" width="0.0796%" height="15" fill="rgb(252,136,6)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0907%" y="437" width="0.0796%" height="15" fill="rgb(245,87,12)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0907%" y="421" width="0.0796%" height="15" fill="rgb(208,12,15)" fg:x="1233" fg:w="1"/><text x="98.3407%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="98.2498%" y="549" width="0.0796%" height="15" fill="rgb(250,98,2)" fg:x="1235" fg:w="1"/><text x="98.4998%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="98.2498%" y="533" width="0.0796%" height="15" fill="rgb(205,213,15)" fg:x="1235" fg:w="1"/><text x="98.4998%" y="543.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="98.2498%" y="517" width="0.0796%" height="15" fill="rgb(248,192,44)" fg:x="1235" fg:w="1"/><text x="98.4998%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2498%" y="501" width="0.0796%" height="15" fill="rgb(221,89,17)" fg:x="1235" fg:w="1"/><text x="98.4998%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.4885%" y="261" width="0.0796%" height="15" fill="rgb(209,55,3)" fg:x="1238" fg:w="1"/><text x="98.7385%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.4885%" y="245" width="0.0796%" height="15" fill="rgb(247,23,45)" fg:x="1238" fg:w="1"/><text x="98.7385%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.4885%" y="229" width="0.0796%" height="15" fill="rgb(235,152,23)" fg:x="1238" fg:w="1"/><text x="98.7385%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.4885%" y="213" width="0.0796%" height="15" fill="rgb(244,63,13)" fg:x="1238" fg:w="1"/><text x="98.7385%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.4089%" y="373" width="0.2387%" height="15" fill="rgb(227,30,37)" fg:x="1237" fg:w="3"/><text x="98.6589%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.4089%" y="357" width="0.2387%" height="15" fill="rgb(224,49,42)" fg:x="1237" fg:w="3"/><text x="98.6589%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.4885%" y="341" width="0.1591%" height="15" fill="rgb(218,129,5)" fg:x="1238" fg:w="2"/><text x="98.7385%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.4885%" y="325" width="0.1591%" height="15" fill="rgb(240,199,54)" fg:x="1238" fg:w="2"/><text x="98.7385%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.4885%" y="309" width="0.1591%" height="15" fill="rgb(234,31,13)" fg:x="1238" fg:w="2"/><text x="98.7385%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.4885%" y="293" width="0.1591%" height="15" fill="rgb(219,73,54)" fg:x="1238" fg:w="2"/><text x="98.7385%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.4885%" y="277" width="0.1591%" height="15" fill="rgb(251,162,10)" fg:x="1238" fg:w="2"/><text x="98.7385%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.5680%" y="261" width="0.0796%" height="15" fill="rgb(240,138,47)" fg:x="1239" fg:w="1"/><text x="98.8180%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5680%" y="245" width="0.0796%" height="15" fill="rgb(216,138,26)" fg:x="1239" fg:w="1"/><text x="98.8180%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="98.3294%" y="453" width="0.3978%" height="15" fill="rgb(243,17,35)" fg:x="1236" fg:w="5"/><text x="98.5794%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.40%)</title><rect x="98.3294%" y="437" width="0.3978%" height="15" fill="rgb(241,60,18)" fg:x="1236" fg:w="5"/><text x="98.5794%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.4089%" y="421" width="0.3182%" height="15" fill="rgb(234,2,44)" fg:x="1237" fg:w="4"/><text x="98.6589%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="98.4089%" y="405" width="0.3182%" height="15" fill="rgb(225,225,33)" fg:x="1237" fg:w="4"/><text x="98.6589%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="98.4089%" y="389" width="0.3182%" height="15" fill="rgb(234,50,31)" fg:x="1237" fg:w="4"/><text x="98.6589%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6476%" y="373" width="0.0796%" height="15" fill="rgb(249,6,25)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.6476%" y="357" width="0.0796%" height="15" fill="rgb(241,5,17)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.6476%" y="341" width="0.0796%" height="15" fill="rgb(207,116,10)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6476%" y="325" width="0.0796%" height="15" fill="rgb(222,128,18)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.6476%" y="309" width="0.0796%" height="15" fill="rgb(229,109,25)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.6476%" y="293" width="0.0796%" height="15" fill="rgb(222,102,25)" fg:x="1240" fg:w="1"/><text x="98.8976%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.48%)</title><rect x="98.3294%" y="533" width="0.4773%" height="15" fill="rgb(239,211,5)" fg:x="1236" fg:w="6"/><text x="98.5794%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="98.3294%" y="517" width="0.4773%" height="15" fill="rgb(223,136,26)" fg:x="1236" fg:w="6"/><text x="98.5794%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.48%)</title><rect x="98.3294%" y="501" width="0.4773%" height="15" fill="rgb(227,30,15)" fg:x="1236" fg:w="6"/><text x="98.5794%" y="511.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.48%)</title><rect x="98.3294%" y="485" width="0.4773%" height="15" fill="rgb(247,76,4)" fg:x="1236" fg:w="6"/><text x="98.5794%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="98.3294%" y="469" width="0.4773%" height="15" fill="rgb(245,38,48)" fg:x="1236" fg:w="6"/><text x="98.5794%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.7271%" y="453" width="0.0796%" height="15" fill="rgb(210,220,14)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7271%" y="437" width="0.0796%" height="15" fill="rgb(224,60,51)" fg:x="1241" fg:w="1"/><text x="98.9771%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="98.8862%" y="469" width="0.1591%" height="15" fill="rgb(212,133,49)" fg:x="1243" fg:w="2"/><text x="99.1362%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="98.8862%" y="453" width="0.1591%" height="15" fill="rgb(231,39,22)" fg:x="1243" fg:w="2"/><text x="99.1362%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="98.9658%" y="437" width="0.0796%" height="15" fill="rgb(236,173,22)" fg:x="1244" fg:w="1"/><text x="99.2158%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="98.9658%" y="421" width="0.0796%" height="15" fill="rgb(210,70,0)" fg:x="1244" fg:w="1"/><text x="99.2158%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="98.9658%" y="405" width="0.0796%" height="15" fill="rgb(215,170,11)" fg:x="1244" fg:w="1"/><text x="99.2158%" y="415.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (10 samples, 0.80%)</title><rect x="98.3294%" y="549" width="0.7955%" height="15" fill="rgb(220,154,28)" fg:x="1236" fg:w="10"/><text x="98.5794%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (4 samples, 0.32%)</title><rect x="98.8067%" y="533" width="0.3182%" height="15" fill="rgb(240,160,41)" fg:x="1242" fg:w="4"/><text x="99.0567%" y="543.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="98.8067%" y="517" width="0.3182%" height="15" fill="rgb(243,215,41)" fg:x="1242" fg:w="4"/><text x="99.0567%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="98.8067%" y="501" width="0.3182%" height="15" fill="rgb(214,208,31)" fg:x="1242" fg:w="4"/><text x="99.0567%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="98.8067%" y="485" width="0.3182%" height="15" fill="rgb(247,57,22)" fg:x="1242" fg:w="4"/><text x="99.0567%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0453%" y="469" width="0.0796%" height="15" fill="rgb(228,73,52)" fg:x="1245" fg:w="1"/><text x="99.2953%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="99.1249%" y="549" width="0.0796%" height="15" fill="rgb(252,60,9)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="99.1249%" y="533" width="0.0796%" height="15" fill="rgb(233,9,51)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1249%" y="517" width="0.0796%" height="15" fill="rgb(223,67,14)" fg:x="1246" fg:w="1"/><text x="99.3749%" y="527.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (42 samples, 3.34%)</title><rect x="95.9427%" y="629" width="3.3413%" height="15" fill="rgb(222,86,2)" fg:x="1206" fg:w="42"/><text x="96.1927%" y="639.50">&lt;pl..</text></g><g><title>core::iter::adapters::try_process (39 samples, 3.10%)</title><rect x="96.1814%" y="613" width="3.1026%" height="15" fill="rgb(243,58,54)" fg:x="1209" fg:w="39"/><text x="96.4314%" y="623.50">cor..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (14 samples, 1.11%)</title><rect x="98.1702%" y="597" width="1.1138%" height="15" fill="rgb(210,200,39)" fg:x="1234" fg:w="14"/><text x="98.4202%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 1.11%)</title><rect x="98.1702%" y="581" width="1.1138%" height="15" fill="rgb(238,135,9)" fg:x="1234" fg:w="14"/><text x="98.4202%" y="591.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (14 samples, 1.11%)</title><rect x="98.1702%" y="565" width="1.1138%" height="15" fill="rgb(232,179,7)" fg:x="1234" fg:w="14"/><text x="98.4202%" y="575.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="99.2045%" y="549" width="0.0796%" height="15" fill="rgb(245,65,41)" fg:x="1247" fg:w="1"/><text x="99.4545%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (384 samples, 30.55%)</title><rect x="68.8146%" y="693" width="30.5489%" height="15" fill="rgb(227,43,8)" fg:x="865" fg:w="384"/><text x="69.0646%" y="703.50">&lt;engine::session::Session as kernel::actions::Per..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (47 samples, 3.74%)</title><rect x="95.6245%" y="677" width="3.7391%" height="15" fill="rgb(235,91,14)" fg:x="1202" fg:w="47"/><text x="95.8745%" y="687.50">kern..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (47 samples, 3.74%)</title><rect x="95.6245%" y="661" width="3.7391%" height="15" fill="rgb(235,219,31)" fg:x="1202" fg:w="47"/><text x="95.8745%" y="671.50">&lt;plu..</text></g><g><title>plugins_rpc::querying::have_surroundings (43 samples, 3.42%)</title><rect x="95.9427%" y="645" width="3.4208%" height="15" fill="rgb(227,121,25)" fg:x="1206" fg:w="43"/><text x="96.1927%" y="655.50">plu..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="99.2840%" y="629" width="0.0796%" height="15" fill="rgb(254,129,24)" fg:x="1248" fg:w="1"/><text x="99.5340%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.2840%" y="613" width="0.0796%" height="15" fill="rgb(226,144,49)" fg:x="1248" fg:w="1"/><text x="99.5340%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.2840%" y="597" width="0.0796%" height="15" fill="rgb(214,187,32)" fg:x="1248" fg:w="1"/><text x="99.5340%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.3636%" y="661" width="0.0796%" height="15" fill="rgb(243,129,46)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.3636%" y="645" width="0.0796%" height="15" fill="rgb(221,185,35)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.3636%" y="629" width="0.0796%" height="15" fill="rgb(205,0,32)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.3636%" y="613" width="0.0796%" height="15" fill="rgb(229,179,12)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.3636%" y="597" width="0.0796%" height="15" fill="rgb(252,107,19)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3636%" y="581" width="0.0796%" height="15" fill="rgb(220,95,27)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3636%" y="565" width="0.0796%" height="15" fill="rgb(240,113,40)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3636%" y="549" width="0.0796%" height="15" fill="rgb(208,4,43)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3636%" y="533" width="0.0796%" height="15" fill="rgb(247,189,30)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.3636%" y="517" width="0.0796%" height="15" fill="rgb(231,157,17)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3636%" y="501" width="0.0796%" height="15" fill="rgb(224,139,6)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3636%" y="485" width="0.0796%" height="15" fill="rgb(223,83,16)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3636%" y="469" width="0.0796%" height="15" fill="rgb(232,211,20)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3636%" y="453" width="0.0796%" height="15" fill="rgb(225,203,35)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3636%" y="437" width="0.0796%" height="15" fill="rgb(215,211,44)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.3636%" y="421" width="0.0796%" height="15" fill="rgb(248,213,26)" fg:x="1249" fg:w="1"/><text x="99.6136%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.3636%" y="693" width="0.1591%" height="15" fill="rgb(214,23,52)" fg:x="1249" fg:w="2"/><text x="99.6136%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.3636%" y="677" width="0.1591%" height="15" fill="rgb(225,173,50)" fg:x="1249" fg:w="2"/><text x="99.6136%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.4431%" y="661" width="0.0796%" height="15" fill="rgb(206,150,22)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4431%" y="645" width="0.0796%" height="15" fill="rgb(239,64,23)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4431%" y="629" width="0.0796%" height="15" fill="rgb(242,50,38)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4431%" y="613" width="0.0796%" height="15" fill="rgb(217,91,15)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4431%" y="597" width="0.0796%" height="15" fill="rgb(230,172,6)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4431%" y="581" width="0.0796%" height="15" fill="rgb(221,98,26)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4431%" y="565" width="0.0796%" height="15" fill="rgb(227,210,45)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4431%" y="549" width="0.0796%" height="15" fill="rgb(206,8,30)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4431%" y="533" width="0.0796%" height="15" fill="rgb(241,219,17)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4431%" y="517" width="0.0796%" height="15" fill="rgb(247,121,29)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4431%" y="501" width="0.0796%" height="15" fill="rgb(219,169,49)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4431%" y="485" width="0.0796%" height="15" fill="rgb(253,49,49)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4431%" y="469" width="0.0796%" height="15" fill="rgb(217,178,3)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4431%" y="453" width="0.0796%" height="15" fill="rgb(234,73,37)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.4431%" y="437" width="0.0796%" height="15" fill="rgb(250,98,22)" fg:x="1250" fg:w="1"/><text x="99.6931%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5227%" y="581" width="0.0796%" height="15" fill="rgb(220,108,37)" fg:x="1251" fg:w="1"/><text x="99.7727%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.5227%" y="565" width="0.0796%" height="15" fill="rgb(225,168,10)" fg:x="1251" fg:w="1"/><text x="99.7727%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.5227%" y="645" width="0.1591%" height="15" fill="rgb(247,215,21)" fg:x="1251" fg:w="2"/><text x="99.7727%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.5227%" y="629" width="0.1591%" height="15" fill="rgb(253,189,31)" fg:x="1251" fg:w="2"/><text x="99.7727%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.5227%" y="613" width="0.1591%" height="15" fill="rgb(241,54,22)" fg:x="1251" fg:w="2"/><text x="99.7727%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5227%" y="597" width="0.1591%" height="15" fill="rgb(211,87,4)" fg:x="1251" fg:w="2"/><text x="99.7727%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6022%" y="581" width="0.0796%" height="15" fill="rgb(245,112,24)" fg:x="1252" fg:w="1"/><text x="99.8522%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6022%" y="565" width="0.0796%" height="15" fill="rgb(235,190,41)" fg:x="1252" fg:w="1"/><text x="99.8522%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.6022%" y="549" width="0.0796%" height="15" fill="rgb(214,89,8)" fg:x="1252" fg:w="1"/><text x="99.8522%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.5227%" y="677" width="0.2387%" height="15" fill="rgb(249,155,35)" fg:x="1251" fg:w="3"/><text x="99.7727%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.5227%" y="661" width="0.2387%" height="15" fill="rgb(249,88,26)" fg:x="1251" fg:w="3"/><text x="99.7727%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.6818%" y="645" width="0.0796%" height="15" fill="rgb(232,56,8)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.6818%" y="629" width="0.0796%" height="15" fill="rgb(240,95,3)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.6818%" y="613" width="0.0796%" height="15" fill="rgb(222,44,28)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6818%" y="597" width="0.0796%" height="15" fill="rgb(234,16,30)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6818%" y="581" width="0.0796%" height="15" fill="rgb(223,26,17)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6818%" y="565" width="0.0796%" height="15" fill="rgb(239,187,47)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6818%" y="549" width="0.0796%" height="15" fill="rgb(247,102,50)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6818%" y="533" width="0.0796%" height="15" fill="rgb(231,216,22)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.6818%" y="517" width="0.0796%" height="15" fill="rgb(216,201,26)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.6818%" y="501" width="0.0796%" height="15" fill="rgb(214,186,23)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.6818%" y="485" width="0.0796%" height="15" fill="rgb(235,184,4)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6818%" y="469" width="0.0796%" height="15" fill="rgb(244,46,17)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6818%" y="453" width="0.0796%" height="15" fill="rgb(248,74,46)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.6818%" y="437" width="0.0796%" height="15" fill="rgb(243,79,5)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.6818%" y="421" width="0.0796%" height="15" fill="rgb(213,148,1)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.6818%" y="405" width="0.0796%" height="15" fill="rgb(221,30,0)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.6818%" y="389" width="0.0796%" height="15" fill="rgb(207,85,29)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6818%" y="373" width="0.0796%" height="15" fill="rgb(239,31,46)" fg:x="1253" fg:w="1"/><text x="99.9318%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (4 samples, 0.32%)</title><rect x="99.5227%" y="693" width="0.3182%" height="15" fill="rgb(219,6,1)" fg:x="1251" fg:w="4"/><text x="99.7727%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.7613%" y="677" width="0.0796%" height="15" fill="rgb(229,90,29)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.7613%" y="661" width="0.0796%" height="15" fill="rgb(242,201,42)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.7613%" y="645" width="0.0796%" height="15" fill="rgb(243,80,54)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.7613%" y="629" width="0.0796%" height="15" fill="rgb(223,166,15)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.7613%" y="613" width="0.0796%" height="15" fill="rgb(238,78,27)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.7613%" y="597" width="0.0796%" height="15" fill="rgb(235,28,43)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.7613%" y="581" width="0.0796%" height="15" fill="rgb(240,210,28)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.7613%" y="565" width="0.0796%" height="15" fill="rgb(253,6,46)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.7613%" y="549" width="0.0796%" height="15" fill="rgb(250,159,47)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.7613%" y="533" width="0.0796%" height="15" fill="rgb(216,139,2)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.7613%" y="517" width="0.0796%" height="15" fill="rgb(221,124,44)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.7613%" y="501" width="0.0796%" height="15" fill="rgb(205,37,22)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.7613%" y="485" width="0.0796%" height="15" fill="rgb(250,55,8)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.7613%" y="469" width="0.0796%" height="15" fill="rgb(215,83,48)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.7613%" y="453" width="0.0796%" height="15" fill="rgb(253,2,32)" fg:x="1254" fg:w="1"/><text x="100.0113%" y="463.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.8409%" y="693" width="0.0796%" height="15" fill="rgb(236,67,28)" fg:x="1255" fg:w="1"/><text x="100.0909%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="99.8409%" y="677" width="0.0796%" height="15" fill="rgb(252,55,15)" fg:x="1255" fg:w="1"/><text x="100.0909%" y="687.50"></text></g><g><title>all (1,257 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(243,173,17)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-484c7248 (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(215,212,13)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1055.50">simple-484c7248</text></g><g><title>_start (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(253,176,6)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,257 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(236,105,26)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,257 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(239,226,32)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,257 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(236,104,51)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,257 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(220,172,33)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,257 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(224,182,25)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,257 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(236,184,24)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,257 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(241,221,14)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,257 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(227,146,5)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,257 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(214,15,23)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,257 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(233,157,31)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,257 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(211,27,52)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,257 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(212,223,15)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,257 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(254,211,0)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,257 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(205,43,38)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,257 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(242,206,46)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,257 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(220,221,12)" fg:x="0" fg:w="1257"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (465 samples, 36.99%)</title><rect x="63.0072%" y="757" width="36.9928%" height="15" fill="rgb(217,156,35)" fg:x="792" fg:w="465"/><text x="63.2572%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (465 samples, 36.99%)</title><rect x="63.0072%" y="741" width="36.9928%" height="15" fill="rgb(207,181,49)" fg:x="792" fg:w="465"/><text x="63.2572%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (465 samples, 36.99%)</title><rect x="63.0072%" y="725" width="36.9928%" height="15" fill="rgb(235,103,47)" fg:x="792" fg:w="465"/><text x="63.2572%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (392 samples, 31.19%)</title><rect x="68.8146%" y="709" width="31.1854%" height="15" fill="rgb(222,63,28)" fg:x="865" fg:w="392"/><text x="69.0646%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.9204%" y="693" width="0.0796%" height="15" fill="rgb(244,137,21)" fg:x="1256" fg:w="1"/><text x="100.1704%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="99.9204%" y="677" width="0.0796%" height="15" fill="rgb(228,35,27)" fg:x="1256" fg:w="1"/><text x="100.1704%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.9204%" y="661" width="0.0796%" height="15" fill="rgb(226,191,41)" fg:x="1256" fg:w="1"/><text x="100.1704%" y="671.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.9204%" y="645" width="0.0796%" height="15" fill="rgb(210,154,3)" fg:x="1256" fg:w="1"/><text x="100.1704%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.9204%" y="629" width="0.0796%" height="15" fill="rgb(216,60,49)" fg:x="1256" fg:w="1"/><text x="100.1704%" y="639.50"></text></g></svg></svg>