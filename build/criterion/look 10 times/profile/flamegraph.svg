<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1061.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1061.00"> </text><svg id="frames" x="10" width="1180" total_samples="1237"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="517" width="0.0808%" height="15" fill="rgb(224,186,18)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="549" width="0.1617%" height="15" fill="rgb(215,121,11)" fg:x="0" fg:w="2"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="533" width="0.1617%" height="15" fill="rgb(245,147,10)" fg:x="0" fg:w="2"/><text x="0.2500%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0808%" y="517" width="0.0808%" height="15" fill="rgb(238,153,13)" fg:x="1" fg:w="1"/><text x="0.3308%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0808%" y="501" width="0.0808%" height="15" fill="rgb(233,108,0)" fg:x="1" fg:w="1"/><text x="0.3308%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.1617%" y="517" width="0.1617%" height="15" fill="rgb(212,157,17)" fg:x="2" fg:w="2"/><text x="0.4117%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2425%" y="501" width="0.0808%" height="15" fill="rgb(225,213,38)" fg:x="3" fg:w="1"/><text x="0.4925%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0000%" y="677" width="0.6467%" height="15" fill="rgb(248,16,11)" fg:x="0" fg:w="8"/><text x="0.2500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (8 samples, 0.65%)</title><rect x="0.0000%" y="661" width="0.6467%" height="15" fill="rgb(241,33,4)" fg:x="0" fg:w="8"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0000%" y="645" width="0.6467%" height="15" fill="rgb(222,26,43)" fg:x="0" fg:w="8"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (8 samples, 0.65%)</title><rect x="0.0000%" y="629" width="0.6467%" height="15" fill="rgb(243,29,36)" fg:x="0" fg:w="8"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0000%" y="613" width="0.6467%" height="15" fill="rgb(241,9,27)" fg:x="0" fg:w="8"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0000%" y="597" width="0.6467%" height="15" fill="rgb(205,117,26)" fg:x="0" fg:w="8"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="0.0000%" y="581" width="0.6467%" height="15" fill="rgb(209,80,39)" fg:x="0" fg:w="8"/><text x="0.2500%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="0.0000%" y="565" width="0.6467%" height="15" fill="rgb(239,155,6)" fg:x="0" fg:w="8"/><text x="0.2500%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="0.1617%" y="549" width="0.4850%" height="15" fill="rgb(212,104,12)" fg:x="2" fg:w="6"/><text x="0.4117%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="0.1617%" y="533" width="0.4850%" height="15" fill="rgb(234,204,3)" fg:x="2" fg:w="6"/><text x="0.4117%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.3234%" y="517" width="0.3234%" height="15" fill="rgb(251,218,7)" fg:x="4" fg:w="4"/><text x="0.5734%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.32%)</title><rect x="0.3234%" y="501" width="0.3234%" height="15" fill="rgb(221,81,32)" fg:x="4" fg:w="4"/><text x="0.5734%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4850%" y="485" width="0.1617%" height="15" fill="rgb(214,152,26)" fg:x="6" fg:w="2"/><text x="0.7350%" y="495.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.08%)</title><rect x="0.7276%" y="549" width="0.0808%" height="15" fill="rgb(223,22,3)" fg:x="9" fg:w="1"/><text x="0.9776%" y="559.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="0.7276%" y="565" width="0.1617%" height="15" fill="rgb(207,174,7)" fg:x="9" fg:w="2"/><text x="0.9776%" y="575.50"></text></g><g><title>pthread_rwlock_unlock (1 samples, 0.08%)</title><rect x="0.8084%" y="549" width="0.0808%" height="15" fill="rgb(224,19,52)" fg:x="10" fg:w="1"/><text x="1.0584%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8892%" y="549" width="0.0808%" height="15" fill="rgb(228,24,14)" fg:x="11" fg:w="1"/><text x="1.1392%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.65%)</title><rect x="0.7276%" y="597" width="0.6467%" height="15" fill="rgb(230,153,43)" fg:x="9" fg:w="8"/><text x="0.9776%" y="607.50"></text></g><g><title>libloading::safe::Library::new (8 samples, 0.65%)</title><rect x="0.7276%" y="581" width="0.6467%" height="15" fill="rgb(231,106,12)" fg:x="9" fg:w="8"/><text x="0.9776%" y="591.50"></text></g><g><title>dlopen (6 samples, 0.49%)</title><rect x="0.8892%" y="565" width="0.4850%" height="15" fill="rgb(215,92,2)" fg:x="11" fg:w="6"/><text x="1.1392%" y="575.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="0.9701%" y="549" width="0.4042%" height="15" fill="rgb(249,143,25)" fg:x="12" fg:w="5"/><text x="1.2201%" y="559.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="0.9701%" y="533" width="0.4042%" height="15" fill="rgb(252,7,35)" fg:x="12" fg:w="5"/><text x="1.2201%" y="543.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.0509%" y="517" width="0.3234%" height="15" fill="rgb(216,69,40)" fg:x="13" fg:w="4"/><text x="1.3009%" y="527.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.0509%" y="501" width="0.3234%" height="15" fill="rgb(240,36,33)" fg:x="13" fg:w="4"/><text x="1.3009%" y="511.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (10 samples, 0.81%)</title><rect x="0.6467%" y="613" width="0.8084%" height="15" fill="rgb(231,128,14)" fg:x="8" fg:w="10"/><text x="0.8967%" y="623.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="1.3743%" y="597" width="0.0808%" height="15" fill="rgb(245,143,14)" fg:x="17" fg:w="1"/><text x="1.6243%" y="607.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="1.3743%" y="581" width="0.0808%" height="15" fill="rgb(222,130,28)" fg:x="17" fg:w="1"/><text x="1.6243%" y="591.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="1.3743%" y="565" width="0.0808%" height="15" fill="rgb(212,10,48)" fg:x="17" fg:w="1"/><text x="1.6243%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="1.3743%" y="549" width="0.0808%" height="15" fill="rgb(254,118,45)" fg:x="17" fg:w="1"/><text x="1.6243%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="1.3743%" y="533" width="0.0808%" height="15" fill="rgb(228,6,45)" fg:x="17" fg:w="1"/><text x="1.6243%" y="543.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.08%)</title><rect x="1.3743%" y="517" width="0.0808%" height="15" fill="rgb(241,18,35)" fg:x="17" fg:w="1"/><text x="1.6243%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (12 samples, 0.97%)</title><rect x="0.6467%" y="677" width="0.9701%" height="15" fill="rgb(227,214,53)" fg:x="8" fg:w="12"/><text x="0.8967%" y="687.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (12 samples, 0.97%)</title><rect x="0.6467%" y="661" width="0.9701%" height="15" fill="rgb(224,107,51)" fg:x="8" fg:w="12"/><text x="0.8967%" y="671.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.97%)</title><rect x="0.6467%" y="645" width="0.9701%" height="15" fill="rgb(248,60,28)" fg:x="8" fg:w="12"/><text x="0.8967%" y="655.50"></text></g><g><title>engine::session::Session::initialize (12 samples, 0.97%)</title><rect x="0.6467%" y="629" width="0.9701%" height="15" fill="rgb(249,101,23)" fg:x="8" fg:w="12"/><text x="0.8967%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="1.4551%" y="613" width="0.1617%" height="15" fill="rgb(228,51,19)" fg:x="18" fg:w="2"/><text x="1.7051%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="1.4551%" y="597" width="0.1617%" height="15" fill="rgb(213,20,6)" fg:x="18" fg:w="2"/><text x="1.7051%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="1.4551%" y="581" width="0.1617%" height="15" fill="rgb(212,124,10)" fg:x="18" fg:w="2"/><text x="1.7051%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.5360%" y="565" width="0.0808%" height="15" fill="rgb(248,3,40)" fg:x="19" fg:w="1"/><text x="1.7860%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.5360%" y="549" width="0.0808%" height="15" fill="rgb(223,178,23)" fg:x="19" fg:w="1"/><text x="1.7860%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.5360%" y="533" width="0.0808%" height="15" fill="rgb(240,132,45)" fg:x="19" fg:w="1"/><text x="1.7860%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="1.6977%" y="565" width="0.1617%" height="15" fill="rgb(245,164,36)" fg:x="21" fg:w="2"/><text x="1.9477%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7785%" y="549" width="0.0808%" height="15" fill="rgb(231,188,53)" fg:x="22" fg:w="1"/><text x="2.0285%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.8593%" y="549" width="0.0808%" height="15" fill="rgb(237,198,39)" fg:x="23" fg:w="1"/><text x="2.1093%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8593%" y="533" width="0.0808%" height="15" fill="rgb(223,120,35)" fg:x="23" fg:w="1"/><text x="2.1093%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8593%" y="517" width="0.0808%" height="15" fill="rgb(253,107,49)" fg:x="23" fg:w="1"/><text x="2.1093%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8593%" y="501" width="0.0808%" height="15" fill="rgb(216,44,31)" fg:x="23" fg:w="1"/><text x="2.1093%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.8593%" y="485" width="0.0808%" height="15" fill="rgb(253,87,21)" fg:x="23" fg:w="1"/><text x="2.1093%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.8593%" y="469" width="0.0808%" height="15" fill="rgb(226,18,2)" fg:x="23" fg:w="1"/><text x="2.1093%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.8593%" y="453" width="0.0808%" height="15" fill="rgb(216,8,46)" fg:x="23" fg:w="1"/><text x="2.1093%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.9402%" y="533" width="0.0808%" height="15" fill="rgb(226,140,39)" fg:x="24" fg:w="1"/><text x="2.1902%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.0210%" y="485" width="0.0808%" height="15" fill="rgb(221,194,54)" fg:x="25" fg:w="1"/><text x="2.2710%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0210%" y="517" width="0.1617%" height="15" fill="rgb(213,92,11)" fg:x="25" fg:w="2"/><text x="2.2710%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.0210%" y="501" width="0.1617%" height="15" fill="rgb(229,162,46)" fg:x="25" fg:w="2"/><text x="2.2710%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.1019%" y="485" width="0.0808%" height="15" fill="rgb(214,111,36)" fg:x="26" fg:w="1"/><text x="2.3519%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.1019%" y="469" width="0.0808%" height="15" fill="rgb(207,6,21)" fg:x="26" fg:w="1"/><text x="2.3519%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="1.6977%" y="581" width="0.5659%" height="15" fill="rgb(213,127,38)" fg:x="21" fg:w="7"/><text x="1.9477%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="1.8593%" y="565" width="0.4042%" height="15" fill="rgb(238,118,32)" fg:x="23" fg:w="5"/><text x="2.1093%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.9402%" y="549" width="0.3234%" height="15" fill="rgb(240,139,39)" fg:x="24" fg:w="4"/><text x="2.1902%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.0210%" y="533" width="0.2425%" height="15" fill="rgb(235,10,37)" fg:x="25" fg:w="3"/><text x="2.2710%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.1827%" y="517" width="0.0808%" height="15" fill="rgb(249,171,38)" fg:x="27" fg:w="1"/><text x="2.4327%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.1827%" y="501" width="0.0808%" height="15" fill="rgb(242,144,32)" fg:x="27" fg:w="1"/><text x="2.4327%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2635%" y="581" width="0.1617%" height="15" fill="rgb(217,117,21)" fg:x="28" fg:w="2"/><text x="2.5135%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.2635%" y="565" width="0.1617%" height="15" fill="rgb(249,87,1)" fg:x="28" fg:w="2"/><text x="2.5135%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3444%" y="549" width="0.0808%" height="15" fill="rgb(248,196,48)" fg:x="29" fg:w="1"/><text x="2.5944%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3444%" y="533" width="0.0808%" height="15" fill="rgb(251,206,33)" fg:x="29" fg:w="1"/><text x="2.5944%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3444%" y="517" width="0.0808%" height="15" fill="rgb(232,141,28)" fg:x="29" fg:w="1"/><text x="2.5944%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3444%" y="501" width="0.0808%" height="15" fill="rgb(209,167,14)" fg:x="29" fg:w="1"/><text x="2.5944%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.4252%" y="533" width="0.1617%" height="15" fill="rgb(225,11,50)" fg:x="30" fg:w="2"/><text x="2.6752%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5061%" y="517" width="0.0808%" height="15" fill="rgb(209,50,20)" fg:x="31" fg:w="1"/><text x="2.7561%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.5869%" y="533" width="0.0808%" height="15" fill="rgb(212,17,46)" fg:x="32" fg:w="1"/><text x="2.8369%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.5869%" y="517" width="0.0808%" height="15" fill="rgb(216,101,39)" fg:x="32" fg:w="1"/><text x="2.8369%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.5869%" y="501" width="0.0808%" height="15" fill="rgb(212,228,48)" fg:x="32" fg:w="1"/><text x="2.8369%" y="511.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.13%)</title><rect x="1.6977%" y="661" width="1.1318%" height="15" fill="rgb(250,6,50)" fg:x="21" fg:w="14"/><text x="1.9477%" y="671.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.13%)</title><rect x="1.6977%" y="645" width="1.1318%" height="15" fill="rgb(250,160,48)" fg:x="21" fg:w="14"/><text x="1.9477%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.13%)</title><rect x="1.6977%" y="629" width="1.1318%" height="15" fill="rgb(244,216,33)" fg:x="21" fg:w="14"/><text x="1.9477%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (14 samples, 1.13%)</title><rect x="1.6977%" y="613" width="1.1318%" height="15" fill="rgb(207,157,5)" fg:x="21" fg:w="14"/><text x="1.9477%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.13%)</title><rect x="1.6977%" y="597" width="1.1318%" height="15" fill="rgb(228,199,8)" fg:x="21" fg:w="14"/><text x="1.9477%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="2.4252%" y="581" width="0.4042%" height="15" fill="rgb(227,80,20)" fg:x="30" fg:w="5"/><text x="2.6752%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="2.4252%" y="565" width="0.4042%" height="15" fill="rgb(222,9,33)" fg:x="30" fg:w="5"/><text x="2.6752%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="2.4252%" y="549" width="0.4042%" height="15" fill="rgb(239,44,28)" fg:x="30" fg:w="5"/><text x="2.6752%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="2.6677%" y="533" width="0.1617%" height="15" fill="rgb(249,187,43)" fg:x="33" fg:w="2"/><text x="2.9177%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="2.6677%" y="517" width="0.1617%" height="15" fill="rgb(216,141,28)" fg:x="33" fg:w="2"/><text x="2.9177%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="2.6677%" y="501" width="0.1617%" height="15" fill="rgb(230,154,53)" fg:x="33" fg:w="2"/><text x="2.9177%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.6677%" y="485" width="0.1617%" height="15" fill="rgb(227,82,4)" fg:x="33" fg:w="2"/><text x="2.9177%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.7486%" y="469" width="0.0808%" height="15" fill="rgb(220,107,16)" fg:x="34" fg:w="1"/><text x="2.9986%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7486%" y="453" width="0.0808%" height="15" fill="rgb(207,187,2)" fg:x="34" fg:w="1"/><text x="2.9986%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.7486%" y="437" width="0.0808%" height="15" fill="rgb(210,162,52)" fg:x="34" fg:w="1"/><text x="2.9986%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7486%" y="421" width="0.0808%" height="15" fill="rgb(217,216,49)" fg:x="34" fg:w="1"/><text x="2.9986%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.7486%" y="405" width="0.0808%" height="15" fill="rgb(218,146,49)" fg:x="34" fg:w="1"/><text x="2.9986%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7486%" y="389" width="0.0808%" height="15" fill="rgb(216,55,40)" fg:x="34" fg:w="1"/><text x="2.9986%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="2.7486%" y="373" width="0.0808%" height="15" fill="rgb(208,196,21)" fg:x="34" fg:w="1"/><text x="2.9986%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="2.8294%" y="645" width="0.0808%" height="15" fill="rgb(242,117,42)" fg:x="35" fg:w="1"/><text x="3.0794%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="2.8294%" y="629" width="0.0808%" height="15" fill="rgb(210,11,23)" fg:x="35" fg:w="1"/><text x="3.0794%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="2.8294%" y="613" width="0.0808%" height="15" fill="rgb(217,110,2)" fg:x="35" fg:w="1"/><text x="3.0794%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="2.8294%" y="597" width="0.0808%" height="15" fill="rgb(229,77,54)" fg:x="35" fg:w="1"/><text x="3.0794%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="2.9103%" y="629" width="0.0808%" height="15" fill="rgb(218,53,16)" fg:x="36" fg:w="1"/><text x="3.1603%" y="639.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9103%" y="613" width="0.0808%" height="15" fill="rgb(215,38,13)" fg:x="36" fg:w="1"/><text x="3.1603%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.9103%" y="597" width="0.0808%" height="15" fill="rgb(235,42,18)" fg:x="36" fg:w="1"/><text x="3.1603%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9103%" y="581" width="0.0808%" height="15" fill="rgb(219,66,54)" fg:x="36" fg:w="1"/><text x="3.1603%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.9103%" y="565" width="0.0808%" height="15" fill="rgb(222,205,4)" fg:x="36" fg:w="1"/><text x="3.1603%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9103%" y="549" width="0.0808%" height="15" fill="rgb(227,213,46)" fg:x="36" fg:w="1"/><text x="3.1603%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9103%" y="533" width="0.0808%" height="15" fill="rgb(250,145,42)" fg:x="36" fg:w="1"/><text x="3.1603%" y="543.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="2.9103%" y="517" width="0.0808%" height="15" fill="rgb(219,15,2)" fg:x="36" fg:w="1"/><text x="3.1603%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.0719%" y="581" width="0.0808%" height="15" fill="rgb(231,181,52)" fg:x="38" fg:w="1"/><text x="3.3219%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.0719%" y="565" width="0.0808%" height="15" fill="rgb(235,1,42)" fg:x="38" fg:w="1"/><text x="3.3219%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0719%" y="549" width="0.0808%" height="15" fill="rgb(249,88,27)" fg:x="38" fg:w="1"/><text x="3.3219%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.0719%" y="533" width="0.0808%" height="15" fill="rgb(235,145,16)" fg:x="38" fg:w="1"/><text x="3.3219%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.0719%" y="613" width="0.1617%" height="15" fill="rgb(237,114,19)" fg:x="38" fg:w="2"/><text x="3.3219%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.0719%" y="597" width="0.1617%" height="15" fill="rgb(238,51,50)" fg:x="38" fg:w="2"/><text x="3.3219%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.1528%" y="581" width="0.0808%" height="15" fill="rgb(205,194,25)" fg:x="39" fg:w="1"/><text x="3.4028%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.1528%" y="565" width="0.0808%" height="15" fill="rgb(215,203,17)" fg:x="39" fg:w="1"/><text x="3.4028%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.1528%" y="549" width="0.0808%" height="15" fill="rgb(233,112,49)" fg:x="39" fg:w="1"/><text x="3.4028%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1528%" y="533" width="0.0808%" height="15" fill="rgb(241,130,26)" fg:x="39" fg:w="1"/><text x="3.4028%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1528%" y="517" width="0.0808%" height="15" fill="rgb(252,223,19)" fg:x="39" fg:w="1"/><text x="3.4028%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1528%" y="501" width="0.0808%" height="15" fill="rgb(211,95,25)" fg:x="39" fg:w="1"/><text x="3.4028%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1528%" y="485" width="0.0808%" height="15" fill="rgb(251,182,27)" fg:x="39" fg:w="1"/><text x="3.4028%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.1528%" y="469" width="0.0808%" height="15" fill="rgb(238,24,4)" fg:x="39" fg:w="1"/><text x="3.4028%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1528%" y="453" width="0.0808%" height="15" fill="rgb(224,220,25)" fg:x="39" fg:w="1"/><text x="3.4028%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.49%)</title><rect x="2.8294%" y="661" width="0.4850%" height="15" fill="rgb(239,133,26)" fg:x="35" fg:w="6"/><text x="3.0794%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="2.9103%" y="645" width="0.4042%" height="15" fill="rgb(211,94,48)" fg:x="36" fg:w="5"/><text x="3.1603%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="2.9911%" y="629" width="0.3234%" height="15" fill="rgb(239,87,6)" fg:x="37" fg:w="4"/><text x="3.2411%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="3.2336%" y="613" width="0.0808%" height="15" fill="rgb(227,62,0)" fg:x="40" fg:w="1"/><text x="3.4836%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.2336%" y="597" width="0.0808%" height="15" fill="rgb(211,226,4)" fg:x="40" fg:w="1"/><text x="3.4836%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="3.3145%" y="661" width="0.1617%" height="15" fill="rgb(253,38,52)" fg:x="41" fg:w="2"/><text x="3.5645%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.3145%" y="645" width="0.1617%" height="15" fill="rgb(229,126,40)" fg:x="41" fg:w="2"/><text x="3.5645%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.3953%" y="629" width="0.0808%" height="15" fill="rgb(229,165,44)" fg:x="42" fg:w="1"/><text x="3.6453%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.3953%" y="613" width="0.0808%" height="15" fill="rgb(247,95,47)" fg:x="42" fg:w="1"/><text x="3.6453%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.3953%" y="597" width="0.0808%" height="15" fill="rgb(216,140,30)" fg:x="42" fg:w="1"/><text x="3.6453%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.3953%" y="581" width="0.0808%" height="15" fill="rgb(246,214,8)" fg:x="42" fg:w="1"/><text x="3.6453%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.3953%" y="565" width="0.0808%" height="15" fill="rgb(227,224,15)" fg:x="42" fg:w="1"/><text x="3.6453%" y="575.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.4762%" y="661" width="0.0808%" height="15" fill="rgb(233,175,4)" fg:x="43" fg:w="1"/><text x="3.7262%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.4762%" y="645" width="0.0808%" height="15" fill="rgb(221,66,45)" fg:x="43" fg:w="1"/><text x="3.7262%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.4762%" y="629" width="0.0808%" height="15" fill="rgb(221,178,18)" fg:x="43" fg:w="1"/><text x="3.7262%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.4762%" y="613" width="0.0808%" height="15" fill="rgb(213,81,29)" fg:x="43" fg:w="1"/><text x="3.7262%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.4762%" y="597" width="0.0808%" height="15" fill="rgb(220,89,49)" fg:x="43" fg:w="1"/><text x="3.7262%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="3.4762%" y="581" width="0.0808%" height="15" fill="rgb(227,60,33)" fg:x="43" fg:w="1"/><text x="3.7262%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.6378%" y="645" width="0.0808%" height="15" fill="rgb(205,113,12)" fg:x="45" fg:w="1"/><text x="3.8878%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.6378%" y="629" width="0.0808%" height="15" fill="rgb(211,32,1)" fg:x="45" fg:w="1"/><text x="3.8878%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.6378%" y="613" width="0.0808%" height="15" fill="rgb(246,2,12)" fg:x="45" fg:w="1"/><text x="3.8878%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.6378%" y="597" width="0.0808%" height="15" fill="rgb(243,37,27)" fg:x="45" fg:w="1"/><text x="3.8878%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="3.7187%" y="645" width="0.0808%" height="15" fill="rgb(248,211,31)" fg:x="46" fg:w="1"/><text x="3.9687%" y="655.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="3.7187%" y="629" width="0.0808%" height="15" fill="rgb(242,146,47)" fg:x="46" fg:w="1"/><text x="3.9687%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.7187%" y="613" width="0.0808%" height="15" fill="rgb(206,70,20)" fg:x="46" fg:w="1"/><text x="3.9687%" y="623.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="3.7187%" y="597" width="0.0808%" height="15" fill="rgb(215,10,51)" fg:x="46" fg:w="1"/><text x="3.9687%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.7187%" y="581" width="0.0808%" height="15" fill="rgb(243,178,53)" fg:x="46" fg:w="1"/><text x="3.9687%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.7187%" y="565" width="0.0808%" height="15" fill="rgb(233,221,20)" fg:x="46" fg:w="1"/><text x="3.9687%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7187%" y="549" width="0.0808%" height="15" fill="rgb(218,95,35)" fg:x="46" fg:w="1"/><text x="3.9687%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.8804%" y="597" width="0.0808%" height="15" fill="rgb(229,13,5)" fg:x="48" fg:w="1"/><text x="4.1304%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.8804%" y="581" width="0.0808%" height="15" fill="rgb(252,164,30)" fg:x="48" fg:w="1"/><text x="4.1304%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.8804%" y="565" width="0.0808%" height="15" fill="rgb(232,68,36)" fg:x="48" fg:w="1"/><text x="4.1304%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.8804%" y="549" width="0.0808%" height="15" fill="rgb(219,59,54)" fg:x="48" fg:w="1"/><text x="4.1304%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.8804%" y="533" width="0.0808%" height="15" fill="rgb(250,92,33)" fg:x="48" fg:w="1"/><text x="4.1304%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8804%" y="517" width="0.0808%" height="15" fill="rgb(229,162,54)" fg:x="48" fg:w="1"/><text x="4.1304%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8804%" y="501" width="0.0808%" height="15" fill="rgb(244,114,52)" fg:x="48" fg:w="1"/><text x="4.1304%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8804%" y="485" width="0.0808%" height="15" fill="rgb(212,211,43)" fg:x="48" fg:w="1"/><text x="4.1304%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8804%" y="469" width="0.0808%" height="15" fill="rgb(226,147,8)" fg:x="48" fg:w="1"/><text x="4.1304%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.8804%" y="453" width="0.0808%" height="15" fill="rgb(226,23,13)" fg:x="48" fg:w="1"/><text x="4.1304%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8804%" y="437" width="0.0808%" height="15" fill="rgb(240,63,4)" fg:x="48" fg:w="1"/><text x="4.1304%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="3.7995%" y="645" width="0.3234%" height="15" fill="rgb(221,1,32)" fg:x="47" fg:w="4"/><text x="4.0495%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="3.8804%" y="629" width="0.2425%" height="15" fill="rgb(242,117,10)" fg:x="48" fg:w="3"/><text x="4.1304%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="3.8804%" y="613" width="0.2425%" height="15" fill="rgb(249,172,44)" fg:x="48" fg:w="3"/><text x="4.1304%" y="623.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="3.9612%" y="597" width="0.1617%" height="15" fill="rgb(244,46,45)" fg:x="49" fg:w="2"/><text x="4.2112%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.0420%" y="581" width="0.0808%" height="15" fill="rgb(206,43,17)" fg:x="50" fg:w="1"/><text x="4.2920%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.0420%" y="565" width="0.0808%" height="15" fill="rgb(239,218,39)" fg:x="50" fg:w="1"/><text x="4.2920%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0420%" y="549" width="0.0808%" height="15" fill="rgb(208,169,54)" fg:x="50" fg:w="1"/><text x="4.2920%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0420%" y="533" width="0.0808%" height="15" fill="rgb(247,25,42)" fg:x="50" fg:w="1"/><text x="4.2920%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.1229%" y="629" width="0.0808%" height="15" fill="rgb(226,23,31)" fg:x="51" fg:w="1"/><text x="4.3729%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1229%" y="613" width="0.0808%" height="15" fill="rgb(247,16,28)" fg:x="51" fg:w="1"/><text x="4.3729%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1229%" y="597" width="0.0808%" height="15" fill="rgb(231,147,38)" fg:x="51" fg:w="1"/><text x="4.3729%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.2846%" y="517" width="0.0808%" height="15" fill="rgb(253,81,48)" fg:x="53" fg:w="1"/><text x="4.5346%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2846%" y="501" width="0.0808%" height="15" fill="rgb(249,222,43)" fg:x="53" fg:w="1"/><text x="4.5346%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.2846%" y="485" width="0.0808%" height="15" fill="rgb(221,3,27)" fg:x="53" fg:w="1"/><text x="4.5346%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.3654%" y="485" width="0.0808%" height="15" fill="rgb(228,180,5)" fg:x="54" fg:w="1"/><text x="4.6154%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4462%" y="453" width="0.0808%" height="15" fill="rgb(227,131,42)" fg:x="55" fg:w="1"/><text x="4.6962%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4462%" y="437" width="0.0808%" height="15" fill="rgb(212,3,39)" fg:x="55" fg:w="1"/><text x="4.6962%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4462%" y="421" width="0.0808%" height="15" fill="rgb(226,45,5)" fg:x="55" fg:w="1"/><text x="4.6962%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.5271%" y="437" width="0.0808%" height="15" fill="rgb(215,167,45)" fg:x="56" fg:w="1"/><text x="4.7771%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.5271%" y="453" width="0.1617%" height="15" fill="rgb(250,218,53)" fg:x="56" fg:w="2"/><text x="4.7771%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.6079%" y="437" width="0.0808%" height="15" fill="rgb(207,140,0)" fg:x="57" fg:w="1"/><text x="4.8579%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6079%" y="421" width="0.0808%" height="15" fill="rgb(238,133,51)" fg:x="57" fg:w="1"/><text x="4.8579%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6079%" y="405" width="0.0808%" height="15" fill="rgb(218,203,53)" fg:x="57" fg:w="1"/><text x="4.8579%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6079%" y="389" width="0.0808%" height="15" fill="rgb(226,184,25)" fg:x="57" fg:w="1"/><text x="4.8579%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.3654%" y="517" width="0.4042%" height="15" fill="rgb(231,121,21)" fg:x="54" fg:w="5"/><text x="4.6154%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="4.3654%" y="501" width="0.4042%" height="15" fill="rgb(251,14,34)" fg:x="54" fg:w="5"/><text x="4.6154%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="4.4462%" y="485" width="0.3234%" height="15" fill="rgb(249,193,11)" fg:x="55" fg:w="4"/><text x="4.6962%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="4.4462%" y="469" width="0.3234%" height="15" fill="rgb(220,172,37)" fg:x="55" fg:w="4"/><text x="4.6962%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6888%" y="453" width="0.0808%" height="15" fill="rgb(231,229,43)" fg:x="58" fg:w="1"/><text x="4.9388%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6888%" y="437" width="0.0808%" height="15" fill="rgb(250,161,5)" fg:x="58" fg:w="1"/><text x="4.9388%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6888%" y="421" width="0.0808%" height="15" fill="rgb(218,225,18)" fg:x="58" fg:w="1"/><text x="4.9388%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="4.2846%" y="549" width="0.7276%" height="15" fill="rgb(245,45,42)" fg:x="53" fg:w="9"/><text x="4.5346%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="4.2846%" y="533" width="0.7276%" height="15" fill="rgb(211,115,1)" fg:x="53" fg:w="9"/><text x="4.5346%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="4.7696%" y="517" width="0.2425%" height="15" fill="rgb(248,133,52)" fg:x="59" fg:w="3"/><text x="5.0196%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="4.7696%" y="501" width="0.2425%" height="15" fill="rgb(238,100,21)" fg:x="59" fg:w="3"/><text x="5.0196%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.8504%" y="485" width="0.1617%" height="15" fill="rgb(247,144,11)" fg:x="60" fg:w="2"/><text x="5.1004%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.9313%" y="469" width="0.0808%" height="15" fill="rgb(206,164,16)" fg:x="61" fg:w="1"/><text x="5.1813%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.9313%" y="453" width="0.0808%" height="15" fill="rgb(222,34,3)" fg:x="61" fg:w="1"/><text x="5.1813%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.9313%" y="437" width="0.0808%" height="15" fill="rgb(248,82,4)" fg:x="61" fg:w="1"/><text x="5.1813%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.2546%" y="469" width="0.0808%" height="15" fill="rgb(228,81,46)" fg:x="65" fg:w="1"/><text x="5.5046%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="5.0121%" y="549" width="0.4042%" height="15" fill="rgb(227,67,47)" fg:x="62" fg:w="5"/><text x="5.2621%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="5.0121%" y="533" width="0.4042%" height="15" fill="rgb(215,93,53)" fg:x="62" fg:w="5"/><text x="5.2621%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="5.0121%" y="517" width="0.4042%" height="15" fill="rgb(248,194,39)" fg:x="62" fg:w="5"/><text x="5.2621%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.0930%" y="501" width="0.3234%" height="15" fill="rgb(215,5,19)" fg:x="63" fg:w="4"/><text x="5.3430%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.0930%" y="485" width="0.3234%" height="15" fill="rgb(226,215,51)" fg:x="63" fg:w="4"/><text x="5.3430%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3355%" y="469" width="0.0808%" height="15" fill="rgb(225,56,26)" fg:x="66" fg:w="1"/><text x="5.5855%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3355%" y="453" width="0.0808%" height="15" fill="rgb(222,75,29)" fg:x="66" fg:w="1"/><text x="5.5855%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4972%" y="501" width="0.0808%" height="15" fill="rgb(236,139,6)" fg:x="68" fg:w="1"/><text x="5.7472%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="5.4972%" y="485" width="0.0808%" height="15" fill="rgb(223,137,36)" fg:x="68" fg:w="1"/><text x="5.7472%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5780%" y="501" width="0.0808%" height="15" fill="rgb(226,99,2)" fg:x="69" fg:w="1"/><text x="5.8280%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="5.6589%" y="469" width="0.0808%" height="15" fill="rgb(206,133,23)" fg:x="70" fg:w="1"/><text x="5.9089%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.8205%" y="453" width="0.1617%" height="15" fill="rgb(243,173,15)" fg:x="72" fg:w="2"/><text x="6.0705%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.8205%" y="437" width="0.1617%" height="15" fill="rgb(228,69,28)" fg:x="72" fg:w="2"/><text x="6.0705%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.9822%" y="453" width="0.1617%" height="15" fill="rgb(212,51,22)" fg:x="74" fg:w="2"/><text x="6.2322%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9822%" y="437" width="0.1617%" height="15" fill="rgb(227,113,0)" fg:x="74" fg:w="2"/><text x="6.2322%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="5.9822%" y="421" width="0.1617%" height="15" fill="rgb(252,84,27)" fg:x="74" fg:w="2"/><text x="6.2322%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0631%" y="405" width="0.0808%" height="15" fill="rgb(223,145,39)" fg:x="75" fg:w="1"/><text x="6.3131%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0631%" y="389" width="0.0808%" height="15" fill="rgb(239,219,30)" fg:x="75" fg:w="1"/><text x="6.3131%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0631%" y="373" width="0.0808%" height="15" fill="rgb(224,196,39)" fg:x="75" fg:w="1"/><text x="6.3131%" y="383.50"></text></g><g><title>engine::session::Session::flush (27 samples, 2.18%)</title><rect x="4.1229%" y="645" width="2.1827%" height="15" fill="rgb(205,35,43)" fg:x="51" fg:w="27"/><text x="4.3729%" y="655.50">e..</text></g><g><title>engine::session::Session::save_changes (26 samples, 2.10%)</title><rect x="4.2037%" y="629" width="2.1019%" height="15" fill="rgb(228,201,21)" fg:x="52" fg:w="26"/><text x="4.4537%" y="639.50">e..</text></g><g><title>engine::session::state::State::close (26 samples, 2.10%)</title><rect x="4.2037%" y="613" width="2.1019%" height="15" fill="rgb(237,118,16)" fg:x="52" fg:w="26"/><text x="4.4537%" y="623.50">e..</text></g><g><title>engine::session::state::State::flush_entities (26 samples, 2.10%)</title><rect x="4.2037%" y="597" width="2.1019%" height="15" fill="rgb(241,17,19)" fg:x="52" fg:w="26"/><text x="4.4537%" y="607.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (26 samples, 2.10%)</title><rect x="4.2037%" y="581" width="2.1019%" height="15" fill="rgb(214,10,25)" fg:x="52" fg:w="26"/><text x="4.4537%" y="591.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (26 samples, 2.10%)</title><rect x="4.2037%" y="565" width="2.1019%" height="15" fill="rgb(238,37,29)" fg:x="52" fg:w="26"/><text x="4.4537%" y="575.50">e..</text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.89%)</title><rect x="5.4163%" y="549" width="0.8892%" height="15" fill="rgb(253,83,25)" fg:x="67" fg:w="11"/><text x="5.6663%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.89%)</title><rect x="5.4163%" y="533" width="0.8892%" height="15" fill="rgb(234,192,12)" fg:x="67" fg:w="11"/><text x="5.6663%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.89%)</title><rect x="5.4163%" y="517" width="0.8892%" height="15" fill="rgb(241,216,45)" fg:x="67" fg:w="11"/><text x="5.6663%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.65%)</title><rect x="5.6589%" y="501" width="0.6467%" height="15" fill="rgb(242,22,33)" fg:x="70" fg:w="8"/><text x="5.9089%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.65%)</title><rect x="5.6589%" y="485" width="0.6467%" height="15" fill="rgb(231,105,49)" fg:x="70" fg:w="8"/><text x="5.9089%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.57%)</title><rect x="5.7397%" y="469" width="0.5659%" height="15" fill="rgb(218,204,15)" fg:x="71" fg:w="7"/><text x="5.9897%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1439%" y="453" width="0.1617%" height="15" fill="rgb(235,138,41)" fg:x="76" fg:w="2"/><text x="6.3939%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.1439%" y="437" width="0.1617%" height="15" fill="rgb(246,0,9)" fg:x="76" fg:w="2"/><text x="6.3939%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1439%" y="421" width="0.1617%" height="15" fill="rgb(210,74,4)" fg:x="76" fg:w="2"/><text x="6.3939%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.1439%" y="405" width="0.1617%" height="15" fill="rgb(250,60,41)" fg:x="76" fg:w="2"/><text x="6.3939%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1439%" y="389" width="0.1617%" height="15" fill="rgb(220,115,12)" fg:x="76" fg:w="2"/><text x="6.3939%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.1439%" y="373" width="0.1617%" height="15" fill="rgb(237,100,13)" fg:x="76" fg:w="2"/><text x="6.3939%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1439%" y="357" width="0.1617%" height="15" fill="rgb(213,55,26)" fg:x="76" fg:w="2"/><text x="6.3939%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2247%" y="341" width="0.0808%" height="15" fill="rgb(216,17,4)" fg:x="77" fg:w="1"/><text x="6.4747%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="6.3056%" y="629" width="0.0808%" height="15" fill="rgb(220,153,47)" fg:x="78" fg:w="1"/><text x="6.5556%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="6.3056%" y="645" width="0.1617%" height="15" fill="rgb(215,131,9)" fg:x="78" fg:w="2"/><text x="6.5556%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.3864%" y="629" width="0.0808%" height="15" fill="rgb(233,46,42)" fg:x="79" fg:w="1"/><text x="6.6364%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3864%" y="613" width="0.0808%" height="15" fill="rgb(226,86,7)" fg:x="79" fg:w="1"/><text x="6.6364%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3864%" y="597" width="0.0808%" height="15" fill="rgb(239,226,21)" fg:x="79" fg:w="1"/><text x="6.6364%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.3864%" y="581" width="0.0808%" height="15" fill="rgb(244,137,22)" fg:x="79" fg:w="1"/><text x="6.6364%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.3864%" y="565" width="0.0808%" height="15" fill="rgb(211,139,35)" fg:x="79" fg:w="1"/><text x="6.6364%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.3864%" y="549" width="0.0808%" height="15" fill="rgb(214,62,50)" fg:x="79" fg:w="1"/><text x="6.6364%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3864%" y="533" width="0.0808%" height="15" fill="rgb(212,113,44)" fg:x="79" fg:w="1"/><text x="6.6364%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3864%" y="517" width="0.0808%" height="15" fill="rgb(226,150,43)" fg:x="79" fg:w="1"/><text x="6.6364%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.3864%" y="501" width="0.0808%" height="15" fill="rgb(250,71,37)" fg:x="79" fg:w="1"/><text x="6.6364%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.3864%" y="485" width="0.0808%" height="15" fill="rgb(219,76,19)" fg:x="79" fg:w="1"/><text x="6.6364%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.3864%" y="469" width="0.0808%" height="15" fill="rgb(250,39,11)" fg:x="79" fg:w="1"/><text x="6.6364%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.3864%" y="453" width="0.0808%" height="15" fill="rgb(230,64,31)" fg:x="79" fg:w="1"/><text x="6.6364%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3864%" y="437" width="0.0808%" height="15" fill="rgb(208,222,23)" fg:x="79" fg:w="1"/><text x="6.6364%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="6.4673%" y="597" width="0.0808%" height="15" fill="rgb(227,125,18)" fg:x="80" fg:w="1"/><text x="6.7173%" y="607.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="6.4673%" y="581" width="0.0808%" height="15" fill="rgb(234,210,9)" fg:x="80" fg:w="1"/><text x="6.7173%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4673%" y="565" width="0.0808%" height="15" fill="rgb(217,127,24)" fg:x="80" fg:w="1"/><text x="6.7173%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="6.4673%" y="613" width="0.1617%" height="15" fill="rgb(239,141,48)" fg:x="80" fg:w="2"/><text x="6.7173%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="6.5481%" y="597" width="0.0808%" height="15" fill="rgb(227,109,8)" fg:x="81" fg:w="1"/><text x="6.7981%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5481%" y="581" width="0.0808%" height="15" fill="rgb(235,184,23)" fg:x="81" fg:w="1"/><text x="6.7981%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.5481%" y="565" width="0.0808%" height="15" fill="rgb(227,226,48)" fg:x="81" fg:w="1"/><text x="6.7981%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.5481%" y="549" width="0.0808%" height="15" fill="rgb(206,150,11)" fg:x="81" fg:w="1"/><text x="6.7981%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.5481%" y="533" width="0.0808%" height="15" fill="rgb(254,2,33)" fg:x="81" fg:w="1"/><text x="6.7981%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.5481%" y="517" width="0.0808%" height="15" fill="rgb(243,160,20)" fg:x="81" fg:w="1"/><text x="6.7981%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.5481%" y="501" width="0.0808%" height="15" fill="rgb(218,208,30)" fg:x="81" fg:w="1"/><text x="6.7981%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.5481%" y="485" width="0.0808%" height="15" fill="rgb(224,120,49)" fg:x="81" fg:w="1"/><text x="6.7981%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.5481%" y="469" width="0.0808%" height="15" fill="rgb(246,12,2)" fg:x="81" fg:w="1"/><text x="6.7981%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.5481%" y="453" width="0.0808%" height="15" fill="rgb(236,117,3)" fg:x="81" fg:w="1"/><text x="6.7981%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.5481%" y="437" width="0.0808%" height="15" fill="rgb(216,128,52)" fg:x="81" fg:w="1"/><text x="6.7981%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.5481%" y="421" width="0.0808%" height="15" fill="rgb(246,145,19)" fg:x="81" fg:w="1"/><text x="6.7981%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5481%" y="405" width="0.0808%" height="15" fill="rgb(222,11,46)" fg:x="81" fg:w="1"/><text x="6.7981%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.6289%" y="613" width="0.0808%" height="15" fill="rgb(245,82,36)" fg:x="82" fg:w="1"/><text x="6.8789%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.6289%" y="597" width="0.0808%" height="15" fill="rgb(250,73,51)" fg:x="82" fg:w="1"/><text x="6.8789%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.6289%" y="581" width="0.0808%" height="15" fill="rgb(221,189,23)" fg:x="82" fg:w="1"/><text x="6.8789%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.6289%" y="565" width="0.0808%" height="15" fill="rgb(210,33,7)" fg:x="82" fg:w="1"/><text x="6.8789%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="6.7098%" y="613" width="0.0808%" height="15" fill="rgb(210,107,22)" fg:x="83" fg:w="1"/><text x="6.9598%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="6.7098%" y="597" width="0.0808%" height="15" fill="rgb(222,116,37)" fg:x="83" fg:w="1"/><text x="6.9598%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="6.7098%" y="581" width="0.0808%" height="15" fill="rgb(254,17,48)" fg:x="83" fg:w="1"/><text x="6.9598%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="6.7098%" y="565" width="0.0808%" height="15" fill="rgb(224,36,32)" fg:x="83" fg:w="1"/><text x="6.9598%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.7098%" y="549" width="0.0808%" height="15" fill="rgb(232,90,46)" fg:x="83" fg:w="1"/><text x="6.9598%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="6.4673%" y="629" width="0.4042%" height="15" fill="rgb(241,66,40)" fg:x="80" fg:w="5"/><text x="6.7173%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.7906%" y="613" width="0.0808%" height="15" fill="rgb(249,184,29)" fg:x="84" fg:w="1"/><text x="7.0406%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="6.7906%" y="597" width="0.0808%" height="15" fill="rgb(231,181,1)" fg:x="84" fg:w="1"/><text x="7.0406%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.7906%" y="581" width="0.0808%" height="15" fill="rgb(224,94,2)" fg:x="84" fg:w="1"/><text x="7.0406%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="6.7906%" y="565" width="0.0808%" height="15" fill="rgb(229,170,15)" fg:x="84" fg:w="1"/><text x="7.0406%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="6.7906%" y="549" width="0.0808%" height="15" fill="rgb(240,127,35)" fg:x="84" fg:w="1"/><text x="7.0406%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7906%" y="533" width="0.0808%" height="15" fill="rgb(248,196,34)" fg:x="84" fg:w="1"/><text x="7.0406%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.7906%" y="517" width="0.0808%" height="15" fill="rgb(236,137,7)" fg:x="84" fg:w="1"/><text x="7.0406%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7906%" y="501" width="0.0808%" height="15" fill="rgb(235,127,16)" fg:x="84" fg:w="1"/><text x="7.0406%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.7906%" y="485" width="0.0808%" height="15" fill="rgb(250,192,54)" fg:x="84" fg:w="1"/><text x="7.0406%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.7906%" y="469" width="0.0808%" height="15" fill="rgb(218,98,20)" fg:x="84" fg:w="1"/><text x="7.0406%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7906%" y="453" width="0.0808%" height="15" fill="rgb(230,176,47)" fg:x="84" fg:w="1"/><text x="7.0406%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.7906%" y="437" width="0.0808%" height="15" fill="rgb(244,2,33)" fg:x="84" fg:w="1"/><text x="7.0406%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7906%" y="421" width="0.0808%" height="15" fill="rgb(231,100,17)" fg:x="84" fg:w="1"/><text x="7.0406%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.7906%" y="405" width="0.0808%" height="15" fill="rgb(245,23,12)" fg:x="84" fg:w="1"/><text x="7.0406%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.7906%" y="389" width="0.0808%" height="15" fill="rgb(249,55,22)" fg:x="84" fg:w="1"/><text x="7.0406%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="6.8715%" y="565" width="0.0808%" height="15" fill="rgb(207,134,9)" fg:x="85" fg:w="1"/><text x="7.1215%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8715%" y="549" width="0.0808%" height="15" fill="rgb(218,134,0)" fg:x="85" fg:w="1"/><text x="7.1215%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9523%" y="533" width="0.0808%" height="15" fill="rgb(213,212,33)" fg:x="86" fg:w="1"/><text x="7.2023%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9523%" y="517" width="0.0808%" height="15" fill="rgb(252,106,18)" fg:x="86" fg:w="1"/><text x="7.2023%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="6.8715%" y="581" width="0.2425%" height="15" fill="rgb(208,126,42)" fg:x="85" fg:w="3"/><text x="7.1215%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="6.9523%" y="565" width="0.1617%" height="15" fill="rgb(246,175,29)" fg:x="86" fg:w="2"/><text x="7.2023%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="6.9523%" y="549" width="0.1617%" height="15" fill="rgb(215,13,50)" fg:x="86" fg:w="2"/><text x="7.2023%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.0331%" y="533" width="0.0808%" height="15" fill="rgb(216,172,15)" fg:x="87" fg:w="1"/><text x="7.2831%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1140%" y="533" width="0.0808%" height="15" fill="rgb(212,103,13)" fg:x="88" fg:w="1"/><text x="7.3640%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.1140%" y="517" width="0.0808%" height="15" fill="rgb(231,171,36)" fg:x="88" fg:w="1"/><text x="7.3640%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (5 samples, 0.40%)</title><rect x="6.8715%" y="613" width="0.4042%" height="15" fill="rgb(250,123,20)" fg:x="85" fg:w="5"/><text x="7.1215%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (5 samples, 0.40%)</title><rect x="6.8715%" y="597" width="0.4042%" height="15" fill="rgb(212,53,50)" fg:x="85" fg:w="5"/><text x="7.1215%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="7.1140%" y="581" width="0.1617%" height="15" fill="rgb(243,54,12)" fg:x="88" fg:w="2"/><text x="7.3640%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.1140%" y="565" width="0.1617%" height="15" fill="rgb(234,101,34)" fg:x="88" fg:w="2"/><text x="7.3640%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.1140%" y="549" width="0.1617%" height="15" fill="rgb(254,67,22)" fg:x="88" fg:w="2"/><text x="7.3640%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.1948%" y="533" width="0.0808%" height="15" fill="rgb(250,35,47)" fg:x="89" fg:w="1"/><text x="7.4448%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.1948%" y="517" width="0.0808%" height="15" fill="rgb(226,126,38)" fg:x="89" fg:w="1"/><text x="7.4448%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2757%" y="597" width="0.0808%" height="15" fill="rgb(216,138,53)" fg:x="90" fg:w="1"/><text x="7.5257%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2757%" y="581" width="0.0808%" height="15" fill="rgb(246,199,43)" fg:x="90" fg:w="1"/><text x="7.5257%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="7.2757%" y="613" width="0.1617%" height="15" fill="rgb(232,125,11)" fg:x="90" fg:w="2"/><text x="7.5257%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3565%" y="597" width="0.0808%" height="15" fill="rgb(218,219,45)" fg:x="91" fg:w="1"/><text x="7.6065%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3565%" y="581" width="0.0808%" height="15" fill="rgb(216,102,54)" fg:x="91" fg:w="1"/><text x="7.6065%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.3565%" y="565" width="0.0808%" height="15" fill="rgb(250,228,7)" fg:x="91" fg:w="1"/><text x="7.6065%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4373%" y="597" width="0.0808%" height="15" fill="rgb(226,125,25)" fg:x="92" fg:w="1"/><text x="7.6873%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (14 samples, 1.13%)</title><rect x="6.4673%" y="645" width="1.1318%" height="15" fill="rgb(224,165,27)" fg:x="80" fg:w="14"/><text x="6.7173%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.73%)</title><rect x="6.8715%" y="629" width="0.7276%" height="15" fill="rgb(233,86,3)" fg:x="85" fg:w="9"/><text x="7.1215%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="7.4373%" y="613" width="0.1617%" height="15" fill="rgb(228,116,20)" fg:x="92" fg:w="2"/><text x="7.6873%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.5182%" y="597" width="0.0808%" height="15" fill="rgb(209,192,17)" fg:x="93" fg:w="1"/><text x="7.7682%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.5182%" y="581" width="0.0808%" height="15" fill="rgb(224,88,34)" fg:x="93" fg:w="1"/><text x="7.7682%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.5182%" y="565" width="0.0808%" height="15" fill="rgb(233,38,6)" fg:x="93" fg:w="1"/><text x="7.7682%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.5182%" y="549" width="0.0808%" height="15" fill="rgb(212,59,30)" fg:x="93" fg:w="1"/><text x="7.7682%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.5182%" y="533" width="0.0808%" height="15" fill="rgb(213,80,3)" fg:x="93" fg:w="1"/><text x="7.7682%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5182%" y="517" width="0.0808%" height="15" fill="rgb(251,178,7)" fg:x="93" fg:w="1"/><text x="7.7682%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5182%" y="501" width="0.0808%" height="15" fill="rgb(213,154,26)" fg:x="93" fg:w="1"/><text x="7.7682%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5182%" y="485" width="0.0808%" height="15" fill="rgb(238,165,49)" fg:x="93" fg:w="1"/><text x="7.7682%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5182%" y="469" width="0.0808%" height="15" fill="rgb(248,91,46)" fg:x="93" fg:w="1"/><text x="7.7682%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.5182%" y="453" width="0.0808%" height="15" fill="rgb(244,21,52)" fg:x="93" fg:w="1"/><text x="7.7682%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5182%" y="437" width="0.0808%" height="15" fill="rgb(247,122,20)" fg:x="93" fg:w="1"/><text x="7.7682%" y="447.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="7.5990%" y="645" width="0.0808%" height="15" fill="rgb(218,27,9)" fg:x="94" fg:w="1"/><text x="7.8490%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="7.5990%" y="629" width="0.0808%" height="15" fill="rgb(246,7,6)" fg:x="94" fg:w="1"/><text x="7.8490%" y="639.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="7.5990%" y="613" width="0.0808%" height="15" fill="rgb(227,135,54)" fg:x="94" fg:w="1"/><text x="7.8490%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.5990%" y="597" width="0.0808%" height="15" fill="rgb(247,14,11)" fg:x="94" fg:w="1"/><text x="7.8490%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.5990%" y="581" width="0.0808%" height="15" fill="rgb(206,149,34)" fg:x="94" fg:w="1"/><text x="7.8490%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.5990%" y="565" width="0.0808%" height="15" fill="rgb(227,228,4)" fg:x="94" fg:w="1"/><text x="7.8490%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.6799%" y="533" width="0.0808%" height="15" fill="rgb(238,218,28)" fg:x="95" fg:w="1"/><text x="7.9299%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6799%" y="517" width="0.0808%" height="15" fill="rgb(252,86,40)" fg:x="95" fg:w="1"/><text x="7.9299%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7607%" y="501" width="0.0808%" height="15" fill="rgb(251,225,11)" fg:x="96" fg:w="1"/><text x="8.0107%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7607%" y="485" width="0.0808%" height="15" fill="rgb(206,46,49)" fg:x="96" fg:w="1"/><text x="8.0107%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="7.6799%" y="629" width="0.2425%" height="15" fill="rgb(245,128,24)" fg:x="95" fg:w="3"/><text x="7.9299%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="7.6799%" y="613" width="0.2425%" height="15" fill="rgb(219,177,34)" fg:x="95" fg:w="3"/><text x="7.9299%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="7.6799%" y="597" width="0.2425%" height="15" fill="rgb(218,60,48)" fg:x="95" fg:w="3"/><text x="7.9299%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="7.6799%" y="581" width="0.2425%" height="15" fill="rgb(221,11,5)" fg:x="95" fg:w="3"/><text x="7.9299%" y="591.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="7.6799%" y="565" width="0.2425%" height="15" fill="rgb(220,148,13)" fg:x="95" fg:w="3"/><text x="7.9299%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (3 samples, 0.24%)</title><rect x="7.6799%" y="549" width="0.2425%" height="15" fill="rgb(210,16,3)" fg:x="95" fg:w="3"/><text x="7.9299%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="7.7607%" y="533" width="0.1617%" height="15" fill="rgb(236,80,2)" fg:x="96" fg:w="2"/><text x="8.0107%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="7.7607%" y="517" width="0.1617%" height="15" fill="rgb(239,129,19)" fg:x="96" fg:w="2"/><text x="8.0107%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8416%" y="501" width="0.0808%" height="15" fill="rgb(220,106,35)" fg:x="97" fg:w="1"/><text x="8.0916%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8416%" y="485" width="0.0808%" height="15" fill="rgb(252,139,45)" fg:x="97" fg:w="1"/><text x="8.0916%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.8416%" y="469" width="0.0808%" height="15" fill="rgb(229,8,36)" fg:x="97" fg:w="1"/><text x="8.0916%" y="479.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.9224%" y="613" width="0.0808%" height="15" fill="rgb(230,126,33)" fg:x="98" fg:w="1"/><text x="8.1724%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.9224%" y="597" width="0.0808%" height="15" fill="rgb(239,140,21)" fg:x="98" fg:w="1"/><text x="8.1724%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.9224%" y="581" width="0.0808%" height="15" fill="rgb(254,104,9)" fg:x="98" fg:w="1"/><text x="8.1724%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.9224%" y="565" width="0.0808%" height="15" fill="rgb(239,52,14)" fg:x="98" fg:w="1"/><text x="8.1724%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.9224%" y="549" width="0.0808%" height="15" fill="rgb(208,227,44)" fg:x="98" fg:w="1"/><text x="8.1724%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (56 samples, 4.53%)</title><rect x="3.5570%" y="661" width="4.5271%" height="15" fill="rgb(246,18,19)" fg:x="44" fg:w="56"/><text x="3.8070%" y="671.50">plugi..</text></g><g><title>plugins_core::build::Build::occupying (5 samples, 0.40%)</title><rect x="7.6799%" y="645" width="0.4042%" height="15" fill="rgb(235,228,25)" fg:x="95" fg:w="5"/><text x="7.9299%" y="655.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="7.9224%" y="629" width="0.1617%" height="15" fill="rgb(240,156,20)" fg:x="98" fg:w="2"/><text x="8.1724%" y="639.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="8.0032%" y="613" width="0.0808%" height="15" fill="rgb(224,8,20)" fg:x="99" fg:w="1"/><text x="8.2532%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="8.0032%" y="597" width="0.0808%" height="15" fill="rgb(214,12,52)" fg:x="99" fg:w="1"/><text x="8.2532%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="8.0032%" y="581" width="0.0808%" height="15" fill="rgb(211,220,47)" fg:x="99" fg:w="1"/><text x="8.2532%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.0032%" y="565" width="0.0808%" height="15" fill="rgb(250,173,5)" fg:x="99" fg:w="1"/><text x="8.2532%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.0032%" y="549" width="0.0808%" height="15" fill="rgb(250,125,52)" fg:x="99" fg:w="1"/><text x="8.2532%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.0032%" y="533" width="0.0808%" height="15" fill="rgb(209,133,18)" fg:x="99" fg:w="1"/><text x="8.2532%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.0032%" y="517" width="0.0808%" height="15" fill="rgb(216,173,22)" fg:x="99" fg:w="1"/><text x="8.2532%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0032%" y="501" width="0.0808%" height="15" fill="rgb(205,3,22)" fg:x="99" fg:w="1"/><text x="8.2532%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.0032%" y="485" width="0.0808%" height="15" fill="rgb(248,22,20)" fg:x="99" fg:w="1"/><text x="8.2532%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0032%" y="469" width="0.0808%" height="15" fill="rgb(233,6,29)" fg:x="99" fg:w="1"/><text x="8.2532%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.0032%" y="453" width="0.0808%" height="15" fill="rgb(240,22,54)" fg:x="99" fg:w="1"/><text x="8.2532%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0032%" y="437" width="0.0808%" height="15" fill="rgb(231,133,32)" fg:x="99" fg:w="1"/><text x="8.2532%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="8.0032%" y="421" width="0.0808%" height="15" fill="rgb(248,193,4)" fg:x="99" fg:w="1"/><text x="8.2532%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="8.0841%" y="661" width="0.0808%" height="15" fill="rgb(211,178,46)" fg:x="100" fg:w="1"/><text x="8.3341%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="8.0841%" y="645" width="0.0808%" height="15" fill="rgb(224,5,42)" fg:x="100" fg:w="1"/><text x="8.3341%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="8.1649%" y="613" width="0.0808%" height="15" fill="rgb(239,176,25)" fg:x="101" fg:w="1"/><text x="8.4149%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="8.1649%" y="597" width="0.0808%" height="15" fill="rgb(245,187,50)" fg:x="101" fg:w="1"/><text x="8.4149%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.1649%" y="581" width="0.0808%" height="15" fill="rgb(248,24,15)" fg:x="101" fg:w="1"/><text x="8.4149%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.1649%" y="565" width="0.0808%" height="15" fill="rgb(205,166,13)" fg:x="101" fg:w="1"/><text x="8.4149%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.1649%" y="549" width="0.0808%" height="15" fill="rgb(208,114,23)" fg:x="101" fg:w="1"/><text x="8.4149%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.1649%" y="533" width="0.0808%" height="15" fill="rgb(239,127,18)" fg:x="101" fg:w="1"/><text x="8.4149%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="8.1649%" y="517" width="0.0808%" height="15" fill="rgb(219,154,28)" fg:x="101" fg:w="1"/><text x="8.4149%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.1649%" y="501" width="0.0808%" height="15" fill="rgb(225,157,23)" fg:x="101" fg:w="1"/><text x="8.4149%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.1649%" y="485" width="0.0808%" height="15" fill="rgb(219,8,6)" fg:x="101" fg:w="1"/><text x="8.4149%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1649%" y="469" width="0.0808%" height="15" fill="rgb(212,47,6)" fg:x="101" fg:w="1"/><text x="8.4149%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1649%" y="453" width="0.0808%" height="15" fill="rgb(224,190,4)" fg:x="101" fg:w="1"/><text x="8.4149%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="8.1649%" y="437" width="0.0808%" height="15" fill="rgb(239,183,29)" fg:x="101" fg:w="1"/><text x="8.4149%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="8.1649%" y="421" width="0.0808%" height="15" fill="rgb(213,57,7)" fg:x="101" fg:w="1"/><text x="8.4149%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="8.1649%" y="405" width="0.0808%" height="15" fill="rgb(216,148,1)" fg:x="101" fg:w="1"/><text x="8.4149%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="8.1649%" y="389" width="0.0808%" height="15" fill="rgb(236,182,29)" fg:x="101" fg:w="1"/><text x="8.4149%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="8.1649%" y="373" width="0.0808%" height="15" fill="rgb(244,120,48)" fg:x="101" fg:w="1"/><text x="8.4149%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="8.1649%" y="357" width="0.0808%" height="15" fill="rgb(206,71,34)" fg:x="101" fg:w="1"/><text x="8.4149%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.1649%" y="341" width="0.0808%" height="15" fill="rgb(242,32,6)" fg:x="101" fg:w="1"/><text x="8.4149%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="8.1649%" y="325" width="0.0808%" height="15" fill="rgb(241,35,3)" fg:x="101" fg:w="1"/><text x="8.4149%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.1649%" y="309" width="0.0808%" height="15" fill="rgb(222,62,19)" fg:x="101" fg:w="1"/><text x="8.4149%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1649%" y="293" width="0.0808%" height="15" fill="rgb(223,110,41)" fg:x="101" fg:w="1"/><text x="8.4149%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2458%" y="533" width="0.0808%" height="15" fill="rgb(208,224,4)" fg:x="102" fg:w="1"/><text x="8.4958%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2458%" y="517" width="0.0808%" height="15" fill="rgb(241,137,19)" fg:x="102" fg:w="1"/><text x="8.4958%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2458%" y="501" width="0.0808%" height="15" fill="rgb(244,24,17)" fg:x="102" fg:w="1"/><text x="8.4958%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2458%" y="485" width="0.0808%" height="15" fill="rgb(245,178,49)" fg:x="102" fg:w="1"/><text x="8.4958%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2458%" y="469" width="0.0808%" height="15" fill="rgb(219,160,38)" fg:x="102" fg:w="1"/><text x="8.4958%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="8.2458%" y="453" width="0.0808%" height="15" fill="rgb(228,137,14)" fg:x="102" fg:w="1"/><text x="8.4958%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="8.2458%" y="437" width="0.0808%" height="15" fill="rgb(237,134,11)" fg:x="102" fg:w="1"/><text x="8.4958%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="8.2458%" y="597" width="0.1617%" height="15" fill="rgb(211,126,44)" fg:x="102" fg:w="2"/><text x="8.4958%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="8.2458%" y="581" width="0.1617%" height="15" fill="rgb(226,171,33)" fg:x="102" fg:w="2"/><text x="8.4958%" y="591.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="8.2458%" y="565" width="0.1617%" height="15" fill="rgb(253,99,13)" fg:x="102" fg:w="2"/><text x="8.4958%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="8.2458%" y="549" width="0.1617%" height="15" fill="rgb(244,48,7)" fg:x="102" fg:w="2"/><text x="8.4958%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3266%" y="533" width="0.0808%" height="15" fill="rgb(244,217,54)" fg:x="103" fg:w="1"/><text x="8.5766%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3266%" y="517" width="0.0808%" height="15" fill="rgb(224,15,18)" fg:x="103" fg:w="1"/><text x="8.5766%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.3266%" y="501" width="0.0808%" height="15" fill="rgb(244,99,12)" fg:x="103" fg:w="1"/><text x="8.5766%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.3266%" y="485" width="0.0808%" height="15" fill="rgb(233,226,8)" fg:x="103" fg:w="1"/><text x="8.5766%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3266%" y="469" width="0.0808%" height="15" fill="rgb(229,211,3)" fg:x="103" fg:w="1"/><text x="8.5766%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="8.1649%" y="661" width="0.3234%" height="15" fill="rgb(216,140,21)" fg:x="101" fg:w="4"/><text x="8.4149%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="8.1649%" y="645" width="0.3234%" height="15" fill="rgb(234,122,30)" fg:x="101" fg:w="4"/><text x="8.4149%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="8.1649%" y="629" width="0.3234%" height="15" fill="rgb(236,25,46)" fg:x="101" fg:w="4"/><text x="8.4149%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="8.2458%" y="613" width="0.2425%" height="15" fill="rgb(217,52,54)" fg:x="102" fg:w="3"/><text x="8.4958%" y="623.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="8.4074%" y="597" width="0.0808%" height="15" fill="rgb(222,29,26)" fg:x="104" fg:w="1"/><text x="8.6574%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4074%" y="581" width="0.0808%" height="15" fill="rgb(216,177,29)" fg:x="104" fg:w="1"/><text x="8.6574%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4074%" y="565" width="0.0808%" height="15" fill="rgb(247,136,51)" fg:x="104" fg:w="1"/><text x="8.6574%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="8.4883%" y="629" width="0.0808%" height="15" fill="rgb(231,47,47)" fg:x="105" fg:w="1"/><text x="8.7383%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="8.4883%" y="613" width="0.0808%" height="15" fill="rgb(211,192,36)" fg:x="105" fg:w="1"/><text x="8.7383%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.4883%" y="597" width="0.0808%" height="15" fill="rgb(229,156,32)" fg:x="105" fg:w="1"/><text x="8.7383%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.4883%" y="645" width="0.1617%" height="15" fill="rgb(248,213,20)" fg:x="105" fg:w="2"/><text x="8.7383%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.5691%" y="629" width="0.0808%" height="15" fill="rgb(217,64,7)" fg:x="106" fg:w="1"/><text x="8.8191%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.5691%" y="613" width="0.0808%" height="15" fill="rgb(232,142,8)" fg:x="106" fg:w="1"/><text x="8.8191%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.5691%" y="597" width="0.0808%" height="15" fill="rgb(224,92,44)" fg:x="106" fg:w="1"/><text x="8.8191%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.5691%" y="581" width="0.0808%" height="15" fill="rgb(214,169,17)" fg:x="106" fg:w="1"/><text x="8.8191%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.5691%" y="565" width="0.0808%" height="15" fill="rgb(210,59,37)" fg:x="106" fg:w="1"/><text x="8.8191%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5691%" y="549" width="0.0808%" height="15" fill="rgb(214,116,48)" fg:x="106" fg:w="1"/><text x="8.8191%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5691%" y="533" width="0.0808%" height="15" fill="rgb(244,191,6)" fg:x="106" fg:w="1"/><text x="8.8191%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5691%" y="517" width="0.0808%" height="15" fill="rgb(241,50,52)" fg:x="106" fg:w="1"/><text x="8.8191%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5691%" y="501" width="0.0808%" height="15" fill="rgb(236,75,39)" fg:x="106" fg:w="1"/><text x="8.8191%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5691%" y="485" width="0.0808%" height="15" fill="rgb(236,99,0)" fg:x="106" fg:w="1"/><text x="8.8191%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="8.6500%" y="645" width="0.0808%" height="15" fill="rgb(207,202,15)" fg:x="107" fg:w="1"/><text x="8.9000%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="8.6500%" y="629" width="0.0808%" height="15" fill="rgb(233,207,14)" fg:x="107" fg:w="1"/><text x="8.9000%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.6500%" y="613" width="0.0808%" height="15" fill="rgb(226,27,51)" fg:x="107" fg:w="1"/><text x="8.9000%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (89 samples, 7.19%)</title><rect x="1.6168%" y="677" width="7.1948%" height="15" fill="rgb(206,104,42)" fg:x="20" fg:w="89"/><text x="1.8668%" y="687.50">&lt;tests::Ho..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (4 samples, 0.32%)</title><rect x="8.4883%" y="661" width="0.3234%" height="15" fill="rgb(212,225,4)" fg:x="105" fg:w="4"/><text x="8.7383%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="8.7308%" y="645" width="0.0808%" height="15" fill="rgb(233,96,42)" fg:x="108" fg:w="1"/><text x="8.9808%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="8.7308%" y="629" width="0.0808%" height="15" fill="rgb(229,21,32)" fg:x="108" fg:w="1"/><text x="8.9808%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.7308%" y="613" width="0.0808%" height="15" fill="rgb(226,216,24)" fg:x="108" fg:w="1"/><text x="8.9808%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.7308%" y="597" width="0.0808%" height="15" fill="rgb(221,163,17)" fg:x="108" fg:w="1"/><text x="8.9808%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="8.8116%" y="677" width="0.0808%" height="15" fill="rgb(216,216,42)" fg:x="109" fg:w="1"/><text x="9.0616%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="8.8116%" y="661" width="0.0808%" height="15" fill="rgb(240,118,7)" fg:x="109" fg:w="1"/><text x="9.0616%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8925%" y="661" width="0.0808%" height="15" fill="rgb(221,67,37)" fg:x="110" fg:w="1"/><text x="9.1425%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="8.9733%" y="597" width="0.0808%" height="15" fill="rgb(241,32,44)" fg:x="111" fg:w="1"/><text x="9.2233%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.9733%" y="581" width="0.0808%" height="15" fill="rgb(235,204,43)" fg:x="111" fg:w="1"/><text x="9.2233%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.9733%" y="565" width="0.0808%" height="15" fill="rgb(213,116,10)" fg:x="111" fg:w="1"/><text x="9.2233%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.9733%" y="549" width="0.0808%" height="15" fill="rgb(239,15,48)" fg:x="111" fg:w="1"/><text x="9.2233%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.1350%" y="549" width="0.0808%" height="15" fill="rgb(207,123,36)" fg:x="113" fg:w="1"/><text x="9.3850%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.2158%" y="549" width="0.1617%" height="15" fill="rgb(209,103,30)" fg:x="114" fg:w="2"/><text x="9.4658%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.2967%" y="533" width="0.0808%" height="15" fill="rgb(238,100,19)" fg:x="115" fg:w="1"/><text x="9.5467%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2967%" y="517" width="0.0808%" height="15" fill="rgb(244,30,14)" fg:x="115" fg:w="1"/><text x="9.5467%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.3775%" y="549" width="0.0808%" height="15" fill="rgb(249,174,6)" fg:x="116" fg:w="1"/><text x="9.6275%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.3775%" y="533" width="0.0808%" height="15" fill="rgb(235,213,41)" fg:x="116" fg:w="1"/><text x="9.6275%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.3775%" y="517" width="0.0808%" height="15" fill="rgb(213,118,6)" fg:x="116" fg:w="1"/><text x="9.6275%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.3775%" y="501" width="0.0808%" height="15" fill="rgb(235,44,51)" fg:x="116" fg:w="1"/><text x="9.6275%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.6200%" y="517" width="0.0808%" height="15" fill="rgb(217,9,53)" fg:x="119" fg:w="1"/><text x="9.8700%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.6200%" y="501" width="0.0808%" height="15" fill="rgb(237,172,34)" fg:x="119" fg:w="1"/><text x="9.8700%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.6200%" y="485" width="0.0808%" height="15" fill="rgb(206,206,11)" fg:x="119" fg:w="1"/><text x="9.8700%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.6200%" y="469" width="0.0808%" height="15" fill="rgb(214,149,29)" fg:x="119" fg:w="1"/><text x="9.8700%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="9.4584%" y="549" width="0.3234%" height="15" fill="rgb(208,123,3)" fg:x="117" fg:w="4"/><text x="9.7084%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.6200%" y="533" width="0.1617%" height="15" fill="rgb(229,126,4)" fg:x="119" fg:w="2"/><text x="9.8700%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7009%" y="517" width="0.0808%" height="15" fill="rgb(222,92,36)" fg:x="120" fg:w="1"/><text x="9.9509%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7009%" y="501" width="0.0808%" height="15" fill="rgb(216,39,41)" fg:x="120" fg:w="1"/><text x="9.9509%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.7009%" y="485" width="0.0808%" height="15" fill="rgb(253,127,28)" fg:x="120" fg:w="1"/><text x="9.9509%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="9.0542%" y="565" width="0.8084%" height="15" fill="rgb(249,152,51)" fg:x="112" fg:w="10"/><text x="9.3042%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.7817%" y="549" width="0.0808%" height="15" fill="rgb(209,123,42)" fg:x="121" fg:w="1"/><text x="10.0317%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.7817%" y="533" width="0.0808%" height="15" fill="rgb(241,118,22)" fg:x="121" fg:w="1"/><text x="10.0317%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.13%)</title><rect x="9.0542%" y="581" width="1.1318%" height="15" fill="rgb(208,25,7)" fg:x="112" fg:w="14"/><text x="9.3042%" y="591.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="9.8626%" y="565" width="0.3234%" height="15" fill="rgb(243,144,39)" fg:x="122" fg:w="4"/><text x="10.1126%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.0243%" y="549" width="0.1617%" height="15" fill="rgb(250,50,5)" fg:x="124" fg:w="2"/><text x="10.2743%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.0243%" y="533" width="0.1617%" height="15" fill="rgb(207,67,11)" fg:x="124" fg:w="2"/><text x="10.2743%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.1051%" y="517" width="0.0808%" height="15" fill="rgb(245,204,40)" fg:x="125" fg:w="1"/><text x="10.3551%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.1051%" y="501" width="0.0808%" height="15" fill="rgb(238,228,24)" fg:x="125" fg:w="1"/><text x="10.3551%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.21%)</title><rect x="9.0542%" y="597" width="1.2126%" height="15" fill="rgb(217,116,22)" fg:x="112" fg:w="15"/><text x="9.3042%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.1859%" y="581" width="0.0808%" height="15" fill="rgb(234,98,12)" fg:x="126" fg:w="1"/><text x="10.4359%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.1859%" y="565" width="0.0808%" height="15" fill="rgb(242,170,50)" fg:x="126" fg:w="1"/><text x="10.4359%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.1859%" y="549" width="0.0808%" height="15" fill="rgb(235,7,5)" fg:x="126" fg:w="1"/><text x="10.4359%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.1859%" y="533" width="0.0808%" height="15" fill="rgb(241,114,28)" fg:x="126" fg:w="1"/><text x="10.4359%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.2668%" y="549" width="0.0808%" height="15" fill="rgb(246,112,42)" fg:x="127" fg:w="1"/><text x="10.5168%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.3476%" y="533" width="0.0808%" height="15" fill="rgb(248,228,14)" fg:x="128" fg:w="1"/><text x="10.5976%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.3476%" y="517" width="0.0808%" height="15" fill="rgb(208,133,18)" fg:x="128" fg:w="1"/><text x="10.5976%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.2668%" y="597" width="0.2425%" height="15" fill="rgb(207,35,49)" fg:x="127" fg:w="3"/><text x="10.5168%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="10.2668%" y="581" width="0.2425%" height="15" fill="rgb(205,68,36)" fg:x="127" fg:w="3"/><text x="10.5168%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.2668%" y="565" width="0.2425%" height="15" fill="rgb(245,62,40)" fg:x="127" fg:w="3"/><text x="10.5168%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.3476%" y="549" width="0.1617%" height="15" fill="rgb(228,27,24)" fg:x="128" fg:w="2"/><text x="10.5976%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.4285%" y="533" width="0.0808%" height="15" fill="rgb(253,19,12)" fg:x="129" fg:w="1"/><text x="10.6785%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.4285%" y="517" width="0.0808%" height="15" fill="rgb(232,28,20)" fg:x="129" fg:w="1"/><text x="10.6785%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.4285%" y="501" width="0.0808%" height="15" fill="rgb(218,35,51)" fg:x="129" fg:w="1"/><text x="10.6785%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.4285%" y="485" width="0.0808%" height="15" fill="rgb(212,90,40)" fg:x="129" fg:w="1"/><text x="10.6785%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.5093%" y="533" width="0.0808%" height="15" fill="rgb(220,172,12)" fg:x="130" fg:w="1"/><text x="10.7593%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="10.5901%" y="517" width="0.1617%" height="15" fill="rgb(226,159,20)" fg:x="131" fg:w="2"/><text x="10.8401%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.7518%" y="517" width="0.0808%" height="15" fill="rgb(234,205,16)" fg:x="133" fg:w="1"/><text x="11.0018%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.7518%" y="501" width="0.0808%" height="15" fill="rgb(207,9,39)" fg:x="133" fg:w="1"/><text x="11.0018%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.8327%" y="501" width="0.0808%" height="15" fill="rgb(249,143,15)" fg:x="134" fg:w="1"/><text x="11.0827%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.8327%" y="485" width="0.0808%" height="15" fill="rgb(253,133,29)" fg:x="134" fg:w="1"/><text x="11.0827%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.9135%" y="485" width="0.0808%" height="15" fill="rgb(221,187,0)" fg:x="135" fg:w="1"/><text x="11.1635%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="10.5093%" y="565" width="0.5659%" height="15" fill="rgb(205,204,26)" fg:x="130" fg:w="7"/><text x="10.7593%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="10.5093%" y="549" width="0.5659%" height="15" fill="rgb(224,68,54)" fg:x="130" fg:w="7"/><text x="10.7593%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="10.5901%" y="533" width="0.4850%" height="15" fill="rgb(209,67,4)" fg:x="131" fg:w="6"/><text x="10.8401%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="10.8327%" y="517" width="0.2425%" height="15" fill="rgb(228,229,18)" fg:x="134" fg:w="3"/><text x="11.0827%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.9135%" y="501" width="0.1617%" height="15" fill="rgb(231,89,13)" fg:x="135" fg:w="2"/><text x="11.1635%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.9943%" y="485" width="0.0808%" height="15" fill="rgb(210,182,18)" fg:x="136" fg:w="1"/><text x="11.2443%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.9943%" y="469" width="0.0808%" height="15" fill="rgb(240,105,2)" fg:x="136" fg:w="1"/><text x="11.2443%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.9943%" y="453" width="0.0808%" height="15" fill="rgb(207,170,50)" fg:x="136" fg:w="1"/><text x="11.2443%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.9943%" y="437" width="0.0808%" height="15" fill="rgb(232,133,24)" fg:x="136" fg:w="1"/><text x="11.2443%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.73%)</title><rect x="10.5093%" y="581" width="0.7276%" height="15" fill="rgb(235,166,27)" fg:x="130" fg:w="9"/><text x="10.7593%" y="591.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="11.0752%" y="565" width="0.1617%" height="15" fill="rgb(209,19,13)" fg:x="137" fg:w="2"/><text x="11.3252%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="11.0752%" y="549" width="0.1617%" height="15" fill="rgb(226,79,39)" fg:x="137" fg:w="2"/><text x="11.3252%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="11.0752%" y="533" width="0.1617%" height="15" fill="rgb(222,163,10)" fg:x="137" fg:w="2"/><text x="11.3252%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1560%" y="517" width="0.0808%" height="15" fill="rgb(214,44,19)" fg:x="138" fg:w="1"/><text x="11.4060%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1560%" y="501" width="0.0808%" height="15" fill="rgb(210,217,13)" fg:x="138" fg:w="1"/><text x="11.4060%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1560%" y="485" width="0.0808%" height="15" fill="rgb(237,61,54)" fg:x="138" fg:w="1"/><text x="11.4060%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1560%" y="469" width="0.0808%" height="15" fill="rgb(226,184,24)" fg:x="138" fg:w="1"/><text x="11.4060%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2369%" y="549" width="0.0808%" height="15" fill="rgb(223,226,4)" fg:x="139" fg:w="1"/><text x="11.4869%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2369%" y="533" width="0.0808%" height="15" fill="rgb(210,26,41)" fg:x="139" fg:w="1"/><text x="11.4869%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.2369%" y="517" width="0.0808%" height="15" fill="rgb(220,221,6)" fg:x="139" fg:w="1"/><text x="11.4869%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="11.3177%" y="549" width="0.0808%" height="15" fill="rgb(225,89,49)" fg:x="140" fg:w="1"/><text x="11.5677%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.3177%" y="533" width="0.0808%" height="15" fill="rgb(218,70,45)" fg:x="140" fg:w="1"/><text x="11.5677%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.4794%" y="501" width="0.0808%" height="15" fill="rgb(238,166,21)" fg:x="142" fg:w="1"/><text x="11.7294%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4794%" y="485" width="0.0808%" height="15" fill="rgb(224,141,44)" fg:x="142" fg:w="1"/><text x="11.7294%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6411%" y="469" width="0.0808%" height="15" fill="rgb(230,12,49)" fg:x="144" fg:w="1"/><text x="11.8911%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6411%" y="453" width="0.0808%" height="15" fill="rgb(212,174,12)" fg:x="144" fg:w="1"/><text x="11.8911%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6411%" y="437" width="0.0808%" height="15" fill="rgb(246,67,9)" fg:x="144" fg:w="1"/><text x="11.8911%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.8027%" y="405" width="0.0808%" height="15" fill="rgb(239,35,23)" fg:x="146" fg:w="1"/><text x="12.0527%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.8027%" y="389" width="0.0808%" height="15" fill="rgb(211,167,0)" fg:x="146" fg:w="1"/><text x="12.0527%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8027%" y="373" width="0.0808%" height="15" fill="rgb(225,119,45)" fg:x="146" fg:w="1"/><text x="12.0527%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9644%" y="373" width="0.0808%" height="15" fill="rgb(210,162,6)" fg:x="148" fg:w="1"/><text x="12.2144%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9644%" y="357" width="0.0808%" height="15" fill="rgb(208,118,35)" fg:x="148" fg:w="1"/><text x="12.2144%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.9644%" y="341" width="0.0808%" height="15" fill="rgb(239,4,53)" fg:x="148" fg:w="1"/><text x="12.2144%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.73%)</title><rect x="11.3985%" y="533" width="0.7276%" height="15" fill="rgb(213,130,21)" fg:x="141" fg:w="9"/><text x="11.6485%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.73%)</title><rect x="11.3985%" y="517" width="0.7276%" height="15" fill="rgb(235,148,0)" fg:x="141" fg:w="9"/><text x="11.6485%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="11.5602%" y="501" width="0.5659%" height="15" fill="rgb(244,224,18)" fg:x="143" fg:w="7"/><text x="11.8102%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="11.6411%" y="485" width="0.4850%" height="15" fill="rgb(211,214,4)" fg:x="144" fg:w="6"/><text x="11.8911%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="11.7219%" y="469" width="0.4042%" height="15" fill="rgb(206,119,25)" fg:x="145" fg:w="5"/><text x="11.9719%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="11.8027%" y="453" width="0.3234%" height="15" fill="rgb(243,93,47)" fg:x="146" fg:w="4"/><text x="12.0527%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.8027%" y="437" width="0.3234%" height="15" fill="rgb(224,194,6)" fg:x="146" fg:w="4"/><text x="12.0527%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="11.8027%" y="421" width="0.3234%" height="15" fill="rgb(243,229,6)" fg:x="146" fg:w="4"/><text x="12.0527%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="11.8836%" y="405" width="0.2425%" height="15" fill="rgb(207,23,50)" fg:x="147" fg:w="3"/><text x="12.1336%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.9644%" y="389" width="0.1617%" height="15" fill="rgb(253,192,32)" fg:x="148" fg:w="2"/><text x="12.2144%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="12.0453%" y="373" width="0.0808%" height="15" fill="rgb(213,21,6)" fg:x="149" fg:w="1"/><text x="12.2953%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="12.0453%" y="357" width="0.0808%" height="15" fill="rgb(243,151,13)" fg:x="149" fg:w="1"/><text x="12.2953%" y="367.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.97%)</title><rect x="11.2369%" y="581" width="0.9701%" height="15" fill="rgb(233,165,41)" fg:x="139" fg:w="12"/><text x="11.4869%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.97%)</title><rect x="11.2369%" y="565" width="0.9701%" height="15" fill="rgb(246,176,45)" fg:x="139" fg:w="12"/><text x="11.4869%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.81%)</title><rect x="11.3985%" y="549" width="0.8084%" height="15" fill="rgb(217,170,52)" fg:x="141" fg:w="10"/><text x="11.6485%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1261%" y="533" width="0.0808%" height="15" fill="rgb(214,203,54)" fg:x="150" fg:w="1"/><text x="12.3761%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1261%" y="517" width="0.0808%" height="15" fill="rgb(248,215,49)" fg:x="150" fg:w="1"/><text x="12.3761%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.2878%" y="437" width="0.0808%" height="15" fill="rgb(208,46,10)" fg:x="152" fg:w="1"/><text x="12.5378%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.2878%" y="421" width="0.0808%" height="15" fill="rgb(254,5,31)" fg:x="152" fg:w="1"/><text x="12.5378%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.2878%" y="405" width="0.0808%" height="15" fill="rgb(222,104,33)" fg:x="152" fg:w="1"/><text x="12.5378%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2878%" y="389" width="0.0808%" height="15" fill="rgb(248,49,16)" fg:x="152" fg:w="1"/><text x="12.5378%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.2878%" y="453" width="0.1617%" height="15" fill="rgb(232,198,41)" fg:x="152" fg:w="2"/><text x="12.5378%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.3686%" y="437" width="0.0808%" height="15" fill="rgb(214,125,3)" fg:x="153" fg:w="1"/><text x="12.6186%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.3686%" y="421" width="0.0808%" height="15" fill="rgb(229,220,28)" fg:x="153" fg:w="1"/><text x="12.6186%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.3686%" y="405" width="0.0808%" height="15" fill="rgb(222,64,37)" fg:x="153" fg:w="1"/><text x="12.6186%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.3686%" y="389" width="0.0808%" height="15" fill="rgb(249,184,13)" fg:x="153" fg:w="1"/><text x="12.6186%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.3686%" y="373" width="0.0808%" height="15" fill="rgb(252,176,6)" fg:x="153" fg:w="1"/><text x="12.6186%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.3686%" y="357" width="0.0808%" height="15" fill="rgb(228,153,7)" fg:x="153" fg:w="1"/><text x="12.6186%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="12.2070%" y="485" width="0.3234%" height="15" fill="rgb(242,193,5)" fg:x="151" fg:w="4"/><text x="12.4570%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="12.2878%" y="469" width="0.2425%" height="15" fill="rgb(232,140,9)" fg:x="152" fg:w="3"/><text x="12.5378%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.4495%" y="453" width="0.0808%" height="15" fill="rgb(213,222,16)" fg:x="154" fg:w="1"/><text x="12.6995%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.4495%" y="437" width="0.0808%" height="15" fill="rgb(222,75,50)" fg:x="154" fg:w="1"/><text x="12.6995%" y="447.50"></text></g><g><title>engine::session::state::State::close (45 samples, 3.64%)</title><rect x="8.9733%" y="661" width="3.6378%" height="15" fill="rgb(205,180,2)" fg:x="111" fg:w="45"/><text x="9.2233%" y="671.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (45 samples, 3.64%)</title><rect x="8.9733%" y="645" width="3.6378%" height="15" fill="rgb(216,34,7)" fg:x="111" fg:w="45"/><text x="9.2233%" y="655.50">engi..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (45 samples, 3.64%)</title><rect x="8.9733%" y="629" width="3.6378%" height="15" fill="rgb(253,16,32)" fg:x="111" fg:w="45"/><text x="9.2233%" y="639.50">engi..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (45 samples, 3.64%)</title><rect x="8.9733%" y="613" width="3.6378%" height="15" fill="rgb(208,97,28)" fg:x="111" fg:w="45"/><text x="9.2233%" y="623.50">engi..</text></g><g><title>kernel::model::any_entity_changes (26 samples, 2.10%)</title><rect x="10.5093%" y="597" width="2.1019%" height="15" fill="rgb(225,92,11)" fg:x="130" fg:w="26"/><text x="10.7593%" y="607.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="12.2070%" y="581" width="0.4042%" height="15" fill="rgb(243,38,12)" fg:x="151" fg:w="5"/><text x="12.4570%" y="591.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="12.2070%" y="565" width="0.4042%" height="15" fill="rgb(208,139,16)" fg:x="151" fg:w="5"/><text x="12.4570%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="12.2070%" y="549" width="0.4042%" height="15" fill="rgb(227,24,9)" fg:x="151" fg:w="5"/><text x="12.4570%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="12.2070%" y="533" width="0.4042%" height="15" fill="rgb(206,62,11)" fg:x="151" fg:w="5"/><text x="12.4570%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="12.2070%" y="517" width="0.4042%" height="15" fill="rgb(228,134,27)" fg:x="151" fg:w="5"/><text x="12.4570%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="12.2070%" y="501" width="0.4042%" height="15" fill="rgb(205,55,33)" fg:x="151" fg:w="5"/><text x="12.4570%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.5303%" y="485" width="0.0808%" height="15" fill="rgb(243,75,43)" fg:x="155" fg:w="1"/><text x="12.7803%" y="495.50"></text></g><g><title>engine::session::Session::close (47 samples, 3.80%)</title><rect x="8.8925%" y="677" width="3.7995%" height="15" fill="rgb(223,27,42)" fg:x="110" fg:w="47"/><text x="9.1425%" y="687.50">engi..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="12.6112%" y="661" width="0.0808%" height="15" fill="rgb(232,189,33)" fg:x="156" fg:w="1"/><text x="12.8612%" y="671.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="12.6112%" y="645" width="0.0808%" height="15" fill="rgb(210,9,39)" fg:x="156" fg:w="1"/><text x="12.8612%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="12.6112%" y="629" width="0.0808%" height="15" fill="rgb(242,85,26)" fg:x="156" fg:w="1"/><text x="12.8612%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="12.6112%" y="613" width="0.0808%" height="15" fill="rgb(248,44,4)" fg:x="156" fg:w="1"/><text x="12.8612%" y="623.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="12.6112%" y="597" width="0.0808%" height="15" fill="rgb(250,96,46)" fg:x="156" fg:w="1"/><text x="12.8612%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="12.6920%" y="485" width="0.0808%" height="15" fill="rgb(229,116,26)" fg:x="157" fg:w="1"/><text x="12.9420%" y="495.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="12.6920%" y="469" width="0.0808%" height="15" fill="rgb(246,94,34)" fg:x="157" fg:w="1"/><text x="12.9420%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.6920%" y="453" width="0.0808%" height="15" fill="rgb(251,73,21)" fg:x="157" fg:w="1"/><text x="12.9420%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="12.6920%" y="437" width="0.0808%" height="15" fill="rgb(254,121,25)" fg:x="157" fg:w="1"/><text x="12.9420%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="12.6920%" y="421" width="0.0808%" height="15" fill="rgb(215,161,49)" fg:x="157" fg:w="1"/><text x="12.9420%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6920%" y="405" width="0.0808%" height="15" fill="rgb(221,43,13)" fg:x="157" fg:w="1"/><text x="12.9420%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6920%" y="389" width="0.0808%" height="15" fill="rgb(249,5,37)" fg:x="157" fg:w="1"/><text x="12.9420%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.6920%" y="373" width="0.0808%" height="15" fill="rgb(226,25,44)" fg:x="157" fg:w="1"/><text x="12.9420%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6920%" y="357" width="0.0808%" height="15" fill="rgb(238,189,16)" fg:x="157" fg:w="1"/><text x="12.9420%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.6920%" y="341" width="0.0808%" height="15" fill="rgb(251,186,8)" fg:x="157" fg:w="1"/><text x="12.9420%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.6920%" y="325" width="0.0808%" height="15" fill="rgb(254,34,31)" fg:x="157" fg:w="1"/><text x="12.9420%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.6920%" y="309" width="0.0808%" height="15" fill="rgb(225,215,27)" fg:x="157" fg:w="1"/><text x="12.9420%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.6920%" y="293" width="0.0808%" height="15" fill="rgb(221,192,48)" fg:x="157" fg:w="1"/><text x="12.9420%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7728%" y="357" width="0.0808%" height="15" fill="rgb(219,137,20)" fg:x="158" fg:w="1"/><text x="13.0228%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.7728%" y="341" width="0.0808%" height="15" fill="rgb(219,84,11)" fg:x="158" fg:w="1"/><text x="13.0228%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.8537%" y="309" width="0.0808%" height="15" fill="rgb(224,10,23)" fg:x="159" fg:w="1"/><text x="13.1037%" y="319.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="12.7728%" y="469" width="0.2425%" height="15" fill="rgb(248,22,39)" fg:x="158" fg:w="3"/><text x="13.0228%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="12.7728%" y="453" width="0.2425%" height="15" fill="rgb(212,154,20)" fg:x="158" fg:w="3"/><text x="13.0228%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="12.7728%" y="437" width="0.2425%" height="15" fill="rgb(236,199,50)" fg:x="158" fg:w="3"/><text x="13.0228%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="12.7728%" y="421" width="0.2425%" height="15" fill="rgb(211,9,17)" fg:x="158" fg:w="3"/><text x="13.0228%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="12.7728%" y="405" width="0.2425%" height="15" fill="rgb(243,216,36)" fg:x="158" fg:w="3"/><text x="13.0228%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="12.7728%" y="389" width="0.2425%" height="15" fill="rgb(250,2,10)" fg:x="158" fg:w="3"/><text x="13.0228%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="12.7728%" y="373" width="0.2425%" height="15" fill="rgb(226,50,48)" fg:x="158" fg:w="3"/><text x="13.0228%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.8537%" y="357" width="0.1617%" height="15" fill="rgb(243,81,16)" fg:x="159" fg:w="2"/><text x="13.1037%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="12.8537%" y="341" width="0.1617%" height="15" fill="rgb(250,14,2)" fg:x="159" fg:w="2"/><text x="13.1037%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.8537%" y="325" width="0.1617%" height="15" fill="rgb(233,135,29)" fg:x="159" fg:w="2"/><text x="13.1037%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="12.9345%" y="309" width="0.0808%" height="15" fill="rgb(224,64,43)" fg:x="160" fg:w="1"/><text x="13.1845%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.9345%" y="293" width="0.0808%" height="15" fill="rgb(238,84,13)" fg:x="160" fg:w="1"/><text x="13.1845%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.40%)</title><rect x="12.7728%" y="485" width="0.4042%" height="15" fill="rgb(253,48,26)" fg:x="158" fg:w="5"/><text x="13.0228%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.0154%" y="469" width="0.1617%" height="15" fill="rgb(205,223,31)" fg:x="161" fg:w="2"/><text x="13.2654%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.0154%" y="453" width="0.1617%" height="15" fill="rgb(221,41,32)" fg:x="161" fg:w="2"/><text x="13.2654%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="13.0154%" y="437" width="0.1617%" height="15" fill="rgb(213,158,31)" fg:x="161" fg:w="2"/><text x="13.2654%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.0154%" y="421" width="0.1617%" height="15" fill="rgb(245,126,43)" fg:x="161" fg:w="2"/><text x="13.2654%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="13.0154%" y="405" width="0.1617%" height="15" fill="rgb(227,7,22)" fg:x="161" fg:w="2"/><text x="13.2654%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.0962%" y="389" width="0.0808%" height="15" fill="rgb(252,90,44)" fg:x="162" fg:w="1"/><text x="13.3462%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.0962%" y="373" width="0.0808%" height="15" fill="rgb(253,91,0)" fg:x="162" fg:w="1"/><text x="13.3462%" y="383.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="13.0962%" y="357" width="0.0808%" height="15" fill="rgb(252,175,49)" fg:x="162" fg:w="1"/><text x="13.3462%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.0962%" y="341" width="0.0808%" height="15" fill="rgb(246,150,1)" fg:x="162" fg:w="1"/><text x="13.3462%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.0962%" y="325" width="0.0808%" height="15" fill="rgb(241,192,25)" fg:x="162" fg:w="1"/><text x="13.3462%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.57%)</title><rect x="12.6920%" y="517" width="0.5659%" height="15" fill="rgb(239,187,11)" fg:x="157" fg:w="7"/><text x="12.9420%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="12.6920%" y="501" width="0.5659%" height="15" fill="rgb(218,202,51)" fg:x="157" fg:w="7"/><text x="12.9420%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.1770%" y="485" width="0.0808%" height="15" fill="rgb(225,176,8)" fg:x="163" fg:w="1"/><text x="13.4270%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.1770%" y="469" width="0.0808%" height="15" fill="rgb(219,122,41)" fg:x="163" fg:w="1"/><text x="13.4270%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.1770%" y="453" width="0.0808%" height="15" fill="rgb(248,140,20)" fg:x="163" fg:w="1"/><text x="13.4270%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1770%" y="437" width="0.0808%" height="15" fill="rgb(245,41,37)" fg:x="163" fg:w="1"/><text x="13.4270%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1770%" y="421" width="0.0808%" height="15" fill="rgb(235,82,39)" fg:x="163" fg:w="1"/><text x="13.4270%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1770%" y="405" width="0.0808%" height="15" fill="rgb(230,108,42)" fg:x="163" fg:w="1"/><text x="13.4270%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1770%" y="389" width="0.0808%" height="15" fill="rgb(215,150,50)" fg:x="163" fg:w="1"/><text x="13.4270%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.65%)</title><rect x="12.6920%" y="533" width="0.6467%" height="15" fill="rgb(233,212,5)" fg:x="157" fg:w="8"/><text x="12.9420%" y="543.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;&amp;kernel::model::EntityPtr&gt; for kernel::model::entity::EntityRef&gt;::from (1 samples, 0.08%)</title><rect x="13.2579%" y="517" width="0.0808%" height="15" fill="rgb(245,80,22)" fg:x="164" fg:w="1"/><text x="13.5079%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2579%" y="501" width="0.0808%" height="15" fill="rgb(238,129,16)" fg:x="164" fg:w="1"/><text x="13.5079%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2579%" y="485" width="0.0808%" height="15" fill="rgb(240,19,0)" fg:x="164" fg:w="1"/><text x="13.5079%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.2579%" y="469" width="0.0808%" height="15" fill="rgb(232,42,35)" fg:x="164" fg:w="1"/><text x="13.5079%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.2579%" y="453" width="0.0808%" height="15" fill="rgb(223,130,24)" fg:x="164" fg:w="1"/><text x="13.5079%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.2579%" y="437" width="0.0808%" height="15" fill="rgb(237,16,22)" fg:x="164" fg:w="1"/><text x="13.5079%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2579%" y="421" width="0.0808%" height="15" fill="rgb(248,192,20)" fg:x="164" fg:w="1"/><text x="13.5079%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2579%" y="405" width="0.0808%" height="15" fill="rgb(233,167,2)" fg:x="164" fg:w="1"/><text x="13.5079%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.2579%" y="389" width="0.0808%" height="15" fill="rgb(252,71,44)" fg:x="164" fg:w="1"/><text x="13.5079%" y="399.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="13.3387%" y="533" width="0.2425%" height="15" fill="rgb(238,37,47)" fg:x="165" fg:w="3"/><text x="13.5887%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.4196%" y="517" width="0.1617%" height="15" fill="rgb(214,202,54)" fg:x="166" fg:w="2"/><text x="13.6696%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.4196%" y="501" width="0.1617%" height="15" fill="rgb(254,165,40)" fg:x="166" fg:w="2"/><text x="13.6696%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5004%" y="485" width="0.0808%" height="15" fill="rgb(246,173,38)" fg:x="167" fg:w="1"/><text x="13.7504%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.5004%" y="469" width="0.0808%" height="15" fill="rgb(215,3,27)" fg:x="167" fg:w="1"/><text x="13.7504%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.5004%" y="453" width="0.0808%" height="15" fill="rgb(239,169,51)" fg:x="167" fg:w="1"/><text x="13.7504%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.5004%" y="437" width="0.0808%" height="15" fill="rgb(212,5,25)" fg:x="167" fg:w="1"/><text x="13.7504%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.5004%" y="421" width="0.0808%" height="15" fill="rgb(243,45,17)" fg:x="167" fg:w="1"/><text x="13.7504%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5004%" y="405" width="0.0808%" height="15" fill="rgb(242,97,9)" fg:x="167" fg:w="1"/><text x="13.7504%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.5004%" y="389" width="0.0808%" height="15" fill="rgb(228,71,31)" fg:x="167" fg:w="1"/><text x="13.7504%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.5004%" y="373" width="0.0808%" height="15" fill="rgb(252,184,16)" fg:x="167" fg:w="1"/><text x="13.7504%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.5004%" y="357" width="0.0808%" height="15" fill="rgb(236,169,46)" fg:x="167" fg:w="1"/><text x="13.7504%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.5004%" y="341" width="0.0808%" height="15" fill="rgb(207,17,47)" fg:x="167" fg:w="1"/><text x="13.7504%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.5004%" y="325" width="0.0808%" height="15" fill="rgb(206,201,28)" fg:x="167" fg:w="1"/><text x="13.7504%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5004%" y="309" width="0.0808%" height="15" fill="rgb(224,184,23)" fg:x="167" fg:w="1"/><text x="13.7504%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (12 samples, 0.97%)</title><rect x="12.6920%" y="597" width="0.9701%" height="15" fill="rgb(208,139,48)" fg:x="157" fg:w="12"/><text x="12.9420%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (12 samples, 0.97%)</title><rect x="12.6920%" y="581" width="0.9701%" height="15" fill="rgb(208,130,10)" fg:x="157" fg:w="12"/><text x="12.9420%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (12 samples, 0.97%)</title><rect x="12.6920%" y="565" width="0.9701%" height="15" fill="rgb(211,213,45)" fg:x="157" fg:w="12"/><text x="12.9420%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (12 samples, 0.97%)</title><rect x="12.6920%" y="549" width="0.9701%" height="15" fill="rgb(235,100,30)" fg:x="157" fg:w="12"/><text x="12.9420%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.5812%" y="533" width="0.0808%" height="15" fill="rgb(206,144,31)" fg:x="168" fg:w="1"/><text x="13.8312%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.5812%" y="517" width="0.0808%" height="15" fill="rgb(224,200,26)" fg:x="168" fg:w="1"/><text x="13.8312%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8238%" y="357" width="0.0808%" height="15" fill="rgb(247,104,53)" fg:x="171" fg:w="1"/><text x="14.0738%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8238%" y="341" width="0.0808%" height="15" fill="rgb(220,14,17)" fg:x="171" fg:w="1"/><text x="14.0738%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8238%" y="325" width="0.0808%" height="15" fill="rgb(230,140,40)" fg:x="171" fg:w="1"/><text x="14.0738%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.8238%" y="373" width="0.1617%" height="15" fill="rgb(229,2,41)" fg:x="171" fg:w="2"/><text x="14.0738%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9046%" y="357" width="0.0808%" height="15" fill="rgb(232,89,16)" fg:x="172" fg:w="1"/><text x="14.1546%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="13.9854%" y="309" width="0.1617%" height="15" fill="rgb(247,59,52)" fg:x="173" fg:w="2"/><text x="14.2354%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0663%" y="293" width="0.0808%" height="15" fill="rgb(226,110,21)" fg:x="174" fg:w="1"/><text x="14.3163%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.9854%" y="373" width="0.2425%" height="15" fill="rgb(224,176,43)" fg:x="173" fg:w="3"/><text x="14.2354%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="13.9854%" y="357" width="0.2425%" height="15" fill="rgb(221,73,6)" fg:x="173" fg:w="3"/><text x="14.2354%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.9854%" y="341" width="0.2425%" height="15" fill="rgb(232,78,19)" fg:x="173" fg:w="3"/><text x="14.2354%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.9854%" y="325" width="0.2425%" height="15" fill="rgb(233,112,48)" fg:x="173" fg:w="3"/><text x="14.2354%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1471%" y="309" width="0.0808%" height="15" fill="rgb(243,131,47)" fg:x="175" fg:w="1"/><text x="14.3971%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1471%" y="293" width="0.0808%" height="15" fill="rgb(226,51,1)" fg:x="175" fg:w="1"/><text x="14.3971%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.2280%" y="309" width="0.0808%" height="15" fill="rgb(247,58,7)" fg:x="176" fg:w="1"/><text x="14.4780%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.2280%" y="293" width="0.0808%" height="15" fill="rgb(209,7,32)" fg:x="176" fg:w="1"/><text x="14.4780%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.3897%" y="213" width="0.0808%" height="15" fill="rgb(209,39,41)" fg:x="178" fg:w="1"/><text x="14.6397%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (9 samples, 0.73%)</title><rect x="13.8238%" y="421" width="0.7276%" height="15" fill="rgb(226,182,46)" fg:x="171" fg:w="9"/><text x="14.0738%" y="431.50"></text></g><g><title>kernel::model::props::load_props (9 samples, 0.73%)</title><rect x="13.8238%" y="405" width="0.7276%" height="15" fill="rgb(230,219,10)" fg:x="171" fg:w="9"/><text x="14.0738%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (9 samples, 0.73%)</title><rect x="13.8238%" y="389" width="0.7276%" height="15" fill="rgb(227,175,30)" fg:x="171" fg:w="9"/><text x="14.0738%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="14.2280%" y="373" width="0.3234%" height="15" fill="rgb(217,2,50)" fg:x="176" fg:w="4"/><text x="14.4780%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="14.2280%" y="357" width="0.3234%" height="15" fill="rgb(229,160,0)" fg:x="176" fg:w="4"/><text x="14.4780%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="14.2280%" y="341" width="0.3234%" height="15" fill="rgb(207,78,37)" fg:x="176" fg:w="4"/><text x="14.4780%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="14.2280%" y="325" width="0.3234%" height="15" fill="rgb(225,57,0)" fg:x="176" fg:w="4"/><text x="14.4780%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="14.3088%" y="309" width="0.2425%" height="15" fill="rgb(232,154,2)" fg:x="177" fg:w="3"/><text x="14.5588%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.3088%" y="293" width="0.2425%" height="15" fill="rgb(241,212,25)" fg:x="177" fg:w="3"/><text x="14.5588%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.3897%" y="277" width="0.1617%" height="15" fill="rgb(226,69,20)" fg:x="178" fg:w="2"/><text x="14.6397%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.3897%" y="261" width="0.1617%" height="15" fill="rgb(247,184,54)" fg:x="178" fg:w="2"/><text x="14.6397%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.3897%" y="245" width="0.1617%" height="15" fill="rgb(210,145,0)" fg:x="178" fg:w="2"/><text x="14.6397%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.3897%" y="229" width="0.1617%" height="15" fill="rgb(253,82,12)" fg:x="178" fg:w="2"/><text x="14.6397%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="14.4705%" y="213" width="0.0808%" height="15" fill="rgb(245,42,11)" fg:x="179" fg:w="1"/><text x="14.7205%" y="223.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="14.4705%" y="197" width="0.0808%" height="15" fill="rgb(219,147,32)" fg:x="179" fg:w="1"/><text x="14.7205%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="14.5513%" y="405" width="0.0808%" height="15" fill="rgb(246,12,7)" fg:x="180" fg:w="1"/><text x="14.8013%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5513%" y="389" width="0.0808%" height="15" fill="rgb(243,50,9)" fg:x="180" fg:w="1"/><text x="14.8013%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.7130%" y="309" width="0.0808%" height="15" fill="rgb(219,149,6)" fg:x="182" fg:w="1"/><text x="14.9630%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7130%" y="293" width="0.0808%" height="15" fill="rgb(241,51,42)" fg:x="182" fg:w="1"/><text x="14.9630%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7130%" y="277" width="0.0808%" height="15" fill="rgb(226,128,27)" fg:x="182" fg:w="1"/><text x="14.9630%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.7130%" y="261" width="0.0808%" height="15" fill="rgb(244,144,4)" fg:x="182" fg:w="1"/><text x="14.9630%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.7130%" y="245" width="0.0808%" height="15" fill="rgb(221,4,13)" fg:x="182" fg:w="1"/><text x="14.9630%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.7130%" y="229" width="0.0808%" height="15" fill="rgb(208,170,28)" fg:x="182" fg:w="1"/><text x="14.9630%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7130%" y="213" width="0.0808%" height="15" fill="rgb(226,131,13)" fg:x="182" fg:w="1"/><text x="14.9630%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7130%" y="197" width="0.0808%" height="15" fill="rgb(215,72,41)" fg:x="182" fg:w="1"/><text x="14.9630%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.7130%" y="181" width="0.0808%" height="15" fill="rgb(243,108,20)" fg:x="182" fg:w="1"/><text x="14.9630%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.7130%" y="165" width="0.0808%" height="15" fill="rgb(230,189,17)" fg:x="182" fg:w="1"/><text x="14.9630%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.7130%" y="149" width="0.0808%" height="15" fill="rgb(220,50,17)" fg:x="182" fg:w="1"/><text x="14.9630%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.7130%" y="133" width="0.0808%" height="15" fill="rgb(248,152,48)" fg:x="182" fg:w="1"/><text x="14.9630%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7130%" y="117" width="0.0808%" height="15" fill="rgb(244,91,11)" fg:x="182" fg:w="1"/><text x="14.9630%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7130%" y="373" width="0.1617%" height="15" fill="rgb(220,157,5)" fg:x="182" fg:w="2"/><text x="14.9630%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7130%" y="357" width="0.1617%" height="15" fill="rgb(253,137,8)" fg:x="182" fg:w="2"/><text x="14.9630%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7130%" y="341" width="0.1617%" height="15" fill="rgb(217,137,51)" fg:x="182" fg:w="2"/><text x="14.9630%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="14.7130%" y="325" width="0.1617%" height="15" fill="rgb(218,209,53)" fg:x="182" fg:w="2"/><text x="14.9630%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7939%" y="309" width="0.0808%" height="15" fill="rgb(249,137,25)" fg:x="183" fg:w="1"/><text x="15.0439%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7939%" y="293" width="0.0808%" height="15" fill="rgb(239,155,26)" fg:x="183" fg:w="1"/><text x="15.0439%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.7939%" y="277" width="0.0808%" height="15" fill="rgb(227,85,46)" fg:x="183" fg:w="1"/><text x="15.0439%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.7939%" y="261" width="0.0808%" height="15" fill="rgb(251,107,43)" fg:x="183" fg:w="1"/><text x="15.0439%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.7939%" y="245" width="0.0808%" height="15" fill="rgb(234,170,33)" fg:x="183" fg:w="1"/><text x="15.0439%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7939%" y="229" width="0.0808%" height="15" fill="rgb(206,29,35)" fg:x="183" fg:w="1"/><text x="15.0439%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7939%" y="213" width="0.0808%" height="15" fill="rgb(227,138,25)" fg:x="183" fg:w="1"/><text x="15.0439%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.7939%" y="197" width="0.0808%" height="15" fill="rgb(249,131,35)" fg:x="183" fg:w="1"/><text x="15.0439%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.7939%" y="181" width="0.0808%" height="15" fill="rgb(239,6,40)" fg:x="183" fg:w="1"/><text x="15.0439%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.7939%" y="165" width="0.0808%" height="15" fill="rgb(246,136,47)" fg:x="183" fg:w="1"/><text x="15.0439%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.7939%" y="149" width="0.0808%" height="15" fill="rgb(253,58,26)" fg:x="183" fg:w="1"/><text x="15.0439%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7939%" y="133" width="0.0808%" height="15" fill="rgb(237,141,10)" fg:x="183" fg:w="1"/><text x="15.0439%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (7 samples, 0.57%)</title><rect x="14.5513%" y="421" width="0.5659%" height="15" fill="rgb(234,156,12)" fg:x="180" fg:w="7"/><text x="14.8013%" y="431.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.49%)</title><rect x="14.6322%" y="405" width="0.4850%" height="15" fill="rgb(243,224,36)" fg:x="181" fg:w="6"/><text x="14.8822%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="14.6322%" y="389" width="0.4850%" height="15" fill="rgb(205,229,51)" fg:x="181" fg:w="6"/><text x="14.8822%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="14.8747%" y="373" width="0.2425%" height="15" fill="rgb(223,189,4)" fg:x="184" fg:w="3"/><text x="15.1247%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.8747%" y="357" width="0.2425%" height="15" fill="rgb(249,167,54)" fg:x="184" fg:w="3"/><text x="15.1247%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="14.8747%" y="341" width="0.2425%" height="15" fill="rgb(218,34,28)" fg:x="184" fg:w="3"/><text x="15.1247%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.8747%" y="325" width="0.2425%" height="15" fill="rgb(232,109,42)" fg:x="184" fg:w="3"/><text x="15.1247%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.9555%" y="309" width="0.1617%" height="15" fill="rgb(248,214,46)" fg:x="185" fg:w="2"/><text x="15.2055%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.9555%" y="293" width="0.1617%" height="15" fill="rgb(244,216,40)" fg:x="185" fg:w="2"/><text x="15.2055%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.9555%" y="277" width="0.1617%" height="15" fill="rgb(231,226,31)" fg:x="185" fg:w="2"/><text x="15.2055%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.9555%" y="261" width="0.1617%" height="15" fill="rgb(238,38,43)" fg:x="185" fg:w="2"/><text x="15.2055%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.0364%" y="245" width="0.0808%" height="15" fill="rgb(208,88,43)" fg:x="186" fg:w="1"/><text x="15.2864%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.0364%" y="229" width="0.0808%" height="15" fill="rgb(205,136,37)" fg:x="186" fg:w="1"/><text x="15.2864%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.0364%" y="213" width="0.0808%" height="15" fill="rgb(237,34,14)" fg:x="186" fg:w="1"/><text x="15.2864%" y="223.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="15.0364%" y="197" width="0.0808%" height="15" fill="rgb(236,193,44)" fg:x="186" fg:w="1"/><text x="15.2864%" y="207.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="15.0364%" y="181" width="0.0808%" height="15" fill="rgb(231,48,10)" fg:x="186" fg:w="1"/><text x="15.2864%" y="191.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="15.1172%" y="421" width="0.0808%" height="15" fill="rgb(213,141,34)" fg:x="187" fg:w="1"/><text x="15.3672%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="15.1172%" y="405" width="0.0808%" height="15" fill="rgb(249,130,34)" fg:x="187" fg:w="1"/><text x="15.3672%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="15.1172%" y="389" width="0.0808%" height="15" fill="rgb(219,42,41)" fg:x="187" fg:w="1"/><text x="15.3672%" y="399.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="15.1172%" y="373" width="0.0808%" height="15" fill="rgb(224,100,54)" fg:x="187" fg:w="1"/><text x="15.3672%" y="383.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="15.1981%" y="357" width="0.0808%" height="15" fill="rgb(229,200,27)" fg:x="188" fg:w="1"/><text x="15.4481%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.2789%" y="325" width="0.0808%" height="15" fill="rgb(217,118,10)" fg:x="189" fg:w="1"/><text x="15.5289%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="15.1981%" y="373" width="0.2425%" height="15" fill="rgb(206,22,3)" fg:x="188" fg:w="3"/><text x="15.4481%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="15.2789%" y="357" width="0.1617%" height="15" fill="rgb(232,163,46)" fg:x="189" fg:w="2"/><text x="15.5289%" y="367.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="15.2789%" y="341" width="0.1617%" height="15" fill="rgb(206,95,13)" fg:x="189" fg:w="2"/><text x="15.5289%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.3597%" y="325" width="0.0808%" height="15" fill="rgb(253,154,18)" fg:x="190" fg:w="1"/><text x="15.6097%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.3597%" y="309" width="0.0808%" height="15" fill="rgb(219,32,23)" fg:x="190" fg:w="1"/><text x="15.6097%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.3597%" y="293" width="0.0808%" height="15" fill="rgb(230,191,45)" fg:x="190" fg:w="1"/><text x="15.6097%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="15.3597%" y="277" width="0.0808%" height="15" fill="rgb(229,64,36)" fg:x="190" fg:w="1"/><text x="15.6097%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="15.3597%" y="261" width="0.0808%" height="15" fill="rgb(205,129,25)" fg:x="190" fg:w="1"/><text x="15.6097%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.3597%" y="245" width="0.0808%" height="15" fill="rgb(254,112,7)" fg:x="190" fg:w="1"/><text x="15.6097%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="15.3597%" y="229" width="0.0808%" height="15" fill="rgb(226,53,48)" fg:x="190" fg:w="1"/><text x="15.6097%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.3597%" y="213" width="0.0808%" height="15" fill="rgb(214,153,38)" fg:x="190" fg:w="1"/><text x="15.6097%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="15.3597%" y="197" width="0.0808%" height="15" fill="rgb(243,101,7)" fg:x="190" fg:w="1"/><text x="15.6097%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.3597%" y="181" width="0.0808%" height="15" fill="rgb(240,140,22)" fg:x="190" fg:w="1"/><text x="15.6097%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="15.3597%" y="165" width="0.0808%" height="15" fill="rgb(235,114,2)" fg:x="190" fg:w="1"/><text x="15.6097%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.3597%" y="149" width="0.0808%" height="15" fill="rgb(242,59,12)" fg:x="190" fg:w="1"/><text x="15.6097%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="15.3597%" y="133" width="0.0808%" height="15" fill="rgb(252,134,9)" fg:x="190" fg:w="1"/><text x="15.6097%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="15.3597%" y="117" width="0.0808%" height="15" fill="rgb(236,4,44)" fg:x="190" fg:w="1"/><text x="15.6097%" y="127.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="15.3597%" y="101" width="0.0808%" height="15" fill="rgb(254,172,41)" fg:x="190" fg:w="1"/><text x="15.6097%" y="111.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="15.4406%" y="357" width="0.0808%" height="15" fill="rgb(244,63,20)" fg:x="191" fg:w="1"/><text x="15.6906%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="15.6023%" y="261" width="0.1617%" height="15" fill="rgb(250,73,31)" fg:x="193" fg:w="2"/><text x="15.8523%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.6831%" y="245" width="0.0808%" height="15" fill="rgb(241,38,36)" fg:x="194" fg:w="1"/><text x="15.9331%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.6831%" y="229" width="0.0808%" height="15" fill="rgb(245,211,2)" fg:x="194" fg:w="1"/><text x="15.9331%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="15.5214%" y="277" width="0.3234%" height="15" fill="rgb(206,120,28)" fg:x="192" fg:w="4"/><text x="15.7714%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="15.7639%" y="261" width="0.0808%" height="15" fill="rgb(211,59,34)" fg:x="195" fg:w="1"/><text x="16.0139%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="15.7639%" y="245" width="0.0808%" height="15" fill="rgb(233,168,5)" fg:x="195" fg:w="1"/><text x="16.0139%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::search_finish (1 samples, 0.08%)</title><rect x="15.8448%" y="261" width="0.0808%" height="15" fill="rgb(234,33,13)" fg:x="196" fg:w="1"/><text x="16.0948%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="15.9256%" y="261" width="0.0808%" height="15" fill="rgb(231,150,26)" fg:x="197" fg:w="1"/><text x="16.1756%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="15.9256%" y="245" width="0.0808%" height="15" fill="rgb(217,191,4)" fg:x="197" fg:w="1"/><text x="16.1756%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="15.9256%" y="229" width="0.0808%" height="15" fill="rgb(246,198,38)" fg:x="197" fg:w="1"/><text x="16.1756%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="15.5214%" y="341" width="0.5659%" height="15" fill="rgb(245,64,37)" fg:x="192" fg:w="7"/><text x="15.7714%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="15.5214%" y="325" width="0.5659%" height="15" fill="rgb(250,30,36)" fg:x="192" fg:w="7"/><text x="15.7714%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.57%)</title><rect x="15.5214%" y="309" width="0.5659%" height="15" fill="rgb(217,86,53)" fg:x="192" fg:w="7"/><text x="15.7714%" y="319.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.57%)</title><rect x="15.5214%" y="293" width="0.5659%" height="15" fill="rgb(228,157,16)" fg:x="192" fg:w="7"/><text x="15.7714%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (3 samples, 0.24%)</title><rect x="15.8448%" y="277" width="0.2425%" height="15" fill="rgb(217,59,31)" fg:x="196" fg:w="3"/><text x="16.0948%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="16.0065%" y="261" width="0.0808%" height="15" fill="rgb(237,138,41)" fg:x="198" fg:w="1"/><text x="16.2565%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="16.0065%" y="245" width="0.0808%" height="15" fill="rgb(227,91,49)" fg:x="198" fg:w="1"/><text x="16.2565%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.0873%" y="325" width="0.0808%" height="15" fill="rgb(247,21,44)" fg:x="199" fg:w="1"/><text x="16.3373%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="16.0873%" y="341" width="0.1617%" height="15" fill="rgb(219,210,51)" fg:x="199" fg:w="2"/><text x="16.3373%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="16.1681%" y="325" width="0.0808%" height="15" fill="rgb(209,140,6)" fg:x="200" fg:w="1"/><text x="16.4181%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="16.1681%" y="309" width="0.0808%" height="15" fill="rgb(221,188,24)" fg:x="200" fg:w="1"/><text x="16.4181%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="16.1681%" y="293" width="0.0808%" height="15" fill="rgb(232,154,20)" fg:x="200" fg:w="1"/><text x="16.4181%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="16.1681%" y="277" width="0.0808%" height="15" fill="rgb(244,137,50)" fg:x="200" fg:w="1"/><text x="16.4181%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.1681%" y="261" width="0.0808%" height="15" fill="rgb(225,185,43)" fg:x="200" fg:w="1"/><text x="16.4181%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="16.3298%" y="261" width="0.0808%" height="15" fill="rgb(213,205,38)" fg:x="202" fg:w="1"/><text x="16.5798%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.3298%" y="245" width="0.0808%" height="15" fill="rgb(236,73,12)" fg:x="202" fg:w="1"/><text x="16.5798%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.3298%" y="229" width="0.0808%" height="15" fill="rgb(235,219,13)" fg:x="202" fg:w="1"/><text x="16.5798%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.3298%" y="213" width="0.0808%" height="15" fill="rgb(218,59,36)" fg:x="202" fg:w="1"/><text x="16.5798%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4107%" y="261" width="0.0808%" height="15" fill="rgb(205,110,39)" fg:x="203" fg:w="1"/><text x="16.6607%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="16.3298%" y="293" width="0.2425%" height="15" fill="rgb(218,206,42)" fg:x="202" fg:w="3"/><text x="16.5798%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="16.3298%" y="277" width="0.2425%" height="15" fill="rgb(248,125,24)" fg:x="202" fg:w="3"/><text x="16.5798%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="16.4915%" y="261" width="0.0808%" height="15" fill="rgb(242,28,27)" fg:x="204" fg:w="1"/><text x="16.7415%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.8149%" y="277" width="0.1617%" height="15" fill="rgb(216,228,15)" fg:x="208" fg:w="2"/><text x="17.0649%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.0574%" y="261" width="0.0808%" height="15" fill="rgb(235,116,46)" fg:x="211" fg:w="1"/><text x="17.3074%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (27 samples, 2.18%)</title><rect x="16.9766%" y="277" width="2.1827%" height="15" fill="rgb(224,18,32)" fg:x="210" fg:w="27"/><text x="17.2266%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (25 samples, 2.02%)</title><rect x="17.1382%" y="261" width="2.0210%" height="15" fill="rgb(252,5,12)" fg:x="212" fg:w="25"/><text x="17.3882%" y="271.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="18.9976%" y="245" width="0.1617%" height="15" fill="rgb(251,36,5)" fg:x="235" fg:w="2"/><text x="19.2476%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="19.2401%" y="261" width="0.4042%" height="15" fill="rgb(217,53,14)" fg:x="238" fg:w="5"/><text x="19.4901%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="19.5635%" y="245" width="0.0808%" height="15" fill="rgb(215,86,45)" fg:x="242" fg:w="1"/><text x="19.8135%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.5635%" y="229" width="0.0808%" height="15" fill="rgb(242,169,11)" fg:x="242" fg:w="1"/><text x="19.8135%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.57%)</title><rect x="19.1593%" y="277" width="0.5659%" height="15" fill="rgb(211,213,45)" fg:x="237" fg:w="7"/><text x="19.4093%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="19.6443%" y="261" width="0.0808%" height="15" fill="rgb(205,88,11)" fg:x="243" fg:w="1"/><text x="19.8943%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="19.6443%" y="245" width="0.0808%" height="15" fill="rgb(252,69,26)" fg:x="243" fg:w="1"/><text x="19.8943%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.2102%" y="213" width="0.0808%" height="15" fill="rgb(246,123,37)" fg:x="250" fg:w="1"/><text x="20.4602%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.2910%" y="213" width="0.0808%" height="15" fill="rgb(212,205,5)" fg:x="251" fg:w="1"/><text x="20.5410%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.3719%" y="181" width="0.0808%" height="15" fill="rgb(253,148,0)" fg:x="252" fg:w="1"/><text x="20.6219%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.3719%" y="165" width="0.0808%" height="15" fill="rgb(239,22,4)" fg:x="252" fg:w="1"/><text x="20.6219%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.3719%" y="149" width="0.0808%" height="15" fill="rgb(226,26,53)" fg:x="252" fg:w="1"/><text x="20.6219%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="20.3719%" y="213" width="0.1617%" height="15" fill="rgb(225,229,45)" fg:x="252" fg:w="2"/><text x="20.6219%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="20.3719%" y="197" width="0.1617%" height="15" fill="rgb(220,60,37)" fg:x="252" fg:w="2"/><text x="20.6219%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="20.4527%" y="181" width="0.0808%" height="15" fill="rgb(217,180,35)" fg:x="253" fg:w="1"/><text x="20.7027%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="20.5335%" y="213" width="0.0808%" height="15" fill="rgb(229,7,53)" fg:x="254" fg:w="1"/><text x="20.7835%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="20.5335%" y="197" width="0.0808%" height="15" fill="rgb(254,137,3)" fg:x="254" fg:w="1"/><text x="20.7835%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="20.6144%" y="197" width="0.1617%" height="15" fill="rgb(215,140,41)" fg:x="255" fg:w="2"/><text x="20.8644%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="20.6144%" y="181" width="0.1617%" height="15" fill="rgb(250,80,15)" fg:x="255" fg:w="2"/><text x="20.8644%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="20.6144%" y="165" width="0.1617%" height="15" fill="rgb(252,191,6)" fg:x="255" fg:w="2"/><text x="20.8644%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="20.6144%" y="149" width="0.1617%" height="15" fill="rgb(246,217,18)" fg:x="255" fg:w="2"/><text x="20.8644%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (96 samples, 7.76%)</title><rect x="20.6144%" y="213" width="7.7607%" height="15" fill="rgb(223,93,7)" fg:x="255" fg:w="96"/><text x="20.8644%" y="223.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (94 samples, 7.60%)</title><rect x="20.7761%" y="197" width="7.5990%" height="15" fill="rgb(225,55,52)" fg:x="257" fg:w="94"/><text x="21.0261%" y="207.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (94 samples, 7.60%)</title><rect x="20.7761%" y="181" width="7.5990%" height="15" fill="rgb(240,31,24)" fg:x="257" fg:w="94"/><text x="21.0261%" y="191.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.57%)</title><rect x="28.3751%" y="213" width="0.5659%" height="15" fill="rgb(205,56,52)" fg:x="351" fg:w="7"/><text x="28.6251%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 9.46%)</title><rect x="19.8060%" y="261" width="9.4584%" height="15" fill="rgb(246,146,12)" fg:x="245" fg:w="117"/><text x="20.0560%" y="271.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (116 samples, 9.38%)</title><rect x="19.8868%" y="245" width="9.3775%" height="15" fill="rgb(239,84,36)" fg:x="246" fg:w="116"/><text x="20.1368%" y="255.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (116 samples, 9.38%)</title><rect x="19.8868%" y="229" width="9.3775%" height="15" fill="rgb(207,41,40)" fg:x="246" fg:w="116"/><text x="20.1368%" y="239.50">regex_automat..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="28.9410%" y="213" width="0.3234%" height="15" fill="rgb(241,179,25)" fg:x="358" fg:w="4"/><text x="29.1910%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="29.0218%" y="197" width="0.2425%" height="15" fill="rgb(210,0,34)" fg:x="359" fg:w="3"/><text x="29.2718%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="29.0218%" y="181" width="0.2425%" height="15" fill="rgb(225,217,29)" fg:x="359" fg:w="3"/><text x="29.2718%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="29.0218%" y="165" width="0.2425%" height="15" fill="rgb(216,191,38)" fg:x="359" fg:w="3"/><text x="29.2718%" y="175.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="29.5069%" y="245" width="0.1617%" height="15" fill="rgb(232,140,52)" fg:x="365" fg:w="2"/><text x="29.7569%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.6686%" y="245" width="0.0808%" height="15" fill="rgb(223,158,51)" fg:x="367" fg:w="1"/><text x="29.9186%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="29.7494%" y="245" width="0.0808%" height="15" fill="rgb(235,29,51)" fg:x="368" fg:w="1"/><text x="29.9994%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.7494%" y="229" width="0.0808%" height="15" fill="rgb(215,181,18)" fg:x="368" fg:w="1"/><text x="29.9994%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.7494%" y="213" width="0.0808%" height="15" fill="rgb(227,125,34)" fg:x="368" fg:w="1"/><text x="29.9994%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.7494%" y="197" width="0.0808%" height="15" fill="rgb(230,197,49)" fg:x="368" fg:w="1"/><text x="29.9994%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.29%)</title><rect x="29.2643%" y="261" width="1.2935%" height="15" fill="rgb(239,141,16)" fg:x="362" fg:w="16"/><text x="29.5143%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.73%)</title><rect x="29.8302%" y="245" width="0.7276%" height="15" fill="rgb(225,105,43)" fg:x="369" fg:w="9"/><text x="30.0802%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.4770%" y="229" width="0.0808%" height="15" fill="rgb(214,131,14)" fg:x="377" fg:w="1"/><text x="30.7270%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.4770%" y="213" width="0.0808%" height="15" fill="rgb(229,177,11)" fg:x="377" fg:w="1"/><text x="30.7270%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.4770%" y="197" width="0.0808%" height="15" fill="rgb(231,180,14)" fg:x="377" fg:w="1"/><text x="30.7270%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (135 samples, 10.91%)</title><rect x="19.7251%" y="277" width="10.9135%" height="15" fill="rgb(232,88,2)" fg:x="244" fg:w="135"/><text x="19.9751%" y="287.50">regex_automata::..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="30.5578%" y="261" width="0.0808%" height="15" fill="rgb(205,220,8)" fg:x="378" fg:w="1"/><text x="30.8078%" y="271.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="30.5578%" y="245" width="0.0808%" height="15" fill="rgb(225,23,53)" fg:x="378" fg:w="1"/><text x="30.8078%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.5578%" y="229" width="0.0808%" height="15" fill="rgb(213,62,29)" fg:x="378" fg:w="1"/><text x="30.8078%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.5578%" y="213" width="0.0808%" height="15" fill="rgb(227,75,7)" fg:x="378" fg:w="1"/><text x="30.8078%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5578%" y="197" width="0.0808%" height="15" fill="rgb(207,105,14)" fg:x="378" fg:w="1"/><text x="30.8078%" y="207.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="30.6386%" y="277" width="0.0808%" height="15" fill="rgb(245,62,29)" fg:x="379" fg:w="1"/><text x="30.8886%" y="287.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="30.6386%" y="261" width="0.0808%" height="15" fill="rgb(236,202,4)" fg:x="379" fg:w="1"/><text x="30.8886%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (176 samples, 14.23%)</title><rect x="16.5724%" y="293" width="14.2280%" height="15" fill="rgb(250,67,1)" fg:x="205" fg:w="176"/><text x="16.8224%" y="303.50">regex_automata::meta::..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="30.7195%" y="277" width="0.0808%" height="15" fill="rgb(253,115,44)" fg:x="380" fg:w="1"/><text x="30.9695%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="30.8003%" y="245" width="0.0808%" height="15" fill="rgb(251,139,18)" fg:x="381" fg:w="1"/><text x="31.0503%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="30.8812%" y="229" width="0.0808%" height="15" fill="rgb(218,22,32)" fg:x="382" fg:w="1"/><text x="31.1312%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="30.9620%" y="229" width="0.0808%" height="15" fill="rgb(243,53,5)" fg:x="383" fg:w="1"/><text x="31.2120%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="30.9620%" y="213" width="0.0808%" height="15" fill="rgb(227,56,16)" fg:x="383" fg:w="1"/><text x="31.2120%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="30.8812%" y="245" width="0.2425%" height="15" fill="rgb(245,53,0)" fg:x="382" fg:w="3"/><text x="31.1312%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="31.0428%" y="229" width="0.0808%" height="15" fill="rgb(216,170,35)" fg:x="384" fg:w="1"/><text x="31.2928%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.57%)</title><rect x="30.8003%" y="261" width="0.5659%" height="15" fill="rgb(211,200,8)" fg:x="381" fg:w="7"/><text x="31.0503%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="31.1237%" y="245" width="0.2425%" height="15" fill="rgb(228,204,44)" fg:x="385" fg:w="3"/><text x="31.3737%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="31.1237%" y="229" width="0.2425%" height="15" fill="rgb(214,121,17)" fg:x="385" fg:w="3"/><text x="31.3737%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="31.1237%" y="213" width="0.2425%" height="15" fill="rgb(233,64,38)" fg:x="385" fg:w="3"/><text x="31.3737%" y="223.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="31.1237%" y="197" width="0.2425%" height="15" fill="rgb(253,54,19)" fg:x="385" fg:w="3"/><text x="31.3737%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.65%)</title><rect x="30.8003%" y="293" width="0.6467%" height="15" fill="rgb(253,94,18)" fg:x="381" fg:w="8"/><text x="31.0503%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.65%)</title><rect x="30.8003%" y="277" width="0.6467%" height="15" fill="rgb(227,57,52)" fg:x="381" fg:w="8"/><text x="31.0503%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="31.3662%" y="261" width="0.0808%" height="15" fill="rgb(230,228,50)" fg:x="388" fg:w="1"/><text x="31.6162%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="31.3662%" y="245" width="0.0808%" height="15" fill="rgb(217,205,27)" fg:x="388" fg:w="1"/><text x="31.6162%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="31.4470%" y="261" width="0.0808%" height="15" fill="rgb(252,71,50)" fg:x="389" fg:w="1"/><text x="31.6970%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="31.5279%" y="245" width="0.1617%" height="15" fill="rgb(209,86,4)" fg:x="390" fg:w="2"/><text x="31.7779%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.6087%" y="229" width="0.0808%" height="15" fill="rgb(229,94,0)" fg:x="391" fg:w="1"/><text x="31.8587%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.6087%" y="213" width="0.0808%" height="15" fill="rgb(252,223,21)" fg:x="391" fg:w="1"/><text x="31.8587%" y="223.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="31.6087%" y="197" width="0.0808%" height="15" fill="rgb(230,210,4)" fg:x="391" fg:w="1"/><text x="31.8587%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="31.6087%" y="181" width="0.0808%" height="15" fill="rgb(240,149,38)" fg:x="391" fg:w="1"/><text x="31.8587%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="31.5279%" y="261" width="0.2425%" height="15" fill="rgb(254,105,20)" fg:x="390" fg:w="3"/><text x="31.7779%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="31.6896%" y="245" width="0.0808%" height="15" fill="rgb(253,87,46)" fg:x="392" fg:w="1"/><text x="31.9396%" y="255.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="31.6896%" y="229" width="0.0808%" height="15" fill="rgb(253,116,33)" fg:x="392" fg:w="1"/><text x="31.9396%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="31.7704%" y="261" width="0.0808%" height="15" fill="rgb(229,198,5)" fg:x="393" fg:w="1"/><text x="32.0204%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.08%)</title><rect x="31.7704%" y="245" width="0.0808%" height="15" fill="rgb(242,38,37)" fg:x="393" fg:w="1"/><text x="32.0204%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (194 samples, 15.68%)</title><rect x="16.2490%" y="341" width="15.6831%" height="15" fill="rgb(242,69,53)" fg:x="201" fg:w="194"/><text x="16.4990%" y="351.50">regex::regex::string::Re..</text></g><g><title>regex::builders::Builder::build_one_string (194 samples, 15.68%)</title><rect x="16.2490%" y="325" width="15.6831%" height="15" fill="rgb(249,80,16)" fg:x="201" fg:w="194"/><text x="16.4990%" y="335.50">regex::builders::Builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (193 samples, 15.60%)</title><rect x="16.3298%" y="309" width="15.6023%" height="15" fill="rgb(206,128,11)" fg:x="202" fg:w="193"/><text x="16.5798%" y="319.50">regex_automata::meta::re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.49%)</title><rect x="31.4470%" y="293" width="0.4850%" height="15" fill="rgb(212,35,20)" fg:x="389" fg:w="6"/><text x="31.6970%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.49%)</title><rect x="31.4470%" y="277" width="0.4850%" height="15" fill="rgb(236,79,13)" fg:x="389" fg:w="6"/><text x="31.6970%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.8513%" y="261" width="0.0808%" height="15" fill="rgb(233,123,3)" fg:x="394" fg:w="1"/><text x="32.1013%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.8513%" y="245" width="0.0808%" height="15" fill="rgb(214,93,52)" fg:x="394" fg:w="1"/><text x="32.1013%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8513%" y="229" width="0.0808%" height="15" fill="rgb(251,37,40)" fg:x="394" fg:w="1"/><text x="32.1013%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.5788%" y="261" width="0.1617%" height="15" fill="rgb(227,80,54)" fg:x="403" fg:w="2"/><text x="32.8288%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.5788%" y="245" width="0.1617%" height="15" fill="rgb(254,48,11)" fg:x="403" fg:w="2"/><text x="32.8288%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.5788%" y="229" width="0.1617%" height="15" fill="rgb(235,193,26)" fg:x="403" fg:w="2"/><text x="32.8288%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.7405%" y="261" width="0.0808%" height="15" fill="rgb(229,99,21)" fg:x="405" fg:w="1"/><text x="32.9905%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.7405%" y="245" width="0.0808%" height="15" fill="rgb(211,140,41)" fg:x="405" fg:w="1"/><text x="32.9905%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="32.7405%" y="229" width="0.0808%" height="15" fill="rgb(240,227,30)" fg:x="405" fg:w="1"/><text x="32.9905%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.7405%" y="213" width="0.0808%" height="15" fill="rgb(215,224,45)" fg:x="405" fg:w="1"/><text x="32.9905%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.97%)</title><rect x="32.0129%" y="277" width="0.9701%" height="15" fill="rgb(206,123,31)" fg:x="396" fg:w="12"/><text x="32.2629%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="32.8213%" y="261" width="0.1617%" height="15" fill="rgb(210,138,16)" fg:x="406" fg:w="2"/><text x="33.0713%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.05%)</title><rect x="32.0129%" y="293" width="1.0509%" height="15" fill="rgb(228,57,28)" fg:x="396" fg:w="13"/><text x="32.2629%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="32.9830%" y="277" width="0.0808%" height="15" fill="rgb(242,170,10)" fg:x="408" fg:w="1"/><text x="33.2330%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.9830%" y="261" width="0.0808%" height="15" fill="rgb(228,214,39)" fg:x="408" fg:w="1"/><text x="33.2330%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.9830%" y="245" width="0.0808%" height="15" fill="rgb(218,179,33)" fg:x="408" fg:w="1"/><text x="33.2330%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.9830%" y="229" width="0.0808%" height="15" fill="rgb(235,193,39)" fg:x="408" fg:w="1"/><text x="33.2330%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (218 samples, 17.62%)</title><rect x="15.5214%" y="357" width="17.6233%" height="15" fill="rgb(219,221,36)" fg:x="192" fg:w="218"/><text x="15.7714%" y="367.50">indefinite::helper::Helper:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.21%)</title><rect x="31.9321%" y="341" width="1.2126%" height="15" fill="rgb(248,218,19)" fg:x="395" fg:w="15"/><text x="32.1821%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.21%)</title><rect x="31.9321%" y="325" width="1.2126%" height="15" fill="rgb(205,50,9)" fg:x="395" fg:w="15"/><text x="32.1821%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.21%)</title><rect x="31.9321%" y="309" width="1.2126%" height="15" fill="rgb(238,81,28)" fg:x="395" fg:w="15"/><text x="32.1821%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="33.0639%" y="293" width="0.0808%" height="15" fill="rgb(235,110,19)" fg:x="409" fg:w="1"/><text x="33.3139%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="33.0639%" y="277" width="0.0808%" height="15" fill="rgb(214,7,14)" fg:x="409" fg:w="1"/><text x="33.3139%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.0639%" y="261" width="0.0808%" height="15" fill="rgb(211,77,3)" fg:x="409" fg:w="1"/><text x="33.3139%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.0639%" y="245" width="0.0808%" height="15" fill="rgb(229,5,9)" fg:x="409" fg:w="1"/><text x="33.3139%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.0639%" y="229" width="0.0808%" height="15" fill="rgb(225,90,11)" fg:x="409" fg:w="1"/><text x="33.3139%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="33.1447%" y="277" width="0.2425%" height="15" fill="rgb(242,56,8)" fg:x="410" fg:w="3"/><text x="33.3947%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.3872%" y="277" width="0.0808%" height="15" fill="rgb(249,212,39)" fg:x="413" fg:w="1"/><text x="33.6372%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="33.1447%" y="293" width="0.4042%" height="15" fill="rgb(236,90,9)" fg:x="410" fg:w="5"/><text x="33.3947%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.4681%" y="277" width="0.0808%" height="15" fill="rgb(206,88,35)" fg:x="414" fg:w="1"/><text x="33.7181%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.57%)</title><rect x="33.1447%" y="309" width="0.5659%" height="15" fill="rgb(205,126,30)" fg:x="410" fg:w="7"/><text x="33.3947%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="33.5489%" y="293" width="0.1617%" height="15" fill="rgb(230,176,12)" fg:x="415" fg:w="2"/><text x="33.7989%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.7106%" y="293" width="0.0808%" height="15" fill="rgb(243,19,9)" fg:x="417" fg:w="1"/><text x="33.9606%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7106%" y="277" width="0.0808%" height="15" fill="rgb(245,171,17)" fg:x="417" fg:w="1"/><text x="33.9606%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (12 samples, 0.97%)</title><rect x="33.1447%" y="341" width="0.9701%" height="15" fill="rgb(227,52,21)" fg:x="410" fg:w="12"/><text x="33.3947%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (12 samples, 0.97%)</title><rect x="33.1447%" y="325" width="0.9701%" height="15" fill="rgb(238,69,14)" fg:x="410" fg:w="12"/><text x="33.3947%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="33.7106%" y="309" width="0.4042%" height="15" fill="rgb(241,156,39)" fg:x="417" fg:w="5"/><text x="33.9606%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (4 samples, 0.32%)</title><rect x="33.7914%" y="293" width="0.3234%" height="15" fill="rgb(212,227,28)" fg:x="418" fg:w="4"/><text x="34.0414%" y="303.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="33.8723%" y="277" width="0.2425%" height="15" fill="rgb(209,118,27)" fg:x="419" fg:w="3"/><text x="34.1223%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="34.1148%" y="325" width="0.0808%" height="15" fill="rgb(226,102,5)" fg:x="422" fg:w="1"/><text x="34.3648%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="34.1148%" y="309" width="0.0808%" height="15" fill="rgb(223,34,3)" fg:x="422" fg:w="1"/><text x="34.3648%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="34.1148%" y="293" width="0.0808%" height="15" fill="rgb(221,81,38)" fg:x="422" fg:w="1"/><text x="34.3648%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="34.6807%" y="245" width="0.1617%" height="15" fill="rgb(236,219,28)" fg:x="429" fg:w="2"/><text x="34.9307%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.6807%" y="229" width="0.1617%" height="15" fill="rgb(213,200,14)" fg:x="429" fg:w="2"/><text x="34.9307%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="34.6807%" y="213" width="0.1617%" height="15" fill="rgb(240,33,19)" fg:x="429" fg:w="2"/><text x="34.9307%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.8424%" y="245" width="0.1617%" height="15" fill="rgb(233,113,27)" fg:x="431" fg:w="2"/><text x="35.0924%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.21%)</title><rect x="34.2765%" y="261" width="1.2126%" height="15" fill="rgb(220,221,18)" fg:x="424" fg:w="15"/><text x="34.5265%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.49%)</title><rect x="35.0040%" y="245" width="0.4850%" height="15" fill="rgb(238,92,8)" fg:x="433" fg:w="6"/><text x="35.2540%" y="255.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (18 samples, 1.46%)</title><rect x="34.1148%" y="341" width="1.4551%" height="15" fill="rgb(222,164,16)" fg:x="422" fg:w="18"/><text x="34.3648%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.37%)</title><rect x="34.1956%" y="325" width="1.3743%" height="15" fill="rgb(241,119,3)" fg:x="423" fg:w="17"/><text x="34.4456%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.37%)</title><rect x="34.1956%" y="309" width="1.3743%" height="15" fill="rgb(241,44,8)" fg:x="423" fg:w="17"/><text x="34.4456%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.37%)</title><rect x="34.1956%" y="293" width="1.3743%" height="15" fill="rgb(230,36,40)" fg:x="423" fg:w="17"/><text x="34.4456%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.37%)</title><rect x="34.1956%" y="277" width="1.3743%" height="15" fill="rgb(243,16,36)" fg:x="423" fg:w="17"/><text x="34.4456%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="35.4891%" y="261" width="0.0808%" height="15" fill="rgb(231,4,26)" fg:x="439" fg:w="1"/><text x="35.7391%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.4891%" y="245" width="0.0808%" height="15" fill="rgb(240,9,31)" fg:x="439" fg:w="1"/><text x="35.7391%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.4891%" y="229" width="0.0808%" height="15" fill="rgb(207,173,15)" fg:x="439" fg:w="1"/><text x="35.7391%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.4891%" y="213" width="0.0808%" height="15" fill="rgb(224,192,53)" fg:x="439" fg:w="1"/><text x="35.7391%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="35.6508%" y="325" width="0.0808%" height="15" fill="rgb(223,67,28)" fg:x="441" fg:w="1"/><text x="35.9008%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="35.6508%" y="309" width="0.0808%" height="15" fill="rgb(211,20,47)" fg:x="441" fg:w="1"/><text x="35.9008%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="35.8933%" y="293" width="0.3234%" height="15" fill="rgb(240,228,2)" fg:x="444" fg:w="4"/><text x="36.1433%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="35.8933%" y="277" width="0.3234%" height="15" fill="rgb(248,151,12)" fg:x="444" fg:w="4"/><text x="36.1433%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.2167%" y="293" width="0.0808%" height="15" fill="rgb(244,8,39)" fg:x="448" fg:w="1"/><text x="36.4667%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.2167%" y="277" width="0.0808%" height="15" fill="rgb(222,26,8)" fg:x="448" fg:w="1"/><text x="36.4667%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.2167%" y="261" width="0.0808%" height="15" fill="rgb(213,106,44)" fg:x="448" fg:w="1"/><text x="36.4667%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="36.2975%" y="261" width="0.0808%" height="15" fill="rgb(214,129,20)" fg:x="449" fg:w="1"/><text x="36.5475%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.2975%" y="245" width="0.0808%" height="15" fill="rgb(212,32,13)" fg:x="449" fg:w="1"/><text x="36.5475%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.2975%" y="229" width="0.0808%" height="15" fill="rgb(208,168,33)" fg:x="449" fg:w="1"/><text x="36.5475%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="36.2975%" y="213" width="0.0808%" height="15" fill="rgb(231,207,8)" fg:x="449" fg:w="1"/><text x="36.5475%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="36.2975%" y="293" width="0.1617%" height="15" fill="rgb(235,219,23)" fg:x="449" fg:w="2"/><text x="36.5475%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="36.2975%" y="277" width="0.1617%" height="15" fill="rgb(226,216,26)" fg:x="449" fg:w="2"/><text x="36.5475%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="36.3783%" y="261" width="0.0808%" height="15" fill="rgb(239,137,16)" fg:x="450" fg:w="1"/><text x="36.6283%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="36.4592%" y="293" width="0.0808%" height="15" fill="rgb(207,12,36)" fg:x="451" fg:w="1"/><text x="36.7092%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.4592%" y="277" width="0.0808%" height="15" fill="rgb(210,214,24)" fg:x="451" fg:w="1"/><text x="36.7092%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.7825%" y="277" width="0.0808%" height="15" fill="rgb(206,56,30)" fg:x="455" fg:w="1"/><text x="37.0325%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8634%" y="277" width="0.0808%" height="15" fill="rgb(228,143,26)" fg:x="456" fg:w="1"/><text x="37.1134%" y="287.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="37.0251%" y="261" width="0.1617%" height="15" fill="rgb(216,218,46)" fg:x="458" fg:w="2"/><text x="37.2751%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (23 samples, 1.86%)</title><rect x="36.9442%" y="277" width="1.8593%" height="15" fill="rgb(206,6,19)" fg:x="457" fg:w="23"/><text x="37.1942%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (20 samples, 1.62%)</title><rect x="37.1867%" y="261" width="1.6168%" height="15" fill="rgb(239,177,51)" fg:x="460" fg:w="20"/><text x="37.4367%" y="271.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="38.5610%" y="245" width="0.2425%" height="15" fill="rgb(216,55,25)" fg:x="477" fg:w="3"/><text x="38.8110%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="38.8036%" y="277" width="0.0808%" height="15" fill="rgb(231,163,29)" fg:x="480" fg:w="1"/><text x="39.0536%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="38.8036%" y="261" width="0.0808%" height="15" fill="rgb(232,149,50)" fg:x="480" fg:w="1"/><text x="39.0536%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="38.8036%" y="245" width="0.0808%" height="15" fill="rgb(223,142,48)" fg:x="480" fg:w="1"/><text x="39.0536%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="38.8036%" y="229" width="0.0808%" height="15" fill="rgb(245,83,23)" fg:x="480" fg:w="1"/><text x="39.0536%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="38.8844%" y="277" width="0.1617%" height="15" fill="rgb(224,63,2)" fg:x="481" fg:w="2"/><text x="39.1344%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="38.8844%" y="261" width="0.1617%" height="15" fill="rgb(218,65,53)" fg:x="481" fg:w="2"/><text x="39.1344%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="39.1269%" y="261" width="0.0808%" height="15" fill="rgb(221,84,29)" fg:x="484" fg:w="1"/><text x="39.3769%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.4503%" y="245" width="0.0808%" height="15" fill="rgb(234,0,32)" fg:x="488" fg:w="1"/><text x="39.7003%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.4503%" y="229" width="0.0808%" height="15" fill="rgb(206,20,16)" fg:x="488" fg:w="1"/><text x="39.7003%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4503%" y="213" width="0.0808%" height="15" fill="rgb(244,172,18)" fg:x="488" fg:w="1"/><text x="39.7003%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="39.5311%" y="229" width="0.2425%" height="15" fill="rgb(254,133,1)" fg:x="489" fg:w="3"/><text x="39.7811%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="39.5311%" y="213" width="0.2425%" height="15" fill="rgb(222,206,41)" fg:x="489" fg:w="3"/><text x="39.7811%" y="223.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="39.5311%" y="197" width="0.2425%" height="15" fill="rgb(212,3,42)" fg:x="489" fg:w="3"/><text x="39.7811%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="39.5311%" y="245" width="0.3234%" height="15" fill="rgb(241,11,4)" fg:x="489" fg:w="4"/><text x="39.7811%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.7736%" y="229" width="0.0808%" height="15" fill="rgb(205,19,26)" fg:x="492" fg:w="1"/><text x="40.0236%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.7736%" y="213" width="0.0808%" height="15" fill="rgb(210,179,32)" fg:x="492" fg:w="1"/><text x="40.0236%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.57%)</title><rect x="39.8545%" y="245" width="0.5659%" height="15" fill="rgb(227,116,49)" fg:x="493" fg:w="7"/><text x="40.1045%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="40.0162%" y="229" width="0.4042%" height="15" fill="rgb(211,146,6)" fg:x="495" fg:w="5"/><text x="40.2662%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="40.1778%" y="213" width="0.2425%" height="15" fill="rgb(219,44,39)" fg:x="497" fg:w="3"/><text x="40.4278%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="40.1778%" y="197" width="0.2425%" height="15" fill="rgb(234,128,11)" fg:x="497" fg:w="3"/><text x="40.4278%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="40.1778%" y="181" width="0.2425%" height="15" fill="rgb(220,183,53)" fg:x="497" fg:w="3"/><text x="40.4278%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.65%)</title><rect x="40.4204%" y="229" width="0.6467%" height="15" fill="rgb(213,219,32)" fg:x="500" fg:w="8"/><text x="40.6704%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.57%)</title><rect x="40.5012%" y="213" width="0.5659%" height="15" fill="rgb(232,156,16)" fg:x="501" fg:w="7"/><text x="40.7512%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (26 samples, 2.10%)</title><rect x="39.0461%" y="277" width="2.1019%" height="15" fill="rgb(246,135,34)" fg:x="483" fg:w="26"/><text x="39.2961%" y="287.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (24 samples, 1.94%)</title><rect x="39.2078%" y="261" width="1.9402%" height="15" fill="rgb(241,99,0)" fg:x="485" fg:w="24"/><text x="39.4578%" y="271.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.73%)</title><rect x="40.4204%" y="245" width="0.7276%" height="15" fill="rgb(222,103,45)" fg:x="500" fg:w="9"/><text x="40.6704%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="41.0671%" y="229" width="0.0808%" height="15" fill="rgb(212,57,4)" fg:x="508" fg:w="1"/><text x="41.3171%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.2288%" y="245" width="0.0808%" height="15" fill="rgb(215,68,47)" fg:x="510" fg:w="1"/><text x="41.4788%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.2288%" y="229" width="0.0808%" height="15" fill="rgb(230,84,2)" fg:x="510" fg:w="1"/><text x="41.4788%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.2288%" y="213" width="0.0808%" height="15" fill="rgb(220,102,14)" fg:x="510" fg:w="1"/><text x="41.4788%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="41.3096%" y="229" width="0.0808%" height="15" fill="rgb(240,10,32)" fg:x="511" fg:w="1"/><text x="41.5596%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.3096%" y="213" width="0.0808%" height="15" fill="rgb(215,47,27)" fg:x="511" fg:w="1"/><text x="41.5596%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.3096%" y="197" width="0.0808%" height="15" fill="rgb(233,188,43)" fg:x="511" fg:w="1"/><text x="41.5596%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.3096%" y="181" width="0.0808%" height="15" fill="rgb(253,190,1)" fg:x="511" fg:w="1"/><text x="41.5596%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="43.0073%" y="165" width="0.2425%" height="15" fill="rgb(206,114,52)" fg:x="532" fg:w="3"/><text x="43.2573%" y="175.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="43.2498%" y="165" width="0.1617%" height="15" fill="rgb(233,120,37)" fg:x="535" fg:w="2"/><text x="43.4998%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (10 samples, 0.81%)</title><rect x="43.4115%" y="165" width="0.8084%" height="15" fill="rgb(214,52,39)" fg:x="537" fg:w="10"/><text x="43.6615%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.57%)</title><rect x="43.6540%" y="149" width="0.5659%" height="15" fill="rgb(223,80,29)" fg:x="540" fg:w="7"/><text x="43.9040%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.57%)</title><rect x="43.6540%" y="133" width="0.5659%" height="15" fill="rgb(230,101,40)" fg:x="540" fg:w="7"/><text x="43.9040%" y="143.50"></text></g><g><title>realloc (7 samples, 0.57%)</title><rect x="43.6540%" y="117" width="0.5659%" height="15" fill="rgb(219,211,8)" fg:x="540" fg:w="7"/><text x="43.9040%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="44.2199%" y="165" width="0.1617%" height="15" fill="rgb(252,126,28)" fg:x="547" fg:w="2"/><text x="44.4699%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.3007%" y="149" width="0.0808%" height="15" fill="rgb(215,56,38)" fg:x="548" fg:w="1"/><text x="44.5507%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.3007%" y="133" width="0.0808%" height="15" fill="rgb(249,55,44)" fg:x="548" fg:w="1"/><text x="44.5507%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.3007%" y="117" width="0.0808%" height="15" fill="rgb(220,221,32)" fg:x="548" fg:w="1"/><text x="44.5507%" y="127.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="44.8666%" y="133" width="0.1617%" height="15" fill="rgb(212,216,41)" fg:x="555" fg:w="2"/><text x="45.1166%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="45.0283%" y="101" width="0.1617%" height="15" fill="rgb(228,213,43)" fg:x="557" fg:w="2"/><text x="45.2783%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="45.1900%" y="101" width="0.0808%" height="15" fill="rgb(211,31,26)" fg:x="559" fg:w="1"/><text x="45.4400%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="45.1900%" y="85" width="0.0808%" height="15" fill="rgb(229,202,19)" fg:x="559" fg:w="1"/><text x="45.4400%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="45.0283%" y="133" width="0.4042%" height="15" fill="rgb(229,105,46)" fg:x="557" fg:w="5"/><text x="45.2783%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="45.0283%" y="117" width="0.4042%" height="15" fill="rgb(235,108,1)" fg:x="557" fg:w="5"/><text x="45.2783%" y="127.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="45.2708%" y="101" width="0.1617%" height="15" fill="rgb(245,111,35)" fg:x="560" fg:w="2"/><text x="45.5208%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (25 samples, 2.02%)</title><rect x="44.3816%" y="165" width="2.0210%" height="15" fill="rgb(219,185,31)" fg:x="549" fg:w="25"/><text x="44.6316%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (23 samples, 1.86%)</title><rect x="44.5432%" y="149" width="1.8593%" height="15" fill="rgb(214,4,43)" fg:x="551" fg:w="23"/><text x="44.7932%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (12 samples, 0.97%)</title><rect x="45.4325%" y="133" width="0.9701%" height="15" fill="rgb(235,227,40)" fg:x="562" fg:w="12"/><text x="45.6825%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="46.3217%" y="117" width="0.0808%" height="15" fill="rgb(230,88,30)" fg:x="573" fg:w="1"/><text x="46.5717%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.4834%" y="149" width="0.0808%" height="15" fill="rgb(216,217,1)" fg:x="575" fg:w="1"/><text x="46.7334%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.4834%" y="133" width="0.0808%" height="15" fill="rgb(248,139,50)" fg:x="575" fg:w="1"/><text x="46.7334%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.4834%" y="117" width="0.0808%" height="15" fill="rgb(233,1,21)" fg:x="575" fg:w="1"/><text x="46.7334%" y="127.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="46.5643%" y="133" width="0.1617%" height="15" fill="rgb(215,183,12)" fg:x="576" fg:w="2"/><text x="46.8143%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (99 samples, 8.00%)</title><rect x="46.4026%" y="165" width="8.0032%" height="15" fill="rgb(229,104,42)" fg:x="574" fg:w="99"/><text x="46.6526%" y="175.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (97 samples, 7.84%)</title><rect x="46.5643%" y="149" width="7.8416%" height="15" fill="rgb(243,34,48)" fg:x="576" fg:w="97"/><text x="46.8143%" y="159.50">regex_autom..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (95 samples, 7.68%)</title><rect x="46.7259%" y="133" width="7.6799%" height="15" fill="rgb(239,11,44)" fg:x="578" fg:w="95"/><text x="46.9759%" y="143.50">alloc::vec:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (8 samples, 0.65%)</title><rect x="54.4058%" y="165" width="0.6467%" height="15" fill="rgb(231,98,35)" fg:x="673" fg:w="8"/><text x="54.6558%" y="175.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="54.7292%" y="149" width="0.3234%" height="15" fill="rgb(233,28,25)" fg:x="677" fg:w="4"/><text x="54.9792%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="55.0525%" y="165" width="0.0808%" height="15" fill="rgb(234,123,11)" fg:x="681" fg:w="1"/><text x="55.3025%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (182 samples, 14.71%)</title><rect x="41.2288%" y="261" width="14.7130%" height="15" fill="rgb(220,69,3)" fg:x="510" fg:w="182"/><text x="41.4788%" y="271.50">&lt;core::iter::adapters:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (181 samples, 14.63%)</title><rect x="41.3096%" y="245" width="14.6322%" height="15" fill="rgb(214,64,36)" fg:x="511" fg:w="181"/><text x="41.5596%" y="255.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (180 samples, 14.55%)</title><rect x="41.3905%" y="229" width="14.5513%" height="15" fill="rgb(211,138,32)" fg:x="512" fg:w="180"/><text x="41.6405%" y="239.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (180 samples, 14.55%)</title><rect x="41.3905%" y="213" width="14.5513%" height="15" fill="rgb(213,118,47)" fg:x="512" fg:w="180"/><text x="41.6405%" y="223.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (180 samples, 14.55%)</title><rect x="41.3905%" y="197" width="14.5513%" height="15" fill="rgb(243,124,49)" fg:x="512" fg:w="180"/><text x="41.6405%" y="207.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (180 samples, 14.55%)</title><rect x="41.3905%" y="181" width="14.5513%" height="15" fill="rgb(221,30,28)" fg:x="512" fg:w="180"/><text x="41.6405%" y="191.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (10 samples, 0.81%)</title><rect x="55.1334%" y="165" width="0.8084%" height="15" fill="rgb(246,37,13)" fg:x="682" fg:w="10"/><text x="55.3834%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.57%)</title><rect x="55.3759%" y="149" width="0.5659%" height="15" fill="rgb(249,66,14)" fg:x="685" fg:w="7"/><text x="55.6259%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="55.4568%" y="133" width="0.4850%" height="15" fill="rgb(213,166,5)" fg:x="686" fg:w="6"/><text x="55.7068%" y="143.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="55.5376%" y="117" width="0.4042%" height="15" fill="rgb(221,66,24)" fg:x="687" fg:w="5"/><text x="55.7876%" y="127.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="56.8310%" y="245" width="0.1617%" height="15" fill="rgb(210,132,17)" fg:x="703" fg:w="2"/><text x="57.0810%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="56.9927%" y="245" width="0.2425%" height="15" fill="rgb(243,202,5)" fg:x="705" fg:w="3"/><text x="57.2427%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.2352%" y="245" width="0.0808%" height="15" fill="rgb(233,70,48)" fg:x="708" fg:w="1"/><text x="57.4852%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (15 samples, 1.21%)</title><rect x="57.3161%" y="245" width="1.2126%" height="15" fill="rgb(238,41,26)" fg:x="709" fg:w="15"/><text x="57.5661%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="58.1245%" y="229" width="0.4042%" height="15" fill="rgb(241,19,31)" fg:x="719" fg:w="5"/><text x="58.3745%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="58.2862%" y="213" width="0.2425%" height="15" fill="rgb(214,76,10)" fg:x="721" fg:w="3"/><text x="58.5362%" y="223.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="58.2862%" y="197" width="0.2425%" height="15" fill="rgb(254,202,22)" fg:x="721" fg:w="3"/><text x="58.5362%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.49%)</title><rect x="58.5287%" y="245" width="0.4850%" height="15" fill="rgb(214,72,24)" fg:x="724" fg:w="6"/><text x="58.7787%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="59.0137%" y="245" width="0.2425%" height="15" fill="rgb(221,92,46)" fg:x="730" fg:w="3"/><text x="59.2637%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (43 samples, 3.48%)</title><rect x="55.9418%" y="261" width="3.4762%" height="15" fill="rgb(246,13,50)" fg:x="692" fg:w="43"/><text x="56.1918%" y="271.50">reg..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="59.2563%" y="245" width="0.1617%" height="15" fill="rgb(240,165,38)" fg:x="733" fg:w="2"/><text x="59.5063%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.3371%" y="229" width="0.0808%" height="15" fill="rgb(241,24,51)" fg:x="734" fg:w="1"/><text x="59.5871%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.3371%" y="213" width="0.0808%" height="15" fill="rgb(227,51,44)" fg:x="734" fg:w="1"/><text x="59.5871%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.3371%" y="197" width="0.0808%" height="15" fill="rgb(231,121,3)" fg:x="734" fg:w="1"/><text x="59.5871%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (284 samples, 22.96%)</title><rect x="36.5400%" y="293" width="22.9588%" height="15" fill="rgb(245,3,41)" fg:x="452" fg:w="284"/><text x="36.7900%" y="303.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (227 samples, 18.35%)</title><rect x="41.1479%" y="277" width="18.3508%" height="15" fill="rgb(214,13,26)" fg:x="509" fg:w="227"/><text x="41.3979%" y="287.50">regex_automata::nfa::thompson..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="59.4179%" y="261" width="0.0808%" height="15" fill="rgb(252,75,11)" fg:x="735" fg:w="1"/><text x="59.6679%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="59.5796%" y="245" width="0.0808%" height="15" fill="rgb(218,226,17)" fg:x="737" fg:w="1"/><text x="59.8296%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="59.5796%" y="229" width="0.0808%" height="15" fill="rgb(248,89,38)" fg:x="737" fg:w="1"/><text x="59.8296%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="59.5796%" y="213" width="0.0808%" height="15" fill="rgb(237,73,46)" fg:x="737" fg:w="1"/><text x="59.8296%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="59.5796%" y="197" width="0.0808%" height="15" fill="rgb(242,78,33)" fg:x="737" fg:w="1"/><text x="59.8296%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="59.6605%" y="229" width="0.0808%" height="15" fill="rgb(235,60,3)" fg:x="738" fg:w="1"/><text x="59.9105%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="59.6605%" y="245" width="0.1617%" height="15" fill="rgb(216,172,19)" fg:x="738" fg:w="2"/><text x="59.9105%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="59.7413%" y="229" width="0.0808%" height="15" fill="rgb(227,6,42)" fg:x="739" fg:w="1"/><text x="59.9913%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="59.5796%" y="261" width="0.3234%" height="15" fill="rgb(223,207,42)" fg:x="737" fg:w="4"/><text x="59.8296%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="59.8222%" y="245" width="0.0808%" height="15" fill="rgb(246,138,30)" fg:x="740" fg:w="1"/><text x="60.0722%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.8222%" y="229" width="0.0808%" height="15" fill="rgb(251,199,47)" fg:x="740" fg:w="1"/><text x="60.0722%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.8222%" y="213" width="0.0808%" height="15" fill="rgb(228,218,44)" fg:x="740" fg:w="1"/><text x="60.0722%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8222%" y="197" width="0.0808%" height="15" fill="rgb(220,68,6)" fg:x="740" fg:w="1"/><text x="60.0722%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="59.9838%" y="245" width="0.0808%" height="15" fill="rgb(240,60,26)" fg:x="742" fg:w="1"/><text x="60.2338%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0647%" y="245" width="0.0808%" height="15" fill="rgb(211,200,19)" fg:x="743" fg:w="1"/><text x="60.3147%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="59.4988%" y="293" width="0.7276%" height="15" fill="rgb(242,145,30)" fg:x="736" fg:w="9"/><text x="59.7488%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.73%)</title><rect x="59.4988%" y="277" width="0.7276%" height="15" fill="rgb(225,64,13)" fg:x="736" fg:w="9"/><text x="59.7488%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="59.9030%" y="261" width="0.3234%" height="15" fill="rgb(218,103,35)" fg:x="741" fg:w="4"/><text x="60.1530%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.1455%" y="245" width="0.0808%" height="15" fill="rgb(216,93,46)" fg:x="744" fg:w="1"/><text x="60.3955%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1455%" y="229" width="0.0808%" height="15" fill="rgb(225,159,27)" fg:x="744" fg:w="1"/><text x="60.3955%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.1455%" y="213" width="0.0808%" height="15" fill="rgb(225,204,11)" fg:x="744" fg:w="1"/><text x="60.3955%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (9 samples, 0.73%)</title><rect x="60.2264%" y="245" width="0.7276%" height="15" fill="rgb(205,56,4)" fg:x="745" fg:w="9"/><text x="60.4764%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="60.7114%" y="229" width="0.2425%" height="15" fill="rgb(206,6,35)" fg:x="751" fg:w="3"/><text x="60.9614%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (10 samples, 0.81%)</title><rect x="60.2264%" y="261" width="0.8084%" height="15" fill="rgb(247,73,52)" fg:x="745" fg:w="10"/><text x="60.4764%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="60.9539%" y="245" width="0.0808%" height="15" fill="rgb(246,97,4)" fg:x="754" fg:w="1"/><text x="61.2039%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.1964%" y="245" width="0.0808%" height="15" fill="rgb(212,37,15)" fg:x="757" fg:w="1"/><text x="61.4464%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="61.2773%" y="245" width="0.1617%" height="15" fill="rgb(208,130,40)" fg:x="758" fg:w="2"/><text x="61.5273%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (6 samples, 0.49%)</title><rect x="61.0348%" y="261" width="0.4850%" height="15" fill="rgb(236,55,29)" fg:x="755" fg:w="6"/><text x="61.2848%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.08%)</title><rect x="61.4390%" y="245" width="0.0808%" height="15" fill="rgb(209,156,45)" fg:x="760" fg:w="1"/><text x="61.6890%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (353 samples, 28.54%)</title><rect x="33.1447%" y="357" width="28.5368%" height="15" fill="rgb(249,107,4)" fg:x="410" fg:w="353"/><text x="33.3947%" y="367.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (323 samples, 26.11%)</title><rect x="35.5699%" y="341" width="26.1116%" height="15" fill="rgb(227,7,13)" fg:x="440" fg:w="323"/><text x="35.8199%" y="351.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (321 samples, 25.95%)</title><rect x="35.7316%" y="325" width="25.9499%" height="15" fill="rgb(250,129,14)" fg:x="442" fg:w="321"/><text x="35.9816%" y="335.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::build (321 samples, 25.95%)</title><rect x="35.7316%" y="309" width="25.9499%" height="15" fill="rgb(229,92,13)" fg:x="442" fg:w="321"/><text x="35.9816%" y="319.50">regex_automata::meta::regex::Builder::bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (18 samples, 1.46%)</title><rect x="60.2264%" y="293" width="1.4551%" height="15" fill="rgb(245,98,39)" fg:x="745" fg:w="18"/><text x="60.4764%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (18 samples, 1.46%)</title><rect x="60.2264%" y="277" width="1.4551%" height="15" fill="rgb(234,135,48)" fg:x="745" fg:w="18"/><text x="60.4764%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="61.5198%" y="261" width="0.1617%" height="15" fill="rgb(230,98,28)" fg:x="761" fg:w="2"/><text x="61.7698%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="61.6006%" y="245" width="0.0808%" height="15" fill="rgb(223,121,0)" fg:x="762" fg:w="1"/><text x="61.8506%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.6006%" y="229" width="0.0808%" height="15" fill="rgb(234,173,33)" fg:x="762" fg:w="1"/><text x="61.8506%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.6006%" y="213" width="0.0808%" height="15" fill="rgb(245,47,8)" fg:x="762" fg:w="1"/><text x="61.8506%" y="223.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="61.6006%" y="197" width="0.0808%" height="15" fill="rgb(205,17,20)" fg:x="762" fg:w="1"/><text x="61.8506%" y="207.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="61.6006%" y="181" width="0.0808%" height="15" fill="rgb(232,151,16)" fg:x="762" fg:w="1"/><text x="61.8506%" y="191.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="61.6815%" y="341" width="0.0808%" height="15" fill="rgb(208,30,32)" fg:x="763" fg:w="1"/><text x="61.9315%" y="351.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="61.6815%" y="325" width="0.0808%" height="15" fill="rgb(254,26,3)" fg:x="763" fg:w="1"/><text x="61.9315%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="61.6815%" y="309" width="0.0808%" height="15" fill="rgb(240,177,30)" fg:x="763" fg:w="1"/><text x="61.9315%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.6815%" y="293" width="0.0808%" height="15" fill="rgb(248,76,44)" fg:x="763" fg:w="1"/><text x="61.9315%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.6815%" y="277" width="0.0808%" height="15" fill="rgb(241,186,54)" fg:x="763" fg:w="1"/><text x="61.9315%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.6815%" y="261" width="0.0808%" height="15" fill="rgb(249,171,29)" fg:x="763" fg:w="1"/><text x="61.9315%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.6815%" y="245" width="0.0808%" height="15" fill="rgb(237,151,44)" fg:x="763" fg:w="1"/><text x="61.9315%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.6815%" y="229" width="0.0808%" height="15" fill="rgb(228,174,30)" fg:x="763" fg:w="1"/><text x="61.9315%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.6815%" y="213" width="0.0808%" height="15" fill="rgb(252,14,37)" fg:x="763" fg:w="1"/><text x="61.9315%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6815%" y="197" width="0.0808%" height="15" fill="rgb(207,111,40)" fg:x="763" fg:w="1"/><text x="61.9315%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="61.7623%" y="293" width="0.2425%" height="15" fill="rgb(248,171,54)" fg:x="764" fg:w="3"/><text x="62.0123%" y="303.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="61.7623%" y="277" width="0.2425%" height="15" fill="rgb(211,127,2)" fg:x="764" fg:w="3"/><text x="62.0123%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.0049%" y="277" width="0.0808%" height="15" fill="rgb(236,87,47)" fg:x="767" fg:w="1"/><text x="62.2549%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.0049%" y="261" width="0.0808%" height="15" fill="rgb(223,190,45)" fg:x="767" fg:w="1"/><text x="62.2549%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.0049%" y="245" width="0.0808%" height="15" fill="rgb(215,5,16)" fg:x="767" fg:w="1"/><text x="62.2549%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.40%)</title><rect x="61.7623%" y="325" width="0.4042%" height="15" fill="rgb(252,82,33)" fg:x="764" fg:w="5"/><text x="62.0123%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="61.7623%" y="309" width="0.4042%" height="15" fill="rgb(247,213,44)" fg:x="764" fg:w="5"/><text x="62.0123%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="62.0049%" y="293" width="0.1617%" height="15" fill="rgb(205,196,44)" fg:x="767" fg:w="2"/><text x="62.2549%" y="303.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="62.0857%" y="277" width="0.0808%" height="15" fill="rgb(237,96,54)" fg:x="768" fg:w="1"/><text x="62.3357%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="62.1665%" y="293" width="0.1617%" height="15" fill="rgb(230,113,34)" fg:x="769" fg:w="2"/><text x="62.4165%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="62.1665%" y="277" width="0.1617%" height="15" fill="rgb(221,224,12)" fg:x="769" fg:w="2"/><text x="62.4165%" y="287.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="62.1665%" y="261" width="0.1617%" height="15" fill="rgb(219,112,44)" fg:x="769" fg:w="2"/><text x="62.4165%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="62.1665%" y="325" width="0.2425%" height="15" fill="rgb(210,31,13)" fg:x="769" fg:w="3"/><text x="62.4165%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="62.1665%" y="309" width="0.2425%" height="15" fill="rgb(230,25,16)" fg:x="769" fg:w="3"/><text x="62.4165%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="62.3282%" y="293" width="0.0808%" height="15" fill="rgb(246,108,53)" fg:x="771" fg:w="1"/><text x="62.5782%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="62.3282%" y="277" width="0.0808%" height="15" fill="rgb(241,172,50)" fg:x="771" fg:w="1"/><text x="62.5782%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.3282%" y="261" width="0.0808%" height="15" fill="rgb(235,141,10)" fg:x="771" fg:w="1"/><text x="62.5782%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.3282%" y="245" width="0.0808%" height="15" fill="rgb(220,174,43)" fg:x="771" fg:w="1"/><text x="62.5782%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="62.4899%" y="277" width="0.1617%" height="15" fill="rgb(215,181,40)" fg:x="773" fg:w="2"/><text x="62.7399%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.4899%" y="261" width="0.1617%" height="15" fill="rgb(230,97,2)" fg:x="773" fg:w="2"/><text x="62.7399%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="62.4899%" y="245" width="0.1617%" height="15" fill="rgb(211,25,27)" fg:x="773" fg:w="2"/><text x="62.7399%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.4899%" y="229" width="0.1617%" height="15" fill="rgb(230,87,26)" fg:x="773" fg:w="2"/><text x="62.7399%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="62.4899%" y="213" width="0.1617%" height="15" fill="rgb(227,160,17)" fg:x="773" fg:w="2"/><text x="62.7399%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="62.4899%" y="197" width="0.1617%" height="15" fill="rgb(244,85,34)" fg:x="773" fg:w="2"/><text x="62.7399%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="62.4899%" y="181" width="0.1617%" height="15" fill="rgb(207,70,0)" fg:x="773" fg:w="2"/><text x="62.7399%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="62.4899%" y="165" width="0.1617%" height="15" fill="rgb(223,129,7)" fg:x="773" fg:w="2"/><text x="62.7399%" y="175.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="62.6516%" y="277" width="0.1617%" height="15" fill="rgb(246,105,7)" fg:x="775" fg:w="2"/><text x="62.9016%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.6516%" y="261" width="0.1617%" height="15" fill="rgb(215,154,42)" fg:x="775" fg:w="2"/><text x="62.9016%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.2175%" y="261" width="0.0808%" height="15" fill="rgb(220,215,30)" fg:x="782" fg:w="1"/><text x="63.4675%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.2983%" y="245" width="0.0808%" height="15" fill="rgb(228,81,51)" fg:x="783" fg:w="1"/><text x="63.5483%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="63.2983%" y="229" width="0.0808%" height="15" fill="rgb(247,71,54)" fg:x="783" fg:w="1"/><text x="63.5483%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="63.2983%" y="261" width="0.1617%" height="15" fill="rgb(234,176,34)" fg:x="783" fg:w="2"/><text x="63.5483%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="63.3791%" y="245" width="0.0808%" height="15" fill="rgb(241,103,54)" fg:x="784" fg:w="1"/><text x="63.6291%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="63.5408%" y="245" width="0.0808%" height="15" fill="rgb(228,22,34)" fg:x="786" fg:w="1"/><text x="63.7908%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.7833%" y="229" width="0.0808%" height="15" fill="rgb(241,179,48)" fg:x="789" fg:w="1"/><text x="64.0333%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="63.8642%" y="229" width="0.0808%" height="15" fill="rgb(235,167,37)" fg:x="790" fg:w="1"/><text x="64.1142%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (17 samples, 1.37%)</title><rect x="62.8133%" y="277" width="1.3743%" height="15" fill="rgb(213,109,30)" fg:x="777" fg:w="17"/><text x="63.0633%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.73%)</title><rect x="63.4600%" y="261" width="0.7276%" height="15" fill="rgb(222,172,16)" fg:x="785" fg:w="9"/><text x="63.7100%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.57%)</title><rect x="63.6217%" y="245" width="0.5659%" height="15" fill="rgb(233,192,5)" fg:x="787" fg:w="7"/><text x="63.8717%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="63.9450%" y="229" width="0.2425%" height="15" fill="rgb(247,189,41)" fg:x="791" fg:w="3"/><text x="64.1950%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.2684%" y="229" width="0.0808%" height="15" fill="rgb(218,134,47)" fg:x="795" fg:w="1"/><text x="64.5184%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.2684%" y="213" width="0.0808%" height="15" fill="rgb(216,29,3)" fg:x="795" fg:w="1"/><text x="64.5184%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.2684%" y="197" width="0.0808%" height="15" fill="rgb(246,140,12)" fg:x="795" fg:w="1"/><text x="64.5184%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.2684%" y="181" width="0.0808%" height="15" fill="rgb(230,136,11)" fg:x="795" fg:w="1"/><text x="64.5184%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="64.3492%" y="229" width="0.0808%" height="15" fill="rgb(247,22,47)" fg:x="796" fg:w="1"/><text x="64.5992%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.57%)</title><rect x="64.1876%" y="245" width="0.5659%" height="15" fill="rgb(218,84,22)" fg:x="794" fg:w="7"/><text x="64.4376%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="64.4301%" y="229" width="0.3234%" height="15" fill="rgb(216,87,39)" fg:x="797" fg:w="4"/><text x="64.6801%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="64.5109%" y="213" width="0.2425%" height="15" fill="rgb(221,178,8)" fg:x="798" fg:w="3"/><text x="64.7609%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.5918%" y="197" width="0.1617%" height="15" fill="rgb(230,42,11)" fg:x="799" fg:w="2"/><text x="64.8418%" y="207.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.5918%" y="181" width="0.1617%" height="15" fill="rgb(237,229,4)" fg:x="799" fg:w="2"/><text x="64.8418%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="64.7534%" y="229" width="0.0808%" height="15" fill="rgb(222,31,33)" fg:x="801" fg:w="1"/><text x="65.0034%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="64.1876%" y="277" width="0.7276%" height="15" fill="rgb(210,17,39)" fg:x="794" fg:w="9"/><text x="64.4376%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.73%)</title><rect x="64.1876%" y="261" width="0.7276%" height="15" fill="rgb(244,93,20)" fg:x="794" fg:w="9"/><text x="64.4376%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="64.7534%" y="245" width="0.1617%" height="15" fill="rgb(210,40,47)" fg:x="801" fg:w="2"/><text x="65.0034%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.8343%" y="229" width="0.0808%" height="15" fill="rgb(239,211,47)" fg:x="802" fg:w="1"/><text x="65.0843%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="64.9151%" y="277" width="0.0808%" height="15" fill="rgb(251,223,49)" fg:x="803" fg:w="1"/><text x="65.1651%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="64.9151%" y="261" width="0.0808%" height="15" fill="rgb(221,149,5)" fg:x="803" fg:w="1"/><text x="65.1651%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="64.9151%" y="245" width="0.0808%" height="15" fill="rgb(219,224,51)" fg:x="803" fg:w="1"/><text x="65.1651%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="64.9151%" y="229" width="0.0808%" height="15" fill="rgb(223,7,8)" fg:x="803" fg:w="1"/><text x="65.1651%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (33 samples, 2.67%)</title><rect x="62.4091%" y="325" width="2.6677%" height="15" fill="rgb(241,217,22)" fg:x="772" fg:w="33"/><text x="62.6591%" y="335.50">re..</text></g><g><title>regex::builders::Builder::build_one_string (33 samples, 2.67%)</title><rect x="62.4091%" y="309" width="2.6677%" height="15" fill="rgb(248,209,0)" fg:x="772" fg:w="33"/><text x="62.6591%" y="319.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (33 samples, 2.67%)</title><rect x="62.4091%" y="293" width="2.6677%" height="15" fill="rgb(217,205,4)" fg:x="772" fg:w="33"/><text x="62.6591%" y="303.50">re..</text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::build (1 samples, 0.08%)</title><rect x="64.9960%" y="277" width="0.0808%" height="15" fill="rgb(228,124,39)" fg:x="804" fg:w="1"/><text x="65.2460%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="65.9660%" y="245" width="0.2425%" height="15" fill="rgb(250,116,42)" fg:x="816" fg:w="3"/><text x="66.2160%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="65.9660%" y="229" width="0.2425%" height="15" fill="rgb(223,202,9)" fg:x="816" fg:w="3"/><text x="66.2160%" y="239.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="65.9660%" y="213" width="0.2425%" height="15" fill="rgb(242,222,40)" fg:x="816" fg:w="3"/><text x="66.2160%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.2086%" y="245" width="0.0808%" height="15" fill="rgb(229,99,46)" fg:x="819" fg:w="1"/><text x="66.4586%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2086%" y="229" width="0.0808%" height="15" fill="rgb(225,56,46)" fg:x="819" fg:w="1"/><text x="66.4586%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="66.2894%" y="245" width="0.1617%" height="15" fill="rgb(227,94,5)" fg:x="820" fg:w="2"/><text x="66.5394%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="66.2894%" y="229" width="0.1617%" height="15" fill="rgb(205,112,38)" fg:x="820" fg:w="2"/><text x="66.5394%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.3703%" y="213" width="0.0808%" height="15" fill="rgb(231,133,46)" fg:x="821" fg:w="1"/><text x="66.6203%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (21 samples, 1.70%)</title><rect x="65.0768%" y="261" width="1.6977%" height="15" fill="rgb(217,16,9)" fg:x="805" fg:w="21"/><text x="65.3268%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="66.4511%" y="245" width="0.3234%" height="15" fill="rgb(249,173,9)" fg:x="822" fg:w="4"/><text x="66.7011%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (64 samples, 5.17%)</title><rect x="61.7623%" y="341" width="5.1738%" height="15" fill="rgb(205,163,53)" fg:x="764" fg:w="64"/><text x="62.0123%" y="351.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (23 samples, 1.86%)</title><rect x="65.0768%" y="325" width="1.8593%" height="15" fill="rgb(217,54,41)" fg:x="805" fg:w="23"/><text x="65.3268%" y="335.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (23 samples, 1.86%)</title><rect x="65.0768%" y="309" width="1.8593%" height="15" fill="rgb(228,216,12)" fg:x="805" fg:w="23"/><text x="65.3268%" y="319.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (23 samples, 1.86%)</title><rect x="65.0768%" y="293" width="1.8593%" height="15" fill="rgb(244,228,15)" fg:x="805" fg:w="23"/><text x="65.3268%" y="303.50">&lt;..</text></g><g><title>regex_automata::hybrid::dfa::Cache::new (23 samples, 1.86%)</title><rect x="65.0768%" y="277" width="1.8593%" height="15" fill="rgb(221,176,53)" fg:x="805" fg:w="23"/><text x="65.3268%" y="287.50">r..</text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="66.7745%" y="261" width="0.1617%" height="15" fill="rgb(205,94,34)" fg:x="826" fg:w="2"/><text x="67.0245%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="66.7745%" y="245" width="0.1617%" height="15" fill="rgb(213,110,48)" fg:x="826" fg:w="2"/><text x="67.0245%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.7745%" y="229" width="0.1617%" height="15" fill="rgb(236,142,28)" fg:x="826" fg:w="2"/><text x="67.0245%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="66.7745%" y="213" width="0.1617%" height="15" fill="rgb(225,135,29)" fg:x="826" fg:w="2"/><text x="67.0245%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (658 samples, 53.19%)</title><rect x="13.8238%" y="437" width="53.1932%" height="15" fill="rgb(252,45,31)" fg:x="171" fg:w="658"/><text x="14.0738%" y="447.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Observed..</text></g><g><title>plugins_core::looking::model::qualify_name (641 samples, 51.82%)</title><rect x="15.1981%" y="421" width="51.8189%" height="15" fill="rgb(211,187,50)" fg:x="188" fg:w="641"/><text x="15.4481%" y="431.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (641 samples, 51.82%)</title><rect x="15.1981%" y="405" width="51.8189%" height="15" fill="rgb(229,109,7)" fg:x="188" fg:w="641"/><text x="15.4481%" y="415.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (641 samples, 51.82%)</title><rect x="15.1981%" y="389" width="51.8189%" height="15" fill="rgb(251,131,51)" fg:x="188" fg:w="641"/><text x="15.4481%" y="399.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (638 samples, 51.58%)</title><rect x="15.4406%" y="373" width="51.5764%" height="15" fill="rgb(251,180,35)" fg:x="191" fg:w="638"/><text x="15.6906%" y="383.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (66 samples, 5.34%)</title><rect x="61.6815%" y="357" width="5.3355%" height="15" fill="rgb(211,46,32)" fg:x="763" fg:w="66"/><text x="61.9315%" y="367.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="66.9361%" y="341" width="0.0808%" height="15" fill="rgb(248,123,17)" fg:x="828" fg:w="1"/><text x="67.1861%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.0170%" y="437" width="0.0808%" height="15" fill="rgb(227,141,18)" fg:x="829" fg:w="1"/><text x="67.2670%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (2 samples, 0.16%)</title><rect x="67.0978%" y="437" width="0.1617%" height="15" fill="rgb(216,102,9)" fg:x="830" fg:w="2"/><text x="67.3478%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="67.1787%" y="421" width="0.0808%" height="15" fill="rgb(253,47,13)" fg:x="831" fg:w="1"/><text x="67.4287%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="67.1787%" y="405" width="0.0808%" height="15" fill="rgb(226,93,23)" fg:x="831" fg:w="1"/><text x="67.4287%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="67.1787%" y="389" width="0.0808%" height="15" fill="rgb(247,104,17)" fg:x="831" fg:w="1"/><text x="67.4287%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="67.1787%" y="373" width="0.0808%" height="15" fill="rgb(233,203,26)" fg:x="831" fg:w="1"/><text x="67.4287%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.1787%" y="357" width="0.0808%" height="15" fill="rgb(244,98,49)" fg:x="831" fg:w="1"/><text x="67.4287%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.1787%" y="341" width="0.0808%" height="15" fill="rgb(235,134,22)" fg:x="831" fg:w="1"/><text x="67.4287%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="67.1787%" y="325" width="0.0808%" height="15" fill="rgb(221,70,32)" fg:x="831" fg:w="1"/><text x="67.4287%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.1787%" y="309" width="0.0808%" height="15" fill="rgb(238,15,50)" fg:x="831" fg:w="1"/><text x="67.4287%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.1787%" y="293" width="0.0808%" height="15" fill="rgb(215,221,48)" fg:x="831" fg:w="1"/><text x="67.4287%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.1787%" y="277" width="0.0808%" height="15" fill="rgb(236,73,3)" fg:x="831" fg:w="1"/><text x="67.4287%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.1787%" y="261" width="0.0808%" height="15" fill="rgb(250,107,11)" fg:x="831" fg:w="1"/><text x="67.4287%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.1787%" y="245" width="0.0808%" height="15" fill="rgb(242,39,14)" fg:x="831" fg:w="1"/><text x="67.4287%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="67.1787%" y="229" width="0.0808%" height="15" fill="rgb(248,164,37)" fg:x="831" fg:w="1"/><text x="67.4287%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="67.1787%" y="213" width="0.0808%" height="15" fill="rgb(217,60,12)" fg:x="831" fg:w="1"/><text x="67.4287%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.1787%" y="197" width="0.0808%" height="15" fill="rgb(240,125,29)" fg:x="831" fg:w="1"/><text x="67.4287%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="67.1787%" y="181" width="0.0808%" height="15" fill="rgb(208,207,28)" fg:x="831" fg:w="1"/><text x="67.4287%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.1787%" y="165" width="0.0808%" height="15" fill="rgb(209,159,27)" fg:x="831" fg:w="1"/><text x="67.4287%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.1787%" y="149" width="0.0808%" height="15" fill="rgb(251,176,53)" fg:x="831" fg:w="1"/><text x="67.4287%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.1787%" y="133" width="0.0808%" height="15" fill="rgb(211,85,7)" fg:x="831" fg:w="1"/><text x="67.4287%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="67.1787%" y="117" width="0.0808%" height="15" fill="rgb(216,64,54)" fg:x="831" fg:w="1"/><text x="67.4287%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.1787%" y="101" width="0.0808%" height="15" fill="rgb(217,54,24)" fg:x="831" fg:w="1"/><text x="67.4287%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="67.1787%" y="85" width="0.0808%" height="15" fill="rgb(208,206,53)" fg:x="831" fg:w="1"/><text x="67.4287%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="67.1787%" y="69" width="0.0808%" height="15" fill="rgb(251,74,39)" fg:x="831" fg:w="1"/><text x="67.4287%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="67.1787%" y="53" width="0.0808%" height="15" fill="rgb(226,47,5)" fg:x="831" fg:w="1"/><text x="67.4287%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.1787%" y="37" width="0.0808%" height="15" fill="rgb(234,111,33)" fg:x="831" fg:w="1"/><text x="67.4287%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="67.2595%" y="437" width="0.0808%" height="15" fill="rgb(251,14,10)" fg:x="832" fg:w="1"/><text x="67.5095%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.2595%" y="421" width="0.0808%" height="15" fill="rgb(232,43,0)" fg:x="832" fg:w="1"/><text x="67.5095%" y="431.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3403%" y="405" width="0.0808%" height="15" fill="rgb(222,68,43)" fg:x="833" fg:w="1"/><text x="67.5903%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.3403%" y="389" width="0.0808%" height="15" fill="rgb(217,24,23)" fg:x="833" fg:w="1"/><text x="67.5903%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3403%" y="373" width="0.0808%" height="15" fill="rgb(229,209,14)" fg:x="833" fg:w="1"/><text x="67.5903%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3403%" y="357" width="0.0808%" height="15" fill="rgb(250,149,48)" fg:x="833" fg:w="1"/><text x="67.5903%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.3403%" y="341" width="0.0808%" height="15" fill="rgb(210,120,37)" fg:x="833" fg:w="1"/><text x="67.5903%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.3403%" y="325" width="0.0808%" height="15" fill="rgb(210,21,8)" fg:x="833" fg:w="1"/><text x="67.5903%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.3403%" y="309" width="0.0808%" height="15" fill="rgb(243,145,7)" fg:x="833" fg:w="1"/><text x="67.5903%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.3403%" y="293" width="0.0808%" height="15" fill="rgb(238,178,32)" fg:x="833" fg:w="1"/><text x="67.5903%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.3403%" y="277" width="0.0808%" height="15" fill="rgb(222,4,10)" fg:x="833" fg:w="1"/><text x="67.5903%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.4212%" y="277" width="0.0808%" height="15" fill="rgb(239,7,37)" fg:x="834" fg:w="1"/><text x="67.6712%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4212%" y="261" width="0.0808%" height="15" fill="rgb(215,31,37)" fg:x="834" fg:w="1"/><text x="67.6712%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5020%" y="229" width="0.0808%" height="15" fill="rgb(224,83,33)" fg:x="835" fg:w="1"/><text x="67.7520%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5020%" y="213" width="0.0808%" height="15" fill="rgb(239,55,3)" fg:x="835" fg:w="1"/><text x="67.7520%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.5020%" y="197" width="0.0808%" height="15" fill="rgb(247,92,11)" fg:x="835" fg:w="1"/><text x="67.7520%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.5020%" y="181" width="0.0808%" height="15" fill="rgb(239,200,7)" fg:x="835" fg:w="1"/><text x="67.7520%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.5020%" y="165" width="0.0808%" height="15" fill="rgb(227,115,8)" fg:x="835" fg:w="1"/><text x="67.7520%" y="175.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.5020%" y="149" width="0.0808%" height="15" fill="rgb(215,189,27)" fg:x="835" fg:w="1"/><text x="67.7520%" y="159.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.5020%" y="133" width="0.0808%" height="15" fill="rgb(251,216,39)" fg:x="835" fg:w="1"/><text x="67.7520%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.5020%" y="117" width="0.0808%" height="15" fill="rgb(207,29,47)" fg:x="835" fg:w="1"/><text x="67.7520%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.5020%" y="101" width="0.0808%" height="15" fill="rgb(210,71,34)" fg:x="835" fg:w="1"/><text x="67.7520%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.5020%" y="85" width="0.0808%" height="15" fill="rgb(253,217,51)" fg:x="835" fg:w="1"/><text x="67.7520%" y="95.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="67.4212%" y="309" width="0.2425%" height="15" fill="rgb(222,117,46)" fg:x="834" fg:w="3"/><text x="67.6712%" y="319.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="67.4212%" y="293" width="0.2425%" height="15" fill="rgb(226,132,6)" fg:x="834" fg:w="3"/><text x="67.6712%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="67.5020%" y="277" width="0.1617%" height="15" fill="rgb(254,145,51)" fg:x="835" fg:w="2"/><text x="67.7520%" y="287.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="67.5020%" y="261" width="0.1617%" height="15" fill="rgb(231,199,27)" fg:x="835" fg:w="2"/><text x="67.7520%" y="271.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="67.5020%" y="245" width="0.1617%" height="15" fill="rgb(245,158,14)" fg:x="835" fg:w="2"/><text x="67.7520%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.5829%" y="229" width="0.0808%" height="15" fill="rgb(240,113,14)" fg:x="836" fg:w="1"/><text x="67.8329%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.5829%" y="213" width="0.0808%" height="15" fill="rgb(210,20,13)" fg:x="836" fg:w="1"/><text x="67.8329%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7445%" y="245" width="0.0808%" height="15" fill="rgb(241,144,13)" fg:x="838" fg:w="1"/><text x="67.9945%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.8254%" y="213" width="0.0808%" height="15" fill="rgb(235,43,34)" fg:x="839" fg:w="1"/><text x="68.0754%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.8254%" y="197" width="0.0808%" height="15" fill="rgb(208,36,20)" fg:x="839" fg:w="1"/><text x="68.0754%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.8254%" y="181" width="0.0808%" height="15" fill="rgb(239,204,10)" fg:x="839" fg:w="1"/><text x="68.0754%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9062%" y="181" width="0.0808%" height="15" fill="rgb(217,84,43)" fg:x="840" fg:w="1"/><text x="68.1562%" y="191.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="67.6637%" y="293" width="0.4042%" height="15" fill="rgb(241,170,50)" fg:x="837" fg:w="5"/><text x="67.9137%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="67.6637%" y="277" width="0.4042%" height="15" fill="rgb(226,205,29)" fg:x="837" fg:w="5"/><text x="67.9137%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="67.6637%" y="261" width="0.4042%" height="15" fill="rgb(233,113,1)" fg:x="837" fg:w="5"/><text x="67.9137%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="67.8254%" y="245" width="0.2425%" height="15" fill="rgb(253,98,13)" fg:x="839" fg:w="3"/><text x="68.0754%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.8254%" y="229" width="0.2425%" height="15" fill="rgb(211,115,12)" fg:x="839" fg:w="3"/><text x="68.0754%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.9062%" y="213" width="0.1617%" height="15" fill="rgb(208,12,16)" fg:x="840" fg:w="2"/><text x="68.1562%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.9062%" y="197" width="0.1617%" height="15" fill="rgb(237,193,54)" fg:x="840" fg:w="2"/><text x="68.1562%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.9871%" y="181" width="0.0808%" height="15" fill="rgb(243,22,42)" fg:x="841" fg:w="1"/><text x="68.2371%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.9871%" y="165" width="0.0808%" height="15" fill="rgb(233,151,36)" fg:x="841" fg:w="1"/><text x="68.2371%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.9871%" y="149" width="0.0808%" height="15" fill="rgb(237,57,45)" fg:x="841" fg:w="1"/><text x="68.2371%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.49%)</title><rect x="67.6637%" y="309" width="0.4850%" height="15" fill="rgb(221,88,17)" fg:x="837" fg:w="6"/><text x="67.9137%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0679%" y="293" width="0.0808%" height="15" fill="rgb(230,79,15)" fg:x="842" fg:w="1"/><text x="68.3179%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0679%" y="277" width="0.0808%" height="15" fill="rgb(213,57,13)" fg:x="842" fg:w="1"/><text x="68.3179%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.0679%" y="261" width="0.0808%" height="15" fill="rgb(222,116,39)" fg:x="842" fg:w="1"/><text x="68.3179%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0679%" y="245" width="0.0808%" height="15" fill="rgb(245,107,2)" fg:x="842" fg:w="1"/><text x="68.3179%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.0679%" y="229" width="0.0808%" height="15" fill="rgb(238,1,10)" fg:x="842" fg:w="1"/><text x="68.3179%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.0679%" y="213" width="0.0808%" height="15" fill="rgb(249,4,48)" fg:x="842" fg:w="1"/><text x="68.3179%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.0679%" y="197" width="0.0808%" height="15" fill="rgb(223,151,18)" fg:x="842" fg:w="1"/><text x="68.3179%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.0679%" y="181" width="0.0808%" height="15" fill="rgb(227,65,43)" fg:x="842" fg:w="1"/><text x="68.3179%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.0679%" y="165" width="0.0808%" height="15" fill="rgb(218,40,45)" fg:x="842" fg:w="1"/><text x="68.3179%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.0679%" y="149" width="0.0808%" height="15" fill="rgb(252,121,31)" fg:x="842" fg:w="1"/><text x="68.3179%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.1487%" y="309" width="0.0808%" height="15" fill="rgb(219,158,43)" fg:x="843" fg:w="1"/><text x="68.3987%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.1487%" y="293" width="0.0808%" height="15" fill="rgb(231,162,42)" fg:x="843" fg:w="1"/><text x="68.3987%" y="303.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.1487%" y="277" width="0.0808%" height="15" fill="rgb(217,179,25)" fg:x="843" fg:w="1"/><text x="68.3987%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.1487%" y="261" width="0.0808%" height="15" fill="rgb(206,212,31)" fg:x="843" fg:w="1"/><text x="68.3987%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1487%" y="245" width="0.0808%" height="15" fill="rgb(235,144,12)" fg:x="843" fg:w="1"/><text x="68.3987%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.1487%" y="229" width="0.0808%" height="15" fill="rgb(213,51,10)" fg:x="843" fg:w="1"/><text x="68.3987%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1487%" y="213" width="0.0808%" height="15" fill="rgb(231,145,14)" fg:x="843" fg:w="1"/><text x="68.3987%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.1487%" y="197" width="0.0808%" height="15" fill="rgb(235,15,28)" fg:x="843" fg:w="1"/><text x="68.3987%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1487%" y="181" width="0.0808%" height="15" fill="rgb(237,206,10)" fg:x="843" fg:w="1"/><text x="68.3987%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1487%" y="165" width="0.0808%" height="15" fill="rgb(236,227,27)" fg:x="843" fg:w="1"/><text x="68.3987%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1487%" y="149" width="0.0808%" height="15" fill="rgb(246,83,35)" fg:x="843" fg:w="1"/><text x="68.3987%" y="159.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (11 samples, 0.89%)</title><rect x="67.4212%" y="405" width="0.8892%" height="15" fill="rgb(220,136,24)" fg:x="834" fg:w="11"/><text x="67.6712%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.89%)</title><rect x="67.4212%" y="389" width="0.8892%" height="15" fill="rgb(217,3,25)" fg:x="834" fg:w="11"/><text x="67.6712%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.89%)</title><rect x="67.4212%" y="373" width="0.8892%" height="15" fill="rgb(239,24,14)" fg:x="834" fg:w="11"/><text x="67.6712%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.89%)</title><rect x="67.4212%" y="357" width="0.8892%" height="15" fill="rgb(244,16,53)" fg:x="834" fg:w="11"/><text x="67.6712%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (11 samples, 0.89%)</title><rect x="67.4212%" y="341" width="0.8892%" height="15" fill="rgb(208,175,44)" fg:x="834" fg:w="11"/><text x="67.6712%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.89%)</title><rect x="67.4212%" y="325" width="0.8892%" height="15" fill="rgb(252,18,48)" fg:x="834" fg:w="11"/><text x="67.6712%" y="335.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="68.2296%" y="309" width="0.0808%" height="15" fill="rgb(234,199,32)" fg:x="844" fg:w="1"/><text x="68.4796%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2296%" y="293" width="0.0808%" height="15" fill="rgb(225,77,54)" fg:x="844" fg:w="1"/><text x="68.4796%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2296%" y="277" width="0.0808%" height="15" fill="rgb(225,42,25)" fg:x="844" fg:w="1"/><text x="68.4796%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.2296%" y="261" width="0.0808%" height="15" fill="rgb(242,227,46)" fg:x="844" fg:w="1"/><text x="68.4796%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2296%" y="245" width="0.0808%" height="15" fill="rgb(246,197,35)" fg:x="844" fg:w="1"/><text x="68.4796%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.3104%" y="405" width="0.0808%" height="15" fill="rgb(215,159,26)" fg:x="845" fg:w="1"/><text x="68.5604%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.3104%" y="389" width="0.0808%" height="15" fill="rgb(212,194,50)" fg:x="845" fg:w="1"/><text x="68.5604%" y="399.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="68.5530%" y="373" width="0.2425%" height="15" fill="rgb(246,132,1)" fg:x="848" fg:w="3"/><text x="68.8030%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="68.7955%" y="373" width="0.0808%" height="15" fill="rgb(217,71,7)" fg:x="851" fg:w="1"/><text x="69.0455%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.7955%" y="357" width="0.0808%" height="15" fill="rgb(252,59,32)" fg:x="851" fg:w="1"/><text x="69.0455%" y="367.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="68.7955%" y="341" width="0.0808%" height="15" fill="rgb(253,204,25)" fg:x="851" fg:w="1"/><text x="69.0455%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.7955%" y="325" width="0.0808%" height="15" fill="rgb(232,21,16)" fg:x="851" fg:w="1"/><text x="69.0455%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7955%" y="309" width="0.0808%" height="15" fill="rgb(248,90,29)" fg:x="851" fg:w="1"/><text x="69.0455%" y="319.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (684 samples, 55.30%)</title><rect x="13.6621%" y="469" width="55.2951%" height="15" fill="rgb(249,223,7)" fg:x="169" fg:w="684"/><text x="13.9121%" y="479.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (683 samples, 55.21%)</title><rect x="13.7429%" y="453" width="55.2142%" height="15" fill="rgb(231,119,42)" fg:x="170" fg:w="683"/><text x="13.9929%" y="463.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (20 samples, 1.62%)</title><rect x="67.3403%" y="437" width="1.6168%" height="15" fill="rgb(215,41,35)" fg:x="833" fg:w="20"/><text x="67.5903%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (20 samples, 1.62%)</title><rect x="67.3403%" y="421" width="1.6168%" height="15" fill="rgb(220,44,45)" fg:x="833" fg:w="20"/><text x="67.5903%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.57%)</title><rect x="68.3913%" y="405" width="0.5659%" height="15" fill="rgb(253,197,36)" fg:x="846" fg:w="7"/><text x="68.6413%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="68.3913%" y="389" width="0.5659%" height="15" fill="rgb(245,225,54)" fg:x="846" fg:w="7"/><text x="68.6413%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8763%" y="373" width="0.0808%" height="15" fill="rgb(239,94,37)" fg:x="852" fg:w="1"/><text x="69.1263%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8763%" y="357" width="0.0808%" height="15" fill="rgb(242,217,10)" fg:x="852" fg:w="1"/><text x="69.1263%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="68.8763%" y="341" width="0.0808%" height="15" fill="rgb(250,193,7)" fg:x="852" fg:w="1"/><text x="69.1263%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.8763%" y="325" width="0.0808%" height="15" fill="rgb(230,104,19)" fg:x="852" fg:w="1"/><text x="69.1263%" y="335.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="68.8763%" y="309" width="0.0808%" height="15" fill="rgb(230,181,4)" fg:x="852" fg:w="1"/><text x="69.1263%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (697 samples, 56.35%)</title><rect x="12.6920%" y="661" width="56.3460%" height="15" fill="rgb(216,219,49)" fg:x="157" fg:w="697"/><text x="12.9420%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (697 samples, 56.35%)</title><rect x="12.6920%" y="645" width="56.3460%" height="15" fill="rgb(254,144,0)" fg:x="157" fg:w="697"/><text x="12.9420%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (697 samples, 56.35%)</title><rect x="12.6920%" y="629" width="56.3460%" height="15" fill="rgb(205,209,38)" fg:x="157" fg:w="697"/><text x="12.9420%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (697 samples, 56.35%)</title><rect x="12.6920%" y="613" width="56.3460%" height="15" fill="rgb(240,21,42)" fg:x="157" fg:w="697"/><text x="12.9420%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (685 samples, 55.38%)</title><rect x="13.6621%" y="597" width="55.3759%" height="15" fill="rgb(241,132,3)" fg:x="169" fg:w="685"/><text x="13.9121%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (685 samples, 55.38%)</title><rect x="13.6621%" y="581" width="55.3759%" height="15" fill="rgb(225,14,2)" fg:x="169" fg:w="685"/><text x="13.9121%" y="591.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (685 samples, 55.38%)</title><rect x="13.6621%" y="565" width="55.3759%" height="15" fill="rgb(210,141,35)" fg:x="169" fg:w="685"/><text x="13.9121%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (685 samples, 55.38%)</title><rect x="13.6621%" y="549" width="55.3759%" height="15" fill="rgb(251,14,44)" fg:x="169" fg:w="685"/><text x="13.9121%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (685 samples, 55.38%)</title><rect x="13.6621%" y="533" width="55.3759%" height="15" fill="rgb(247,48,18)" fg:x="169" fg:w="685"/><text x="13.9121%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (685 samples, 55.38%)</title><rect x="13.6621%" y="517" width="55.3759%" height="15" fill="rgb(225,0,40)" fg:x="169" fg:w="685"/><text x="13.9121%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (685 samples, 55.38%)</title><rect x="13.6621%" y="501" width="55.3759%" height="15" fill="rgb(221,31,33)" fg:x="169" fg:w="685"/><text x="13.9121%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (685 samples, 55.38%)</title><rect x="13.6621%" y="485" width="55.3759%" height="15" fill="rgb(237,42,40)" fg:x="169" fg:w="685"/><text x="13.9121%" y="495.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="68.9572%" y="469" width="0.0808%" height="15" fill="rgb(233,51,29)" fg:x="853" fg:w="1"/><text x="69.2072%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1188%" y="597" width="0.0808%" height="15" fill="rgb(226,58,20)" fg:x="855" fg:w="1"/><text x="69.3688%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1188%" y="581" width="0.0808%" height="15" fill="rgb(208,98,7)" fg:x="855" fg:w="1"/><text x="69.3688%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.1188%" y="565" width="0.0808%" height="15" fill="rgb(228,143,44)" fg:x="855" fg:w="1"/><text x="69.3688%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.1188%" y="549" width="0.0808%" height="15" fill="rgb(246,55,38)" fg:x="855" fg:w="1"/><text x="69.3688%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.1188%" y="533" width="0.0808%" height="15" fill="rgb(247,87,16)" fg:x="855" fg:w="1"/><text x="69.3688%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.1188%" y="517" width="0.0808%" height="15" fill="rgb(234,129,42)" fg:x="855" fg:w="1"/><text x="69.3688%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.1188%" y="501" width="0.0808%" height="15" fill="rgb(220,82,16)" fg:x="855" fg:w="1"/><text x="69.3688%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.1188%" y="485" width="0.0808%" height="15" fill="rgb(211,88,4)" fg:x="855" fg:w="1"/><text x="69.3688%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.1188%" y="469" width="0.0808%" height="15" fill="rgb(248,151,21)" fg:x="855" fg:w="1"/><text x="69.3688%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.1188%" y="453" width="0.0808%" height="15" fill="rgb(238,163,6)" fg:x="855" fg:w="1"/><text x="69.3688%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.1188%" y="437" width="0.0808%" height="15" fill="rgb(209,183,11)" fg:x="855" fg:w="1"/><text x="69.3688%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1188%" y="421" width="0.0808%" height="15" fill="rgb(219,37,20)" fg:x="855" fg:w="1"/><text x="69.3688%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="69.1188%" y="629" width="0.1617%" height="15" fill="rgb(210,158,4)" fg:x="855" fg:w="2"/><text x="69.3688%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="69.1188%" y="613" width="0.1617%" height="15" fill="rgb(221,167,53)" fg:x="855" fg:w="2"/><text x="69.3688%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.1997%" y="597" width="0.0808%" height="15" fill="rgb(237,151,45)" fg:x="856" fg:w="1"/><text x="69.4497%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.1997%" y="581" width="0.0808%" height="15" fill="rgb(231,39,3)" fg:x="856" fg:w="1"/><text x="69.4497%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.1997%" y="565" width="0.0808%" height="15" fill="rgb(212,167,28)" fg:x="856" fg:w="1"/><text x="69.4497%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.2805%" y="581" width="0.0808%" height="15" fill="rgb(232,178,8)" fg:x="857" fg:w="1"/><text x="69.5305%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2805%" y="565" width="0.0808%" height="15" fill="rgb(225,151,20)" fg:x="857" fg:w="1"/><text x="69.5305%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.2805%" y="549" width="0.0808%" height="15" fill="rgb(238,3,37)" fg:x="857" fg:w="1"/><text x="69.5305%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.2805%" y="533" width="0.0808%" height="15" fill="rgb(251,147,42)" fg:x="857" fg:w="1"/><text x="69.5305%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.2805%" y="517" width="0.0808%" height="15" fill="rgb(208,173,10)" fg:x="857" fg:w="1"/><text x="69.5305%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.2805%" y="501" width="0.0808%" height="15" fill="rgb(246,225,4)" fg:x="857" fg:w="1"/><text x="69.5305%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.2805%" y="485" width="0.0808%" height="15" fill="rgb(248,102,6)" fg:x="857" fg:w="1"/><text x="69.5305%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.2805%" y="469" width="0.0808%" height="15" fill="rgb(232,6,21)" fg:x="857" fg:w="1"/><text x="69.5305%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="69.2805%" y="629" width="0.1617%" height="15" fill="rgb(221,179,22)" fg:x="857" fg:w="2"/><text x="69.5305%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.2805%" y="613" width="0.1617%" height="15" fill="rgb(252,50,20)" fg:x="857" fg:w="2"/><text x="69.5305%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2805%" y="597" width="0.1617%" height="15" fill="rgb(222,56,38)" fg:x="857" fg:w="2"/><text x="69.5305%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3614%" y="581" width="0.0808%" height="15" fill="rgb(206,193,29)" fg:x="858" fg:w="1"/><text x="69.6114%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3614%" y="565" width="0.0808%" height="15" fill="rgb(239,192,45)" fg:x="858" fg:w="1"/><text x="69.6114%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.3614%" y="549" width="0.0808%" height="15" fill="rgb(254,18,36)" fg:x="858" fg:w="1"/><text x="69.6114%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.49%)</title><rect x="69.0380%" y="661" width="0.4850%" height="15" fill="rgb(221,127,11)" fg:x="854" fg:w="6"/><text x="69.2880%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="69.0380%" y="645" width="0.4850%" height="15" fill="rgb(234,146,35)" fg:x="854" fg:w="6"/><text x="69.2880%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.4422%" y="629" width="0.0808%" height="15" fill="rgb(254,201,37)" fg:x="859" fg:w="1"/><text x="69.6922%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4422%" y="613" width="0.0808%" height="15" fill="rgb(211,202,23)" fg:x="859" fg:w="1"/><text x="69.6922%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="69.5230%" y="613" width="0.0808%" height="15" fill="rgb(237,91,2)" fg:x="860" fg:w="1"/><text x="69.7730%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.5230%" y="597" width="0.0808%" height="15" fill="rgb(226,228,36)" fg:x="860" fg:w="1"/><text x="69.7730%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.5230%" y="581" width="0.0808%" height="15" fill="rgb(213,63,50)" fg:x="860" fg:w="1"/><text x="69.7730%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.5230%" y="565" width="0.0808%" height="15" fill="rgb(235,194,19)" fg:x="860" fg:w="1"/><text x="69.7730%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.5230%" y="549" width="0.0808%" height="15" fill="rgb(207,204,18)" fg:x="860" fg:w="1"/><text x="69.7730%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.6039%" y="549" width="0.0808%" height="15" fill="rgb(248,8,7)" fg:x="861" fg:w="1"/><text x="69.8539%" y="559.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="69.6039%" y="597" width="0.1617%" height="15" fill="rgb(223,145,47)" fg:x="861" fg:w="2"/><text x="69.8539%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.6039%" y="581" width="0.1617%" height="15" fill="rgb(228,84,11)" fg:x="861" fg:w="2"/><text x="69.8539%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.6039%" y="565" width="0.1617%" height="15" fill="rgb(218,76,45)" fg:x="861" fg:w="2"/><text x="69.8539%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6847%" y="549" width="0.0808%" height="15" fill="rgb(223,80,15)" fg:x="862" fg:w="1"/><text x="69.9347%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6847%" y="533" width="0.0808%" height="15" fill="rgb(219,218,33)" fg:x="862" fg:w="1"/><text x="69.9347%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6847%" y="517" width="0.0808%" height="15" fill="rgb(208,51,11)" fg:x="862" fg:w="1"/><text x="69.9347%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.7656%" y="373" width="0.0808%" height="15" fill="rgb(229,165,39)" fg:x="863" fg:w="1"/><text x="70.0156%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.7656%" y="357" width="0.0808%" height="15" fill="rgb(241,100,24)" fg:x="863" fg:w="1"/><text x="70.0156%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.7656%" y="517" width="0.1617%" height="15" fill="rgb(228,14,23)" fg:x="863" fg:w="2"/><text x="70.0156%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.7656%" y="501" width="0.1617%" height="15" fill="rgb(247,116,52)" fg:x="863" fg:w="2"/><text x="70.0156%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.7656%" y="485" width="0.1617%" height="15" fill="rgb(216,149,33)" fg:x="863" fg:w="2"/><text x="70.0156%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.7656%" y="469" width="0.1617%" height="15" fill="rgb(238,142,29)" fg:x="863" fg:w="2"/><text x="70.0156%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.7656%" y="453" width="0.1617%" height="15" fill="rgb(224,83,40)" fg:x="863" fg:w="2"/><text x="70.0156%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.7656%" y="437" width="0.1617%" height="15" fill="rgb(234,165,11)" fg:x="863" fg:w="2"/><text x="70.0156%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="69.7656%" y="421" width="0.1617%" height="15" fill="rgb(215,96,23)" fg:x="863" fg:w="2"/><text x="70.0156%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.7656%" y="405" width="0.1617%" height="15" fill="rgb(233,179,26)" fg:x="863" fg:w="2"/><text x="70.0156%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.7656%" y="389" width="0.1617%" height="15" fill="rgb(225,129,33)" fg:x="863" fg:w="2"/><text x="70.0156%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.8464%" y="373" width="0.0808%" height="15" fill="rgb(237,49,13)" fg:x="864" fg:w="1"/><text x="70.0964%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.40%)</title><rect x="69.6039%" y="613" width="0.4042%" height="15" fill="rgb(211,3,31)" fg:x="861" fg:w="5"/><text x="69.8539%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.7656%" y="597" width="0.2425%" height="15" fill="rgb(216,152,19)" fg:x="863" fg:w="3"/><text x="70.0156%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.7656%" y="581" width="0.2425%" height="15" fill="rgb(251,121,35)" fg:x="863" fg:w="3"/><text x="70.0156%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="69.7656%" y="565" width="0.2425%" height="15" fill="rgb(210,217,47)" fg:x="863" fg:w="3"/><text x="70.0156%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.7656%" y="549" width="0.2425%" height="15" fill="rgb(244,116,22)" fg:x="863" fg:w="3"/><text x="70.0156%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="69.7656%" y="533" width="0.2425%" height="15" fill="rgb(228,17,21)" fg:x="863" fg:w="3"/><text x="70.0156%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.9272%" y="517" width="0.0808%" height="15" fill="rgb(240,149,34)" fg:x="865" fg:w="1"/><text x="70.1772%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9272%" y="501" width="0.0808%" height="15" fill="rgb(208,125,47)" fg:x="865" fg:w="1"/><text x="70.1772%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.9272%" y="485" width="0.0808%" height="15" fill="rgb(249,186,39)" fg:x="865" fg:w="1"/><text x="70.1772%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9272%" y="469" width="0.0808%" height="15" fill="rgb(240,220,33)" fg:x="865" fg:w="1"/><text x="70.1772%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0081%" y="533" width="0.0808%" height="15" fill="rgb(243,110,23)" fg:x="866" fg:w="1"/><text x="70.2581%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (8 samples, 0.65%)</title><rect x="69.5230%" y="661" width="0.6467%" height="15" fill="rgb(219,163,46)" fg:x="860" fg:w="8"/><text x="69.7730%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.65%)</title><rect x="69.5230%" y="645" width="0.6467%" height="15" fill="rgb(216,126,30)" fg:x="860" fg:w="8"/><text x="69.7730%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.65%)</title><rect x="69.5230%" y="629" width="0.6467%" height="15" fill="rgb(208,139,11)" fg:x="860" fg:w="8"/><text x="69.7730%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.0081%" y="613" width="0.1617%" height="15" fill="rgb(213,118,36)" fg:x="866" fg:w="2"/><text x="70.2581%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="70.0081%" y="597" width="0.1617%" height="15" fill="rgb(226,43,17)" fg:x="866" fg:w="2"/><text x="70.2581%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="70.0081%" y="581" width="0.1617%" height="15" fill="rgb(254,217,4)" fg:x="866" fg:w="2"/><text x="70.2581%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.0081%" y="565" width="0.1617%" height="15" fill="rgb(210,134,47)" fg:x="866" fg:w="2"/><text x="70.2581%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.0081%" y="549" width="0.1617%" height="15" fill="rgb(237,24,49)" fg:x="866" fg:w="2"/><text x="70.2581%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0889%" y="533" width="0.0808%" height="15" fill="rgb(251,39,46)" fg:x="867" fg:w="1"/><text x="70.3389%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0889%" y="517" width="0.0808%" height="15" fill="rgb(251,220,3)" fg:x="867" fg:w="1"/><text x="70.3389%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.0889%" y="501" width="0.0808%" height="15" fill="rgb(228,105,12)" fg:x="867" fg:w="1"/><text x="70.3389%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0889%" y="485" width="0.0808%" height="15" fill="rgb(215,196,1)" fg:x="867" fg:w="1"/><text x="70.3389%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0889%" y="469" width="0.0808%" height="15" fill="rgb(214,33,39)" fg:x="867" fg:w="1"/><text x="70.3389%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0889%" y="453" width="0.0808%" height="15" fill="rgb(220,19,52)" fg:x="867" fg:w="1"/><text x="70.3389%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (870 samples, 70.33%)</title><rect x="0.0000%" y="725" width="70.3314%" height="15" fill="rgb(221,78,38)" fg:x="0" fg:w="870"/><text x="0.2500%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (870 samples, 70.33%)</title><rect x="0.0000%" y="709" width="70.3314%" height="15" fill="rgb(253,30,16)" fg:x="0" fg:w="870"/><text x="0.2500%" y="719.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (870 samples, 70.33%)</title><rect x="0.0000%" y="693" width="70.3314%" height="15" fill="rgb(242,65,0)" fg:x="0" fg:w="870"/><text x="0.2500%" y="703.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (713 samples, 57.64%)</title><rect x="12.6920%" y="677" width="57.6395%" height="15" fill="rgb(235,201,12)" fg:x="157" fg:w="713"/><text x="12.9420%" y="687.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="70.1698%" y="661" width="0.1617%" height="15" fill="rgb(233,161,9)" fg:x="868" fg:w="2"/><text x="70.4198%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="70.1698%" y="645" width="0.1617%" height="15" fill="rgb(241,207,41)" fg:x="868" fg:w="2"/><text x="70.4198%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="70.1698%" y="629" width="0.1617%" height="15" fill="rgb(212,69,46)" fg:x="868" fg:w="2"/><text x="70.4198%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.1698%" y="613" width="0.1617%" height="15" fill="rgb(239,69,45)" fg:x="868" fg:w="2"/><text x="70.4198%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.1698%" y="597" width="0.1617%" height="15" fill="rgb(242,117,48)" fg:x="868" fg:w="2"/><text x="70.4198%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.2506%" y="581" width="0.0808%" height="15" fill="rgb(228,41,36)" fg:x="869" fg:w="1"/><text x="70.5006%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2506%" y="565" width="0.0808%" height="15" fill="rgb(212,3,32)" fg:x="869" fg:w="1"/><text x="70.5006%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2506%" y="549" width="0.0808%" height="15" fill="rgb(233,41,49)" fg:x="869" fg:w="1"/><text x="70.5006%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.2506%" y="533" width="0.0808%" height="15" fill="rgb(252,170,49)" fg:x="869" fg:w="1"/><text x="70.5006%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.2506%" y="517" width="0.0808%" height="15" fill="rgb(229,53,26)" fg:x="869" fg:w="1"/><text x="70.5006%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="70.3314%" y="661" width="0.0808%" height="15" fill="rgb(217,157,12)" fg:x="870" fg:w="1"/><text x="70.5814%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.3314%" y="645" width="0.0808%" height="15" fill="rgb(227,17,9)" fg:x="870" fg:w="1"/><text x="70.5814%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4123%" y="629" width="0.0808%" height="15" fill="rgb(218,84,12)" fg:x="871" fg:w="1"/><text x="70.6623%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="70.3314%" y="677" width="0.2425%" height="15" fill="rgb(212,79,24)" fg:x="870" fg:w="3"/><text x="70.5814%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (2 samples, 0.16%)</title><rect x="70.4123%" y="661" width="0.1617%" height="15" fill="rgb(217,222,37)" fg:x="871" fg:w="2"/><text x="70.6623%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.4123%" y="645" width="0.1617%" height="15" fill="rgb(246,208,8)" fg:x="871" fg:w="2"/><text x="70.6623%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="70.4931%" y="629" width="0.0808%" height="15" fill="rgb(244,133,10)" fg:x="872" fg:w="1"/><text x="70.7431%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.4931%" y="613" width="0.0808%" height="15" fill="rgb(209,219,41)" fg:x="872" fg:w="1"/><text x="70.7431%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.4931%" y="597" width="0.0808%" height="15" fill="rgb(253,175,45)" fg:x="872" fg:w="1"/><text x="70.7431%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.4931%" y="581" width="0.0808%" height="15" fill="rgb(235,100,37)" fg:x="872" fg:w="1"/><text x="70.7431%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.4931%" y="565" width="0.0808%" height="15" fill="rgb(225,87,19)" fg:x="872" fg:w="1"/><text x="70.7431%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.4931%" y="549" width="0.0808%" height="15" fill="rgb(217,152,17)" fg:x="872" fg:w="1"/><text x="70.7431%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.4931%" y="533" width="0.0808%" height="15" fill="rgb(235,72,13)" fg:x="872" fg:w="1"/><text x="70.7431%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4931%" y="517" width="0.0808%" height="15" fill="rgb(233,140,18)" fg:x="872" fg:w="1"/><text x="70.7431%" y="527.50"></text></g><g><title>engine::session::Session::initialize (4 samples, 0.32%)</title><rect x="70.6548%" y="629" width="0.3234%" height="15" fill="rgb(207,212,28)" fg:x="874" fg:w="4"/><text x="70.9048%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="70.6548%" y="613" width="0.3234%" height="15" fill="rgb(220,130,25)" fg:x="874" fg:w="4"/><text x="70.9048%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="70.6548%" y="597" width="0.3234%" height="15" fill="rgb(205,55,34)" fg:x="874" fg:w="4"/><text x="70.9048%" y="607.50"></text></g><g><title>libloading::safe::Library::new (3 samples, 0.24%)</title><rect x="70.7357%" y="581" width="0.2425%" height="15" fill="rgb(237,54,35)" fg:x="875" fg:w="3"/><text x="70.9857%" y="591.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="70.7357%" y="565" width="0.2425%" height="15" fill="rgb(208,67,23)" fg:x="875" fg:w="3"/><text x="70.9857%" y="575.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="70.7357%" y="549" width="0.2425%" height="15" fill="rgb(206,207,50)" fg:x="875" fg:w="3"/><text x="70.9857%" y="559.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="70.7357%" y="533" width="0.2425%" height="15" fill="rgb(213,211,42)" fg:x="875" fg:w="3"/><text x="70.9857%" y="543.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="70.7357%" y="517" width="0.2425%" height="15" fill="rgb(252,197,50)" fg:x="875" fg:w="3"/><text x="70.9857%" y="527.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="70.7357%" y="501" width="0.2425%" height="15" fill="rgb(251,211,41)" fg:x="875" fg:w="3"/><text x="70.9857%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.49%)</title><rect x="70.5740%" y="677" width="0.4850%" height="15" fill="rgb(229,211,5)" fg:x="873" fg:w="6"/><text x="70.8240%" y="687.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (6 samples, 0.49%)</title><rect x="70.5740%" y="661" width="0.4850%" height="15" fill="rgb(239,36,31)" fg:x="873" fg:w="6"/><text x="70.8240%" y="671.50"></text></g><g><title>engine::session::Session::new (5 samples, 0.40%)</title><rect x="70.6548%" y="645" width="0.4042%" height="15" fill="rgb(248,67,31)" fg:x="874" fg:w="5"/><text x="70.9048%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="70.9782%" y="629" width="0.0808%" height="15" fill="rgb(249,55,44)" fg:x="878" fg:w="1"/><text x="71.2282%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="70.9782%" y="613" width="0.0808%" height="15" fill="rgb(216,82,12)" fg:x="878" fg:w="1"/><text x="71.2282%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="71.0590%" y="549" width="0.1617%" height="15" fill="rgb(242,174,1)" fg:x="879" fg:w="2"/><text x="71.3090%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="71.0590%" y="533" width="0.1617%" height="15" fill="rgb(208,120,29)" fg:x="879" fg:w="2"/><text x="71.3090%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.1399%" y="517" width="0.0808%" height="15" fill="rgb(221,105,43)" fg:x="880" fg:w="1"/><text x="71.3899%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.1399%" y="501" width="0.0808%" height="15" fill="rgb(234,124,22)" fg:x="880" fg:w="1"/><text x="71.3899%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="71.0590%" y="565" width="0.2425%" height="15" fill="rgb(212,23,30)" fg:x="879" fg:w="3"/><text x="71.3090%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.2207%" y="549" width="0.0808%" height="15" fill="rgb(219,122,53)" fg:x="881" fg:w="1"/><text x="71.4707%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="71.0590%" y="581" width="0.3234%" height="15" fill="rgb(248,84,24)" fg:x="879" fg:w="4"/><text x="71.3090%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3015%" y="565" width="0.0808%" height="15" fill="rgb(245,115,18)" fg:x="882" fg:w="1"/><text x="71.5515%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3015%" y="549" width="0.0808%" height="15" fill="rgb(227,176,51)" fg:x="882" fg:w="1"/><text x="71.5515%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3015%" y="533" width="0.0808%" height="15" fill="rgb(229,63,42)" fg:x="882" fg:w="1"/><text x="71.5515%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.3015%" y="517" width="0.0808%" height="15" fill="rgb(247,202,24)" fg:x="882" fg:w="1"/><text x="71.5515%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.3015%" y="501" width="0.0808%" height="15" fill="rgb(244,173,20)" fg:x="882" fg:w="1"/><text x="71.5515%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.3015%" y="485" width="0.0808%" height="15" fill="rgb(242,81,47)" fg:x="882" fg:w="1"/><text x="71.5515%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="71.3015%" y="469" width="0.0808%" height="15" fill="rgb(231,185,54)" fg:x="882" fg:w="1"/><text x="71.5515%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.3824%" y="517" width="0.0808%" height="15" fill="rgb(243,55,32)" fg:x="883" fg:w="1"/><text x="71.6324%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3824%" y="581" width="0.1617%" height="15" fill="rgb(208,167,19)" fg:x="883" fg:w="2"/><text x="71.6324%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.3824%" y="565" width="0.1617%" height="15" fill="rgb(231,72,35)" fg:x="883" fg:w="2"/><text x="71.6324%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3824%" y="549" width="0.1617%" height="15" fill="rgb(250,173,51)" fg:x="883" fg:w="2"/><text x="71.6324%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.3824%" y="533" width="0.1617%" height="15" fill="rgb(209,5,22)" fg:x="883" fg:w="2"/><text x="71.6324%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4632%" y="517" width="0.0808%" height="15" fill="rgb(250,174,19)" fg:x="884" fg:w="1"/><text x="71.7132%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4632%" y="501" width="0.0808%" height="15" fill="rgb(217,3,49)" fg:x="884" fg:w="1"/><text x="71.7132%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4632%" y="485" width="0.0808%" height="15" fill="rgb(218,225,5)" fg:x="884" fg:w="1"/><text x="71.7132%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4632%" y="469" width="0.0808%" height="15" fill="rgb(236,89,11)" fg:x="884" fg:w="1"/><text x="71.7132%" y="479.50"></text></g><g><title>engine::session::Session::flush (8 samples, 0.65%)</title><rect x="71.0590%" y="661" width="0.6467%" height="15" fill="rgb(206,33,28)" fg:x="879" fg:w="8"/><text x="71.3090%" y="671.50"></text></g><g><title>engine::session::state::State::close (8 samples, 0.65%)</title><rect x="71.0590%" y="645" width="0.6467%" height="15" fill="rgb(241,56,42)" fg:x="879" fg:w="8"/><text x="71.3090%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (8 samples, 0.65%)</title><rect x="71.0590%" y="629" width="0.6467%" height="15" fill="rgb(222,44,11)" fg:x="879" fg:w="8"/><text x="71.3090%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (8 samples, 0.65%)</title><rect x="71.0590%" y="613" width="0.6467%" height="15" fill="rgb(234,111,20)" fg:x="879" fg:w="8"/><text x="71.3090%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (8 samples, 0.65%)</title><rect x="71.0590%" y="597" width="0.6467%" height="15" fill="rgb(237,77,6)" fg:x="879" fg:w="8"/><text x="71.3090%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="71.5441%" y="581" width="0.1617%" height="15" fill="rgb(235,111,23)" fg:x="885" fg:w="2"/><text x="71.7941%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="71.5441%" y="565" width="0.1617%" height="15" fill="rgb(251,135,29)" fg:x="885" fg:w="2"/><text x="71.7941%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.5441%" y="549" width="0.1617%" height="15" fill="rgb(217,57,1)" fg:x="885" fg:w="2"/><text x="71.7941%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.6249%" y="533" width="0.0808%" height="15" fill="rgb(249,119,31)" fg:x="886" fg:w="1"/><text x="71.8749%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="71.7866%" y="645" width="0.0808%" height="15" fill="rgb(233,164,33)" fg:x="888" fg:w="1"/><text x="72.0366%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="71.7866%" y="629" width="0.0808%" height="15" fill="rgb(250,217,43)" fg:x="888" fg:w="1"/><text x="72.0366%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="71.7866%" y="613" width="0.0808%" height="15" fill="rgb(232,154,50)" fg:x="888" fg:w="1"/><text x="72.0366%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.7866%" y="597" width="0.0808%" height="15" fill="rgb(227,190,8)" fg:x="888" fg:w="1"/><text x="72.0366%" y="607.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7866%" y="581" width="0.0808%" height="15" fill="rgb(209,217,32)" fg:x="888" fg:w="1"/><text x="72.0366%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7866%" y="565" width="0.0808%" height="15" fill="rgb(243,203,50)" fg:x="888" fg:w="1"/><text x="72.0366%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7866%" y="549" width="0.0808%" height="15" fill="rgb(232,152,27)" fg:x="888" fg:w="1"/><text x="72.0366%" y="559.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="71.8674%" y="629" width="0.0808%" height="15" fill="rgb(240,34,29)" fg:x="889" fg:w="1"/><text x="72.1174%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="71.8674%" y="613" width="0.0808%" height="15" fill="rgb(215,185,52)" fg:x="889" fg:w="1"/><text x="72.1174%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.8674%" y="597" width="0.0808%" height="15" fill="rgb(240,89,49)" fg:x="889" fg:w="1"/><text x="72.1174%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.8674%" y="581" width="0.0808%" height="15" fill="rgb(225,12,52)" fg:x="889" fg:w="1"/><text x="72.1174%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.8674%" y="565" width="0.0808%" height="15" fill="rgb(239,128,45)" fg:x="889" fg:w="1"/><text x="72.1174%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.8674%" y="549" width="0.0808%" height="15" fill="rgb(211,78,47)" fg:x="889" fg:w="1"/><text x="72.1174%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8674%" y="533" width="0.0808%" height="15" fill="rgb(232,31,21)" fg:x="889" fg:w="1"/><text x="72.1174%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.8674%" y="517" width="0.0808%" height="15" fill="rgb(222,168,14)" fg:x="889" fg:w="1"/><text x="72.1174%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8674%" y="501" width="0.0808%" height="15" fill="rgb(209,128,24)" fg:x="889" fg:w="1"/><text x="72.1174%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.8674%" y="485" width="0.0808%" height="15" fill="rgb(249,35,13)" fg:x="889" fg:w="1"/><text x="72.1174%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8674%" y="469" width="0.0808%" height="15" fill="rgb(218,7,2)" fg:x="889" fg:w="1"/><text x="72.1174%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.8674%" y="453" width="0.0808%" height="15" fill="rgb(238,107,27)" fg:x="889" fg:w="1"/><text x="72.1174%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8674%" y="437" width="0.0808%" height="15" fill="rgb(217,88,38)" fg:x="889" fg:w="1"/><text x="72.1174%" y="447.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="71.7057%" y="661" width="0.3234%" height="15" fill="rgb(230,207,0)" fg:x="887" fg:w="4"/><text x="71.9557%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="71.8674%" y="645" width="0.1617%" height="15" fill="rgb(249,64,54)" fg:x="889" fg:w="2"/><text x="72.1174%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="71.9483%" y="629" width="0.0808%" height="15" fill="rgb(231,7,11)" fg:x="890" fg:w="1"/><text x="72.1983%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="71.9483%" y="613" width="0.0808%" height="15" fill="rgb(205,149,21)" fg:x="890" fg:w="1"/><text x="72.1983%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="71.9483%" y="597" width="0.0808%" height="15" fill="rgb(215,126,34)" fg:x="890" fg:w="1"/><text x="72.1983%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.9483%" y="581" width="0.0808%" height="15" fill="rgb(241,132,45)" fg:x="890" fg:w="1"/><text x="72.1983%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.9483%" y="565" width="0.0808%" height="15" fill="rgb(252,69,32)" fg:x="890" fg:w="1"/><text x="72.1983%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.9483%" y="549" width="0.0808%" height="15" fill="rgb(232,204,19)" fg:x="890" fg:w="1"/><text x="72.1983%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.9483%" y="533" width="0.0808%" height="15" fill="rgb(249,15,47)" fg:x="890" fg:w="1"/><text x="72.1983%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.9483%" y="517" width="0.0808%" height="15" fill="rgb(209,227,23)" fg:x="890" fg:w="1"/><text x="72.1983%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.9483%" y="501" width="0.0808%" height="15" fill="rgb(248,92,24)" fg:x="890" fg:w="1"/><text x="72.1983%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.9483%" y="485" width="0.0808%" height="15" fill="rgb(247,59,2)" fg:x="890" fg:w="1"/><text x="72.1983%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.0291%" y="629" width="0.0808%" height="15" fill="rgb(221,30,5)" fg:x="891" fg:w="1"/><text x="72.2791%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.0291%" y="613" width="0.0808%" height="15" fill="rgb(208,108,53)" fg:x="891" fg:w="1"/><text x="72.2791%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.0291%" y="597" width="0.0808%" height="15" fill="rgb(211,183,26)" fg:x="891" fg:w="1"/><text x="72.2791%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.0291%" y="581" width="0.0808%" height="15" fill="rgb(232,132,4)" fg:x="891" fg:w="1"/><text x="72.2791%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0291%" y="565" width="0.0808%" height="15" fill="rgb(253,128,37)" fg:x="891" fg:w="1"/><text x="72.2791%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.0291%" y="549" width="0.0808%" height="15" fill="rgb(221,58,24)" fg:x="891" fg:w="1"/><text x="72.2791%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0291%" y="533" width="0.0808%" height="15" fill="rgb(230,54,45)" fg:x="891" fg:w="1"/><text x="72.2791%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.0291%" y="517" width="0.0808%" height="15" fill="rgb(254,21,18)" fg:x="891" fg:w="1"/><text x="72.2791%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0291%" y="501" width="0.0808%" height="15" fill="rgb(221,108,0)" fg:x="891" fg:w="1"/><text x="72.2791%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.0291%" y="485" width="0.0808%" height="15" fill="rgb(206,95,1)" fg:x="891" fg:w="1"/><text x="72.2791%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.0291%" y="469" width="0.0808%" height="15" fill="rgb(237,52,5)" fg:x="891" fg:w="1"/><text x="72.2791%" y="479.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="72.0291%" y="453" width="0.0808%" height="15" fill="rgb(218,150,34)" fg:x="891" fg:w="1"/><text x="72.2791%" y="463.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="72.0291%" y="661" width="0.1617%" height="15" fill="rgb(235,194,28)" fg:x="891" fg:w="2"/><text x="72.2791%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="72.0291%" y="645" width="0.1617%" height="15" fill="rgb(245,92,18)" fg:x="891" fg:w="2"/><text x="72.2791%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.1099%" y="629" width="0.0808%" height="15" fill="rgb(253,203,53)" fg:x="892" fg:w="1"/><text x="72.3599%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.1099%" y="613" width="0.0808%" height="15" fill="rgb(249,185,47)" fg:x="892" fg:w="1"/><text x="72.3599%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.1099%" y="597" width="0.0808%" height="15" fill="rgb(252,194,52)" fg:x="892" fg:w="1"/><text x="72.3599%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="72.1099%" y="581" width="0.0808%" height="15" fill="rgb(210,53,36)" fg:x="892" fg:w="1"/><text x="72.3599%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.1099%" y="565" width="0.0808%" height="15" fill="rgb(237,37,25)" fg:x="892" fg:w="1"/><text x="72.3599%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.1099%" y="549" width="0.0808%" height="15" fill="rgb(242,116,27)" fg:x="892" fg:w="1"/><text x="72.3599%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="72.1908%" y="645" width="0.0808%" height="15" fill="rgb(213,185,26)" fg:x="893" fg:w="1"/><text x="72.4408%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="72.1908%" y="629" width="0.0808%" height="15" fill="rgb(225,204,8)" fg:x="893" fg:w="1"/><text x="72.4408%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="72.1908%" y="613" width="0.0808%" height="15" fill="rgb(254,111,37)" fg:x="893" fg:w="1"/><text x="72.4408%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="72.1908%" y="597" width="0.0808%" height="15" fill="rgb(242,35,9)" fg:x="893" fg:w="1"/><text x="72.4408%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.1908%" y="581" width="0.0808%" height="15" fill="rgb(232,138,49)" fg:x="893" fg:w="1"/><text x="72.4408%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="72.2716%" y="597" width="0.0808%" height="15" fill="rgb(247,56,4)" fg:x="894" fg:w="1"/><text x="72.5216%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="72.2716%" y="581" width="0.0808%" height="15" fill="rgb(226,179,17)" fg:x="894" fg:w="1"/><text x="72.5216%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="72.2716%" y="565" width="0.0808%" height="15" fill="rgb(216,163,45)" fg:x="894" fg:w="1"/><text x="72.5216%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="72.2716%" y="549" width="0.0808%" height="15" fill="rgb(211,157,3)" fg:x="894" fg:w="1"/><text x="72.5216%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.2716%" y="533" width="0.0808%" height="15" fill="rgb(234,44,20)" fg:x="894" fg:w="1"/><text x="72.5216%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.2716%" y="517" width="0.0808%" height="15" fill="rgb(254,138,23)" fg:x="894" fg:w="1"/><text x="72.5216%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.2716%" y="501" width="0.0808%" height="15" fill="rgb(206,119,39)" fg:x="894" fg:w="1"/><text x="72.5216%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.2716%" y="485" width="0.0808%" height="15" fill="rgb(231,105,52)" fg:x="894" fg:w="1"/><text x="72.5216%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.2716%" y="469" width="0.0808%" height="15" fill="rgb(250,20,5)" fg:x="894" fg:w="1"/><text x="72.5216%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.2716%" y="453" width="0.0808%" height="15" fill="rgb(215,198,30)" fg:x="894" fg:w="1"/><text x="72.5216%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.2716%" y="437" width="0.0808%" height="15" fill="rgb(246,142,8)" fg:x="894" fg:w="1"/><text x="72.5216%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="72.3525%" y="549" width="0.0808%" height="15" fill="rgb(243,26,38)" fg:x="895" fg:w="1"/><text x="72.6025%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.3525%" y="533" width="0.0808%" height="15" fill="rgb(205,133,28)" fg:x="895" fg:w="1"/><text x="72.6025%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3525%" y="517" width="0.0808%" height="15" fill="rgb(212,34,0)" fg:x="895" fg:w="1"/><text x="72.6025%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3525%" y="501" width="0.0808%" height="15" fill="rgb(251,226,22)" fg:x="895" fg:w="1"/><text x="72.6025%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3525%" y="485" width="0.0808%" height="15" fill="rgb(252,119,9)" fg:x="895" fg:w="1"/><text x="72.6025%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3525%" y="469" width="0.0808%" height="15" fill="rgb(213,150,50)" fg:x="895" fg:w="1"/><text x="72.6025%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3525%" y="453" width="0.0808%" height="15" fill="rgb(212,24,39)" fg:x="895" fg:w="1"/><text x="72.6025%" y="463.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="72.3525%" y="565" width="0.1617%" height="15" fill="rgb(213,46,39)" fg:x="895" fg:w="2"/><text x="72.6025%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.4333%" y="549" width="0.0808%" height="15" fill="rgb(239,106,12)" fg:x="896" fg:w="1"/><text x="72.6833%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4333%" y="533" width="0.0808%" height="15" fill="rgb(249,229,21)" fg:x="896" fg:w="1"/><text x="72.6833%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.4333%" y="517" width="0.0808%" height="15" fill="rgb(212,158,3)" fg:x="896" fg:w="1"/><text x="72.6833%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4333%" y="501" width="0.0808%" height="15" fill="rgb(253,26,48)" fg:x="896" fg:w="1"/><text x="72.6833%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.4333%" y="485" width="0.0808%" height="15" fill="rgb(238,178,20)" fg:x="896" fg:w="1"/><text x="72.6833%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.4333%" y="469" width="0.0808%" height="15" fill="rgb(208,86,15)" fg:x="896" fg:w="1"/><text x="72.6833%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.4333%" y="453" width="0.0808%" height="15" fill="rgb(239,42,53)" fg:x="896" fg:w="1"/><text x="72.6833%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.4333%" y="437" width="0.0808%" height="15" fill="rgb(245,226,8)" fg:x="896" fg:w="1"/><text x="72.6833%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.4333%" y="421" width="0.0808%" height="15" fill="rgb(216,176,32)" fg:x="896" fg:w="1"/><text x="72.6833%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.4333%" y="405" width="0.0808%" height="15" fill="rgb(231,186,21)" fg:x="896" fg:w="1"/><text x="72.6833%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="72.3525%" y="581" width="0.2425%" height="15" fill="rgb(205,95,49)" fg:x="895" fg:w="3"/><text x="72.6025%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.5141%" y="565" width="0.0808%" height="15" fill="rgb(217,145,8)" fg:x="897" fg:w="1"/><text x="72.7641%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.5141%" y="549" width="0.0808%" height="15" fill="rgb(239,144,48)" fg:x="897" fg:w="1"/><text x="72.7641%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.5141%" y="533" width="0.0808%" height="15" fill="rgb(214,189,23)" fg:x="897" fg:w="1"/><text x="72.7641%" y="543.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="72.5141%" y="517" width="0.0808%" height="15" fill="rgb(229,157,17)" fg:x="897" fg:w="1"/><text x="72.7641%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="72.5141%" y="501" width="0.0808%" height="15" fill="rgb(230,5,48)" fg:x="897" fg:w="1"/><text x="72.7641%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5141%" y="485" width="0.0808%" height="15" fill="rgb(224,156,48)" fg:x="897" fg:w="1"/><text x="72.7641%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5141%" y="469" width="0.0808%" height="15" fill="rgb(223,14,29)" fg:x="897" fg:w="1"/><text x="72.7641%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5141%" y="453" width="0.0808%" height="15" fill="rgb(229,96,36)" fg:x="897" fg:w="1"/><text x="72.7641%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5141%" y="437" width="0.0808%" height="15" fill="rgb(231,102,53)" fg:x="897" fg:w="1"/><text x="72.7641%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.5141%" y="421" width="0.0808%" height="15" fill="rgb(210,77,38)" fg:x="897" fg:w="1"/><text x="72.7641%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5141%" y="405" width="0.0808%" height="15" fill="rgb(235,131,6)" fg:x="897" fg:w="1"/><text x="72.7641%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="72.2716%" y="645" width="0.4042%" height="15" fill="rgb(252,55,38)" fg:x="894" fg:w="5"/><text x="72.5216%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="72.2716%" y="629" width="0.4042%" height="15" fill="rgb(246,38,14)" fg:x="894" fg:w="5"/><text x="72.5216%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="72.2716%" y="613" width="0.4042%" height="15" fill="rgb(242,27,5)" fg:x="894" fg:w="5"/><text x="72.5216%" y="623.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.32%)</title><rect x="72.3525%" y="597" width="0.3234%" height="15" fill="rgb(228,65,35)" fg:x="895" fg:w="4"/><text x="72.6025%" y="607.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="72.5950%" y="581" width="0.0808%" height="15" fill="rgb(245,93,11)" fg:x="898" fg:w="1"/><text x="72.8450%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="72.5950%" y="565" width="0.0808%" height="15" fill="rgb(213,1,31)" fg:x="898" fg:w="1"/><text x="72.8450%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.5950%" y="549" width="0.0808%" height="15" fill="rgb(237,205,14)" fg:x="898" fg:w="1"/><text x="72.8450%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="72.5950%" y="533" width="0.0808%" height="15" fill="rgb(232,118,45)" fg:x="898" fg:w="1"/><text x="72.8450%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.5950%" y="517" width="0.0808%" height="15" fill="rgb(218,5,6)" fg:x="898" fg:w="1"/><text x="72.8450%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.5950%" y="501" width="0.0808%" height="15" fill="rgb(251,87,51)" fg:x="898" fg:w="1"/><text x="72.8450%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5950%" y="485" width="0.0808%" height="15" fill="rgb(207,225,20)" fg:x="898" fg:w="1"/><text x="72.8450%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5950%" y="469" width="0.0808%" height="15" fill="rgb(222,78,54)" fg:x="898" fg:w="1"/><text x="72.8450%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5950%" y="453" width="0.0808%" height="15" fill="rgb(232,85,16)" fg:x="898" fg:w="1"/><text x="72.8450%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5950%" y="437" width="0.0808%" height="15" fill="rgb(244,25,33)" fg:x="898" fg:w="1"/><text x="72.8450%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.5950%" y="421" width="0.0808%" height="15" fill="rgb(233,24,36)" fg:x="898" fg:w="1"/><text x="72.8450%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5950%" y="405" width="0.0808%" height="15" fill="rgb(253,49,54)" fg:x="898" fg:w="1"/><text x="72.8450%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5950%" y="389" width="0.0808%" height="15" fill="rgb(245,12,22)" fg:x="898" fg:w="1"/><text x="72.8450%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5950%" y="373" width="0.0808%" height="15" fill="rgb(253,141,28)" fg:x="898" fg:w="1"/><text x="72.8450%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.5950%" y="357" width="0.0808%" height="15" fill="rgb(225,207,27)" fg:x="898" fg:w="1"/><text x="72.8450%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.5950%" y="341" width="0.0808%" height="15" fill="rgb(220,84,2)" fg:x="898" fg:w="1"/><text x="72.8450%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5950%" y="325" width="0.0808%" height="15" fill="rgb(224,37,37)" fg:x="898" fg:w="1"/><text x="72.8450%" y="335.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="72.6758%" y="629" width="0.0808%" height="15" fill="rgb(220,143,18)" fg:x="899" fg:w="1"/><text x="72.9258%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6758%" y="613" width="0.0808%" height="15" fill="rgb(210,88,33)" fg:x="899" fg:w="1"/><text x="72.9258%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6758%" y="597" width="0.0808%" height="15" fill="rgb(219,87,51)" fg:x="899" fg:w="1"/><text x="72.9258%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.6758%" y="581" width="0.0808%" height="15" fill="rgb(211,7,35)" fg:x="899" fg:w="1"/><text x="72.9258%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.6758%" y="565" width="0.0808%" height="15" fill="rgb(232,77,2)" fg:x="899" fg:w="1"/><text x="72.9258%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.6758%" y="549" width="0.0808%" height="15" fill="rgb(249,94,25)" fg:x="899" fg:w="1"/><text x="72.9258%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.6758%" y="533" width="0.0808%" height="15" fill="rgb(215,112,2)" fg:x="899" fg:w="1"/><text x="72.9258%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.6758%" y="517" width="0.0808%" height="15" fill="rgb(226,115,48)" fg:x="899" fg:w="1"/><text x="72.9258%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.6758%" y="501" width="0.0808%" height="15" fill="rgb(249,196,10)" fg:x="899" fg:w="1"/><text x="72.9258%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.6758%" y="485" width="0.0808%" height="15" fill="rgb(237,109,14)" fg:x="899" fg:w="1"/><text x="72.9258%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.6758%" y="469" width="0.0808%" height="15" fill="rgb(217,103,53)" fg:x="899" fg:w="1"/><text x="72.9258%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.6758%" y="453" width="0.0808%" height="15" fill="rgb(244,137,9)" fg:x="899" fg:w="1"/><text x="72.9258%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6758%" y="437" width="0.0808%" height="15" fill="rgb(227,201,3)" fg:x="899" fg:w="1"/><text x="72.9258%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.7567%" y="533" width="0.0808%" height="15" fill="rgb(243,94,6)" fg:x="900" fg:w="1"/><text x="73.0067%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="72.8375%" y="517" width="0.1617%" height="15" fill="rgb(235,118,5)" fg:x="901" fg:w="2"/><text x="73.0875%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.9184%" y="501" width="0.0808%" height="15" fill="rgb(247,10,30)" fg:x="902" fg:w="1"/><text x="73.1684%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.9184%" y="485" width="0.0808%" height="15" fill="rgb(205,26,28)" fg:x="902" fg:w="1"/><text x="73.1684%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.9184%" y="469" width="0.0808%" height="15" fill="rgb(206,99,35)" fg:x="902" fg:w="1"/><text x="73.1684%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9992%" y="517" width="0.0808%" height="15" fill="rgb(238,130,40)" fg:x="903" fg:w="1"/><text x="73.2492%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.9992%" y="501" width="0.0808%" height="15" fill="rgb(224,126,31)" fg:x="903" fg:w="1"/><text x="73.2492%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="72.7567%" y="549" width="0.4850%" height="15" fill="rgb(254,105,17)" fg:x="900" fg:w="6"/><text x="73.0067%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="72.8375%" y="533" width="0.4042%" height="15" fill="rgb(216,87,36)" fg:x="901" fg:w="5"/><text x="73.0875%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.0800%" y="517" width="0.1617%" height="15" fill="rgb(240,21,12)" fg:x="904" fg:w="2"/><text x="73.3300%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.1609%" y="501" width="0.0808%" height="15" fill="rgb(245,192,34)" fg:x="905" fg:w="1"/><text x="73.4109%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.1609%" y="485" width="0.0808%" height="15" fill="rgb(226,100,49)" fg:x="905" fg:w="1"/><text x="73.4109%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.1609%" y="469" width="0.0808%" height="15" fill="rgb(245,188,27)" fg:x="905" fg:w="1"/><text x="73.4109%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.1609%" y="453" width="0.0808%" height="15" fill="rgb(212,170,8)" fg:x="905" fg:w="1"/><text x="73.4109%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.1609%" y="437" width="0.0808%" height="15" fill="rgb(217,113,29)" fg:x="905" fg:w="1"/><text x="73.4109%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.2417%" y="549" width="0.1617%" height="15" fill="rgb(237,30,3)" fg:x="906" fg:w="2"/><text x="73.4917%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="73.2417%" y="533" width="0.1617%" height="15" fill="rgb(227,19,28)" fg:x="906" fg:w="2"/><text x="73.4917%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4034%" y="501" width="0.0808%" height="15" fill="rgb(239,172,45)" fg:x="908" fg:w="1"/><text x="73.6534%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="73.4034%" y="485" width="0.0808%" height="15" fill="rgb(254,55,39)" fg:x="908" fg:w="1"/><text x="73.6534%" y="495.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.89%)</title><rect x="72.6758%" y="645" width="0.8892%" height="15" fill="rgb(249,208,12)" fg:x="899" fg:w="11"/><text x="72.9258%" y="655.50"></text></g><g><title>engine::session::Session::save_changes (10 samples, 0.81%)</title><rect x="72.7567%" y="629" width="0.8084%" height="15" fill="rgb(240,52,13)" fg:x="900" fg:w="10"/><text x="73.0067%" y="639.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.81%)</title><rect x="72.7567%" y="613" width="0.8084%" height="15" fill="rgb(252,149,13)" fg:x="900" fg:w="10"/><text x="73.0067%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.81%)</title><rect x="72.7567%" y="597" width="0.8084%" height="15" fill="rgb(232,81,48)" fg:x="900" fg:w="10"/><text x="73.0067%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (10 samples, 0.81%)</title><rect x="72.7567%" y="581" width="0.8084%" height="15" fill="rgb(222,144,2)" fg:x="900" fg:w="10"/><text x="73.0067%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.81%)</title><rect x="72.7567%" y="565" width="0.8084%" height="15" fill="rgb(216,81,32)" fg:x="900" fg:w="10"/><text x="73.0067%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="73.4034%" y="549" width="0.1617%" height="15" fill="rgb(244,78,51)" fg:x="908" fg:w="2"/><text x="73.6534%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="73.4034%" y="533" width="0.1617%" height="15" fill="rgb(217,66,21)" fg:x="908" fg:w="2"/><text x="73.6534%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="73.4034%" y="517" width="0.1617%" height="15" fill="rgb(247,101,42)" fg:x="908" fg:w="2"/><text x="73.6534%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.4842%" y="501" width="0.0808%" height="15" fill="rgb(227,81,39)" fg:x="909" fg:w="1"/><text x="73.7342%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="73.4842%" y="485" width="0.0808%" height="15" fill="rgb(220,223,44)" fg:x="909" fg:w="1"/><text x="73.7342%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.4842%" y="469" width="0.0808%" height="15" fill="rgb(205,218,2)" fg:x="909" fg:w="1"/><text x="73.7342%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4842%" y="453" width="0.0808%" height="15" fill="rgb(212,207,28)" fg:x="909" fg:w="1"/><text x="73.7342%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.4842%" y="437" width="0.0808%" height="15" fill="rgb(224,12,41)" fg:x="909" fg:w="1"/><text x="73.7342%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4842%" y="421" width="0.0808%" height="15" fill="rgb(216,118,12)" fg:x="909" fg:w="1"/><text x="73.7342%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.4842%" y="405" width="0.0808%" height="15" fill="rgb(252,97,46)" fg:x="909" fg:w="1"/><text x="73.7342%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.4842%" y="389" width="0.0808%" height="15" fill="rgb(244,206,19)" fg:x="909" fg:w="1"/><text x="73.7342%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.5651%" y="613" width="0.0808%" height="15" fill="rgb(231,84,31)" fg:x="910" fg:w="1"/><text x="73.8151%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.5651%" y="597" width="0.0808%" height="15" fill="rgb(244,133,0)" fg:x="910" fg:w="1"/><text x="73.8151%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.5651%" y="581" width="0.0808%" height="15" fill="rgb(223,15,50)" fg:x="910" fg:w="1"/><text x="73.8151%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5651%" y="565" width="0.0808%" height="15" fill="rgb(250,118,49)" fg:x="910" fg:w="1"/><text x="73.8151%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5651%" y="549" width="0.0808%" height="15" fill="rgb(248,25,38)" fg:x="910" fg:w="1"/><text x="73.8151%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5651%" y="533" width="0.0808%" height="15" fill="rgb(215,70,14)" fg:x="910" fg:w="1"/><text x="73.8151%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5651%" y="517" width="0.0808%" height="15" fill="rgb(215,28,15)" fg:x="910" fg:w="1"/><text x="73.8151%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="73.5651%" y="629" width="0.1617%" height="15" fill="rgb(243,6,28)" fg:x="910" fg:w="2"/><text x="73.8151%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.6459%" y="613" width="0.0808%" height="15" fill="rgb(222,130,1)" fg:x="911" fg:w="1"/><text x="73.8959%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6459%" y="597" width="0.0808%" height="15" fill="rgb(236,166,44)" fg:x="911" fg:w="1"/><text x="73.8959%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="73.7268%" y="613" width="0.1617%" height="15" fill="rgb(221,108,14)" fg:x="912" fg:w="2"/><text x="73.9768%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="73.7268%" y="597" width="0.1617%" height="15" fill="rgb(252,3,45)" fg:x="912" fg:w="2"/><text x="73.9768%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="73.7268%" y="581" width="0.1617%" height="15" fill="rgb(237,68,30)" fg:x="912" fg:w="2"/><text x="73.9768%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="73.7268%" y="565" width="0.1617%" height="15" fill="rgb(211,79,22)" fg:x="912" fg:w="2"/><text x="73.9768%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="73.7268%" y="549" width="0.1617%" height="15" fill="rgb(252,185,21)" fg:x="912" fg:w="2"/><text x="73.9768%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.7268%" y="533" width="0.1617%" height="15" fill="rgb(225,189,26)" fg:x="912" fg:w="2"/><text x="73.9768%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.7268%" y="517" width="0.1617%" height="15" fill="rgb(241,30,40)" fg:x="912" fg:w="2"/><text x="73.9768%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.7268%" y="501" width="0.1617%" height="15" fill="rgb(235,215,44)" fg:x="912" fg:w="2"/><text x="73.9768%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.7268%" y="485" width="0.1617%" height="15" fill="rgb(205,8,29)" fg:x="912" fg:w="2"/><text x="73.9768%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.7268%" y="469" width="0.1617%" height="15" fill="rgb(241,137,42)" fg:x="912" fg:w="2"/><text x="73.9768%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.8884%" y="565" width="0.0808%" height="15" fill="rgb(237,155,2)" fg:x="914" fg:w="1"/><text x="74.1384%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.49%)</title><rect x="73.5651%" y="645" width="0.4850%" height="15" fill="rgb(245,29,42)" fg:x="910" fg:w="6"/><text x="73.8151%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="73.7268%" y="629" width="0.3234%" height="15" fill="rgb(234,101,35)" fg:x="912" fg:w="4"/><text x="73.9768%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="73.8884%" y="613" width="0.1617%" height="15" fill="rgb(228,64,37)" fg:x="914" fg:w="2"/><text x="74.1384%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="73.8884%" y="597" width="0.1617%" height="15" fill="rgb(217,214,36)" fg:x="914" fg:w="2"/><text x="74.1384%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="73.8884%" y="581" width="0.1617%" height="15" fill="rgb(243,70,3)" fg:x="914" fg:w="2"/><text x="74.1384%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.9693%" y="565" width="0.0808%" height="15" fill="rgb(253,158,52)" fg:x="915" fg:w="1"/><text x="74.2193%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.9693%" y="549" width="0.0808%" height="15" fill="rgb(234,111,54)" fg:x="915" fg:w="1"/><text x="74.2193%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.9693%" y="533" width="0.0808%" height="15" fill="rgb(217,70,32)" fg:x="915" fg:w="1"/><text x="74.2193%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9693%" y="517" width="0.0808%" height="15" fill="rgb(234,18,33)" fg:x="915" fg:w="1"/><text x="74.2193%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9693%" y="501" width="0.0808%" height="15" fill="rgb(234,12,49)" fg:x="915" fg:w="1"/><text x="74.2193%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9693%" y="485" width="0.0808%" height="15" fill="rgb(236,10,21)" fg:x="915" fg:w="1"/><text x="74.2193%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.9693%" y="469" width="0.0808%" height="15" fill="rgb(248,182,45)" fg:x="915" fg:w="1"/><text x="74.2193%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.9693%" y="453" width="0.0808%" height="15" fill="rgb(217,95,36)" fg:x="915" fg:w="1"/><text x="74.2193%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.9693%" y="437" width="0.0808%" height="15" fill="rgb(212,110,31)" fg:x="915" fg:w="1"/><text x="74.2193%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9693%" y="421" width="0.0808%" height="15" fill="rgb(206,32,53)" fg:x="915" fg:w="1"/><text x="74.2193%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9693%" y="405" width="0.0808%" height="15" fill="rgb(246,141,37)" fg:x="915" fg:w="1"/><text x="74.2193%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.9693%" y="389" width="0.0808%" height="15" fill="rgb(219,16,7)" fg:x="915" fg:w="1"/><text x="74.2193%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.9693%" y="373" width="0.0808%" height="15" fill="rgb(230,205,45)" fg:x="915" fg:w="1"/><text x="74.2193%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.9693%" y="357" width="0.0808%" height="15" fill="rgb(231,43,49)" fg:x="915" fg:w="1"/><text x="74.2193%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.9693%" y="341" width="0.0808%" height="15" fill="rgb(212,106,34)" fg:x="915" fg:w="1"/><text x="74.2193%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9693%" y="325" width="0.0808%" height="15" fill="rgb(206,83,17)" fg:x="915" fg:w="1"/><text x="74.2193%" y="335.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (24 samples, 1.94%)</title><rect x="72.1908%" y="661" width="1.9402%" height="15" fill="rgb(244,154,49)" fg:x="893" fg:w="24"/><text x="72.4408%" y="671.50">p..</text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="74.0501%" y="645" width="0.0808%" height="15" fill="rgb(244,149,49)" fg:x="916" fg:w="1"/><text x="74.3001%" y="655.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="74.0501%" y="629" width="0.0808%" height="15" fill="rgb(227,134,18)" fg:x="916" fg:w="1"/><text x="74.3001%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="74.0501%" y="613" width="0.0808%" height="15" fill="rgb(237,116,36)" fg:x="916" fg:w="1"/><text x="74.3001%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0501%" y="597" width="0.0808%" height="15" fill="rgb(205,129,40)" fg:x="916" fg:w="1"/><text x="74.3001%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.0501%" y="581" width="0.0808%" height="15" fill="rgb(236,178,4)" fg:x="916" fg:w="1"/><text x="74.3001%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.0501%" y="565" width="0.0808%" height="15" fill="rgb(251,76,53)" fg:x="916" fg:w="1"/><text x="74.3001%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="74.1310%" y="613" width="0.0808%" height="15" fill="rgb(242,92,40)" fg:x="917" fg:w="1"/><text x="74.3810%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="74.1310%" y="597" width="0.0808%" height="15" fill="rgb(209,45,30)" fg:x="917" fg:w="1"/><text x="74.3810%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.1310%" y="581" width="0.0808%" height="15" fill="rgb(218,157,36)" fg:x="917" fg:w="1"/><text x="74.3810%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.1310%" y="565" width="0.0808%" height="15" fill="rgb(222,186,16)" fg:x="917" fg:w="1"/><text x="74.3810%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.1310%" y="549" width="0.0808%" height="15" fill="rgb(254,72,35)" fg:x="917" fg:w="1"/><text x="74.3810%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.1310%" y="533" width="0.0808%" height="15" fill="rgb(224,25,35)" fg:x="917" fg:w="1"/><text x="74.3810%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="74.1310%" y="517" width="0.0808%" height="15" fill="rgb(206,135,52)" fg:x="917" fg:w="1"/><text x="74.3810%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="74.1310%" y="501" width="0.0808%" height="15" fill="rgb(229,174,47)" fg:x="917" fg:w="1"/><text x="74.3810%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.1310%" y="485" width="0.0808%" height="15" fill="rgb(242,184,21)" fg:x="917" fg:w="1"/><text x="74.3810%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.1310%" y="469" width="0.0808%" height="15" fill="rgb(213,22,45)" fg:x="917" fg:w="1"/><text x="74.3810%" y="479.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="74.1310%" y="453" width="0.0808%" height="15" fill="rgb(237,81,54)" fg:x="917" fg:w="1"/><text x="74.3810%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="74.1310%" y="661" width="0.1617%" height="15" fill="rgb(248,177,18)" fg:x="917" fg:w="2"/><text x="74.3810%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="74.1310%" y="645" width="0.1617%" height="15" fill="rgb(254,31,16)" fg:x="917" fg:w="2"/><text x="74.3810%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="74.1310%" y="629" width="0.1617%" height="15" fill="rgb(235,20,31)" fg:x="917" fg:w="2"/><text x="74.3810%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.2118%" y="613" width="0.0808%" height="15" fill="rgb(240,56,43)" fg:x="918" fg:w="1"/><text x="74.4618%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.2118%" y="597" width="0.0808%" height="15" fill="rgb(237,197,51)" fg:x="918" fg:w="1"/><text x="74.4618%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="74.2118%" y="581" width="0.0808%" height="15" fill="rgb(241,162,44)" fg:x="918" fg:w="1"/><text x="74.4618%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="74.2118%" y="565" width="0.0808%" height="15" fill="rgb(224,23,20)" fg:x="918" fg:w="1"/><text x="74.4618%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="74.2118%" y="549" width="0.0808%" height="15" fill="rgb(250,109,34)" fg:x="918" fg:w="1"/><text x="74.4618%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2118%" y="533" width="0.0808%" height="15" fill="rgb(214,175,50)" fg:x="918" fg:w="1"/><text x="74.4618%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.2118%" y="517" width="0.0808%" height="15" fill="rgb(213,182,5)" fg:x="918" fg:w="1"/><text x="74.4618%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2118%" y="501" width="0.0808%" height="15" fill="rgb(209,199,19)" fg:x="918" fg:w="1"/><text x="74.4618%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.2118%" y="485" width="0.0808%" height="15" fill="rgb(236,224,42)" fg:x="918" fg:w="1"/><text x="74.4618%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2118%" y="469" width="0.0808%" height="15" fill="rgb(246,226,29)" fg:x="918" fg:w="1"/><text x="74.4618%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2118%" y="453" width="0.0808%" height="15" fill="rgb(227,223,11)" fg:x="918" fg:w="1"/><text x="74.4618%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2118%" y="437" width="0.0808%" height="15" fill="rgb(219,7,51)" fg:x="918" fg:w="1"/><text x="74.4618%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (42 samples, 3.40%)</title><rect x="71.0590%" y="677" width="3.3953%" height="15" fill="rgb(245,167,10)" fg:x="879" fg:w="42"/><text x="71.3090%" y="687.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="74.2926%" y="661" width="0.1617%" height="15" fill="rgb(237,224,16)" fg:x="919" fg:w="2"/><text x="74.5426%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="74.2926%" y="645" width="0.1617%" height="15" fill="rgb(226,132,13)" fg:x="919" fg:w="2"/><text x="74.5426%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="74.2926%" y="629" width="0.1617%" height="15" fill="rgb(214,140,3)" fg:x="919" fg:w="2"/><text x="74.5426%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="74.2926%" y="613" width="0.1617%" height="15" fill="rgb(221,177,4)" fg:x="919" fg:w="2"/><text x="74.5426%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="74.2926%" y="597" width="0.1617%" height="15" fill="rgb(238,139,3)" fg:x="919" fg:w="2"/><text x="74.5426%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3735%" y="581" width="0.0808%" height="15" fill="rgb(216,17,39)" fg:x="920" fg:w="1"/><text x="74.6235%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3735%" y="565" width="0.0808%" height="15" fill="rgb(238,120,9)" fg:x="920" fg:w="1"/><text x="74.6235%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3735%" y="549" width="0.0808%" height="15" fill="rgb(244,92,53)" fg:x="920" fg:w="1"/><text x="74.6235%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3735%" y="533" width="0.0808%" height="15" fill="rgb(224,148,33)" fg:x="920" fg:w="1"/><text x="74.6235%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.3735%" y="517" width="0.0808%" height="15" fill="rgb(243,6,36)" fg:x="920" fg:w="1"/><text x="74.6235%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3735%" y="501" width="0.0808%" height="15" fill="rgb(230,102,11)" fg:x="920" fg:w="1"/><text x="74.6235%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3735%" y="485" width="0.0808%" height="15" fill="rgb(234,148,36)" fg:x="920" fg:w="1"/><text x="74.6235%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3735%" y="469" width="0.0808%" height="15" fill="rgb(251,153,25)" fg:x="920" fg:w="1"/><text x="74.6235%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3735%" y="453" width="0.0808%" height="15" fill="rgb(215,129,8)" fg:x="920" fg:w="1"/><text x="74.6235%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3735%" y="437" width="0.0808%" height="15" fill="rgb(224,128,35)" fg:x="920" fg:w="1"/><text x="74.6235%" y="447.50"></text></g><g><title>&lt;kernel::session::SetSession as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.4543%" y="661" width="0.0808%" height="15" fill="rgb(237,56,52)" fg:x="921" fg:w="1"/><text x="74.7043%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.5352%" y="549" width="0.0808%" height="15" fill="rgb(234,213,19)" fg:x="922" fg:w="1"/><text x="74.7852%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.5352%" y="565" width="0.1617%" height="15" fill="rgb(252,82,23)" fg:x="922" fg:w="2"/><text x="74.7852%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.6160%" y="549" width="0.0808%" height="15" fill="rgb(254,201,21)" fg:x="923" fg:w="1"/><text x="74.8660%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.6160%" y="533" width="0.0808%" height="15" fill="rgb(250,186,11)" fg:x="923" fg:w="1"/><text x="74.8660%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.6160%" y="517" width="0.0808%" height="15" fill="rgb(211,174,5)" fg:x="923" fg:w="1"/><text x="74.8660%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.6160%" y="501" width="0.0808%" height="15" fill="rgb(214,121,10)" fg:x="923" fg:w="1"/><text x="74.8660%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.6160%" y="485" width="0.0808%" height="15" fill="rgb(241,66,2)" fg:x="923" fg:w="1"/><text x="74.8660%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="74.5352%" y="597" width="0.2425%" height="15" fill="rgb(220,167,19)" fg:x="922" fg:w="3"/><text x="74.7852%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.5352%" y="581" width="0.2425%" height="15" fill="rgb(231,54,50)" fg:x="922" fg:w="3"/><text x="74.7852%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.6968%" y="565" width="0.0808%" height="15" fill="rgb(239,217,53)" fg:x="924" fg:w="1"/><text x="74.9468%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.6968%" y="549" width="0.0808%" height="15" fill="rgb(248,8,0)" fg:x="924" fg:w="1"/><text x="74.9468%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.6968%" y="533" width="0.0808%" height="15" fill="rgb(229,118,37)" fg:x="924" fg:w="1"/><text x="74.9468%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7777%" y="485" width="0.0808%" height="15" fill="rgb(253,223,43)" fg:x="925" fg:w="1"/><text x="75.0277%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8585%" y="453" width="0.0808%" height="15" fill="rgb(211,77,36)" fg:x="926" fg:w="1"/><text x="75.1085%" y="463.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="74.7777%" y="581" width="0.2425%" height="15" fill="rgb(219,3,53)" fg:x="925" fg:w="3"/><text x="75.0277%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.7777%" y="565" width="0.2425%" height="15" fill="rgb(244,45,42)" fg:x="925" fg:w="3"/><text x="75.0277%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="74.7777%" y="549" width="0.2425%" height="15" fill="rgb(225,95,27)" fg:x="925" fg:w="3"/><text x="75.0277%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.7777%" y="533" width="0.2425%" height="15" fill="rgb(207,74,8)" fg:x="925" fg:w="3"/><text x="75.0277%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.7777%" y="517" width="0.2425%" height="15" fill="rgb(243,63,36)" fg:x="925" fg:w="3"/><text x="75.0277%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.7777%" y="501" width="0.2425%" height="15" fill="rgb(211,180,12)" fg:x="925" fg:w="3"/><text x="75.0277%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.8585%" y="485" width="0.1617%" height="15" fill="rgb(254,166,49)" fg:x="926" fg:w="2"/><text x="75.1085%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.8585%" y="469" width="0.1617%" height="15" fill="rgb(205,19,0)" fg:x="926" fg:w="2"/><text x="75.1085%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.9394%" y="453" width="0.0808%" height="15" fill="rgb(224,172,32)" fg:x="927" fg:w="1"/><text x="75.1894%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1011%" y="549" width="0.0808%" height="15" fill="rgb(254,136,30)" fg:x="929" fg:w="1"/><text x="75.3511%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1011%" y="533" width="0.0808%" height="15" fill="rgb(246,19,35)" fg:x="929" fg:w="1"/><text x="75.3511%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.1011%" y="517" width="0.0808%" height="15" fill="rgb(219,24,36)" fg:x="929" fg:w="1"/><text x="75.3511%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2627%" y="501" width="0.0808%" height="15" fill="rgb(251,55,1)" fg:x="931" fg:w="1"/><text x="75.5127%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2627%" y="485" width="0.0808%" height="15" fill="rgb(218,117,39)" fg:x="931" fg:w="1"/><text x="75.5127%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2627%" y="469" width="0.0808%" height="15" fill="rgb(248,169,11)" fg:x="931" fg:w="1"/><text x="75.5127%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3436%" y="453" width="0.0808%" height="15" fill="rgb(244,40,44)" fg:x="932" fg:w="1"/><text x="75.5936%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="75.3436%" y="501" width="0.1617%" height="15" fill="rgb(234,62,37)" fg:x="932" fg:w="2"/><text x="75.5936%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.3436%" y="485" width="0.1617%" height="15" fill="rgb(207,117,42)" fg:x="932" fg:w="2"/><text x="75.5936%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.3436%" y="469" width="0.1617%" height="15" fill="rgb(213,43,2)" fg:x="932" fg:w="2"/><text x="75.5936%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4244%" y="453" width="0.0808%" height="15" fill="rgb(244,202,51)" fg:x="933" fg:w="1"/><text x="75.6744%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="75.0202%" y="581" width="0.6467%" height="15" fill="rgb(253,174,46)" fg:x="928" fg:w="8"/><text x="75.2702%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="75.0202%" y="565" width="0.6467%" height="15" fill="rgb(251,23,1)" fg:x="928" fg:w="8"/><text x="75.2702%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="75.1819%" y="549" width="0.4850%" height="15" fill="rgb(253,26,1)" fg:x="930" fg:w="6"/><text x="75.4319%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="75.2627%" y="533" width="0.4042%" height="15" fill="rgb(216,89,31)" fg:x="931" fg:w="5"/><text x="75.5127%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="75.2627%" y="517" width="0.4042%" height="15" fill="rgb(209,109,5)" fg:x="931" fg:w="5"/><text x="75.5127%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.5053%" y="501" width="0.1617%" height="15" fill="rgb(229,63,13)" fg:x="934" fg:w="2"/><text x="75.7553%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.5053%" y="485" width="0.1617%" height="15" fill="rgb(238,137,54)" fg:x="934" fg:w="2"/><text x="75.7553%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.5053%" y="469" width="0.1617%" height="15" fill="rgb(228,1,9)" fg:x="934" fg:w="2"/><text x="75.7553%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.5053%" y="453" width="0.1617%" height="15" fill="rgb(249,120,48)" fg:x="934" fg:w="2"/><text x="75.7553%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.5053%" y="437" width="0.1617%" height="15" fill="rgb(209,72,36)" fg:x="934" fg:w="2"/><text x="75.7553%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.5053%" y="421" width="0.1617%" height="15" fill="rgb(247,98,49)" fg:x="934" fg:w="2"/><text x="75.7553%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.6669%" y="437" width="0.0808%" height="15" fill="rgb(233,75,36)" fg:x="936" fg:w="1"/><text x="75.9169%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.6669%" y="421" width="0.0808%" height="15" fill="rgb(225,14,24)" fg:x="936" fg:w="1"/><text x="75.9169%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.6669%" y="405" width="0.0808%" height="15" fill="rgb(237,193,20)" fg:x="936" fg:w="1"/><text x="75.9169%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6669%" y="389" width="0.0808%" height="15" fill="rgb(239,122,19)" fg:x="936" fg:w="1"/><text x="75.9169%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7478%" y="421" width="0.0808%" height="15" fill="rgb(231,220,10)" fg:x="937" fg:w="1"/><text x="75.9978%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7478%" y="405" width="0.0808%" height="15" fill="rgb(220,66,15)" fg:x="937" fg:w="1"/><text x="75.9978%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7478%" y="389" width="0.0808%" height="15" fill="rgb(215,171,52)" fg:x="937" fg:w="1"/><text x="75.9978%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7478%" y="373" width="0.0808%" height="15" fill="rgb(241,169,50)" fg:x="937" fg:w="1"/><text x="75.9978%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.7478%" y="357" width="0.0808%" height="15" fill="rgb(236,189,0)" fg:x="937" fg:w="1"/><text x="75.9978%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.7478%" y="341" width="0.0808%" height="15" fill="rgb(217,147,20)" fg:x="937" fg:w="1"/><text x="75.9978%" y="351.50"></text></g><g><title>engine::session::Session::close (18 samples, 1.46%)</title><rect x="74.4543%" y="677" width="1.4551%" height="15" fill="rgb(206,188,39)" fg:x="921" fg:w="18"/><text x="74.7043%" y="687.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.37%)</title><rect x="74.5352%" y="661" width="1.3743%" height="15" fill="rgb(227,118,25)" fg:x="922" fg:w="17"/><text x="74.7852%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.37%)</title><rect x="74.5352%" y="645" width="1.3743%" height="15" fill="rgb(248,171,40)" fg:x="922" fg:w="17"/><text x="74.7852%" y="655.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (17 samples, 1.37%)</title><rect x="74.5352%" y="629" width="1.3743%" height="15" fill="rgb(251,90,54)" fg:x="922" fg:w="17"/><text x="74.7852%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.37%)</title><rect x="74.5352%" y="613" width="1.3743%" height="15" fill="rgb(234,11,46)" fg:x="922" fg:w="17"/><text x="74.7852%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.13%)</title><rect x="74.7777%" y="597" width="1.1318%" height="15" fill="rgb(229,134,13)" fg:x="925" fg:w="14"/><text x="75.0277%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="75.6669%" y="581" width="0.2425%" height="15" fill="rgb(223,129,3)" fg:x="936" fg:w="3"/><text x="75.9169%" y="591.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="75.6669%" y="565" width="0.2425%" height="15" fill="rgb(221,124,13)" fg:x="936" fg:w="3"/><text x="75.9169%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.6669%" y="549" width="0.2425%" height="15" fill="rgb(234,3,18)" fg:x="936" fg:w="3"/><text x="75.9169%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.6669%" y="533" width="0.2425%" height="15" fill="rgb(249,199,20)" fg:x="936" fg:w="3"/><text x="75.9169%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.6669%" y="517" width="0.2425%" height="15" fill="rgb(224,134,6)" fg:x="936" fg:w="3"/><text x="75.9169%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.6669%" y="501" width="0.2425%" height="15" fill="rgb(254,83,26)" fg:x="936" fg:w="3"/><text x="75.9169%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.6669%" y="485" width="0.2425%" height="15" fill="rgb(217,88,9)" fg:x="936" fg:w="3"/><text x="75.9169%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="75.6669%" y="469" width="0.2425%" height="15" fill="rgb(225,73,2)" fg:x="936" fg:w="3"/><text x="75.9169%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="75.6669%" y="453" width="0.2425%" height="15" fill="rgb(226,44,39)" fg:x="936" fg:w="3"/><text x="75.9169%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7478%" y="437" width="0.1617%" height="15" fill="rgb(228,53,17)" fg:x="937" fg:w="2"/><text x="75.9978%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.8286%" y="421" width="0.0808%" height="15" fill="rgb(212,27,27)" fg:x="938" fg:w="1"/><text x="76.0786%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8286%" y="405" width="0.0808%" height="15" fill="rgb(241,50,6)" fg:x="938" fg:w="1"/><text x="76.0786%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="75.9903%" y="485" width="0.0808%" height="15" fill="rgb(225,28,51)" fg:x="940" fg:w="1"/><text x="76.2403%" y="495.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="75.9903%" y="469" width="0.0808%" height="15" fill="rgb(215,33,16)" fg:x="940" fg:w="1"/><text x="76.2403%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.9903%" y="453" width="0.0808%" height="15" fill="rgb(243,40,39)" fg:x="940" fg:w="1"/><text x="76.2403%" y="463.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.9903%" y="437" width="0.0808%" height="15" fill="rgb(225,11,42)" fg:x="940" fg:w="1"/><text x="76.2403%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.9903%" y="421" width="0.0808%" height="15" fill="rgb(241,220,38)" fg:x="940" fg:w="1"/><text x="76.2403%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9903%" y="405" width="0.0808%" height="15" fill="rgb(244,52,35)" fg:x="940" fg:w="1"/><text x="76.2403%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9903%" y="389" width="0.0808%" height="15" fill="rgb(246,42,46)" fg:x="940" fg:w="1"/><text x="76.2403%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9903%" y="373" width="0.0808%" height="15" fill="rgb(205,184,13)" fg:x="940" fg:w="1"/><text x="76.2403%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9903%" y="357" width="0.0808%" height="15" fill="rgb(209,48,36)" fg:x="940" fg:w="1"/><text x="76.2403%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.9903%" y="341" width="0.0808%" height="15" fill="rgb(244,34,51)" fg:x="940" fg:w="1"/><text x="76.2403%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9903%" y="325" width="0.0808%" height="15" fill="rgb(221,107,33)" fg:x="940" fg:w="1"/><text x="76.2403%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9903%" y="309" width="0.0808%" height="15" fill="rgb(224,203,12)" fg:x="940" fg:w="1"/><text x="76.2403%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9903%" y="293" width="0.0808%" height="15" fill="rgb(230,215,18)" fg:x="940" fg:w="1"/><text x="76.2403%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0711%" y="341" width="0.0808%" height="15" fill="rgb(206,185,35)" fg:x="941" fg:w="1"/><text x="76.3211%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.0711%" y="325" width="0.0808%" height="15" fill="rgb(228,140,34)" fg:x="941" fg:w="1"/><text x="76.3211%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0711%" y="309" width="0.0808%" height="15" fill="rgb(208,93,13)" fg:x="941" fg:w="1"/><text x="76.3211%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.0711%" y="293" width="0.0808%" height="15" fill="rgb(221,193,39)" fg:x="941" fg:w="1"/><text x="76.3211%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0711%" y="277" width="0.0808%" height="15" fill="rgb(241,132,34)" fg:x="941" fg:w="1"/><text x="76.3211%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.0711%" y="261" width="0.0808%" height="15" fill="rgb(221,141,10)" fg:x="941" fg:w="1"/><text x="76.3211%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0711%" y="245" width="0.0808%" height="15" fill="rgb(226,90,31)" fg:x="941" fg:w="1"/><text x="76.3211%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2328%" y="309" width="0.0808%" height="15" fill="rgb(243,75,5)" fg:x="943" fg:w="1"/><text x="76.4828%" y="319.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="76.0711%" y="469" width="0.3234%" height="15" fill="rgb(227,156,21)" fg:x="941" fg:w="4"/><text x="76.3211%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="76.0711%" y="453" width="0.3234%" height="15" fill="rgb(250,195,8)" fg:x="941" fg:w="4"/><text x="76.3211%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="76.0711%" y="437" width="0.3234%" height="15" fill="rgb(220,134,5)" fg:x="941" fg:w="4"/><text x="76.3211%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="76.0711%" y="421" width="0.3234%" height="15" fill="rgb(246,106,34)" fg:x="941" fg:w="4"/><text x="76.3211%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="76.0711%" y="405" width="0.3234%" height="15" fill="rgb(205,1,4)" fg:x="941" fg:w="4"/><text x="76.3211%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="76.0711%" y="389" width="0.3234%" height="15" fill="rgb(224,151,29)" fg:x="941" fg:w="4"/><text x="76.3211%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="76.0711%" y="373" width="0.3234%" height="15" fill="rgb(251,196,0)" fg:x="941" fg:w="4"/><text x="76.3211%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="76.0711%" y="357" width="0.3234%" height="15" fill="rgb(212,127,0)" fg:x="941" fg:w="4"/><text x="76.3211%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="76.1520%" y="341" width="0.2425%" height="15" fill="rgb(236,71,53)" fg:x="942" fg:w="3"/><text x="76.4020%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.2328%" y="325" width="0.1617%" height="15" fill="rgb(227,99,0)" fg:x="943" fg:w="2"/><text x="76.4828%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3137%" y="309" width="0.0808%" height="15" fill="rgb(239,89,21)" fg:x="944" fg:w="1"/><text x="76.5637%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3137%" y="293" width="0.0808%" height="15" fill="rgb(243,122,19)" fg:x="944" fg:w="1"/><text x="76.5637%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.49%)</title><rect x="75.9903%" y="533" width="0.4850%" height="15" fill="rgb(229,192,45)" fg:x="940" fg:w="6"/><text x="76.2403%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.49%)</title><rect x="75.9903%" y="517" width="0.4850%" height="15" fill="rgb(235,165,35)" fg:x="940" fg:w="6"/><text x="76.2403%" y="527.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="75.9903%" y="501" width="0.4850%" height="15" fill="rgb(253,202,0)" fg:x="940" fg:w="6"/><text x="76.2403%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (5 samples, 0.40%)</title><rect x="76.0711%" y="485" width="0.4042%" height="15" fill="rgb(235,51,20)" fg:x="941" fg:w="5"/><text x="76.3211%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.3945%" y="469" width="0.0808%" height="15" fill="rgb(218,95,46)" fg:x="945" fg:w="1"/><text x="76.6445%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3945%" y="453" width="0.0808%" height="15" fill="rgb(212,81,10)" fg:x="945" fg:w="1"/><text x="76.6445%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.3945%" y="437" width="0.0808%" height="15" fill="rgb(240,59,0)" fg:x="945" fg:w="1"/><text x="76.6445%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3945%" y="421" width="0.0808%" height="15" fill="rgb(212,191,42)" fg:x="945" fg:w="1"/><text x="76.6445%" y="431.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3945%" y="405" width="0.0808%" height="15" fill="rgb(233,140,3)" fg:x="945" fg:w="1"/><text x="76.6445%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.3945%" y="389" width="0.0808%" height="15" fill="rgb(215,69,23)" fg:x="945" fg:w="1"/><text x="76.6445%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.3945%" y="373" width="0.0808%" height="15" fill="rgb(240,202,20)" fg:x="945" fg:w="1"/><text x="76.6445%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.3945%" y="357" width="0.0808%" height="15" fill="rgb(209,146,50)" fg:x="945" fg:w="1"/><text x="76.6445%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.3945%" y="341" width="0.0808%" height="15" fill="rgb(253,102,54)" fg:x="945" fg:w="1"/><text x="76.6445%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.3945%" y="325" width="0.0808%" height="15" fill="rgb(250,173,47)" fg:x="945" fg:w="1"/><text x="76.6445%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="76.3945%" y="309" width="0.0808%" height="15" fill="rgb(232,142,7)" fg:x="945" fg:w="1"/><text x="76.6445%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (8 samples, 0.65%)</title><rect x="75.9095%" y="597" width="0.6467%" height="15" fill="rgb(230,157,47)" fg:x="939" fg:w="8"/><text x="76.1595%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.57%)</title><rect x="75.9903%" y="581" width="0.5659%" height="15" fill="rgb(214,177,35)" fg:x="940" fg:w="7"/><text x="76.2403%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.57%)</title><rect x="75.9903%" y="565" width="0.5659%" height="15" fill="rgb(234,119,46)" fg:x="940" fg:w="7"/><text x="76.2403%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.57%)</title><rect x="75.9903%" y="549" width="0.5659%" height="15" fill="rgb(241,180,50)" fg:x="940" fg:w="7"/><text x="76.2403%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.4753%" y="533" width="0.0808%" height="15" fill="rgb(221,54,25)" fg:x="946" fg:w="1"/><text x="76.7253%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4753%" y="517" width="0.0808%" height="15" fill="rgb(209,157,44)" fg:x="946" fg:w="1"/><text x="76.7253%" y="527.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="76.5562%" y="453" width="0.0808%" height="15" fill="rgb(246,115,41)" fg:x="947" fg:w="1"/><text x="76.8062%" y="463.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5562%" y="437" width="0.0808%" height="15" fill="rgb(229,86,1)" fg:x="947" fg:w="1"/><text x="76.8062%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5562%" y="421" width="0.0808%" height="15" fill="rgb(240,108,53)" fg:x="947" fg:w="1"/><text x="76.8062%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.5562%" y="405" width="0.0808%" height="15" fill="rgb(227,134,2)" fg:x="947" fg:w="1"/><text x="76.8062%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.5562%" y="389" width="0.0808%" height="15" fill="rgb(213,129,25)" fg:x="947" fg:w="1"/><text x="76.8062%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.5562%" y="373" width="0.0808%" height="15" fill="rgb(226,35,21)" fg:x="947" fg:w="1"/><text x="76.8062%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.5562%" y="357" width="0.0808%" height="15" fill="rgb(208,129,26)" fg:x="947" fg:w="1"/><text x="76.8062%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.5562%" y="341" width="0.0808%" height="15" fill="rgb(224,83,6)" fg:x="947" fg:w="1"/><text x="76.8062%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.5562%" y="325" width="0.0808%" height="15" fill="rgb(227,52,39)" fg:x="947" fg:w="1"/><text x="76.8062%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="76.7179%" y="421" width="0.2425%" height="15" fill="rgb(241,30,17)" fg:x="949" fg:w="3"/><text x="76.9679%" y="431.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="76.7179%" y="405" width="0.2425%" height="15" fill="rgb(246,186,42)" fg:x="949" fg:w="3"/><text x="76.9679%" y="415.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="76.7179%" y="389" width="0.2425%" height="15" fill="rgb(221,169,15)" fg:x="949" fg:w="3"/><text x="76.9679%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="76.7179%" y="373" width="0.2425%" height="15" fill="rgb(235,108,21)" fg:x="949" fg:w="3"/><text x="76.9679%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.7179%" y="357" width="0.2425%" height="15" fill="rgb(219,148,30)" fg:x="949" fg:w="3"/><text x="76.9679%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="76.7179%" y="341" width="0.2425%" height="15" fill="rgb(220,109,5)" fg:x="949" fg:w="3"/><text x="76.9679%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.7179%" y="325" width="0.2425%" height="15" fill="rgb(213,203,48)" fg:x="949" fg:w="3"/><text x="76.9679%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="76.7179%" y="309" width="0.2425%" height="15" fill="rgb(244,71,33)" fg:x="949" fg:w="3"/><text x="76.9679%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="76.7179%" y="293" width="0.2425%" height="15" fill="rgb(209,23,2)" fg:x="949" fg:w="3"/><text x="76.9679%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="76.7987%" y="277" width="0.1617%" height="15" fill="rgb(219,97,7)" fg:x="950" fg:w="2"/><text x="77.0487%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.8795%" y="261" width="0.0808%" height="15" fill="rgb(216,161,23)" fg:x="951" fg:w="1"/><text x="77.1295%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="76.9604%" y="421" width="0.1617%" height="15" fill="rgb(207,45,42)" fg:x="952" fg:w="2"/><text x="77.2104%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="77.1221%" y="277" width="0.0808%" height="15" fill="rgb(241,61,4)" fg:x="954" fg:w="1"/><text x="77.3721%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="77.1221%" y="261" width="0.0808%" height="15" fill="rgb(236,170,1)" fg:x="954" fg:w="1"/><text x="77.3721%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="77.1221%" y="245" width="0.0808%" height="15" fill="rgb(239,72,5)" fg:x="954" fg:w="1"/><text x="77.3721%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.1221%" y="341" width="0.1617%" height="15" fill="rgb(214,13,50)" fg:x="954" fg:w="2"/><text x="77.3721%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="77.1221%" y="325" width="0.1617%" height="15" fill="rgb(224,88,9)" fg:x="954" fg:w="2"/><text x="77.3721%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="77.1221%" y="309" width="0.1617%" height="15" fill="rgb(238,192,34)" fg:x="954" fg:w="2"/><text x="77.3721%" y="319.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="77.1221%" y="293" width="0.1617%" height="15" fill="rgb(217,203,50)" fg:x="954" fg:w="2"/><text x="77.3721%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="77.2029%" y="277" width="0.0808%" height="15" fill="rgb(241,123,32)" fg:x="955" fg:w="1"/><text x="77.4529%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="77.2029%" y="261" width="0.0808%" height="15" fill="rgb(248,151,39)" fg:x="955" fg:w="1"/><text x="77.4529%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="77.2029%" y="245" width="0.0808%" height="15" fill="rgb(208,89,6)" fg:x="955" fg:w="1"/><text x="77.4529%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="77.2029%" y="229" width="0.0808%" height="15" fill="rgb(254,43,26)" fg:x="955" fg:w="1"/><text x="77.4529%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="77.3646%" y="293" width="0.0808%" height="15" fill="rgb(216,158,13)" fg:x="957" fg:w="1"/><text x="77.6146%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3646%" y="277" width="0.0808%" height="15" fill="rgb(212,47,37)" fg:x="957" fg:w="1"/><text x="77.6146%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="77.2838%" y="341" width="0.3234%" height="15" fill="rgb(254,16,10)" fg:x="956" fg:w="4"/><text x="77.5338%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="77.2838%" y="325" width="0.3234%" height="15" fill="rgb(223,228,16)" fg:x="956" fg:w="4"/><text x="77.5338%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="77.3646%" y="309" width="0.2425%" height="15" fill="rgb(249,108,50)" fg:x="957" fg:w="3"/><text x="77.6146%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="77.4454%" y="293" width="0.1617%" height="15" fill="rgb(208,220,5)" fg:x="958" fg:w="2"/><text x="77.6954%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.5263%" y="277" width="0.0808%" height="15" fill="rgb(217,89,48)" fg:x="959" fg:w="1"/><text x="77.7763%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6880%" y="293" width="0.0808%" height="15" fill="rgb(212,113,41)" fg:x="961" fg:w="1"/><text x="77.9380%" y="303.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="77.7688%" y="293" width="0.0808%" height="15" fill="rgb(231,127,5)" fg:x="962" fg:w="1"/><text x="78.0188%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.65%)</title><rect x="77.8496%" y="277" width="0.6467%" height="15" fill="rgb(217,141,17)" fg:x="963" fg:w="8"/><text x="78.0996%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="77.9305%" y="261" width="0.5659%" height="15" fill="rgb(245,125,54)" fg:x="964" fg:w="7"/><text x="78.1805%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="78.4964%" y="261" width="0.0808%" height="15" fill="rgb(248,125,3)" fg:x="971" fg:w="1"/><text x="78.7464%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="78.4964%" y="277" width="0.4042%" height="15" fill="rgb(236,119,51)" fg:x="971" fg:w="5"/><text x="78.7464%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="78.5772%" y="261" width="0.3234%" height="15" fill="rgb(239,99,8)" fg:x="972" fg:w="4"/><text x="78.8272%" y="271.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="78.9006%" y="213" width="0.1617%" height="15" fill="rgb(224,228,4)" fg:x="976" fg:w="2"/><text x="79.1506%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="79.0622%" y="213" width="0.1617%" height="15" fill="rgb(220,131,45)" fg:x="978" fg:w="2"/><text x="79.3122%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="79.1431%" y="197" width="0.0808%" height="15" fill="rgb(215,62,5)" fg:x="979" fg:w="1"/><text x="79.3931%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.1431%" y="181" width="0.0808%" height="15" fill="rgb(253,12,24)" fg:x="979" fg:w="1"/><text x="79.3931%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.1431%" y="165" width="0.0808%" height="15" fill="rgb(248,120,50)" fg:x="979" fg:w="1"/><text x="79.3931%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="79.2239%" y="213" width="0.1617%" height="15" fill="rgb(245,194,10)" fg:x="980" fg:w="2"/><text x="79.4739%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="79.3048%" y="197" width="0.0808%" height="15" fill="rgb(241,149,38)" fg:x="981" fg:w="1"/><text x="79.5548%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="79.3048%" y="181" width="0.0808%" height="15" fill="rgb(219,215,7)" fg:x="981" fg:w="1"/><text x="79.5548%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3048%" y="165" width="0.0808%" height="15" fill="rgb(208,120,31)" fg:x="981" fg:w="1"/><text x="79.5548%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (32 samples, 2.59%)</title><rect x="79.3856%" y="213" width="2.5869%" height="15" fill="rgb(244,30,8)" fg:x="982" fg:w="32"/><text x="79.6356%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (32 samples, 2.59%)</title><rect x="79.3856%" y="197" width="2.5869%" height="15" fill="rgb(238,35,44)" fg:x="982" fg:w="32"/><text x="79.6356%" y="207.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (32 samples, 2.59%)</title><rect x="79.3856%" y="181" width="2.5869%" height="15" fill="rgb(243,218,37)" fg:x="982" fg:w="32"/><text x="79.6356%" y="191.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="81.9725%" y="213" width="0.1617%" height="15" fill="rgb(218,169,10)" fg:x="1014" fg:w="2"/><text x="82.2225%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0534%" y="197" width="0.0808%" height="15" fill="rgb(221,144,10)" fg:x="1015" fg:w="1"/><text x="82.3034%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 3.40%)</title><rect x="78.9006%" y="261" width="3.3953%" height="15" fill="rgb(226,41,38)" fg:x="976" fg:w="42"/><text x="79.1506%" y="271.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (42 samples, 3.40%)</title><rect x="78.9006%" y="245" width="3.3953%" height="15" fill="rgb(228,3,1)" fg:x="976" fg:w="42"/><text x="79.1506%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (42 samples, 3.40%)</title><rect x="78.9006%" y="229" width="3.3953%" height="15" fill="rgb(209,129,12)" fg:x="976" fg:w="42"/><text x="79.1506%" y="239.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="82.1342%" y="213" width="0.1617%" height="15" fill="rgb(213,136,33)" fg:x="1016" fg:w="2"/><text x="82.3842%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.2150%" y="197" width="0.0808%" height="15" fill="rgb(209,181,29)" fg:x="1017" fg:w="1"/><text x="82.4650%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.2150%" y="181" width="0.0808%" height="15" fill="rgb(234,173,18)" fg:x="1017" fg:w="1"/><text x="82.4650%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="82.3767%" y="245" width="0.2425%" height="15" fill="rgb(227,73,47)" fg:x="1019" fg:w="3"/><text x="82.6267%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="82.4576%" y="229" width="0.1617%" height="15" fill="rgb(234,9,34)" fg:x="1020" fg:w="2"/><text x="82.7076%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.4576%" y="213" width="0.1617%" height="15" fill="rgb(235,172,15)" fg:x="1020" fg:w="2"/><text x="82.7076%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="82.4576%" y="197" width="0.1617%" height="15" fill="rgb(245,61,2)" fg:x="1020" fg:w="2"/><text x="82.7076%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="82.2959%" y="261" width="0.4850%" height="15" fill="rgb(238,39,47)" fg:x="1018" fg:w="6"/><text x="82.5459%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="82.6192%" y="245" width="0.1617%" height="15" fill="rgb(234,37,24)" fg:x="1022" fg:w="2"/><text x="82.8692%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7809%" y="229" width="0.0808%" height="15" fill="rgb(248,223,24)" fg:x="1024" fg:w="1"/><text x="83.0309%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (50 samples, 4.04%)</title><rect x="78.9006%" y="277" width="4.0420%" height="15" fill="rgb(223,12,15)" fg:x="976" fg:w="50"/><text x="79.1506%" y="287.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="82.7809%" y="261" width="0.1617%" height="15" fill="rgb(249,6,3)" fg:x="1024" fg:w="2"/><text x="83.0309%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="82.7809%" y="245" width="0.1617%" height="15" fill="rgb(237,105,33)" fg:x="1024" fg:w="2"/><text x="83.0309%" y="255.50"></text></g><g><title>regex_syntax::hir::ClassBytesRange::start (1 samples, 0.08%)</title><rect x="82.8618%" y="229" width="0.0808%" height="15" fill="rgb(252,208,35)" fg:x="1025" fg:w="1"/><text x="83.1118%" y="239.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="82.9426%" y="277" width="0.0808%" height="15" fill="rgb(215,181,35)" fg:x="1026" fg:w="1"/><text x="83.1926%" y="287.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="82.9426%" y="261" width="0.0808%" height="15" fill="rgb(246,212,3)" fg:x="1026" fg:w="1"/><text x="83.1926%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (65 samples, 5.25%)</title><rect x="77.8496%" y="293" width="5.2546%" height="15" fill="rgb(247,156,24)" fg:x="963" fg:w="65"/><text x="78.0996%" y="303.50">regex_..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="83.0234%" y="277" width="0.0808%" height="15" fill="rgb(248,9,31)" fg:x="1027" fg:w="1"/><text x="83.2734%" y="287.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="83.0234%" y="261" width="0.0808%" height="15" fill="rgb(234,26,45)" fg:x="1027" fg:w="1"/><text x="83.2734%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="83.1043%" y="293" width="0.1617%" height="15" fill="rgb(249,11,32)" fg:x="1028" fg:w="2"/><text x="83.3543%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="83.1043%" y="277" width="0.1617%" height="15" fill="rgb(249,162,33)" fg:x="1028" fg:w="2"/><text x="83.3543%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="83.1043%" y="261" width="0.1617%" height="15" fill="rgb(232,4,32)" fg:x="1028" fg:w="2"/><text x="83.3543%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="83.1851%" y="245" width="0.0808%" height="15" fill="rgb(212,5,45)" fg:x="1029" fg:w="1"/><text x="83.4351%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.1851%" y="229" width="0.0808%" height="15" fill="rgb(227,95,13)" fg:x="1029" fg:w="1"/><text x="83.4351%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.1851%" y="213" width="0.0808%" height="15" fill="rgb(223,205,10)" fg:x="1029" fg:w="1"/><text x="83.4351%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.1851%" y="197" width="0.0808%" height="15" fill="rgb(222,178,8)" fg:x="1029" fg:w="1"/><text x="83.4351%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (70 samples, 5.66%)</title><rect x="77.6880%" y="309" width="5.6589%" height="15" fill="rgb(216,13,22)" fg:x="961" fg:w="70"/><text x="77.9380%" y="319.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="83.2660%" y="293" width="0.0808%" height="15" fill="rgb(240,167,12)" fg:x="1030" fg:w="1"/><text x="83.5160%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="83.2660%" y="277" width="0.0808%" height="15" fill="rgb(235,68,35)" fg:x="1030" fg:w="1"/><text x="83.5160%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (72 samples, 5.82%)</title><rect x="77.6071%" y="341" width="5.8205%" height="15" fill="rgb(253,40,27)" fg:x="960" fg:w="72"/><text x="77.8571%" y="351.50">regex::..</text></g><g><title>regex::builders::Builder::build_one_string (71 samples, 5.74%)</title><rect x="77.6880%" y="325" width="5.7397%" height="15" fill="rgb(214,19,28)" fg:x="961" fg:w="71"/><text x="77.9380%" y="335.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="83.3468%" y="309" width="0.0808%" height="15" fill="rgb(210,167,45)" fg:x="1031" fg:w="1"/><text x="83.5968%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.5085%" y="261" width="0.0808%" height="15" fill="rgb(232,97,40)" fg:x="1033" fg:w="1"/><text x="83.7585%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.5085%" y="245" width="0.0808%" height="15" fill="rgb(250,35,23)" fg:x="1033" fg:w="1"/><text x="83.7585%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.5893%" y="261" width="0.0808%" height="15" fill="rgb(248,47,53)" fg:x="1034" fg:w="1"/><text x="83.8393%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.5893%" y="245" width="0.0808%" height="15" fill="rgb(226,58,50)" fg:x="1034" fg:w="1"/><text x="83.8393%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="83.5893%" y="229" width="0.0808%" height="15" fill="rgb(217,105,26)" fg:x="1034" fg:w="1"/><text x="83.8393%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5893%" y="213" width="0.0808%" height="15" fill="rgb(208,64,1)" fg:x="1034" fg:w="1"/><text x="83.8393%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="83.4276%" y="277" width="0.4042%" height="15" fill="rgb(214,80,1)" fg:x="1032" fg:w="5"/><text x="83.6776%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="83.6702%" y="261" width="0.1617%" height="15" fill="rgb(206,175,26)" fg:x="1035" fg:w="2"/><text x="83.9202%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="83.4276%" y="293" width="0.5659%" height="15" fill="rgb(235,156,37)" fg:x="1032" fg:w="7"/><text x="83.6776%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="83.8319%" y="277" width="0.1617%" height="15" fill="rgb(213,100,9)" fg:x="1037" fg:w="2"/><text x="84.0819%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.9127%" y="261" width="0.0808%" height="15" fill="rgb(241,15,13)" fg:x="1038" fg:w="1"/><text x="84.1627%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.9127%" y="245" width="0.0808%" height="15" fill="rgb(205,97,43)" fg:x="1038" fg:w="1"/><text x="84.1627%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.9127%" y="229" width="0.0808%" height="15" fill="rgb(216,106,32)" fg:x="1038" fg:w="1"/><text x="84.1627%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (86 samples, 6.95%)</title><rect x="77.1221%" y="357" width="6.9523%" height="15" fill="rgb(226,200,8)" fg:x="954" fg:w="86"/><text x="77.3721%" y="367.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="83.4276%" y="341" width="0.6467%" height="15" fill="rgb(244,54,29)" fg:x="1032" fg:w="8"/><text x="83.6776%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="83.4276%" y="325" width="0.6467%" height="15" fill="rgb(252,169,12)" fg:x="1032" fg:w="8"/><text x="83.6776%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="83.4276%" y="309" width="0.6467%" height="15" fill="rgb(231,199,11)" fg:x="1032" fg:w="8"/><text x="83.6776%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="83.9935%" y="293" width="0.0808%" height="15" fill="rgb(233,191,18)" fg:x="1039" fg:w="1"/><text x="84.2435%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="83.9935%" y="277" width="0.0808%" height="15" fill="rgb(215,83,47)" fg:x="1039" fg:w="1"/><text x="84.2435%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.0744%" y="277" width="0.0808%" height="15" fill="rgb(251,67,19)" fg:x="1040" fg:w="1"/><text x="84.3244%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="84.0744%" y="293" width="0.1617%" height="15" fill="rgb(240,7,20)" fg:x="1040" fg:w="2"/><text x="84.3244%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.1552%" y="277" width="0.0808%" height="15" fill="rgb(210,150,26)" fg:x="1041" fg:w="1"/><text x="84.4052%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="84.2361%" y="293" width="0.0808%" height="15" fill="rgb(228,75,42)" fg:x="1042" fg:w="1"/><text x="84.4861%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="84.2361%" y="277" width="0.0808%" height="15" fill="rgb(237,134,48)" fg:x="1042" fg:w="1"/><text x="84.4861%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="84.0744%" y="309" width="0.3234%" height="15" fill="rgb(205,80,50)" fg:x="1040" fg:w="4"/><text x="84.3244%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="84.3169%" y="293" width="0.0808%" height="15" fill="rgb(217,74,48)" fg:x="1043" fg:w="1"/><text x="84.5669%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.3169%" y="277" width="0.0808%" height="15" fill="rgb(205,82,50)" fg:x="1043" fg:w="1"/><text x="84.5669%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.3169%" y="261" width="0.0808%" height="15" fill="rgb(228,1,33)" fg:x="1043" fg:w="1"/><text x="84.5669%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.3169%" y="245" width="0.0808%" height="15" fill="rgb(214,50,23)" fg:x="1043" fg:w="1"/><text x="84.5669%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="84.0744%" y="341" width="0.4042%" height="15" fill="rgb(210,62,9)" fg:x="1040" fg:w="5"/><text x="84.3244%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="84.0744%" y="325" width="0.4042%" height="15" fill="rgb(210,104,37)" fg:x="1040" fg:w="5"/><text x="84.3244%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="84.3977%" y="309" width="0.0808%" height="15" fill="rgb(232,104,43)" fg:x="1044" fg:w="1"/><text x="84.6477%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.3977%" y="293" width="0.0808%" height="15" fill="rgb(244,52,6)" fg:x="1044" fg:w="1"/><text x="84.6477%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4786%" y="261" width="0.0808%" height="15" fill="rgb(211,174,52)" fg:x="1045" fg:w="1"/><text x="84.7286%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="84.8828%" y="245" width="0.1617%" height="15" fill="rgb(229,48,4)" fg:x="1050" fg:w="2"/><text x="85.1328%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="84.8828%" y="229" width="0.1617%" height="15" fill="rgb(205,155,16)" fg:x="1050" fg:w="2"/><text x="85.1328%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="84.8828%" y="213" width="0.1617%" height="15" fill="rgb(211,141,53)" fg:x="1050" fg:w="2"/><text x="85.1328%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="84.5594%" y="261" width="0.6467%" height="15" fill="rgb(240,148,11)" fg:x="1046" fg:w="8"/><text x="84.8094%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="85.0445%" y="245" width="0.1617%" height="15" fill="rgb(214,45,23)" fg:x="1052" fg:w="2"/><text x="85.2945%" y="255.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.81%)</title><rect x="84.4786%" y="341" width="0.8084%" height="15" fill="rgb(248,74,26)" fg:x="1045" fg:w="10"/><text x="84.7286%" y="351.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.81%)</title><rect x="84.4786%" y="325" width="0.8084%" height="15" fill="rgb(218,121,16)" fg:x="1045" fg:w="10"/><text x="84.7286%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.81%)</title><rect x="84.4786%" y="309" width="0.8084%" height="15" fill="rgb(218,10,47)" fg:x="1045" fg:w="10"/><text x="84.7286%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="84.4786%" y="293" width="0.8084%" height="15" fill="rgb(227,99,14)" fg:x="1045" fg:w="10"/><text x="84.7286%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.81%)</title><rect x="84.4786%" y="277" width="0.8084%" height="15" fill="rgb(229,83,46)" fg:x="1045" fg:w="10"/><text x="84.7286%" y="287.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="85.2061%" y="261" width="0.0808%" height="15" fill="rgb(228,25,1)" fg:x="1054" fg:w="1"/><text x="85.4561%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.2870%" y="293" width="0.0808%" height="15" fill="rgb(252,190,15)" fg:x="1055" fg:w="1"/><text x="85.5370%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.2870%" y="277" width="0.0808%" height="15" fill="rgb(213,103,51)" fg:x="1055" fg:w="1"/><text x="85.5370%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2870%" y="261" width="0.0808%" height="15" fill="rgb(220,38,44)" fg:x="1055" fg:w="1"/><text x="85.5370%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.4487%" y="261" width="0.0808%" height="15" fill="rgb(210,45,26)" fg:x="1057" fg:w="1"/><text x="85.6987%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.5295%" y="261" width="0.0808%" height="15" fill="rgb(205,95,48)" fg:x="1058" fg:w="1"/><text x="85.7795%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.6912%" y="245" width="0.0808%" height="15" fill="rgb(225,179,37)" fg:x="1060" fg:w="1"/><text x="85.9412%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="85.6103%" y="261" width="0.2425%" height="15" fill="rgb(230,209,3)" fg:x="1059" fg:w="3"/><text x="85.8603%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="85.7720%" y="245" width="0.0808%" height="15" fill="rgb(248,12,46)" fg:x="1061" fg:w="1"/><text x="86.0220%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (7 samples, 0.57%)</title><rect x="85.3678%" y="293" width="0.5659%" height="15" fill="rgb(234,18,0)" fg:x="1056" fg:w="7"/><text x="85.6178%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="85.3678%" y="277" width="0.5659%" height="15" fill="rgb(238,197,14)" fg:x="1056" fg:w="7"/><text x="85.6178%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="85.8529%" y="261" width="0.0808%" height="15" fill="rgb(251,162,48)" fg:x="1062" fg:w="1"/><text x="86.1029%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.8529%" y="245" width="0.0808%" height="15" fill="rgb(237,73,42)" fg:x="1062" fg:w="1"/><text x="86.1029%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9337%" y="277" width="0.0808%" height="15" fill="rgb(211,108,8)" fg:x="1063" fg:w="1"/><text x="86.1837%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.0146%" y="261" width="0.0808%" height="15" fill="rgb(213,45,22)" fg:x="1064" fg:w="1"/><text x="86.2646%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (19 samples, 1.54%)</title><rect x="86.0146%" y="277" width="1.5360%" height="15" fill="rgb(252,154,5)" fg:x="1064" fg:w="19"/><text x="86.2646%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18 samples, 1.46%)</title><rect x="86.0954%" y="261" width="1.4551%" height="15" fill="rgb(221,79,52)" fg:x="1065" fg:w="18"/><text x="86.3454%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="87.5505%" y="261" width="0.0808%" height="15" fill="rgb(229,220,36)" fg:x="1083" fg:w="1"/><text x="87.8005%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="87.5505%" y="277" width="0.3234%" height="15" fill="rgb(211,17,16)" fg:x="1083" fg:w="4"/><text x="87.8005%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="87.6314%" y="261" width="0.2425%" height="15" fill="rgb(222,55,31)" fg:x="1084" fg:w="3"/><text x="87.8814%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="87.8739%" y="245" width="0.2425%" height="15" fill="rgb(221,221,31)" fg:x="1087" fg:w="3"/><text x="88.1239%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="87.8739%" y="229" width="0.2425%" height="15" fill="rgb(227,168,26)" fg:x="1087" fg:w="3"/><text x="88.1239%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="87.8739%" y="213" width="0.2425%" height="15" fill="rgb(224,139,9)" fg:x="1087" fg:w="3"/><text x="88.1239%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="87.8739%" y="197" width="0.2425%" height="15" fill="rgb(254,172,0)" fg:x="1087" fg:w="3"/><text x="88.1239%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="87.8739%" y="181" width="0.2425%" height="15" fill="rgb(235,203,1)" fg:x="1087" fg:w="3"/><text x="88.1239%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.1973%" y="229" width="0.0808%" height="15" fill="rgb(216,205,24)" fg:x="1091" fg:w="1"/><text x="88.4473%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="88.2781%" y="229" width="0.0808%" height="15" fill="rgb(233,24,6)" fg:x="1092" fg:w="1"/><text x="88.5281%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (10 samples, 0.81%)</title><rect x="87.8739%" y="277" width="0.8084%" height="15" fill="rgb(244,110,9)" fg:x="1087" fg:w="10"/><text x="88.1239%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (10 samples, 0.81%)</title><rect x="87.8739%" y="261" width="0.8084%" height="15" fill="rgb(239,222,42)" fg:x="1087" fg:w="10"/><text x="88.1239%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.57%)</title><rect x="88.1164%" y="245" width="0.5659%" height="15" fill="rgb(218,145,13)" fg:x="1090" fg:w="7"/><text x="88.3664%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="88.3589%" y="229" width="0.3234%" height="15" fill="rgb(207,69,11)" fg:x="1093" fg:w="4"/><text x="88.6089%" y="239.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="88.3589%" y="213" width="0.3234%" height="15" fill="rgb(220,223,22)" fg:x="1093" fg:w="4"/><text x="88.6089%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="88.6823%" y="213" width="0.0808%" height="15" fill="rgb(245,102,5)" fg:x="1097" fg:w="1"/><text x="88.9323%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="89.3290%" y="165" width="0.0808%" height="15" fill="rgb(211,148,2)" fg:x="1105" fg:w="1"/><text x="89.5790%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.4099%" y="165" width="0.0808%" height="15" fill="rgb(241,13,44)" fg:x="1106" fg:w="1"/><text x="89.6599%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="89.4907%" y="165" width="0.2425%" height="15" fill="rgb(219,137,21)" fg:x="1107" fg:w="3"/><text x="89.7407%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.5715%" y="149" width="0.1617%" height="15" fill="rgb(242,206,5)" fg:x="1108" fg:w="2"/><text x="89.8215%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.5715%" y="133" width="0.1617%" height="15" fill="rgb(217,114,22)" fg:x="1108" fg:w="2"/><text x="89.8215%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.5715%" y="117" width="0.1617%" height="15" fill="rgb(253,206,42)" fg:x="1108" fg:w="2"/><text x="89.8215%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="89.7332%" y="165" width="0.2425%" height="15" fill="rgb(236,102,18)" fg:x="1110" fg:w="3"/><text x="89.9832%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.8949%" y="149" width="0.0808%" height="15" fill="rgb(208,59,49)" fg:x="1112" fg:w="1"/><text x="90.1449%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8949%" y="133" width="0.0808%" height="15" fill="rgb(215,194,28)" fg:x="1112" fg:w="1"/><text x="90.1449%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.8949%" y="117" width="0.0808%" height="15" fill="rgb(243,207,11)" fg:x="1112" fg:w="1"/><text x="90.1449%" y="127.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.2991%" y="133" width="0.0808%" height="15" fill="rgb(254,179,35)" fg:x="1117" fg:w="1"/><text x="90.5491%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.3800%" y="133" width="0.0808%" height="15" fill="rgb(235,97,3)" fg:x="1118" fg:w="1"/><text x="90.6300%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.3800%" y="117" width="0.0808%" height="15" fill="rgb(215,155,33)" fg:x="1118" fg:w="1"/><text x="90.6300%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.3800%" y="101" width="0.0808%" height="15" fill="rgb(223,128,12)" fg:x="1118" fg:w="1"/><text x="90.6300%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.7033%" y="117" width="0.0808%" height="15" fill="rgb(208,157,18)" fg:x="1122" fg:w="1"/><text x="90.9533%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (11 samples, 0.89%)</title><rect x="89.9757%" y="165" width="0.8892%" height="15" fill="rgb(249,70,54)" fg:x="1113" fg:w="11"/><text x="90.2257%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.81%)</title><rect x="90.0566%" y="149" width="0.8084%" height="15" fill="rgb(244,118,24)" fg:x="1114" fg:w="10"/><text x="90.3066%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="90.4608%" y="133" width="0.4042%" height="15" fill="rgb(211,54,0)" fg:x="1119" fg:w="5"/><text x="90.7108%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.7842%" y="117" width="0.0808%" height="15" fill="rgb(245,137,45)" fg:x="1123" fg:w="1"/><text x="91.0342%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="90.8650%" y="165" width="0.0808%" height="15" fill="rgb(232,154,31)" fg:x="1124" fg:w="1"/><text x="91.1150%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="90.8650%" y="149" width="0.0808%" height="15" fill="rgb(253,6,39)" fg:x="1124" fg:w="1"/><text x="91.1150%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="90.8650%" y="133" width="0.0808%" height="15" fill="rgb(234,183,24)" fg:x="1124" fg:w="1"/><text x="91.1150%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.8650%" y="117" width="0.0808%" height="15" fill="rgb(252,84,40)" fg:x="1124" fg:w="1"/><text x="91.1150%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.9458%" y="149" width="0.0808%" height="15" fill="rgb(224,65,2)" fg:x="1125" fg:w="1"/><text x="91.1958%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.9458%" y="133" width="0.0808%" height="15" fill="rgb(229,38,24)" fg:x="1125" fg:w="1"/><text x="91.1958%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9458%" y="117" width="0.0808%" height="15" fill="rgb(218,131,50)" fg:x="1125" fg:w="1"/><text x="91.1958%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.9458%" y="101" width="0.0808%" height="15" fill="rgb(233,106,18)" fg:x="1125" fg:w="1"/><text x="91.1958%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (42 samples, 3.40%)</title><rect x="90.9458%" y="165" width="3.3953%" height="15" fill="rgb(220,216,11)" fg:x="1125" fg:w="42"/><text x="91.1958%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (41 samples, 3.31%)</title><rect x="91.0267%" y="149" width="3.3145%" height="15" fill="rgb(251,100,45)" fg:x="1126" fg:w="41"/><text x="91.2767%" y="159.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (41 samples, 3.31%)</title><rect x="91.0267%" y="133" width="3.3145%" height="15" fill="rgb(235,143,32)" fg:x="1126" fg:w="41"/><text x="91.2767%" y="143.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="94.3411%" y="165" width="0.1617%" height="15" fill="rgb(248,124,34)" fg:x="1167" fg:w="2"/><text x="94.5911%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 5.98%)</title><rect x="88.6823%" y="261" width="5.9822%" height="15" fill="rgb(225,221,4)" fg:x="1097" fg:w="74"/><text x="88.9323%" y="271.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (74 samples, 5.98%)</title><rect x="88.6823%" y="245" width="5.9822%" height="15" fill="rgb(242,27,43)" fg:x="1097" fg:w="74"/><text x="88.9323%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (74 samples, 5.98%)</title><rect x="88.6823%" y="229" width="5.9822%" height="15" fill="rgb(227,54,8)" fg:x="1097" fg:w="74"/><text x="88.9323%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (73 samples, 5.90%)</title><rect x="88.7631%" y="213" width="5.9014%" height="15" fill="rgb(253,139,49)" fg:x="1098" fg:w="73"/><text x="89.0131%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (73 samples, 5.90%)</title><rect x="88.7631%" y="197" width="5.9014%" height="15" fill="rgb(231,26,43)" fg:x="1098" fg:w="73"/><text x="89.0131%" y="207.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (73 samples, 5.90%)</title><rect x="88.7631%" y="181" width="5.9014%" height="15" fill="rgb(207,121,39)" fg:x="1098" fg:w="73"/><text x="89.0131%" y="191.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="94.5028%" y="165" width="0.1617%" height="15" fill="rgb(223,101,35)" fg:x="1169" fg:w="2"/><text x="94.7528%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.5837%" y="149" width="0.0808%" height="15" fill="rgb(232,87,23)" fg:x="1170" fg:w="1"/><text x="94.8337%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.5837%" y="133" width="0.0808%" height="15" fill="rgb(225,180,29)" fg:x="1170" fg:w="1"/><text x="94.8337%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="94.5837%" y="117" width="0.0808%" height="15" fill="rgb(225,25,17)" fg:x="1170" fg:w="1"/><text x="94.8337%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="94.5837%" y="101" width="0.0808%" height="15" fill="rgb(223,8,52)" fg:x="1170" fg:w="1"/><text x="94.8337%" y="111.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="94.9070%" y="245" width="0.0808%" height="15" fill="rgb(246,42,21)" fg:x="1174" fg:w="1"/><text x="95.1570%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.81%)</title><rect x="94.9879%" y="245" width="0.8084%" height="15" fill="rgb(205,64,43)" fg:x="1175" fg:w="10"/><text x="95.2379%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="95.3112%" y="229" width="0.4850%" height="15" fill="rgb(221,160,13)" fg:x="1179" fg:w="6"/><text x="95.5612%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="95.3112%" y="213" width="0.4850%" height="15" fill="rgb(239,58,35)" fg:x="1179" fg:w="6"/><text x="95.5612%" y="223.50"></text></g><g><title>realloc (6 samples, 0.49%)</title><rect x="95.3112%" y="197" width="0.4850%" height="15" fill="rgb(251,26,40)" fg:x="1179" fg:w="6"/><text x="95.5612%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="95.7963%" y="245" width="0.1617%" height="15" fill="rgb(247,0,4)" fg:x="1185" fg:w="2"/><text x="96.0463%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (125 samples, 10.11%)</title><rect x="85.9337%" y="293" width="10.1051%" height="15" fill="rgb(218,130,10)" fg:x="1063" fg:w="125"/><text x="86.1837%" y="303.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (91 samples, 7.36%)</title><rect x="88.6823%" y="277" width="7.3565%" height="15" fill="rgb(239,32,7)" fg:x="1097" fg:w="91"/><text x="88.9323%" y="287.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (17 samples, 1.37%)</title><rect x="94.6645%" y="261" width="1.3743%" height="15" fill="rgb(210,192,24)" fg:x="1171" fg:w="17"/><text x="94.9145%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.9580%" y="245" width="0.0808%" height="15" fill="rgb(226,212,17)" fg:x="1187" fg:w="1"/><text x="96.2080%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.0388%" y="245" width="0.0808%" height="15" fill="rgb(219,201,28)" fg:x="1188" fg:w="1"/><text x="96.2888%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="96.0388%" y="229" width="0.0808%" height="15" fill="rgb(235,207,41)" fg:x="1188" fg:w="1"/><text x="96.2888%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="96.0388%" y="261" width="0.4042%" height="15" fill="rgb(241,95,54)" fg:x="1188" fg:w="5"/><text x="96.2888%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="96.1196%" y="245" width="0.3234%" height="15" fill="rgb(248,12,23)" fg:x="1189" fg:w="4"/><text x="96.3696%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="96.1196%" y="229" width="0.3234%" height="15" fill="rgb(228,173,4)" fg:x="1189" fg:w="4"/><text x="96.3696%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="96.1196%" y="213" width="0.3234%" height="15" fill="rgb(254,99,5)" fg:x="1189" fg:w="4"/><text x="96.3696%" y="223.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="96.1196%" y="197" width="0.3234%" height="15" fill="rgb(212,184,17)" fg:x="1189" fg:w="4"/><text x="96.3696%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="96.0388%" y="293" width="0.4850%" height="15" fill="rgb(252,174,1)" fg:x="1188" fg:w="6"/><text x="96.2888%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="96.0388%" y="277" width="0.4850%" height="15" fill="rgb(241,118,51)" fg:x="1188" fg:w="6"/><text x="96.2888%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="96.4430%" y="261" width="0.0808%" height="15" fill="rgb(227,94,47)" fg:x="1193" fg:w="1"/><text x="96.6930%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="96.4430%" y="245" width="0.0808%" height="15" fill="rgb(229,104,2)" fg:x="1193" fg:w="1"/><text x="96.6930%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5238%" y="245" width="0.0808%" height="15" fill="rgb(219,28,31)" fg:x="1194" fg:w="1"/><text x="96.7738%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5238%" y="229" width="0.0808%" height="15" fill="rgb(233,109,36)" fg:x="1194" fg:w="1"/><text x="96.7738%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.5238%" y="213" width="0.0808%" height="15" fill="rgb(246,88,11)" fg:x="1194" fg:w="1"/><text x="96.7738%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.7664%" y="229" width="0.1617%" height="15" fill="rgb(209,212,17)" fg:x="1197" fg:w="2"/><text x="97.0164%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.7664%" y="213" width="0.1617%" height="15" fill="rgb(243,59,29)" fg:x="1197" fg:w="2"/><text x="97.0164%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="96.7664%" y="197" width="0.1617%" height="15" fill="rgb(244,205,48)" fg:x="1197" fg:w="2"/><text x="97.0164%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="96.6047%" y="245" width="0.4042%" height="15" fill="rgb(227,30,6)" fg:x="1195" fg:w="5"/><text x="96.8547%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="96.9281%" y="229" width="0.0808%" height="15" fill="rgb(220,205,48)" fg:x="1199" fg:w="1"/><text x="97.1781%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (161 samples, 13.02%)</title><rect x="84.0744%" y="357" width="13.0154%" height="15" fill="rgb(250,94,14)" fg:x="1040" fg:w="161"/><text x="84.3244%" y="367.50">indefinite::rules::n..</text></g><g><title>regex::regex::string::Regex::new (146 samples, 11.80%)</title><rect x="85.2870%" y="341" width="11.8027%" height="15" fill="rgb(216,119,42)" fg:x="1055" fg:w="146"/><text x="85.5370%" y="351.50">regex::regex::stri..</text></g><g><title>regex::builders::Builder::build_one_string (146 samples, 11.80%)</title><rect x="85.2870%" y="325" width="11.8027%" height="15" fill="rgb(232,155,0)" fg:x="1055" fg:w="146"/><text x="85.5370%" y="335.50">regex::builders::B..</text></g><g><title>regex_automata::meta::regex::Builder::build (146 samples, 11.80%)</title><rect x="85.2870%" y="309" width="11.8027%" height="15" fill="rgb(212,24,32)" fg:x="1055" fg:w="146"/><text x="85.5370%" y="319.50">regex_automata::me..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.57%)</title><rect x="96.5238%" y="293" width="0.5659%" height="15" fill="rgb(216,69,20)" fg:x="1194" fg:w="7"/><text x="96.7738%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.57%)</title><rect x="96.5238%" y="277" width="0.5659%" height="15" fill="rgb(229,73,31)" fg:x="1194" fg:w="7"/><text x="96.7738%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.57%)</title><rect x="96.5238%" y="261" width="0.5659%" height="15" fill="rgb(224,219,20)" fg:x="1194" fg:w="7"/><text x="96.7738%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="97.0089%" y="245" width="0.0808%" height="15" fill="rgb(215,146,41)" fg:x="1200" fg:w="1"/><text x="97.2589%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.0089%" y="229" width="0.0808%" height="15" fill="rgb(244,71,31)" fg:x="1200" fg:w="1"/><text x="97.2589%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0089%" y="213" width="0.0808%" height="15" fill="rgb(224,24,11)" fg:x="1200" fg:w="1"/><text x="97.2589%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0089%" y="197" width="0.0808%" height="15" fill="rgb(229,76,15)" fg:x="1200" fg:w="1"/><text x="97.2589%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1706%" y="293" width="0.0808%" height="15" fill="rgb(209,93,2)" fg:x="1202" fg:w="1"/><text x="97.4206%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="97.1706%" y="277" width="0.0808%" height="15" fill="rgb(216,200,50)" fg:x="1202" fg:w="1"/><text x="97.4206%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1706%" y="261" width="0.0808%" height="15" fill="rgb(211,67,34)" fg:x="1202" fg:w="1"/><text x="97.4206%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.1706%" y="245" width="0.0808%" height="15" fill="rgb(225,87,47)" fg:x="1202" fg:w="1"/><text x="97.4206%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="97.1706%" y="325" width="0.1617%" height="15" fill="rgb(217,185,16)" fg:x="1202" fg:w="2"/><text x="97.4206%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="97.1706%" y="309" width="0.1617%" height="15" fill="rgb(205,0,0)" fg:x="1202" fg:w="2"/><text x="97.4206%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.2514%" y="293" width="0.0808%" height="15" fill="rgb(207,116,45)" fg:x="1203" fg:w="1"/><text x="97.5014%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.2514%" y="277" width="0.0808%" height="15" fill="rgb(221,156,26)" fg:x="1203" fg:w="1"/><text x="97.5014%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.2514%" y="261" width="0.0808%" height="15" fill="rgb(213,140,4)" fg:x="1203" fg:w="1"/><text x="97.5014%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3323%" y="277" width="0.0808%" height="15" fill="rgb(231,224,15)" fg:x="1204" fg:w="1"/><text x="97.5823%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.4131%" y="277" width="0.0808%" height="15" fill="rgb(244,76,20)" fg:x="1205" fg:w="1"/><text x="97.6631%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4131%" y="261" width="0.0808%" height="15" fill="rgb(238,117,7)" fg:x="1205" fg:w="1"/><text x="97.6631%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="97.4131%" y="245" width="0.0808%" height="15" fill="rgb(235,1,10)" fg:x="1205" fg:w="1"/><text x="97.6631%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4131%" y="229" width="0.0808%" height="15" fill="rgb(216,165,6)" fg:x="1205" fg:w="1"/><text x="97.6631%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="97.4939%" y="245" width="0.3234%" height="15" fill="rgb(246,91,35)" fg:x="1206" fg:w="4"/><text x="97.7439%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="97.4939%" y="229" width="0.3234%" height="15" fill="rgb(228,96,24)" fg:x="1206" fg:w="4"/><text x="97.7439%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="97.4939%" y="213" width="0.3234%" height="15" fill="rgb(254,217,53)" fg:x="1206" fg:w="4"/><text x="97.7439%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="97.4939%" y="197" width="0.3234%" height="15" fill="rgb(209,60,0)" fg:x="1206" fg:w="4"/><text x="97.7439%" y="207.50"></text></g><g><title>regex_syntax::hir::ClassBytes::ranges (1 samples, 0.08%)</title><rect x="97.7365%" y="181" width="0.0808%" height="15" fill="rgb(250,93,26)" fg:x="1209" fg:w="1"/><text x="97.9865%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.8173%" y="229" width="0.0808%" height="15" fill="rgb(211,9,40)" fg:x="1210" fg:w="1"/><text x="98.0673%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8173%" y="213" width="0.0808%" height="15" fill="rgb(242,57,20)" fg:x="1210" fg:w="1"/><text x="98.0673%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8173%" y="197" width="0.0808%" height="15" fill="rgb(248,85,48)" fg:x="1210" fg:w="1"/><text x="98.0673%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="97.8981%" y="229" width="0.0808%" height="15" fill="rgb(212,117,2)" fg:x="1211" fg:w="1"/><text x="98.1481%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.8981%" y="213" width="0.0808%" height="15" fill="rgb(243,19,3)" fg:x="1211" fg:w="1"/><text x="98.1481%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8981%" y="197" width="0.0808%" height="15" fill="rgb(232,217,24)" fg:x="1211" fg:w="1"/><text x="98.1481%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8981%" y="181" width="0.0808%" height="15" fill="rgb(224,175,40)" fg:x="1211" fg:w="1"/><text x="98.1481%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.57%)</title><rect x="97.4939%" y="277" width="0.5659%" height="15" fill="rgb(212,162,32)" fg:x="1206" fg:w="7"/><text x="97.7439%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.57%)</title><rect x="97.4939%" y="261" width="0.5659%" height="15" fill="rgb(215,9,4)" fg:x="1206" fg:w="7"/><text x="97.7439%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="97.8173%" y="245" width="0.2425%" height="15" fill="rgb(242,42,7)" fg:x="1210" fg:w="3"/><text x="98.0673%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="97.9790%" y="229" width="0.0808%" height="15" fill="rgb(242,184,45)" fg:x="1212" fg:w="1"/><text x="98.2290%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="97.9790%" y="213" width="0.0808%" height="15" fill="rgb(228,111,51)" fg:x="1212" fg:w="1"/><text x="98.2290%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="97.9790%" y="197" width="0.0808%" height="15" fill="rgb(236,147,17)" fg:x="1212" fg:w="1"/><text x="98.2290%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="98.0598%" y="229" width="0.0808%" height="15" fill="rgb(210,75,22)" fg:x="1213" fg:w="1"/><text x="98.3098%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.0598%" y="213" width="0.0808%" height="15" fill="rgb(217,159,45)" fg:x="1213" fg:w="1"/><text x="98.3098%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.0598%" y="197" width="0.0808%" height="15" fill="rgb(245,165,53)" fg:x="1213" fg:w="1"/><text x="98.3098%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.0598%" y="181" width="0.0808%" height="15" fill="rgb(251,190,50)" fg:x="1213" fg:w="1"/><text x="98.3098%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="98.0598%" y="277" width="0.1617%" height="15" fill="rgb(208,203,29)" fg:x="1213" fg:w="2"/><text x="98.3098%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="98.0598%" y="261" width="0.1617%" height="15" fill="rgb(207,209,35)" fg:x="1213" fg:w="2"/><text x="98.3098%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="98.0598%" y="245" width="0.1617%" height="15" fill="rgb(230,144,49)" fg:x="1213" fg:w="2"/><text x="98.3098%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="98.1407%" y="229" width="0.0808%" height="15" fill="rgb(229,31,6)" fg:x="1214" fg:w="1"/><text x="98.3907%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.1407%" y="213" width="0.0808%" height="15" fill="rgb(251,129,24)" fg:x="1214" fg:w="1"/><text x="98.3907%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.1407%" y="197" width="0.0808%" height="15" fill="rgb(235,105,15)" fg:x="1214" fg:w="1"/><text x="98.3907%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1407%" y="181" width="0.0808%" height="15" fill="rgb(216,52,43)" fg:x="1214" fg:w="1"/><text x="98.3907%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="98.2215%" y="245" width="0.0808%" height="15" fill="rgb(238,144,41)" fg:x="1215" fg:w="1"/><text x="98.4715%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="98.2215%" y="229" width="0.0808%" height="15" fill="rgb(243,63,9)" fg:x="1215" fg:w="1"/><text x="98.4715%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="98.2215%" y="213" width="0.0808%" height="15" fill="rgb(246,208,1)" fg:x="1215" fg:w="1"/><text x="98.4715%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (13 samples, 1.05%)</title><rect x="97.3323%" y="325" width="1.0509%" height="15" fill="rgb(233,182,18)" fg:x="1204" fg:w="13"/><text x="97.5823%" y="335.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.05%)</title><rect x="97.3323%" y="309" width="1.0509%" height="15" fill="rgb(242,224,8)" fg:x="1204" fg:w="13"/><text x="97.5823%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.05%)</title><rect x="97.3323%" y="293" width="1.0509%" height="15" fill="rgb(243,54,37)" fg:x="1204" fg:w="13"/><text x="97.5823%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="98.2215%" y="277" width="0.1617%" height="15" fill="rgb(233,192,12)" fg:x="1215" fg:w="2"/><text x="98.4715%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="98.2215%" y="261" width="0.1617%" height="15" fill="rgb(251,192,53)" fg:x="1215" fg:w="2"/><text x="98.4715%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="98.3023%" y="245" width="0.0808%" height="15" fill="rgb(246,141,26)" fg:x="1216" fg:w="1"/><text x="98.5523%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="98.3023%" y="229" width="0.0808%" height="15" fill="rgb(239,195,19)" fg:x="1216" fg:w="1"/><text x="98.5523%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3023%" y="213" width="0.0808%" height="15" fill="rgb(241,16,39)" fg:x="1216" fg:w="1"/><text x="98.5523%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.8682%" y="245" width="0.0808%" height="15" fill="rgb(223,13,53)" fg:x="1223" fg:w="1"/><text x="99.1182%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.8682%" y="229" width="0.0808%" height="15" fill="rgb(214,227,0)" fg:x="1223" fg:w="1"/><text x="99.1182%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.8682%" y="213" width="0.0808%" height="15" fill="rgb(228,103,26)" fg:x="1223" fg:w="1"/><text x="99.1182%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (277 samples, 22.39%)</title><rect x="76.6370%" y="437" width="22.3929%" height="15" fill="rgb(254,177,53)" fg:x="948" fg:w="277"/><text x="76.8870%" y="447.50">&lt;&amp;kernel::model::entry::Entry as pl..</text></g><g><title>plugins_core::looking::model::qualify_name (271 samples, 21.91%)</title><rect x="77.1221%" y="421" width="21.9078%" height="15" fill="rgb(208,201,34)" fg:x="954" fg:w="271"/><text x="77.3721%" y="431.50">plugins_core::looking::model::quali..</text></g><g><title>indefinite::indefinite (271 samples, 21.91%)</title><rect x="77.1221%" y="405" width="21.9078%" height="15" fill="rgb(212,39,5)" fg:x="954" fg:w="271"/><text x="77.3721%" y="415.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (271 samples, 21.91%)</title><rect x="77.1221%" y="389" width="21.9078%" height="15" fill="rgb(246,117,3)" fg:x="954" fg:w="271"/><text x="77.3721%" y="399.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (271 samples, 21.91%)</title><rect x="77.1221%" y="373" width="21.9078%" height="15" fill="rgb(244,118,39)" fg:x="954" fg:w="271"/><text x="77.3721%" y="383.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (24 samples, 1.94%)</title><rect x="97.0897%" y="357" width="1.9402%" height="15" fill="rgb(241,64,10)" fg:x="1201" fg:w="24"/><text x="97.3397%" y="367.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (23 samples, 1.86%)</title><rect x="97.1706%" y="341" width="1.8593%" height="15" fill="rgb(229,39,44)" fg:x="1202" fg:w="23"/><text x="97.4206%" y="351.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.65%)</title><rect x="98.3832%" y="325" width="0.6467%" height="15" fill="rgb(230,226,3)" fg:x="1217" fg:w="8"/><text x="98.6332%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.65%)</title><rect x="98.3832%" y="309" width="0.6467%" height="15" fill="rgb(222,13,42)" fg:x="1217" fg:w="8"/><text x="98.6332%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.65%)</title><rect x="98.3832%" y="293" width="0.6467%" height="15" fill="rgb(247,180,54)" fg:x="1217" fg:w="8"/><text x="98.6332%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="98.4640%" y="277" width="0.5659%" height="15" fill="rgb(205,96,16)" fg:x="1218" fg:w="7"/><text x="98.7140%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="98.4640%" y="261" width="0.5659%" height="15" fill="rgb(205,100,21)" fg:x="1218" fg:w="7"/><text x="98.7140%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9491%" y="245" width="0.0808%" height="15" fill="rgb(248,51,4)" fg:x="1224" fg:w="1"/><text x="99.1991%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.9491%" y="229" width="0.0808%" height="15" fill="rgb(217,197,30)" fg:x="1224" fg:w="1"/><text x="99.1991%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.9491%" y="213" width="0.0808%" height="15" fill="rgb(240,179,40)" fg:x="1224" fg:w="1"/><text x="99.1991%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.0299%" y="437" width="0.0808%" height="15" fill="rgb(212,185,35)" fg:x="1225" fg:w="1"/><text x="99.2799%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="99.1108%" y="405" width="0.0808%" height="15" fill="rgb(251,222,31)" fg:x="1226" fg:w="1"/><text x="99.3608%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="99.1108%" y="389" width="0.0808%" height="15" fill="rgb(208,140,36)" fg:x="1226" fg:w="1"/><text x="99.3608%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1108%" y="373" width="0.0808%" height="15" fill="rgb(220,148,1)" fg:x="1226" fg:w="1"/><text x="99.3608%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="99.1108%" y="357" width="0.0808%" height="15" fill="rgb(254,4,28)" fg:x="1226" fg:w="1"/><text x="99.3608%" y="367.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="99.1916%" y="405" width="0.0808%" height="15" fill="rgb(222,185,44)" fg:x="1227" fg:w="1"/><text x="99.4416%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.1916%" y="389" width="0.0808%" height="15" fill="rgb(215,74,39)" fg:x="1227" fg:w="1"/><text x="99.4416%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.1916%" y="373" width="0.0808%" height="15" fill="rgb(247,86,4)" fg:x="1227" fg:w="1"/><text x="99.4416%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="99.1916%" y="357" width="0.0808%" height="15" fill="rgb(231,105,32)" fg:x="1227" fg:w="1"/><text x="99.4416%" y="367.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;&amp;kernel::model::EntityPtr&gt; for kernel::model::entity::EntityRef&gt;::from (1 samples, 0.08%)</title><rect x="99.1916%" y="341" width="0.0808%" height="15" fill="rgb(222,65,35)" fg:x="1227" fg:w="1"/><text x="99.4416%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.4341%" y="373" width="0.0808%" height="15" fill="rgb(218,145,35)" fg:x="1230" fg:w="1"/><text x="99.6841%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (293 samples, 23.69%)</title><rect x="75.9095%" y="661" width="23.6863%" height="15" fill="rgb(208,7,15)" fg:x="939" fg:w="293"/><text x="76.1595%" y="671.50">&lt;engine::session::Session as kernel::a..</text></g><g><title>kernel::plugins::mw::apply_middleware (293 samples, 23.69%)</title><rect x="75.9095%" y="645" width="23.6863%" height="15" fill="rgb(209,83,13)" fg:x="939" fg:w="293"/><text x="76.1595%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (293 samples, 23.69%)</title><rect x="75.9095%" y="629" width="23.6863%" height="15" fill="rgb(218,3,10)" fg:x="939" fg:w="293"/><text x="76.1595%" y="639.50">kernel::plugins::mw::MiddlewareNext::h..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (293 samples, 23.69%)</title><rect x="75.9095%" y="613" width="23.6863%" height="15" fill="rgb(211,219,4)" fg:x="939" fg:w="293"/><text x="76.1595%" y="623.50">&lt;engine::session::ExpandSurroundingsMi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (285 samples, 23.04%)</title><rect x="76.5562%" y="597" width="23.0396%" height="15" fill="rgb(228,194,12)" fg:x="947" fg:w="285"/><text x="76.8062%" y="607.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (285 samples, 23.04%)</title><rect x="76.5562%" y="581" width="23.0396%" height="15" fill="rgb(210,175,7)" fg:x="947" fg:w="285"/><text x="76.8062%" y="591.50">&lt;plugins_dynlib::DynamicMiddleware as..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (285 samples, 23.04%)</title><rect x="76.5562%" y="565" width="23.0396%" height="15" fill="rgb(243,132,6)" fg:x="947" fg:w="285"/><text x="76.8062%" y="575.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (285 samples, 23.04%)</title><rect x="76.5562%" y="549" width="23.0396%" height="15" fill="rgb(207,72,18)" fg:x="947" fg:w="285"/><text x="76.8062%" y="559.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (285 samples, 23.04%)</title><rect x="76.5562%" y="533" width="23.0396%" height="15" fill="rgb(236,1,18)" fg:x="947" fg:w="285"/><text x="76.8062%" y="543.50">kernel::plugins::mw::MiddlewareNext::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (285 samples, 23.04%)</title><rect x="76.5562%" y="517" width="23.0396%" height="15" fill="rgb(227,0,18)" fg:x="947" fg:w="285"/><text x="76.8062%" y="527.50">core::ops::function::FnOnce::call_onc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (285 samples, 23.04%)</title><rect x="76.5562%" y="501" width="23.0396%" height="15" fill="rgb(247,37,5)" fg:x="947" fg:w="285"/><text x="76.8062%" y="511.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (285 samples, 23.04%)</title><rect x="76.5562%" y="485" width="23.0396%" height="15" fill="rgb(237,179,24)" fg:x="947" fg:w="285"/><text x="76.8062%" y="495.50">&lt;engine::session::state::State as ker..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (285 samples, 23.04%)</title><rect x="76.5562%" y="469" width="23.0396%" height="15" fill="rgb(226,53,20)" fg:x="947" fg:w="285"/><text x="76.8062%" y="479.50">&lt;plugins_core::looking::actions::Look..</text></g><g><title>plugins_core::looking::model::new_area_observation (284 samples, 22.96%)</title><rect x="76.6370%" y="453" width="22.9588%" height="15" fill="rgb(247,75,7)" fg:x="948" fg:w="284"/><text x="76.8870%" y="463.50">plugins_core::looking::model::new_ar..</text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.49%)</title><rect x="99.1108%" y="437" width="0.4850%" height="15" fill="rgb(233,96,12)" fg:x="1226" fg:w="6"/><text x="99.3608%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.49%)</title><rect x="99.1108%" y="421" width="0.4850%" height="15" fill="rgb(224,125,0)" fg:x="1226" fg:w="6"/><text x="99.3608%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="99.2724%" y="405" width="0.3234%" height="15" fill="rgb(224,92,25)" fg:x="1228" fg:w="4"/><text x="99.5224%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.2724%" y="389" width="0.3234%" height="15" fill="rgb(224,42,24)" fg:x="1228" fg:w="4"/><text x="99.5224%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5150%" y="373" width="0.0808%" height="15" fill="rgb(234,132,49)" fg:x="1231" fg:w="1"/><text x="99.7650%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5150%" y="357" width="0.0808%" height="15" fill="rgb(248,100,35)" fg:x="1231" fg:w="1"/><text x="99.7650%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5150%" y="341" width="0.0808%" height="15" fill="rgb(239,94,40)" fg:x="1231" fg:w="1"/><text x="99.7650%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.5958%" y="661" width="0.0808%" height="15" fill="rgb(235,139,28)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.5958%" y="645" width="0.0808%" height="15" fill="rgb(217,144,7)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.5958%" y="629" width="0.0808%" height="15" fill="rgb(227,55,4)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.5958%" y="613" width="0.0808%" height="15" fill="rgb(252,82,54)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.5958%" y="597" width="0.0808%" height="15" fill="rgb(245,172,4)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.5958%" y="581" width="0.0808%" height="15" fill="rgb(207,26,27)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.5958%" y="565" width="0.0808%" height="15" fill="rgb(252,98,18)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5958%" y="549" width="0.0808%" height="15" fill="rgb(244,8,26)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5958%" y="533" width="0.0808%" height="15" fill="rgb(237,173,45)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5958%" y="517" width="0.0808%" height="15" fill="rgb(208,213,49)" fg:x="1232" fg:w="1"/><text x="99.8458%" y="527.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.6766%" y="597" width="0.0808%" height="15" fill="rgb(212,122,37)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6766%" y="581" width="0.0808%" height="15" fill="rgb(213,80,17)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6766%" y="565" width="0.0808%" height="15" fill="rgb(206,210,43)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6766%" y="549" width="0.0808%" height="15" fill="rgb(229,214,3)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6766%" y="533" width="0.0808%" height="15" fill="rgb(235,213,29)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6766%" y="517" width="0.0808%" height="15" fill="rgb(248,135,26)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6766%" y="501" width="0.0808%" height="15" fill="rgb(242,188,12)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6766%" y="485" width="0.0808%" height="15" fill="rgb(245,38,12)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6766%" y="469" width="0.0808%" height="15" fill="rgb(218,42,13)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6766%" y="453" width="0.0808%" height="15" fill="rgb(238,132,49)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6766%" y="437" width="0.0808%" height="15" fill="rgb(209,196,19)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6766%" y="421" width="0.0808%" height="15" fill="rgb(244,131,22)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6766%" y="405" width="0.0808%" height="15" fill="rgb(223,18,34)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6766%" y="389" width="0.0808%" height="15" fill="rgb(252,124,54)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6766%" y="373" width="0.0808%" height="15" fill="rgb(229,106,42)" fg:x="1233" fg:w="1"/><text x="99.9266%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="99.6766%" y="661" width="0.2425%" height="15" fill="rgb(221,129,1)" fg:x="1233" fg:w="3"/><text x="99.9266%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.6766%" y="645" width="0.2425%" height="15" fill="rgb(229,74,15)" fg:x="1233" fg:w="3"/><text x="99.9266%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.6766%" y="629" width="0.2425%" height="15" fill="rgb(210,206,50)" fg:x="1233" fg:w="3"/><text x="99.9266%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="99.6766%" y="613" width="0.2425%" height="15" fill="rgb(251,114,31)" fg:x="1233" fg:w="3"/><text x="99.9266%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.7575%" y="597" width="0.1617%" height="15" fill="rgb(215,225,28)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7575%" y="581" width="0.1617%" height="15" fill="rgb(237,109,14)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.7575%" y="565" width="0.1617%" height="15" fill="rgb(230,13,37)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7575%" y="549" width="0.1617%" height="15" fill="rgb(231,40,28)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.7575%" y="533" width="0.1617%" height="15" fill="rgb(231,202,18)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7575%" y="517" width="0.1617%" height="15" fill="rgb(225,33,18)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7575%" y="501" width="0.1617%" height="15" fill="rgb(223,64,47)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7575%" y="485" width="0.1617%" height="15" fill="rgb(234,114,13)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7575%" y="469" width="0.1617%" height="15" fill="rgb(248,56,40)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.7575%" y="453" width="0.1617%" height="15" fill="rgb(221,194,21)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7575%" y="437" width="0.1617%" height="15" fill="rgb(242,108,46)" fg:x="1234" fg:w="2"/><text x="100.0075%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.8383%" y="421" width="0.0808%" height="15" fill="rgb(220,106,10)" fg:x="1235" fg:w="1"/><text x="100.0883%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8383%" y="405" width="0.0808%" height="15" fill="rgb(211,88,4)" fg:x="1235" fg:w="1"/><text x="100.0883%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8383%" y="389" width="0.0808%" height="15" fill="rgb(214,95,34)" fg:x="1235" fg:w="1"/><text x="100.0883%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8383%" y="373" width="0.0808%" height="15" fill="rgb(250,160,33)" fg:x="1235" fg:w="1"/><text x="100.0883%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8383%" y="357" width="0.0808%" height="15" fill="rgb(225,29,10)" fg:x="1235" fg:w="1"/><text x="100.0883%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8383%" y="341" width="0.0808%" height="15" fill="rgb(224,28,30)" fg:x="1235" fg:w="1"/><text x="100.0883%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8383%" y="325" width="0.0808%" height="15" fill="rgb(231,77,4)" fg:x="1235" fg:w="1"/><text x="100.0883%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8383%" y="309" width="0.0808%" height="15" fill="rgb(209,63,21)" fg:x="1235" fg:w="1"/><text x="100.0883%" y="319.50"></text></g><g><title>all (1,237 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(226,22,11)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="1039.50"></text></g><g><title>simple-484c7248 (1,237 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(216,82,30)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="1023.50">simple-484c7248</text></g><g><title>_start (1,237 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(246,227,38)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="1007.50">_start</text></g><g><title>__libc_start_main (1,237 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(251,203,53)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="991.50">__libc_start_main</text></g><g><title>main (1,237 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(254,101,1)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="975.50">main</text></g><g><title>std::rt::lang_start_internal (1,237 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(241,180,5)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,237 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(218,168,4)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,237 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(224,223,32)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,237 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(236,106,22)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,237 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(206,121,5)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="895.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,237 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(233,87,28)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,237 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(236,137,17)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,237 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(209,183,38)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="847.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,237 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(206,162,44)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="831.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,237 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(237,70,39)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="815.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,237 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(212,176,5)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="799.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,237 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(232,95,16)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="783.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,237 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(219,115,35)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="767.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,237 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(251,67,27)" fg:x="0" fg:w="1237"/><text x="0.2500%" y="751.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (367 samples, 29.67%)</title><rect x="70.3314%" y="725" width="29.6686%" height="15" fill="rgb(222,95,40)" fg:x="870" fg:w="367"/><text x="70.5814%" y="735.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (367 samples, 29.67%)</title><rect x="70.3314%" y="709" width="29.6686%" height="15" fill="rgb(250,35,16)" fg:x="870" fg:w="367"/><text x="70.5814%" y="719.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (367 samples, 29.67%)</title><rect x="70.3314%" y="693" width="29.6686%" height="15" fill="rgb(224,86,44)" fg:x="870" fg:w="367"/><text x="70.5814%" y="703.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (298 samples, 24.09%)</title><rect x="75.9095%" y="677" width="24.0905%" height="15" fill="rgb(237,53,53)" fg:x="939" fg:w="298"/><text x="76.1595%" y="687.50">engine::session::Session::evaluate_and..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.9192%" y="661" width="0.0808%" height="15" fill="rgb(208,171,33)" fg:x="1236" fg:w="1"/><text x="100.1692%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="99.9192%" y="645" width="0.0808%" height="15" fill="rgb(222,64,27)" fg:x="1236" fg:w="1"/><text x="100.1692%" y="655.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.9192%" y="629" width="0.0808%" height="15" fill="rgb(221,121,35)" fg:x="1236" fg:w="1"/><text x="100.1692%" y="639.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="99.9192%" y="613" width="0.0808%" height="15" fill="rgb(228,137,42)" fg:x="1236" fg:w="1"/><text x="100.1692%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="99.9192%" y="597" width="0.0808%" height="15" fill="rgb(227,54,21)" fg:x="1236" fg:w="1"/><text x="100.1692%" y="607.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="99.9192%" y="581" width="0.0808%" height="15" fill="rgb(240,168,33)" fg:x="1236" fg:w="1"/><text x="100.1692%" y="591.50"></text></g><g><title>plugins_core::library::parser::spaces (1 samples, 0.08%)</title><rect x="99.9192%" y="565" width="0.0808%" height="15" fill="rgb(243,159,6)" fg:x="1236" fg:w="1"/><text x="100.1692%" y="575.50"></text></g></svg></svg>