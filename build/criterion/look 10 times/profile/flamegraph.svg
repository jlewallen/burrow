<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1247"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0802%" height="15" fill="rgb(226,125,25)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.1604%" y="629" width="0.0802%" height="15" fill="rgb(224,165,27)" fg:x="2" fg:w="1"/><text x="0.4104%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1604%" y="613" width="0.0802%" height="15" fill="rgb(233,86,3)" fg:x="2" fg:w="1"/><text x="0.4104%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2406%" y="613" width="0.0802%" height="15" fill="rgb(228,116,20)" fg:x="3" fg:w="1"/><text x="0.4906%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2406%" y="597" width="0.0802%" height="15" fill="rgb(209,192,17)" fg:x="3" fg:w="1"/><text x="0.4906%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0000%" y="741" width="0.4010%" height="15" fill="rgb(224,88,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (4 samples, 0.32%)</title><rect x="0.0802%" y="725" width="0.3208%" height="15" fill="rgb(233,38,6)" fg:x="1" fg:w="4"/><text x="0.3302%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0802%" y="709" width="0.3208%" height="15" fill="rgb(212,59,30)" fg:x="1" fg:w="4"/><text x="0.3302%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="0.0802%" y="693" width="0.3208%" height="15" fill="rgb(213,80,3)" fg:x="1" fg:w="4"/><text x="0.3302%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0802%" y="677" width="0.3208%" height="15" fill="rgb(251,178,7)" fg:x="1" fg:w="4"/><text x="0.3302%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0802%" y="661" width="0.3208%" height="15" fill="rgb(213,154,26)" fg:x="1" fg:w="4"/><text x="0.3302%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0802%" y="645" width="0.3208%" height="15" fill="rgb(238,165,49)" fg:x="1" fg:w="4"/><text x="0.3302%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.2406%" y="629" width="0.1604%" height="15" fill="rgb(248,91,46)" fg:x="3" fg:w="2"/><text x="0.4906%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3208%" y="613" width="0.0802%" height="15" fill="rgb(244,21,52)" fg:x="4" fg:w="1"/><text x="0.5708%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3208%" y="597" width="0.0802%" height="15" fill="rgb(247,122,20)" fg:x="4" fg:w="1"/><text x="0.5708%" y="607.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.4812%" y="629" width="0.0802%" height="15" fill="rgb(218,27,9)" fg:x="6" fg:w="1"/><text x="0.7312%" y="639.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.4812%" y="613" width="0.0802%" height="15" fill="rgb(246,7,6)" fg:x="6" fg:w="1"/><text x="0.7312%" y="623.50"></text></g><g><title>_IO_default_xsputn (1 samples, 0.08%)</title><rect x="0.4812%" y="597" width="0.0802%" height="15" fill="rgb(227,135,54)" fg:x="6" fg:w="1"/><text x="0.7312%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5613%" y="613" width="0.0802%" height="15" fill="rgb(247,14,11)" fg:x="7" fg:w="1"/><text x="0.8113%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.72%)</title><rect x="0.4010%" y="741" width="0.7217%" height="15" fill="rgb(206,149,34)" fg:x="5" fg:w="9"/><text x="0.6510%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (9 samples, 0.72%)</title><rect x="0.4010%" y="725" width="0.7217%" height="15" fill="rgb(227,228,4)" fg:x="5" fg:w="9"/><text x="0.6510%" y="735.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.72%)</title><rect x="0.4010%" y="709" width="0.7217%" height="15" fill="rgb(238,218,28)" fg:x="5" fg:w="9"/><text x="0.6510%" y="719.50"></text></g><g><title>engine::session::Session::initialize (9 samples, 0.72%)</title><rect x="0.4010%" y="693" width="0.7217%" height="15" fill="rgb(252,86,40)" fg:x="5" fg:w="9"/><text x="0.6510%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.64%)</title><rect x="0.4812%" y="677" width="0.6415%" height="15" fill="rgb(251,225,11)" fg:x="6" fg:w="8"/><text x="0.7312%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="0.4812%" y="661" width="0.6415%" height="15" fill="rgb(206,46,49)" fg:x="6" fg:w="8"/><text x="0.7312%" y="671.50"></text></g><g><title>libloading::safe::Library::new (8 samples, 0.64%)</title><rect x="0.4812%" y="645" width="0.6415%" height="15" fill="rgb(245,128,24)" fg:x="6" fg:w="8"/><text x="0.7312%" y="655.50"></text></g><g><title>dlopen (7 samples, 0.56%)</title><rect x="0.5613%" y="629" width="0.5613%" height="15" fill="rgb(219,177,34)" fg:x="7" fg:w="7"/><text x="0.8113%" y="639.50"></text></g><g><title>_dl_catch_error (6 samples, 0.48%)</title><rect x="0.6415%" y="613" width="0.4812%" height="15" fill="rgb(218,60,48)" fg:x="8" fg:w="6"/><text x="0.8915%" y="623.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="0.6415%" y="597" width="0.4812%" height="15" fill="rgb(221,11,5)" fg:x="8" fg:w="6"/><text x="0.8915%" y="607.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="0.6415%" y="581" width="0.4812%" height="15" fill="rgb(220,148,13)" fg:x="8" fg:w="6"/><text x="0.8915%" y="591.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="0.7217%" y="565" width="0.4010%" height="15" fill="rgb(210,16,3)" fg:x="9" fg:w="5"/><text x="0.9717%" y="575.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.1227%" y="725" width="0.0802%" height="15" fill="rgb(236,80,2)" fg:x="14" fg:w="1"/><text x="1.3727%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.1227%" y="709" width="0.0802%" height="15" fill="rgb(239,129,19)" fg:x="14" fg:w="1"/><text x="1.3727%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.1227%" y="693" width="0.0802%" height="15" fill="rgb(220,106,35)" fg:x="14" fg:w="1"/><text x="1.3727%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.1227%" y="677" width="0.0802%" height="15" fill="rgb(252,139,45)" fg:x="14" fg:w="1"/><text x="1.3727%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.1227%" y="661" width="0.0802%" height="15" fill="rgb(229,8,36)" fg:x="14" fg:w="1"/><text x="1.3727%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.1227%" y="645" width="0.0802%" height="15" fill="rgb(230,126,33)" fg:x="14" fg:w="1"/><text x="1.3727%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.1227%" y="629" width="0.0802%" height="15" fill="rgb(239,140,21)" fg:x="14" fg:w="1"/><text x="1.3727%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.1227%" y="613" width="0.0802%" height="15" fill="rgb(254,104,9)" fg:x="14" fg:w="1"/><text x="1.3727%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.1227%" y="597" width="0.0802%" height="15" fill="rgb(239,52,14)" fg:x="14" fg:w="1"/><text x="1.3727%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.1227%" y="581" width="0.0802%" height="15" fill="rgb(208,227,44)" fg:x="14" fg:w="1"/><text x="1.3727%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.1227%" y="565" width="0.0802%" height="15" fill="rgb(246,18,19)" fg:x="14" fg:w="1"/><text x="1.3727%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.1227%" y="549" width="0.0802%" height="15" fill="rgb(235,228,25)" fg:x="14" fg:w="1"/><text x="1.3727%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.1227%" y="533" width="0.0802%" height="15" fill="rgb(240,156,20)" fg:x="14" fg:w="1"/><text x="1.3727%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.2029%" y="725" width="0.0802%" height="15" fill="rgb(224,8,20)" fg:x="15" fg:w="1"/><text x="1.4529%" y="735.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.2029%" y="709" width="0.0802%" height="15" fill="rgb(214,12,52)" fg:x="15" fg:w="1"/><text x="1.4529%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="1.2831%" y="725" width="0.0802%" height="15" fill="rgb(211,220,47)" fg:x="16" fg:w="1"/><text x="1.5331%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.2831%" y="709" width="0.0802%" height="15" fill="rgb(250,173,5)" fg:x="16" fg:w="1"/><text x="1.5331%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2831%" y="693" width="0.0802%" height="15" fill="rgb(250,125,52)" fg:x="16" fg:w="1"/><text x="1.5331%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="1.3633%" y="725" width="0.0802%" height="15" fill="rgb(209,133,18)" fg:x="17" fg:w="1"/><text x="1.6133%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.3633%" y="709" width="0.0802%" height="15" fill="rgb(216,173,22)" fg:x="17" fg:w="1"/><text x="1.6133%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.3633%" y="693" width="0.0802%" height="15" fill="rgb(205,3,22)" fg:x="17" fg:w="1"/><text x="1.6133%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3633%" y="677" width="0.0802%" height="15" fill="rgb(248,22,20)" fg:x="17" fg:w="1"/><text x="1.6133%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.4435%" y="709" width="0.0802%" height="15" fill="rgb(233,6,29)" fg:x="18" fg:w="1"/><text x="1.6935%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="1.4435%" y="693" width="0.0802%" height="15" fill="rgb(240,22,54)" fg:x="18" fg:w="1"/><text x="1.6935%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="1.6840%" y="629" width="0.1604%" height="15" fill="rgb(231,133,32)" fg:x="21" fg:w="2"/><text x="1.9340%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.6840%" y="613" width="0.1604%" height="15" fill="rgb(248,193,4)" fg:x="21" fg:w="2"/><text x="1.9340%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.7642%" y="597" width="0.0802%" height="15" fill="rgb(211,178,46)" fg:x="22" fg:w="1"/><text x="2.0142%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.7642%" y="581" width="0.0802%" height="15" fill="rgb(224,5,42)" fg:x="22" fg:w="1"/><text x="2.0142%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.9246%" y="549" width="0.0802%" height="15" fill="rgb(239,176,25)" fg:x="24" fg:w="1"/><text x="2.1746%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.9246%" y="533" width="0.0802%" height="15" fill="rgb(245,187,50)" fg:x="24" fg:w="1"/><text x="2.1746%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9246%" y="517" width="0.0802%" height="15" fill="rgb(248,24,15)" fg:x="24" fg:w="1"/><text x="2.1746%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.9246%" y="501" width="0.0802%" height="15" fill="rgb(205,166,13)" fg:x="24" fg:w="1"/><text x="2.1746%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.9246%" y="485" width="0.0802%" height="15" fill="rgb(208,114,23)" fg:x="24" fg:w="1"/><text x="2.1746%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.9246%" y="469" width="0.0802%" height="15" fill="rgb(239,127,18)" fg:x="24" fg:w="1"/><text x="2.1746%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.9246%" y="453" width="0.0802%" height="15" fill="rgb(219,154,28)" fg:x="24" fg:w="1"/><text x="2.1746%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.9246%" y="437" width="0.0802%" height="15" fill="rgb(225,157,23)" fg:x="24" fg:w="1"/><text x="2.1746%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="1.8444%" y="581" width="0.2406%" height="15" fill="rgb(219,8,6)" fg:x="23" fg:w="3"/><text x="2.0944%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.9246%" y="565" width="0.1604%" height="15" fill="rgb(212,47,6)" fg:x="24" fg:w="2"/><text x="2.1746%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0048%" y="549" width="0.0802%" height="15" fill="rgb(224,190,4)" fg:x="25" fg:w="1"/><text x="2.2548%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0048%" y="533" width="0.0802%" height="15" fill="rgb(239,183,29)" fg:x="25" fg:w="1"/><text x="2.2548%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.8444%" y="613" width="0.3208%" height="15" fill="rgb(213,57,7)" fg:x="23" fg:w="4"/><text x="2.0944%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.8444%" y="597" width="0.3208%" height="15" fill="rgb(216,148,1)" fg:x="23" fg:w="4"/><text x="2.0944%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0850%" y="581" width="0.0802%" height="15" fill="rgb(236,182,29)" fg:x="26" fg:w="1"/><text x="2.3350%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0850%" y="565" width="0.0802%" height="15" fill="rgb(244,120,48)" fg:x="26" fg:w="1"/><text x="2.3350%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="2.0850%" y="549" width="0.0802%" height="15" fill="rgb(206,71,34)" fg:x="26" fg:w="1"/><text x="2.3350%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="1.6840%" y="645" width="0.6415%" height="15" fill="rgb(242,32,6)" fg:x="21" fg:w="8"/><text x="1.9340%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="1.8444%" y="629" width="0.4812%" height="15" fill="rgb(241,35,3)" fg:x="23" fg:w="6"/><text x="2.0944%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.1652%" y="613" width="0.1604%" height="15" fill="rgb(222,62,19)" fg:x="27" fg:w="2"/><text x="2.4152%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.1652%" y="597" width="0.1604%" height="15" fill="rgb(223,110,41)" fg:x="27" fg:w="2"/><text x="2.4152%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.1652%" y="581" width="0.1604%" height="15" fill="rgb(208,224,4)" fg:x="27" fg:w="2"/><text x="2.4152%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.1652%" y="565" width="0.1604%" height="15" fill="rgb(241,137,19)" fg:x="27" fg:w="2"/><text x="2.4152%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.1652%" y="549" width="0.1604%" height="15" fill="rgb(244,24,17)" fg:x="27" fg:w="2"/><text x="2.4152%" y="559.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="2.1652%" y="533" width="0.1604%" height="15" fill="rgb(245,178,49)" fg:x="27" fg:w="2"/><text x="2.4152%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3256%" y="645" width="0.0802%" height="15" fill="rgb(219,160,38)" fg:x="29" fg:w="1"/><text x="2.5756%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.3256%" y="629" width="0.0802%" height="15" fill="rgb(228,137,14)" fg:x="29" fg:w="1"/><text x="2.5756%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3256%" y="613" width="0.0802%" height="15" fill="rgb(237,134,11)" fg:x="29" fg:w="1"/><text x="2.5756%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3256%" y="597" width="0.0802%" height="15" fill="rgb(211,126,44)" fg:x="29" fg:w="1"/><text x="2.5756%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.3256%" y="581" width="0.0802%" height="15" fill="rgb(226,171,33)" fg:x="29" fg:w="1"/><text x="2.5756%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4058%" y="597" width="0.0802%" height="15" fill="rgb(253,99,13)" fg:x="30" fg:w="1"/><text x="2.6558%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.5662%" y="533" width="0.0802%" height="15" fill="rgb(244,48,7)" fg:x="32" fg:w="1"/><text x="2.8162%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7265%" y="517" width="0.0802%" height="15" fill="rgb(244,217,54)" fg:x="34" fg:w="1"/><text x="2.9765%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7265%" y="501" width="0.0802%" height="15" fill="rgb(224,15,18)" fg:x="34" fg:w="1"/><text x="2.9765%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.8067%" y="501" width="0.0802%" height="15" fill="rgb(244,99,12)" fg:x="35" fg:w="1"/><text x="3.0567%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8067%" y="485" width="0.0802%" height="15" fill="rgb(233,226,8)" fg:x="35" fg:w="1"/><text x="3.0567%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8067%" y="469" width="0.0802%" height="15" fill="rgb(229,211,3)" fg:x="35" fg:w="1"/><text x="3.0567%" y="479.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.52%)</title><rect x="1.4435%" y="725" width="1.5237%" height="15" fill="rgb(216,140,21)" fg:x="18" fg:w="19"/><text x="1.6935%" y="735.50"></text></g><g><title>engine::session::state::State::close (18 samples, 1.44%)</title><rect x="1.5237%" y="709" width="1.4435%" height="15" fill="rgb(234,122,30)" fg:x="19" fg:w="18"/><text x="1.7737%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.44%)</title><rect x="1.5237%" y="693" width="1.4435%" height="15" fill="rgb(236,25,46)" fg:x="19" fg:w="18"/><text x="1.7737%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (17 samples, 1.36%)</title><rect x="1.6038%" y="677" width="1.3633%" height="15" fill="rgb(217,52,54)" fg:x="20" fg:w="17"/><text x="1.8538%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.36%)</title><rect x="1.6038%" y="661" width="1.3633%" height="15" fill="rgb(222,29,26)" fg:x="20" fg:w="17"/><text x="1.8538%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="2.4058%" y="645" width="0.5613%" height="15" fill="rgb(216,177,29)" fg:x="30" fg:w="7"/><text x="2.6558%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="2.4058%" y="629" width="0.5613%" height="15" fill="rgb(247,136,51)" fg:x="30" fg:w="7"/><text x="2.6558%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="2.4058%" y="613" width="0.5613%" height="15" fill="rgb(231,47,47)" fg:x="30" fg:w="7"/><text x="2.6558%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="2.4860%" y="597" width="0.4812%" height="15" fill="rgb(211,192,36)" fg:x="31" fg:w="6"/><text x="2.7360%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="2.4860%" y="581" width="0.4812%" height="15" fill="rgb(229,156,32)" fg:x="31" fg:w="6"/><text x="2.7360%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="2.5662%" y="565" width="0.4010%" height="15" fill="rgb(248,213,20)" fg:x="32" fg:w="5"/><text x="2.8162%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="2.5662%" y="549" width="0.4010%" height="15" fill="rgb(217,64,7)" fg:x="32" fg:w="5"/><text x="2.8162%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="2.6464%" y="533" width="0.3208%" height="15" fill="rgb(232,142,8)" fg:x="33" fg:w="4"/><text x="2.8964%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8067%" y="517" width="0.1604%" height="15" fill="rgb(224,92,44)" fg:x="35" fg:w="2"/><text x="3.0567%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8869%" y="501" width="0.0802%" height="15" fill="rgb(214,169,17)" fg:x="36" fg:w="1"/><text x="3.1369%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="2.9671%" y="693" width="0.0802%" height="15" fill="rgb(210,59,37)" fg:x="37" fg:w="1"/><text x="3.2171%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="2.9671%" y="677" width="0.0802%" height="15" fill="rgb(214,116,48)" fg:x="37" fg:w="1"/><text x="3.2171%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="2.9671%" y="661" width="0.0802%" height="15" fill="rgb(244,191,6)" fg:x="37" fg:w="1"/><text x="3.2171%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.9671%" y="645" width="0.0802%" height="15" fill="rgb(241,50,52)" fg:x="37" fg:w="1"/><text x="3.2171%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.0473%" y="677" width="0.0802%" height="15" fill="rgb(236,75,39)" fg:x="38" fg:w="1"/><text x="3.2973%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.0473%" y="661" width="0.0802%" height="15" fill="rgb(236,99,0)" fg:x="38" fg:w="1"/><text x="3.2973%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.0473%" y="645" width="0.0802%" height="15" fill="rgb(207,202,15)" fg:x="38" fg:w="1"/><text x="3.2973%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.0473%" y="629" width="0.0802%" height="15" fill="rgb(233,207,14)" fg:x="38" fg:w="1"/><text x="3.2973%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0473%" y="613" width="0.0802%" height="15" fill="rgb(226,27,51)" fg:x="38" fg:w="1"/><text x="3.2973%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0473%" y="597" width="0.0802%" height="15" fill="rgb(206,104,42)" fg:x="38" fg:w="1"/><text x="3.2973%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0473%" y="581" width="0.0802%" height="15" fill="rgb(212,225,4)" fg:x="38" fg:w="1"/><text x="3.2973%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0473%" y="565" width="0.0802%" height="15" fill="rgb(233,96,42)" fg:x="38" fg:w="1"/><text x="3.2973%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.0473%" y="549" width="0.0802%" height="15" fill="rgb(229,21,32)" fg:x="38" fg:w="1"/><text x="3.2973%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0473%" y="533" width="0.0802%" height="15" fill="rgb(226,216,24)" fg:x="38" fg:w="1"/><text x="3.2973%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0473%" y="517" width="0.0802%" height="15" fill="rgb(221,163,17)" fg:x="38" fg:w="1"/><text x="3.2973%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0473%" y="501" width="0.0802%" height="15" fill="rgb(216,216,42)" fg:x="38" fg:w="1"/><text x="3.2973%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.0473%" y="485" width="0.0802%" height="15" fill="rgb(240,118,7)" fg:x="38" fg:w="1"/><text x="3.2973%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.0473%" y="469" width="0.0802%" height="15" fill="rgb(221,67,37)" fg:x="38" fg:w="1"/><text x="3.2973%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="3.0473%" y="453" width="0.0802%" height="15" fill="rgb(241,32,44)" fg:x="38" fg:w="1"/><text x="3.2973%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="2.9671%" y="709" width="0.2406%" height="15" fill="rgb(235,204,43)" fg:x="37" fg:w="3"/><text x="3.2171%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.0473%" y="693" width="0.1604%" height="15" fill="rgb(213,116,10)" fg:x="38" fg:w="2"/><text x="3.2973%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="3.1275%" y="677" width="0.0802%" height="15" fill="rgb(239,15,48)" fg:x="39" fg:w="1"/><text x="3.3775%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1275%" y="661" width="0.0802%" height="15" fill="rgb(207,123,36)" fg:x="39" fg:w="1"/><text x="3.3775%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1275%" y="645" width="0.0802%" height="15" fill="rgb(209,103,30)" fg:x="39" fg:w="1"/><text x="3.3775%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="3.1275%" y="629" width="0.0802%" height="15" fill="rgb(238,100,19)" fg:x="39" fg:w="1"/><text x="3.3775%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1275%" y="613" width="0.0802%" height="15" fill="rgb(244,30,14)" fg:x="39" fg:w="1"/><text x="3.3775%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.2077%" y="693" width="0.0802%" height="15" fill="rgb(249,174,6)" fg:x="40" fg:w="1"/><text x="3.4577%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.2077%" y="677" width="0.0802%" height="15" fill="rgb(235,213,41)" fg:x="40" fg:w="1"/><text x="3.4577%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.2077%" y="661" width="0.0802%" height="15" fill="rgb(213,118,6)" fg:x="40" fg:w="1"/><text x="3.4577%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.2077%" y="645" width="0.0802%" height="15" fill="rgb(235,44,51)" fg:x="40" fg:w="1"/><text x="3.4577%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.2077%" y="629" width="0.0802%" height="15" fill="rgb(217,9,53)" fg:x="40" fg:w="1"/><text x="3.4577%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.2077%" y="613" width="0.0802%" height="15" fill="rgb(237,172,34)" fg:x="40" fg:w="1"/><text x="3.4577%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2077%" y="597" width="0.0802%" height="15" fill="rgb(206,206,11)" fg:x="40" fg:w="1"/><text x="3.4577%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.2077%" y="581" width="0.0802%" height="15" fill="rgb(214,149,29)" fg:x="40" fg:w="1"/><text x="3.4577%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2077%" y="565" width="0.0802%" height="15" fill="rgb(208,123,3)" fg:x="40" fg:w="1"/><text x="3.4577%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.2077%" y="549" width="0.0802%" height="15" fill="rgb(229,126,4)" fg:x="40" fg:w="1"/><text x="3.4577%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2077%" y="533" width="0.0802%" height="15" fill="rgb(222,92,36)" fg:x="40" fg:w="1"/><text x="3.4577%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.2077%" y="517" width="0.0802%" height="15" fill="rgb(216,39,41)" fg:x="40" fg:w="1"/><text x="3.4577%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2077%" y="501" width="0.0802%" height="15" fill="rgb(253,127,28)" fg:x="40" fg:w="1"/><text x="3.4577%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.2077%" y="485" width="0.0802%" height="15" fill="rgb(249,152,51)" fg:x="40" fg:w="1"/><text x="3.4577%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2077%" y="469" width="0.0802%" height="15" fill="rgb(209,123,42)" fg:x="40" fg:w="1"/><text x="3.4577%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.2077%" y="453" width="0.0802%" height="15" fill="rgb(241,118,22)" fg:x="40" fg:w="1"/><text x="3.4577%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.2879%" y="645" width="0.0802%" height="15" fill="rgb(208,25,7)" fg:x="41" fg:w="1"/><text x="3.5379%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.2879%" y="629" width="0.0802%" height="15" fill="rgb(243,144,39)" fg:x="41" fg:w="1"/><text x="3.5379%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.2879%" y="613" width="0.0802%" height="15" fill="rgb(250,50,5)" fg:x="41" fg:w="1"/><text x="3.5379%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.2879%" y="597" width="0.0802%" height="15" fill="rgb(207,67,11)" fg:x="41" fg:w="1"/><text x="3.5379%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2879%" y="581" width="0.0802%" height="15" fill="rgb(245,204,40)" fg:x="41" fg:w="1"/><text x="3.5379%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.2879%" y="565" width="0.0802%" height="15" fill="rgb(238,228,24)" fg:x="41" fg:w="1"/><text x="3.5379%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2879%" y="549" width="0.0802%" height="15" fill="rgb(217,116,22)" fg:x="41" fg:w="1"/><text x="3.5379%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.2879%" y="533" width="0.0802%" height="15" fill="rgb(234,98,12)" fg:x="41" fg:w="1"/><text x="3.5379%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.2879%" y="517" width="0.0802%" height="15" fill="rgb(242,170,50)" fg:x="41" fg:w="1"/><text x="3.5379%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.2879%" y="501" width="0.0802%" height="15" fill="rgb(235,7,5)" fg:x="41" fg:w="1"/><text x="3.5379%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3681%" y="597" width="0.0802%" height="15" fill="rgb(241,114,28)" fg:x="42" fg:w="1"/><text x="3.6181%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3681%" y="581" width="0.0802%" height="15" fill="rgb(246,112,42)" fg:x="42" fg:w="1"/><text x="3.6181%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.56%)</title><rect x="2.9671%" y="725" width="0.5613%" height="15" fill="rgb(248,228,14)" fg:x="37" fg:w="7"/><text x="3.2171%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="3.2077%" y="709" width="0.3208%" height="15" fill="rgb(208,133,18)" fg:x="40" fg:w="4"/><text x="3.4577%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="3.2879%" y="693" width="0.2406%" height="15" fill="rgb(207,35,49)" fg:x="41" fg:w="3"/><text x="3.5379%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="3.2879%" y="677" width="0.2406%" height="15" fill="rgb(205,68,36)" fg:x="41" fg:w="3"/><text x="3.5379%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="3.2879%" y="661" width="0.2406%" height="15" fill="rgb(245,62,40)" fg:x="41" fg:w="3"/><text x="3.5379%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="3.3681%" y="645" width="0.1604%" height="15" fill="rgb(228,27,24)" fg:x="42" fg:w="2"/><text x="3.6181%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.3681%" y="629" width="0.1604%" height="15" fill="rgb(253,19,12)" fg:x="42" fg:w="2"/><text x="3.6181%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.3681%" y="613" width="0.1604%" height="15" fill="rgb(232,28,20)" fg:x="42" fg:w="2"/><text x="3.6181%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.4483%" y="597" width="0.0802%" height="15" fill="rgb(218,35,51)" fg:x="43" fg:w="1"/><text x="3.6983%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4483%" y="581" width="0.0802%" height="15" fill="rgb(212,90,40)" fg:x="43" fg:w="1"/><text x="3.6983%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.4483%" y="565" width="0.0802%" height="15" fill="rgb(220,172,12)" fg:x="43" fg:w="1"/><text x="3.6983%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4483%" y="549" width="0.0802%" height="15" fill="rgb(226,159,20)" fg:x="43" fg:w="1"/><text x="3.6983%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.4483%" y="533" width="0.0802%" height="15" fill="rgb(234,205,16)" fg:x="43" fg:w="1"/><text x="3.6983%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4483%" y="517" width="0.0802%" height="15" fill="rgb(207,9,39)" fg:x="43" fg:w="1"/><text x="3.6983%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.4483%" y="501" width="0.0802%" height="15" fill="rgb(249,143,15)" fg:x="43" fg:w="1"/><text x="3.6983%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4483%" y="485" width="0.0802%" height="15" fill="rgb(253,133,29)" fg:x="43" fg:w="1"/><text x="3.6983%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="3.5285%" y="677" width="0.0802%" height="15" fill="rgb(221,187,0)" fg:x="44" fg:w="1"/><text x="3.7785%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="3.5285%" y="661" width="0.0802%" height="15" fill="rgb(205,204,26)" fg:x="44" fg:w="1"/><text x="3.7785%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="3.5285%" y="693" width="0.2406%" height="15" fill="rgb(224,68,54)" fg:x="44" fg:w="3"/><text x="3.7785%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="3.6087%" y="677" width="0.1604%" height="15" fill="rgb(209,67,4)" fg:x="45" fg:w="2"/><text x="3.8587%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="3.6087%" y="661" width="0.1604%" height="15" fill="rgb(228,229,18)" fg:x="45" fg:w="2"/><text x="3.8587%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="3.6087%" y="645" width="0.1604%" height="15" fill="rgb(231,89,13)" fg:x="45" fg:w="2"/><text x="3.8587%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="3.6087%" y="629" width="0.1604%" height="15" fill="rgb(210,182,18)" fg:x="45" fg:w="2"/><text x="3.8587%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="3.6087%" y="613" width="0.1604%" height="15" fill="rgb(240,105,2)" fg:x="45" fg:w="2"/><text x="3.8587%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="3.6087%" y="597" width="0.1604%" height="15" fill="rgb(207,170,50)" fg:x="45" fg:w="2"/><text x="3.8587%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.6889%" y="581" width="0.0802%" height="15" fill="rgb(232,133,24)" fg:x="46" fg:w="1"/><text x="3.9389%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7690%" y="645" width="0.0802%" height="15" fill="rgb(235,166,27)" fg:x="47" fg:w="1"/><text x="4.0190%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7690%" y="629" width="0.0802%" height="15" fill="rgb(209,19,13)" fg:x="47" fg:w="1"/><text x="4.0190%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7690%" y="613" width="0.0802%" height="15" fill="rgb(226,79,39)" fg:x="47" fg:w="1"/><text x="4.0190%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (7 samples, 0.56%)</title><rect x="3.5285%" y="725" width="0.5613%" height="15" fill="rgb(222,163,10)" fg:x="44" fg:w="7"/><text x="3.7785%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="3.5285%" y="709" width="0.5613%" height="15" fill="rgb(214,44,19)" fg:x="44" fg:w="7"/><text x="3.7785%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="3.7690%" y="693" width="0.3208%" height="15" fill="rgb(210,217,13)" fg:x="47" fg:w="4"/><text x="4.0190%" y="703.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="3.7690%" y="677" width="0.3208%" height="15" fill="rgb(237,61,54)" fg:x="47" fg:w="4"/><text x="4.0190%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="3.7690%" y="661" width="0.3208%" height="15" fill="rgb(226,184,24)" fg:x="47" fg:w="4"/><text x="4.0190%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="3.8492%" y="645" width="0.2406%" height="15" fill="rgb(223,226,4)" fg:x="48" fg:w="3"/><text x="4.0992%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="3.8492%" y="629" width="0.2406%" height="15" fill="rgb(210,26,41)" fg:x="48" fg:w="3"/><text x="4.0992%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="3.8492%" y="613" width="0.2406%" height="15" fill="rgb(220,221,6)" fg:x="48" fg:w="3"/><text x="4.0992%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="3.8492%" y="597" width="0.2406%" height="15" fill="rgb(225,89,49)" fg:x="48" fg:w="3"/><text x="4.0992%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="3.8492%" y="581" width="0.2406%" height="15" fill="rgb(218,70,45)" fg:x="48" fg:w="3"/><text x="4.0992%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="3.8492%" y="565" width="0.2406%" height="15" fill="rgb(238,166,21)" fg:x="48" fg:w="3"/><text x="4.0992%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="3.8492%" y="549" width="0.2406%" height="15" fill="rgb(224,141,44)" fg:x="48" fg:w="3"/><text x="4.0992%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="3.8492%" y="533" width="0.2406%" height="15" fill="rgb(230,12,49)" fg:x="48" fg:w="3"/><text x="4.0992%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="3.9294%" y="517" width="0.1604%" height="15" fill="rgb(212,174,12)" fg:x="49" fg:w="2"/><text x="4.1794%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="3.9294%" y="501" width="0.1604%" height="15" fill="rgb(246,67,9)" fg:x="49" fg:w="2"/><text x="4.1794%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="4.0096%" y="485" width="0.0802%" height="15" fill="rgb(239,35,23)" fg:x="50" fg:w="1"/><text x="4.2596%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="4.0096%" y="469" width="0.0802%" height="15" fill="rgb(211,167,0)" fg:x="50" fg:w="1"/><text x="4.2596%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.0898%" y="693" width="0.0802%" height="15" fill="rgb(225,119,45)" fg:x="51" fg:w="1"/><text x="4.3398%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0898%" y="677" width="0.0802%" height="15" fill="rgb(210,162,6)" fg:x="51" fg:w="1"/><text x="4.3398%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.0898%" y="661" width="0.0802%" height="15" fill="rgb(208,118,35)" fg:x="51" fg:w="1"/><text x="4.3398%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.0898%" y="645" width="0.0802%" height="15" fill="rgb(239,4,53)" fg:x="51" fg:w="1"/><text x="4.3398%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.0898%" y="629" width="0.0802%" height="15" fill="rgb(213,130,21)" fg:x="51" fg:w="1"/><text x="4.3398%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="4.0898%" y="725" width="0.1604%" height="15" fill="rgb(235,148,0)" fg:x="51" fg:w="2"/><text x="4.3398%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="4.0898%" y="709" width="0.1604%" height="15" fill="rgb(244,224,18)" fg:x="51" fg:w="2"/><text x="4.3398%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.1700%" y="693" width="0.0802%" height="15" fill="rgb(211,214,4)" fg:x="52" fg:w="1"/><text x="4.4200%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.1700%" y="677" width="0.0802%" height="15" fill="rgb(206,119,25)" fg:x="52" fg:w="1"/><text x="4.4200%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="4.1700%" y="661" width="0.0802%" height="15" fill="rgb(243,93,47)" fg:x="52" fg:w="1"/><text x="4.4200%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.1700%" y="645" width="0.0802%" height="15" fill="rgb(224,194,6)" fg:x="52" fg:w="1"/><text x="4.4200%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="4.1700%" y="629" width="0.0802%" height="15" fill="rgb(243,229,6)" fg:x="52" fg:w="1"/><text x="4.4200%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.1700%" y="613" width="0.0802%" height="15" fill="rgb(207,23,50)" fg:x="52" fg:w="1"/><text x="4.4200%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="4.1700%" y="597" width="0.0802%" height="15" fill="rgb(253,192,32)" fg:x="52" fg:w="1"/><text x="4.4200%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="4.1700%" y="581" width="0.0802%" height="15" fill="rgb(213,21,6)" fg:x="52" fg:w="1"/><text x="4.4200%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.1700%" y="565" width="0.0802%" height="15" fill="rgb(243,151,13)" fg:x="52" fg:w="1"/><text x="4.4200%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="4.1700%" y="549" width="0.0802%" height="15" fill="rgb(233,165,41)" fg:x="52" fg:w="1"/><text x="4.4200%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.2502%" y="709" width="0.0802%" height="15" fill="rgb(246,176,45)" fg:x="53" fg:w="1"/><text x="4.5002%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.2502%" y="693" width="0.0802%" height="15" fill="rgb(217,170,52)" fg:x="53" fg:w="1"/><text x="4.5002%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.2502%" y="677" width="0.0802%" height="15" fill="rgb(214,203,54)" fg:x="53" fg:w="1"/><text x="4.5002%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.2502%" y="661" width="0.0802%" height="15" fill="rgb(248,215,49)" fg:x="53" fg:w="1"/><text x="4.5002%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2502%" y="645" width="0.0802%" height="15" fill="rgb(208,46,10)" fg:x="53" fg:w="1"/><text x="4.5002%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2502%" y="629" width="0.0802%" height="15" fill="rgb(254,5,31)" fg:x="53" fg:w="1"/><text x="4.5002%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2502%" y="613" width="0.0802%" height="15" fill="rgb(222,104,33)" fg:x="53" fg:w="1"/><text x="4.5002%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2502%" y="597" width="0.0802%" height="15" fill="rgb(248,49,16)" fg:x="53" fg:w="1"/><text x="4.5002%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="4.3304%" y="709" width="0.0802%" height="15" fill="rgb(232,198,41)" fg:x="54" fg:w="1"/><text x="4.5804%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="4.3304%" y="693" width="0.0802%" height="15" fill="rgb(214,125,3)" fg:x="54" fg:w="1"/><text x="4.5804%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::users::model::Usernames&gt;&gt; (1 samples, 0.08%)</title><rect x="4.3304%" y="677" width="0.0802%" height="15" fill="rgb(229,220,28)" fg:x="54" fg:w="1"/><text x="4.5804%" y="687.50"></text></g><g><title>&lt;kernel::model::entry::OpenedScopeMut&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.3304%" y="661" width="0.0802%" height="15" fill="rgb(222,64,37)" fg:x="54" fg:w="1"/><text x="4.5804%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="4.4106%" y="661" width="0.0802%" height="15" fill="rgb(249,184,13)" fg:x="55" fg:w="1"/><text x="4.6606%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="4.4106%" y="645" width="0.0802%" height="15" fill="rgb(252,176,6)" fg:x="55" fg:w="1"/><text x="4.6606%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="4.4106%" y="629" width="0.0802%" height="15" fill="rgb(228,153,7)" fg:x="55" fg:w="1"/><text x="4.6606%" y="639.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="4.4106%" y="613" width="0.0802%" height="15" fill="rgb(242,193,5)" fg:x="55" fg:w="1"/><text x="4.6606%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4106%" y="597" width="0.0802%" height="15" fill="rgb(232,140,9)" fg:x="55" fg:w="1"/><text x="4.6606%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="4.4908%" y="629" width="0.0802%" height="15" fill="rgb(213,222,16)" fg:x="56" fg:w="1"/><text x="4.7408%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="4.4908%" y="613" width="0.0802%" height="15" fill="rgb(222,75,50)" fg:x="56" fg:w="1"/><text x="4.7408%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.4908%" y="597" width="0.0802%" height="15" fill="rgb(205,180,2)" fg:x="56" fg:w="1"/><text x="4.7408%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.4908%" y="581" width="0.0802%" height="15" fill="rgb(216,34,7)" fg:x="56" fg:w="1"/><text x="4.7408%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.4908%" y="565" width="0.0802%" height="15" fill="rgb(253,16,32)" fg:x="56" fg:w="1"/><text x="4.7408%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.4908%" y="549" width="0.0802%" height="15" fill="rgb(208,97,28)" fg:x="56" fg:w="1"/><text x="4.7408%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.4908%" y="533" width="0.0802%" height="15" fill="rgb(225,92,11)" fg:x="56" fg:w="1"/><text x="4.7408%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.4908%" y="517" width="0.0802%" height="15" fill="rgb(243,38,12)" fg:x="56" fg:w="1"/><text x="4.7408%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.4908%" y="501" width="0.0802%" height="15" fill="rgb(208,139,16)" fg:x="56" fg:w="1"/><text x="4.7408%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.4908%" y="485" width="0.0802%" height="15" fill="rgb(227,24,9)" fg:x="56" fg:w="1"/><text x="4.7408%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4908%" y="469" width="0.0802%" height="15" fill="rgb(206,62,11)" fg:x="56" fg:w="1"/><text x="4.7408%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4908%" y="453" width="0.0802%" height="15" fill="rgb(228,134,27)" fg:x="56" fg:w="1"/><text x="4.7408%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="4.4908%" y="437" width="0.0802%" height="15" fill="rgb(205,55,33)" fg:x="56" fg:w="1"/><text x="4.7408%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.4908%" y="421" width="0.0802%" height="15" fill="rgb(243,75,43)" fg:x="56" fg:w="1"/><text x="4.7408%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.4908%" y="405" width="0.0802%" height="15" fill="rgb(223,27,42)" fg:x="56" fg:w="1"/><text x="4.7408%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.4908%" y="389" width="0.0802%" height="15" fill="rgb(232,189,33)" fg:x="56" fg:w="1"/><text x="4.7408%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.4908%" y="373" width="0.0802%" height="15" fill="rgb(210,9,39)" fg:x="56" fg:w="1"/><text x="4.7408%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="4.4908%" y="357" width="0.0802%" height="15" fill="rgb(242,85,26)" fg:x="56" fg:w="1"/><text x="4.7408%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4908%" y="341" width="0.0802%" height="15" fill="rgb(248,44,4)" fg:x="56" fg:w="1"/><text x="4.7408%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="4.4908%" y="325" width="0.0802%" height="15" fill="rgb(250,96,46)" fg:x="56" fg:w="1"/><text x="4.7408%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4908%" y="309" width="0.0802%" height="15" fill="rgb(229,116,26)" fg:x="56" fg:w="1"/><text x="4.7408%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="4.4908%" y="293" width="0.0802%" height="15" fill="rgb(246,94,34)" fg:x="56" fg:w="1"/><text x="4.7408%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="4.4908%" y="277" width="0.0802%" height="15" fill="rgb(251,73,21)" fg:x="56" fg:w="1"/><text x="4.7408%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="4.4908%" y="261" width="0.0802%" height="15" fill="rgb(254,121,25)" fg:x="56" fg:w="1"/><text x="4.7408%" y="271.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="4.4908%" y="245" width="0.0802%" height="15" fill="rgb(215,161,49)" fg:x="56" fg:w="1"/><text x="4.7408%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5710%" y="581" width="0.0802%" height="15" fill="rgb(221,43,13)" fg:x="57" fg:w="1"/><text x="4.8210%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5710%" y="565" width="0.0802%" height="15" fill="rgb(249,5,37)" fg:x="57" fg:w="1"/><text x="4.8210%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5710%" y="549" width="0.0802%" height="15" fill="rgb(226,25,44)" fg:x="57" fg:w="1"/><text x="4.8210%" y="559.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="4.4908%" y="661" width="0.2406%" height="15" fill="rgb(238,189,16)" fg:x="56" fg:w="3"/><text x="4.7408%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="4.4908%" y="645" width="0.2406%" height="15" fill="rgb(251,186,8)" fg:x="56" fg:w="3"/><text x="4.7408%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.5710%" y="629" width="0.1604%" height="15" fill="rgb(254,34,31)" fg:x="57" fg:w="2"/><text x="4.8210%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.5710%" y="613" width="0.1604%" height="15" fill="rgb(225,215,27)" fg:x="57" fg:w="2"/><text x="4.8210%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.5710%" y="597" width="0.1604%" height="15" fill="rgb(221,192,48)" fg:x="57" fg:w="2"/><text x="4.8210%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.6512%" y="581" width="0.0802%" height="15" fill="rgb(219,137,20)" fg:x="58" fg:w="1"/><text x="4.9012%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.6512%" y="565" width="0.0802%" height="15" fill="rgb(219,84,11)" fg:x="58" fg:w="1"/><text x="4.9012%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6512%" y="549" width="0.0802%" height="15" fill="rgb(224,10,23)" fg:x="58" fg:w="1"/><text x="4.9012%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.7314%" y="645" width="0.0802%" height="15" fill="rgb(248,22,39)" fg:x="59" fg:w="1"/><text x="4.9814%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.7314%" y="629" width="0.0802%" height="15" fill="rgb(212,154,20)" fg:x="59" fg:w="1"/><text x="4.9814%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.7314%" y="613" width="0.0802%" height="15" fill="rgb(236,199,50)" fg:x="59" fg:w="1"/><text x="4.9814%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.7314%" y="597" width="0.0802%" height="15" fill="rgb(211,9,17)" fg:x="59" fg:w="1"/><text x="4.9814%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.7314%" y="581" width="0.0802%" height="15" fill="rgb(243,216,36)" fg:x="59" fg:w="1"/><text x="4.9814%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.7314%" y="565" width="0.0802%" height="15" fill="rgb(250,2,10)" fg:x="59" fg:w="1"/><text x="4.9814%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.7314%" y="549" width="0.0802%" height="15" fill="rgb(226,50,48)" fg:x="59" fg:w="1"/><text x="4.9814%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.7314%" y="533" width="0.0802%" height="15" fill="rgb(243,81,16)" fg:x="59" fg:w="1"/><text x="4.9814%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.7314%" y="517" width="0.0802%" height="15" fill="rgb(250,14,2)" fg:x="59" fg:w="1"/><text x="4.9814%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.7314%" y="501" width="0.0802%" height="15" fill="rgb(233,135,29)" fg:x="59" fg:w="1"/><text x="4.9814%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8115%" y="533" width="0.0802%" height="15" fill="rgb(224,64,43)" fg:x="60" fg:w="1"/><text x="5.0615%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8115%" y="517" width="0.0802%" height="15" fill="rgb(238,84,13)" fg:x="60" fg:w="1"/><text x="5.0615%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.8115%" y="501" width="0.0802%" height="15" fill="rgb(253,48,26)" fg:x="60" fg:w="1"/><text x="5.0615%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.8115%" y="485" width="0.0802%" height="15" fill="rgb(205,223,31)" fg:x="60" fg:w="1"/><text x="5.0615%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.8115%" y="469" width="0.0802%" height="15" fill="rgb(221,41,32)" fg:x="60" fg:w="1"/><text x="5.0615%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8115%" y="453" width="0.0802%" height="15" fill="rgb(213,158,31)" fg:x="60" fg:w="1"/><text x="5.0615%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8115%" y="437" width="0.0802%" height="15" fill="rgb(245,126,43)" fg:x="60" fg:w="1"/><text x="5.0615%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.8115%" y="421" width="0.0802%" height="15" fill="rgb(227,7,22)" fg:x="60" fg:w="1"/><text x="5.0615%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.8115%" y="405" width="0.0802%" height="15" fill="rgb(252,90,44)" fg:x="60" fg:w="1"/><text x="5.0615%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.8115%" y="389" width="0.0802%" height="15" fill="rgb(253,91,0)" fg:x="60" fg:w="1"/><text x="5.0615%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.8115%" y="373" width="0.0802%" height="15" fill="rgb(252,175,49)" fg:x="60" fg:w="1"/><text x="5.0615%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8115%" y="357" width="0.0802%" height="15" fill="rgb(246,150,1)" fg:x="60" fg:w="1"/><text x="5.0615%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.8115%" y="549" width="0.1604%" height="15" fill="rgb(241,192,25)" fg:x="60" fg:w="2"/><text x="5.0615%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.8917%" y="533" width="0.0802%" height="15" fill="rgb(239,187,11)" fg:x="61" fg:w="1"/><text x="5.1417%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.64%)</title><rect x="4.4106%" y="709" width="0.6415%" height="15" fill="rgb(218,202,51)" fg:x="55" fg:w="8"/><text x="4.6606%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="4.4106%" y="693" width="0.6415%" height="15" fill="rgb(225,176,8)" fg:x="55" fg:w="8"/><text x="4.6606%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.64%)</title><rect x="4.4106%" y="677" width="0.6415%" height="15" fill="rgb(219,122,41)" fg:x="55" fg:w="8"/><text x="4.6606%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.32%)</title><rect x="4.7314%" y="661" width="0.3208%" height="15" fill="rgb(248,140,20)" fg:x="59" fg:w="4"/><text x="4.9814%" y="671.50"></text></g><g><title>plugins_core::tools::leads_to (3 samples, 0.24%)</title><rect x="4.8115%" y="645" width="0.2406%" height="15" fill="rgb(245,41,37)" fg:x="60" fg:w="3"/><text x="5.0615%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="4.8115%" y="629" width="0.2406%" height="15" fill="rgb(235,82,39)" fg:x="60" fg:w="3"/><text x="5.0615%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="4.8115%" y="613" width="0.2406%" height="15" fill="rgb(230,108,42)" fg:x="60" fg:w="3"/><text x="5.0615%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="4.8115%" y="597" width="0.2406%" height="15" fill="rgb(215,150,50)" fg:x="60" fg:w="3"/><text x="5.0615%" y="607.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="4.8115%" y="581" width="0.2406%" height="15" fill="rgb(233,212,5)" fg:x="60" fg:w="3"/><text x="5.0615%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="4.8115%" y="565" width="0.2406%" height="15" fill="rgb(245,80,22)" fg:x="60" fg:w="3"/><text x="5.0615%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.9719%" y="549" width="0.0802%" height="15" fill="rgb(238,129,16)" fg:x="62" fg:w="1"/><text x="5.2219%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.9719%" y="533" width="0.0802%" height="15" fill="rgb(240,19,0)" fg:x="62" fg:w="1"/><text x="5.2219%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0521%" y="677" width="0.0802%" height="15" fill="rgb(232,42,35)" fg:x="63" fg:w="1"/><text x="5.3021%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.24%)</title><rect x="5.0521%" y="693" width="0.2406%" height="15" fill="rgb(223,130,24)" fg:x="63" fg:w="3"/><text x="5.3021%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.1323%" y="677" width="0.1604%" height="15" fill="rgb(237,16,22)" fg:x="64" fg:w="2"/><text x="5.3823%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.1323%" y="661" width="0.1604%" height="15" fill="rgb(248,192,20)" fg:x="64" fg:w="2"/><text x="5.3823%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="5.1323%" y="645" width="0.1604%" height="15" fill="rgb(233,167,2)" fg:x="64" fg:w="2"/><text x="5.3823%" y="655.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.1323%" y="629" width="0.1604%" height="15" fill="rgb(252,71,44)" fg:x="64" fg:w="2"/><text x="5.3823%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="5.2927%" y="613" width="0.0802%" height="15" fill="rgb(238,37,47)" fg:x="66" fg:w="1"/><text x="5.5427%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="5.2927%" y="597" width="0.0802%" height="15" fill="rgb(214,202,54)" fg:x="66" fg:w="1"/><text x="5.5427%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="5.2927%" y="581" width="0.0802%" height="15" fill="rgb(254,165,40)" fg:x="66" fg:w="1"/><text x="5.5427%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="5.2927%" y="565" width="0.0802%" height="15" fill="rgb(246,173,38)" fg:x="66" fg:w="1"/><text x="5.5427%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="5.2927%" y="549" width="0.0802%" height="15" fill="rgb(215,3,27)" fg:x="66" fg:w="1"/><text x="5.5427%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.3729%" y="597" width="0.0802%" height="15" fill="rgb(239,169,51)" fg:x="67" fg:w="1"/><text x="5.6229%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3729%" y="581" width="0.0802%" height="15" fill="rgb(212,5,25)" fg:x="67" fg:w="1"/><text x="5.6229%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3729%" y="565" width="0.0802%" height="15" fill="rgb(243,45,17)" fg:x="67" fg:w="1"/><text x="5.6229%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.3729%" y="549" width="0.0802%" height="15" fill="rgb(242,97,9)" fg:x="67" fg:w="1"/><text x="5.6229%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.4531%" y="581" width="0.1604%" height="15" fill="rgb(228,71,31)" fg:x="68" fg:w="2"/><text x="5.7031%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5333%" y="565" width="0.0802%" height="15" fill="rgb(252,184,16)" fg:x="69" fg:w="1"/><text x="5.7833%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5333%" y="549" width="0.0802%" height="15" fill="rgb(236,169,46)" fg:x="69" fg:w="1"/><text x="5.7833%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5333%" y="533" width="0.0802%" height="15" fill="rgb(207,17,47)" fg:x="69" fg:w="1"/><text x="5.7833%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5333%" y="517" width="0.0802%" height="15" fill="rgb(206,201,28)" fg:x="69" fg:w="1"/><text x="5.7833%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5333%" y="501" width="0.0802%" height="15" fill="rgb(224,184,23)" fg:x="69" fg:w="1"/><text x="5.7833%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.5333%" y="485" width="0.0802%" height="15" fill="rgb(208,139,48)" fg:x="69" fg:w="1"/><text x="5.7833%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.6937%" y="565" width="0.0802%" height="15" fill="rgb(208,130,10)" fg:x="71" fg:w="1"/><text x="5.9437%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6937%" y="549" width="0.0802%" height="15" fill="rgb(211,213,45)" fg:x="71" fg:w="1"/><text x="5.9437%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.6937%" y="533" width="0.0802%" height="15" fill="rgb(235,100,30)" fg:x="71" fg:w="1"/><text x="5.9437%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6937%" y="517" width="0.0802%" height="15" fill="rgb(206,144,31)" fg:x="71" fg:w="1"/><text x="5.9437%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6937%" y="501" width="0.0802%" height="15" fill="rgb(224,200,26)" fg:x="71" fg:w="1"/><text x="5.9437%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6937%" y="485" width="0.0802%" height="15" fill="rgb(247,104,53)" fg:x="71" fg:w="1"/><text x="5.9437%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6937%" y="469" width="0.0802%" height="15" fill="rgb(220,14,17)" fg:x="71" fg:w="1"/><text x="5.9437%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.6937%" y="453" width="0.0802%" height="15" fill="rgb(230,140,40)" fg:x="71" fg:w="1"/><text x="5.9437%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.6937%" y="437" width="0.0802%" height="15" fill="rgb(229,2,41)" fg:x="71" fg:w="1"/><text x="5.9437%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.7739%" y="565" width="0.0802%" height="15" fill="rgb(232,89,16)" fg:x="72" fg:w="1"/><text x="6.0239%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7739%" y="549" width="0.0802%" height="15" fill="rgb(247,59,52)" fg:x="72" fg:w="1"/><text x="6.0239%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="5.3729%" y="613" width="0.5613%" height="15" fill="rgb(226,110,21)" fg:x="67" fg:w="7"/><text x="5.6229%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="5.4531%" y="597" width="0.4812%" height="15" fill="rgb(224,176,43)" fg:x="68" fg:w="6"/><text x="5.7031%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.6135%" y="581" width="0.3208%" height="15" fill="rgb(221,73,6)" fg:x="70" fg:w="4"/><text x="5.8635%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8540%" y="565" width="0.0802%" height="15" fill="rgb(232,78,19)" fg:x="73" fg:w="1"/><text x="6.1040%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8540%" y="549" width="0.0802%" height="15" fill="rgb(233,112,48)" fg:x="73" fg:w="1"/><text x="6.1040%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8540%" y="533" width="0.0802%" height="15" fill="rgb(243,131,47)" fg:x="73" fg:w="1"/><text x="6.1040%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.8540%" y="517" width="0.0802%" height="15" fill="rgb(226,51,1)" fg:x="73" fg:w="1"/><text x="6.1040%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9342%" y="581" width="0.0802%" height="15" fill="rgb(247,58,7)" fg:x="74" fg:w="1"/><text x="6.1842%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0144%" y="565" width="0.0802%" height="15" fill="rgb(209,7,32)" fg:x="75" fg:w="1"/><text x="6.2644%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.9342%" y="613" width="0.3208%" height="15" fill="rgb(209,39,41)" fg:x="74" fg:w="4"/><text x="6.1842%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="5.9342%" y="597" width="0.3208%" height="15" fill="rgb(226,182,46)" fg:x="74" fg:w="4"/><text x="6.1842%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.0144%" y="581" width="0.2406%" height="15" fill="rgb(230,219,10)" fg:x="75" fg:w="3"/><text x="6.2644%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.0946%" y="565" width="0.1604%" height="15" fill="rgb(227,175,30)" fg:x="76" fg:w="2"/><text x="6.3446%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.1748%" y="549" width="0.0802%" height="15" fill="rgb(217,2,50)" fg:x="77" fg:w="1"/><text x="6.4248%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="6.1748%" y="533" width="0.0802%" height="15" fill="rgb(229,160,0)" fg:x="77" fg:w="1"/><text x="6.4248%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.1748%" y="517" width="0.0802%" height="15" fill="rgb(207,78,37)" fg:x="77" fg:w="1"/><text x="6.4248%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.1748%" y="501" width="0.0802%" height="15" fill="rgb(225,57,0)" fg:x="77" fg:w="1"/><text x="6.4248%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.1748%" y="485" width="0.0802%" height="15" fill="rgb(232,154,2)" fg:x="77" fg:w="1"/><text x="6.4248%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="6.2550%" y="597" width="0.0802%" height="15" fill="rgb(241,212,25)" fg:x="78" fg:w="1"/><text x="6.5050%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4154%" y="565" width="0.0802%" height="15" fill="rgb(226,69,20)" fg:x="80" fg:w="1"/><text x="6.6654%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4154%" y="549" width="0.0802%" height="15" fill="rgb(247,184,54)" fg:x="80" fg:w="1"/><text x="6.6654%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.4154%" y="533" width="0.0802%" height="15" fill="rgb(210,145,0)" fg:x="80" fg:w="1"/><text x="6.6654%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.4956%" y="517" width="0.0802%" height="15" fill="rgb(253,82,12)" fg:x="81" fg:w="1"/><text x="6.7456%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4956%" y="501" width="0.0802%" height="15" fill="rgb(245,42,11)" fg:x="81" fg:w="1"/><text x="6.7456%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.4956%" y="485" width="0.0802%" height="15" fill="rgb(219,147,32)" fg:x="81" fg:w="1"/><text x="6.7456%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4956%" y="469" width="0.0802%" height="15" fill="rgb(246,12,7)" fg:x="81" fg:w="1"/><text x="6.7456%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4956%" y="453" width="0.0802%" height="15" fill="rgb(243,50,9)" fg:x="81" fg:w="1"/><text x="6.7456%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5758%" y="485" width="0.0802%" height="15" fill="rgb(219,149,6)" fg:x="82" fg:w="1"/><text x="6.8258%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5758%" y="469" width="0.0802%" height="15" fill="rgb(241,51,42)" fg:x="82" fg:w="1"/><text x="6.8258%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="6.4956%" y="533" width="0.4010%" height="15" fill="rgb(226,128,27)" fg:x="81" fg:w="5"/><text x="6.7456%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="6.5758%" y="517" width="0.3208%" height="15" fill="rgb(244,144,4)" fg:x="82" fg:w="4"/><text x="6.8258%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="6.5758%" y="501" width="0.3208%" height="15" fill="rgb(221,4,13)" fg:x="82" fg:w="4"/><text x="6.8258%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="6.6560%" y="485" width="0.2406%" height="15" fill="rgb(208,170,28)" fg:x="83" fg:w="3"/><text x="6.9060%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="6.6560%" y="469" width="0.2406%" height="15" fill="rgb(226,131,13)" fg:x="83" fg:w="3"/><text x="6.9060%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="6.6560%" y="453" width="0.2406%" height="15" fill="rgb(215,72,41)" fg:x="83" fg:w="3"/><text x="6.9060%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="6.6560%" y="437" width="0.2406%" height="15" fill="rgb(243,108,20)" fg:x="83" fg:w="3"/><text x="6.9060%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.7362%" y="421" width="0.1604%" height="15" fill="rgb(230,189,17)" fg:x="84" fg:w="2"/><text x="6.9862%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8164%" y="405" width="0.0802%" height="15" fill="rgb(220,50,17)" fg:x="85" fg:w="1"/><text x="7.0664%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="6.4956%" y="549" width="0.4812%" height="15" fill="rgb(248,152,48)" fg:x="81" fg:w="6"/><text x="6.7456%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.8966%" y="533" width="0.0802%" height="15" fill="rgb(244,91,11)" fg:x="86" fg:w="1"/><text x="7.1466%" y="543.50"></text></g><g><title>engine::session::Session::flush (25 samples, 2.00%)</title><rect x="5.0521%" y="709" width="2.0048%" height="15" fill="rgb(220,157,5)" fg:x="63" fg:w="25"/><text x="5.3021%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (22 samples, 1.76%)</title><rect x="5.2927%" y="693" width="1.7642%" height="15" fill="rgb(253,137,8)" fg:x="66" fg:w="22"/><text x="5.5427%" y="703.50"></text></g><g><title>engine::session::state::State::close (22 samples, 1.76%)</title><rect x="5.2927%" y="677" width="1.7642%" height="15" fill="rgb(217,137,51)" fg:x="66" fg:w="22"/><text x="5.5427%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (22 samples, 1.76%)</title><rect x="5.2927%" y="661" width="1.7642%" height="15" fill="rgb(218,209,53)" fg:x="66" fg:w="22"/><text x="5.5427%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (22 samples, 1.76%)</title><rect x="5.2927%" y="645" width="1.7642%" height="15" fill="rgb(249,137,25)" fg:x="66" fg:w="22"/><text x="5.5427%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.76%)</title><rect x="5.2927%" y="629" width="1.7642%" height="15" fill="rgb(239,155,26)" fg:x="66" fg:w="22"/><text x="5.5427%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="6.2550%" y="613" width="0.8019%" height="15" fill="rgb(227,85,46)" fg:x="78" fg:w="10"/><text x="6.5050%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="6.3352%" y="597" width="0.7217%" height="15" fill="rgb(251,107,43)" fg:x="79" fg:w="9"/><text x="6.5852%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="6.4154%" y="581" width="0.6415%" height="15" fill="rgb(234,170,33)" fg:x="80" fg:w="8"/><text x="6.6654%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="6.4956%" y="565" width="0.5613%" height="15" fill="rgb(206,29,35)" fg:x="81" fg:w="7"/><text x="6.7456%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9767%" y="549" width="0.0802%" height="15" fill="rgb(227,138,25)" fg:x="87" fg:w="1"/><text x="7.2267%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.9767%" y="533" width="0.0802%" height="15" fill="rgb(249,131,35)" fg:x="87" fg:w="1"/><text x="7.2267%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9767%" y="517" width="0.0802%" height="15" fill="rgb(239,6,40)" fg:x="87" fg:w="1"/><text x="7.2267%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="7.0569%" y="693" width="0.0802%" height="15" fill="rgb(246,136,47)" fg:x="88" fg:w="1"/><text x="7.3069%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="7.0569%" y="677" width="0.0802%" height="15" fill="rgb(253,58,26)" fg:x="88" fg:w="1"/><text x="7.3069%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0569%" y="661" width="0.0802%" height="15" fill="rgb(237,141,10)" fg:x="88" fg:w="1"/><text x="7.3069%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="7.0569%" y="709" width="0.1604%" height="15" fill="rgb(234,156,12)" fg:x="88" fg:w="2"/><text x="7.3069%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.1371%" y="693" width="0.0802%" height="15" fill="rgb(243,224,36)" fg:x="89" fg:w="1"/><text x="7.3871%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.1371%" y="677" width="0.0802%" height="15" fill="rgb(205,229,51)" fg:x="89" fg:w="1"/><text x="7.3871%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.1371%" y="661" width="0.0802%" height="15" fill="rgb(223,189,4)" fg:x="89" fg:w="1"/><text x="7.3871%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.1371%" y="645" width="0.0802%" height="15" fill="rgb(249,167,54)" fg:x="89" fg:w="1"/><text x="7.3871%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1371%" y="629" width="0.0802%" height="15" fill="rgb(218,34,28)" fg:x="89" fg:w="1"/><text x="7.3871%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.1371%" y="613" width="0.0802%" height="15" fill="rgb(232,109,42)" fg:x="89" fg:w="1"/><text x="7.3871%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1371%" y="597" width="0.0802%" height="15" fill="rgb(248,214,46)" fg:x="89" fg:w="1"/><text x="7.3871%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.1371%" y="581" width="0.0802%" height="15" fill="rgb(244,216,40)" fg:x="89" fg:w="1"/><text x="7.3871%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.1371%" y="565" width="0.0802%" height="15" fill="rgb(231,226,31)" fg:x="89" fg:w="1"/><text x="7.3871%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.1371%" y="549" width="0.0802%" height="15" fill="rgb(238,38,43)" fg:x="89" fg:w="1"/><text x="7.3871%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.1371%" y="533" width="0.0802%" height="15" fill="rgb(208,88,43)" fg:x="89" fg:w="1"/><text x="7.3871%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="7.1371%" y="517" width="0.0802%" height="15" fill="rgb(205,136,37)" fg:x="89" fg:w="1"/><text x="7.3871%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.1371%" y="501" width="0.0802%" height="15" fill="rgb(237,34,14)" fg:x="89" fg:w="1"/><text x="7.3871%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="7.2173%" y="677" width="0.0802%" height="15" fill="rgb(236,193,44)" fg:x="90" fg:w="1"/><text x="7.4673%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="7.2173%" y="661" width="0.0802%" height="15" fill="rgb(231,48,10)" fg:x="90" fg:w="1"/><text x="7.4673%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="7.2173%" y="645" width="0.0802%" height="15" fill="rgb(213,141,34)" fg:x="90" fg:w="1"/><text x="7.4673%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2975%" y="629" width="0.0802%" height="15" fill="rgb(249,130,34)" fg:x="91" fg:w="1"/><text x="7.5475%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2975%" y="613" width="0.0802%" height="15" fill="rgb(219,42,41)" fg:x="91" fg:w="1"/><text x="7.5475%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2975%" y="597" width="0.0802%" height="15" fill="rgb(224,100,54)" fg:x="91" fg:w="1"/><text x="7.5475%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2975%" y="581" width="0.0802%" height="15" fill="rgb(229,200,27)" fg:x="91" fg:w="1"/><text x="7.5475%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.2975%" y="677" width="0.1604%" height="15" fill="rgb(217,118,10)" fg:x="91" fg:w="2"/><text x="7.5475%" y="687.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.2975%" y="661" width="0.1604%" height="15" fill="rgb(206,22,3)" fg:x="91" fg:w="2"/><text x="7.5475%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.2975%" y="645" width="0.1604%" height="15" fill="rgb(232,163,46)" fg:x="91" fg:w="2"/><text x="7.5475%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.3777%" y="629" width="0.0802%" height="15" fill="rgb(206,95,13)" fg:x="92" fg:w="1"/><text x="7.6277%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.3777%" y="613" width="0.0802%" height="15" fill="rgb(253,154,18)" fg:x="92" fg:w="1"/><text x="7.6277%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.3777%" y="597" width="0.0802%" height="15" fill="rgb(219,32,23)" fg:x="92" fg:w="1"/><text x="7.6277%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (2 samples, 0.16%)</title><rect x="7.4579%" y="661" width="0.1604%" height="15" fill="rgb(230,191,45)" fg:x="93" fg:w="2"/><text x="7.7079%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.4579%" y="645" width="0.1604%" height="15" fill="rgb(229,64,36)" fg:x="93" fg:w="2"/><text x="7.7079%" y="655.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.5381%" y="629" width="0.0802%" height="15" fill="rgb(205,129,25)" fg:x="94" fg:w="1"/><text x="7.7881%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.5381%" y="613" width="0.0802%" height="15" fill="rgb(254,112,7)" fg:x="94" fg:w="1"/><text x="7.7881%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.5381%" y="597" width="0.0802%" height="15" fill="rgb(226,53,48)" fg:x="94" fg:w="1"/><text x="7.7881%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.5381%" y="581" width="0.0802%" height="15" fill="rgb(214,153,38)" fg:x="94" fg:w="1"/><text x="7.7881%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.5381%" y="565" width="0.0802%" height="15" fill="rgb(243,101,7)" fg:x="94" fg:w="1"/><text x="7.7881%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.5381%" y="549" width="0.0802%" height="15" fill="rgb(240,140,22)" fg:x="94" fg:w="1"/><text x="7.7881%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.5381%" y="533" width="0.0802%" height="15" fill="rgb(235,114,2)" fg:x="94" fg:w="1"/><text x="7.7881%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.5381%" y="517" width="0.0802%" height="15" fill="rgb(242,59,12)" fg:x="94" fg:w="1"/><text x="7.7881%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.5381%" y="501" width="0.0802%" height="15" fill="rgb(252,134,9)" fg:x="94" fg:w="1"/><text x="7.7881%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.5381%" y="485" width="0.0802%" height="15" fill="rgb(236,4,44)" fg:x="94" fg:w="1"/><text x="7.7881%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.5381%" y="469" width="0.0802%" height="15" fill="rgb(254,172,41)" fg:x="94" fg:w="1"/><text x="7.7881%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.5381%" y="453" width="0.0802%" height="15" fill="rgb(244,63,20)" fg:x="94" fg:w="1"/><text x="7.7881%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.5381%" y="437" width="0.0802%" height="15" fill="rgb(250,73,31)" fg:x="94" fg:w="1"/><text x="7.7881%" y="447.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="7.4579%" y="677" width="0.2406%" height="15" fill="rgb(241,38,36)" fg:x="93" fg:w="3"/><text x="7.7079%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.6183%" y="661" width="0.0802%" height="15" fill="rgb(245,211,2)" fg:x="95" fg:w="1"/><text x="7.8683%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6183%" y="645" width="0.0802%" height="15" fill="rgb(206,120,28)" fg:x="95" fg:w="1"/><text x="7.8683%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6183%" y="629" width="0.0802%" height="15" fill="rgb(211,59,34)" fg:x="95" fg:w="1"/><text x="7.8683%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6183%" y="613" width="0.0802%" height="15" fill="rgb(233,168,5)" fg:x="95" fg:w="1"/><text x="7.8683%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6183%" y="597" width="0.0802%" height="15" fill="rgb(234,33,13)" fg:x="95" fg:w="1"/><text x="7.8683%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6183%" y="581" width="0.0802%" height="15" fill="rgb(231,150,26)" fg:x="95" fg:w="1"/><text x="7.8683%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="7.2173%" y="693" width="0.5613%" height="15" fill="rgb(217,191,4)" fg:x="90" fg:w="7"/><text x="7.4673%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="7.6985%" y="677" width="0.0802%" height="15" fill="rgb(246,198,38)" fg:x="96" fg:w="1"/><text x="7.9485%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.6985%" y="661" width="0.0802%" height="15" fill="rgb(245,64,37)" fg:x="96" fg:w="1"/><text x="7.9485%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.6985%" y="645" width="0.0802%" height="15" fill="rgb(250,30,36)" fg:x="96" fg:w="1"/><text x="7.9485%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6985%" y="629" width="0.0802%" height="15" fill="rgb(217,86,53)" fg:x="96" fg:w="1"/><text x="7.9485%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.6985%" y="613" width="0.0802%" height="15" fill="rgb(228,157,16)" fg:x="96" fg:w="1"/><text x="7.9485%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6985%" y="597" width="0.0802%" height="15" fill="rgb(217,59,31)" fg:x="96" fg:w="1"/><text x="7.9485%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6985%" y="581" width="0.0802%" height="15" fill="rgb(237,138,41)" fg:x="96" fg:w="1"/><text x="7.9485%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6985%" y="565" width="0.0802%" height="15" fill="rgb(227,91,49)" fg:x="96" fg:w="1"/><text x="7.9485%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6985%" y="549" width="0.0802%" height="15" fill="rgb(247,21,44)" fg:x="96" fg:w="1"/><text x="7.9485%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.6985%" y="533" width="0.0802%" height="15" fill="rgb(219,210,51)" fg:x="96" fg:w="1"/><text x="7.9485%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6985%" y="517" width="0.0802%" height="15" fill="rgb(209,140,6)" fg:x="96" fg:w="1"/><text x="7.9485%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.6985%" y="501" width="0.0802%" height="15" fill="rgb(221,188,24)" fg:x="96" fg:w="1"/><text x="7.9485%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.6985%" y="485" width="0.0802%" height="15" fill="rgb(232,154,20)" fg:x="96" fg:w="1"/><text x="7.9485%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6985%" y="469" width="0.0802%" height="15" fill="rgb(244,137,50)" fg:x="96" fg:w="1"/><text x="7.9485%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7787%" y="629" width="0.0802%" height="15" fill="rgb(225,185,43)" fg:x="97" fg:w="1"/><text x="8.0287%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7787%" y="613" width="0.0802%" height="15" fill="rgb(213,205,38)" fg:x="97" fg:w="1"/><text x="8.0287%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.7787%" y="597" width="0.0802%" height="15" fill="rgb(236,73,12)" fg:x="97" fg:w="1"/><text x="8.0287%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.7787%" y="581" width="0.0802%" height="15" fill="rgb(235,219,13)" fg:x="97" fg:w="1"/><text x="8.0287%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.7787%" y="565" width="0.0802%" height="15" fill="rgb(218,59,36)" fg:x="97" fg:w="1"/><text x="8.0287%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7787%" y="549" width="0.0802%" height="15" fill="rgb(205,110,39)" fg:x="97" fg:w="1"/><text x="8.0287%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.7787%" y="533" width="0.0802%" height="15" fill="rgb(218,206,42)" fg:x="97" fg:w="1"/><text x="8.0287%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.7787%" y="517" width="0.0802%" height="15" fill="rgb(248,125,24)" fg:x="97" fg:w="1"/><text x="8.0287%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.7787%" y="501" width="0.0802%" height="15" fill="rgb(242,28,27)" fg:x="97" fg:w="1"/><text x="8.0287%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.7787%" y="485" width="0.0802%" height="15" fill="rgb(216,228,15)" fg:x="97" fg:w="1"/><text x="8.0287%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.7787%" y="469" width="0.0802%" height="15" fill="rgb(235,116,46)" fg:x="97" fg:w="1"/><text x="8.0287%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.7787%" y="453" width="0.0802%" height="15" fill="rgb(224,18,32)" fg:x="97" fg:w="1"/><text x="8.0287%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.8589%" y="581" width="0.0802%" height="15" fill="rgb(252,5,12)" fg:x="98" fg:w="1"/><text x="8.1089%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.8589%" y="565" width="0.0802%" height="15" fill="rgb(251,36,5)" fg:x="98" fg:w="1"/><text x="8.1089%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.8589%" y="549" width="0.0802%" height="15" fill="rgb(217,53,14)" fg:x="98" fg:w="1"/><text x="8.1089%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.8589%" y="533" width="0.0802%" height="15" fill="rgb(215,86,45)" fg:x="98" fg:w="1"/><text x="8.1089%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.8589%" y="517" width="0.0802%" height="15" fill="rgb(242,169,11)" fg:x="98" fg:w="1"/><text x="8.1089%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.8589%" y="501" width="0.0802%" height="15" fill="rgb(211,213,45)" fg:x="98" fg:w="1"/><text x="8.1089%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.8589%" y="485" width="0.0802%" height="15" fill="rgb(205,88,11)" fg:x="98" fg:w="1"/><text x="8.1089%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.8589%" y="469" width="0.0802%" height="15" fill="rgb(252,69,26)" fg:x="98" fg:w="1"/><text x="8.1089%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.8589%" y="453" width="0.0802%" height="15" fill="rgb(246,123,37)" fg:x="98" fg:w="1"/><text x="8.1089%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.8589%" y="437" width="0.0802%" height="15" fill="rgb(212,205,5)" fg:x="98" fg:w="1"/><text x="8.1089%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.8589%" y="421" width="0.0802%" height="15" fill="rgb(253,148,0)" fg:x="98" fg:w="1"/><text x="8.1089%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.8589%" y="405" width="0.0802%" height="15" fill="rgb(239,22,4)" fg:x="98" fg:w="1"/><text x="8.1089%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.8589%" y="389" width="0.0802%" height="15" fill="rgb(226,26,53)" fg:x="98" fg:w="1"/><text x="8.1089%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.8589%" y="373" width="0.0802%" height="15" fill="rgb(225,229,45)" fg:x="98" fg:w="1"/><text x="8.1089%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.8589%" y="357" width="0.0802%" height="15" fill="rgb(220,60,37)" fg:x="98" fg:w="1"/><text x="8.1089%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8589%" y="341" width="0.0802%" height="15" fill="rgb(217,180,35)" fg:x="98" fg:w="1"/><text x="8.1089%" y="351.50"></text></g><g><title>plugins_core::build::Build::holding (10 samples, 0.80%)</title><rect x="7.2173%" y="709" width="0.8019%" height="15" fill="rgb(229,7,53)" fg:x="90" fg:w="10"/><text x="7.4673%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="7.7787%" y="693" width="0.2406%" height="15" fill="rgb(254,137,3)" fg:x="97" fg:w="3"/><text x="8.0287%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="7.7787%" y="677" width="0.2406%" height="15" fill="rgb(215,140,41)" fg:x="97" fg:w="3"/><text x="8.0287%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="7.7787%" y="661" width="0.2406%" height="15" fill="rgb(250,80,15)" fg:x="97" fg:w="3"/><text x="8.0287%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="7.7787%" y="645" width="0.2406%" height="15" fill="rgb(252,191,6)" fg:x="97" fg:w="3"/><text x="8.0287%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.8589%" y="629" width="0.1604%" height="15" fill="rgb(246,217,18)" fg:x="98" fg:w="2"/><text x="8.1089%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.8589%" y="613" width="0.1604%" height="15" fill="rgb(223,93,7)" fg:x="98" fg:w="2"/><text x="8.1089%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.8589%" y="597" width="0.1604%" height="15" fill="rgb(225,55,52)" fg:x="98" fg:w="2"/><text x="8.1089%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.9391%" y="581" width="0.0802%" height="15" fill="rgb(240,31,24)" fg:x="99" fg:w="1"/><text x="8.1891%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9391%" y="565" width="0.0802%" height="15" fill="rgb(205,56,52)" fg:x="99" fg:w="1"/><text x="8.1891%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.9391%" y="549" width="0.0802%" height="15" fill="rgb(246,146,12)" fg:x="99" fg:w="1"/><text x="8.1891%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9391%" y="533" width="0.0802%" height="15" fill="rgb(239,84,36)" fg:x="99" fg:w="1"/><text x="8.1891%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.9391%" y="517" width="0.0802%" height="15" fill="rgb(207,41,40)" fg:x="99" fg:w="1"/><text x="8.1891%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.9391%" y="501" width="0.0802%" height="15" fill="rgb(241,179,25)" fg:x="99" fg:w="1"/><text x="8.1891%" y="511.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="8.0192%" y="709" width="0.0802%" height="15" fill="rgb(210,0,34)" fg:x="100" fg:w="1"/><text x="8.2692%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="8.0192%" y="693" width="0.0802%" height="15" fill="rgb(225,217,29)" fg:x="100" fg:w="1"/><text x="8.2692%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="8.0192%" y="677" width="0.0802%" height="15" fill="rgb(216,191,38)" fg:x="100" fg:w="1"/><text x="8.2692%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="8.0192%" y="661" width="0.0802%" height="15" fill="rgb(232,140,52)" fg:x="100" fg:w="1"/><text x="8.2692%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.0192%" y="645" width="0.0802%" height="15" fill="rgb(223,158,51)" fg:x="100" fg:w="1"/><text x="8.2692%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.0192%" y="629" width="0.0802%" height="15" fill="rgb(235,29,51)" fg:x="100" fg:w="1"/><text x="8.2692%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.0192%" y="613" width="0.0802%" height="15" fill="rgb(215,181,18)" fg:x="100" fg:w="1"/><text x="8.2692%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.0994%" y="677" width="0.0802%" height="15" fill="rgb(227,125,34)" fg:x="101" fg:w="1"/><text x="8.3494%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.0994%" y="661" width="0.0802%" height="15" fill="rgb(230,197,49)" fg:x="101" fg:w="1"/><text x="8.3494%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.0994%" y="645" width="0.0802%" height="15" fill="rgb(239,141,16)" fg:x="101" fg:w="1"/><text x="8.3494%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0994%" y="629" width="0.0802%" height="15" fill="rgb(225,105,43)" fg:x="101" fg:w="1"/><text x="8.3494%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.0994%" y="613" width="0.0802%" height="15" fill="rgb(214,131,14)" fg:x="101" fg:w="1"/><text x="8.3494%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0994%" y="597" width="0.0802%" height="15" fill="rgb(229,177,11)" fg:x="101" fg:w="1"/><text x="8.3494%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.1796%" y="661" width="0.0802%" height="15" fill="rgb(231,180,14)" fg:x="102" fg:w="1"/><text x="8.4296%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2598%" y="645" width="0.0802%" height="15" fill="rgb(232,88,2)" fg:x="103" fg:w="1"/><text x="8.5098%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2598%" y="629" width="0.0802%" height="15" fill="rgb(205,220,8)" fg:x="103" fg:w="1"/><text x="8.5098%" y="639.50"></text></g><g><title>plugins_core::build::Build::named (4 samples, 0.32%)</title><rect x="8.0994%" y="709" width="0.3208%" height="15" fill="rgb(225,23,53)" fg:x="101" fg:w="4"/><text x="8.3494%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (4 samples, 0.32%)</title><rect x="8.0994%" y="693" width="0.3208%" height="15" fill="rgb(213,62,29)" fg:x="101" fg:w="4"/><text x="8.3494%" y="703.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="8.1796%" y="677" width="0.2406%" height="15" fill="rgb(227,75,7)" fg:x="102" fg:w="3"/><text x="8.4296%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="8.2598%" y="661" width="0.1604%" height="15" fill="rgb(207,105,14)" fg:x="103" fg:w="2"/><text x="8.5098%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3400%" y="645" width="0.0802%" height="15" fill="rgb(245,62,29)" fg:x="104" fg:w="1"/><text x="8.5900%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3400%" y="629" width="0.0802%" height="15" fill="rgb(236,202,4)" fg:x="104" fg:w="1"/><text x="8.5900%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3400%" y="613" width="0.0802%" height="15" fill="rgb(250,67,1)" fg:x="104" fg:w="1"/><text x="8.5900%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3400%" y="597" width="0.0802%" height="15" fill="rgb(253,115,44)" fg:x="104" fg:w="1"/><text x="8.5900%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.3400%" y="581" width="0.0802%" height="15" fill="rgb(251,139,18)" fg:x="104" fg:w="1"/><text x="8.5900%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.4202%" y="661" width="0.0802%" height="15" fill="rgb(218,22,32)" fg:x="105" fg:w="1"/><text x="8.6702%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.4202%" y="645" width="0.0802%" height="15" fill="rgb(243,53,5)" fg:x="105" fg:w="1"/><text x="8.6702%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="8.4202%" y="629" width="0.0802%" height="15" fill="rgb(227,56,16)" fg:x="105" fg:w="1"/><text x="8.6702%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.4202%" y="613" width="0.0802%" height="15" fill="rgb(245,53,0)" fg:x="105" fg:w="1"/><text x="8.6702%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.4202%" y="693" width="0.1604%" height="15" fill="rgb(216,170,35)" fg:x="105" fg:w="2"/><text x="8.6702%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="8.4202%" y="677" width="0.1604%" height="15" fill="rgb(211,200,8)" fg:x="105" fg:w="2"/><text x="8.6702%" y="687.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="8.5004%" y="661" width="0.0802%" height="15" fill="rgb(228,204,44)" fg:x="106" fg:w="1"/><text x="8.7504%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5004%" y="645" width="0.0802%" height="15" fill="rgb(214,121,17)" fg:x="106" fg:w="1"/><text x="8.7504%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.5004%" y="629" width="0.0802%" height="15" fill="rgb(233,64,38)" fg:x="106" fg:w="1"/><text x="8.7504%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (55 samples, 4.41%)</title><rect x="4.2502%" y="725" width="4.4106%" height="15" fill="rgb(253,54,19)" fg:x="53" fg:w="55"/><text x="4.5002%" y="735.50">plugi..</text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="8.4202%" y="709" width="0.2406%" height="15" fill="rgb(253,94,18)" fg:x="105" fg:w="3"/><text x="8.6702%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="8.5806%" y="693" width="0.0802%" height="15" fill="rgb(227,57,52)" fg:x="107" fg:w="1"/><text x="8.8306%" y="703.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="8.5806%" y="677" width="0.0802%" height="15" fill="rgb(230,228,50)" fg:x="107" fg:w="1"/><text x="8.8306%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="8.5806%" y="661" width="0.0802%" height="15" fill="rgb(217,205,27)" fg:x="107" fg:w="1"/><text x="8.8306%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="8.5806%" y="645" width="0.0802%" height="15" fill="rgb(252,71,50)" fg:x="107" fg:w="1"/><text x="8.8306%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.5806%" y="629" width="0.0802%" height="15" fill="rgb(209,86,4)" fg:x="107" fg:w="1"/><text x="8.8306%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.5806%" y="613" width="0.0802%" height="15" fill="rgb(229,94,0)" fg:x="107" fg:w="1"/><text x="8.8306%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.5806%" y="597" width="0.0802%" height="15" fill="rgb(252,223,21)" fg:x="107" fg:w="1"/><text x="8.8306%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5806%" y="581" width="0.0802%" height="15" fill="rgb(230,210,4)" fg:x="107" fg:w="1"/><text x="8.8306%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5806%" y="565" width="0.0802%" height="15" fill="rgb(240,149,38)" fg:x="107" fg:w="1"/><text x="8.8306%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5806%" y="549" width="0.0802%" height="15" fill="rgb(254,105,20)" fg:x="107" fg:w="1"/><text x="8.8306%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.5806%" y="533" width="0.0802%" height="15" fill="rgb(253,87,46)" fg:x="107" fg:w="1"/><text x="8.8306%" y="543.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="8.8212%" y="661" width="0.0802%" height="15" fill="rgb(253,116,33)" fg:x="110" fg:w="1"/><text x="9.0712%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (4 samples, 0.32%)</title><rect x="8.6608%" y="725" width="0.3208%" height="15" fill="rgb(229,198,5)" fg:x="108" fg:w="4"/><text x="8.9108%" y="735.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (3 samples, 0.24%)</title><rect x="8.7410%" y="709" width="0.2406%" height="15" fill="rgb(242,38,37)" fg:x="109" fg:w="3"/><text x="8.9910%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="8.8212%" y="693" width="0.1604%" height="15" fill="rgb(242,69,53)" fg:x="110" fg:w="2"/><text x="9.0712%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="8.8212%" y="677" width="0.1604%" height="15" fill="rgb(249,80,16)" fg:x="110" fg:w="2"/><text x="9.0712%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.9014%" y="661" width="0.0802%" height="15" fill="rgb(206,128,11)" fg:x="111" fg:w="1"/><text x="9.1514%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.9014%" y="645" width="0.0802%" height="15" fill="rgb(212,35,20)" fg:x="111" fg:w="1"/><text x="9.1514%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9014%" y="629" width="0.0802%" height="15" fill="rgb(236,79,13)" fg:x="111" fg:w="1"/><text x="9.1514%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9014%" y="613" width="0.0802%" height="15" fill="rgb(233,123,3)" fg:x="111" fg:w="1"/><text x="9.1514%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.9014%" y="597" width="0.0802%" height="15" fill="rgb(214,93,52)" fg:x="111" fg:w="1"/><text x="9.1514%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9014%" y="581" width="0.0802%" height="15" fill="rgb(251,37,40)" fg:x="111" fg:w="1"/><text x="9.1514%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="9.0617%" y="677" width="0.1604%" height="15" fill="rgb(227,80,54)" fg:x="113" fg:w="2"/><text x="9.3117%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="9.0617%" y="661" width="0.1604%" height="15" fill="rgb(254,48,11)" fg:x="113" fg:w="2"/><text x="9.3117%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.1419%" y="645" width="0.0802%" height="15" fill="rgb(235,193,26)" fg:x="114" fg:w="1"/><text x="9.3919%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.1419%" y="629" width="0.0802%" height="15" fill="rgb(229,99,21)" fg:x="114" fg:w="1"/><text x="9.3919%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.1419%" y="613" width="0.0802%" height="15" fill="rgb(211,140,41)" fg:x="114" fg:w="1"/><text x="9.3919%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.1419%" y="597" width="0.0802%" height="15" fill="rgb(240,227,30)" fg:x="114" fg:w="1"/><text x="9.3919%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="9.1419%" y="581" width="0.0802%" height="15" fill="rgb(215,224,45)" fg:x="114" fg:w="1"/><text x="9.3919%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.1419%" y="565" width="0.0802%" height="15" fill="rgb(206,123,31)" fg:x="114" fg:w="1"/><text x="9.3919%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.1419%" y="549" width="0.0802%" height="15" fill="rgb(210,138,16)" fg:x="114" fg:w="1"/><text x="9.3919%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1419%" y="533" width="0.0802%" height="15" fill="rgb(228,57,28)" fg:x="114" fg:w="1"/><text x="9.3919%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1419%" y="517" width="0.0802%" height="15" fill="rgb(242,170,10)" fg:x="114" fg:w="1"/><text x="9.3919%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.1419%" y="501" width="0.0802%" height="15" fill="rgb(228,214,39)" fg:x="114" fg:w="1"/><text x="9.3919%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.1419%" y="485" width="0.0802%" height="15" fill="rgb(218,179,33)" fg:x="114" fg:w="1"/><text x="9.3919%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.1419%" y="469" width="0.0802%" height="15" fill="rgb(235,193,39)" fg:x="114" fg:w="1"/><text x="9.3919%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.1419%" y="453" width="0.0802%" height="15" fill="rgb(219,221,36)" fg:x="114" fg:w="1"/><text x="9.3919%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.1419%" y="437" width="0.0802%" height="15" fill="rgb(248,218,19)" fg:x="114" fg:w="1"/><text x="9.3919%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.1419%" y="421" width="0.0802%" height="15" fill="rgb(205,50,9)" fg:x="114" fg:w="1"/><text x="9.3919%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.1419%" y="405" width="0.0802%" height="15" fill="rgb(238,81,28)" fg:x="114" fg:w="1"/><text x="9.3919%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="9.1419%" y="389" width="0.0802%" height="15" fill="rgb(235,110,19)" fg:x="114" fg:w="1"/><text x="9.3919%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.1419%" y="373" width="0.0802%" height="15" fill="rgb(214,7,14)" fg:x="114" fg:w="1"/><text x="9.3919%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1419%" y="357" width="0.0802%" height="15" fill="rgb(211,77,3)" fg:x="114" fg:w="1"/><text x="9.3919%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="9.2221%" y="661" width="0.0802%" height="15" fill="rgb(229,5,9)" fg:x="115" fg:w="1"/><text x="9.4721%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2221%" y="645" width="0.0802%" height="15" fill="rgb(225,90,11)" fg:x="115" fg:w="1"/><text x="9.4721%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2221%" y="629" width="0.0802%" height="15" fill="rgb(242,56,8)" fg:x="115" fg:w="1"/><text x="9.4721%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2221%" y="613" width="0.0802%" height="15" fill="rgb(249,212,39)" fg:x="115" fg:w="1"/><text x="9.4721%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.2221%" y="597" width="0.0802%" height="15" fill="rgb(236,90,9)" fg:x="115" fg:w="1"/><text x="9.4721%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.2221%" y="581" width="0.0802%" height="15" fill="rgb(206,88,35)" fg:x="115" fg:w="1"/><text x="9.4721%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.2221%" y="565" width="0.0802%" height="15" fill="rgb(205,126,30)" fg:x="115" fg:w="1"/><text x="9.4721%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.2221%" y="549" width="0.0802%" height="15" fill="rgb(230,176,12)" fg:x="115" fg:w="1"/><text x="9.4721%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.2221%" y="533" width="0.0802%" height="15" fill="rgb(243,19,9)" fg:x="115" fg:w="1"/><text x="9.4721%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.2221%" y="517" width="0.0802%" height="15" fill="rgb(245,171,17)" fg:x="115" fg:w="1"/><text x="9.4721%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.2221%" y="501" width="0.0802%" height="15" fill="rgb(227,52,21)" fg:x="115" fg:w="1"/><text x="9.4721%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.2221%" y="485" width="0.0802%" height="15" fill="rgb(238,69,14)" fg:x="115" fg:w="1"/><text x="9.4721%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.2221%" y="469" width="0.0802%" height="15" fill="rgb(241,156,39)" fg:x="115" fg:w="1"/><text x="9.4721%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="9.2221%" y="453" width="0.0802%" height="15" fill="rgb(212,227,28)" fg:x="115" fg:w="1"/><text x="9.4721%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="9.2221%" y="437" width="0.0802%" height="15" fill="rgb(209,118,27)" fg:x="115" fg:w="1"/><text x="9.4721%" y="447.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="9.2221%" y="677" width="0.1604%" height="15" fill="rgb(226,102,5)" fg:x="115" fg:w="2"/><text x="9.4721%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.3023%" y="661" width="0.0802%" height="15" fill="rgb(223,34,3)" fg:x="116" fg:w="1"/><text x="9.5523%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="9.3023%" y="645" width="0.0802%" height="15" fill="rgb(221,81,38)" fg:x="116" fg:w="1"/><text x="9.5523%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.3023%" y="629" width="0.0802%" height="15" fill="rgb(236,219,28)" fg:x="116" fg:w="1"/><text x="9.5523%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3023%" y="613" width="0.0802%" height="15" fill="rgb(213,200,14)" fg:x="116" fg:w="1"/><text x="9.5523%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3023%" y="597" width="0.0802%" height="15" fill="rgb(240,33,19)" fg:x="116" fg:w="1"/><text x="9.5523%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.3023%" y="581" width="0.0802%" height="15" fill="rgb(233,113,27)" fg:x="116" fg:w="1"/><text x="9.5523%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.48%)</title><rect x="8.9816%" y="725" width="0.4812%" height="15" fill="rgb(220,221,18)" fg:x="112" fg:w="6"/><text x="9.2316%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="8.9816%" y="709" width="0.4812%" height="15" fill="rgb(238,92,8)" fg:x="112" fg:w="6"/><text x="9.2316%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="8.9816%" y="693" width="0.4812%" height="15" fill="rgb(222,164,16)" fg:x="112" fg:w="6"/><text x="9.2316%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="9.3825%" y="677" width="0.0802%" height="15" fill="rgb(241,119,3)" fg:x="117" fg:w="1"/><text x="9.6325%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="9.3825%" y="661" width="0.0802%" height="15" fill="rgb(241,44,8)" fg:x="117" fg:w="1"/><text x="9.6325%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="9.3825%" y="645" width="0.0802%" height="15" fill="rgb(230,36,40)" fg:x="117" fg:w="1"/><text x="9.6325%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.3825%" y="629" width="0.0802%" height="15" fill="rgb(243,16,36)" fg:x="117" fg:w="1"/><text x="9.6325%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.3825%" y="613" width="0.0802%" height="15" fill="rgb(231,4,26)" fg:x="117" fg:w="1"/><text x="9.6325%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3825%" y="597" width="0.0802%" height="15" fill="rgb(240,9,31)" fg:x="117" fg:w="1"/><text x="9.6325%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3825%" y="581" width="0.0802%" height="15" fill="rgb(207,173,15)" fg:x="117" fg:w="1"/><text x="9.6325%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.3825%" y="565" width="0.0802%" height="15" fill="rgb(224,192,53)" fg:x="117" fg:w="1"/><text x="9.6325%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3825%" y="549" width="0.0802%" height="15" fill="rgb(223,67,28)" fg:x="117" fg:w="1"/><text x="9.6325%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3825%" y="533" width="0.0802%" height="15" fill="rgb(211,20,47)" fg:x="117" fg:w="1"/><text x="9.6325%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.3825%" y="517" width="0.0802%" height="15" fill="rgb(240,228,2)" fg:x="117" fg:w="1"/><text x="9.6325%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.3825%" y="501" width="0.0802%" height="15" fill="rgb(248,151,12)" fg:x="117" fg:w="1"/><text x="9.6325%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.3825%" y="485" width="0.0802%" height="15" fill="rgb(244,8,39)" fg:x="117" fg:w="1"/><text x="9.6325%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="9.3825%" y="469" width="0.0802%" height="15" fill="rgb(222,26,8)" fg:x="117" fg:w="1"/><text x="9.6325%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.3825%" y="453" width="0.0802%" height="15" fill="rgb(213,106,44)" fg:x="117" fg:w="1"/><text x="9.6325%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4627%" y="613" width="0.0802%" height="15" fill="rgb(214,129,20)" fg:x="118" fg:w="1"/><text x="9.7127%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4627%" y="597" width="0.0802%" height="15" fill="rgb(212,32,13)" fg:x="118" fg:w="1"/><text x="9.7127%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.4627%" y="581" width="0.0802%" height="15" fill="rgb(208,168,33)" fg:x="118" fg:w="1"/><text x="9.7127%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.4627%" y="565" width="0.0802%" height="15" fill="rgb(231,207,8)" fg:x="118" fg:w="1"/><text x="9.7127%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.4627%" y="549" width="0.0802%" height="15" fill="rgb(235,219,23)" fg:x="118" fg:w="1"/><text x="9.7127%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.4627%" y="533" width="0.0802%" height="15" fill="rgb(226,216,26)" fg:x="118" fg:w="1"/><text x="9.7127%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.4627%" y="517" width="0.0802%" height="15" fill="rgb(239,137,16)" fg:x="118" fg:w="1"/><text x="9.7127%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.4627%" y="501" width="0.0802%" height="15" fill="rgb(207,12,36)" fg:x="118" fg:w="1"/><text x="9.7127%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.4627%" y="485" width="0.0802%" height="15" fill="rgb(210,214,24)" fg:x="118" fg:w="1"/><text x="9.7127%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.4627%" y="469" width="0.0802%" height="15" fill="rgb(206,56,30)" fg:x="118" fg:w="1"/><text x="9.7127%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.4627%" y="453" width="0.0802%" height="15" fill="rgb(228,143,26)" fg:x="118" fg:w="1"/><text x="9.7127%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.4627%" y="437" width="0.0802%" height="15" fill="rgb(216,218,46)" fg:x="118" fg:w="1"/><text x="9.7127%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.4627%" y="421" width="0.0802%" height="15" fill="rgb(206,6,19)" fg:x="118" fg:w="1"/><text x="9.7127%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4627%" y="405" width="0.0802%" height="15" fill="rgb(239,177,51)" fg:x="118" fg:w="1"/><text x="9.7127%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="9.4627%" y="709" width="0.1604%" height="15" fill="rgb(216,55,25)" fg:x="118" fg:w="2"/><text x="9.7127%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="9.4627%" y="693" width="0.1604%" height="15" fill="rgb(231,163,29)" fg:x="118" fg:w="2"/><text x="9.7127%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="9.4627%" y="677" width="0.1604%" height="15" fill="rgb(232,149,50)" fg:x="118" fg:w="2"/><text x="9.7127%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="9.4627%" y="661" width="0.1604%" height="15" fill="rgb(223,142,48)" fg:x="118" fg:w="2"/><text x="9.7127%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.4627%" y="645" width="0.1604%" height="15" fill="rgb(245,83,23)" fg:x="118" fg:w="2"/><text x="9.7127%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="9.4627%" y="629" width="0.1604%" height="15" fill="rgb(224,63,2)" fg:x="118" fg:w="2"/><text x="9.7127%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.5429%" y="613" width="0.0802%" height="15" fill="rgb(218,65,53)" fg:x="119" fg:w="1"/><text x="9.7929%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.5429%" y="597" width="0.0802%" height="15" fill="rgb(221,84,29)" fg:x="119" fg:w="1"/><text x="9.7929%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.5429%" y="581" width="0.0802%" height="15" fill="rgb(234,0,32)" fg:x="119" fg:w="1"/><text x="9.7929%" y="591.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="9.6231%" y="677" width="0.0802%" height="15" fill="rgb(206,20,16)" fg:x="120" fg:w="1"/><text x="9.8731%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6231%" y="661" width="0.0802%" height="15" fill="rgb(244,172,18)" fg:x="120" fg:w="1"/><text x="9.8731%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.7033%" y="677" width="0.0802%" height="15" fill="rgb(254,133,1)" fg:x="121" fg:w="1"/><text x="9.9533%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.7033%" y="661" width="0.0802%" height="15" fill="rgb(222,206,41)" fg:x="121" fg:w="1"/><text x="9.9533%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="9.6231%" y="709" width="0.2406%" height="15" fill="rgb(212,3,42)" fg:x="120" fg:w="3"/><text x="9.8731%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (3 samples, 0.24%)</title><rect x="9.6231%" y="693" width="0.2406%" height="15" fill="rgb(241,11,4)" fg:x="120" fg:w="3"/><text x="9.8731%" y="703.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.7835%" y="677" width="0.0802%" height="15" fill="rgb(205,19,26)" fg:x="122" fg:w="1"/><text x="10.0335%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7835%" y="661" width="0.0802%" height="15" fill="rgb(210,179,32)" fg:x="122" fg:w="1"/><text x="10.0335%" y="671.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (110 samples, 8.82%)</title><rect x="1.1227%" y="741" width="8.8212%" height="15" fill="rgb(227,116,49)" fg:x="14" fg:w="110"/><text x="1.3727%" y="751.50">&lt;tests::Hold..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (6 samples, 0.48%)</title><rect x="9.4627%" y="725" width="0.4812%" height="15" fill="rgb(211,146,6)" fg:x="118" fg:w="6"/><text x="9.7127%" y="735.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="9.8637%" y="709" width="0.0802%" height="15" fill="rgb(219,44,39)" fg:x="123" fg:w="1"/><text x="10.1137%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="9.8637%" y="693" width="0.0802%" height="15" fill="rgb(234,128,11)" fg:x="123" fg:w="1"/><text x="10.1137%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="9.8637%" y="677" width="0.0802%" height="15" fill="rgb(220,183,53)" fg:x="123" fg:w="1"/><text x="10.1137%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.8637%" y="661" width="0.0802%" height="15" fill="rgb(213,219,32)" fg:x="123" fg:w="1"/><text x="10.1137%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.8637%" y="645" width="0.0802%" height="15" fill="rgb(232,156,16)" fg:x="123" fg:w="1"/><text x="10.1137%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.8637%" y="629" width="0.0802%" height="15" fill="rgb(246,135,34)" fg:x="123" fg:w="1"/><text x="10.1137%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8637%" y="613" width="0.0802%" height="15" fill="rgb(241,99,0)" fg:x="123" fg:w="1"/><text x="10.1137%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="9.9439%" y="725" width="0.0802%" height="15" fill="rgb(222,103,45)" fg:x="124" fg:w="1"/><text x="10.1939%" y="735.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="10.0241%" y="725" width="0.0802%" height="15" fill="rgb(212,57,4)" fg:x="125" fg:w="1"/><text x="10.2741%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.0241%" y="709" width="0.0802%" height="15" fill="rgb(215,68,47)" fg:x="125" fg:w="1"/><text x="10.2741%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.0241%" y="693" width="0.0802%" height="15" fill="rgb(230,84,2)" fg:x="125" fg:w="1"/><text x="10.2741%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.0241%" y="677" width="0.0802%" height="15" fill="rgb(220,102,14)" fg:x="125" fg:w="1"/><text x="10.2741%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.08%)</title><rect x="10.0241%" y="661" width="0.0802%" height="15" fill="rgb(240,10,32)" fg:x="125" fg:w="1"/><text x="10.2741%" y="671.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="10.1043%" y="725" width="0.0802%" height="15" fill="rgb(215,47,27)" fg:x="126" fg:w="1"/><text x="10.3543%" y="735.50"></text></g><g><title>kernel::session::SetSession::new (1 samples, 0.08%)</title><rect x="10.1043%" y="709" width="0.0802%" height="15" fill="rgb(233,188,43)" fg:x="126" fg:w="1"/><text x="10.3543%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.1844%" y="645" width="0.0802%" height="15" fill="rgb(253,190,1)" fg:x="127" fg:w="1"/><text x="10.4344%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.1844%" y="629" width="0.0802%" height="15" fill="rgb(206,114,52)" fg:x="127" fg:w="1"/><text x="10.4344%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.1844%" y="613" width="0.0802%" height="15" fill="rgb(233,120,37)" fg:x="127" fg:w="1"/><text x="10.4344%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.1844%" y="597" width="0.0802%" height="15" fill="rgb(214,52,39)" fg:x="127" fg:w="1"/><text x="10.4344%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.3448%" y="581" width="0.0802%" height="15" fill="rgb(223,80,29)" fg:x="129" fg:w="1"/><text x="10.5948%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3448%" y="565" width="0.0802%" height="15" fill="rgb(230,101,40)" fg:x="129" fg:w="1"/><text x="10.5948%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3448%" y="549" width="0.0802%" height="15" fill="rgb(219,211,8)" fg:x="129" fg:w="1"/><text x="10.5948%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.3448%" y="533" width="0.0802%" height="15" fill="rgb(252,126,28)" fg:x="129" fg:w="1"/><text x="10.5948%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.3448%" y="517" width="0.0802%" height="15" fill="rgb(215,56,38)" fg:x="129" fg:w="1"/><text x="10.5948%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3448%" y="597" width="0.1604%" height="15" fill="rgb(249,55,44)" fg:x="129" fg:w="2"/><text x="10.5948%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.4250%" y="581" width="0.0802%" height="15" fill="rgb(220,221,32)" fg:x="130" fg:w="1"/><text x="10.6750%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.4250%" y="565" width="0.0802%" height="15" fill="rgb(212,216,41)" fg:x="130" fg:w="1"/><text x="10.6750%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.4250%" y="549" width="0.0802%" height="15" fill="rgb(228,213,43)" fg:x="130" fg:w="1"/><text x="10.6750%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="10.3448%" y="613" width="0.2406%" height="15" fill="rgb(211,31,26)" fg:x="129" fg:w="3"/><text x="10.5948%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5052%" y="597" width="0.0802%" height="15" fill="rgb(229,202,19)" fg:x="131" fg:w="1"/><text x="10.7552%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.5854%" y="613" width="0.0802%" height="15" fill="rgb(229,105,46)" fg:x="132" fg:w="1"/><text x="10.8354%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5854%" y="597" width="0.0802%" height="15" fill="rgb(235,108,1)" fg:x="132" fg:w="1"/><text x="10.8354%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.7458%" y="597" width="0.0802%" height="15" fill="rgb(245,111,35)" fg:x="134" fg:w="1"/><text x="10.9958%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.7458%" y="581" width="0.0802%" height="15" fill="rgb(219,185,31)" fg:x="134" fg:w="1"/><text x="10.9958%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.7458%" y="565" width="0.0802%" height="15" fill="rgb(214,4,43)" fg:x="134" fg:w="1"/><text x="10.9958%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.7458%" y="549" width="0.0802%" height="15" fill="rgb(235,227,40)" fg:x="134" fg:w="1"/><text x="10.9958%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.8260%" y="581" width="0.1604%" height="15" fill="rgb(230,88,30)" fg:x="135" fg:w="2"/><text x="11.0760%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.9062%" y="565" width="0.0802%" height="15" fill="rgb(216,217,1)" fg:x="136" fg:w="1"/><text x="11.1562%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.9062%" y="549" width="0.0802%" height="15" fill="rgb(248,139,50)" fg:x="136" fg:w="1"/><text x="11.1562%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.9062%" y="533" width="0.0802%" height="15" fill="rgb(233,1,21)" fg:x="136" fg:w="1"/><text x="11.1562%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.9864%" y="565" width="0.0802%" height="15" fill="rgb(215,183,12)" fg:x="137" fg:w="1"/><text x="11.2364%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.9864%" y="549" width="0.0802%" height="15" fill="rgb(229,104,42)" fg:x="137" fg:w="1"/><text x="11.2364%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.9864%" y="533" width="0.0802%" height="15" fill="rgb(243,34,48)" fg:x="137" fg:w="1"/><text x="11.2364%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.9864%" y="517" width="0.0802%" height="15" fill="rgb(239,11,44)" fg:x="137" fg:w="1"/><text x="11.2364%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.9864%" y="501" width="0.0802%" height="15" fill="rgb(231,98,35)" fg:x="137" fg:w="1"/><text x="11.2364%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="10.2646%" y="629" width="0.9623%" height="15" fill="rgb(233,28,25)" fg:x="128" fg:w="12"/><text x="10.5146%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="10.6656%" y="613" width="0.5613%" height="15" fill="rgb(234,123,11)" fg:x="133" fg:w="7"/><text x="10.9156%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="10.8260%" y="597" width="0.4010%" height="15" fill="rgb(220,69,3)" fg:x="135" fg:w="5"/><text x="11.0760%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.9864%" y="581" width="0.2406%" height="15" fill="rgb(214,64,36)" fg:x="137" fg:w="3"/><text x="11.2364%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.0666%" y="565" width="0.1604%" height="15" fill="rgb(211,138,32)" fg:x="138" fg:w="2"/><text x="11.3166%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.0666%" y="549" width="0.1604%" height="15" fill="rgb(213,118,47)" fg:x="138" fg:w="2"/><text x="11.3166%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.1468%" y="533" width="0.0802%" height="15" fill="rgb(243,124,49)" fg:x="139" fg:w="1"/><text x="11.3968%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.1468%" y="517" width="0.0802%" height="15" fill="rgb(221,30,28)" fg:x="139" fg:w="1"/><text x="11.3968%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.12%)</title><rect x="10.1844%" y="661" width="1.1227%" height="15" fill="rgb(246,37,13)" fg:x="127" fg:w="14"/><text x="10.4344%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.04%)</title><rect x="10.2646%" y="645" width="1.0425%" height="15" fill="rgb(249,66,14)" fg:x="128" fg:w="13"/><text x="10.5146%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.2269%" y="629" width="0.0802%" height="15" fill="rgb(213,166,5)" fg:x="140" fg:w="1"/><text x="11.4769%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.2269%" y="613" width="0.0802%" height="15" fill="rgb(221,66,24)" fg:x="140" fg:w="1"/><text x="11.4769%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.2269%" y="597" width="0.0802%" height="15" fill="rgb(210,132,17)" fg:x="140" fg:w="1"/><text x="11.4769%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.3071%" y="613" width="0.0802%" height="15" fill="rgb(243,202,5)" fg:x="141" fg:w="1"/><text x="11.5571%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.3873%" y="597" width="0.0802%" height="15" fill="rgb(233,70,48)" fg:x="142" fg:w="1"/><text x="11.6373%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.3071%" y="661" width="0.2406%" height="15" fill="rgb(238,41,26)" fg:x="141" fg:w="3"/><text x="11.5571%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="11.3071%" y="645" width="0.2406%" height="15" fill="rgb(241,19,31)" fg:x="141" fg:w="3"/><text x="11.5571%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.3071%" y="629" width="0.2406%" height="15" fill="rgb(214,76,10)" fg:x="141" fg:w="3"/><text x="11.5571%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.3873%" y="613" width="0.1604%" height="15" fill="rgb(254,202,22)" fg:x="142" fg:w="2"/><text x="11.6373%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.4675%" y="597" width="0.0802%" height="15" fill="rgb(214,72,24)" fg:x="143" fg:w="1"/><text x="11.7175%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.4675%" y="581" width="0.0802%" height="15" fill="rgb(221,92,46)" fg:x="143" fg:w="1"/><text x="11.7175%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.5477%" y="629" width="0.0802%" height="15" fill="rgb(246,13,50)" fg:x="144" fg:w="1"/><text x="11.7977%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6279%" y="581" width="0.0802%" height="15" fill="rgb(240,165,38)" fg:x="145" fg:w="1"/><text x="11.8779%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="11.7081%" y="581" width="0.1604%" height="15" fill="rgb(241,24,51)" fg:x="146" fg:w="2"/><text x="11.9581%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.8685%" y="565" width="0.0802%" height="15" fill="rgb(227,51,44)" fg:x="148" fg:w="1"/><text x="12.1185%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.9487%" y="549" width="0.0802%" height="15" fill="rgb(231,121,3)" fg:x="149" fg:w="1"/><text x="12.1987%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9487%" y="533" width="0.0802%" height="15" fill="rgb(245,3,41)" fg:x="149" fg:w="1"/><text x="12.1987%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="11.6279%" y="629" width="0.4812%" height="15" fill="rgb(214,13,26)" fg:x="145" fg:w="6"/><text x="11.8779%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="11.6279%" y="613" width="0.4812%" height="15" fill="rgb(252,75,11)" fg:x="145" fg:w="6"/><text x="11.8779%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="11.6279%" y="597" width="0.4812%" height="15" fill="rgb(218,226,17)" fg:x="145" fg:w="6"/><text x="11.8779%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.8685%" y="581" width="0.2406%" height="15" fill="rgb(248,89,38)" fg:x="148" fg:w="3"/><text x="12.1185%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.9487%" y="565" width="0.1604%" height="15" fill="rgb(237,73,46)" fg:x="149" fg:w="2"/><text x="12.1987%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0289%" y="549" width="0.0802%" height="15" fill="rgb(242,78,33)" fg:x="150" fg:w="1"/><text x="12.2789%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0289%" y="533" width="0.0802%" height="15" fill="rgb(235,60,3)" fg:x="150" fg:w="1"/><text x="12.2789%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0289%" y="517" width="0.0802%" height="15" fill="rgb(216,172,19)" fg:x="150" fg:w="1"/><text x="12.2789%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (9 samples, 0.72%)</title><rect x="11.5477%" y="645" width="0.7217%" height="15" fill="rgb(227,6,42)" fg:x="144" fg:w="9"/><text x="11.7977%" y="655.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="12.1091%" y="629" width="0.1604%" height="15" fill="rgb(223,207,42)" fg:x="151" fg:w="2"/><text x="12.3591%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="12.1091%" y="613" width="0.1604%" height="15" fill="rgb(246,138,30)" fg:x="151" fg:w="2"/><text x="12.3591%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="12.1091%" y="597" width="0.1604%" height="15" fill="rgb(251,199,47)" fg:x="151" fg:w="2"/><text x="12.3591%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="12.1091%" y="581" width="0.1604%" height="15" fill="rgb(228,218,44)" fg:x="151" fg:w="2"/><text x="12.3591%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="12.1091%" y="565" width="0.1604%" height="15" fill="rgb(220,68,6)" fg:x="151" fg:w="2"/><text x="12.3591%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.1893%" y="549" width="0.0802%" height="15" fill="rgb(240,60,26)" fg:x="152" fg:w="1"/><text x="12.4393%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.1893%" y="533" width="0.0802%" height="15" fill="rgb(211,200,19)" fg:x="152" fg:w="1"/><text x="12.4393%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2694%" y="613" width="0.0802%" height="15" fill="rgb(242,145,30)" fg:x="153" fg:w="1"/><text x="12.5194%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.2694%" y="597" width="0.0802%" height="15" fill="rgb(225,64,13)" fg:x="153" fg:w="1"/><text x="12.5194%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3496%" y="565" width="0.0802%" height="15" fill="rgb(218,103,35)" fg:x="154" fg:w="1"/><text x="12.5996%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3496%" y="549" width="0.0802%" height="15" fill="rgb(216,93,46)" fg:x="154" fg:w="1"/><text x="12.5996%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3496%" y="533" width="0.0802%" height="15" fill="rgb(225,159,27)" fg:x="154" fg:w="1"/><text x="12.5996%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="12.4298%" y="549" width="0.0802%" height="15" fill="rgb(225,204,11)" fg:x="155" fg:w="1"/><text x="12.6798%" y="559.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="12.4298%" y="533" width="0.0802%" height="15" fill="rgb(205,56,4)" fg:x="155" fg:w="1"/><text x="12.6798%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="12.4298%" y="565" width="0.1604%" height="15" fill="rgb(206,6,35)" fg:x="155" fg:w="2"/><text x="12.6798%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5100%" y="549" width="0.0802%" height="15" fill="rgb(247,73,52)" fg:x="156" fg:w="1"/><text x="12.7600%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.5902%" y="533" width="0.1604%" height="15" fill="rgb(246,97,4)" fg:x="157" fg:w="2"/><text x="12.8402%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.6704%" y="517" width="0.0802%" height="15" fill="rgb(212,37,15)" fg:x="158" fg:w="1"/><text x="12.9204%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="12.5902%" y="549" width="0.3208%" height="15" fill="rgb(208,130,40)" fg:x="157" fg:w="4"/><text x="12.8402%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.7506%" y="533" width="0.1604%" height="15" fill="rgb(236,55,29)" fg:x="159" fg:w="2"/><text x="13.0006%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="12.7506%" y="517" width="0.1604%" height="15" fill="rgb(209,156,45)" fg:x="159" fg:w="2"/><text x="13.0006%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.7506%" y="501" width="0.1604%" height="15" fill="rgb(249,107,4)" fg:x="159" fg:w="2"/><text x="13.0006%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="12.7506%" y="485" width="0.1604%" height="15" fill="rgb(227,7,13)" fg:x="159" fg:w="2"/><text x="13.0006%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.7506%" y="469" width="0.1604%" height="15" fill="rgb(250,129,14)" fg:x="159" fg:w="2"/><text x="13.0006%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.8308%" y="453" width="0.0802%" height="15" fill="rgb(229,92,13)" fg:x="160" fg:w="1"/><text x="13.0808%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8308%" y="437" width="0.0802%" height="15" fill="rgb(245,98,39)" fg:x="160" fg:w="1"/><text x="13.0808%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8308%" y="421" width="0.0802%" height="15" fill="rgb(234,135,48)" fg:x="160" fg:w="1"/><text x="13.0808%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8308%" y="405" width="0.0802%" height="15" fill="rgb(230,98,28)" fg:x="160" fg:w="1"/><text x="13.0808%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="12.3496%" y="597" width="0.6415%" height="15" fill="rgb(223,121,0)" fg:x="154" fg:w="8"/><text x="12.5996%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="12.3496%" y="581" width="0.6415%" height="15" fill="rgb(234,173,33)" fg:x="154" fg:w="8"/><text x="12.5996%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="12.5902%" y="565" width="0.4010%" height="15" fill="rgb(245,47,8)" fg:x="157" fg:w="5"/><text x="12.8402%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9110%" y="549" width="0.0802%" height="15" fill="rgb(205,17,20)" fg:x="161" fg:w="1"/><text x="13.1610%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="12.2694%" y="645" width="0.8019%" height="15" fill="rgb(232,151,16)" fg:x="153" fg:w="10"/><text x="12.5194%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="12.2694%" y="629" width="0.8019%" height="15" fill="rgb(208,30,32)" fg:x="153" fg:w="10"/><text x="12.5194%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="12.3496%" y="613" width="0.7217%" height="15" fill="rgb(254,26,3)" fg:x="154" fg:w="9"/><text x="12.5996%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9912%" y="597" width="0.0802%" height="15" fill="rgb(240,177,30)" fg:x="162" fg:w="1"/><text x="13.2412%" y="607.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="13.0714%" y="565" width="0.0802%" height="15" fill="rgb(248,76,44)" fg:x="163" fg:w="1"/><text x="13.3214%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.2318%" y="421" width="0.0802%" height="15" fill="rgb(241,186,54)" fg:x="165" fg:w="1"/><text x="13.4818%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.2318%" y="405" width="0.0802%" height="15" fill="rgb(249,171,29)" fg:x="165" fg:w="1"/><text x="13.4818%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="13.2318%" y="389" width="0.0802%" height="15" fill="rgb(237,151,44)" fg:x="165" fg:w="1"/><text x="13.4818%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="13.2318%" y="517" width="0.1604%" height="15" fill="rgb(228,174,30)" fg:x="165" fg:w="2"/><text x="13.4818%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.2318%" y="501" width="0.1604%" height="15" fill="rgb(252,14,37)" fg:x="165" fg:w="2"/><text x="13.4818%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="13.2318%" y="485" width="0.1604%" height="15" fill="rgb(207,111,40)" fg:x="165" fg:w="2"/><text x="13.4818%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.2318%" y="469" width="0.1604%" height="15" fill="rgb(248,171,54)" fg:x="165" fg:w="2"/><text x="13.4818%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="13.2318%" y="453" width="0.1604%" height="15" fill="rgb(211,127,2)" fg:x="165" fg:w="2"/><text x="13.4818%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="13.2318%" y="437" width="0.1604%" height="15" fill="rgb(236,87,47)" fg:x="165" fg:w="2"/><text x="13.4818%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.3119%" y="421" width="0.0802%" height="15" fill="rgb(223,190,45)" fg:x="166" fg:w="1"/><text x="13.5619%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="13.0714%" y="581" width="0.4010%" height="15" fill="rgb(215,5,16)" fg:x="163" fg:w="5"/><text x="13.3214%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="13.1516%" y="565" width="0.3208%" height="15" fill="rgb(252,82,33)" fg:x="164" fg:w="4"/><text x="13.4016%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="13.1516%" y="549" width="0.3208%" height="15" fill="rgb(247,213,44)" fg:x="164" fg:w="4"/><text x="13.4016%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="13.1516%" y="533" width="0.3208%" height="15" fill="rgb(205,196,44)" fg:x="164" fg:w="4"/><text x="13.4016%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.3921%" y="517" width="0.0802%" height="15" fill="rgb(237,96,54)" fg:x="167" fg:w="1"/><text x="13.6421%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="13.4723%" y="581" width="0.1604%" height="15" fill="rgb(230,113,34)" fg:x="168" fg:w="2"/><text x="13.7223%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="13.5525%" y="565" width="0.0802%" height="15" fill="rgb(221,224,12)" fg:x="169" fg:w="1"/><text x="13.8025%" y="575.50"></text></g><g><title>engine::session::Session::close (47 samples, 3.77%)</title><rect x="9.9439%" y="741" width="3.7690%" height="15" fill="rgb(219,112,44)" fg:x="124" fg:w="47"/><text x="10.1939%" y="751.50">engi..</text></g><g><title>engine::session::state::State::close (44 samples, 3.53%)</title><rect x="10.1844%" y="725" width="3.5285%" height="15" fill="rgb(210,31,13)" fg:x="127" fg:w="44"/><text x="10.4344%" y="735.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (44 samples, 3.53%)</title><rect x="10.1844%" y="709" width="3.5285%" height="15" fill="rgb(230,25,16)" fg:x="127" fg:w="44"/><text x="10.4344%" y="719.50">eng..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (44 samples, 3.53%)</title><rect x="10.1844%" y="693" width="3.5285%" height="15" fill="rgb(246,108,53)" fg:x="127" fg:w="44"/><text x="10.4344%" y="703.50">eng..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (44 samples, 3.53%)</title><rect x="10.1844%" y="677" width="3.5285%" height="15" fill="rgb(241,172,50)" fg:x="127" fg:w="44"/><text x="10.4344%" y="687.50">eng..</text></g><g><title>kernel::model::any_entity_changes (27 samples, 2.17%)</title><rect x="11.5477%" y="661" width="2.1652%" height="15" fill="rgb(235,141,10)" fg:x="144" fg:w="27"/><text x="11.7977%" y="671.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="13.0714%" y="645" width="0.6415%" height="15" fill="rgb(220,174,43)" fg:x="163" fg:w="8"/><text x="13.3214%" y="655.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="13.0714%" y="629" width="0.6415%" height="15" fill="rgb(215,181,40)" fg:x="163" fg:w="8"/><text x="13.3214%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="13.0714%" y="613" width="0.6415%" height="15" fill="rgb(230,97,2)" fg:x="163" fg:w="8"/><text x="13.3214%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="13.0714%" y="597" width="0.6415%" height="15" fill="rgb(211,25,27)" fg:x="163" fg:w="8"/><text x="13.3214%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6327%" y="581" width="0.0802%" height="15" fill="rgb(230,87,26)" fg:x="170" fg:w="1"/><text x="13.8827%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="13.7931%" y="629" width="0.0802%" height="15" fill="rgb(227,160,17)" fg:x="172" fg:w="1"/><text x="14.0431%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="13.7931%" y="613" width="0.0802%" height="15" fill="rgb(244,85,34)" fg:x="172" fg:w="1"/><text x="14.0431%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="13.7931%" y="597" width="0.0802%" height="15" fill="rgb(207,70,0)" fg:x="172" fg:w="1"/><text x="14.0431%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="13.7931%" y="581" width="0.0802%" height="15" fill="rgb(223,129,7)" fg:x="172" fg:w="1"/><text x="14.0431%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.7931%" y="565" width="0.0802%" height="15" fill="rgb(246,105,7)" fg:x="172" fg:w="1"/><text x="14.0431%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.7931%" y="549" width="0.0802%" height="15" fill="rgb(215,154,42)" fg:x="172" fg:w="1"/><text x="14.0431%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.7931%" y="533" width="0.0802%" height="15" fill="rgb(220,215,30)" fg:x="172" fg:w="1"/><text x="14.0431%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="13.7931%" y="517" width="0.0802%" height="15" fill="rgb(228,81,51)" fg:x="172" fg:w="1"/><text x="14.0431%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="13.7931%" y="501" width="0.0802%" height="15" fill="rgb(247,71,54)" fg:x="172" fg:w="1"/><text x="14.0431%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.7931%" y="485" width="0.0802%" height="15" fill="rgb(234,176,34)" fg:x="172" fg:w="1"/><text x="14.0431%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.7931%" y="469" width="0.0802%" height="15" fill="rgb(241,103,54)" fg:x="172" fg:w="1"/><text x="14.0431%" y="479.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="13.7931%" y="453" width="0.0802%" height="15" fill="rgb(228,22,34)" fg:x="172" fg:w="1"/><text x="14.0431%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="13.7931%" y="437" width="0.0802%" height="15" fill="rgb(241,179,48)" fg:x="172" fg:w="1"/><text x="14.0431%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="13.7931%" y="421" width="0.0802%" height="15" fill="rgb(235,167,37)" fg:x="172" fg:w="1"/><text x="14.0431%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="13.7931%" y="405" width="0.0802%" height="15" fill="rgb(213,109,30)" fg:x="172" fg:w="1"/><text x="14.0431%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.7931%" y="389" width="0.0802%" height="15" fill="rgb(222,172,16)" fg:x="172" fg:w="1"/><text x="14.0431%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.8733%" y="517" width="0.0802%" height="15" fill="rgb(233,192,5)" fg:x="173" fg:w="1"/><text x="14.1233%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.8733%" y="501" width="0.0802%" height="15" fill="rgb(247,189,41)" fg:x="173" fg:w="1"/><text x="14.1233%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.8733%" y="485" width="0.0802%" height="15" fill="rgb(218,134,47)" fg:x="173" fg:w="1"/><text x="14.1233%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8733%" y="469" width="0.0802%" height="15" fill="rgb(216,29,3)" fg:x="173" fg:w="1"/><text x="14.1233%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8733%" y="453" width="0.0802%" height="15" fill="rgb(246,140,12)" fg:x="173" fg:w="1"/><text x="14.1233%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8733%" y="437" width="0.0802%" height="15" fill="rgb(230,136,11)" fg:x="173" fg:w="1"/><text x="14.1233%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8733%" y="421" width="0.0802%" height="15" fill="rgb(247,22,47)" fg:x="173" fg:w="1"/><text x="14.1233%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.8733%" y="405" width="0.0802%" height="15" fill="rgb(218,84,22)" fg:x="173" fg:w="1"/><text x="14.1233%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8733%" y="389" width="0.0802%" height="15" fill="rgb(216,87,39)" fg:x="173" fg:w="1"/><text x="14.1233%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="13.8733%" y="549" width="0.1604%" height="15" fill="rgb(221,178,8)" fg:x="173" fg:w="2"/><text x="14.1233%" y="559.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="13.8733%" y="533" width="0.1604%" height="15" fill="rgb(230,42,11)" fg:x="173" fg:w="2"/><text x="14.1233%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.9535%" y="517" width="0.0802%" height="15" fill="rgb(237,229,4)" fg:x="174" fg:w="1"/><text x="14.2035%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.9535%" y="501" width="0.0802%" height="15" fill="rgb(222,31,33)" fg:x="174" fg:w="1"/><text x="14.2035%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.9535%" y="485" width="0.0802%" height="15" fill="rgb(210,17,39)" fg:x="174" fg:w="1"/><text x="14.2035%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.9535%" y="469" width="0.0802%" height="15" fill="rgb(244,93,20)" fg:x="174" fg:w="1"/><text x="14.2035%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9535%" y="453" width="0.0802%" height="15" fill="rgb(210,40,47)" fg:x="174" fg:w="1"/><text x="14.2035%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.9535%" y="437" width="0.0802%" height="15" fill="rgb(239,211,47)" fg:x="174" fg:w="1"/><text x="14.2035%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9535%" y="421" width="0.0802%" height="15" fill="rgb(251,223,49)" fg:x="174" fg:w="1"/><text x="14.2035%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.9535%" y="405" width="0.0802%" height="15" fill="rgb(221,149,5)" fg:x="174" fg:w="1"/><text x="14.2035%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9535%" y="389" width="0.0802%" height="15" fill="rgb(219,224,51)" fg:x="174" fg:w="1"/><text x="14.2035%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.9535%" y="373" width="0.0802%" height="15" fill="rgb(223,7,8)" fg:x="174" fg:w="1"/><text x="14.2035%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9535%" y="357" width="0.0802%" height="15" fill="rgb(241,217,22)" fg:x="174" fg:w="1"/><text x="14.2035%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.9535%" y="341" width="0.0802%" height="15" fill="rgb(248,209,0)" fg:x="174" fg:w="1"/><text x="14.2035%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9535%" y="325" width="0.0802%" height="15" fill="rgb(217,205,4)" fg:x="174" fg:w="1"/><text x="14.2035%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.0337%" y="405" width="0.0802%" height="15" fill="rgb(228,124,39)" fg:x="175" fg:w="1"/><text x="14.2837%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.0337%" y="389" width="0.0802%" height="15" fill="rgb(250,116,42)" fg:x="175" fg:w="1"/><text x="14.2837%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.0337%" y="373" width="0.0802%" height="15" fill="rgb(223,202,9)" fg:x="175" fg:w="1"/><text x="14.2837%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.0337%" y="357" width="0.0802%" height="15" fill="rgb(242,222,40)" fg:x="175" fg:w="1"/><text x="14.2837%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="14.0337%" y="341" width="0.0802%" height="15" fill="rgb(229,99,46)" fg:x="175" fg:w="1"/><text x="14.2837%" y="351.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="14.0337%" y="533" width="0.1604%" height="15" fill="rgb(225,56,46)" fg:x="175" fg:w="2"/><text x="14.2837%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.0337%" y="517" width="0.1604%" height="15" fill="rgb(227,94,5)" fg:x="175" fg:w="2"/><text x="14.2837%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="14.0337%" y="501" width="0.1604%" height="15" fill="rgb(205,112,38)" fg:x="175" fg:w="2"/><text x="14.2837%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.0337%" y="485" width="0.1604%" height="15" fill="rgb(231,133,46)" fg:x="175" fg:w="2"/><text x="14.2837%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="14.0337%" y="469" width="0.1604%" height="15" fill="rgb(217,16,9)" fg:x="175" fg:w="2"/><text x="14.2837%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.0337%" y="453" width="0.1604%" height="15" fill="rgb(249,173,9)" fg:x="175" fg:w="2"/><text x="14.2837%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="14.0337%" y="437" width="0.1604%" height="15" fill="rgb(205,163,53)" fg:x="175" fg:w="2"/><text x="14.2837%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.0337%" y="421" width="0.1604%" height="15" fill="rgb(217,54,41)" fg:x="175" fg:w="2"/><text x="14.2837%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.1139%" y="405" width="0.0802%" height="15" fill="rgb(228,216,12)" fg:x="176" fg:w="1"/><text x="14.3639%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.1139%" y="389" width="0.0802%" height="15" fill="rgb(244,228,15)" fg:x="176" fg:w="1"/><text x="14.3639%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.1139%" y="373" width="0.0802%" height="15" fill="rgb(221,176,53)" fg:x="176" fg:w="1"/><text x="14.3639%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1139%" y="357" width="0.0802%" height="15" fill="rgb(205,94,34)" fg:x="176" fg:w="1"/><text x="14.3639%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1941%" y="501" width="0.0802%" height="15" fill="rgb(213,110,48)" fg:x="177" fg:w="1"/><text x="14.4441%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.2743%" y="469" width="0.0802%" height="15" fill="rgb(236,142,28)" fg:x="178" fg:w="1"/><text x="14.5243%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.2743%" y="453" width="0.0802%" height="15" fill="rgb(225,135,29)" fg:x="178" fg:w="1"/><text x="14.5243%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.3545%" y="453" width="0.0802%" height="15" fill="rgb(252,45,31)" fg:x="179" fg:w="1"/><text x="14.6045%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.3545%" y="437" width="0.0802%" height="15" fill="rgb(211,187,50)" fg:x="179" fg:w="1"/><text x="14.6045%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="14.3545%" y="421" width="0.0802%" height="15" fill="rgb(229,109,7)" fg:x="179" fg:w="1"/><text x="14.6045%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.3545%" y="405" width="0.0802%" height="15" fill="rgb(251,131,51)" fg:x="179" fg:w="1"/><text x="14.6045%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.3545%" y="389" width="0.0802%" height="15" fill="rgb(251,180,35)" fg:x="179" fg:w="1"/><text x="14.6045%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.3545%" y="373" width="0.0802%" height="15" fill="rgb(211,46,32)" fg:x="179" fg:w="1"/><text x="14.6045%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3545%" y="357" width="0.0802%" height="15" fill="rgb(248,123,17)" fg:x="179" fg:w="1"/><text x="14.6045%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="14.4346%" y="453" width="0.0802%" height="15" fill="rgb(227,141,18)" fg:x="180" fg:w="1"/><text x="14.6846%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.4346%" y="437" width="0.0802%" height="15" fill="rgb(216,102,9)" fg:x="180" fg:w="1"/><text x="14.6846%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4346%" y="421" width="0.0802%" height="15" fill="rgb(253,47,13)" fg:x="180" fg:w="1"/><text x="14.6846%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (7 samples, 0.56%)</title><rect x="14.0337%" y="549" width="0.5613%" height="15" fill="rgb(226,93,23)" fg:x="175" fg:w="7"/><text x="14.2837%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="14.1941%" y="533" width="0.4010%" height="15" fill="rgb(247,104,17)" fg:x="177" fg:w="5"/><text x="14.4441%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="14.1941%" y="517" width="0.4010%" height="15" fill="rgb(233,203,26)" fg:x="177" fg:w="5"/><text x="14.4441%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="14.2743%" y="501" width="0.3208%" height="15" fill="rgb(244,98,49)" fg:x="178" fg:w="4"/><text x="14.5243%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="14.2743%" y="485" width="0.3208%" height="15" fill="rgb(235,134,22)" fg:x="178" fg:w="4"/><text x="14.5243%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="14.3545%" y="469" width="0.2406%" height="15" fill="rgb(221,70,32)" fg:x="179" fg:w="3"/><text x="14.6045%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5148%" y="453" width="0.0802%" height="15" fill="rgb(238,15,50)" fg:x="181" fg:w="1"/><text x="14.7648%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.5148%" y="437" width="0.0802%" height="15" fill="rgb(215,221,48)" fg:x="181" fg:w="1"/><text x="14.7648%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="14.5148%" y="421" width="0.0802%" height="15" fill="rgb(236,73,3)" fg:x="181" fg:w="1"/><text x="14.7648%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="14.5148%" y="405" width="0.0802%" height="15" fill="rgb(250,107,11)" fg:x="181" fg:w="1"/><text x="14.7648%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (10 samples, 0.80%)</title><rect x="13.8733%" y="597" width="0.8019%" height="15" fill="rgb(242,39,14)" fg:x="173" fg:w="10"/><text x="14.1233%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (10 samples, 0.80%)</title><rect x="13.8733%" y="581" width="0.8019%" height="15" fill="rgb(248,164,37)" fg:x="173" fg:w="10"/><text x="14.1233%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="13.8733%" y="565" width="0.8019%" height="15" fill="rgb(217,60,12)" fg:x="173" fg:w="10"/><text x="14.1233%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.5950%" y="549" width="0.0802%" height="15" fill="rgb(240,125,29)" fg:x="182" fg:w="1"/><text x="14.8450%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.5950%" y="533" width="0.0802%" height="15" fill="rgb(208,207,28)" fg:x="182" fg:w="1"/><text x="14.8450%" y="543.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="14.5950%" y="517" width="0.0802%" height="15" fill="rgb(209,159,27)" fg:x="182" fg:w="1"/><text x="14.8450%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5950%" y="501" width="0.0802%" height="15" fill="rgb(251,176,53)" fg:x="182" fg:w="1"/><text x="14.8450%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5950%" y="485" width="0.0802%" height="15" fill="rgb(211,85,7)" fg:x="182" fg:w="1"/><text x="14.8450%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5950%" y="469" width="0.0802%" height="15" fill="rgb(216,64,54)" fg:x="182" fg:w="1"/><text x="14.8450%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5950%" y="453" width="0.0802%" height="15" fill="rgb(217,54,24)" fg:x="182" fg:w="1"/><text x="14.8450%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.5950%" y="437" width="0.0802%" height="15" fill="rgb(208,206,53)" fg:x="182" fg:w="1"/><text x="14.8450%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5950%" y="421" width="0.0802%" height="15" fill="rgb(251,74,39)" fg:x="182" fg:w="1"/><text x="14.8450%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5950%" y="405" width="0.0802%" height="15" fill="rgb(226,47,5)" fg:x="182" fg:w="1"/><text x="14.8450%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5950%" y="389" width="0.0802%" height="15" fill="rgb(234,111,33)" fg:x="182" fg:w="1"/><text x="14.8450%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.6752%" y="597" width="0.0802%" height="15" fill="rgb(251,14,10)" fg:x="183" fg:w="1"/><text x="14.9252%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (13 samples, 1.04%)</title><rect x="13.7931%" y="645" width="1.0425%" height="15" fill="rgb(232,43,0)" fg:x="172" fg:w="13"/><text x="14.0431%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (12 samples, 0.96%)</title><rect x="13.8733%" y="629" width="0.9623%" height="15" fill="rgb(222,68,43)" fg:x="173" fg:w="12"/><text x="14.1233%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (12 samples, 0.96%)</title><rect x="13.8733%" y="613" width="0.9623%" height="15" fill="rgb(217,24,23)" fg:x="173" fg:w="12"/><text x="14.1233%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.7554%" y="597" width="0.0802%" height="15" fill="rgb(229,209,14)" fg:x="184" fg:w="1"/><text x="15.0054%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7554%" y="581" width="0.0802%" height="15" fill="rgb(250,149,48)" fg:x="184" fg:w="1"/><text x="15.0054%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.7554%" y="565" width="0.0802%" height="15" fill="rgb(210,120,37)" fg:x="184" fg:w="1"/><text x="15.0054%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7554%" y="549" width="0.0802%" height="15" fill="rgb(210,21,8)" fg:x="184" fg:w="1"/><text x="15.0054%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.7554%" y="533" width="0.0802%" height="15" fill="rgb(243,145,7)" fg:x="184" fg:w="1"/><text x="15.0054%" y="543.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (14 samples, 1.12%)</title><rect x="13.7931%" y="661" width="1.1227%" height="15" fill="rgb(238,178,32)" fg:x="172" fg:w="14"/><text x="14.0431%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="14.8356%" y="645" width="0.0802%" height="15" fill="rgb(222,4,10)" fg:x="185" fg:w="1"/><text x="15.0856%" y="655.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="14.8356%" y="629" width="0.0802%" height="15" fill="rgb(239,7,37)" fg:x="185" fg:w="1"/><text x="15.0856%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="14.8356%" y="613" width="0.0802%" height="15" fill="rgb(215,31,37)" fg:x="185" fg:w="1"/><text x="15.0856%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="14.8356%" y="597" width="0.0802%" height="15" fill="rgb(224,83,33)" fg:x="185" fg:w="1"/><text x="15.0856%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8356%" y="581" width="0.0802%" height="15" fill="rgb(239,55,3)" fg:x="185" fg:w="1"/><text x="15.0856%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8356%" y="565" width="0.0802%" height="15" fill="rgb(247,92,11)" fg:x="185" fg:w="1"/><text x="15.0856%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.8356%" y="549" width="0.0802%" height="15" fill="rgb(239,200,7)" fg:x="185" fg:w="1"/><text x="15.0856%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.8356%" y="533" width="0.0802%" height="15" fill="rgb(227,115,8)" fg:x="185" fg:w="1"/><text x="15.0856%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.8356%" y="517" width="0.0802%" height="15" fill="rgb(215,189,27)" fg:x="185" fg:w="1"/><text x="15.0856%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.8356%" y="501" width="0.0802%" height="15" fill="rgb(251,216,39)" fg:x="185" fg:w="1"/><text x="15.0856%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.8356%" y="485" width="0.0802%" height="15" fill="rgb(207,29,47)" fg:x="185" fg:w="1"/><text x="15.0856%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.8356%" y="469" width="0.0802%" height="15" fill="rgb(210,71,34)" fg:x="185" fg:w="1"/><text x="15.0856%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.8356%" y="453" width="0.0802%" height="15" fill="rgb(253,217,51)" fg:x="185" fg:w="1"/><text x="15.0856%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.8356%" y="437" width="0.0802%" height="15" fill="rgb(222,117,46)" fg:x="185" fg:w="1"/><text x="15.0856%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.8356%" y="421" width="0.0802%" height="15" fill="rgb(226,132,6)" fg:x="185" fg:w="1"/><text x="15.0856%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8356%" y="405" width="0.0802%" height="15" fill="rgb(254,145,51)" fg:x="185" fg:w="1"/><text x="15.0856%" y="415.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9158%" y="661" width="0.0802%" height="15" fill="rgb(231,199,27)" fg:x="186" fg:w="1"/><text x="15.1658%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9158%" y="645" width="0.0802%" height="15" fill="rgb(245,158,14)" fg:x="186" fg:w="1"/><text x="15.1658%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.9158%" y="629" width="0.0802%" height="15" fill="rgb(240,113,14)" fg:x="186" fg:w="1"/><text x="15.1658%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.9158%" y="613" width="0.0802%" height="15" fill="rgb(210,20,13)" fg:x="186" fg:w="1"/><text x="15.1658%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.9158%" y="597" width="0.0802%" height="15" fill="rgb(241,144,13)" fg:x="186" fg:w="1"/><text x="15.1658%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.9158%" y="581" width="0.0802%" height="15" fill="rgb(235,43,34)" fg:x="186" fg:w="1"/><text x="15.1658%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9158%" y="565" width="0.0802%" height="15" fill="rgb(208,36,20)" fg:x="186" fg:w="1"/><text x="15.1658%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.9158%" y="549" width="0.0802%" height="15" fill="rgb(239,204,10)" fg:x="186" fg:w="1"/><text x="15.1658%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.9158%" y="533" width="0.0802%" height="15" fill="rgb(217,84,43)" fg:x="186" fg:w="1"/><text x="15.1658%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.9158%" y="517" width="0.0802%" height="15" fill="rgb(241,170,50)" fg:x="186" fg:w="1"/><text x="15.1658%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.9158%" y="501" width="0.0802%" height="15" fill="rgb(226,205,29)" fg:x="186" fg:w="1"/><text x="15.1658%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.9158%" y="485" width="0.0802%" height="15" fill="rgb(233,113,1)" fg:x="186" fg:w="1"/><text x="15.1658%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.9158%" y="469" width="0.0802%" height="15" fill="rgb(253,98,13)" fg:x="186" fg:w="1"/><text x="15.1658%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.0762%" y="309" width="0.0802%" height="15" fill="rgb(211,115,12)" fg:x="188" fg:w="1"/><text x="15.3262%" y="319.50"></text></g><g><title>kernel::surround::Surroundings::unpack (3 samples, 0.24%)</title><rect x="14.9960%" y="517" width="0.2406%" height="15" fill="rgb(208,12,16)" fg:x="187" fg:w="3"/><text x="15.2460%" y="527.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="14.9960%" y="501" width="0.2406%" height="15" fill="rgb(237,193,54)" fg:x="187" fg:w="3"/><text x="15.2460%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.0762%" y="485" width="0.1604%" height="15" fill="rgb(243,22,42)" fg:x="188" fg:w="2"/><text x="15.3262%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.0762%" y="469" width="0.1604%" height="15" fill="rgb(233,151,36)" fg:x="188" fg:w="2"/><text x="15.3262%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="15.0762%" y="453" width="0.1604%" height="15" fill="rgb(237,57,45)" fg:x="188" fg:w="2"/><text x="15.3262%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="15.0762%" y="437" width="0.1604%" height="15" fill="rgb(221,88,17)" fg:x="188" fg:w="2"/><text x="15.3262%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="15.0762%" y="421" width="0.1604%" height="15" fill="rgb(230,79,15)" fg:x="188" fg:w="2"/><text x="15.3262%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="15.0762%" y="405" width="0.1604%" height="15" fill="rgb(213,57,13)" fg:x="188" fg:w="2"/><text x="15.3262%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="15.0762%" y="389" width="0.1604%" height="15" fill="rgb(222,116,39)" fg:x="188" fg:w="2"/><text x="15.3262%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="15.0762%" y="373" width="0.1604%" height="15" fill="rgb(245,107,2)" fg:x="188" fg:w="2"/><text x="15.3262%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="15.0762%" y="357" width="0.1604%" height="15" fill="rgb(238,1,10)" fg:x="188" fg:w="2"/><text x="15.3262%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="15.0762%" y="341" width="0.1604%" height="15" fill="rgb(249,4,48)" fg:x="188" fg:w="2"/><text x="15.3262%" y="351.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="15.0762%" y="325" width="0.1604%" height="15" fill="rgb(223,151,18)" fg:x="188" fg:w="2"/><text x="15.3262%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="15.1564%" y="309" width="0.0802%" height="15" fill="rgb(227,65,43)" fg:x="189" fg:w="1"/><text x="15.4064%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="15.1564%" y="293" width="0.0802%" height="15" fill="rgb(218,40,45)" fg:x="189" fg:w="1"/><text x="15.4064%" y="303.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="15.3168%" y="485" width="0.0802%" height="15" fill="rgb(252,121,31)" fg:x="191" fg:w="1"/><text x="15.5668%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.3168%" y="469" width="0.0802%" height="15" fill="rgb(219,158,43)" fg:x="191" fg:w="1"/><text x="15.5668%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.3168%" y="453" width="0.0802%" height="15" fill="rgb(231,162,42)" fg:x="191" fg:w="1"/><text x="15.5668%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.3168%" y="437" width="0.0802%" height="15" fill="rgb(217,179,25)" fg:x="191" fg:w="1"/><text x="15.5668%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="15.3168%" y="421" width="0.0802%" height="15" fill="rgb(206,212,31)" fg:x="191" fg:w="1"/><text x="15.5668%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="15.3970%" y="469" width="0.0802%" height="15" fill="rgb(235,144,12)" fg:x="192" fg:w="1"/><text x="15.6470%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.3970%" y="453" width="0.0802%" height="15" fill="rgb(213,51,10)" fg:x="192" fg:w="1"/><text x="15.6470%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.6375%" y="373" width="0.0802%" height="15" fill="rgb(231,145,14)" fg:x="195" fg:w="1"/><text x="15.8875%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.6375%" y="357" width="0.0802%" height="15" fill="rgb(235,15,28)" fg:x="195" fg:w="1"/><text x="15.8875%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.6375%" y="341" width="0.0802%" height="15" fill="rgb(237,206,10)" fg:x="195" fg:w="1"/><text x="15.8875%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.6375%" y="325" width="0.0802%" height="15" fill="rgb(236,227,27)" fg:x="195" fg:w="1"/><text x="15.8875%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.6375%" y="309" width="0.0802%" height="15" fill="rgb(246,83,35)" fg:x="195" fg:w="1"/><text x="15.8875%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.6375%" y="293" width="0.0802%" height="15" fill="rgb(220,136,24)" fg:x="195" fg:w="1"/><text x="15.8875%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.6375%" y="277" width="0.0802%" height="15" fill="rgb(217,3,25)" fg:x="195" fg:w="1"/><text x="15.8875%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.6375%" y="261" width="0.0802%" height="15" fill="rgb(239,24,14)" fg:x="195" fg:w="1"/><text x="15.8875%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.6375%" y="245" width="0.0802%" height="15" fill="rgb(244,16,53)" fg:x="195" fg:w="1"/><text x="15.8875%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.6375%" y="229" width="0.0802%" height="15" fill="rgb(208,175,44)" fg:x="195" fg:w="1"/><text x="15.8875%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.6375%" y="213" width="0.0802%" height="15" fill="rgb(252,18,48)" fg:x="195" fg:w="1"/><text x="15.8875%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.6375%" y="197" width="0.0802%" height="15" fill="rgb(234,199,32)" fg:x="195" fg:w="1"/><text x="15.8875%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.6375%" y="181" width="0.0802%" height="15" fill="rgb(225,77,54)" fg:x="195" fg:w="1"/><text x="15.8875%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="15.4771%" y="437" width="0.3208%" height="15" fill="rgb(225,42,25)" fg:x="193" fg:w="4"/><text x="15.7271%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="15.4771%" y="421" width="0.3208%" height="15" fill="rgb(242,227,46)" fg:x="193" fg:w="4"/><text x="15.7271%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="15.5573%" y="405" width="0.2406%" height="15" fill="rgb(246,197,35)" fg:x="194" fg:w="3"/><text x="15.8073%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.6375%" y="389" width="0.1604%" height="15" fill="rgb(215,159,26)" fg:x="195" fg:w="2"/><text x="15.8875%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7177%" y="373" width="0.0802%" height="15" fill="rgb(212,194,50)" fg:x="196" fg:w="1"/><text x="15.9677%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.7979%" y="437" width="0.0802%" height="15" fill="rgb(246,132,1)" fg:x="197" fg:w="1"/><text x="16.0479%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.7979%" y="421" width="0.0802%" height="15" fill="rgb(217,71,7)" fg:x="197" fg:w="1"/><text x="16.0479%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (8 samples, 0.64%)</title><rect x="15.3970%" y="485" width="0.6415%" height="15" fill="rgb(252,59,32)" fg:x="192" fg:w="8"/><text x="15.6470%" y="495.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.56%)</title><rect x="15.4771%" y="469" width="0.5613%" height="15" fill="rgb(253,204,25)" fg:x="193" fg:w="7"/><text x="15.7271%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="15.4771%" y="453" width="0.5613%" height="15" fill="rgb(232,21,16)" fg:x="193" fg:w="7"/><text x="15.7271%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.8781%" y="437" width="0.1604%" height="15" fill="rgb(248,90,29)" fg:x="198" fg:w="2"/><text x="16.1281%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.8781%" y="421" width="0.1604%" height="15" fill="rgb(249,223,7)" fg:x="198" fg:w="2"/><text x="16.1281%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.8781%" y="405" width="0.1604%" height="15" fill="rgb(231,119,42)" fg:x="198" fg:w="2"/><text x="16.1281%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.8781%" y="389" width="0.1604%" height="15" fill="rgb(215,41,35)" fg:x="198" fg:w="2"/><text x="16.1281%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="15.8781%" y="373" width="0.1604%" height="15" fill="rgb(220,44,45)" fg:x="198" fg:w="2"/><text x="16.1281%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.8781%" y="357" width="0.1604%" height="15" fill="rgb(253,197,36)" fg:x="198" fg:w="2"/><text x="16.1281%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.8781%" y="341" width="0.1604%" height="15" fill="rgb(245,225,54)" fg:x="198" fg:w="2"/><text x="16.1281%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.9583%" y="325" width="0.0802%" height="15" fill="rgb(239,94,37)" fg:x="199" fg:w="1"/><text x="16.2083%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="16.0385%" y="469" width="0.0802%" height="15" fill="rgb(242,217,10)" fg:x="200" fg:w="1"/><text x="16.2885%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.2791%" y="373" width="0.0802%" height="15" fill="rgb(250,193,7)" fg:x="203" fg:w="1"/><text x="16.5291%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.2791%" y="357" width="0.0802%" height="15" fill="rgb(230,104,19)" fg:x="203" fg:w="1"/><text x="16.5291%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.3593%" y="373" width="0.0802%" height="15" fill="rgb(230,181,4)" fg:x="204" fg:w="1"/><text x="16.6093%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.3593%" y="357" width="0.0802%" height="15" fill="rgb(216,219,49)" fg:x="204" fg:w="1"/><text x="16.6093%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.3593%" y="341" width="0.0802%" height="15" fill="rgb(254,144,0)" fg:x="204" fg:w="1"/><text x="16.6093%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.3593%" y="325" width="0.0802%" height="15" fill="rgb(205,209,38)" fg:x="204" fg:w="1"/><text x="16.6093%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.3593%" y="309" width="0.0802%" height="15" fill="rgb(240,21,42)" fg:x="204" fg:w="1"/><text x="16.6093%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.3593%" y="293" width="0.0802%" height="15" fill="rgb(241,132,3)" fg:x="204" fg:w="1"/><text x="16.6093%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.3593%" y="277" width="0.0802%" height="15" fill="rgb(225,14,2)" fg:x="204" fg:w="1"/><text x="16.6093%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.3593%" y="261" width="0.0802%" height="15" fill="rgb(210,141,35)" fg:x="204" fg:w="1"/><text x="16.6093%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.3593%" y="245" width="0.0802%" height="15" fill="rgb(251,14,44)" fg:x="204" fg:w="1"/><text x="16.6093%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.3593%" y="229" width="0.0802%" height="15" fill="rgb(247,48,18)" fg:x="204" fg:w="1"/><text x="16.6093%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.3593%" y="213" width="0.0802%" height="15" fill="rgb(225,0,40)" fg:x="204" fg:w="1"/><text x="16.6093%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3593%" y="197" width="0.0802%" height="15" fill="rgb(221,31,33)" fg:x="204" fg:w="1"/><text x="16.6093%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.2791%" y="405" width="0.2406%" height="15" fill="rgb(237,42,40)" fg:x="203" fg:w="3"/><text x="16.5291%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.2791%" y="389" width="0.2406%" height="15" fill="rgb(233,51,29)" fg:x="203" fg:w="3"/><text x="16.5291%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4395%" y="373" width="0.0802%" height="15" fill="rgb(226,58,20)" fg:x="205" fg:w="1"/><text x="16.6895%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="16.2791%" y="437" width="0.3208%" height="15" fill="rgb(208,98,7)" fg:x="203" fg:w="4"/><text x="16.5291%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="16.2791%" y="421" width="0.3208%" height="15" fill="rgb(228,143,44)" fg:x="203" fg:w="4"/><text x="16.5291%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5196%" y="405" width="0.0802%" height="15" fill="rgb(246,55,38)" fg:x="206" fg:w="1"/><text x="16.7696%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5196%" y="389" width="0.0802%" height="15" fill="rgb(247,87,16)" fg:x="206" fg:w="1"/><text x="16.7696%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.5196%" y="373" width="0.0802%" height="15" fill="rgb(234,129,42)" fg:x="206" fg:w="1"/><text x="16.7696%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.5196%" y="357" width="0.0802%" height="15" fill="rgb(220,82,16)" fg:x="206" fg:w="1"/><text x="16.7696%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.5196%" y="341" width="0.0802%" height="15" fill="rgb(211,88,4)" fg:x="206" fg:w="1"/><text x="16.7696%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="16.5196%" y="325" width="0.0802%" height="15" fill="rgb(248,151,21)" fg:x="206" fg:w="1"/><text x="16.7696%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.5196%" y="309" width="0.0802%" height="15" fill="rgb(238,163,6)" fg:x="206" fg:w="1"/><text x="16.7696%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5998%" y="341" width="0.0802%" height="15" fill="rgb(209,183,11)" fg:x="207" fg:w="1"/><text x="16.8498%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.5998%" y="325" width="0.0802%" height="15" fill="rgb(219,37,20)" fg:x="207" fg:w="1"/><text x="16.8498%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.5998%" y="309" width="0.0802%" height="15" fill="rgb(210,158,4)" fg:x="207" fg:w="1"/><text x="16.8498%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (9 samples, 0.72%)</title><rect x="16.0385%" y="485" width="0.7217%" height="15" fill="rgb(221,167,53)" fg:x="200" fg:w="9"/><text x="16.2885%" y="495.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.64%)</title><rect x="16.1187%" y="469" width="0.6415%" height="15" fill="rgb(237,151,45)" fg:x="201" fg:w="8"/><text x="16.3687%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.64%)</title><rect x="16.1187%" y="453" width="0.6415%" height="15" fill="rgb(231,39,3)" fg:x="201" fg:w="8"/><text x="16.3687%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.5998%" y="437" width="0.1604%" height="15" fill="rgb(212,167,28)" fg:x="207" fg:w="2"/><text x="16.8498%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.5998%" y="421" width="0.1604%" height="15" fill="rgb(232,178,8)" fg:x="207" fg:w="2"/><text x="16.8498%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="16.5998%" y="405" width="0.1604%" height="15" fill="rgb(225,151,20)" fg:x="207" fg:w="2"/><text x="16.8498%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.5998%" y="389" width="0.1604%" height="15" fill="rgb(238,3,37)" fg:x="207" fg:w="2"/><text x="16.8498%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="16.5998%" y="373" width="0.1604%" height="15" fill="rgb(251,147,42)" fg:x="207" fg:w="2"/><text x="16.8498%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="16.5998%" y="357" width="0.1604%" height="15" fill="rgb(208,173,10)" fg:x="207" fg:w="2"/><text x="16.8498%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.6800%" y="341" width="0.0802%" height="15" fill="rgb(246,225,4)" fg:x="208" fg:w="1"/><text x="16.9300%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.6800%" y="325" width="0.0802%" height="15" fill="rgb(248,102,6)" fg:x="208" fg:w="1"/><text x="16.9300%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="16.7602%" y="485" width="0.4010%" height="15" fill="rgb(232,6,21)" fg:x="209" fg:w="5"/><text x="17.0102%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="16.8404%" y="469" width="0.3208%" height="15" fill="rgb(221,179,22)" fg:x="210" fg:w="4"/><text x="17.0904%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (3 samples, 0.24%)</title><rect x="16.9206%" y="453" width="0.2406%" height="15" fill="rgb(252,50,20)" fg:x="211" fg:w="3"/><text x="17.1706%" y="463.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (3 samples, 0.24%)</title><rect x="16.9206%" y="437" width="0.2406%" height="15" fill="rgb(222,56,38)" fg:x="211" fg:w="3"/><text x="17.1706%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.0810%" y="421" width="0.0802%" height="15" fill="rgb(206,193,29)" fg:x="213" fg:w="1"/><text x="17.3310%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.0810%" y="405" width="0.0802%" height="15" fill="rgb(239,192,45)" fg:x="213" fg:w="1"/><text x="17.3310%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.0810%" y="389" width="0.0802%" height="15" fill="rgb(254,18,36)" fg:x="213" fg:w="1"/><text x="17.3310%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.0810%" y="373" width="0.0802%" height="15" fill="rgb(221,127,11)" fg:x="213" fg:w="1"/><text x="17.3310%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="17.0810%" y="357" width="0.0802%" height="15" fill="rgb(234,146,35)" fg:x="213" fg:w="1"/><text x="17.3310%" y="367.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="17.0810%" y="341" width="0.0802%" height="15" fill="rgb(254,201,37)" fg:x="213" fg:w="1"/><text x="17.3310%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.0810%" y="325" width="0.0802%" height="15" fill="rgb(211,202,23)" fg:x="213" fg:w="1"/><text x="17.3310%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="17.2414%" y="421" width="0.0802%" height="15" fill="rgb(237,91,2)" fg:x="215" fg:w="1"/><text x="17.4914%" y="431.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="17.2414%" y="405" width="0.0802%" height="15" fill="rgb(226,228,36)" fg:x="215" fg:w="1"/><text x="17.4914%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="17.2414%" y="389" width="0.0802%" height="15" fill="rgb(213,63,50)" fg:x="215" fg:w="1"/><text x="17.4914%" y="399.50"></text></g><g><title>core::ptr::write (1 samples, 0.08%)</title><rect x="17.2414%" y="373" width="0.0802%" height="15" fill="rgb(235,194,19)" fg:x="215" fg:w="1"/><text x="17.4914%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="17.3216%" y="341" width="0.0802%" height="15" fill="rgb(207,204,18)" fg:x="216" fg:w="1"/><text x="17.5716%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="17.3216%" y="325" width="0.0802%" height="15" fill="rgb(248,8,7)" fg:x="216" fg:w="1"/><text x="17.5716%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3216%" y="309" width="0.0802%" height="15" fill="rgb(223,145,47)" fg:x="216" fg:w="1"/><text x="17.5716%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3216%" y="293" width="0.0802%" height="15" fill="rgb(228,84,11)" fg:x="216" fg:w="1"/><text x="17.5716%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.3216%" y="277" width="0.0802%" height="15" fill="rgb(218,76,45)" fg:x="216" fg:w="1"/><text x="17.5716%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.3216%" y="261" width="0.0802%" height="15" fill="rgb(223,80,15)" fg:x="216" fg:w="1"/><text x="17.5716%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="17.3216%" y="405" width="0.1604%" height="15" fill="rgb(219,218,33)" fg:x="216" fg:w="2"/><text x="17.5716%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="17.3216%" y="389" width="0.1604%" height="15" fill="rgb(208,51,11)" fg:x="216" fg:w="2"/><text x="17.5716%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="17.3216%" y="373" width="0.1604%" height="15" fill="rgb(229,165,39)" fg:x="216" fg:w="2"/><text x="17.5716%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="17.3216%" y="357" width="0.1604%" height="15" fill="rgb(241,100,24)" fg:x="216" fg:w="2"/><text x="17.5716%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="17.4018%" y="341" width="0.0802%" height="15" fill="rgb(228,14,23)" fg:x="217" fg:w="1"/><text x="17.6518%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="17.4018%" y="325" width="0.0802%" height="15" fill="rgb(247,116,52)" fg:x="217" fg:w="1"/><text x="17.6518%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="17.4018%" y="309" width="0.0802%" height="15" fill="rgb(216,149,33)" fg:x="217" fg:w="1"/><text x="17.6518%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="17.4820%" y="357" width="0.1604%" height="15" fill="rgb(238,142,29)" fg:x="218" fg:w="2"/><text x="17.7320%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="17.4820%" y="341" width="0.1604%" height="15" fill="rgb(224,83,40)" fg:x="218" fg:w="2"/><text x="17.7320%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="17.4820%" y="325" width="0.1604%" height="15" fill="rgb(234,165,11)" fg:x="218" fg:w="2"/><text x="17.7320%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="17.4820%" y="309" width="0.1604%" height="15" fill="rgb(215,96,23)" fg:x="218" fg:w="2"/><text x="17.7320%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="17.4820%" y="293" width="0.1604%" height="15" fill="rgb(233,179,26)" fg:x="218" fg:w="2"/><text x="17.7320%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="17.4820%" y="277" width="0.1604%" height="15" fill="rgb(225,129,33)" fg:x="218" fg:w="2"/><text x="17.7320%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.7225%" y="325" width="0.0802%" height="15" fill="rgb(237,49,13)" fg:x="221" fg:w="1"/><text x="17.9725%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (30 samples, 2.41%)</title><rect x="17.6423%" y="341" width="2.4058%" height="15" fill="rgb(211,3,31)" fg:x="220" fg:w="30"/><text x="17.8923%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (28 samples, 2.25%)</title><rect x="17.8027%" y="325" width="2.2454%" height="15" fill="rgb(216,152,19)" fg:x="222" fg:w="28"/><text x="18.0527%" y="335.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="19.8877%" y="309" width="0.1604%" height="15" fill="rgb(251,121,35)" fg:x="248" fg:w="2"/><text x="20.1377%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="20.0481%" y="341" width="0.5613%" height="15" fill="rgb(210,217,47)" fg:x="250" fg:w="7"/><text x="20.2981%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="20.3689%" y="325" width="0.2406%" height="15" fill="rgb(244,116,22)" fg:x="254" fg:w="3"/><text x="20.6189%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.8500%" y="277" width="0.0802%" height="15" fill="rgb(228,17,21)" fg:x="260" fg:w="1"/><text x="21.1000%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="20.9302%" y="277" width="0.0802%" height="15" fill="rgb(240,149,34)" fg:x="261" fg:w="1"/><text x="21.1802%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.9302%" y="261" width="0.0802%" height="15" fill="rgb(208,125,47)" fg:x="261" fg:w="1"/><text x="21.1802%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.9302%" y="245" width="0.0802%" height="15" fill="rgb(249,186,39)" fg:x="261" fg:w="1"/><text x="21.1802%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.9302%" y="229" width="0.0802%" height="15" fill="rgb(240,220,33)" fg:x="261" fg:w="1"/><text x="21.1802%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.0104%" y="229" width="0.0802%" height="15" fill="rgb(243,110,23)" fg:x="262" fg:w="1"/><text x="21.2604%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="21.0104%" y="277" width="0.1604%" height="15" fill="rgb(219,163,46)" fg:x="262" fg:w="2"/><text x="21.2604%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="21.0104%" y="261" width="0.1604%" height="15" fill="rgb(216,126,30)" fg:x="262" fg:w="2"/><text x="21.2604%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="21.0104%" y="245" width="0.1604%" height="15" fill="rgb(208,139,11)" fg:x="262" fg:w="2"/><text x="21.2604%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.0906%" y="229" width="0.0802%" height="15" fill="rgb(213,118,36)" fg:x="263" fg:w="1"/><text x="21.3406%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="21.1708%" y="245" width="0.1604%" height="15" fill="rgb(226,43,17)" fg:x="264" fg:w="2"/><text x="21.4208%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="21.1708%" y="229" width="0.1604%" height="15" fill="rgb(254,217,4)" fg:x="264" fg:w="2"/><text x="21.4208%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="21.1708%" y="213" width="0.1604%" height="15" fill="rgb(210,134,47)" fg:x="264" fg:w="2"/><text x="21.4208%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="21.1708%" y="277" width="0.2406%" height="15" fill="rgb(237,24,49)" fg:x="264" fg:w="3"/><text x="21.4208%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="21.1708%" y="261" width="0.2406%" height="15" fill="rgb(251,39,46)" fg:x="264" fg:w="3"/><text x="21.4208%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="21.3312%" y="245" width="0.0802%" height="15" fill="rgb(251,220,3)" fg:x="266" fg:w="1"/><text x="21.5812%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="21.3312%" y="229" width="0.0802%" height="15" fill="rgb(228,105,12)" fg:x="266" fg:w="1"/><text x="21.5812%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.3312%" y="213" width="0.0802%" height="15" fill="rgb(215,196,1)" fg:x="266" fg:w="1"/><text x="21.5812%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="21.4114%" y="277" width="0.0802%" height="15" fill="rgb(214,33,39)" fg:x="267" fg:w="1"/><text x="21.6614%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="21.4114%" y="261" width="0.0802%" height="15" fill="rgb(220,19,52)" fg:x="267" fg:w="1"/><text x="21.6614%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="21.4114%" y="245" width="0.0802%" height="15" fill="rgb(221,78,38)" fg:x="267" fg:w="1"/><text x="21.6614%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="21.4114%" y="229" width="0.0802%" height="15" fill="rgb(253,30,16)" fg:x="267" fg:w="1"/><text x="21.6614%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="21.4916%" y="261" width="0.0802%" height="15" fill="rgb(242,65,0)" fg:x="268" fg:w="1"/><text x="21.7416%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.4916%" y="245" width="0.0802%" height="15" fill="rgb(235,201,12)" fg:x="268" fg:w="1"/><text x="21.7416%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.4916%" y="229" width="0.0802%" height="15" fill="rgb(233,161,9)" fg:x="268" fg:w="1"/><text x="21.7416%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.4916%" y="213" width="0.0802%" height="15" fill="rgb(241,207,41)" fg:x="268" fg:w="1"/><text x="21.7416%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (99 samples, 7.94%)</title><rect x="21.4916%" y="277" width="7.9391%" height="15" fill="rgb(212,69,46)" fg:x="268" fg:w="99"/><text x="21.7416%" y="287.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (98 samples, 7.86%)</title><rect x="21.5718%" y="261" width="7.8589%" height="15" fill="rgb(239,69,45)" fg:x="269" fg:w="98"/><text x="21.8218%" y="271.50">regex_autom..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (98 samples, 7.86%)</title><rect x="21.5718%" y="245" width="7.8589%" height="15" fill="rgb(242,117,48)" fg:x="269" fg:w="98"/><text x="21.8218%" y="255.50">alloc::vec:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="29.4306%" y="277" width="0.3208%" height="15" fill="rgb(228,41,36)" fg:x="367" fg:w="4"/><text x="29.6806%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 9.30%)</title><rect x="20.6897%" y="325" width="9.3023%" height="15" fill="rgb(212,3,32)" fg:x="258" fg:w="116"/><text x="20.9397%" y="335.50">&lt;core::iter::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (116 samples, 9.30%)</title><rect x="20.6897%" y="309" width="9.3023%" height="15" fill="rgb(233,41,49)" fg:x="258" fg:w="116"/><text x="20.9397%" y="319.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (116 samples, 9.30%)</title><rect x="20.6897%" y="293" width="9.3023%" height="15" fill="rgb(252,170,49)" fg:x="258" fg:w="116"/><text x="20.9397%" y="303.50">regex_automat..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="29.7514%" y="277" width="0.2406%" height="15" fill="rgb(229,53,26)" fg:x="371" fg:w="3"/><text x="30.0014%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.9118%" y="261" width="0.0802%" height="15" fill="rgb(217,157,12)" fg:x="373" fg:w="1"/><text x="30.1618%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.9118%" y="245" width="0.0802%" height="15" fill="rgb(227,17,9)" fg:x="373" fg:w="1"/><text x="30.1618%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9118%" y="229" width="0.0802%" height="15" fill="rgb(218,84,12)" fg:x="373" fg:w="1"/><text x="30.1618%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="30.1524%" y="309" width="0.4010%" height="15" fill="rgb(212,79,24)" fg:x="376" fg:w="5"/><text x="30.4024%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="30.3128%" y="293" width="0.2406%" height="15" fill="rgb(217,222,37)" fg:x="378" fg:w="3"/><text x="30.5628%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.3929%" y="277" width="0.1604%" height="15" fill="rgb(246,208,8)" fg:x="379" fg:w="2"/><text x="30.6429%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="30.3929%" y="261" width="0.1604%" height="15" fill="rgb(244,133,10)" fg:x="379" fg:w="2"/><text x="30.6429%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.64%)</title><rect x="30.5533%" y="309" width="0.6415%" height="15" fill="rgb(209,219,41)" fg:x="381" fg:w="8"/><text x="30.8033%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.1147%" y="293" width="0.0802%" height="15" fill="rgb(253,175,45)" fg:x="388" fg:w="1"/><text x="31.3647%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.1147%" y="277" width="0.0802%" height="15" fill="rgb(235,100,37)" fg:x="388" fg:w="1"/><text x="31.3647%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.1147%" y="261" width="0.0802%" height="15" fill="rgb(225,87,19)" fg:x="388" fg:w="1"/><text x="31.3647%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="31.1949%" y="309" width="0.1604%" height="15" fill="rgb(217,152,17)" fg:x="389" fg:w="2"/><text x="31.4449%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (135 samples, 10.83%)</title><rect x="20.6095%" y="341" width="10.8260%" height="15" fill="rgb(235,72,13)" fg:x="257" fg:w="135"/><text x="20.8595%" y="351.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (18 samples, 1.44%)</title><rect x="29.9920%" y="325" width="1.4435%" height="15" fill="rgb(233,140,18)" fg:x="374" fg:w="18"/><text x="30.2420%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="31.3553%" y="309" width="0.0802%" height="15" fill="rgb(207,212,28)" fg:x="391" fg:w="1"/><text x="31.6053%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="31.3553%" y="293" width="0.0802%" height="15" fill="rgb(220,130,25)" fg:x="391" fg:w="1"/><text x="31.6053%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.3553%" y="277" width="0.0802%" height="15" fill="rgb(205,55,34)" fg:x="391" fg:w="1"/><text x="31.6053%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (173 samples, 13.87%)</title><rect x="17.6423%" y="357" width="13.8733%" height="15" fill="rgb(237,54,35)" fg:x="220" fg:w="173"/><text x="17.8923%" y="367.50">regex_automata::meta:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="31.4354%" y="341" width="0.0802%" height="15" fill="rgb(208,67,23)" fg:x="392" fg:w="1"/><text x="31.6854%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="31.4354%" y="325" width="0.0802%" height="15" fill="rgb(206,207,50)" fg:x="392" fg:w="1"/><text x="31.6854%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="31.4354%" y="309" width="0.0802%" height="15" fill="rgb(213,211,42)" fg:x="392" fg:w="1"/><text x="31.6854%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.4354%" y="293" width="0.0802%" height="15" fill="rgb(252,197,50)" fg:x="392" fg:w="1"/><text x="31.6854%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.4354%" y="277" width="0.0802%" height="15" fill="rgb(251,211,41)" fg:x="392" fg:w="1"/><text x="31.6854%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.4354%" y="261" width="0.0802%" height="15" fill="rgb(229,211,5)" fg:x="392" fg:w="1"/><text x="31.6854%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="31.7562%" y="309" width="0.1604%" height="15" fill="rgb(239,36,31)" fg:x="396" fg:w="2"/><text x="32.0062%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.8364%" y="293" width="0.0802%" height="15" fill="rgb(248,67,31)" fg:x="397" fg:w="1"/><text x="32.0864%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.8364%" y="277" width="0.0802%" height="15" fill="rgb(249,55,44)" fg:x="397" fg:w="1"/><text x="32.0864%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8364%" y="261" width="0.0802%" height="15" fill="rgb(216,82,12)" fg:x="397" fg:w="1"/><text x="32.0864%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="31.9166%" y="309" width="0.0802%" height="15" fill="rgb(242,174,1)" fg:x="398" fg:w="1"/><text x="32.1666%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="31.9166%" y="293" width="0.0802%" height="15" fill="rgb(208,120,29)" fg:x="398" fg:w="1"/><text x="32.1666%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (10 samples, 0.80%)</title><rect x="31.5958%" y="325" width="0.8019%" height="15" fill="rgb(221,105,43)" fg:x="394" fg:w="10"/><text x="31.8458%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="31.9968%" y="309" width="0.4010%" height="15" fill="rgb(234,124,22)" fg:x="399" fg:w="5"/><text x="32.2468%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="31.9968%" y="293" width="0.4010%" height="15" fill="rgb(212,23,30)" fg:x="399" fg:w="5"/><text x="32.2468%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="31.9968%" y="277" width="0.4010%" height="15" fill="rgb(219,122,53)" fg:x="399" fg:w="5"/><text x="32.2468%" y="287.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="31.9968%" y="261" width="0.4010%" height="15" fill="rgb(248,84,24)" fg:x="399" fg:w="5"/><text x="32.2468%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.04%)</title><rect x="31.5156%" y="357" width="1.0425%" height="15" fill="rgb(245,115,18)" fg:x="393" fg:w="13"/><text x="31.7656%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.04%)</title><rect x="31.5156%" y="341" width="1.0425%" height="15" fill="rgb(227,176,51)" fg:x="393" fg:w="13"/><text x="31.7656%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="32.3978%" y="325" width="0.1604%" height="15" fill="rgb(229,63,42)" fg:x="404" fg:w="2"/><text x="32.6478%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (190 samples, 15.24%)</title><rect x="17.4820%" y="405" width="15.2366%" height="15" fill="rgb(247,202,24)" fg:x="218" fg:w="190"/><text x="17.7320%" y="415.50">&lt;regex::regex::string::..</text></g><g><title>regex::builders::Builder::build_one_string (190 samples, 15.24%)</title><rect x="17.4820%" y="389" width="15.2366%" height="15" fill="rgb(244,173,20)" fg:x="218" fg:w="190"/><text x="17.7320%" y="399.50">regex::builders::Builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (190 samples, 15.24%)</title><rect x="17.4820%" y="373" width="15.2366%" height="15" fill="rgb(242,81,47)" fg:x="218" fg:w="190"/><text x="17.7320%" y="383.50">regex_automata::meta::r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="32.5581%" y="357" width="0.1604%" height="15" fill="rgb(231,185,54)" fg:x="406" fg:w="2"/><text x="32.8081%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="32.5581%" y="341" width="0.1604%" height="15" fill="rgb(243,55,32)" fg:x="406" fg:w="2"/><text x="32.8081%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="32.5581%" y="325" width="0.1604%" height="15" fill="rgb(208,167,19)" fg:x="406" fg:w="2"/><text x="32.8081%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="32.5581%" y="309" width="0.1604%" height="15" fill="rgb(231,72,35)" fg:x="406" fg:w="2"/><text x="32.8081%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="32.7185%" y="373" width="0.1604%" height="15" fill="rgb(250,173,51)" fg:x="408" fg:w="2"/><text x="32.9685%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="32.7185%" y="357" width="0.1604%" height="15" fill="rgb(209,5,22)" fg:x="408" fg:w="2"/><text x="32.9685%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.7987%" y="341" width="0.0802%" height="15" fill="rgb(250,174,19)" fg:x="409" fg:w="1"/><text x="33.0487%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.7987%" y="325" width="0.0802%" height="15" fill="rgb(217,3,49)" fg:x="409" fg:w="1"/><text x="33.0487%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="32.7185%" y="405" width="0.4010%" height="15" fill="rgb(218,225,5)" fg:x="408" fg:w="5"/><text x="32.9685%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="32.7185%" y="389" width="0.4010%" height="15" fill="rgb(236,89,11)" fg:x="408" fg:w="5"/><text x="32.9685%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="32.8789%" y="373" width="0.2406%" height="15" fill="rgb(206,33,28)" fg:x="410" fg:w="3"/><text x="33.1289%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="32.9591%" y="357" width="0.1604%" height="15" fill="rgb(241,56,42)" fg:x="411" fg:w="2"/><text x="33.2091%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0393%" y="341" width="0.0802%" height="15" fill="rgb(222,44,11)" fg:x="412" fg:w="1"/><text x="33.2893%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="33.1997%" y="341" width="0.6415%" height="15" fill="rgb(234,111,20)" fg:x="414" fg:w="8"/><text x="33.4497%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="33.6808%" y="325" width="0.1604%" height="15" fill="rgb(237,77,6)" fg:x="420" fg:w="2"/><text x="33.9308%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.6808%" y="309" width="0.1604%" height="15" fill="rgb(235,111,23)" fg:x="420" fg:w="2"/><text x="33.9308%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.7610%" y="293" width="0.0802%" height="15" fill="rgb(251,135,29)" fg:x="421" fg:w="1"/><text x="34.0110%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (208 samples, 16.68%)</title><rect x="17.3216%" y="421" width="16.6800%" height="15" fill="rgb(217,57,1)" fg:x="216" fg:w="208"/><text x="17.5716%" y="431.50">indefinite::helper::Helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="33.1195%" y="405" width="0.8821%" height="15" fill="rgb(249,119,31)" fg:x="413" fg:w="11"/><text x="33.3695%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="33.1195%" y="389" width="0.8821%" height="15" fill="rgb(233,164,33)" fg:x="413" fg:w="11"/><text x="33.3695%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="33.1195%" y="373" width="0.8821%" height="15" fill="rgb(250,217,43)" fg:x="413" fg:w="11"/><text x="33.3695%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="33.1997%" y="357" width="0.8019%" height="15" fill="rgb(232,154,50)" fg:x="414" fg:w="10"/><text x="33.4497%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="33.8412%" y="341" width="0.1604%" height="15" fill="rgb(227,190,8)" fg:x="422" fg:w="2"/><text x="34.0912%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.9214%" y="325" width="0.0802%" height="15" fill="rgb(209,217,32)" fg:x="423" fg:w="1"/><text x="34.1714%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.9214%" y="309" width="0.0802%" height="15" fill="rgb(243,203,50)" fg:x="423" fg:w="1"/><text x="34.1714%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.9214%" y="293" width="0.0802%" height="15" fill="rgb(232,152,27)" fg:x="423" fg:w="1"/><text x="34.1714%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="34.0818%" y="357" width="0.1604%" height="15" fill="rgb(240,34,29)" fg:x="425" fg:w="2"/><text x="34.3318%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="34.0818%" y="341" width="0.1604%" height="15" fill="rgb(215,185,52)" fg:x="425" fg:w="2"/><text x="34.3318%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1620%" y="325" width="0.0802%" height="15" fill="rgb(240,89,49)" fg:x="426" fg:w="1"/><text x="34.4120%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.2422%" y="357" width="0.0802%" height="15" fill="rgb(225,12,52)" fg:x="427" fg:w="1"/><text x="34.4922%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="34.3224%" y="357" width="0.0802%" height="15" fill="rgb(239,128,45)" fg:x="428" fg:w="1"/><text x="34.5724%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.3224%" y="341" width="0.0802%" height="15" fill="rgb(211,78,47)" fg:x="428" fg:w="1"/><text x="34.5724%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="34.3224%" y="325" width="0.0802%" height="15" fill="rgb(232,31,21)" fg:x="428" fg:w="1"/><text x="34.5724%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.3224%" y="309" width="0.0802%" height="15" fill="rgb(222,168,14)" fg:x="428" fg:w="1"/><text x="34.5724%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="34.4026%" y="357" width="0.0802%" height="15" fill="rgb(209,128,24)" fg:x="429" fg:w="1"/><text x="34.6526%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.4026%" y="341" width="0.0802%" height="15" fill="rgb(249,35,13)" fg:x="429" fg:w="1"/><text x="34.6526%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.8035%" y="325" width="0.1604%" height="15" fill="rgb(218,7,2)" fg:x="434" fg:w="2"/><text x="35.0535%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (46 samples, 3.69%)</title><rect x="34.7233%" y="341" width="3.6889%" height="15" fill="rgb(238,107,27)" fg:x="433" fg:w="46"/><text x="34.9733%" y="351.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (43 samples, 3.45%)</title><rect x="34.9639%" y="325" width="3.4483%" height="15" fill="rgb(217,88,38)" fg:x="436" fg:w="43"/><text x="35.2139%" y="335.50">cor..</text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="38.4122%" y="325" width="0.1604%" height="15" fill="rgb(230,207,0)" fg:x="479" fg:w="2"/><text x="38.6622%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="38.4924%" y="309" width="0.0802%" height="15" fill="rgb(249,64,54)" fg:x="480" fg:w="1"/><text x="38.7424%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="38.4122%" y="341" width="0.3208%" height="15" fill="rgb(231,7,11)" fg:x="479" fg:w="4"/><text x="38.6622%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="38.5726%" y="325" width="0.1604%" height="15" fill="rgb(205,149,21)" fg:x="481" fg:w="2"/><text x="38.8226%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="38.6528%" y="309" width="0.0802%" height="15" fill="rgb(215,126,34)" fg:x="482" fg:w="1"/><text x="38.9028%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="38.6528%" y="293" width="0.0802%" height="15" fill="rgb(241,132,45)" fg:x="482" fg:w="1"/><text x="38.9028%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.6528%" y="277" width="0.0802%" height="15" fill="rgb(252,69,32)" fg:x="482" fg:w="1"/><text x="38.9028%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.6528%" y="261" width="0.0802%" height="15" fill="rgb(232,204,19)" fg:x="482" fg:w="1"/><text x="38.9028%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="38.6528%" y="245" width="0.0802%" height="15" fill="rgb(249,15,47)" fg:x="482" fg:w="1"/><text x="38.9028%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="38.6528%" y="229" width="0.0802%" height="15" fill="rgb(209,227,23)" fg:x="482" fg:w="1"/><text x="38.9028%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="39.2141%" y="309" width="0.1604%" height="15" fill="rgb(248,92,24)" fg:x="489" fg:w="2"/><text x="39.4641%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="39.2141%" y="293" width="0.1604%" height="15" fill="rgb(247,59,2)" fg:x="489" fg:w="2"/><text x="39.4641%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="39.2141%" y="277" width="0.1604%" height="15" fill="rgb(221,30,5)" fg:x="489" fg:w="2"/><text x="39.4641%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="39.3745%" y="309" width="0.0802%" height="15" fill="rgb(208,108,53)" fg:x="491" fg:w="1"/><text x="39.6245%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="39.8557%" y="277" width="0.3208%" height="15" fill="rgb(211,183,26)" fg:x="497" fg:w="4"/><text x="40.1057%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="39.8557%" y="261" width="0.3208%" height="15" fill="rgb(232,132,4)" fg:x="497" fg:w="4"/><text x="40.1057%" y="271.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="39.9358%" y="245" width="0.2406%" height="15" fill="rgb(253,128,37)" fg:x="498" fg:w="3"/><text x="40.1858%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.80%)</title><rect x="39.4547%" y="309" width="0.8019%" height="15" fill="rgb(221,58,24)" fg:x="492" fg:w="10"/><text x="39.7047%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="39.8557%" y="293" width="0.4010%" height="15" fill="rgb(230,54,45)" fg:x="497" fg:w="5"/><text x="40.1057%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.1764%" y="277" width="0.0802%" height="15" fill="rgb(254,21,18)" fg:x="501" fg:w="1"/><text x="40.4264%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.1764%" y="261" width="0.0802%" height="15" fill="rgb(221,108,0)" fg:x="501" fg:w="1"/><text x="40.4264%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (33 samples, 2.65%)</title><rect x="38.7330%" y="341" width="2.6464%" height="15" fill="rgb(206,95,1)" fg:x="483" fg:w="33"/><text x="38.9830%" y="351.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (32 samples, 2.57%)</title><rect x="38.8132%" y="325" width="2.5662%" height="15" fill="rgb(237,52,5)" fg:x="484" fg:w="32"/><text x="39.0632%" y="335.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (14 samples, 1.12%)</title><rect x="40.2566%" y="309" width="1.1227%" height="15" fill="rgb(218,150,34)" fg:x="502" fg:w="14"/><text x="40.5066%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (14 samples, 1.12%)</title><rect x="40.2566%" y="293" width="1.1227%" height="15" fill="rgb(235,194,28)" fg:x="502" fg:w="14"/><text x="40.5066%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (13 samples, 1.04%)</title><rect x="40.3368%" y="277" width="1.0425%" height="15" fill="rgb(245,92,18)" fg:x="503" fg:w="13"/><text x="40.5868%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="41.3793%" y="341" width="0.0802%" height="15" fill="rgb(253,203,53)" fg:x="516" fg:w="1"/><text x="41.6293%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="41.4595%" y="309" width="0.1604%" height="15" fill="rgb(249,185,47)" fg:x="517" fg:w="2"/><text x="41.7095%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="41.6199%" y="277" width="0.0802%" height="15" fill="rgb(252,194,52)" fg:x="519" fg:w="1"/><text x="41.8699%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="41.7001%" y="261" width="0.0802%" height="15" fill="rgb(210,53,36)" fg:x="520" fg:w="1"/><text x="41.9501%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="41.7803%" y="245" width="0.1604%" height="15" fill="rgb(237,37,25)" fg:x="521" fg:w="2"/><text x="42.0303%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="43.4643%" y="229" width="0.5613%" height="15" fill="rgb(242,116,27)" fg:x="542" fg:w="7"/><text x="43.7143%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="44.0257%" y="229" width="0.1604%" height="15" fill="rgb(213,185,26)" fg:x="549" fg:w="2"/><text x="44.2757%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (14 samples, 1.12%)</title><rect x="44.1860%" y="229" width="1.1227%" height="15" fill="rgb(225,204,8)" fg:x="551" fg:w="14"/><text x="44.4360%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="44.8276%" y="213" width="0.4812%" height="15" fill="rgb(254,111,37)" fg:x="559" fg:w="6"/><text x="45.0776%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="44.8276%" y="197" width="0.4812%" height="15" fill="rgb(242,35,9)" fg:x="559" fg:w="6"/><text x="45.0776%" y="207.50"></text></g><g><title>realloc (6 samples, 0.48%)</title><rect x="44.8276%" y="181" width="0.4812%" height="15" fill="rgb(232,138,49)" fg:x="559" fg:w="6"/><text x="45.0776%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (5 samples, 0.40%)</title><rect x="45.3087%" y="229" width="0.4010%" height="15" fill="rgb(247,56,4)" fg:x="565" fg:w="5"/><text x="45.5587%" y="239.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="46.2711%" y="165" width="0.2406%" height="15" fill="rgb(226,179,17)" fg:x="577" fg:w="3"/><text x="46.5211%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="46.1909%" y="197" width="0.4812%" height="15" fill="rgb(216,163,45)" fg:x="576" fg:w="6"/><text x="46.4409%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="46.1909%" y="181" width="0.4812%" height="15" fill="rgb(211,157,3)" fg:x="576" fg:w="6"/><text x="46.4409%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.5116%" y="165" width="0.1604%" height="15" fill="rgb(234,44,20)" fg:x="580" fg:w="2"/><text x="46.7616%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.3937%" y="181" width="0.0802%" height="15" fill="rgb(254,138,23)" fg:x="591" fg:w="1"/><text x="47.6437%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.4739%" y="181" width="0.1604%" height="15" fill="rgb(206,119,39)" fg:x="592" fg:w="2"/><text x="47.7239%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (26 samples, 2.09%)</title><rect x="45.7097%" y="229" width="2.0850%" height="15" fill="rgb(231,105,52)" fg:x="570" fg:w="26"/><text x="45.9597%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (24 samples, 1.92%)</title><rect x="45.8701%" y="213" width="1.9246%" height="15" fill="rgb(250,20,5)" fg:x="572" fg:w="24"/><text x="46.1201%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (14 samples, 1.12%)</title><rect x="46.6720%" y="197" width="1.1227%" height="15" fill="rgb(215,198,30)" fg:x="582" fg:w="14"/><text x="46.9220%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="47.6343%" y="181" width="0.1604%" height="15" fill="rgb(246,142,8)" fg:x="594" fg:w="2"/><text x="47.8843%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.7145%" y="165" width="0.0802%" height="15" fill="rgb(243,26,38)" fg:x="595" fg:w="1"/><text x="47.9645%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.7145%" y="149" width="0.0802%" height="15" fill="rgb(205,133,28)" fg:x="595" fg:w="1"/><text x="47.9645%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.7145%" y="133" width="0.0802%" height="15" fill="rgb(212,34,0)" fg:x="595" fg:w="1"/><text x="47.9645%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.7947%" y="197" width="0.0802%" height="15" fill="rgb(251,226,22)" fg:x="596" fg:w="1"/><text x="48.0447%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (87 samples, 6.98%)</title><rect x="47.7947%" y="229" width="6.9767%" height="15" fill="rgb(252,119,9)" fg:x="596" fg:w="87"/><text x="48.0447%" y="239.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (87 samples, 6.98%)</title><rect x="47.7947%" y="213" width="6.9767%" height="15" fill="rgb(213,150,50)" fg:x="596" fg:w="87"/><text x="48.0447%" y="223.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (86 samples, 6.90%)</title><rect x="47.8749%" y="197" width="6.8966%" height="15" fill="rgb(212,24,39)" fg:x="597" fg:w="86"/><text x="48.1249%" y="207.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="54.7715%" y="229" width="0.3208%" height="15" fill="rgb(213,46,39)" fg:x="683" fg:w="4"/><text x="55.0215%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.0120%" y="213" width="0.0802%" height="15" fill="rgb(239,106,12)" fg:x="686" fg:w="1"/><text x="55.2620%" y="223.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="55.0922%" y="229" width="0.0802%" height="15" fill="rgb(249,229,21)" fg:x="687" fg:w="1"/><text x="55.3422%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (180 samples, 14.43%)</title><rect x="41.4595%" y="325" width="14.4346%" height="15" fill="rgb(212,158,3)" fg:x="517" fg:w="180"/><text x="41.7095%" y="335.50">&lt;core::iter::adapters:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (178 samples, 14.27%)</title><rect x="41.6199%" y="309" width="14.2743%" height="15" fill="rgb(253,26,48)" fg:x="519" fg:w="178"/><text x="41.8699%" y="319.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (178 samples, 14.27%)</title><rect x="41.6199%" y="293" width="14.2743%" height="15" fill="rgb(238,178,20)" fg:x="519" fg:w="178"/><text x="41.8699%" y="303.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (177 samples, 14.19%)</title><rect x="41.7001%" y="277" width="14.1941%" height="15" fill="rgb(208,86,15)" fg:x="520" fg:w="177"/><text x="41.9501%" y="287.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (176 samples, 14.11%)</title><rect x="41.7803%" y="261" width="14.1139%" height="15" fill="rgb(239,42,53)" fg:x="521" fg:w="176"/><text x="42.0303%" y="271.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (174 samples, 13.95%)</title><rect x="41.9407%" y="245" width="13.9535%" height="15" fill="rgb(245,226,8)" fg:x="523" fg:w="174"/><text x="42.1907%" y="255.50">regex_automata::nfa::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (9 samples, 0.72%)</title><rect x="55.1724%" y="229" width="0.7217%" height="15" fill="rgb(216,176,32)" fg:x="688" fg:w="9"/><text x="55.4224%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.7338%" y="213" width="0.1604%" height="15" fill="rgb(231,186,21)" fg:x="695" fg:w="2"/><text x="55.9838%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.7338%" y="197" width="0.1604%" height="15" fill="rgb(205,95,49)" fg:x="695" fg:w="2"/><text x="55.9838%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.8140%" y="181" width="0.0802%" height="15" fill="rgb(217,145,8)" fg:x="696" fg:w="1"/><text x="56.0640%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="56.0545%" y="309" width="0.0802%" height="15" fill="rgb(239,144,48)" fg:x="699" fg:w="1"/><text x="56.3045%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.1347%" y="309" width="0.0802%" height="15" fill="rgb(214,189,23)" fg:x="700" fg:w="1"/><text x="56.3847%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.2149%" y="309" width="0.0802%" height="15" fill="rgb(229,157,17)" fg:x="701" fg:w="1"/><text x="56.4649%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.2149%" y="293" width="0.0802%" height="15" fill="rgb(230,5,48)" fg:x="701" fg:w="1"/><text x="56.4649%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (14 samples, 1.12%)</title><rect x="56.2951%" y="309" width="1.1227%" height="15" fill="rgb(224,156,48)" fg:x="702" fg:w="14"/><text x="56.5451%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="56.9366%" y="293" width="0.4812%" height="15" fill="rgb(223,14,29)" fg:x="710" fg:w="6"/><text x="57.1866%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="56.9366%" y="277" width="0.4812%" height="15" fill="rgb(229,96,36)" fg:x="710" fg:w="6"/><text x="57.1866%" y="287.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="57.0168%" y="261" width="0.4010%" height="15" fill="rgb(231,102,53)" fg:x="711" fg:w="5"/><text x="57.2668%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="57.4178%" y="309" width="0.3208%" height="15" fill="rgb(210,77,38)" fg:x="716" fg:w="4"/><text x="57.6678%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (291 samples, 23.34%)</title><rect x="34.4828%" y="357" width="23.3360%" height="15" fill="rgb(235,131,6)" fg:x="430" fg:w="291"/><text x="34.7328%" y="367.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (204 samples, 16.36%)</title><rect x="41.4595%" y="341" width="16.3593%" height="15" fill="rgb(252,55,38)" fg:x="517" fg:w="204"/><text x="41.7095%" y="351.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.92%)</title><rect x="55.8941%" y="325" width="1.9246%" height="15" fill="rgb(246,38,14)" fg:x="697" fg:w="24"/><text x="56.1441%" y="335.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="57.7386%" y="309" width="0.0802%" height="15" fill="rgb(242,27,5)" fg:x="720" fg:w="1"/><text x="57.9886%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="57.9791%" y="309" width="0.0802%" height="15" fill="rgb(228,65,35)" fg:x="723" fg:w="1"/><text x="58.2291%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="58.0593%" y="309" width="0.0802%" height="15" fill="rgb(245,93,11)" fg:x="724" fg:w="1"/><text x="58.3093%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="58.0593%" y="293" width="0.0802%" height="15" fill="rgb(213,1,31)" fg:x="724" fg:w="1"/><text x="58.3093%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="58.0593%" y="277" width="0.0802%" height="15" fill="rgb(237,205,14)" fg:x="724" fg:w="1"/><text x="58.3093%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="58.1395%" y="309" width="0.0802%" height="15" fill="rgb(232,118,45)" fg:x="725" fg:w="1"/><text x="58.3895%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="58.1395%" y="293" width="0.0802%" height="15" fill="rgb(218,5,6)" fg:x="725" fg:w="1"/><text x="58.3895%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="57.8990%" y="325" width="0.5613%" height="15" fill="rgb(251,87,51)" fg:x="722" fg:w="7"/><text x="58.1490%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="58.2197%" y="309" width="0.2406%" height="15" fill="rgb(207,225,20)" fg:x="726" fg:w="3"/><text x="58.4697%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="58.2999%" y="293" width="0.1604%" height="15" fill="rgb(222,78,54)" fg:x="727" fg:w="2"/><text x="58.5499%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="58.2999%" y="277" width="0.1604%" height="15" fill="rgb(232,85,16)" fg:x="727" fg:w="2"/><text x="58.5499%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.2999%" y="261" width="0.1604%" height="15" fill="rgb(244,25,33)" fg:x="727" fg:w="2"/><text x="58.5499%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="58.4603%" y="325" width="0.0802%" height="15" fill="rgb(233,24,36)" fg:x="729" fg:w="1"/><text x="58.7103%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="58.5405%" y="325" width="0.0802%" height="15" fill="rgb(253,49,54)" fg:x="730" fg:w="1"/><text x="58.7905%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.88%)</title><rect x="57.8188%" y="357" width="0.8821%" height="15" fill="rgb(245,12,22)" fg:x="721" fg:w="11"/><text x="58.0688%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.88%)</title><rect x="57.8188%" y="341" width="0.8821%" height="15" fill="rgb(253,141,28)" fg:x="721" fg:w="11"/><text x="58.0688%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="58.6207%" y="325" width="0.0802%" height="15" fill="rgb(225,207,27)" fg:x="731" fg:w="1"/><text x="58.8707%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.6207%" y="309" width="0.0802%" height="15" fill="rgb(220,84,2)" fg:x="731" fg:w="1"/><text x="58.8707%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="58.7009%" y="325" width="0.4812%" height="15" fill="rgb(224,37,37)" fg:x="732" fg:w="6"/><text x="58.9509%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="58.7811%" y="309" width="0.4010%" height="15" fill="rgb(220,143,18)" fg:x="733" fg:w="5"/><text x="59.0311%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.1018%" y="293" width="0.0802%" height="15" fill="rgb(210,88,33)" fg:x="737" fg:w="1"/><text x="59.3518%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.1018%" y="277" width="0.0802%" height="15" fill="rgb(219,87,51)" fg:x="737" fg:w="1"/><text x="59.3518%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.1018%" y="261" width="0.0802%" height="15" fill="rgb(211,7,35)" fg:x="737" fg:w="1"/><text x="59.3518%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="59.1820%" y="325" width="0.1604%" height="15" fill="rgb(232,77,2)" fg:x="738" fg:w="2"/><text x="59.4320%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.2622%" y="309" width="0.0802%" height="15" fill="rgb(249,94,25)" fg:x="739" fg:w="1"/><text x="59.5122%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.2622%" y="293" width="0.0802%" height="15" fill="rgb(215,112,2)" fg:x="739" fg:w="1"/><text x="59.5122%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2622%" y="277" width="0.0802%" height="15" fill="rgb(226,115,48)" fg:x="739" fg:w="1"/><text x="59.5122%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="59.3424%" y="325" width="0.0802%" height="15" fill="rgb(249,196,10)" fg:x="740" fg:w="1"/><text x="59.5924%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (318 samples, 25.50%)</title><rect x="34.0016%" y="405" width="25.5012%" height="15" fill="rgb(237,109,14)" fg:x="424" fg:w="318"/><text x="34.2516%" y="415.50">&lt;regex::regex::string::Regex as core::str..</text></g><g><title>regex::builders::Builder::build_one_string (318 samples, 25.50%)</title><rect x="34.0016%" y="389" width="25.5012%" height="15" fill="rgb(217,103,53)" fg:x="424" fg:w="318"/><text x="34.2516%" y="399.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::build (318 samples, 25.50%)</title><rect x="34.0016%" y="373" width="25.5012%" height="15" fill="rgb(244,137,9)" fg:x="424" fg:w="318"/><text x="34.2516%" y="383.50">regex_automata::meta::regex::Builder::bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.80%)</title><rect x="58.7009%" y="357" width="0.8019%" height="15" fill="rgb(227,201,3)" fg:x="732" fg:w="10"/><text x="58.9509%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.80%)</title><rect x="58.7009%" y="341" width="0.8019%" height="15" fill="rgb(243,94,6)" fg:x="732" fg:w="10"/><text x="58.9509%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.4226%" y="325" width="0.0802%" height="15" fill="rgb(235,118,5)" fg:x="741" fg:w="1"/><text x="59.6726%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.5028%" y="389" width="0.0802%" height="15" fill="rgb(247,10,30)" fg:x="742" fg:w="1"/><text x="59.7528%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="59.5830%" y="357" width="0.0802%" height="15" fill="rgb(205,26,28)" fg:x="743" fg:w="1"/><text x="59.8330%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.5830%" y="341" width="0.0802%" height="15" fill="rgb(206,99,35)" fg:x="743" fg:w="1"/><text x="59.8330%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="59.5830%" y="373" width="0.1604%" height="15" fill="rgb(238,130,40)" fg:x="743" fg:w="2"/><text x="59.8330%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="59.6632%" y="357" width="0.0802%" height="15" fill="rgb(224,126,31)" fg:x="744" fg:w="1"/><text x="59.9132%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.6632%" y="341" width="0.0802%" height="15" fill="rgb(254,105,17)" fg:x="744" fg:w="1"/><text x="59.9132%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.6632%" y="325" width="0.0802%" height="15" fill="rgb(216,87,36)" fg:x="744" fg:w="1"/><text x="59.9132%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="59.7434%" y="357" width="0.0802%" height="15" fill="rgb(240,21,12)" fg:x="745" fg:w="1"/><text x="59.9934%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.7434%" y="341" width="0.0802%" height="15" fill="rgb(245,192,34)" fg:x="745" fg:w="1"/><text x="59.9934%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="59.5028%" y="405" width="0.4010%" height="15" fill="rgb(226,100,49)" fg:x="742" fg:w="5"/><text x="59.7528%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="59.5830%" y="389" width="0.3208%" height="15" fill="rgb(245,188,27)" fg:x="743" fg:w="4"/><text x="59.8330%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="59.7434%" y="373" width="0.1604%" height="15" fill="rgb(212,170,8)" fg:x="745" fg:w="2"/><text x="59.9934%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="59.8236%" y="357" width="0.0802%" height="15" fill="rgb(217,113,29)" fg:x="746" fg:w="1"/><text x="60.0736%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.8236%" y="341" width="0.0802%" height="15" fill="rgb(237,30,3)" fg:x="746" fg:w="1"/><text x="60.0736%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="59.9038%" y="357" width="0.0802%" height="15" fill="rgb(227,19,28)" fg:x="747" fg:w="1"/><text x="60.1538%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="59.9038%" y="341" width="0.0802%" height="15" fill="rgb(239,172,45)" fg:x="747" fg:w="1"/><text x="60.1538%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.9840%" y="341" width="0.0802%" height="15" fill="rgb(254,55,39)" fg:x="748" fg:w="1"/><text x="60.2340%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="59.9038%" y="389" width="0.2406%" height="15" fill="rgb(249,208,12)" fg:x="747" fg:w="3"/><text x="60.1538%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="59.9038%" y="373" width="0.2406%" height="15" fill="rgb(240,52,13)" fg:x="747" fg:w="3"/><text x="60.1538%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="59.9840%" y="357" width="0.1604%" height="15" fill="rgb(252,149,13)" fg:x="748" fg:w="2"/><text x="60.2340%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="60.0642%" y="341" width="0.0802%" height="15" fill="rgb(232,81,48)" fg:x="749" fg:w="1"/><text x="60.3142%" y="351.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::props_union (1 samples, 0.08%)</title><rect x="60.1443%" y="389" width="0.0802%" height="15" fill="rgb(222,144,2)" fg:x="750" fg:w="1"/><text x="60.3943%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="60.6255%" y="309" width="0.2406%" height="15" fill="rgb(216,81,32)" fg:x="756" fg:w="3"/><text x="60.8755%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.7057%" y="293" width="0.1604%" height="15" fill="rgb(244,78,51)" fg:x="757" fg:w="2"/><text x="60.9557%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.7057%" y="277" width="0.1604%" height="15" fill="rgb(217,66,21)" fg:x="757" fg:w="2"/><text x="60.9557%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="60.8661%" y="309" width="0.1604%" height="15" fill="rgb(247,101,42)" fg:x="759" fg:w="2"/><text x="61.1161%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.9463%" y="293" width="0.0802%" height="15" fill="rgb(227,81,39)" fg:x="760" fg:w="1"/><text x="61.1963%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="60.9463%" y="277" width="0.0802%" height="15" fill="rgb(220,223,44)" fg:x="760" fg:w="1"/><text x="61.1963%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="61.0265%" y="309" width="0.2406%" height="15" fill="rgb(205,218,2)" fg:x="761" fg:w="3"/><text x="61.2765%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.12%)</title><rect x="60.2245%" y="325" width="1.1227%" height="15" fill="rgb(212,207,28)" fg:x="751" fg:w="14"/><text x="60.4745%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="61.2670%" y="309" width="0.0802%" height="15" fill="rgb(224,12,41)" fg:x="764" fg:w="1"/><text x="61.5170%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="61.2670%" y="293" width="0.0802%" height="15" fill="rgb(216,118,12)" fg:x="764" fg:w="1"/><text x="61.5170%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (343 samples, 27.51%)</title><rect x="34.0016%" y="421" width="27.5060%" height="15" fill="rgb(252,97,46)" fg:x="424" fg:w="343"/><text x="34.2516%" y="431.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (20 samples, 1.60%)</title><rect x="59.9038%" y="405" width="1.6038%" height="15" fill="rgb(244,206,19)" fg:x="747" fg:w="20"/><text x="60.1538%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.28%)</title><rect x="60.2245%" y="389" width="1.2831%" height="15" fill="rgb(231,84,31)" fg:x="751" fg:w="16"/><text x="60.4745%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.28%)</title><rect x="60.2245%" y="373" width="1.2831%" height="15" fill="rgb(244,133,0)" fg:x="751" fg:w="16"/><text x="60.4745%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.28%)</title><rect x="60.2245%" y="357" width="1.2831%" height="15" fill="rgb(223,15,50)" fg:x="751" fg:w="16"/><text x="60.4745%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.28%)</title><rect x="60.2245%" y="341" width="1.2831%" height="15" fill="rgb(250,118,49)" fg:x="751" fg:w="16"/><text x="60.4745%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="61.3472%" y="325" width="0.1604%" height="15" fill="rgb(248,25,38)" fg:x="765" fg:w="2"/><text x="61.5972%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.4274%" y="309" width="0.0802%" height="15" fill="rgb(215,70,14)" fg:x="766" fg:w="1"/><text x="61.6774%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.4274%" y="293" width="0.0802%" height="15" fill="rgb(215,28,15)" fg:x="766" fg:w="1"/><text x="61.6774%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.4274%" y="277" width="0.0802%" height="15" fill="rgb(243,6,28)" fg:x="766" fg:w="1"/><text x="61.6774%" y="287.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="61.5076%" y="405" width="0.0802%" height="15" fill="rgb(222,130,1)" fg:x="767" fg:w="1"/><text x="61.7576%" y="415.50"></text></g><g><title>alloc::string::String::from_utf8_unchecked (1 samples, 0.08%)</title><rect x="61.5076%" y="389" width="0.0802%" height="15" fill="rgb(236,166,44)" fg:x="767" fg:w="1"/><text x="61.7576%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.6680%" y="309" width="0.0802%" height="15" fill="rgb(221,108,14)" fg:x="769" fg:w="1"/><text x="61.9180%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.6680%" y="293" width="0.0802%" height="15" fill="rgb(252,3,45)" fg:x="769" fg:w="1"/><text x="61.9180%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.6680%" y="277" width="0.0802%" height="15" fill="rgb(237,68,30)" fg:x="769" fg:w="1"/><text x="61.9180%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.6680%" y="261" width="0.0802%" height="15" fill="rgb(211,79,22)" fg:x="769" fg:w="1"/><text x="61.9180%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.6680%" y="341" width="0.1604%" height="15" fill="rgb(252,185,21)" fg:x="769" fg:w="2"/><text x="61.9180%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="61.6680%" y="325" width="0.1604%" height="15" fill="rgb(225,189,26)" fg:x="769" fg:w="2"/><text x="61.9180%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7482%" y="309" width="0.0802%" height="15" fill="rgb(241,30,40)" fg:x="770" fg:w="1"/><text x="61.9982%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8284%" y="341" width="0.0802%" height="15" fill="rgb(235,215,44)" fg:x="771" fg:w="1"/><text x="62.0784%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.0690%" y="277" width="0.0802%" height="15" fill="rgb(205,8,29)" fg:x="774" fg:w="1"/><text x="62.3190%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.0690%" y="261" width="0.0802%" height="15" fill="rgb(241,137,42)" fg:x="774" fg:w="1"/><text x="62.3190%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="61.9086%" y="341" width="0.3208%" height="15" fill="rgb(237,155,2)" fg:x="772" fg:w="4"/><text x="62.1586%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="61.9086%" y="325" width="0.3208%" height="15" fill="rgb(245,29,42)" fg:x="772" fg:w="4"/><text x="62.1586%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="61.9888%" y="309" width="0.2406%" height="15" fill="rgb(234,101,35)" fg:x="773" fg:w="3"/><text x="62.2388%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.9888%" y="293" width="0.2406%" height="15" fill="rgb(228,64,37)" fg:x="773" fg:w="3"/><text x="62.2388%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="62.1492%" y="277" width="0.0802%" height="15" fill="rgb(217,214,36)" fg:x="775" fg:w="1"/><text x="62.3992%" y="287.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="62.2294%" y="341" width="0.0802%" height="15" fill="rgb(243,70,3)" fg:x="776" fg:w="1"/><text x="62.4794%" y="351.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="62.2294%" y="325" width="0.0802%" height="15" fill="rgb(253,158,52)" fg:x="776" fg:w="1"/><text x="62.4794%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.5501%" y="325" width="0.1604%" height="15" fill="rgb(234,111,54)" fg:x="780" fg:w="2"/><text x="62.8001%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="62.9511%" y="309" width="0.0802%" height="15" fill="rgb(217,70,32)" fg:x="785" fg:w="1"/><text x="63.2011%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="62.9511%" y="293" width="0.0802%" height="15" fill="rgb(234,18,33)" fg:x="785" fg:w="1"/><text x="63.2011%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="63.0313%" y="309" width="0.3208%" height="15" fill="rgb(234,12,49)" fg:x="786" fg:w="4"/><text x="63.2813%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="63.2719%" y="293" width="0.0802%" height="15" fill="rgb(236,10,21)" fg:x="789" fg:w="1"/><text x="63.5219%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2719%" y="277" width="0.0802%" height="15" fill="rgb(248,182,45)" fg:x="789" fg:w="1"/><text x="63.5219%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.72%)</title><rect x="62.7105%" y="325" width="0.7217%" height="15" fill="rgb(217,95,36)" fg:x="782" fg:w="9"/><text x="62.9605%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="63.3520%" y="309" width="0.0802%" height="15" fill="rgb(212,110,31)" fg:x="790" fg:w="1"/><text x="63.6020%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="63.3520%" y="293" width="0.0802%" height="15" fill="rgb(206,32,53)" fg:x="790" fg:w="1"/><text x="63.6020%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="63.4322%" y="277" width="0.0802%" height="15" fill="rgb(246,141,37)" fg:x="791" fg:w="1"/><text x="63.6822%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="63.5926%" y="245" width="0.0802%" height="15" fill="rgb(219,16,7)" fg:x="793" fg:w="1"/><text x="63.8426%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="63.4322%" y="309" width="0.3208%" height="15" fill="rgb(230,205,45)" fg:x="791" fg:w="4"/><text x="63.6822%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="63.4322%" y="293" width="0.3208%" height="15" fill="rgb(231,43,49)" fg:x="791" fg:w="4"/><text x="63.6822%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="63.5124%" y="277" width="0.2406%" height="15" fill="rgb(212,106,34)" fg:x="792" fg:w="3"/><text x="63.7624%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="63.5124%" y="261" width="0.2406%" height="15" fill="rgb(206,83,17)" fg:x="792" fg:w="3"/><text x="63.7624%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.6728%" y="245" width="0.0802%" height="15" fill="rgb(244,154,49)" fg:x="794" fg:w="1"/><text x="63.9228%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.6728%" y="229" width="0.0802%" height="15" fill="rgb(244,149,49)" fg:x="794" fg:w="1"/><text x="63.9228%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7530%" y="293" width="0.0802%" height="15" fill="rgb(227,134,18)" fg:x="795" fg:w="1"/><text x="64.0030%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="63.8332%" y="293" width="0.1604%" height="15" fill="rgb(237,116,36)" fg:x="796" fg:w="2"/><text x="64.0832%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.8332%" y="277" width="0.1604%" height="15" fill="rgb(205,129,40)" fg:x="796" fg:w="2"/><text x="64.0832%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9134%" y="261" width="0.0802%" height="15" fill="rgb(236,178,4)" fg:x="797" fg:w="1"/><text x="64.1634%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="63.9936%" y="293" width="0.1604%" height="15" fill="rgb(251,76,53)" fg:x="798" fg:w="2"/><text x="64.2436%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="63.9936%" y="277" width="0.1604%" height="15" fill="rgb(242,92,40)" fg:x="798" fg:w="2"/><text x="64.2436%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.9936%" y="261" width="0.1604%" height="15" fill="rgb(209,45,30)" fg:x="798" fg:w="2"/><text x="64.2436%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="63.9936%" y="245" width="0.1604%" height="15" fill="rgb(218,157,36)" fg:x="798" fg:w="2"/><text x="64.2436%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (29 samples, 2.33%)</title><rect x="62.3095%" y="341" width="2.3256%" height="15" fill="rgb(222,186,16)" fg:x="777" fg:w="29"/><text x="62.5595%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 1.20%)</title><rect x="63.4322%" y="325" width="1.2029%" height="15" fill="rgb(254,72,35)" fg:x="791" fg:w="15"/><text x="63.6822%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="63.7530%" y="309" width="0.8821%" height="15" fill="rgb(224,25,35)" fg:x="795" fg:w="11"/><text x="64.0030%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="64.1540%" y="293" width="0.4812%" height="15" fill="rgb(206,135,52)" fg:x="800" fg:w="6"/><text x="64.4040%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.5549%" y="277" width="0.0802%" height="15" fill="rgb(229,174,47)" fg:x="805" fg:w="1"/><text x="64.8049%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.8757%" y="293" width="0.0802%" height="15" fill="rgb(242,184,21)" fg:x="809" fg:w="1"/><text x="65.1257%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="64.9559%" y="293" width="0.0802%" height="15" fill="rgb(213,22,45)" fg:x="810" fg:w="1"/><text x="65.2059%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="64.9559%" y="277" width="0.0802%" height="15" fill="rgb(237,81,54)" fg:x="810" fg:w="1"/><text x="65.2059%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="64.9559%" y="261" width="0.0802%" height="15" fill="rgb(248,177,18)" fg:x="810" fg:w="1"/><text x="65.2059%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="65.0361%" y="277" width="0.3208%" height="15" fill="rgb(254,31,16)" fg:x="811" fg:w="4"/><text x="65.2861%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="65.0361%" y="261" width="0.3208%" height="15" fill="rgb(235,20,31)" fg:x="811" fg:w="4"/><text x="65.2861%" y="271.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="65.0361%" y="245" width="0.3208%" height="15" fill="rgb(240,56,43)" fg:x="811" fg:w="4"/><text x="65.2861%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.72%)</title><rect x="64.7153%" y="309" width="0.7217%" height="15" fill="rgb(237,197,51)" fg:x="807" fg:w="9"/><text x="64.9653%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="65.0361%" y="293" width="0.4010%" height="15" fill="rgb(241,162,44)" fg:x="811" fg:w="5"/><text x="65.2861%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.3569%" y="277" width="0.0802%" height="15" fill="rgb(224,23,20)" fg:x="815" fg:w="1"/><text x="65.6069%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="65.4370%" y="309" width="0.0802%" height="15" fill="rgb(250,109,34)" fg:x="816" fg:w="1"/><text x="65.6870%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.4370%" y="293" width="0.0802%" height="15" fill="rgb(214,175,50)" fg:x="816" fg:w="1"/><text x="65.6870%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.96%)</title><rect x="64.6351%" y="341" width="0.9623%" height="15" fill="rgb(213,182,5)" fg:x="806" fg:w="12"/><text x="64.8851%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.96%)</title><rect x="64.6351%" y="325" width="0.9623%" height="15" fill="rgb(209,199,19)" fg:x="806" fg:w="12"/><text x="64.8851%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.5172%" y="309" width="0.0802%" height="15" fill="rgb(236,224,42)" fg:x="817" fg:w="1"/><text x="65.7672%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="65.6776%" y="309" width="0.1604%" height="15" fill="rgb(246,226,29)" fg:x="819" fg:w="2"/><text x="65.9276%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="65.6776%" y="293" width="0.1604%" height="15" fill="rgb(227,223,11)" fg:x="819" fg:w="2"/><text x="65.9276%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="65.7578%" y="277" width="0.0802%" height="15" fill="rgb(219,7,51)" fg:x="820" fg:w="1"/><text x="66.0078%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (56 samples, 4.49%)</title><rect x="61.5878%" y="389" width="4.4908%" height="15" fill="rgb(245,167,10)" fg:x="768" fg:w="56"/><text x="61.8378%" y="399.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (56 samples, 4.49%)</title><rect x="61.5878%" y="373" width="4.4908%" height="15" fill="rgb(237,224,16)" fg:x="768" fg:w="56"/><text x="61.8378%" y="383.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (55 samples, 4.41%)</title><rect x="61.6680%" y="357" width="4.4106%" height="15" fill="rgb(226,132,13)" fg:x="769" fg:w="55"/><text x="61.9180%" y="367.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="65.5974%" y="341" width="0.4812%" height="15" fill="rgb(214,140,3)" fg:x="818" fg:w="6"/><text x="65.8474%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="65.5974%" y="325" width="0.4812%" height="15" fill="rgb(221,177,4)" fg:x="818" fg:w="6"/><text x="65.8474%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="65.8380%" y="309" width="0.2406%" height="15" fill="rgb(238,139,3)" fg:x="821" fg:w="3"/><text x="66.0880%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="65.9984%" y="293" width="0.0802%" height="15" fill="rgb(216,17,39)" fg:x="823" fg:w="1"/><text x="66.2484%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="66.0786%" y="357" width="0.0802%" height="15" fill="rgb(238,120,9)" fg:x="824" fg:w="1"/><text x="66.3286%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="66.0786%" y="341" width="0.0802%" height="15" fill="rgb(244,92,53)" fg:x="824" fg:w="1"/><text x="66.3286%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="66.0786%" y="325" width="0.0802%" height="15" fill="rgb(224,148,33)" fg:x="824" fg:w="1"/><text x="66.3286%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="66.0786%" y="389" width="0.1604%" height="15" fill="rgb(243,6,36)" fg:x="824" fg:w="2"/><text x="66.3286%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="66.0786%" y="373" width="0.1604%" height="15" fill="rgb(230,102,11)" fg:x="824" fg:w="2"/><text x="66.3286%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="66.1588%" y="357" width="0.0802%" height="15" fill="rgb(234,148,36)" fg:x="825" fg:w="1"/><text x="66.4088%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2390%" y="373" width="0.0802%" height="15" fill="rgb(251,153,25)" fg:x="826" fg:w="1"/><text x="66.4890%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="66.2390%" y="389" width="0.1604%" height="15" fill="rgb(215,129,8)" fg:x="826" fg:w="2"/><text x="66.4890%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="66.3192%" y="373" width="0.0802%" height="15" fill="rgb(224,128,35)" fg:x="827" fg:w="1"/><text x="66.5692%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="66.3192%" y="357" width="0.0802%" height="15" fill="rgb(237,56,52)" fg:x="827" fg:w="1"/><text x="66.5692%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="66.3192%" y="341" width="0.0802%" height="15" fill="rgb(234,213,19)" fg:x="827" fg:w="1"/><text x="66.5692%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3192%" y="325" width="0.0802%" height="15" fill="rgb(252,82,23)" fg:x="827" fg:w="1"/><text x="66.5692%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.6399%" y="309" width="0.0802%" height="15" fill="rgb(254,201,21)" fg:x="831" fg:w="1"/><text x="66.8899%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.6399%" y="293" width="0.0802%" height="15" fill="rgb(250,186,11)" fg:x="831" fg:w="1"/><text x="66.8899%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.8805%" y="293" width="0.0802%" height="15" fill="rgb(211,174,5)" fg:x="834" fg:w="1"/><text x="67.1305%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.32%)</title><rect x="66.7201%" y="309" width="0.3208%" height="15" fill="rgb(214,121,10)" fg:x="832" fg:w="4"/><text x="66.9701%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.9607%" y="293" width="0.0802%" height="15" fill="rgb(241,66,2)" fg:x="835" fg:w="1"/><text x="67.2107%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.9607%" y="277" width="0.0802%" height="15" fill="rgb(220,167,19)" fg:x="835" fg:w="1"/><text x="67.2107%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="66.9607%" y="261" width="0.0802%" height="15" fill="rgb(231,54,50)" fg:x="835" fg:w="1"/><text x="67.2107%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="66.9607%" y="245" width="0.0802%" height="15" fill="rgb(239,217,53)" fg:x="835" fg:w="1"/><text x="67.2107%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.72%)</title><rect x="66.3994%" y="325" width="0.7217%" height="15" fill="rgb(248,8,0)" fg:x="828" fg:w="9"/><text x="66.6494%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="67.0409%" y="309" width="0.0802%" height="15" fill="rgb(229,118,37)" fg:x="836" fg:w="1"/><text x="67.2909%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.96%)</title><rect x="66.3994%" y="341" width="0.9623%" height="15" fill="rgb(253,223,43)" fg:x="828" fg:w="12"/><text x="66.6494%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="67.1211%" y="325" width="0.2406%" height="15" fill="rgb(211,77,36)" fg:x="837" fg:w="3"/><text x="67.3711%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="67.1211%" y="309" width="0.2406%" height="15" fill="rgb(219,3,53)" fg:x="837" fg:w="3"/><text x="67.3711%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.2013%" y="293" width="0.1604%" height="15" fill="rgb(244,45,42)" fg:x="838" fg:w="2"/><text x="67.4513%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="67.2013%" y="277" width="0.1604%" height="15" fill="rgb(225,95,27)" fg:x="838" fg:w="2"/><text x="67.4513%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (650 samples, 52.13%)</title><rect x="15.3168%" y="501" width="52.1251%" height="15" fill="rgb(207,74,8)" fg:x="191" fg:w="650"/><text x="15.5668%" y="511.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Observ..</text></g><g><title>plugins_core::looking::model::qualify_name (627 samples, 50.28%)</title><rect x="17.1612%" y="485" width="50.2807%" height="15" fill="rgb(243,63,36)" fg:x="214" fg:w="627"/><text x="17.4112%" y="495.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (627 samples, 50.28%)</title><rect x="17.1612%" y="469" width="50.2807%" height="15" fill="rgb(211,180,12)" fg:x="214" fg:w="627"/><text x="17.4112%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (627 samples, 50.28%)</title><rect x="17.1612%" y="453" width="50.2807%" height="15" fill="rgb(254,166,49)" fg:x="214" fg:w="627"/><text x="17.4112%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (627 samples, 50.28%)</title><rect x="17.1612%" y="437" width="50.2807%" height="15" fill="rgb(205,19,0)" fg:x="214" fg:w="627"/><text x="17.4112%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (74 samples, 5.93%)</title><rect x="61.5076%" y="421" width="5.9342%" height="15" fill="rgb(224,172,32)" fg:x="767" fg:w="74"/><text x="61.7576%" y="431.50">indefini..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (73 samples, 5.85%)</title><rect x="61.5878%" y="405" width="5.8540%" height="15" fill="rgb(254,136,30)" fg:x="768" fg:w="73"/><text x="61.8378%" y="415.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.04%)</title><rect x="66.3994%" y="389" width="1.0425%" height="15" fill="rgb(246,19,35)" fg:x="828" fg:w="13"/><text x="66.6494%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.04%)</title><rect x="66.3994%" y="373" width="1.0425%" height="15" fill="rgb(219,24,36)" fg:x="828" fg:w="13"/><text x="66.6494%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.04%)</title><rect x="66.3994%" y="357" width="1.0425%" height="15" fill="rgb(251,55,1)" fg:x="828" fg:w="13"/><text x="66.6494%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="67.3617%" y="341" width="0.0802%" height="15" fill="rgb(218,117,39)" fg:x="840" fg:w="1"/><text x="67.6117%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="67.3617%" y="325" width="0.0802%" height="15" fill="rgb(248,169,11)" fg:x="840" fg:w="1"/><text x="67.6117%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.3617%" y="309" width="0.0802%" height="15" fill="rgb(244,40,44)" fg:x="840" fg:w="1"/><text x="67.6117%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3617%" y="293" width="0.0802%" height="15" fill="rgb(234,62,37)" fg:x="840" fg:w="1"/><text x="67.6117%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3617%" y="277" width="0.0802%" height="15" fill="rgb(207,117,42)" fg:x="840" fg:w="1"/><text x="67.6117%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.4419%" y="501" width="0.0802%" height="15" fill="rgb(213,43,2)" fg:x="841" fg:w="1"/><text x="67.6919%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4419%" y="485" width="0.0802%" height="15" fill="rgb(244,202,51)" fg:x="841" fg:w="1"/><text x="67.6919%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="67.5221%" y="485" width="0.1604%" height="15" fill="rgb(253,174,46)" fg:x="842" fg:w="2"/><text x="67.7721%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="67.5221%" y="469" width="0.1604%" height="15" fill="rgb(251,23,1)" fg:x="842" fg:w="2"/><text x="67.7721%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="67.5221%" y="453" width="0.1604%" height="15" fill="rgb(253,26,1)" fg:x="842" fg:w="2"/><text x="67.7721%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="67.5221%" y="437" width="0.1604%" height="15" fill="rgb(216,89,31)" fg:x="842" fg:w="2"/><text x="67.7721%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="67.5221%" y="421" width="0.1604%" height="15" fill="rgb(209,109,5)" fg:x="842" fg:w="2"/><text x="67.7721%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="67.5221%" y="405" width="0.1604%" height="15" fill="rgb(229,63,13)" fg:x="842" fg:w="2"/><text x="67.7721%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="67.5221%" y="389" width="0.1604%" height="15" fill="rgb(238,137,54)" fg:x="842" fg:w="2"/><text x="67.7721%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="67.5221%" y="373" width="0.1604%" height="15" fill="rgb(228,1,9)" fg:x="842" fg:w="2"/><text x="67.7721%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="67.5221%" y="357" width="0.1604%" height="15" fill="rgb(249,120,48)" fg:x="842" fg:w="2"/><text x="67.7721%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="67.5221%" y="341" width="0.1604%" height="15" fill="rgb(209,72,36)" fg:x="842" fg:w="2"/><text x="67.7721%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="67.5221%" y="325" width="0.1604%" height="15" fill="rgb(247,98,49)" fg:x="842" fg:w="2"/><text x="67.7721%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.6022%" y="309" width="0.0802%" height="15" fill="rgb(233,75,36)" fg:x="843" fg:w="1"/><text x="67.8522%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.6022%" y="293" width="0.0802%" height="15" fill="rgb(225,14,24)" fg:x="843" fg:w="1"/><text x="67.8522%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.6022%" y="277" width="0.0802%" height="15" fill="rgb(237,193,20)" fg:x="843" fg:w="1"/><text x="67.8522%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.6022%" y="261" width="0.0802%" height="15" fill="rgb(239,122,19)" fg:x="843" fg:w="1"/><text x="67.8522%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.6022%" y="245" width="0.0802%" height="15" fill="rgb(231,220,10)" fg:x="843" fg:w="1"/><text x="67.8522%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="67.6022%" y="229" width="0.0802%" height="15" fill="rgb(220,66,15)" fg:x="843" fg:w="1"/><text x="67.8522%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="67.6022%" y="213" width="0.0802%" height="15" fill="rgb(215,171,52)" fg:x="843" fg:w="1"/><text x="67.8522%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.6022%" y="197" width="0.0802%" height="15" fill="rgb(241,169,50)" fg:x="843" fg:w="1"/><text x="67.8522%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="67.6022%" y="181" width="0.0802%" height="15" fill="rgb(236,189,0)" fg:x="843" fg:w="1"/><text x="67.8522%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.6022%" y="165" width="0.0802%" height="15" fill="rgb(217,147,20)" fg:x="843" fg:w="1"/><text x="67.8522%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.6022%" y="149" width="0.0802%" height="15" fill="rgb(206,188,39)" fg:x="843" fg:w="1"/><text x="67.8522%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.6022%" y="133" width="0.0802%" height="15" fill="rgb(227,118,25)" fg:x="843" fg:w="1"/><text x="67.8522%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="67.6022%" y="117" width="0.0802%" height="15" fill="rgb(248,171,40)" fg:x="843" fg:w="1"/><text x="67.8522%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6022%" y="101" width="0.0802%" height="15" fill="rgb(251,90,54)" fg:x="843" fg:w="1"/><text x="67.8522%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="67.6022%" y="85" width="0.0802%" height="15" fill="rgb(234,11,46)" fg:x="843" fg:w="1"/><text x="67.8522%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="67.6022%" y="69" width="0.0802%" height="15" fill="rgb(229,134,13)" fg:x="843" fg:w="1"/><text x="67.8522%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="67.6022%" y="53" width="0.0802%" height="15" fill="rgb(223,129,3)" fg:x="843" fg:w="1"/><text x="67.8522%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.6022%" y="37" width="0.0802%" height="15" fill="rgb(221,124,13)" fg:x="843" fg:w="1"/><text x="67.8522%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (3 samples, 0.24%)</title><rect x="67.5221%" y="501" width="0.2406%" height="15" fill="rgb(234,3,18)" fg:x="842" fg:w="3"/><text x="67.7721%" y="511.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="67.6824%" y="485" width="0.0802%" height="15" fill="rgb(249,199,20)" fg:x="844" fg:w="1"/><text x="67.9324%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7626%" y="501" width="0.0802%" height="15" fill="rgb(224,134,6)" fg:x="845" fg:w="1"/><text x="68.0126%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8428%" y="485" width="0.0802%" height="15" fill="rgb(254,83,26)" fg:x="846" fg:w="1"/><text x="68.0928%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (2 samples, 0.16%)</title><rect x="67.8428%" y="501" width="0.1604%" height="15" fill="rgb(217,88,9)" fg:x="846" fg:w="2"/><text x="68.0928%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.9230%" y="485" width="0.0802%" height="15" fill="rgb(225,73,2)" fg:x="847" fg:w="1"/><text x="68.1730%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9230%" y="469" width="0.0802%" height="15" fill="rgb(226,44,39)" fg:x="847" fg:w="1"/><text x="68.1730%" y="479.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0834%" y="469" width="0.0802%" height="15" fill="rgb(228,53,17)" fg:x="849" fg:w="1"/><text x="68.3334%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0834%" y="453" width="0.0802%" height="15" fill="rgb(212,27,27)" fg:x="849" fg:w="1"/><text x="68.3334%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0834%" y="437" width="0.0802%" height="15" fill="rgb(241,50,6)" fg:x="849" fg:w="1"/><text x="68.3334%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0834%" y="421" width="0.0802%" height="15" fill="rgb(225,28,51)" fg:x="849" fg:w="1"/><text x="68.3334%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="68.1636%" y="373" width="0.0802%" height="15" fill="rgb(215,33,16)" fg:x="850" fg:w="1"/><text x="68.4136%" y="383.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.1636%" y="357" width="0.0802%" height="15" fill="rgb(243,40,39)" fg:x="850" fg:w="1"/><text x="68.4136%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.1636%" y="341" width="0.0802%" height="15" fill="rgb(225,11,42)" fg:x="850" fg:w="1"/><text x="68.4136%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="68.1636%" y="325" width="0.0802%" height="15" fill="rgb(241,220,38)" fg:x="850" fg:w="1"/><text x="68.4136%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.2438%" y="309" width="0.0802%" height="15" fill="rgb(244,52,35)" fg:x="851" fg:w="1"/><text x="68.4938%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.2438%" y="293" width="0.0802%" height="15" fill="rgb(246,42,46)" fg:x="851" fg:w="1"/><text x="68.4938%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.3240%" y="261" width="0.0802%" height="15" fill="rgb(205,184,13)" fg:x="852" fg:w="1"/><text x="68.5740%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.4042%" y="197" width="0.0802%" height="15" fill="rgb(209,48,36)" fg:x="853" fg:w="1"/><text x="68.6542%" y="207.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="68.2438%" y="357" width="0.3208%" height="15" fill="rgb(244,34,51)" fg:x="851" fg:w="4"/><text x="68.4938%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="68.2438%" y="341" width="0.3208%" height="15" fill="rgb(221,107,33)" fg:x="851" fg:w="4"/><text x="68.4938%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="68.2438%" y="325" width="0.3208%" height="15" fill="rgb(224,203,12)" fg:x="851" fg:w="4"/><text x="68.4938%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="68.3240%" y="309" width="0.2406%" height="15" fill="rgb(230,215,18)" fg:x="852" fg:w="3"/><text x="68.5740%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.3240%" y="293" width="0.2406%" height="15" fill="rgb(206,185,35)" fg:x="852" fg:w="3"/><text x="68.5740%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="68.3240%" y="277" width="0.2406%" height="15" fill="rgb(228,140,34)" fg:x="852" fg:w="3"/><text x="68.5740%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.4042%" y="261" width="0.1604%" height="15" fill="rgb(208,93,13)" fg:x="853" fg:w="2"/><text x="68.6542%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.4042%" y="245" width="0.1604%" height="15" fill="rgb(221,193,39)" fg:x="853" fg:w="2"/><text x="68.6542%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.4042%" y="229" width="0.1604%" height="15" fill="rgb(241,132,34)" fg:x="853" fg:w="2"/><text x="68.6542%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.4042%" y="213" width="0.1604%" height="15" fill="rgb(221,141,10)" fg:x="853" fg:w="2"/><text x="68.6542%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4844%" y="197" width="0.0802%" height="15" fill="rgb(226,90,31)" fg:x="854" fg:w="1"/><text x="68.7344%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5646%" y="245" width="0.0802%" height="15" fill="rgb(243,75,5)" fg:x="855" fg:w="1"/><text x="68.8146%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5646%" y="229" width="0.0802%" height="15" fill="rgb(227,156,21)" fg:x="855" fg:w="1"/><text x="68.8146%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5646%" y="213" width="0.0802%" height="15" fill="rgb(250,195,8)" fg:x="855" fg:w="1"/><text x="68.8146%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5646%" y="197" width="0.0802%" height="15" fill="rgb(220,134,5)" fg:x="855" fg:w="1"/><text x="68.8146%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.5646%" y="181" width="0.0802%" height="15" fill="rgb(246,106,34)" fg:x="855" fg:w="1"/><text x="68.8146%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.5646%" y="165" width="0.0802%" height="15" fill="rgb(205,1,4)" fg:x="855" fg:w="1"/><text x="68.8146%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5646%" y="149" width="0.0802%" height="15" fill="rgb(224,151,29)" fg:x="855" fg:w="1"/><text x="68.8146%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.5646%" y="277" width="0.1604%" height="15" fill="rgb(251,196,0)" fg:x="855" fg:w="2"/><text x="68.8146%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.5646%" y="261" width="0.1604%" height="15" fill="rgb(212,127,0)" fg:x="855" fg:w="2"/><text x="68.8146%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="68.6447%" y="245" width="0.0802%" height="15" fill="rgb(236,71,53)" fg:x="856" fg:w="1"/><text x="68.8947%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="68.5646%" y="325" width="0.2406%" height="15" fill="rgb(227,99,0)" fg:x="855" fg:w="3"/><text x="68.8146%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.5646%" y="309" width="0.2406%" height="15" fill="rgb(239,89,21)" fg:x="855" fg:w="3"/><text x="68.8146%" y="319.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="68.5646%" y="293" width="0.2406%" height="15" fill="rgb(243,122,19)" fg:x="855" fg:w="3"/><text x="68.8146%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.7249%" y="277" width="0.0802%" height="15" fill="rgb(229,192,45)" fg:x="857" fg:w="1"/><text x="68.9749%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.7249%" y="261" width="0.0802%" height="15" fill="rgb(235,165,35)" fg:x="857" fg:w="1"/><text x="68.9749%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.7249%" y="245" width="0.0802%" height="15" fill="rgb(253,202,0)" fg:x="857" fg:w="1"/><text x="68.9749%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.7249%" y="229" width="0.0802%" height="15" fill="rgb(235,51,20)" fg:x="857" fg:w="1"/><text x="68.9749%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7249%" y="213" width="0.0802%" height="15" fill="rgb(218,95,46)" fg:x="857" fg:w="1"/><text x="68.9749%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (8 samples, 0.64%)</title><rect x="68.2438%" y="373" width="0.6415%" height="15" fill="rgb(212,81,10)" fg:x="851" fg:w="8"/><text x="68.4938%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="68.5646%" y="357" width="0.3208%" height="15" fill="rgb(240,59,0)" fg:x="855" fg:w="4"/><text x="68.8146%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="68.5646%" y="341" width="0.3208%" height="15" fill="rgb(212,191,42)" fg:x="855" fg:w="4"/><text x="68.8146%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8051%" y="325" width="0.0802%" height="15" fill="rgb(233,140,3)" fg:x="858" fg:w="1"/><text x="69.0551%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8051%" y="309" width="0.0802%" height="15" fill="rgb(215,69,23)" fg:x="858" fg:w="1"/><text x="69.0551%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9655%" y="325" width="0.0802%" height="15" fill="rgb(240,202,20)" fg:x="860" fg:w="1"/><text x="69.2155%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.9655%" y="309" width="0.0802%" height="15" fill="rgb(209,146,50)" fg:x="860" fg:w="1"/><text x="69.2155%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9655%" y="293" width="0.0802%" height="15" fill="rgb(253,102,54)" fg:x="860" fg:w="1"/><text x="69.2155%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9655%" y="277" width="0.0802%" height="15" fill="rgb(250,173,47)" fg:x="860" fg:w="1"/><text x="69.2155%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.9655%" y="261" width="0.0802%" height="15" fill="rgb(232,142,7)" fg:x="860" fg:w="1"/><text x="69.2155%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.9655%" y="245" width="0.0802%" height="15" fill="rgb(230,157,47)" fg:x="860" fg:w="1"/><text x="69.2155%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.9655%" y="229" width="0.0802%" height="15" fill="rgb(214,177,35)" fg:x="860" fg:w="1"/><text x="69.2155%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.9655%" y="213" width="0.0802%" height="15" fill="rgb(234,119,46)" fg:x="860" fg:w="1"/><text x="69.2155%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.9655%" y="197" width="0.0802%" height="15" fill="rgb(241,180,50)" fg:x="860" fg:w="1"/><text x="69.2155%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.0457%" y="229" width="0.0802%" height="15" fill="rgb(221,54,25)" fg:x="861" fg:w="1"/><text x="69.2957%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (6 samples, 0.48%)</title><rect x="68.8853%" y="373" width="0.4812%" height="15" fill="rgb(209,157,44)" fg:x="859" fg:w="6"/><text x="69.1353%" y="383.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="68.9655%" y="357" width="0.4010%" height="15" fill="rgb(246,115,41)" fg:x="860" fg:w="5"/><text x="69.2155%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="68.9655%" y="341" width="0.4010%" height="15" fill="rgb(229,86,1)" fg:x="860" fg:w="5"/><text x="69.2155%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.0457%" y="325" width="0.3208%" height="15" fill="rgb(240,108,53)" fg:x="861" fg:w="4"/><text x="69.2957%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.0457%" y="309" width="0.3208%" height="15" fill="rgb(227,134,2)" fg:x="861" fg:w="4"/><text x="69.2957%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.0457%" y="293" width="0.3208%" height="15" fill="rgb(213,129,25)" fg:x="861" fg:w="4"/><text x="69.2957%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.0457%" y="277" width="0.3208%" height="15" fill="rgb(226,35,21)" fg:x="861" fg:w="4"/><text x="69.2957%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="69.0457%" y="261" width="0.3208%" height="15" fill="rgb(208,129,26)" fg:x="861" fg:w="4"/><text x="69.2957%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.0457%" y="245" width="0.3208%" height="15" fill="rgb(224,83,6)" fg:x="861" fg:w="4"/><text x="69.2957%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="69.1259%" y="229" width="0.2406%" height="15" fill="rgb(227,52,39)" fg:x="862" fg:w="3"/><text x="69.3759%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.1259%" y="213" width="0.2406%" height="15" fill="rgb(241,30,17)" fg:x="862" fg:w="3"/><text x="69.3759%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.2061%" y="197" width="0.1604%" height="15" fill="rgb(246,186,42)" fg:x="863" fg:w="2"/><text x="69.4561%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2061%" y="181" width="0.1604%" height="15" fill="rgb(221,169,15)" fg:x="863" fg:w="2"/><text x="69.4561%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.2863%" y="165" width="0.0802%" height="15" fill="rgb(235,108,21)" fg:x="864" fg:w="1"/><text x="69.5363%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2863%" y="149" width="0.0802%" height="15" fill="rgb(219,148,30)" fg:x="864" fg:w="1"/><text x="69.5363%" y="159.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (16 samples, 1.28%)</title><rect x="68.1636%" y="421" width="1.2831%" height="15" fill="rgb(220,109,5)" fg:x="850" fg:w="16"/><text x="68.4136%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (16 samples, 1.28%)</title><rect x="68.1636%" y="405" width="1.2831%" height="15" fill="rgb(213,203,48)" fg:x="850" fg:w="16"/><text x="68.4136%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.28%)</title><rect x="68.1636%" y="389" width="1.2831%" height="15" fill="rgb(244,71,33)" fg:x="850" fg:w="16"/><text x="68.4136%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="69.3665%" y="373" width="0.0802%" height="15" fill="rgb(209,23,2)" fg:x="865" fg:w="1"/><text x="69.6165%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3665%" y="357" width="0.0802%" height="15" fill="rgb(219,97,7)" fg:x="865" fg:w="1"/><text x="69.6165%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3665%" y="341" width="0.0802%" height="15" fill="rgb(216,161,23)" fg:x="865" fg:w="1"/><text x="69.6165%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="69.3665%" y="325" width="0.0802%" height="15" fill="rgb(207,45,42)" fg:x="865" fg:w="1"/><text x="69.6165%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3665%" y="309" width="0.0802%" height="15" fill="rgb(241,61,4)" fg:x="865" fg:w="1"/><text x="69.6165%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (17 samples, 1.36%)</title><rect x="68.1636%" y="469" width="1.3633%" height="15" fill="rgb(236,170,1)" fg:x="850" fg:w="17"/><text x="68.4136%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.36%)</title><rect x="68.1636%" y="453" width="1.3633%" height="15" fill="rgb(239,72,5)" fg:x="850" fg:w="17"/><text x="68.4136%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.36%)</title><rect x="68.1636%" y="437" width="1.3633%" height="15" fill="rgb(214,13,50)" fg:x="850" fg:w="17"/><text x="68.4136%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4467%" y="421" width="0.0802%" height="15" fill="rgb(224,88,9)" fg:x="866" fg:w="1"/><text x="69.6967%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5269%" y="469" width="0.0802%" height="15" fill="rgb(238,192,34)" fg:x="867" fg:w="1"/><text x="69.7769%" y="479.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="69.6071%" y="469" width="0.0802%" height="15" fill="rgb(217,203,50)" fg:x="868" fg:w="1"/><text x="69.8571%" y="479.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.8476%" y="405" width="0.0802%" height="15" fill="rgb(241,123,32)" fg:x="871" fg:w="1"/><text x="70.0976%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8476%" y="389" width="0.0802%" height="15" fill="rgb(248,151,39)" fg:x="871" fg:w="1"/><text x="70.0976%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8476%" y="373" width="0.0802%" height="15" fill="rgb(208,89,6)" fg:x="871" fg:w="1"/><text x="70.0976%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (701 samples, 56.21%)</title><rect x="13.7931%" y="725" width="56.2149%" height="15" fill="rgb(254,43,26)" fg:x="172" fg:w="701"/><text x="14.0431%" y="735.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (701 samples, 56.21%)</title><rect x="13.7931%" y="709" width="56.2149%" height="15" fill="rgb(216,158,13)" fg:x="172" fg:w="701"/><text x="14.0431%" y="719.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (701 samples, 56.21%)</title><rect x="13.7931%" y="693" width="56.2149%" height="15" fill="rgb(212,47,37)" fg:x="172" fg:w="701"/><text x="14.0431%" y="703.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (701 samples, 56.21%)</title><rect x="13.7931%" y="677" width="56.2149%" height="15" fill="rgb(254,16,10)" fg:x="172" fg:w="701"/><text x="14.0431%" y="687.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (686 samples, 55.01%)</title><rect x="14.9960%" y="661" width="55.0120%" height="15" fill="rgb(223,228,16)" fg:x="187" fg:w="686"/><text x="15.2460%" y="671.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (686 samples, 55.01%)</title><rect x="14.9960%" y="645" width="55.0120%" height="15" fill="rgb(249,108,50)" fg:x="187" fg:w="686"/><text x="15.2460%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (686 samples, 55.01%)</title><rect x="14.9960%" y="629" width="55.0120%" height="15" fill="rgb(208,220,5)" fg:x="187" fg:w="686"/><text x="15.2460%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (686 samples, 55.01%)</title><rect x="14.9960%" y="613" width="55.0120%" height="15" fill="rgb(217,89,48)" fg:x="187" fg:w="686"/><text x="15.2460%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (686 samples, 55.01%)</title><rect x="14.9960%" y="597" width="55.0120%" height="15" fill="rgb(212,113,41)" fg:x="187" fg:w="686"/><text x="15.2460%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (686 samples, 55.01%)</title><rect x="14.9960%" y="581" width="55.0120%" height="15" fill="rgb(231,127,5)" fg:x="187" fg:w="686"/><text x="15.2460%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (686 samples, 55.01%)</title><rect x="14.9960%" y="565" width="55.0120%" height="15" fill="rgb(217,141,17)" fg:x="187" fg:w="686"/><text x="15.2460%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (686 samples, 55.01%)</title><rect x="14.9960%" y="549" width="55.0120%" height="15" fill="rgb(245,125,54)" fg:x="187" fg:w="686"/><text x="15.2460%" y="559.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (686 samples, 55.01%)</title><rect x="14.9960%" y="533" width="55.0120%" height="15" fill="rgb(248,125,3)" fg:x="187" fg:w="686"/><text x="15.2460%" y="543.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (683 samples, 54.77%)</title><rect x="15.2366%" y="517" width="54.7715%" height="15" fill="rgb(236,119,51)" fg:x="190" fg:w="683"/><text x="15.4866%" y="527.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (25 samples, 2.00%)</title><rect x="68.0032%" y="501" width="2.0048%" height="15" fill="rgb(239,99,8)" fg:x="848" fg:w="25"/><text x="68.2532%" y="511.50">k..</text></g><g><title>kernel::model::scopes::Scopes::load_scope (25 samples, 2.00%)</title><rect x="68.0032%" y="485" width="2.0048%" height="15" fill="rgb(224,228,4)" fg:x="848" fg:w="25"/><text x="68.2532%" y="495.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.6872%" y="469" width="0.3208%" height="15" fill="rgb(220,131,45)" fg:x="869" fg:w="4"/><text x="69.9372%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="69.6872%" y="453" width="0.3208%" height="15" fill="rgb(215,62,5)" fg:x="869" fg:w="4"/><text x="69.9372%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="69.8476%" y="437" width="0.1604%" height="15" fill="rgb(253,12,24)" fg:x="871" fg:w="2"/><text x="70.0976%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="69.8476%" y="421" width="0.1604%" height="15" fill="rgb(248,120,50)" fg:x="871" fg:w="2"/><text x="70.0976%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9278%" y="405" width="0.0802%" height="15" fill="rgb(245,194,10)" fg:x="872" fg:w="1"/><text x="70.1778%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="70.0080%" y="693" width="0.0802%" height="15" fill="rgb(241,149,38)" fg:x="873" fg:w="1"/><text x="70.2580%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.0080%" y="677" width="0.0802%" height="15" fill="rgb(219,215,7)" fg:x="873" fg:w="1"/><text x="70.2580%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.0080%" y="661" width="0.0802%" height="15" fill="rgb(208,120,31)" fg:x="873" fg:w="1"/><text x="70.2580%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.0080%" y="645" width="0.0802%" height="15" fill="rgb(244,30,8)" fg:x="873" fg:w="1"/><text x="70.2580%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.0080%" y="629" width="0.0802%" height="15" fill="rgb(238,35,44)" fg:x="873" fg:w="1"/><text x="70.2580%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0080%" y="613" width="0.0802%" height="15" fill="rgb(243,218,37)" fg:x="873" fg:w="1"/><text x="70.2580%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0080%" y="597" width="0.0802%" height="15" fill="rgb(218,169,10)" fg:x="873" fg:w="1"/><text x="70.2580%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0080%" y="581" width="0.0802%" height="15" fill="rgb(221,144,10)" fg:x="873" fg:w="1"/><text x="70.2580%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0080%" y="565" width="0.0802%" height="15" fill="rgb(226,41,38)" fg:x="873" fg:w="1"/><text x="70.2580%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.0080%" y="549" width="0.0802%" height="15" fill="rgb(228,3,1)" fg:x="873" fg:w="1"/><text x="70.2580%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0080%" y="533" width="0.0802%" height="15" fill="rgb(209,129,12)" fg:x="873" fg:w="1"/><text x="70.2580%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0080%" y="517" width="0.0802%" height="15" fill="rgb(213,136,33)" fg:x="873" fg:w="1"/><text x="70.2580%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0080%" y="501" width="0.0802%" height="15" fill="rgb(209,181,29)" fg:x="873" fg:w="1"/><text x="70.2580%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="70.0882%" y="629" width="0.2406%" height="15" fill="rgb(234,173,18)" fg:x="874" fg:w="3"/><text x="70.3382%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2486%" y="613" width="0.0802%" height="15" fill="rgb(227,73,47)" fg:x="876" fg:w="1"/><text x="70.4986%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3288%" y="549" width="0.0802%" height="15" fill="rgb(234,9,34)" fg:x="877" fg:w="1"/><text x="70.5788%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.3288%" y="533" width="0.0802%" height="15" fill="rgb(235,172,15)" fg:x="877" fg:w="1"/><text x="70.5788%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3288%" y="517" width="0.0802%" height="15" fill="rgb(245,61,2)" fg:x="877" fg:w="1"/><text x="70.5788%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.3288%" y="501" width="0.0802%" height="15" fill="rgb(238,39,47)" fg:x="877" fg:w="1"/><text x="70.5788%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.3288%" y="485" width="0.0802%" height="15" fill="rgb(234,37,24)" fg:x="877" fg:w="1"/><text x="70.5788%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.3288%" y="469" width="0.0802%" height="15" fill="rgb(248,223,24)" fg:x="877" fg:w="1"/><text x="70.5788%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.3288%" y="453" width="0.0802%" height="15" fill="rgb(223,12,15)" fg:x="877" fg:w="1"/><text x="70.5788%" y="463.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="70.0882%" y="677" width="0.4010%" height="15" fill="rgb(249,6,3)" fg:x="874" fg:w="5"/><text x="70.3382%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="70.0882%" y="661" width="0.4010%" height="15" fill="rgb(237,105,33)" fg:x="874" fg:w="5"/><text x="70.3382%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="70.0882%" y="645" width="0.4010%" height="15" fill="rgb(252,208,35)" fg:x="874" fg:w="5"/><text x="70.3382%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.3288%" y="629" width="0.1604%" height="15" fill="rgb(215,181,35)" fg:x="877" fg:w="2"/><text x="70.5788%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.3288%" y="613" width="0.1604%" height="15" fill="rgb(246,212,3)" fg:x="877" fg:w="2"/><text x="70.5788%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.3288%" y="597" width="0.1604%" height="15" fill="rgb(247,156,24)" fg:x="877" fg:w="2"/><text x="70.5788%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.3288%" y="581" width="0.1604%" height="15" fill="rgb(248,9,31)" fg:x="877" fg:w="2"/><text x="70.5788%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.3288%" y="565" width="0.1604%" height="15" fill="rgb(234,26,45)" fg:x="877" fg:w="2"/><text x="70.5788%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.4090%" y="549" width="0.0802%" height="15" fill="rgb(249,11,32)" fg:x="878" fg:w="1"/><text x="70.6590%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4090%" y="533" width="0.0802%" height="15" fill="rgb(249,162,33)" fg:x="878" fg:w="1"/><text x="70.6590%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.4090%" y="517" width="0.0802%" height="15" fill="rgb(232,4,32)" fg:x="878" fg:w="1"/><text x="70.6590%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4090%" y="501" width="0.0802%" height="15" fill="rgb(212,5,45)" fg:x="878" fg:w="1"/><text x="70.6590%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="70.4892%" y="645" width="0.0802%" height="15" fill="rgb(227,95,13)" fg:x="879" fg:w="1"/><text x="70.7392%" y="655.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.5694%" y="597" width="0.0802%" height="15" fill="rgb(223,205,10)" fg:x="880" fg:w="1"/><text x="70.8194%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5694%" y="581" width="0.0802%" height="15" fill="rgb(222,178,8)" fg:x="880" fg:w="1"/><text x="70.8194%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.5694%" y="565" width="0.0802%" height="15" fill="rgb(216,13,22)" fg:x="880" fg:w="1"/><text x="70.8194%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5694%" y="549" width="0.0802%" height="15" fill="rgb(240,167,12)" fg:x="880" fg:w="1"/><text x="70.8194%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.5694%" y="533" width="0.0802%" height="15" fill="rgb(235,68,35)" fg:x="880" fg:w="1"/><text x="70.8194%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5694%" y="517" width="0.0802%" height="15" fill="rgb(253,40,27)" fg:x="880" fg:w="1"/><text x="70.8194%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.5694%" y="501" width="0.0802%" height="15" fill="rgb(214,19,28)" fg:x="880" fg:w="1"/><text x="70.8194%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5694%" y="485" width="0.0802%" height="15" fill="rgb(210,167,45)" fg:x="880" fg:w="1"/><text x="70.8194%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="70.5694%" y="469" width="0.0802%" height="15" fill="rgb(232,97,40)" fg:x="880" fg:w="1"/><text x="70.8194%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.5694%" y="645" width="0.1604%" height="15" fill="rgb(250,35,23)" fg:x="880" fg:w="2"/><text x="70.8194%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.5694%" y="629" width="0.1604%" height="15" fill="rgb(248,47,53)" fg:x="880" fg:w="2"/><text x="70.8194%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.5694%" y="613" width="0.1604%" height="15" fill="rgb(226,58,50)" fg:x="880" fg:w="2"/><text x="70.8194%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6496%" y="597" width="0.0802%" height="15" fill="rgb(217,105,26)" fg:x="881" fg:w="1"/><text x="70.8996%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6496%" y="581" width="0.0802%" height="15" fill="rgb(208,64,1)" fg:x="881" fg:w="1"/><text x="70.8996%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.6496%" y="565" width="0.0802%" height="15" fill="rgb(214,80,1)" fg:x="881" fg:w="1"/><text x="70.8996%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6496%" y="549" width="0.0802%" height="15" fill="rgb(206,175,26)" fg:x="881" fg:w="1"/><text x="70.8996%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6496%" y="533" width="0.0802%" height="15" fill="rgb(235,156,37)" fg:x="881" fg:w="1"/><text x="70.8996%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.6496%" y="517" width="0.0802%" height="15" fill="rgb(213,100,9)" fg:x="881" fg:w="1"/><text x="70.8996%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6496%" y="501" width="0.0802%" height="15" fill="rgb(241,15,13)" fg:x="881" fg:w="1"/><text x="70.8996%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6496%" y="485" width="0.0802%" height="15" fill="rgb(205,97,43)" fg:x="881" fg:w="1"/><text x="70.8996%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.6496%" y="469" width="0.0802%" height="15" fill="rgb(216,106,32)" fg:x="881" fg:w="1"/><text x="70.8996%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6496%" y="453" width="0.0802%" height="15" fill="rgb(226,200,8)" fg:x="881" fg:w="1"/><text x="70.8996%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6496%" y="437" width="0.0802%" height="15" fill="rgb(244,54,29)" fg:x="881" fg:w="1"/><text x="70.8996%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="70.6496%" y="421" width="0.0802%" height="15" fill="rgb(252,169,12)" fg:x="881" fg:w="1"/><text x="70.8996%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6496%" y="405" width="0.0802%" height="15" fill="rgb(231,199,11)" fg:x="881" fg:w="1"/><text x="70.8996%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6496%" y="389" width="0.0802%" height="15" fill="rgb(233,191,18)" fg:x="881" fg:w="1"/><text x="70.8996%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.6496%" y="373" width="0.0802%" height="15" fill="rgb(215,83,47)" fg:x="881" fg:w="1"/><text x="70.8996%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.6496%" y="357" width="0.0802%" height="15" fill="rgb(251,67,19)" fg:x="881" fg:w="1"/><text x="70.8996%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6496%" y="341" width="0.0802%" height="15" fill="rgb(240,7,20)" fg:x="881" fg:w="1"/><text x="70.8996%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (10 samples, 0.80%)</title><rect x="70.0882%" y="693" width="0.8019%" height="15" fill="rgb(210,150,26)" fg:x="874" fg:w="10"/><text x="70.3382%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="70.4892%" y="677" width="0.4010%" height="15" fill="rgb(228,75,42)" fg:x="879" fg:w="5"/><text x="70.7392%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="70.4892%" y="661" width="0.4010%" height="15" fill="rgb(237,134,48)" fg:x="879" fg:w="5"/><text x="70.7392%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.7298%" y="645" width="0.1604%" height="15" fill="rgb(205,80,50)" fg:x="882" fg:w="2"/><text x="70.9798%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.7298%" y="629" width="0.1604%" height="15" fill="rgb(217,74,48)" fg:x="882" fg:w="2"/><text x="70.9798%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.8099%" y="613" width="0.0802%" height="15" fill="rgb(205,82,50)" fg:x="883" fg:w="1"/><text x="71.0599%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="70.0080%" y="709" width="0.9623%" height="15" fill="rgb(228,1,33)" fg:x="873" fg:w="12"/><text x="70.2580%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.8901%" y="693" width="0.0802%" height="15" fill="rgb(214,50,23)" fg:x="884" fg:w="1"/><text x="71.1401%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.8901%" y="677" width="0.0802%" height="15" fill="rgb(210,62,9)" fg:x="884" fg:w="1"/><text x="71.1401%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.8901%" y="661" width="0.0802%" height="15" fill="rgb(210,104,37)" fg:x="884" fg:w="1"/><text x="71.1401%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8901%" y="645" width="0.0802%" height="15" fill="rgb(232,104,43)" fg:x="884" fg:w="1"/><text x="71.1401%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8901%" y="629" width="0.0802%" height="15" fill="rgb(244,52,6)" fg:x="884" fg:w="1"/><text x="71.1401%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (13 samples, 1.04%)</title><rect x="70.0080%" y="725" width="1.0425%" height="15" fill="rgb(211,174,52)" fg:x="873" fg:w="13"/><text x="70.2580%" y="735.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="70.9703%" y="709" width="0.0802%" height="15" fill="rgb(229,48,4)" fg:x="885" fg:w="1"/><text x="71.2203%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.9703%" y="693" width="0.0802%" height="15" fill="rgb(205,155,16)" fg:x="885" fg:w="1"/><text x="71.2203%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0505%" y="677" width="0.0802%" height="15" fill="rgb(211,141,53)" fg:x="886" fg:w="1"/><text x="71.3005%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0505%" y="661" width="0.0802%" height="15" fill="rgb(240,148,11)" fg:x="886" fg:w="1"/><text x="71.3005%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0505%" y="645" width="0.0802%" height="15" fill="rgb(214,45,23)" fg:x="886" fg:w="1"/><text x="71.3005%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.0505%" y="629" width="0.0802%" height="15" fill="rgb(248,74,26)" fg:x="886" fg:w="1"/><text x="71.3005%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.0505%" y="613" width="0.0802%" height="15" fill="rgb(218,121,16)" fg:x="886" fg:w="1"/><text x="71.3005%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.0505%" y="597" width="0.0802%" height="15" fill="rgb(218,10,47)" fg:x="886" fg:w="1"/><text x="71.3005%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0505%" y="581" width="0.0802%" height="15" fill="rgb(227,99,14)" fg:x="886" fg:w="1"/><text x="71.3005%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0505%" y="565" width="0.0802%" height="15" fill="rgb(229,83,46)" fg:x="886" fg:w="1"/><text x="71.3005%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.0505%" y="549" width="0.0802%" height="15" fill="rgb(228,25,1)" fg:x="886" fg:w="1"/><text x="71.3005%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.0505%" y="533" width="0.0802%" height="15" fill="rgb(252,190,15)" fg:x="886" fg:w="1"/><text x="71.3005%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.0505%" y="517" width="0.0802%" height="15" fill="rgb(213,103,51)" fg:x="886" fg:w="1"/><text x="71.3005%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.0505%" y="501" width="0.0802%" height="15" fill="rgb(220,38,44)" fg:x="886" fg:w="1"/><text x="71.3005%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0505%" y="485" width="0.0802%" height="15" fill="rgb(210,45,26)" fg:x="886" fg:w="1"/><text x="71.3005%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.2109%" y="613" width="0.0802%" height="15" fill="rgb(205,95,48)" fg:x="888" fg:w="1"/><text x="71.4609%" y="623.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.2109%" y="597" width="0.0802%" height="15" fill="rgb(225,179,37)" fg:x="888" fg:w="1"/><text x="71.4609%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2911%" y="597" width="0.0802%" height="15" fill="rgb(230,209,3)" fg:x="889" fg:w="1"/><text x="71.5411%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.2911%" y="581" width="0.0802%" height="15" fill="rgb(248,12,46)" fg:x="889" fg:w="1"/><text x="71.5411%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2911%" y="565" width="0.0802%" height="15" fill="rgb(234,18,0)" fg:x="889" fg:w="1"/><text x="71.5411%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.2911%" y="549" width="0.0802%" height="15" fill="rgb(238,197,14)" fg:x="889" fg:w="1"/><text x="71.5411%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.2911%" y="533" width="0.0802%" height="15" fill="rgb(251,162,48)" fg:x="889" fg:w="1"/><text x="71.5411%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.2911%" y="517" width="0.0802%" height="15" fill="rgb(237,73,42)" fg:x="889" fg:w="1"/><text x="71.5411%" y="527.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="71.2109%" y="661" width="0.2406%" height="15" fill="rgb(211,108,8)" fg:x="888" fg:w="3"/><text x="71.4609%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="71.2109%" y="645" width="0.2406%" height="15" fill="rgb(213,45,22)" fg:x="888" fg:w="3"/><text x="71.4609%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="71.2109%" y="629" width="0.2406%" height="15" fill="rgb(252,154,5)" fg:x="888" fg:w="3"/><text x="71.4609%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.2911%" y="613" width="0.1604%" height="15" fill="rgb(221,79,52)" fg:x="889" fg:w="2"/><text x="71.5411%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3713%" y="597" width="0.0802%" height="15" fill="rgb(229,220,36)" fg:x="890" fg:w="1"/><text x="71.6213%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.4515%" y="549" width="0.0802%" height="15" fill="rgb(211,17,16)" fg:x="891" fg:w="1"/><text x="71.7015%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4515%" y="533" width="0.0802%" height="15" fill="rgb(222,55,31)" fg:x="891" fg:w="1"/><text x="71.7015%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.4515%" y="517" width="0.0802%" height="15" fill="rgb(221,221,31)" fg:x="891" fg:w="1"/><text x="71.7015%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4515%" y="501" width="0.0802%" height="15" fill="rgb(227,168,26)" fg:x="891" fg:w="1"/><text x="71.7015%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.4515%" y="485" width="0.0802%" height="15" fill="rgb(224,139,9)" fg:x="891" fg:w="1"/><text x="71.7015%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.4515%" y="469" width="0.0802%" height="15" fill="rgb(254,172,0)" fg:x="891" fg:w="1"/><text x="71.7015%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.4515%" y="453" width="0.0802%" height="15" fill="rgb(235,203,1)" fg:x="891" fg:w="1"/><text x="71.7015%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.4515%" y="437" width="0.0802%" height="15" fill="rgb(216,205,24)" fg:x="891" fg:w="1"/><text x="71.7015%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.4515%" y="421" width="0.0802%" height="15" fill="rgb(233,24,6)" fg:x="891" fg:w="1"/><text x="71.7015%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.4515%" y="405" width="0.0802%" height="15" fill="rgb(244,110,9)" fg:x="891" fg:w="1"/><text x="71.7015%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (893 samples, 71.61%)</title><rect x="0.0000%" y="789" width="71.6119%" height="15" fill="rgb(239,222,42)" fg:x="0" fg:w="893"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (893 samples, 71.61%)</title><rect x="0.0000%" y="773" width="71.6119%" height="15" fill="rgb(218,145,13)" fg:x="0" fg:w="893"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (893 samples, 71.61%)</title><rect x="0.0000%" y="757" width="71.6119%" height="15" fill="rgb(207,69,11)" fg:x="0" fg:w="893"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (722 samples, 57.90%)</title><rect x="13.7129%" y="741" width="57.8990%" height="15" fill="rgb(220,223,22)" fg:x="171" fg:w="722"/><text x="13.9629%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (7 samples, 0.56%)</title><rect x="71.0505%" y="725" width="0.5613%" height="15" fill="rgb(245,102,5)" fg:x="886" fg:w="7"/><text x="71.3005%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="71.0505%" y="709" width="0.5613%" height="15" fill="rgb(211,148,2)" fg:x="886" fg:w="7"/><text x="71.3005%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="71.0505%" y="693" width="0.5613%" height="15" fill="rgb(241,13,44)" fg:x="886" fg:w="7"/><text x="71.3005%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (6 samples, 0.48%)</title><rect x="71.1307%" y="677" width="0.4812%" height="15" fill="rgb(219,137,21)" fg:x="887" fg:w="6"/><text x="71.3807%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4515%" y="661" width="0.1604%" height="15" fill="rgb(242,206,5)" fg:x="891" fg:w="2"/><text x="71.7015%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4515%" y="645" width="0.1604%" height="15" fill="rgb(217,114,22)" fg:x="891" fg:w="2"/><text x="71.7015%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.4515%" y="629" width="0.1604%" height="15" fill="rgb(253,206,42)" fg:x="891" fg:w="2"/><text x="71.7015%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4515%" y="613" width="0.1604%" height="15" fill="rgb(236,102,18)" fg:x="891" fg:w="2"/><text x="71.7015%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.4515%" y="597" width="0.1604%" height="15" fill="rgb(208,59,49)" fg:x="891" fg:w="2"/><text x="71.7015%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.4515%" y="581" width="0.1604%" height="15" fill="rgb(215,194,28)" fg:x="891" fg:w="2"/><text x="71.7015%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.4515%" y="565" width="0.1604%" height="15" fill="rgb(243,207,11)" fg:x="891" fg:w="2"/><text x="71.7015%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.5317%" y="549" width="0.0802%" height="15" fill="rgb(254,179,35)" fg:x="892" fg:w="1"/><text x="71.7817%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="71.5317%" y="533" width="0.0802%" height="15" fill="rgb(235,97,3)" fg:x="892" fg:w="1"/><text x="71.7817%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="71.6119%" y="725" width="0.0802%" height="15" fill="rgb(215,155,33)" fg:x="893" fg:w="1"/><text x="71.8619%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.6119%" y="709" width="0.0802%" height="15" fill="rgb(223,128,12)" fg:x="893" fg:w="1"/><text x="71.8619%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.6119%" y="741" width="0.1604%" height="15" fill="rgb(208,157,18)" fg:x="893" fg:w="2"/><text x="71.8619%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="71.6921%" y="725" width="0.0802%" height="15" fill="rgb(249,70,54)" fg:x="894" fg:w="1"/><text x="71.9421%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="71.6921%" y="709" width="0.0802%" height="15" fill="rgb(244,118,24)" fg:x="894" fg:w="1"/><text x="71.9421%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.7723%" y="693" width="0.0802%" height="15" fill="rgb(211,54,0)" fg:x="895" fg:w="1"/><text x="72.0223%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7723%" y="677" width="0.0802%" height="15" fill="rgb(245,137,45)" fg:x="895" fg:w="1"/><text x="72.0223%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.8524%" y="677" width="0.0802%" height="15" fill="rgb(232,154,31)" fg:x="896" fg:w="1"/><text x="72.1024%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8524%" y="661" width="0.0802%" height="15" fill="rgb(253,6,39)" fg:x="896" fg:w="1"/><text x="72.1024%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.8524%" y="645" width="0.0802%" height="15" fill="rgb(234,183,24)" fg:x="896" fg:w="1"/><text x="72.1024%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9326%" y="613" width="0.0802%" height="15" fill="rgb(252,84,40)" fg:x="897" fg:w="1"/><text x="72.1826%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.40%)</title><rect x="71.7723%" y="741" width="0.4010%" height="15" fill="rgb(224,65,2)" fg:x="895" fg:w="5"/><text x="72.0223%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (5 samples, 0.40%)</title><rect x="71.7723%" y="725" width="0.4010%" height="15" fill="rgb(229,38,24)" fg:x="895" fg:w="5"/><text x="72.0223%" y="735.50"></text></g><g><title>engine::session::Session::new (5 samples, 0.40%)</title><rect x="71.7723%" y="709" width="0.4010%" height="15" fill="rgb(218,131,50)" fg:x="895" fg:w="5"/><text x="72.0223%" y="719.50"></text></g><g><title>engine::session::Session::initialize (4 samples, 0.32%)</title><rect x="71.8524%" y="693" width="0.3208%" height="15" fill="rgb(233,106,18)" fg:x="896" fg:w="4"/><text x="72.1024%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.24%)</title><rect x="71.9326%" y="677" width="0.2406%" height="15" fill="rgb(220,216,11)" fg:x="897" fg:w="3"/><text x="72.1826%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.24%)</title><rect x="71.9326%" y="661" width="0.2406%" height="15" fill="rgb(251,100,45)" fg:x="897" fg:w="3"/><text x="72.1826%" y="671.50"></text></g><g><title>libloading::safe::Library::new (3 samples, 0.24%)</title><rect x="71.9326%" y="645" width="0.2406%" height="15" fill="rgb(235,143,32)" fg:x="897" fg:w="3"/><text x="72.1826%" y="655.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="71.9326%" y="629" width="0.2406%" height="15" fill="rgb(248,124,34)" fg:x="897" fg:w="3"/><text x="72.1826%" y="639.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="72.0128%" y="613" width="0.1604%" height="15" fill="rgb(225,221,4)" fg:x="898" fg:w="2"/><text x="72.2628%" y="623.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="72.0128%" y="597" width="0.1604%" height="15" fill="rgb(242,27,43)" fg:x="898" fg:w="2"/><text x="72.2628%" y="607.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="72.0128%" y="581" width="0.1604%" height="15" fill="rgb(227,54,8)" fg:x="898" fg:w="2"/><text x="72.2628%" y="591.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="72.0128%" y="565" width="0.1604%" height="15" fill="rgb(253,139,49)" fg:x="898" fg:w="2"/><text x="72.2628%" y="575.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="72.0930%" y="549" width="0.0802%" height="15" fill="rgb(231,26,43)" fg:x="899" fg:w="1"/><text x="72.3430%" y="559.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="72.0930%" y="533" width="0.0802%" height="15" fill="rgb(207,121,39)" fg:x="899" fg:w="1"/><text x="72.3430%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.1732%" y="613" width="0.0802%" height="15" fill="rgb(223,101,35)" fg:x="900" fg:w="1"/><text x="72.4232%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.1732%" y="597" width="0.0802%" height="15" fill="rgb(232,87,23)" fg:x="900" fg:w="1"/><text x="72.4232%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.1732%" y="581" width="0.0802%" height="15" fill="rgb(225,180,29)" fg:x="900" fg:w="1"/><text x="72.4232%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2534%" y="613" width="0.0802%" height="15" fill="rgb(225,25,17)" fg:x="901" fg:w="1"/><text x="72.5034%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2534%" y="597" width="0.0802%" height="15" fill="rgb(223,8,52)" fg:x="901" fg:w="1"/><text x="72.5034%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.2534%" y="581" width="0.0802%" height="15" fill="rgb(246,42,21)" fg:x="901" fg:w="1"/><text x="72.5034%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.2534%" y="565" width="0.0802%" height="15" fill="rgb(205,64,43)" fg:x="901" fg:w="1"/><text x="72.5034%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="72.2534%" y="549" width="0.0802%" height="15" fill="rgb(221,160,13)" fg:x="901" fg:w="1"/><text x="72.5034%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="72.1732%" y="645" width="0.3208%" height="15" fill="rgb(239,58,35)" fg:x="900" fg:w="4"/><text x="72.4232%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="72.1732%" y="629" width="0.3208%" height="15" fill="rgb(251,26,40)" fg:x="900" fg:w="4"/><text x="72.4232%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="72.3336%" y="613" width="0.1604%" height="15" fill="rgb(247,0,4)" fg:x="902" fg:w="2"/><text x="72.5836%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5742%" y="597" width="0.0802%" height="15" fill="rgb(218,130,10)" fg:x="905" fg:w="1"/><text x="72.8242%" y="607.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.72%)</title><rect x="72.1732%" y="725" width="0.7217%" height="15" fill="rgb(239,32,7)" fg:x="900" fg:w="9"/><text x="72.4232%" y="735.50"></text></g><g><title>engine::session::state::State::close (9 samples, 0.72%)</title><rect x="72.1732%" y="709" width="0.7217%" height="15" fill="rgb(210,192,24)" fg:x="900" fg:w="9"/><text x="72.4232%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (9 samples, 0.72%)</title><rect x="72.1732%" y="693" width="0.7217%" height="15" fill="rgb(226,212,17)" fg:x="900" fg:w="9"/><text x="72.4232%" y="703.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (9 samples, 0.72%)</title><rect x="72.1732%" y="677" width="0.7217%" height="15" fill="rgb(219,201,28)" fg:x="900" fg:w="9"/><text x="72.4232%" y="687.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (9 samples, 0.72%)</title><rect x="72.1732%" y="661" width="0.7217%" height="15" fill="rgb(235,207,41)" fg:x="900" fg:w="9"/><text x="72.4232%" y="671.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="72.4940%" y="645" width="0.4010%" height="15" fill="rgb(241,95,54)" fg:x="904" fg:w="5"/><text x="72.7440%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="72.4940%" y="629" width="0.4010%" height="15" fill="rgb(248,12,23)" fg:x="904" fg:w="5"/><text x="72.7440%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="72.4940%" y="613" width="0.4010%" height="15" fill="rgb(228,173,4)" fg:x="904" fg:w="5"/><text x="72.7440%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="72.6544%" y="597" width="0.2406%" height="15" fill="rgb(254,99,5)" fg:x="906" fg:w="3"/><text x="72.9044%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="72.6544%" y="581" width="0.2406%" height="15" fill="rgb(212,184,17)" fg:x="906" fg:w="3"/><text x="72.9044%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.6544%" y="565" width="0.2406%" height="15" fill="rgb(252,174,1)" fg:x="906" fg:w="3"/><text x="72.9044%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.6544%" y="549" width="0.2406%" height="15" fill="rgb(241,118,51)" fg:x="906" fg:w="3"/><text x="72.9044%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.6544%" y="533" width="0.2406%" height="15" fill="rgb(227,94,47)" fg:x="906" fg:w="3"/><text x="72.9044%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="72.7346%" y="517" width="0.1604%" height="15" fill="rgb(229,104,2)" fg:x="907" fg:w="2"/><text x="72.9846%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.8148%" y="501" width="0.0802%" height="15" fill="rgb(219,28,31)" fg:x="908" fg:w="1"/><text x="73.0648%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.8148%" y="485" width="0.0802%" height="15" fill="rgb(233,109,36)" fg:x="908" fg:w="1"/><text x="73.0648%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.8148%" y="469" width="0.0802%" height="15" fill="rgb(246,88,11)" fg:x="908" fg:w="1"/><text x="73.0648%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.8148%" y="453" width="0.0802%" height="15" fill="rgb(209,212,17)" fg:x="908" fg:w="1"/><text x="73.0648%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.8148%" y="437" width="0.0802%" height="15" fill="rgb(243,59,29)" fg:x="908" fg:w="1"/><text x="73.0648%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="72.8949%" y="709" width="0.0802%" height="15" fill="rgb(244,205,48)" fg:x="909" fg:w="1"/><text x="73.1449%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="72.8949%" y="693" width="0.0802%" height="15" fill="rgb(227,30,6)" fg:x="909" fg:w="1"/><text x="73.1449%" y="703.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="72.8949%" y="677" width="0.0802%" height="15" fill="rgb(220,205,48)" fg:x="909" fg:w="1"/><text x="73.1449%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8949%" y="661" width="0.0802%" height="15" fill="rgb(250,94,14)" fg:x="909" fg:w="1"/><text x="73.1449%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8949%" y="645" width="0.0802%" height="15" fill="rgb(216,119,42)" fg:x="909" fg:w="1"/><text x="73.1449%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.8949%" y="629" width="0.0802%" height="15" fill="rgb(232,155,0)" fg:x="909" fg:w="1"/><text x="73.1449%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="72.9751%" y="709" width="0.0802%" height="15" fill="rgb(212,24,32)" fg:x="910" fg:w="1"/><text x="73.2251%" y="719.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="73.0553%" y="693" width="0.0802%" height="15" fill="rgb(216,69,20)" fg:x="911" fg:w="1"/><text x="73.3053%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.0553%" y="677" width="0.0802%" height="15" fill="rgb(229,73,31)" fg:x="911" fg:w="1"/><text x="73.3053%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.0553%" y="661" width="0.0802%" height="15" fill="rgb(224,219,20)" fg:x="911" fg:w="1"/><text x="73.3053%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.0553%" y="645" width="0.0802%" height="15" fill="rgb(215,146,41)" fg:x="911" fg:w="1"/><text x="73.3053%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.0553%" y="629" width="0.0802%" height="15" fill="rgb(244,71,31)" fg:x="911" fg:w="1"/><text x="73.3053%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0553%" y="613" width="0.0802%" height="15" fill="rgb(224,24,11)" fg:x="911" fg:w="1"/><text x="73.3053%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0553%" y="597" width="0.0802%" height="15" fill="rgb(229,76,15)" fg:x="911" fg:w="1"/><text x="73.3053%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0553%" y="581" width="0.0802%" height="15" fill="rgb(209,93,2)" fg:x="911" fg:w="1"/><text x="73.3053%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0553%" y="565" width="0.0802%" height="15" fill="rgb(216,200,50)" fg:x="911" fg:w="1"/><text x="73.3053%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0553%" y="549" width="0.0802%" height="15" fill="rgb(211,67,34)" fg:x="911" fg:w="1"/><text x="73.3053%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0553%" y="533" width="0.0802%" height="15" fill="rgb(225,87,47)" fg:x="911" fg:w="1"/><text x="73.3053%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.0553%" y="517" width="0.0802%" height="15" fill="rgb(217,185,16)" fg:x="911" fg:w="1"/><text x="73.3053%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.0553%" y="501" width="0.0802%" height="15" fill="rgb(205,0,0)" fg:x="911" fg:w="1"/><text x="73.3053%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.0553%" y="485" width="0.0802%" height="15" fill="rgb(207,116,45)" fg:x="911" fg:w="1"/><text x="73.3053%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0553%" y="469" width="0.0802%" height="15" fill="rgb(221,156,26)" fg:x="911" fg:w="1"/><text x="73.3053%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.0553%" y="453" width="0.0802%" height="15" fill="rgb(213,140,4)" fg:x="911" fg:w="1"/><text x="73.3053%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.0553%" y="437" width="0.0802%" height="15" fill="rgb(231,224,15)" fg:x="911" fg:w="1"/><text x="73.3053%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.0553%" y="421" width="0.0802%" height="15" fill="rgb(244,76,20)" fg:x="911" fg:w="1"/><text x="73.3053%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.0553%" y="405" width="0.0802%" height="15" fill="rgb(238,117,7)" fg:x="911" fg:w="1"/><text x="73.3053%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.0553%" y="389" width="0.0802%" height="15" fill="rgb(235,1,10)" fg:x="911" fg:w="1"/><text x="73.3053%" y="399.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="72.8949%" y="725" width="0.3208%" height="15" fill="rgb(216,165,6)" fg:x="909" fg:w="4"/><text x="73.1449%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="73.0553%" y="709" width="0.1604%" height="15" fill="rgb(246,91,35)" fg:x="911" fg:w="2"/><text x="73.3053%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="73.1355%" y="693" width="0.0802%" height="15" fill="rgb(228,96,24)" fg:x="912" fg:w="1"/><text x="73.3855%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="73.1355%" y="677" width="0.0802%" height="15" fill="rgb(254,217,53)" fg:x="912" fg:w="1"/><text x="73.3855%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.1355%" y="661" width="0.0802%" height="15" fill="rgb(209,60,0)" fg:x="912" fg:w="1"/><text x="73.3855%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.1355%" y="645" width="0.0802%" height="15" fill="rgb(250,93,26)" fg:x="912" fg:w="1"/><text x="73.3855%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.1355%" y="629" width="0.0802%" height="15" fill="rgb(211,9,40)" fg:x="912" fg:w="1"/><text x="73.3855%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.1355%" y="613" width="0.0802%" height="15" fill="rgb(242,57,20)" fg:x="912" fg:w="1"/><text x="73.3855%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1355%" y="597" width="0.0802%" height="15" fill="rgb(248,85,48)" fg:x="912" fg:w="1"/><text x="73.3855%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1355%" y="581" width="0.0802%" height="15" fill="rgb(212,117,2)" fg:x="912" fg:w="1"/><text x="73.3855%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.1355%" y="565" width="0.0802%" height="15" fill="rgb(243,19,3)" fg:x="912" fg:w="1"/><text x="73.3855%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1355%" y="549" width="0.0802%" height="15" fill="rgb(232,217,24)" fg:x="912" fg:w="1"/><text x="73.3855%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.1355%" y="533" width="0.0802%" height="15" fill="rgb(224,175,40)" fg:x="912" fg:w="1"/><text x="73.3855%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.1355%" y="517" width="0.0802%" height="15" fill="rgb(212,162,32)" fg:x="912" fg:w="1"/><text x="73.3855%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.1355%" y="501" width="0.0802%" height="15" fill="rgb(215,9,4)" fg:x="912" fg:w="1"/><text x="73.3855%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.1355%" y="485" width="0.0802%" height="15" fill="rgb(242,42,7)" fg:x="912" fg:w="1"/><text x="73.3855%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1355%" y="469" width="0.0802%" height="15" fill="rgb(242,184,45)" fg:x="912" fg:w="1"/><text x="73.3855%" y="479.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="73.2157%" y="725" width="0.0802%" height="15" fill="rgb(228,111,51)" fg:x="913" fg:w="1"/><text x="73.4657%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.2157%" y="709" width="0.0802%" height="15" fill="rgb(236,147,17)" fg:x="913" fg:w="1"/><text x="73.4657%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.2157%" y="693" width="0.0802%" height="15" fill="rgb(210,75,22)" fg:x="913" fg:w="1"/><text x="73.4657%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.2157%" y="677" width="0.0802%" height="15" fill="rgb(217,159,45)" fg:x="913" fg:w="1"/><text x="73.4657%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.2157%" y="661" width="0.0802%" height="15" fill="rgb(245,165,53)" fg:x="913" fg:w="1"/><text x="73.4657%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="73.2157%" y="645" width="0.0802%" height="15" fill="rgb(251,190,50)" fg:x="913" fg:w="1"/><text x="73.4657%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="73.2157%" y="629" width="0.0802%" height="15" fill="rgb(208,203,29)" fg:x="913" fg:w="1"/><text x="73.4657%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2157%" y="613" width="0.0802%" height="15" fill="rgb(207,209,35)" fg:x="913" fg:w="1"/><text x="73.4657%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.2157%" y="597" width="0.0802%" height="15" fill="rgb(230,144,49)" fg:x="913" fg:w="1"/><text x="73.4657%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2157%" y="581" width="0.0802%" height="15" fill="rgb(229,31,6)" fg:x="913" fg:w="1"/><text x="73.4657%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.2157%" y="565" width="0.0802%" height="15" fill="rgb(251,129,24)" fg:x="913" fg:w="1"/><text x="73.4657%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.2157%" y="549" width="0.0802%" height="15" fill="rgb(235,105,15)" fg:x="913" fg:w="1"/><text x="73.4657%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2157%" y="533" width="0.0802%" height="15" fill="rgb(216,52,43)" fg:x="913" fg:w="1"/><text x="73.4657%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.3761%" y="709" width="0.0802%" height="15" fill="rgb(238,144,41)" fg:x="915" fg:w="1"/><text x="73.6261%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.3761%" y="693" width="0.0802%" height="15" fill="rgb(243,63,9)" fg:x="915" fg:w="1"/><text x="73.6261%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3761%" y="677" width="0.0802%" height="15" fill="rgb(246,208,1)" fg:x="915" fg:w="1"/><text x="73.6261%" y="687.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="73.4563%" y="709" width="0.0802%" height="15" fill="rgb(233,182,18)" fg:x="916" fg:w="1"/><text x="73.7063%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="73.4563%" y="693" width="0.0802%" height="15" fill="rgb(242,224,8)" fg:x="916" fg:w="1"/><text x="73.7063%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="73.5365%" y="661" width="0.0802%" height="15" fill="rgb(243,54,37)" fg:x="917" fg:w="1"/><text x="73.7865%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.5365%" y="645" width="0.0802%" height="15" fill="rgb(233,192,12)" fg:x="917" fg:w="1"/><text x="73.7865%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.5365%" y="629" width="0.0802%" height="15" fill="rgb(251,192,53)" fg:x="917" fg:w="1"/><text x="73.7865%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5365%" y="613" width="0.0802%" height="15" fill="rgb(246,141,26)" fg:x="917" fg:w="1"/><text x="73.7865%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="73.5365%" y="709" width="0.2406%" height="15" fill="rgb(239,195,19)" fg:x="917" fg:w="3"/><text x="73.7865%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="73.5365%" y="693" width="0.2406%" height="15" fill="rgb(241,16,39)" fg:x="917" fg:w="3"/><text x="73.7865%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="73.5365%" y="677" width="0.2406%" height="15" fill="rgb(223,13,53)" fg:x="917" fg:w="3"/><text x="73.7865%" y="687.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="73.6167%" y="661" width="0.1604%" height="15" fill="rgb(214,227,0)" fg:x="918" fg:w="2"/><text x="73.8667%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="73.6167%" y="645" width="0.1604%" height="15" fill="rgb(228,103,26)" fg:x="918" fg:w="2"/><text x="73.8667%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.6969%" y="629" width="0.0802%" height="15" fill="rgb(254,177,53)" fg:x="919" fg:w="1"/><text x="73.9469%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.6969%" y="613" width="0.0802%" height="15" fill="rgb(208,201,34)" fg:x="919" fg:w="1"/><text x="73.9469%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.6969%" y="597" width="0.0802%" height="15" fill="rgb(212,39,5)" fg:x="919" fg:w="1"/><text x="73.9469%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.6969%" y="581" width="0.0802%" height="15" fill="rgb(246,117,3)" fg:x="919" fg:w="1"/><text x="73.9469%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6969%" y="565" width="0.0802%" height="15" fill="rgb(244,118,39)" fg:x="919" fg:w="1"/><text x="73.9469%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.6969%" y="549" width="0.0802%" height="15" fill="rgb(241,64,10)" fg:x="919" fg:w="1"/><text x="73.9469%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6969%" y="533" width="0.0802%" height="15" fill="rgb(229,39,44)" fg:x="919" fg:w="1"/><text x="73.9469%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.6969%" y="517" width="0.0802%" height="15" fill="rgb(230,226,3)" fg:x="919" fg:w="1"/><text x="73.9469%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6969%" y="501" width="0.0802%" height="15" fill="rgb(222,13,42)" fg:x="919" fg:w="1"/><text x="73.9469%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.6969%" y="485" width="0.0802%" height="15" fill="rgb(247,180,54)" fg:x="919" fg:w="1"/><text x="73.9469%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6969%" y="469" width="0.0802%" height="15" fill="rgb(205,96,16)" fg:x="919" fg:w="1"/><text x="73.9469%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6969%" y="453" width="0.0802%" height="15" fill="rgb(205,100,21)" fg:x="919" fg:w="1"/><text x="73.9469%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="73.7771%" y="597" width="0.1604%" height="15" fill="rgb(248,51,4)" fg:x="920" fg:w="2"/><text x="74.0271%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="73.7771%" y="581" width="0.1604%" height="15" fill="rgb(217,197,30)" fg:x="920" fg:w="2"/><text x="74.0271%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="73.7771%" y="565" width="0.1604%" height="15" fill="rgb(240,179,40)" fg:x="920" fg:w="2"/><text x="74.0271%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.8573%" y="549" width="0.0802%" height="15" fill="rgb(212,185,35)" fg:x="921" fg:w="1"/><text x="74.1073%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.8573%" y="533" width="0.0802%" height="15" fill="rgb(251,222,31)" fg:x="921" fg:w="1"/><text x="74.1073%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9374%" y="581" width="0.0802%" height="15" fill="rgb(208,140,36)" fg:x="922" fg:w="1"/><text x="74.1874%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9374%" y="565" width="0.0802%" height="15" fill="rgb(220,148,1)" fg:x="922" fg:w="1"/><text x="74.1874%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9374%" y="549" width="0.0802%" height="15" fill="rgb(254,4,28)" fg:x="922" fg:w="1"/><text x="74.1874%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9374%" y="533" width="0.0802%" height="15" fill="rgb(222,185,44)" fg:x="922" fg:w="1"/><text x="74.1874%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9374%" y="517" width="0.0802%" height="15" fill="rgb(215,74,39)" fg:x="922" fg:w="1"/><text x="74.1874%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.9374%" y="501" width="0.0802%" height="15" fill="rgb(247,86,4)" fg:x="922" fg:w="1"/><text x="74.1874%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.9374%" y="485" width="0.0802%" height="15" fill="rgb(231,105,32)" fg:x="922" fg:w="1"/><text x="74.1874%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.9374%" y="469" width="0.0802%" height="15" fill="rgb(222,65,35)" fg:x="922" fg:w="1"/><text x="74.1874%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.9374%" y="453" width="0.0802%" height="15" fill="rgb(218,145,35)" fg:x="922" fg:w="1"/><text x="74.1874%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.9374%" y="437" width="0.0802%" height="15" fill="rgb(208,7,15)" fg:x="922" fg:w="1"/><text x="74.1874%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.9374%" y="421" width="0.0802%" height="15" fill="rgb(209,83,13)" fg:x="922" fg:w="1"/><text x="74.1874%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.9374%" y="405" width="0.0802%" height="15" fill="rgb(218,3,10)" fg:x="922" fg:w="1"/><text x="74.1874%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="73.7771%" y="613" width="0.3208%" height="15" fill="rgb(211,219,4)" fg:x="920" fg:w="4"/><text x="74.0271%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.9374%" y="597" width="0.1604%" height="15" fill="rgb(228,194,12)" fg:x="922" fg:w="2"/><text x="74.1874%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.0176%" y="581" width="0.0802%" height="15" fill="rgb(210,175,7)" fg:x="923" fg:w="1"/><text x="74.2676%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.0176%" y="565" width="0.0802%" height="15" fill="rgb(243,132,6)" fg:x="923" fg:w="1"/><text x="74.2676%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.0176%" y="549" width="0.0802%" height="15" fill="rgb(207,72,18)" fg:x="923" fg:w="1"/><text x="74.2676%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0978%" y="533" width="0.0802%" height="15" fill="rgb(236,1,18)" fg:x="924" fg:w="1"/><text x="74.3478%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.0978%" y="613" width="0.1604%" height="15" fill="rgb(227,0,18)" fg:x="924" fg:w="2"/><text x="74.3478%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="74.0978%" y="597" width="0.1604%" height="15" fill="rgb(247,37,5)" fg:x="924" fg:w="2"/><text x="74.3478%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.0978%" y="581" width="0.1604%" height="15" fill="rgb(237,179,24)" fg:x="924" fg:w="2"/><text x="74.3478%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.0978%" y="565" width="0.1604%" height="15" fill="rgb(226,53,20)" fg:x="924" fg:w="2"/><text x="74.3478%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.0978%" y="549" width="0.1604%" height="15" fill="rgb(247,75,7)" fg:x="924" fg:w="2"/><text x="74.3478%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1780%" y="533" width="0.0802%" height="15" fill="rgb(233,96,12)" fg:x="925" fg:w="1"/><text x="74.4280%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1780%" y="517" width="0.0802%" height="15" fill="rgb(224,125,0)" fg:x="925" fg:w="1"/><text x="74.4280%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1780%" y="501" width="0.0802%" height="15" fill="rgb(224,92,25)" fg:x="925" fg:w="1"/><text x="74.4280%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3384%" y="565" width="0.0802%" height="15" fill="rgb(224,42,24)" fg:x="927" fg:w="1"/><text x="74.5884%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3384%" y="549" width="0.0802%" height="15" fill="rgb(234,132,49)" fg:x="927" fg:w="1"/><text x="74.5884%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.3384%" y="533" width="0.0802%" height="15" fill="rgb(248,100,35)" fg:x="927" fg:w="1"/><text x="74.5884%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.4186%" y="565" width="0.0802%" height="15" fill="rgb(239,94,40)" fg:x="928" fg:w="1"/><text x="74.6686%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.4186%" y="549" width="0.0802%" height="15" fill="rgb(235,139,28)" fg:x="928" fg:w="1"/><text x="74.6686%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.4186%" y="533" width="0.0802%" height="15" fill="rgb(217,144,7)" fg:x="928" fg:w="1"/><text x="74.6686%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.7394%" y="469" width="0.0802%" height="15" fill="rgb(227,55,4)" fg:x="932" fg:w="1"/><text x="74.9894%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7394%" y="453" width="0.0802%" height="15" fill="rgb(252,82,54)" fg:x="932" fg:w="1"/><text x="74.9894%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.7394%" y="437" width="0.0802%" height="15" fill="rgb(245,172,4)" fg:x="932" fg:w="1"/><text x="74.9894%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7394%" y="421" width="0.0802%" height="15" fill="rgb(207,26,27)" fg:x="932" fg:w="1"/><text x="74.9894%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7394%" y="405" width="0.0802%" height="15" fill="rgb(252,98,18)" fg:x="932" fg:w="1"/><text x="74.9894%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="74.5790%" y="533" width="0.3208%" height="15" fill="rgb(244,8,26)" fg:x="930" fg:w="4"/><text x="74.8290%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="74.5790%" y="517" width="0.3208%" height="15" fill="rgb(237,173,45)" fg:x="930" fg:w="4"/><text x="74.8290%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="74.5790%" y="501" width="0.3208%" height="15" fill="rgb(208,213,49)" fg:x="930" fg:w="4"/><text x="74.8290%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="74.5790%" y="485" width="0.3208%" height="15" fill="rgb(212,122,37)" fg:x="930" fg:w="4"/><text x="74.8290%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8196%" y="469" width="0.0802%" height="15" fill="rgb(213,80,17)" fg:x="933" fg:w="1"/><text x="75.0696%" y="479.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="73.7771%" y="709" width="1.2029%" height="15" fill="rgb(206,210,43)" fg:x="920" fg:w="15"/><text x="74.0271%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (15 samples, 1.20%)</title><rect x="73.7771%" y="693" width="1.2029%" height="15" fill="rgb(229,214,3)" fg:x="920" fg:w="15"/><text x="74.0271%" y="703.50"></text></g><g><title>engine::session::state::State::close (15 samples, 1.20%)</title><rect x="73.7771%" y="677" width="1.2029%" height="15" fill="rgb(235,213,29)" fg:x="920" fg:w="15"/><text x="74.0271%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (15 samples, 1.20%)</title><rect x="73.7771%" y="661" width="1.2029%" height="15" fill="rgb(248,135,26)" fg:x="920" fg:w="15"/><text x="74.0271%" y="671.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (15 samples, 1.20%)</title><rect x="73.7771%" y="645" width="1.2029%" height="15" fill="rgb(242,188,12)" fg:x="920" fg:w="15"/><text x="74.0271%" y="655.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.20%)</title><rect x="73.7771%" y="629" width="1.2029%" height="15" fill="rgb(245,38,12)" fg:x="920" fg:w="15"/><text x="74.0271%" y="639.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="74.2582%" y="613" width="0.7217%" height="15" fill="rgb(218,42,13)" fg:x="926" fg:w="9"/><text x="74.5082%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="74.2582%" y="597" width="0.7217%" height="15" fill="rgb(238,132,49)" fg:x="926" fg:w="9"/><text x="74.5082%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="74.2582%" y="581" width="0.7217%" height="15" fill="rgb(209,196,19)" fg:x="926" fg:w="9"/><text x="74.5082%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="74.4988%" y="565" width="0.4812%" height="15" fill="rgb(244,131,22)" fg:x="929" fg:w="6"/><text x="74.7488%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="74.5790%" y="549" width="0.4010%" height="15" fill="rgb(223,18,34)" fg:x="930" fg:w="5"/><text x="74.8290%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.8998%" y="533" width="0.0802%" height="15" fill="rgb(252,124,54)" fg:x="934" fg:w="1"/><text x="75.1498%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9800%" y="597" width="0.0802%" height="15" fill="rgb(229,106,42)" fg:x="935" fg:w="1"/><text x="75.2300%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9800%" y="581" width="0.0802%" height="15" fill="rgb(221,129,1)" fg:x="935" fg:w="1"/><text x="75.2300%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9800%" y="565" width="0.0802%" height="15" fill="rgb(229,74,15)" fg:x="935" fg:w="1"/><text x="75.2300%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.9800%" y="549" width="0.0802%" height="15" fill="rgb(210,206,50)" fg:x="935" fg:w="1"/><text x="75.2300%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="74.9800%" y="693" width="0.1604%" height="15" fill="rgb(251,114,31)" fg:x="935" fg:w="2"/><text x="75.2300%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="74.9800%" y="677" width="0.1604%" height="15" fill="rgb(215,225,28)" fg:x="935" fg:w="2"/><text x="75.2300%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="74.9800%" y="661" width="0.1604%" height="15" fill="rgb(237,109,14)" fg:x="935" fg:w="2"/><text x="75.2300%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="74.9800%" y="645" width="0.1604%" height="15" fill="rgb(230,13,37)" fg:x="935" fg:w="2"/><text x="75.2300%" y="655.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="74.9800%" y="629" width="0.1604%" height="15" fill="rgb(231,40,28)" fg:x="935" fg:w="2"/><text x="75.2300%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="74.9800%" y="613" width="0.1604%" height="15" fill="rgb(231,202,18)" fg:x="935" fg:w="2"/><text x="75.2300%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0601%" y="597" width="0.0802%" height="15" fill="rgb(225,33,18)" fg:x="936" fg:w="1"/><text x="75.3101%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.0601%" y="581" width="0.0802%" height="15" fill="rgb(223,64,47)" fg:x="936" fg:w="1"/><text x="75.3101%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0601%" y="565" width="0.0802%" height="15" fill="rgb(234,114,13)" fg:x="936" fg:w="1"/><text x="75.3101%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.0601%" y="549" width="0.0802%" height="15" fill="rgb(248,56,40)" fg:x="936" fg:w="1"/><text x="75.3101%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.0601%" y="533" width="0.0802%" height="15" fill="rgb(221,194,21)" fg:x="936" fg:w="1"/><text x="75.3101%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0601%" y="517" width="0.0802%" height="15" fill="rgb(242,108,46)" fg:x="936" fg:w="1"/><text x="75.3101%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.0601%" y="501" width="0.0802%" height="15" fill="rgb(220,106,10)" fg:x="936" fg:w="1"/><text x="75.3101%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0601%" y="485" width="0.0802%" height="15" fill="rgb(211,88,4)" fg:x="936" fg:w="1"/><text x="75.3101%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.0601%" y="469" width="0.0802%" height="15" fill="rgb(214,95,34)" fg:x="936" fg:w="1"/><text x="75.3101%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0601%" y="453" width="0.0802%" height="15" fill="rgb(250,160,33)" fg:x="936" fg:w="1"/><text x="75.3101%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0601%" y="437" width="0.0802%" height="15" fill="rgb(225,29,10)" fg:x="936" fg:w="1"/><text x="75.3101%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.1403%" y="645" width="0.0802%" height="15" fill="rgb(224,28,30)" fg:x="937" fg:w="1"/><text x="75.3903%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.1403%" y="629" width="0.0802%" height="15" fill="rgb(231,77,4)" fg:x="937" fg:w="1"/><text x="75.3903%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.1403%" y="613" width="0.0802%" height="15" fill="rgb(209,63,21)" fg:x="937" fg:w="1"/><text x="75.3903%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1403%" y="597" width="0.0802%" height="15" fill="rgb(226,22,11)" fg:x="937" fg:w="1"/><text x="75.3903%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1403%" y="581" width="0.0802%" height="15" fill="rgb(216,82,30)" fg:x="937" fg:w="1"/><text x="75.3903%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1403%" y="565" width="0.0802%" height="15" fill="rgb(246,227,38)" fg:x="937" fg:w="1"/><text x="75.3903%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1403%" y="549" width="0.0802%" height="15" fill="rgb(251,203,53)" fg:x="937" fg:w="1"/><text x="75.3903%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.1403%" y="533" width="0.0802%" height="15" fill="rgb(254,101,1)" fg:x="937" fg:w="1"/><text x="75.3903%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.1403%" y="517" width="0.0802%" height="15" fill="rgb(241,180,5)" fg:x="937" fg:w="1"/><text x="75.3903%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.1403%" y="501" width="0.0802%" height="15" fill="rgb(218,168,4)" fg:x="937" fg:w="1"/><text x="75.3903%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.1403%" y="485" width="0.0802%" height="15" fill="rgb(224,223,32)" fg:x="937" fg:w="1"/><text x="75.3903%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.1403%" y="469" width="0.0802%" height="15" fill="rgb(236,106,22)" fg:x="937" fg:w="1"/><text x="75.3903%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.1403%" y="453" width="0.0802%" height="15" fill="rgb(206,121,5)" fg:x="937" fg:w="1"/><text x="75.3903%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.1403%" y="437" width="0.0802%" height="15" fill="rgb(233,87,28)" fg:x="937" fg:w="1"/><text x="75.3903%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.1403%" y="421" width="0.0802%" height="15" fill="rgb(236,137,17)" fg:x="937" fg:w="1"/><text x="75.3903%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.1403%" y="405" width="0.0802%" height="15" fill="rgb(209,183,38)" fg:x="937" fg:w="1"/><text x="75.3903%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.1403%" y="389" width="0.0802%" height="15" fill="rgb(206,162,44)" fg:x="937" fg:w="1"/><text x="75.3903%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.1403%" y="373" width="0.0802%" height="15" fill="rgb(237,70,39)" fg:x="937" fg:w="1"/><text x="75.3903%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.1403%" y="357" width="0.0802%" height="15" fill="rgb(212,176,5)" fg:x="937" fg:w="1"/><text x="75.3903%" y="367.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="75.1403%" y="677" width="0.1604%" height="15" fill="rgb(232,95,16)" fg:x="937" fg:w="2"/><text x="75.3903%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="75.1403%" y="661" width="0.1604%" height="15" fill="rgb(219,115,35)" fg:x="937" fg:w="2"/><text x="75.3903%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="75.2205%" y="645" width="0.0802%" height="15" fill="rgb(251,67,27)" fg:x="938" fg:w="1"/><text x="75.4705%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.2205%" y="629" width="0.0802%" height="15" fill="rgb(222,95,40)" fg:x="938" fg:w="1"/><text x="75.4705%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.2205%" y="613" width="0.0802%" height="15" fill="rgb(250,35,16)" fg:x="938" fg:w="1"/><text x="75.4705%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2205%" y="597" width="0.0802%" height="15" fill="rgb(224,86,44)" fg:x="938" fg:w="1"/><text x="75.4705%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2205%" y="581" width="0.0802%" height="15" fill="rgb(237,53,53)" fg:x="938" fg:w="1"/><text x="75.4705%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2205%" y="565" width="0.0802%" height="15" fill="rgb(208,171,33)" fg:x="938" fg:w="1"/><text x="75.4705%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.2205%" y="549" width="0.0802%" height="15" fill="rgb(222,64,27)" fg:x="938" fg:w="1"/><text x="75.4705%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.2205%" y="533" width="0.0802%" height="15" fill="rgb(221,121,35)" fg:x="938" fg:w="1"/><text x="75.4705%" y="543.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.3007%" y="677" width="0.0802%" height="15" fill="rgb(228,137,42)" fg:x="939" fg:w="1"/><text x="75.5507%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3007%" y="661" width="0.0802%" height="15" fill="rgb(227,54,21)" fg:x="939" fg:w="1"/><text x="75.5507%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3007%" y="645" width="0.0802%" height="15" fill="rgb(240,168,33)" fg:x="939" fg:w="1"/><text x="75.5507%" y="655.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="74.9800%" y="709" width="0.4812%" height="15" fill="rgb(243,159,6)" fg:x="935" fg:w="6"/><text x="75.2300%" y="719.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="75.1403%" y="693" width="0.3208%" height="15" fill="rgb(205,211,41)" fg:x="937" fg:w="4"/><text x="75.3903%" y="703.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="75.3809%" y="677" width="0.0802%" height="15" fill="rgb(253,30,1)" fg:x="940" fg:w="1"/><text x="75.6309%" y="687.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="75.3809%" y="661" width="0.0802%" height="15" fill="rgb(226,80,18)" fg:x="940" fg:w="1"/><text x="75.6309%" y="671.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="75.3809%" y="645" width="0.0802%" height="15" fill="rgb(253,156,46)" fg:x="940" fg:w="1"/><text x="75.6309%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="75.3809%" y="629" width="0.0802%" height="15" fill="rgb(248,87,27)" fg:x="940" fg:w="1"/><text x="75.6309%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.3809%" y="613" width="0.0802%" height="15" fill="rgb(227,122,2)" fg:x="940" fg:w="1"/><text x="75.6309%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.3809%" y="597" width="0.0802%" height="15" fill="rgb(229,94,39)" fg:x="940" fg:w="1"/><text x="75.6309%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.3809%" y="581" width="0.0802%" height="15" fill="rgb(225,173,31)" fg:x="940" fg:w="1"/><text x="75.6309%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.3809%" y="565" width="0.0802%" height="15" fill="rgb(239,176,30)" fg:x="940" fg:w="1"/><text x="75.6309%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.3809%" y="549" width="0.0802%" height="15" fill="rgb(212,104,21)" fg:x="940" fg:w="1"/><text x="75.6309%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.3809%" y="533" width="0.0802%" height="15" fill="rgb(240,209,40)" fg:x="940" fg:w="1"/><text x="75.6309%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="75.4611%" y="709" width="0.1604%" height="15" fill="rgb(234,195,5)" fg:x="941" fg:w="2"/><text x="75.7111%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="75.4611%" y="693" width="0.1604%" height="15" fill="rgb(238,213,1)" fg:x="941" fg:w="2"/><text x="75.7111%" y="703.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="75.4611%" y="677" width="0.1604%" height="15" fill="rgb(235,182,54)" fg:x="941" fg:w="2"/><text x="75.7111%" y="687.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="75.4611%" y="661" width="0.1604%" height="15" fill="rgb(229,50,46)" fg:x="941" fg:w="2"/><text x="75.7111%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5413%" y="645" width="0.0802%" height="15" fill="rgb(219,145,13)" fg:x="942" fg:w="1"/><text x="75.7913%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.5413%" y="629" width="0.0802%" height="15" fill="rgb(220,226,10)" fg:x="942" fg:w="1"/><text x="75.7913%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5413%" y="613" width="0.0802%" height="15" fill="rgb(248,47,30)" fg:x="942" fg:w="1"/><text x="75.7913%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.5413%" y="597" width="0.0802%" height="15" fill="rgb(231,209,44)" fg:x="942" fg:w="1"/><text x="75.7913%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.5413%" y="581" width="0.0802%" height="15" fill="rgb(209,80,30)" fg:x="942" fg:w="1"/><text x="75.7913%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5413%" y="565" width="0.0802%" height="15" fill="rgb(232,9,14)" fg:x="942" fg:w="1"/><text x="75.7913%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.5413%" y="549" width="0.0802%" height="15" fill="rgb(243,91,43)" fg:x="942" fg:w="1"/><text x="75.7913%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.5413%" y="533" width="0.0802%" height="15" fill="rgb(231,90,52)" fg:x="942" fg:w="1"/><text x="75.7913%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.6215%" y="677" width="0.0802%" height="15" fill="rgb(253,192,44)" fg:x="943" fg:w="1"/><text x="75.8715%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.6215%" y="661" width="0.0802%" height="15" fill="rgb(241,66,31)" fg:x="943" fg:w="1"/><text x="75.8715%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.6215%" y="645" width="0.0802%" height="15" fill="rgb(235,81,37)" fg:x="943" fg:w="1"/><text x="75.8715%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.6215%" y="629" width="0.0802%" height="15" fill="rgb(223,221,9)" fg:x="943" fg:w="1"/><text x="75.8715%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6215%" y="613" width="0.0802%" height="15" fill="rgb(242,180,7)" fg:x="943" fg:w="1"/><text x="75.8715%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="75.7017%" y="677" width="0.0802%" height="15" fill="rgb(243,78,19)" fg:x="944" fg:w="1"/><text x="75.9517%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="75.7017%" y="661" width="0.0802%" height="15" fill="rgb(233,23,17)" fg:x="944" fg:w="1"/><text x="75.9517%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.7017%" y="645" width="0.0802%" height="15" fill="rgb(252,122,45)" fg:x="944" fg:w="1"/><text x="75.9517%" y="655.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.7017%" y="629" width="0.0802%" height="15" fill="rgb(247,108,20)" fg:x="944" fg:w="1"/><text x="75.9517%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7017%" y="613" width="0.0802%" height="15" fill="rgb(235,84,21)" fg:x="944" fg:w="1"/><text x="75.9517%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="75.6215%" y="693" width="0.2406%" height="15" fill="rgb(247,129,10)" fg:x="943" fg:w="3"/><text x="75.8715%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.7819%" y="677" width="0.0802%" height="15" fill="rgb(208,173,14)" fg:x="945" fg:w="1"/><text x="76.0319%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="75.7819%" y="661" width="0.0802%" height="15" fill="rgb(236,31,38)" fg:x="945" fg:w="1"/><text x="76.0319%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="75.7819%" y="645" width="0.0802%" height="15" fill="rgb(232,65,17)" fg:x="945" fg:w="1"/><text x="76.0319%" y="655.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="75.7819%" y="629" width="0.0802%" height="15" fill="rgb(224,45,49)" fg:x="945" fg:w="1"/><text x="76.0319%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.7819%" y="613" width="0.0802%" height="15" fill="rgb(225,2,53)" fg:x="945" fg:w="1"/><text x="76.0319%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7819%" y="597" width="0.0802%" height="15" fill="rgb(248,210,53)" fg:x="945" fg:w="1"/><text x="76.0319%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.7819%" y="581" width="0.0802%" height="15" fill="rgb(211,1,30)" fg:x="945" fg:w="1"/><text x="76.0319%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7819%" y="565" width="0.0802%" height="15" fill="rgb(224,96,15)" fg:x="945" fg:w="1"/><text x="76.0319%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7819%" y="549" width="0.0802%" height="15" fill="rgb(252,45,11)" fg:x="945" fg:w="1"/><text x="76.0319%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7819%" y="533" width="0.0802%" height="15" fill="rgb(220,125,38)" fg:x="945" fg:w="1"/><text x="76.0319%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7819%" y="517" width="0.0802%" height="15" fill="rgb(243,161,33)" fg:x="945" fg:w="1"/><text x="76.0319%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (33 samples, 2.65%)</title><rect x="73.2959%" y="725" width="2.6464%" height="15" fill="rgb(248,197,34)" fg:x="914" fg:w="33"/><text x="73.5459%" y="735.50">pl..</text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="75.6215%" y="709" width="0.3208%" height="15" fill="rgb(228,165,23)" fg:x="943" fg:w="4"/><text x="75.8715%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="75.8621%" y="693" width="0.0802%" height="15" fill="rgb(236,94,38)" fg:x="946" fg:w="1"/><text x="76.1121%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="75.8621%" y="677" width="0.0802%" height="15" fill="rgb(220,13,23)" fg:x="946" fg:w="1"/><text x="76.1121%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="75.8621%" y="661" width="0.0802%" height="15" fill="rgb(234,26,39)" fg:x="946" fg:w="1"/><text x="76.1121%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.8621%" y="645" width="0.0802%" height="15" fill="rgb(205,117,44)" fg:x="946" fg:w="1"/><text x="76.1121%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.8621%" y="629" width="0.0802%" height="15" fill="rgb(250,42,2)" fg:x="946" fg:w="1"/><text x="76.1121%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.8621%" y="613" width="0.0802%" height="15" fill="rgb(223,83,14)" fg:x="946" fg:w="1"/><text x="76.1121%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8621%" y="597" width="0.0802%" height="15" fill="rgb(241,147,50)" fg:x="946" fg:w="1"/><text x="76.1121%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8621%" y="581" width="0.0802%" height="15" fill="rgb(218,90,6)" fg:x="946" fg:w="1"/><text x="76.1121%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8621%" y="565" width="0.0802%" height="15" fill="rgb(210,191,5)" fg:x="946" fg:w="1"/><text x="76.1121%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8621%" y="549" width="0.0802%" height="15" fill="rgb(225,139,19)" fg:x="946" fg:w="1"/><text x="76.1121%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.8621%" y="533" width="0.0802%" height="15" fill="rgb(210,1,33)" fg:x="946" fg:w="1"/><text x="76.1121%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8621%" y="517" width="0.0802%" height="15" fill="rgb(213,50,3)" fg:x="946" fg:w="1"/><text x="76.1121%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8621%" y="501" width="0.0802%" height="15" fill="rgb(234,227,4)" fg:x="946" fg:w="1"/><text x="76.1121%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8621%" y="485" width="0.0802%" height="15" fill="rgb(246,63,5)" fg:x="946" fg:w="1"/><text x="76.1121%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8621%" y="469" width="0.0802%" height="15" fill="rgb(245,136,27)" fg:x="946" fg:w="1"/><text x="76.1121%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8621%" y="453" width="0.0802%" height="15" fill="rgb(247,199,27)" fg:x="946" fg:w="1"/><text x="76.1121%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="75.9423%" y="725" width="0.0802%" height="15" fill="rgb(252,158,49)" fg:x="947" fg:w="1"/><text x="76.1923%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="75.9423%" y="709" width="0.0802%" height="15" fill="rgb(254,73,1)" fg:x="947" fg:w="1"/><text x="76.1923%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.9423%" y="693" width="0.0802%" height="15" fill="rgb(248,93,19)" fg:x="947" fg:w="1"/><text x="76.1923%" y="703.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="75.9423%" y="677" width="0.0802%" height="15" fill="rgb(206,67,5)" fg:x="947" fg:w="1"/><text x="76.1923%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="75.9423%" y="661" width="0.0802%" height="15" fill="rgb(209,210,4)" fg:x="947" fg:w="1"/><text x="76.1923%" y="671.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="75.9423%" y="645" width="0.0802%" height="15" fill="rgb(214,185,36)" fg:x="947" fg:w="1"/><text x="76.1923%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.0225%" y="613" width="0.0802%" height="15" fill="rgb(233,191,26)" fg:x="948" fg:w="1"/><text x="76.2725%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0225%" y="597" width="0.0802%" height="15" fill="rgb(248,94,17)" fg:x="948" fg:w="1"/><text x="76.2725%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (50 samples, 4.01%)</title><rect x="72.1732%" y="741" width="4.0096%" height="15" fill="rgb(250,64,4)" fg:x="900" fg:w="50"/><text x="72.4232%" y="751.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="76.0225%" y="725" width="0.1604%" height="15" fill="rgb(218,41,53)" fg:x="948" fg:w="2"/><text x="76.2725%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.0225%" y="709" width="0.1604%" height="15" fill="rgb(251,176,28)" fg:x="948" fg:w="2"/><text x="76.2725%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="76.0225%" y="693" width="0.1604%" height="15" fill="rgb(247,22,9)" fg:x="948" fg:w="2"/><text x="76.2725%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="76.0225%" y="677" width="0.1604%" height="15" fill="rgb(218,201,14)" fg:x="948" fg:w="2"/><text x="76.2725%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="76.0225%" y="661" width="0.1604%" height="15" fill="rgb(218,94,10)" fg:x="948" fg:w="2"/><text x="76.2725%" y="671.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="76.0225%" y="645" width="0.1604%" height="15" fill="rgb(222,183,52)" fg:x="948" fg:w="2"/><text x="76.2725%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="76.0225%" y="629" width="0.1604%" height="15" fill="rgb(242,140,25)" fg:x="948" fg:w="2"/><text x="76.2725%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1026%" y="613" width="0.0802%" height="15" fill="rgb(235,197,38)" fg:x="949" fg:w="1"/><text x="76.3526%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1026%" y="597" width="0.0802%" height="15" fill="rgb(237,136,15)" fg:x="949" fg:w="1"/><text x="76.3526%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1026%" y="581" width="0.0802%" height="15" fill="rgb(223,44,49)" fg:x="949" fg:w="1"/><text x="76.3526%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1026%" y="565" width="0.0802%" height="15" fill="rgb(227,71,15)" fg:x="949" fg:w="1"/><text x="76.3526%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.1026%" y="549" width="0.0802%" height="15" fill="rgb(225,153,20)" fg:x="949" fg:w="1"/><text x="76.3526%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1026%" y="533" width="0.0802%" height="15" fill="rgb(210,190,26)" fg:x="949" fg:w="1"/><text x="76.3526%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1026%" y="517" width="0.0802%" height="15" fill="rgb(223,147,5)" fg:x="949" fg:w="1"/><text x="76.3526%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1026%" y="501" width="0.0802%" height="15" fill="rgb(207,14,23)" fg:x="949" fg:w="1"/><text x="76.3526%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="76.1026%" y="485" width="0.0802%" height="15" fill="rgb(211,195,53)" fg:x="949" fg:w="1"/><text x="76.3526%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="76.1828%" y="741" width="0.0802%" height="15" fill="rgb(237,75,46)" fg:x="950" fg:w="1"/><text x="76.4328%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.1828%" y="725" width="0.0802%" height="15" fill="rgb(254,55,14)" fg:x="950" fg:w="1"/><text x="76.4328%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="76.1828%" y="709" width="0.0802%" height="15" fill="rgb(230,185,30)" fg:x="950" fg:w="1"/><text x="76.4328%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.2630%" y="677" width="0.0802%" height="15" fill="rgb(220,14,11)" fg:x="951" fg:w="1"/><text x="76.5130%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.2630%" y="661" width="0.0802%" height="15" fill="rgb(215,169,44)" fg:x="951" fg:w="1"/><text x="76.5130%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.3432%" y="629" width="0.1604%" height="15" fill="rgb(253,203,20)" fg:x="952" fg:w="2"/><text x="76.5932%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.3432%" y="613" width="0.1604%" height="15" fill="rgb(229,225,17)" fg:x="952" fg:w="2"/><text x="76.5932%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.4234%" y="597" width="0.0802%" height="15" fill="rgb(236,76,26)" fg:x="953" fg:w="1"/><text x="76.6734%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.4234%" y="581" width="0.0802%" height="15" fill="rgb(234,15,30)" fg:x="953" fg:w="1"/><text x="76.6734%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5036%" y="629" width="0.0802%" height="15" fill="rgb(211,113,48)" fg:x="954" fg:w="1"/><text x="76.7536%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.5036%" y="613" width="0.0802%" height="15" fill="rgb(221,31,36)" fg:x="954" fg:w="1"/><text x="76.7536%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5036%" y="597" width="0.0802%" height="15" fill="rgb(215,118,52)" fg:x="954" fg:w="1"/><text x="76.7536%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.5036%" y="581" width="0.0802%" height="15" fill="rgb(241,151,27)" fg:x="954" fg:w="1"/><text x="76.7536%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.5036%" y="565" width="0.0802%" height="15" fill="rgb(253,51,3)" fg:x="954" fg:w="1"/><text x="76.7536%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.5036%" y="549" width="0.0802%" height="15" fill="rgb(216,201,24)" fg:x="954" fg:w="1"/><text x="76.7536%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.5036%" y="533" width="0.0802%" height="15" fill="rgb(231,107,4)" fg:x="954" fg:w="1"/><text x="76.7536%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.5036%" y="517" width="0.0802%" height="15" fill="rgb(243,97,54)" fg:x="954" fg:w="1"/><text x="76.7536%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.5036%" y="501" width="0.0802%" height="15" fill="rgb(221,32,51)" fg:x="954" fg:w="1"/><text x="76.7536%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.5036%" y="485" width="0.0802%" height="15" fill="rgb(218,171,35)" fg:x="954" fg:w="1"/><text x="76.7536%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="76.3432%" y="661" width="0.3208%" height="15" fill="rgb(214,20,53)" fg:x="952" fg:w="4"/><text x="76.5932%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="76.3432%" y="645" width="0.3208%" height="15" fill="rgb(239,9,52)" fg:x="952" fg:w="4"/><text x="76.5932%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.5838%" y="629" width="0.0802%" height="15" fill="rgb(215,114,45)" fg:x="955" fg:w="1"/><text x="76.8338%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.5838%" y="613" width="0.0802%" height="15" fill="rgb(208,118,9)" fg:x="955" fg:w="1"/><text x="76.8338%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6640%" y="661" width="0.0802%" height="15" fill="rgb(235,7,39)" fg:x="956" fg:w="1"/><text x="76.9140%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.6640%" y="645" width="0.0802%" height="15" fill="rgb(243,225,15)" fg:x="956" fg:w="1"/><text x="76.9140%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6640%" y="629" width="0.0802%" height="15" fill="rgb(225,216,18)" fg:x="956" fg:w="1"/><text x="76.9140%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.6640%" y="613" width="0.0802%" height="15" fill="rgb(233,36,38)" fg:x="956" fg:w="1"/><text x="76.9140%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7442%" y="629" width="0.0802%" height="15" fill="rgb(239,88,23)" fg:x="957" fg:w="1"/><text x="76.9942%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9046%" y="597" width="0.0802%" height="15" fill="rgb(219,181,35)" fg:x="959" fg:w="1"/><text x="77.1546%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="76.7442%" y="645" width="0.4010%" height="15" fill="rgb(215,18,46)" fg:x="957" fg:w="5"/><text x="76.9942%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="76.8244%" y="629" width="0.3208%" height="15" fill="rgb(241,38,11)" fg:x="958" fg:w="4"/><text x="77.0744%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="76.8244%" y="613" width="0.3208%" height="15" fill="rgb(248,169,45)" fg:x="958" fg:w="4"/><text x="77.0744%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.9848%" y="597" width="0.1604%" height="15" fill="rgb(239,50,49)" fg:x="960" fg:w="2"/><text x="77.2348%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.9848%" y="581" width="0.1604%" height="15" fill="rgb(231,96,31)" fg:x="960" fg:w="2"/><text x="77.2348%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.9848%" y="565" width="0.1604%" height="15" fill="rgb(224,193,37)" fg:x="960" fg:w="2"/><text x="77.2348%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0650%" y="549" width="0.0802%" height="15" fill="rgb(227,153,50)" fg:x="961" fg:w="1"/><text x="77.3150%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0650%" y="533" width="0.0802%" height="15" fill="rgb(249,228,3)" fg:x="961" fg:w="1"/><text x="77.3150%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0650%" y="517" width="0.0802%" height="15" fill="rgb(219,164,43)" fg:x="961" fg:w="1"/><text x="77.3150%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.0650%" y="501" width="0.0802%" height="15" fill="rgb(216,45,41)" fg:x="961" fg:w="1"/><text x="77.3150%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="77.1451%" y="613" width="0.1604%" height="15" fill="rgb(210,226,51)" fg:x="962" fg:w="2"/><text x="77.3951%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.1451%" y="597" width="0.1604%" height="15" fill="rgb(209,117,49)" fg:x="962" fg:w="2"/><text x="77.3951%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2253%" y="581" width="0.0802%" height="15" fill="rgb(206,196,24)" fg:x="963" fg:w="1"/><text x="77.4753%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3055%" y="533" width="0.0802%" height="15" fill="rgb(253,218,3)" fg:x="964" fg:w="1"/><text x="77.5555%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3055%" y="517" width="0.0802%" height="15" fill="rgb(252,166,2)" fg:x="964" fg:w="1"/><text x="77.5555%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="77.3055%" y="501" width="0.0802%" height="15" fill="rgb(236,218,26)" fg:x="964" fg:w="1"/><text x="77.5555%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.3857%" y="517" width="0.0802%" height="15" fill="rgb(254,84,19)" fg:x="965" fg:w="1"/><text x="77.6357%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3857%" y="501" width="0.0802%" height="15" fill="rgb(219,137,29)" fg:x="965" fg:w="1"/><text x="77.6357%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.3857%" y="485" width="0.0802%" height="15" fill="rgb(227,47,52)" fg:x="965" fg:w="1"/><text x="77.6357%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3857%" y="469" width="0.0802%" height="15" fill="rgb(229,167,24)" fg:x="965" fg:w="1"/><text x="77.6357%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="77.3055%" y="597" width="0.2406%" height="15" fill="rgb(233,164,1)" fg:x="964" fg:w="3"/><text x="77.5555%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="77.3055%" y="581" width="0.2406%" height="15" fill="rgb(218,88,48)" fg:x="964" fg:w="3"/><text x="77.5555%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="77.3055%" y="565" width="0.2406%" height="15" fill="rgb(226,214,24)" fg:x="964" fg:w="3"/><text x="77.5555%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="77.3055%" y="549" width="0.2406%" height="15" fill="rgb(233,29,12)" fg:x="964" fg:w="3"/><text x="77.5555%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="77.3857%" y="533" width="0.1604%" height="15" fill="rgb(219,120,34)" fg:x="965" fg:w="2"/><text x="77.6357%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4659%" y="517" width="0.0802%" height="15" fill="rgb(226,78,44)" fg:x="966" fg:w="1"/><text x="77.7159%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="77.1451%" y="645" width="0.4812%" height="15" fill="rgb(240,15,48)" fg:x="962" fg:w="6"/><text x="77.3951%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="77.1451%" y="629" width="0.4812%" height="15" fill="rgb(253,176,7)" fg:x="962" fg:w="6"/><text x="77.3951%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="77.3055%" y="613" width="0.3208%" height="15" fill="rgb(206,166,28)" fg:x="964" fg:w="4"/><text x="77.5555%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5461%" y="597" width="0.0802%" height="15" fill="rgb(241,53,51)" fg:x="967" fg:w="1"/><text x="77.7961%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5461%" y="581" width="0.0802%" height="15" fill="rgb(249,112,30)" fg:x="967" fg:w="1"/><text x="77.7961%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5461%" y="565" width="0.0802%" height="15" fill="rgb(217,85,30)" fg:x="967" fg:w="1"/><text x="77.7961%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="77.6263%" y="533" width="0.0802%" height="15" fill="rgb(233,49,7)" fg:x="968" fg:w="1"/><text x="77.8763%" y="543.50"></text></g><g><title>engine::session::Session::close (19 samples, 1.52%)</title><rect x="76.2630%" y="741" width="1.5237%" height="15" fill="rgb(234,109,9)" fg:x="951" fg:w="19"/><text x="76.5130%" y="751.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.52%)</title><rect x="76.2630%" y="725" width="1.5237%" height="15" fill="rgb(253,95,22)" fg:x="951" fg:w="19"/><text x="76.5130%" y="735.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.52%)</title><rect x="76.2630%" y="709" width="1.5237%" height="15" fill="rgb(233,176,25)" fg:x="951" fg:w="19"/><text x="76.5130%" y="719.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (19 samples, 1.52%)</title><rect x="76.2630%" y="693" width="1.5237%" height="15" fill="rgb(236,33,39)" fg:x="951" fg:w="19"/><text x="76.5130%" y="703.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.44%)</title><rect x="76.3432%" y="677" width="1.4435%" height="15" fill="rgb(223,226,42)" fg:x="952" fg:w="18"/><text x="76.5932%" y="687.50"></text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="76.7442%" y="661" width="1.0425%" height="15" fill="rgb(216,99,33)" fg:x="957" fg:w="13"/><text x="76.9942%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="77.6263%" y="645" width="0.1604%" height="15" fill="rgb(235,84,23)" fg:x="968" fg:w="2"/><text x="77.8763%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="77.6263%" y="629" width="0.1604%" height="15" fill="rgb(232,2,27)" fg:x="968" fg:w="2"/><text x="77.8763%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.6263%" y="613" width="0.1604%" height="15" fill="rgb(241,23,22)" fg:x="968" fg:w="2"/><text x="77.8763%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.6263%" y="597" width="0.1604%" height="15" fill="rgb(211,73,27)" fg:x="968" fg:w="2"/><text x="77.8763%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.6263%" y="581" width="0.1604%" height="15" fill="rgb(235,109,49)" fg:x="968" fg:w="2"/><text x="77.8763%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.6263%" y="565" width="0.1604%" height="15" fill="rgb(230,99,29)" fg:x="968" fg:w="2"/><text x="77.8763%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.6263%" y="549" width="0.1604%" height="15" fill="rgb(245,199,7)" fg:x="968" fg:w="2"/><text x="77.8763%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.7065%" y="533" width="0.0802%" height="15" fill="rgb(217,179,10)" fg:x="969" fg:w="1"/><text x="77.9565%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.7065%" y="517" width="0.0802%" height="15" fill="rgb(254,99,47)" fg:x="969" fg:w="1"/><text x="77.9565%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.7065%" y="501" width="0.0802%" height="15" fill="rgb(251,121,7)" fg:x="969" fg:w="1"/><text x="77.9565%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="77.7065%" y="485" width="0.0802%" height="15" fill="rgb(250,177,26)" fg:x="969" fg:w="1"/><text x="77.9565%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.7065%" y="469" width="0.0802%" height="15" fill="rgb(232,88,15)" fg:x="969" fg:w="1"/><text x="77.9565%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7065%" y="453" width="0.0802%" height="15" fill="rgb(251,54,54)" fg:x="969" fg:w="1"/><text x="77.9565%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7867%" y="725" width="0.0802%" height="15" fill="rgb(208,177,15)" fg:x="970" fg:w="1"/><text x="78.0367%" y="735.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="77.8669%" y="661" width="0.1604%" height="15" fill="rgb(205,97,32)" fg:x="971" fg:w="2"/><text x="78.1169%" y="671.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="77.8669%" y="645" width="0.1604%" height="15" fill="rgb(217,192,13)" fg:x="971" fg:w="2"/><text x="78.1169%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="77.8669%" y="629" width="0.1604%" height="15" fill="rgb(215,163,41)" fg:x="971" fg:w="2"/><text x="78.1169%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="77.8669%" y="613" width="0.1604%" height="15" fill="rgb(246,83,29)" fg:x="971" fg:w="2"/><text x="78.1169%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="77.8669%" y="597" width="0.1604%" height="15" fill="rgb(219,2,45)" fg:x="971" fg:w="2"/><text x="78.1169%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="77.8669%" y="581" width="0.1604%" height="15" fill="rgb(242,215,33)" fg:x="971" fg:w="2"/><text x="78.1169%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="77.8669%" y="565" width="0.1604%" height="15" fill="rgb(217,1,6)" fg:x="971" fg:w="2"/><text x="78.1169%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="77.8669%" y="549" width="0.1604%" height="15" fill="rgb(207,85,52)" fg:x="971" fg:w="2"/><text x="78.1169%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="77.8669%" y="533" width="0.1604%" height="15" fill="rgb(231,171,19)" fg:x="971" fg:w="2"/><text x="78.1169%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.8669%" y="517" width="0.1604%" height="15" fill="rgb(207,128,4)" fg:x="971" fg:w="2"/><text x="78.1169%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="77.8669%" y="501" width="0.1604%" height="15" fill="rgb(219,208,4)" fg:x="971" fg:w="2"/><text x="78.1169%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.8669%" y="485" width="0.1604%" height="15" fill="rgb(235,161,42)" fg:x="971" fg:w="2"/><text x="78.1169%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="77.8669%" y="469" width="0.1604%" height="15" fill="rgb(247,218,18)" fg:x="971" fg:w="2"/><text x="78.1169%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.8669%" y="453" width="0.1604%" height="15" fill="rgb(232,114,51)" fg:x="971" fg:w="2"/><text x="78.1169%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.8669%" y="437" width="0.1604%" height="15" fill="rgb(222,95,3)" fg:x="971" fg:w="2"/><text x="78.1169%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="77.8669%" y="421" width="0.1604%" height="15" fill="rgb(240,65,29)" fg:x="971" fg:w="2"/><text x="78.1169%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.8669%" y="405" width="0.1604%" height="15" fill="rgb(249,209,20)" fg:x="971" fg:w="2"/><text x="78.1169%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.8669%" y="389" width="0.1604%" height="15" fill="rgb(241,48,37)" fg:x="971" fg:w="2"/><text x="78.1169%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="77.8669%" y="373" width="0.1604%" height="15" fill="rgb(230,140,42)" fg:x="971" fg:w="2"/><text x="78.1169%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.8669%" y="357" width="0.1604%" height="15" fill="rgb(230,176,45)" fg:x="971" fg:w="2"/><text x="78.1169%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.8669%" y="341" width="0.1604%" height="15" fill="rgb(245,112,21)" fg:x="971" fg:w="2"/><text x="78.1169%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="77.8669%" y="325" width="0.1604%" height="15" fill="rgb(207,183,35)" fg:x="971" fg:w="2"/><text x="78.1169%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.8669%" y="309" width="0.1604%" height="15" fill="rgb(227,44,33)" fg:x="971" fg:w="2"/><text x="78.1169%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.8669%" y="293" width="0.1604%" height="15" fill="rgb(246,120,21)" fg:x="971" fg:w="2"/><text x="78.1169%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.9471%" y="277" width="0.0802%" height="15" fill="rgb(235,57,52)" fg:x="972" fg:w="1"/><text x="78.1971%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.0273%" y="341" width="0.0802%" height="15" fill="rgb(238,84,10)" fg:x="973" fg:w="1"/><text x="78.2773%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="78.0273%" y="485" width="0.1604%" height="15" fill="rgb(251,200,32)" fg:x="973" fg:w="2"/><text x="78.2773%" y="495.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="78.0273%" y="469" width="0.1604%" height="15" fill="rgb(247,159,13)" fg:x="973" fg:w="2"/><text x="78.2773%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="78.0273%" y="453" width="0.1604%" height="15" fill="rgb(238,64,4)" fg:x="973" fg:w="2"/><text x="78.2773%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.0273%" y="437" width="0.1604%" height="15" fill="rgb(221,131,51)" fg:x="973" fg:w="2"/><text x="78.2773%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.0273%" y="421" width="0.1604%" height="15" fill="rgb(242,5,29)" fg:x="973" fg:w="2"/><text x="78.2773%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.0273%" y="405" width="0.1604%" height="15" fill="rgb(214,130,32)" fg:x="973" fg:w="2"/><text x="78.2773%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.0273%" y="389" width="0.1604%" height="15" fill="rgb(244,210,16)" fg:x="973" fg:w="2"/><text x="78.2773%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.0273%" y="373" width="0.1604%" height="15" fill="rgb(234,48,26)" fg:x="973" fg:w="2"/><text x="78.2773%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.0273%" y="357" width="0.1604%" height="15" fill="rgb(231,82,38)" fg:x="973" fg:w="2"/><text x="78.2773%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.1075%" y="341" width="0.0802%" height="15" fill="rgb(254,128,41)" fg:x="974" fg:w="1"/><text x="78.3575%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.1075%" y="325" width="0.0802%" height="15" fill="rgb(212,73,49)" fg:x="974" fg:w="1"/><text x="78.3575%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.1075%" y="309" width="0.0802%" height="15" fill="rgb(205,62,54)" fg:x="974" fg:w="1"/><text x="78.3575%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.1075%" y="293" width="0.0802%" height="15" fill="rgb(228,0,8)" fg:x="974" fg:w="1"/><text x="78.3575%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1877%" y="421" width="0.0802%" height="15" fill="rgb(251,28,17)" fg:x="975" fg:w="1"/><text x="78.4377%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.1877%" y="405" width="0.0802%" height="15" fill="rgb(238,105,27)" fg:x="975" fg:w="1"/><text x="78.4377%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="78.1877%" y="437" width="0.1604%" height="15" fill="rgb(237,216,33)" fg:x="975" fg:w="2"/><text x="78.4377%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.2678%" y="421" width="0.0802%" height="15" fill="rgb(229,228,25)" fg:x="976" fg:w="1"/><text x="78.5178%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.2678%" y="405" width="0.0802%" height="15" fill="rgb(233,75,23)" fg:x="976" fg:w="1"/><text x="78.5178%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.2678%" y="389" width="0.0802%" height="15" fill="rgb(231,207,16)" fg:x="976" fg:w="1"/><text x="78.5178%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.2678%" y="373" width="0.0802%" height="15" fill="rgb(231,191,45)" fg:x="976" fg:w="1"/><text x="78.5178%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.2678%" y="357" width="0.0802%" height="15" fill="rgb(224,133,17)" fg:x="976" fg:w="1"/><text x="78.5178%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.2678%" y="341" width="0.0802%" height="15" fill="rgb(209,178,27)" fg:x="976" fg:w="1"/><text x="78.5178%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.2678%" y="325" width="0.0802%" height="15" fill="rgb(218,37,11)" fg:x="976" fg:w="1"/><text x="78.5178%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.2678%" y="309" width="0.0802%" height="15" fill="rgb(251,226,25)" fg:x="976" fg:w="1"/><text x="78.5178%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.2678%" y="293" width="0.0802%" height="15" fill="rgb(209,222,27)" fg:x="976" fg:w="1"/><text x="78.5178%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.2678%" y="277" width="0.0802%" height="15" fill="rgb(238,22,21)" fg:x="976" fg:w="1"/><text x="78.5178%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.2678%" y="261" width="0.0802%" height="15" fill="rgb(233,161,25)" fg:x="976" fg:w="1"/><text x="78.5178%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2678%" y="245" width="0.0802%" height="15" fill="rgb(226,122,53)" fg:x="976" fg:w="1"/><text x="78.5178%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.3480%" y="437" width="0.0802%" height="15" fill="rgb(220,123,17)" fg:x="977" fg:w="1"/><text x="78.5980%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.3480%" y="421" width="0.0802%" height="15" fill="rgb(230,224,35)" fg:x="977" fg:w="1"/><text x="78.5980%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.3480%" y="405" width="0.0802%" height="15" fill="rgb(246,83,8)" fg:x="977" fg:w="1"/><text x="78.5980%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.3480%" y="389" width="0.0802%" height="15" fill="rgb(230,214,17)" fg:x="977" fg:w="1"/><text x="78.5980%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.3480%" y="373" width="0.0802%" height="15" fill="rgb(222,97,18)" fg:x="977" fg:w="1"/><text x="78.5980%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.3480%" y="357" width="0.0802%" height="15" fill="rgb(206,79,1)" fg:x="977" fg:w="1"/><text x="78.5980%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.3480%" y="341" width="0.0802%" height="15" fill="rgb(214,121,34)" fg:x="977" fg:w="1"/><text x="78.5980%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.3480%" y="325" width="0.0802%" height="15" fill="rgb(249,199,46)" fg:x="977" fg:w="1"/><text x="78.5980%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.4282%" y="341" width="0.0802%" height="15" fill="rgb(214,222,46)" fg:x="978" fg:w="1"/><text x="78.6782%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="78.1877%" y="485" width="0.4010%" height="15" fill="rgb(248,168,30)" fg:x="975" fg:w="5"/><text x="78.4377%" y="495.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="78.1877%" y="469" width="0.4010%" height="15" fill="rgb(226,14,28)" fg:x="975" fg:w="5"/><text x="78.4377%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="78.1877%" y="453" width="0.4010%" height="15" fill="rgb(253,123,1)" fg:x="975" fg:w="5"/><text x="78.4377%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.4282%" y="437" width="0.1604%" height="15" fill="rgb(225,24,42)" fg:x="978" fg:w="2"/><text x="78.6782%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.4282%" y="421" width="0.1604%" height="15" fill="rgb(216,161,37)" fg:x="978" fg:w="2"/><text x="78.6782%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.4282%" y="405" width="0.1604%" height="15" fill="rgb(251,164,26)" fg:x="978" fg:w="2"/><text x="78.6782%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.4282%" y="389" width="0.1604%" height="15" fill="rgb(219,177,3)" fg:x="978" fg:w="2"/><text x="78.6782%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.4282%" y="373" width="0.1604%" height="15" fill="rgb(222,65,0)" fg:x="978" fg:w="2"/><text x="78.6782%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.4282%" y="357" width="0.1604%" height="15" fill="rgb(223,69,54)" fg:x="978" fg:w="2"/><text x="78.6782%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.5084%" y="341" width="0.0802%" height="15" fill="rgb(235,30,27)" fg:x="979" fg:w="1"/><text x="78.7584%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.5084%" y="325" width="0.0802%" height="15" fill="rgb(220,183,50)" fg:x="979" fg:w="1"/><text x="78.7584%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.5084%" y="309" width="0.0802%" height="15" fill="rgb(248,198,15)" fg:x="979" fg:w="1"/><text x="78.7584%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.5084%" y="293" width="0.0802%" height="15" fill="rgb(222,211,4)" fg:x="979" fg:w="1"/><text x="78.7584%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.5084%" y="277" width="0.0802%" height="15" fill="rgb(214,102,34)" fg:x="979" fg:w="1"/><text x="78.7584%" y="287.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="78.5886%" y="421" width="0.0802%" height="15" fill="rgb(245,92,5)" fg:x="980" fg:w="1"/><text x="78.8386%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.6688%" y="405" width="0.0802%" height="15" fill="rgb(252,72,51)" fg:x="981" fg:w="1"/><text x="78.9188%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.6688%" y="389" width="0.0802%" height="15" fill="rgb(252,208,19)" fg:x="981" fg:w="1"/><text x="78.9188%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="78.6688%" y="373" width="0.0802%" height="15" fill="rgb(211,69,7)" fg:x="981" fg:w="1"/><text x="78.9188%" y="383.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="78.6688%" y="357" width="0.0802%" height="15" fill="rgb(211,27,16)" fg:x="981" fg:w="1"/><text x="78.9188%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="78.6688%" y="341" width="0.0802%" height="15" fill="rgb(219,216,14)" fg:x="981" fg:w="1"/><text x="78.9188%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.7490%" y="357" width="0.0802%" height="15" fill="rgb(219,71,8)" fg:x="982" fg:w="1"/><text x="78.9990%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="78.9094%" y="341" width="0.7217%" height="15" fill="rgb(223,170,53)" fg:x="984" fg:w="9"/><text x="79.1594%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="78.9094%" y="325" width="0.7217%" height="15" fill="rgb(246,21,26)" fg:x="984" fg:w="9"/><text x="79.1594%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="79.6311%" y="341" width="0.5613%" height="15" fill="rgb(248,20,46)" fg:x="993" fg:w="7"/><text x="79.8811%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="79.6311%" y="325" width="0.5613%" height="15" fill="rgb(252,94,11)" fg:x="993" fg:w="7"/><text x="79.8811%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.4330%" y="277" width="0.0802%" height="15" fill="rgb(236,163,8)" fg:x="1003" fg:w="1"/><text x="80.6830%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.5132%" y="277" width="0.0802%" height="15" fill="rgb(217,221,45)" fg:x="1004" fg:w="1"/><text x="80.7632%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.5934%" y="277" width="0.0802%" height="15" fill="rgb(238,38,17)" fg:x="1005" fg:w="1"/><text x="80.8434%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.5934%" y="261" width="0.0802%" height="15" fill="rgb(242,210,23)" fg:x="1005" fg:w="1"/><text x="80.8434%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.5934%" y="245" width="0.0802%" height="15" fill="rgb(250,86,53)" fg:x="1005" fg:w="1"/><text x="80.8434%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.5934%" y="229" width="0.0802%" height="15" fill="rgb(223,168,25)" fg:x="1005" fg:w="1"/><text x="80.8434%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="80.6736%" y="277" width="0.0802%" height="15" fill="rgb(251,189,4)" fg:x="1006" fg:w="1"/><text x="80.9236%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.6736%" y="261" width="0.0802%" height="15" fill="rgb(245,19,28)" fg:x="1006" fg:w="1"/><text x="80.9236%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.6736%" y="245" width="0.0802%" height="15" fill="rgb(207,10,34)" fg:x="1006" fg:w="1"/><text x="80.9236%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.6736%" y="229" width="0.0802%" height="15" fill="rgb(235,153,31)" fg:x="1006" fg:w="1"/><text x="80.9236%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="80.7538%" y="277" width="0.0802%" height="15" fill="rgb(228,72,37)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="80.7538%" y="261" width="0.0802%" height="15" fill="rgb(215,15,16)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="80.7538%" y="245" width="0.0802%" height="15" fill="rgb(250,119,29)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.65%)</title><rect x="80.8340%" y="277" width="2.6464%" height="15" fill="rgb(214,59,1)" fg:x="1008" fg:w="33"/><text x="81.0840%" y="287.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (32 samples, 2.57%)</title><rect x="80.9142%" y="261" width="2.5662%" height="15" fill="rgb(223,109,25)" fg:x="1009" fg:w="32"/><text x="81.1642%" y="271.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (32 samples, 2.57%)</title><rect x="80.9142%" y="245" width="2.5662%" height="15" fill="rgb(230,198,22)" fg:x="1009" fg:w="32"/><text x="81.1642%" y="255.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 3.37%)</title><rect x="80.1925%" y="325" width="3.3681%" height="15" fill="rgb(245,184,46)" fg:x="1000" fg:w="42"/><text x="80.4425%" y="335.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (42 samples, 3.37%)</title><rect x="80.1925%" y="309" width="3.3681%" height="15" fill="rgb(253,73,16)" fg:x="1000" fg:w="42"/><text x="80.4425%" y="319.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (42 samples, 3.37%)</title><rect x="80.1925%" y="293" width="3.3681%" height="15" fill="rgb(206,94,45)" fg:x="1000" fg:w="42"/><text x="80.4425%" y="303.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="83.4804%" y="277" width="0.0802%" height="15" fill="rgb(236,83,27)" fg:x="1041" fg:w="1"/><text x="83.7304%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="83.8011%" y="309" width="0.1604%" height="15" fill="rgb(220,196,8)" fg:x="1045" fg:w="2"/><text x="84.0511%" y="319.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="83.9615%" y="261" width="0.0802%" height="15" fill="rgb(254,185,14)" fg:x="1047" fg:w="1"/><text x="84.2115%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="83.9615%" y="309" width="0.1604%" height="15" fill="rgb(226,50,22)" fg:x="1047" fg:w="2"/><text x="84.2115%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="83.9615%" y="293" width="0.1604%" height="15" fill="rgb(253,147,0)" fg:x="1047" fg:w="2"/><text x="84.2115%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.9615%" y="277" width="0.1604%" height="15" fill="rgb(252,46,33)" fg:x="1047" fg:w="2"/><text x="84.2115%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.0417%" y="261" width="0.0802%" height="15" fill="rgb(242,22,54)" fg:x="1048" fg:w="1"/><text x="84.2917%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="84.1219%" y="309" width="0.1604%" height="15" fill="rgb(223,178,32)" fg:x="1049" fg:w="2"/><text x="84.3719%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (69 samples, 5.53%)</title><rect x="78.8292%" y="357" width="5.5333%" height="15" fill="rgb(214,106,53)" fg:x="983" fg:w="69"/><text x="79.0792%" y="367.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (52 samples, 4.17%)</title><rect x="80.1925%" y="341" width="4.1700%" height="15" fill="rgb(232,65,50)" fg:x="1000" fg:w="52"/><text x="80.4425%" y="351.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="83.5605%" y="325" width="0.8019%" height="15" fill="rgb(231,110,28)" fg:x="1042" fg:w="10"/><text x="83.8105%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="84.2823%" y="309" width="0.0802%" height="15" fill="rgb(216,71,40)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="84.4427%" y="293" width="0.0802%" height="15" fill="rgb(229,89,53)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="84.4427%" y="309" width="0.1604%" height="15" fill="rgb(210,124,14)" fg:x="1053" fg:w="2"/><text x="84.6927%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="84.5229%" y="293" width="0.0802%" height="15" fill="rgb(236,213,6)" fg:x="1054" fg:w="1"/><text x="84.7729%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="84.4427%" y="325" width="0.2406%" height="15" fill="rgb(228,41,5)" fg:x="1053" fg:w="3"/><text x="84.6927%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="84.6030%" y="309" width="0.0802%" height="15" fill="rgb(221,167,25)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.6030%" y="293" width="0.0802%" height="15" fill="rgb(228,144,37)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.6030%" y="277" width="0.0802%" height="15" fill="rgb(227,189,38)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.6030%" y="261" width="0.0802%" height="15" fill="rgb(218,8,2)" fg:x="1055" fg:w="1"/><text x="84.8530%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="84.6832%" y="325" width="0.0802%" height="15" fill="rgb(209,61,28)" fg:x="1056" fg:w="1"/><text x="84.9332%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.6832%" y="309" width="0.0802%" height="15" fill="rgb(233,140,39)" fg:x="1056" fg:w="1"/><text x="84.9332%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="84.7634%" y="309" width="0.0802%" height="15" fill="rgb(251,66,48)" fg:x="1057" fg:w="1"/><text x="85.0134%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="84.3625%" y="357" width="0.5613%" height="15" fill="rgb(210,44,45)" fg:x="1052" fg:w="7"/><text x="84.6125%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="84.3625%" y="341" width="0.5613%" height="15" fill="rgb(214,136,46)" fg:x="1052" fg:w="7"/><text x="84.6125%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="84.7634%" y="325" width="0.1604%" height="15" fill="rgb(207,130,50)" fg:x="1057" fg:w="2"/><text x="85.0134%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="84.8436%" y="309" width="0.0802%" height="15" fill="rgb(228,102,49)" fg:x="1058" fg:w="1"/><text x="85.0936%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.9238%" y="309" width="0.0802%" height="15" fill="rgb(253,55,1)" fg:x="1059" fg:w="1"/><text x="85.1738%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.9238%" y="293" width="0.0802%" height="15" fill="rgb(238,222,9)" fg:x="1059" fg:w="1"/><text x="85.1738%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.9238%" y="277" width="0.0802%" height="15" fill="rgb(246,99,6)" fg:x="1059" fg:w="1"/><text x="85.1738%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (79 samples, 6.34%)</title><rect x="78.7490%" y="405" width="6.3352%" height="15" fill="rgb(219,110,26)" fg:x="982" fg:w="79"/><text x="78.9990%" y="415.50">&lt;regex::..</text></g><g><title>regex::builders::Builder::build_one_string (79 samples, 6.34%)</title><rect x="78.7490%" y="389" width="6.3352%" height="15" fill="rgb(239,160,33)" fg:x="982" fg:w="79"/><text x="78.9990%" y="399.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (79 samples, 6.34%)</title><rect x="78.7490%" y="373" width="6.3352%" height="15" fill="rgb(220,202,23)" fg:x="982" fg:w="79"/><text x="78.9990%" y="383.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="84.9238%" y="357" width="0.1604%" height="15" fill="rgb(208,80,26)" fg:x="1059" fg:w="2"/><text x="85.1738%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="84.9238%" y="341" width="0.1604%" height="15" fill="rgb(243,85,7)" fg:x="1059" fg:w="2"/><text x="85.1738%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="84.9238%" y="325" width="0.1604%" height="15" fill="rgb(228,77,47)" fg:x="1059" fg:w="2"/><text x="85.1738%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="85.0040%" y="309" width="0.0802%" height="15" fill="rgb(212,226,8)" fg:x="1060" fg:w="1"/><text x="85.2540%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.0040%" y="293" width="0.0802%" height="15" fill="rgb(241,120,54)" fg:x="1060" fg:w="1"/><text x="85.2540%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0842%" y="389" width="0.0802%" height="15" fill="rgb(226,80,16)" fg:x="1061" fg:w="1"/><text x="85.3342%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.2446%" y="357" width="0.0802%" height="15" fill="rgb(240,76,13)" fg:x="1063" fg:w="1"/><text x="85.4946%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.2446%" y="341" width="0.0802%" height="15" fill="rgb(252,74,8)" fg:x="1063" fg:w="1"/><text x="85.4946%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="85.1644%" y="373" width="0.2406%" height="15" fill="rgb(244,155,2)" fg:x="1062" fg:w="3"/><text x="85.4144%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="85.3248%" y="357" width="0.0802%" height="15" fill="rgb(215,81,35)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.3248%" y="341" width="0.0802%" height="15" fill="rgb(206,55,2)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.3248%" y="325" width="0.0802%" height="15" fill="rgb(231,2,34)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.3248%" y="309" width="0.0802%" height="15" fill="rgb(242,176,48)" fg:x="1064" fg:w="1"/><text x="85.5748%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (85 samples, 6.82%)</title><rect x="78.6688%" y="421" width="6.8164%" height="15" fill="rgb(249,31,36)" fg:x="981" fg:w="85"/><text x="78.9188%" y="431.50">indefinit..</text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="85.0842%" y="405" width="0.4010%" height="15" fill="rgb(205,18,17)" fg:x="1061" fg:w="5"/><text x="85.3342%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="85.1644%" y="389" width="0.3208%" height="15" fill="rgb(254,130,5)" fg:x="1062" fg:w="4"/><text x="85.4144%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="85.4050%" y="373" width="0.0802%" height="15" fill="rgb(229,42,45)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="85.4050%" y="357" width="0.0802%" height="15" fill="rgb(245,95,25)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.4050%" y="341" width="0.0802%" height="15" fill="rgb(249,193,38)" fg:x="1065" fg:w="1"/><text x="85.6550%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="85.4852%" y="357" width="0.0802%" height="15" fill="rgb(241,140,43)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.4852%" y="341" width="0.0802%" height="15" fill="rgb(245,78,48)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.4852%" y="325" width="0.0802%" height="15" fill="rgb(214,92,39)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.4852%" y="309" width="0.0802%" height="15" fill="rgb(211,189,14)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.4852%" y="293" width="0.0802%" height="15" fill="rgb(218,7,24)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.4852%" y="277" width="0.0802%" height="15" fill="rgb(224,200,49)" fg:x="1066" fg:w="1"/><text x="85.7352%" y="287.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="85.5654%" y="357" width="0.0802%" height="15" fill="rgb(218,210,14)" fg:x="1067" fg:w="1"/><text x="85.8154%" y="367.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="85.5654%" y="341" width="0.0802%" height="15" fill="rgb(234,142,31)" fg:x="1067" fg:w="1"/><text x="85.8154%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.6455%" y="325" width="0.0802%" height="15" fill="rgb(227,165,2)" fg:x="1068" fg:w="1"/><text x="85.8955%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="85.6455%" y="341" width="0.6415%" height="15" fill="rgb(232,44,46)" fg:x="1068" fg:w="8"/><text x="85.8955%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="85.7257%" y="325" width="0.5613%" height="15" fill="rgb(236,149,47)" fg:x="1069" fg:w="7"/><text x="85.9757%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="86.2871%" y="341" width="0.0802%" height="15" fill="rgb(227,45,31)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="86.2871%" y="325" width="0.0802%" height="15" fill="rgb(240,176,51)" fg:x="1076" fg:w="1"/><text x="86.5371%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4475%" y="309" width="0.0802%" height="15" fill="rgb(249,146,41)" fg:x="1078" fg:w="1"/><text x="86.6975%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="86.5277%" y="309" width="0.0802%" height="15" fill="rgb(213,208,4)" fg:x="1079" fg:w="1"/><text x="86.7777%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.5277%" y="293" width="0.0802%" height="15" fill="rgb(245,84,36)" fg:x="1079" fg:w="1"/><text x="86.7777%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.5277%" y="277" width="0.0802%" height="15" fill="rgb(254,84,18)" fg:x="1079" fg:w="1"/><text x="86.7777%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.5277%" y="261" width="0.0802%" height="15" fill="rgb(225,38,54)" fg:x="1079" fg:w="1"/><text x="86.7777%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="86.6079%" y="309" width="0.1604%" height="15" fill="rgb(246,50,30)" fg:x="1080" fg:w="2"/><text x="86.8579%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="86.6079%" y="293" width="0.1604%" height="15" fill="rgb(246,148,9)" fg:x="1080" fg:w="2"/><text x="86.8579%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.6881%" y="277" width="0.0802%" height="15" fill="rgb(223,75,4)" fg:x="1081" fg:w="1"/><text x="86.9381%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.6881%" y="261" width="0.0802%" height="15" fill="rgb(239,148,41)" fg:x="1081" fg:w="1"/><text x="86.9381%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.6881%" y="245" width="0.0802%" height="15" fill="rgb(205,195,3)" fg:x="1081" fg:w="1"/><text x="86.9381%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (7 samples, 0.56%)</title><rect x="86.3673%" y="341" width="0.5613%" height="15" fill="rgb(254,161,1)" fg:x="1077" fg:w="7"/><text x="86.6173%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="86.3673%" y="325" width="0.5613%" height="15" fill="rgb(211,229,8)" fg:x="1077" fg:w="7"/><text x="86.6173%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="86.7682%" y="309" width="0.1604%" height="15" fill="rgb(220,97,9)" fg:x="1082" fg:w="2"/><text x="87.0182%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="86.7682%" y="293" width="0.1604%" height="15" fill="rgb(240,218,8)" fg:x="1082" fg:w="2"/><text x="87.0182%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="86.7682%" y="277" width="0.1604%" height="15" fill="rgb(250,44,0)" fg:x="1082" fg:w="2"/><text x="87.0182%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="86.9286%" y="293" width="0.0802%" height="15" fill="rgb(236,41,53)" fg:x="1084" fg:w="1"/><text x="87.1786%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="87.3296%" y="229" width="0.2406%" height="15" fill="rgb(218,227,13)" fg:x="1089" fg:w="3"/><text x="87.5796%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.5702%" y="229" width="0.0802%" height="15" fill="rgb(217,94,32)" fg:x="1092" fg:w="1"/><text x="87.8202%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.64%)</title><rect x="87.6504%" y="229" width="0.6415%" height="15" fill="rgb(213,217,12)" fg:x="1093" fg:w="8"/><text x="87.9004%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="87.9711%" y="213" width="0.3208%" height="15" fill="rgb(229,13,46)" fg:x="1097" fg:w="4"/><text x="88.2211%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="88.0513%" y="197" width="0.2406%" height="15" fill="rgb(243,139,5)" fg:x="1098" fg:w="3"/><text x="88.3013%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="88.0513%" y="181" width="0.2406%" height="15" fill="rgb(249,38,45)" fg:x="1098" fg:w="3"/><text x="88.3013%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="88.2919%" y="229" width="0.0802%" height="15" fill="rgb(216,70,11)" fg:x="1101" fg:w="1"/><text x="88.5419%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="88.3721%" y="229" width="0.0802%" height="15" fill="rgb(253,101,25)" fg:x="1102" fg:w="1"/><text x="88.6221%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="88.7731%" y="197" width="0.1604%" height="15" fill="rgb(207,197,30)" fg:x="1107" fg:w="2"/><text x="89.0231%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.8532%" y="181" width="0.0802%" height="15" fill="rgb(238,87,13)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.8532%" y="165" width="0.0802%" height="15" fill="rgb(215,155,8)" fg:x="1108" fg:w="1"/><text x="89.1032%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (11 samples, 0.88%)</title><rect x="88.4523%" y="229" width="0.8821%" height="15" fill="rgb(239,166,38)" fg:x="1103" fg:w="11"/><text x="88.7023%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.80%)</title><rect x="88.5325%" y="213" width="0.8019%" height="15" fill="rgb(240,194,35)" fg:x="1104" fg:w="10"/><text x="88.7825%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="88.9334%" y="197" width="0.4010%" height="15" fill="rgb(219,10,44)" fg:x="1109" fg:w="5"/><text x="89.1834%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="89.3344%" y="229" width="0.1604%" height="15" fill="rgb(251,220,35)" fg:x="1114" fg:w="2"/><text x="89.5844%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="89.3344%" y="213" width="0.1604%" height="15" fill="rgb(218,117,13)" fg:x="1114" fg:w="2"/><text x="89.5844%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="89.4146%" y="197" width="0.0802%" height="15" fill="rgb(221,213,40)" fg:x="1115" fg:w="1"/><text x="89.6646%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (37 samples, 2.97%)</title><rect x="89.4948%" y="229" width="2.9671%" height="15" fill="rgb(251,224,35)" fg:x="1116" fg:w="37"/><text x="89.7448%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 2.97%)</title><rect x="89.4948%" y="213" width="2.9671%" height="15" fill="rgb(241,33,39)" fg:x="1116" fg:w="37"/><text x="89.7448%" y="223.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (37 samples, 2.97%)</title><rect x="89.4948%" y="197" width="2.9671%" height="15" fill="rgb(222,74,17)" fg:x="1116" fg:w="37"/><text x="89.7448%" y="207.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="92.4619%" y="229" width="0.2406%" height="15" fill="rgb(225,103,0)" fg:x="1153" fg:w="3"/><text x="92.7119%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.6223%" y="213" width="0.0802%" height="15" fill="rgb(240,0,12)" fg:x="1155" fg:w="1"/><text x="92.8723%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 6.09%)</title><rect x="86.9286%" y="325" width="6.0946%" height="15" fill="rgb(233,213,37)" fg:x="1084" fg:w="76"/><text x="87.1786%" y="335.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (76 samples, 6.09%)</title><rect x="86.9286%" y="309" width="6.0946%" height="15" fill="rgb(225,84,52)" fg:x="1084" fg:w="76"/><text x="87.1786%" y="319.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 6.01%)</title><rect x="87.0088%" y="293" width="6.0144%" height="15" fill="rgb(247,160,51)" fg:x="1085" fg:w="75"/><text x="87.2588%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (75 samples, 6.01%)</title><rect x="87.0088%" y="277" width="6.0144%" height="15" fill="rgb(244,60,51)" fg:x="1085" fg:w="75"/><text x="87.2588%" y="287.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (75 samples, 6.01%)</title><rect x="87.0088%" y="261" width="6.0144%" height="15" fill="rgb(233,114,7)" fg:x="1085" fg:w="75"/><text x="87.2588%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 6.01%)</title><rect x="87.0088%" y="245" width="6.0144%" height="15" fill="rgb(246,136,16)" fg:x="1085" fg:w="75"/><text x="87.2588%" y="255.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="92.7025%" y="229" width="0.3208%" height="15" fill="rgb(243,114,45)" fg:x="1156" fg:w="4"/><text x="92.9525%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.9431%" y="213" width="0.0802%" height="15" fill="rgb(247,183,43)" fg:x="1159" fg:w="1"/><text x="93.1931%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.5846%" y="261" width="0.0802%" height="15" fill="rgb(251,210,42)" fg:x="1167" fg:w="1"/><text x="93.8346%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.80%)</title><rect x="93.0233%" y="309" width="0.8019%" height="15" fill="rgb(221,88,35)" fg:x="1160" fg:w="10"/><text x="93.2733%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="93.5846%" y="293" width="0.2406%" height="15" fill="rgb(242,21,20)" fg:x="1167" fg:w="3"/><text x="93.8346%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="93.5846%" y="277" width="0.2406%" height="15" fill="rgb(233,226,36)" fg:x="1167" fg:w="3"/><text x="93.8346%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="93.6648%" y="261" width="0.1604%" height="15" fill="rgb(243,189,34)" fg:x="1168" fg:w="2"/><text x="93.9148%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (105 samples, 8.42%)</title><rect x="85.6455%" y="357" width="8.4202%" height="15" fill="rgb(207,145,50)" fg:x="1068" fg:w="105"/><text x="85.8955%" y="367.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (89 samples, 7.14%)</title><rect x="86.9286%" y="341" width="7.1371%" height="15" fill="rgb(242,1,50)" fg:x="1084" fg:w="89"/><text x="87.1786%" y="351.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="93.0233%" y="325" width="1.0425%" height="15" fill="rgb(231,65,32)" fg:x="1160" fg:w="13"/><text x="93.2733%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="93.8252%" y="309" width="0.2406%" height="15" fill="rgb(208,68,49)" fg:x="1170" fg:w="3"/><text x="94.0752%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="94.0658%" y="357" width="0.0802%" height="15" fill="rgb(253,54,49)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="94.0658%" y="341" width="0.0802%" height="15" fill="rgb(245,186,24)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="94.0658%" y="325" width="0.0802%" height="15" fill="rgb(209,2,41)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.2261%" y="309" width="0.0802%" height="15" fill="rgb(242,208,54)" fg:x="1175" fg:w="1"/><text x="94.4761%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.2261%" y="293" width="0.0802%" height="15" fill="rgb(225,9,51)" fg:x="1175" fg:w="1"/><text x="94.4761%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.2261%" y="277" width="0.0802%" height="15" fill="rgb(207,207,25)" fg:x="1175" fg:w="1"/><text x="94.4761%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="94.3063%" y="309" width="0.2406%" height="15" fill="rgb(253,96,18)" fg:x="1176" fg:w="3"/><text x="94.5563%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="94.4667%" y="293" width="0.0802%" height="15" fill="rgb(252,215,20)" fg:x="1178" fg:w="1"/><text x="94.7167%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.4667%" y="277" width="0.0802%" height="15" fill="rgb(245,227,26)" fg:x="1178" fg:w="1"/><text x="94.7167%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="94.2261%" y="325" width="0.4010%" height="15" fill="rgb(241,208,0)" fg:x="1175" fg:w="5"/><text x="94.4761%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="94.5469%" y="309" width="0.0802%" height="15" fill="rgb(224,130,10)" fg:x="1179" fg:w="1"/><text x="94.7969%" y="319.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="94.5469%" y="293" width="0.0802%" height="15" fill="rgb(237,29,0)" fg:x="1179" fg:w="1"/><text x="94.7969%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="94.5469%" y="277" width="0.0802%" height="15" fill="rgb(219,27,41)" fg:x="1179" fg:w="1"/><text x="94.7969%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="94.6271%" y="325" width="0.0802%" height="15" fill="rgb(245,101,19)" fg:x="1180" fg:w="1"/><text x="94.8771%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="94.6271%" y="309" width="0.0802%" height="15" fill="rgb(243,44,37)" fg:x="1180" fg:w="1"/><text x="94.8771%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (116 samples, 9.30%)</title><rect x="85.4852%" y="373" width="9.3023%" height="15" fill="rgb(228,213,43)" fg:x="1066" fg:w="116"/><text x="85.7352%" y="383.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="94.1460%" y="357" width="0.6415%" height="15" fill="rgb(219,163,21)" fg:x="1174" fg:w="8"/><text x="94.3960%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="94.1460%" y="341" width="0.6415%" height="15" fill="rgb(234,86,24)" fg:x="1174" fg:w="8"/><text x="94.3960%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="94.7073%" y="325" width="0.0802%" height="15" fill="rgb(225,10,24)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="94.7073%" y="309" width="0.0802%" height="15" fill="rgb(218,109,7)" fg:x="1181" fg:w="1"/><text x="94.9573%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (117 samples, 9.38%)</title><rect x="85.4852%" y="405" width="9.3825%" height="15" fill="rgb(210,20,26)" fg:x="1066" fg:w="117"/><text x="85.7352%" y="415.50">&lt;regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (117 samples, 9.38%)</title><rect x="85.4852%" y="389" width="9.3825%" height="15" fill="rgb(216,18,1)" fg:x="1066" fg:w="117"/><text x="85.7352%" y="399.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="94.7875%" y="373" width="0.0802%" height="15" fill="rgb(206,163,23)" fg:x="1182" fg:w="1"/><text x="95.0375%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="94.8677%" y="405" width="0.0802%" height="15" fill="rgb(229,150,31)" fg:x="1183" fg:w="1"/><text x="95.1177%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="94.9479%" y="389" width="0.0802%" height="15" fill="rgb(231,10,5)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="94.9479%" y="373" width="0.0802%" height="15" fill="rgb(250,40,50)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="94.9479%" y="357" width="0.0802%" height="15" fill="rgb(217,119,7)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="367.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="94.9479%" y="341" width="0.0802%" height="15" fill="rgb(245,214,40)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.9479%" y="325" width="0.0802%" height="15" fill="rgb(216,187,1)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9479%" y="309" width="0.0802%" height="15" fill="rgb(237,146,21)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.9479%" y="293" width="0.0802%" height="15" fill="rgb(210,174,47)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.1885%" y="309" width="0.0802%" height="15" fill="rgb(218,111,39)" fg:x="1187" fg:w="1"/><text x="95.4385%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1885%" y="293" width="0.0802%" height="15" fill="rgb(224,95,19)" fg:x="1187" fg:w="1"/><text x="95.4385%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.1885%" y="277" width="0.0802%" height="15" fill="rgb(234,15,38)" fg:x="1187" fg:w="1"/><text x="95.4385%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="95.0281%" y="325" width="0.4812%" height="15" fill="rgb(246,56,12)" fg:x="1185" fg:w="6"/><text x="95.2781%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="95.2686%" y="309" width="0.2406%" height="15" fill="rgb(247,16,17)" fg:x="1188" fg:w="3"/><text x="95.5186%" y="319.50"></text></g><g><title>indefinite::rules::number::Number::check (127 samples, 10.18%)</title><rect x="85.4852%" y="421" width="10.1844%" height="15" fill="rgb(215,151,11)" fg:x="1066" fg:w="127"/><text x="85.7352%" y="431.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="94.9479%" y="405" width="0.7217%" height="15" fill="rgb(225,16,24)" fg:x="1184" fg:w="9"/><text x="95.1979%" y="415.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="95.0281%" y="389" width="0.6415%" height="15" fill="rgb(217,117,5)" fg:x="1185" fg:w="8"/><text x="95.2781%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="95.0281%" y="373" width="0.6415%" height="15" fill="rgb(246,187,53)" fg:x="1185" fg:w="8"/><text x="95.2781%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="95.0281%" y="357" width="0.6415%" height="15" fill="rgb(241,71,40)" fg:x="1185" fg:w="8"/><text x="95.2781%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="95.0281%" y="341" width="0.6415%" height="15" fill="rgb(231,67,39)" fg:x="1185" fg:w="8"/><text x="95.2781%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="95.5092%" y="325" width="0.1604%" height="15" fill="rgb(222,120,24)" fg:x="1191" fg:w="2"/><text x="95.7592%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.5894%" y="309" width="0.0802%" height="15" fill="rgb(248,3,3)" fg:x="1192" fg:w="1"/><text x="95.8394%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.7498%" y="341" width="0.0802%" height="15" fill="rgb(228,218,5)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.7498%" y="325" width="0.0802%" height="15" fill="rgb(212,202,43)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.7498%" y="309" width="0.0802%" height="15" fill="rgb(235,183,2)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7498%" y="293" width="0.0802%" height="15" fill="rgb(230,165,10)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7498%" y="277" width="0.0802%" height="15" fill="rgb(219,54,40)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.7498%" y="261" width="0.0802%" height="15" fill="rgb(244,73,9)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="95.9102%" y="325" width="0.0802%" height="15" fill="rgb(212,32,45)" fg:x="1196" fg:w="1"/><text x="96.1602%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.9102%" y="309" width="0.0802%" height="15" fill="rgb(205,58,31)" fg:x="1196" fg:w="1"/><text x="96.1602%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.0706%" y="309" width="0.0802%" height="15" fill="rgb(250,120,43)" fg:x="1198" fg:w="1"/><text x="96.3206%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="95.9904%" y="325" width="0.2406%" height="15" fill="rgb(235,13,10)" fg:x="1197" fg:w="3"/><text x="96.2404%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.1508%" y="309" width="0.0802%" height="15" fill="rgb(232,219,31)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.1508%" y="293" width="0.0802%" height="15" fill="rgb(218,157,51)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.3913%" y="309" width="0.1604%" height="15" fill="rgb(211,91,52)" fg:x="1202" fg:w="2"/><text x="96.6413%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="96.3913%" y="293" width="0.1604%" height="15" fill="rgb(240,173,1)" fg:x="1202" fg:w="2"/><text x="96.6413%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.3913%" y="277" width="0.1604%" height="15" fill="rgb(248,20,47)" fg:x="1202" fg:w="2"/><text x="96.6413%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.3913%" y="261" width="0.1604%" height="15" fill="rgb(217,221,40)" fg:x="1202" fg:w="2"/><text x="96.6413%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.4715%" y="245" width="0.0802%" height="15" fill="rgb(226,149,51)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="96.5517%" y="309" width="0.0802%" height="15" fill="rgb(252,193,7)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5517%" y="293" width="0.0802%" height="15" fill="rgb(205,123,0)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5517%" y="277" width="0.0802%" height="15" fill="rgb(233,173,25)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5517%" y="261" width="0.0802%" height="15" fill="rgb(216,63,32)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="271.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="96.7121%" y="293" width="0.0802%" height="15" fill="rgb(209,56,45)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.7923%" y="293" width="0.0802%" height="15" fill="rgb(226,111,49)" fg:x="1207" fg:w="1"/><text x="97.0423%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8725%" y="293" width="0.0802%" height="15" fill="rgb(244,181,21)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.9527%" y="293" width="0.0802%" height="15" fill="rgb(222,126,15)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (18 samples, 1.44%)</title><rect x="95.8300%" y="341" width="1.4435%" height="15" fill="rgb(222,95,17)" fg:x="1195" fg:w="18"/><text x="96.0800%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (13 samples, 1.04%)</title><rect x="96.2310%" y="325" width="1.0425%" height="15" fill="rgb(254,46,5)" fg:x="1200" fg:w="13"/><text x="96.4810%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="96.6319%" y="309" width="0.6415%" height="15" fill="rgb(236,216,35)" fg:x="1205" fg:w="8"/><text x="96.8819%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="97.0329%" y="293" width="0.2406%" height="15" fill="rgb(217,187,26)" fg:x="1210" fg:w="3"/><text x="97.2829%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="97.5942%" y="293" width="0.0802%" height="15" fill="rgb(207,192,25)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.5942%" y="277" width="0.0802%" height="15" fill="rgb(253,135,27)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.5942%" y="261" width="0.0802%" height="15" fill="rgb(211,122,29)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.5942%" y="245" width="0.0802%" height="15" fill="rgb(233,162,40)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.6744%" y="293" width="0.0802%" height="15" fill="rgb(222,184,47)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="97.6744%" y="277" width="0.0802%" height="15" fill="rgb(249,99,23)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="97.7546%" y="293" width="0.0802%" height="15" fill="rgb(214,60,12)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="97.7546%" y="277" width="0.0802%" height="15" fill="rgb(250,229,36)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.80%)</title><rect x="97.2735%" y="341" width="0.8019%" height="15" fill="rgb(232,195,10)" fg:x="1213" fg:w="10"/><text x="97.5235%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.80%)</title><rect x="97.2735%" y="325" width="0.8019%" height="15" fill="rgb(205,213,31)" fg:x="1213" fg:w="10"/><text x="97.5235%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (10 samples, 0.80%)</title><rect x="97.2735%" y="309" width="0.8019%" height="15" fill="rgb(237,43,8)" fg:x="1213" fg:w="10"/><text x="97.5235%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="97.8348%" y="293" width="0.2406%" height="15" fill="rgb(216,208,3)" fg:x="1220" fg:w="3"/><text x="98.0848%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="97.8348%" y="277" width="0.2406%" height="15" fill="rgb(228,179,44)" fg:x="1220" fg:w="3"/><text x="98.0848%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="97.8348%" y="261" width="0.2406%" height="15" fill="rgb(230,192,27)" fg:x="1220" fg:w="3"/><text x="98.0848%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="97.8348%" y="245" width="0.2406%" height="15" fill="rgb(251,30,38)" fg:x="1220" fg:w="3"/><text x="98.0848%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (33 samples, 2.65%)</title><rect x="95.6696%" y="389" width="2.6464%" height="15" fill="rgb(246,55,52)" fg:x="1193" fg:w="33"/><text x="95.9196%" y="399.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (32 samples, 2.57%)</title><rect x="95.7498%" y="373" width="2.5662%" height="15" fill="rgb(249,79,26)" fg:x="1194" fg:w="32"/><text x="95.9998%" y="383.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (32 samples, 2.57%)</title><rect x="95.7498%" y="357" width="2.5662%" height="15" fill="rgb(220,202,16)" fg:x="1194" fg:w="32"/><text x="95.9998%" y="367.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="98.0754%" y="341" width="0.2406%" height="15" fill="rgb(250,170,23)" fg:x="1223" fg:w="3"/><text x="98.3254%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="98.0754%" y="325" width="0.2406%" height="15" fill="rgb(230,7,37)" fg:x="1223" fg:w="3"/><text x="98.3254%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="98.0754%" y="309" width="0.2406%" height="15" fill="rgb(213,71,1)" fg:x="1223" fg:w="3"/><text x="98.3254%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="98.2358%" y="293" width="0.0802%" height="15" fill="rgb(227,87,39)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="98.2358%" y="277" width="0.0802%" height="15" fill="rgb(210,41,29)" fg:x="1225" fg:w="1"/><text x="98.4858%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="98.3160%" y="389" width="0.0802%" height="15" fill="rgb(206,191,31)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="98.3160%" y="373" width="0.0802%" height="15" fill="rgb(247,75,54)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="98.3160%" y="357" width="0.0802%" height="15" fill="rgb(208,54,50)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.3160%" y="341" width="0.0802%" height="15" fill="rgb(214,90,37)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.3160%" y="325" width="0.0802%" height="15" fill="rgb(220,132,6)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.3160%" y="309" width="0.0802%" height="15" fill="rgb(213,167,7)" fg:x="1226" fg:w="1"/><text x="98.5660%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="98.3962%" y="389" width="0.0802%" height="15" fill="rgb(243,36,27)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="98.3962%" y="373" width="0.0802%" height="15" fill="rgb(235,147,12)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="98.3962%" y="357" width="0.0802%" height="15" fill="rgb(212,198,44)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="98.3962%" y="341" width="0.0802%" height="15" fill="rgb(218,68,50)" fg:x="1227" fg:w="1"/><text x="98.6462%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.4763%" y="325" width="0.0802%" height="15" fill="rgb(224,79,48)" fg:x="1228" fg:w="1"/><text x="98.7263%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="98.5565%" y="325" width="0.3208%" height="15" fill="rgb(213,191,50)" fg:x="1229" fg:w="4"/><text x="98.8065%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.7971%" y="309" width="0.0802%" height="15" fill="rgb(254,146,10)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (41 samples, 3.29%)</title><rect x="95.6696%" y="405" width="3.2879%" height="15" fill="rgb(215,175,11)" fg:x="1193" fg:w="41"/><text x="95.9196%" y="415.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="98.4763%" y="389" width="0.4812%" height="15" fill="rgb(207,49,7)" fg:x="1228" fg:w="6"/><text x="98.7263%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="98.4763%" y="373" width="0.4812%" height="15" fill="rgb(234,144,29)" fg:x="1228" fg:w="6"/><text x="98.7263%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="98.4763%" y="357" width="0.4812%" height="15" fill="rgb(213,222,48)" fg:x="1228" fg:w="6"/><text x="98.7263%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="98.4763%" y="341" width="0.4812%" height="15" fill="rgb(222,8,6)" fg:x="1228" fg:w="6"/><text x="98.7263%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.8773%" y="325" width="0.0802%" height="15" fill="rgb(221,114,49)" fg:x="1233" fg:w="1"/><text x="99.1273%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (263 samples, 21.09%)</title><rect x="78.0273%" y="501" width="21.0906%" height="15" fill="rgb(250,140,42)" fg:x="973" fg:w="263"/><text x="78.2773%" y="511.50">&lt;&amp;kernel::model::entry::Entry as ..</text></g><g><title>plugins_core::looking::model::qualify_name (256 samples, 20.53%)</title><rect x="78.5886%" y="485" width="20.5293%" height="15" fill="rgb(250,150,27)" fg:x="980" fg:w="256"/><text x="78.8386%" y="495.50">plugins_core::looking::model::qu..</text></g><g><title>indefinite::indefinite (256 samples, 20.53%)</title><rect x="78.5886%" y="469" width="20.5293%" height="15" fill="rgb(252,159,3)" fg:x="980" fg:w="256"/><text x="78.8386%" y="479.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (256 samples, 20.53%)</title><rect x="78.5886%" y="453" width="20.5293%" height="15" fill="rgb(241,182,3)" fg:x="980" fg:w="256"/><text x="78.8386%" y="463.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (256 samples, 20.53%)</title><rect x="78.5886%" y="437" width="20.5293%" height="15" fill="rgb(236,3,9)" fg:x="980" fg:w="256"/><text x="78.8386%" y="447.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (43 samples, 3.45%)</title><rect x="95.6696%" y="421" width="3.4483%" height="15" fill="rgb(223,227,51)" fg:x="1193" fg:w="43"/><text x="95.9196%" y="431.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="98.9575%" y="405" width="0.1604%" height="15" fill="rgb(232,133,30)" fg:x="1234" fg:w="2"/><text x="99.2075%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (2 samples, 0.16%)</title><rect x="99.1179%" y="501" width="0.1604%" height="15" fill="rgb(209,93,27)" fg:x="1236" fg:w="2"/><text x="99.3679%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="99.1981%" y="485" width="0.0802%" height="15" fill="rgb(208,108,34)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.1981%" y="469" width="0.0802%" height="15" fill="rgb(215,189,13)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.1981%" y="453" width="0.0802%" height="15" fill="rgb(206,88,23)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.1981%" y="437" width="0.0802%" height="15" fill="rgb(240,173,0)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.1981%" y="421" width="0.0802%" height="15" fill="rgb(223,106,52)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.1981%" y="405" width="0.0802%" height="15" fill="rgb(206,130,16)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.1981%" y="389" width="0.0802%" height="15" fill="rgb(220,54,25)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.1981%" y="373" width="0.0802%" height="15" fill="rgb(210,4,38)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.1981%" y="357" width="0.0802%" height="15" fill="rgb(238,94,39)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.1981%" y="341" width="0.0802%" height="15" fill="rgb(234,124,34)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.1981%" y="325" width="0.0802%" height="15" fill="rgb(221,91,40)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.1981%" y="309" width="0.0802%" height="15" fill="rgb(246,53,28)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.1981%" y="293" width="0.0802%" height="15" fill="rgb(229,109,7)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.1981%" y="277" width="0.0802%" height="15" fill="rgb(249,117,8)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.1981%" y="261" width="0.0802%" height="15" fill="rgb(210,181,1)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.1981%" y="245" width="0.0802%" height="15" fill="rgb(211,66,1)" fg:x="1237" fg:w="1"/><text x="99.4481%" y="255.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.2783%" y="357" width="0.0802%" height="15" fill="rgb(221,90,14)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2783%" y="341" width="0.0802%" height="15" fill="rgb(219,222,44)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2783%" y="325" width="0.0802%" height="15" fill="rgb(246,34,33)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2783%" y="309" width="0.0802%" height="15" fill="rgb(227,135,41)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2783%" y="293" width="0.0802%" height="15" fill="rgb(226,15,14)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2783%" y="277" width="0.0802%" height="15" fill="rgb(236,148,47)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2783%" y="261" width="0.0802%" height="15" fill="rgb(233,162,52)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2783%" y="245" width="0.0802%" height="15" fill="rgb(244,35,28)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2783%" y="229" width="0.0802%" height="15" fill="rgb(205,121,10)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2783%" y="213" width="0.0802%" height="15" fill="rgb(250,58,18)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2783%" y="197" width="0.0802%" height="15" fill="rgb(216,37,13)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="207.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (270 samples, 21.65%)</title><rect x="77.8669%" y="725" width="21.6520%" height="15" fill="rgb(221,215,42)" fg:x="971" fg:w="270"/><text x="78.1169%" y="735.50">&lt;engine::session::Session as kerne..</text></g><g><title>kernel::plugins::mw::apply_middleware (270 samples, 21.65%)</title><rect x="77.8669%" y="709" width="21.6520%" height="15" fill="rgb(217,214,19)" fg:x="971" fg:w="270"/><text x="78.1169%" y="719.50">kernel::plugins::mw::apply_middlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (270 samples, 21.65%)</title><rect x="77.8669%" y="693" width="21.6520%" height="15" fill="rgb(233,139,13)" fg:x="971" fg:w="270"/><text x="78.1169%" y="703.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (270 samples, 21.65%)</title><rect x="77.8669%" y="677" width="21.6520%" height="15" fill="rgb(247,168,23)" fg:x="971" fg:w="270"/><text x="78.1169%" y="687.50">&lt;engine::session::ExpandSurroundin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (268 samples, 21.49%)</title><rect x="78.0273%" y="661" width="21.4916%" height="15" fill="rgb(207,202,1)" fg:x="973" fg:w="268"/><text x="78.2773%" y="671.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (268 samples, 21.49%)</title><rect x="78.0273%" y="645" width="21.4916%" height="15" fill="rgb(220,155,48)" fg:x="973" fg:w="268"/><text x="78.2773%" y="655.50">&lt;plugins_dynlib::DynamicMiddleware..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (268 samples, 21.49%)</title><rect x="78.0273%" y="629" width="21.4916%" height="15" fill="rgb(250,43,26)" fg:x="973" fg:w="268"/><text x="78.2773%" y="639.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (268 samples, 21.49%)</title><rect x="78.0273%" y="613" width="21.4916%" height="15" fill="rgb(212,190,23)" fg:x="973" fg:w="268"/><text x="78.2773%" y="623.50">core::ops::function::FnOnce::call_..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (268 samples, 21.49%)</title><rect x="78.0273%" y="597" width="21.4916%" height="15" fill="rgb(216,39,24)" fg:x="973" fg:w="268"/><text x="78.2773%" y="607.50">kernel::plugins::mw::MiddlewareNex..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (268 samples, 21.49%)</title><rect x="78.0273%" y="581" width="21.4916%" height="15" fill="rgb(252,113,16)" fg:x="973" fg:w="268"/><text x="78.2773%" y="591.50">core::ops::function::FnOnce::call_..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (268 samples, 21.49%)</title><rect x="78.0273%" y="565" width="21.4916%" height="15" fill="rgb(208,113,19)" fg:x="973" fg:w="268"/><text x="78.2773%" y="575.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::o..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (268 samples, 21.49%)</title><rect x="78.0273%" y="549" width="21.4916%" height="15" fill="rgb(234,107,25)" fg:x="973" fg:w="268"/><text x="78.2773%" y="559.50">&lt;engine::session::state::State as ..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (268 samples, 21.49%)</title><rect x="78.0273%" y="533" width="21.4916%" height="15" fill="rgb(234,217,51)" fg:x="973" fg:w="268"/><text x="78.2773%" y="543.50">&lt;plugins_core::looking::actions::L..</text></g><g><title>plugins_core::looking::model::new_area_observation (268 samples, 21.49%)</title><rect x="78.0273%" y="517" width="21.4916%" height="15" fill="rgb(251,29,42)" fg:x="973" fg:w="268"/><text x="78.2773%" y="527.50">plugins_core::looking::model::new_..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="99.2783%" y="501" width="0.2406%" height="15" fill="rgb(221,62,51)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="99.2783%" y="485" width="0.2406%" height="15" fill="rgb(240,192,43)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (3 samples, 0.24%)</title><rect x="99.2783%" y="469" width="0.2406%" height="15" fill="rgb(224,157,47)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="99.2783%" y="453" width="0.2406%" height="15" fill="rgb(226,84,45)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="99.2783%" y="437" width="0.2406%" height="15" fill="rgb(208,207,23)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="99.2783%" y="421" width="0.2406%" height="15" fill="rgb(253,34,51)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.2783%" y="405" width="0.2406%" height="15" fill="rgb(227,26,34)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="415.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.2783%" y="389" width="0.2406%" height="15" fill="rgb(245,75,19)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="99.2783%" y="373" width="0.2406%" height="15" fill="rgb(250,191,31)" fg:x="1238" fg:w="3"/><text x="99.5283%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.3585%" y="357" width="0.1604%" height="15" fill="rgb(224,11,50)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3585%" y="341" width="0.1604%" height="15" fill="rgb(231,171,7)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.3585%" y="325" width="0.1604%" height="15" fill="rgb(252,214,10)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3585%" y="309" width="0.1604%" height="15" fill="rgb(249,45,46)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="319.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.3585%" y="293" width="0.1604%" height="15" fill="rgb(240,173,7)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3585%" y="277" width="0.1604%" height="15" fill="rgb(235,214,13)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.3585%" y="261" width="0.1604%" height="15" fill="rgb(245,156,8)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="99.3585%" y="245" width="0.1604%" height="15" fill="rgb(235,46,12)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3585%" y="229" width="0.1604%" height="15" fill="rgb(221,81,14)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.3585%" y="213" width="0.1604%" height="15" fill="rgb(238,207,9)" fg:x="1239" fg:w="2"/><text x="99.6085%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.4387%" y="197" width="0.0802%" height="15" fill="rgb(224,129,35)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4387%" y="181" width="0.0802%" height="15" fill="rgb(243,218,34)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4387%" y="165" width="0.0802%" height="15" fill="rgb(220,166,13)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.4387%" y="149" width="0.0802%" height="15" fill="rgb(227,167,49)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4387%" y="133" width="0.0802%" height="15" fill="rgb(234,142,12)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.5990%" y="645" width="0.0802%" height="15" fill="rgb(207,100,48)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.5990%" y="629" width="0.0802%" height="15" fill="rgb(210,25,14)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.5990%" y="613" width="0.0802%" height="15" fill="rgb(246,116,27)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5990%" y="597" width="0.0802%" height="15" fill="rgb(214,193,42)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5990%" y="581" width="0.0802%" height="15" fill="rgb(214,122,8)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5990%" y="565" width="0.0802%" height="15" fill="rgb(244,173,18)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5990%" y="549" width="0.0802%" height="15" fill="rgb(232,68,19)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5990%" y="533" width="0.0802%" height="15" fill="rgb(236,224,1)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="99.5990%" y="677" width="0.1604%" height="15" fill="rgb(240,11,8)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="99.5990%" y="661" width="0.1604%" height="15" fill="rgb(244,159,20)" fg:x="1242" fg:w="2"/><text x="99.8490%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="99.6792%" y="645" width="0.0802%" height="15" fill="rgb(240,223,54)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.6792%" y="629" width="0.0802%" height="15" fill="rgb(237,146,5)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.6792%" y="613" width="0.0802%" height="15" fill="rgb(218,221,32)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6792%" y="597" width="0.0802%" height="15" fill="rgb(244,96,26)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.6792%" y="581" width="0.0802%" height="15" fill="rgb(245,184,37)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.7594%" y="661" width="0.1604%" height="15" fill="rgb(248,91,47)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.7594%" y="645" width="0.1604%" height="15" fill="rgb(243,199,8)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7594%" y="629" width="0.1604%" height="15" fill="rgb(249,12,15)" fg:x="1244" fg:w="2"/><text x="100.0094%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8396%" y="613" width="0.0802%" height="15" fill="rgb(245,97,12)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8396%" y="597" width="0.0802%" height="15" fill="rgb(244,61,1)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8396%" y="581" width="0.0802%" height="15" fill="rgb(222,194,10)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.8396%" y="565" width="0.0802%" height="15" fill="rgb(226,178,8)" fg:x="1245" fg:w="1"/><text x="100.0896%" y="575.50"></text></g><g><title>all (1,247 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(241,32,34)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-484c7248 (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(254,26,6)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1087.50">simple-484c7248</text></g><g><title>_start (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(249,71,11)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(232,170,27)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(214,223,17)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,247 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(250,18,15)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(212,153,51)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(219,194,12)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(212,58,17)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(254,5,10)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(246,91,7)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(218,108,49)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(238,123,20)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,247 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(231,69,23)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(230,209,3)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,247 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(231,19,0)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(226,192,25)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,247 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(223,175,53)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,247 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(248,35,51)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (354 samples, 28.39%)</title><rect x="71.6119%" y="789" width="28.3881%" height="15" fill="rgb(230,37,26)" fg:x="893" fg:w="354"/><text x="71.8619%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criter..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (354 samples, 28.39%)</title><rect x="71.6119%" y="773" width="28.3881%" height="15" fill="rgb(206,120,22)" fg:x="893" fg:w="354"/><text x="71.8619%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (354 samples, 28.39%)</title><rect x="71.6119%" y="757" width="28.3881%" height="15" fill="rgb(207,165,28)" fg:x="893" fg:w="354"/><text x="71.8619%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (277 samples, 22.21%)</title><rect x="77.7867%" y="741" width="22.2133%" height="15" fill="rgb(226,23,46)" fg:x="970" fg:w="277"/><text x="78.0367%" y="751.50">engine::session::Session::evaluate_..</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (6 samples, 0.48%)</title><rect x="99.5188%" y="725" width="0.4812%" height="15" fill="rgb(208,130,44)" fg:x="1241" fg:w="6"/><text x="99.7688%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="99.5188%" y="709" width="0.4812%" height="15" fill="rgb(231,67,8)" fg:x="1241" fg:w="6"/><text x="99.7688%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.5188%" y="693" width="0.4812%" height="15" fill="rgb(205,183,22)" fg:x="1241" fg:w="6"/><text x="99.7688%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="99.7594%" y="677" width="0.2406%" height="15" fill="rgb(224,47,9)" fg:x="1244" fg:w="3"/><text x="100.0094%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9198%" y="661" width="0.0802%" height="15" fill="rgb(250,183,49)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9198%" y="645" width="0.0802%" height="15" fill="rgb(220,151,39)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.9198%" y="629" width="0.0802%" height="15" fill="rgb(220,118,20)" fg:x="1246" fg:w="1"/><text x="100.1698%" y="639.50"></text></g></svg></svg>