<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1247"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0000%" y="629" width="0.0802%" height="15" fill="rgb(243,203,4)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0802%" height="15" fill="rgb(237,92,17)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.0802%" y="549" width="0.2406%" height="15" fill="rgb(231,119,7)" fg:x="1" fg:w="3"/><text x="0.3302%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4010%" y="517" width="0.0802%" height="15" fill="rgb(237,82,41)" fg:x="5" fg:w="1"/><text x="0.6510%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4010%" y="501" width="0.0802%" height="15" fill="rgb(226,81,48)" fg:x="5" fg:w="1"/><text x="0.6510%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.4812%" y="501" width="0.0802%" height="15" fill="rgb(234,70,51)" fg:x="6" fg:w="1"/><text x="0.7312%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.4812%" y="485" width="0.0802%" height="15" fill="rgb(251,86,4)" fg:x="6" fg:w="1"/><text x="0.7312%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4812%" y="469" width="0.0802%" height="15" fill="rgb(244,144,28)" fg:x="6" fg:w="1"/><text x="0.7312%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4812%" y="453" width="0.0802%" height="15" fill="rgb(232,161,39)" fg:x="6" fg:w="1"/><text x="0.7312%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="0.0000%" y="645" width="0.6415%" height="15" fill="rgb(247,34,51)" fg:x="0" fg:w="8"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (7 samples, 0.56%)</title><rect x="0.0802%" y="629" width="0.5613%" height="15" fill="rgb(225,132,2)" fg:x="1" fg:w="7"/><text x="0.3302%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0802%" y="613" width="0.5613%" height="15" fill="rgb(209,159,44)" fg:x="1" fg:w="7"/><text x="0.3302%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (7 samples, 0.56%)</title><rect x="0.0802%" y="597" width="0.5613%" height="15" fill="rgb(251,214,1)" fg:x="1" fg:w="7"/><text x="0.3302%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0802%" y="581" width="0.5613%" height="15" fill="rgb(247,84,47)" fg:x="1" fg:w="7"/><text x="0.3302%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0802%" y="565" width="0.5613%" height="15" fill="rgb(240,111,43)" fg:x="1" fg:w="7"/><text x="0.3302%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.3208%" y="549" width="0.3208%" height="15" fill="rgb(215,214,35)" fg:x="4" fg:w="4"/><text x="0.5708%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="0.3208%" y="533" width="0.3208%" height="15" fill="rgb(248,207,23)" fg:x="4" fg:w="4"/><text x="0.5708%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.4812%" y="517" width="0.1604%" height="15" fill="rgb(214,186,4)" fg:x="6" fg:w="2"/><text x="0.7312%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5613%" y="501" width="0.0802%" height="15" fill="rgb(220,133,22)" fg:x="7" fg:w="1"/><text x="0.8113%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.7217%" y="469" width="0.0802%" height="15" fill="rgb(239,134,19)" fg:x="9" fg:w="1"/><text x="0.9717%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7217%" y="453" width="0.0802%" height="15" fill="rgb(250,140,9)" fg:x="9" fg:w="1"/><text x="0.9717%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.7217%" y="437" width="0.0802%" height="15" fill="rgb(225,59,14)" fg:x="9" fg:w="1"/><text x="0.9717%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7217%" y="421" width="0.0802%" height="15" fill="rgb(214,152,51)" fg:x="9" fg:w="1"/><text x="0.9717%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7217%" y="405" width="0.0802%" height="15" fill="rgb(251,227,43)" fg:x="9" fg:w="1"/><text x="0.9717%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="0.6415%" y="613" width="0.2406%" height="15" fill="rgb(241,96,17)" fg:x="8" fg:w="3"/><text x="0.8915%" y="623.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.24%)</title><rect x="0.6415%" y="597" width="0.2406%" height="15" fill="rgb(234,198,43)" fg:x="8" fg:w="3"/><text x="0.8915%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="0.6415%" y="581" width="0.2406%" height="15" fill="rgb(220,108,29)" fg:x="8" fg:w="3"/><text x="0.8915%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="0.6415%" y="565" width="0.2406%" height="15" fill="rgb(226,163,33)" fg:x="8" fg:w="3"/><text x="0.8915%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="0.6415%" y="549" width="0.2406%" height="15" fill="rgb(205,194,45)" fg:x="8" fg:w="3"/><text x="0.8915%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="0.6415%" y="533" width="0.2406%" height="15" fill="rgb(206,143,44)" fg:x="8" fg:w="3"/><text x="0.8915%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="0.6415%" y="517" width="0.2406%" height="15" fill="rgb(236,136,36)" fg:x="8" fg:w="3"/><text x="0.8915%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.7217%" y="501" width="0.1604%" height="15" fill="rgb(249,172,42)" fg:x="9" fg:w="2"/><text x="0.9717%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.7217%" y="485" width="0.1604%" height="15" fill="rgb(216,139,23)" fg:x="9" fg:w="2"/><text x="0.9717%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="0.8019%" y="469" width="0.0802%" height="15" fill="rgb(207,166,20)" fg:x="10" fg:w="1"/><text x="1.0519%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="0.8019%" y="453" width="0.0802%" height="15" fill="rgb(210,209,22)" fg:x="10" fg:w="1"/><text x="1.0519%" y="463.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="0.8821%" y="613" width="0.0802%" height="15" fill="rgb(232,118,20)" fg:x="11" fg:w="1"/><text x="1.1321%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.9623%" y="565" width="0.0802%" height="15" fill="rgb(238,113,42)" fg:x="12" fg:w="1"/><text x="1.2123%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.9623%" y="549" width="0.0802%" height="15" fill="rgb(231,42,5)" fg:x="12" fg:w="1"/><text x="1.2123%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.9623%" y="533" width="0.0802%" height="15" fill="rgb(243,166,24)" fg:x="12" fg:w="1"/><text x="1.2123%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="0.9623%" y="517" width="0.0802%" height="15" fill="rgb(237,226,12)" fg:x="12" fg:w="1"/><text x="1.2123%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.9623%" y="501" width="0.0802%" height="15" fill="rgb(229,133,24)" fg:x="12" fg:w="1"/><text x="1.2123%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.9623%" y="485" width="0.0802%" height="15" fill="rgb(238,33,43)" fg:x="12" fg:w="1"/><text x="1.2123%" y="495.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="0.9623%" y="469" width="0.0802%" height="15" fill="rgb(227,59,38)" fg:x="12" fg:w="1"/><text x="1.2123%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="0.9623%" y="453" width="0.0802%" height="15" fill="rgb(230,97,0)" fg:x="12" fg:w="1"/><text x="1.2123%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="0.9623%" y="437" width="0.0802%" height="15" fill="rgb(250,173,50)" fg:x="12" fg:w="1"/><text x="1.2123%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="0.9623%" y="421" width="0.0802%" height="15" fill="rgb(240,15,50)" fg:x="12" fg:w="1"/><text x="1.2123%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.9623%" y="405" width="0.0802%" height="15" fill="rgb(221,93,22)" fg:x="12" fg:w="1"/><text x="1.2123%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.9623%" y="389" width="0.0802%" height="15" fill="rgb(245,180,53)" fg:x="12" fg:w="1"/><text x="1.2123%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="0.9623%" y="373" width="0.0802%" height="15" fill="rgb(231,88,51)" fg:x="12" fg:w="1"/><text x="1.2123%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="0.9623%" y="357" width="0.0802%" height="15" fill="rgb(240,58,21)" fg:x="12" fg:w="1"/><text x="1.2123%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="0.9623%" y="341" width="0.0802%" height="15" fill="rgb(237,21,10)" fg:x="12" fg:w="1"/><text x="1.2123%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="0.9623%" y="325" width="0.0802%" height="15" fill="rgb(218,43,11)" fg:x="12" fg:w="1"/><text x="1.2123%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="0.9623%" y="309" width="0.0802%" height="15" fill="rgb(218,221,29)" fg:x="12" fg:w="1"/><text x="1.2123%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="0.9623%" y="293" width="0.0802%" height="15" fill="rgb(214,118,42)" fg:x="12" fg:w="1"/><text x="1.2123%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="0.9623%" y="277" width="0.0802%" height="15" fill="rgb(251,200,26)" fg:x="12" fg:w="1"/><text x="1.2123%" y="287.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.0425%" y="549" width="0.0802%" height="15" fill="rgb(237,101,39)" fg:x="13" fg:w="1"/><text x="1.2925%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.0425%" y="533" width="0.0802%" height="15" fill="rgb(251,117,11)" fg:x="13" fg:w="1"/><text x="1.2925%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (14 samples, 1.12%)</title><rect x="0.6415%" y="645" width="1.1227%" height="15" fill="rgb(216,223,23)" fg:x="8" fg:w="14"/><text x="0.8915%" y="655.50"></text></g><g><title>engine::session::Session::new (14 samples, 1.12%)</title><rect x="0.6415%" y="629" width="1.1227%" height="15" fill="rgb(251,54,12)" fg:x="8" fg:w="14"/><text x="0.8915%" y="639.50"></text></g><g><title>engine::session::Session::initialize (10 samples, 0.80%)</title><rect x="0.9623%" y="613" width="0.8019%" height="15" fill="rgb(254,176,54)" fg:x="12" fg:w="10"/><text x="1.2123%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (10 samples, 0.80%)</title><rect x="0.9623%" y="597" width="0.8019%" height="15" fill="rgb(210,32,8)" fg:x="12" fg:w="10"/><text x="1.2123%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.80%)</title><rect x="0.9623%" y="581" width="0.8019%" height="15" fill="rgb(235,52,38)" fg:x="12" fg:w="10"/><text x="1.2123%" y="591.50"></text></g><g><title>libloading::os::unix::Library::open (9 samples, 0.72%)</title><rect x="1.0425%" y="565" width="0.7217%" height="15" fill="rgb(231,4,44)" fg:x="13" fg:w="9"/><text x="1.2925%" y="575.50"></text></g><g><title>dlopen (8 samples, 0.64%)</title><rect x="1.1227%" y="549" width="0.6415%" height="15" fill="rgb(249,2,32)" fg:x="14" fg:w="8"/><text x="1.3727%" y="559.50"></text></g><g><title>_dl_catch_error (8 samples, 0.64%)</title><rect x="1.1227%" y="533" width="0.6415%" height="15" fill="rgb(224,65,26)" fg:x="14" fg:w="8"/><text x="1.3727%" y="543.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="1.1227%" y="517" width="0.6415%" height="15" fill="rgb(250,73,40)" fg:x="14" fg:w="8"/><text x="1.3727%" y="527.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.64%)</title><rect x="1.1227%" y="501" width="0.6415%" height="15" fill="rgb(253,177,16)" fg:x="14" fg:w="8"/><text x="1.3727%" y="511.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.56%)</title><rect x="1.2029%" y="485" width="0.5613%" height="15" fill="rgb(217,32,34)" fg:x="15" fg:w="7"/><text x="1.4529%" y="495.50"></text></g><g><title>_dl_signal_error (1 samples, 0.08%)</title><rect x="1.6840%" y="469" width="0.0802%" height="15" fill="rgb(212,7,10)" fg:x="21" fg:w="1"/><text x="1.9340%" y="479.50"></text></g><g><title>_dl_exception_create (1 samples, 0.08%)</title><rect x="1.6840%" y="453" width="0.0802%" height="15" fill="rgb(245,89,8)" fg:x="21" fg:w="1"/><text x="1.9340%" y="463.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.7642%" y="629" width="0.0802%" height="15" fill="rgb(237,16,53)" fg:x="22" fg:w="1"/><text x="2.0142%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.7642%" y="613" width="0.0802%" height="15" fill="rgb(250,204,30)" fg:x="22" fg:w="1"/><text x="2.0142%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.7642%" y="597" width="0.0802%" height="15" fill="rgb(208,77,27)" fg:x="22" fg:w="1"/><text x="2.0142%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.7642%" y="581" width="0.0802%" height="15" fill="rgb(250,204,28)" fg:x="22" fg:w="1"/><text x="2.0142%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.7642%" y="565" width="0.0802%" height="15" fill="rgb(244,63,21)" fg:x="22" fg:w="1"/><text x="2.0142%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.7642%" y="549" width="0.0802%" height="15" fill="rgb(236,85,44)" fg:x="22" fg:w="1"/><text x="2.0142%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.7642%" y="533" width="0.0802%" height="15" fill="rgb(215,98,4)" fg:x="22" fg:w="1"/><text x="2.0142%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.7642%" y="517" width="0.0802%" height="15" fill="rgb(235,38,11)" fg:x="22" fg:w="1"/><text x="2.0142%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.7642%" y="501" width="0.0802%" height="15" fill="rgb(254,186,25)" fg:x="22" fg:w="1"/><text x="2.0142%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.7642%" y="485" width="0.0802%" height="15" fill="rgb(225,55,31)" fg:x="22" fg:w="1"/><text x="2.0142%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.7642%" y="469" width="0.0802%" height="15" fill="rgb(211,15,21)" fg:x="22" fg:w="1"/><text x="2.0142%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.7642%" y="453" width="0.0802%" height="15" fill="rgb(215,187,41)" fg:x="22" fg:w="1"/><text x="2.0142%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.7642%" y="437" width="0.0802%" height="15" fill="rgb(248,69,32)" fg:x="22" fg:w="1"/><text x="2.0142%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.9246%" y="597" width="0.0802%" height="15" fill="rgb(252,102,52)" fg:x="24" fg:w="1"/><text x="2.1746%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="1.9246%" y="581" width="0.0802%" height="15" fill="rgb(253,140,32)" fg:x="24" fg:w="1"/><text x="2.1746%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="1.9246%" y="565" width="0.0802%" height="15" fill="rgb(216,56,42)" fg:x="24" fg:w="1"/><text x="2.1746%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.9246%" y="549" width="0.0802%" height="15" fill="rgb(216,184,14)" fg:x="24" fg:w="1"/><text x="2.1746%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.9246%" y="533" width="0.0802%" height="15" fill="rgb(237,187,27)" fg:x="24" fg:w="1"/><text x="2.1746%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.9246%" y="517" width="0.0802%" height="15" fill="rgb(219,65,3)" fg:x="24" fg:w="1"/><text x="2.1746%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.9246%" y="501" width="0.0802%" height="15" fill="rgb(245,83,25)" fg:x="24" fg:w="1"/><text x="2.1746%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.9246%" y="485" width="0.0802%" height="15" fill="rgb(214,205,45)" fg:x="24" fg:w="1"/><text x="2.1746%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="1.9246%" y="469" width="0.0802%" height="15" fill="rgb(241,20,18)" fg:x="24" fg:w="1"/><text x="2.1746%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="1.9246%" y="453" width="0.0802%" height="15" fill="rgb(232,163,23)" fg:x="24" fg:w="1"/><text x="2.1746%" y="463.50"></text></g><g><title>engine::identifiers::model::get_gid (4 samples, 0.32%)</title><rect x="2.0048%" y="597" width="0.3208%" height="15" fill="rgb(214,5,46)" fg:x="25" fg:w="4"/><text x="2.2548%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="2.0048%" y="581" width="0.3208%" height="15" fill="rgb(229,78,17)" fg:x="25" fg:w="4"/><text x="2.2548%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.32%)</title><rect x="2.0048%" y="565" width="0.3208%" height="15" fill="rgb(248,89,10)" fg:x="25" fg:w="4"/><text x="2.2548%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="2.0048%" y="549" width="0.3208%" height="15" fill="rgb(248,54,15)" fg:x="25" fg:w="4"/><text x="2.2548%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.2454%" y="533" width="0.0802%" height="15" fill="rgb(223,116,6)" fg:x="28" fg:w="1"/><text x="2.4954%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.2454%" y="517" width="0.0802%" height="15" fill="rgb(205,125,38)" fg:x="28" fg:w="1"/><text x="2.4954%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.3256%" y="533" width="0.0802%" height="15" fill="rgb(251,78,38)" fg:x="29" fg:w="1"/><text x="2.5756%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="2.3256%" y="549" width="0.1604%" height="15" fill="rgb(253,78,28)" fg:x="29" fg:w="2"/><text x="2.5756%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4058%" y="533" width="0.0802%" height="15" fill="rgb(209,120,3)" fg:x="30" fg:w="1"/><text x="2.6558%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.4058%" y="517" width="0.0802%" height="15" fill="rgb(238,229,9)" fg:x="30" fg:w="1"/><text x="2.6558%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.4860%" y="533" width="0.0802%" height="15" fill="rgb(253,159,18)" fg:x="31" fg:w="1"/><text x="2.7360%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4860%" y="517" width="0.0802%" height="15" fill="rgb(244,42,34)" fg:x="31" fg:w="1"/><text x="2.7360%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.5662%" y="533" width="0.0802%" height="15" fill="rgb(224,8,7)" fg:x="32" fg:w="1"/><text x="2.8162%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.5662%" y="517" width="0.0802%" height="15" fill="rgb(210,201,45)" fg:x="32" fg:w="1"/><text x="2.8162%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.5662%" y="501" width="0.0802%" height="15" fill="rgb(252,185,21)" fg:x="32" fg:w="1"/><text x="2.8162%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.7265%" y="517" width="0.0802%" height="15" fill="rgb(223,131,1)" fg:x="34" fg:w="1"/><text x="2.9765%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7265%" y="501" width="0.0802%" height="15" fill="rgb(245,141,16)" fg:x="34" fg:w="1"/><text x="2.9765%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7265%" y="485" width="0.0802%" height="15" fill="rgb(229,55,45)" fg:x="34" fg:w="1"/><text x="2.9765%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.7265%" y="469" width="0.0802%" height="15" fill="rgb(208,92,15)" fg:x="34" fg:w="1"/><text x="2.9765%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.7265%" y="453" width="0.0802%" height="15" fill="rgb(234,185,47)" fg:x="34" fg:w="1"/><text x="2.9765%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.6464%" y="533" width="0.3208%" height="15" fill="rgb(253,104,50)" fg:x="33" fg:w="4"/><text x="2.8964%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8067%" y="517" width="0.1604%" height="15" fill="rgb(205,70,7)" fg:x="35" fg:w="2"/><text x="3.0567%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8067%" y="501" width="0.1604%" height="15" fill="rgb(240,178,43)" fg:x="35" fg:w="2"/><text x="3.0567%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.8869%" y="485" width="0.0802%" height="15" fill="rgb(214,112,2)" fg:x="36" fg:w="1"/><text x="3.1369%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8869%" y="469" width="0.0802%" height="15" fill="rgb(206,46,17)" fg:x="36" fg:w="1"/><text x="3.1369%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8869%" y="453" width="0.0802%" height="15" fill="rgb(225,220,16)" fg:x="36" fg:w="1"/><text x="3.1369%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.8869%" y="437" width="0.0802%" height="15" fill="rgb(238,65,40)" fg:x="36" fg:w="1"/><text x="3.1369%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="2.3256%" y="565" width="0.7217%" height="15" fill="rgb(230,151,21)" fg:x="29" fg:w="9"/><text x="2.5756%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="2.4860%" y="549" width="0.5613%" height="15" fill="rgb(218,58,49)" fg:x="31" fg:w="7"/><text x="2.7360%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.9671%" y="533" width="0.0802%" height="15" fill="rgb(219,179,14)" fg:x="37" fg:w="1"/><text x="3.2171%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.9671%" y="517" width="0.0802%" height="15" fill="rgb(223,72,1)" fg:x="37" fg:w="1"/><text x="3.2171%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.9671%" y="501" width="0.0802%" height="15" fill="rgb(238,126,10)" fg:x="37" fg:w="1"/><text x="3.2171%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.9671%" y="485" width="0.0802%" height="15" fill="rgb(224,206,38)" fg:x="37" fg:w="1"/><text x="3.2171%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.9671%" y="469" width="0.0802%" height="15" fill="rgb(212,201,54)" fg:x="37" fg:w="1"/><text x="3.2171%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.9671%" y="453" width="0.0802%" height="15" fill="rgb(218,154,48)" fg:x="37" fg:w="1"/><text x="3.2171%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.1275%" y="533" width="0.0802%" height="15" fill="rgb(232,93,24)" fg:x="39" fg:w="1"/><text x="3.3775%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.2077%" y="517" width="0.0802%" height="15" fill="rgb(245,30,21)" fg:x="40" fg:w="1"/><text x="3.4577%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="3.0473%" y="565" width="0.4010%" height="15" fill="rgb(242,148,29)" fg:x="38" fg:w="5"/><text x="3.2973%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="3.0473%" y="549" width="0.4010%" height="15" fill="rgb(244,153,54)" fg:x="38" fg:w="5"/><text x="3.2973%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.2077%" y="533" width="0.2406%" height="15" fill="rgb(252,87,22)" fg:x="40" fg:w="3"/><text x="3.4577%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.2879%" y="517" width="0.1604%" height="15" fill="rgb(210,51,29)" fg:x="41" fg:w="2"/><text x="3.5379%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.2879%" y="501" width="0.1604%" height="15" fill="rgb(242,136,47)" fg:x="41" fg:w="2"/><text x="3.5379%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="3.3681%" y="485" width="0.0802%" height="15" fill="rgb(238,68,4)" fg:x="42" fg:w="1"/><text x="3.6181%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.3681%" y="469" width="0.0802%" height="15" fill="rgb(242,161,30)" fg:x="42" fg:w="1"/><text x="3.6181%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4483%" y="517" width="0.0802%" height="15" fill="rgb(218,58,44)" fg:x="43" fg:w="1"/><text x="3.6983%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4483%" y="501" width="0.0802%" height="15" fill="rgb(252,125,32)" fg:x="43" fg:w="1"/><text x="3.6983%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="3.5285%" y="469" width="0.1604%" height="15" fill="rgb(219,178,0)" fg:x="44" fg:w="2"/><text x="3.7785%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="3.5285%" y="453" width="0.1604%" height="15" fill="rgb(213,152,7)" fg:x="44" fg:w="2"/><text x="3.7785%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6087%" y="437" width="0.0802%" height="15" fill="rgb(249,109,34)" fg:x="45" fg:w="1"/><text x="3.8587%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6889%" y="437" width="0.0802%" height="15" fill="rgb(232,96,21)" fg:x="46" fg:w="1"/><text x="3.9389%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.6889%" y="421" width="0.0802%" height="15" fill="rgb(228,27,39)" fg:x="46" fg:w="1"/><text x="3.9389%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6889%" y="405" width="0.0802%" height="15" fill="rgb(211,182,52)" fg:x="46" fg:w="1"/><text x="3.9389%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.32%)</title><rect x="3.5285%" y="517" width="0.3208%" height="15" fill="rgb(234,178,38)" fg:x="44" fg:w="4"/><text x="3.7785%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="3.5285%" y="501" width="0.3208%" height="15" fill="rgb(221,111,3)" fg:x="44" fg:w="4"/><text x="3.7785%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="3.5285%" y="485" width="0.3208%" height="15" fill="rgb(228,175,21)" fg:x="44" fg:w="4"/><text x="3.7785%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="3.6889%" y="469" width="0.1604%" height="15" fill="rgb(228,174,43)" fg:x="46" fg:w="2"/><text x="3.9389%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.6889%" y="453" width="0.1604%" height="15" fill="rgb(211,191,0)" fg:x="46" fg:w="2"/><text x="3.9389%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.7690%" y="437" width="0.0802%" height="15" fill="rgb(253,117,3)" fg:x="47" fg:w="1"/><text x="4.0190%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.7690%" y="421" width="0.0802%" height="15" fill="rgb(241,127,19)" fg:x="47" fg:w="1"/><text x="4.0190%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7690%" y="405" width="0.0802%" height="15" fill="rgb(218,103,12)" fg:x="47" fg:w="1"/><text x="4.0190%" y="415.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.09%)</title><rect x="1.8444%" y="629" width="2.0850%" height="15" fill="rgb(236,214,43)" fg:x="23" fg:w="26"/><text x="2.0944%" y="639.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (25 samples, 2.00%)</title><rect x="1.9246%" y="613" width="2.0048%" height="15" fill="rgb(244,144,19)" fg:x="24" fg:w="25"/><text x="2.1746%" y="623.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (20 samples, 1.60%)</title><rect x="2.3256%" y="597" width="1.6038%" height="15" fill="rgb(246,188,10)" fg:x="29" fg:w="20"/><text x="2.5756%" y="607.50"></text></g><g><title>engine::session::Session::check_for_changes (20 samples, 1.60%)</title><rect x="2.3256%" y="581" width="1.6038%" height="15" fill="rgb(212,193,33)" fg:x="29" fg:w="20"/><text x="2.5756%" y="591.50"></text></g><g><title>kernel::compare::any_entity_changes (6 samples, 0.48%)</title><rect x="3.4483%" y="565" width="0.4812%" height="15" fill="rgb(241,51,29)" fg:x="43" fg:w="6"/><text x="3.6983%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="3.4483%" y="549" width="0.4812%" height="15" fill="rgb(211,58,19)" fg:x="43" fg:w="6"/><text x="3.6983%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="3.4483%" y="533" width="0.4812%" height="15" fill="rgb(229,111,26)" fg:x="43" fg:w="6"/><text x="3.6983%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.8492%" y="517" width="0.0802%" height="15" fill="rgb(213,115,40)" fg:x="48" fg:w="1"/><text x="4.0992%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8492%" y="501" width="0.0802%" height="15" fill="rgb(209,56,44)" fg:x="48" fg:w="1"/><text x="4.0992%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.8492%" y="485" width="0.0802%" height="15" fill="rgb(230,108,32)" fg:x="48" fg:w="1"/><text x="4.0992%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.8492%" y="469" width="0.0802%" height="15" fill="rgb(216,165,31)" fg:x="48" fg:w="1"/><text x="4.0992%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8492%" y="453" width="0.0802%" height="15" fill="rgb(218,122,21)" fg:x="48" fg:w="1"/><text x="4.0992%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.8492%" y="437" width="0.0802%" height="15" fill="rgb(223,224,47)" fg:x="48" fg:w="1"/><text x="4.0992%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8492%" y="421" width="0.0802%" height="15" fill="rgb(238,102,44)" fg:x="48" fg:w="1"/><text x="4.0992%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8492%" y="405" width="0.0802%" height="15" fill="rgb(236,46,40)" fg:x="48" fg:w="1"/><text x="4.0992%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="3.9294%" y="597" width="0.0802%" height="15" fill="rgb(247,202,50)" fg:x="49" fg:w="1"/><text x="4.1794%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="3.9294%" y="581" width="0.0802%" height="15" fill="rgb(209,99,20)" fg:x="49" fg:w="1"/><text x="4.1794%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9294%" y="565" width="0.0802%" height="15" fill="rgb(252,27,34)" fg:x="49" fg:w="1"/><text x="4.1794%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0096%" y="533" width="0.0802%" height="15" fill="rgb(215,206,23)" fg:x="50" fg:w="1"/><text x="4.2596%" y="543.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="4.0096%" y="597" width="0.1604%" height="15" fill="rgb(212,135,36)" fg:x="50" fg:w="2"/><text x="4.2596%" y="607.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="4.0096%" y="581" width="0.1604%" height="15" fill="rgb(240,189,1)" fg:x="50" fg:w="2"/><text x="4.2596%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="4.0096%" y="565" width="0.1604%" height="15" fill="rgb(242,56,20)" fg:x="50" fg:w="2"/><text x="4.2596%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="4.0096%" y="549" width="0.1604%" height="15" fill="rgb(247,132,33)" fg:x="50" fg:w="2"/><text x="4.2596%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.0898%" y="533" width="0.0802%" height="15" fill="rgb(208,149,11)" fg:x="51" fg:w="1"/><text x="4.3398%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="4.0898%" y="517" width="0.0802%" height="15" fill="rgb(211,33,11)" fg:x="51" fg:w="1"/><text x="4.3398%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.0898%" y="501" width="0.0802%" height="15" fill="rgb(221,29,38)" fg:x="51" fg:w="1"/><text x="4.3398%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.0898%" y="485" width="0.0802%" height="15" fill="rgb(206,182,49)" fg:x="51" fg:w="1"/><text x="4.3398%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.0898%" y="469" width="0.0802%" height="15" fill="rgb(216,140,1)" fg:x="51" fg:w="1"/><text x="4.3398%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="4.0898%" y="453" width="0.0802%" height="15" fill="rgb(232,57,40)" fg:x="51" fg:w="1"/><text x="4.3398%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="3.9294%" y="629" width="0.4010%" height="15" fill="rgb(224,186,18)" fg:x="49" fg:w="5"/><text x="4.1794%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="3.9294%" y="613" width="0.4010%" height="15" fill="rgb(215,121,11)" fg:x="49" fg:w="5"/><text x="4.1794%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="4.1700%" y="597" width="0.1604%" height="15" fill="rgb(245,147,10)" fg:x="52" fg:w="2"/><text x="4.4200%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="4.2502%" y="581" width="0.0802%" height="15" fill="rgb(238,153,13)" fg:x="53" fg:w="1"/><text x="4.5002%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="4.2502%" y="565" width="0.0802%" height="15" fill="rgb(233,108,0)" fg:x="53" fg:w="1"/><text x="4.5002%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="4.2502%" y="549" width="0.0802%" height="15" fill="rgb(212,157,17)" fg:x="53" fg:w="1"/><text x="4.5002%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="4.2502%" y="533" width="0.0802%" height="15" fill="rgb(225,213,38)" fg:x="53" fg:w="1"/><text x="4.5002%" y="543.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="4.2502%" y="517" width="0.0802%" height="15" fill="rgb(248,16,11)" fg:x="53" fg:w="1"/><text x="4.5002%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.2502%" y="501" width="0.0802%" height="15" fill="rgb(241,33,4)" fg:x="53" fg:w="1"/><text x="4.5002%" y="511.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="4.2502%" y="485" width="0.0802%" height="15" fill="rgb(222,26,43)" fg:x="53" fg:w="1"/><text x="4.5002%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="4.2502%" y="469" width="0.0802%" height="15" fill="rgb(243,29,36)" fg:x="53" fg:w="1"/><text x="4.5002%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2502%" y="453" width="0.0802%" height="15" fill="rgb(241,9,27)" fg:x="53" fg:w="1"/><text x="4.5002%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2502%" y="437" width="0.0802%" height="15" fill="rgb(205,117,26)" fg:x="53" fg:w="1"/><text x="4.5002%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.2502%" y="421" width="0.0802%" height="15" fill="rgb(209,80,39)" fg:x="53" fg:w="1"/><text x="4.5002%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.2502%" y="405" width="0.0802%" height="15" fill="rgb(239,155,6)" fg:x="53" fg:w="1"/><text x="4.5002%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.2502%" y="389" width="0.0802%" height="15" fill="rgb(212,104,12)" fg:x="53" fg:w="1"/><text x="4.5002%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.2502%" y="373" width="0.0802%" height="15" fill="rgb(234,204,3)" fg:x="53" fg:w="1"/><text x="4.5002%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2502%" y="357" width="0.0802%" height="15" fill="rgb(251,218,7)" fg:x="53" fg:w="1"/><text x="4.5002%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.3304%" y="613" width="0.0802%" height="15" fill="rgb(221,81,32)" fg:x="54" fg:w="1"/><text x="4.5804%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.3304%" y="597" width="0.0802%" height="15" fill="rgb(214,152,26)" fg:x="54" fg:w="1"/><text x="4.5804%" y="607.50"></text></g><g><title>kernel::model::Entity::gid (1 samples, 0.08%)</title><rect x="4.3304%" y="581" width="0.0802%" height="15" fill="rgb(223,22,3)" fg:x="54" fg:w="1"/><text x="4.5804%" y="591.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="4.3304%" y="565" width="0.0802%" height="15" fill="rgb(207,174,7)" fg:x="54" fg:w="1"/><text x="4.5804%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4106%" y="565" width="0.0802%" height="15" fill="rgb(224,19,52)" fg:x="55" fg:w="1"/><text x="4.6606%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4106%" y="549" width="0.0802%" height="15" fill="rgb(228,24,14)" fg:x="55" fg:w="1"/><text x="4.6606%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.4106%" y="533" width="0.0802%" height="15" fill="rgb(230,153,43)" fg:x="55" fg:w="1"/><text x="4.6606%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.4106%" y="517" width="0.0802%" height="15" fill="rgb(231,106,12)" fg:x="55" fg:w="1"/><text x="4.6606%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.4106%" y="501" width="0.0802%" height="15" fill="rgb(215,92,2)" fg:x="55" fg:w="1"/><text x="4.6606%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4106%" y="485" width="0.0802%" height="15" fill="rgb(249,143,25)" fg:x="55" fg:w="1"/><text x="4.6606%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4106%" y="469" width="0.0802%" height="15" fill="rgb(252,7,35)" fg:x="55" fg:w="1"/><text x="4.6606%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.4106%" y="453" width="0.0802%" height="15" fill="rgb(216,69,40)" fg:x="55" fg:w="1"/><text x="4.6606%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.4106%" y="437" width="0.0802%" height="15" fill="rgb(240,36,33)" fg:x="55" fg:w="1"/><text x="4.6606%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.4106%" y="421" width="0.0802%" height="15" fill="rgb(231,128,14)" fg:x="55" fg:w="1"/><text x="4.6606%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.4106%" y="405" width="0.0802%" height="15" fill="rgb(245,143,14)" fg:x="55" fg:w="1"/><text x="4.6606%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4106%" y="389" width="0.0802%" height="15" fill="rgb(222,130,28)" fg:x="55" fg:w="1"/><text x="4.6606%" y="399.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="4.4106%" y="581" width="0.1604%" height="15" fill="rgb(212,10,48)" fg:x="55" fg:w="2"/><text x="4.6606%" y="591.50"></text></g><g><title>kernel::model::EntityKey::new (1 samples, 0.08%)</title><rect x="4.4908%" y="565" width="0.0802%" height="15" fill="rgb(254,118,45)" fg:x="56" fg:w="1"/><text x="4.7408%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4908%" y="549" width="0.0802%" height="15" fill="rgb(228,6,45)" fg:x="56" fg:w="1"/><text x="4.7408%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="4.5710%" y="517" width="0.2406%" height="15" fill="rgb(241,18,35)" fg:x="57" fg:w="3"/><text x="4.8210%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="4.5710%" y="501" width="0.2406%" height="15" fill="rgb(227,214,53)" fg:x="57" fg:w="3"/><text x="4.8210%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.6512%" y="485" width="0.1604%" height="15" fill="rgb(224,107,51)" fg:x="58" fg:w="2"/><text x="4.9012%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7314%" y="469" width="0.0802%" height="15" fill="rgb(248,60,28)" fg:x="59" fg:w="1"/><text x="4.9814%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.7314%" y="453" width="0.0802%" height="15" fill="rgb(249,101,23)" fg:x="59" fg:w="1"/><text x="4.9814%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.7314%" y="437" width="0.0802%" height="15" fill="rgb(228,51,19)" fg:x="59" fg:w="1"/><text x="4.9814%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.7314%" y="421" width="0.0802%" height="15" fill="rgb(213,20,6)" fg:x="59" fg:w="1"/><text x="4.9814%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="4.5710%" y="533" width="0.3208%" height="15" fill="rgb(212,124,10)" fg:x="57" fg:w="4"/><text x="4.8210%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8115%" y="517" width="0.0802%" height="15" fill="rgb(248,3,40)" fg:x="60" fg:w="1"/><text x="5.0615%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8115%" y="501" width="0.0802%" height="15" fill="rgb(223,178,23)" fg:x="60" fg:w="1"/><text x="5.0615%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.9719%" y="501" width="0.0802%" height="15" fill="rgb(240,132,45)" fg:x="62" fg:w="1"/><text x="5.2219%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9719%" y="485" width="0.0802%" height="15" fill="rgb(245,164,36)" fg:x="62" fg:w="1"/><text x="5.2219%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.9719%" y="469" width="0.0802%" height="15" fill="rgb(231,188,53)" fg:x="62" fg:w="1"/><text x="5.2219%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9719%" y="453" width="0.0802%" height="15" fill="rgb(237,198,39)" fg:x="62" fg:w="1"/><text x="5.2219%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9719%" y="437" width="0.0802%" height="15" fill="rgb(223,120,35)" fg:x="62" fg:w="1"/><text x="5.2219%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.0521%" y="501" width="0.0802%" height="15" fill="rgb(253,107,49)" fg:x="63" fg:w="1"/><text x="5.3021%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.0521%" y="485" width="0.0802%" height="15" fill="rgb(216,44,31)" fg:x="63" fg:w="1"/><text x="5.3021%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.0521%" y="469" width="0.0802%" height="15" fill="rgb(253,87,21)" fg:x="63" fg:w="1"/><text x="5.3021%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="5.0521%" y="453" width="0.0802%" height="15" fill="rgb(226,18,2)" fg:x="63" fg:w="1"/><text x="5.3021%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.1323%" y="485" width="0.0802%" height="15" fill="rgb(216,8,46)" fg:x="64" fg:w="1"/><text x="5.3823%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="4.9719%" y="517" width="0.3208%" height="15" fill="rgb(226,140,39)" fg:x="62" fg:w="4"/><text x="5.2219%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.1323%" y="501" width="0.1604%" height="15" fill="rgb(221,194,54)" fg:x="64" fg:w="2"/><text x="5.3823%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2125%" y="485" width="0.0802%" height="15" fill="rgb(213,92,11)" fg:x="65" fg:w="1"/><text x="5.4625%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.2125%" y="469" width="0.0802%" height="15" fill="rgb(229,162,46)" fg:x="65" fg:w="1"/><text x="5.4625%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="4.5710%" y="549" width="0.8019%" height="15" fill="rgb(214,111,36)" fg:x="57" fg:w="10"/><text x="4.8210%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="4.8917%" y="533" width="0.4812%" height="15" fill="rgb(207,6,21)" fg:x="61" fg:w="6"/><text x="5.1417%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2927%" y="517" width="0.0802%" height="15" fill="rgb(213,127,38)" fg:x="66" fg:w="1"/><text x="5.5427%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2927%" y="501" width="0.0802%" height="15" fill="rgb(238,118,32)" fg:x="66" fg:w="1"/><text x="5.5427%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.2927%" y="485" width="0.0802%" height="15" fill="rgb(240,139,39)" fg:x="66" fg:w="1"/><text x="5.5427%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.3729%" y="549" width="0.0802%" height="15" fill="rgb(235,10,37)" fg:x="67" fg:w="1"/><text x="5.6229%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.3729%" y="533" width="0.0802%" height="15" fill="rgb(249,171,38)" fg:x="67" fg:w="1"/><text x="5.6229%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.3729%" y="517" width="0.0802%" height="15" fill="rgb(242,144,32)" fg:x="67" fg:w="1"/><text x="5.6229%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.3729%" y="501" width="0.0802%" height="15" fill="rgb(217,117,21)" fg:x="67" fg:w="1"/><text x="5.6229%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.4531%" y="501" width="0.1604%" height="15" fill="rgb(249,87,1)" fg:x="68" fg:w="2"/><text x="5.7031%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.4531%" y="485" width="0.1604%" height="15" fill="rgb(248,196,48)" fg:x="68" fg:w="2"/><text x="5.7031%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6135%" y="501" width="0.0802%" height="15" fill="rgb(251,206,33)" fg:x="70" fg:w="1"/><text x="5.8635%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.6135%" y="485" width="0.0802%" height="15" fill="rgb(232,141,28)" fg:x="70" fg:w="1"/><text x="5.8635%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6135%" y="469" width="0.0802%" height="15" fill="rgb(209,167,14)" fg:x="70" fg:w="1"/><text x="5.8635%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6135%" y="453" width="0.0802%" height="15" fill="rgb(225,11,50)" fg:x="70" fg:w="1"/><text x="5.8635%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.6135%" y="437" width="0.0802%" height="15" fill="rgb(209,50,20)" fg:x="70" fg:w="1"/><text x="5.8635%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6937%" y="469" width="0.0802%" height="15" fill="rgb(212,17,46)" fg:x="71" fg:w="1"/><text x="5.9437%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6937%" y="453" width="0.0802%" height="15" fill="rgb(216,101,39)" fg:x="71" fg:w="1"/><text x="5.9437%" y="463.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="5.6937%" y="437" width="0.0802%" height="15" fill="rgb(212,228,48)" fg:x="71" fg:w="1"/><text x="5.9437%" y="447.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.6937%" y="421" width="0.0802%" height="15" fill="rgb(250,6,50)" fg:x="71" fg:w="1"/><text x="5.9437%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="5.8540%" y="453" width="0.0802%" height="15" fill="rgb(250,160,48)" fg:x="73" fg:w="1"/><text x="6.1040%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="5.8540%" y="437" width="0.0802%" height="15" fill="rgb(244,216,33)" fg:x="73" fg:w="1"/><text x="6.1040%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.32%)</title><rect x="5.6937%" y="501" width="0.3208%" height="15" fill="rgb(207,157,5)" fg:x="71" fg:w="4"/><text x="5.9437%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="5.6937%" y="485" width="0.3208%" height="15" fill="rgb(228,199,8)" fg:x="71" fg:w="4"/><text x="5.9437%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="5.7739%" y="469" width="0.2406%" height="15" fill="rgb(227,80,20)" fg:x="72" fg:w="3"/><text x="6.0239%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9342%" y="453" width="0.0802%" height="15" fill="rgb(222,9,33)" fg:x="74" fg:w="1"/><text x="6.1842%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.9342%" y="437" width="0.0802%" height="15" fill="rgb(239,44,28)" fg:x="74" fg:w="1"/><text x="6.1842%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9342%" y="421" width="0.0802%" height="15" fill="rgb(249,187,43)" fg:x="74" fg:w="1"/><text x="6.1842%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.9342%" y="405" width="0.0802%" height="15" fill="rgb(216,141,28)" fg:x="74" fg:w="1"/><text x="6.1842%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9342%" y="389" width="0.0802%" height="15" fill="rgb(230,154,53)" fg:x="74" fg:w="1"/><text x="6.1842%" y="399.50"></text></g><g><title>kernel::compare::any_entity_changes (9 samples, 0.72%)</title><rect x="5.4531%" y="549" width="0.7217%" height="15" fill="rgb(227,82,4)" fg:x="68" fg:w="9"/><text x="5.7031%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="5.4531%" y="533" width="0.7217%" height="15" fill="rgb(220,107,16)" fg:x="68" fg:w="9"/><text x="5.7031%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="5.4531%" y="517" width="0.7217%" height="15" fill="rgb(207,187,2)" fg:x="68" fg:w="9"/><text x="5.7031%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="6.0144%" y="501" width="0.1604%" height="15" fill="rgb(210,162,52)" fg:x="75" fg:w="2"/><text x="6.2644%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="6.0144%" y="485" width="0.1604%" height="15" fill="rgb(217,216,49)" fg:x="75" fg:w="2"/><text x="6.2644%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.0946%" y="469" width="0.0802%" height="15" fill="rgb(218,146,49)" fg:x="76" fg:w="1"/><text x="6.3446%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0946%" y="453" width="0.0802%" height="15" fill="rgb(216,55,40)" fg:x="76" fg:w="1"/><text x="6.3446%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0946%" y="437" width="0.0802%" height="15" fill="rgb(208,196,21)" fg:x="76" fg:w="1"/><text x="6.3446%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="6.0946%" y="421" width="0.0802%" height="15" fill="rgb(242,117,42)" fg:x="76" fg:w="1"/><text x="6.3446%" y="431.50"></text></g><g><title>engine::session::Session::flush (23 samples, 1.84%)</title><rect x="4.4106%" y="613" width="1.8444%" height="15" fill="rgb(210,11,23)" fg:x="55" fg:w="23"/><text x="4.6606%" y="623.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (23 samples, 1.84%)</title><rect x="4.4106%" y="597" width="1.8444%" height="15" fill="rgb(217,110,2)" fg:x="55" fg:w="23"/><text x="4.6606%" y="607.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (21 samples, 1.68%)</title><rect x="4.5710%" y="581" width="1.6840%" height="15" fill="rgb(229,77,54)" fg:x="57" fg:w="21"/><text x="4.8210%" y="591.50"></text></g><g><title>engine::session::Session::check_for_changes (21 samples, 1.68%)</title><rect x="4.5710%" y="565" width="1.6840%" height="15" fill="rgb(218,53,16)" fg:x="57" fg:w="21"/><text x="4.8210%" y="575.50"></text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="6.1748%" y="549" width="0.0802%" height="15" fill="rgb(215,38,13)" fg:x="77" fg:w="1"/><text x="6.4248%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.1748%" y="533" width="0.0802%" height="15" fill="rgb(235,42,18)" fg:x="77" fg:w="1"/><text x="6.4248%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.1748%" y="517" width="0.0802%" height="15" fill="rgb(219,66,54)" fg:x="77" fg:w="1"/><text x="6.4248%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.2550%" y="597" width="0.0802%" height="15" fill="rgb(222,205,4)" fg:x="78" fg:w="1"/><text x="6.5050%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.2550%" y="581" width="0.0802%" height="15" fill="rgb(227,213,46)" fg:x="78" fg:w="1"/><text x="6.5050%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="6.2550%" y="565" width="0.0802%" height="15" fill="rgb(250,145,42)" fg:x="78" fg:w="1"/><text x="6.5050%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2550%" y="549" width="0.0802%" height="15" fill="rgb(219,15,2)" fg:x="78" fg:w="1"/><text x="6.5050%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2550%" y="533" width="0.0802%" height="15" fill="rgb(231,181,52)" fg:x="78" fg:w="1"/><text x="6.5050%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="6.2550%" y="517" width="0.0802%" height="15" fill="rgb(235,1,42)" fg:x="78" fg:w="1"/><text x="6.5050%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2550%" y="501" width="0.0802%" height="15" fill="rgb(249,88,27)" fg:x="78" fg:w="1"/><text x="6.5050%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3352%" y="517" width="0.0802%" height="15" fill="rgb(235,145,16)" fg:x="79" fg:w="1"/><text x="6.5852%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3352%" y="501" width="0.0802%" height="15" fill="rgb(237,114,19)" fg:x="79" fg:w="1"/><text x="6.5852%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3352%" y="485" width="0.0802%" height="15" fill="rgb(238,51,50)" fg:x="79" fg:w="1"/><text x="6.5852%" y="495.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="6.3352%" y="581" width="0.1604%" height="15" fill="rgb(205,194,25)" fg:x="79" fg:w="2"/><text x="6.5852%" y="591.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="6.3352%" y="565" width="0.1604%" height="15" fill="rgb(215,203,17)" fg:x="79" fg:w="2"/><text x="6.5852%" y="575.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="6.3352%" y="549" width="0.1604%" height="15" fill="rgb(233,112,49)" fg:x="79" fg:w="2"/><text x="6.5852%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.3352%" y="533" width="0.1604%" height="15" fill="rgb(241,130,26)" fg:x="79" fg:w="2"/><text x="6.5852%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.4154%" y="517" width="0.0802%" height="15" fill="rgb(252,223,19)" fg:x="80" fg:w="1"/><text x="6.6654%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4154%" y="501" width="0.0802%" height="15" fill="rgb(211,95,25)" fg:x="80" fg:w="1"/><text x="6.6654%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4154%" y="485" width="0.0802%" height="15" fill="rgb(251,182,27)" fg:x="80" fg:w="1"/><text x="6.6654%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4154%" y="469" width="0.0802%" height="15" fill="rgb(238,24,4)" fg:x="80" fg:w="1"/><text x="6.6654%" y="479.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="6.2550%" y="613" width="0.3208%" height="15" fill="rgb(224,220,25)" fg:x="78" fg:w="4"/><text x="6.5050%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="6.3352%" y="597" width="0.2406%" height="15" fill="rgb(239,133,26)" fg:x="79" fg:w="3"/><text x="6.5852%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="6.4956%" y="581" width="0.0802%" height="15" fill="rgb(211,94,48)" fg:x="81" fg:w="1"/><text x="6.7456%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="6.4956%" y="565" width="0.0802%" height="15" fill="rgb(239,87,6)" fg:x="81" fg:w="1"/><text x="6.7456%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.4956%" y="549" width="0.0802%" height="15" fill="rgb(227,62,0)" fg:x="81" fg:w="1"/><text x="6.7456%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="6.4956%" y="533" width="0.0802%" height="15" fill="rgb(211,226,4)" fg:x="81" fg:w="1"/><text x="6.7456%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="6.4956%" y="517" width="0.0802%" height="15" fill="rgb(253,38,52)" fg:x="81" fg:w="1"/><text x="6.7456%" y="527.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="6.4956%" y="501" width="0.0802%" height="15" fill="rgb(229,126,40)" fg:x="81" fg:w="1"/><text x="6.7456%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.5758%" y="597" width="0.0802%" height="15" fill="rgb(229,165,44)" fg:x="82" fg:w="1"/><text x="6.8258%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="6.5758%" y="581" width="0.0802%" height="15" fill="rgb(247,95,47)" fg:x="82" fg:w="1"/><text x="6.8258%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="6.5758%" y="565" width="0.0802%" height="15" fill="rgb(216,140,30)" fg:x="82" fg:w="1"/><text x="6.8258%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5758%" y="549" width="0.0802%" height="15" fill="rgb(246,214,8)" fg:x="82" fg:w="1"/><text x="6.8258%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5758%" y="533" width="0.0802%" height="15" fill="rgb(227,224,15)" fg:x="82" fg:w="1"/><text x="6.8258%" y="543.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="6.5758%" y="613" width="0.1604%" height="15" fill="rgb(233,175,4)" fg:x="82" fg:w="2"/><text x="6.8258%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="6.6560%" y="597" width="0.0802%" height="15" fill="rgb(221,66,45)" fg:x="83" fg:w="1"/><text x="6.9060%" y="607.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="6.6560%" y="581" width="0.0802%" height="15" fill="rgb(221,178,18)" fg:x="83" fg:w="1"/><text x="6.9060%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (31 samples, 2.49%)</title><rect x="4.3304%" y="629" width="2.4860%" height="15" fill="rgb(213,81,29)" fg:x="54" fg:w="31"/><text x="4.5804%" y="639.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="6.7362%" y="613" width="0.0802%" height="15" fill="rgb(220,89,49)" fg:x="84" fg:w="1"/><text x="6.9862%" y="623.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="6.7362%" y="597" width="0.0802%" height="15" fill="rgb(227,60,33)" fg:x="84" fg:w="1"/><text x="6.9862%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (64 samples, 5.13%)</title><rect x="1.7642%" y="645" width="5.1323%" height="15" fill="rgb(205,113,12)" fg:x="22" fg:w="64"/><text x="2.0142%" y="655.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="6.8164%" y="629" width="0.0802%" height="15" fill="rgb(211,32,1)" fg:x="85" fg:w="1"/><text x="7.0664%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="6.8164%" y="613" width="0.0802%" height="15" fill="rgb(246,2,12)" fg:x="85" fg:w="1"/><text x="7.0664%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="6.8164%" y="597" width="0.0802%" height="15" fill="rgb(243,37,27)" fg:x="85" fg:w="1"/><text x="7.0664%" y="607.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="6.8164%" y="581" width="0.0802%" height="15" fill="rgb(248,211,31)" fg:x="85" fg:w="1"/><text x="7.0664%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="6.8966%" y="645" width="0.0802%" height="15" fill="rgb(242,146,47)" fg:x="86" fg:w="1"/><text x="7.1466%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="6.8966%" y="629" width="0.0802%" height="15" fill="rgb(206,70,20)" fg:x="86" fg:w="1"/><text x="7.1466%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="6.8966%" y="613" width="0.0802%" height="15" fill="rgb(215,10,51)" fg:x="86" fg:w="1"/><text x="7.1466%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="6.8966%" y="597" width="0.0802%" height="15" fill="rgb(243,178,53)" fg:x="86" fg:w="1"/><text x="7.1466%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8966%" y="581" width="0.0802%" height="15" fill="rgb(233,221,20)" fg:x="86" fg:w="1"/><text x="7.1466%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0569%" y="597" width="0.0802%" height="15" fill="rgb(218,95,35)" fg:x="88" fg:w="1"/><text x="7.3069%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="7.0569%" y="613" width="0.1604%" height="15" fill="rgb(229,13,5)" fg:x="88" fg:w="2"/><text x="7.3069%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1371%" y="597" width="0.0802%" height="15" fill="rgb(252,164,30)" fg:x="89" fg:w="1"/><text x="7.3871%" y="607.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="7.2173%" y="613" width="0.1604%" height="15" fill="rgb(232,68,36)" fg:x="90" fg:w="2"/><text x="7.4673%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="7.2173%" y="597" width="0.1604%" height="15" fill="rgb(219,59,54)" fg:x="90" fg:w="2"/><text x="7.4673%" y="607.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="7.2173%" y="581" width="0.1604%" height="15" fill="rgb(250,92,33)" fg:x="90" fg:w="2"/><text x="7.4673%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2975%" y="565" width="0.0802%" height="15" fill="rgb(229,162,54)" fg:x="91" fg:w="1"/><text x="7.5475%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2975%" y="549" width="0.0802%" height="15" fill="rgb(244,114,52)" fg:x="91" fg:w="1"/><text x="7.5475%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2975%" y="533" width="0.0802%" height="15" fill="rgb(212,211,43)" fg:x="91" fg:w="1"/><text x="7.5475%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="7.3777%" y="597" width="0.0802%" height="15" fill="rgb(226,147,8)" fg:x="92" fg:w="1"/><text x="7.6277%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="7.4579%" y="581" width="0.0802%" height="15" fill="rgb(226,23,13)" fg:x="93" fg:w="1"/><text x="7.7079%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="7.5381%" y="549" width="0.2406%" height="15" fill="rgb(240,63,4)" fg:x="94" fg:w="3"/><text x="7.7881%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="7.5381%" y="533" width="0.2406%" height="15" fill="rgb(221,1,32)" fg:x="94" fg:w="3"/><text x="7.7881%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.6183%" y="517" width="0.1604%" height="15" fill="rgb(242,117,10)" fg:x="95" fg:w="2"/><text x="7.8683%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="7.6183%" y="501" width="0.1604%" height="15" fill="rgb(249,172,44)" fg:x="95" fg:w="2"/><text x="7.8683%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.6985%" y="485" width="0.0802%" height="15" fill="rgb(244,46,45)" fg:x="96" fg:w="1"/><text x="7.9485%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.6985%" y="469" width="0.0802%" height="15" fill="rgb(206,43,17)" fg:x="96" fg:w="1"/><text x="7.9485%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.6985%" y="453" width="0.0802%" height="15" fill="rgb(239,218,39)" fg:x="96" fg:w="1"/><text x="7.9485%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.7787%" y="533" width="0.0802%" height="15" fill="rgb(208,169,54)" fg:x="97" fg:w="1"/><text x="8.0287%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7787%" y="517" width="0.0802%" height="15" fill="rgb(247,25,42)" fg:x="97" fg:w="1"/><text x="8.0287%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.7787%" y="501" width="0.0802%" height="15" fill="rgb(226,23,31)" fg:x="97" fg:w="1"/><text x="8.0287%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.7787%" y="485" width="0.0802%" height="15" fill="rgb(247,16,28)" fg:x="97" fg:w="1"/><text x="8.0287%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7787%" y="469" width="0.0802%" height="15" fill="rgb(231,147,38)" fg:x="97" fg:w="1"/><text x="8.0287%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7787%" y="453" width="0.0802%" height="15" fill="rgb(253,81,48)" fg:x="97" fg:w="1"/><text x="8.0287%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8589%" y="533" width="0.0802%" height="15" fill="rgb(249,222,43)" fg:x="98" fg:w="1"/><text x="8.1089%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8589%" y="517" width="0.0802%" height="15" fill="rgb(221,3,27)" fg:x="98" fg:w="1"/><text x="8.1089%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.9391%" y="533" width="0.2406%" height="15" fill="rgb(228,180,5)" fg:x="99" fg:w="3"/><text x="8.1891%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.9391%" y="517" width="0.2406%" height="15" fill="rgb(227,131,42)" fg:x="99" fg:w="3"/><text x="8.1891%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.0192%" y="501" width="0.1604%" height="15" fill="rgb(212,3,39)" fg:x="100" fg:w="2"/><text x="8.2692%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.0192%" y="485" width="0.1604%" height="15" fill="rgb(226,45,5)" fg:x="100" fg:w="2"/><text x="8.2692%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0994%" y="469" width="0.0802%" height="15" fill="rgb(215,167,45)" fg:x="101" fg:w="1"/><text x="8.3494%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.0994%" y="453" width="0.0802%" height="15" fill="rgb(250,218,53)" fg:x="101" fg:w="1"/><text x="8.3494%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="7.7787%" y="549" width="0.4812%" height="15" fill="rgb(207,140,0)" fg:x="97" fg:w="6"/><text x="8.0287%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1796%" y="533" width="0.0802%" height="15" fill="rgb(238,133,51)" fg:x="102" fg:w="1"/><text x="8.4296%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="7.5381%" y="565" width="0.8019%" height="15" fill="rgb(218,203,53)" fg:x="94" fg:w="10"/><text x="7.7881%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.2598%" y="549" width="0.0802%" height="15" fill="rgb(226,184,25)" fg:x="103" fg:w="1"/><text x="8.5098%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.2598%" y="533" width="0.0802%" height="15" fill="rgb(231,121,21)" fg:x="103" fg:w="1"/><text x="8.5098%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.2598%" y="517" width="0.0802%" height="15" fill="rgb(251,14,34)" fg:x="103" fg:w="1"/><text x="8.5098%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="7.5381%" y="581" width="0.8821%" height="15" fill="rgb(249,193,11)" fg:x="94" fg:w="11"/><text x="7.7881%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.3400%" y="565" width="0.0802%" height="15" fill="rgb(220,172,37)" fg:x="104" fg:w="1"/><text x="8.5900%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.3400%" y="549" width="0.0802%" height="15" fill="rgb(231,229,43)" fg:x="104" fg:w="1"/><text x="8.5900%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.3400%" y="533" width="0.0802%" height="15" fill="rgb(250,161,5)" fg:x="104" fg:w="1"/><text x="8.5900%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.4202%" y="533" width="0.0802%" height="15" fill="rgb(218,225,18)" fg:x="105" fg:w="1"/><text x="8.6702%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4202%" y="517" width="0.0802%" height="15" fill="rgb(245,45,42)" fg:x="105" fg:w="1"/><text x="8.6702%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.5004%" y="517" width="0.1604%" height="15" fill="rgb(211,115,1)" fg:x="106" fg:w="2"/><text x="8.7504%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5806%" y="501" width="0.0802%" height="15" fill="rgb(248,133,52)" fg:x="107" fg:w="1"/><text x="8.8306%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.6608%" y="501" width="0.1604%" height="15" fill="rgb(238,100,21)" fg:x="108" fg:w="2"/><text x="8.9108%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="8.4202%" y="581" width="0.4812%" height="15" fill="rgb(247,144,11)" fg:x="105" fg:w="6"/><text x="8.6702%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="8.4202%" y="565" width="0.4812%" height="15" fill="rgb(206,164,16)" fg:x="105" fg:w="6"/><text x="8.6702%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="8.4202%" y="549" width="0.4812%" height="15" fill="rgb(222,34,3)" fg:x="105" fg:w="6"/><text x="8.6702%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="8.5004%" y="533" width="0.4010%" height="15" fill="rgb(248,82,4)" fg:x="106" fg:w="5"/><text x="8.7504%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.6608%" y="517" width="0.2406%" height="15" fill="rgb(228,81,46)" fg:x="108" fg:w="3"/><text x="8.9108%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.8212%" y="501" width="0.0802%" height="15" fill="rgb(227,67,47)" fg:x="110" fg:w="1"/><text x="9.0712%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.8212%" y="485" width="0.0802%" height="15" fill="rgb(215,93,53)" fg:x="110" fg:w="1"/><text x="9.0712%" y="495.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="8.9014%" y="533" width="0.2406%" height="15" fill="rgb(248,194,39)" fg:x="111" fg:w="3"/><text x="9.1514%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1419%" y="533" width="0.0802%" height="15" fill="rgb(215,5,19)" fg:x="114" fg:w="1"/><text x="9.3919%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2221%" y="517" width="0.0802%" height="15" fill="rgb(226,215,51)" fg:x="115" fg:w="1"/><text x="9.4721%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2221%" y="501" width="0.0802%" height="15" fill="rgb(225,56,26)" fg:x="115" fg:w="1"/><text x="9.4721%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3023%" y="501" width="0.0802%" height="15" fill="rgb(222,75,29)" fg:x="116" fg:w="1"/><text x="9.5523%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="8.9014%" y="565" width="0.5613%" height="15" fill="rgb(236,139,6)" fg:x="111" fg:w="7"/><text x="9.1514%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.56%)</title><rect x="8.9014%" y="549" width="0.5613%" height="15" fill="rgb(223,137,36)" fg:x="111" fg:w="7"/><text x="9.1514%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="9.2221%" y="533" width="0.2406%" height="15" fill="rgb(226,99,2)" fg:x="115" fg:w="3"/><text x="9.4721%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.3023%" y="517" width="0.1604%" height="15" fill="rgb(206,133,23)" fg:x="116" fg:w="2"/><text x="9.5523%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3825%" y="501" width="0.0802%" height="15" fill="rgb(243,173,15)" fg:x="117" fg:w="1"/><text x="9.6325%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.3825%" y="485" width="0.0802%" height="15" fill="rgb(228,69,28)" fg:x="117" fg:w="1"/><text x="9.6325%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3825%" y="469" width="0.0802%" height="15" fill="rgb(212,51,22)" fg:x="117" fg:w="1"/><text x="9.6325%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="9.6231%" y="533" width="0.1604%" height="15" fill="rgb(227,113,0)" fg:x="120" fg:w="2"/><text x="9.8731%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7835%" y="533" width="0.0802%" height="15" fill="rgb(252,84,27)" fg:x="122" fg:w="1"/><text x="10.0335%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7835%" y="517" width="0.0802%" height="15" fill="rgb(223,145,39)" fg:x="122" fg:w="1"/><text x="10.0335%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8637%" y="533" width="0.0802%" height="15" fill="rgb(239,219,30)" fg:x="123" fg:w="1"/><text x="10.1137%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.8637%" y="517" width="0.0802%" height="15" fill="rgb(224,196,39)" fg:x="123" fg:w="1"/><text x="10.1137%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8637%" y="501" width="0.0802%" height="15" fill="rgb(205,35,43)" fg:x="123" fg:w="1"/><text x="10.1137%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9439%" y="533" width="0.0802%" height="15" fill="rgb(228,201,21)" fg:x="124" fg:w="1"/><text x="10.1939%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.9439%" y="517" width="0.0802%" height="15" fill="rgb(237,118,16)" fg:x="124" fg:w="1"/><text x="10.1939%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.9439%" y="501" width="0.0802%" height="15" fill="rgb(241,17,19)" fg:x="124" fg:w="1"/><text x="10.1939%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9439%" y="485" width="0.0802%" height="15" fill="rgb(214,10,25)" fg:x="124" fg:w="1"/><text x="10.1939%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.9439%" y="469" width="0.0802%" height="15" fill="rgb(238,37,29)" fg:x="124" fg:w="1"/><text x="10.1939%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9439%" y="453" width="0.0802%" height="15" fill="rgb(253,83,25)" fg:x="124" fg:w="1"/><text x="10.1939%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.0241%" y="517" width="0.1604%" height="15" fill="rgb(234,192,12)" fg:x="125" fg:w="2"/><text x="10.2741%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.1844%" y="517" width="0.1604%" height="15" fill="rgb(241,216,45)" fg:x="127" fg:w="2"/><text x="10.4344%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.1844%" y="501" width="0.1604%" height="15" fill="rgb(242,22,33)" fg:x="127" fg:w="2"/><text x="10.4344%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.1844%" y="485" width="0.1604%" height="15" fill="rgb(231,105,49)" fg:x="127" fg:w="2"/><text x="10.4344%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.4250%" y="485" width="0.0802%" height="15" fill="rgb(218,204,15)" fg:x="130" fg:w="1"/><text x="10.6750%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="10.4250%" y="469" width="0.0802%" height="15" fill="rgb(235,138,41)" fg:x="130" fg:w="1"/><text x="10.6750%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="10.4250%" y="501" width="0.3208%" height="15" fill="rgb(246,0,9)" fg:x="130" fg:w="4"/><text x="10.6750%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="10.5052%" y="485" width="0.2406%" height="15" fill="rgb(210,74,4)" fg:x="131" fg:w="3"/><text x="10.7552%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6656%" y="469" width="0.0802%" height="15" fill="rgb(250,60,41)" fg:x="133" fg:w="1"/><text x="10.9156%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (17 samples, 1.36%)</title><rect x="9.4627%" y="565" width="1.3633%" height="15" fill="rgb(220,115,12)" fg:x="118" fg:w="17"/><text x="9.7127%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.36%)</title><rect x="9.4627%" y="549" width="1.3633%" height="15" fill="rgb(237,100,13)" fg:x="118" fg:w="17"/><text x="9.7127%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="10.0241%" y="533" width="0.8019%" height="15" fill="rgb(213,55,26)" fg:x="125" fg:w="10"/><text x="10.2741%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (6 samples, 0.48%)</title><rect x="10.3448%" y="517" width="0.4812%" height="15" fill="rgb(216,17,4)" fg:x="129" fg:w="6"/><text x="10.5948%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="10.7458%" y="501" width="0.0802%" height="15" fill="rgb(220,153,47)" fg:x="134" fg:w="1"/><text x="10.9958%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7458%" y="485" width="0.0802%" height="15" fill="rgb(215,131,9)" fg:x="134" fg:w="1"/><text x="10.9958%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.9864%" y="421" width="0.0802%" height="15" fill="rgb(233,46,42)" fg:x="137" fg:w="1"/><text x="11.2364%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.9864%" y="405" width="0.0802%" height="15" fill="rgb(226,86,7)" fg:x="137" fg:w="1"/><text x="11.2364%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9864%" y="389" width="0.0802%" height="15" fill="rgb(239,226,21)" fg:x="137" fg:w="1"/><text x="11.2364%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.0666%" y="405" width="0.0802%" height="15" fill="rgb(244,137,22)" fg:x="138" fg:w="1"/><text x="11.3166%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.0666%" y="389" width="0.0802%" height="15" fill="rgb(211,139,35)" fg:x="138" fg:w="1"/><text x="11.3166%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.0666%" y="373" width="0.0802%" height="15" fill="rgb(214,62,50)" fg:x="138" fg:w="1"/><text x="11.3166%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="10.8260%" y="469" width="0.4812%" height="15" fill="rgb(212,113,44)" fg:x="135" fg:w="6"/><text x="11.0760%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="10.9062%" y="453" width="0.4010%" height="15" fill="rgb(226,150,43)" fg:x="136" fg:w="5"/><text x="11.1562%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="10.9062%" y="437" width="0.4010%" height="15" fill="rgb(250,71,37)" fg:x="136" fg:w="5"/><text x="11.1562%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="11.0666%" y="421" width="0.2406%" height="15" fill="rgb(219,76,19)" fg:x="138" fg:w="3"/><text x="11.3166%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.1468%" y="405" width="0.1604%" height="15" fill="rgb(250,39,11)" fg:x="139" fg:w="2"/><text x="11.3968%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.1468%" y="389" width="0.1604%" height="15" fill="rgb(230,64,31)" fg:x="139" fg:w="2"/><text x="11.3968%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2269%" y="373" width="0.0802%" height="15" fill="rgb(208,222,23)" fg:x="140" fg:w="1"/><text x="11.4769%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="10.8260%" y="501" width="0.5613%" height="15" fill="rgb(227,125,18)" fg:x="135" fg:w="7"/><text x="11.0760%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="10.8260%" y="485" width="0.5613%" height="15" fill="rgb(234,210,9)" fg:x="135" fg:w="7"/><text x="11.0760%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="11.3071%" y="469" width="0.0802%" height="15" fill="rgb(217,127,24)" fg:x="141" fg:w="1"/><text x="11.5571%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="11.3873%" y="485" width="0.0802%" height="15" fill="rgb(239,141,48)" fg:x="142" fg:w="1"/><text x="11.6373%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.72%)</title><rect x="10.8260%" y="565" width="0.7217%" height="15" fill="rgb(227,109,8)" fg:x="135" fg:w="9"/><text x="11.0760%" y="575.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.72%)</title><rect x="10.8260%" y="549" width="0.7217%" height="15" fill="rgb(235,184,23)" fg:x="135" fg:w="9"/><text x="11.0760%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.72%)</title><rect x="10.8260%" y="533" width="0.7217%" height="15" fill="rgb(227,226,48)" fg:x="135" fg:w="9"/><text x="11.0760%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.72%)</title><rect x="10.8260%" y="517" width="0.7217%" height="15" fill="rgb(206,150,11)" fg:x="135" fg:w="9"/><text x="11.0760%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="11.3873%" y="501" width="0.1604%" height="15" fill="rgb(254,2,33)" fg:x="142" fg:w="2"/><text x="11.6373%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4675%" y="485" width="0.0802%" height="15" fill="rgb(243,160,20)" fg:x="143" fg:w="1"/><text x="11.7175%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.5477%" y="533" width="0.0802%" height="15" fill="rgb(218,208,30)" fg:x="144" fg:w="1"/><text x="11.7977%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.5477%" y="517" width="0.0802%" height="15" fill="rgb(224,120,49)" fg:x="144" fg:w="1"/><text x="11.7977%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.5477%" y="501" width="0.0802%" height="15" fill="rgb(246,12,2)" fg:x="144" fg:w="1"/><text x="11.7977%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="11.5477%" y="549" width="0.1604%" height="15" fill="rgb(236,117,3)" fg:x="144" fg:w="2"/><text x="11.7977%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.6279%" y="533" width="0.0802%" height="15" fill="rgb(216,128,52)" fg:x="145" fg:w="1"/><text x="11.8779%" y="543.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (55 samples, 4.41%)</title><rect x="7.3777%" y="613" width="4.4106%" height="15" fill="rgb(246,145,19)" fg:x="92" fg:w="55"/><text x="7.6277%" y="623.50">engin..</text></g><g><title>engine::session::Session::check_for_changes (54 samples, 4.33%)</title><rect x="7.4579%" y="597" width="4.3304%" height="15" fill="rgb(222,11,46)" fg:x="93" fg:w="54"/><text x="7.7079%" y="607.50">engin..</text></g><g><title>kernel::compare::any_entity_changes (36 samples, 2.89%)</title><rect x="8.9014%" y="581" width="2.8869%" height="15" fill="rgb(245,82,36)" fg:x="111" fg:w="36"/><text x="9.1514%" y="591.50">ke..</text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="11.5477%" y="565" width="0.2406%" height="15" fill="rgb(250,73,51)" fg:x="144" fg:w="3"/><text x="11.7977%" y="575.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="11.7081%" y="549" width="0.0802%" height="15" fill="rgb(221,189,23)" fg:x="146" fg:w="1"/><text x="11.9581%" y="559.50"></text></g><g><title>engine::session::Session::close (61 samples, 4.89%)</title><rect x="6.9767%" y="645" width="4.8917%" height="15" fill="rgb(210,33,7)" fg:x="87" fg:w="61"/><text x="7.2267%" y="655.50">engine..</text></g><g><title>engine::session::Session::save_entity_changes (60 samples, 4.81%)</title><rect x="7.0569%" y="629" width="4.8115%" height="15" fill="rgb(210,107,22)" fg:x="88" fg:w="60"/><text x="7.3069%" y="639.50">engine..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="11.7883%" y="613" width="0.0802%" height="15" fill="rgb(222,116,37)" fg:x="147" fg:w="1"/><text x="12.0383%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="11.7883%" y="597" width="0.0802%" height="15" fill="rgb(254,17,48)" fg:x="147" fg:w="1"/><text x="12.0383%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="11.7883%" y="581" width="0.0802%" height="15" fill="rgb(224,36,32)" fg:x="147" fg:w="1"/><text x="12.0383%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="11.7883%" y="565" width="0.0802%" height="15" fill="rgb(232,90,46)" fg:x="147" fg:w="1"/><text x="12.0383%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.7883%" y="549" width="0.0802%" height="15" fill="rgb(241,66,40)" fg:x="147" fg:w="1"/><text x="12.0383%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.7883%" y="533" width="0.0802%" height="15" fill="rgb(249,184,29)" fg:x="147" fg:w="1"/><text x="12.0383%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="11.7883%" y="517" width="0.0802%" height="15" fill="rgb(231,181,1)" fg:x="147" fg:w="1"/><text x="12.0383%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="11.7883%" y="501" width="0.0802%" height="15" fill="rgb(224,94,2)" fg:x="147" fg:w="1"/><text x="12.0383%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="11.7883%" y="485" width="0.0802%" height="15" fill="rgb(229,170,15)" fg:x="147" fg:w="1"/><text x="12.0383%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.7883%" y="469" width="0.0802%" height="15" fill="rgb(240,127,35)" fg:x="147" fg:w="1"/><text x="12.0383%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.7883%" y="453" width="0.0802%" height="15" fill="rgb(248,196,34)" fg:x="147" fg:w="1"/><text x="12.0383%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.7883%" y="437" width="0.0802%" height="15" fill="rgb(236,137,7)" fg:x="147" fg:w="1"/><text x="12.0383%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="11.7883%" y="421" width="0.0802%" height="15" fill="rgb(235,127,16)" fg:x="147" fg:w="1"/><text x="12.0383%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="11.7883%" y="405" width="0.0802%" height="15" fill="rgb(250,192,54)" fg:x="147" fg:w="1"/><text x="12.0383%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="11.7883%" y="389" width="0.0802%" height="15" fill="rgb(218,98,20)" fg:x="147" fg:w="1"/><text x="12.0383%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="11.7883%" y="373" width="0.0802%" height="15" fill="rgb(230,176,47)" fg:x="147" fg:w="1"/><text x="12.0383%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.7883%" y="357" width="0.0802%" height="15" fill="rgb(244,2,33)" fg:x="147" fg:w="1"/><text x="12.0383%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.8685%" y="437" width="0.0802%" height="15" fill="rgb(231,100,17)" fg:x="148" fg:w="1"/><text x="12.1185%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.8685%" y="421" width="0.0802%" height="15" fill="rgb(245,23,12)" fg:x="148" fg:w="1"/><text x="12.1185%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="11.8685%" y="405" width="0.0802%" height="15" fill="rgb(249,55,22)" fg:x="148" fg:w="1"/><text x="12.1185%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="11.8685%" y="389" width="0.0802%" height="15" fill="rgb(207,134,9)" fg:x="148" fg:w="1"/><text x="12.1185%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="11.8685%" y="373" width="0.0802%" height="15" fill="rgb(218,134,0)" fg:x="148" fg:w="1"/><text x="12.1185%" y="383.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (2 samples, 0.16%)</title><rect x="11.8685%" y="613" width="0.1604%" height="15" fill="rgb(213,212,33)" fg:x="148" fg:w="2"/><text x="12.1185%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="11.8685%" y="597" width="0.1604%" height="15" fill="rgb(252,106,18)" fg:x="148" fg:w="2"/><text x="12.1185%" y="607.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="11.8685%" y="581" width="0.1604%" height="15" fill="rgb(208,126,42)" fg:x="148" fg:w="2"/><text x="12.1185%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="11.8685%" y="565" width="0.1604%" height="15" fill="rgb(246,175,29)" fg:x="148" fg:w="2"/><text x="12.1185%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="11.8685%" y="549" width="0.1604%" height="15" fill="rgb(215,13,50)" fg:x="148" fg:w="2"/><text x="12.1185%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="11.8685%" y="533" width="0.1604%" height="15" fill="rgb(216,172,15)" fg:x="148" fg:w="2"/><text x="12.1185%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.8685%" y="517" width="0.1604%" height="15" fill="rgb(212,103,13)" fg:x="148" fg:w="2"/><text x="12.1185%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.8685%" y="501" width="0.1604%" height="15" fill="rgb(231,171,36)" fg:x="148" fg:w="2"/><text x="12.1185%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="11.8685%" y="485" width="0.1604%" height="15" fill="rgb(250,123,20)" fg:x="148" fg:w="2"/><text x="12.1185%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.8685%" y="469" width="0.1604%" height="15" fill="rgb(212,53,50)" fg:x="148" fg:w="2"/><text x="12.1185%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.8685%" y="453" width="0.1604%" height="15" fill="rgb(243,54,12)" fg:x="148" fg:w="2"/><text x="12.1185%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9487%" y="437" width="0.0802%" height="15" fill="rgb(234,101,34)" fg:x="149" fg:w="1"/><text x="12.1987%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9487%" y="421" width="0.0802%" height="15" fill="rgb(254,67,22)" fg:x="149" fg:w="1"/><text x="12.1987%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.9487%" y="405" width="0.0802%" height="15" fill="rgb(250,35,47)" fg:x="149" fg:w="1"/><text x="12.1987%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="11.9487%" y="389" width="0.0802%" height="15" fill="rgb(226,126,38)" fg:x="149" fg:w="1"/><text x="12.1987%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="12.0289%" y="581" width="0.1604%" height="15" fill="rgb(216,138,53)" fg:x="150" fg:w="2"/><text x="12.2789%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="12.1893%" y="517" width="0.0802%" height="15" fill="rgb(246,199,43)" fg:x="152" fg:w="1"/><text x="12.4393%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="12.1893%" y="549" width="0.1604%" height="15" fill="rgb(232,125,11)" fg:x="152" fg:w="2"/><text x="12.4393%" y="559.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="12.1893%" y="533" width="0.1604%" height="15" fill="rgb(218,219,45)" fg:x="152" fg:w="2"/><text x="12.4393%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.2694%" y="517" width="0.0802%" height="15" fill="rgb(216,102,54)" fg:x="153" fg:w="1"/><text x="12.5194%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.2694%" y="501" width="0.0802%" height="15" fill="rgb(250,228,7)" fg:x="153" fg:w="1"/><text x="12.5194%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.3496%" y="453" width="0.0802%" height="15" fill="rgb(226,125,25)" fg:x="154" fg:w="1"/><text x="12.5996%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="12.3496%" y="501" width="0.1604%" height="15" fill="rgb(224,165,27)" fg:x="154" fg:w="2"/><text x="12.5996%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="12.3496%" y="485" width="0.1604%" height="15" fill="rgb(233,86,3)" fg:x="154" fg:w="2"/><text x="12.5996%" y="495.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="12.3496%" y="469" width="0.1604%" height="15" fill="rgb(228,116,20)" fg:x="154" fg:w="2"/><text x="12.5996%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.4298%" y="453" width="0.0802%" height="15" fill="rgb(209,192,17)" fg:x="155" fg:w="1"/><text x="12.6798%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.5100%" y="469" width="0.0802%" height="15" fill="rgb(224,88,34)" fg:x="156" fg:w="1"/><text x="12.7600%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.5100%" y="453" width="0.0802%" height="15" fill="rgb(233,38,6)" fg:x="156" fg:w="1"/><text x="12.7600%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="12.6704%" y="373" width="0.1604%" height="15" fill="rgb(212,59,30)" fg:x="158" fg:w="2"/><text x="12.9204%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="12.6704%" y="389" width="0.2406%" height="15" fill="rgb(213,80,3)" fg:x="158" fg:w="3"/><text x="12.9204%" y="399.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="12.8308%" y="373" width="0.0802%" height="15" fill="rgb(251,178,7)" fg:x="160" fg:w="1"/><text x="13.0808%" y="383.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="12.8308%" y="357" width="0.0802%" height="15" fill="rgb(213,154,26)" fg:x="160" fg:w="1"/><text x="13.0808%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="12.5902%" y="469" width="0.4010%" height="15" fill="rgb(238,165,49)" fg:x="157" fg:w="5"/><text x="12.8402%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="12.5902%" y="453" width="0.4010%" height="15" fill="rgb(248,91,46)" fg:x="157" fg:w="5"/><text x="12.8402%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="12.5902%" y="437" width="0.4010%" height="15" fill="rgb(244,21,52)" fg:x="157" fg:w="5"/><text x="12.8402%" y="447.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="12.6704%" y="421" width="0.3208%" height="15" fill="rgb(247,122,20)" fg:x="158" fg:w="4"/><text x="12.9204%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="12.6704%" y="405" width="0.3208%" height="15" fill="rgb(218,27,9)" fg:x="158" fg:w="4"/><text x="12.9204%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="12.9110%" y="389" width="0.0802%" height="15" fill="rgb(246,7,6)" fg:x="161" fg:w="1"/><text x="13.1610%" y="399.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="12.9110%" y="373" width="0.0802%" height="15" fill="rgb(227,135,54)" fg:x="161" fg:w="1"/><text x="13.1610%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="12.9912%" y="421" width="0.0802%" height="15" fill="rgb(247,14,11)" fg:x="162" fg:w="1"/><text x="13.2412%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.9912%" y="405" width="0.0802%" height="15" fill="rgb(206,149,34)" fg:x="162" fg:w="1"/><text x="13.2412%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.0714%" y="389" width="0.1604%" height="15" fill="rgb(227,228,4)" fg:x="163" fg:w="2"/><text x="13.3214%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.20%)</title><rect x="13.0714%" y="405" width="1.2029%" height="15" fill="rgb(238,218,28)" fg:x="163" fg:w="15"/><text x="13.3214%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="13.2318%" y="389" width="1.0425%" height="15" fill="rgb(252,86,40)" fg:x="165" fg:w="13"/><text x="13.4818%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1941%" y="373" width="0.0802%" height="15" fill="rgb(251,225,11)" fg:x="177" fg:w="1"/><text x="14.4441%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="14.2743%" y="405" width="0.0802%" height="15" fill="rgb(206,46,49)" fg:x="178" fg:w="1"/><text x="14.5243%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="14.2743%" y="389" width="0.0802%" height="15" fill="rgb(245,128,24)" fg:x="178" fg:w="1"/><text x="14.5243%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="14.3545%" y="405" width="0.6415%" height="15" fill="rgb(219,177,34)" fg:x="179" fg:w="8"/><text x="14.6045%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="14.3545%" y="389" width="0.6415%" height="15" fill="rgb(218,60,48)" fg:x="179" fg:w="8"/><text x="14.6045%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="15.4771%" y="341" width="0.0802%" height="15" fill="rgb(221,11,5)" fg:x="193" fg:w="1"/><text x="15.7271%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="15.5573%" y="341" width="0.0802%" height="15" fill="rgb(220,148,13)" fg:x="194" fg:w="1"/><text x="15.8073%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="15.5573%" y="325" width="0.0802%" height="15" fill="rgb(210,16,3)" fg:x="194" fg:w="1"/><text x="15.8073%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.5573%" y="309" width="0.0802%" height="15" fill="rgb(236,80,2)" fg:x="194" fg:w="1"/><text x="15.8073%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.5573%" y="293" width="0.0802%" height="15" fill="rgb(239,129,19)" fg:x="194" fg:w="1"/><text x="15.8073%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="15.6375%" y="341" width="0.0802%" height="15" fill="rgb(220,106,35)" fg:x="195" fg:w="1"/><text x="15.8875%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7979%" y="277" width="0.0802%" height="15" fill="rgb(252,139,45)" fg:x="197" fg:w="1"/><text x="16.0479%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="15.7177%" y="341" width="0.2406%" height="15" fill="rgb(229,8,36)" fg:x="196" fg:w="3"/><text x="15.9677%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="15.7177%" y="325" width="0.2406%" height="15" fill="rgb(230,126,33)" fg:x="196" fg:w="3"/><text x="15.9677%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="15.7979%" y="309" width="0.1604%" height="15" fill="rgb(239,140,21)" fg:x="197" fg:w="2"/><text x="16.0479%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="15.7979%" y="293" width="0.1604%" height="15" fill="rgb(254,104,9)" fg:x="197" fg:w="2"/><text x="16.0479%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.8781%" y="277" width="0.0802%" height="15" fill="rgb(239,52,14)" fg:x="198" fg:w="1"/><text x="16.1281%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="15.9583%" y="325" width="0.1604%" height="15" fill="rgb(208,227,44)" fg:x="199" fg:w="2"/><text x="16.2083%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (4 samples, 0.32%)</title><rect x="15.9583%" y="341" width="0.3208%" height="15" fill="rgb(246,18,19)" fg:x="199" fg:w="4"/><text x="16.2083%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="16.1187%" y="325" width="0.1604%" height="15" fill="rgb(235,228,25)" fg:x="201" fg:w="2"/><text x="16.3687%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="16.1187%" y="309" width="0.1604%" height="15" fill="rgb(240,156,20)" fg:x="201" fg:w="2"/><text x="16.3687%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1989%" y="293" width="0.0802%" height="15" fill="rgb(224,8,20)" fg:x="202" fg:w="1"/><text x="16.4489%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="16.2791%" y="325" width="0.0802%" height="15" fill="rgb(214,12,52)" fg:x="203" fg:w="1"/><text x="16.5291%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.2791%" y="309" width="0.0802%" height="15" fill="rgb(211,220,47)" fg:x="203" fg:w="1"/><text x="16.5291%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.2791%" y="293" width="0.0802%" height="15" fill="rgb(250,173,5)" fg:x="203" fg:w="1"/><text x="16.5291%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.2791%" y="277" width="0.0802%" height="15" fill="rgb(250,125,52)" fg:x="203" fg:w="1"/><text x="16.5291%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (91 samples, 7.30%)</title><rect x="16.2791%" y="341" width="7.2975%" height="15" fill="rgb(209,133,18)" fg:x="203" fg:w="91"/><text x="16.5291%" y="351.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (90 samples, 7.22%)</title><rect x="16.3593%" y="325" width="7.2173%" height="15" fill="rgb(216,173,22)" fg:x="204" fg:w="90"/><text x="16.6093%" y="335.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (89 samples, 7.14%)</title><rect x="16.4395%" y="309" width="7.1371%" height="15" fill="rgb(205,3,22)" fg:x="205" fg:w="89"/><text x="16.6895%" y="319.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="23.5766%" y="341" width="0.2406%" height="15" fill="rgb(248,22,20)" fg:x="294" fg:w="3"/><text x="23.8266%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.7370%" y="325" width="0.0802%" height="15" fill="rgb(233,6,29)" fg:x="296" fg:w="1"/><text x="23.9870%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 8.90%)</title><rect x="14.9960%" y="389" width="8.9014%" height="15" fill="rgb(240,22,54)" fg:x="187" fg:w="111"/><text x="15.2460%" y="399.50">&lt;core::iter::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (111 samples, 8.90%)</title><rect x="14.9960%" y="373" width="8.9014%" height="15" fill="rgb(231,133,32)" fg:x="187" fg:w="111"/><text x="15.2460%" y="383.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (111 samples, 8.90%)</title><rect x="14.9960%" y="357" width="8.9014%" height="15" fill="rgb(248,193,4)" fg:x="187" fg:w="111"/><text x="15.2460%" y="367.50">regex_automat..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="23.8172%" y="341" width="0.0802%" height="15" fill="rgb(211,178,46)" fg:x="297" fg:w="1"/><text x="24.0672%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1379%" y="373" width="0.0802%" height="15" fill="rgb(224,5,42)" fg:x="301" fg:w="1"/><text x="24.3879%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.2181%" y="373" width="0.0802%" height="15" fill="rgb(239,176,25)" fg:x="302" fg:w="1"/><text x="24.4681%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="24.2983%" y="373" width="0.1604%" height="15" fill="rgb(245,187,50)" fg:x="303" fg:w="2"/><text x="24.5483%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.3785%" y="357" width="0.0802%" height="15" fill="rgb(248,24,15)" fg:x="304" fg:w="1"/><text x="24.6285%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.3785%" y="341" width="0.0802%" height="15" fill="rgb(205,166,13)" fg:x="304" fg:w="1"/><text x="24.6285%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.3785%" y="325" width="0.0802%" height="15" fill="rgb(208,114,23)" fg:x="304" fg:w="1"/><text x="24.6285%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.6616%" y="357" width="0.0802%" height="15" fill="rgb(239,127,18)" fg:x="320" fg:w="1"/><text x="25.9116%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.7418%" y="357" width="0.0802%" height="15" fill="rgb(219,154,28)" fg:x="321" fg:w="1"/><text x="25.9918%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.7418%" y="341" width="0.0802%" height="15" fill="rgb(225,157,23)" fg:x="321" fg:w="1"/><text x="25.9918%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.7418%" y="325" width="0.0802%" height="15" fill="rgb(219,8,6)" fg:x="321" fg:w="1"/><text x="25.9918%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (18 samples, 1.44%)</title><rect x="24.4587%" y="373" width="1.4435%" height="15" fill="rgb(212,47,6)" fg:x="305" fg:w="18"/><text x="24.7087%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.8220%" y="357" width="0.0802%" height="15" fill="rgb(224,190,4)" fg:x="322" fg:w="1"/><text x="26.0720%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.8220%" y="341" width="0.0802%" height="15" fill="rgb(239,183,29)" fg:x="322" fg:w="1"/><text x="26.0720%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8220%" y="325" width="0.0802%" height="15" fill="rgb(213,57,7)" fg:x="322" fg:w="1"/><text x="26.0720%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (26 samples, 2.09%)</title><rect x="23.8974%" y="389" width="2.0850%" height="15" fill="rgb(216,148,1)" fg:x="298" fg:w="26"/><text x="24.1474%" y="399.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="25.9022%" y="373" width="0.0802%" height="15" fill="rgb(236,182,29)" fg:x="323" fg:w="1"/><text x="26.1522%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="25.9824%" y="389" width="0.0802%" height="15" fill="rgb(244,120,48)" fg:x="324" fg:w="1"/><text x="26.2324%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (140 samples, 11.23%)</title><rect x="14.9960%" y="405" width="11.2269%" height="15" fill="rgb(206,71,34)" fg:x="187" fg:w="140"/><text x="15.2460%" y="415.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="26.0626%" y="389" width="0.1604%" height="15" fill="rgb(242,32,6)" fg:x="325" fg:w="2"/><text x="26.3126%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="26.0626%" y="373" width="0.1604%" height="15" fill="rgb(241,35,3)" fg:x="325" fg:w="2"/><text x="26.3126%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="26.1427%" y="357" width="0.0802%" height="15" fill="rgb(222,62,19)" fg:x="326" fg:w="1"/><text x="26.3927%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="26.2229%" y="405" width="0.0802%" height="15" fill="rgb(223,110,41)" fg:x="327" fg:w="1"/><text x="26.4729%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="26.2229%" y="389" width="0.0802%" height="15" fill="rgb(208,224,4)" fg:x="327" fg:w="1"/><text x="26.4729%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="26.2229%" y="373" width="0.0802%" height="15" fill="rgb(241,137,19)" fg:x="327" fg:w="1"/><text x="26.4729%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (166 samples, 13.31%)</title><rect x="13.0714%" y="421" width="13.3119%" height="15" fill="rgb(244,24,17)" fg:x="163" fg:w="166"/><text x="13.3214%" y="431.50">regex_automata::meta..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="26.3031%" y="405" width="0.0802%" height="15" fill="rgb(245,178,49)" fg:x="328" fg:w="1"/><text x="26.5531%" y="415.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="26.3031%" y="389" width="0.0802%" height="15" fill="rgb(219,160,38)" fg:x="328" fg:w="1"/><text x="26.5531%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.4635%" y="389" width="0.0802%" height="15" fill="rgb(228,137,14)" fg:x="330" fg:w="1"/><text x="26.7135%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.4635%" y="373" width="0.0802%" height="15" fill="rgb(237,134,11)" fg:x="330" fg:w="1"/><text x="26.7135%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4635%" y="357" width="0.0802%" height="15" fill="rgb(211,126,44)" fg:x="330" fg:w="1"/><text x="26.7135%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="26.5437%" y="373" width="0.1604%" height="15" fill="rgb(226,171,33)" fg:x="331" fg:w="2"/><text x="26.7937%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="26.6239%" y="357" width="0.0802%" height="15" fill="rgb(253,99,13)" fg:x="332" fg:w="1"/><text x="26.8739%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="26.6239%" y="341" width="0.0802%" height="15" fill="rgb(244,48,7)" fg:x="332" fg:w="1"/><text x="26.8739%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="26.6239%" y="325" width="0.0802%" height="15" fill="rgb(244,217,54)" fg:x="332" fg:w="1"/><text x="26.8739%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="26.5437%" y="389" width="0.5613%" height="15" fill="rgb(224,15,18)" fg:x="331" fg:w="7"/><text x="26.7937%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="26.7041%" y="373" width="0.4010%" height="15" fill="rgb(244,99,12)" fg:x="333" fg:w="5"/><text x="26.9541%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="26.7041%" y="357" width="0.4010%" height="15" fill="rgb(233,226,8)" fg:x="333" fg:w="5"/><text x="26.9541%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="26.7041%" y="341" width="0.4010%" height="15" fill="rgb(229,211,3)" fg:x="333" fg:w="5"/><text x="26.9541%" y="351.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="26.7041%" y="325" width="0.4010%" height="15" fill="rgb(216,140,21)" fg:x="333" fg:w="5"/><text x="26.9541%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="27.1051%" y="389" width="0.0802%" height="15" fill="rgb(234,122,30)" fg:x="338" fg:w="1"/><text x="27.3551%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1051%" y="373" width="0.0802%" height="15" fill="rgb(236,25,46)" fg:x="338" fg:w="1"/><text x="27.3551%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.88%)</title><rect x="26.3833%" y="421" width="0.8821%" height="15" fill="rgb(217,52,54)" fg:x="329" fg:w="11"/><text x="26.6333%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.88%)</title><rect x="26.3833%" y="405" width="0.8821%" height="15" fill="rgb(222,29,26)" fg:x="329" fg:w="11"/><text x="26.6333%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="27.1852%" y="389" width="0.0802%" height="15" fill="rgb(216,177,29)" fg:x="339" fg:w="1"/><text x="27.4352%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="27.1852%" y="373" width="0.0802%" height="15" fill="rgb(247,136,51)" fg:x="339" fg:w="1"/><text x="27.4352%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="27.3456%" y="389" width="0.0802%" height="15" fill="rgb(231,47,47)" fg:x="341" fg:w="1"/><text x="27.5956%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="27.3456%" y="373" width="0.0802%" height="15" fill="rgb(211,192,36)" fg:x="341" fg:w="1"/><text x="27.5956%" y="383.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="27.3456%" y="357" width="0.0802%" height="15" fill="rgb(229,156,32)" fg:x="341" fg:w="1"/><text x="27.5956%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (181 samples, 14.51%)</title><rect x="12.9912%" y="437" width="14.5148%" height="15" fill="rgb(248,213,20)" fg:x="162" fg:w="181"/><text x="13.2412%" y="447.50">regex_automata::meta::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="27.2654%" y="421" width="0.2406%" height="15" fill="rgb(217,64,7)" fg:x="340" fg:w="3"/><text x="27.5154%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="27.2654%" y="405" width="0.2406%" height="15" fill="rgb(232,142,8)" fg:x="340" fg:w="3"/><text x="27.5154%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="27.4258%" y="389" width="0.0802%" height="15" fill="rgb(224,92,44)" fg:x="342" fg:w="1"/><text x="27.6758%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="27.4258%" y="373" width="0.0802%" height="15" fill="rgb(214,169,17)" fg:x="342" fg:w="1"/><text x="27.6758%" y="383.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (182 samples, 14.60%)</title><rect x="12.9912%" y="469" width="14.5950%" height="15" fill="rgb(210,59,37)" fg:x="162" fg:w="182"/><text x="13.2412%" y="479.50">&lt;regex::regex::string:..</text></g><g><title>regex::builders::Builder::build_one_string (182 samples, 14.60%)</title><rect x="12.9912%" y="453" width="14.5950%" height="15" fill="rgb(214,116,48)" fg:x="162" fg:w="182"/><text x="13.2412%" y="463.50">regex::builders::Build..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="27.5060%" y="437" width="0.0802%" height="15" fill="rgb(244,191,6)" fg:x="343" fg:w="1"/><text x="27.7560%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserBuilder::new (1 samples, 0.08%)</title><rect x="27.5060%" y="421" width="0.0802%" height="15" fill="rgb(241,50,52)" fg:x="343" fg:w="1"/><text x="27.7560%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.5862%" y="421" width="0.0802%" height="15" fill="rgb(236,75,39)" fg:x="344" fg:w="1"/><text x="27.8362%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.6664%" y="405" width="0.0802%" height="15" fill="rgb(236,99,0)" fg:x="345" fg:w="1"/><text x="27.9164%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.6664%" y="389" width="0.0802%" height="15" fill="rgb(207,202,15)" fg:x="345" fg:w="1"/><text x="27.9164%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="27.6664%" y="421" width="0.1604%" height="15" fill="rgb(233,207,14)" fg:x="345" fg:w="2"/><text x="27.9164%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.7466%" y="405" width="0.0802%" height="15" fill="rgb(226,27,51)" fg:x="346" fg:w="1"/><text x="27.9966%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="27.5862%" y="469" width="0.3208%" height="15" fill="rgb(206,104,42)" fg:x="344" fg:w="4"/><text x="27.8362%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="27.5862%" y="453" width="0.3208%" height="15" fill="rgb(212,225,4)" fg:x="344" fg:w="4"/><text x="27.8362%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="27.5862%" y="437" width="0.3208%" height="15" fill="rgb(233,96,42)" fg:x="344" fg:w="4"/><text x="27.8362%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="27.8268%" y="421" width="0.0802%" height="15" fill="rgb(229,21,32)" fg:x="347" fg:w="1"/><text x="28.0768%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.8268%" y="405" width="0.0802%" height="15" fill="rgb(226,216,24)" fg:x="347" fg:w="1"/><text x="28.0768%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.4683%" y="357" width="0.0802%" height="15" fill="rgb(221,163,17)" fg:x="355" fg:w="1"/><text x="28.7183%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="28.4683%" y="389" width="0.1604%" height="15" fill="rgb(216,216,42)" fg:x="355" fg:w="2"/><text x="28.7183%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.4683%" y="373" width="0.1604%" height="15" fill="rgb(240,118,7)" fg:x="355" fg:w="2"/><text x="28.7183%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="28.5485%" y="357" width="0.0802%" height="15" fill="rgb(221,67,37)" fg:x="356" fg:w="1"/><text x="28.7985%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="28.6287%" y="389" width="0.2406%" height="15" fill="rgb(241,32,44)" fg:x="357" fg:w="3"/><text x="28.8787%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="28.7089%" y="373" width="0.1604%" height="15" fill="rgb(235,204,43)" fg:x="358" fg:w="2"/><text x="28.9589%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="28.7089%" y="357" width="0.1604%" height="15" fill="rgb(213,116,10)" fg:x="358" fg:w="2"/><text x="28.9589%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="28.8693%" y="389" width="0.1604%" height="15" fill="rgb(239,15,48)" fg:x="360" fg:w="2"/><text x="29.1193%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.12%)</title><rect x="27.9872%" y="405" width="1.1227%" height="15" fill="rgb(207,123,36)" fg:x="349" fg:w="14"/><text x="28.2372%" y="415.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="29.0297%" y="389" width="0.0802%" height="15" fill="rgb(209,103,30)" fg:x="362" fg:w="1"/><text x="29.2797%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.0297%" y="373" width="0.0802%" height="15" fill="rgb(238,100,19)" fg:x="362" fg:w="1"/><text x="29.2797%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.0297%" y="357" width="0.0802%" height="15" fill="rgb(244,30,14)" fg:x="362" fg:w="1"/><text x="29.2797%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.0297%" y="341" width="0.0802%" height="15" fill="rgb(249,174,6)" fg:x="362" fg:w="1"/><text x="29.2797%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (209 samples, 16.76%)</title><rect x="12.5100%" y="485" width="16.7602%" height="15" fill="rgb(235,213,41)" fg:x="156" fg:w="209"/><text x="12.7600%" y="495.50">indefinite::helper::Helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.36%)</title><rect x="27.9070%" y="469" width="1.3633%" height="15" fill="rgb(213,118,6)" fg:x="348" fg:w="17"/><text x="28.1570%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.36%)</title><rect x="27.9070%" y="453" width="1.3633%" height="15" fill="rgb(235,44,51)" fg:x="348" fg:w="17"/><text x="28.1570%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.36%)</title><rect x="27.9070%" y="437" width="1.3633%" height="15" fill="rgb(217,9,53)" fg:x="348" fg:w="17"/><text x="28.1570%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.28%)</title><rect x="27.9872%" y="421" width="1.2831%" height="15" fill="rgb(237,172,34)" fg:x="349" fg:w="16"/><text x="28.2372%" y="431.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="29.1099%" y="405" width="0.1604%" height="15" fill="rgb(206,206,11)" fg:x="363" fg:w="2"/><text x="29.3599%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.1901%" y="389" width="0.0802%" height="15" fill="rgb(214,149,29)" fg:x="364" fg:w="1"/><text x="29.4401%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.1901%" y="373" width="0.0802%" height="15" fill="rgb(208,123,3)" fg:x="364" fg:w="1"/><text x="29.4401%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1901%" y="357" width="0.0802%" height="15" fill="rgb(229,126,4)" fg:x="364" fg:w="1"/><text x="29.4401%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="29.3504%" y="421" width="0.1604%" height="15" fill="rgb(222,92,36)" fg:x="366" fg:w="2"/><text x="29.6004%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="29.3504%" y="405" width="0.1604%" height="15" fill="rgb(216,39,41)" fg:x="366" fg:w="2"/><text x="29.6004%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.4306%" y="389" width="0.0802%" height="15" fill="rgb(253,127,28)" fg:x="367" fg:w="1"/><text x="29.6806%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.5108%" y="389" width="0.0802%" height="15" fill="rgb(249,152,51)" fg:x="368" fg:w="1"/><text x="29.7608%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="29.5910%" y="389" width="0.1604%" height="15" fill="rgb(209,123,42)" fg:x="369" fg:w="2"/><text x="29.8410%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="29.5108%" y="421" width="0.3208%" height="15" fill="rgb(241,118,22)" fg:x="368" fg:w="4"/><text x="29.7608%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="29.5108%" y="405" width="0.3208%" height="15" fill="rgb(208,25,7)" fg:x="368" fg:w="4"/><text x="29.7608%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="29.7514%" y="389" width="0.0802%" height="15" fill="rgb(243,144,39)" fg:x="371" fg:w="1"/><text x="30.0014%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9118%" y="389" width="0.0802%" height="15" fill="rgb(250,50,5)" fg:x="373" fg:w="1"/><text x="30.1618%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.88%)</title><rect x="29.9920%" y="389" width="0.8821%" height="15" fill="rgb(207,67,11)" fg:x="374" fg:w="11"/><text x="30.2420%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.7939%" y="373" width="0.0802%" height="15" fill="rgb(245,204,40)" fg:x="384" fg:w="1"/><text x="31.0439%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.04%)</title><rect x="29.9118%" y="405" width="1.0425%" height="15" fill="rgb(238,228,24)" fg:x="373" fg:w="13"/><text x="30.1618%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="30.8741%" y="389" width="0.0802%" height="15" fill="rgb(217,116,22)" fg:x="385" fg:w="1"/><text x="31.1241%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.7562%" y="357" width="0.0802%" height="15" fill="rgb(234,98,12)" fg:x="396" fg:w="1"/><text x="32.0062%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.7562%" y="341" width="0.0802%" height="15" fill="rgb(242,170,50)" fg:x="396" fg:w="1"/><text x="32.0062%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.7562%" y="325" width="0.0802%" height="15" fill="rgb(235,7,5)" fg:x="396" fg:w="1"/><text x="32.0062%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (9 samples, 0.72%)</title><rect x="31.1949%" y="389" width="0.7217%" height="15" fill="rgb(241,114,28)" fg:x="389" fg:w="9"/><text x="31.4449%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="31.7562%" y="373" width="0.1604%" height="15" fill="rgb(246,112,42)" fg:x="396" fg:w="2"/><text x="32.0062%" y="383.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="31.8364%" y="357" width="0.0802%" height="15" fill="rgb(248,228,14)" fg:x="397" fg:w="1"/><text x="32.0864%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="31.8364%" y="341" width="0.0802%" height="15" fill="rgb(208,133,18)" fg:x="397" fg:w="1"/><text x="32.0864%" y="351.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="31.8364%" y="325" width="0.0802%" height="15" fill="rgb(207,35,49)" fg:x="397" fg:w="1"/><text x="32.0864%" y="335.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="31.8364%" y="309" width="0.0802%" height="15" fill="rgb(205,68,36)" fg:x="397" fg:w="1"/><text x="32.0864%" y="319.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="31.8364%" y="293" width="0.0802%" height="15" fill="rgb(245,62,40)" fg:x="397" fg:w="1"/><text x="32.0864%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (13 samples, 1.04%)</title><rect x="30.9543%" y="405" width="1.0425%" height="15" fill="rgb(228,27,24)" fg:x="386" fg:w="13"/><text x="31.2043%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="31.9166%" y="389" width="0.0802%" height="15" fill="rgb(253,19,12)" fg:x="398" fg:w="1"/><text x="32.1666%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="31.9166%" y="373" width="0.0802%" height="15" fill="rgb(232,28,20)" fg:x="398" fg:w="1"/><text x="32.1666%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="31.9166%" y="357" width="0.0802%" height="15" fill="rgb(218,35,51)" fg:x="398" fg:w="1"/><text x="32.1666%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.0770%" y="373" width="0.0802%" height="15" fill="rgb(212,90,40)" fg:x="400" fg:w="1"/><text x="32.3270%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.08%)</title><rect x="32.1572%" y="373" width="0.0802%" height="15" fill="rgb(220,172,12)" fg:x="401" fg:w="1"/><text x="32.4072%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.1572%" y="357" width="0.0802%" height="15" fill="rgb(226,159,20)" fg:x="401" fg:w="1"/><text x="32.4072%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (14 samples, 1.12%)</title><rect x="32.2374%" y="373" width="1.1227%" height="15" fill="rgb(234,205,16)" fg:x="402" fg:w="14"/><text x="32.4874%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (13 samples, 1.04%)</title><rect x="32.3176%" y="357" width="1.0425%" height="15" fill="rgb(207,9,39)" fg:x="403" fg:w="13"/><text x="32.5676%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.48%)</title><rect x="32.8789%" y="341" width="0.4812%" height="15" fill="rgb(249,143,15)" fg:x="410" fg:w="6"/><text x="33.1289%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="32.8789%" y="325" width="0.4812%" height="15" fill="rgb(253,133,29)" fg:x="410" fg:w="6"/><text x="33.1289%" y="335.50"></text></g><g><title>realloc (6 samples, 0.48%)</title><rect x="32.8789%" y="309" width="0.4812%" height="15" fill="rgb(221,187,0)" fg:x="410" fg:w="6"/><text x="33.1289%" y="319.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::automaton::Automaton&gt;::prefilter (1 samples, 0.08%)</title><rect x="33.3601%" y="357" width="0.0802%" height="15" fill="rgb(205,204,26)" fg:x="416" fg:w="1"/><text x="33.6101%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.4403%" y="357" width="0.0802%" height="15" fill="rgb(224,68,54)" fg:x="417" fg:w="1"/><text x="33.6903%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (25 samples, 2.00%)</title><rect x="31.9968%" y="405" width="2.0048%" height="15" fill="rgb(209,67,4)" fg:x="399" fg:w="25"/><text x="32.2468%" y="415.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (25 samples, 2.00%)</title><rect x="31.9968%" y="389" width="2.0048%" height="15" fill="rgb(228,229,18)" fg:x="399" fg:w="25"/><text x="32.2468%" y="399.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.64%)</title><rect x="33.3601%" y="373" width="0.6415%" height="15" fill="rgb(231,89,13)" fg:x="416" fg:w="8"/><text x="33.6101%" y="383.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.48%)</title><rect x="33.5204%" y="357" width="0.4812%" height="15" fill="rgb(210,182,18)" fg:x="418" fg:w="6"/><text x="33.7704%" y="367.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.48%)</title><rect x="33.5204%" y="341" width="0.4812%" height="15" fill="rgb(240,105,2)" fg:x="418" fg:w="6"/><text x="33.7704%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="34.0016%" y="405" width="0.0802%" height="15" fill="rgb(207,170,50)" fg:x="424" fg:w="1"/><text x="34.2516%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="34.0016%" y="389" width="0.0802%" height="15" fill="rgb(232,133,24)" fg:x="424" fg:w="1"/><text x="34.2516%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="34.0016%" y="373" width="0.0802%" height="15" fill="rgb(235,166,27)" fg:x="424" fg:w="1"/><text x="34.2516%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.0016%" y="357" width="0.0802%" height="15" fill="rgb(209,19,13)" fg:x="424" fg:w="1"/><text x="34.2516%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="34.0818%" y="357" width="0.0802%" height="15" fill="rgb(226,79,39)" fg:x="425" fg:w="1"/><text x="34.3318%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="34.3224%" y="325" width="0.0802%" height="15" fill="rgb(222,163,10)" fg:x="428" fg:w="1"/><text x="34.5724%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="36.2470%" y="293" width="0.4010%" height="15" fill="rgb(214,44,19)" fg:x="452" fg:w="5"/><text x="36.4970%" y="303.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="36.6480%" y="293" width="0.4010%" height="15" fill="rgb(210,217,13)" fg:x="457" fg:w="5"/><text x="36.8980%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.48%)</title><rect x="37.0489%" y="293" width="0.4812%" height="15" fill="rgb(237,61,54)" fg:x="462" fg:w="6"/><text x="37.2989%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="37.2093%" y="277" width="0.3208%" height="15" fill="rgb(226,184,24)" fg:x="464" fg:w="4"/><text x="37.4593%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="37.2093%" y="261" width="0.3208%" height="15" fill="rgb(223,226,4)" fg:x="464" fg:w="4"/><text x="37.4593%" y="271.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="37.2093%" y="245" width="0.3208%" height="15" fill="rgb(210,26,41)" fg:x="464" fg:w="4"/><text x="37.4593%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="37.5301%" y="293" width="0.2406%" height="15" fill="rgb(220,221,6)" fg:x="468" fg:w="3"/><text x="37.7801%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.6905%" y="277" width="0.0802%" height="15" fill="rgb(225,89,49)" fg:x="470" fg:w="1"/><text x="37.9405%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.6905%" y="261" width="0.0802%" height="15" fill="rgb(218,70,45)" fg:x="470" fg:w="1"/><text x="37.9405%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.6905%" y="245" width="0.0802%" height="15" fill="rgb(238,166,21)" fg:x="470" fg:w="1"/><text x="37.9405%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.3320%" y="229" width="0.0802%" height="15" fill="rgb(224,141,44)" fg:x="478" fg:w="1"/><text x="38.5820%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.72%)</title><rect x="38.0914%" y="261" width="0.7217%" height="15" fill="rgb(230,12,49)" fg:x="475" fg:w="9"/><text x="38.3414%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.72%)</title><rect x="38.0914%" y="245" width="0.7217%" height="15" fill="rgb(212,174,12)" fg:x="475" fg:w="9"/><text x="38.3414%" y="255.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="38.4122%" y="229" width="0.4010%" height="15" fill="rgb(246,67,9)" fg:x="479" fg:w="5"/><text x="38.6622%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (23 samples, 1.84%)</title><rect x="37.7706%" y="293" width="1.8444%" height="15" fill="rgb(239,35,23)" fg:x="471" fg:w="23"/><text x="38.0206%" y="303.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (23 samples, 1.84%)</title><rect x="37.7706%" y="277" width="1.8444%" height="15" fill="rgb(211,167,0)" fg:x="471" fg:w="23"/><text x="38.0206%" y="287.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (10 samples, 0.80%)</title><rect x="38.8132%" y="261" width="0.8019%" height="15" fill="rgb(225,119,45)" fg:x="484" fg:w="10"/><text x="39.0632%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.5349%" y="245" width="0.0802%" height="15" fill="rgb(210,162,6)" fg:x="493" fg:w="1"/><text x="39.7849%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (79 samples, 6.34%)</title><rect x="39.6151%" y="293" width="6.3352%" height="15" fill="rgb(208,118,35)" fg:x="494" fg:w="79"/><text x="39.8651%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (79 samples, 6.34%)</title><rect x="39.6151%" y="277" width="6.3352%" height="15" fill="rgb(239,4,53)" fg:x="494" fg:w="79"/><text x="39.8651%" y="287.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (78 samples, 6.26%)</title><rect x="39.6953%" y="261" width="6.2550%" height="15" fill="rgb(213,130,21)" fg:x="495" fg:w="78"/><text x="39.9453%" y="271.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (10 samples, 0.80%)</title><rect x="45.9503%" y="293" width="0.8019%" height="15" fill="rgb(235,148,0)" fg:x="573" fg:w="10"/><text x="46.2003%" y="303.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (3 samples, 0.24%)</title><rect x="46.7522%" y="293" width="0.2406%" height="15" fill="rgb(244,224,18)" fg:x="583" fg:w="3"/><text x="47.0022%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (168 samples, 13.47%)</title><rect x="34.0818%" y="389" width="13.4723%" height="15" fill="rgb(211,214,4)" fg:x="425" fg:w="168"/><text x="34.3318%" y="399.50">&lt;core::iter::adapter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (168 samples, 13.47%)</title><rect x="34.0818%" y="373" width="13.4723%" height="15" fill="rgb(206,119,25)" fg:x="425" fg:w="168"/><text x="34.3318%" y="383.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (167 samples, 13.39%)</title><rect x="34.1620%" y="357" width="13.3921%" height="15" fill="rgb(243,93,47)" fg:x="426" fg:w="167"/><text x="34.4120%" y="367.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (165 samples, 13.23%)</title><rect x="34.3224%" y="341" width="13.2318%" height="15" fill="rgb(224,194,6)" fg:x="428" fg:w="165"/><text x="34.5724%" y="351.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (164 samples, 13.15%)</title><rect x="34.4026%" y="325" width="13.1516%" height="15" fill="rgb(243,229,6)" fg:x="429" fg:w="164"/><text x="34.6526%" y="335.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (164 samples, 13.15%)</title><rect x="34.4026%" y="309" width="13.1516%" height="15" fill="rgb(207,23,50)" fg:x="429" fg:w="164"/><text x="34.6526%" y="319.50">regex_automata::nfa:..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.56%)</title><rect x="46.9928%" y="293" width="0.5613%" height="15" fill="rgb(253,192,32)" fg:x="586" fg:w="7"/><text x="47.2428%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="47.1532%" y="277" width="0.4010%" height="15" fill="rgb(213,21,6)" fg:x="588" fg:w="5"/><text x="47.4032%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="47.3136%" y="261" width="0.2406%" height="15" fill="rgb(243,151,13)" fg:x="590" fg:w="3"/><text x="47.5636%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.4739%" y="245" width="0.0802%" height="15" fill="rgb(233,165,41)" fg:x="592" fg:w="1"/><text x="47.7239%" y="255.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="47.9551%" y="373" width="0.1604%" height="15" fill="rgb(246,176,45)" fg:x="598" fg:w="2"/><text x="48.2051%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.1155%" y="373" width="0.0802%" height="15" fill="rgb(217,170,52)" fg:x="600" fg:w="1"/><text x="48.3655%" y="383.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="48.1957%" y="373" width="0.2406%" height="15" fill="rgb(214,203,54)" fg:x="601" fg:w="3"/><text x="48.4457%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.3986%" y="325" width="0.0802%" height="15" fill="rgb(248,215,49)" fg:x="616" fg:w="1"/><text x="49.6486%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (18 samples, 1.44%)</title><rect x="48.4362%" y="373" width="1.4435%" height="15" fill="rgb(208,46,10)" fg:x="604" fg:w="18"/><text x="48.6862%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="49.3986%" y="357" width="0.4812%" height="15" fill="rgb(254,5,31)" fg:x="616" fg:w="6"/><text x="49.6486%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="49.3986%" y="341" width="0.4812%" height="15" fill="rgb(222,104,33)" fg:x="616" fg:w="6"/><text x="49.6486%" y="351.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="49.4787%" y="325" width="0.4010%" height="15" fill="rgb(248,49,16)" fg:x="617" fg:w="5"/><text x="49.7287%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.64%)</title><rect x="49.8797%" y="373" width="0.6415%" height="15" fill="rgb(232,198,41)" fg:x="622" fg:w="8"/><text x="50.1297%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (260 samples, 20.85%)</title><rect x="29.8316%" y="421" width="20.8500%" height="15" fill="rgb(214,125,3)" fg:x="372" fg:w="260"/><text x="30.0816%" y="431.50">regex_automata::meta::strategy::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (207 samples, 16.60%)</title><rect x="34.0818%" y="405" width="16.5998%" height="15" fill="rgb(229,220,28)" fg:x="425" fg:w="207"/><text x="34.3318%" y="415.50">regex_automata::nfa::thomp..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (39 samples, 3.13%)</title><rect x="47.5541%" y="389" width="3.1275%" height="15" fill="rgb(222,64,37)" fg:x="593" fg:w="39"/><text x="47.8041%" y="399.50">reg..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="50.5213%" y="373" width="0.1604%" height="15" fill="rgb(249,184,13)" fg:x="630" fg:w="2"/><text x="50.7713%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="50.6816%" y="373" width="0.0802%" height="15" fill="rgb(252,176,6)" fg:x="632" fg:w="1"/><text x="50.9316%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="50.6816%" y="389" width="0.2406%" height="15" fill="rgb(228,153,7)" fg:x="632" fg:w="3"/><text x="50.9316%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="50.7618%" y="373" width="0.1604%" height="15" fill="rgb(242,193,5)" fg:x="633" fg:w="2"/><text x="51.0118%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="50.7618%" y="357" width="0.1604%" height="15" fill="rgb(232,140,9)" fg:x="633" fg:w="2"/><text x="51.0118%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="50.7618%" y="341" width="0.1604%" height="15" fill="rgb(213,222,16)" fg:x="633" fg:w="2"/><text x="51.0118%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="50.7618%" y="325" width="0.1604%" height="15" fill="rgb(222,75,50)" fg:x="633" fg:w="2"/><text x="51.0118%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="50.9222%" y="389" width="0.0802%" height="15" fill="rgb(205,180,2)" fg:x="635" fg:w="1"/><text x="51.1722%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="51.0024%" y="389" width="0.0802%" height="15" fill="rgb(216,34,7)" fg:x="636" fg:w="1"/><text x="51.2524%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="51.0024%" y="373" width="0.0802%" height="15" fill="rgb(253,16,32)" fg:x="636" fg:w="1"/><text x="51.2524%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="50.6816%" y="421" width="0.4812%" height="15" fill="rgb(208,97,28)" fg:x="632" fg:w="6"/><text x="50.9316%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="50.6816%" y="405" width="0.4812%" height="15" fill="rgb(225,92,11)" fg:x="632" fg:w="6"/><text x="50.9316%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="51.0826%" y="389" width="0.0802%" height="15" fill="rgb(243,38,12)" fg:x="637" fg:w="1"/><text x="51.3326%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.6439%" y="357" width="0.0802%" height="15" fill="rgb(208,139,16)" fg:x="644" fg:w="1"/><text x="51.8939%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.6439%" y="341" width="0.0802%" height="15" fill="rgb(227,24,9)" fg:x="644" fg:w="1"/><text x="51.8939%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.6439%" y="325" width="0.0802%" height="15" fill="rgb(206,62,11)" fg:x="644" fg:w="1"/><text x="51.8939%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="51.3232%" y="373" width="0.4812%" height="15" fill="rgb(228,134,27)" fg:x="640" fg:w="6"/><text x="51.5732%" y="383.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="51.7241%" y="357" width="0.0802%" height="15" fill="rgb(205,55,33)" fg:x="645" fg:w="1"/><text x="51.9741%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.7241%" y="341" width="0.0802%" height="15" fill="rgb(243,75,43)" fg:x="645" fg:w="1"/><text x="51.9741%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.64%)</title><rect x="51.2430%" y="389" width="0.6415%" height="15" fill="rgb(223,27,42)" fg:x="639" fg:w="8"/><text x="51.4930%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="51.8043%" y="373" width="0.0802%" height="15" fill="rgb(232,189,33)" fg:x="646" fg:w="1"/><text x="52.0543%" y="383.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="52.0449%" y="373" width="0.0802%" height="15" fill="rgb(210,9,39)" fg:x="649" fg:w="1"/><text x="52.2949%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.0449%" y="357" width="0.0802%" height="15" fill="rgb(242,85,26)" fg:x="649" fg:w="1"/><text x="52.2949%" y="367.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="52.1251%" y="373" width="0.0802%" height="15" fill="rgb(248,44,4)" fg:x="650" fg:w="1"/><text x="52.3751%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.1251%" y="357" width="0.0802%" height="15" fill="rgb(250,96,46)" fg:x="650" fg:w="1"/><text x="52.3751%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (5 samples, 0.40%)</title><rect x="51.8845%" y="389" width="0.4010%" height="15" fill="rgb(229,116,26)" fg:x="647" fg:w="5"/><text x="52.1345%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="52.2053%" y="373" width="0.0802%" height="15" fill="rgb(246,94,34)" fg:x="651" fg:w="1"/><text x="52.4553%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="52.2855%" y="389" width="0.0802%" height="15" fill="rgb(251,73,21)" fg:x="652" fg:w="1"/><text x="52.5355%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="52.2855%" y="373" width="0.0802%" height="15" fill="rgb(254,121,25)" fg:x="652" fg:w="1"/><text x="52.5355%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.2855%" y="357" width="0.0802%" height="15" fill="rgb(215,161,49)" fg:x="652" fg:w="1"/><text x="52.5355%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.2855%" y="341" width="0.0802%" height="15" fill="rgb(221,43,13)" fg:x="652" fg:w="1"/><text x="52.5355%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.2855%" y="325" width="0.0802%" height="15" fill="rgb(249,5,37)" fg:x="652" fg:w="1"/><text x="52.5355%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (289 samples, 23.18%)</title><rect x="29.2702%" y="469" width="23.1756%" height="15" fill="rgb(226,25,44)" fg:x="365" fg:w="289"/><text x="29.5202%" y="479.50">&lt;regex::regex::string::Regex as core:..</text></g><g><title>regex::builders::Builder::build_one_string (289 samples, 23.18%)</title><rect x="29.2702%" y="453" width="23.1756%" height="15" fill="rgb(238,189,16)" fg:x="365" fg:w="289"/><text x="29.5202%" y="463.50">regex::builders::Builder::build_one_s..</text></g><g><title>regex_automata::meta::regex::Builder::build (289 samples, 23.18%)</title><rect x="29.2702%" y="437" width="23.1756%" height="15" fill="rgb(251,186,8)" fg:x="365" fg:w="289"/><text x="29.5202%" y="447.50">regex_automata::meta::regex::Builder:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (16 samples, 1.28%)</title><rect x="51.1628%" y="421" width="1.2831%" height="15" fill="rgb(254,34,31)" fg:x="638" fg:w="16"/><text x="51.4128%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (16 samples, 1.28%)</title><rect x="51.1628%" y="405" width="1.2831%" height="15" fill="rgb(225,215,27)" fg:x="638" fg:w="16"/><text x="51.4128%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.3657%" y="389" width="0.0802%" height="15" fill="rgb(221,192,48)" fg:x="653" fg:w="1"/><text x="52.6157%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.3657%" y="373" width="0.0802%" height="15" fill="rgb(219,137,20)" fg:x="653" fg:w="1"/><text x="52.6157%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.3657%" y="357" width="0.0802%" height="15" fill="rgb(219,84,11)" fg:x="653" fg:w="1"/><text x="52.6157%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="52.4459%" y="421" width="0.1604%" height="15" fill="rgb(224,10,23)" fg:x="654" fg:w="2"/><text x="52.6959%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="52.4459%" y="405" width="0.1604%" height="15" fill="rgb(248,22,39)" fg:x="654" fg:w="2"/><text x="52.6959%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="52.4459%" y="389" width="0.1604%" height="15" fill="rgb(212,154,20)" fg:x="654" fg:w="2"/><text x="52.6959%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="52.6063%" y="421" width="0.1604%" height="15" fill="rgb(236,199,50)" fg:x="656" fg:w="2"/><text x="52.8563%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="52.6864%" y="405" width="0.0802%" height="15" fill="rgb(211,9,17)" fg:x="657" fg:w="1"/><text x="52.9364%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="52.4459%" y="437" width="0.4010%" height="15" fill="rgb(243,216,36)" fg:x="654" fg:w="5"/><text x="52.6959%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="52.7666%" y="421" width="0.0802%" height="15" fill="rgb(250,2,10)" fg:x="658" fg:w="1"/><text x="53.0166%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="52.7666%" y="405" width="0.0802%" height="15" fill="rgb(226,50,48)" fg:x="658" fg:w="1"/><text x="53.0166%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="52.7666%" y="389" width="0.0802%" height="15" fill="rgb(243,81,16)" fg:x="658" fg:w="1"/><text x="53.0166%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.7666%" y="373" width="0.0802%" height="15" fill="rgb(250,14,2)" fg:x="658" fg:w="1"/><text x="53.0166%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.8468%" y="421" width="0.0802%" height="15" fill="rgb(233,135,29)" fg:x="659" fg:w="1"/><text x="53.0968%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="52.4459%" y="469" width="0.5613%" height="15" fill="rgb(224,64,43)" fg:x="654" fg:w="7"/><text x="52.6959%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (7 samples, 0.56%)</title><rect x="52.4459%" y="453" width="0.5613%" height="15" fill="rgb(238,84,13)" fg:x="654" fg:w="7"/><text x="52.6959%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="52.8468%" y="437" width="0.1604%" height="15" fill="rgb(253,48,26)" fg:x="659" fg:w="2"/><text x="53.0968%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="52.9270%" y="421" width="0.0802%" height="15" fill="rgb(205,223,31)" fg:x="660" fg:w="1"/><text x="53.1770%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.9270%" y="405" width="0.0802%" height="15" fill="rgb(221,41,32)" fg:x="660" fg:w="1"/><text x="53.1770%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="53.0072%" y="421" width="0.0802%" height="15" fill="rgb(213,158,31)" fg:x="661" fg:w="1"/><text x="53.2572%" y="431.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="53.0072%" y="405" width="0.0802%" height="15" fill="rgb(245,126,43)" fg:x="661" fg:w="1"/><text x="53.2572%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="53.0072%" y="453" width="0.2406%" height="15" fill="rgb(227,7,22)" fg:x="661" fg:w="3"/><text x="53.2572%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="53.0072%" y="437" width="0.2406%" height="15" fill="rgb(252,90,44)" fg:x="661" fg:w="3"/><text x="53.2572%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="53.0874%" y="421" width="0.1604%" height="15" fill="rgb(253,91,0)" fg:x="662" fg:w="2"/><text x="53.3374%" y="431.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="53.0874%" y="405" width="0.1604%" height="15" fill="rgb(252,175,49)" fg:x="662" fg:w="2"/><text x="53.3374%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="54.0497%" y="373" width="0.1604%" height="15" fill="rgb(246,150,1)" fg:x="674" fg:w="2"/><text x="54.2997%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.0497%" y="357" width="0.1604%" height="15" fill="rgb(241,192,25)" fg:x="674" fg:w="2"/><text x="54.2997%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.0497%" y="341" width="0.1604%" height="15" fill="rgb(239,187,11)" fg:x="674" fg:w="2"/><text x="54.2997%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="54.2101%" y="373" width="0.1604%" height="15" fill="rgb(218,202,51)" fg:x="676" fg:w="2"/><text x="54.4601%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="54.2903%" y="357" width="0.0802%" height="15" fill="rgb(225,176,8)" fg:x="677" fg:w="1"/><text x="54.5403%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (19 samples, 1.52%)</title><rect x="53.3280%" y="389" width="1.5237%" height="15" fill="rgb(219,122,41)" fg:x="665" fg:w="19"/><text x="53.5780%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="54.3705%" y="373" width="0.4812%" height="15" fill="rgb(248,140,20)" fg:x="678" fg:w="6"/><text x="54.6205%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.8516%" y="341" width="0.0802%" height="15" fill="rgb(245,41,37)" fg:x="684" fg:w="1"/><text x="55.1016%" y="351.50"></text></g><g><title>indefinite::rules::number::Number::check (321 samples, 25.74%)</title><rect x="29.2702%" y="485" width="25.7418%" height="15" fill="rgb(235,82,39)" fg:x="365" fg:w="321"/><text x="29.5202%" y="495.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (25 samples, 2.00%)</title><rect x="53.0072%" y="469" width="2.0048%" height="15" fill="rgb(230,108,42)" fg:x="661" fg:w="25"/><text x="53.2572%" y="479.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (22 samples, 1.76%)</title><rect x="53.2478%" y="453" width="1.7642%" height="15" fill="rgb(215,150,50)" fg:x="664" fg:w="22"/><text x="53.4978%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (22 samples, 1.76%)</title><rect x="53.2478%" y="437" width="1.7642%" height="15" fill="rgb(233,212,5)" fg:x="664" fg:w="22"/><text x="53.4978%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.68%)</title><rect x="53.3280%" y="421" width="1.6840%" height="15" fill="rgb(245,80,22)" fg:x="665" fg:w="21"/><text x="53.5780%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (21 samples, 1.68%)</title><rect x="53.3280%" y="405" width="1.6840%" height="15" fill="rgb(238,129,16)" fg:x="665" fg:w="21"/><text x="53.5780%" y="415.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="54.8516%" y="389" width="0.1604%" height="15" fill="rgb(240,19,0)" fg:x="684" fg:w="2"/><text x="55.1016%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="54.8516%" y="373" width="0.1604%" height="15" fill="rgb(232,42,35)" fg:x="684" fg:w="2"/><text x="55.1016%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="54.8516%" y="357" width="0.1604%" height="15" fill="rgb(223,130,24)" fg:x="684" fg:w="2"/><text x="55.1016%" y="367.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="54.9318%" y="341" width="0.0802%" height="15" fill="rgb(237,16,22)" fg:x="685" fg:w="1"/><text x="55.1818%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.0120%" y="405" width="0.0802%" height="15" fill="rgb(248,192,20)" fg:x="686" fg:w="1"/><text x="55.2620%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.0120%" y="389" width="0.0802%" height="15" fill="rgb(233,167,2)" fg:x="686" fg:w="1"/><text x="55.2620%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.0120%" y="373" width="0.0802%" height="15" fill="rgb(252,71,44)" fg:x="686" fg:w="1"/><text x="55.2620%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="55.0922%" y="373" width="0.1604%" height="15" fill="rgb(238,37,47)" fg:x="687" fg:w="2"/><text x="55.3422%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="55.0922%" y="405" width="0.4010%" height="15" fill="rgb(214,202,54)" fg:x="687" fg:w="5"/><text x="55.3422%" y="415.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="55.0922%" y="389" width="0.4010%" height="15" fill="rgb(254,165,40)" fg:x="687" fg:w="5"/><text x="55.3422%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="55.2526%" y="373" width="0.2406%" height="15" fill="rgb(246,173,38)" fg:x="689" fg:w="3"/><text x="55.5026%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="55.2526%" y="357" width="0.2406%" height="15" fill="rgb(215,3,27)" fg:x="689" fg:w="3"/><text x="55.5026%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="55.4130%" y="341" width="0.0802%" height="15" fill="rgb(239,169,51)" fg:x="691" fg:w="1"/><text x="55.6630%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.4130%" y="325" width="0.0802%" height="15" fill="rgb(212,5,25)" fg:x="691" fg:w="1"/><text x="55.6630%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4130%" y="309" width="0.0802%" height="15" fill="rgb(243,45,17)" fg:x="691" fg:w="1"/><text x="55.6630%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.4130%" y="293" width="0.0802%" height="15" fill="rgb(242,97,9)" fg:x="691" fg:w="1"/><text x="55.6630%" y="303.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="55.4932%" y="405" width="0.0802%" height="15" fill="rgb(228,71,31)" fg:x="692" fg:w="1"/><text x="55.7432%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.4932%" y="389" width="0.0802%" height="15" fill="rgb(252,184,16)" fg:x="692" fg:w="1"/><text x="55.7432%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4932%" y="373" width="0.0802%" height="15" fill="rgb(236,169,46)" fg:x="692" fg:w="1"/><text x="55.7432%" y="383.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="55.8140%" y="389" width="0.2406%" height="15" fill="rgb(207,17,47)" fg:x="696" fg:w="3"/><text x="56.0640%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="56.0545%" y="389" width="0.2406%" height="15" fill="rgb(206,201,28)" fg:x="699" fg:w="3"/><text x="56.3045%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="56.1347%" y="373" width="0.1604%" height="15" fill="rgb(224,184,23)" fg:x="700" fg:w="2"/><text x="56.3847%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="56.2951%" y="389" width="0.0802%" height="15" fill="rgb(208,139,48)" fg:x="702" fg:w="1"/><text x="56.5451%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.2951%" y="373" width="0.0802%" height="15" fill="rgb(208,130,10)" fg:x="702" fg:w="1"/><text x="56.5451%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="56.2951%" y="357" width="0.0802%" height="15" fill="rgb(211,213,45)" fg:x="702" fg:w="1"/><text x="56.5451%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="56.3753%" y="389" width="0.5613%" height="15" fill="rgb(235,100,30)" fg:x="703" fg:w="7"/><text x="56.6253%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="56.3753%" y="373" width="0.5613%" height="15" fill="rgb(206,144,31)" fg:x="703" fg:w="7"/><text x="56.6253%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="56.9366%" y="389" width="0.0802%" height="15" fill="rgb(224,200,26)" fg:x="710" fg:w="1"/><text x="57.1866%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.9366%" y="373" width="0.0802%" height="15" fill="rgb(247,104,53)" fg:x="710" fg:w="1"/><text x="57.1866%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="57.0168%" y="357" width="0.0802%" height="15" fill="rgb(220,14,17)" fg:x="711" fg:w="1"/><text x="57.2668%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.0168%" y="341" width="0.0802%" height="15" fill="rgb(230,140,40)" fg:x="711" fg:w="1"/><text x="57.2668%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.0168%" y="325" width="0.0802%" height="15" fill="rgb(229,2,41)" fg:x="711" fg:w="1"/><text x="57.2668%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.0168%" y="309" width="0.0802%" height="15" fill="rgb(232,89,16)" fg:x="711" fg:w="1"/><text x="57.2668%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="57.0168%" y="373" width="0.3208%" height="15" fill="rgb(247,59,52)" fg:x="711" fg:w="4"/><text x="57.2668%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="57.0970%" y="357" width="0.2406%" height="15" fill="rgb(226,110,21)" fg:x="712" fg:w="3"/><text x="57.3470%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="57.1772%" y="341" width="0.1604%" height="15" fill="rgb(224,176,43)" fg:x="713" fg:w="2"/><text x="57.4272%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="57.1772%" y="325" width="0.1604%" height="15" fill="rgb(221,73,6)" fg:x="713" fg:w="2"/><text x="57.4272%" y="335.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="57.4178%" y="357" width="0.0802%" height="15" fill="rgb(232,78,19)" fg:x="716" fg:w="1"/><text x="57.6678%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.4980%" y="357" width="0.0802%" height="15" fill="rgb(233,112,48)" fg:x="717" fg:w="1"/><text x="57.7480%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.4980%" y="341" width="0.0802%" height="15" fill="rgb(243,131,47)" fg:x="717" fg:w="1"/><text x="57.7480%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="57.5782%" y="357" width="0.2406%" height="15" fill="rgb(226,51,1)" fg:x="718" fg:w="3"/><text x="57.8282%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.7386%" y="341" width="0.0802%" height="15" fill="rgb(247,58,7)" fg:x="720" fg:w="1"/><text x="57.9886%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.7386%" y="325" width="0.0802%" height="15" fill="rgb(209,7,32)" fg:x="720" fg:w="1"/><text x="57.9886%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.7386%" y="309" width="0.0802%" height="15" fill="rgb(209,39,41)" fg:x="720" fg:w="1"/><text x="57.9886%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="57.8188%" y="357" width="0.4010%" height="15" fill="rgb(226,182,46)" fg:x="721" fg:w="5"/><text x="58.0688%" y="367.50"></text></g><g><title>regex_automata::meta::strategy::new (34 samples, 2.73%)</title><rect x="55.5734%" y="405" width="2.7265%" height="15" fill="rgb(230,219,10)" fg:x="693" fg:w="34"/><text x="55.8234%" y="415.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (16 samples, 1.28%)</title><rect x="57.0168%" y="389" width="1.2831%" height="15" fill="rgb(227,175,30)" fg:x="711" fg:w="16"/><text x="57.2668%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.96%)</title><rect x="57.3376%" y="373" width="0.9623%" height="15" fill="rgb(217,2,50)" fg:x="715" fg:w="12"/><text x="57.5876%" y="383.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="58.2197%" y="357" width="0.0802%" height="15" fill="rgb(229,160,0)" fg:x="726" fg:w="1"/><text x="58.4697%" y="367.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="58.2197%" y="341" width="0.0802%" height="15" fill="rgb(207,78,37)" fg:x="726" fg:w="1"/><text x="58.4697%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.2197%" y="325" width="0.0802%" height="15" fill="rgb(225,57,0)" fg:x="726" fg:w="1"/><text x="58.4697%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.2197%" y="309" width="0.0802%" height="15" fill="rgb(232,154,2)" fg:x="726" fg:w="1"/><text x="58.4697%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.2197%" y="293" width="0.0802%" height="15" fill="rgb(241,212,25)" fg:x="726" fg:w="1"/><text x="58.4697%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.5405%" y="309" width="0.0802%" height="15" fill="rgb(226,69,20)" fg:x="730" fg:w="1"/><text x="58.7905%" y="319.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (4 samples, 0.32%)</title><rect x="58.4603%" y="357" width="0.3208%" height="15" fill="rgb(247,184,54)" fg:x="729" fg:w="4"/><text x="58.7103%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="58.5405%" y="341" width="0.2406%" height="15" fill="rgb(210,145,0)" fg:x="730" fg:w="3"/><text x="58.7905%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="58.5405%" y="325" width="0.2406%" height="15" fill="rgb(253,82,12)" fg:x="730" fg:w="3"/><text x="58.7905%" y="335.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="58.6207%" y="309" width="0.1604%" height="15" fill="rgb(245,42,11)" fg:x="731" fg:w="2"/><text x="58.8707%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="58.7811%" y="357" width="0.0802%" height="15" fill="rgb(219,147,32)" fg:x="733" fg:w="1"/><text x="59.0311%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="58.7811%" y="341" width="0.0802%" height="15" fill="rgb(246,12,7)" fg:x="733" fg:w="1"/><text x="59.0311%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="58.7811%" y="325" width="0.0802%" height="15" fill="rgb(243,50,9)" fg:x="733" fg:w="1"/><text x="59.0311%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="58.8613%" y="357" width="0.0802%" height="15" fill="rgb(219,149,6)" fg:x="734" fg:w="1"/><text x="59.1113%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="58.8613%" y="341" width="0.0802%" height="15" fill="rgb(241,51,42)" fg:x="734" fg:w="1"/><text x="59.1113%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (16 samples, 1.28%)</title><rect x="58.3801%" y="373" width="1.2831%" height="15" fill="rgb(226,128,27)" fg:x="728" fg:w="16"/><text x="58.6301%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (9 samples, 0.72%)</title><rect x="58.9415%" y="357" width="0.7217%" height="15" fill="rgb(244,144,4)" fg:x="735" fg:w="9"/><text x="59.1915%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.64%)</title><rect x="59.0217%" y="341" width="0.6415%" height="15" fill="rgb(221,4,13)" fg:x="736" fg:w="8"/><text x="59.2717%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.64%)</title><rect x="59.0217%" y="325" width="0.6415%" height="15" fill="rgb(208,170,28)" fg:x="736" fg:w="8"/><text x="59.2717%" y="335.50"></text></g><g><title>__libc_malloc (8 samples, 0.64%)</title><rect x="59.0217%" y="309" width="0.6415%" height="15" fill="rgb(226,131,13)" fg:x="736" fg:w="8"/><text x="59.2717%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (19 samples, 1.52%)</title><rect x="58.2999%" y="405" width="1.5237%" height="15" fill="rgb(215,72,41)" fg:x="727" fg:w="19"/><text x="58.5499%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (19 samples, 1.52%)</title><rect x="58.2999%" y="389" width="1.5237%" height="15" fill="rgb(243,108,20)" fg:x="727" fg:w="19"/><text x="58.5499%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="59.6632%" y="373" width="0.1604%" height="15" fill="rgb(230,189,17)" fg:x="744" fg:w="2"/><text x="59.9132%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="59.8236%" y="373" width="0.1604%" height="15" fill="rgb(220,50,17)" fg:x="746" fg:w="2"/><text x="60.0736%" y="383.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="59.9038%" y="357" width="0.0802%" height="15" fill="rgb(248,152,48)" fg:x="747" fg:w="1"/><text x="60.1538%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="59.9840%" y="373" width="0.0802%" height="15" fill="rgb(244,91,11)" fg:x="748" fg:w="1"/><text x="60.2340%" y="383.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="59.9840%" y="357" width="0.0802%" height="15" fill="rgb(220,157,5)" fg:x="748" fg:w="1"/><text x="60.2340%" y="367.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="59.9840%" y="341" width="0.0802%" height="15" fill="rgb(253,137,8)" fg:x="748" fg:w="1"/><text x="60.2340%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.9840%" y="325" width="0.0802%" height="15" fill="rgb(217,137,51)" fg:x="748" fg:w="1"/><text x="60.2340%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (64 samples, 5.13%)</title><rect x="55.0120%" y="421" width="5.1323%" height="15" fill="rgb(218,209,53)" fg:x="686" fg:w="64"/><text x="55.2620%" y="431.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="59.8236%" y="405" width="0.3208%" height="15" fill="rgb(249,137,25)" fg:x="746" fg:w="4"/><text x="60.0736%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="59.8236%" y="389" width="0.3208%" height="15" fill="rgb(239,155,26)" fg:x="746" fg:w="4"/><text x="60.0736%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.0642%" y="373" width="0.0802%" height="15" fill="rgb(227,85,46)" fg:x="749" fg:w="1"/><text x="60.3142%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0642%" y="357" width="0.0802%" height="15" fill="rgb(251,107,43)" fg:x="749" fg:w="1"/><text x="60.3142%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.0642%" y="341" width="0.0802%" height="15" fill="rgb(234,170,33)" fg:x="749" fg:w="1"/><text x="60.3142%" y="351.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (65 samples, 5.21%)</title><rect x="55.0120%" y="453" width="5.2125%" height="15" fill="rgb(206,29,35)" fg:x="686" fg:w="65"/><text x="55.2620%" y="463.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (65 samples, 5.21%)</title><rect x="55.0120%" y="437" width="5.2125%" height="15" fill="rgb(227,138,25)" fg:x="686" fg:w="65"/><text x="55.2620%" y="447.50">regex:..</text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="60.1443%" y="421" width="0.0802%" height="15" fill="rgb(249,131,35)" fg:x="750" fg:w="1"/><text x="60.3943%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2245%" y="437" width="0.0802%" height="15" fill="rgb(239,6,40)" fg:x="751" fg:w="1"/><text x="60.4745%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.3047%" y="389" width="0.0802%" height="15" fill="rgb(246,136,47)" fg:x="752" fg:w="1"/><text x="60.5547%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3047%" y="373" width="0.0802%" height="15" fill="rgb(253,58,26)" fg:x="752" fg:w="1"/><text x="60.5547%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="60.2245%" y="453" width="0.2406%" height="15" fill="rgb(237,141,10)" fg:x="751" fg:w="3"/><text x="60.4745%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="60.3047%" y="437" width="0.1604%" height="15" fill="rgb(234,156,12)" fg:x="752" fg:w="2"/><text x="60.5547%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="60.3047%" y="421" width="0.1604%" height="15" fill="rgb(243,224,36)" fg:x="752" fg:w="2"/><text x="60.5547%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="60.3047%" y="405" width="0.1604%" height="15" fill="rgb(205,229,51)" fg:x="752" fg:w="2"/><text x="60.5547%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3849%" y="389" width="0.0802%" height="15" fill="rgb(223,189,4)" fg:x="753" fg:w="1"/><text x="60.6349%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.5453%" y="389" width="0.0802%" height="15" fill="rgb(249,167,54)" fg:x="755" fg:w="1"/><text x="60.7953%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.5453%" y="373" width="0.0802%" height="15" fill="rgb(218,34,28)" fg:x="755" fg:w="1"/><text x="60.7953%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.1868%" y="373" width="0.0802%" height="15" fill="rgb(232,109,42)" fg:x="763" fg:w="1"/><text x="61.4368%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.1868%" y="357" width="0.0802%" height="15" fill="rgb(248,214,46)" fg:x="763" fg:w="1"/><text x="61.4368%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.1868%" y="341" width="0.0802%" height="15" fill="rgb(244,216,40)" fg:x="763" fg:w="1"/><text x="61.4368%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.2670%" y="373" width="0.1604%" height="15" fill="rgb(231,226,31)" fg:x="764" fg:w="2"/><text x="61.5170%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.3472%" y="357" width="0.0802%" height="15" fill="rgb(238,38,43)" fg:x="765" fg:w="1"/><text x="61.5972%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="61.3472%" y="341" width="0.0802%" height="15" fill="rgb(208,88,43)" fg:x="765" fg:w="1"/><text x="61.5972%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.12%)</title><rect x="60.5453%" y="405" width="1.1227%" height="15" fill="rgb(205,136,37)" fg:x="755" fg:w="14"/><text x="60.7953%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.04%)</title><rect x="60.6255%" y="389" width="1.0425%" height="15" fill="rgb(237,34,14)" fg:x="756" fg:w="13"/><text x="60.8755%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="61.4274%" y="373" width="0.2406%" height="15" fill="rgb(236,193,44)" fg:x="766" fg:w="3"/><text x="61.6774%" y="383.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (85 samples, 6.82%)</title><rect x="55.0120%" y="469" width="6.8164%" height="15" fill="rgb(231,48,10)" fg:x="686" fg:w="85"/><text x="55.2620%" y="479.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.36%)</title><rect x="60.4651%" y="453" width="1.3633%" height="15" fill="rgb(213,141,34)" fg:x="754" fg:w="17"/><text x="60.7151%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.36%)</title><rect x="60.4651%" y="437" width="1.3633%" height="15" fill="rgb(249,130,34)" fg:x="754" fg:w="17"/><text x="60.7151%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.36%)</title><rect x="60.4651%" y="421" width="1.3633%" height="15" fill="rgb(219,42,41)" fg:x="754" fg:w="17"/><text x="60.7151%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="61.6680%" y="405" width="0.1604%" height="15" fill="rgb(224,100,54)" fg:x="769" fg:w="2"/><text x="61.9180%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="61.6680%" y="389" width="0.1604%" height="15" fill="rgb(229,200,27)" fg:x="769" fg:w="2"/><text x="61.9180%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="61.6680%" y="373" width="0.1604%" height="15" fill="rgb(217,118,10)" fg:x="769" fg:w="2"/><text x="61.9180%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.7482%" y="357" width="0.0802%" height="15" fill="rgb(206,22,3)" fg:x="770" fg:w="1"/><text x="61.9982%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.7482%" y="341" width="0.0802%" height="15" fill="rgb(232,163,46)" fg:x="770" fg:w="1"/><text x="61.9982%" y="351.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (621 samples, 49.80%)</title><rect x="12.1893%" y="565" width="49.7995%" height="15" fill="rgb(206,95,13)" fg:x="152" fg:w="621"/><text x="12.4393%" y="575.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Ob..</text></g><g><title>plugins_core::looking::model::qualify_name (619 samples, 49.64%)</title><rect x="12.3496%" y="549" width="49.6391%" height="15" fill="rgb(253,154,18)" fg:x="154" fg:w="619"/><text x="12.5996%" y="559.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (619 samples, 49.64%)</title><rect x="12.3496%" y="533" width="49.6391%" height="15" fill="rgb(219,32,23)" fg:x="154" fg:w="619"/><text x="12.5996%" y="543.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (619 samples, 49.64%)</title><rect x="12.3496%" y="517" width="49.6391%" height="15" fill="rgb(230,191,45)" fg:x="154" fg:w="619"/><text x="12.5996%" y="527.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (617 samples, 49.48%)</title><rect x="12.5100%" y="501" width="49.4787%" height="15" fill="rgb(229,64,36)" fg:x="156" fg:w="617"/><text x="12.7600%" y="511.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (87 samples, 6.98%)</title><rect x="55.0120%" y="485" width="6.9767%" height="15" fill="rgb(205,129,25)" fg:x="686" fg:w="87"/><text x="55.2620%" y="495.50">indefinit..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="61.8284%" y="469" width="0.1604%" height="15" fill="rgb(254,112,7)" fg:x="771" fg:w="2"/><text x="62.0784%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="61.9888%" y="565" width="0.0802%" height="15" fill="rgb(226,53,48)" fg:x="773" fg:w="1"/><text x="62.2388%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9888%" y="549" width="0.0802%" height="15" fill="rgb(214,153,38)" fg:x="773" fg:w="1"/><text x="62.2388%" y="559.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="62.0690%" y="533" width="0.1604%" height="15" fill="rgb(243,101,7)" fg:x="774" fg:w="2"/><text x="62.3190%" y="543.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="62.0690%" y="517" width="0.1604%" height="15" fill="rgb(240,140,22)" fg:x="774" fg:w="2"/><text x="62.3190%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.1492%" y="501" width="0.0802%" height="15" fill="rgb(235,114,2)" fg:x="775" fg:w="1"/><text x="62.3992%" y="511.50"></text></g><g><title>kernel::model::EntityRef::into_entry (3 samples, 0.24%)</title><rect x="62.0690%" y="565" width="0.2406%" height="15" fill="rgb(242,59,12)" fg:x="774" fg:w="3"/><text x="62.3190%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="62.0690%" y="549" width="0.2406%" height="15" fill="rgb(252,134,9)" fg:x="774" fg:w="3"/><text x="62.3190%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="62.2294%" y="533" width="0.0802%" height="15" fill="rgb(236,4,44)" fg:x="776" fg:w="1"/><text x="62.4794%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="62.2294%" y="517" width="0.0802%" height="15" fill="rgb(254,172,41)" fg:x="776" fg:w="1"/><text x="62.4794%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.2294%" y="501" width="0.0802%" height="15" fill="rgb(244,63,20)" fg:x="776" fg:w="1"/><text x="62.4794%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.2294%" y="485" width="0.0802%" height="15" fill="rgb(250,73,31)" fg:x="776" fg:w="1"/><text x="62.4794%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.2294%" y="469" width="0.0802%" height="15" fill="rgb(241,38,36)" fg:x="776" fg:w="1"/><text x="62.4794%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="62.2294%" y="453" width="0.0802%" height="15" fill="rgb(245,211,2)" fg:x="776" fg:w="1"/><text x="62.4794%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="62.2294%" y="437" width="0.0802%" height="15" fill="rgb(206,120,28)" fg:x="776" fg:w="1"/><text x="62.4794%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.2294%" y="421" width="0.0802%" height="15" fill="rgb(211,59,34)" fg:x="776" fg:w="1"/><text x="62.4794%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.2294%" y="405" width="0.0802%" height="15" fill="rgb(233,168,5)" fg:x="776" fg:w="1"/><text x="62.4794%" y="415.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="62.2294%" y="389" width="0.0802%" height="15" fill="rgb(234,33,13)" fg:x="776" fg:w="1"/><text x="62.4794%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="62.2294%" y="373" width="0.0802%" height="15" fill="rgb(231,150,26)" fg:x="776" fg:w="1"/><text x="62.4794%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.2294%" y="357" width="0.0802%" height="15" fill="rgb(217,191,4)" fg:x="776" fg:w="1"/><text x="62.4794%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.2294%" y="341" width="0.0802%" height="15" fill="rgb(246,198,38)" fg:x="776" fg:w="1"/><text x="62.4794%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="62.2294%" y="325" width="0.0802%" height="15" fill="rgb(245,64,37)" fg:x="776" fg:w="1"/><text x="62.4794%" y="335.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="62.2294%" y="309" width="0.0802%" height="15" fill="rgb(250,30,36)" fg:x="776" fg:w="1"/><text x="62.4794%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.2294%" y="293" width="0.0802%" height="15" fill="rgb(217,86,53)" fg:x="776" fg:w="1"/><text x="62.4794%" y="303.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (629 samples, 50.44%)</title><rect x="12.0289%" y="597" width="50.4411%" height="15" fill="rgb(228,157,16)" fg:x="150" fg:w="629"/><text x="12.2789%" y="607.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (627 samples, 50.28%)</title><rect x="12.1893%" y="581" width="50.2807%" height="15" fill="rgb(217,59,31)" fg:x="152" fg:w="627"/><text x="12.4393%" y="591.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="62.3095%" y="565" width="0.1604%" height="15" fill="rgb(237,138,41)" fg:x="777" fg:w="2"/><text x="62.5595%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="62.3095%" y="549" width="0.1604%" height="15" fill="rgb(227,91,49)" fg:x="777" fg:w="2"/><text x="62.5595%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="62.3095%" y="533" width="0.1604%" height="15" fill="rgb(247,21,44)" fg:x="777" fg:w="2"/><text x="62.5595%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="62.3095%" y="517" width="0.1604%" height="15" fill="rgb(219,210,51)" fg:x="777" fg:w="2"/><text x="62.5595%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="62.3095%" y="501" width="0.1604%" height="15" fill="rgb(209,140,6)" fg:x="777" fg:w="2"/><text x="62.5595%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="62.3897%" y="485" width="0.0802%" height="15" fill="rgb(221,188,24)" fg:x="778" fg:w="1"/><text x="62.6397%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="62.4699%" y="597" width="0.0802%" height="15" fill="rgb(232,154,20)" fg:x="779" fg:w="1"/><text x="62.7199%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.4699%" y="581" width="0.0802%" height="15" fill="rgb(244,137,50)" fg:x="779" fg:w="1"/><text x="62.7199%" y="591.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="62.5501%" y="565" width="0.0802%" height="15" fill="rgb(225,185,43)" fg:x="780" fg:w="1"/><text x="62.8001%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="62.5501%" y="549" width="0.0802%" height="15" fill="rgb(213,205,38)" fg:x="780" fg:w="1"/><text x="62.8001%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="62.5501%" y="533" width="0.0802%" height="15" fill="rgb(236,73,12)" fg:x="780" fg:w="1"/><text x="62.8001%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="62.5501%" y="517" width="0.0802%" height="15" fill="rgb(235,219,13)" fg:x="780" fg:w="1"/><text x="62.8001%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.5501%" y="501" width="0.0802%" height="15" fill="rgb(218,59,36)" fg:x="780" fg:w="1"/><text x="62.8001%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.5501%" y="485" width="0.0802%" height="15" fill="rgb(205,110,39)" fg:x="780" fg:w="1"/><text x="62.8001%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.5501%" y="469" width="0.0802%" height="15" fill="rgb(218,206,42)" fg:x="780" fg:w="1"/><text x="62.8001%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="62.5501%" y="453" width="0.0802%" height="15" fill="rgb(248,125,24)" fg:x="780" fg:w="1"/><text x="62.8001%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="62.5501%" y="437" width="0.0802%" height="15" fill="rgb(242,28,27)" fg:x="780" fg:w="1"/><text x="62.8001%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.5501%" y="421" width="0.0802%" height="15" fill="rgb(216,228,15)" fg:x="780" fg:w="1"/><text x="62.8001%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.5501%" y="405" width="0.0802%" height="15" fill="rgb(235,116,46)" fg:x="780" fg:w="1"/><text x="62.8001%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="62.5501%" y="389" width="0.0802%" height="15" fill="rgb(224,18,32)" fg:x="780" fg:w="1"/><text x="62.8001%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="62.5501%" y="373" width="0.0802%" height="15" fill="rgb(252,5,12)" fg:x="780" fg:w="1"/><text x="62.8001%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="62.5501%" y="357" width="0.0802%" height="15" fill="rgb(251,36,5)" fg:x="780" fg:w="1"/><text x="62.8001%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.5501%" y="341" width="0.0802%" height="15" fill="rgb(217,53,14)" fg:x="780" fg:w="1"/><text x="62.8001%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="62.5501%" y="325" width="0.0802%" height="15" fill="rgb(215,86,45)" fg:x="780" fg:w="1"/><text x="62.8001%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.5501%" y="309" width="0.0802%" height="15" fill="rgb(242,169,11)" fg:x="780" fg:w="1"/><text x="62.8001%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="62.5501%" y="293" width="0.0802%" height="15" fill="rgb(211,213,45)" fg:x="780" fg:w="1"/><text x="62.8001%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.5501%" y="277" width="0.0802%" height="15" fill="rgb(205,88,11)" fg:x="780" fg:w="1"/><text x="62.8001%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="62.5501%" y="261" width="0.0802%" height="15" fill="rgb(252,69,26)" fg:x="780" fg:w="1"/><text x="62.8001%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.5501%" y="245" width="0.0802%" height="15" fill="rgb(246,123,37)" fg:x="780" fg:w="1"/><text x="62.8001%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="62.5501%" y="229" width="0.0802%" height="15" fill="rgb(212,205,5)" fg:x="780" fg:w="1"/><text x="62.8001%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="62.5501%" y="213" width="0.0802%" height="15" fill="rgb(253,148,0)" fg:x="780" fg:w="1"/><text x="62.8001%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="62.5501%" y="197" width="0.0802%" height="15" fill="rgb(239,22,4)" fg:x="780" fg:w="1"/><text x="62.8001%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.5501%" y="181" width="0.0802%" height="15" fill="rgb(226,26,53)" fg:x="780" fg:w="1"/><text x="62.8001%" y="191.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="62.6303%" y="501" width="0.0802%" height="15" fill="rgb(225,229,45)" fg:x="781" fg:w="1"/><text x="62.8803%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.6303%" y="485" width="0.0802%" height="15" fill="rgb(220,60,37)" fg:x="781" fg:w="1"/><text x="62.8803%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.6303%" y="469" width="0.0802%" height="15" fill="rgb(217,180,35)" fg:x="781" fg:w="1"/><text x="62.8803%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.6303%" y="453" width="0.0802%" height="15" fill="rgb(229,7,53)" fg:x="781" fg:w="1"/><text x="62.8803%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.6303%" y="437" width="0.0802%" height="15" fill="rgb(254,137,3)" fg:x="781" fg:w="1"/><text x="62.8803%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.6303%" y="421" width="0.0802%" height="15" fill="rgb(215,140,41)" fg:x="781" fg:w="1"/><text x="62.8803%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.6303%" y="405" width="0.0802%" height="15" fill="rgb(250,80,15)" fg:x="781" fg:w="1"/><text x="62.8803%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.6303%" y="389" width="0.0802%" height="15" fill="rgb(252,191,6)" fg:x="781" fg:w="1"/><text x="62.8803%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.6303%" y="373" width="0.0802%" height="15" fill="rgb(246,217,18)" fg:x="781" fg:w="1"/><text x="62.8803%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.6303%" y="357" width="0.0802%" height="15" fill="rgb(223,93,7)" fg:x="781" fg:w="1"/><text x="62.8803%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.6303%" y="341" width="0.0802%" height="15" fill="rgb(225,55,52)" fg:x="781" fg:w="1"/><text x="62.8803%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.6303%" y="325" width="0.0802%" height="15" fill="rgb(240,31,24)" fg:x="781" fg:w="1"/><text x="62.8803%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6303%" y="309" width="0.0802%" height="15" fill="rgb(205,56,52)" fg:x="781" fg:w="1"/><text x="62.8803%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.7105%" y="421" width="0.0802%" height="15" fill="rgb(246,146,12)" fg:x="782" fg:w="1"/><text x="62.9605%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7105%" y="405" width="0.0802%" height="15" fill="rgb(239,84,36)" fg:x="782" fg:w="1"/><text x="62.9605%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.7105%" y="389" width="0.0802%" height="15" fill="rgb(207,41,40)" fg:x="782" fg:w="1"/><text x="62.9605%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.7105%" y="373" width="0.0802%" height="15" fill="rgb(241,179,25)" fg:x="782" fg:w="1"/><text x="62.9605%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.7105%" y="357" width="0.0802%" height="15" fill="rgb(210,0,34)" fg:x="782" fg:w="1"/><text x="62.9605%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.7105%" y="341" width="0.0802%" height="15" fill="rgb(225,217,29)" fg:x="782" fg:w="1"/><text x="62.9605%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="62.7105%" y="485" width="0.1604%" height="15" fill="rgb(216,191,38)" fg:x="782" fg:w="2"/><text x="62.9605%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="62.7105%" y="469" width="0.1604%" height="15" fill="rgb(232,140,52)" fg:x="782" fg:w="2"/><text x="62.9605%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.7105%" y="453" width="0.1604%" height="15" fill="rgb(223,158,51)" fg:x="782" fg:w="2"/><text x="62.9605%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.7105%" y="437" width="0.1604%" height="15" fill="rgb(235,29,51)" fg:x="782" fg:w="2"/><text x="62.9605%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.7907%" y="421" width="0.0802%" height="15" fill="rgb(215,181,18)" fg:x="783" fg:w="1"/><text x="63.0407%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7907%" y="405" width="0.0802%" height="15" fill="rgb(227,125,34)" fg:x="783" fg:w="1"/><text x="63.0407%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="62.7907%" y="389" width="0.0802%" height="15" fill="rgb(230,197,49)" fg:x="783" fg:w="1"/><text x="63.0407%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7907%" y="373" width="0.0802%" height="15" fill="rgb(239,141,16)" fg:x="783" fg:w="1"/><text x="63.0407%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.7907%" y="357" width="0.0802%" height="15" fill="rgb(225,105,43)" fg:x="783" fg:w="1"/><text x="63.0407%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7907%" y="341" width="0.0802%" height="15" fill="rgb(214,131,14)" fg:x="783" fg:w="1"/><text x="63.0407%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.8709%" y="437" width="0.0802%" height="15" fill="rgb(229,177,11)" fg:x="784" fg:w="1"/><text x="63.1209%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.9511%" y="405" width="0.0802%" height="15" fill="rgb(231,180,14)" fg:x="785" fg:w="1"/><text x="63.2011%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9511%" y="389" width="0.0802%" height="15" fill="rgb(232,88,2)" fg:x="785" fg:w="1"/><text x="63.2011%" y="399.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (7 samples, 0.56%)</title><rect x="62.5501%" y="597" width="0.5613%" height="15" fill="rgb(205,220,8)" fg:x="780" fg:w="7"/><text x="62.8001%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.56%)</title><rect x="62.5501%" y="581" width="0.5613%" height="15" fill="rgb(225,23,53)" fg:x="780" fg:w="7"/><text x="62.8001%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="62.6303%" y="565" width="0.4812%" height="15" fill="rgb(213,62,29)" fg:x="781" fg:w="6"/><text x="62.8803%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (6 samples, 0.48%)</title><rect x="62.6303%" y="549" width="0.4812%" height="15" fill="rgb(227,75,7)" fg:x="781" fg:w="6"/><text x="62.8803%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.48%)</title><rect x="62.6303%" y="533" width="0.4812%" height="15" fill="rgb(207,105,14)" fg:x="781" fg:w="6"/><text x="62.8803%" y="543.50"></text></g><g><title>engine::internal::Entities::prepare_entity (6 samples, 0.48%)</title><rect x="62.6303%" y="517" width="0.4812%" height="15" fill="rgb(245,62,29)" fg:x="781" fg:w="6"/><text x="62.8803%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="62.7105%" y="501" width="0.4010%" height="15" fill="rgb(236,202,4)" fg:x="782" fg:w="5"/><text x="62.9605%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="62.8709%" y="485" width="0.2406%" height="15" fill="rgb(250,67,1)" fg:x="784" fg:w="3"/><text x="63.1209%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.8709%" y="469" width="0.2406%" height="15" fill="rgb(253,115,44)" fg:x="784" fg:w="3"/><text x="63.1209%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.8709%" y="453" width="0.2406%" height="15" fill="rgb(251,139,18)" fg:x="784" fg:w="3"/><text x="63.1209%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.9511%" y="437" width="0.1604%" height="15" fill="rgb(218,22,32)" fg:x="785" fg:w="2"/><text x="63.2011%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.9511%" y="421" width="0.1604%" height="15" fill="rgb(243,53,5)" fg:x="785" fg:w="2"/><text x="63.2011%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0313%" y="405" width="0.0802%" height="15" fill="rgb(227,56,16)" fg:x="786" fg:w="1"/><text x="63.2813%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.0313%" y="389" width="0.0802%" height="15" fill="rgb(245,53,0)" fg:x="786" fg:w="1"/><text x="63.2813%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0313%" y="373" width="0.0802%" height="15" fill="rgb(216,170,35)" fg:x="786" fg:w="1"/><text x="63.2813%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.0313%" y="357" width="0.0802%" height="15" fill="rgb(211,200,8)" fg:x="786" fg:w="1"/><text x="63.2813%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.0313%" y="341" width="0.0802%" height="15" fill="rgb(228,204,44)" fg:x="786" fg:w="1"/><text x="63.2813%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.0313%" y="325" width="0.0802%" height="15" fill="rgb(214,121,17)" fg:x="786" fg:w="1"/><text x="63.2813%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.0313%" y="309" width="0.0802%" height="15" fill="rgb(233,64,38)" fg:x="786" fg:w="1"/><text x="63.2813%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.0313%" y="293" width="0.0802%" height="15" fill="rgb(253,54,19)" fg:x="786" fg:w="1"/><text x="63.2813%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="63.1917%" y="501" width="0.3208%" height="15" fill="rgb(253,94,18)" fg:x="788" fg:w="4"/><text x="63.4417%" y="511.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="63.1917%" y="485" width="0.3208%" height="15" fill="rgb(227,57,52)" fg:x="788" fg:w="4"/><text x="63.4417%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5124%" y="501" width="0.0802%" height="15" fill="rgb(230,228,50)" fg:x="792" fg:w="1"/><text x="63.7624%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.88%)</title><rect x="63.1115%" y="533" width="0.8821%" height="15" fill="rgb(217,205,27)" fg:x="787" fg:w="11"/><text x="63.3615%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.80%)</title><rect x="63.1917%" y="517" width="0.8019%" height="15" fill="rgb(252,71,50)" fg:x="788" fg:w="10"/><text x="63.4417%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (5 samples, 0.40%)</title><rect x="63.5926%" y="501" width="0.4010%" height="15" fill="rgb(209,86,4)" fg:x="793" fg:w="5"/><text x="63.8426%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="63.7530%" y="485" width="0.2406%" height="15" fill="rgb(229,94,0)" fg:x="795" fg:w="3"/><text x="64.0030%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.9134%" y="469" width="0.0802%" height="15" fill="rgb(252,223,21)" fg:x="797" fg:w="1"/><text x="64.1634%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.9936%" y="533" width="0.0802%" height="15" fill="rgb(230,210,4)" fg:x="798" fg:w="1"/><text x="64.2436%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (14 samples, 1.12%)</title><rect x="63.1115%" y="565" width="1.1227%" height="15" fill="rgb(240,149,38)" fg:x="787" fg:w="14"/><text x="63.3615%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.12%)</title><rect x="63.1115%" y="549" width="1.1227%" height="15" fill="rgb(254,105,20)" fg:x="787" fg:w="14"/><text x="63.3615%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (2 samples, 0.16%)</title><rect x="64.0738%" y="533" width="0.1604%" height="15" fill="rgb(253,87,46)" fg:x="799" fg:w="2"/><text x="64.3238%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.3945%" y="533" width="0.0802%" height="15" fill="rgb(253,116,33)" fg:x="803" fg:w="1"/><text x="64.6445%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.3945%" y="517" width="0.0802%" height="15" fill="rgb(229,198,5)" fg:x="803" fg:w="1"/><text x="64.6445%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.4747%" y="533" width="0.0802%" height="15" fill="rgb(242,38,37)" fg:x="804" fg:w="1"/><text x="64.7247%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="64.4747%" y="517" width="0.0802%" height="15" fill="rgb(242,69,53)" fg:x="804" fg:w="1"/><text x="64.7247%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.7153%" y="469" width="0.0802%" height="15" fill="rgb(249,80,16)" fg:x="807" fg:w="1"/><text x="64.9653%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="64.7955%" y="453" width="0.1604%" height="15" fill="rgb(206,128,11)" fg:x="808" fg:w="2"/><text x="65.0455%" y="463.50"></text></g><g><title>kernel::model::EntityRef::into_entry (2 samples, 0.16%)</title><rect x="64.7955%" y="437" width="0.1604%" height="15" fill="rgb(212,35,20)" fg:x="808" fg:w="2"/><text x="65.0455%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="64.7955%" y="421" width="0.1604%" height="15" fill="rgb(236,79,13)" fg:x="808" fg:w="2"/><text x="65.0455%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="64.7955%" y="405" width="0.1604%" height="15" fill="rgb(233,123,3)" fg:x="808" fg:w="2"/><text x="65.0455%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="64.8757%" y="389" width="0.0802%" height="15" fill="rgb(214,93,52)" fg:x="809" fg:w="1"/><text x="65.1257%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="64.8757%" y="373" width="0.0802%" height="15" fill="rgb(251,37,40)" fg:x="809" fg:w="1"/><text x="65.1257%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.8757%" y="357" width="0.0802%" height="15" fill="rgb(227,80,54)" fg:x="809" fg:w="1"/><text x="65.1257%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.8757%" y="341" width="0.0802%" height="15" fill="rgb(254,48,11)" fg:x="809" fg:w="1"/><text x="65.1257%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="64.8757%" y="325" width="0.0802%" height="15" fill="rgb(235,193,26)" fg:x="809" fg:w="1"/><text x="65.1257%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="64.8757%" y="309" width="0.0802%" height="15" fill="rgb(229,99,21)" fg:x="809" fg:w="1"/><text x="65.1257%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.8757%" y="293" width="0.0802%" height="15" fill="rgb(211,140,41)" fg:x="809" fg:w="1"/><text x="65.1257%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.8757%" y="277" width="0.0802%" height="15" fill="rgb(240,227,30)" fg:x="809" fg:w="1"/><text x="65.1257%" y="287.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="64.8757%" y="261" width="0.0802%" height="15" fill="rgb(215,224,45)" fg:x="809" fg:w="1"/><text x="65.1257%" y="271.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="64.8757%" y="245" width="0.0802%" height="15" fill="rgb(206,123,31)" fg:x="809" fg:w="1"/><text x="65.1257%" y="255.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.8757%" y="229" width="0.0802%" height="15" fill="rgb(210,138,16)" fg:x="809" fg:w="1"/><text x="65.1257%" y="239.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.8757%" y="213" width="0.0802%" height="15" fill="rgb(228,57,28)" fg:x="809" fg:w="1"/><text x="65.1257%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="64.8757%" y="197" width="0.0802%" height="15" fill="rgb(242,170,10)" fg:x="809" fg:w="1"/><text x="65.1257%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="64.8757%" y="181" width="0.0802%" height="15" fill="rgb(228,214,39)" fg:x="809" fg:w="1"/><text x="65.1257%" y="191.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="64.8757%" y="165" width="0.0802%" height="15" fill="rgb(218,179,33)" fg:x="809" fg:w="1"/><text x="65.1257%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="64.8757%" y="149" width="0.0802%" height="15" fill="rgb(235,193,39)" fg:x="809" fg:w="1"/><text x="65.1257%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.8757%" y="133" width="0.0802%" height="15" fill="rgb(219,221,36)" fg:x="809" fg:w="1"/><text x="65.1257%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="64.8757%" y="117" width="0.0802%" height="15" fill="rgb(248,218,19)" fg:x="809" fg:w="1"/><text x="65.1257%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="64.8757%" y="101" width="0.0802%" height="15" fill="rgb(205,50,9)" fg:x="809" fg:w="1"/><text x="65.1257%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="64.8757%" y="85" width="0.0802%" height="15" fill="rgb(238,81,28)" fg:x="809" fg:w="1"/><text x="65.1257%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.8757%" y="69" width="0.0802%" height="15" fill="rgb(235,110,19)" fg:x="809" fg:w="1"/><text x="65.1257%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="64.8757%" y="53" width="0.0802%" height="15" fill="rgb(214,7,14)" fg:x="809" fg:w="1"/><text x="65.1257%" y="63.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.08%)</title><rect x="64.8757%" y="37" width="0.0802%" height="15" fill="rgb(211,77,3)" fg:x="809" fg:w="1"/><text x="65.1257%" y="47.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9559%" y="389" width="0.0802%" height="15" fill="rgb(229,5,9)" fg:x="810" fg:w="1"/><text x="65.2059%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.9559%" y="373" width="0.0802%" height="15" fill="rgb(225,90,11)" fg:x="810" fg:w="1"/><text x="65.2059%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9559%" y="357" width="0.0802%" height="15" fill="rgb(242,56,8)" fg:x="810" fg:w="1"/><text x="65.2059%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.9559%" y="341" width="0.0802%" height="15" fill="rgb(249,212,39)" fg:x="810" fg:w="1"/><text x="65.2059%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.9559%" y="325" width="0.0802%" height="15" fill="rgb(236,90,9)" fg:x="810" fg:w="1"/><text x="65.2059%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.9559%" y="309" width="0.0802%" height="15" fill="rgb(206,88,35)" fg:x="810" fg:w="1"/><text x="65.2059%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.9559%" y="293" width="0.0802%" height="15" fill="rgb(205,126,30)" fg:x="810" fg:w="1"/><text x="65.2059%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9559%" y="277" width="0.0802%" height="15" fill="rgb(230,176,12)" fg:x="810" fg:w="1"/><text x="65.2059%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="64.9559%" y="261" width="0.0802%" height="15" fill="rgb(243,19,9)" fg:x="810" fg:w="1"/><text x="65.2059%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.9559%" y="245" width="0.0802%" height="15" fill="rgb(245,171,17)" fg:x="810" fg:w="1"/><text x="65.2059%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="64.9559%" y="229" width="0.0802%" height="15" fill="rgb(227,52,21)" fg:x="810" fg:w="1"/><text x="65.2059%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="64.9559%" y="213" width="0.0802%" height="15" fill="rgb(238,69,14)" fg:x="810" fg:w="1"/><text x="65.2059%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="64.9559%" y="197" width="0.0802%" height="15" fill="rgb(241,156,39)" fg:x="810" fg:w="1"/><text x="65.2059%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9559%" y="181" width="0.0802%" height="15" fill="rgb(212,227,28)" fg:x="810" fg:w="1"/><text x="65.2059%" y="191.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="65.0361%" y="341" width="0.0802%" height="15" fill="rgb(209,118,27)" fg:x="811" fg:w="1"/><text x="65.2861%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="65.0361%" y="325" width="0.0802%" height="15" fill="rgb(226,102,5)" fg:x="811" fg:w="1"/><text x="65.2861%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.0361%" y="309" width="0.0802%" height="15" fill="rgb(223,34,3)" fg:x="811" fg:w="1"/><text x="65.2861%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0361%" y="293" width="0.0802%" height="15" fill="rgb(221,81,38)" fg:x="811" fg:w="1"/><text x="65.2861%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.0361%" y="277" width="0.0802%" height="15" fill="rgb(236,219,28)" fg:x="811" fg:w="1"/><text x="65.2861%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0361%" y="261" width="0.0802%" height="15" fill="rgb(213,200,14)" fg:x="811" fg:w="1"/><text x="65.2861%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.0361%" y="245" width="0.0802%" height="15" fill="rgb(240,33,19)" fg:x="811" fg:w="1"/><text x="65.2861%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.1163%" y="293" width="0.0802%" height="15" fill="rgb(233,113,27)" fg:x="812" fg:w="1"/><text x="65.3663%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="65.0361%" y="389" width="0.3208%" height="15" fill="rgb(220,221,18)" fg:x="811" fg:w="4"/><text x="65.2861%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.32%)</title><rect x="65.0361%" y="373" width="0.3208%" height="15" fill="rgb(238,92,8)" fg:x="811" fg:w="4"/><text x="65.2861%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="65.0361%" y="357" width="0.3208%" height="15" fill="rgb(222,164,16)" fg:x="811" fg:w="4"/><text x="65.2861%" y="367.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="65.1163%" y="341" width="0.2406%" height="15" fill="rgb(241,119,3)" fg:x="812" fg:w="3"/><text x="65.3663%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="65.1163%" y="325" width="0.2406%" height="15" fill="rgb(241,44,8)" fg:x="812" fg:w="3"/><text x="65.3663%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="65.1163%" y="309" width="0.2406%" height="15" fill="rgb(230,36,40)" fg:x="812" fg:w="3"/><text x="65.3663%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.1965%" y="293" width="0.1604%" height="15" fill="rgb(243,16,36)" fg:x="813" fg:w="2"/><text x="65.4465%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.1965%" y="277" width="0.1604%" height="15" fill="rgb(231,4,26)" fg:x="813" fg:w="2"/><text x="65.4465%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.1965%" y="261" width="0.1604%" height="15" fill="rgb(240,9,31)" fg:x="813" fg:w="2"/><text x="65.4465%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.1965%" y="245" width="0.1604%" height="15" fill="rgb(207,173,15)" fg:x="813" fg:w="2"/><text x="65.4465%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.1965%" y="229" width="0.1604%" height="15" fill="rgb(224,192,53)" fg:x="813" fg:w="2"/><text x="65.4465%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.1965%" y="213" width="0.1604%" height="15" fill="rgb(223,67,28)" fg:x="813" fg:w="2"/><text x="65.4465%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.1965%" y="197" width="0.1604%" height="15" fill="rgb(211,20,47)" fg:x="813" fg:w="2"/><text x="65.4465%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.2767%" y="181" width="0.0802%" height="15" fill="rgb(240,228,2)" fg:x="814" fg:w="1"/><text x="65.5267%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.2767%" y="165" width="0.0802%" height="15" fill="rgb(248,151,12)" fg:x="814" fg:w="1"/><text x="65.5267%" y="175.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="65.2767%" y="149" width="0.0802%" height="15" fill="rgb(244,8,39)" fg:x="814" fg:w="1"/><text x="65.5267%" y="159.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.64%)</title><rect x="64.7955%" y="469" width="0.6415%" height="15" fill="rgb(222,26,8)" fg:x="808" fg:w="8"/><text x="65.0455%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="64.9559%" y="453" width="0.4812%" height="15" fill="rgb(213,106,44)" fg:x="810" fg:w="6"/><text x="65.2059%" y="463.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (6 samples, 0.48%)</title><rect x="64.9559%" y="437" width="0.4812%" height="15" fill="rgb(214,129,20)" fg:x="810" fg:w="6"/><text x="65.2059%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (6 samples, 0.48%)</title><rect x="64.9559%" y="421" width="0.4812%" height="15" fill="rgb(212,32,13)" fg:x="810" fg:w="6"/><text x="65.2059%" y="431.50"></text></g><g><title>kernel::model::Entity::load_scope (6 samples, 0.48%)</title><rect x="64.9559%" y="405" width="0.4812%" height="15" fill="rgb(208,168,33)" fg:x="810" fg:w="6"/><text x="65.2059%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="65.3569%" y="389" width="0.0802%" height="15" fill="rgb(231,207,8)" fg:x="815" fg:w="1"/><text x="65.6069%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.4370%" y="421" width="0.0802%" height="15" fill="rgb(235,219,23)" fg:x="816" fg:w="1"/><text x="65.6870%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.4370%" y="405" width="0.0802%" height="15" fill="rgb(226,216,26)" fg:x="816" fg:w="1"/><text x="65.6870%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.4370%" y="389" width="0.0802%" height="15" fill="rgb(239,137,16)" fg:x="816" fg:w="1"/><text x="65.6870%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.4370%" y="373" width="0.0802%" height="15" fill="rgb(207,12,36)" fg:x="816" fg:w="1"/><text x="65.6870%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.4370%" y="357" width="0.0802%" height="15" fill="rgb(210,214,24)" fg:x="816" fg:w="1"/><text x="65.6870%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.4370%" y="341" width="0.0802%" height="15" fill="rgb(206,56,30)" fg:x="816" fg:w="1"/><text x="65.6870%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.4370%" y="325" width="0.0802%" height="15" fill="rgb(228,143,26)" fg:x="816" fg:w="1"/><text x="65.6870%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.4370%" y="309" width="0.0802%" height="15" fill="rgb(216,218,46)" fg:x="816" fg:w="1"/><text x="65.6870%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.4370%" y="293" width="0.0802%" height="15" fill="rgb(206,6,19)" fg:x="816" fg:w="1"/><text x="65.6870%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.4370%" y="277" width="0.0802%" height="15" fill="rgb(239,177,51)" fg:x="816" fg:w="1"/><text x="65.6870%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.4370%" y="261" width="0.0802%" height="15" fill="rgb(216,55,25)" fg:x="816" fg:w="1"/><text x="65.6870%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.4370%" y="245" width="0.0802%" height="15" fill="rgb(231,163,29)" fg:x="816" fg:w="1"/><text x="65.6870%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.4370%" y="229" width="0.0802%" height="15" fill="rgb(232,149,50)" fg:x="816" fg:w="1"/><text x="65.6870%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4370%" y="213" width="0.0802%" height="15" fill="rgb(223,142,48)" fg:x="816" fg:w="1"/><text x="65.6870%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.4370%" y="437" width="0.1604%" height="15" fill="rgb(245,83,23)" fg:x="816" fg:w="2"/><text x="65.6870%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.5172%" y="421" width="0.0802%" height="15" fill="rgb(224,63,2)" fg:x="817" fg:w="1"/><text x="65.7672%" y="431.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="65.5974%" y="437" width="0.0802%" height="15" fill="rgb(218,65,53)" fg:x="818" fg:w="1"/><text x="65.8474%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="65.5974%" y="421" width="0.0802%" height="15" fill="rgb(221,84,29)" fg:x="818" fg:w="1"/><text x="65.8474%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.5974%" y="405" width="0.0802%" height="15" fill="rgb(234,0,32)" fg:x="818" fg:w="1"/><text x="65.8474%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="65.5974%" y="389" width="0.0802%" height="15" fill="rgb(206,20,16)" fg:x="818" fg:w="1"/><text x="65.8474%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5974%" y="373" width="0.0802%" height="15" fill="rgb(244,172,18)" fg:x="818" fg:w="1"/><text x="65.8474%" y="383.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (14 samples, 1.12%)</title><rect x="64.7153%" y="485" width="1.1227%" height="15" fill="rgb(254,133,1)" fg:x="807" fg:w="14"/><text x="64.9653%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="65.4370%" y="469" width="0.4010%" height="15" fill="rgb(222,206,41)" fg:x="816" fg:w="5"/><text x="65.6870%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.40%)</title><rect x="65.4370%" y="453" width="0.4010%" height="15" fill="rgb(212,3,42)" fg:x="816" fg:w="5"/><text x="65.6870%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.6776%" y="437" width="0.1604%" height="15" fill="rgb(241,11,4)" fg:x="819" fg:w="2"/><text x="65.9276%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.6776%" y="421" width="0.1604%" height="15" fill="rgb(205,19,26)" fg:x="819" fg:w="2"/><text x="65.9276%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.7578%" y="405" width="0.0802%" height="15" fill="rgb(210,179,32)" fg:x="820" fg:w="1"/><text x="66.0078%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.8380%" y="469" width="0.0802%" height="15" fill="rgb(227,116,49)" fg:x="821" fg:w="1"/><text x="66.0880%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.8380%" y="453" width="0.0802%" height="15" fill="rgb(211,146,6)" fg:x="821" fg:w="1"/><text x="66.0880%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.8380%" y="437" width="0.0802%" height="15" fill="rgb(219,44,39)" fg:x="821" fg:w="1"/><text x="66.0880%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.8380%" y="421" width="0.0802%" height="15" fill="rgb(234,128,11)" fg:x="821" fg:w="1"/><text x="66.0880%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.8380%" y="405" width="0.0802%" height="15" fill="rgb(220,183,53)" fg:x="821" fg:w="1"/><text x="66.0880%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.8380%" y="389" width="0.0802%" height="15" fill="rgb(213,219,32)" fg:x="821" fg:w="1"/><text x="66.0880%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.8380%" y="373" width="0.0802%" height="15" fill="rgb(232,156,16)" fg:x="821" fg:w="1"/><text x="66.0880%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.8380%" y="357" width="0.0802%" height="15" fill="rgb(246,135,34)" fg:x="821" fg:w="1"/><text x="66.0880%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.8380%" y="341" width="0.0802%" height="15" fill="rgb(241,99,0)" fg:x="821" fg:w="1"/><text x="66.0880%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.8380%" y="325" width="0.0802%" height="15" fill="rgb(222,103,45)" fg:x="821" fg:w="1"/><text x="66.0880%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.8380%" y="309" width="0.0802%" height="15" fill="rgb(212,57,4)" fg:x="821" fg:w="1"/><text x="66.0880%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.8380%" y="293" width="0.0802%" height="15" fill="rgb(215,68,47)" fg:x="821" fg:w="1"/><text x="66.0880%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8380%" y="277" width="0.0802%" height="15" fill="rgb(230,84,2)" fg:x="821" fg:w="1"/><text x="66.0880%" y="287.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="65.9182%" y="373" width="0.0802%" height="15" fill="rgb(220,102,14)" fg:x="822" fg:w="1"/><text x="66.1682%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.9182%" y="357" width="0.0802%" height="15" fill="rgb(240,10,32)" fg:x="822" fg:w="1"/><text x="66.1682%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.9182%" y="341" width="0.0802%" height="15" fill="rgb(215,47,27)" fg:x="822" fg:w="1"/><text x="66.1682%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.9182%" y="325" width="0.0802%" height="15" fill="rgb(233,188,43)" fg:x="822" fg:w="1"/><text x="66.1682%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.9182%" y="309" width="0.0802%" height="15" fill="rgb(253,190,1)" fg:x="822" fg:w="1"/><text x="66.1682%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.9182%" y="293" width="0.0802%" height="15" fill="rgb(206,114,52)" fg:x="822" fg:w="1"/><text x="66.1682%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.9182%" y="277" width="0.0802%" height="15" fill="rgb(233,120,37)" fg:x="822" fg:w="1"/><text x="66.1682%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.9182%" y="261" width="0.0802%" height="15" fill="rgb(214,52,39)" fg:x="822" fg:w="1"/><text x="66.1682%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.9182%" y="245" width="0.0802%" height="15" fill="rgb(223,80,29)" fg:x="822" fg:w="1"/><text x="66.1682%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.9182%" y="229" width="0.0802%" height="15" fill="rgb(230,101,40)" fg:x="822" fg:w="1"/><text x="66.1682%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.9182%" y="213" width="0.0802%" height="15" fill="rgb(219,211,8)" fg:x="822" fg:w="1"/><text x="66.1682%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.9182%" y="197" width="0.0802%" height="15" fill="rgb(252,126,28)" fg:x="822" fg:w="1"/><text x="66.1682%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9182%" y="181" width="0.0802%" height="15" fill="rgb(215,56,38)" fg:x="822" fg:w="1"/><text x="66.1682%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9984%" y="293" width="0.0802%" height="15" fill="rgb(249,55,44)" fg:x="823" fg:w="1"/><text x="66.2484%" y="303.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="65.9984%" y="357" width="0.1604%" height="15" fill="rgb(220,221,32)" fg:x="823" fg:w="2"/><text x="66.2484%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.9984%" y="341" width="0.1604%" height="15" fill="rgb(212,216,41)" fg:x="823" fg:w="2"/><text x="66.2484%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="65.9984%" y="325" width="0.1604%" height="15" fill="rgb(228,213,43)" fg:x="823" fg:w="2"/><text x="66.2484%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="65.9984%" y="309" width="0.1604%" height="15" fill="rgb(211,31,26)" fg:x="823" fg:w="2"/><text x="66.2484%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.0786%" y="293" width="0.0802%" height="15" fill="rgb(229,202,19)" fg:x="824" fg:w="1"/><text x="66.3286%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.1588%" y="245" width="0.0802%" height="15" fill="rgb(229,105,46)" fg:x="825" fg:w="1"/><text x="66.4088%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.1588%" y="229" width="0.0802%" height="15" fill="rgb(235,108,1)" fg:x="825" fg:w="1"/><text x="66.4088%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="66.1588%" y="277" width="0.1604%" height="15" fill="rgb(245,111,35)" fg:x="825" fg:w="2"/><text x="66.4088%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.1588%" y="261" width="0.1604%" height="15" fill="rgb(219,185,31)" fg:x="825" fg:w="2"/><text x="66.4088%" y="271.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.2390%" y="245" width="0.0802%" height="15" fill="rgb(214,4,43)" fg:x="826" fg:w="1"/><text x="66.4890%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.2390%" y="229" width="0.0802%" height="15" fill="rgb(235,227,40)" fg:x="826" fg:w="1"/><text x="66.4890%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.2390%" y="213" width="0.0802%" height="15" fill="rgb(230,88,30)" fg:x="826" fg:w="1"/><text x="66.4890%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.2390%" y="197" width="0.0802%" height="15" fill="rgb(216,217,1)" fg:x="826" fg:w="1"/><text x="66.4890%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.2390%" y="181" width="0.0802%" height="15" fill="rgb(248,139,50)" fg:x="826" fg:w="1"/><text x="66.4890%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.2390%" y="165" width="0.0802%" height="15" fill="rgb(233,1,21)" fg:x="826" fg:w="1"/><text x="66.4890%" y="175.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.32%)</title><rect x="66.1588%" y="341" width="0.3208%" height="15" fill="rgb(215,183,12)" fg:x="825" fg:w="4"/><text x="66.4088%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.32%)</title><rect x="66.1588%" y="325" width="0.3208%" height="15" fill="rgb(229,104,42)" fg:x="825" fg:w="4"/><text x="66.4088%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="66.1588%" y="309" width="0.3208%" height="15" fill="rgb(243,34,48)" fg:x="825" fg:w="4"/><text x="66.4088%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="66.1588%" y="293" width="0.3208%" height="15" fill="rgb(239,11,44)" fg:x="825" fg:w="4"/><text x="66.4088%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.3192%" y="277" width="0.1604%" height="15" fill="rgb(231,98,35)" fg:x="827" fg:w="2"/><text x="66.5692%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.3192%" y="261" width="0.1604%" height="15" fill="rgb(233,28,25)" fg:x="827" fg:w="2"/><text x="66.5692%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="66.3192%" y="245" width="0.1604%" height="15" fill="rgb(234,123,11)" fg:x="827" fg:w="2"/><text x="66.5692%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.3192%" y="229" width="0.1604%" height="15" fill="rgb(220,69,3)" fg:x="827" fg:w="2"/><text x="66.5692%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="66.3192%" y="213" width="0.1604%" height="15" fill="rgb(214,64,36)" fg:x="827" fg:w="2"/><text x="66.5692%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3994%" y="197" width="0.0802%" height="15" fill="rgb(211,138,32)" fg:x="828" fg:w="1"/><text x="66.6494%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.3994%" y="181" width="0.0802%" height="15" fill="rgb(213,118,47)" fg:x="828" fg:w="1"/><text x="66.6494%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.4796%" y="261" width="0.0802%" height="15" fill="rgb(243,124,49)" fg:x="829" fg:w="1"/><text x="66.7296%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4796%" y="245" width="0.0802%" height="15" fill="rgb(221,30,28)" fg:x="829" fg:w="1"/><text x="66.7296%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.5597%" y="197" width="0.0802%" height="15" fill="rgb(246,37,13)" fg:x="830" fg:w="1"/><text x="66.8097%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.5597%" y="213" width="0.1604%" height="15" fill="rgb(249,66,14)" fg:x="830" fg:w="2"/><text x="66.8097%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.6399%" y="197" width="0.0802%" height="15" fill="rgb(213,166,5)" fg:x="831" fg:w="1"/><text x="66.8899%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6399%" y="181" width="0.0802%" height="15" fill="rgb(221,66,24)" fg:x="831" fg:w="1"/><text x="66.8899%" y="191.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (11 samples, 0.88%)</title><rect x="65.9182%" y="437" width="0.8821%" height="15" fill="rgb(210,132,17)" fg:x="822" fg:w="11"/><text x="66.1682%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.88%)</title><rect x="65.9182%" y="421" width="0.8821%" height="15" fill="rgb(243,202,5)" fg:x="822" fg:w="11"/><text x="66.1682%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="65.9182%" y="405" width="0.8821%" height="15" fill="rgb(233,70,48)" fg:x="822" fg:w="11"/><text x="66.1682%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (11 samples, 0.88%)</title><rect x="65.9182%" y="389" width="0.8821%" height="15" fill="rgb(238,41,26)" fg:x="822" fg:w="11"/><text x="66.1682%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (10 samples, 0.80%)</title><rect x="65.9984%" y="373" width="0.8019%" height="15" fill="rgb(241,19,31)" fg:x="823" fg:w="10"/><text x="66.2484%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (8 samples, 0.64%)</title><rect x="66.1588%" y="357" width="0.6415%" height="15" fill="rgb(214,76,10)" fg:x="825" fg:w="8"/><text x="66.4088%" y="367.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="66.4796%" y="341" width="0.3208%" height="15" fill="rgb(254,202,22)" fg:x="829" fg:w="4"/><text x="66.7296%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="66.4796%" y="325" width="0.3208%" height="15" fill="rgb(214,72,24)" fg:x="829" fg:w="4"/><text x="66.7296%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="66.4796%" y="309" width="0.3208%" height="15" fill="rgb(221,92,46)" fg:x="829" fg:w="4"/><text x="66.7296%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="66.4796%" y="293" width="0.3208%" height="15" fill="rgb(246,13,50)" fg:x="829" fg:w="4"/><text x="66.7296%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="66.4796%" y="277" width="0.3208%" height="15" fill="rgb(240,165,38)" fg:x="829" fg:w="4"/><text x="66.7296%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="66.5597%" y="261" width="0.2406%" height="15" fill="rgb(241,24,51)" fg:x="830" fg:w="3"/><text x="66.8097%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="66.5597%" y="245" width="0.2406%" height="15" fill="rgb(227,51,44)" fg:x="830" fg:w="3"/><text x="66.8097%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="66.5597%" y="229" width="0.2406%" height="15" fill="rgb(231,121,3)" fg:x="830" fg:w="3"/><text x="66.8097%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.7201%" y="213" width="0.0802%" height="15" fill="rgb(245,3,41)" fg:x="832" fg:w="1"/><text x="66.9701%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.7201%" y="197" width="0.0802%" height="15" fill="rgb(214,13,26)" fg:x="832" fg:w="1"/><text x="66.9701%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.7201%" y="181" width="0.0802%" height="15" fill="rgb(252,75,11)" fg:x="832" fg:w="1"/><text x="66.9701%" y="191.50"></text></g><g><title>plugins_core::tools::get_contained_keys (13 samples, 1.04%)</title><rect x="65.8380%" y="485" width="1.0425%" height="15" fill="rgb(218,226,17)" fg:x="821" fg:w="13"/><text x="66.0880%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (12 samples, 0.96%)</title><rect x="65.9182%" y="469" width="0.9623%" height="15" fill="rgb(248,89,38)" fg:x="822" fg:w="12"/><text x="66.1682%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (12 samples, 0.96%)</title><rect x="65.9182%" y="453" width="0.9623%" height="15" fill="rgb(237,73,46)" fg:x="822" fg:w="12"/><text x="66.1682%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.8003%" y="437" width="0.0802%" height="15" fill="rgb(242,78,33)" fg:x="833" fg:w="1"/><text x="67.0503%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8003%" y="421" width="0.0802%" height="15" fill="rgb(235,60,3)" fg:x="833" fg:w="1"/><text x="67.0503%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 2.49%)</title><rect x="64.5549%" y="517" width="2.4860%" height="15" fill="rgb(216,172,19)" fg:x="805" fg:w="31"/><text x="64.8049%" y="527.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (31 samples, 2.49%)</title><rect x="64.5549%" y="501" width="2.4860%" height="15" fill="rgb(227,6,42)" fg:x="805" fg:w="31"/><text x="64.8049%" y="511.50">&lt;c..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="66.8805%" y="485" width="0.1604%" height="15" fill="rgb(223,207,42)" fg:x="834" fg:w="2"/><text x="67.1305%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="66.9607%" y="469" width="0.0802%" height="15" fill="rgb(246,138,30)" fg:x="835" fg:w="1"/><text x="67.2107%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1211%" y="485" width="0.0802%" height="15" fill="rgb(251,199,47)" fg:x="837" fg:w="1"/><text x="67.3711%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="67.2013%" y="469" width="0.0802%" height="15" fill="rgb(228,218,44)" fg:x="838" fg:w="1"/><text x="67.4513%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="67.2013%" y="453" width="0.0802%" height="15" fill="rgb(220,68,6)" fg:x="838" fg:w="1"/><text x="67.4513%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="67.2013%" y="437" width="0.0802%" height="15" fill="rgb(240,60,26)" fg:x="838" fg:w="1"/><text x="67.4513%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="67.2013%" y="421" width="0.0802%" height="15" fill="rgb(211,200,19)" fg:x="838" fg:w="1"/><text x="67.4513%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.2013%" y="405" width="0.0802%" height="15" fill="rgb(242,145,30)" fg:x="838" fg:w="1"/><text x="67.4513%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.2013%" y="389" width="0.0802%" height="15" fill="rgb(225,64,13)" fg:x="838" fg:w="1"/><text x="67.4513%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="67.2013%" y="373" width="0.0802%" height="15" fill="rgb(218,103,35)" fg:x="838" fg:w="1"/><text x="67.4513%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.2013%" y="357" width="0.0802%" height="15" fill="rgb(216,93,46)" fg:x="838" fg:w="1"/><text x="67.4513%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.2013%" y="341" width="0.0802%" height="15" fill="rgb(225,159,27)" fg:x="838" fg:w="1"/><text x="67.4513%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.2013%" y="325" width="0.0802%" height="15" fill="rgb(225,204,11)" fg:x="838" fg:w="1"/><text x="67.4513%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.2013%" y="309" width="0.0802%" height="15" fill="rgb(205,56,4)" fg:x="838" fg:w="1"/><text x="67.4513%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.2013%" y="293" width="0.0802%" height="15" fill="rgb(206,6,35)" fg:x="838" fg:w="1"/><text x="67.4513%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="67.2013%" y="277" width="0.0802%" height="15" fill="rgb(247,73,52)" fg:x="838" fg:w="1"/><text x="67.4513%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="67.2013%" y="261" width="0.0802%" height="15" fill="rgb(246,97,4)" fg:x="838" fg:w="1"/><text x="67.4513%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.2013%" y="245" width="0.0802%" height="15" fill="rgb(212,37,15)" fg:x="838" fg:w="1"/><text x="67.4513%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="67.2013%" y="229" width="0.0802%" height="15" fill="rgb(208,130,40)" fg:x="838" fg:w="1"/><text x="67.4513%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.2013%" y="213" width="0.0802%" height="15" fill="rgb(236,55,29)" fg:x="838" fg:w="1"/><text x="67.4513%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.2013%" y="197" width="0.0802%" height="15" fill="rgb(209,156,45)" fg:x="838" fg:w="1"/><text x="67.4513%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.2013%" y="181" width="0.0802%" height="15" fill="rgb(249,107,4)" fg:x="838" fg:w="1"/><text x="67.4513%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="67.2013%" y="165" width="0.0802%" height="15" fill="rgb(227,7,13)" fg:x="838" fg:w="1"/><text x="67.4513%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.2013%" y="149" width="0.0802%" height="15" fill="rgb(250,129,14)" fg:x="838" fg:w="1"/><text x="67.4513%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="67.2013%" y="133" width="0.0802%" height="15" fill="rgb(229,92,13)" fg:x="838" fg:w="1"/><text x="67.4513%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="67.2013%" y="117" width="0.0802%" height="15" fill="rgb(245,98,39)" fg:x="838" fg:w="1"/><text x="67.4513%" y="127.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="67.2013%" y="101" width="0.0802%" height="15" fill="rgb(234,135,48)" fg:x="838" fg:w="1"/><text x="67.4513%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.2013%" y="85" width="0.0802%" height="15" fill="rgb(230,98,28)" fg:x="838" fg:w="1"/><text x="67.4513%" y="95.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.6824%" y="261" width="0.0802%" height="15" fill="rgb(223,121,0)" fg:x="844" fg:w="1"/><text x="67.9324%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.6824%" y="245" width="0.0802%" height="15" fill="rgb(234,173,33)" fg:x="844" fg:w="1"/><text x="67.9324%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.6824%" y="229" width="0.0802%" height="15" fill="rgb(245,47,8)" fg:x="844" fg:w="1"/><text x="67.9324%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.6824%" y="213" width="0.0802%" height="15" fill="rgb(205,17,20)" fg:x="844" fg:w="1"/><text x="67.9324%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="67.5221%" y="293" width="0.3208%" height="15" fill="rgb(232,151,16)" fg:x="842" fg:w="4"/><text x="67.7721%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="67.5221%" y="277" width="0.3208%" height="15" fill="rgb(208,30,32)" fg:x="842" fg:w="4"/><text x="67.7721%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7626%" y="261" width="0.0802%" height="15" fill="rgb(254,26,3)" fg:x="845" fg:w="1"/><text x="68.0126%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7626%" y="245" width="0.0802%" height="15" fill="rgb(240,177,30)" fg:x="845" fg:w="1"/><text x="68.0126%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.48%)</title><rect x="67.5221%" y="309" width="0.4812%" height="15" fill="rgb(248,76,44)" fg:x="842" fg:w="6"/><text x="67.7721%" y="319.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="67.8428%" y="293" width="0.1604%" height="15" fill="rgb(241,186,54)" fg:x="846" fg:w="2"/><text x="68.0928%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="67.8428%" y="277" width="0.1604%" height="15" fill="rgb(249,171,29)" fg:x="846" fg:w="2"/><text x="68.0928%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.9230%" y="261" width="0.0802%" height="15" fill="rgb(237,151,44)" fg:x="847" fg:w="1"/><text x="68.1730%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.9230%" y="245" width="0.0802%" height="15" fill="rgb(228,174,30)" fg:x="847" fg:w="1"/><text x="68.1730%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="67.9230%" y="229" width="0.0802%" height="15" fill="rgb(252,14,37)" fg:x="847" fg:w="1"/><text x="68.1730%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.9230%" y="213" width="0.0802%" height="15" fill="rgb(207,111,40)" fg:x="847" fg:w="1"/><text x="68.1730%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.0032%" y="309" width="0.0802%" height="15" fill="rgb(248,171,54)" fg:x="848" fg:w="1"/><text x="68.2532%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0032%" y="293" width="0.0802%" height="15" fill="rgb(211,127,2)" fg:x="848" fg:w="1"/><text x="68.2532%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="67.5221%" y="325" width="0.6415%" height="15" fill="rgb(236,87,47)" fg:x="842" fg:w="8"/><text x="67.7721%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0834%" y="309" width="0.0802%" height="15" fill="rgb(223,190,45)" fg:x="849" fg:w="1"/><text x="68.3334%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.0834%" y="293" width="0.0802%" height="15" fill="rgb(215,5,16)" fg:x="849" fg:w="1"/><text x="68.3334%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.0834%" y="277" width="0.0802%" height="15" fill="rgb(252,82,33)" fg:x="849" fg:w="1"/><text x="68.3334%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.72%)</title><rect x="67.5221%" y="357" width="0.7217%" height="15" fill="rgb(247,213,44)" fg:x="842" fg:w="9"/><text x="67.7721%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="67.5221%" y="341" width="0.7217%" height="15" fill="rgb(205,196,44)" fg:x="842" fg:w="9"/><text x="67.7721%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.1636%" y="325" width="0.0802%" height="15" fill="rgb(237,96,54)" fg:x="850" fg:w="1"/><text x="68.4136%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="67.5221%" y="373" width="0.8019%" height="15" fill="rgb(230,113,34)" fg:x="842" fg:w="10"/><text x="67.7721%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2438%" y="357" width="0.0802%" height="15" fill="rgb(221,224,12)" fg:x="851" fg:w="1"/><text x="68.4938%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (12 samples, 0.96%)</title><rect x="67.4419%" y="405" width="0.9623%" height="15" fill="rgb(219,112,44)" fg:x="841" fg:w="12"/><text x="67.6919%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="67.5221%" y="389" width="0.8821%" height="15" fill="rgb(210,31,13)" fg:x="842" fg:w="11"/><text x="67.7721%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.3240%" y="373" width="0.0802%" height="15" fill="rgb(230,25,16)" fg:x="852" fg:w="1"/><text x="68.5740%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3240%" y="357" width="0.0802%" height="15" fill="rgb(246,108,53)" fg:x="852" fg:w="1"/><text x="68.5740%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (16 samples, 1.28%)</title><rect x="67.2815%" y="453" width="1.2831%" height="15" fill="rgb(241,172,50)" fg:x="839" fg:w="16"/><text x="67.5315%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 1.28%)</title><rect x="67.2815%" y="437" width="1.2831%" height="15" fill="rgb(235,141,10)" fg:x="839" fg:w="16"/><text x="67.5315%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.28%)</title><rect x="67.2815%" y="421" width="1.2831%" height="15" fill="rgb(220,174,43)" fg:x="839" fg:w="16"/><text x="67.5315%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="68.4042%" y="405" width="0.1604%" height="15" fill="rgb(215,181,40)" fg:x="853" fg:w="2"/><text x="68.6542%" y="415.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="68.5646%" y="405" width="0.2406%" height="15" fill="rgb(230,97,2)" fg:x="855" fg:w="3"/><text x="68.8146%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8051%" y="405" width="0.0802%" height="15" fill="rgb(211,25,27)" fg:x="858" fg:w="1"/><text x="69.0551%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8051%" y="389" width="0.0802%" height="15" fill="rgb(230,87,26)" fg:x="858" fg:w="1"/><text x="69.0551%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="68.8853%" y="405" width="0.0802%" height="15" fill="rgb(227,160,17)" fg:x="859" fg:w="1"/><text x="69.1353%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.8853%" y="389" width="0.0802%" height="15" fill="rgb(244,85,34)" fg:x="859" fg:w="1"/><text x="69.1353%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8853%" y="373" width="0.0802%" height="15" fill="rgb(207,70,0)" fg:x="859" fg:w="1"/><text x="69.1353%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8853%" y="357" width="0.0802%" height="15" fill="rgb(223,129,7)" fg:x="859" fg:w="1"/><text x="69.1353%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9655%" y="373" width="0.0802%" height="15" fill="rgb(246,105,7)" fg:x="860" fg:w="1"/><text x="69.2155%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="68.9655%" y="405" width="0.1604%" height="15" fill="rgb(215,154,42)" fg:x="860" fg:w="2"/><text x="69.2155%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="68.9655%" y="389" width="0.1604%" height="15" fill="rgb(220,215,30)" fg:x="860" fg:w="2"/><text x="69.2155%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0457%" y="373" width="0.0802%" height="15" fill="rgb(228,81,51)" fg:x="861" fg:w="1"/><text x="69.2957%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0457%" y="357" width="0.0802%" height="15" fill="rgb(247,71,54)" fg:x="861" fg:w="1"/><text x="69.2957%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0457%" y="341" width="0.0802%" height="15" fill="rgb(234,176,34)" fg:x="861" fg:w="1"/><text x="69.2957%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="69.1259%" y="405" width="0.0802%" height="15" fill="rgb(241,103,54)" fg:x="862" fg:w="1"/><text x="69.3759%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.1259%" y="389" width="0.0802%" height="15" fill="rgb(228,22,34)" fg:x="862" fg:w="1"/><text x="69.3759%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1259%" y="373" width="0.0802%" height="15" fill="rgb(241,179,48)" fg:x="862" fg:w="1"/><text x="69.3759%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.2061%" y="357" width="0.1604%" height="15" fill="rgb(235,167,37)" fg:x="863" fg:w="2"/><text x="69.4561%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.2863%" y="341" width="0.0802%" height="15" fill="rgb(213,109,30)" fg:x="864" fg:w="1"/><text x="69.5363%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.2863%" y="325" width="0.0802%" height="15" fill="rgb(222,172,16)" fg:x="864" fg:w="1"/><text x="69.5363%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="69.3665%" y="357" width="0.1604%" height="15" fill="rgb(233,192,5)" fg:x="865" fg:w="2"/><text x="69.6165%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="69.3665%" y="341" width="0.1604%" height="15" fill="rgb(247,189,41)" fg:x="865" fg:w="2"/><text x="69.6165%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.4467%" y="325" width="0.0802%" height="15" fill="rgb(218,134,47)" fg:x="866" fg:w="1"/><text x="69.6967%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4467%" y="309" width="0.0802%" height="15" fill="rgb(216,29,3)" fg:x="866" fg:w="1"/><text x="69.6967%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4467%" y="293" width="0.0802%" height="15" fill="rgb(246,140,12)" fg:x="866" fg:w="1"/><text x="69.6967%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4467%" y="277" width="0.0802%" height="15" fill="rgb(230,136,11)" fg:x="866" fg:w="1"/><text x="69.6967%" y="287.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (31 samples, 2.49%)</title><rect x="67.2815%" y="469" width="2.4860%" height="15" fill="rgb(247,22,47)" fg:x="839" fg:w="31"/><text x="67.5315%" y="479.50">&lt;r..</text></g><g><title>kernel::model::EntityPtr::to_json_value (15 samples, 1.20%)</title><rect x="68.5646%" y="453" width="1.2029%" height="15" fill="rgb(218,84,22)" fg:x="855" fg:w="15"/><text x="68.8146%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (15 samples, 1.20%)</title><rect x="68.5646%" y="437" width="1.2029%" height="15" fill="rgb(216,87,39)" fg:x="855" fg:w="15"/><text x="68.8146%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.20%)</title><rect x="68.5646%" y="421" width="1.2029%" height="15" fill="rgb(221,178,8)" fg:x="855" fg:w="15"/><text x="68.8146%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="69.2061%" y="405" width="0.5613%" height="15" fill="rgb(230,42,11)" fg:x="863" fg:w="7"/><text x="69.4561%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (7 samples, 0.56%)</title><rect x="69.2061%" y="389" width="0.5613%" height="15" fill="rgb(237,229,4)" fg:x="863" fg:w="7"/><text x="69.4561%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="69.2061%" y="373" width="0.5613%" height="15" fill="rgb(222,31,33)" fg:x="863" fg:w="7"/><text x="69.4561%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="69.5269%" y="357" width="0.2406%" height="15" fill="rgb(210,17,39)" fg:x="867" fg:w="3"/><text x="69.7769%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6872%" y="341" width="0.0802%" height="15" fill="rgb(244,93,20)" fg:x="869" fg:w="1"/><text x="69.9372%" y="351.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (71 samples, 5.69%)</title><rect x="64.2342%" y="549" width="5.6937%" height="15" fill="rgb(210,40,47)" fg:x="801" fg:w="71"/><text x="64.4842%" y="559.50">&lt;plugin..</text></g><g><title>core::iter::adapters::try_process (67 samples, 5.37%)</title><rect x="64.5549%" y="533" width="5.3729%" height="15" fill="rgb(239,211,47)" fg:x="805" fg:w="67"/><text x="64.8049%" y="543.50">core::i..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (36 samples, 2.89%)</title><rect x="67.0409%" y="517" width="2.8869%" height="15" fill="rgb(251,223,49)" fg:x="836" fg:w="36"/><text x="67.2909%" y="527.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (35 samples, 2.81%)</title><rect x="67.1211%" y="501" width="2.8067%" height="15" fill="rgb(221,149,5)" fg:x="837" fg:w="35"/><text x="67.3711%" y="511.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (34 samples, 2.73%)</title><rect x="67.2013%" y="485" width="2.7265%" height="15" fill="rgb(219,224,51)" fg:x="838" fg:w="34"/><text x="67.4513%" y="495.50">pl..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (2 samples, 0.16%)</title><rect x="69.7674%" y="469" width="0.1604%" height="15" fill="rgb(223,7,8)" fg:x="870" fg:w="2"/><text x="70.0174%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (2 samples, 0.16%)</title><rect x="69.7674%" y="453" width="0.1604%" height="15" fill="rgb(241,217,22)" fg:x="870" fg:w="2"/><text x="70.0174%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="69.7674%" y="437" width="0.1604%" height="15" fill="rgb(248,209,0)" fg:x="870" fg:w="2"/><text x="70.0174%" y="447.50"></text></g><g><title>engine::perform::StandardPerformer::perform (724 samples, 58.06%)</title><rect x="12.0289%" y="613" width="58.0593%" height="15" fill="rgb(217,205,4)" fg:x="150" fg:w="724"/><text x="12.2789%" y="623.50">engine::perform::StandardPerformer::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (87 samples, 6.98%)</title><rect x="63.1115%" y="597" width="6.9767%" height="15" fill="rgb(228,124,39)" fg:x="787" fg:w="87"/><text x="63.3615%" y="607.50">kernel::p..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (87 samples, 6.98%)</title><rect x="63.1115%" y="581" width="6.9767%" height="15" fill="rgb(250,116,42)" fg:x="787" fg:w="87"/><text x="63.3615%" y="591.50">&lt;plugins_..</text></g><g><title>plugins_rpc::querying::have_surroundings (73 samples, 5.85%)</title><rect x="64.2342%" y="565" width="5.8540%" height="15" fill="rgb(223,202,9)" fg:x="801" fg:w="73"/><text x="64.4842%" y="575.50">plugins..</text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.9278%" y="549" width="0.1604%" height="15" fill="rgb(242,222,40)" fg:x="872" fg:w="2"/><text x="70.1778%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (876 samples, 70.25%)</title><rect x="0.0000%" y="693" width="70.2486%" height="15" fill="rgb(229,99,46)" fg:x="0" fg:w="876"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (876 samples, 70.25%)</title><rect x="0.0000%" y="677" width="70.2486%" height="15" fill="rgb(225,56,46)" fg:x="0" fg:w="876"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (876 samples, 70.25%)</title><rect x="0.0000%" y="661" width="70.2486%" height="15" fill="rgb(227,94,5)" fg:x="0" fg:w="876"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (728 samples, 58.38%)</title><rect x="11.8685%" y="645" width="58.3801%" height="15" fill="rgb(205,112,38)" fg:x="148" fg:w="728"/><text x="12.1185%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (728 samples, 58.38%)</title><rect x="11.8685%" y="629" width="58.3801%" height="15" fill="rgb(231,133,46)" fg:x="148" fg:w="728"/><text x="12.1185%" y="639.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>kernel::plugins::SessionPlugins::evaluate (2 samples, 0.16%)</title><rect x="70.0882%" y="613" width="0.1604%" height="15" fill="rgb(217,16,9)" fg:x="874" fg:w="2"/><text x="70.3382%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="70.0882%" y="597" width="0.1604%" height="15" fill="rgb(249,173,9)" fg:x="874" fg:w="2"/><text x="70.3382%" y="607.50"></text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="70.0882%" y="581" width="0.1604%" height="15" fill="rgb(205,163,53)" fg:x="874" fg:w="2"/><text x="70.3382%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.16%)</title><rect x="70.0882%" y="565" width="0.1604%" height="15" fill="rgb(217,54,41)" fg:x="874" fg:w="2"/><text x="70.3382%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (2 samples, 0.16%)</title><rect x="70.0882%" y="549" width="0.1604%" height="15" fill="rgb(228,216,12)" fg:x="874" fg:w="2"/><text x="70.3382%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="70.2486%" y="629" width="0.1604%" height="15" fill="rgb(244,228,15)" fg:x="876" fg:w="2"/><text x="70.4986%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.2486%" y="613" width="0.1604%" height="15" fill="rgb(221,176,53)" fg:x="876" fg:w="2"/><text x="70.4986%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5694%" y="517" width="0.0802%" height="15" fill="rgb(205,94,34)" fg:x="880" fg:w="1"/><text x="70.8194%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="70.2486%" y="645" width="0.4812%" height="15" fill="rgb(213,110,48)" fg:x="876" fg:w="6"/><text x="70.4986%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (4 samples, 0.32%)</title><rect x="70.4090%" y="629" width="0.3208%" height="15" fill="rgb(236,142,28)" fg:x="878" fg:w="4"/><text x="70.6590%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="70.4090%" y="613" width="0.3208%" height="15" fill="rgb(225,135,29)" fg:x="878" fg:w="4"/><text x="70.6590%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="70.4090%" y="597" width="0.3208%" height="15" fill="rgb(252,45,31)" fg:x="878" fg:w="4"/><text x="70.6590%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="70.4090%" y="581" width="0.3208%" height="15" fill="rgb(211,187,50)" fg:x="878" fg:w="4"/><text x="70.6590%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="70.4090%" y="565" width="0.3208%" height="15" fill="rgb(229,109,7)" fg:x="878" fg:w="4"/><text x="70.6590%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="70.4892%" y="549" width="0.2406%" height="15" fill="rgb(251,131,51)" fg:x="879" fg:w="3"/><text x="70.7392%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.5694%" y="533" width="0.1604%" height="15" fill="rgb(251,180,35)" fg:x="880" fg:w="2"/><text x="70.8194%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.6496%" y="517" width="0.0802%" height="15" fill="rgb(211,46,32)" fg:x="881" fg:w="1"/><text x="70.8996%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.6496%" y="501" width="0.0802%" height="15" fill="rgb(248,123,17)" fg:x="881" fg:w="1"/><text x="70.8996%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="70.8099%" y="565" width="0.0802%" height="15" fill="rgb(227,141,18)" fg:x="883" fg:w="1"/><text x="71.0599%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="70.8099%" y="549" width="0.0802%" height="15" fill="rgb(216,102,9)" fg:x="883" fg:w="1"/><text x="71.0599%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.8099%" y="533" width="0.0802%" height="15" fill="rgb(253,47,13)" fg:x="883" fg:w="1"/><text x="71.0599%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8099%" y="517" width="0.0802%" height="15" fill="rgb(226,93,23)" fg:x="883" fg:w="1"/><text x="71.0599%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.8099%" y="501" width="0.0802%" height="15" fill="rgb(247,104,17)" fg:x="883" fg:w="1"/><text x="71.0599%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8099%" y="485" width="0.0802%" height="15" fill="rgb(233,203,26)" fg:x="883" fg:w="1"/><text x="71.0599%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.8099%" y="469" width="0.0802%" height="15" fill="rgb(244,98,49)" fg:x="883" fg:w="1"/><text x="71.0599%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.8099%" y="453" width="0.0802%" height="15" fill="rgb(235,134,22)" fg:x="883" fg:w="1"/><text x="71.0599%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="70.8099%" y="613" width="0.1604%" height="15" fill="rgb(221,70,32)" fg:x="883" fg:w="2"/><text x="71.0599%" y="623.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="70.8099%" y="597" width="0.1604%" height="15" fill="rgb(238,15,50)" fg:x="883" fg:w="2"/><text x="71.0599%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="70.8099%" y="581" width="0.1604%" height="15" fill="rgb(215,221,48)" fg:x="883" fg:w="2"/><text x="71.0599%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.8901%" y="565" width="0.0802%" height="15" fill="rgb(236,73,3)" fg:x="884" fg:w="1"/><text x="71.1401%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.8901%" y="549" width="0.0802%" height="15" fill="rgb(250,107,11)" fg:x="884" fg:w="1"/><text x="71.1401%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8901%" y="533" width="0.0802%" height="15" fill="rgb(242,39,14)" fg:x="884" fg:w="1"/><text x="71.1401%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.8901%" y="517" width="0.0802%" height="15" fill="rgb(248,164,37)" fg:x="884" fg:w="1"/><text x="71.1401%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8901%" y="501" width="0.0802%" height="15" fill="rgb(217,60,12)" fg:x="884" fg:w="1"/><text x="71.1401%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.8901%" y="485" width="0.0802%" height="15" fill="rgb(240,125,29)" fg:x="884" fg:w="1"/><text x="71.1401%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8901%" y="469" width="0.0802%" height="15" fill="rgb(208,207,28)" fg:x="884" fg:w="1"/><text x="71.1401%" y="479.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (4 samples, 0.32%)</title><rect x="70.7298%" y="645" width="0.3208%" height="15" fill="rgb(209,159,27)" fg:x="882" fg:w="4"/><text x="70.9798%" y="655.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.32%)</title><rect x="70.7298%" y="629" width="0.3208%" height="15" fill="rgb(251,176,53)" fg:x="882" fg:w="4"/><text x="70.9798%" y="639.50"></text></g><g><title>engine::session::Session::initialize (1 samples, 0.08%)</title><rect x="70.9703%" y="613" width="0.0802%" height="15" fill="rgb(211,85,7)" fg:x="885" fg:w="1"/><text x="71.2203%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="70.9703%" y="597" width="0.0802%" height="15" fill="rgb(216,64,54)" fg:x="885" fg:w="1"/><text x="71.2203%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="70.9703%" y="581" width="0.0802%" height="15" fill="rgb(217,54,24)" fg:x="885" fg:w="1"/><text x="71.2203%" y="591.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.08%)</title><rect x="70.9703%" y="565" width="0.0802%" height="15" fill="rgb(208,206,53)" fg:x="885" fg:w="1"/><text x="71.2203%" y="575.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="70.9703%" y="549" width="0.0802%" height="15" fill="rgb(251,74,39)" fg:x="885" fg:w="1"/><text x="71.2203%" y="559.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="70.9703%" y="533" width="0.0802%" height="15" fill="rgb(226,47,5)" fg:x="885" fg:w="1"/><text x="71.2203%" y="543.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="70.9703%" y="517" width="0.0802%" height="15" fill="rgb(234,111,33)" fg:x="885" fg:w="1"/><text x="71.2203%" y="527.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="70.9703%" y="501" width="0.0802%" height="15" fill="rgb(251,14,10)" fg:x="885" fg:w="1"/><text x="71.2203%" y="511.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="70.9703%" y="485" width="0.0802%" height="15" fill="rgb(232,43,0)" fg:x="885" fg:w="1"/><text x="71.2203%" y="495.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0505%" y="629" width="0.0802%" height="15" fill="rgb(222,68,43)" fg:x="886" fg:w="1"/><text x="71.3005%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0505%" y="613" width="0.0802%" height="15" fill="rgb(217,24,23)" fg:x="886" fg:w="1"/><text x="71.3005%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0505%" y="597" width="0.0802%" height="15" fill="rgb(229,209,14)" fg:x="886" fg:w="1"/><text x="71.3005%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.0505%" y="581" width="0.0802%" height="15" fill="rgb(250,149,48)" fg:x="886" fg:w="1"/><text x="71.3005%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.0505%" y="565" width="0.0802%" height="15" fill="rgb(210,120,37)" fg:x="886" fg:w="1"/><text x="71.3005%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.0505%" y="549" width="0.0802%" height="15" fill="rgb(210,21,8)" fg:x="886" fg:w="1"/><text x="71.3005%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.0505%" y="533" width="0.0802%" height="15" fill="rgb(243,145,7)" fg:x="886" fg:w="1"/><text x="71.3005%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.0505%" y="517" width="0.0802%" height="15" fill="rgb(238,178,32)" fg:x="886" fg:w="1"/><text x="71.3005%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::entry::Entry&gt;&gt; (1 samples, 0.08%)</title><rect x="71.1307%" y="629" width="0.0802%" height="15" fill="rgb(222,4,10)" fg:x="887" fg:w="1"/><text x="71.3807%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="71.1307%" y="613" width="0.0802%" height="15" fill="rgb(239,7,37)" fg:x="887" fg:w="1"/><text x="71.3807%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="71.1307%" y="597" width="0.0802%" height="15" fill="rgb(215,31,37)" fg:x="887" fg:w="1"/><text x="71.3807%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1307%" y="581" width="0.0802%" height="15" fill="rgb(224,83,33)" fg:x="887" fg:w="1"/><text x="71.3807%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.2911%" y="533" width="0.0802%" height="15" fill="rgb(239,55,3)" fg:x="889" fg:w="1"/><text x="71.5411%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.2911%" y="517" width="0.0802%" height="15" fill="rgb(247,92,11)" fg:x="889" fg:w="1"/><text x="71.5411%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.2911%" y="501" width="0.0802%" height="15" fill="rgb(239,200,7)" fg:x="889" fg:w="1"/><text x="71.5411%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="71.2911%" y="485" width="0.0802%" height="15" fill="rgb(227,115,8)" fg:x="889" fg:w="1"/><text x="71.5411%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="71.2911%" y="565" width="0.3208%" height="15" fill="rgb(215,189,27)" fg:x="889" fg:w="4"/><text x="71.5411%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="71.2911%" y="549" width="0.3208%" height="15" fill="rgb(251,216,39)" fg:x="889" fg:w="4"/><text x="71.5411%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="71.3713%" y="533" width="0.2406%" height="15" fill="rgb(207,29,47)" fg:x="890" fg:w="3"/><text x="71.6213%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.4515%" y="517" width="0.1604%" height="15" fill="rgb(210,71,34)" fg:x="891" fg:w="2"/><text x="71.7015%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="71.4515%" y="501" width="0.1604%" height="15" fill="rgb(253,217,51)" fg:x="891" fg:w="2"/><text x="71.7015%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="71.4515%" y="485" width="0.1604%" height="15" fill="rgb(222,117,46)" fg:x="891" fg:w="2"/><text x="71.7015%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="71.4515%" y="469" width="0.1604%" height="15" fill="rgb(226,132,6)" fg:x="891" fg:w="2"/><text x="71.7015%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.6119%" y="565" width="0.1604%" height="15" fill="rgb(254,145,51)" fg:x="893" fg:w="2"/><text x="71.8619%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.6119%" y="549" width="0.1604%" height="15" fill="rgb(231,199,27)" fg:x="893" fg:w="2"/><text x="71.8619%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="71.6119%" y="533" width="0.1604%" height="15" fill="rgb(245,158,14)" fg:x="893" fg:w="2"/><text x="71.8619%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7723%" y="517" width="0.0802%" height="15" fill="rgb(240,113,14)" fg:x="895" fg:w="1"/><text x="72.0223%" y="527.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.72%)</title><rect x="71.2109%" y="629" width="0.7217%" height="15" fill="rgb(210,20,13)" fg:x="888" fg:w="9"/><text x="71.4609%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (9 samples, 0.72%)</title><rect x="71.2109%" y="613" width="0.7217%" height="15" fill="rgb(241,144,13)" fg:x="888" fg:w="9"/><text x="71.4609%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (9 samples, 0.72%)</title><rect x="71.2109%" y="597" width="0.7217%" height="15" fill="rgb(235,43,34)" fg:x="888" fg:w="9"/><text x="71.4609%" y="607.50"></text></g><g><title>engine::session::Session::check_for_changes (9 samples, 0.72%)</title><rect x="71.2109%" y="581" width="0.7217%" height="15" fill="rgb(208,36,20)" fg:x="888" fg:w="9"/><text x="71.4609%" y="591.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="71.7723%" y="565" width="0.1604%" height="15" fill="rgb(239,204,10)" fg:x="895" fg:w="2"/><text x="72.0223%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="71.7723%" y="549" width="0.1604%" height="15" fill="rgb(217,84,43)" fg:x="895" fg:w="2"/><text x="72.0223%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="71.7723%" y="533" width="0.1604%" height="15" fill="rgb(241,170,50)" fg:x="895" fg:w="2"/><text x="72.0223%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.8524%" y="517" width="0.0802%" height="15" fill="rgb(226,205,29)" fg:x="896" fg:w="1"/><text x="72.1024%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8524%" y="501" width="0.0802%" height="15" fill="rgb(233,113,1)" fg:x="896" fg:w="1"/><text x="72.1024%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Location&gt;&gt; (1 samples, 0.08%)</title><rect x="71.9326%" y="597" width="0.0802%" height="15" fill="rgb(253,98,13)" fg:x="897" fg:w="1"/><text x="72.1826%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="71.9326%" y="581" width="0.0802%" height="15" fill="rgb(211,115,12)" fg:x="897" fg:w="1"/><text x="72.1826%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9326%" y="565" width="0.0802%" height="15" fill="rgb(208,12,16)" fg:x="897" fg:w="1"/><text x="72.1826%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0128%" y="565" width="0.0802%" height="15" fill="rgb(237,193,54)" fg:x="898" fg:w="1"/><text x="72.2628%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0128%" y="549" width="0.0802%" height="15" fill="rgb(243,22,42)" fg:x="898" fg:w="1"/><text x="72.2628%" y="559.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="72.0128%" y="597" width="0.1604%" height="15" fill="rgb(233,151,36)" fg:x="898" fg:w="2"/><text x="72.2628%" y="607.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="72.0128%" y="581" width="0.1604%" height="15" fill="rgb(237,57,45)" fg:x="898" fg:w="2"/><text x="72.2628%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="72.0930%" y="565" width="0.0802%" height="15" fill="rgb(221,88,17)" fg:x="899" fg:w="1"/><text x="72.3430%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.0930%" y="549" width="0.0802%" height="15" fill="rgb(230,79,15)" fg:x="899" fg:w="1"/><text x="72.3430%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.0930%" y="533" width="0.0802%" height="15" fill="rgb(213,57,13)" fg:x="899" fg:w="1"/><text x="72.3430%" y="543.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="71.9326%" y="629" width="0.3208%" height="15" fill="rgb(222,116,39)" fg:x="897" fg:w="4"/><text x="72.1826%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="71.9326%" y="613" width="0.3208%" height="15" fill="rgb(245,107,2)" fg:x="897" fg:w="4"/><text x="72.1826%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="72.1732%" y="597" width="0.0802%" height="15" fill="rgb(238,1,10)" fg:x="900" fg:w="1"/><text x="72.4232%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="72.1732%" y="581" width="0.0802%" height="15" fill="rgb(249,4,48)" fg:x="900" fg:w="1"/><text x="72.4232%" y="591.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.1732%" y="565" width="0.0802%" height="15" fill="rgb(223,151,18)" fg:x="900" fg:w="1"/><text x="72.4232%" y="575.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="72.1732%" y="549" width="0.0802%" height="15" fill="rgb(227,65,43)" fg:x="900" fg:w="1"/><text x="72.4232%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.1732%" y="533" width="0.0802%" height="15" fill="rgb(218,40,45)" fg:x="900" fg:w="1"/><text x="72.4232%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="72.2534%" y="581" width="0.0802%" height="15" fill="rgb(252,121,31)" fg:x="901" fg:w="1"/><text x="72.5034%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.3336%" y="533" width="0.0802%" height="15" fill="rgb(219,158,43)" fg:x="902" fg:w="1"/><text x="72.5836%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.3336%" y="517" width="0.0802%" height="15" fill="rgb(231,162,42)" fg:x="902" fg:w="1"/><text x="72.5836%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.3336%" y="501" width="0.0802%" height="15" fill="rgb(217,179,25)" fg:x="902" fg:w="1"/><text x="72.5836%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.3336%" y="485" width="0.0802%" height="15" fill="rgb(206,212,31)" fg:x="902" fg:w="1"/><text x="72.5836%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.4138%" y="517" width="0.0802%" height="15" fill="rgb(235,144,12)" fg:x="903" fg:w="1"/><text x="72.6638%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.4138%" y="501" width="0.0802%" height="15" fill="rgb(213,51,10)" fg:x="903" fg:w="1"/><text x="72.6638%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.4138%" y="485" width="0.0802%" height="15" fill="rgb(231,145,14)" fg:x="903" fg:w="1"/><text x="72.6638%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="72.4138%" y="469" width="0.0802%" height="15" fill="rgb(235,15,28)" fg:x="903" fg:w="1"/><text x="72.6638%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.4940%" y="485" width="0.0802%" height="15" fill="rgb(237,206,10)" fg:x="904" fg:w="1"/><text x="72.7440%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.4940%" y="469" width="0.0802%" height="15" fill="rgb(236,227,27)" fg:x="904" fg:w="1"/><text x="72.7440%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.4940%" y="453" width="0.0802%" height="15" fill="rgb(246,83,35)" fg:x="904" fg:w="1"/><text x="72.7440%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.4940%" y="517" width="0.1604%" height="15" fill="rgb(220,136,24)" fg:x="904" fg:w="2"/><text x="72.7440%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.4940%" y="501" width="0.1604%" height="15" fill="rgb(217,3,25)" fg:x="904" fg:w="2"/><text x="72.7440%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5742%" y="485" width="0.0802%" height="15" fill="rgb(239,24,14)" fg:x="905" fg:w="1"/><text x="72.8242%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.5742%" y="469" width="0.0802%" height="15" fill="rgb(244,16,53)" fg:x="905" fg:w="1"/><text x="72.8242%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="72.3336%" y="549" width="0.4010%" height="15" fill="rgb(208,175,44)" fg:x="902" fg:w="5"/><text x="72.5836%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="72.4138%" y="533" width="0.3208%" height="15" fill="rgb(252,18,48)" fg:x="903" fg:w="4"/><text x="72.6638%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.6544%" y="517" width="0.0802%" height="15" fill="rgb(234,199,32)" fg:x="906" fg:w="1"/><text x="72.9044%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.7346%" y="517" width="0.0802%" height="15" fill="rgb(225,77,54)" fg:x="907" fg:w="1"/><text x="72.9846%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.7346%" y="501" width="0.0802%" height="15" fill="rgb(225,42,25)" fg:x="907" fg:w="1"/><text x="72.9846%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.7346%" y="549" width="0.1604%" height="15" fill="rgb(242,227,46)" fg:x="907" fg:w="2"/><text x="72.9846%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="72.7346%" y="533" width="0.1604%" height="15" fill="rgb(246,197,35)" fg:x="907" fg:w="2"/><text x="72.9846%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8148%" y="517" width="0.0802%" height="15" fill="rgb(215,159,26)" fg:x="908" fg:w="1"/><text x="73.0648%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8148%" y="501" width="0.0802%" height="15" fill="rgb(212,194,50)" fg:x="908" fg:w="1"/><text x="73.0648%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8148%" y="485" width="0.0802%" height="15" fill="rgb(246,132,1)" fg:x="908" fg:w="1"/><text x="73.0648%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8148%" y="469" width="0.0802%" height="15" fill="rgb(217,71,7)" fg:x="908" fg:w="1"/><text x="73.0648%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="72.8949%" y="501" width="0.0802%" height="15" fill="rgb(252,59,32)" fg:x="909" fg:w="1"/><text x="73.1449%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.8949%" y="485" width="0.0802%" height="15" fill="rgb(253,204,25)" fg:x="909" fg:w="1"/><text x="73.1449%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.8949%" y="469" width="0.0802%" height="15" fill="rgb(232,21,16)" fg:x="909" fg:w="1"/><text x="73.1449%" y="479.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.80%)</title><rect x="72.2534%" y="613" width="0.8019%" height="15" fill="rgb(248,90,29)" fg:x="901" fg:w="10"/><text x="72.5034%" y="623.50"></text></g><g><title>engine::session::Session::save_entity_changes (10 samples, 0.80%)</title><rect x="72.2534%" y="597" width="0.8019%" height="15" fill="rgb(249,223,7)" fg:x="901" fg:w="10"/><text x="72.5034%" y="607.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (9 samples, 0.72%)</title><rect x="72.3336%" y="581" width="0.7217%" height="15" fill="rgb(231,119,42)" fg:x="902" fg:w="9"/><text x="72.5836%" y="591.50"></text></g><g><title>engine::session::Session::check_for_changes (9 samples, 0.72%)</title><rect x="72.3336%" y="565" width="0.7217%" height="15" fill="rgb(215,41,35)" fg:x="902" fg:w="9"/><text x="72.5836%" y="575.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="72.8949%" y="549" width="0.1604%" height="15" fill="rgb(220,44,45)" fg:x="909" fg:w="2"/><text x="73.1449%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="72.8949%" y="533" width="0.1604%" height="15" fill="rgb(253,197,36)" fg:x="909" fg:w="2"/><text x="73.1449%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="72.8949%" y="517" width="0.1604%" height="15" fill="rgb(245,225,54)" fg:x="909" fg:w="2"/><text x="73.1449%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.9751%" y="501" width="0.0802%" height="15" fill="rgb(239,94,37)" fg:x="910" fg:w="1"/><text x="73.2251%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9751%" y="485" width="0.0802%" height="15" fill="rgb(242,217,10)" fg:x="910" fg:w="1"/><text x="73.2251%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="72.9751%" y="469" width="0.0802%" height="15" fill="rgb(250,193,7)" fg:x="910" fg:w="1"/><text x="73.2251%" y="479.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="73.0553%" y="613" width="0.0802%" height="15" fill="rgb(230,104,19)" fg:x="911" fg:w="1"/><text x="73.3053%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.0553%" y="597" width="0.0802%" height="15" fill="rgb(230,181,4)" fg:x="911" fg:w="1"/><text x="73.3053%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.0553%" y="581" width="0.0802%" height="15" fill="rgb(216,219,49)" fg:x="911" fg:w="1"/><text x="73.3053%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.0553%" y="565" width="0.0802%" height="15" fill="rgb(254,144,0)" fg:x="911" fg:w="1"/><text x="73.3053%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0553%" y="549" width="0.0802%" height="15" fill="rgb(205,209,38)" fg:x="911" fg:w="1"/><text x="73.3053%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0553%" y="533" width="0.0802%" height="15" fill="rgb(240,21,42)" fg:x="911" fg:w="1"/><text x="73.3053%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.0553%" y="517" width="0.0802%" height="15" fill="rgb(241,132,3)" fg:x="911" fg:w="1"/><text x="73.3053%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0553%" y="501" width="0.0802%" height="15" fill="rgb(225,14,2)" fg:x="911" fg:w="1"/><text x="73.3053%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (28 samples, 2.25%)</title><rect x="71.0505%" y="645" width="2.2454%" height="15" fill="rgb(210,141,35)" fg:x="886" fg:w="28"/><text x="71.3005%" y="655.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::build (13 samples, 1.04%)</title><rect x="72.2534%" y="629" width="1.0425%" height="15" fill="rgb(251,14,44)" fg:x="901" fg:w="13"/><text x="72.5034%" y="639.50"></text></g><g><title>plugins_core::build::Build::occupying (2 samples, 0.16%)</title><rect x="73.1355%" y="613" width="0.1604%" height="15" fill="rgb(247,48,18)" fg:x="912" fg:w="2"/><text x="73.3855%" y="623.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="73.1355%" y="597" width="0.1604%" height="15" fill="rgb(225,0,40)" fg:x="912" fg:w="2"/><text x="73.3855%" y="607.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="73.2157%" y="581" width="0.0802%" height="15" fill="rgb(221,31,33)" fg:x="913" fg:w="1"/><text x="73.4657%" y="591.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="73.2157%" y="565" width="0.0802%" height="15" fill="rgb(237,42,40)" fg:x="913" fg:w="1"/><text x="73.4657%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2157%" y="549" width="0.0802%" height="15" fill="rgb(233,51,29)" fg:x="913" fg:w="1"/><text x="73.4657%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.2157%" y="533" width="0.0802%" height="15" fill="rgb(226,58,20)" fg:x="913" fg:w="1"/><text x="73.4657%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.2157%" y="517" width="0.0802%" height="15" fill="rgb(208,98,7)" fg:x="913" fg:w="1"/><text x="73.4657%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2157%" y="501" width="0.0802%" height="15" fill="rgb(228,143,44)" fg:x="913" fg:w="1"/><text x="73.4657%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.2157%" y="485" width="0.0802%" height="15" fill="rgb(246,55,38)" fg:x="913" fg:w="1"/><text x="73.4657%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2157%" y="469" width="0.0802%" height="15" fill="rgb(247,87,16)" fg:x="913" fg:w="1"/><text x="73.4657%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2157%" y="453" width="0.0802%" height="15" fill="rgb(234,129,42)" fg:x="913" fg:w="1"/><text x="73.4657%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2157%" y="437" width="0.0802%" height="15" fill="rgb(220,82,16)" fg:x="913" fg:w="1"/><text x="73.4657%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="73.2959%" y="645" width="0.0802%" height="15" fill="rgb(211,88,4)" fg:x="914" fg:w="1"/><text x="73.5459%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="73.2959%" y="629" width="0.0802%" height="15" fill="rgb(248,151,21)" fg:x="914" fg:w="1"/><text x="73.5459%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2959%" y="613" width="0.0802%" height="15" fill="rgb(238,163,6)" fg:x="914" fg:w="1"/><text x="73.5459%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.3761%" y="613" width="0.0802%" height="15" fill="rgb(209,183,11)" fg:x="915" fg:w="1"/><text x="73.6261%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4563%" y="597" width="0.0802%" height="15" fill="rgb(219,37,20)" fg:x="916" fg:w="1"/><text x="73.7063%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="73.4563%" y="613" width="0.1604%" height="15" fill="rgb(210,158,4)" fg:x="916" fg:w="2"/><text x="73.7063%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5365%" y="597" width="0.0802%" height="15" fill="rgb(221,167,53)" fg:x="917" fg:w="1"/><text x="73.7865%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5365%" y="581" width="0.0802%" height="15" fill="rgb(237,151,45)" fg:x="917" fg:w="1"/><text x="73.7865%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6969%" y="549" width="0.0802%" height="15" fill="rgb(231,39,3)" fg:x="919" fg:w="1"/><text x="73.9469%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.6969%" y="533" width="0.0802%" height="15" fill="rgb(212,167,28)" fg:x="919" fg:w="1"/><text x="73.9469%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="73.6167%" y="581" width="0.2406%" height="15" fill="rgb(232,178,8)" fg:x="918" fg:w="3"/><text x="73.8667%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.6969%" y="565" width="0.1604%" height="15" fill="rgb(225,151,20)" fg:x="919" fg:w="2"/><text x="73.9469%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.7771%" y="549" width="0.0802%" height="15" fill="rgb(238,3,37)" fg:x="920" fg:w="1"/><text x="74.0271%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.8573%" y="581" width="0.0802%" height="15" fill="rgb(251,147,42)" fg:x="921" fg:w="1"/><text x="74.1073%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.8573%" y="565" width="0.0802%" height="15" fill="rgb(208,173,10)" fg:x="921" fg:w="1"/><text x="74.1073%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.8573%" y="549" width="0.0802%" height="15" fill="rgb(246,225,4)" fg:x="921" fg:w="1"/><text x="74.1073%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8573%" y="533" width="0.0802%" height="15" fill="rgb(248,102,6)" fg:x="921" fg:w="1"/><text x="74.1073%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9374%" y="517" width="0.0802%" height="15" fill="rgb(232,6,21)" fg:x="922" fg:w="1"/><text x="74.1874%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9374%" y="501" width="0.0802%" height="15" fill="rgb(221,179,22)" fg:x="922" fg:w="1"/><text x="74.1874%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.0176%" y="501" width="0.0802%" height="15" fill="rgb(252,50,20)" fg:x="923" fg:w="1"/><text x="74.2676%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0176%" y="485" width="0.0802%" height="15" fill="rgb(222,56,38)" fg:x="923" fg:w="1"/><text x="74.2676%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.0978%" y="485" width="0.0802%" height="15" fill="rgb(206,193,29)" fg:x="924" fg:w="1"/><text x="74.3478%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="73.9374%" y="565" width="0.3208%" height="15" fill="rgb(239,192,45)" fg:x="922" fg:w="4"/><text x="74.1874%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="73.9374%" y="549" width="0.3208%" height="15" fill="rgb(254,18,36)" fg:x="922" fg:w="4"/><text x="74.1874%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="73.9374%" y="533" width="0.3208%" height="15" fill="rgb(221,127,11)" fg:x="922" fg:w="4"/><text x="74.1874%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.0176%" y="517" width="0.2406%" height="15" fill="rgb(234,146,35)" fg:x="923" fg:w="3"/><text x="74.2676%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.0978%" y="501" width="0.1604%" height="15" fill="rgb(254,201,37)" fg:x="924" fg:w="2"/><text x="74.3478%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1780%" y="485" width="0.0802%" height="15" fill="rgb(211,202,23)" fg:x="925" fg:w="1"/><text x="74.4280%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.1780%" y="469" width="0.0802%" height="15" fill="rgb(237,91,2)" fg:x="925" fg:w="1"/><text x="74.4280%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="74.3384%" y="533" width="0.0802%" height="15" fill="rgb(226,228,36)" fg:x="927" fg:w="1"/><text x="74.5884%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.3384%" y="517" width="0.0802%" height="15" fill="rgb(213,63,50)" fg:x="927" fg:w="1"/><text x="74.5884%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3384%" y="501" width="0.0802%" height="15" fill="rgb(235,194,19)" fg:x="927" fg:w="1"/><text x="74.5884%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3384%" y="485" width="0.0802%" height="15" fill="rgb(207,204,18)" fg:x="927" fg:w="1"/><text x="74.5884%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3384%" y="469" width="0.0802%" height="15" fill="rgb(248,8,7)" fg:x="927" fg:w="1"/><text x="74.5884%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="74.2582%" y="565" width="0.2406%" height="15" fill="rgb(223,145,47)" fg:x="926" fg:w="3"/><text x="74.5082%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="74.2582%" y="549" width="0.2406%" height="15" fill="rgb(228,84,11)" fg:x="926" fg:w="3"/><text x="74.5082%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="74.4186%" y="533" width="0.0802%" height="15" fill="rgb(218,76,45)" fg:x="928" fg:w="1"/><text x="74.6686%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.4186%" y="517" width="0.0802%" height="15" fill="rgb(223,80,15)" fg:x="928" fg:w="1"/><text x="74.6686%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.4988%" y="501" width="0.0802%" height="15" fill="rgb(219,218,33)" fg:x="929" fg:w="1"/><text x="74.7488%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.4988%" y="485" width="0.0802%" height="15" fill="rgb(208,51,11)" fg:x="929" fg:w="1"/><text x="74.7488%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.4988%" y="469" width="0.0802%" height="15" fill="rgb(229,165,39)" fg:x="929" fg:w="1"/><text x="74.7488%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.4988%" y="453" width="0.0802%" height="15" fill="rgb(241,100,24)" fg:x="929" fg:w="1"/><text x="74.7488%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.4988%" y="437" width="0.0802%" height="15" fill="rgb(228,14,23)" fg:x="929" fg:w="1"/><text x="74.7488%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.4988%" y="421" width="0.0802%" height="15" fill="rgb(247,116,52)" fg:x="929" fg:w="1"/><text x="74.7488%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4988%" y="405" width="0.0802%" height="15" fill="rgb(216,149,33)" fg:x="929" fg:w="1"/><text x="74.7488%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4988%" y="389" width="0.0802%" height="15" fill="rgb(238,142,29)" fg:x="929" fg:w="1"/><text x="74.7488%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4988%" y="373" width="0.0802%" height="15" fill="rgb(224,83,40)" fg:x="929" fg:w="1"/><text x="74.7488%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="74.4988%" y="565" width="0.1604%" height="15" fill="rgb(234,165,11)" fg:x="929" fg:w="2"/><text x="74.7488%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="74.4988%" y="549" width="0.1604%" height="15" fill="rgb(215,96,23)" fg:x="929" fg:w="2"/><text x="74.7488%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.4988%" y="533" width="0.1604%" height="15" fill="rgb(233,179,26)" fg:x="929" fg:w="2"/><text x="74.7488%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.4988%" y="517" width="0.1604%" height="15" fill="rgb(225,129,33)" fg:x="929" fg:w="2"/><text x="74.7488%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.5790%" y="501" width="0.0802%" height="15" fill="rgb(237,49,13)" fg:x="930" fg:w="1"/><text x="74.8290%" y="511.50"></text></g><g><title>engine::session::Session::close (17 samples, 1.36%)</title><rect x="73.3761%" y="645" width="1.3633%" height="15" fill="rgb(211,3,31)" fg:x="915" fg:w="17"/><text x="73.6261%" y="655.50"></text></g><g><title>engine::session::Session::save_entity_changes (17 samples, 1.36%)</title><rect x="73.3761%" y="629" width="1.3633%" height="15" fill="rgb(216,152,19)" fg:x="915" fg:w="17"/><text x="73.6261%" y="639.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (14 samples, 1.12%)</title><rect x="73.6167%" y="613" width="1.1227%" height="15" fill="rgb(251,121,35)" fg:x="918" fg:w="14"/><text x="73.8667%" y="623.50"></text></g><g><title>engine::session::Session::check_for_changes (14 samples, 1.12%)</title><rect x="73.6167%" y="597" width="1.1227%" height="15" fill="rgb(210,217,47)" fg:x="918" fg:w="14"/><text x="73.8667%" y="607.50"></text></g><g><title>kernel::compare::any_entity_changes (10 samples, 0.80%)</title><rect x="73.9374%" y="581" width="0.8019%" height="15" fill="rgb(244,116,22)" fg:x="922" fg:w="10"/><text x="74.1874%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="74.6592%" y="565" width="0.0802%" height="15" fill="rgb(228,17,21)" fg:x="931" fg:w="1"/><text x="74.9092%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.6592%" y="549" width="0.0802%" height="15" fill="rgb(240,149,34)" fg:x="931" fg:w="1"/><text x="74.9092%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.6592%" y="533" width="0.0802%" height="15" fill="rgb(208,125,47)" fg:x="931" fg:w="1"/><text x="74.9092%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="74.6592%" y="517" width="0.0802%" height="15" fill="rgb(249,186,39)" fg:x="931" fg:w="1"/><text x="74.9092%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="74.7394%" y="597" width="0.0802%" height="15" fill="rgb(240,220,33)" fg:x="932" fg:w="1"/><text x="74.9894%" y="607.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="74.7394%" y="581" width="0.0802%" height="15" fill="rgb(243,110,23)" fg:x="932" fg:w="1"/><text x="74.9894%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="74.7394%" y="565" width="0.0802%" height="15" fill="rgb(219,163,46)" fg:x="932" fg:w="1"/><text x="74.9894%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="74.7394%" y="549" width="0.0802%" height="15" fill="rgb(216,126,30)" fg:x="932" fg:w="1"/><text x="74.9894%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="74.7394%" y="533" width="0.0802%" height="15" fill="rgb(208,139,11)" fg:x="932" fg:w="1"/><text x="74.9894%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.7394%" y="517" width="0.0802%" height="15" fill="rgb(213,118,36)" fg:x="932" fg:w="1"/><text x="74.9894%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7394%" y="501" width="0.0802%" height="15" fill="rgb(226,43,17)" fg:x="932" fg:w="1"/><text x="74.9894%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.7394%" y="485" width="0.0802%" height="15" fill="rgb(254,217,4)" fg:x="932" fg:w="1"/><text x="74.9894%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7394%" y="469" width="0.0802%" height="15" fill="rgb(210,134,47)" fg:x="932" fg:w="1"/><text x="74.9894%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.7394%" y="453" width="0.0802%" height="15" fill="rgb(237,24,49)" fg:x="932" fg:w="1"/><text x="74.9894%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.7394%" y="437" width="0.0802%" height="15" fill="rgb(251,39,46)" fg:x="932" fg:w="1"/><text x="74.9894%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.7394%" y="421" width="0.0802%" height="15" fill="rgb(251,220,3)" fg:x="932" fg:w="1"/><text x="74.9894%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="74.7394%" y="405" width="0.0802%" height="15" fill="rgb(228,105,12)" fg:x="932" fg:w="1"/><text x="74.9894%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.7394%" y="389" width="0.0802%" height="15" fill="rgb(215,196,1)" fg:x="932" fg:w="1"/><text x="74.9894%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.7394%" y="373" width="0.0802%" height="15" fill="rgb(214,33,39)" fg:x="932" fg:w="1"/><text x="74.9894%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.7394%" y="357" width="0.0802%" height="15" fill="rgb(220,19,52)" fg:x="932" fg:w="1"/><text x="74.9894%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="74.7394%" y="341" width="0.0802%" height="15" fill="rgb(221,78,38)" fg:x="932" fg:w="1"/><text x="74.9894%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.7394%" y="325" width="0.0802%" height="15" fill="rgb(253,30,16)" fg:x="932" fg:w="1"/><text x="74.9894%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7394%" y="309" width="0.0802%" height="15" fill="rgb(242,65,0)" fg:x="932" fg:w="1"/><text x="74.9894%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::DomainError&gt; (1 samples, 0.08%)</title><rect x="74.8196%" y="597" width="0.0802%" height="15" fill="rgb(235,201,12)" fg:x="933" fg:w="1"/><text x="75.0696%" y="607.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.24%)</title><rect x="74.7394%" y="613" width="0.2406%" height="15" fill="rgb(233,161,9)" fg:x="932" fg:w="3"/><text x="74.9894%" y="623.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="74.8998%" y="597" width="0.0802%" height="15" fill="rgb(241,207,41)" fg:x="934" fg:w="1"/><text x="75.1498%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="74.8998%" y="581" width="0.0802%" height="15" fill="rgb(212,69,46)" fg:x="934" fg:w="1"/><text x="75.1498%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="74.8998%" y="565" width="0.0802%" height="15" fill="rgb(239,69,45)" fg:x="934" fg:w="1"/><text x="75.1498%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8998%" y="549" width="0.0802%" height="15" fill="rgb(242,117,48)" fg:x="934" fg:w="1"/><text x="75.1498%" y="559.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.8998%" y="533" width="0.0802%" height="15" fill="rgb(228,41,36)" fg:x="934" fg:w="1"/><text x="75.1498%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.8998%" y="517" width="0.0802%" height="15" fill="rgb(212,3,32)" fg:x="934" fg:w="1"/><text x="75.1498%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.8998%" y="501" width="0.0802%" height="15" fill="rgb(233,41,49)" fg:x="934" fg:w="1"/><text x="75.1498%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::name (1 samples, 0.08%)</title><rect x="74.9800%" y="549" width="0.0802%" height="15" fill="rgb(252,170,49)" fg:x="935" fg:w="1"/><text x="75.2300%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.9800%" y="533" width="0.0802%" height="15" fill="rgb(229,53,26)" fg:x="935" fg:w="1"/><text x="75.2300%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.9800%" y="517" width="0.0802%" height="15" fill="rgb(217,157,12)" fg:x="935" fg:w="1"/><text x="75.2300%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.9800%" y="501" width="0.0802%" height="15" fill="rgb(227,17,9)" fg:x="935" fg:w="1"/><text x="75.2300%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.9800%" y="485" width="0.0802%" height="15" fill="rgb(218,84,12)" fg:x="935" fg:w="1"/><text x="75.2300%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.9800%" y="469" width="0.0802%" height="15" fill="rgb(212,79,24)" fg:x="935" fg:w="1"/><text x="75.2300%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.9800%" y="453" width="0.0802%" height="15" fill="rgb(217,222,37)" fg:x="935" fg:w="1"/><text x="75.2300%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.9800%" y="437" width="0.0802%" height="15" fill="rgb(246,208,8)" fg:x="935" fg:w="1"/><text x="75.2300%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.9800%" y="421" width="0.0802%" height="15" fill="rgb(244,133,10)" fg:x="935" fg:w="1"/><text x="75.2300%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.9800%" y="405" width="0.0802%" height="15" fill="rgb(209,219,41)" fg:x="935" fg:w="1"/><text x="75.2300%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.9800%" y="389" width="0.0802%" height="15" fill="rgb(253,175,45)" fg:x="935" fg:w="1"/><text x="75.2300%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.9800%" y="373" width="0.0802%" height="15" fill="rgb(235,100,37)" fg:x="935" fg:w="1"/><text x="75.2300%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0601%" y="437" width="0.0802%" height="15" fill="rgb(225,87,19)" fg:x="936" fg:w="1"/><text x="75.3101%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0601%" y="421" width="0.0802%" height="15" fill="rgb(217,152,17)" fg:x="936" fg:w="1"/><text x="75.3101%" y="431.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.0601%" y="405" width="0.0802%" height="15" fill="rgb(235,72,13)" fg:x="936" fg:w="1"/><text x="75.3101%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.0601%" y="389" width="0.0802%" height="15" fill="rgb(233,140,18)" fg:x="936" fg:w="1"/><text x="75.3101%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.0601%" y="373" width="0.0802%" height="15" fill="rgb(207,212,28)" fg:x="936" fg:w="1"/><text x="75.3101%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.0601%" y="357" width="0.0802%" height="15" fill="rgb(220,130,25)" fg:x="936" fg:w="1"/><text x="75.3101%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.0601%" y="341" width="0.0802%" height="15" fill="rgb(205,55,34)" fg:x="936" fg:w="1"/><text x="75.3101%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.0601%" y="325" width="0.0802%" height="15" fill="rgb(237,54,35)" fg:x="936" fg:w="1"/><text x="75.3101%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.0601%" y="309" width="0.0802%" height="15" fill="rgb(208,67,23)" fg:x="936" fg:w="1"/><text x="75.3101%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="75.0601%" y="293" width="0.0802%" height="15" fill="rgb(206,207,50)" fg:x="936" fg:w="1"/><text x="75.3101%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.0601%" y="277" width="0.0802%" height="15" fill="rgb(213,211,42)" fg:x="936" fg:w="1"/><text x="75.3101%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0601%" y="261" width="0.0802%" height="15" fill="rgb(252,197,50)" fg:x="936" fg:w="1"/><text x="75.3101%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="75.0601%" y="501" width="0.1604%" height="15" fill="rgb(251,211,41)" fg:x="936" fg:w="2"/><text x="75.3101%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="75.0601%" y="485" width="0.1604%" height="15" fill="rgb(229,211,5)" fg:x="936" fg:w="2"/><text x="75.3101%" y="495.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="75.0601%" y="469" width="0.1604%" height="15" fill="rgb(239,36,31)" fg:x="936" fg:w="2"/><text x="75.3101%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="75.0601%" y="453" width="0.1604%" height="15" fill="rgb(248,67,31)" fg:x="936" fg:w="2"/><text x="75.3101%" y="463.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.1403%" y="437" width="0.0802%" height="15" fill="rgb(249,55,44)" fg:x="937" fg:w="1"/><text x="75.3903%" y="447.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="75.2205%" y="485" width="0.0802%" height="15" fill="rgb(216,82,12)" fg:x="938" fg:w="1"/><text x="75.4705%" y="495.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="75.2205%" y="469" width="0.0802%" height="15" fill="rgb(242,174,1)" fg:x="938" fg:w="1"/><text x="75.4705%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="75.3007%" y="389" width="0.0802%" height="15" fill="rgb(208,120,29)" fg:x="939" fg:w="1"/><text x="75.5507%" y="399.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="75.3007%" y="373" width="0.0802%" height="15" fill="rgb(221,105,43)" fg:x="939" fg:w="1"/><text x="75.5507%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.3809%" y="373" width="0.0802%" height="15" fill="rgb(234,124,22)" fg:x="940" fg:w="1"/><text x="75.6309%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.3809%" y="357" width="0.0802%" height="15" fill="rgb(212,23,30)" fg:x="940" fg:w="1"/><text x="75.6309%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3809%" y="341" width="0.0802%" height="15" fill="rgb(219,122,53)" fg:x="940" fg:w="1"/><text x="75.6309%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="75.3007%" y="405" width="0.2406%" height="15" fill="rgb(248,84,24)" fg:x="939" fg:w="3"/><text x="75.5507%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="75.3809%" y="389" width="0.1604%" height="15" fill="rgb(245,115,18)" fg:x="940" fg:w="2"/><text x="75.6309%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4611%" y="373" width="0.0802%" height="15" fill="rgb(227,176,51)" fg:x="941" fg:w="1"/><text x="75.7111%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.4611%" y="357" width="0.0802%" height="15" fill="rgb(229,63,42)" fg:x="941" fg:w="1"/><text x="75.7111%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="75.4611%" y="341" width="0.0802%" height="15" fill="rgb(247,202,24)" fg:x="941" fg:w="1"/><text x="75.7111%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="75.3007%" y="469" width="0.3208%" height="15" fill="rgb(244,173,20)" fg:x="939" fg:w="4"/><text x="75.5507%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="75.3007%" y="453" width="0.3208%" height="15" fill="rgb(242,81,47)" fg:x="939" fg:w="4"/><text x="75.5507%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="75.3007%" y="437" width="0.3208%" height="15" fill="rgb(231,185,54)" fg:x="939" fg:w="4"/><text x="75.5507%" y="447.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="75.3007%" y="421" width="0.3208%" height="15" fill="rgb(243,55,32)" fg:x="939" fg:w="4"/><text x="75.5507%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="75.5413%" y="405" width="0.0802%" height="15" fill="rgb(208,167,19)" fg:x="942" fg:w="1"/><text x="75.7913%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.64%)</title><rect x="75.8621%" y="405" width="0.6415%" height="15" fill="rgb(231,72,35)" fg:x="946" fg:w="8"/><text x="76.1121%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="75.8621%" y="389" width="0.6415%" height="15" fill="rgb(250,173,51)" fg:x="946" fg:w="8"/><text x="76.1121%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4234%" y="373" width="0.0802%" height="15" fill="rgb(209,5,22)" fg:x="953" fg:w="1"/><text x="76.6734%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="76.5036%" y="405" width="0.0802%" height="15" fill="rgb(250,174,19)" fg:x="954" fg:w="1"/><text x="76.7536%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="76.5036%" y="389" width="0.0802%" height="15" fill="rgb(217,3,49)" fg:x="954" fg:w="1"/><text x="76.7536%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="76.5036%" y="373" width="0.0802%" height="15" fill="rgb(218,225,5)" fg:x="954" fg:w="1"/><text x="76.7536%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.6640%" y="373" width="0.0802%" height="15" fill="rgb(236,89,11)" fg:x="956" fg:w="1"/><text x="76.9140%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.6640%" y="357" width="0.0802%" height="15" fill="rgb(206,33,28)" fg:x="956" fg:w="1"/><text x="76.9140%" y="367.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.8244%" y="341" width="0.0802%" height="15" fill="rgb(241,56,42)" fg:x="958" fg:w="1"/><text x="77.0744%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="76.9046%" y="341" width="0.1604%" height="15" fill="rgb(222,44,11)" fg:x="959" fg:w="2"/><text x="77.1546%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.05%)</title><rect x="77.0650%" y="341" width="3.0473%" height="15" fill="rgb(234,111,20)" fg:x="961" fg:w="38"/><text x="77.3150%" y="351.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (38 samples, 3.05%)</title><rect x="77.0650%" y="325" width="3.0473%" height="15" fill="rgb(237,77,6)" fg:x="961" fg:w="38"/><text x="77.3150%" y="335.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 3.05%)</title><rect x="77.0650%" y="309" width="3.0473%" height="15" fill="rgb(235,111,23)" fg:x="961" fg:w="38"/><text x="77.3150%" y="319.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="80.1123%" y="341" width="0.0802%" height="15" fill="rgb(251,135,29)" fg:x="999" fg:w="1"/><text x="80.3623%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 3.61%)</title><rect x="76.6640%" y="389" width="3.6087%" height="15" fill="rgb(217,57,1)" fg:x="956" fg:w="45"/><text x="76.9140%" y="399.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (44 samples, 3.53%)</title><rect x="76.7442%" y="373" width="3.5285%" height="15" fill="rgb(249,119,31)" fg:x="957" fg:w="44"/><text x="76.9942%" y="383.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (44 samples, 3.53%)</title><rect x="76.7442%" y="357" width="3.5285%" height="15" fill="rgb(233,164,33)" fg:x="957" fg:w="44"/><text x="76.9942%" y="367.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="80.1925%" y="341" width="0.0802%" height="15" fill="rgb(250,217,43)" fg:x="1000" fg:w="1"/><text x="80.4425%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.1925%" y="325" width="0.0802%" height="15" fill="rgb(232,154,50)" fg:x="1000" fg:w="1"/><text x="80.4425%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.1925%" y="309" width="0.0802%" height="15" fill="rgb(227,190,8)" fg:x="1000" fg:w="1"/><text x="80.4425%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="80.1925%" y="293" width="0.0802%" height="15" fill="rgb(209,217,32)" fg:x="1000" fg:w="1"/><text x="80.4425%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="80.1925%" y="277" width="0.0802%" height="15" fill="rgb(243,203,50)" fg:x="1000" fg:w="1"/><text x="80.4425%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="80.3528%" y="373" width="0.2406%" height="15" fill="rgb(232,152,27)" fg:x="1002" fg:w="3"/><text x="80.6028%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.5132%" y="357" width="0.0802%" height="15" fill="rgb(240,34,29)" fg:x="1004" fg:w="1"/><text x="80.7632%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.5132%" y="341" width="0.0802%" height="15" fill="rgb(215,185,52)" fg:x="1004" fg:w="1"/><text x="80.7632%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.5132%" y="325" width="0.0802%" height="15" fill="rgb(240,89,49)" fg:x="1004" fg:w="1"/><text x="80.7632%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="80.2727%" y="389" width="0.4010%" height="15" fill="rgb(225,12,52)" fg:x="1001" fg:w="5"/><text x="80.5227%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="80.5934%" y="373" width="0.0802%" height="15" fill="rgb(239,128,45)" fg:x="1005" fg:w="1"/><text x="80.8434%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.6736%" y="373" width="0.0802%" height="15" fill="rgb(211,78,47)" fg:x="1006" fg:w="1"/><text x="80.9236%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (64 samples, 5.13%)</title><rect x="75.7017%" y="421" width="5.1323%" height="15" fill="rgb(232,31,21)" fg:x="944" fg:w="64"/><text x="75.9517%" y="431.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (53 samples, 4.25%)</title><rect x="76.5838%" y="405" width="4.2502%" height="15" fill="rgb(222,168,14)" fg:x="955" fg:w="53"/><text x="76.8338%" y="415.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="80.6736%" y="389" width="0.1604%" height="15" fill="rgb(209,128,24)" fg:x="1006" fg:w="2"/><text x="80.9236%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="80.7538%" y="373" width="0.0802%" height="15" fill="rgb(249,35,13)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="80.7538%" y="357" width="0.0802%" height="15" fill="rgb(218,7,2)" fg:x="1007" fg:w="1"/><text x="81.0038%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="80.8340%" y="389" width="0.1604%" height="15" fill="rgb(238,107,27)" fg:x="1008" fg:w="2"/><text x="81.0840%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="80.9142%" y="373" width="0.0802%" height="15" fill="rgb(217,88,38)" fg:x="1009" fg:w="1"/><text x="81.1642%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.9142%" y="357" width="0.0802%" height="15" fill="rgb(230,207,0)" fg:x="1009" fg:w="1"/><text x="81.1642%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.9142%" y="341" width="0.0802%" height="15" fill="rgb(249,64,54)" fg:x="1009" fg:w="1"/><text x="81.1642%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9142%" y="325" width="0.0802%" height="15" fill="rgb(231,7,11)" fg:x="1009" fg:w="1"/><text x="81.1642%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="80.9944%" y="389" width="0.0802%" height="15" fill="rgb(205,149,21)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.9944%" y="373" width="0.0802%" height="15" fill="rgb(215,126,34)" fg:x="1010" fg:w="1"/><text x="81.2444%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="80.8340%" y="421" width="0.3208%" height="15" fill="rgb(241,132,45)" fg:x="1008" fg:w="4"/><text x="81.0840%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="80.8340%" y="405" width="0.3208%" height="15" fill="rgb(252,69,32)" fg:x="1008" fg:w="4"/><text x="81.0840%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="81.0746%" y="389" width="0.0802%" height="15" fill="rgb(232,204,19)" fg:x="1011" fg:w="1"/><text x="81.3246%" y="399.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (71 samples, 5.69%)</title><rect x="75.6215%" y="469" width="5.6937%" height="15" fill="rgb(249,15,47)" fg:x="943" fg:w="71"/><text x="75.8715%" y="479.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (71 samples, 5.69%)</title><rect x="75.6215%" y="453" width="5.6937%" height="15" fill="rgb(209,227,23)" fg:x="943" fg:w="71"/><text x="75.8715%" y="463.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (71 samples, 5.69%)</title><rect x="75.6215%" y="437" width="5.6937%" height="15" fill="rgb(248,92,24)" fg:x="943" fg:w="71"/><text x="75.8715%" y="447.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="81.1548%" y="421" width="0.1604%" height="15" fill="rgb(247,59,2)" fg:x="1012" fg:w="2"/><text x="81.4048%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="81.1548%" y="405" width="0.1604%" height="15" fill="rgb(221,30,5)" fg:x="1012" fg:w="2"/><text x="81.4048%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="81.2350%" y="389" width="0.0802%" height="15" fill="rgb(208,108,53)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="399.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="81.2350%" y="373" width="0.0802%" height="15" fill="rgb(211,183,26)" fg:x="1013" fg:w="1"/><text x="81.4850%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.3152%" y="437" width="0.0802%" height="15" fill="rgb(232,132,4)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="81.3152%" y="421" width="0.0802%" height="15" fill="rgb(253,128,37)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.3152%" y="405" width="0.0802%" height="15" fill="rgb(221,58,24)" fg:x="1014" fg:w="1"/><text x="81.5652%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="81.3152%" y="469" width="0.1604%" height="15" fill="rgb(230,54,45)" fg:x="1014" fg:w="2"/><text x="81.5652%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="81.3152%" y="453" width="0.1604%" height="15" fill="rgb(254,21,18)" fg:x="1014" fg:w="2"/><text x="81.5652%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="81.3953%" y="437" width="0.0802%" height="15" fill="rgb(221,108,0)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.3953%" y="421" width="0.0802%" height="15" fill="rgb(206,95,1)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3953%" y="405" width="0.0802%" height="15" fill="rgb(237,52,5)" fg:x="1015" fg:w="1"/><text x="81.6453%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5557%" y="405" width="0.0802%" height="15" fill="rgb(218,150,34)" fg:x="1017" fg:w="1"/><text x="81.8057%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="81.7963%" y="389" width="0.1604%" height="15" fill="rgb(235,194,28)" fg:x="1020" fg:w="2"/><text x="82.0463%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="81.7963%" y="373" width="0.1604%" height="15" fill="rgb(245,92,18)" fg:x="1020" fg:w="2"/><text x="82.0463%" y="383.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="81.7963%" y="357" width="0.1604%" height="15" fill="rgb(253,203,53)" fg:x="1020" fg:w="2"/><text x="82.0463%" y="367.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (85 samples, 6.82%)</title><rect x="75.3007%" y="485" width="6.8164%" height="15" fill="rgb(249,185,47)" fg:x="939" fg:w="85"/><text x="75.5507%" y="495.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="81.4755%" y="469" width="0.6415%" height="15" fill="rgb(252,194,52)" fg:x="1016" fg:w="8"/><text x="81.7255%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="81.4755%" y="453" width="0.6415%" height="15" fill="rgb(210,53,36)" fg:x="1016" fg:w="8"/><text x="81.7255%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="81.4755%" y="437" width="0.6415%" height="15" fill="rgb(237,37,25)" fg:x="1016" fg:w="8"/><text x="81.7255%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="81.5557%" y="421" width="0.5613%" height="15" fill="rgb(242,116,27)" fg:x="1017" fg:w="7"/><text x="81.8057%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="81.6359%" y="405" width="0.4812%" height="15" fill="rgb(213,185,26)" fg:x="1018" fg:w="6"/><text x="81.8859%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="81.9567%" y="389" width="0.1604%" height="15" fill="rgb(225,204,8)" fg:x="1022" fg:w="2"/><text x="82.2067%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.1171%" y="421" width="0.0802%" height="15" fill="rgb(254,111,37)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.1171%" y="405" width="0.0802%" height="15" fill="rgb(242,35,9)" fg:x="1024" fg:w="1"/><text x="82.3671%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="82.1973%" y="421" width="0.1604%" height="15" fill="rgb(232,138,49)" fg:x="1025" fg:w="2"/><text x="82.4473%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="82.1973%" y="405" width="0.1604%" height="15" fill="rgb(247,56,4)" fg:x="1025" fg:w="2"/><text x="82.4473%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="82.2775%" y="389" width="0.0802%" height="15" fill="rgb(226,179,17)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="82.2775%" y="373" width="0.0802%" height="15" fill="rgb(216,163,45)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.2775%" y="357" width="0.0802%" height="15" fill="rgb(211,157,3)" fg:x="1026" fg:w="1"/><text x="82.5275%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="82.4379%" y="405" width="0.1604%" height="15" fill="rgb(234,44,20)" fg:x="1028" fg:w="2"/><text x="82.6879%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.5982%" y="405" width="0.0802%" height="15" fill="rgb(254,138,23)" fg:x="1030" fg:w="1"/><text x="82.8482%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="82.6784%" y="405" width="0.4812%" height="15" fill="rgb(206,119,39)" fg:x="1031" fg:w="6"/><text x="82.9284%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="82.6784%" y="389" width="0.4812%" height="15" fill="rgb(231,105,52)" fg:x="1031" fg:w="6"/><text x="82.9284%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="83.1596%" y="405" width="0.3208%" height="15" fill="rgb(250,20,5)" fg:x="1037" fg:w="4"/><text x="83.4096%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="83.1596%" y="389" width="0.3208%" height="15" fill="rgb(215,198,30)" fg:x="1037" fg:w="4"/><text x="83.4096%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="83.4002%" y="373" width="0.0802%" height="15" fill="rgb(246,142,8)" fg:x="1040" fg:w="1"/><text x="83.6502%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.4002%" y="357" width="0.0802%" height="15" fill="rgb(243,26,38)" fg:x="1040" fg:w="1"/><text x="83.6502%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.4002%" y="341" width="0.0802%" height="15" fill="rgb(205,133,28)" fg:x="1040" fg:w="1"/><text x="83.6502%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.4002%" y="325" width="0.0802%" height="15" fill="rgb(212,34,0)" fg:x="1040" fg:w="1"/><text x="83.6502%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.5605%" y="373" width="0.0802%" height="15" fill="rgb(251,226,22)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.5605%" y="357" width="0.0802%" height="15" fill="rgb(252,119,9)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5605%" y="341" width="0.0802%" height="15" fill="rgb(213,150,50)" fg:x="1042" fg:w="1"/><text x="83.8105%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="83.6407%" y="373" width="0.1604%" height="15" fill="rgb(212,24,39)" fg:x="1043" fg:w="2"/><text x="83.8907%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="83.6407%" y="357" width="0.1604%" height="15" fill="rgb(213,46,39)" fg:x="1043" fg:w="2"/><text x="83.8907%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.6407%" y="341" width="0.1604%" height="15" fill="rgb(239,106,12)" fg:x="1043" fg:w="2"/><text x="83.8907%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="83.6407%" y="325" width="0.1604%" height="15" fill="rgb(249,229,21)" fg:x="1043" fg:w="2"/><text x="83.8907%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="83.8011%" y="373" width="0.4812%" height="15" fill="rgb(212,158,3)" fg:x="1045" fg:w="6"/><text x="84.0511%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="84.0417%" y="357" width="0.2406%" height="15" fill="rgb(253,26,48)" fg:x="1048" fg:w="3"/><text x="84.2917%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.2021%" y="341" width="0.0802%" height="15" fill="rgb(238,178,20)" fg:x="1050" fg:w="1"/><text x="84.4521%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.2021%" y="325" width="0.0802%" height="15" fill="rgb(208,86,15)" fg:x="1050" fg:w="1"/><text x="84.4521%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.2021%" y="309" width="0.0802%" height="15" fill="rgb(239,42,53)" fg:x="1050" fg:w="1"/><text x="84.4521%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (11 samples, 0.88%)</title><rect x="83.4804%" y="405" width="0.8821%" height="15" fill="rgb(245,226,8)" fg:x="1041" fg:w="11"/><text x="83.7304%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.88%)</title><rect x="83.4804%" y="389" width="0.8821%" height="15" fill="rgb(216,176,32)" fg:x="1041" fg:w="11"/><text x="83.7304%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="84.2823%" y="373" width="0.0802%" height="15" fill="rgb(231,186,21)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="383.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="84.2823%" y="357" width="0.0802%" height="15" fill="rgb(205,95,49)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="367.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="84.2823%" y="341" width="0.0802%" height="15" fill="rgb(217,145,8)" fg:x="1051" fg:w="1"/><text x="84.5323%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="84.4427%" y="325" width="0.0802%" height="15" fill="rgb(239,144,48)" fg:x="1053" fg:w="1"/><text x="84.6927%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="85.2446%" y="293" width="0.0802%" height="15" fill="rgb(214,189,23)" fg:x="1063" fg:w="1"/><text x="85.4946%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="85.3248%" y="293" width="0.2406%" height="15" fill="rgb(229,157,17)" fg:x="1064" fg:w="3"/><text x="85.5748%" y="303.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="85.5654%" y="293" width="0.2406%" height="15" fill="rgb(230,5,48)" fg:x="1067" fg:w="3"/><text x="85.8154%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.48%)</title><rect x="85.8059%" y="293" width="0.4812%" height="15" fill="rgb(224,156,48)" fg:x="1070" fg:w="6"/><text x="86.0559%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="86.1267%" y="277" width="0.1604%" height="15" fill="rgb(223,14,29)" fg:x="1074" fg:w="2"/><text x="86.3767%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.1267%" y="261" width="0.1604%" height="15" fill="rgb(229,96,36)" fg:x="1074" fg:w="2"/><text x="86.3767%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="86.1267%" y="245" width="0.1604%" height="15" fill="rgb(231,102,53)" fg:x="1074" fg:w="2"/><text x="86.3767%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="86.4475%" y="261" width="0.1604%" height="15" fill="rgb(210,77,38)" fg:x="1078" fg:w="2"/><text x="86.6975%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.4475%" y="245" width="0.1604%" height="15" fill="rgb(235,131,6)" fg:x="1078" fg:w="2"/><text x="86.6975%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5277%" y="229" width="0.0802%" height="15" fill="rgb(252,55,38)" fg:x="1079" fg:w="1"/><text x="86.7777%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.64%)</title><rect x="86.2871%" y="293" width="0.6415%" height="15" fill="rgb(246,38,14)" fg:x="1076" fg:w="8"/><text x="86.5371%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.64%)</title><rect x="86.2871%" y="277" width="0.6415%" height="15" fill="rgb(242,27,5)" fg:x="1076" fg:w="8"/><text x="86.5371%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="86.6079%" y="261" width="0.3208%" height="15" fill="rgb(228,65,35)" fg:x="1080" fg:w="4"/><text x="86.8579%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (36 samples, 2.89%)</title><rect x="86.9286%" y="293" width="2.8869%" height="15" fill="rgb(245,93,11)" fg:x="1084" fg:w="36"/><text x="87.1786%" y="303.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (36 samples, 2.89%)</title><rect x="86.9286%" y="277" width="2.8869%" height="15" fill="rgb(213,1,31)" fg:x="1084" fg:w="36"/><text x="87.1786%" y="287.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (36 samples, 2.89%)</title><rect x="86.9286%" y="261" width="2.8869%" height="15" fill="rgb(237,205,14)" fg:x="1084" fg:w="36"/><text x="87.1786%" y="271.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="89.8156%" y="293" width="0.2406%" height="15" fill="rgb(232,118,45)" fg:x="1120" fg:w="3"/><text x="90.0656%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 5.85%)</title><rect x="84.3625%" y="389" width="5.8540%" height="15" fill="rgb(218,5,6)" fg:x="1052" fg:w="73"/><text x="84.6125%" y="399.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (73 samples, 5.85%)</title><rect x="84.3625%" y="373" width="5.8540%" height="15" fill="rgb(251,87,51)" fg:x="1052" fg:w="73"/><text x="84.6125%" y="383.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (73 samples, 5.85%)</title><rect x="84.3625%" y="357" width="5.8540%" height="15" fill="rgb(207,225,20)" fg:x="1052" fg:w="73"/><text x="84.6125%" y="367.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (73 samples, 5.85%)</title><rect x="84.3625%" y="341" width="5.8540%" height="15" fill="rgb(222,78,54)" fg:x="1052" fg:w="73"/><text x="84.6125%" y="351.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (71 samples, 5.69%)</title><rect x="84.5229%" y="325" width="5.6937%" height="15" fill="rgb(232,85,16)" fg:x="1054" fg:w="71"/><text x="84.7729%" y="335.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.69%)</title><rect x="84.5229%" y="309" width="5.6937%" height="15" fill="rgb(244,25,33)" fg:x="1054" fg:w="71"/><text x="84.7729%" y="319.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="90.0561%" y="293" width="0.1604%" height="15" fill="rgb(233,24,36)" fg:x="1123" fg:w="2"/><text x="90.3061%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.2967%" y="373" width="0.0802%" height="15" fill="rgb(253,49,54)" fg:x="1126" fg:w="1"/><text x="90.5467%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.3769%" y="373" width="0.0802%" height="15" fill="rgb(245,12,22)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.3769%" y="357" width="0.0802%" height="15" fill="rgb(253,141,28)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.3769%" y="341" width="0.0802%" height="15" fill="rgb(225,207,27)" fg:x="1127" fg:w="1"/><text x="90.6269%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="90.4571%" y="373" width="0.0802%" height="15" fill="rgb(220,84,2)" fg:x="1128" fg:w="1"/><text x="90.7071%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="90.5373%" y="373" width="0.3208%" height="15" fill="rgb(224,37,37)" fg:x="1129" fg:w="4"/><text x="90.7873%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.6977%" y="357" width="0.1604%" height="15" fill="rgb(220,143,18)" fg:x="1131" fg:w="2"/><text x="90.9477%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.6977%" y="341" width="0.1604%" height="15" fill="rgb(210,88,33)" fg:x="1131" fg:w="2"/><text x="90.9477%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="90.6977%" y="325" width="0.1604%" height="15" fill="rgb(219,87,51)" fg:x="1131" fg:w="2"/><text x="90.9477%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="90.8581%" y="373" width="0.2406%" height="15" fill="rgb(211,7,35)" fg:x="1133" fg:w="3"/><text x="91.1081%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.0184%" y="357" width="0.0802%" height="15" fill="rgb(232,77,2)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.0184%" y="341" width="0.0802%" height="15" fill="rgb(249,94,25)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.0184%" y="325" width="0.0802%" height="15" fill="rgb(215,112,2)" fg:x="1135" fg:w="1"/><text x="91.2684%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (111 samples, 8.90%)</title><rect x="82.3577%" y="421" width="8.9014%" height="15" fill="rgb(226,115,48)" fg:x="1027" fg:w="111"/><text x="82.6077%" y="431.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (86 samples, 6.90%)</title><rect x="84.3625%" y="405" width="6.8966%" height="15" fill="rgb(249,196,10)" fg:x="1052" fg:w="86"/><text x="84.6125%" y="415.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.04%)</title><rect x="90.2165%" y="389" width="1.0425%" height="15" fill="rgb(237,109,14)" fg:x="1125" fg:w="13"/><text x="90.4665%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="91.0986%" y="373" width="0.1604%" height="15" fill="rgb(217,103,53)" fg:x="1136" fg:w="2"/><text x="91.3486%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="91.3392%" y="373" width="0.0802%" height="15" fill="rgb(244,137,9)" fg:x="1139" fg:w="1"/><text x="91.5892%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="91.3392%" y="389" width="0.1604%" height="15" fill="rgb(227,201,3)" fg:x="1139" fg:w="2"/><text x="91.5892%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="91.4194%" y="373" width="0.0802%" height="15" fill="rgb(243,94,6)" fg:x="1140" fg:w="1"/><text x="91.6694%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.4194%" y="357" width="0.0802%" height="15" fill="rgb(235,118,5)" fg:x="1140" fg:w="1"/><text x="91.6694%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.4194%" y="341" width="0.0802%" height="15" fill="rgb(247,10,30)" fg:x="1140" fg:w="1"/><text x="91.6694%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.4194%" y="325" width="0.0802%" height="15" fill="rgb(205,26,28)" fg:x="1140" fg:w="1"/><text x="91.6694%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="91.2590%" y="421" width="0.3208%" height="15" fill="rgb(206,99,35)" fg:x="1138" fg:w="4"/><text x="91.5090%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="91.3392%" y="405" width="0.2406%" height="15" fill="rgb(238,130,40)" fg:x="1139" fg:w="3"/><text x="91.5892%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="91.4996%" y="389" width="0.0802%" height="15" fill="rgb(224,126,31)" fg:x="1141" fg:w="1"/><text x="91.7496%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.4996%" y="373" width="0.0802%" height="15" fill="rgb(254,105,17)" fg:x="1141" fg:w="1"/><text x="91.7496%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5798%" y="373" width="0.0802%" height="15" fill="rgb(216,87,36)" fg:x="1142" fg:w="1"/><text x="91.8298%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5798%" y="357" width="0.0802%" height="15" fill="rgb(240,21,12)" fg:x="1142" fg:w="1"/><text x="91.8298%" y="367.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="91.6600%" y="373" width="0.2406%" height="15" fill="rgb(245,192,34)" fg:x="1143" fg:w="3"/><text x="91.9100%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.8204%" y="357" width="0.0802%" height="15" fill="rgb(226,100,49)" fg:x="1145" fg:w="1"/><text x="92.0704%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.8204%" y="341" width="0.0802%" height="15" fill="rgb(245,188,27)" fg:x="1145" fg:w="1"/><text x="92.0704%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.8204%" y="325" width="0.0802%" height="15" fill="rgb(212,170,8)" fg:x="1145" fg:w="1"/><text x="92.0704%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="91.9006%" y="373" width="0.0802%" height="15" fill="rgb(217,113,29)" fg:x="1146" fg:w="1"/><text x="92.1506%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.9006%" y="357" width="0.0802%" height="15" fill="rgb(237,30,3)" fg:x="1146" fg:w="1"/><text x="92.1506%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9006%" y="341" width="0.0802%" height="15" fill="rgb(227,19,28)" fg:x="1146" fg:w="1"/><text x="92.1506%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.9006%" y="325" width="0.0802%" height="15" fill="rgb(239,172,45)" fg:x="1146" fg:w="1"/><text x="92.1506%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (124 samples, 9.94%)</title><rect x="82.1171%" y="437" width="9.9439%" height="15" fill="rgb(254,55,39)" fg:x="1024" fg:w="124"/><text x="82.3671%" y="447.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="91.5798%" y="421" width="0.4812%" height="15" fill="rgb(249,208,12)" fg:x="1142" fg:w="6"/><text x="91.8298%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="91.5798%" y="405" width="0.4812%" height="15" fill="rgb(240,52,13)" fg:x="1142" fg:w="6"/><text x="91.8298%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="91.5798%" y="389" width="0.4812%" height="15" fill="rgb(252,149,13)" fg:x="1142" fg:w="6"/><text x="91.8298%" y="399.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="91.9808%" y="373" width="0.0802%" height="15" fill="rgb(232,81,48)" fg:x="1147" fg:w="1"/><text x="92.2308%" y="383.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="91.9808%" y="357" width="0.0802%" height="15" fill="rgb(222,144,2)" fg:x="1147" fg:w="1"/><text x="92.2308%" y="367.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (125 samples, 10.02%)</title><rect x="82.1171%" y="469" width="10.0241%" height="15" fill="rgb(216,81,32)" fg:x="1024" fg:w="125"/><text x="82.3671%" y="479.50">&lt;regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (125 samples, 10.02%)</title><rect x="82.1171%" y="453" width="10.0241%" height="15" fill="rgb(244,78,51)" fg:x="1024" fg:w="125"/><text x="82.3671%" y="463.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="92.0609%" y="437" width="0.0802%" height="15" fill="rgb(217,66,21)" fg:x="1148" fg:w="1"/><text x="92.3109%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="92.1411%" y="469" width="0.0802%" height="15" fill="rgb(247,101,42)" fg:x="1149" fg:w="1"/><text x="92.3911%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="92.1411%" y="453" width="0.0802%" height="15" fill="rgb(227,81,39)" fg:x="1149" fg:w="1"/><text x="92.3911%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="92.1411%" y="437" width="0.0802%" height="15" fill="rgb(220,223,44)" fg:x="1149" fg:w="1"/><text x="92.3911%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="92.2213%" y="453" width="0.0802%" height="15" fill="rgb(205,218,2)" fg:x="1150" fg:w="1"/><text x="92.4713%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="92.2213%" y="437" width="0.0802%" height="15" fill="rgb(212,207,28)" fg:x="1150" fg:w="1"/><text x="92.4713%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="92.2213%" y="421" width="0.0802%" height="15" fill="rgb(224,12,41)" fg:x="1150" fg:w="1"/><text x="92.4713%" y="431.50"></text></g><g><title>indefinite::rules::number::Number::check (136 samples, 10.91%)</title><rect x="82.1171%" y="485" width="10.9062%" height="15" fill="rgb(216,118,12)" fg:x="1024" fg:w="136"/><text x="82.3671%" y="495.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.80%)</title><rect x="92.2213%" y="469" width="0.8019%" height="15" fill="rgb(252,97,46)" fg:x="1150" fg:w="10"/><text x="92.4713%" y="479.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="92.3015%" y="453" width="0.7217%" height="15" fill="rgb(244,206,19)" fg:x="1151" fg:w="9"/><text x="92.5515%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="92.3015%" y="437" width="0.7217%" height="15" fill="rgb(231,84,31)" fg:x="1151" fg:w="9"/><text x="92.5515%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="92.3015%" y="421" width="0.7217%" height="15" fill="rgb(244,133,0)" fg:x="1151" fg:w="9"/><text x="92.5515%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="92.3817%" y="405" width="0.6415%" height="15" fill="rgb(223,15,50)" fg:x="1152" fg:w="8"/><text x="92.6317%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="92.3817%" y="389" width="0.6415%" height="15" fill="rgb(250,118,49)" fg:x="1152" fg:w="8"/><text x="92.6317%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="92.7025%" y="373" width="0.3208%" height="15" fill="rgb(248,25,38)" fg:x="1156" fg:w="4"/><text x="92.9525%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.0233%" y="437" width="0.0802%" height="15" fill="rgb(215,70,14)" fg:x="1160" fg:w="1"/><text x="93.2733%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.2638%" y="405" width="0.0802%" height="15" fill="rgb(215,28,15)" fg:x="1163" fg:w="1"/><text x="93.5138%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.2638%" y="389" width="0.0802%" height="15" fill="rgb(243,6,28)" fg:x="1163" fg:w="1"/><text x="93.5138%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.2638%" y="373" width="0.0802%" height="15" fill="rgb(222,130,1)" fg:x="1163" fg:w="1"/><text x="93.5138%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.2638%" y="357" width="0.0802%" height="15" fill="rgb(236,166,44)" fg:x="1163" fg:w="1"/><text x="93.5138%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.2638%" y="341" width="0.0802%" height="15" fill="rgb(221,108,14)" fg:x="1163" fg:w="1"/><text x="93.5138%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.2638%" y="325" width="0.0802%" height="15" fill="rgb(252,3,45)" fg:x="1163" fg:w="1"/><text x="93.5138%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.3440%" y="341" width="0.0802%" height="15" fill="rgb(237,68,30)" fg:x="1164" fg:w="1"/><text x="93.5940%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="93.3440%" y="405" width="0.1604%" height="15" fill="rgb(211,79,22)" fg:x="1164" fg:w="2"/><text x="93.5940%" y="415.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="93.3440%" y="389" width="0.1604%" height="15" fill="rgb(252,185,21)" fg:x="1164" fg:w="2"/><text x="93.5940%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="93.3440%" y="373" width="0.1604%" height="15" fill="rgb(225,189,26)" fg:x="1164" fg:w="2"/><text x="93.5940%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="93.3440%" y="357" width="0.1604%" height="15" fill="rgb(241,30,40)" fg:x="1164" fg:w="2"/><text x="93.5940%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="93.4242%" y="341" width="0.0802%" height="15" fill="rgb(235,215,44)" fg:x="1165" fg:w="1"/><text x="93.6742%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="93.5044%" y="389" width="0.0802%" height="15" fill="rgb(205,8,29)" fg:x="1166" fg:w="1"/><text x="93.7544%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.5044%" y="373" width="0.0802%" height="15" fill="rgb(241,137,42)" fg:x="1166" fg:w="1"/><text x="93.7544%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="93.5846%" y="389" width="0.4812%" height="15" fill="rgb(237,155,2)" fg:x="1167" fg:w="6"/><text x="93.8346%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="93.5846%" y="373" width="0.4812%" height="15" fill="rgb(245,29,42)" fg:x="1167" fg:w="6"/><text x="93.8346%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.0658%" y="373" width="0.0802%" height="15" fill="rgb(234,101,35)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="94.0658%" y="357" width="0.0802%" height="15" fill="rgb(228,64,37)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.0658%" y="341" width="0.0802%" height="15" fill="rgb(217,214,36)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.0658%" y="325" width="0.0802%" height="15" fill="rgb(243,70,3)" fg:x="1173" fg:w="1"/><text x="94.3158%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.96%)</title><rect x="93.5044%" y="405" width="0.9623%" height="15" fill="rgb(253,158,52)" fg:x="1166" fg:w="12"/><text x="93.7544%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="94.0658%" y="389" width="0.4010%" height="15" fill="rgb(234,111,54)" fg:x="1173" fg:w="5"/><text x="94.3158%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="94.1460%" y="373" width="0.3208%" height="15" fill="rgb(217,70,32)" fg:x="1174" fg:w="4"/><text x="94.3960%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="94.2261%" y="357" width="0.2406%" height="15" fill="rgb(234,18,33)" fg:x="1175" fg:w="3"/><text x="94.4761%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="94.3865%" y="341" width="0.0802%" height="15" fill="rgb(234,12,49)" fg:x="1177" fg:w="1"/><text x="94.6365%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="94.3865%" y="325" width="0.0802%" height="15" fill="rgb(236,10,21)" fg:x="1177" fg:w="1"/><text x="94.6365%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="94.4667%" y="373" width="0.0802%" height="15" fill="rgb(248,182,45)" fg:x="1178" fg:w="1"/><text x="94.7167%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="94.6271%" y="357" width="0.0802%" height="15" fill="rgb(217,95,36)" fg:x="1180" fg:w="1"/><text x="94.8771%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.7073%" y="341" width="0.1604%" height="15" fill="rgb(212,110,31)" fg:x="1181" fg:w="2"/><text x="94.9573%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.7073%" y="325" width="0.1604%" height="15" fill="rgb(206,32,53)" fg:x="1181" fg:w="2"/><text x="94.9573%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.7073%" y="309" width="0.1604%" height="15" fill="rgb(246,141,37)" fg:x="1181" fg:w="2"/><text x="94.9573%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="94.5469%" y="373" width="0.4010%" height="15" fill="rgb(219,16,7)" fg:x="1179" fg:w="5"/><text x="94.7969%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="94.7073%" y="357" width="0.2406%" height="15" fill="rgb(230,205,45)" fg:x="1181" fg:w="3"/><text x="94.9573%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="94.8677%" y="341" width="0.0802%" height="15" fill="rgb(231,43,49)" fg:x="1183" fg:w="1"/><text x="95.1177%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="94.8677%" y="325" width="0.0802%" height="15" fill="rgb(212,106,34)" fg:x="1183" fg:w="1"/><text x="95.1177%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="94.9479%" y="373" width="0.0802%" height="15" fill="rgb(206,83,17)" fg:x="1184" fg:w="1"/><text x="95.1979%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="95.0281%" y="373" width="0.0802%" height="15" fill="rgb(244,154,49)" fg:x="1185" fg:w="1"/><text x="95.2781%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="94.4667%" y="405" width="0.7217%" height="15" fill="rgb(244,149,49)" fg:x="1178" fg:w="9"/><text x="94.7167%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="94.4667%" y="389" width="0.7217%" height="15" fill="rgb(227,134,18)" fg:x="1178" fg:w="9"/><text x="94.7167%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.1083%" y="373" width="0.0802%" height="15" fill="rgb(237,116,36)" fg:x="1186" fg:w="1"/><text x="95.3583%" y="383.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.2686%" y="357" width="0.0802%" height="15" fill="rgb(205,129,40)" fg:x="1188" fg:w="1"/><text x="95.5186%" y="367.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="95.2686%" y="341" width="0.0802%" height="15" fill="rgb(236,178,4)" fg:x="1188" fg:w="1"/><text x="95.5186%" y="351.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (30 samples, 2.41%)</title><rect x="93.0233%" y="453" width="2.4058%" height="15" fill="rgb(251,76,53)" fg:x="1160" fg:w="30"/><text x="93.2733%" y="463.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (29 samples, 2.33%)</title><rect x="93.1034%" y="437" width="2.3256%" height="15" fill="rgb(242,92,40)" fg:x="1161" fg:w="29"/><text x="93.3534%" y="447.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (29 samples, 2.33%)</title><rect x="93.1034%" y="421" width="2.3256%" height="15" fill="rgb(209,45,30)" fg:x="1161" fg:w="29"/><text x="93.3534%" y="431.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.1885%" y="405" width="0.2406%" height="15" fill="rgb(218,157,36)" fg:x="1187" fg:w="3"/><text x="95.4385%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.1885%" y="389" width="0.2406%" height="15" fill="rgb(222,186,16)" fg:x="1187" fg:w="3"/><text x="95.4385%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="95.1885%" y="373" width="0.2406%" height="15" fill="rgb(254,72,35)" fg:x="1187" fg:w="3"/><text x="95.4385%" y="383.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="95.3488%" y="357" width="0.0802%" height="15" fill="rgb(224,25,35)" fg:x="1189" fg:w="1"/><text x="95.5988%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.5092%" y="421" width="0.0802%" height="15" fill="rgb(206,135,52)" fg:x="1191" fg:w="1"/><text x="95.7592%" y="431.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="95.5092%" y="405" width="0.0802%" height="15" fill="rgb(229,174,47)" fg:x="1191" fg:w="1"/><text x="95.7592%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="95.4290%" y="453" width="0.3208%" height="15" fill="rgb(242,184,21)" fg:x="1190" fg:w="4"/><text x="95.6790%" y="463.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="95.5092%" y="437" width="0.2406%" height="15" fill="rgb(213,22,45)" fg:x="1191" fg:w="3"/><text x="95.7592%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="95.5894%" y="421" width="0.1604%" height="15" fill="rgb(237,81,54)" fg:x="1192" fg:w="2"/><text x="95.8394%" y="431.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="95.5894%" y="405" width="0.1604%" height="15" fill="rgb(248,177,18)" fg:x="1192" fg:w="2"/><text x="95.8394%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.6696%" y="389" width="0.0802%" height="15" fill="rgb(254,31,16)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6696%" y="373" width="0.0802%" height="15" fill="rgb(235,20,31)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.6696%" y="357" width="0.0802%" height="15" fill="rgb(240,56,43)" fg:x="1193" fg:w="1"/><text x="95.9196%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.7498%" y="453" width="0.0802%" height="15" fill="rgb(237,197,51)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.7498%" y="437" width="0.0802%" height="15" fill="rgb(241,162,44)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.7498%" y="421" width="0.0802%" height="15" fill="rgb(224,23,20)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.7498%" y="405" width="0.0802%" height="15" fill="rgb(250,109,34)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.7498%" y="389" width="0.0802%" height="15" fill="rgb(214,175,50)" fg:x="1194" fg:w="1"/><text x="95.9998%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="95.8300%" y="389" width="0.3208%" height="15" fill="rgb(213,182,5)" fg:x="1195" fg:w="4"/><text x="96.0800%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="95.9904%" y="373" width="0.1604%" height="15" fill="rgb(209,199,19)" fg:x="1197" fg:w="2"/><text x="96.2404%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="95.9904%" y="357" width="0.1604%" height="15" fill="rgb(236,224,42)" fg:x="1197" fg:w="2"/><text x="96.2404%" y="367.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (40 samples, 3.21%)</title><rect x="93.0233%" y="469" width="3.2077%" height="15" fill="rgb(246,226,29)" fg:x="1160" fg:w="40"/><text x="93.2733%" y="479.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.8300%" y="453" width="0.4010%" height="15" fill="rgb(227,223,11)" fg:x="1195" fg:w="5"/><text x="96.0800%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.8300%" y="437" width="0.4010%" height="15" fill="rgb(219,7,51)" fg:x="1195" fg:w="5"/><text x="96.0800%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.8300%" y="421" width="0.4010%" height="15" fill="rgb(245,167,10)" fg:x="1195" fg:w="5"/><text x="96.0800%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="95.8300%" y="405" width="0.4010%" height="15" fill="rgb(237,224,16)" fg:x="1195" fg:w="5"/><text x="96.0800%" y="415.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="96.1508%" y="389" width="0.0802%" height="15" fill="rgb(226,132,13)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.1508%" y="373" width="0.0802%" height="15" fill="rgb(214,140,3)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1508%" y="357" width="0.0802%" height="15" fill="rgb(221,177,4)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1508%" y="341" width="0.0802%" height="15" fill="rgb(238,139,3)" fg:x="1199" fg:w="1"/><text x="96.4008%" y="351.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (267 samples, 21.41%)</title><rect x="74.9800%" y="565" width="21.4114%" height="15" fill="rgb(216,17,39)" fg:x="935" fg:w="267"/><text x="75.2300%" y="575.50">&lt;&amp;kernel::model::entry::Entry as p..</text></g><g><title>plugins_core::looking::model::qualify_name (266 samples, 21.33%)</title><rect x="75.0601%" y="549" width="21.3312%" height="15" fill="rgb(238,120,9)" fg:x="936" fg:w="266"/><text x="75.3101%" y="559.50">plugins_core::looking::model::qual..</text></g><g><title>indefinite::indefinite (266 samples, 21.33%)</title><rect x="75.0601%" y="533" width="21.3312%" height="15" fill="rgb(244,92,53)" fg:x="936" fg:w="266"/><text x="75.3101%" y="543.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (266 samples, 21.33%)</title><rect x="75.0601%" y="517" width="21.3312%" height="15" fill="rgb(224,148,33)" fg:x="936" fg:w="266"/><text x="75.3101%" y="527.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (264 samples, 21.17%)</title><rect x="75.2205%" y="501" width="21.1708%" height="15" fill="rgb(243,6,36)" fg:x="938" fg:w="264"/><text x="75.4705%" y="511.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (42 samples, 3.37%)</title><rect x="93.0233%" y="485" width="3.3681%" height="15" fill="rgb(230,102,11)" fg:x="1160" fg:w="42"/><text x="93.2733%" y="495.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="96.2310%" y="469" width="0.1604%" height="15" fill="rgb(234,148,36)" fg:x="1200" fg:w="2"/><text x="96.4810%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="96.3913%" y="533" width="0.1604%" height="15" fill="rgb(251,153,25)" fg:x="1202" fg:w="2"/><text x="96.6413%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4715%" y="517" width="0.0802%" height="15" fill="rgb(215,129,8)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4715%" y="501" width="0.0802%" height="15" fill="rgb(224,128,35)" fg:x="1203" fg:w="1"/><text x="96.7215%" y="511.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (270 samples, 21.65%)</title><rect x="74.9800%" y="597" width="21.6520%" height="15" fill="rgb(237,56,52)" fg:x="935" fg:w="270"/><text x="75.2300%" y="607.50">&lt;plugins_core::looking::actions::L..</text></g><g><title>plugins_core::looking::model::new_area_observation (270 samples, 21.65%)</title><rect x="74.9800%" y="581" width="21.6520%" height="15" fill="rgb(234,213,19)" fg:x="935" fg:w="270"/><text x="75.2300%" y="591.50">plugins_core::looking::model::new_..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="96.3913%" y="565" width="0.2406%" height="15" fill="rgb(252,82,23)" fg:x="1202" fg:w="3"/><text x="96.6413%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="96.3913%" y="549" width="0.2406%" height="15" fill="rgb(254,201,21)" fg:x="1202" fg:w="3"/><text x="96.6413%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.5517%" y="533" width="0.0802%" height="15" fill="rgb(250,186,11)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5517%" y="517" width="0.0802%" height="15" fill="rgb(211,174,5)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="96.5517%" y="501" width="0.0802%" height="15" fill="rgb(214,121,10)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.5517%" y="485" width="0.0802%" height="15" fill="rgb(241,66,2)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.5517%" y="469" width="0.0802%" height="15" fill="rgb(220,167,19)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.5517%" y="453" width="0.0802%" height="15" fill="rgb(231,54,50)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5517%" y="437" width="0.0802%" height="15" fill="rgb(239,217,53)" fg:x="1204" fg:w="1"/><text x="96.8017%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="96.6319%" y="485" width="0.0802%" height="15" fill="rgb(248,8,0)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="96.6319%" y="469" width="0.0802%" height="15" fill="rgb(229,118,37)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.6319%" y="453" width="0.0802%" height="15" fill="rgb(253,223,43)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.6319%" y="437" width="0.0802%" height="15" fill="rgb(211,77,36)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.6319%" y="421" width="0.0802%" height="15" fill="rgb(219,3,53)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.6319%" y="405" width="0.0802%" height="15" fill="rgb(244,45,42)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.6319%" y="389" width="0.0802%" height="15" fill="rgb(225,95,27)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.6319%" y="373" width="0.0802%" height="15" fill="rgb(207,74,8)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6319%" y="357" width="0.0802%" height="15" fill="rgb(243,63,36)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.6319%" y="341" width="0.0802%" height="15" fill="rgb(211,180,12)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.6319%" y="325" width="0.0802%" height="15" fill="rgb(254,166,49)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.6319%" y="309" width="0.0802%" height="15" fill="rgb(205,19,0)" fg:x="1205" fg:w="1"/><text x="96.8819%" y="319.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (2 samples, 0.16%)</title><rect x="96.6319%" y="597" width="0.1604%" height="15" fill="rgb(224,172,32)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="96.6319%" y="581" width="0.1604%" height="15" fill="rgb(254,136,30)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="96.6319%" y="565" width="0.1604%" height="15" fill="rgb(246,19,35)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="96.6319%" y="549" width="0.1604%" height="15" fill="rgb(219,24,36)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="96.6319%" y="533" width="0.1604%" height="15" fill="rgb(251,55,1)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="543.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="96.6319%" y="517" width="0.1604%" height="15" fill="rgb(218,117,39)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="96.6319%" y="501" width="0.1604%" height="15" fill="rgb(248,169,11)" fg:x="1205" fg:w="2"/><text x="96.8819%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="96.7121%" y="485" width="0.0802%" height="15" fill="rgb(244,40,44)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7121%" y="469" width="0.0802%" height="15" fill="rgb(234,62,37)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7121%" y="453" width="0.0802%" height="15" fill="rgb(207,117,42)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7121%" y="437" width="0.0802%" height="15" fill="rgb(213,43,2)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7121%" y="421" width="0.0802%" height="15" fill="rgb(244,202,51)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7121%" y="405" width="0.0802%" height="15" fill="rgb(253,174,46)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.7121%" y="389" width="0.0802%" height="15" fill="rgb(251,23,1)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.7121%" y="373" width="0.0802%" height="15" fill="rgb(253,26,1)" fg:x="1206" fg:w="1"/><text x="96.9621%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (2 samples, 0.16%)</title><rect x="96.7923%" y="565" width="0.1604%" height="15" fill="rgb(216,89,31)" fg:x="1207" fg:w="2"/><text x="97.0423%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.7923%" y="549" width="0.1604%" height="15" fill="rgb(209,109,5)" fg:x="1207" fg:w="2"/><text x="97.0423%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.8725%" y="533" width="0.0802%" height="15" fill="rgb(229,63,13)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8725%" y="517" width="0.0802%" height="15" fill="rgb(238,137,54)" fg:x="1208" fg:w="1"/><text x="97.1225%" y="527.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="96.9527%" y="533" width="0.0802%" height="15" fill="rgb(228,1,9)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.9527%" y="517" width="0.0802%" height="15" fill="rgb(249,120,48)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.9527%" y="501" width="0.0802%" height="15" fill="rgb(209,72,36)" fg:x="1209" fg:w="1"/><text x="97.2027%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.0329%" y="453" width="0.0802%" height="15" fill="rgb(247,98,49)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="463.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="97.0329%" y="437" width="0.0802%" height="15" fill="rgb(233,75,36)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.0329%" y="421" width="0.0802%" height="15" fill="rgb(225,14,24)" fg:x="1210" fg:w="1"/><text x="97.2829%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="97.1131%" y="437" width="0.0802%" height="15" fill="rgb(237,193,20)" fg:x="1211" fg:w="1"/><text x="97.3631%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="97.0329%" y="469" width="0.2406%" height="15" fill="rgb(239,122,19)" fg:x="1210" fg:w="3"/><text x="97.2829%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="97.1131%" y="453" width="0.1604%" height="15" fill="rgb(231,220,10)" fg:x="1211" fg:w="2"/><text x="97.3631%" y="463.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="97.1933%" y="437" width="0.0802%" height="15" fill="rgb(220,66,15)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="97.1933%" y="421" width="0.0802%" height="15" fill="rgb(215,171,52)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="431.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.1933%" y="405" width="0.0802%" height="15" fill="rgb(241,169,50)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.1933%" y="389" width="0.0802%" height="15" fill="rgb(236,189,0)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.1933%" y="373" width="0.0802%" height="15" fill="rgb(217,147,20)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.1933%" y="357" width="0.0802%" height="15" fill="rgb(206,188,39)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="367.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.1933%" y="341" width="0.0802%" height="15" fill="rgb(227,118,25)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.1933%" y="325" width="0.0802%" height="15" fill="rgb(248,171,40)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.1933%" y="309" width="0.0802%" height="15" fill="rgb(251,90,54)" fg:x="1212" fg:w="1"/><text x="97.4433%" y="319.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="97.2735%" y="437" width="0.1604%" height="15" fill="rgb(234,11,46)" fg:x="1213" fg:w="2"/><text x="97.5235%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="97.2735%" y="421" width="0.1604%" height="15" fill="rgb(229,134,13)" fg:x="1213" fg:w="2"/><text x="97.5235%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="97.2735%" y="405" width="0.1604%" height="15" fill="rgb(223,129,3)" fg:x="1213" fg:w="2"/><text x="97.5235%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="97.2735%" y="389" width="0.1604%" height="15" fill="rgb(221,124,13)" fg:x="1213" fg:w="2"/><text x="97.5235%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="97.2735%" y="373" width="0.1604%" height="15" fill="rgb(234,3,18)" fg:x="1213" fg:w="2"/><text x="97.5235%" y="383.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="97.3536%" y="357" width="0.0802%" height="15" fill="rgb(249,199,20)" fg:x="1214" fg:w="1"/><text x="97.6036%" y="367.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (6 samples, 0.48%)</title><rect x="97.0329%" y="485" width="0.4812%" height="15" fill="rgb(224,134,6)" fg:x="1210" fg:w="6"/><text x="97.2829%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="97.2735%" y="469" width="0.2406%" height="15" fill="rgb(254,83,26)" fg:x="1213" fg:w="3"/><text x="97.5235%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="97.2735%" y="453" width="0.2406%" height="15" fill="rgb(217,88,9)" fg:x="1213" fg:w="3"/><text x="97.5235%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4338%" y="437" width="0.0802%" height="15" fill="rgb(225,73,2)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4338%" y="421" width="0.0802%" height="15" fill="rgb(226,44,39)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.4338%" y="405" width="0.0802%" height="15" fill="rgb(228,53,17)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.4338%" y="389" width="0.0802%" height="15" fill="rgb(212,27,27)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.4338%" y="373" width="0.0802%" height="15" fill="rgb(241,50,6)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.4338%" y="357" width="0.0802%" height="15" fill="rgb(225,28,51)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.4338%" y="341" width="0.0802%" height="15" fill="rgb(215,33,16)" fg:x="1215" fg:w="1"/><text x="97.6838%" y="351.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="97.5140%" y="357" width="0.0802%" height="15" fill="rgb(243,40,39)" fg:x="1216" fg:w="1"/><text x="97.7640%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.5942%" y="197" width="0.0802%" height="15" fill="rgb(225,11,42)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5942%" y="181" width="0.0802%" height="15" fill="rgb(241,220,38)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="97.5942%" y="165" width="0.0802%" height="15" fill="rgb(244,52,35)" fg:x="1217" fg:w="1"/><text x="97.8442%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.5942%" y="229" width="0.1604%" height="15" fill="rgb(246,42,46)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.5942%" y="213" width="0.1604%" height="15" fill="rgb(205,184,13)" fg:x="1217" fg:w="2"/><text x="97.8442%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="97.6744%" y="197" width="0.0802%" height="15" fill="rgb(209,48,36)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6744%" y="181" width="0.0802%" height="15" fill="rgb(244,34,51)" fg:x="1218" fg:w="1"/><text x="97.9244%" y="191.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="97.5942%" y="341" width="0.2406%" height="15" fill="rgb(221,107,33)" fg:x="1217" fg:w="3"/><text x="97.8442%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="97.5942%" y="325" width="0.2406%" height="15" fill="rgb(224,203,12)" fg:x="1217" fg:w="3"/><text x="97.8442%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.5942%" y="309" width="0.2406%" height="15" fill="rgb(230,215,18)" fg:x="1217" fg:w="3"/><text x="97.8442%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.5942%" y="293" width="0.2406%" height="15" fill="rgb(206,185,35)" fg:x="1217" fg:w="3"/><text x="97.8442%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="97.5942%" y="277" width="0.2406%" height="15" fill="rgb(228,140,34)" fg:x="1217" fg:w="3"/><text x="97.8442%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.5942%" y="261" width="0.2406%" height="15" fill="rgb(208,93,13)" fg:x="1217" fg:w="3"/><text x="97.8442%" y="271.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.5942%" y="245" width="0.2406%" height="15" fill="rgb(221,193,39)" fg:x="1217" fg:w="3"/><text x="97.8442%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7546%" y="229" width="0.0802%" height="15" fill="rgb(241,132,34)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="239.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="97.7546%" y="213" width="0.0802%" height="15" fill="rgb(221,141,10)" fg:x="1219" fg:w="1"/><text x="98.0046%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.88%)</title><rect x="97.0329%" y="501" width="0.8821%" height="15" fill="rgb(226,90,31)" fg:x="1210" fg:w="11"/><text x="97.2829%" y="511.50"></text></g><g><title>plugins_core::tools::get_contained_keys (5 samples, 0.40%)</title><rect x="97.5140%" y="485" width="0.4010%" height="15" fill="rgb(243,75,5)" fg:x="1216" fg:w="5"/><text x="97.7640%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="97.5140%" y="469" width="0.4010%" height="15" fill="rgb(227,156,21)" fg:x="1216" fg:w="5"/><text x="97.7640%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.40%)</title><rect x="97.5140%" y="453" width="0.4010%" height="15" fill="rgb(250,195,8)" fg:x="1216" fg:w="5"/><text x="97.7640%" y="463.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (5 samples, 0.40%)</title><rect x="97.5140%" y="437" width="0.4010%" height="15" fill="rgb(220,134,5)" fg:x="1216" fg:w="5"/><text x="97.7640%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="97.5140%" y="421" width="0.4010%" height="15" fill="rgb(246,106,34)" fg:x="1216" fg:w="5"/><text x="97.7640%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="97.5140%" y="405" width="0.4010%" height="15" fill="rgb(205,1,4)" fg:x="1216" fg:w="5"/><text x="97.7640%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="97.5140%" y="389" width="0.4010%" height="15" fill="rgb(224,151,29)" fg:x="1216" fg:w="5"/><text x="97.7640%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (5 samples, 0.40%)</title><rect x="97.5140%" y="373" width="0.4010%" height="15" fill="rgb(251,196,0)" fg:x="1216" fg:w="5"/><text x="97.7640%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="97.5942%" y="357" width="0.3208%" height="15" fill="rgb(212,127,0)" fg:x="1217" fg:w="4"/><text x="97.8442%" y="367.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.8348%" y="341" width="0.0802%" height="15" fill="rgb(236,71,53)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.8348%" y="325" width="0.0802%" height="15" fill="rgb(227,99,0)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8348%" y="309" width="0.0802%" height="15" fill="rgb(239,89,21)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.8348%" y="293" width="0.0802%" height="15" fill="rgb(243,122,19)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8348%" y="277" width="0.0802%" height="15" fill="rgb(229,192,45)" fg:x="1220" fg:w="1"/><text x="98.0848%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="97.0329%" y="517" width="0.9623%" height="15" fill="rgb(235,165,35)" fg:x="1210" fg:w="12"/><text x="97.2829%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9150%" y="501" width="0.0802%" height="15" fill="rgb(253,202,0)" fg:x="1221" fg:w="1"/><text x="98.1650%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="97.9952%" y="469" width="0.1604%" height="15" fill="rgb(235,51,20)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="97.9952%" y="453" width="0.1604%" height="15" fill="rgb(218,95,46)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="97.9952%" y="437" width="0.1604%" height="15" fill="rgb(212,81,10)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="97.9952%" y="421" width="0.1604%" height="15" fill="rgb(240,59,0)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="97.9952%" y="405" width="0.1604%" height="15" fill="rgb(212,191,42)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="97.9952%" y="389" width="0.1604%" height="15" fill="rgb(233,140,3)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="97.9952%" y="373" width="0.1604%" height="15" fill="rgb(215,69,23)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="97.9952%" y="357" width="0.1604%" height="15" fill="rgb(240,202,20)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="97.9952%" y="341" width="0.1604%" height="15" fill="rgb(209,146,50)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="97.9952%" y="325" width="0.1604%" height="15" fill="rgb(253,102,54)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="335.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="97.9952%" y="309" width="0.1604%" height="15" fill="rgb(250,173,47)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="97.9952%" y="293" width="0.1604%" height="15" fill="rgb(232,142,7)" fg:x="1222" fg:w="2"/><text x="98.2452%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.6367%" y="261" width="0.1604%" height="15" fill="rgb(230,157,47)" fg:x="1230" fg:w="2"/><text x="98.8867%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7169%" y="245" width="0.0802%" height="15" fill="rgb(214,177,35)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.7169%" y="229" width="0.0802%" height="15" fill="rgb(234,119,46)" fg:x="1231" fg:w="1"/><text x="98.9669%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.56%)</title><rect x="98.3160%" y="357" width="0.5613%" height="15" fill="rgb(241,180,50)" fg:x="1226" fg:w="7"/><text x="98.5660%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="98.3160%" y="341" width="0.5613%" height="15" fill="rgb(221,54,25)" fg:x="1226" fg:w="7"/><text x="98.5660%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.56%)</title><rect x="98.3160%" y="325" width="0.5613%" height="15" fill="rgb(209,157,44)" fg:x="1226" fg:w="7"/><text x="98.5660%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.56%)</title><rect x="98.3160%" y="309" width="0.5613%" height="15" fill="rgb(246,115,41)" fg:x="1226" fg:w="7"/><text x="98.5660%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.4763%" y="293" width="0.4010%" height="15" fill="rgb(229,86,1)" fg:x="1228" fg:w="5"/><text x="98.7263%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="98.4763%" y="277" width="0.4010%" height="15" fill="rgb(240,108,53)" fg:x="1228" fg:w="5"/><text x="98.7263%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7971%" y="261" width="0.0802%" height="15" fill="rgb(227,134,2)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.7971%" y="245" width="0.0802%" height="15" fill="rgb(213,129,25)" fg:x="1232" fg:w="1"/><text x="99.0471%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="98.8773%" y="357" width="0.1604%" height="15" fill="rgb(226,35,21)" fg:x="1233" fg:w="2"/><text x="99.1273%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9575%" y="341" width="0.0802%" height="15" fill="rgb(208,129,26)" fg:x="1234" fg:w="1"/><text x="99.2075%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="98.3160%" y="373" width="0.8019%" height="15" fill="rgb(224,83,6)" fg:x="1226" fg:w="10"/><text x="98.5660%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.0377%" y="357" width="0.0802%" height="15" fill="rgb(227,52,39)" fg:x="1235" fg:w="1"/><text x="99.2877%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (12 samples, 0.96%)</title><rect x="98.2358%" y="405" width="0.9623%" height="15" fill="rgb(241,30,17)" fg:x="1225" fg:w="12"/><text x="98.4858%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="98.2358%" y="389" width="0.9623%" height="15" fill="rgb(246,186,42)" fg:x="1225" fg:w="12"/><text x="98.4858%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.1179%" y="373" width="0.0802%" height="15" fill="rgb(221,169,15)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1179%" y="357" width="0.0802%" height="15" fill="rgb(235,108,21)" fg:x="1236" fg:w="1"/><text x="99.3679%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="99.1981%" y="389" width="0.1604%" height="15" fill="rgb(219,148,30)" fg:x="1237" fg:w="2"/><text x="99.4481%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.2783%" y="373" width="0.0802%" height="15" fill="rgb(220,109,5)" fg:x="1238" fg:w="1"/><text x="99.5283%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (16 samples, 1.28%)</title><rect x="98.1556%" y="453" width="1.2831%" height="15" fill="rgb(213,203,48)" fg:x="1224" fg:w="16"/><text x="98.4056%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 1.28%)</title><rect x="98.1556%" y="437" width="1.2831%" height="15" fill="rgb(244,71,33)" fg:x="1224" fg:w="16"/><text x="98.4056%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.28%)</title><rect x="98.1556%" y="421" width="1.2831%" height="15" fill="rgb(209,23,2)" fg:x="1224" fg:w="16"/><text x="98.4056%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="99.1981%" y="405" width="0.2406%" height="15" fill="rgb(219,97,7)" fg:x="1237" fg:w="3"/><text x="99.4481%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3585%" y="389" width="0.0802%" height="15" fill="rgb(216,161,23)" fg:x="1239" fg:w="1"/><text x="99.6085%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="99.4387%" y="405" width="0.0802%" height="15" fill="rgb(207,45,42)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.4387%" y="389" width="0.0802%" height="15" fill="rgb(241,61,4)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.4387%" y="373" width="0.0802%" height="15" fill="rgb(236,170,1)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="99.4387%" y="357" width="0.0802%" height="15" fill="rgb(239,72,5)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.4387%" y="341" width="0.0802%" height="15" fill="rgb(214,13,50)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.4387%" y="325" width="0.0802%" height="15" fill="rgb(224,88,9)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4387%" y="309" width="0.0802%" height="15" fill="rgb(238,192,34)" fg:x="1240" fg:w="1"/><text x="99.6887%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5188%" y="405" width="0.0802%" height="15" fill="rgb(217,203,50)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.5188%" y="389" width="0.0802%" height="15" fill="rgb(241,123,32)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5188%" y="373" width="0.0802%" height="15" fill="rgb(248,151,39)" fg:x="1241" fg:w="1"/><text x="99.7688%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.5990%" y="373" width="0.0802%" height="15" fill="rgb(208,89,6)" fg:x="1242" fg:w="1"/><text x="99.8490%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.6792%" y="357" width="0.0802%" height="15" fill="rgb(254,43,26)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6792%" y="341" width="0.0802%" height="15" fill="rgb(216,158,13)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.6792%" y="325" width="0.0802%" height="15" fill="rgb(212,47,37)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6792%" y="309" width="0.0802%" height="15" fill="rgb(254,16,10)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6792%" y="293" width="0.0802%" height="15" fill="rgb(223,228,16)" fg:x="1243" fg:w="1"/><text x="99.9292%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.6792%" y="373" width="0.1604%" height="15" fill="rgb(249,108,50)" fg:x="1243" fg:w="2"/><text x="99.9292%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.7594%" y="357" width="0.0802%" height="15" fill="rgb(208,220,5)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7594%" y="341" width="0.0802%" height="15" fill="rgb(217,89,48)" fg:x="1244" fg:w="1"/><text x="100.0094%" y="351.50"></text></g><g><title>all (1,247 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(212,113,41)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-a8fb0ec0 (1,247 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(231,127,5)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="991.50">simple-a8fb0ec0</text></g><g><title>_start (1,247 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(217,141,17)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(245,125,54)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(248,125,3)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,247 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(236,119,51)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(239,99,8)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(224,228,4)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(220,131,45)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(215,62,5)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,247 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(253,12,24)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,247 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(248,120,50)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,247 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(245,194,10)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,247 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(241,149,38)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,247 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(219,215,7)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,247 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(208,120,31)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,247 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(244,30,8)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,247 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(238,35,44)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,247 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(243,218,37)" fg:x="0" fg:w="1247"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (371 samples, 29.75%)</title><rect x="70.2486%" y="693" width="29.7514%" height="15" fill="rgb(218,169,10)" fg:x="876" fg:w="371"/><text x="70.4986%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (371 samples, 29.75%)</title><rect x="70.2486%" y="677" width="29.7514%" height="15" fill="rgb(221,144,10)" fg:x="876" fg:w="371"/><text x="70.4986%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (371 samples, 29.75%)</title><rect x="70.2486%" y="661" width="29.7514%" height="15" fill="rgb(226,41,38)" fg:x="876" fg:w="371"/><text x="70.4986%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (315 samples, 25.26%)</title><rect x="74.7394%" y="645" width="25.2606%" height="15" fill="rgb(228,3,1)" fg:x="932" fg:w="315"/><text x="74.9894%" y="655.50">engine::session::Session::evaluate_and_p..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (315 samples, 25.26%)</title><rect x="74.7394%" y="629" width="25.2606%" height="15" fill="rgb(209,129,12)" fg:x="932" fg:w="315"/><text x="74.9894%" y="639.50">engine::perform::StandardPerformer::eval..</text></g><g><title>engine::perform::StandardPerformer::perform (312 samples, 25.02%)</title><rect x="74.9800%" y="613" width="25.0200%" height="15" fill="rgb(213,136,33)" fg:x="935" fg:w="312"/><text x="75.2300%" y="623.50">engine::perform::StandardPerformer::perf..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (40 samples, 3.21%)</title><rect x="96.7923%" y="597" width="3.2077%" height="15" fill="rgb(209,181,29)" fg:x="1207" fg:w="40"/><text x="97.0423%" y="607.50">ker..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (40 samples, 3.21%)</title><rect x="96.7923%" y="581" width="3.2077%" height="15" fill="rgb(234,173,18)" fg:x="1207" fg:w="40"/><text x="97.0423%" y="591.50">&lt;pl..</text></g><g><title>plugins_rpc::querying::have_surroundings (38 samples, 3.05%)</title><rect x="96.9527%" y="565" width="3.0473%" height="15" fill="rgb(227,73,47)" fg:x="1209" fg:w="38"/><text x="97.2027%" y="575.50">plu..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (38 samples, 3.05%)</title><rect x="96.9527%" y="549" width="3.0473%" height="15" fill="rgb(234,9,34)" fg:x="1209" fg:w="38"/><text x="97.2027%" y="559.50">&lt;pl..</text></g><g><title>core::iter::adapters::try_process (37 samples, 2.97%)</title><rect x="97.0329%" y="533" width="2.9671%" height="15" fill="rgb(235,172,15)" fg:x="1210" fg:w="37"/><text x="97.2829%" y="543.50">cor..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (25 samples, 2.00%)</title><rect x="97.9952%" y="517" width="2.0048%" height="15" fill="rgb(245,61,2)" fg:x="1222" fg:w="25"/><text x="98.2452%" y="527.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (25 samples, 2.00%)</title><rect x="97.9952%" y="501" width="2.0048%" height="15" fill="rgb(238,39,47)" fg:x="1222" fg:w="25"/><text x="98.2452%" y="511.50">&lt;..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (25 samples, 2.00%)</title><rect x="97.9952%" y="485" width="2.0048%" height="15" fill="rgb(234,37,24)" fg:x="1222" fg:w="25"/><text x="98.2452%" y="495.50">p..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (23 samples, 1.84%)</title><rect x="98.1556%" y="469" width="1.8444%" height="15" fill="rgb(248,223,24)" fg:x="1224" fg:w="23"/><text x="98.4056%" y="479.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (7 samples, 0.56%)</title><rect x="99.4387%" y="453" width="0.5613%" height="15" fill="rgb(223,12,15)" fg:x="1240" fg:w="7"/><text x="99.6887%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="99.4387%" y="437" width="0.5613%" height="15" fill="rgb(249,6,3)" fg:x="1240" fg:w="7"/><text x="99.6887%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="99.4387%" y="421" width="0.5613%" height="15" fill="rgb(237,105,33)" fg:x="1240" fg:w="7"/><text x="99.6887%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="99.5990%" y="405" width="0.4010%" height="15" fill="rgb(252,208,35)" fg:x="1242" fg:w="5"/><text x="99.8490%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (5 samples, 0.40%)</title><rect x="99.5990%" y="389" width="0.4010%" height="15" fill="rgb(215,181,35)" fg:x="1242" fg:w="5"/><text x="99.8490%" y="399.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="99.8396%" y="373" width="0.1604%" height="15" fill="rgb(246,212,3)" fg:x="1245" fg:w="2"/><text x="100.0896%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="99.8396%" y="357" width="0.1604%" height="15" fill="rgb(247,156,24)" fg:x="1245" fg:w="2"/><text x="100.0896%" y="367.50"></text></g></svg></svg>