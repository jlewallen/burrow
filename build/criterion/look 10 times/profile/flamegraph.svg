<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1284"><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.1558%" y="613" width="0.1558%" height="15" fill="rgb(219,169,10)" fg:x="2" fg:w="2"/><text x="0.4058%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="0.1558%" y="597" width="0.1558%" height="15" fill="rgb(244,229,43)" fg:x="2" fg:w="2"/><text x="0.4058%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2336%" y="581" width="0.0779%" height="15" fill="rgb(254,38,20)" fg:x="3" fg:w="1"/><text x="0.4836%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2336%" y="565" width="0.0779%" height="15" fill="rgb(250,47,30)" fg:x="3" fg:w="1"/><text x="0.4836%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2336%" y="549" width="0.0779%" height="15" fill="rgb(224,124,36)" fg:x="3" fg:w="1"/><text x="0.4836%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.2336%" y="533" width="0.0779%" height="15" fill="rgb(246,68,51)" fg:x="3" fg:w="1"/><text x="0.4836%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.2336%" y="517" width="0.0779%" height="15" fill="rgb(253,43,49)" fg:x="3" fg:w="1"/><text x="0.4836%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2336%" y="501" width="0.0779%" height="15" fill="rgb(219,54,36)" fg:x="3" fg:w="1"/><text x="0.4836%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="0.0000%" y="645" width="0.3894%" height="15" fill="rgb(227,133,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (5 samples, 0.39%)</title><rect x="0.0000%" y="629" width="0.3894%" height="15" fill="rgb(247,227,15)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryEntityStorage&gt; (1 samples, 0.08%)</title><rect x="0.3115%" y="613" width="0.0779%" height="15" fill="rgb(229,96,14)" fg:x="4" fg:w="1"/><text x="0.5615%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.3115%" y="597" width="0.0779%" height="15" fill="rgb(220,79,17)" fg:x="4" fg:w="1"/><text x="0.5615%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3115%" y="581" width="0.0779%" height="15" fill="rgb(205,131,53)" fg:x="4" fg:w="1"/><text x="0.5615%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="0.3894%" y="581" width="0.0779%" height="15" fill="rgb(209,50,29)" fg:x="5" fg:w="1"/><text x="0.6394%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.3894%" y="565" width="0.0779%" height="15" fill="rgb(245,86,46)" fg:x="5" fg:w="1"/><text x="0.6394%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.3894%" y="549" width="0.0779%" height="15" fill="rgb(235,66,46)" fg:x="5" fg:w="1"/><text x="0.6394%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="0.3894%" y="533" width="0.0779%" height="15" fill="rgb(232,148,31)" fg:x="5" fg:w="1"/><text x="0.6394%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.4673%" y="501" width="0.0779%" height="15" fill="rgb(217,149,8)" fg:x="6" fg:w="1"/><text x="0.7173%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.4673%" y="485" width="0.0779%" height="15" fill="rgb(209,183,11)" fg:x="6" fg:w="1"/><text x="0.7173%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.4673%" y="469" width="0.0779%" height="15" fill="rgb(208,55,20)" fg:x="6" fg:w="1"/><text x="0.7173%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.4673%" y="453" width="0.0779%" height="15" fill="rgb(218,39,14)" fg:x="6" fg:w="1"/><text x="0.7173%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.4673%" y="437" width="0.0779%" height="15" fill="rgb(216,169,33)" fg:x="6" fg:w="1"/><text x="0.7173%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.5452%" y="437" width="0.0779%" height="15" fill="rgb(233,80,24)" fg:x="7" fg:w="1"/><text x="0.7952%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.23%)</title><rect x="0.4673%" y="565" width="0.2336%" height="15" fill="rgb(213,179,31)" fg:x="6" fg:w="3"/><text x="0.7173%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.23%)</title><rect x="0.4673%" y="549" width="0.2336%" height="15" fill="rgb(209,19,5)" fg:x="6" fg:w="3"/><text x="0.7173%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="0.4673%" y="533" width="0.2336%" height="15" fill="rgb(219,18,35)" fg:x="6" fg:w="3"/><text x="0.7173%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="0.4673%" y="517" width="0.2336%" height="15" fill="rgb(209,169,16)" fg:x="6" fg:w="3"/><text x="0.7173%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.5452%" y="501" width="0.1558%" height="15" fill="rgb(245,90,51)" fg:x="7" fg:w="2"/><text x="0.7952%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.5452%" y="485" width="0.1558%" height="15" fill="rgb(220,99,45)" fg:x="7" fg:w="2"/><text x="0.7952%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="0.5452%" y="469" width="0.1558%" height="15" fill="rgb(249,89,25)" fg:x="7" fg:w="2"/><text x="0.7952%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.5452%" y="453" width="0.1558%" height="15" fill="rgb(239,193,0)" fg:x="7" fg:w="2"/><text x="0.7952%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.6231%" y="437" width="0.0779%" height="15" fill="rgb(231,126,1)" fg:x="8" fg:w="1"/><text x="0.8731%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.6231%" y="421" width="0.0779%" height="15" fill="rgb(243,166,3)" fg:x="8" fg:w="1"/><text x="0.8731%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="0.7009%" y="485" width="0.1558%" height="15" fill="rgb(223,22,34)" fg:x="9" fg:w="2"/><text x="0.9509%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="0.7788%" y="469" width="0.0779%" height="15" fill="rgb(251,52,51)" fg:x="10" fg:w="1"/><text x="1.0288%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.8567%" y="485" width="0.0779%" height="15" fill="rgb(221,165,28)" fg:x="11" fg:w="1"/><text x="1.1067%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.8567%" y="469" width="0.0779%" height="15" fill="rgb(218,121,47)" fg:x="11" fg:w="1"/><text x="1.1067%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.8567%" y="453" width="0.0779%" height="15" fill="rgb(209,120,9)" fg:x="11" fg:w="1"/><text x="1.1067%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (8 samples, 0.62%)</title><rect x="0.3894%" y="613" width="0.6231%" height="15" fill="rgb(236,68,12)" fg:x="5" fg:w="8"/><text x="0.6394%" y="623.50"></text></g><g><title>engine::internal::Entities::prepare_entity (8 samples, 0.62%)</title><rect x="0.3894%" y="597" width="0.6231%" height="15" fill="rgb(225,194,26)" fg:x="5" fg:w="8"/><text x="0.6394%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.55%)</title><rect x="0.4673%" y="581" width="0.5452%" height="15" fill="rgb(231,84,39)" fg:x="6" fg:w="7"/><text x="0.7173%" y="591.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.31%)</title><rect x="0.7009%" y="565" width="0.3115%" height="15" fill="rgb(210,11,45)" fg:x="9" fg:w="4"/><text x="0.9509%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="0.7009%" y="549" width="0.3115%" height="15" fill="rgb(224,54,52)" fg:x="9" fg:w="4"/><text x="0.9509%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="0.7009%" y="533" width="0.3115%" height="15" fill="rgb(238,102,14)" fg:x="9" fg:w="4"/><text x="0.9509%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="0.7009%" y="517" width="0.3115%" height="15" fill="rgb(243,160,52)" fg:x="9" fg:w="4"/><text x="0.9509%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="0.7009%" y="501" width="0.3115%" height="15" fill="rgb(216,114,19)" fg:x="9" fg:w="4"/><text x="0.9509%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9346%" y="485" width="0.0779%" height="15" fill="rgb(244,166,37)" fg:x="12" fg:w="1"/><text x="1.1846%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9346%" y="469" width="0.0779%" height="15" fill="rgb(246,29,44)" fg:x="12" fg:w="1"/><text x="1.1846%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9346%" y="453" width="0.0779%" height="15" fill="rgb(215,56,53)" fg:x="12" fg:w="1"/><text x="1.1846%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9346%" y="437" width="0.0779%" height="15" fill="rgb(217,60,2)" fg:x="12" fg:w="1"/><text x="1.1846%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9346%" y="421" width="0.0779%" height="15" fill="rgb(207,26,24)" fg:x="12" fg:w="1"/><text x="1.1846%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9346%" y="405" width="0.0779%" height="15" fill="rgb(252,210,15)" fg:x="12" fg:w="1"/><text x="1.1846%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.9346%" y="389" width="0.0779%" height="15" fill="rgb(253,209,26)" fg:x="12" fg:w="1"/><text x="1.1846%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.9346%" y="373" width="0.0779%" height="15" fill="rgb(238,170,14)" fg:x="12" fg:w="1"/><text x="1.1846%" y="383.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="1.0903%" y="565" width="0.1558%" height="15" fill="rgb(216,178,15)" fg:x="14" fg:w="2"/><text x="1.3403%" y="575.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.1682%" y="549" width="0.0779%" height="15" fill="rgb(250,197,2)" fg:x="15" fg:w="1"/><text x="1.4182%" y="559.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.78%)</title><rect x="1.4798%" y="501" width="0.7788%" height="15" fill="rgb(212,70,42)" fg:x="19" fg:w="10"/><text x="1.7298%" y="511.50"></text></g><g><title>_dl_catch_exception (12 samples, 0.93%)</title><rect x="1.4019%" y="517" width="0.9346%" height="15" fill="rgb(227,213,9)" fg:x="18" fg:w="12"/><text x="1.6519%" y="527.50"></text></g><g><title>_dl_signal_exception (1 samples, 0.08%)</title><rect x="2.2586%" y="501" width="0.0779%" height="15" fill="rgb(245,99,25)" fg:x="29" fg:w="1"/><text x="2.5086%" y="511.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (26 samples, 2.02%)</title><rect x="0.3894%" y="645" width="2.0249%" height="15" fill="rgb(250,82,29)" fg:x="5" fg:w="26"/><text x="0.6394%" y="655.50">&lt;..</text></g><g><title>engine::session::Session::new (26 samples, 2.02%)</title><rect x="0.3894%" y="629" width="2.0249%" height="15" fill="rgb(241,226,54)" fg:x="5" fg:w="26"/><text x="0.6394%" y="639.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::initialize (18 samples, 1.40%)</title><rect x="1.0125%" y="613" width="1.4019%" height="15" fill="rgb(221,99,41)" fg:x="13" fg:w="18"/><text x="1.2625%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (18 samples, 1.40%)</title><rect x="1.0125%" y="597" width="1.4019%" height="15" fill="rgb(213,90,21)" fg:x="13" fg:w="18"/><text x="1.2625%" y="607.50"></text></g><g><title>libloading::os::unix::Library::open (18 samples, 1.40%)</title><rect x="1.0125%" y="581" width="1.4019%" height="15" fill="rgb(205,208,24)" fg:x="13" fg:w="18"/><text x="1.2625%" y="591.50"></text></g><g><title>dlopen (15 samples, 1.17%)</title><rect x="1.2461%" y="565" width="1.1682%" height="15" fill="rgb(246,31,12)" fg:x="16" fg:w="15"/><text x="1.4961%" y="575.50"></text></g><g><title>_dl_catch_error (14 samples, 1.09%)</title><rect x="1.3240%" y="549" width="1.0903%" height="15" fill="rgb(213,154,6)" fg:x="17" fg:w="14"/><text x="1.5740%" y="559.50"></text></g><g><title>_dl_catch_exception (13 samples, 1.01%)</title><rect x="1.4019%" y="533" width="1.0125%" height="15" fill="rgb(222,163,29)" fg:x="18" fg:w="13"/><text x="1.6519%" y="543.50"></text></g><g><title>_dl_signal_exception (1 samples, 0.08%)</title><rect x="2.3364%" y="517" width="0.0779%" height="15" fill="rgb(227,201,8)" fg:x="30" fg:w="1"/><text x="2.5864%" y="527.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.4143%" y="629" width="0.1558%" height="15" fill="rgb(233,9,32)" fg:x="31" fg:w="2"/><text x="2.6643%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.4143%" y="613" width="0.1558%" height="15" fill="rgb(217,54,24)" fg:x="31" fg:w="2"/><text x="2.6643%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="2.4143%" y="597" width="0.1558%" height="15" fill="rgb(235,192,0)" fg:x="31" fg:w="2"/><text x="2.6643%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="2.4143%" y="581" width="0.1558%" height="15" fill="rgb(235,45,9)" fg:x="31" fg:w="2"/><text x="2.6643%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="2.4143%" y="565" width="0.1558%" height="15" fill="rgb(246,42,40)" fg:x="31" fg:w="2"/><text x="2.6643%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="2.4143%" y="549" width="0.1558%" height="15" fill="rgb(248,111,24)" fg:x="31" fg:w="2"/><text x="2.6643%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="2.4143%" y="533" width="0.1558%" height="15" fill="rgb(249,65,22)" fg:x="31" fg:w="2"/><text x="2.6643%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="2.4143%" y="517" width="0.1558%" height="15" fill="rgb(238,111,51)" fg:x="31" fg:w="2"/><text x="2.6643%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="2.4143%" y="501" width="0.1558%" height="15" fill="rgb(250,118,22)" fg:x="31" fg:w="2"/><text x="2.6643%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="2.4143%" y="485" width="0.1558%" height="15" fill="rgb(234,84,26)" fg:x="31" fg:w="2"/><text x="2.6643%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="2.4143%" y="469" width="0.1558%" height="15" fill="rgb(243,172,12)" fg:x="31" fg:w="2"/><text x="2.6643%" y="479.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="2.4143%" y="453" width="0.1558%" height="15" fill="rgb(236,150,49)" fg:x="31" fg:w="2"/><text x="2.6643%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.4143%" y="437" width="0.1558%" height="15" fill="rgb(225,197,26)" fg:x="31" fg:w="2"/><text x="2.6643%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="2.5701%" y="629" width="0.0779%" height="15" fill="rgb(214,17,42)" fg:x="33" fg:w="1"/><text x="2.8201%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="2.5701%" y="613" width="0.0779%" height="15" fill="rgb(224,165,40)" fg:x="33" fg:w="1"/><text x="2.8201%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="2.5701%" y="597" width="0.0779%" height="15" fill="rgb(246,100,4)" fg:x="33" fg:w="1"/><text x="2.8201%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5701%" y="581" width="0.0779%" height="15" fill="rgb(222,103,0)" fg:x="33" fg:w="1"/><text x="2.8201%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.6480%" y="597" width="0.0779%" height="15" fill="rgb(227,189,26)" fg:x="34" fg:w="1"/><text x="2.8980%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="2.6480%" y="581" width="0.0779%" height="15" fill="rgb(214,202,17)" fg:x="34" fg:w="1"/><text x="2.8980%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="2.6480%" y="565" width="0.0779%" height="15" fill="rgb(229,111,3)" fg:x="34" fg:w="1"/><text x="2.8980%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.6480%" y="549" width="0.0779%" height="15" fill="rgb(229,172,15)" fg:x="34" fg:w="1"/><text x="2.8980%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.7259%" y="533" width="0.0779%" height="15" fill="rgb(230,224,35)" fg:x="35" fg:w="1"/><text x="2.9759%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8037%" y="517" width="0.0779%" height="15" fill="rgb(251,141,6)" fg:x="36" fg:w="1"/><text x="3.0537%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8037%" y="501" width="0.0779%" height="15" fill="rgb(225,208,6)" fg:x="36" fg:w="1"/><text x="3.0537%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8037%" y="485" width="0.0779%" height="15" fill="rgb(246,181,16)" fg:x="36" fg:w="1"/><text x="3.0537%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.23%)</title><rect x="2.7259%" y="565" width="0.2336%" height="15" fill="rgb(227,129,36)" fg:x="35" fg:w="3"/><text x="2.9759%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="2.7259%" y="549" width="0.2336%" height="15" fill="rgb(248,117,24)" fg:x="35" fg:w="3"/><text x="2.9759%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8037%" y="533" width="0.1558%" height="15" fill="rgb(214,185,35)" fg:x="36" fg:w="2"/><text x="3.0537%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.8816%" y="517" width="0.0779%" height="15" fill="rgb(236,150,34)" fg:x="37" fg:w="1"/><text x="3.1316%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.8816%" y="501" width="0.0779%" height="15" fill="rgb(243,228,27)" fg:x="37" fg:w="1"/><text x="3.1316%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.0374%" y="485" width="0.0779%" height="15" fill="rgb(245,77,44)" fg:x="39" fg:w="1"/><text x="3.2874%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="2.9595%" y="565" width="0.2336%" height="15" fill="rgb(235,214,42)" fg:x="38" fg:w="3"/><text x="3.2095%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.23%)</title><rect x="2.9595%" y="549" width="0.2336%" height="15" fill="rgb(221,74,3)" fg:x="38" fg:w="3"/><text x="3.2095%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="2.9595%" y="533" width="0.2336%" height="15" fill="rgb(206,121,29)" fg:x="38" fg:w="3"/><text x="3.2095%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="2.9595%" y="517" width="0.2336%" height="15" fill="rgb(249,131,53)" fg:x="38" fg:w="3"/><text x="3.2095%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.0374%" y="501" width="0.1558%" height="15" fill="rgb(236,170,29)" fg:x="39" fg:w="2"/><text x="3.2874%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.1153%" y="485" width="0.0779%" height="15" fill="rgb(247,96,15)" fg:x="40" fg:w="1"/><text x="3.3653%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.1153%" y="469" width="0.0779%" height="15" fill="rgb(211,210,7)" fg:x="40" fg:w="1"/><text x="3.3653%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.08%)</title><rect x="3.1931%" y="469" width="0.0779%" height="15" fill="rgb(240,88,50)" fg:x="41" fg:w="1"/><text x="3.4431%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="3.1931%" y="517" width="0.1558%" height="15" fill="rgb(209,229,26)" fg:x="41" fg:w="2"/><text x="3.4431%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.1931%" y="501" width="0.1558%" height="15" fill="rgb(210,68,23)" fg:x="41" fg:w="2"/><text x="3.4431%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.1931%" y="485" width="0.1558%" height="15" fill="rgb(229,180,13)" fg:x="41" fg:w="2"/><text x="3.4431%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2710%" y="469" width="0.0779%" height="15" fill="rgb(236,53,44)" fg:x="42" fg:w="1"/><text x="3.5210%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.2710%" y="453" width="0.0779%" height="15" fill="rgb(244,214,29)" fg:x="42" fg:w="1"/><text x="3.5210%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2710%" y="437" width="0.0779%" height="15" fill="rgb(220,75,29)" fg:x="42" fg:w="1"/><text x="3.5210%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.2710%" y="421" width="0.0779%" height="15" fill="rgb(214,183,37)" fg:x="42" fg:w="1"/><text x="3.5210%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3489%" y="517" width="0.0779%" height="15" fill="rgb(239,117,29)" fg:x="43" fg:w="1"/><text x="3.5989%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (10 samples, 0.78%)</title><rect x="2.7259%" y="597" width="0.7788%" height="15" fill="rgb(237,171,35)" fg:x="35" fg:w="10"/><text x="2.9759%" y="607.50"></text></g><g><title>engine::session::Session::check_for_changes (10 samples, 0.78%)</title><rect x="2.7259%" y="581" width="0.7788%" height="15" fill="rgb(229,178,53)" fg:x="35" fg:w="10"/><text x="2.9759%" y="591.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.31%)</title><rect x="3.1931%" y="565" width="0.3115%" height="15" fill="rgb(210,102,19)" fg:x="41" fg:w="4"/><text x="3.4431%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.31%)</title><rect x="3.1931%" y="549" width="0.3115%" height="15" fill="rgb(235,127,22)" fg:x="41" fg:w="4"/><text x="3.4431%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.31%)</title><rect x="3.1931%" y="533" width="0.3115%" height="15" fill="rgb(244,31,31)" fg:x="41" fg:w="4"/><text x="3.4431%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.4268%" y="517" width="0.0779%" height="15" fill="rgb(231,43,21)" fg:x="44" fg:w="1"/><text x="3.6768%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="3.4268%" y="501" width="0.0779%" height="15" fill="rgb(217,131,35)" fg:x="44" fg:w="1"/><text x="3.6768%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.4268%" y="485" width="0.0779%" height="15" fill="rgb(221,149,4)" fg:x="44" fg:w="1"/><text x="3.6768%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.4268%" y="469" width="0.0779%" height="15" fill="rgb(232,170,28)" fg:x="44" fg:w="1"/><text x="3.6768%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.4268%" y="453" width="0.0779%" height="15" fill="rgb(238,56,10)" fg:x="44" fg:w="1"/><text x="3.6768%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4268%" y="437" width="0.0779%" height="15" fill="rgb(235,196,14)" fg:x="44" fg:w="1"/><text x="3.6768%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.4268%" y="421" width="0.0779%" height="15" fill="rgb(216,45,48)" fg:x="44" fg:w="1"/><text x="3.6768%" y="431.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.93%)</title><rect x="2.6480%" y="629" width="0.9346%" height="15" fill="rgb(238,213,17)" fg:x="34" fg:w="12"/><text x="2.8980%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (12 samples, 0.93%)</title><rect x="2.6480%" y="613" width="0.9346%" height="15" fill="rgb(212,13,2)" fg:x="34" fg:w="12"/><text x="2.8980%" y="623.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="3.5047%" y="597" width="0.0779%" height="15" fill="rgb(240,114,20)" fg:x="45" fg:w="1"/><text x="3.7547%" y="607.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="3.5047%" y="581" width="0.0779%" height="15" fill="rgb(228,41,40)" fg:x="45" fg:w="1"/><text x="3.7547%" y="591.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="3.5047%" y="565" width="0.0779%" height="15" fill="rgb(244,132,35)" fg:x="45" fg:w="1"/><text x="3.7547%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="3.5047%" y="549" width="0.0779%" height="15" fill="rgb(253,189,4)" fg:x="45" fg:w="1"/><text x="3.7547%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="3.5047%" y="533" width="0.0779%" height="15" fill="rgb(224,37,19)" fg:x="45" fg:w="1"/><text x="3.7547%" y="543.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="3.5047%" y="517" width="0.0779%" height="15" fill="rgb(235,223,18)" fg:x="45" fg:w="1"/><text x="3.7547%" y="527.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="3.5047%" y="501" width="0.0779%" height="15" fill="rgb(235,163,25)" fg:x="45" fg:w="1"/><text x="3.7547%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.5826%" y="597" width="0.0779%" height="15" fill="rgb(217,145,28)" fg:x="46" fg:w="1"/><text x="3.8326%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="3.5826%" y="629" width="0.1558%" height="15" fill="rgb(223,223,32)" fg:x="46" fg:w="2"/><text x="3.8326%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="3.5826%" y="613" width="0.1558%" height="15" fill="rgb(227,189,39)" fg:x="46" fg:w="2"/><text x="3.8326%" y="623.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="3.6604%" y="597" width="0.0779%" height="15" fill="rgb(248,10,22)" fg:x="47" fg:w="1"/><text x="3.9104%" y="607.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="3.6604%" y="581" width="0.0779%" height="15" fill="rgb(248,46,39)" fg:x="47" fg:w="1"/><text x="3.9104%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="3.6604%" y="565" width="0.0779%" height="15" fill="rgb(248,113,48)" fg:x="47" fg:w="1"/><text x="3.9104%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.6604%" y="549" width="0.0779%" height="15" fill="rgb(245,16,25)" fg:x="47" fg:w="1"/><text x="3.9104%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6604%" y="533" width="0.0779%" height="15" fill="rgb(249,152,16)" fg:x="47" fg:w="1"/><text x="3.9104%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.7383%" y="629" width="0.0779%" height="15" fill="rgb(250,16,1)" fg:x="48" fg:w="1"/><text x="3.9883%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.7383%" y="613" width="0.0779%" height="15" fill="rgb(249,138,3)" fg:x="48" fg:w="1"/><text x="3.9883%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="3.7383%" y="597" width="0.0779%" height="15" fill="rgb(227,71,41)" fg:x="48" fg:w="1"/><text x="3.9883%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="3.7383%" y="581" width="0.0779%" height="15" fill="rgb(209,184,23)" fg:x="48" fg:w="1"/><text x="3.9883%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.7383%" y="565" width="0.0779%" height="15" fill="rgb(223,215,31)" fg:x="48" fg:w="1"/><text x="3.9883%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.7383%" y="549" width="0.0779%" height="15" fill="rgb(210,146,28)" fg:x="48" fg:w="1"/><text x="3.9883%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.7383%" y="533" width="0.0779%" height="15" fill="rgb(209,183,41)" fg:x="48" fg:w="1"/><text x="3.9883%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.7383%" y="517" width="0.0779%" height="15" fill="rgb(209,224,45)" fg:x="48" fg:w="1"/><text x="3.9883%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="3.7383%" y="501" width="0.0779%" height="15" fill="rgb(224,209,51)" fg:x="48" fg:w="1"/><text x="3.9883%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.7383%" y="485" width="0.0779%" height="15" fill="rgb(223,17,39)" fg:x="48" fg:w="1"/><text x="3.9883%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.7383%" y="469" width="0.0779%" height="15" fill="rgb(234,204,37)" fg:x="48" fg:w="1"/><text x="3.9883%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7383%" y="453" width="0.0779%" height="15" fill="rgb(236,120,5)" fg:x="48" fg:w="1"/><text x="3.9883%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.7383%" y="437" width="0.0779%" height="15" fill="rgb(248,97,27)" fg:x="48" fg:w="1"/><text x="3.9883%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="3.7383%" y="421" width="0.0779%" height="15" fill="rgb(240,66,17)" fg:x="48" fg:w="1"/><text x="3.9883%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.7383%" y="405" width="0.0779%" height="15" fill="rgb(210,79,3)" fg:x="48" fg:w="1"/><text x="3.9883%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.7383%" y="389" width="0.0779%" height="15" fill="rgb(214,176,27)" fg:x="48" fg:w="1"/><text x="3.9883%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.7383%" y="373" width="0.0779%" height="15" fill="rgb(235,185,3)" fg:x="48" fg:w="1"/><text x="3.9883%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.7383%" y="357" width="0.0779%" height="15" fill="rgb(227,24,12)" fg:x="48" fg:w="1"/><text x="3.9883%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.8162%" y="549" width="0.0779%" height="15" fill="rgb(252,169,48)" fg:x="49" fg:w="1"/><text x="4.0662%" y="559.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.8162%" y="533" width="0.0779%" height="15" fill="rgb(212,65,1)" fg:x="49" fg:w="1"/><text x="4.0662%" y="543.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="3.8162%" y="517" width="0.0779%" height="15" fill="rgb(242,39,24)" fg:x="49" fg:w="1"/><text x="4.0662%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8162%" y="501" width="0.0779%" height="15" fill="rgb(249,32,23)" fg:x="49" fg:w="1"/><text x="4.0662%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.8162%" y="485" width="0.0779%" height="15" fill="rgb(251,195,23)" fg:x="49" fg:w="1"/><text x="4.0662%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.8162%" y="469" width="0.0779%" height="15" fill="rgb(236,174,8)" fg:x="49" fg:w="1"/><text x="4.0662%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.8162%" y="453" width="0.0779%" height="15" fill="rgb(220,197,8)" fg:x="49" fg:w="1"/><text x="4.0662%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.8162%" y="437" width="0.0779%" height="15" fill="rgb(240,108,37)" fg:x="49" fg:w="1"/><text x="4.0662%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.8162%" y="421" width="0.0779%" height="15" fill="rgb(232,176,24)" fg:x="49" fg:w="1"/><text x="4.0662%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.8162%" y="405" width="0.0779%" height="15" fill="rgb(243,35,29)" fg:x="49" fg:w="1"/><text x="4.0662%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.8162%" y="389" width="0.0779%" height="15" fill="rgb(210,37,18)" fg:x="49" fg:w="1"/><text x="4.0662%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.8162%" y="373" width="0.0779%" height="15" fill="rgb(224,184,40)" fg:x="49" fg:w="1"/><text x="4.0662%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.8162%" y="357" width="0.0779%" height="15" fill="rgb(236,39,29)" fg:x="49" fg:w="1"/><text x="4.0662%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.8162%" y="341" width="0.0779%" height="15" fill="rgb(232,48,39)" fg:x="49" fg:w="1"/><text x="4.0662%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8162%" y="325" width="0.0779%" height="15" fill="rgb(236,34,42)" fg:x="49" fg:w="1"/><text x="4.0662%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="3.8162%" y="613" width="0.1558%" height="15" fill="rgb(243,106,37)" fg:x="49" fg:w="2"/><text x="4.0662%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.8162%" y="597" width="0.1558%" height="15" fill="rgb(218,96,6)" fg:x="49" fg:w="2"/><text x="4.0662%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="3.8162%" y="581" width="0.1558%" height="15" fill="rgb(235,130,12)" fg:x="49" fg:w="2"/><text x="4.0662%" y="591.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="3.8162%" y="565" width="0.1558%" height="15" fill="rgb(231,95,0)" fg:x="49" fg:w="2"/><text x="4.0662%" y="575.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="3.8941%" y="549" width="0.0779%" height="15" fill="rgb(228,12,23)" fg:x="50" fg:w="1"/><text x="4.1441%" y="559.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="3.8941%" y="533" width="0.0779%" height="15" fill="rgb(216,12,1)" fg:x="50" fg:w="1"/><text x="4.1441%" y="543.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="3.8941%" y="517" width="0.0779%" height="15" fill="rgb(219,59,3)" fg:x="50" fg:w="1"/><text x="4.1441%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Exit&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8941%" y="501" width="0.0779%" height="15" fill="rgb(215,208,46)" fg:x="50" fg:w="1"/><text x="4.1441%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8941%" y="485" width="0.0779%" height="15" fill="rgb(254,224,29)" fg:x="50" fg:w="1"/><text x="4.1441%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.8941%" y="469" width="0.0779%" height="15" fill="rgb(232,14,29)" fg:x="50" fg:w="1"/><text x="4.1441%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.8941%" y="453" width="0.0779%" height="15" fill="rgb(208,45,52)" fg:x="50" fg:w="1"/><text x="4.1441%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8941%" y="437" width="0.0779%" height="15" fill="rgb(234,191,28)" fg:x="50" fg:w="1"/><text x="4.1441%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8941%" y="421" width="0.0779%" height="15" fill="rgb(244,67,43)" fg:x="50" fg:w="1"/><text x="4.1441%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8941%" y="405" width="0.0779%" height="15" fill="rgb(236,189,24)" fg:x="50" fg:w="1"/><text x="4.1441%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="3.9720%" y="581" width="0.0779%" height="15" fill="rgb(239,214,33)" fg:x="51" fg:w="1"/><text x="4.2220%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="3.9720%" y="565" width="0.0779%" height="15" fill="rgb(226,176,41)" fg:x="51" fg:w="1"/><text x="4.2220%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9720%" y="549" width="0.0779%" height="15" fill="rgb(248,47,8)" fg:x="51" fg:w="1"/><text x="4.2220%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.23%)</title><rect x="4.1277%" y="533" width="0.2336%" height="15" fill="rgb(218,81,44)" fg:x="53" fg:w="3"/><text x="4.3777%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.23%)</title><rect x="4.1277%" y="517" width="0.2336%" height="15" fill="rgb(213,98,6)" fg:x="53" fg:w="3"/><text x="4.3777%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.2056%" y="501" width="0.1558%" height="15" fill="rgb(222,85,22)" fg:x="54" fg:w="2"/><text x="4.4556%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="4.2056%" y="485" width="0.1558%" height="15" fill="rgb(239,46,39)" fg:x="54" fg:w="2"/><text x="4.4556%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="4.2056%" y="469" width="0.1558%" height="15" fill="rgb(237,12,29)" fg:x="54" fg:w="2"/><text x="4.4556%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.2835%" y="453" width="0.0779%" height="15" fill="rgb(214,77,8)" fg:x="55" fg:w="1"/><text x="4.5335%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.2835%" y="437" width="0.0779%" height="15" fill="rgb(217,168,37)" fg:x="55" fg:w="1"/><text x="4.5335%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.3614%" y="517" width="0.1558%" height="15" fill="rgb(221,217,23)" fg:x="56" fg:w="2"/><text x="4.6114%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.3614%" y="501" width="0.1558%" height="15" fill="rgb(243,229,36)" fg:x="56" fg:w="2"/><text x="4.6114%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4393%" y="485" width="0.0779%" height="15" fill="rgb(251,163,40)" fg:x="57" fg:w="1"/><text x="4.6893%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4393%" y="469" width="0.0779%" height="15" fill="rgb(237,222,12)" fg:x="57" fg:w="1"/><text x="4.6893%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4393%" y="453" width="0.0779%" height="15" fill="rgb(248,132,6)" fg:x="57" fg:w="1"/><text x="4.6893%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4393%" y="437" width="0.0779%" height="15" fill="rgb(227,167,50)" fg:x="57" fg:w="1"/><text x="4.6893%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4393%" y="421" width="0.0779%" height="15" fill="rgb(242,84,37)" fg:x="57" fg:w="1"/><text x="4.6893%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.23%)</title><rect x="4.6729%" y="501" width="0.2336%" height="15" fill="rgb(212,4,50)" fg:x="60" fg:w="3"/><text x="4.9229%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.23%)</title><rect x="4.6729%" y="485" width="0.2336%" height="15" fill="rgb(230,228,32)" fg:x="60" fg:w="3"/><text x="4.9229%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.8287%" y="469" width="0.0779%" height="15" fill="rgb(248,217,23)" fg:x="62" fg:w="1"/><text x="5.0787%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.8287%" y="453" width="0.0779%" height="15" fill="rgb(238,197,32)" fg:x="62" fg:w="1"/><text x="5.0787%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (13 samples, 1.01%)</title><rect x="4.1277%" y="549" width="1.0125%" height="15" fill="rgb(236,106,1)" fg:x="53" fg:w="13"/><text x="4.3777%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.78%)</title><rect x="4.3614%" y="533" width="0.7788%" height="15" fill="rgb(219,228,13)" fg:x="56" fg:w="10"/><text x="4.6114%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.62%)</title><rect x="4.5171%" y="517" width="0.6231%" height="15" fill="rgb(238,30,35)" fg:x="58" fg:w="8"/><text x="4.7671%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="4.9065%" y="501" width="0.2336%" height="15" fill="rgb(236,70,23)" fg:x="63" fg:w="3"/><text x="5.1565%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0623%" y="485" width="0.0779%" height="15" fill="rgb(249,104,48)" fg:x="65" fg:w="1"/><text x="5.3123%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.0623%" y="469" width="0.0779%" height="15" fill="rgb(254,117,50)" fg:x="65" fg:w="1"/><text x="5.3123%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.2960%" y="501" width="0.0779%" height="15" fill="rgb(223,152,4)" fg:x="68" fg:w="1"/><text x="5.5460%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.4517%" y="469" width="0.0779%" height="15" fill="rgb(245,6,2)" fg:x="70" fg:w="1"/><text x="5.7017%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.4517%" y="453" width="0.0779%" height="15" fill="rgb(249,150,24)" fg:x="70" fg:w="1"/><text x="5.7017%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.4517%" y="437" width="0.0779%" height="15" fill="rgb(228,185,42)" fg:x="70" fg:w="1"/><text x="5.7017%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="5.1402%" y="549" width="0.4673%" height="15" fill="rgb(226,39,33)" fg:x="66" fg:w="6"/><text x="5.3902%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.47%)</title><rect x="5.1402%" y="533" width="0.4673%" height="15" fill="rgb(221,166,19)" fg:x="66" fg:w="6"/><text x="5.3902%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.39%)</title><rect x="5.2181%" y="517" width="0.3894%" height="15" fill="rgb(209,109,2)" fg:x="67" fg:w="5"/><text x="5.4681%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="5.3738%" y="501" width="0.2336%" height="15" fill="rgb(252,216,26)" fg:x="69" fg:w="3"/><text x="5.6238%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.4517%" y="485" width="0.1558%" height="15" fill="rgb(227,173,36)" fg:x="70" fg:w="2"/><text x="5.7017%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.5296%" y="469" width="0.0779%" height="15" fill="rgb(209,90,7)" fg:x="71" fg:w="1"/><text x="5.7796%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6075%" y="501" width="0.0779%" height="15" fill="rgb(250,194,11)" fg:x="72" fg:w="1"/><text x="5.8575%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6075%" y="485" width="0.0779%" height="15" fill="rgb(220,72,50)" fg:x="72" fg:w="1"/><text x="5.8575%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="5.6854%" y="501" width="0.0779%" height="15" fill="rgb(222,106,48)" fg:x="73" fg:w="1"/><text x="5.9354%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.6854%" y="485" width="0.0779%" height="15" fill="rgb(216,220,45)" fg:x="73" fg:w="1"/><text x="5.9354%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6854%" y="469" width="0.0779%" height="15" fill="rgb(234,112,18)" fg:x="73" fg:w="1"/><text x="5.9354%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.7632%" y="469" width="0.0779%" height="15" fill="rgb(206,179,9)" fg:x="74" fg:w="1"/><text x="6.0132%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7632%" y="453" width="0.0779%" height="15" fill="rgb(215,115,40)" fg:x="74" fg:w="1"/><text x="6.0132%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7632%" y="437" width="0.0779%" height="15" fill="rgb(222,69,34)" fg:x="74" fg:w="1"/><text x="6.0132%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7632%" y="421" width="0.0779%" height="15" fill="rgb(209,161,10)" fg:x="74" fg:w="1"/><text x="6.0132%" y="431.50"></text></g><g><title>engine::session::Session::flush (25 samples, 1.95%)</title><rect x="3.9720%" y="613" width="1.9470%" height="15" fill="rgb(217,6,38)" fg:x="51" fg:w="25"/><text x="4.2220%" y="623.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (25 samples, 1.95%)</title><rect x="3.9720%" y="597" width="1.9470%" height="15" fill="rgb(229,229,48)" fg:x="51" fg:w="25"/><text x="4.2220%" y="607.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (24 samples, 1.87%)</title><rect x="4.0498%" y="581" width="1.8692%" height="15" fill="rgb(225,21,28)" fg:x="52" fg:w="24"/><text x="4.2998%" y="591.50">e..</text></g><g><title>engine::session::Session::check_for_changes (23 samples, 1.79%)</title><rect x="4.1277%" y="565" width="1.7913%" height="15" fill="rgb(206,33,13)" fg:x="53" fg:w="23"/><text x="4.3777%" y="575.50">e..</text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.31%)</title><rect x="5.6075%" y="549" width="0.3115%" height="15" fill="rgb(242,178,17)" fg:x="72" fg:w="4"/><text x="5.8575%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.31%)</title><rect x="5.6075%" y="533" width="0.3115%" height="15" fill="rgb(220,162,5)" fg:x="72" fg:w="4"/><text x="5.8575%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.31%)</title><rect x="5.6075%" y="517" width="0.3115%" height="15" fill="rgb(210,33,43)" fg:x="72" fg:w="4"/><text x="5.8575%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="5.7632%" y="501" width="0.1558%" height="15" fill="rgb(216,116,54)" fg:x="74" fg:w="2"/><text x="6.0132%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7632%" y="485" width="0.1558%" height="15" fill="rgb(249,92,24)" fg:x="74" fg:w="2"/><text x="6.0132%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.8411%" y="469" width="0.0779%" height="15" fill="rgb(231,189,14)" fg:x="75" fg:w="1"/><text x="6.0911%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8411%" y="453" width="0.0779%" height="15" fill="rgb(230,8,41)" fg:x="75" fg:w="1"/><text x="6.0911%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.9190%" y="613" width="0.0779%" height="15" fill="rgb(249,7,27)" fg:x="76" fg:w="1"/><text x="6.1690%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.23%)</title><rect x="5.9969%" y="581" width="0.2336%" height="15" fill="rgb(232,86,5)" fg:x="77" fg:w="3"/><text x="6.2469%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (3 samples, 0.23%)</title><rect x="5.9969%" y="565" width="0.2336%" height="15" fill="rgb(224,175,18)" fg:x="77" fg:w="3"/><text x="6.2469%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.23%)</title><rect x="5.9969%" y="549" width="0.2336%" height="15" fill="rgb(220,129,12)" fg:x="77" fg:w="3"/><text x="6.2469%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.23%)</title><rect x="5.9969%" y="533" width="0.2336%" height="15" fill="rgb(210,19,36)" fg:x="77" fg:w="3"/><text x="6.2469%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.23%)</title><rect x="5.9969%" y="517" width="0.2336%" height="15" fill="rgb(219,96,14)" fg:x="77" fg:w="3"/><text x="6.2469%" y="527.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="5.9969%" y="501" width="0.2336%" height="15" fill="rgb(249,106,1)" fg:x="77" fg:w="3"/><text x="6.2469%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.31%)</title><rect x="5.9969%" y="597" width="0.3115%" height="15" fill="rgb(249,155,20)" fg:x="77" fg:w="4"/><text x="6.2469%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="6.2305%" y="581" width="0.0779%" height="15" fill="rgb(244,168,9)" fg:x="80" fg:w="1"/><text x="6.4805%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2305%" y="565" width="0.0779%" height="15" fill="rgb(216,23,50)" fg:x="80" fg:w="1"/><text x="6.4805%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2305%" y="549" width="0.0779%" height="15" fill="rgb(224,219,20)" fg:x="80" fg:w="1"/><text x="6.4805%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.2305%" y="533" width="0.0779%" height="15" fill="rgb(222,156,15)" fg:x="80" fg:w="1"/><text x="6.4805%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.2305%" y="517" width="0.0779%" height="15" fill="rgb(231,97,17)" fg:x="80" fg:w="1"/><text x="6.4805%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.2305%" y="501" width="0.0779%" height="15" fill="rgb(218,70,48)" fg:x="80" fg:w="1"/><text x="6.4805%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.2305%" y="485" width="0.0779%" height="15" fill="rgb(212,196,52)" fg:x="80" fg:w="1"/><text x="6.4805%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.2305%" y="469" width="0.0779%" height="15" fill="rgb(243,203,18)" fg:x="80" fg:w="1"/><text x="6.4805%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.2305%" y="453" width="0.0779%" height="15" fill="rgb(252,125,41)" fg:x="80" fg:w="1"/><text x="6.4805%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.2305%" y="437" width="0.0779%" height="15" fill="rgb(223,180,33)" fg:x="80" fg:w="1"/><text x="6.4805%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.2305%" y="421" width="0.0779%" height="15" fill="rgb(254,159,46)" fg:x="80" fg:w="1"/><text x="6.4805%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.2305%" y="405" width="0.0779%" height="15" fill="rgb(254,38,10)" fg:x="80" fg:w="1"/><text x="6.4805%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2305%" y="389" width="0.0779%" height="15" fill="rgb(208,217,32)" fg:x="80" fg:w="1"/><text x="6.4805%" y="399.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.3084%" y="581" width="0.0779%" height="15" fill="rgb(221,120,13)" fg:x="81" fg:w="1"/><text x="6.5584%" y="591.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.3084%" y="565" width="0.0779%" height="15" fill="rgb(246,54,52)" fg:x="81" fg:w="1"/><text x="6.5584%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3084%" y="549" width="0.0779%" height="15" fill="rgb(242,34,25)" fg:x="81" fg:w="1"/><text x="6.5584%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3084%" y="533" width="0.0779%" height="15" fill="rgb(247,209,9)" fg:x="81" fg:w="1"/><text x="6.5584%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.3084%" y="517" width="0.0779%" height="15" fill="rgb(228,71,26)" fg:x="81" fg:w="1"/><text x="6.5584%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.3084%" y="501" width="0.0779%" height="15" fill="rgb(222,145,49)" fg:x="81" fg:w="1"/><text x="6.5584%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.3084%" y="485" width="0.0779%" height="15" fill="rgb(218,121,17)" fg:x="81" fg:w="1"/><text x="6.5584%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3084%" y="469" width="0.0779%" height="15" fill="rgb(244,50,7)" fg:x="81" fg:w="1"/><text x="6.5584%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3084%" y="453" width="0.0779%" height="15" fill="rgb(246,229,37)" fg:x="81" fg:w="1"/><text x="6.5584%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.3084%" y="437" width="0.0779%" height="15" fill="rgb(225,18,5)" fg:x="81" fg:w="1"/><text x="6.5584%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.3084%" y="421" width="0.0779%" height="15" fill="rgb(213,204,8)" fg:x="81" fg:w="1"/><text x="6.5584%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.3084%" y="405" width="0.0779%" height="15" fill="rgb(238,103,6)" fg:x="81" fg:w="1"/><text x="6.5584%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.3084%" y="389" width="0.0779%" height="15" fill="rgb(222,25,35)" fg:x="81" fg:w="1"/><text x="6.5584%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3084%" y="373" width="0.0779%" height="15" fill="rgb(213,203,35)" fg:x="81" fg:w="1"/><text x="6.5584%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="6.3863%" y="581" width="0.0779%" height="15" fill="rgb(221,79,53)" fg:x="82" fg:w="1"/><text x="6.6363%" y="591.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3863%" y="565" width="0.0779%" height="15" fill="rgb(243,200,35)" fg:x="82" fg:w="1"/><text x="6.6363%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3863%" y="549" width="0.0779%" height="15" fill="rgb(248,60,25)" fg:x="82" fg:w="1"/><text x="6.6363%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3863%" y="533" width="0.0779%" height="15" fill="rgb(227,53,46)" fg:x="82" fg:w="1"/><text x="6.6363%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.3863%" y="517" width="0.0779%" height="15" fill="rgb(216,120,32)" fg:x="82" fg:w="1"/><text x="6.6363%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.3863%" y="501" width="0.0779%" height="15" fill="rgb(220,134,1)" fg:x="82" fg:w="1"/><text x="6.6363%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.3863%" y="485" width="0.0779%" height="15" fill="rgb(237,168,5)" fg:x="82" fg:w="1"/><text x="6.6363%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3863%" y="469" width="0.0779%" height="15" fill="rgb(231,100,33)" fg:x="82" fg:w="1"/><text x="6.6363%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.3863%" y="453" width="0.0779%" height="15" fill="rgb(236,177,47)" fg:x="82" fg:w="1"/><text x="6.6363%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.3863%" y="437" width="0.0779%" height="15" fill="rgb(235,7,49)" fg:x="82" fg:w="1"/><text x="6.6363%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.3863%" y="421" width="0.0779%" height="15" fill="rgb(232,119,22)" fg:x="82" fg:w="1"/><text x="6.6363%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.3863%" y="405" width="0.0779%" height="15" fill="rgb(254,73,53)" fg:x="82" fg:w="1"/><text x="6.6363%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.3863%" y="389" width="0.0779%" height="15" fill="rgb(251,35,20)" fg:x="82" fg:w="1"/><text x="6.6363%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3863%" y="373" width="0.0779%" height="15" fill="rgb(241,119,20)" fg:x="82" fg:w="1"/><text x="6.6363%" y="383.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.55%)</title><rect x="5.9969%" y="613" width="0.5452%" height="15" fill="rgb(207,102,14)" fg:x="77" fg:w="7"/><text x="6.2469%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.23%)</title><rect x="6.3084%" y="597" width="0.2336%" height="15" fill="rgb(248,201,50)" fg:x="81" fg:w="3"/><text x="6.5584%" y="607.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="6.4642%" y="581" width="0.0779%" height="15" fill="rgb(222,185,44)" fg:x="83" fg:w="1"/><text x="6.7142%" y="591.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.4642%" y="565" width="0.0779%" height="15" fill="rgb(218,107,18)" fg:x="83" fg:w="1"/><text x="6.7142%" y="575.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4642%" y="549" width="0.0779%" height="15" fill="rgb(237,177,39)" fg:x="83" fg:w="1"/><text x="6.7142%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4642%" y="533" width="0.0779%" height="15" fill="rgb(246,69,6)" fg:x="83" fg:w="1"/><text x="6.7142%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4642%" y="517" width="0.0779%" height="15" fill="rgb(234,208,37)" fg:x="83" fg:w="1"/><text x="6.7142%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4642%" y="501" width="0.0779%" height="15" fill="rgb(225,4,6)" fg:x="83" fg:w="1"/><text x="6.7142%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4642%" y="485" width="0.0779%" height="15" fill="rgb(233,45,0)" fg:x="83" fg:w="1"/><text x="6.7142%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4642%" y="469" width="0.0779%" height="15" fill="rgb(226,136,5)" fg:x="83" fg:w="1"/><text x="6.7142%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4642%" y="453" width="0.0779%" height="15" fill="rgb(211,91,47)" fg:x="83" fg:w="1"/><text x="6.7142%" y="463.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.5421%" y="613" width="0.0779%" height="15" fill="rgb(242,88,51)" fg:x="84" fg:w="1"/><text x="6.7921%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="6.5421%" y="597" width="0.0779%" height="15" fill="rgb(230,91,28)" fg:x="84" fg:w="1"/><text x="6.7921%" y="607.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="6.5421%" y="581" width="0.0779%" height="15" fill="rgb(254,186,29)" fg:x="84" fg:w="1"/><text x="6.7921%" y="591.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="6.6199%" y="613" width="0.0779%" height="15" fill="rgb(238,6,4)" fg:x="85" fg:w="1"/><text x="6.8699%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.6199%" y="597" width="0.0779%" height="15" fill="rgb(221,151,16)" fg:x="85" fg:w="1"/><text x="6.8699%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="6.6199%" y="581" width="0.0779%" height="15" fill="rgb(251,143,52)" fg:x="85" fg:w="1"/><text x="6.8699%" y="591.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="6.6199%" y="565" width="0.0779%" height="15" fill="rgb(206,90,15)" fg:x="85" fg:w="1"/><text x="6.8699%" y="575.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="6.6199%" y="549" width="0.0779%" height="15" fill="rgb(218,35,8)" fg:x="85" fg:w="1"/><text x="6.8699%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.6199%" y="533" width="0.0779%" height="15" fill="rgb(239,215,6)" fg:x="85" fg:w="1"/><text x="6.8699%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.6199%" y="517" width="0.0779%" height="15" fill="rgb(245,116,39)" fg:x="85" fg:w="1"/><text x="6.8699%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.6199%" y="501" width="0.0779%" height="15" fill="rgb(242,65,28)" fg:x="85" fg:w="1"/><text x="6.8699%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.6199%" y="485" width="0.0779%" height="15" fill="rgb(252,132,53)" fg:x="85" fg:w="1"/><text x="6.8699%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.6199%" y="469" width="0.0779%" height="15" fill="rgb(224,159,50)" fg:x="85" fg:w="1"/><text x="6.8699%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.6199%" y="453" width="0.0779%" height="15" fill="rgb(224,93,4)" fg:x="85" fg:w="1"/><text x="6.8699%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.6199%" y="437" width="0.0779%" height="15" fill="rgb(208,81,34)" fg:x="85" fg:w="1"/><text x="6.8699%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="6.6199%" y="421" width="0.0779%" height="15" fill="rgb(233,92,54)" fg:x="85" fg:w="1"/><text x="6.8699%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="6.6199%" y="405" width="0.0779%" height="15" fill="rgb(237,21,14)" fg:x="85" fg:w="1"/><text x="6.8699%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="6.6199%" y="389" width="0.0779%" height="15" fill="rgb(249,128,51)" fg:x="85" fg:w="1"/><text x="6.8699%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="6.6199%" y="373" width="0.0779%" height="15" fill="rgb(223,129,24)" fg:x="85" fg:w="1"/><text x="6.8699%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="6.6199%" y="357" width="0.0779%" height="15" fill="rgb(231,168,25)" fg:x="85" fg:w="1"/><text x="6.8699%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6199%" y="341" width="0.0779%" height="15" fill="rgb(224,39,20)" fg:x="85" fg:w="1"/><text x="6.8699%" y="351.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (38 samples, 2.96%)</title><rect x="3.8162%" y="629" width="2.9595%" height="15" fill="rgb(225,152,53)" fg:x="49" fg:w="38"/><text x="4.0662%" y="639.50">plu..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="6.6978%" y="613" width="0.0779%" height="15" fill="rgb(252,17,24)" fg:x="86" fg:w="1"/><text x="6.9478%" y="623.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="6.6978%" y="597" width="0.0779%" height="15" fill="rgb(250,114,30)" fg:x="86" fg:w="1"/><text x="6.9478%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6978%" y="581" width="0.0779%" height="15" fill="rgb(229,5,4)" fg:x="86" fg:w="1"/><text x="6.9478%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6978%" y="565" width="0.0779%" height="15" fill="rgb(225,176,49)" fg:x="86" fg:w="1"/><text x="6.9478%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="6.7757%" y="597" width="0.0779%" height="15" fill="rgb(224,221,49)" fg:x="87" fg:w="1"/><text x="7.0257%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="6.7757%" y="581" width="0.0779%" height="15" fill="rgb(253,169,27)" fg:x="87" fg:w="1"/><text x="7.0257%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7757%" y="565" width="0.0779%" height="15" fill="rgb(211,206,16)" fg:x="87" fg:w="1"/><text x="7.0257%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.7757%" y="549" width="0.0779%" height="15" fill="rgb(244,87,35)" fg:x="87" fg:w="1"/><text x="7.0257%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.7757%" y="533" width="0.0779%" height="15" fill="rgb(246,28,10)" fg:x="87" fg:w="1"/><text x="7.0257%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.7757%" y="517" width="0.0779%" height="15" fill="rgb(229,12,44)" fg:x="87" fg:w="1"/><text x="7.0257%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.7757%" y="501" width="0.0779%" height="15" fill="rgb(210,145,37)" fg:x="87" fg:w="1"/><text x="7.0257%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.7757%" y="485" width="0.0779%" height="15" fill="rgb(227,112,52)" fg:x="87" fg:w="1"/><text x="7.0257%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.7757%" y="469" width="0.0779%" height="15" fill="rgb(238,155,34)" fg:x="87" fg:w="1"/><text x="7.0257%" y="479.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (59 samples, 4.60%)</title><rect x="2.4143%" y="645" width="4.5950%" height="15" fill="rgb(239,226,36)" fg:x="31" fg:w="59"/><text x="2.6643%" y="655.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.23%)</title><rect x="6.7757%" y="629" width="0.2336%" height="15" fill="rgb(230,16,23)" fg:x="87" fg:w="3"/><text x="7.0257%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.23%)</title><rect x="6.7757%" y="613" width="0.2336%" height="15" fill="rgb(236,171,36)" fg:x="87" fg:w="3"/><text x="7.0257%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="6.8536%" y="597" width="0.1558%" height="15" fill="rgb(221,22,14)" fg:x="88" fg:w="2"/><text x="7.1036%" y="607.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="6.9315%" y="581" width="0.0779%" height="15" fill="rgb(242,43,11)" fg:x="89" fg:w="1"/><text x="7.1815%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.23%)</title><rect x="7.0093%" y="629" width="0.2336%" height="15" fill="rgb(232,69,23)" fg:x="90" fg:w="3"/><text x="7.2593%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.23%)</title><rect x="7.0093%" y="613" width="0.2336%" height="15" fill="rgb(216,180,54)" fg:x="90" fg:w="3"/><text x="7.2593%" y="623.50"></text></g><g><title>core::fmt::write (3 samples, 0.23%)</title><rect x="7.0093%" y="597" width="0.2336%" height="15" fill="rgb(216,5,24)" fg:x="90" fg:w="3"/><text x="7.2593%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.23%)</title><rect x="7.0093%" y="581" width="0.2336%" height="15" fill="rgb(225,89,9)" fg:x="90" fg:w="3"/><text x="7.2593%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (3 samples, 0.23%)</title><rect x="7.0093%" y="565" width="0.2336%" height="15" fill="rgb(243,75,33)" fg:x="90" fg:w="3"/><text x="7.2593%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (3 samples, 0.23%)</title><rect x="7.0093%" y="549" width="0.2336%" height="15" fill="rgb(247,141,45)" fg:x="90" fg:w="3"/><text x="7.2593%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="7.0872%" y="533" width="0.1558%" height="15" fill="rgb(232,177,36)" fg:x="91" fg:w="2"/><text x="7.3372%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.1651%" y="517" width="0.0779%" height="15" fill="rgb(219,125,36)" fg:x="92" fg:w="1"/><text x="7.4151%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.1651%" y="501" width="0.0779%" height="15" fill="rgb(227,94,9)" fg:x="92" fg:w="1"/><text x="7.4151%" y="511.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="7.1651%" y="485" width="0.0779%" height="15" fill="rgb(240,34,52)" fg:x="92" fg:w="1"/><text x="7.4151%" y="495.50"></text></g><g><title>core::fmt::getcount (1 samples, 0.08%)</title><rect x="7.1651%" y="469" width="0.0779%" height="15" fill="rgb(216,45,12)" fg:x="92" fg:w="1"/><text x="7.4151%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::as_usize (1 samples, 0.08%)</title><rect x="7.1651%" y="453" width="0.0779%" height="15" fill="rgb(246,21,19)" fg:x="92" fg:w="1"/><text x="7.4151%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.2430%" y="613" width="0.0779%" height="15" fill="rgb(213,98,42)" fg:x="93" fg:w="1"/><text x="7.4930%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="7.3209%" y="597" width="0.0779%" height="15" fill="rgb(250,136,47)" fg:x="94" fg:w="1"/><text x="7.5709%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="7.4766%" y="565" width="0.1558%" height="15" fill="rgb(251,124,27)" fg:x="96" fg:w="2"/><text x="7.7266%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.4766%" y="549" width="0.1558%" height="15" fill="rgb(229,180,14)" fg:x="96" fg:w="2"/><text x="7.7266%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.4766%" y="533" width="0.1558%" height="15" fill="rgb(245,216,25)" fg:x="96" fg:w="2"/><text x="7.7266%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.4766%" y="517" width="0.1558%" height="15" fill="rgb(251,43,5)" fg:x="96" fg:w="2"/><text x="7.7266%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="7.4766%" y="501" width="0.1558%" height="15" fill="rgb(250,128,24)" fg:x="96" fg:w="2"/><text x="7.7266%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.5545%" y="485" width="0.0779%" height="15" fill="rgb(217,117,27)" fg:x="97" fg:w="1"/><text x="7.8045%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.5545%" y="469" width="0.0779%" height="15" fill="rgb(245,147,4)" fg:x="97" fg:w="1"/><text x="7.8045%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.5545%" y="453" width="0.0779%" height="15" fill="rgb(242,201,35)" fg:x="97" fg:w="1"/><text x="7.8045%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.23%)</title><rect x="7.6324%" y="549" width="0.2336%" height="15" fill="rgb(218,181,1)" fg:x="98" fg:w="3"/><text x="7.8824%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.7103%" y="533" width="0.1558%" height="15" fill="rgb(222,6,29)" fg:x="99" fg:w="2"/><text x="7.9603%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.7882%" y="517" width="0.0779%" height="15" fill="rgb(208,186,3)" fg:x="100" fg:w="1"/><text x="8.0382%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.7882%" y="501" width="0.0779%" height="15" fill="rgb(216,36,26)" fg:x="100" fg:w="1"/><text x="8.0382%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.7882%" y="485" width="0.0779%" height="15" fill="rgb(248,201,23)" fg:x="100" fg:w="1"/><text x="8.0382%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.8660%" y="533" width="0.0779%" height="15" fill="rgb(251,170,31)" fg:x="101" fg:w="1"/><text x="8.1160%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.9439%" y="517" width="0.0779%" height="15" fill="rgb(207,110,25)" fg:x="102" fg:w="1"/><text x="8.1939%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.62%)</title><rect x="7.4766%" y="581" width="0.6231%" height="15" fill="rgb(250,54,15)" fg:x="96" fg:w="8"/><text x="7.7266%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="7.6324%" y="565" width="0.4673%" height="15" fill="rgb(227,68,33)" fg:x="98" fg:w="6"/><text x="7.8824%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="7.8660%" y="549" width="0.2336%" height="15" fill="rgb(238,34,41)" fg:x="101" fg:w="3"/><text x="8.1160%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="7.9439%" y="533" width="0.1558%" height="15" fill="rgb(220,11,15)" fg:x="102" fg:w="2"/><text x="8.1939%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.0218%" y="517" width="0.0779%" height="15" fill="rgb(246,111,35)" fg:x="103" fg:w="1"/><text x="8.2718%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.0218%" y="501" width="0.0779%" height="15" fill="rgb(209,88,53)" fg:x="103" fg:w="1"/><text x="8.2718%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0997%" y="581" width="0.0779%" height="15" fill="rgb(231,185,47)" fg:x="104" fg:w="1"/><text x="8.3497%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.0997%" y="565" width="0.0779%" height="15" fill="rgb(233,154,1)" fg:x="104" fg:w="1"/><text x="8.3497%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0997%" y="549" width="0.0779%" height="15" fill="rgb(225,15,46)" fg:x="104" fg:w="1"/><text x="8.3497%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.0997%" y="533" width="0.0779%" height="15" fill="rgb(211,135,41)" fg:x="104" fg:w="1"/><text x="8.3497%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0997%" y="517" width="0.0779%" height="15" fill="rgb(208,54,0)" fg:x="104" fg:w="1"/><text x="8.3497%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2555%" y="533" width="0.0779%" height="15" fill="rgb(244,136,14)" fg:x="106" fg:w="1"/><text x="8.5055%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.4112%" y="517" width="0.1558%" height="15" fill="rgb(241,56,14)" fg:x="108" fg:w="2"/><text x="8.6612%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4891%" y="501" width="0.0779%" height="15" fill="rgb(205,80,24)" fg:x="109" fg:w="1"/><text x="8.7391%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5670%" y="501" width="0.0779%" height="15" fill="rgb(220,57,4)" fg:x="110" fg:w="1"/><text x="8.8170%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5670%" y="485" width="0.0779%" height="15" fill="rgb(226,193,50)" fg:x="110" fg:w="1"/><text x="8.8170%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.6449%" y="485" width="0.0779%" height="15" fill="rgb(231,168,22)" fg:x="111" fg:w="1"/><text x="8.8949%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6449%" y="469" width="0.0779%" height="15" fill="rgb(254,215,14)" fg:x="111" fg:w="1"/><text x="8.8949%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="8.2555%" y="565" width="0.5452%" height="15" fill="rgb(211,115,16)" fg:x="106" fg:w="7"/><text x="8.5055%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.55%)</title><rect x="8.2555%" y="549" width="0.5452%" height="15" fill="rgb(236,210,16)" fg:x="106" fg:w="7"/><text x="8.5055%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="8.3333%" y="533" width="0.4673%" height="15" fill="rgb(221,94,12)" fg:x="107" fg:w="6"/><text x="8.5833%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="8.5670%" y="517" width="0.2336%" height="15" fill="rgb(235,218,49)" fg:x="110" fg:w="3"/><text x="8.8170%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.6449%" y="501" width="0.1558%" height="15" fill="rgb(217,114,14)" fg:x="111" fg:w="2"/><text x="8.8949%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7227%" y="485" width="0.0779%" height="15" fill="rgb(216,145,22)" fg:x="112" fg:w="1"/><text x="8.9727%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.7227%" y="469" width="0.0779%" height="15" fill="rgb(217,112,39)" fg:x="112" fg:w="1"/><text x="8.9727%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7227%" y="453" width="0.0779%" height="15" fill="rgb(225,85,32)" fg:x="112" fg:w="1"/><text x="8.9727%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7227%" y="437" width="0.0779%" height="15" fill="rgb(245,209,47)" fg:x="112" fg:w="1"/><text x="8.9727%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9564%" y="533" width="0.0779%" height="15" fill="rgb(218,220,15)" fg:x="115" fg:w="1"/><text x="9.2064%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.0343%" y="533" width="0.1558%" height="15" fill="rgb(222,202,31)" fg:x="116" fg:w="2"/><text x="9.2843%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1121%" y="517" width="0.0779%" height="15" fill="rgb(243,203,4)" fg:x="117" fg:w="1"/><text x="9.3621%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1900%" y="533" width="0.0779%" height="15" fill="rgb(237,92,17)" fg:x="118" fg:w="1"/><text x="9.4400%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.1900%" y="517" width="0.0779%" height="15" fill="rgb(231,119,7)" fg:x="118" fg:w="1"/><text x="9.4400%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="9.2679%" y="533" width="0.1558%" height="15" fill="rgb(237,82,41)" fg:x="119" fg:w="2"/><text x="9.5179%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.2679%" y="517" width="0.1558%" height="15" fill="rgb(226,81,48)" fg:x="119" fg:w="2"/><text x="9.5179%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3458%" y="501" width="0.0779%" height="15" fill="rgb(234,70,51)" fg:x="120" fg:w="1"/><text x="9.5958%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4237%" y="485" width="0.0779%" height="15" fill="rgb(251,86,4)" fg:x="121" fg:w="1"/><text x="9.6737%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.5016%" y="469" width="0.0779%" height="15" fill="rgb(244,144,28)" fg:x="122" fg:w="1"/><text x="9.7516%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.5016%" y="453" width="0.0779%" height="15" fill="rgb(232,161,39)" fg:x="122" fg:w="1"/><text x="9.7516%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.23%)</title><rect x="9.4237%" y="533" width="0.2336%" height="15" fill="rgb(247,34,51)" fg:x="121" fg:w="3"/><text x="9.6737%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="9.4237%" y="517" width="0.2336%" height="15" fill="rgb(225,132,2)" fg:x="121" fg:w="3"/><text x="9.6737%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.23%)</title><rect x="9.4237%" y="501" width="0.2336%" height="15" fill="rgb(209,159,44)" fg:x="121" fg:w="3"/><text x="9.6737%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="9.5016%" y="485" width="0.1558%" height="15" fill="rgb(251,214,1)" fg:x="122" fg:w="2"/><text x="9.7516%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.5794%" y="469" width="0.0779%" height="15" fill="rgb(247,84,47)" fg:x="123" fg:w="1"/><text x="9.8294%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5794%" y="453" width="0.0779%" height="15" fill="rgb(240,111,43)" fg:x="123" fg:w="1"/><text x="9.8294%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5794%" y="437" width="0.0779%" height="15" fill="rgb(215,214,35)" fg:x="123" fg:w="1"/><text x="9.8294%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5794%" y="421" width="0.0779%" height="15" fill="rgb(248,207,23)" fg:x="123" fg:w="1"/><text x="9.8294%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6573%" y="485" width="0.0779%" height="15" fill="rgb(214,186,4)" fg:x="124" fg:w="1"/><text x="9.9073%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6573%" y="469" width="0.0779%" height="15" fill="rgb(220,133,22)" fg:x="124" fg:w="1"/><text x="9.9073%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.7352%" y="453" width="0.0779%" height="15" fill="rgb(239,134,19)" fg:x="125" fg:w="1"/><text x="9.9852%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="9.7352%" y="485" width="0.1558%" height="15" fill="rgb(250,140,9)" fg:x="125" fg:w="2"/><text x="9.9852%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="9.7352%" y="469" width="0.1558%" height="15" fill="rgb(225,59,14)" fg:x="125" fg:w="2"/><text x="9.9852%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.8131%" y="453" width="0.0779%" height="15" fill="rgb(214,152,51)" fg:x="126" fg:w="1"/><text x="10.0631%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8131%" y="437" width="0.0779%" height="15" fill="rgb(251,227,43)" fg:x="126" fg:w="1"/><text x="10.0631%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8131%" y="421" width="0.0779%" height="15" fill="rgb(241,96,17)" fg:x="126" fg:w="1"/><text x="10.0631%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (15 samples, 1.17%)</title><rect x="8.8006%" y="565" width="1.1682%" height="15" fill="rgb(234,198,43)" fg:x="113" fg:w="15"/><text x="9.0506%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.09%)</title><rect x="8.8785%" y="549" width="1.0903%" height="15" fill="rgb(220,108,29)" fg:x="114" fg:w="14"/><text x="9.1285%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.31%)</title><rect x="9.6573%" y="533" width="0.3115%" height="15" fill="rgb(226,163,33)" fg:x="124" fg:w="4"/><text x="9.9073%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (4 samples, 0.31%)</title><rect x="9.6573%" y="517" width="0.3115%" height="15" fill="rgb(205,194,45)" fg:x="124" fg:w="4"/><text x="9.9073%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.31%)</title><rect x="9.6573%" y="501" width="0.3115%" height="15" fill="rgb(206,143,44)" fg:x="124" fg:w="4"/><text x="9.9073%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8910%" y="485" width="0.0779%" height="15" fill="rgb(236,136,36)" fg:x="127" fg:w="1"/><text x="10.1410%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.8910%" y="469" width="0.0779%" height="15" fill="rgb(249,172,42)" fg:x="127" fg:w="1"/><text x="10.1410%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8910%" y="453" width="0.0779%" height="15" fill="rgb(216,139,23)" fg:x="127" fg:w="1"/><text x="10.1410%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8910%" y="437" width="0.0779%" height="15" fill="rgb(207,166,20)" fg:x="127" fg:w="1"/><text x="10.1410%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="9.8910%" y="421" width="0.0779%" height="15" fill="rgb(210,209,22)" fg:x="127" fg:w="1"/><text x="10.1410%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="10.4361%" y="405" width="0.0779%" height="15" fill="rgb(232,118,20)" fg:x="134" fg:w="1"/><text x="10.6861%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="10.4361%" y="389" width="0.0779%" height="15" fill="rgb(238,113,42)" fg:x="134" fg:w="1"/><text x="10.6861%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.4361%" y="373" width="0.0779%" height="15" fill="rgb(231,42,5)" fg:x="134" fg:w="1"/><text x="10.6861%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4361%" y="357" width="0.0779%" height="15" fill="rgb(243,166,24)" fg:x="134" fg:w="1"/><text x="10.6861%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.23%)</title><rect x="10.5140%" y="405" width="0.2336%" height="15" fill="rgb(237,226,12)" fg:x="135" fg:w="3"/><text x="10.7640%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="10.5919%" y="389" width="0.1558%" height="15" fill="rgb(229,133,24)" fg:x="136" fg:w="2"/><text x="10.8419%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.86%)</title><rect x="10.0467%" y="501" width="0.8567%" height="15" fill="rgb(238,33,43)" fg:x="129" fg:w="11"/><text x="10.2967%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.86%)</title><rect x="10.0467%" y="485" width="0.8567%" height="15" fill="rgb(227,59,38)" fg:x="129" fg:w="11"/><text x="10.2967%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.62%)</title><rect x="10.2804%" y="469" width="0.6231%" height="15" fill="rgb(230,97,0)" fg:x="132" fg:w="8"/><text x="10.5304%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.62%)</title><rect x="10.2804%" y="453" width="0.6231%" height="15" fill="rgb(250,173,50)" fg:x="132" fg:w="8"/><text x="10.5304%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="10.3583%" y="437" width="0.5452%" height="15" fill="rgb(240,15,50)" fg:x="133" fg:w="7"/><text x="10.6083%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="10.3583%" y="421" width="0.5452%" height="15" fill="rgb(221,93,22)" fg:x="133" fg:w="7"/><text x="10.6083%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.7477%" y="405" width="0.1558%" height="15" fill="rgb(245,180,53)" fg:x="138" fg:w="2"/><text x="10.9977%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8255%" y="389" width="0.0779%" height="15" fill="rgb(231,88,51)" fg:x="139" fg:w="1"/><text x="11.0755%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.9034%" y="501" width="0.0779%" height="15" fill="rgb(240,58,21)" fg:x="140" fg:w="1"/><text x="11.1534%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (15 samples, 1.17%)</title><rect x="9.9688%" y="565" width="1.1682%" height="15" fill="rgb(237,21,10)" fg:x="128" fg:w="15"/><text x="10.2188%" y="575.50"></text></g><g><title>serde_json::de::from_trait (15 samples, 1.17%)</title><rect x="9.9688%" y="549" width="1.1682%" height="15" fill="rgb(218,43,11)" fg:x="128" fg:w="15"/><text x="10.2188%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.09%)</title><rect x="10.0467%" y="533" width="1.0903%" height="15" fill="rgb(218,221,29)" fg:x="129" fg:w="14"/><text x="10.2967%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 1.09%)</title><rect x="10.0467%" y="517" width="1.0903%" height="15" fill="rgb(214,118,42)" fg:x="129" fg:w="14"/><text x="10.2967%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.9813%" y="501" width="0.1558%" height="15" fill="rgb(251,200,26)" fg:x="141" fg:w="2"/><text x="11.2313%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0592%" y="485" width="0.0779%" height="15" fill="rgb(237,101,39)" fg:x="142" fg:w="1"/><text x="11.3092%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.0592%" y="469" width="0.0779%" height="15" fill="rgb(251,117,11)" fg:x="142" fg:w="1"/><text x="11.3092%" y="479.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (50 samples, 3.89%)</title><rect x="7.3209%" y="613" width="3.8941%" height="15" fill="rgb(216,223,23)" fg:x="94" fg:w="50"/><text x="7.5709%" y="623.50">engi..</text></g><g><title>engine::session::Session::check_for_changes (49 samples, 3.82%)</title><rect x="7.3988%" y="597" width="3.8162%" height="15" fill="rgb(251,54,12)" fg:x="95" fg:w="49"/><text x="7.6488%" y="607.50">engi..</text></g><g><title>kernel::compare::any_entity_changes (39 samples, 3.04%)</title><rect x="8.1776%" y="581" width="3.0374%" height="15" fill="rgb(254,176,54)" fg:x="105" fg:w="39"/><text x="8.4276%" y="591.50">ker..</text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="11.1371%" y="565" width="0.0779%" height="15" fill="rgb(210,32,8)" fg:x="143" fg:w="1"/><text x="11.3871%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1371%" y="549" width="0.0779%" height="15" fill="rgb(235,52,38)" fg:x="143" fg:w="1"/><text x="11.3871%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1371%" y="533" width="0.0779%" height="15" fill="rgb(231,4,44)" fg:x="143" fg:w="1"/><text x="11.3871%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.1371%" y="517" width="0.0779%" height="15" fill="rgb(249,2,32)" fg:x="143" fg:w="1"/><text x="11.3871%" y="527.50"></text></g><g><title>engine::session::Session::close (55 samples, 4.28%)</title><rect x="7.0093%" y="645" width="4.2835%" height="15" fill="rgb(224,65,26)" fg:x="90" fg:w="55"/><text x="7.2593%" y="655.50">engin..</text></g><g><title>engine::session::Session::save_entity_changes (52 samples, 4.05%)</title><rect x="7.2430%" y="629" width="4.0498%" height="15" fill="rgb(250,73,40)" fg:x="93" fg:w="52"/><text x="7.4930%" y="639.50">engi..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="11.2150%" y="613" width="0.0779%" height="15" fill="rgb(253,177,16)" fg:x="144" fg:w="1"/><text x="11.4650%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="11.2150%" y="597" width="0.0779%" height="15" fill="rgb(217,32,34)" fg:x="144" fg:w="1"/><text x="11.4650%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.2150%" y="581" width="0.0779%" height="15" fill="rgb(212,7,10)" fg:x="144" fg:w="1"/><text x="11.4650%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="11.3707%" y="533" width="0.0779%" height="15" fill="rgb(245,89,8)" fg:x="146" fg:w="1"/><text x="11.6207%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="11.3707%" y="517" width="0.0779%" height="15" fill="rgb(237,16,53)" fg:x="146" fg:w="1"/><text x="11.6207%" y="527.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="11.3707%" y="501" width="0.0779%" height="15" fill="rgb(250,204,30)" fg:x="146" fg:w="1"/><text x="11.6207%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="11.3707%" y="485" width="0.0779%" height="15" fill="rgb(208,77,27)" fg:x="146" fg:w="1"/><text x="11.6207%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="11.3707%" y="469" width="0.0779%" height="15" fill="rgb(250,204,28)" fg:x="146" fg:w="1"/><text x="11.6207%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.3707%" y="453" width="0.0779%" height="15" fill="rgb(244,63,21)" fg:x="146" fg:w="1"/><text x="11.6207%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="11.3707%" y="565" width="0.1558%" height="15" fill="rgb(236,85,44)" fg:x="146" fg:w="2"/><text x="11.6207%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="11.3707%" y="549" width="0.1558%" height="15" fill="rgb(215,98,4)" fg:x="146" fg:w="2"/><text x="11.6207%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.4486%" y="533" width="0.0779%" height="15" fill="rgb(235,38,11)" fg:x="147" fg:w="1"/><text x="11.6986%" y="543.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="11.6044%" y="501" width="0.0779%" height="15" fill="rgb(254,186,25)" fg:x="149" fg:w="1"/><text x="11.8544%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="11.9159%" y="405" width="0.0779%" height="15" fill="rgb(225,55,31)" fg:x="153" fg:w="1"/><text x="12.1659%" y="415.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="11.9159%" y="389" width="0.0779%" height="15" fill="rgb(211,15,21)" fg:x="153" fg:w="1"/><text x="12.1659%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="11.9159%" y="373" width="0.0779%" height="15" fill="rgb(215,187,41)" fg:x="153" fg:w="1"/><text x="12.1659%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0717%" y="389" width="0.0779%" height="15" fill="rgb(248,69,32)" fg:x="155" fg:w="1"/><text x="12.3217%" y="399.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="12.1495%" y="389" width="0.0779%" height="15" fill="rgb(252,102,52)" fg:x="156" fg:w="1"/><text x="12.3995%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.47%)</title><rect x="11.8380%" y="421" width="0.4673%" height="15" fill="rgb(253,140,32)" fg:x="152" fg:w="6"/><text x="12.0880%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4 samples, 0.31%)</title><rect x="11.9938%" y="405" width="0.3115%" height="15" fill="rgb(216,56,42)" fg:x="154" fg:w="4"/><text x="12.2438%" y="415.50"></text></g><g><title>regex_automata::util::determinize::set_lookbehind_from_start (1 samples, 0.08%)</title><rect x="12.2274%" y="389" width="0.0779%" height="15" fill="rgb(216,184,14)" fg:x="157" fg:w="1"/><text x="12.4774%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="11.8380%" y="485" width="0.5452%" height="15" fill="rgb(237,187,27)" fg:x="152" fg:w="7"/><text x="12.0880%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.55%)</title><rect x="11.8380%" y="469" width="0.5452%" height="15" fill="rgb(219,65,3)" fg:x="152" fg:w="7"/><text x="12.0880%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.55%)</title><rect x="11.8380%" y="453" width="0.5452%" height="15" fill="rgb(245,83,25)" fg:x="152" fg:w="7"/><text x="12.0880%" y="463.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.55%)</title><rect x="11.8380%" y="437" width="0.5452%" height="15" fill="rgb(214,205,45)" fg:x="152" fg:w="7"/><text x="12.0880%" y="447.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="12.3053%" y="421" width="0.0779%" height="15" fill="rgb(241,20,18)" fg:x="158" fg:w="1"/><text x="12.5553%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="12.3053%" y="405" width="0.0779%" height="15" fill="rgb(232,163,23)" fg:x="158" fg:w="1"/><text x="12.5553%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3053%" y="389" width="0.0779%" height="15" fill="rgb(214,5,46)" fg:x="158" fg:w="1"/><text x="12.5553%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.3832%" y="405" width="0.0779%" height="15" fill="rgb(229,78,17)" fg:x="159" fg:w="1"/><text x="12.6332%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="12.3832%" y="453" width="0.1558%" height="15" fill="rgb(248,89,10)" fg:x="159" fg:w="2"/><text x="12.6332%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="12.3832%" y="437" width="0.1558%" height="15" fill="rgb(248,54,15)" fg:x="159" fg:w="2"/><text x="12.6332%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="12.3832%" y="421" width="0.1558%" height="15" fill="rgb(223,116,6)" fg:x="159" fg:w="2"/><text x="12.6332%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.4611%" y="405" width="0.0779%" height="15" fill="rgb(205,125,38)" fg:x="160" fg:w="1"/><text x="12.7111%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="12.6168%" y="421" width="0.0779%" height="15" fill="rgb(251,78,38)" fg:x="162" fg:w="1"/><text x="12.8668%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.39%)</title><rect x="12.3832%" y="485" width="0.3894%" height="15" fill="rgb(253,78,28)" fg:x="159" fg:w="5"/><text x="12.6332%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.39%)</title><rect x="12.3832%" y="469" width="0.3894%" height="15" fill="rgb(209,120,3)" fg:x="159" fg:w="5"/><text x="12.6332%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.23%)</title><rect x="12.5389%" y="453" width="0.2336%" height="15" fill="rgb(238,229,9)" fg:x="161" fg:w="3"/><text x="12.7889%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.23%)</title><rect x="12.5389%" y="437" width="0.2336%" height="15" fill="rgb(253,159,18)" fg:x="161" fg:w="3"/><text x="12.7889%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.6947%" y="421" width="0.0779%" height="15" fill="rgb(244,42,34)" fg:x="163" fg:w="1"/><text x="12.9447%" y="431.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="12.8505%" y="469" width="0.0779%" height="15" fill="rgb(224,8,7)" fg:x="165" fg:w="1"/><text x="13.1005%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.0062%" y="437" width="0.0779%" height="15" fill="rgb(210,201,45)" fg:x="167" fg:w="1"/><text x="13.2562%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0841%" y="437" width="0.0779%" height="15" fill="rgb(252,185,21)" fg:x="168" fg:w="1"/><text x="13.3341%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (4 samples, 0.31%)</title><rect x="13.1620%" y="437" width="0.3115%" height="15" fill="rgb(223,131,1)" fg:x="169" fg:w="4"/><text x="13.4120%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="13.1620%" y="421" width="0.3115%" height="15" fill="rgb(245,141,16)" fg:x="169" fg:w="4"/><text x="13.4120%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3956%" y="405" width="0.0779%" height="15" fill="rgb(229,55,45)" fg:x="172" fg:w="1"/><text x="13.6456%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="13.4735%" y="437" width="0.0779%" height="15" fill="rgb(208,92,15)" fg:x="173" fg:w="1"/><text x="13.7235%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7072%" y="421" width="0.0779%" height="15" fill="rgb(234,185,47)" fg:x="176" fg:w="1"/><text x="13.9572%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.7850%" y="405" width="0.1558%" height="15" fill="rgb(253,104,50)" fg:x="177" fg:w="2"/><text x="14.0350%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (35 samples, 2.73%)</title><rect x="13.7850%" y="421" width="2.7259%" height="15" fill="rgb(205,70,7)" fg:x="177" fg:w="35"/><text x="14.0350%" y="431.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (33 samples, 2.57%)</title><rect x="13.9408%" y="405" width="2.5701%" height="15" fill="rgb(240,178,43)" fg:x="179" fg:w="33"/><text x="14.1908%" y="415.50">co..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4330%" y="389" width="0.0779%" height="15" fill="rgb(214,112,2)" fg:x="211" fg:w="1"/><text x="16.6830%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="16.5888%" y="405" width="0.0779%" height="15" fill="rgb(206,46,17)" fg:x="213" fg:w="1"/><text x="16.8388%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="16.5888%" y="389" width="0.0779%" height="15" fill="rgb(225,220,16)" fg:x="213" fg:w="1"/><text x="16.8388%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.39%)</title><rect x="16.6667%" y="405" width="0.3894%" height="15" fill="rgb(238,65,40)" fg:x="214" fg:w="5"/><text x="16.9167%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="17.0561%" y="405" width="0.0779%" height="15" fill="rgb(230,151,21)" fg:x="219" fg:w="1"/><text x="17.3061%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.70%)</title><rect x="16.5109%" y="421" width="0.7009%" height="15" fill="rgb(218,58,49)" fg:x="212" fg:w="9"/><text x="16.7609%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="17.1340%" y="405" width="0.0779%" height="15" fill="rgb(219,179,14)" fg:x="220" fg:w="1"/><text x="17.3840%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="17.1340%" y="389" width="0.0779%" height="15" fill="rgb(223,72,1)" fg:x="220" fg:w="1"/><text x="17.3840%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.1340%" y="373" width="0.0779%" height="15" fill="rgb(238,126,10)" fg:x="220" fg:w="1"/><text x="17.3840%" y="383.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="17.6012%" y="357" width="0.2336%" height="15" fill="rgb(224,206,38)" fg:x="226" fg:w="3"/><text x="17.8512%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="17.8349%" y="357" width="0.1558%" height="15" fill="rgb(212,201,54)" fg:x="229" fg:w="2"/><text x="18.0849%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="17.9907%" y="357" width="0.1558%" height="15" fill="rgb(218,154,48)" fg:x="231" fg:w="2"/><text x="18.2407%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="17.9907%" y="341" width="0.1558%" height="15" fill="rgb(232,93,24)" fg:x="231" fg:w="2"/><text x="18.2407%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="17.9907%" y="325" width="0.1558%" height="15" fill="rgb(245,30,21)" fg:x="231" fg:w="2"/><text x="18.2407%" y="335.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="17.9907%" y="309" width="0.1558%" height="15" fill="rgb(242,148,29)" fg:x="231" fg:w="2"/><text x="18.2407%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1464%" y="309" width="0.0779%" height="15" fill="rgb(244,153,54)" fg:x="233" fg:w="1"/><text x="18.3964%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="18.1464%" y="357" width="0.1558%" height="15" fill="rgb(252,87,22)" fg:x="233" fg:w="2"/><text x="18.3964%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="18.1464%" y="341" width="0.1558%" height="15" fill="rgb(210,51,29)" fg:x="233" fg:w="2"/><text x="18.3964%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="18.1464%" y="325" width="0.1558%" height="15" fill="rgb(242,136,47)" fg:x="233" fg:w="2"/><text x="18.3964%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.2243%" y="309" width="0.0779%" height="15" fill="rgb(238,68,4)" fg:x="234" fg:w="1"/><text x="18.4743%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.3801%" y="325" width="0.0779%" height="15" fill="rgb(242,161,30)" fg:x="236" fg:w="1"/><text x="18.6301%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.3801%" y="309" width="0.0779%" height="15" fill="rgb(218,58,44)" fg:x="236" fg:w="1"/><text x="18.6301%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3801%" y="293" width="0.0779%" height="15" fill="rgb(252,125,32)" fg:x="236" fg:w="1"/><text x="18.6301%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.47%)</title><rect x="18.3022%" y="357" width="0.4673%" height="15" fill="rgb(219,178,0)" fg:x="235" fg:w="6"/><text x="18.5522%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.39%)</title><rect x="18.3801%" y="341" width="0.3894%" height="15" fill="rgb(213,152,7)" fg:x="236" fg:w="5"/><text x="18.6301%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.31%)</title><rect x="18.4579%" y="325" width="0.3115%" height="15" fill="rgb(249,109,34)" fg:x="237" fg:w="4"/><text x="18.7079%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="18.6137%" y="309" width="0.1558%" height="15" fill="rgb(232,96,21)" fg:x="239" fg:w="2"/><text x="18.8637%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="18.7695%" y="341" width="0.0779%" height="15" fill="rgb(228,27,39)" fg:x="241" fg:w="1"/><text x="19.0195%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="18.7695%" y="357" width="0.1558%" height="15" fill="rgb(211,182,52)" fg:x="241" fg:w="2"/><text x="19.0195%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="18.8474%" y="341" width="0.0779%" height="15" fill="rgb(234,178,38)" fg:x="242" fg:w="1"/><text x="19.0974%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="18.8474%" y="325" width="0.0779%" height="15" fill="rgb(221,111,3)" fg:x="242" fg:w="1"/><text x="19.0974%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.8474%" y="309" width="0.0779%" height="15" fill="rgb(228,175,21)" fg:x="242" fg:w="1"/><text x="19.0974%" y="319.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="18.9252%" y="325" width="0.2336%" height="15" fill="rgb(228,174,43)" fg:x="243" fg:w="3"/><text x="19.1752%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (155 samples, 12.07%)</title><rect x="18.9252%" y="357" width="12.0717%" height="15" fill="rgb(211,191,0)" fg:x="243" fg:w="155"/><text x="19.1752%" y="367.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (155 samples, 12.07%)</title><rect x="18.9252%" y="341" width="12.0717%" height="15" fill="rgb(253,117,3)" fg:x="243" fg:w="155"/><text x="19.1752%" y="351.50">regex_automata::nf..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (152 samples, 11.84%)</title><rect x="19.1589%" y="325" width="11.8380%" height="15" fill="rgb(241,127,19)" fg:x="246" fg:w="152"/><text x="19.4089%" y="335.50">alloc::vec::Vec&lt;T,..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.23%)</title><rect x="30.9969%" y="357" width="0.2336%" height="15" fill="rgb(218,103,12)" fg:x="398" fg:w="3"/><text x="31.2469%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.1526%" y="341" width="0.0779%" height="15" fill="rgb(236,214,43)" fg:x="400" fg:w="1"/><text x="31.4026%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (181 samples, 14.10%)</title><rect x="17.2118%" y="405" width="14.0966%" height="15" fill="rgb(244,144,19)" fg:x="221" fg:w="181"/><text x="17.4618%" y="415.50">&lt;core::iter::adapters..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (180 samples, 14.02%)</title><rect x="17.2897%" y="389" width="14.0187%" height="15" fill="rgb(246,188,10)" fg:x="222" fg:w="180"/><text x="17.5397%" y="399.50">regex_automata::nfa::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (180 samples, 14.02%)</title><rect x="17.2897%" y="373" width="14.0187%" height="15" fill="rgb(212,193,33)" fg:x="222" fg:w="180"/><text x="17.5397%" y="383.50">regex_automata::nfa::..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="31.2305%" y="357" width="0.0779%" height="15" fill="rgb(241,51,29)" fg:x="401" fg:w="1"/><text x="31.4805%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.5421%" y="389" width="0.0779%" height="15" fill="rgb(211,58,19)" fg:x="405" fg:w="1"/><text x="31.7921%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="31.6199%" y="389" width="0.3115%" height="15" fill="rgb(229,111,26)" fg:x="406" fg:w="4"/><text x="31.8699%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="31.6978%" y="373" width="0.2336%" height="15" fill="rgb(213,115,40)" fg:x="407" fg:w="3"/><text x="31.9478%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="31.6978%" y="357" width="0.2336%" height="15" fill="rgb(209,56,44)" fg:x="407" fg:w="3"/><text x="31.9478%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="31.7757%" y="341" width="0.1558%" height="15" fill="rgb(230,108,32)" fg:x="408" fg:w="2"/><text x="32.0257%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="31.9315%" y="389" width="0.1558%" height="15" fill="rgb(216,165,31)" fg:x="410" fg:w="2"/><text x="32.1815%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.0093%" y="373" width="0.0779%" height="15" fill="rgb(218,122,21)" fg:x="411" fg:w="1"/><text x="32.2593%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.23%)</title><rect x="32.0872%" y="389" width="0.2336%" height="15" fill="rgb(223,224,47)" fg:x="412" fg:w="3"/><text x="32.3372%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.09%)</title><rect x="31.3084%" y="405" width="1.0903%" height="15" fill="rgb(238,102,44)" fg:x="402" fg:w="14"/><text x="31.5584%" y="415.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="32.3209%" y="389" width="0.0779%" height="15" fill="rgb(236,46,40)" fg:x="415" fg:w="1"/><text x="32.5709%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3209%" y="373" width="0.0779%" height="15" fill="rgb(247,202,50)" fg:x="415" fg:w="1"/><text x="32.5709%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="32.3988%" y="405" width="0.0779%" height="15" fill="rgb(209,99,20)" fg:x="416" fg:w="1"/><text x="32.6488%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (197 samples, 15.34%)</title><rect x="17.2118%" y="421" width="15.3427%" height="15" fill="rgb(252,27,34)" fg:x="221" fg:w="197"/><text x="17.4618%" y="431.50">regex_automata::nfa::tho..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="32.4766%" y="405" width="0.0779%" height="15" fill="rgb(215,206,23)" fg:x="417" fg:w="1"/><text x="32.7266%" y="415.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="32.4766%" y="389" width="0.0779%" height="15" fill="rgb(212,135,36)" fg:x="417" fg:w="1"/><text x="32.7266%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="32.5545%" y="421" width="0.0779%" height="15" fill="rgb(240,189,1)" fg:x="418" fg:w="1"/><text x="32.8045%" y="431.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="32.6324%" y="421" width="0.0779%" height="15" fill="rgb(242,56,20)" fg:x="419" fg:w="1"/><text x="32.8824%" y="431.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::new (1 samples, 0.08%)</title><rect x="32.6324%" y="405" width="0.0779%" height="15" fill="rgb(247,132,33)" fg:x="419" fg:w="1"/><text x="32.8824%" y="415.50"></text></g><g><title>regex_automata::meta::strategy::new (247 samples, 19.24%)</title><rect x="13.5514%" y="437" width="19.2368%" height="15" fill="rgb(208,149,11)" fg:x="174" fg:w="247"/><text x="13.8014%" y="447.50">regex_automata::meta::strategy..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="32.7103%" y="421" width="0.0779%" height="15" fill="rgb(211,33,11)" fg:x="420" fg:w="1"/><text x="32.9603%" y="431.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="32.7882%" y="389" width="0.1558%" height="15" fill="rgb(221,29,38)" fg:x="421" fg:w="2"/><text x="33.0382%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="32.9439%" y="389" width="0.0779%" height="15" fill="rgb(206,182,49)" fg:x="423" fg:w="1"/><text x="33.1939%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="32.9439%" y="373" width="0.0779%" height="15" fill="rgb(216,140,1)" fg:x="423" fg:w="1"/><text x="33.1939%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="32.9439%" y="357" width="0.0779%" height="15" fill="rgb(232,57,40)" fg:x="423" fg:w="1"/><text x="33.1939%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="33.0218%" y="389" width="0.0779%" height="15" fill="rgb(224,186,18)" fg:x="424" fg:w="1"/><text x="33.2718%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.47%)</title><rect x="32.7882%" y="437" width="0.4673%" height="15" fill="rgb(215,121,11)" fg:x="421" fg:w="6"/><text x="33.0382%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.47%)</title><rect x="32.7882%" y="421" width="0.4673%" height="15" fill="rgb(245,147,10)" fg:x="421" fg:w="6"/><text x="33.0382%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="32.7882%" y="405" width="0.4673%" height="15" fill="rgb(238,153,13)" fg:x="421" fg:w="6"/><text x="33.0382%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="33.0997%" y="389" width="0.1558%" height="15" fill="rgb(233,108,0)" fg:x="425" fg:w="2"/><text x="33.3497%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="33.0997%" y="373" width="0.1558%" height="15" fill="rgb(212,157,17)" fg:x="425" fg:w="2"/><text x="33.3497%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.0997%" y="357" width="0.1558%" height="15" fill="rgb(225,213,38)" fg:x="425" fg:w="2"/><text x="33.3497%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.0997%" y="341" width="0.1558%" height="15" fill="rgb(248,16,11)" fg:x="425" fg:w="2"/><text x="33.3497%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="33.2555%" y="405" width="0.0779%" height="15" fill="rgb(241,33,4)" fg:x="427" fg:w="1"/><text x="33.5055%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="33.2555%" y="389" width="0.0779%" height="15" fill="rgb(222,26,43)" fg:x="427" fg:w="1"/><text x="33.5055%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.2555%" y="373" width="0.0779%" height="15" fill="rgb(243,29,36)" fg:x="427" fg:w="1"/><text x="33.5055%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.2555%" y="357" width="0.0779%" height="15" fill="rgb(241,9,27)" fg:x="427" fg:w="1"/><text x="33.5055%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.2555%" y="341" width="0.0779%" height="15" fill="rgb(205,117,26)" fg:x="427" fg:w="1"/><text x="33.5055%" y="351.50"></text></g><g><title>regex::regex::string::Regex::new (265 samples, 20.64%)</title><rect x="12.7726%" y="485" width="20.6386%" height="15" fill="rgb(209,80,39)" fg:x="164" fg:w="265"/><text x="13.0226%" y="495.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (263 samples, 20.48%)</title><rect x="12.9283%" y="469" width="20.4829%" height="15" fill="rgb(239,155,6)" fg:x="166" fg:w="263"/><text x="13.1783%" y="479.50">regex::builders::Builder::build_..</text></g><g><title>regex_automata::meta::regex::Builder::build (263 samples, 20.48%)</title><rect x="12.9283%" y="453" width="20.4829%" height="15" fill="rgb(212,104,12)" fg:x="166" fg:w="263"/><text x="13.1783%" y="463.50">regex_automata::meta::regex::Bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="33.2555%" y="437" width="0.1558%" height="15" fill="rgb(234,204,3)" fg:x="427" fg:w="2"/><text x="33.5055%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="33.2555%" y="421" width="0.1558%" height="15" fill="rgb(251,218,7)" fg:x="427" fg:w="2"/><text x="33.5055%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="33.3333%" y="405" width="0.0779%" height="15" fill="rgb(221,81,32)" fg:x="428" fg:w="1"/><text x="33.5833%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="34.0343%" y="405" width="0.1558%" height="15" fill="rgb(214,152,26)" fg:x="437" fg:w="2"/><text x="34.2843%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="34.1121%" y="389" width="0.0779%" height="15" fill="rgb(223,22,3)" fg:x="438" fg:w="1"/><text x="34.3621%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="34.1121%" y="373" width="0.0779%" height="15" fill="rgb(207,174,7)" fg:x="438" fg:w="1"/><text x="34.3621%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.86%)</title><rect x="33.4891%" y="421" width="0.8567%" height="15" fill="rgb(224,19,52)" fg:x="430" fg:w="11"/><text x="33.7391%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="34.1900%" y="405" width="0.1558%" height="15" fill="rgb(228,24,14)" fg:x="439" fg:w="2"/><text x="34.4400%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.09%)</title><rect x="33.4891%" y="437" width="1.0903%" height="15" fill="rgb(230,153,43)" fg:x="430" fg:w="14"/><text x="33.7391%" y="447.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.23%)</title><rect x="34.3458%" y="421" width="0.2336%" height="15" fill="rgb(231,106,12)" fg:x="441" fg:w="3"/><text x="34.5958%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="34.3458%" y="405" width="0.2336%" height="15" fill="rgb(215,92,2)" fg:x="441" fg:w="3"/><text x="34.5958%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="34.3458%" y="389" width="0.2336%" height="15" fill="rgb(249,143,25)" fg:x="441" fg:w="3"/><text x="34.5958%" y="399.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="34.3458%" y="373" width="0.2336%" height="15" fill="rgb(252,7,35)" fg:x="441" fg:w="3"/><text x="34.5958%" y="383.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (295 samples, 22.98%)</title><rect x="11.6822%" y="501" width="22.9751%" height="15" fill="rgb(216,69,40)" fg:x="150" fg:w="295"/><text x="11.9322%" y="511.50">indefinite::helper::Helper::get_firs..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.25%)</title><rect x="33.4112%" y="485" width="1.2461%" height="15" fill="rgb(240,36,33)" fg:x="429" fg:w="16"/><text x="33.6612%" y="495.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.25%)</title><rect x="33.4112%" y="469" width="1.2461%" height="15" fill="rgb(231,128,14)" fg:x="429" fg:w="16"/><text x="33.6612%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.25%)</title><rect x="33.4112%" y="453" width="1.2461%" height="15" fill="rgb(245,143,14)" fg:x="429" fg:w="16"/><text x="33.6612%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="34.5794%" y="437" width="0.0779%" height="15" fill="rgb(222,130,28)" fg:x="444" fg:w="1"/><text x="34.8294%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="34.5794%" y="421" width="0.0779%" height="15" fill="rgb(212,10,48)" fg:x="444" fg:w="1"/><text x="34.8294%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.6573%" y="469" width="0.0779%" height="15" fill="rgb(254,118,45)" fg:x="445" fg:w="1"/><text x="34.9073%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.8131%" y="437" width="0.0779%" height="15" fill="rgb(228,6,45)" fg:x="447" fg:w="1"/><text x="35.0631%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.8131%" y="421" width="0.0779%" height="15" fill="rgb(241,18,35)" fg:x="447" fg:w="1"/><text x="35.0631%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.8131%" y="405" width="0.0779%" height="15" fill="rgb(227,214,53)" fg:x="447" fg:w="1"/><text x="35.0631%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="34.8910%" y="437" width="0.1558%" height="15" fill="rgb(224,107,51)" fg:x="448" fg:w="2"/><text x="35.1410%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (2 samples, 0.16%)</title><rect x="34.8910%" y="421" width="0.1558%" height="15" fill="rgb(248,60,28)" fg:x="448" fg:w="2"/><text x="35.1410%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.9688%" y="405" width="0.0779%" height="15" fill="rgb(249,101,23)" fg:x="449" fg:w="1"/><text x="35.2188%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.1246%" y="405" width="0.0779%" height="15" fill="rgb(228,51,19)" fg:x="451" fg:w="1"/><text x="35.3746%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.1246%" y="389" width="0.0779%" height="15" fill="rgb(213,20,6)" fg:x="451" fg:w="1"/><text x="35.3746%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.47%)</title><rect x="34.8131%" y="453" width="0.4673%" height="15" fill="rgb(212,124,10)" fg:x="447" fg:w="6"/><text x="35.0631%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (3 samples, 0.23%)</title><rect x="35.0467%" y="437" width="0.2336%" height="15" fill="rgb(248,3,40)" fg:x="450" fg:w="3"/><text x="35.2967%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="35.1246%" y="421" width="0.1558%" height="15" fill="rgb(223,178,23)" fg:x="451" fg:w="2"/><text x="35.3746%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.2025%" y="405" width="0.0779%" height="15" fill="rgb(240,132,45)" fg:x="452" fg:w="1"/><text x="35.4525%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.2804%" y="437" width="0.0779%" height="15" fill="rgb(245,164,36)" fg:x="453" fg:w="1"/><text x="35.5304%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="35.3583%" y="437" width="0.0779%" height="15" fill="rgb(231,188,53)" fg:x="454" fg:w="1"/><text x="35.6083%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.3583%" y="421" width="0.0779%" height="15" fill="rgb(237,198,39)" fg:x="454" fg:w="1"/><text x="35.6083%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (12 samples, 0.93%)</title><rect x="34.6573%" y="485" width="0.9346%" height="15" fill="rgb(223,120,35)" fg:x="445" fg:w="12"/><text x="34.9073%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (11 samples, 0.86%)</title><rect x="34.7352%" y="469" width="0.8567%" height="15" fill="rgb(253,107,49)" fg:x="446" fg:w="11"/><text x="34.9852%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.31%)</title><rect x="35.2804%" y="453" width="0.3115%" height="15" fill="rgb(216,44,31)" fg:x="453" fg:w="4"/><text x="35.5304%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="35.4361%" y="437" width="0.1558%" height="15" fill="rgb(253,87,21)" fg:x="455" fg:w="2"/><text x="35.6861%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.4361%" y="421" width="0.1558%" height="15" fill="rgb(226,18,2)" fg:x="455" fg:w="2"/><text x="35.6861%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="35.5919%" y="469" width="0.0779%" height="15" fill="rgb(216,8,46)" fg:x="457" fg:w="1"/><text x="35.8419%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="35.5919%" y="453" width="0.0779%" height="15" fill="rgb(226,140,39)" fg:x="457" fg:w="1"/><text x="35.8419%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="35.5919%" y="437" width="0.0779%" height="15" fill="rgb(221,194,54)" fg:x="457" fg:w="1"/><text x="35.8419%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="35.5919%" y="421" width="0.0779%" height="15" fill="rgb(213,92,11)" fg:x="457" fg:w="1"/><text x="35.8419%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="36.2150%" y="389" width="0.2336%" height="15" fill="rgb(229,162,46)" fg:x="465" fg:w="3"/><text x="36.4650%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="36.2150%" y="373" width="0.2336%" height="15" fill="rgb(214,111,36)" fg:x="465" fg:w="3"/><text x="36.4650%" y="383.50"></text></g><g><title>realloc (3 samples, 0.23%)</title><rect x="36.2150%" y="357" width="0.2336%" height="15" fill="rgb(207,6,21)" fg:x="465" fg:w="3"/><text x="36.4650%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.4486%" y="389" width="0.0779%" height="15" fill="rgb(213,127,38)" fg:x="468" fg:w="1"/><text x="36.6986%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.5265%" y="389" width="0.0779%" height="15" fill="rgb(238,118,32)" fg:x="469" fg:w="1"/><text x="36.7765%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.5265%" y="373" width="0.0779%" height="15" fill="rgb(240,139,39)" fg:x="469" fg:w="1"/><text x="36.7765%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.5265%" y="357" width="0.0779%" height="15" fill="rgb(235,10,37)" fg:x="469" fg:w="1"/><text x="36.7765%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.93%)</title><rect x="35.7477%" y="405" width="0.9346%" height="15" fill="rgb(249,171,38)" fg:x="459" fg:w="12"/><text x="35.9977%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="36.6044%" y="389" width="0.0779%" height="15" fill="rgb(242,144,32)" fg:x="470" fg:w="1"/><text x="36.8544%" y="399.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.32%)</title><rect x="35.5919%" y="485" width="1.3240%" height="15" fill="rgb(217,117,21)" fg:x="457" fg:w="17"/><text x="35.8419%" y="495.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.25%)</title><rect x="35.6698%" y="469" width="1.2461%" height="15" fill="rgb(249,87,1)" fg:x="458" fg:w="16"/><text x="35.9198%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.25%)</title><rect x="35.6698%" y="453" width="1.2461%" height="15" fill="rgb(248,196,48)" fg:x="458" fg:w="16"/><text x="35.9198%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.25%)</title><rect x="35.6698%" y="437" width="1.2461%" height="15" fill="rgb(251,206,33)" fg:x="458" fg:w="16"/><text x="35.9198%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.17%)</title><rect x="35.7477%" y="421" width="1.1682%" height="15" fill="rgb(232,141,28)" fg:x="459" fg:w="15"/><text x="35.9977%" y="431.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.23%)</title><rect x="36.6822%" y="405" width="0.2336%" height="15" fill="rgb(209,167,14)" fg:x="471" fg:w="3"/><text x="36.9322%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.8380%" y="389" width="0.0779%" height="15" fill="rgb(225,11,50)" fg:x="473" fg:w="1"/><text x="37.0880%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.8380%" y="373" width="0.0779%" height="15" fill="rgb(209,50,20)" fg:x="473" fg:w="1"/><text x="37.0880%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8380%" y="357" width="0.0779%" height="15" fill="rgb(212,17,46)" fg:x="473" fg:w="1"/><text x="37.0880%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.9938%" y="405" width="0.0779%" height="15" fill="rgb(216,101,39)" fg:x="475" fg:w="1"/><text x="37.2438%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="36.9159%" y="437" width="0.2336%" height="15" fill="rgb(212,228,48)" fg:x="474" fg:w="3"/><text x="37.1659%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="36.9159%" y="421" width="0.2336%" height="15" fill="rgb(250,6,50)" fg:x="474" fg:w="3"/><text x="37.1659%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.0717%" y="405" width="0.0779%" height="15" fill="rgb(250,160,48)" fg:x="476" fg:w="1"/><text x="37.3217%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="37.1495%" y="405" width="0.1558%" height="15" fill="rgb(244,216,33)" fg:x="477" fg:w="2"/><text x="37.3995%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="37.1495%" y="389" width="0.1558%" height="15" fill="rgb(207,157,5)" fg:x="477" fg:w="2"/><text x="37.3995%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.1495%" y="373" width="0.1558%" height="15" fill="rgb(228,199,8)" fg:x="477" fg:w="2"/><text x="37.3995%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.2274%" y="357" width="0.0779%" height="15" fill="rgb(227,80,20)" fg:x="478" fg:w="1"/><text x="37.4774%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.23%)</title><rect x="37.1495%" y="437" width="0.2336%" height="15" fill="rgb(222,9,33)" fg:x="477" fg:w="3"/><text x="37.3995%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="37.1495%" y="421" width="0.2336%" height="15" fill="rgb(239,44,28)" fg:x="477" fg:w="3"/><text x="37.3995%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.3053%" y="405" width="0.0779%" height="15" fill="rgb(249,187,43)" fg:x="479" fg:w="1"/><text x="37.5553%" y="415.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="37.3832%" y="437" width="0.0779%" height="15" fill="rgb(216,141,28)" fg:x="480" fg:w="1"/><text x="37.6332%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.7726%" y="405" width="0.0779%" height="15" fill="rgb(230,154,53)" fg:x="485" fg:w="1"/><text x="38.0226%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (29 samples, 2.26%)</title><rect x="37.6947%" y="421" width="2.2586%" height="15" fill="rgb(227,82,4)" fg:x="484" fg:w="29"/><text x="37.9447%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (27 samples, 2.10%)</title><rect x="37.8505%" y="405" width="2.1028%" height="15" fill="rgb(220,107,16)" fg:x="486" fg:w="27"/><text x="38.1005%" y="415.50">c..</text></g><g><title>__libc_free (4 samples, 0.31%)</title><rect x="39.6417%" y="389" width="0.3115%" height="15" fill="rgb(207,187,2)" fg:x="509" fg:w="4"/><text x="39.8917%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="39.9533%" y="421" width="0.0779%" height="15" fill="rgb(210,162,52)" fg:x="513" fg:w="1"/><text x="40.2033%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="39.9533%" y="405" width="0.0779%" height="15" fill="rgb(217,216,49)" fg:x="513" fg:w="1"/><text x="40.2033%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="39.9533%" y="389" width="0.0779%" height="15" fill="rgb(218,146,49)" fg:x="513" fg:w="1"/><text x="40.2033%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.9533%" y="373" width="0.0779%" height="15" fill="rgb(216,55,40)" fg:x="513" fg:w="1"/><text x="40.2033%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.23%)</title><rect x="40.0312%" y="421" width="0.2336%" height="15" fill="rgb(208,196,21)" fg:x="514" fg:w="3"/><text x="40.2812%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.23%)</title><rect x="40.0312%" y="405" width="0.2336%" height="15" fill="rgb(242,117,42)" fg:x="514" fg:w="3"/><text x="40.2812%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="40.8100%" y="373" width="0.1558%" height="15" fill="rgb(210,11,23)" fg:x="524" fg:w="2"/><text x="41.0600%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.8100%" y="357" width="0.1558%" height="15" fill="rgb(217,110,2)" fg:x="524" fg:w="2"/><text x="41.0600%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="40.8100%" y="341" width="0.1558%" height="15" fill="rgb(229,77,54)" fg:x="524" fg:w="2"/><text x="41.0600%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.23%)</title><rect x="40.8100%" y="389" width="0.2336%" height="15" fill="rgb(218,53,16)" fg:x="524" fg:w="3"/><text x="41.0600%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.9657%" y="373" width="0.0779%" height="15" fill="rgb(215,38,13)" fg:x="526" fg:w="1"/><text x="41.2157%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.9657%" y="357" width="0.0779%" height="15" fill="rgb(235,42,18)" fg:x="526" fg:w="1"/><text x="41.2157%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.9657%" y="341" width="0.0779%" height="15" fill="rgb(219,66,54)" fg:x="526" fg:w="1"/><text x="41.2157%" y="351.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="41.7445%" y="325" width="0.0779%" height="15" fill="rgb(222,205,4)" fg:x="536" fg:w="1"/><text x="41.9945%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (15 samples, 1.17%)</title><rect x="41.0436%" y="389" width="1.1682%" height="15" fill="rgb(227,213,46)" fg:x="527" fg:w="15"/><text x="41.2936%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (10 samples, 0.78%)</title><rect x="41.4330%" y="373" width="0.7788%" height="15" fill="rgb(250,145,42)" fg:x="532" fg:w="10"/><text x="41.6830%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.55%)</title><rect x="41.6667%" y="357" width="0.5452%" height="15" fill="rgb(219,15,2)" fg:x="535" fg:w="7"/><text x="41.9167%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="41.7445%" y="341" width="0.4673%" height="15" fill="rgb(231,181,52)" fg:x="536" fg:w="6"/><text x="41.9945%" y="351.50"></text></g><g><title>realloc (5 samples, 0.39%)</title><rect x="41.8224%" y="325" width="0.3894%" height="15" fill="rgb(235,1,42)" fg:x="537" fg:w="5"/><text x="42.0724%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.62%)</title><rect x="42.2118%" y="373" width="0.6231%" height="15" fill="rgb(249,88,27)" fg:x="542" fg:w="8"/><text x="42.4618%" y="383.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.55%)</title><rect x="42.2897%" y="357" width="0.5452%" height="15" fill="rgb(235,145,16)" fg:x="543" fg:w="7"/><text x="42.5397%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (34 samples, 2.65%)</title><rect x="40.2648%" y="421" width="2.6480%" height="15" fill="rgb(237,114,19)" fg:x="517" fg:w="34"/><text x="40.5148%" y="431.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (34 samples, 2.65%)</title><rect x="40.2648%" y="405" width="2.6480%" height="15" fill="rgb(238,51,50)" fg:x="517" fg:w="34"/><text x="40.5148%" y="415.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.70%)</title><rect x="42.2118%" y="389" width="0.7009%" height="15" fill="rgb(205,194,25)" fg:x="542" fg:w="9"/><text x="42.4618%" y="399.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="42.8349%" y="373" width="0.0779%" height="15" fill="rgb(215,203,17)" fg:x="550" fg:w="1"/><text x="43.0849%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="42.9128%" y="389" width="0.0779%" height="15" fill="rgb(233,112,49)" fg:x="551" fg:w="1"/><text x="43.1628%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="42.9907%" y="373" width="0.1558%" height="15" fill="rgb(241,130,26)" fg:x="552" fg:w="2"/><text x="43.2407%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="42.9907%" y="357" width="0.1558%" height="15" fill="rgb(252,223,19)" fg:x="552" fg:w="2"/><text x="43.2407%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="42.9907%" y="341" width="0.1558%" height="15" fill="rgb(211,95,25)" fg:x="552" fg:w="2"/><text x="43.2407%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="42.9907%" y="325" width="0.1558%" height="15" fill="rgb(251,182,27)" fg:x="552" fg:w="2"/><text x="43.2407%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.78%)</title><rect x="44.0031%" y="309" width="0.7788%" height="15" fill="rgb(238,24,4)" fg:x="565" fg:w="10"/><text x="44.2531%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.7819%" y="309" width="0.0779%" height="15" fill="rgb(224,220,25)" fg:x="575" fg:w="1"/><text x="45.0319%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.39%)</title><rect x="44.8598%" y="309" width="0.3894%" height="15" fill="rgb(239,133,26)" fg:x="576" fg:w="5"/><text x="45.1098%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="45.0935%" y="293" width="0.1558%" height="15" fill="rgb(211,94,48)" fg:x="579" fg:w="2"/><text x="45.3435%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="45.0935%" y="277" width="0.1558%" height="15" fill="rgb(239,87,6)" fg:x="579" fg:w="2"/><text x="45.3435%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="45.0935%" y="261" width="0.1558%" height="15" fill="rgb(227,62,0)" fg:x="579" fg:w="2"/><text x="45.3435%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="45.2492%" y="309" width="0.1558%" height="15" fill="rgb(211,226,4)" fg:x="581" fg:w="2"/><text x="45.4992%" y="319.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="45.7944%" y="277" width="0.2336%" height="15" fill="rgb(253,38,52)" fg:x="588" fg:w="3"/><text x="46.0444%" y="287.50"></text></g><g><title>__libc_malloc (4 samples, 0.31%)</title><rect x="46.1059%" y="245" width="0.3115%" height="15" fill="rgb(229,126,40)" fg:x="592" fg:w="4"/><text x="46.3559%" y="255.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="46.4174%" y="245" width="0.0779%" height="15" fill="rgb(229,165,44)" fg:x="596" fg:w="1"/><text x="46.6674%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.55%)</title><rect x="46.0280%" y="277" width="0.5452%" height="15" fill="rgb(247,95,47)" fg:x="591" fg:w="7"/><text x="46.2780%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="46.1059%" y="261" width="0.4673%" height="15" fill="rgb(216,140,30)" fg:x="592" fg:w="6"/><text x="46.3559%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.4953%" y="245" width="0.0779%" height="15" fill="rgb(246,214,8)" fg:x="597" fg:w="1"/><text x="46.7453%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (20 samples, 1.56%)</title><rect x="45.4050%" y="309" width="1.5576%" height="15" fill="rgb(227,224,15)" fg:x="583" fg:w="20"/><text x="45.6550%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (17 samples, 1.32%)</title><rect x="45.6386%" y="293" width="1.3240%" height="15" fill="rgb(233,175,4)" fg:x="586" fg:w="17"/><text x="45.8886%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.39%)</title><rect x="46.5732%" y="277" width="0.3894%" height="15" fill="rgb(221,66,45)" fg:x="598" fg:w="5"/><text x="46.8232%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="46.8847%" y="261" width="0.0779%" height="15" fill="rgb(221,178,18)" fg:x="602" fg:w="1"/><text x="47.1347%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="46.9626%" y="293" width="0.0779%" height="15" fill="rgb(213,81,29)" fg:x="603" fg:w="1"/><text x="47.2126%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="46.9626%" y="309" width="0.1558%" height="15" fill="rgb(220,89,49)" fg:x="603" fg:w="2"/><text x="47.2126%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="47.0405%" y="293" width="0.0779%" height="15" fill="rgb(227,60,33)" fg:x="604" fg:w="1"/><text x="47.2905%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="47.0405%" y="277" width="0.0779%" height="15" fill="rgb(205,113,12)" fg:x="604" fg:w="1"/><text x="47.2905%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.1184%" y="293" width="0.0779%" height="15" fill="rgb(211,32,1)" fg:x="605" fg:w="1"/><text x="47.3684%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.1184%" y="277" width="0.0779%" height="15" fill="rgb(246,2,12)" fg:x="605" fg:w="1"/><text x="47.3684%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.1963%" y="277" width="0.0779%" height="15" fill="rgb(243,37,27)" fg:x="606" fg:w="1"/><text x="47.4463%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (140 samples, 10.90%)</title><rect x="47.1184%" y="309" width="10.9034%" height="15" fill="rgb(248,211,31)" fg:x="605" fg:w="140"/><text x="47.3684%" y="319.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (139 samples, 10.83%)</title><rect x="47.1963%" y="293" width="10.8255%" height="15" fill="rgb(242,146,47)" fg:x="606" fg:w="139"/><text x="47.4463%" y="303.50">regex_automata::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (138 samples, 10.75%)</title><rect x="47.2741%" y="277" width="10.7477%" height="15" fill="rgb(206,70,20)" fg:x="607" fg:w="138"/><text x="47.5241%" y="287.50">alloc::vec::Vec&lt;..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.47%)</title><rect x="58.0218%" y="309" width="0.4673%" height="15" fill="rgb(215,10,51)" fg:x="745" fg:w="6"/><text x="58.2718%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.4112%" y="293" width="0.0779%" height="15" fill="rgb(243,178,53)" fg:x="750" fg:w="1"/><text x="58.6612%" y="303.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="58.4891%" y="309" width="0.0779%" height="15" fill="rgb(233,221,20)" fg:x="751" fg:w="1"/><text x="58.7391%" y="319.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="58.5670%" y="309" width="0.1558%" height="15" fill="rgb(218,95,35)" fg:x="752" fg:w="2"/><text x="58.8170%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (209 samples, 16.28%)</title><rect x="42.9128%" y="405" width="16.2773%" height="15" fill="rgb(229,13,5)" fg:x="551" fg:w="209"/><text x="43.1628%" y="415.50">&lt;core::iter::adapters::ma..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (208 samples, 16.20%)</title><rect x="42.9907%" y="389" width="16.1994%" height="15" fill="rgb(252,164,30)" fg:x="552" fg:w="208"/><text x="43.2407%" y="399.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (206 samples, 16.04%)</title><rect x="43.1464%" y="373" width="16.0436%" height="15" fill="rgb(232,68,36)" fg:x="554" fg:w="206"/><text x="43.3964%" y="383.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (206 samples, 16.04%)</title><rect x="43.1464%" y="357" width="16.0436%" height="15" fill="rgb(219,59,54)" fg:x="554" fg:w="206"/><text x="43.3964%" y="367.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (206 samples, 16.04%)</title><rect x="43.1464%" y="341" width="16.0436%" height="15" fill="rgb(250,92,33)" fg:x="554" fg:w="206"/><text x="43.3964%" y="351.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (206 samples, 16.04%)</title><rect x="43.1464%" y="325" width="16.0436%" height="15" fill="rgb(229,162,54)" fg:x="554" fg:w="206"/><text x="43.3964%" y="335.50">regex_automata::nfa::thom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.47%)</title><rect x="58.7227%" y="309" width="0.4673%" height="15" fill="rgb(244,114,52)" fg:x="754" fg:w="6"/><text x="58.9727%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="58.8006%" y="293" width="0.3894%" height="15" fill="rgb(212,211,43)" fg:x="755" fg:w="5"/><text x="59.0506%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="58.9564%" y="277" width="0.2336%" height="15" fill="rgb(226,147,8)" fg:x="757" fg:w="3"/><text x="59.2064%" y="287.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="59.1121%" y="261" width="0.0779%" height="15" fill="rgb(226,23,13)" fg:x="759" fg:w="1"/><text x="59.3621%" y="271.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="59.1121%" y="245" width="0.0779%" height="15" fill="rgb(240,63,4)" fg:x="759" fg:w="1"/><text x="59.3621%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (11 samples, 0.86%)</title><rect x="59.5794%" y="389" width="0.8567%" height="15" fill="rgb(221,1,32)" fg:x="765" fg:w="11"/><text x="59.8294%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.3583%" y="373" width="0.0779%" height="15" fill="rgb(242,117,10)" fg:x="775" fg:w="1"/><text x="60.6083%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.3583%" y="357" width="0.0779%" height="15" fill="rgb(249,172,44)" fg:x="775" fg:w="1"/><text x="60.6083%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.3583%" y="341" width="0.0779%" height="15" fill="rgb(244,46,45)" fg:x="775" fg:w="1"/><text x="60.6083%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.62%)</title><rect x="60.4361%" y="389" width="0.6231%" height="15" fill="rgb(206,43,17)" fg:x="776" fg:w="8"/><text x="60.6861%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.23%)</title><rect x="61.0592%" y="389" width="0.2336%" height="15" fill="rgb(239,218,39)" fg:x="784" fg:w="3"/><text x="61.3092%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (237 samples, 18.46%)</title><rect x="42.9128%" y="421" width="18.4579%" height="15" fill="rgb(208,169,54)" fg:x="551" fg:w="237"/><text x="43.1628%" y="431.50">regex_automata::nfa::thompson..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (28 samples, 2.18%)</title><rect x="59.1900%" y="405" width="2.1807%" height="15" fill="rgb(247,25,42)" fg:x="760" fg:w="28"/><text x="59.4400%" y="415.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="61.2928%" y="389" width="0.0779%" height="15" fill="rgb(226,23,31)" fg:x="787" fg:w="1"/><text x="61.5428%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::new (308 samples, 23.99%)</title><rect x="37.4611%" y="437" width="23.9875%" height="15" fill="rgb(247,16,28)" fg:x="481" fg:w="308"/><text x="37.7111%" y="447.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="61.3707%" y="421" width="0.0779%" height="15" fill="rgb(231,147,38)" fg:x="788" fg:w="1"/><text x="61.6207%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="61.3707%" y="405" width="0.0779%" height="15" fill="rgb(253,81,48)" fg:x="788" fg:w="1"/><text x="61.6207%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="61.3707%" y="389" width="0.0779%" height="15" fill="rgb(249,222,43)" fg:x="788" fg:w="1"/><text x="61.6207%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.3707%" y="373" width="0.0779%" height="15" fill="rgb(221,3,27)" fg:x="788" fg:w="1"/><text x="61.6207%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.3707%" y="357" width="0.0779%" height="15" fill="rgb(228,180,5)" fg:x="788" fg:w="1"/><text x="61.6207%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.3707%" y="341" width="0.0779%" height="15" fill="rgb(227,131,42)" fg:x="788" fg:w="1"/><text x="61.6207%" y="351.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="61.5265%" y="389" width="0.0779%" height="15" fill="rgb(212,3,39)" fg:x="790" fg:w="1"/><text x="61.7765%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="61.6822%" y="373" width="0.3115%" height="15" fill="rgb(226,45,5)" fg:x="792" fg:w="4"/><text x="61.9322%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="61.6822%" y="357" width="0.3115%" height="15" fill="rgb(215,167,45)" fg:x="792" fg:w="4"/><text x="61.9322%" y="367.50"></text></g><g><title>__libc_malloc (4 samples, 0.31%)</title><rect x="61.6822%" y="341" width="0.3115%" height="15" fill="rgb(250,218,53)" fg:x="792" fg:w="4"/><text x="61.9322%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.55%)</title><rect x="61.5265%" y="405" width="0.5452%" height="15" fill="rgb(207,140,0)" fg:x="790" fg:w="7"/><text x="61.7765%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.47%)</title><rect x="61.6044%" y="389" width="0.4673%" height="15" fill="rgb(238,133,51)" fg:x="791" fg:w="6"/><text x="61.8544%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="61.9938%" y="373" width="0.0779%" height="15" fill="rgb(218,203,53)" fg:x="796" fg:w="1"/><text x="62.2438%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="61.9938%" y="357" width="0.0779%" height="15" fill="rgb(226,184,25)" fg:x="796" fg:w="1"/><text x="62.2438%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="61.9938%" y="341" width="0.0779%" height="15" fill="rgb(231,121,21)" fg:x="796" fg:w="1"/><text x="62.2438%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="62.0717%" y="405" width="0.0779%" height="15" fill="rgb(251,14,34)" fg:x="797" fg:w="1"/><text x="62.3217%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="62.1495%" y="405" width="0.0779%" height="15" fill="rgb(249,193,11)" fg:x="798" fg:w="1"/><text x="62.3995%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="62.2274%" y="405" width="0.0779%" height="15" fill="rgb(220,172,37)" fg:x="799" fg:w="1"/><text x="62.4774%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.2274%" y="389" width="0.0779%" height="15" fill="rgb(231,229,43)" fg:x="799" fg:w="1"/><text x="62.4774%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.2274%" y="373" width="0.0779%" height="15" fill="rgb(250,161,5)" fg:x="799" fg:w="1"/><text x="62.4774%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2274%" y="357" width="0.0779%" height="15" fill="rgb(218,225,18)" fg:x="799" fg:w="1"/><text x="62.4774%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.01%)</title><rect x="61.4486%" y="437" width="1.0125%" height="15" fill="rgb(245,45,42)" fg:x="789" fg:w="13"/><text x="61.6986%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.01%)</title><rect x="61.4486%" y="421" width="1.0125%" height="15" fill="rgb(211,115,1)" fg:x="789" fg:w="13"/><text x="61.6986%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="62.3053%" y="405" width="0.1558%" height="15" fill="rgb(248,133,52)" fg:x="800" fg:w="2"/><text x="62.5553%" y="415.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="62.3832%" y="389" width="0.0779%" height="15" fill="rgb(238,100,21)" fg:x="801" fg:w="1"/><text x="62.6332%" y="399.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="62.5389%" y="389" width="0.0779%" height="15" fill="rgb(247,144,11)" fg:x="803" fg:w="1"/><text x="62.7889%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.23%)</title><rect x="62.5389%" y="405" width="0.2336%" height="15" fill="rgb(206,164,16)" fg:x="803" fg:w="3"/><text x="62.7889%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (2 samples, 0.16%)</title><rect x="62.6168%" y="389" width="0.1558%" height="15" fill="rgb(222,34,3)" fg:x="804" fg:w="2"/><text x="62.8668%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.6947%" y="373" width="0.0779%" height="15" fill="rgb(248,82,4)" fg:x="805" fg:w="1"/><text x="62.9447%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.6947%" y="357" width="0.0779%" height="15" fill="rgb(228,81,46)" fg:x="805" fg:w="1"/><text x="62.9447%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="62.8505%" y="389" width="0.0779%" height="15" fill="rgb(227,67,47)" fg:x="807" fg:w="1"/><text x="63.1005%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="62.8505%" y="373" width="0.0779%" height="15" fill="rgb(215,93,53)" fg:x="807" fg:w="1"/><text x="63.1005%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.23%)</title><rect x="62.7726%" y="405" width="0.2336%" height="15" fill="rgb(248,194,39)" fg:x="806" fg:w="3"/><text x="63.0226%" y="415.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="62.9283%" y="389" width="0.0779%" height="15" fill="rgb(215,5,19)" fg:x="808" fg:w="1"/><text x="63.1783%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.9283%" y="373" width="0.0779%" height="15" fill="rgb(226,215,51)" fg:x="808" fg:w="1"/><text x="63.1783%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (336 samples, 26.17%)</title><rect x="36.9159%" y="453" width="26.1682%" height="15" fill="rgb(225,56,26)" fg:x="474" fg:w="336"/><text x="37.1659%" y="463.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.62%)</title><rect x="62.4611%" y="437" width="0.6231%" height="15" fill="rgb(222,75,29)" fg:x="802" fg:w="8"/><text x="62.7111%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.62%)</title><rect x="62.4611%" y="421" width="0.6231%" height="15" fill="rgb(236,139,6)" fg:x="802" fg:w="8"/><text x="62.7111%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="63.0062%" y="405" width="0.0779%" height="15" fill="rgb(223,137,36)" fg:x="809" fg:w="1"/><text x="63.2562%" y="415.50"></text></g><g><title>indefinite::rules::number::Number::check (366 samples, 28.50%)</title><rect x="34.6573%" y="501" width="28.5047%" height="15" fill="rgb(226,99,2)" fg:x="445" fg:w="366"/><text x="34.9073%" y="511.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (337 samples, 26.25%)</title><rect x="36.9159%" y="485" width="26.2461%" height="15" fill="rgb(206,133,23)" fg:x="474" fg:w="337"/><text x="37.1659%" y="495.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (337 samples, 26.25%)</title><rect x="36.9159%" y="469" width="26.2461%" height="15" fill="rgb(243,173,15)" fg:x="474" fg:w="337"/><text x="37.1659%" y="479.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="63.0841%" y="453" width="0.0779%" height="15" fill="rgb(228,69,28)" fg:x="810" fg:w="1"/><text x="63.3341%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="63.1620%" y="469" width="0.1558%" height="15" fill="rgb(212,51,22)" fg:x="811" fg:w="2"/><text x="63.4120%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="63.1620%" y="453" width="0.1558%" height="15" fill="rgb(227,113,0)" fg:x="811" fg:w="2"/><text x="63.4120%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="63.2399%" y="437" width="0.0779%" height="15" fill="rgb(252,84,27)" fg:x="812" fg:w="1"/><text x="63.4899%" y="447.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="63.2399%" y="421" width="0.0779%" height="15" fill="rgb(223,145,39)" fg:x="812" fg:w="1"/><text x="63.4899%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.3178%" y="453" width="0.0779%" height="15" fill="rgb(239,219,30)" fg:x="813" fg:w="1"/><text x="63.5678%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.3956%" y="437" width="0.0779%" height="15" fill="rgb(224,196,39)" fg:x="814" fg:w="1"/><text x="63.6456%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="63.3956%" y="421" width="0.0779%" height="15" fill="rgb(205,35,43)" fg:x="814" fg:w="1"/><text x="63.6456%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.3956%" y="405" width="0.0779%" height="15" fill="rgb(228,201,21)" fg:x="814" fg:w="1"/><text x="63.6456%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3956%" y="389" width="0.0779%" height="15" fill="rgb(237,118,16)" fg:x="814" fg:w="1"/><text x="63.6456%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="63.4735%" y="421" width="0.0779%" height="15" fill="rgb(241,17,19)" fg:x="815" fg:w="1"/><text x="63.7235%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.5514%" y="405" width="0.0779%" height="15" fill="rgb(214,10,25)" fg:x="816" fg:w="1"/><text x="63.8014%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.39%)</title><rect x="63.3178%" y="469" width="0.3894%" height="15" fill="rgb(238,37,29)" fg:x="813" fg:w="5"/><text x="63.5678%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.31%)</title><rect x="63.3956%" y="453" width="0.3115%" height="15" fill="rgb(253,83,25)" fg:x="814" fg:w="4"/><text x="63.6456%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.23%)</title><rect x="63.4735%" y="437" width="0.2336%" height="15" fill="rgb(234,192,12)" fg:x="815" fg:w="3"/><text x="63.7235%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="63.5514%" y="421" width="0.1558%" height="15" fill="rgb(241,216,45)" fg:x="816" fg:w="2"/><text x="63.8014%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.6293%" y="405" width="0.0779%" height="15" fill="rgb(242,22,33)" fg:x="817" fg:w="1"/><text x="63.8793%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7072%" y="453" width="0.0779%" height="15" fill="rgb(231,105,49)" fg:x="818" fg:w="1"/><text x="63.9572%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="63.8629%" y="421" width="0.2336%" height="15" fill="rgb(218,204,15)" fg:x="820" fg:w="3"/><text x="64.1129%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="63.8629%" y="405" width="0.2336%" height="15" fill="rgb(235,138,41)" fg:x="820" fg:w="3"/><text x="64.1129%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.23%)</title><rect x="63.8629%" y="389" width="0.2336%" height="15" fill="rgb(246,0,9)" fg:x="820" fg:w="3"/><text x="64.1129%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="63.9408%" y="373" width="0.1558%" height="15" fill="rgb(210,74,4)" fg:x="821" fg:w="2"/><text x="64.1908%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.9408%" y="357" width="0.1558%" height="15" fill="rgb(250,60,41)" fg:x="821" fg:w="2"/><text x="64.1908%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.0187%" y="341" width="0.0779%" height="15" fill="rgb(220,115,12)" fg:x="822" fg:w="1"/><text x="64.2687%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0966%" y="421" width="0.0779%" height="15" fill="rgb(237,100,13)" fg:x="823" fg:w="1"/><text x="64.3466%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="64.1745%" y="389" width="0.1558%" height="15" fill="rgb(213,55,26)" fg:x="824" fg:w="2"/><text x="64.4245%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="64.1745%" y="373" width="0.1558%" height="15" fill="rgb(216,17,4)" fg:x="824" fg:w="2"/><text x="64.4245%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="64.1745%" y="357" width="0.1558%" height="15" fill="rgb(220,153,47)" fg:x="824" fg:w="2"/><text x="64.4245%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="64.1745%" y="341" width="0.1558%" height="15" fill="rgb(215,131,9)" fg:x="824" fg:w="2"/><text x="64.4245%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.4081%" y="357" width="0.0779%" height="15" fill="rgb(233,46,42)" fg:x="827" fg:w="1"/><text x="64.6581%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.4081%" y="341" width="0.0779%" height="15" fill="rgb(226,86,7)" fg:x="827" fg:w="1"/><text x="64.6581%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4081%" y="325" width="0.0779%" height="15" fill="rgb(239,226,21)" fg:x="827" fg:w="1"/><text x="64.6581%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.39%)</title><rect x="64.1745%" y="421" width="0.3894%" height="15" fill="rgb(244,137,22)" fg:x="824" fg:w="5"/><text x="64.4245%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="64.1745%" y="405" width="0.3894%" height="15" fill="rgb(211,139,35)" fg:x="824" fg:w="5"/><text x="64.4245%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.23%)</title><rect x="64.3302%" y="389" width="0.2336%" height="15" fill="rgb(214,62,50)" fg:x="826" fg:w="3"/><text x="64.5802%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="64.3302%" y="373" width="0.2336%" height="15" fill="rgb(212,113,44)" fg:x="826" fg:w="3"/><text x="64.5802%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4860%" y="357" width="0.0779%" height="15" fill="rgb(226,150,43)" fg:x="828" fg:w="1"/><text x="64.7360%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="64.5639%" y="421" width="0.0779%" height="15" fill="rgb(250,71,37)" fg:x="829" fg:w="1"/><text x="64.8139%" y="431.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="64.6417%" y="421" width="0.0779%" height="15" fill="rgb(219,76,19)" fg:x="830" fg:w="1"/><text x="64.8917%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="64.7196%" y="405" width="0.1558%" height="15" fill="rgb(250,39,11)" fg:x="831" fg:w="2"/><text x="64.9696%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="64.8754%" y="405" width="0.0779%" height="15" fill="rgb(230,64,31)" fg:x="833" fg:w="1"/><text x="65.1254%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.8754%" y="389" width="0.0779%" height="15" fill="rgb(208,222,23)" fg:x="833" fg:w="1"/><text x="65.1254%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="64.8754%" y="373" width="0.0779%" height="15" fill="rgb(227,125,18)" fg:x="833" fg:w="1"/><text x="65.1254%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.62%)</title><rect x="64.9533%" y="405" width="0.6231%" height="15" fill="rgb(234,210,9)" fg:x="834" fg:w="8"/><text x="65.2033%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.47%)</title><rect x="65.1090%" y="389" width="0.4673%" height="15" fill="rgb(217,127,24)" fg:x="836" fg:w="6"/><text x="65.3590%" y="399.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="65.4206%" y="373" width="0.1558%" height="15" fill="rgb(239,141,48)" fg:x="840" fg:w="2"/><text x="65.6706%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.4984%" y="357" width="0.0779%" height="15" fill="rgb(227,109,8)" fg:x="841" fg:w="1"/><text x="65.7484%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4984%" y="341" width="0.0779%" height="15" fill="rgb(235,184,23)" fg:x="841" fg:w="1"/><text x="65.7484%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="65.5763%" y="373" width="0.0779%" height="15" fill="rgb(227,226,48)" fg:x="842" fg:w="1"/><text x="65.8263%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="65.5763%" y="389" width="0.2336%" height="15" fill="rgb(206,150,11)" fg:x="842" fg:w="3"/><text x="65.8263%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="65.6542%" y="373" width="0.1558%" height="15" fill="rgb(254,2,33)" fg:x="843" fg:w="2"/><text x="65.9042%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="65.6542%" y="357" width="0.1558%" height="15" fill="rgb(243,160,20)" fg:x="843" fg:w="2"/><text x="65.9042%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="65.6542%" y="341" width="0.1558%" height="15" fill="rgb(218,208,30)" fg:x="843" fg:w="2"/><text x="65.9042%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.8879%" y="373" width="0.0779%" height="15" fill="rgb(224,120,49)" fg:x="846" fg:w="1"/><text x="66.1379%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.23%)</title><rect x="65.9657%" y="373" width="0.2336%" height="15" fill="rgb(246,12,2)" fg:x="847" fg:w="3"/><text x="66.2157%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.1215%" y="357" width="0.0779%" height="15" fill="rgb(236,117,3)" fg:x="849" fg:w="1"/><text x="66.3715%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.1215%" y="341" width="0.0779%" height="15" fill="rgb(216,128,52)" fg:x="849" fg:w="1"/><text x="66.3715%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.39%)</title><rect x="66.1994%" y="373" width="0.3894%" height="15" fill="rgb(246,145,19)" fg:x="850" fg:w="5"/><text x="66.4494%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5109%" y="357" width="0.0779%" height="15" fill="rgb(222,11,46)" fg:x="854" fg:w="1"/><text x="66.7609%" y="367.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 1.95%)</title><rect x="64.7196%" y="421" width="1.9470%" height="15" fill="rgb(245,82,36)" fg:x="831" fg:w="25"/><text x="64.9696%" y="431.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.09%)</title><rect x="65.5763%" y="405" width="1.0903%" height="15" fill="rgb(250,73,51)" fg:x="842" fg:w="14"/><text x="65.8263%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.86%)</title><rect x="65.8100%" y="389" width="0.8567%" height="15" fill="rgb(221,189,23)" fg:x="845" fg:w="11"/><text x="66.0600%" y="399.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="66.5888%" y="373" width="0.0779%" height="15" fill="rgb(210,33,7)" fg:x="855" fg:w="1"/><text x="66.8388%" y="383.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="66.5888%" y="357" width="0.0779%" height="15" fill="rgb(210,107,22)" fg:x="855" fg:w="1"/><text x="66.8388%" y="367.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="66.9782%" y="373" width="0.0779%" height="15" fill="rgb(222,116,37)" fg:x="860" fg:w="1"/><text x="67.2282%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.9782%" y="357" width="0.0779%" height="15" fill="rgb(254,17,48)" fg:x="860" fg:w="1"/><text x="67.2282%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.9782%" y="341" width="0.0779%" height="15" fill="rgb(224,36,32)" fg:x="860" fg:w="1"/><text x="67.2282%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.9782%" y="325" width="0.0779%" height="15" fill="rgb(232,90,46)" fg:x="860" fg:w="1"/><text x="67.2282%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="67.0561%" y="341" width="0.0779%" height="15" fill="rgb(241,66,40)" fg:x="861" fg:w="1"/><text x="67.3061%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="67.0561%" y="373" width="0.1558%" height="15" fill="rgb(249,184,29)" fg:x="861" fg:w="2"/><text x="67.3061%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="67.0561%" y="357" width="0.1558%" height="15" fill="rgb(231,181,1)" fg:x="861" fg:w="2"/><text x="67.3061%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="67.1340%" y="341" width="0.0779%" height="15" fill="rgb(224,94,2)" fg:x="862" fg:w="1"/><text x="67.3840%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.78%)</title><rect x="66.6667%" y="421" width="0.7788%" height="15" fill="rgb(229,170,15)" fg:x="856" fg:w="10"/><text x="66.9167%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.78%)</title><rect x="66.6667%" y="405" width="0.7788%" height="15" fill="rgb(240,127,35)" fg:x="856" fg:w="10"/><text x="66.9167%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.70%)</title><rect x="66.7445%" y="389" width="0.7009%" height="15" fill="rgb(248,196,34)" fg:x="857" fg:w="9"/><text x="66.9945%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.23%)</title><rect x="67.2118%" y="373" width="0.2336%" height="15" fill="rgb(236,137,7)" fg:x="863" fg:w="3"/><text x="67.4618%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="67.2897%" y="357" width="0.1558%" height="15" fill="rgb(235,127,16)" fg:x="864" fg:w="2"/><text x="67.5397%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.2897%" y="341" width="0.1558%" height="15" fill="rgb(250,192,54)" fg:x="864" fg:w="2"/><text x="67.5397%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="67.2897%" y="325" width="0.1558%" height="15" fill="rgb(218,98,20)" fg:x="864" fg:w="2"/><text x="67.5397%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.31%)</title><rect x="67.5234%" y="389" width="0.3115%" height="15" fill="rgb(230,176,47)" fg:x="867" fg:w="4"/><text x="67.7734%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="67.6012%" y="373" width="0.2336%" height="15" fill="rgb(244,2,33)" fg:x="868" fg:w="3"/><text x="67.8512%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7570%" y="357" width="0.0779%" height="15" fill="rgb(231,100,17)" fg:x="870" fg:w="1"/><text x="68.0070%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7570%" y="341" width="0.0779%" height="15" fill="rgb(245,23,12)" fg:x="870" fg:w="1"/><text x="68.0070%" y="351.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="67.8349%" y="373" width="0.0779%" height="15" fill="rgb(249,55,22)" fg:x="871" fg:w="1"/><text x="68.0849%" y="383.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::literal (1 samples, 0.08%)</title><rect x="67.8349%" y="357" width="0.0779%" height="15" fill="rgb(207,134,9)" fg:x="871" fg:w="1"/><text x="68.0849%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9128%" y="357" width="0.0779%" height="15" fill="rgb(218,134,0)" fg:x="872" fg:w="1"/><text x="68.1628%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (55 samples, 4.28%)</title><rect x="63.7850%" y="437" width="4.2835%" height="15" fill="rgb(213,212,33)" fg:x="819" fg:w="55"/><text x="64.0350%" y="447.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.62%)</title><rect x="67.4455%" y="421" width="0.6231%" height="15" fill="rgb(252,106,18)" fg:x="866" fg:w="8"/><text x="67.6955%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.62%)</title><rect x="67.4455%" y="405" width="0.6231%" height="15" fill="rgb(208,126,42)" fg:x="866" fg:w="8"/><text x="67.6955%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.23%)</title><rect x="67.8349%" y="389" width="0.2336%" height="15" fill="rgb(246,175,29)" fg:x="871" fg:w="3"/><text x="68.0849%" y="399.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="67.9128%" y="373" width="0.1558%" height="15" fill="rgb(215,13,50)" fg:x="872" fg:w="2"/><text x="68.1628%" y="383.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="67.9907%" y="357" width="0.0779%" height="15" fill="rgb(216,172,15)" fg:x="873" fg:w="1"/><text x="68.2407%" y="367.50"></text></g><g><title>regex::regex::string::Regex::new (57 samples, 4.44%)</title><rect x="63.7072%" y="469" width="4.4393%" height="15" fill="rgb(212,103,13)" fg:x="818" fg:w="57"/><text x="63.9572%" y="479.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (56 samples, 4.36%)</title><rect x="63.7850%" y="453" width="4.3614%" height="15" fill="rgb(231,171,36)" fg:x="819" fg:w="56"/><text x="64.0350%" y="463.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="68.0685%" y="437" width="0.0779%" height="15" fill="rgb(250,123,20)" fg:x="874" fg:w="1"/><text x="68.3185%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1464%" y="405" width="0.0779%" height="15" fill="rgb(212,53,50)" fg:x="875" fg:w="1"/><text x="68.3964%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.1464%" y="389" width="0.0779%" height="15" fill="rgb(243,54,12)" fg:x="875" fg:w="1"/><text x="68.3964%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.3801%" y="389" width="0.0779%" height="15" fill="rgb(234,101,34)" fg:x="878" fg:w="1"/><text x="68.6301%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.3801%" y="373" width="0.0779%" height="15" fill="rgb(254,67,22)" fg:x="878" fg:w="1"/><text x="68.6301%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3801%" y="357" width="0.0779%" height="15" fill="rgb(250,35,47)" fg:x="878" fg:w="1"/><text x="68.6301%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.39%)</title><rect x="68.2243%" y="405" width="0.3894%" height="15" fill="rgb(226,126,38)" fg:x="876" fg:w="5"/><text x="68.4743%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="68.4579%" y="389" width="0.1558%" height="15" fill="rgb(216,138,53)" fg:x="879" fg:w="2"/><text x="68.7079%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.55%)</title><rect x="68.1464%" y="421" width="0.5452%" height="15" fill="rgb(246,199,43)" fg:x="875" fg:w="7"/><text x="68.3964%" y="431.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="68.6137%" y="405" width="0.0779%" height="15" fill="rgb(232,125,11)" fg:x="881" fg:w="1"/><text x="68.8637%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.6137%" y="389" width="0.0779%" height="15" fill="rgb(218,219,45)" fg:x="881" fg:w="1"/><text x="68.8637%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.6137%" y="373" width="0.0779%" height="15" fill="rgb(216,102,54)" fg:x="881" fg:w="1"/><text x="68.8637%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6137%" y="357" width="0.0779%" height="15" fill="rgb(250,228,7)" fg:x="881" fg:w="1"/><text x="68.8637%" y="367.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (72 samples, 5.61%)</title><rect x="63.1620%" y="485" width="5.6075%" height="15" fill="rgb(226,125,25)" fg:x="811" fg:w="72"/><text x="63.4120%" y="495.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.62%)</title><rect x="68.1464%" y="469" width="0.6231%" height="15" fill="rgb(224,165,27)" fg:x="875" fg:w="8"/><text x="68.3964%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.62%)</title><rect x="68.1464%" y="453" width="0.6231%" height="15" fill="rgb(233,86,3)" fg:x="875" fg:w="8"/><text x="68.3964%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.62%)</title><rect x="68.1464%" y="437" width="0.6231%" height="15" fill="rgb(228,116,20)" fg:x="875" fg:w="8"/><text x="68.3964%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="68.6916%" y="421" width="0.0779%" height="15" fill="rgb(209,192,17)" fg:x="882" fg:w="1"/><text x="68.9416%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="68.6916%" y="405" width="0.0779%" height="15" fill="rgb(224,88,34)" fg:x="882" fg:w="1"/><text x="68.9416%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.6916%" y="389" width="0.0779%" height="15" fill="rgb(233,38,6)" fg:x="882" fg:w="1"/><text x="68.9416%" y="399.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (740 samples, 57.63%)</title><rect x="11.3707%" y="581" width="57.6324%" height="15" fill="rgb(212,59,30)" fg:x="146" fg:w="740"/><text x="11.6207%" y="591.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;..</text></g><g><title>plugins_core::looking::model::qualify_name (738 samples, 57.48%)</title><rect x="11.5265%" y="565" width="57.4766%" height="15" fill="rgb(213,80,3)" fg:x="148" fg:w="738"/><text x="11.7765%" y="575.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (738 samples, 57.48%)</title><rect x="11.5265%" y="549" width="57.4766%" height="15" fill="rgb(251,178,7)" fg:x="148" fg:w="738"/><text x="11.7765%" y="559.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (737 samples, 57.40%)</title><rect x="11.6044%" y="533" width="57.3988%" height="15" fill="rgb(213,154,26)" fg:x="149" fg:w="737"/><text x="11.8544%" y="543.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (737 samples, 57.40%)</title><rect x="11.6044%" y="517" width="57.3988%" height="15" fill="rgb(238,165,49)" fg:x="149" fg:w="737"/><text x="11.8544%" y="527.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (75 samples, 5.84%)</title><rect x="63.1620%" y="501" width="5.8411%" height="15" fill="rgb(248,91,46)" fg:x="811" fg:w="75"/><text x="63.4120%" y="511.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.23%)</title><rect x="68.7695%" y="485" width="0.2336%" height="15" fill="rgb(244,21,52)" fg:x="883" fg:w="3"/><text x="69.0195%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9252%" y="469" width="0.0779%" height="15" fill="rgb(247,122,20)" fg:x="885" fg:w="1"/><text x="69.1752%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.0031%" y="581" width="0.0779%" height="15" fill="rgb(218,27,9)" fg:x="886" fg:w="1"/><text x="69.2531%" y="591.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="69.0810%" y="581" width="0.0779%" height="15" fill="rgb(246,7,6)" fg:x="887" fg:w="1"/><text x="69.3310%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="69.0810%" y="565" width="0.0779%" height="15" fill="rgb(227,135,54)" fg:x="887" fg:w="1"/><text x="69.3310%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="69.0810%" y="549" width="0.0779%" height="15" fill="rgb(247,14,11)" fg:x="887" fg:w="1"/><text x="69.3310%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0810%" y="533" width="0.0779%" height="15" fill="rgb(206,149,34)" fg:x="887" fg:w="1"/><text x="69.3310%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0810%" y="517" width="0.0779%" height="15" fill="rgb(227,228,4)" fg:x="887" fg:w="1"/><text x="69.3310%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.0810%" y="501" width="0.0779%" height="15" fill="rgb(238,218,28)" fg:x="887" fg:w="1"/><text x="69.3310%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.0810%" y="485" width="0.0779%" height="15" fill="rgb(252,86,40)" fg:x="887" fg:w="1"/><text x="69.3310%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.0810%" y="469" width="0.0779%" height="15" fill="rgb(251,225,11)" fg:x="887" fg:w="1"/><text x="69.3310%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.0810%" y="453" width="0.0779%" height="15" fill="rgb(206,46,49)" fg:x="887" fg:w="1"/><text x="69.3310%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.0810%" y="437" width="0.0779%" height="15" fill="rgb(245,128,24)" fg:x="887" fg:w="1"/><text x="69.3310%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.0810%" y="421" width="0.0779%" height="15" fill="rgb(219,177,34)" fg:x="887" fg:w="1"/><text x="69.3310%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.0810%" y="405" width="0.0779%" height="15" fill="rgb(218,60,48)" fg:x="887" fg:w="1"/><text x="69.3310%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.0810%" y="389" width="0.0779%" height="15" fill="rgb(221,11,5)" fg:x="887" fg:w="1"/><text x="69.3310%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.0810%" y="373" width="0.0779%" height="15" fill="rgb(220,148,13)" fg:x="887" fg:w="1"/><text x="69.3310%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0810%" y="357" width="0.0779%" height="15" fill="rgb(210,16,3)" fg:x="887" fg:w="1"/><text x="69.3310%" y="367.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (744 samples, 57.94%)</title><rect x="11.2928%" y="613" width="57.9439%" height="15" fill="rgb(236,80,2)" fg:x="145" fg:w="744"/><text x="11.5428%" y="623.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (744 samples, 57.94%)</title><rect x="11.2928%" y="597" width="57.9439%" height="15" fill="rgb(239,129,19)" fg:x="145" fg:w="744"/><text x="11.5428%" y="607.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="69.1589%" y="581" width="0.0779%" height="15" fill="rgb(220,106,35)" fg:x="888" fg:w="1"/><text x="69.4089%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="69.1589%" y="565" width="0.0779%" height="15" fill="rgb(252,139,45)" fg:x="888" fg:w="1"/><text x="69.4089%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="69.1589%" y="549" width="0.0779%" height="15" fill="rgb(229,8,36)" fg:x="888" fg:w="1"/><text x="69.4089%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="69.1589%" y="533" width="0.0779%" height="15" fill="rgb(230,126,33)" fg:x="888" fg:w="1"/><text x="69.4089%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.1589%" y="517" width="0.0779%" height="15" fill="rgb(239,140,21)" fg:x="888" fg:w="1"/><text x="69.4089%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.1589%" y="501" width="0.0779%" height="15" fill="rgb(254,104,9)" fg:x="888" fg:w="1"/><text x="69.4089%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="69.1589%" y="485" width="0.0779%" height="15" fill="rgb(239,52,14)" fg:x="888" fg:w="1"/><text x="69.4089%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="69.1589%" y="469" width="0.0779%" height="15" fill="rgb(208,227,44)" fg:x="888" fg:w="1"/><text x="69.4089%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="69.1589%" y="453" width="0.0779%" height="15" fill="rgb(246,18,19)" fg:x="888" fg:w="1"/><text x="69.4089%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1589%" y="437" width="0.0779%" height="15" fill="rgb(235,228,25)" fg:x="888" fg:w="1"/><text x="69.4089%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1589%" y="421" width="0.0779%" height="15" fill="rgb(240,156,20)" fg:x="888" fg:w="1"/><text x="69.4089%" y="431.50"></text></g><g><title>kernel::model::Entity::gid (1 samples, 0.08%)</title><rect x="69.3146%" y="565" width="0.0779%" height="15" fill="rgb(224,8,20)" fg:x="890" fg:w="1"/><text x="69.5646%" y="575.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="69.3146%" y="549" width="0.0779%" height="15" fill="rgb(214,12,52)" fg:x="890" fg:w="1"/><text x="69.5646%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.3146%" y="533" width="0.0779%" height="15" fill="rgb(211,220,47)" fg:x="890" fg:w="1"/><text x="69.5646%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="69.3146%" y="597" width="0.1558%" height="15" fill="rgb(250,173,5)" fg:x="890" fg:w="2"/><text x="69.5646%" y="607.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="69.3146%" y="581" width="0.1558%" height="15" fill="rgb(250,125,52)" fg:x="890" fg:w="2"/><text x="69.5646%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="69.3925%" y="565" width="0.0779%" height="15" fill="rgb(209,133,18)" fg:x="891" fg:w="1"/><text x="69.6425%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="69.3925%" y="549" width="0.0779%" height="15" fill="rgb(216,173,22)" fg:x="891" fg:w="1"/><text x="69.6425%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="69.3925%" y="533" width="0.0779%" height="15" fill="rgb(205,3,22)" fg:x="891" fg:w="1"/><text x="69.6425%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3925%" y="517" width="0.0779%" height="15" fill="rgb(248,22,20)" fg:x="891" fg:w="1"/><text x="69.6425%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3925%" y="501" width="0.0779%" height="15" fill="rgb(233,6,29)" fg:x="891" fg:w="1"/><text x="69.6425%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3925%" y="485" width="0.0779%" height="15" fill="rgb(240,22,54)" fg:x="891" fg:w="1"/><text x="69.6425%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3925%" y="469" width="0.0779%" height="15" fill="rgb(231,133,32)" fg:x="891" fg:w="1"/><text x="69.6425%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3925%" y="453" width="0.0779%" height="15" fill="rgb(248,193,4)" fg:x="891" fg:w="1"/><text x="69.6425%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3925%" y="437" width="0.0779%" height="15" fill="rgb(211,178,46)" fg:x="891" fg:w="1"/><text x="69.6425%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3925%" y="421" width="0.0779%" height="15" fill="rgb(224,5,42)" fg:x="891" fg:w="1"/><text x="69.6425%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.3925%" y="405" width="0.0779%" height="15" fill="rgb(239,176,25)" fg:x="891" fg:w="1"/><text x="69.6425%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3925%" y="389" width="0.0779%" height="15" fill="rgb(245,187,50)" fg:x="891" fg:w="1"/><text x="69.6425%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3925%" y="373" width="0.0779%" height="15" fill="rgb(248,24,15)" fg:x="891" fg:w="1"/><text x="69.6425%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3925%" y="357" width="0.0779%" height="15" fill="rgb(205,166,13)" fg:x="891" fg:w="1"/><text x="69.6425%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.4704%" y="533" width="0.0779%" height="15" fill="rgb(208,114,23)" fg:x="892" fg:w="1"/><text x="69.7204%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4704%" y="517" width="0.0779%" height="15" fill="rgb(239,127,18)" fg:x="892" fg:w="1"/><text x="69.7204%" y="527.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.23%)</title><rect x="69.4704%" y="597" width="0.2336%" height="15" fill="rgb(219,154,28)" fg:x="892" fg:w="3"/><text x="69.7204%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.23%)</title><rect x="69.4704%" y="581" width="0.2336%" height="15" fill="rgb(225,157,23)" fg:x="892" fg:w="3"/><text x="69.7204%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.23%)</title><rect x="69.4704%" y="565" width="0.2336%" height="15" fill="rgb(219,8,6)" fg:x="892" fg:w="3"/><text x="69.7204%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.23%)</title><rect x="69.4704%" y="549" width="0.2336%" height="15" fill="rgb(212,47,6)" fg:x="892" fg:w="3"/><text x="69.7204%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="69.5483%" y="533" width="0.1558%" height="15" fill="rgb(224,190,4)" fg:x="893" fg:w="2"/><text x="69.7983%" y="543.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="69.5483%" y="517" width="0.1558%" height="15" fill="rgb(239,183,29)" fg:x="893" fg:w="2"/><text x="69.7983%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="69.5483%" y="501" width="0.1558%" height="15" fill="rgb(213,57,7)" fg:x="893" fg:w="2"/><text x="69.7983%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="69.5483%" y="485" width="0.1558%" height="15" fill="rgb(216,148,1)" fg:x="893" fg:w="2"/><text x="69.7983%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="69.5483%" y="469" width="0.1558%" height="15" fill="rgb(236,182,29)" fg:x="893" fg:w="2"/><text x="69.7983%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.5483%" y="453" width="0.1558%" height="15" fill="rgb(244,120,48)" fg:x="893" fg:w="2"/><text x="69.7983%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.5483%" y="437" width="0.1558%" height="15" fill="rgb(206,71,34)" fg:x="893" fg:w="2"/><text x="69.7983%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.6262%" y="421" width="0.0779%" height="15" fill="rgb(242,32,6)" fg:x="894" fg:w="1"/><text x="69.8762%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6262%" y="405" width="0.0779%" height="15" fill="rgb(241,35,3)" fg:x="894" fg:w="1"/><text x="69.8762%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6262%" y="389" width="0.0779%" height="15" fill="rgb(222,62,19)" fg:x="894" fg:w="1"/><text x="69.8762%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.6262%" y="373" width="0.0779%" height="15" fill="rgb(223,110,41)" fg:x="894" fg:w="1"/><text x="69.8762%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6262%" y="357" width="0.0779%" height="15" fill="rgb(208,224,4)" fg:x="894" fg:w="1"/><text x="69.8762%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.6262%" y="341" width="0.0779%" height="15" fill="rgb(241,137,19)" fg:x="894" fg:w="1"/><text x="69.8762%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.6262%" y="325" width="0.0779%" height="15" fill="rgb(244,24,17)" fg:x="894" fg:w="1"/><text x="69.8762%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.6262%" y="309" width="0.0779%" height="15" fill="rgb(245,178,49)" fg:x="894" fg:w="1"/><text x="69.8762%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.6262%" y="293" width="0.0779%" height="15" fill="rgb(219,160,38)" fg:x="894" fg:w="1"/><text x="69.8762%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6262%" y="277" width="0.0779%" height="15" fill="rgb(228,137,14)" fg:x="894" fg:w="1"/><text x="69.8762%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6262%" y="261" width="0.0779%" height="15" fill="rgb(237,134,11)" fg:x="894" fg:w="1"/><text x="69.8762%" y="271.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (8 samples, 0.62%)</title><rect x="69.2368%" y="613" width="0.6231%" height="15" fill="rgb(211,126,44)" fg:x="889" fg:w="8"/><text x="69.4868%" y="623.50"></text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="69.7040%" y="597" width="0.1558%" height="15" fill="rgb(226,171,33)" fg:x="895" fg:w="2"/><text x="69.9540%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="69.7040%" y="581" width="0.1558%" height="15" fill="rgb(253,99,13)" fg:x="895" fg:w="2"/><text x="69.9540%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="69.7040%" y="565" width="0.1558%" height="15" fill="rgb(244,48,7)" fg:x="895" fg:w="2"/><text x="69.9540%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="69.7040%" y="549" width="0.1558%" height="15" fill="rgb(244,217,54)" fg:x="895" fg:w="2"/><text x="69.9540%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="69.7040%" y="533" width="0.1558%" height="15" fill="rgb(224,15,18)" fg:x="895" fg:w="2"/><text x="69.9540%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="69.7040%" y="517" width="0.1558%" height="15" fill="rgb(244,99,12)" fg:x="895" fg:w="2"/><text x="69.9540%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="69.7040%" y="501" width="0.1558%" height="15" fill="rgb(233,226,8)" fg:x="895" fg:w="2"/><text x="69.9540%" y="511.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="69.7040%" y="485" width="0.1558%" height="15" fill="rgb(229,211,3)" fg:x="895" fg:w="2"/><text x="69.9540%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="69.7040%" y="469" width="0.1558%" height="15" fill="rgb(216,140,21)" fg:x="895" fg:w="2"/><text x="69.9540%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.7819%" y="453" width="0.0779%" height="15" fill="rgb(234,122,30)" fg:x="896" fg:w="1"/><text x="70.0319%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.7819%" y="437" width="0.0779%" height="15" fill="rgb(236,25,46)" fg:x="896" fg:w="1"/><text x="70.0319%" y="447.50"></text></g><g><title>kernel::plugins::SessionPlugins::evaluate (1 samples, 0.08%)</title><rect x="69.8598%" y="613" width="0.0779%" height="15" fill="rgb(217,52,54)" fg:x="897" fg:w="1"/><text x="70.1098%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="69.8598%" y="597" width="0.0779%" height="15" fill="rgb(222,29,26)" fg:x="897" fg:w="1"/><text x="70.1098%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="69.8598%" y="581" width="0.0779%" height="15" fill="rgb(216,177,29)" fg:x="897" fg:w="1"/><text x="70.1098%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.2492%" y="517" width="0.1558%" height="15" fill="rgb(247,136,51)" fg:x="902" fg:w="2"/><text x="70.4992%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="70.1713%" y="533" width="0.3894%" height="15" fill="rgb(231,47,47)" fg:x="901" fg:w="5"/><text x="70.4213%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rpc_proto::JsonValue&gt; (2 samples, 0.16%)</title><rect x="70.4050%" y="517" width="0.1558%" height="15" fill="rgb(211,192,36)" fg:x="904" fg:w="2"/><text x="70.6550%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="70.4050%" y="501" width="0.1558%" height="15" fill="rgb(229,156,32)" fg:x="904" fg:w="2"/><text x="70.6550%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.4050%" y="485" width="0.1558%" height="15" fill="rgb(248,213,20)" fg:x="904" fg:w="2"/><text x="70.6550%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynMessage&gt; (9 samples, 0.70%)</title><rect x="69.9377%" y="581" width="0.7009%" height="15" fill="rgb(217,64,7)" fg:x="898" fg:w="9"/><text x="70.1877%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.70%)</title><rect x="69.9377%" y="565" width="0.7009%" height="15" fill="rgb(232,142,8)" fg:x="898" fg:w="9"/><text x="70.1877%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.70%)</title><rect x="69.9377%" y="549" width="0.7009%" height="15" fill="rgb(224,92,44)" fg:x="898" fg:w="9"/><text x="70.1877%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5607%" y="533" width="0.0779%" height="15" fill="rgb(214,169,17)" fg:x="906" fg:w="1"/><text x="70.8107%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.6386%" y="549" width="0.1558%" height="15" fill="rgb(210,59,37)" fg:x="907" fg:w="2"/><text x="70.8886%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7165%" y="533" width="0.0779%" height="15" fill="rgb(214,116,48)" fg:x="908" fg:w="1"/><text x="70.9665%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8723%" y="405" width="0.0779%" height="15" fill="rgb(244,191,6)" fg:x="910" fg:w="1"/><text x="71.1223%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8723%" y="389" width="0.0779%" height="15" fill="rgb(241,50,52)" fg:x="910" fg:w="1"/><text x="71.1223%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8723%" y="373" width="0.0779%" height="15" fill="rgb(236,75,39)" fg:x="910" fg:w="1"/><text x="71.1223%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8723%" y="357" width="0.0779%" height="15" fill="rgb(236,99,0)" fg:x="910" fg:w="1"/><text x="71.1223%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.8723%" y="341" width="0.0779%" height="15" fill="rgb(207,202,15)" fg:x="910" fg:w="1"/><text x="71.1223%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.8723%" y="325" width="0.0779%" height="15" fill="rgb(233,207,14)" fg:x="910" fg:w="1"/><text x="71.1223%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.8723%" y="309" width="0.0779%" height="15" fill="rgb(226,27,51)" fg:x="910" fg:w="1"/><text x="71.1223%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8723%" y="293" width="0.0779%" height="15" fill="rgb(206,104,42)" fg:x="910" fg:w="1"/><text x="71.1223%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8723%" y="277" width="0.0779%" height="15" fill="rgb(212,225,4)" fg:x="910" fg:w="1"/><text x="71.1223%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.8723%" y="261" width="0.0779%" height="15" fill="rgb(233,96,42)" fg:x="910" fg:w="1"/><text x="71.1223%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.8723%" y="245" width="0.0779%" height="15" fill="rgb(229,21,32)" fg:x="910" fg:w="1"/><text x="71.1223%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.8723%" y="229" width="0.0779%" height="15" fill="rgb(226,216,24)" fg:x="910" fg:w="1"/><text x="71.1223%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.8723%" y="213" width="0.0779%" height="15" fill="rgb(221,163,17)" fg:x="910" fg:w="1"/><text x="71.1223%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8723%" y="197" width="0.0779%" height="15" fill="rgb(216,216,42)" fg:x="910" fg:w="1"/><text x="71.1223%" y="207.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="70.9502%" y="357" width="0.0779%" height="15" fill="rgb(240,118,7)" fg:x="911" fg:w="1"/><text x="71.2002%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="70.9502%" y="341" width="0.0779%" height="15" fill="rgb(221,67,37)" fg:x="911" fg:w="1"/><text x="71.2002%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9502%" y="325" width="0.0779%" height="15" fill="rgb(241,32,44)" fg:x="911" fg:w="1"/><text x="71.2002%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9502%" y="309" width="0.0779%" height="15" fill="rgb(235,204,43)" fg:x="911" fg:w="1"/><text x="71.2002%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9502%" y="293" width="0.0779%" height="15" fill="rgb(213,116,10)" fg:x="911" fg:w="1"/><text x="71.2002%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9502%" y="277" width="0.0779%" height="15" fill="rgb(239,15,48)" fg:x="911" fg:w="1"/><text x="71.2002%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.9502%" y="261" width="0.0779%" height="15" fill="rgb(207,123,36)" fg:x="911" fg:w="1"/><text x="71.2002%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9502%" y="245" width="0.0779%" height="15" fill="rgb(209,103,30)" fg:x="911" fg:w="1"/><text x="71.2002%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.9502%" y="229" width="0.0779%" height="15" fill="rgb(238,100,19)" fg:x="911" fg:w="1"/><text x="71.2002%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.9502%" y="213" width="0.0779%" height="15" fill="rgb(244,30,14)" fg:x="911" fg:w="1"/><text x="71.2002%" y="223.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.23%)</title><rect x="70.8723%" y="485" width="0.2336%" height="15" fill="rgb(249,174,6)" fg:x="910" fg:w="3"/><text x="71.1223%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="70.8723%" y="469" width="0.2336%" height="15" fill="rgb(235,213,41)" fg:x="910" fg:w="3"/><text x="71.1223%" y="479.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.23%)</title><rect x="70.8723%" y="453" width="0.2336%" height="15" fill="rgb(213,118,6)" fg:x="910" fg:w="3"/><text x="71.1223%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (3 samples, 0.23%)</title><rect x="70.8723%" y="437" width="0.2336%" height="15" fill="rgb(235,44,51)" fg:x="910" fg:w="3"/><text x="71.1223%" y="447.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.23%)</title><rect x="70.8723%" y="421" width="0.2336%" height="15" fill="rgb(217,9,53)" fg:x="910" fg:w="3"/><text x="71.1223%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="70.9502%" y="405" width="0.1558%" height="15" fill="rgb(237,172,34)" fg:x="911" fg:w="2"/><text x="71.2002%" y="415.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="70.9502%" y="389" width="0.1558%" height="15" fill="rgb(206,206,11)" fg:x="911" fg:w="2"/><text x="71.2002%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="70.9502%" y="373" width="0.1558%" height="15" fill="rgb(214,149,29)" fg:x="911" fg:w="2"/><text x="71.2002%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="71.0280%" y="357" width="0.0779%" height="15" fill="rgb(208,123,3)" fg:x="912" fg:w="1"/><text x="71.2780%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0280%" y="341" width="0.0779%" height="15" fill="rgb(229,126,4)" fg:x="912" fg:w="1"/><text x="71.2780%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0280%" y="325" width="0.0779%" height="15" fill="rgb(222,92,36)" fg:x="912" fg:w="1"/><text x="71.2780%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0280%" y="309" width="0.0779%" height="15" fill="rgb(216,39,41)" fg:x="912" fg:w="1"/><text x="71.2780%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0280%" y="293" width="0.0779%" height="15" fill="rgb(253,127,28)" fg:x="912" fg:w="1"/><text x="71.2780%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0280%" y="277" width="0.0779%" height="15" fill="rgb(249,152,51)" fg:x="912" fg:w="1"/><text x="71.2780%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0280%" y="261" width="0.0779%" height="15" fill="rgb(209,123,42)" fg:x="912" fg:w="1"/><text x="71.2780%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0280%" y="245" width="0.0779%" height="15" fill="rgb(241,118,22)" fg:x="912" fg:w="1"/><text x="71.2780%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0280%" y="229" width="0.0779%" height="15" fill="rgb(208,25,7)" fg:x="912" fg:w="1"/><text x="71.2780%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.0280%" y="213" width="0.0779%" height="15" fill="rgb(243,144,39)" fg:x="912" fg:w="1"/><text x="71.2780%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0280%" y="197" width="0.0779%" height="15" fill="rgb(250,50,5)" fg:x="912" fg:w="1"/><text x="71.2780%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1059%" y="453" width="0.0779%" height="15" fill="rgb(207,67,11)" fg:x="913" fg:w="1"/><text x="71.3559%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1059%" y="437" width="0.0779%" height="15" fill="rgb(245,204,40)" fg:x="913" fg:w="1"/><text x="71.3559%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1059%" y="421" width="0.0779%" height="15" fill="rgb(238,228,24)" fg:x="913" fg:w="1"/><text x="71.3559%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1059%" y="405" width="0.0779%" height="15" fill="rgb(217,116,22)" fg:x="913" fg:w="1"/><text x="71.3559%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1059%" y="389" width="0.0779%" height="15" fill="rgb(234,98,12)" fg:x="913" fg:w="1"/><text x="71.3559%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.1059%" y="373" width="0.0779%" height="15" fill="rgb(242,170,50)" fg:x="913" fg:w="1"/><text x="71.3559%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.1059%" y="357" width="0.0779%" height="15" fill="rgb(235,7,5)" fg:x="913" fg:w="1"/><text x="71.3559%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.1059%" y="341" width="0.0779%" height="15" fill="rgb(241,114,28)" fg:x="913" fg:w="1"/><text x="71.3559%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1059%" y="325" width="0.0779%" height="15" fill="rgb(246,112,42)" fg:x="913" fg:w="1"/><text x="71.3559%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1059%" y="309" width="0.0779%" height="15" fill="rgb(248,228,14)" fg:x="913" fg:w="1"/><text x="71.3559%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.1059%" y="293" width="0.0779%" height="15" fill="rgb(208,133,18)" fg:x="913" fg:w="1"/><text x="71.3559%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.1059%" y="277" width="0.0779%" height="15" fill="rgb(207,35,49)" fg:x="913" fg:w="1"/><text x="71.3559%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.1059%" y="261" width="0.0779%" height="15" fill="rgb(205,68,36)" fg:x="913" fg:w="1"/><text x="71.3559%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.1059%" y="245" width="0.0779%" height="15" fill="rgb(245,62,40)" fg:x="913" fg:w="1"/><text x="71.3559%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1059%" y="229" width="0.0779%" height="15" fill="rgb(228,27,24)" fg:x="913" fg:w="1"/><text x="71.3559%" y="239.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (5 samples, 0.39%)</title><rect x="70.8723%" y="501" width="0.3894%" height="15" fill="rgb(253,19,12)" fg:x="910" fg:w="5"/><text x="71.1223%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="71.1059%" y="485" width="0.1558%" height="15" fill="rgb(232,28,20)" fg:x="913" fg:w="2"/><text x="71.3559%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="71.1059%" y="469" width="0.1558%" height="15" fill="rgb(218,35,51)" fg:x="913" fg:w="2"/><text x="71.3559%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1838%" y="453" width="0.0779%" height="15" fill="rgb(212,90,40)" fg:x="914" fg:w="1"/><text x="71.4338%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1838%" y="437" width="0.0779%" height="15" fill="rgb(220,172,12)" fg:x="914" fg:w="1"/><text x="71.4338%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.1838%" y="421" width="0.0779%" height="15" fill="rgb(226,159,20)" fg:x="914" fg:w="1"/><text x="71.4338%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.1838%" y="405" width="0.0779%" height="15" fill="rgb(234,205,16)" fg:x="914" fg:w="1"/><text x="71.4338%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.1838%" y="389" width="0.0779%" height="15" fill="rgb(207,9,39)" fg:x="914" fg:w="1"/><text x="71.4338%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.2617%" y="485" width="0.0779%" height="15" fill="rgb(249,143,15)" fg:x="915" fg:w="1"/><text x="71.5117%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2617%" y="469" width="0.0779%" height="15" fill="rgb(253,133,29)" fg:x="915" fg:w="1"/><text x="71.5117%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="71.3396%" y="357" width="0.0779%" height="15" fill="rgb(221,187,0)" fg:x="916" fg:w="1"/><text x="71.5896%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.4174%" y="277" width="0.0779%" height="15" fill="rgb(205,204,26)" fg:x="917" fg:w="1"/><text x="71.6674%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4174%" y="261" width="0.0779%" height="15" fill="rgb(224,68,54)" fg:x="917" fg:w="1"/><text x="71.6674%" y="271.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.4174%" y="245" width="0.0779%" height="15" fill="rgb(209,67,4)" fg:x="917" fg:w="1"/><text x="71.6674%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="71.4174%" y="341" width="0.1558%" height="15" fill="rgb(228,229,18)" fg:x="917" fg:w="2"/><text x="71.6674%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="71.4174%" y="325" width="0.1558%" height="15" fill="rgb(231,89,13)" fg:x="917" fg:w="2"/><text x="71.6674%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4174%" y="309" width="0.1558%" height="15" fill="rgb(210,182,18)" fg:x="917" fg:w="2"/><text x="71.6674%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4174%" y="293" width="0.1558%" height="15" fill="rgb(240,105,2)" fg:x="917" fg:w="2"/><text x="71.6674%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.4953%" y="277" width="0.0779%" height="15" fill="rgb(207,170,50)" fg:x="918" fg:w="1"/><text x="71.7453%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4953%" y="261" width="0.0779%" height="15" fill="rgb(232,133,24)" fg:x="918" fg:w="1"/><text x="71.7453%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.4953%" y="245" width="0.0779%" height="15" fill="rgb(235,166,27)" fg:x="918" fg:w="1"/><text x="71.7453%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4953%" y="229" width="0.0779%" height="15" fill="rgb(209,19,13)" fg:x="918" fg:w="1"/><text x="71.7453%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.4953%" y="213" width="0.0779%" height="15" fill="rgb(226,79,39)" fg:x="918" fg:w="1"/><text x="71.7453%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.4953%" y="197" width="0.0779%" height="15" fill="rgb(222,163,10)" fg:x="918" fg:w="1"/><text x="71.7453%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.6511%" y="261" width="0.0779%" height="15" fill="rgb(214,44,19)" fg:x="920" fg:w="1"/><text x="71.9011%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.6511%" y="245" width="0.0779%" height="15" fill="rgb(210,217,13)" fg:x="920" fg:w="1"/><text x="71.9011%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.7290%" y="165" width="0.0779%" height="15" fill="rgb(237,61,54)" fg:x="921" fg:w="1"/><text x="71.9790%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7290%" y="149" width="0.0779%" height="15" fill="rgb(226,184,24)" fg:x="921" fg:w="1"/><text x="71.9790%" y="159.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (7 samples, 0.55%)</title><rect x="71.3396%" y="453" width="0.5452%" height="15" fill="rgb(223,226,4)" fg:x="916" fg:w="7"/><text x="71.5896%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.55%)</title><rect x="71.3396%" y="437" width="0.5452%" height="15" fill="rgb(210,26,41)" fg:x="916" fg:w="7"/><text x="71.5896%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="71.3396%" y="421" width="0.5452%" height="15" fill="rgb(220,221,6)" fg:x="916" fg:w="7"/><text x="71.5896%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.55%)</title><rect x="71.3396%" y="405" width="0.5452%" height="15" fill="rgb(225,89,49)" fg:x="916" fg:w="7"/><text x="71.5896%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.55%)</title><rect x="71.3396%" y="389" width="0.5452%" height="15" fill="rgb(218,70,45)" fg:x="916" fg:w="7"/><text x="71.5896%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (7 samples, 0.55%)</title><rect x="71.3396%" y="373" width="0.5452%" height="15" fill="rgb(238,166,21)" fg:x="916" fg:w="7"/><text x="71.5896%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.47%)</title><rect x="71.4174%" y="357" width="0.4673%" height="15" fill="rgb(224,141,44)" fg:x="917" fg:w="6"/><text x="71.6674%" y="367.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.31%)</title><rect x="71.5732%" y="341" width="0.3115%" height="15" fill="rgb(230,12,49)" fg:x="919" fg:w="4"/><text x="71.8232%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="71.5732%" y="325" width="0.3115%" height="15" fill="rgb(212,174,12)" fg:x="919" fg:w="4"/><text x="71.8232%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="71.5732%" y="309" width="0.3115%" height="15" fill="rgb(246,67,9)" fg:x="919" fg:w="4"/><text x="71.8232%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="71.5732%" y="293" width="0.3115%" height="15" fill="rgb(239,35,23)" fg:x="919" fg:w="4"/><text x="71.8232%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="71.5732%" y="277" width="0.3115%" height="15" fill="rgb(211,167,0)" fg:x="919" fg:w="4"/><text x="71.8232%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.7290%" y="261" width="0.1558%" height="15" fill="rgb(225,119,45)" fg:x="921" fg:w="2"/><text x="71.9790%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7290%" y="245" width="0.1558%" height="15" fill="rgb(210,162,6)" fg:x="921" fg:w="2"/><text x="71.9790%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.7290%" y="229" width="0.1558%" height="15" fill="rgb(208,118,35)" fg:x="921" fg:w="2"/><text x="71.9790%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7290%" y="213" width="0.1558%" height="15" fill="rgb(239,4,53)" fg:x="921" fg:w="2"/><text x="71.9790%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.7290%" y="197" width="0.1558%" height="15" fill="rgb(213,130,21)" fg:x="921" fg:w="2"/><text x="71.9790%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.7290%" y="181" width="0.1558%" height="15" fill="rgb(235,148,0)" fg:x="921" fg:w="2"/><text x="71.9790%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8069%" y="165" width="0.0779%" height="15" fill="rgb(244,224,18)" fg:x="922" fg:w="1"/><text x="72.0569%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8069%" y="149" width="0.0779%" height="15" fill="rgb(211,214,4)" fg:x="922" fg:w="1"/><text x="72.0569%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8069%" y="133" width="0.0779%" height="15" fill="rgb(206,119,25)" fg:x="922" fg:w="1"/><text x="72.0569%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.9626%" y="421" width="0.0779%" height="15" fill="rgb(243,93,47)" fg:x="924" fg:w="1"/><text x="72.2126%" y="431.50"></text></g><g><title>plugins_core::tools::get_contained_keys (12 samples, 0.93%)</title><rect x="71.2617%" y="501" width="0.9346%" height="15" fill="rgb(224,194,6)" fg:x="915" fg:w="12"/><text x="71.5117%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (11 samples, 0.86%)</title><rect x="71.3396%" y="485" width="0.8567%" height="15" fill="rgb(243,229,6)" fg:x="916" fg:w="11"/><text x="71.5896%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (11 samples, 0.86%)</title><rect x="71.3396%" y="469" width="0.8567%" height="15" fill="rgb(207,23,50)" fg:x="916" fg:w="11"/><text x="71.5896%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.31%)</title><rect x="71.8847%" y="453" width="0.3115%" height="15" fill="rgb(253,192,32)" fg:x="923" fg:w="4"/><text x="72.1347%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.31%)</title><rect x="71.8847%" y="437" width="0.3115%" height="15" fill="rgb(213,21,6)" fg:x="923" fg:w="4"/><text x="72.1347%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="72.0405%" y="421" width="0.1558%" height="15" fill="rgb(243,151,13)" fg:x="925" fg:w="2"/><text x="72.2905%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.1184%" y="405" width="0.0779%" height="15" fill="rgb(233,165,41)" fg:x="926" fg:w="1"/><text x="72.3684%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.1184%" y="389" width="0.0779%" height="15" fill="rgb(246,176,45)" fg:x="926" fg:w="1"/><text x="72.3684%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1184%" y="373" width="0.0779%" height="15" fill="rgb(217,170,52)" fg:x="926" fg:w="1"/><text x="72.3684%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1184%" y="357" width="0.0779%" height="15" fill="rgb(214,203,54)" fg:x="926" fg:w="1"/><text x="72.3684%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1184%" y="341" width="0.0779%" height="15" fill="rgb(248,215,49)" fg:x="926" fg:w="1"/><text x="72.3684%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.48%)</title><rect x="70.7944%" y="533" width="1.4798%" height="15" fill="rgb(208,46,10)" fg:x="909" fg:w="19"/><text x="71.0444%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19 samples, 1.48%)</title><rect x="70.7944%" y="517" width="1.4798%" height="15" fill="rgb(254,5,31)" fg:x="909" fg:w="19"/><text x="71.0444%" y="527.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="72.1963%" y="501" width="0.0779%" height="15" fill="rgb(222,104,33)" fg:x="927" fg:w="1"/><text x="72.4463%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="72.2741%" y="469" width="0.1558%" height="15" fill="rgb(248,49,16)" fg:x="928" fg:w="2"/><text x="72.5241%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="72.2741%" y="453" width="0.1558%" height="15" fill="rgb(232,198,41)" fg:x="928" fg:w="2"/><text x="72.5241%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3520%" y="437" width="0.0779%" height="15" fill="rgb(214,125,3)" fg:x="929" fg:w="1"/><text x="72.6020%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3520%" y="421" width="0.0779%" height="15" fill="rgb(229,220,28)" fg:x="929" fg:w="1"/><text x="72.6020%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.3520%" y="405" width="0.0779%" height="15" fill="rgb(222,64,37)" fg:x="929" fg:w="1"/><text x="72.6020%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.3520%" y="389" width="0.0779%" height="15" fill="rgb(249,184,13)" fg:x="929" fg:w="1"/><text x="72.6020%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.3520%" y="373" width="0.0779%" height="15" fill="rgb(252,176,6)" fg:x="929" fg:w="1"/><text x="72.6020%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.3520%" y="357" width="0.0779%" height="15" fill="rgb(228,153,7)" fg:x="929" fg:w="1"/><text x="72.6020%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.3520%" y="341" width="0.0779%" height="15" fill="rgb(242,193,5)" fg:x="929" fg:w="1"/><text x="72.6020%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.3520%" y="325" width="0.0779%" height="15" fill="rgb(232,140,9)" fg:x="929" fg:w="1"/><text x="72.6020%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.23%)</title><rect x="72.2741%" y="485" width="0.2336%" height="15" fill="rgb(213,222,16)" fg:x="928" fg:w="3"/><text x="72.5241%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="72.4299%" y="469" width="0.0779%" height="15" fill="rgb(222,75,50)" fg:x="930" fg:w="1"/><text x="72.6799%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="72.4299%" y="453" width="0.0779%" height="15" fill="rgb(205,180,2)" fg:x="930" fg:w="1"/><text x="72.6799%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="72.4299%" y="437" width="0.0779%" height="15" fill="rgb(216,34,7)" fg:x="930" fg:w="1"/><text x="72.6799%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.4299%" y="421" width="0.0779%" height="15" fill="rgb(253,16,32)" fg:x="930" fg:w="1"/><text x="72.6799%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.4299%" y="405" width="0.0779%" height="15" fill="rgb(208,97,28)" fg:x="930" fg:w="1"/><text x="72.6799%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.4299%" y="389" width="0.0779%" height="15" fill="rgb(225,92,11)" fg:x="930" fg:w="1"/><text x="72.6799%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.4299%" y="373" width="0.0779%" height="15" fill="rgb(243,38,12)" fg:x="930" fg:w="1"/><text x="72.6799%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.4299%" y="357" width="0.0779%" height="15" fill="rgb(208,139,16)" fg:x="930" fg:w="1"/><text x="72.6799%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.4299%" y="341" width="0.0779%" height="15" fill="rgb(227,24,9)" fg:x="930" fg:w="1"/><text x="72.6799%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="72.4299%" y="325" width="0.0779%" height="15" fill="rgb(206,62,11)" fg:x="930" fg:w="1"/><text x="72.6799%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="72.4299%" y="309" width="0.0779%" height="15" fill="rgb(228,134,27)" fg:x="930" fg:w="1"/><text x="72.6799%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="72.4299%" y="293" width="0.0779%" height="15" fill="rgb(205,55,33)" fg:x="930" fg:w="1"/><text x="72.6799%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="72.4299%" y="277" width="0.0779%" height="15" fill="rgb(243,75,43)" fg:x="930" fg:w="1"/><text x="72.6799%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.4299%" y="261" width="0.0779%" height="15" fill="rgb(223,27,42)" fg:x="930" fg:w="1"/><text x="72.6799%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.4299%" y="245" width="0.0779%" height="15" fill="rgb(232,189,33)" fg:x="930" fg:w="1"/><text x="72.6799%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="72.4299%" y="229" width="0.0779%" height="15" fill="rgb(210,9,39)" fg:x="930" fg:w="1"/><text x="72.6799%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="72.4299%" y="213" width="0.0779%" height="15" fill="rgb(242,85,26)" fg:x="930" fg:w="1"/><text x="72.6799%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="72.4299%" y="197" width="0.0779%" height="15" fill="rgb(248,44,4)" fg:x="930" fg:w="1"/><text x="72.6799%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="72.4299%" y="181" width="0.0779%" height="15" fill="rgb(250,96,46)" fg:x="930" fg:w="1"/><text x="72.6799%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="72.4299%" y="165" width="0.0779%" height="15" fill="rgb(229,116,26)" fg:x="930" fg:w="1"/><text x="72.6799%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="72.4299%" y="149" width="0.0779%" height="15" fill="rgb(246,94,34)" fg:x="930" fg:w="1"/><text x="72.6799%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.4299%" y="133" width="0.0779%" height="15" fill="rgb(251,73,21)" fg:x="930" fg:w="1"/><text x="72.6799%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="72.4299%" y="117" width="0.0779%" height="15" fill="rgb(254,121,25)" fg:x="930" fg:w="1"/><text x="72.6799%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.4299%" y="101" width="0.0779%" height="15" fill="rgb(215,161,49)" fg:x="930" fg:w="1"/><text x="72.6799%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="72.4299%" y="85" width="0.0779%" height="15" fill="rgb(221,43,13)" fg:x="930" fg:w="1"/><text x="72.6799%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="72.4299%" y="69" width="0.0779%" height="15" fill="rgb(249,5,37)" fg:x="930" fg:w="1"/><text x="72.6799%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="72.4299%" y="53" width="0.0779%" height="15" fill="rgb(226,25,44)" fg:x="930" fg:w="1"/><text x="72.6799%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.4299%" y="37" width="0.0779%" height="15" fill="rgb(238,189,16)" fg:x="930" fg:w="1"/><text x="72.6799%" y="47.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.6636%" y="309" width="0.1558%" height="15" fill="rgb(251,186,8)" fg:x="933" fg:w="2"/><text x="72.9136%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="72.6636%" y="293" width="0.1558%" height="15" fill="rgb(254,34,31)" fg:x="933" fg:w="2"/><text x="72.9136%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.7414%" y="277" width="0.0779%" height="15" fill="rgb(225,215,27)" fg:x="934" fg:w="1"/><text x="72.9914%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.7414%" y="261" width="0.0779%" height="15" fill="rgb(221,192,48)" fg:x="934" fg:w="1"/><text x="72.9914%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.7414%" y="245" width="0.0779%" height="15" fill="rgb(219,137,20)" fg:x="934" fg:w="1"/><text x="72.9914%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.31%)</title><rect x="72.6636%" y="341" width="0.3115%" height="15" fill="rgb(219,84,11)" fg:x="933" fg:w="4"/><text x="72.9136%" y="351.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.31%)</title><rect x="72.6636%" y="325" width="0.3115%" height="15" fill="rgb(224,10,23)" fg:x="933" fg:w="4"/><text x="72.9136%" y="335.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.8193%" y="309" width="0.1558%" height="15" fill="rgb(248,22,39)" fg:x="935" fg:w="2"/><text x="73.0693%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="72.8193%" y="293" width="0.1558%" height="15" fill="rgb(212,154,20)" fg:x="935" fg:w="2"/><text x="73.0693%" y="303.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="72.8193%" y="277" width="0.1558%" height="15" fill="rgb(236,199,50)" fg:x="935" fg:w="2"/><text x="73.0693%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.8193%" y="261" width="0.1558%" height="15" fill="rgb(211,9,17)" fg:x="935" fg:w="2"/><text x="73.0693%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="72.8972%" y="245" width="0.0779%" height="15" fill="rgb(243,216,36)" fg:x="936" fg:w="1"/><text x="73.1472%" y="255.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="72.8972%" y="229" width="0.0779%" height="15" fill="rgb(250,2,10)" fg:x="936" fg:w="1"/><text x="73.1472%" y="239.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.39%)</title><rect x="72.6636%" y="373" width="0.3894%" height="15" fill="rgb(226,50,48)" fg:x="933" fg:w="5"/><text x="72.9136%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="72.6636%" y="357" width="0.3894%" height="15" fill="rgb(243,81,16)" fg:x="933" fg:w="5"/><text x="72.9136%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.9751%" y="341" width="0.0779%" height="15" fill="rgb(250,14,2)" fg:x="937" fg:w="1"/><text x="73.2251%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.0530%" y="373" width="0.0779%" height="15" fill="rgb(233,135,29)" fg:x="938" fg:w="1"/><text x="73.3030%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.62%)</title><rect x="72.6636%" y="389" width="0.6231%" height="15" fill="rgb(224,64,43)" fg:x="933" fg:w="8"/><text x="72.9136%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.1308%" y="373" width="0.1558%" height="15" fill="rgb(238,84,13)" fg:x="939" fg:w="2"/><text x="73.3808%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="73.1308%" y="357" width="0.1558%" height="15" fill="rgb(253,48,26)" fg:x="939" fg:w="2"/><text x="73.3808%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.2087%" y="341" width="0.0779%" height="15" fill="rgb(205,223,31)" fg:x="940" fg:w="1"/><text x="73.4587%" y="351.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.78%)</title><rect x="72.5857%" y="421" width="0.7788%" height="15" fill="rgb(221,41,32)" fg:x="932" fg:w="10"/><text x="72.8357%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.78%)</title><rect x="72.5857%" y="405" width="0.7788%" height="15" fill="rgb(213,158,31)" fg:x="932" fg:w="10"/><text x="72.8357%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.2866%" y="389" width="0.0779%" height="15" fill="rgb(245,126,43)" fg:x="941" fg:w="1"/><text x="73.5366%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.93%)</title><rect x="72.5857%" y="437" width="0.9346%" height="15" fill="rgb(227,7,22)" fg:x="932" fg:w="12"/><text x="72.8357%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.3645%" y="421" width="0.1558%" height="15" fill="rgb(252,90,44)" fg:x="942" fg:w="2"/><text x="73.6145%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="73.3645%" y="405" width="0.1558%" height="15" fill="rgb(253,91,0)" fg:x="942" fg:w="2"/><text x="73.6145%" y="415.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (15 samples, 1.17%)</title><rect x="72.5078%" y="469" width="1.1682%" height="15" fill="rgb(252,175,49)" fg:x="931" fg:w="15"/><text x="72.7578%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15 samples, 1.17%)</title><rect x="72.5078%" y="453" width="1.1682%" height="15" fill="rgb(246,150,1)" fg:x="931" fg:w="15"/><text x="72.7578%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="73.5202%" y="437" width="0.1558%" height="15" fill="rgb(241,192,25)" fg:x="944" fg:w="2"/><text x="73.7702%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.5202%" y="421" width="0.1558%" height="15" fill="rgb(239,187,11)" fg:x="944" fg:w="2"/><text x="73.7702%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7539%" y="421" width="0.0779%" height="15" fill="rgb(218,202,51)" fg:x="947" fg:w="1"/><text x="74.0039%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7539%" y="405" width="0.0779%" height="15" fill="rgb(225,176,8)" fg:x="947" fg:w="1"/><text x="74.0039%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="73.7539%" y="389" width="0.0779%" height="15" fill="rgb(219,122,41)" fg:x="947" fg:w="1"/><text x="74.0039%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.8318%" y="357" width="0.0779%" height="15" fill="rgb(248,140,20)" fg:x="948" fg:w="1"/><text x="74.0818%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8318%" y="341" width="0.0779%" height="15" fill="rgb(245,41,37)" fg:x="948" fg:w="1"/><text x="74.0818%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8318%" y="325" width="0.0779%" height="15" fill="rgb(235,82,39)" fg:x="948" fg:w="1"/><text x="74.0818%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="73.9097%" y="357" width="0.0779%" height="15" fill="rgb(230,108,42)" fg:x="949" fg:w="1"/><text x="74.1597%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.0654%" y="341" width="0.1558%" height="15" fill="rgb(215,150,50)" fg:x="951" fg:w="2"/><text x="74.3154%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (6 samples, 0.47%)</title><rect x="73.8318%" y="421" width="0.4673%" height="15" fill="rgb(233,212,5)" fg:x="948" fg:w="6"/><text x="74.0818%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.47%)</title><rect x="73.8318%" y="405" width="0.4673%" height="15" fill="rgb(245,80,22)" fg:x="948" fg:w="6"/><text x="74.0818%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.47%)</title><rect x="73.8318%" y="389" width="0.4673%" height="15" fill="rgb(238,129,16)" fg:x="948" fg:w="6"/><text x="74.0818%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (6 samples, 0.47%)</title><rect x="73.8318%" y="373" width="0.4673%" height="15" fill="rgb(240,19,0)" fg:x="948" fg:w="6"/><text x="74.0818%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.31%)</title><rect x="73.9875%" y="357" width="0.3115%" height="15" fill="rgb(232,42,35)" fg:x="950" fg:w="4"/><text x="74.2375%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2212%" y="341" width="0.0779%" height="15" fill="rgb(223,130,24)" fg:x="953" fg:w="1"/><text x="74.4712%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.2212%" y="325" width="0.0779%" height="15" fill="rgb(237,16,22)" fg:x="953" fg:w="1"/><text x="74.4712%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2212%" y="309" width="0.0779%" height="15" fill="rgb(248,192,20)" fg:x="953" fg:w="1"/><text x="74.4712%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3769%" y="405" width="0.0779%" height="15" fill="rgb(233,167,2)" fg:x="955" fg:w="1"/><text x="74.6269%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.5327%" y="373" width="0.1558%" height="15" fill="rgb(252,71,44)" fg:x="957" fg:w="2"/><text x="74.7827%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="74.5327%" y="357" width="0.1558%" height="15" fill="rgb(238,37,47)" fg:x="957" fg:w="2"/><text x="74.7827%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.5327%" y="341" width="0.1558%" height="15" fill="rgb(214,202,54)" fg:x="957" fg:w="2"/><text x="74.7827%" y="351.50"></text></g><g><title>core::iter::adapters::try_process (52 samples, 4.05%)</title><rect x="70.7944%" y="549" width="4.0498%" height="15" fill="rgb(254,165,40)" fg:x="909" fg:w="52"/><text x="71.0444%" y="559.50">core..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (33 samples, 2.57%)</title><rect x="72.2741%" y="533" width="2.5701%" height="15" fill="rgb(246,173,38)" fg:x="928" fg:w="33"/><text x="72.5241%" y="543.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (33 samples, 2.57%)</title><rect x="72.2741%" y="517" width="2.5701%" height="15" fill="rgb(215,3,27)" fg:x="928" fg:w="33"/><text x="72.5241%" y="527.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (33 samples, 2.57%)</title><rect x="72.2741%" y="501" width="2.5701%" height="15" fill="rgb(239,169,51)" fg:x="928" fg:w="33"/><text x="72.5241%" y="511.50">pl..</text></g><g><title>&lt;plugins_rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (30 samples, 2.34%)</title><rect x="72.5078%" y="485" width="2.3364%" height="15" fill="rgb(212,5,25)" fg:x="931" fg:w="30"/><text x="72.7578%" y="495.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (15 samples, 1.17%)</title><rect x="73.6760%" y="469" width="1.1682%" height="15" fill="rgb(243,45,17)" fg:x="946" fg:w="15"/><text x="73.9260%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (15 samples, 1.17%)</title><rect x="73.6760%" y="453" width="1.1682%" height="15" fill="rgb(242,97,9)" fg:x="946" fg:w="15"/><text x="73.9260%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.09%)</title><rect x="73.7539%" y="437" width="1.0903%" height="15" fill="rgb(228,71,31)" fg:x="947" fg:w="14"/><text x="74.0039%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="74.2991%" y="421" width="0.5452%" height="15" fill="rgb(252,184,16)" fg:x="954" fg:w="7"/><text x="74.5491%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (5 samples, 0.39%)</title><rect x="74.4548%" y="405" width="0.3894%" height="15" fill="rgb(236,169,46)" fg:x="956" fg:w="5"/><text x="74.7048%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.39%)</title><rect x="74.4548%" y="389" width="0.3894%" height="15" fill="rgb(207,17,47)" fg:x="956" fg:w="5"/><text x="74.7048%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.6885%" y="373" width="0.1558%" height="15" fill="rgb(206,201,28)" fg:x="959" fg:w="2"/><text x="74.9385%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.7664%" y="357" width="0.0779%" height="15" fill="rgb(224,184,23)" fg:x="960" fg:w="1"/><text x="75.0164%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7664%" y="341" width="0.0779%" height="15" fill="rgb(208,139,48)" fg:x="960" fg:w="1"/><text x="75.0164%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7664%" y="325" width="0.0779%" height="15" fill="rgb(208,130,10)" fg:x="960" fg:w="1"/><text x="75.0164%" y="335.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (64 samples, 4.98%)</title><rect x="69.9377%" y="613" width="4.9844%" height="15" fill="rgb(211,213,45)" fg:x="898" fg:w="64"/><text x="70.1877%" y="623.50">kernel..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (64 samples, 4.98%)</title><rect x="69.9377%" y="597" width="4.9844%" height="15" fill="rgb(235,100,30)" fg:x="898" fg:w="64"/><text x="70.1877%" y="607.50">&lt;plugi..</text></g><g><title>plugins_rpc::querying::have_surroundings (55 samples, 4.28%)</title><rect x="70.6386%" y="581" width="4.2835%" height="15" fill="rgb(206,144,31)" fg:x="907" fg:w="55"/><text x="70.8886%" y="591.50">plugi..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (55 samples, 4.28%)</title><rect x="70.6386%" y="565" width="4.2835%" height="15" fill="rgb(224,200,26)" fg:x="907" fg:w="55"/><text x="70.8886%" y="575.50">&lt;plug..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8442%" y="549" width="0.0779%" height="15" fill="rgb(247,104,53)" fg:x="961" fg:w="1"/><text x="75.0942%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.8442%" y="533" width="0.0779%" height="15" fill="rgb(220,14,17)" fg:x="961" fg:w="1"/><text x="75.0942%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.8442%" y="517" width="0.0779%" height="15" fill="rgb(230,140,40)" fg:x="961" fg:w="1"/><text x="75.0942%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (963 samples, 75.00%)</title><rect x="0.0000%" y="693" width="75.0000%" height="15" fill="rgb(229,2,41)" fg:x="0" fg:w="963"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (963 samples, 75.00%)</title><rect x="0.0000%" y="677" width="75.0000%" height="15" fill="rgb(232,89,16)" fg:x="0" fg:w="963"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (963 samples, 75.00%)</title><rect x="0.0000%" y="661" width="75.0000%" height="15" fill="rgb(247,59,52)" fg:x="0" fg:w="963"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (818 samples, 63.71%)</title><rect x="11.2928%" y="645" width="63.7072%" height="15" fill="rgb(226,110,21)" fg:x="145" fg:w="818"/><text x="11.5428%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (818 samples, 63.71%)</title><rect x="11.2928%" y="629" width="63.7072%" height="15" fill="rgb(224,176,43)" fg:x="145" fg:w="818"/><text x="11.5428%" y="639.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="74.9221%" y="613" width="0.0779%" height="15" fill="rgb(221,73,6)" fg:x="962" fg:w="1"/><text x="75.1721%" y="623.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="74.9221%" y="597" width="0.0779%" height="15" fill="rgb(232,78,19)" fg:x="962" fg:w="1"/><text x="75.1721%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="74.9221%" y="581" width="0.0779%" height="15" fill="rgb(233,112,48)" fg:x="962" fg:w="1"/><text x="75.1721%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="74.9221%" y="565" width="0.0779%" height="15" fill="rgb(243,131,47)" fg:x="962" fg:w="1"/><text x="75.1721%" y="575.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="74.9221%" y="549" width="0.0779%" height="15" fill="rgb(226,51,1)" fg:x="962" fg:w="1"/><text x="75.1721%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="75.0000%" y="629" width="0.0779%" height="15" fill="rgb(247,58,7)" fg:x="963" fg:w="1"/><text x="75.2500%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0000%" y="613" width="0.0779%" height="15" fill="rgb(209,7,32)" fg:x="963" fg:w="1"/><text x="75.2500%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.0000%" y="645" width="0.1558%" height="15" fill="rgb(209,39,41)" fg:x="963" fg:w="2"/><text x="75.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (1 samples, 0.08%)</title><rect x="75.0779%" y="629" width="0.0779%" height="15" fill="rgb(226,182,46)" fg:x="964" fg:w="1"/><text x="75.3279%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0779%" y="613" width="0.0779%" height="15" fill="rgb(230,219,10)" fg:x="964" fg:w="1"/><text x="75.3279%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="75.0779%" y="597" width="0.0779%" height="15" fill="rgb(227,175,30)" fg:x="964" fg:w="1"/><text x="75.3279%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0779%" y="581" width="0.0779%" height="15" fill="rgb(217,2,50)" fg:x="964" fg:w="1"/><text x="75.3279%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0779%" y="565" width="0.0779%" height="15" fill="rgb(229,160,0)" fg:x="964" fg:w="1"/><text x="75.3279%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0779%" y="549" width="0.0779%" height="15" fill="rgb(207,78,37)" fg:x="964" fg:w="1"/><text x="75.3279%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.0779%" y="533" width="0.0779%" height="15" fill="rgb(225,57,0)" fg:x="964" fg:w="1"/><text x="75.3279%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0779%" y="517" width="0.0779%" height="15" fill="rgb(232,154,2)" fg:x="964" fg:w="1"/><text x="75.3279%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.0779%" y="501" width="0.0779%" height="15" fill="rgb(241,212,25)" fg:x="964" fg:w="1"/><text x="75.3279%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0779%" y="485" width="0.0779%" height="15" fill="rgb(226,69,20)" fg:x="964" fg:w="1"/><text x="75.3279%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.1558%" y="581" width="0.0779%" height="15" fill="rgb(247,184,54)" fg:x="965" fg:w="1"/><text x="75.4058%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.1558%" y="565" width="0.0779%" height="15" fill="rgb(210,145,0)" fg:x="965" fg:w="1"/><text x="75.4058%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="75.2336%" y="565" width="0.0779%" height="15" fill="rgb(253,82,12)" fg:x="966" fg:w="1"/><text x="75.4836%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="75.2336%" y="549" width="0.0779%" height="15" fill="rgb(245,42,11)" fg:x="966" fg:w="1"/><text x="75.4836%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.2336%" y="533" width="0.0779%" height="15" fill="rgb(219,147,32)" fg:x="966" fg:w="1"/><text x="75.4836%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2336%" y="517" width="0.0779%" height="15" fill="rgb(246,12,7)" fg:x="966" fg:w="1"/><text x="75.4836%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.2336%" y="501" width="0.0779%" height="15" fill="rgb(243,50,9)" fg:x="966" fg:w="1"/><text x="75.4836%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2336%" y="485" width="0.0779%" height="15" fill="rgb(219,149,6)" fg:x="966" fg:w="1"/><text x="75.4836%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.2336%" y="469" width="0.0779%" height="15" fill="rgb(241,51,42)" fg:x="966" fg:w="1"/><text x="75.4836%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.2336%" y="453" width="0.0779%" height="15" fill="rgb(226,128,27)" fg:x="966" fg:w="1"/><text x="75.4836%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.3115%" y="517" width="0.0779%" height="15" fill="rgb(244,144,4)" fg:x="967" fg:w="1"/><text x="75.5615%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.31%)</title><rect x="75.1558%" y="613" width="0.3115%" height="15" fill="rgb(221,4,13)" fg:x="965" fg:w="4"/><text x="75.4058%" y="623.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.31%)</title><rect x="75.1558%" y="597" width="0.3115%" height="15" fill="rgb(208,170,28)" fg:x="965" fg:w="4"/><text x="75.4058%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.23%)</title><rect x="75.2336%" y="581" width="0.2336%" height="15" fill="rgb(226,131,13)" fg:x="966" fg:w="3"/><text x="75.4836%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="75.3115%" y="565" width="0.1558%" height="15" fill="rgb(215,72,41)" fg:x="967" fg:w="2"/><text x="75.5615%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.3115%" y="549" width="0.1558%" height="15" fill="rgb(243,108,20)" fg:x="967" fg:w="2"/><text x="75.5615%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.3115%" y="533" width="0.1558%" height="15" fill="rgb(230,189,17)" fg:x="967" fg:w="2"/><text x="75.5615%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3894%" y="517" width="0.0779%" height="15" fill="rgb(220,50,17)" fg:x="968" fg:w="1"/><text x="75.6394%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.3894%" y="501" width="0.0779%" height="15" fill="rgb(248,152,48)" fg:x="968" fg:w="1"/><text x="75.6394%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.3894%" y="485" width="0.0779%" height="15" fill="rgb(244,91,11)" fg:x="968" fg:w="1"/><text x="75.6394%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3894%" y="469" width="0.0779%" height="15" fill="rgb(220,157,5)" fg:x="968" fg:w="1"/><text x="75.6394%" y="479.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="75.4673%" y="565" width="0.0779%" height="15" fill="rgb(253,137,8)" fg:x="969" fg:w="1"/><text x="75.7173%" y="575.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="75.4673%" y="549" width="0.0779%" height="15" fill="rgb(217,137,51)" fg:x="969" fg:w="1"/><text x="75.7173%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (8 samples, 0.62%)</title><rect x="75.1558%" y="645" width="0.6231%" height="15" fill="rgb(218,209,53)" fg:x="965" fg:w="8"/><text x="75.4058%" y="655.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.62%)</title><rect x="75.1558%" y="629" width="0.6231%" height="15" fill="rgb(249,137,25)" fg:x="965" fg:w="8"/><text x="75.4058%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.31%)</title><rect x="75.4673%" y="613" width="0.3115%" height="15" fill="rgb(239,155,26)" fg:x="969" fg:w="4"/><text x="75.7173%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.31%)</title><rect x="75.4673%" y="597" width="0.3115%" height="15" fill="rgb(227,85,46)" fg:x="969" fg:w="4"/><text x="75.7173%" y="607.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.31%)</title><rect x="75.4673%" y="581" width="0.3115%" height="15" fill="rgb(251,107,43)" fg:x="969" fg:w="4"/><text x="75.7173%" y="591.50"></text></g><g><title>dlopen (3 samples, 0.23%)</title><rect x="75.5452%" y="565" width="0.2336%" height="15" fill="rgb(234,170,33)" fg:x="970" fg:w="3"/><text x="75.7952%" y="575.50"></text></g><g><title>_dl_catch_error (3 samples, 0.23%)</title><rect x="75.5452%" y="549" width="0.2336%" height="15" fill="rgb(206,29,35)" fg:x="970" fg:w="3"/><text x="75.7952%" y="559.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.23%)</title><rect x="75.5452%" y="533" width="0.2336%" height="15" fill="rgb(227,138,25)" fg:x="970" fg:w="3"/><text x="75.7952%" y="543.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.23%)</title><rect x="75.5452%" y="517" width="0.2336%" height="15" fill="rgb(249,131,35)" fg:x="970" fg:w="3"/><text x="75.7952%" y="527.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.23%)</title><rect x="75.5452%" y="501" width="0.2336%" height="15" fill="rgb(239,6,40)" fg:x="970" fg:w="3"/><text x="75.7952%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.7788%" y="533" width="0.1558%" height="15" fill="rgb(246,136,47)" fg:x="973" fg:w="2"/><text x="76.0288%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.9346%" y="517" width="0.0779%" height="15" fill="rgb(253,58,26)" fg:x="975" fg:w="1"/><text x="76.1846%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.9346%" y="501" width="0.0779%" height="15" fill="rgb(237,141,10)" fg:x="975" fg:w="1"/><text x="76.1846%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="75.9346%" y="485" width="0.0779%" height="15" fill="rgb(234,156,12)" fg:x="975" fg:w="1"/><text x="76.1846%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.0125%" y="517" width="0.0779%" height="15" fill="rgb(243,224,36)" fg:x="976" fg:w="1"/><text x="76.2625%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.0125%" y="501" width="0.0779%" height="15" fill="rgb(205,229,51)" fg:x="976" fg:w="1"/><text x="76.2625%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.0125%" y="485" width="0.0779%" height="15" fill="rgb(223,189,4)" fg:x="976" fg:w="1"/><text x="76.2625%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.0125%" y="469" width="0.0779%" height="15" fill="rgb(249,167,54)" fg:x="976" fg:w="1"/><text x="76.2625%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.39%)</title><rect x="75.7788%" y="565" width="0.3894%" height="15" fill="rgb(218,34,28)" fg:x="973" fg:w="5"/><text x="76.0288%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="75.7788%" y="549" width="0.3894%" height="15" fill="rgb(232,109,42)" fg:x="973" fg:w="5"/><text x="76.0288%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="75.9346%" y="533" width="0.2336%" height="15" fill="rgb(248,214,46)" fg:x="975" fg:w="3"/><text x="76.1846%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.0903%" y="517" width="0.0779%" height="15" fill="rgb(244,216,40)" fg:x="977" fg:w="1"/><text x="76.3403%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1682%" y="565" width="0.0779%" height="15" fill="rgb(231,226,31)" fg:x="978" fg:w="1"/><text x="76.4182%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.1682%" y="549" width="0.0779%" height="15" fill="rgb(238,38,43)" fg:x="978" fg:w="1"/><text x="76.4182%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1682%" y="533" width="0.0779%" height="15" fill="rgb(208,88,43)" fg:x="978" fg:w="1"/><text x="76.4182%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.1682%" y="517" width="0.0779%" height="15" fill="rgb(205,136,37)" fg:x="978" fg:w="1"/><text x="76.4182%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3240%" y="517" width="0.0779%" height="15" fill="rgb(237,34,14)" fg:x="980" fg:w="1"/><text x="76.5740%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.3240%" y="501" width="0.0779%" height="15" fill="rgb(236,193,44)" fg:x="980" fg:w="1"/><text x="76.5740%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3240%" y="485" width="0.0779%" height="15" fill="rgb(231,48,10)" fg:x="980" fg:w="1"/><text x="76.5740%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3240%" y="469" width="0.0779%" height="15" fill="rgb(213,141,34)" fg:x="980" fg:w="1"/><text x="76.5740%" y="479.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="76.3240%" y="453" width="0.0779%" height="15" fill="rgb(249,130,34)" fg:x="980" fg:w="1"/><text x="76.5740%" y="463.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.3240%" y="437" width="0.0779%" height="15" fill="rgb(219,42,41)" fg:x="980" fg:w="1"/><text x="76.5740%" y="447.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (9 samples, 0.70%)</title><rect x="75.7788%" y="597" width="0.7009%" height="15" fill="rgb(224,100,54)" fg:x="973" fg:w="9"/><text x="76.0288%" y="607.50"></text></g><g><title>engine::session::Session::check_for_changes (9 samples, 0.70%)</title><rect x="75.7788%" y="581" width="0.7009%" height="15" fill="rgb(229,200,27)" fg:x="973" fg:w="9"/><text x="76.0288%" y="591.50"></text></g><g><title>kernel::compare::any_entity_changes (3 samples, 0.23%)</title><rect x="76.2461%" y="565" width="0.2336%" height="15" fill="rgb(217,118,10)" fg:x="979" fg:w="3"/><text x="76.4961%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.23%)</title><rect x="76.2461%" y="549" width="0.2336%" height="15" fill="rgb(206,22,3)" fg:x="979" fg:w="3"/><text x="76.4961%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="76.2461%" y="533" width="0.2336%" height="15" fill="rgb(232,163,46)" fg:x="979" fg:w="3"/><text x="76.4961%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.4019%" y="517" width="0.0779%" height="15" fill="rgb(206,95,13)" fg:x="981" fg:w="1"/><text x="76.6519%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="76.4019%" y="501" width="0.0779%" height="15" fill="rgb(253,154,18)" fg:x="981" fg:w="1"/><text x="76.6519%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.4019%" y="485" width="0.0779%" height="15" fill="rgb(219,32,23)" fg:x="981" fg:w="1"/><text x="76.6519%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4019%" y="469" width="0.0779%" height="15" fill="rgb(230,191,45)" fg:x="981" fg:w="1"/><text x="76.6519%" y="479.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.78%)</title><rect x="75.7788%" y="629" width="0.7788%" height="15" fill="rgb(229,64,36)" fg:x="973" fg:w="10"/><text x="76.0288%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (10 samples, 0.78%)</title><rect x="75.7788%" y="613" width="0.7788%" height="15" fill="rgb(205,129,25)" fg:x="973" fg:w="10"/><text x="76.0288%" y="623.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="76.4798%" y="597" width="0.0779%" height="15" fill="rgb(254,112,7)" fg:x="982" fg:w="1"/><text x="76.7298%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="76.5576%" y="629" width="0.0779%" height="15" fill="rgb(226,53,48)" fg:x="983" fg:w="1"/><text x="76.8076%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.5576%" y="613" width="0.0779%" height="15" fill="rgb(214,153,38)" fg:x="983" fg:w="1"/><text x="76.8076%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="76.5576%" y="597" width="0.0779%" height="15" fill="rgb(243,101,7)" fg:x="983" fg:w="1"/><text x="76.8076%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="76.5576%" y="581" width="0.0779%" height="15" fill="rgb(240,140,22)" fg:x="983" fg:w="1"/><text x="76.8076%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.5576%" y="565" width="0.0779%" height="15" fill="rgb(235,114,2)" fg:x="983" fg:w="1"/><text x="76.8076%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.5576%" y="549" width="0.0779%" height="15" fill="rgb(242,59,12)" fg:x="983" fg:w="1"/><text x="76.8076%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.5576%" y="533" width="0.0779%" height="15" fill="rgb(252,134,9)" fg:x="983" fg:w="1"/><text x="76.8076%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.5576%" y="517" width="0.0779%" height="15" fill="rgb(236,4,44)" fg:x="983" fg:w="1"/><text x="76.8076%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="76.5576%" y="501" width="0.0779%" height="15" fill="rgb(254,172,41)" fg:x="983" fg:w="1"/><text x="76.8076%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="76.5576%" y="485" width="0.0779%" height="15" fill="rgb(244,63,20)" fg:x="983" fg:w="1"/><text x="76.8076%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.5576%" y="469" width="0.0779%" height="15" fill="rgb(250,73,31)" fg:x="983" fg:w="1"/><text x="76.8076%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.5576%" y="453" width="0.0779%" height="15" fill="rgb(241,38,36)" fg:x="983" fg:w="1"/><text x="76.8076%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.5576%" y="437" width="0.0779%" height="15" fill="rgb(245,211,2)" fg:x="983" fg:w="1"/><text x="76.8076%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="76.5576%" y="421" width="0.0779%" height="15" fill="rgb(206,120,28)" fg:x="983" fg:w="1"/><text x="76.8076%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="76.5576%" y="405" width="0.0779%" height="15" fill="rgb(211,59,34)" fg:x="983" fg:w="1"/><text x="76.8076%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="76.5576%" y="389" width="0.0779%" height="15" fill="rgb(233,168,5)" fg:x="983" fg:w="1"/><text x="76.8076%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="76.5576%" y="373" width="0.0779%" height="15" fill="rgb(234,33,13)" fg:x="983" fg:w="1"/><text x="76.8076%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="76.5576%" y="357" width="0.0779%" height="15" fill="rgb(231,150,26)" fg:x="983" fg:w="1"/><text x="76.8076%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="76.5576%" y="341" width="0.0779%" height="15" fill="rgb(217,191,4)" fg:x="983" fg:w="1"/><text x="76.8076%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.5576%" y="325" width="0.0779%" height="15" fill="rgb(246,198,38)" fg:x="983" fg:w="1"/><text x="76.8076%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="76.5576%" y="309" width="0.0779%" height="15" fill="rgb(245,64,37)" fg:x="983" fg:w="1"/><text x="76.8076%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.5576%" y="293" width="0.0779%" height="15" fill="rgb(250,30,36)" fg:x="983" fg:w="1"/><text x="76.8076%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.6355%" y="613" width="0.0779%" height="15" fill="rgb(217,86,53)" fg:x="984" fg:w="1"/><text x="76.8855%" y="623.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.6355%" y="597" width="0.0779%" height="15" fill="rgb(228,157,16)" fg:x="984" fg:w="1"/><text x="76.8855%" y="607.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="76.6355%" y="581" width="0.0779%" height="15" fill="rgb(217,59,31)" fg:x="984" fg:w="1"/><text x="76.8855%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="76.6355%" y="565" width="0.0779%" height="15" fill="rgb(237,138,41)" fg:x="984" fg:w="1"/><text x="76.8855%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6355%" y="549" width="0.0779%" height="15" fill="rgb(227,91,49)" fg:x="984" fg:w="1"/><text x="76.8855%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7134%" y="613" width="0.0779%" height="15" fill="rgb(247,21,44)" fg:x="985" fg:w="1"/><text x="76.9634%" y="623.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7913%" y="565" width="0.0779%" height="15" fill="rgb(219,210,51)" fg:x="986" fg:w="1"/><text x="77.0413%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7913%" y="549" width="0.0779%" height="15" fill="rgb(209,140,6)" fg:x="986" fg:w="1"/><text x="77.0413%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7913%" y="533" width="0.0779%" height="15" fill="rgb(221,188,24)" fg:x="986" fg:w="1"/><text x="77.0413%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.7913%" y="517" width="0.0779%" height="15" fill="rgb(232,154,20)" fg:x="986" fg:w="1"/><text x="77.0413%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.7913%" y="501" width="0.0779%" height="15" fill="rgb(244,137,50)" fg:x="986" fg:w="1"/><text x="77.0413%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7913%" y="485" width="0.0779%" height="15" fill="rgb(225,185,43)" fg:x="986" fg:w="1"/><text x="77.0413%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7913%" y="469" width="0.0779%" height="15" fill="rgb(213,205,38)" fg:x="986" fg:w="1"/><text x="77.0413%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.7913%" y="453" width="0.0779%" height="15" fill="rgb(236,73,12)" fg:x="986" fg:w="1"/><text x="77.0413%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.7913%" y="437" width="0.0779%" height="15" fill="rgb(235,219,13)" fg:x="986" fg:w="1"/><text x="77.0413%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.7913%" y="421" width="0.0779%" height="15" fill="rgb(218,59,36)" fg:x="986" fg:w="1"/><text x="77.0413%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.7913%" y="405" width="0.0779%" height="15" fill="rgb(205,110,39)" fg:x="986" fg:w="1"/><text x="77.0413%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.7913%" y="389" width="0.0779%" height="15" fill="rgb(218,206,42)" fg:x="986" fg:w="1"/><text x="77.0413%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7913%" y="373" width="0.0779%" height="15" fill="rgb(248,125,24)" fg:x="986" fg:w="1"/><text x="77.0413%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="76.7913%" y="613" width="0.1558%" height="15" fill="rgb(242,28,27)" fg:x="986" fg:w="2"/><text x="77.0413%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="76.7913%" y="597" width="0.1558%" height="15" fill="rgb(216,228,15)" fg:x="986" fg:w="2"/><text x="77.0413%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="76.7913%" y="581" width="0.1558%" height="15" fill="rgb(235,116,46)" fg:x="986" fg:w="2"/><text x="77.0413%" y="591.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="76.8692%" y="565" width="0.0779%" height="15" fill="rgb(224,18,32)" fg:x="987" fg:w="1"/><text x="77.1192%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.9470%" y="581" width="0.0779%" height="15" fill="rgb(252,5,12)" fg:x="988" fg:w="1"/><text x="77.1970%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.0249%" y="533" width="0.0779%" height="15" fill="rgb(251,36,5)" fg:x="989" fg:w="1"/><text x="77.2749%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.0249%" y="517" width="0.0779%" height="15" fill="rgb(217,53,14)" fg:x="989" fg:w="1"/><text x="77.2749%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.0249%" y="501" width="0.0779%" height="15" fill="rgb(215,86,45)" fg:x="989" fg:w="1"/><text x="77.2749%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.0249%" y="485" width="0.0779%" height="15" fill="rgb(242,169,11)" fg:x="989" fg:w="1"/><text x="77.2749%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.0249%" y="469" width="0.0779%" height="15" fill="rgb(211,213,45)" fg:x="989" fg:w="1"/><text x="77.2749%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.0249%" y="453" width="0.0779%" height="15" fill="rgb(205,88,11)" fg:x="989" fg:w="1"/><text x="77.2749%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.0249%" y="437" width="0.0779%" height="15" fill="rgb(252,69,26)" fg:x="989" fg:w="1"/><text x="77.2749%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.0249%" y="421" width="0.0779%" height="15" fill="rgb(246,123,37)" fg:x="989" fg:w="1"/><text x="77.2749%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="77.0249%" y="549" width="0.1558%" height="15" fill="rgb(212,205,5)" fg:x="989" fg:w="2"/><text x="77.2749%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1028%" y="533" width="0.0779%" height="15" fill="rgb(253,148,0)" fg:x="990" fg:w="1"/><text x="77.3528%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1028%" y="517" width="0.0779%" height="15" fill="rgb(239,22,4)" fg:x="990" fg:w="1"/><text x="77.3528%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.1028%" y="501" width="0.0779%" height="15" fill="rgb(226,26,53)" fg:x="990" fg:w="1"/><text x="77.3528%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1028%" y="485" width="0.0779%" height="15" fill="rgb(225,229,45)" fg:x="990" fg:w="1"/><text x="77.3528%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1028%" y="469" width="0.0779%" height="15" fill="rgb(220,60,37)" fg:x="990" fg:w="1"/><text x="77.3528%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.1028%" y="453" width="0.0779%" height="15" fill="rgb(217,180,35)" fg:x="990" fg:w="1"/><text x="77.3528%" y="463.50"></text></g><g><title>engine::session::Session::flush (4 samples, 0.31%)</title><rect x="76.9470%" y="613" width="0.3115%" height="15" fill="rgb(229,7,53)" fg:x="988" fg:w="4"/><text x="77.1970%" y="623.50"></text></g><g><title>engine::session::Session::save_entity_changes (4 samples, 0.31%)</title><rect x="76.9470%" y="597" width="0.3115%" height="15" fill="rgb(254,137,3)" fg:x="988" fg:w="4"/><text x="77.1970%" y="607.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (3 samples, 0.23%)</title><rect x="77.0249%" y="581" width="0.2336%" height="15" fill="rgb(215,140,41)" fg:x="989" fg:w="3"/><text x="77.2749%" y="591.50"></text></g><g><title>engine::session::Session::check_for_changes (3 samples, 0.23%)</title><rect x="77.0249%" y="565" width="0.2336%" height="15" fill="rgb(250,80,15)" fg:x="989" fg:w="3"/><text x="77.2749%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1807%" y="549" width="0.0779%" height="15" fill="rgb(252,191,6)" fg:x="991" fg:w="1"/><text x="77.4307%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.1807%" y="533" width="0.0779%" height="15" fill="rgb(246,217,18)" fg:x="991" fg:w="1"/><text x="77.4307%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1807%" y="517" width="0.0779%" height="15" fill="rgb(223,93,7)" fg:x="991" fg:w="1"/><text x="77.4307%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.1807%" y="501" width="0.0779%" height="15" fill="rgb(225,55,52)" fg:x="991" fg:w="1"/><text x="77.4307%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1807%" y="485" width="0.0779%" height="15" fill="rgb(240,31,24)" fg:x="991" fg:w="1"/><text x="77.4307%" y="495.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="77.2586%" y="613" width="0.0779%" height="15" fill="rgb(205,56,52)" fg:x="992" fg:w="1"/><text x="77.5086%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="77.2586%" y="597" width="0.0779%" height="15" fill="rgb(246,146,12)" fg:x="992" fg:w="1"/><text x="77.5086%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="77.2586%" y="581" width="0.0779%" height="15" fill="rgb(239,84,36)" fg:x="992" fg:w="1"/><text x="77.5086%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="77.2586%" y="565" width="0.0779%" height="15" fill="rgb(207,41,40)" fg:x="992" fg:w="1"/><text x="77.5086%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.2586%" y="549" width="0.0779%" height="15" fill="rgb(241,179,25)" fg:x="992" fg:w="1"/><text x="77.5086%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (10 samples, 0.78%)</title><rect x="76.6355%" y="629" width="0.7788%" height="15" fill="rgb(210,0,34)" fg:x="984" fg:w="10"/><text x="76.8855%" y="639.50"></text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="77.3364%" y="613" width="0.0779%" height="15" fill="rgb(225,217,29)" fg:x="993" fg:w="1"/><text x="77.5864%" y="623.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="77.3364%" y="597" width="0.0779%" height="15" fill="rgb(216,191,38)" fg:x="993" fg:w="1"/><text x="77.5864%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3364%" y="581" width="0.0779%" height="15" fill="rgb(232,140,52)" fg:x="993" fg:w="1"/><text x="77.5864%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.3364%" y="565" width="0.0779%" height="15" fill="rgb(223,158,51)" fg:x="993" fg:w="1"/><text x="77.5864%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="77.3364%" y="549" width="0.0779%" height="15" fill="rgb(235,29,51)" fg:x="993" fg:w="1"/><text x="77.5864%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="77.4143%" y="597" width="0.1558%" height="15" fill="rgb(215,181,18)" fg:x="994" fg:w="2"/><text x="77.6643%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="77.4143%" y="581" width="0.1558%" height="15" fill="rgb(227,125,34)" fg:x="994" fg:w="2"/><text x="77.6643%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="77.4143%" y="565" width="0.1558%" height="15" fill="rgb(230,197,49)" fg:x="994" fg:w="2"/><text x="77.6643%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (24 samples, 1.87%)</title><rect x="75.7788%" y="645" width="1.8692%" height="15" fill="rgb(239,141,16)" fg:x="973" fg:w="24"/><text x="76.0288%" y="655.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.23%)</title><rect x="77.4143%" y="629" width="0.2336%" height="15" fill="rgb(225,105,43)" fg:x="994" fg:w="3"/><text x="77.6643%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.23%)</title><rect x="77.4143%" y="613" width="0.2336%" height="15" fill="rgb(214,131,14)" fg:x="994" fg:w="3"/><text x="77.6643%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="77.5701%" y="597" width="0.0779%" height="15" fill="rgb(229,177,11)" fg:x="996" fg:w="1"/><text x="77.8201%" y="607.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="77.5701%" y="581" width="0.0779%" height="15" fill="rgb(231,180,14)" fg:x="996" fg:w="1"/><text x="77.8201%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="77.5701%" y="565" width="0.0779%" height="15" fill="rgb(232,88,2)" fg:x="996" fg:w="1"/><text x="77.8201%" y="575.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="77.5701%" y="549" width="0.0779%" height="15" fill="rgb(205,220,8)" fg:x="996" fg:w="1"/><text x="77.8201%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="77.5701%" y="533" width="0.0779%" height="15" fill="rgb(225,23,53)" fg:x="996" fg:w="1"/><text x="77.8201%" y="543.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="77.5701%" y="517" width="0.0779%" height="15" fill="rgb(213,62,29)" fg:x="996" fg:w="1"/><text x="77.8201%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="77.5701%" y="501" width="0.0779%" height="15" fill="rgb(227,75,7)" fg:x="996" fg:w="1"/><text x="77.8201%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.5701%" y="485" width="0.0779%" height="15" fill="rgb(207,105,14)" fg:x="996" fg:w="1"/><text x="77.8201%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.5701%" y="469" width="0.0779%" height="15" fill="rgb(245,62,29)" fg:x="996" fg:w="1"/><text x="77.8201%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.5701%" y="453" width="0.0779%" height="15" fill="rgb(236,202,4)" fg:x="996" fg:w="1"/><text x="77.8201%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.5701%" y="437" width="0.0779%" height="15" fill="rgb(250,67,1)" fg:x="996" fg:w="1"/><text x="77.8201%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.5701%" y="421" width="0.0779%" height="15" fill="rgb(253,115,44)" fg:x="996" fg:w="1"/><text x="77.8201%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.5701%" y="405" width="0.0779%" height="15" fill="rgb(251,139,18)" fg:x="996" fg:w="1"/><text x="77.8201%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5701%" y="389" width="0.0779%" height="15" fill="rgb(218,22,32)" fg:x="996" fg:w="1"/><text x="77.8201%" y="399.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="77.6480%" y="613" width="0.0779%" height="15" fill="rgb(243,53,5)" fg:x="997" fg:w="1"/><text x="77.8980%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="77.6480%" y="597" width="0.0779%" height="15" fill="rgb(227,56,16)" fg:x="997" fg:w="1"/><text x="77.8980%" y="607.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="77.6480%" y="581" width="0.0779%" height="15" fill="rgb(245,53,0)" fg:x="997" fg:w="1"/><text x="77.8980%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.6480%" y="565" width="0.0779%" height="15" fill="rgb(216,170,35)" fg:x="997" fg:w="1"/><text x="77.8980%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6480%" y="549" width="0.0779%" height="15" fill="rgb(211,200,8)" fg:x="997" fg:w="1"/><text x="77.8980%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.6480%" y="533" width="0.0779%" height="15" fill="rgb(228,204,44)" fg:x="997" fg:w="1"/><text x="77.8980%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6480%" y="517" width="0.0779%" height="15" fill="rgb(214,121,17)" fg:x="997" fg:w="1"/><text x="77.8980%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="77.6480%" y="501" width="0.0779%" height="15" fill="rgb(233,64,38)" fg:x="997" fg:w="1"/><text x="77.8980%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="77.6480%" y="485" width="0.0779%" height="15" fill="rgb(253,54,19)" fg:x="997" fg:w="1"/><text x="77.8980%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="77.8037%" y="581" width="0.0779%" height="15" fill="rgb(253,94,18)" fg:x="999" fg:w="1"/><text x="78.0537%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8037%" y="565" width="0.0779%" height="15" fill="rgb(227,57,52)" fg:x="999" fg:w="1"/><text x="78.0537%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8037%" y="549" width="0.0779%" height="15" fill="rgb(230,228,50)" fg:x="999" fg:w="1"/><text x="78.0537%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8037%" y="533" width="0.0779%" height="15" fill="rgb(217,205,27)" fg:x="999" fg:w="1"/><text x="78.0537%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8037%" y="517" width="0.0779%" height="15" fill="rgb(252,71,50)" fg:x="999" fg:w="1"/><text x="78.0537%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.8037%" y="501" width="0.0779%" height="15" fill="rgb(209,86,4)" fg:x="999" fg:w="1"/><text x="78.0537%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.8816%" y="565" width="0.0779%" height="15" fill="rgb(229,94,0)" fg:x="1000" fg:w="1"/><text x="78.1316%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.8816%" y="549" width="0.0779%" height="15" fill="rgb(252,223,21)" fg:x="1000" fg:w="1"/><text x="78.1316%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.8816%" y="533" width="0.0779%" height="15" fill="rgb(230,210,4)" fg:x="1000" fg:w="1"/><text x="78.1316%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.8816%" y="517" width="0.0779%" height="15" fill="rgb(240,149,38)" fg:x="1000" fg:w="1"/><text x="78.1316%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.8816%" y="501" width="0.0779%" height="15" fill="rgb(254,105,20)" fg:x="1000" fg:w="1"/><text x="78.1316%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8816%" y="485" width="0.0779%" height="15" fill="rgb(253,87,46)" fg:x="1000" fg:w="1"/><text x="78.1316%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9595%" y="533" width="0.0779%" height="15" fill="rgb(253,116,33)" fg:x="1001" fg:w="1"/><text x="78.2095%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9595%" y="517" width="0.0779%" height="15" fill="rgb(229,198,5)" fg:x="1001" fg:w="1"/><text x="78.2095%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="77.9595%" y="501" width="0.0779%" height="15" fill="rgb(242,38,37)" fg:x="1001" fg:w="1"/><text x="78.2095%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="78.0374%" y="533" width="0.1558%" height="15" fill="rgb(242,69,53)" fg:x="1002" fg:w="2"/><text x="78.2874%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="78.0374%" y="517" width="0.1558%" height="15" fill="rgb(249,80,16)" fg:x="1002" fg:w="2"/><text x="78.2874%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1153%" y="501" width="0.0779%" height="15" fill="rgb(206,128,11)" fg:x="1003" fg:w="1"/><text x="78.3653%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1153%" y="485" width="0.0779%" height="15" fill="rgb(212,35,20)" fg:x="1003" fg:w="1"/><text x="78.3653%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="78.1931%" y="469" width="0.0779%" height="15" fill="rgb(236,79,13)" fg:x="1004" fg:w="1"/><text x="78.4431%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="77.9595%" y="565" width="0.3894%" height="15" fill="rgb(233,123,3)" fg:x="1001" fg:w="5"/><text x="78.2095%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="77.9595%" y="549" width="0.3894%" height="15" fill="rgb(214,93,52)" fg:x="1001" fg:w="5"/><text x="78.2095%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="78.1931%" y="533" width="0.1558%" height="15" fill="rgb(251,37,40)" fg:x="1004" fg:w="2"/><text x="78.4431%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="78.1931%" y="517" width="0.1558%" height="15" fill="rgb(227,80,54)" fg:x="1004" fg:w="2"/><text x="78.4431%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.1931%" y="501" width="0.1558%" height="15" fill="rgb(254,48,11)" fg:x="1004" fg:w="2"/><text x="78.4431%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.1931%" y="485" width="0.1558%" height="15" fill="rgb(235,193,26)" fg:x="1004" fg:w="2"/><text x="78.4431%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.2710%" y="469" width="0.0779%" height="15" fill="rgb(229,99,21)" fg:x="1005" fg:w="1"/><text x="78.5210%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2710%" y="453" width="0.0779%" height="15" fill="rgb(211,140,41)" fg:x="1005" fg:w="1"/><text x="78.5210%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.3489%" y="421" width="0.0779%" height="15" fill="rgb(240,227,30)" fg:x="1006" fg:w="1"/><text x="78.5989%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.3489%" y="405" width="0.0779%" height="15" fill="rgb(215,224,45)" fg:x="1006" fg:w="1"/><text x="78.5989%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3489%" y="389" width="0.0779%" height="15" fill="rgb(206,123,31)" fg:x="1006" fg:w="1"/><text x="78.5989%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3489%" y="373" width="0.0779%" height="15" fill="rgb(210,138,16)" fg:x="1006" fg:w="1"/><text x="78.5989%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.3489%" y="357" width="0.0779%" height="15" fill="rgb(228,57,28)" fg:x="1006" fg:w="1"/><text x="78.5989%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.4268%" y="389" width="0.0779%" height="15" fill="rgb(242,170,10)" fg:x="1007" fg:w="1"/><text x="78.6768%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="78.3489%" y="469" width="0.2336%" height="15" fill="rgb(228,214,39)" fg:x="1006" fg:w="3"/><text x="78.5989%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="78.3489%" y="453" width="0.2336%" height="15" fill="rgb(218,179,33)" fg:x="1006" fg:w="3"/><text x="78.5989%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="78.3489%" y="437" width="0.2336%" height="15" fill="rgb(235,193,39)" fg:x="1006" fg:w="3"/><text x="78.5989%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.4268%" y="421" width="0.1558%" height="15" fill="rgb(219,221,36)" fg:x="1007" fg:w="2"/><text x="78.6768%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.4268%" y="405" width="0.1558%" height="15" fill="rgb(248,218,19)" fg:x="1007" fg:w="2"/><text x="78.6768%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.5047%" y="389" width="0.0779%" height="15" fill="rgb(205,50,9)" fg:x="1008" fg:w="1"/><text x="78.7547%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5047%" y="373" width="0.0779%" height="15" fill="rgb(238,81,28)" fg:x="1008" fg:w="1"/><text x="78.7547%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5047%" y="357" width="0.0779%" height="15" fill="rgb(235,110,19)" fg:x="1008" fg:w="1"/><text x="78.7547%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5047%" y="341" width="0.0779%" height="15" fill="rgb(214,7,14)" fg:x="1008" fg:w="1"/><text x="78.7547%" y="351.50"></text></g><g><title>engine::session::Session::close (13 samples, 1.01%)</title><rect x="77.6480%" y="645" width="1.0125%" height="15" fill="rgb(211,77,3)" fg:x="997" fg:w="13"/><text x="77.8980%" y="655.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.01%)</title><rect x="77.6480%" y="629" width="1.0125%" height="15" fill="rgb(229,5,9)" fg:x="997" fg:w="13"/><text x="77.8980%" y="639.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.93%)</title><rect x="77.7259%" y="613" width="0.9346%" height="15" fill="rgb(225,90,11)" fg:x="998" fg:w="12"/><text x="77.9759%" y="623.50"></text></g><g><title>engine::session::Session::check_for_changes (12 samples, 0.93%)</title><rect x="77.7259%" y="597" width="0.9346%" height="15" fill="rgb(242,56,8)" fg:x="998" fg:w="12"/><text x="77.9759%" y="607.50"></text></g><g><title>kernel::compare::any_entity_changes (10 samples, 0.78%)</title><rect x="77.8816%" y="581" width="0.7788%" height="15" fill="rgb(249,212,39)" fg:x="1000" fg:w="10"/><text x="78.1316%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.31%)</title><rect x="78.3489%" y="565" width="0.3115%" height="15" fill="rgb(236,90,9)" fg:x="1006" fg:w="4"/><text x="78.5989%" y="575.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.31%)</title><rect x="78.3489%" y="549" width="0.3115%" height="15" fill="rgb(206,88,35)" fg:x="1006" fg:w="4"/><text x="78.5989%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="78.3489%" y="533" width="0.3115%" height="15" fill="rgb(205,126,30)" fg:x="1006" fg:w="4"/><text x="78.5989%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="78.3489%" y="517" width="0.3115%" height="15" fill="rgb(230,176,12)" fg:x="1006" fg:w="4"/><text x="78.5989%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="78.3489%" y="501" width="0.3115%" height="15" fill="rgb(243,19,9)" fg:x="1006" fg:w="4"/><text x="78.5989%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="78.3489%" y="485" width="0.3115%" height="15" fill="rgb(245,171,17)" fg:x="1006" fg:w="4"/><text x="78.5989%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5826%" y="469" width="0.0779%" height="15" fill="rgb(227,52,21)" fg:x="1009" fg:w="1"/><text x="78.8326%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5826%" y="453" width="0.0779%" height="15" fill="rgb(238,69,14)" fg:x="1009" fg:w="1"/><text x="78.8326%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5826%" y="437" width="0.0779%" height="15" fill="rgb(241,156,39)" fg:x="1009" fg:w="1"/><text x="78.8326%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.6604%" y="517" width="0.0779%" height="15" fill="rgb(212,227,28)" fg:x="1010" fg:w="1"/><text x="78.9104%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.6604%" y="501" width="0.0779%" height="15" fill="rgb(209,118,27)" fg:x="1010" fg:w="1"/><text x="78.9104%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.6604%" y="485" width="0.0779%" height="15" fill="rgb(226,102,5)" fg:x="1010" fg:w="1"/><text x="78.9104%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.6604%" y="469" width="0.0779%" height="15" fill="rgb(223,34,3)" fg:x="1010" fg:w="1"/><text x="78.9104%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.8162%" y="389" width="0.0779%" height="15" fill="rgb(221,81,38)" fg:x="1012" fg:w="1"/><text x="79.0662%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.8162%" y="373" width="0.0779%" height="15" fill="rgb(236,219,28)" fg:x="1012" fg:w="1"/><text x="79.0662%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.8162%" y="357" width="0.0779%" height="15" fill="rgb(213,200,14)" fg:x="1012" fg:w="1"/><text x="79.0662%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="78.8162%" y="405" width="0.1558%" height="15" fill="rgb(240,33,19)" fg:x="1012" fg:w="2"/><text x="79.0662%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="78.8941%" y="389" width="0.0779%" height="15" fill="rgb(233,113,27)" fg:x="1013" fg:w="1"/><text x="79.1441%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="78.7383%" y="485" width="0.3115%" height="15" fill="rgb(220,221,18)" fg:x="1011" fg:w="4"/><text x="78.9883%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="78.7383%" y="469" width="0.3115%" height="15" fill="rgb(238,92,8)" fg:x="1011" fg:w="4"/><text x="78.9883%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.31%)</title><rect x="78.7383%" y="453" width="0.3115%" height="15" fill="rgb(222,164,16)" fg:x="1011" fg:w="4"/><text x="78.9883%" y="463.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.31%)</title><rect x="78.7383%" y="437" width="0.3115%" height="15" fill="rgb(241,119,3)" fg:x="1011" fg:w="4"/><text x="78.9883%" y="447.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.31%)</title><rect x="78.7383%" y="421" width="0.3115%" height="15" fill="rgb(241,44,8)" fg:x="1011" fg:w="4"/><text x="78.9883%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="78.9720%" y="405" width="0.0779%" height="15" fill="rgb(230,36,40)" fg:x="1014" fg:w="1"/><text x="79.2220%" y="415.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="78.9720%" y="389" width="0.0779%" height="15" fill="rgb(243,16,36)" fg:x="1014" fg:w="1"/><text x="79.2220%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="79.1277%" y="437" width="0.0779%" height="15" fill="rgb(231,4,26)" fg:x="1016" fg:w="1"/><text x="79.3777%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="79.2056%" y="421" width="0.1558%" height="15" fill="rgb(240,9,31)" fg:x="1017" fg:w="2"/><text x="79.4556%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="79.3614%" y="405" width="0.1558%" height="15" fill="rgb(207,173,15)" fg:x="1019" fg:w="2"/><text x="79.6114%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.93%)</title><rect x="79.3614%" y="421" width="0.9346%" height="15" fill="rgb(224,192,53)" fg:x="1019" fg:w="12"/><text x="79.6114%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.78%)</title><rect x="79.5171%" y="405" width="0.7788%" height="15" fill="rgb(223,67,28)" fg:x="1021" fg:w="10"/><text x="79.7671%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2181%" y="389" width="0.0779%" height="15" fill="rgb(211,20,47)" fg:x="1030" fg:w="1"/><text x="80.4681%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="80.2960%" y="421" width="0.1558%" height="15" fill="rgb(240,228,2)" fg:x="1031" fg:w="2"/><text x="80.5460%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="80.3738%" y="405" width="0.0779%" height="15" fill="rgb(248,151,12)" fg:x="1032" fg:w="1"/><text x="80.6238%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="80.3738%" y="389" width="0.0779%" height="15" fill="rgb(244,8,39)" fg:x="1032" fg:w="1"/><text x="80.6238%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="80.3738%" y="373" width="0.0779%" height="15" fill="rgb(222,26,8)" fg:x="1032" fg:w="1"/><text x="80.6238%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.3738%" y="357" width="0.0779%" height="15" fill="rgb(213,106,44)" fg:x="1032" fg:w="1"/><text x="80.6238%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.3738%" y="341" width="0.0779%" height="15" fill="rgb(214,129,20)" fg:x="1032" fg:w="1"/><text x="80.6238%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.3738%" y="325" width="0.0779%" height="15" fill="rgb(212,32,13)" fg:x="1032" fg:w="1"/><text x="80.6238%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.4517%" y="389" width="0.0779%" height="15" fill="rgb(208,168,33)" fg:x="1033" fg:w="1"/><text x="80.7017%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.4517%" y="373" width="0.0779%" height="15" fill="rgb(231,207,8)" fg:x="1033" fg:w="1"/><text x="80.7017%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4517%" y="357" width="0.0779%" height="15" fill="rgb(235,219,23)" fg:x="1033" fg:w="1"/><text x="80.7017%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="80.6075%" y="357" width="0.0779%" height="15" fill="rgb(226,216,26)" fg:x="1035" fg:w="1"/><text x="80.8575%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.6075%" y="341" width="0.0779%" height="15" fill="rgb(239,137,16)" fg:x="1035" fg:w="1"/><text x="80.8575%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.23%)</title><rect x="80.6854%" y="357" width="0.2336%" height="15" fill="rgb(207,12,36)" fg:x="1036" fg:w="3"/><text x="80.9354%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="80.7632%" y="341" width="0.1558%" height="15" fill="rgb(210,214,24)" fg:x="1037" fg:w="2"/><text x="81.0132%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="80.8411%" y="325" width="0.0779%" height="15" fill="rgb(206,56,30)" fg:x="1038" fg:w="1"/><text x="81.0911%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="80.8411%" y="309" width="0.0779%" height="15" fill="rgb(228,143,26)" fg:x="1038" fg:w="1"/><text x="81.0911%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.8411%" y="293" width="0.0779%" height="15" fill="rgb(216,218,46)" fg:x="1038" fg:w="1"/><text x="81.0911%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.8411%" y="277" width="0.0779%" height="15" fill="rgb(206,6,19)" fg:x="1038" fg:w="1"/><text x="81.0911%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.8411%" y="261" width="0.0779%" height="15" fill="rgb(239,177,51)" fg:x="1038" fg:w="1"/><text x="81.0911%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="80.9190%" y="357" width="0.1558%" height="15" fill="rgb(216,55,25)" fg:x="1039" fg:w="2"/><text x="81.1690%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="80.9190%" y="341" width="0.1558%" height="15" fill="rgb(231,163,29)" fg:x="1039" fg:w="2"/><text x="81.1690%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="80.9969%" y="325" width="0.0779%" height="15" fill="rgb(232,149,50)" fg:x="1040" fg:w="1"/><text x="81.2469%" y="335.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="80.9969%" y="309" width="0.0779%" height="15" fill="rgb(223,142,48)" fg:x="1040" fg:w="1"/><text x="81.2469%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (44 samples, 3.43%)</title><rect x="81.0748%" y="357" width="3.4268%" height="15" fill="rgb(245,83,23)" fg:x="1041" fg:w="44"/><text x="81.3248%" y="367.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (44 samples, 3.43%)</title><rect x="81.0748%" y="341" width="3.4268%" height="15" fill="rgb(224,63,2)" fg:x="1041" fg:w="44"/><text x="81.3248%" y="351.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.43%)</title><rect x="81.0748%" y="325" width="3.4268%" height="15" fill="rgb(218,65,53)" fg:x="1041" fg:w="44"/><text x="81.3248%" y="335.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="84.5016%" y="357" width="0.0779%" height="15" fill="rgb(221,84,29)" fg:x="1085" fg:w="1"/><text x="84.7516%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 4.28%)</title><rect x="80.4517%" y="405" width="4.2835%" height="15" fill="rgb(234,0,32)" fg:x="1033" fg:w="55"/><text x="80.7017%" y="415.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.21%)</title><rect x="80.5296%" y="389" width="4.2056%" height="15" fill="rgb(206,20,16)" fg:x="1034" fg:w="54"/><text x="80.7796%" y="399.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.21%)</title><rect x="80.5296%" y="373" width="4.2056%" height="15" fill="rgb(244,172,18)" fg:x="1034" fg:w="54"/><text x="80.7796%" y="383.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="84.5794%" y="357" width="0.1558%" height="15" fill="rgb(254,133,1)" fg:x="1086" fg:w="2"/><text x="84.8294%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.6573%" y="341" width="0.0779%" height="15" fill="rgb(222,206,41)" fg:x="1087" fg:w="1"/><text x="84.9073%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.6573%" y="325" width="0.0779%" height="15" fill="rgb(212,3,42)" fg:x="1087" fg:w="1"/><text x="84.9073%" y="335.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="84.8910%" y="389" width="0.0779%" height="15" fill="rgb(241,11,4)" fg:x="1090" fg:w="1"/><text x="85.1410%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9688%" y="389" width="0.0779%" height="15" fill="rgb(205,19,26)" fg:x="1091" fg:w="1"/><text x="85.2188%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.0467%" y="389" width="0.0779%" height="15" fill="rgb(210,179,32)" fg:x="1092" fg:w="1"/><text x="85.2967%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.47%)</title><rect x="84.7352%" y="405" width="0.4673%" height="15" fill="rgb(227,116,49)" fg:x="1088" fg:w="6"/><text x="84.9852%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="85.1246%" y="389" width="0.0779%" height="15" fill="rgb(211,146,6)" fg:x="1093" fg:w="1"/><text x="85.3746%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (62 samples, 4.83%)</title><rect x="80.4517%" y="421" width="4.8287%" height="15" fill="rgb(219,44,39)" fg:x="1033" fg:w="62"/><text x="80.7017%" y="431.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="85.2025%" y="405" width="0.0779%" height="15" fill="rgb(234,128,11)" fg:x="1094" fg:w="1"/><text x="85.4525%" y="415.50"></text></g><g><title>regex_automata::meta::strategy::new (79 samples, 6.15%)</title><rect x="79.2056%" y="437" width="6.1526%" height="15" fill="rgb(220,183,53)" fg:x="1017" fg:w="79"/><text x="79.4556%" y="447.50">regex_au..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="85.2804%" y="421" width="0.0779%" height="15" fill="rgb(213,219,32)" fg:x="1095" fg:w="1"/><text x="85.5304%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="85.3583%" y="405" width="0.0779%" height="15" fill="rgb(232,156,16)" fg:x="1096" fg:w="1"/><text x="85.6083%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="85.3583%" y="389" width="0.0779%" height="15" fill="rgb(246,135,34)" fg:x="1096" fg:w="1"/><text x="85.6083%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="85.3583%" y="437" width="0.1558%" height="15" fill="rgb(241,99,0)" fg:x="1096" fg:w="2"/><text x="85.6083%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="85.3583%" y="421" width="0.1558%" height="15" fill="rgb(222,103,45)" fg:x="1096" fg:w="2"/><text x="85.6083%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="85.4361%" y="405" width="0.0779%" height="15" fill="rgb(212,57,4)" fg:x="1097" fg:w="1"/><text x="85.6861%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.4361%" y="389" width="0.0779%" height="15" fill="rgb(215,68,47)" fg:x="1097" fg:w="1"/><text x="85.6861%" y="399.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="85.5140%" y="389" width="0.0779%" height="15" fill="rgb(230,84,2)" fg:x="1098" fg:w="1"/><text x="85.7640%" y="399.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="85.5140%" y="373" width="0.0779%" height="15" fill="rgb(220,102,14)" fg:x="1098" fg:w="1"/><text x="85.7640%" y="383.50"></text></g><g><title>regex::regex::string::Regex::new (85 samples, 6.62%)</title><rect x="79.0498%" y="485" width="6.6199%" height="15" fill="rgb(240,10,32)" fg:x="1015" fg:w="85"/><text x="79.2998%" y="495.50">regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (85 samples, 6.62%)</title><rect x="79.0498%" y="469" width="6.6199%" height="15" fill="rgb(215,47,27)" fg:x="1015" fg:w="85"/><text x="79.2998%" y="479.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (85 samples, 6.62%)</title><rect x="79.0498%" y="453" width="6.6199%" height="15" fill="rgb(233,188,43)" fg:x="1015" fg:w="85"/><text x="79.2998%" y="463.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="85.5140%" y="437" width="0.1558%" height="15" fill="rgb(253,190,1)" fg:x="1098" fg:w="2"/><text x="85.7640%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="85.5140%" y="421" width="0.1558%" height="15" fill="rgb(206,114,52)" fg:x="1098" fg:w="2"/><text x="85.7640%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="85.5140%" y="405" width="0.1558%" height="15" fill="rgb(233,120,37)" fg:x="1098" fg:w="2"/><text x="85.7640%" y="415.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="85.5919%" y="389" width="0.0779%" height="15" fill="rgb(214,52,39)" fg:x="1099" fg:w="1"/><text x="85.8419%" y="399.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="85.5919%" y="373" width="0.0779%" height="15" fill="rgb(223,80,29)" fg:x="1099" fg:w="1"/><text x="85.8419%" y="383.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (92 samples, 7.17%)</title><rect x="78.7383%" y="501" width="7.1651%" height="15" fill="rgb(230,101,40)" fg:x="1011" fg:w="92"/><text x="78.9883%" y="511.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.23%)</title><rect x="85.6698%" y="485" width="0.2336%" height="15" fill="rgb(219,211,8)" fg:x="1100" fg:w="3"/><text x="85.9198%" y="495.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.23%)</title><rect x="85.6698%" y="469" width="0.2336%" height="15" fill="rgb(252,126,28)" fg:x="1100" fg:w="3"/><text x="85.9198%" y="479.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.23%)</title><rect x="85.6698%" y="453" width="0.2336%" height="15" fill="rgb(215,56,38)" fg:x="1100" fg:w="3"/><text x="85.9198%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="85.7477%" y="437" width="0.1558%" height="15" fill="rgb(249,55,44)" fg:x="1101" fg:w="2"/><text x="85.9977%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="85.7477%" y="421" width="0.1558%" height="15" fill="rgb(220,221,32)" fg:x="1101" fg:w="2"/><text x="85.9977%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="85.9813%" y="485" width="0.1558%" height="15" fill="rgb(212,216,41)" fg:x="1104" fg:w="2"/><text x="86.2313%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="85.9813%" y="469" width="0.1558%" height="15" fill="rgb(228,213,43)" fg:x="1104" fg:w="2"/><text x="86.2313%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="85.9813%" y="453" width="0.1558%" height="15" fill="rgb(211,31,26)" fg:x="1104" fg:w="2"/><text x="86.2313%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="85.9813%" y="437" width="0.1558%" height="15" fill="rgb(229,202,19)" fg:x="1104" fg:w="2"/><text x="86.2313%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="85.9813%" y="421" width="0.1558%" height="15" fill="rgb(229,105,46)" fg:x="1104" fg:w="2"/><text x="86.2313%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.39%)</title><rect x="86.1371%" y="405" width="0.3894%" height="15" fill="rgb(235,108,1)" fg:x="1106" fg:w="5"/><text x="86.3871%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="86.3707%" y="389" width="0.1558%" height="15" fill="rgb(245,111,35)" fg:x="1109" fg:w="2"/><text x="86.6207%" y="399.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.55%)</title><rect x="86.1371%" y="485" width="0.5452%" height="15" fill="rgb(219,185,31)" fg:x="1106" fg:w="7"/><text x="86.3871%" y="495.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.55%)</title><rect x="86.1371%" y="469" width="0.5452%" height="15" fill="rgb(214,4,43)" fg:x="1106" fg:w="7"/><text x="86.3871%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.55%)</title><rect x="86.1371%" y="453" width="0.5452%" height="15" fill="rgb(235,227,40)" fg:x="1106" fg:w="7"/><text x="86.3871%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.55%)</title><rect x="86.1371%" y="437" width="0.5452%" height="15" fill="rgb(230,88,30)" fg:x="1106" fg:w="7"/><text x="86.3871%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.55%)</title><rect x="86.1371%" y="421" width="0.5452%" height="15" fill="rgb(216,217,1)" fg:x="1106" fg:w="7"/><text x="86.3871%" y="431.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="86.5265%" y="405" width="0.1558%" height="15" fill="rgb(248,139,50)" fg:x="1111" fg:w="2"/><text x="86.7765%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="86.5265%" y="389" width="0.1558%" height="15" fill="rgb(233,1,21)" fg:x="1111" fg:w="2"/><text x="86.7765%" y="399.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="86.6822%" y="469" width="0.0779%" height="15" fill="rgb(215,183,12)" fg:x="1113" fg:w="1"/><text x="86.9322%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Config::hybrid_cache_capacity (1 samples, 0.08%)</title><rect x="86.6822%" y="453" width="0.0779%" height="15" fill="rgb(229,104,42)" fg:x="1113" fg:w="1"/><text x="86.9322%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.7601%" y="437" width="0.0779%" height="15" fill="rgb(243,34,48)" fg:x="1114" fg:w="1"/><text x="87.0101%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.7601%" y="421" width="0.0779%" height="15" fill="rgb(239,11,44)" fg:x="1114" fg:w="1"/><text x="87.0101%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="86.7601%" y="405" width="0.0779%" height="15" fill="rgb(231,98,35)" fg:x="1114" fg:w="1"/><text x="87.0101%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="86.9938%" y="405" width="0.1558%" height="15" fill="rgb(233,28,25)" fg:x="1117" fg:w="2"/><text x="87.2438%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.93%)</title><rect x="86.9938%" y="421" width="0.9346%" height="15" fill="rgb(234,123,11)" fg:x="1117" fg:w="12"/><text x="87.2438%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.78%)</title><rect x="87.1495%" y="405" width="0.7788%" height="15" fill="rgb(220,69,3)" fg:x="1119" fg:w="10"/><text x="87.3995%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="87.9283%" y="421" width="0.1558%" height="15" fill="rgb(214,64,36)" fg:x="1129" fg:w="2"/><text x="88.1783%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="87.9283%" y="405" width="0.1558%" height="15" fill="rgb(211,138,32)" fg:x="1129" fg:w="2"/><text x="88.1783%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="88.0062%" y="389" width="0.0779%" height="15" fill="rgb(213,118,47)" fg:x="1130" fg:w="1"/><text x="88.2562%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="88.0062%" y="373" width="0.0779%" height="15" fill="rgb(243,124,49)" fg:x="1130" fg:w="1"/><text x="88.2562%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.0062%" y="357" width="0.0779%" height="15" fill="rgb(221,30,28)" fg:x="1130" fg:w="1"/><text x="88.2562%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.1620%" y="389" width="0.0779%" height="15" fill="rgb(246,37,13)" fg:x="1132" fg:w="1"/><text x="88.4120%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.1620%" y="373" width="0.0779%" height="15" fill="rgb(249,66,14)" fg:x="1132" fg:w="1"/><text x="88.4120%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1620%" y="357" width="0.0779%" height="15" fill="rgb(213,166,5)" fg:x="1132" fg:w="1"/><text x="88.4120%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="88.4735%" y="357" width="0.1558%" height="15" fill="rgb(221,66,24)" fg:x="1136" fg:w="2"/><text x="88.7235%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.5514%" y="341" width="0.0779%" height="15" fill="rgb(210,132,17)" fg:x="1137" fg:w="1"/><text x="88.8014%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.5514%" y="325" width="0.0779%" height="15" fill="rgb(243,202,5)" fg:x="1137" fg:w="1"/><text x="88.8014%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.47%)</title><rect x="88.2399%" y="389" width="0.4673%" height="15" fill="rgb(233,70,48)" fg:x="1133" fg:w="6"/><text x="88.4899%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.31%)</title><rect x="88.3956%" y="373" width="0.3115%" height="15" fill="rgb(238,41,26)" fg:x="1135" fg:w="4"/><text x="88.6456%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.6293%" y="357" width="0.0779%" height="15" fill="rgb(241,19,31)" fg:x="1138" fg:w="1"/><text x="88.8793%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.6293%" y="341" width="0.0779%" height="15" fill="rgb(214,76,10)" fg:x="1138" fg:w="1"/><text x="88.8793%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.6293%" y="325" width="0.0779%" height="15" fill="rgb(254,202,22)" fg:x="1138" fg:w="1"/><text x="88.8793%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.7072%" y="373" width="0.0779%" height="15" fill="rgb(214,72,24)" fg:x="1139" fg:w="1"/><text x="88.9572%" y="383.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (12 samples, 0.93%)</title><rect x="88.0841%" y="421" width="0.9346%" height="15" fill="rgb(221,92,46)" fg:x="1131" fg:w="12"/><text x="88.3341%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (12 samples, 0.93%)</title><rect x="88.0841%" y="405" width="0.9346%" height="15" fill="rgb(246,13,50)" fg:x="1131" fg:w="12"/><text x="88.3341%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.31%)</title><rect x="88.7072%" y="389" width="0.3115%" height="15" fill="rgb(240,165,38)" fg:x="1139" fg:w="4"/><text x="88.9572%" y="399.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.23%)</title><rect x="88.7850%" y="373" width="0.2336%" height="15" fill="rgb(241,24,51)" fg:x="1140" fg:w="3"/><text x="89.0350%" y="383.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.23%)</title><rect x="88.7850%" y="357" width="0.2336%" height="15" fill="rgb(227,51,44)" fg:x="1140" fg:w="3"/><text x="89.0350%" y="367.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="89.2523%" y="309" width="0.1558%" height="15" fill="rgb(231,121,3)" fg:x="1146" fg:w="2"/><text x="89.5023%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.4081%" y="309" width="0.0779%" height="15" fill="rgb(245,3,41)" fg:x="1148" fg:w="1"/><text x="89.6581%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.23%)</title><rect x="89.4860%" y="309" width="0.2336%" height="15" fill="rgb(214,13,26)" fg:x="1149" fg:w="3"/><text x="89.7360%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.5639%" y="293" width="0.1558%" height="15" fill="rgb(252,75,11)" fg:x="1150" fg:w="2"/><text x="89.8139%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.5639%" y="277" width="0.1558%" height="15" fill="rgb(218,226,17)" fg:x="1150" fg:w="2"/><text x="89.8139%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.5639%" y="261" width="0.1558%" height="15" fill="rgb(248,89,38)" fg:x="1150" fg:w="2"/><text x="89.8139%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.7196%" y="309" width="0.0779%" height="15" fill="rgb(237,73,46)" fg:x="1152" fg:w="1"/><text x="89.9696%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.2648%" y="245" width="0.0779%" height="15" fill="rgb(242,78,33)" fg:x="1159" fg:w="1"/><text x="90.5148%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.31%)</title><rect x="90.1090%" y="277" width="0.3115%" height="15" fill="rgb(235,60,3)" fg:x="1157" fg:w="4"/><text x="90.3590%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="90.1869%" y="261" width="0.2336%" height="15" fill="rgb(216,172,19)" fg:x="1158" fg:w="3"/><text x="90.4369%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.3427%" y="245" width="0.0779%" height="15" fill="rgb(227,6,42)" fg:x="1160" fg:w="1"/><text x="90.5927%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.5763%" y="261" width="0.0779%" height="15" fill="rgb(223,207,42)" fg:x="1163" fg:w="1"/><text x="90.8263%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (13 samples, 1.01%)</title><rect x="89.7975%" y="309" width="1.0125%" height="15" fill="rgb(246,138,30)" fg:x="1153" fg:w="13"/><text x="90.0475%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (12 samples, 0.93%)</title><rect x="89.8754%" y="293" width="0.9346%" height="15" fill="rgb(251,199,47)" fg:x="1154" fg:w="12"/><text x="90.1254%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.39%)</title><rect x="90.4206%" y="277" width="0.3894%" height="15" fill="rgb(228,218,44)" fg:x="1161" fg:w="5"/><text x="90.6706%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="90.6542%" y="261" width="0.1558%" height="15" fill="rgb(220,68,6)" fg:x="1164" fg:w="2"/><text x="90.9042%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.7321%" y="245" width="0.0779%" height="15" fill="rgb(240,60,26)" fg:x="1165" fg:w="1"/><text x="90.9821%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.7321%" y="229" width="0.0779%" height="15" fill="rgb(211,200,19)" fg:x="1165" fg:w="1"/><text x="90.9821%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.7321%" y="213" width="0.0779%" height="15" fill="rgb(242,145,30)" fg:x="1165" fg:w="1"/><text x="90.9821%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (49 samples, 3.82%)</title><rect x="90.8100%" y="309" width="3.8162%" height="15" fill="rgb(225,64,13)" fg:x="1166" fg:w="49"/><text x="91.0600%" y="319.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 3.82%)</title><rect x="90.8100%" y="293" width="3.8162%" height="15" fill="rgb(218,103,35)" fg:x="1166" fg:w="49"/><text x="91.0600%" y="303.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 3.82%)</title><rect x="90.8100%" y="277" width="3.8162%" height="15" fill="rgb(216,93,46)" fg:x="1166" fg:w="49"/><text x="91.0600%" y="287.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 5.61%)</title><rect x="89.0966%" y="405" width="5.6075%" height="15" fill="rgb(225,159,27)" fg:x="1144" fg:w="72"/><text x="89.3466%" y="415.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.61%)</title><rect x="89.0966%" y="389" width="5.6075%" height="15" fill="rgb(225,204,11)" fg:x="1144" fg:w="72"/><text x="89.3466%" y="399.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (72 samples, 5.61%)</title><rect x="89.0966%" y="373" width="5.6075%" height="15" fill="rgb(205,56,4)" fg:x="1144" fg:w="72"/><text x="89.3466%" y="383.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (72 samples, 5.61%)</title><rect x="89.0966%" y="357" width="5.6075%" height="15" fill="rgb(206,6,35)" fg:x="1144" fg:w="72"/><text x="89.3466%" y="367.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (72 samples, 5.61%)</title><rect x="89.0966%" y="341" width="5.6075%" height="15" fill="rgb(247,73,52)" fg:x="1144" fg:w="72"/><text x="89.3466%" y="351.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (72 samples, 5.61%)</title><rect x="89.0966%" y="325" width="5.6075%" height="15" fill="rgb(246,97,4)" fg:x="1144" fg:w="72"/><text x="89.3466%" y="335.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="94.6262%" y="309" width="0.0779%" height="15" fill="rgb(212,37,15)" fg:x="1215" fg:w="1"/><text x="94.8762%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.23%)</title><rect x="94.8598%" y="389" width="0.2336%" height="15" fill="rgb(208,130,40)" fg:x="1218" fg:w="3"/><text x="95.1098%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.9377%" y="373" width="0.1558%" height="15" fill="rgb(236,55,29)" fg:x="1219" fg:w="2"/><text x="95.1877%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.9377%" y="357" width="0.1558%" height="15" fill="rgb(209,156,45)" fg:x="1219" fg:w="2"/><text x="95.1877%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.9377%" y="341" width="0.1558%" height="15" fill="rgb(249,107,4)" fg:x="1219" fg:w="2"/><text x="95.1877%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="95.0935%" y="389" width="0.3115%" height="15" fill="rgb(227,7,13)" fg:x="1221" fg:w="4"/><text x="95.3435%" y="399.50"></text></g><g><title>regex_automata::meta::strategy::new (111 samples, 8.64%)</title><rect x="86.8380%" y="437" width="8.6449%" height="15" fill="rgb(250,129,14)" fg:x="1115" fg:w="111"/><text x="87.0880%" y="447.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (83 samples, 6.46%)</title><rect x="89.0187%" y="421" width="6.4642%" height="15" fill="rgb(229,92,13)" fg:x="1143" fg:w="83"/><text x="89.2687%" y="431.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.78%)</title><rect x="94.7040%" y="405" width="0.7788%" height="15" fill="rgb(245,98,39)" fg:x="1216" fg:w="10"/><text x="94.9540%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.4050%" y="389" width="0.0779%" height="15" fill="rgb(234,135,48)" fg:x="1225" fg:w="1"/><text x="95.6550%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="95.5607%" y="405" width="0.0779%" height="15" fill="rgb(230,98,28)" fg:x="1227" fg:w="1"/><text x="95.8107%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="95.6386%" y="405" width="0.0779%" height="15" fill="rgb(223,121,0)" fg:x="1228" fg:w="1"/><text x="95.8886%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="95.6386%" y="389" width="0.0779%" height="15" fill="rgb(234,173,33)" fg:x="1228" fg:w="1"/><text x="95.8886%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.31%)</title><rect x="95.4829%" y="437" width="0.3115%" height="15" fill="rgb(245,47,8)" fg:x="1226" fg:w="4"/><text x="95.7329%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.31%)</title><rect x="95.4829%" y="421" width="0.3115%" height="15" fill="rgb(205,17,20)" fg:x="1226" fg:w="4"/><text x="95.7329%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.7165%" y="405" width="0.0779%" height="15" fill="rgb(232,151,16)" fg:x="1229" fg:w="1"/><text x="95.9665%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7165%" y="389" width="0.0779%" height="15" fill="rgb(208,30,32)" fg:x="1229" fg:w="1"/><text x="95.9665%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="95.7944%" y="405" width="0.0779%" height="15" fill="rgb(254,26,3)" fg:x="1230" fg:w="1"/><text x="96.0444%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.7944%" y="389" width="0.0779%" height="15" fill="rgb(240,177,30)" fg:x="1230" fg:w="1"/><text x="96.0444%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.9502%" y="389" width="0.0779%" height="15" fill="rgb(248,76,44)" fg:x="1232" fg:w="1"/><text x="96.2002%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.9502%" y="373" width="0.0779%" height="15" fill="rgb(241,186,54)" fg:x="1232" fg:w="1"/><text x="96.2002%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9502%" y="357" width="0.0779%" height="15" fill="rgb(249,171,29)" fg:x="1232" fg:w="1"/><text x="96.2002%" y="367.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="96.0280%" y="389" width="0.0779%" height="15" fill="rgb(237,151,44)" fg:x="1233" fg:w="1"/><text x="96.2780%" y="399.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="96.0280%" y="373" width="0.0779%" height="15" fill="rgb(228,174,30)" fg:x="1233" fg:w="1"/><text x="96.2780%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.0280%" y="357" width="0.0779%" height="15" fill="rgb(252,14,37)" fg:x="1233" fg:w="1"/><text x="96.2780%" y="367.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="96.1059%" y="389" width="0.1558%" height="15" fill="rgb(207,111,40)" fg:x="1234" fg:w="2"/><text x="96.3559%" y="399.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="96.1838%" y="373" width="0.0779%" height="15" fill="rgb(248,171,54)" fg:x="1235" fg:w="1"/><text x="96.4338%" y="383.50"></text></g><g><title>indefinite::rules::number::Number::check (134 samples, 10.44%)</title><rect x="85.9034%" y="501" width="10.4361%" height="15" fill="rgb(211,127,2)" fg:x="1103" fg:w="134"/><text x="86.1534%" y="511.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::new (124 samples, 9.66%)</title><rect x="86.6822%" y="485" width="9.6573%" height="15" fill="rgb(236,87,47)" fg:x="1113" fg:w="124"/><text x="86.9322%" y="495.50">regex::regex::..</text></g><g><title>regex::builders::Builder::build_one_string (123 samples, 9.58%)</title><rect x="86.7601%" y="469" width="9.5794%" height="15" fill="rgb(223,190,45)" fg:x="1114" fg:w="123"/><text x="87.0101%" y="479.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (123 samples, 9.58%)</title><rect x="86.7601%" y="453" width="9.5794%" height="15" fill="rgb(215,5,16)" fg:x="1114" fg:w="123"/><text x="87.0101%" y="463.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.55%)</title><rect x="95.7944%" y="437" width="0.5452%" height="15" fill="rgb(252,82,33)" fg:x="1230" fg:w="7"/><text x="96.0444%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.55%)</title><rect x="95.7944%" y="421" width="0.5452%" height="15" fill="rgb(247,213,44)" fg:x="1230" fg:w="7"/><text x="96.0444%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (6 samples, 0.47%)</title><rect x="95.8723%" y="405" width="0.4673%" height="15" fill="rgb(205,196,44)" fg:x="1231" fg:w="6"/><text x="96.1223%" y="415.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="96.2617%" y="389" width="0.0779%" height="15" fill="rgb(237,96,54)" fg:x="1236" fg:w="1"/><text x="96.5117%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2617%" y="373" width="0.0779%" height="15" fill="rgb(230,113,34)" fg:x="1236" fg:w="1"/><text x="96.5117%" y="383.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="96.3396%" y="485" width="0.0779%" height="15" fill="rgb(221,224,12)" fg:x="1237" fg:w="1"/><text x="96.5896%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.6511%" y="405" width="0.0779%" height="15" fill="rgb(219,112,44)" fg:x="1241" fg:w="1"/><text x="96.9011%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.6511%" y="389" width="0.0779%" height="15" fill="rgb(210,31,13)" fg:x="1241" fg:w="1"/><text x="96.9011%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.7290%" y="389" width="0.1558%" height="15" fill="rgb(230,25,16)" fg:x="1242" fg:w="2"/><text x="96.9790%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="96.7290%" y="373" width="0.1558%" height="15" fill="rgb(246,108,53)" fg:x="1242" fg:w="2"/><text x="96.9790%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.7290%" y="357" width="0.1558%" height="15" fill="rgb(241,172,50)" fg:x="1242" fg:w="2"/><text x="96.9790%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="96.7290%" y="341" width="0.1558%" height="15" fill="rgb(235,141,10)" fg:x="1242" fg:w="2"/><text x="96.9790%" y="351.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="96.8847%" y="373" width="0.1558%" height="15" fill="rgb(220,174,43)" fg:x="1244" fg:w="2"/><text x="97.1347%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.70%)</title><rect x="96.4174%" y="421" width="0.7009%" height="15" fill="rgb(215,181,40)" fg:x="1238" fg:w="9"/><text x="96.6674%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.39%)</title><rect x="96.7290%" y="405" width="0.3894%" height="15" fill="rgb(230,97,2)" fg:x="1242" fg:w="5"/><text x="96.9790%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.23%)</title><rect x="96.8847%" y="389" width="0.2336%" height="15" fill="rgb(211,25,27)" fg:x="1244" fg:w="3"/><text x="97.1347%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="97.0405%" y="373" width="0.0779%" height="15" fill="rgb(230,87,26)" fg:x="1246" fg:w="1"/><text x="97.2905%" y="383.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="97.1184%" y="373" width="0.0779%" height="15" fill="rgb(227,160,17)" fg:x="1247" fg:w="1"/><text x="97.3684%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.1963%" y="373" width="0.0779%" height="15" fill="rgb(244,85,34)" fg:x="1248" fg:w="1"/><text x="97.4463%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.23%)</title><rect x="97.1184%" y="389" width="0.2336%" height="15" fill="rgb(207,70,0)" fg:x="1247" fg:w="3"/><text x="97.3684%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="97.2741%" y="373" width="0.0779%" height="15" fill="rgb(223,129,7)" fg:x="1249" fg:w="1"/><text x="97.5241%" y="383.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="97.2741%" y="357" width="0.0779%" height="15" fill="rgb(246,105,7)" fg:x="1249" fg:w="1"/><text x="97.5241%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.3520%" y="373" width="0.0779%" height="15" fill="rgb(215,154,42)" fg:x="1250" fg:w="1"/><text x="97.6020%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.39%)</title><rect x="97.1184%" y="421" width="0.3894%" height="15" fill="rgb(220,215,30)" fg:x="1247" fg:w="5"/><text x="97.3684%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="97.1184%" y="405" width="0.3894%" height="15" fill="rgb(228,81,51)" fg:x="1247" fg:w="5"/><text x="97.3684%" y="415.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.3520%" y="389" width="0.1558%" height="15" fill="rgb(247,71,54)" fg:x="1250" fg:w="2"/><text x="97.6020%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.4299%" y="373" width="0.0779%" height="15" fill="rgb(234,176,34)" fg:x="1251" fg:w="1"/><text x="97.6799%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.5078%" y="389" width="0.0779%" height="15" fill="rgb(241,103,54)" fg:x="1252" fg:w="1"/><text x="97.7578%" y="399.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="97.5078%" y="373" width="0.0779%" height="15" fill="rgb(228,22,34)" fg:x="1252" fg:w="1"/><text x="97.7578%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5078%" y="357" width="0.0779%" height="15" fill="rgb(241,179,48)" fg:x="1252" fg:w="1"/><text x="97.7578%" y="367.50"></text></g><g><title>regex::regex::string::Regex::new (16 samples, 1.25%)</title><rect x="96.4174%" y="469" width="1.2461%" height="15" fill="rgb(235,167,37)" fg:x="1238" fg:w="16"/><text x="96.6674%" y="479.50"></text></g><g><title>regex::builders::Builder::build_one_string (16 samples, 1.25%)</title><rect x="96.4174%" y="453" width="1.2461%" height="15" fill="rgb(213,109,30)" fg:x="1238" fg:w="16"/><text x="96.6674%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (16 samples, 1.25%)</title><rect x="96.4174%" y="437" width="1.2461%" height="15" fill="rgb(222,172,16)" fg:x="1238" fg:w="16"/><text x="96.6674%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.5078%" y="421" width="0.1558%" height="15" fill="rgb(233,192,5)" fg:x="1252" fg:w="2"/><text x="97.7578%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.5078%" y="405" width="0.1558%" height="15" fill="rgb(247,189,41)" fg:x="1252" fg:w="2"/><text x="97.7578%" y="415.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="97.5857%" y="389" width="0.0779%" height="15" fill="rgb(218,134,47)" fg:x="1253" fg:w="1"/><text x="97.8357%" y="399.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (246 samples, 19.16%)</title><rect x="78.6604%" y="581" width="19.1589%" height="15" fill="rgb(216,29,3)" fg:x="1010" fg:w="246"/><text x="78.9104%" y="591.50">&lt;&amp;kernel::model::entry::Entry ..</text></g><g><title>plugins_core::looking::model::qualify_name (246 samples, 19.16%)</title><rect x="78.6604%" y="565" width="19.1589%" height="15" fill="rgb(246,140,12)" fg:x="1010" fg:w="246"/><text x="78.9104%" y="575.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (246 samples, 19.16%)</title><rect x="78.6604%" y="549" width="19.1589%" height="15" fill="rgb(230,136,11)" fg:x="1010" fg:w="246"/><text x="78.9104%" y="559.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (246 samples, 19.16%)</title><rect x="78.6604%" y="533" width="19.1589%" height="15" fill="rgb(247,22,47)" fg:x="1010" fg:w="246"/><text x="78.9104%" y="543.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (245 samples, 19.08%)</title><rect x="78.7383%" y="517" width="19.0810%" height="15" fill="rgb(218,84,22)" fg:x="1011" fg:w="245"/><text x="78.9883%" y="527.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.48%)</title><rect x="96.3396%" y="501" width="1.4798%" height="15" fill="rgb(216,87,39)" fg:x="1237" fg:w="19"/><text x="96.5896%" y="511.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (18 samples, 1.40%)</title><rect x="96.4174%" y="485" width="1.4019%" height="15" fill="rgb(221,178,8)" fg:x="1238" fg:w="18"/><text x="96.6674%" y="495.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="97.6636%" y="469" width="0.1558%" height="15" fill="rgb(230,42,11)" fg:x="1254" fg:w="2"/><text x="97.9136%" y="479.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="97.6636%" y="453" width="0.1558%" height="15" fill="rgb(237,229,4)" fg:x="1254" fg:w="2"/><text x="97.9136%" y="463.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="97.6636%" y="437" width="0.1558%" height="15" fill="rgb(222,31,33)" fg:x="1254" fg:w="2"/><text x="97.9136%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="97.6636%" y="421" width="0.1558%" height="15" fill="rgb(210,17,39)" fg:x="1254" fg:w="2"/><text x="97.9136%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="97.6636%" y="405" width="0.1558%" height="15" fill="rgb(244,93,20)" fg:x="1254" fg:w="2"/><text x="97.9136%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7414%" y="389" width="0.0779%" height="15" fill="rgb(210,40,47)" fg:x="1255" fg:w="1"/><text x="97.9914%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7414%" y="373" width="0.0779%" height="15" fill="rgb(239,211,47)" fg:x="1255" fg:w="1"/><text x="97.9914%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="97.7414%" y="357" width="0.0779%" height="15" fill="rgb(251,223,49)" fg:x="1255" fg:w="1"/><text x="97.9914%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7414%" y="341" width="0.0779%" height="15" fill="rgb(221,149,5)" fg:x="1255" fg:w="1"/><text x="97.9914%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="97.8193%" y="581" width="0.0779%" height="15" fill="rgb(219,224,51)" fg:x="1256" fg:w="1"/><text x="98.0693%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="97.8193%" y="565" width="0.0779%" height="15" fill="rgb(223,7,8)" fg:x="1256" fg:w="1"/><text x="98.0693%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8193%" y="549" width="0.0779%" height="15" fill="rgb(241,217,22)" fg:x="1256" fg:w="1"/><text x="98.0693%" y="559.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="97.8972%" y="581" width="0.0779%" height="15" fill="rgb(248,209,0)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.8972%" y="565" width="0.0779%" height="15" fill="rgb(217,205,4)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="97.8972%" y="549" width="0.0779%" height="15" fill="rgb(228,124,39)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="97.8972%" y="533" width="0.0779%" height="15" fill="rgb(250,116,42)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.8972%" y="517" width="0.0779%" height="15" fill="rgb(223,202,9)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.8972%" y="501" width="0.0779%" height="15" fill="rgb(242,222,40)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.8972%" y="485" width="0.0779%" height="15" fill="rgb(229,99,46)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="97.8972%" y="469" width="0.0779%" height="15" fill="rgb(225,56,46)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="97.8972%" y="453" width="0.0779%" height="15" fill="rgb(227,94,5)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.8972%" y="437" width="0.0779%" height="15" fill="rgb(205,112,38)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.8972%" y="421" width="0.0779%" height="15" fill="rgb(231,133,46)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.8972%" y="405" width="0.0779%" height="15" fill="rgb(217,16,9)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.8972%" y="389" width="0.0779%" height="15" fill="rgb(249,173,9)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="97.8972%" y="373" width="0.0779%" height="15" fill="rgb(205,163,53)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="97.8972%" y="357" width="0.0779%" height="15" fill="rgb(217,54,41)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.8972%" y="341" width="0.0779%" height="15" fill="rgb(228,216,12)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="97.8972%" y="325" width="0.0779%" height="15" fill="rgb(244,228,15)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.8972%" y="309" width="0.0779%" height="15" fill="rgb(221,176,53)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.8972%" y="293" width="0.0779%" height="15" fill="rgb(205,94,34)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.8972%" y="277" width="0.0779%" height="15" fill="rgb(213,110,48)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="97.8972%" y="261" width="0.0779%" height="15" fill="rgb(236,142,28)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8972%" y="245" width="0.0779%" height="15" fill="rgb(225,135,29)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="97.8972%" y="229" width="0.0779%" height="15" fill="rgb(252,45,31)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="97.8972%" y="213" width="0.0779%" height="15" fill="rgb(211,187,50)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="223.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="97.8972%" y="197" width="0.0779%" height="15" fill="rgb(229,109,7)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.8972%" y="181" width="0.0779%" height="15" fill="rgb(251,131,51)" fg:x="1257" fg:w="1"/><text x="98.1472%" y="191.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (249 samples, 19.39%)</title><rect x="78.6604%" y="613" width="19.3925%" height="15" fill="rgb(251,180,35)" fg:x="1010" fg:w="249"/><text x="78.9104%" y="623.50">&lt;plugins_core::looking::action..</text></g><g><title>plugins_core::looking::model::new_area_observation (249 samples, 19.39%)</title><rect x="78.6604%" y="597" width="19.3925%" height="15" fill="rgb(211,46,32)" fg:x="1010" fg:w="249"/><text x="78.9104%" y="607.50">plugins_core::looking::model::..</text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.9751%" y="581" width="0.0779%" height="15" fill="rgb(248,123,17)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="591.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.9751%" y="565" width="0.0779%" height="15" fill="rgb(227,141,18)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9751%" y="549" width="0.0779%" height="15" fill="rgb(216,102,9)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9751%" y="533" width="0.0779%" height="15" fill="rgb(253,47,13)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.9751%" y="517" width="0.0779%" height="15" fill="rgb(226,93,23)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.9751%" y="501" width="0.0779%" height="15" fill="rgb(247,104,17)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="511.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.9751%" y="485" width="0.0779%" height="15" fill="rgb(233,203,26)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9751%" y="469" width="0.0779%" height="15" fill="rgb(244,98,49)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9751%" y="453" width="0.0779%" height="15" fill="rgb(235,134,22)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9751%" y="437" width="0.0779%" height="15" fill="rgb(221,70,32)" fg:x="1258" fg:w="1"/><text x="98.2251%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="98.0530%" y="597" width="0.0779%" height="15" fill="rgb(238,15,50)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="607.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.0530%" y="581" width="0.0779%" height="15" fill="rgb(215,221,48)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="98.0530%" y="565" width="0.0779%" height="15" fill="rgb(236,73,3)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="575.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.0530%" y="549" width="0.0779%" height="15" fill="rgb(250,107,11)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0530%" y="533" width="0.0779%" height="15" fill="rgb(242,39,14)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0530%" y="517" width="0.0779%" height="15" fill="rgb(248,164,37)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0530%" y="501" width="0.0779%" height="15" fill="rgb(217,60,12)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0530%" y="485" width="0.0779%" height="15" fill="rgb(240,125,29)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0530%" y="469" width="0.0779%" height="15" fill="rgb(208,207,28)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0530%" y="453" width="0.0779%" height="15" fill="rgb(209,159,27)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0530%" y="437" width="0.0779%" height="15" fill="rgb(251,176,53)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0530%" y="421" width="0.0779%" height="15" fill="rgb(211,85,7)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.0530%" y="405" width="0.0779%" height="15" fill="rgb(216,64,54)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0530%" y="389" width="0.0779%" height="15" fill="rgb(217,54,24)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.0530%" y="373" width="0.0779%" height="15" fill="rgb(208,206,53)" fg:x="1259" fg:w="1"/><text x="98.3030%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1308%" y="501" width="0.0779%" height="15" fill="rgb(251,74,39)" fg:x="1260" fg:w="1"/><text x="98.3808%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.2087%" y="421" width="0.0779%" height="15" fill="rgb(226,47,5)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2087%" y="405" width="0.0779%" height="15" fill="rgb(234,111,33)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.2087%" y="389" width="0.0779%" height="15" fill="rgb(251,14,10)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2087%" y="373" width="0.0779%" height="15" fill="rgb(232,43,0)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2087%" y="357" width="0.0779%" height="15" fill="rgb(222,68,43)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.2087%" y="341" width="0.0779%" height="15" fill="rgb(217,24,23)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2087%" y="325" width="0.0779%" height="15" fill="rgb(229,209,14)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2087%" y="309" width="0.0779%" height="15" fill="rgb(250,149,48)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2087%" y="293" width="0.0779%" height="15" fill="rgb(210,120,37)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2087%" y="277" width="0.0779%" height="15" fill="rgb(210,21,8)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2087%" y="261" width="0.0779%" height="15" fill="rgb(243,145,7)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.2087%" y="245" width="0.0779%" height="15" fill="rgb(238,178,32)" fg:x="1261" fg:w="1"/><text x="98.4587%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="98.2087%" y="485" width="0.1558%" height="15" fill="rgb(222,4,10)" fg:x="1261" fg:w="2"/><text x="98.4587%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="98.2087%" y="469" width="0.1558%" height="15" fill="rgb(239,7,37)" fg:x="1261" fg:w="2"/><text x="98.4587%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.2087%" y="453" width="0.1558%" height="15" fill="rgb(215,31,37)" fg:x="1261" fg:w="2"/><text x="98.4587%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.2087%" y="437" width="0.1558%" height="15" fill="rgb(224,83,33)" fg:x="1261" fg:w="2"/><text x="98.4587%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2866%" y="421" width="0.0779%" height="15" fill="rgb(239,55,3)" fg:x="1262" fg:w="1"/><text x="98.5366%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2866%" y="405" width="0.0779%" height="15" fill="rgb(247,92,11)" fg:x="1262" fg:w="1"/><text x="98.5366%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.2866%" y="389" width="0.0779%" height="15" fill="rgb(239,200,7)" fg:x="1262" fg:w="1"/><text x="98.5366%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2866%" y="373" width="0.0779%" height="15" fill="rgb(227,115,8)" fg:x="1262" fg:w="1"/><text x="98.5366%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2866%" y="357" width="0.0779%" height="15" fill="rgb(215,189,27)" fg:x="1262" fg:w="1"/><text x="98.5366%" y="367.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (5 samples, 0.39%)</title><rect x="98.0530%" y="613" width="0.3894%" height="15" fill="rgb(251,216,39)" fg:x="1259" fg:w="5"/><text x="98.3030%" y="623.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (4 samples, 0.31%)</title><rect x="98.1308%" y="597" width="0.3115%" height="15" fill="rgb(207,29,47)" fg:x="1260" fg:w="4"/><text x="98.3808%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.31%)</title><rect x="98.1308%" y="581" width="0.3115%" height="15" fill="rgb(210,71,34)" fg:x="1260" fg:w="4"/><text x="98.3808%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.31%)</title><rect x="98.1308%" y="565" width="0.3115%" height="15" fill="rgb(253,217,51)" fg:x="1260" fg:w="4"/><text x="98.3808%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.31%)</title><rect x="98.1308%" y="549" width="0.3115%" height="15" fill="rgb(222,117,46)" fg:x="1260" fg:w="4"/><text x="98.3808%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.31%)</title><rect x="98.1308%" y="533" width="0.3115%" height="15" fill="rgb(226,132,6)" fg:x="1260" fg:w="4"/><text x="98.3808%" y="543.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.31%)</title><rect x="98.1308%" y="517" width="0.3115%" height="15" fill="rgb(254,145,51)" fg:x="1260" fg:w="4"/><text x="98.3808%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.23%)</title><rect x="98.2087%" y="501" width="0.2336%" height="15" fill="rgb(231,199,27)" fg:x="1261" fg:w="3"/><text x="98.4587%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.3645%" y="485" width="0.0779%" height="15" fill="rgb(245,158,14)" fg:x="1263" fg:w="1"/><text x="98.6145%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3645%" y="469" width="0.0779%" height="15" fill="rgb(240,113,14)" fg:x="1263" fg:w="1"/><text x="98.6145%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3645%" y="453" width="0.0779%" height="15" fill="rgb(210,20,13)" fg:x="1263" fg:w="1"/><text x="98.6145%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.3645%" y="437" width="0.0779%" height="15" fill="rgb(241,144,13)" fg:x="1263" fg:w="1"/><text x="98.6145%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.3645%" y="421" width="0.0779%" height="15" fill="rgb(235,43,34)" fg:x="1263" fg:w="1"/><text x="98.6145%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.4424%" y="549" width="0.0779%" height="15" fill="rgb(208,36,20)" fg:x="1264" fg:w="1"/><text x="98.6924%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="98.4424%" y="533" width="0.0779%" height="15" fill="rgb(239,204,10)" fg:x="1264" fg:w="1"/><text x="98.6924%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.4424%" y="517" width="0.0779%" height="15" fill="rgb(217,84,43)" fg:x="1264" fg:w="1"/><text x="98.6924%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5202%" y="549" width="0.0779%" height="15" fill="rgb(241,170,50)" fg:x="1265" fg:w="1"/><text x="98.7702%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.5202%" y="533" width="0.0779%" height="15" fill="rgb(226,205,29)" fg:x="1265" fg:w="1"/><text x="98.7702%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="98.5202%" y="517" width="0.0779%" height="15" fill="rgb(233,113,1)" fg:x="1265" fg:w="1"/><text x="98.7702%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5202%" y="501" width="0.0779%" height="15" fill="rgb(253,98,13)" fg:x="1265" fg:w="1"/><text x="98.7702%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="98.5981%" y="485" width="0.0779%" height="15" fill="rgb(211,115,12)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5981%" y="469" width="0.0779%" height="15" fill="rgb(208,12,16)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="479.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="98.5981%" y="453" width="0.0779%" height="15" fill="rgb(237,193,54)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="98.5981%" y="437" width="0.0779%" height="15" fill="rgb(243,22,42)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="447.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.5981%" y="421" width="0.0779%" height="15" fill="rgb(233,151,36)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="98.5981%" y="405" width="0.0779%" height="15" fill="rgb(237,57,45)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="415.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.5981%" y="389" width="0.0779%" height="15" fill="rgb(221,88,17)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="98.5981%" y="373" width="0.0779%" height="15" fill="rgb(230,79,15)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="98.5981%" y="357" width="0.0779%" height="15" fill="rgb(213,57,13)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="98.5981%" y="341" width="0.0779%" height="15" fill="rgb(222,116,39)" fg:x="1266" fg:w="1"/><text x="98.8481%" y="351.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (2 samples, 0.16%)</title><rect x="98.5981%" y="501" width="0.1558%" height="15" fill="rgb(245,107,2)" fg:x="1266" fg:w="2"/><text x="98.8481%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="98.6760%" y="485" width="0.0779%" height="15" fill="rgb(238,1,10)" fg:x="1267" fg:w="1"/><text x="98.9260%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.6760%" y="469" width="0.0779%" height="15" fill="rgb(249,4,48)" fg:x="1267" fg:w="1"/><text x="98.9260%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6760%" y="453" width="0.0779%" height="15" fill="rgb(223,151,18)" fg:x="1267" fg:w="1"/><text x="98.9260%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6760%" y="437" width="0.0779%" height="15" fill="rgb(227,65,43)" fg:x="1267" fg:w="1"/><text x="98.9260%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="98.7539%" y="453" width="0.1558%" height="15" fill="rgb(218,40,45)" fg:x="1268" fg:w="2"/><text x="99.0039%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="98.8318%" y="437" width="0.0779%" height="15" fill="rgb(252,121,31)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8318%" y="421" width="0.0779%" height="15" fill="rgb(219,158,43)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="98.8318%" y="405" width="0.0779%" height="15" fill="rgb(231,162,42)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="98.8318%" y="389" width="0.0779%" height="15" fill="rgb(217,179,25)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.8318%" y="373" width="0.0779%" height="15" fill="rgb(206,212,31)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="98.8318%" y="357" width="0.0779%" height="15" fill="rgb(235,144,12)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="98.8318%" y="341" width="0.0779%" height="15" fill="rgb(213,51,10)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="98.8318%" y="325" width="0.0779%" height="15" fill="rgb(231,145,14)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8318%" y="309" width="0.0779%" height="15" fill="rgb(235,15,28)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8318%" y="293" width="0.0779%" height="15" fill="rgb(237,206,10)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="303.50"></text></g><g><title>&lt;kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="98.8318%" y="277" width="0.0779%" height="15" fill="rgb(236,227,27)" fg:x="1269" fg:w="1"/><text x="99.0818%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="98.5981%" y="533" width="0.3894%" height="15" fill="rgb(246,83,35)" fg:x="1266" fg:w="5"/><text x="98.8481%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.39%)</title><rect x="98.5981%" y="517" width="0.3894%" height="15" fill="rgb(220,136,24)" fg:x="1266" fg:w="5"/><text x="98.8481%" y="527.50"></text></g><g><title>plugins_core::tools::get_contained_keys (3 samples, 0.23%)</title><rect x="98.7539%" y="501" width="0.2336%" height="15" fill="rgb(217,3,25)" fg:x="1268" fg:w="3"/><text x="99.0039%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.23%)</title><rect x="98.7539%" y="485" width="0.2336%" height="15" fill="rgb(239,24,14)" fg:x="1268" fg:w="3"/><text x="99.0039%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.23%)</title><rect x="98.7539%" y="469" width="0.2336%" height="15" fill="rgb(244,16,53)" fg:x="1268" fg:w="3"/><text x="99.0039%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9097%" y="453" width="0.0779%" height="15" fill="rgb(208,175,44)" fg:x="1270" fg:w="1"/><text x="99.1597%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9097%" y="437" width="0.0779%" height="15" fill="rgb(252,18,48)" fg:x="1270" fg:w="1"/><text x="99.1597%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.9097%" y="421" width="0.0779%" height="15" fill="rgb(234,199,32)" fg:x="1270" fg:w="1"/><text x="99.1597%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9097%" y="405" width="0.0779%" height="15" fill="rgb(225,77,54)" fg:x="1270" fg:w="1"/><text x="99.1597%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.9097%" y="389" width="0.0779%" height="15" fill="rgb(225,42,25)" fg:x="1270" fg:w="1"/><text x="99.1597%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9875%" y="485" width="0.0779%" height="15" fill="rgb(242,227,46)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.9875%" y="469" width="0.0779%" height="15" fill="rgb(246,197,35)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.9875%" y="453" width="0.0779%" height="15" fill="rgb(215,159,26)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.9875%" y="437" width="0.0779%" height="15" fill="rgb(212,194,50)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.9875%" y="421" width="0.0779%" height="15" fill="rgb(246,132,1)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9875%" y="405" width="0.0779%" height="15" fill="rgb(217,71,7)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.9875%" y="389" width="0.0779%" height="15" fill="rgb(252,59,32)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.9875%" y="373" width="0.0779%" height="15" fill="rgb(253,204,25)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.9875%" y="357" width="0.0779%" height="15" fill="rgb(232,21,16)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.9875%" y="341" width="0.0779%" height="15" fill="rgb(248,90,29)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.9875%" y="325" width="0.0779%" height="15" fill="rgb(249,223,7)" fg:x="1271" fg:w="1"/><text x="99.2375%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.3769%" y="293" width="0.0779%" height="15" fill="rgb(231,119,42)" fg:x="1276" fg:w="1"/><text x="99.6269%" y="303.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.3769%" y="277" width="0.0779%" height="15" fill="rgb(215,41,35)" fg:x="1276" fg:w="1"/><text x="99.6269%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.3769%" y="261" width="0.0779%" height="15" fill="rgb(220,44,45)" fg:x="1276" fg:w="1"/><text x="99.6269%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.3769%" y="245" width="0.0779%" height="15" fill="rgb(253,197,36)" fg:x="1276" fg:w="1"/><text x="99.6269%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3769%" y="229" width="0.0779%" height="15" fill="rgb(245,225,54)" fg:x="1276" fg:w="1"/><text x="99.6269%" y="239.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="99.3769%" y="325" width="0.1558%" height="15" fill="rgb(239,94,37)" fg:x="1276" fg:w="2"/><text x="99.6269%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.3769%" y="309" width="0.1558%" height="15" fill="rgb(242,217,10)" fg:x="1276" fg:w="2"/><text x="99.6269%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.4548%" y="293" width="0.0779%" height="15" fill="rgb(250,193,7)" fg:x="1277" fg:w="1"/><text x="99.7048%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4548%" y="277" width="0.0779%" height="15" fill="rgb(230,104,19)" fg:x="1277" fg:w="1"/><text x="99.7048%" y="287.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.47%)</title><rect x="99.1433%" y="469" width="0.4673%" height="15" fill="rgb(230,181,4)" fg:x="1273" fg:w="6"/><text x="99.3933%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="99.1433%" y="453" width="0.4673%" height="15" fill="rgb(216,219,49)" fg:x="1273" fg:w="6"/><text x="99.3933%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.47%)</title><rect x="99.1433%" y="437" width="0.4673%" height="15" fill="rgb(254,144,0)" fg:x="1273" fg:w="6"/><text x="99.3933%" y="447.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.47%)</title><rect x="99.1433%" y="421" width="0.4673%" height="15" fill="rgb(205,209,38)" fg:x="1273" fg:w="6"/><text x="99.3933%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="99.2212%" y="405" width="0.3894%" height="15" fill="rgb(240,21,42)" fg:x="1274" fg:w="5"/><text x="99.4712%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.39%)</title><rect x="99.2212%" y="389" width="0.3894%" height="15" fill="rgb(241,132,3)" fg:x="1274" fg:w="5"/><text x="99.4712%" y="399.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.23%)</title><rect x="99.3769%" y="373" width="0.2336%" height="15" fill="rgb(225,14,2)" fg:x="1276" fg:w="3"/><text x="99.6269%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="99.3769%" y="357" width="0.2336%" height="15" fill="rgb(210,141,35)" fg:x="1276" fg:w="3"/><text x="99.6269%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.23%)</title><rect x="99.3769%" y="341" width="0.2336%" height="15" fill="rgb(251,14,44)" fg:x="1276" fg:w="3"/><text x="99.6269%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5327%" y="325" width="0.0779%" height="15" fill="rgb(247,48,18)" fg:x="1278" fg:w="1"/><text x="99.7827%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5327%" y="309" width="0.0779%" height="15" fill="rgb(225,0,40)" fg:x="1278" fg:w="1"/><text x="99.7827%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6106%" y="421" width="0.0779%" height="15" fill="rgb(221,31,33)" fg:x="1279" fg:w="1"/><text x="99.8606%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.6885%" y="389" width="0.0779%" height="15" fill="rgb(237,42,40)" fg:x="1280" fg:w="1"/><text x="99.9385%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6885%" y="373" width="0.0779%" height="15" fill="rgb(233,51,29)" fg:x="1280" fg:w="1"/><text x="99.9385%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6885%" y="357" width="0.0779%" height="15" fill="rgb(226,58,20)" fg:x="1280" fg:w="1"/><text x="99.9385%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6885%" y="341" width="0.0779%" height="15" fill="rgb(208,98,7)" fg:x="1280" fg:w="1"/><text x="99.9385%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.86%)</title><rect x="98.9875%" y="517" width="0.8567%" height="15" fill="rgb(228,143,44)" fg:x="1271" fg:w="11"/><text x="99.2375%" y="527.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (11 samples, 0.86%)</title><rect x="98.9875%" y="501" width="0.8567%" height="15" fill="rgb(246,55,38)" fg:x="1271" fg:w="11"/><text x="99.2375%" y="511.50"></text></g><g><title>&lt;plugins_rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (10 samples, 0.78%)</title><rect x="99.0654%" y="485" width="0.7788%" height="15" fill="rgb(247,87,16)" fg:x="1272" fg:w="10"/><text x="99.3154%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (3 samples, 0.23%)</title><rect x="99.6106%" y="469" width="0.2336%" height="15" fill="rgb(234,129,42)" fg:x="1279" fg:w="3"/><text x="99.8606%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.23%)</title><rect x="99.6106%" y="453" width="0.2336%" height="15" fill="rgb(220,82,16)" fg:x="1279" fg:w="3"/><text x="99.8606%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="99.6106%" y="437" width="0.2336%" height="15" fill="rgb(211,88,4)" fg:x="1279" fg:w="3"/><text x="99.8606%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.6885%" y="421" width="0.1558%" height="15" fill="rgb(248,151,21)" fg:x="1280" fg:w="2"/><text x="99.9385%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="99.6885%" y="405" width="0.1558%" height="15" fill="rgb(238,163,6)" fg:x="1280" fg:w="2"/><text x="99.9385%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="99.7664%" y="389" width="0.0779%" height="15" fill="rgb(209,183,11)" fg:x="1281" fg:w="1"/><text x="100.0164%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7664%" y="373" width="0.0779%" height="15" fill="rgb(219,37,20)" fg:x="1281" fg:w="1"/><text x="100.0164%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.32%)</title><rect x="98.5981%" y="549" width="1.3240%" height="15" fill="rgb(210,158,4)" fg:x="1266" fg:w="17"/><text x="98.8481%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (12 samples, 0.93%)</title><rect x="98.9875%" y="533" width="0.9346%" height="15" fill="rgb(221,167,53)" fg:x="1271" fg:w="12"/><text x="99.2375%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.8442%" y="517" width="0.0779%" height="15" fill="rgb(237,151,45)" fg:x="1282" fg:w="1"/><text x="100.0942%" y="527.50"></text></g><g><title>all (1,284 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(231,39,3)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-255e00ed (1,284 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(212,167,28)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="991.50">simple-255e00ed</text></g><g><title>_start (1,284 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(232,178,8)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,284 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(225,151,20)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,284 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(238,3,37)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,284 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(251,147,42)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,284 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(208,173,10)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,284 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(246,225,4)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,284 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(248,102,6)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,284 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(232,6,21)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,284 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(221,179,22)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,284 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(252,50,20)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,284 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(222,56,38)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,284 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(206,193,29)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,284 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(239,192,45)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,284 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(254,18,36)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,284 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(221,127,11)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,284 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(234,146,35)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,284 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(254,201,37)" fg:x="0" fg:w="1284"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (321 samples, 25.00%)</title><rect x="75.0000%" y="693" width="25.0000%" height="15" fill="rgb(211,202,23)" fg:x="963" fg:w="321"/><text x="75.2500%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (321 samples, 25.00%)</title><rect x="75.0000%" y="677" width="25.0000%" height="15" fill="rgb(237,91,2)" fg:x="963" fg:w="321"/><text x="75.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (321 samples, 25.00%)</title><rect x="75.0000%" y="661" width="25.0000%" height="15" fill="rgb(226,228,36)" fg:x="963" fg:w="321"/><text x="75.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (274 samples, 21.34%)</title><rect x="78.6604%" y="645" width="21.3396%" height="15" fill="rgb(213,63,50)" fg:x="1010" fg:w="274"/><text x="78.9104%" y="655.50">engine::session::Session::evaluate..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (274 samples, 21.34%)</title><rect x="78.6604%" y="629" width="21.3396%" height="15" fill="rgb(235,194,19)" fg:x="1010" fg:w="274"/><text x="78.9104%" y="639.50">engine::perform::StandardPerformer..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (20 samples, 1.56%)</title><rect x="98.4424%" y="613" width="1.5576%" height="15" fill="rgb(207,204,18)" fg:x="1264" fg:w="20"/><text x="98.6924%" y="623.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (20 samples, 1.56%)</title><rect x="98.4424%" y="597" width="1.5576%" height="15" fill="rgb(248,8,7)" fg:x="1264" fg:w="20"/><text x="98.6924%" y="607.50"></text></g><g><title>plugins_rpc::querying::have_surroundings (20 samples, 1.56%)</title><rect x="98.4424%" y="581" width="1.5576%" height="15" fill="rgb(223,145,47)" fg:x="1264" fg:w="20"/><text x="98.6924%" y="591.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (20 samples, 1.56%)</title><rect x="98.4424%" y="565" width="1.5576%" height="15" fill="rgb(228,84,11)" fg:x="1264" fg:w="20"/><text x="98.6924%" y="575.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="99.9221%" y="549" width="0.0779%" height="15" fill="rgb(218,76,45)" fg:x="1283" fg:w="1"/><text x="100.1721%" y="559.50"></text></g></svg></svg>