<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1238" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1221.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1221.00"> </text><svg id="frames" x="10" width="1180" total_samples="1251"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="789" width="0.0799%" height="15" fill="rgb(251,14,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0799%" y="709" width="0.0799%" height="15" fill="rgb(249,193,11)" fg:x="1" fg:w="1"/><text x="0.3299%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.1599%" y="709" width="0.0799%" height="15" fill="rgb(220,172,37)" fg:x="2" fg:w="1"/><text x="0.4099%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2398%" y="693" width="0.0799%" height="15" fill="rgb(231,229,43)" fg:x="3" fg:w="1"/><text x="0.4898%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (5 samples, 0.40%)</title><rect x="0.0000%" y="821" width="0.3997%" height="15" fill="rgb(250,161,5)" fg:x="0" fg:w="5"/><text x="0.2500%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0000%" y="805" width="0.3997%" height="15" fill="rgb(218,225,18)" fg:x="0" fg:w="5"/><text x="0.2500%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="0.0799%" y="789" width="0.3197%" height="15" fill="rgb(245,45,42)" fg:x="1" fg:w="4"/><text x="0.3299%" y="799.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0799%" y="773" width="0.3197%" height="15" fill="rgb(211,115,1)" fg:x="1" fg:w="4"/><text x="0.3299%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0799%" y="757" width="0.3197%" height="15" fill="rgb(248,133,52)" fg:x="1" fg:w="4"/><text x="0.3299%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.0799%" y="741" width="0.3197%" height="15" fill="rgb(238,100,21)" fg:x="1" fg:w="4"/><text x="0.3299%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="0.0799%" y="725" width="0.3197%" height="15" fill="rgb(247,144,11)" fg:x="1" fg:w="4"/><text x="0.3299%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.2398%" y="709" width="0.1599%" height="15" fill="rgb(206,164,16)" fg:x="3" fg:w="2"/><text x="0.4898%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3197%" y="693" width="0.0799%" height="15" fill="rgb(222,34,3)" fg:x="4" fg:w="1"/><text x="0.5697%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3197%" y="677" width="0.0799%" height="15" fill="rgb(248,82,4)" fg:x="4" fg:w="1"/><text x="0.5697%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3197%" y="661" width="0.0799%" height="15" fill="rgb(228,81,46)" fg:x="4" fg:w="1"/><text x="0.5697%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0000%" y="837" width="0.4796%" height="15" fill="rgb(227,67,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::perform::StandardPerformer&gt;&gt; (1 samples, 0.08%)</title><rect x="0.3997%" y="821" width="0.0799%" height="15" fill="rgb(215,93,53)" fg:x="5" fg:w="1"/><text x="0.6497%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.3997%" y="805" width="0.0799%" height="15" fill="rgb(248,194,39)" fg:x="5" fg:w="1"/><text x="0.6497%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::scopes::Property)&gt; (1 samples, 0.08%)</title><rect x="0.5596%" y="709" width="0.0799%" height="15" fill="rgb(215,5,19)" fg:x="7" fg:w="1"/><text x="0.8096%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5596%" y="693" width="0.0799%" height="15" fill="rgb(226,215,51)" fg:x="7" fg:w="1"/><text x="0.8096%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="0.5596%" y="757" width="0.1599%" height="15" fill="rgb(225,56,26)" fg:x="7" fg:w="2"/><text x="0.8096%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="0.5596%" y="741" width="0.1599%" height="15" fill="rgb(222,75,29)" fg:x="7" fg:w="2"/><text x="0.8096%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="0.5596%" y="725" width="0.1599%" height="15" fill="rgb(236,139,6)" fg:x="7" fg:w="2"/><text x="0.8096%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="0.6395%" y="709" width="0.0799%" height="15" fill="rgb(223,137,36)" fg:x="8" fg:w="1"/><text x="0.8895%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="0.6395%" y="693" width="0.0799%" height="15" fill="rgb(226,99,2)" fg:x="8" fg:w="1"/><text x="0.8895%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.6395%" y="677" width="0.0799%" height="15" fill="rgb(206,133,23)" fg:x="8" fg:w="1"/><text x="0.8895%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6395%" y="661" width="0.0799%" height="15" fill="rgb(243,173,15)" fg:x="8" fg:w="1"/><text x="0.8895%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6395%" y="645" width="0.0799%" height="15" fill="rgb(228,69,28)" fg:x="8" fg:w="1"/><text x="0.8895%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6395%" y="629" width="0.0799%" height="15" fill="rgb(212,51,22)" fg:x="8" fg:w="1"/><text x="0.8895%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6395%" y="613" width="0.0799%" height="15" fill="rgb(227,113,0)" fg:x="8" fg:w="1"/><text x="0.8895%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.6395%" y="597" width="0.0799%" height="15" fill="rgb(252,84,27)" fg:x="8" fg:w="1"/><text x="0.8895%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.6395%" y="581" width="0.0799%" height="15" fill="rgb(223,145,39)" fg:x="8" fg:w="1"/><text x="0.8895%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="0.6395%" y="565" width="0.0799%" height="15" fill="rgb(239,219,30)" fg:x="8" fg:w="1"/><text x="0.8895%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="0.6395%" y="549" width="0.0799%" height="15" fill="rgb(224,196,39)" fg:x="8" fg:w="1"/><text x="0.8895%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="0.6395%" y="533" width="0.0799%" height="15" fill="rgb(205,35,43)" fg:x="8" fg:w="1"/><text x="0.8895%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="0.6395%" y="517" width="0.0799%" height="15" fill="rgb(228,201,21)" fg:x="8" fg:w="1"/><text x="0.8895%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="0.6395%" y="501" width="0.0799%" height="15" fill="rgb(237,118,16)" fg:x="8" fg:w="1"/><text x="0.8895%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.7194%" y="757" width="0.0799%" height="15" fill="rgb(241,17,19)" fg:x="9" fg:w="1"/><text x="0.9694%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.7994%" y="677" width="0.0799%" height="15" fill="rgb(214,10,25)" fg:x="10" fg:w="1"/><text x="1.0494%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7994%" y="661" width="0.0799%" height="15" fill="rgb(238,37,29)" fg:x="10" fg:w="1"/><text x="1.0494%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7994%" y="645" width="0.0799%" height="15" fill="rgb(253,83,25)" fg:x="10" fg:w="1"/><text x="1.0494%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7994%" y="629" width="0.0799%" height="15" fill="rgb(234,192,12)" fg:x="10" fg:w="1"/><text x="1.0494%" y="639.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7994%" y="613" width="0.0799%" height="15" fill="rgb(241,216,45)" fg:x="10" fg:w="1"/><text x="1.0494%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.7994%" y="597" width="0.0799%" height="15" fill="rgb(242,22,33)" fg:x="10" fg:w="1"/><text x="1.0494%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7994%" y="581" width="0.0799%" height="15" fill="rgb(231,105,49)" fg:x="10" fg:w="1"/><text x="1.0494%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7994%" y="565" width="0.0799%" height="15" fill="rgb(218,204,15)" fg:x="10" fg:w="1"/><text x="1.0494%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.7994%" y="549" width="0.0799%" height="15" fill="rgb(235,138,41)" fg:x="10" fg:w="1"/><text x="1.0494%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7994%" y="533" width="0.0799%" height="15" fill="rgb(246,0,9)" fg:x="10" fg:w="1"/><text x="1.0494%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7994%" y="517" width="0.0799%" height="15" fill="rgb(210,74,4)" fg:x="10" fg:w="1"/><text x="1.0494%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="0.7994%" y="501" width="0.0799%" height="15" fill="rgb(250,60,41)" fg:x="10" fg:w="1"/><text x="1.0494%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7994%" y="485" width="0.0799%" height="15" fill="rgb(220,115,12)" fg:x="10" fg:w="1"/><text x="1.0494%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7994%" y="469" width="0.0799%" height="15" fill="rgb(237,100,13)" fg:x="10" fg:w="1"/><text x="1.0494%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="0.7994%" y="741" width="0.1599%" height="15" fill="rgb(213,55,26)" fg:x="10" fg:w="2"/><text x="1.0494%" y="751.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="0.7994%" y="725" width="0.1599%" height="15" fill="rgb(216,17,4)" fg:x="10" fg:w="2"/><text x="1.0494%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.7994%" y="709" width="0.1599%" height="15" fill="rgb(220,153,47)" fg:x="10" fg:w="2"/><text x="1.0494%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.7994%" y="693" width="0.1599%" height="15" fill="rgb(215,131,9)" fg:x="10" fg:w="2"/><text x="1.0494%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.8793%" y="677" width="0.0799%" height="15" fill="rgb(233,46,42)" fg:x="11" fg:w="1"/><text x="1.1293%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.8793%" y="661" width="0.0799%" height="15" fill="rgb(226,86,7)" fg:x="11" fg:w="1"/><text x="1.1293%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8793%" y="645" width="0.0799%" height="15" fill="rgb(239,226,21)" fg:x="11" fg:w="1"/><text x="1.1293%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8793%" y="629" width="0.0799%" height="15" fill="rgb(244,137,22)" fg:x="11" fg:w="1"/><text x="1.1293%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (7 samples, 0.56%)</title><rect x="0.4796%" y="805" width="0.5596%" height="15" fill="rgb(211,139,35)" fg:x="6" fg:w="7"/><text x="0.7296%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="0.4796%" y="789" width="0.5596%" height="15" fill="rgb(214,62,50)" fg:x="6" fg:w="7"/><text x="0.7296%" y="799.50"></text></g><g><title>engine::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="0.4796%" y="773" width="0.5596%" height="15" fill="rgb(212,113,44)" fg:x="6" fg:w="7"/><text x="0.7296%" y="783.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="0.7994%" y="757" width="0.2398%" height="15" fill="rgb(226,150,43)" fg:x="10" fg:w="3"/><text x="1.0494%" y="767.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="0.9592%" y="741" width="0.0799%" height="15" fill="rgb(250,71,37)" fg:x="12" fg:w="1"/><text x="1.2092%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9592%" y="725" width="0.0799%" height="15" fill="rgb(219,76,19)" fg:x="12" fg:w="1"/><text x="1.2092%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9592%" y="709" width="0.0799%" height="15" fill="rgb(250,39,11)" fg:x="12" fg:w="1"/><text x="1.2092%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9592%" y="693" width="0.0799%" height="15" fill="rgb(230,64,31)" fg:x="12" fg:w="1"/><text x="1.2092%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9592%" y="677" width="0.0799%" height="15" fill="rgb(208,222,23)" fg:x="12" fg:w="1"/><text x="1.2092%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9592%" y="661" width="0.0799%" height="15" fill="rgb(227,125,18)" fg:x="12" fg:w="1"/><text x="1.2092%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9592%" y="645" width="0.0799%" height="15" fill="rgb(234,210,9)" fg:x="12" fg:w="1"/><text x="1.2092%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.9592%" y="629" width="0.0799%" height="15" fill="rgb(217,127,24)" fg:x="12" fg:w="1"/><text x="1.2092%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.9592%" y="613" width="0.0799%" height="15" fill="rgb(239,141,48)" fg:x="12" fg:w="1"/><text x="1.2092%" y="623.50"></text></g><g><title>dlerror (3 samples, 0.24%)</title><rect x="1.0392%" y="757" width="0.2398%" height="15" fill="rgb(227,109,8)" fg:x="13" fg:w="3"/><text x="1.2892%" y="767.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="1.1191%" y="741" width="0.1599%" height="15" fill="rgb(235,184,23)" fg:x="14" fg:w="2"/><text x="1.3691%" y="751.50"></text></g><g><title>libloading::os::unix::Library::open (7 samples, 0.56%)</title><rect x="1.0392%" y="773" width="0.5596%" height="15" fill="rgb(227,226,48)" fg:x="13" fg:w="7"/><text x="1.2892%" y="783.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="1.2790%" y="757" width="0.3197%" height="15" fill="rgb(206,150,11)" fg:x="16" fg:w="4"/><text x="1.5290%" y="767.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="1.3589%" y="741" width="0.2398%" height="15" fill="rgb(254,2,33)" fg:x="17" fg:w="3"/><text x="1.6089%" y="751.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.3589%" y="725" width="0.2398%" height="15" fill="rgb(243,160,20)" fg:x="17" fg:w="3"/><text x="1.6089%" y="735.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.3589%" y="709" width="0.2398%" height="15" fill="rgb(218,208,30)" fg:x="17" fg:w="3"/><text x="1.6089%" y="719.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.3589%" y="693" width="0.2398%" height="15" fill="rgb(224,120,49)" fg:x="17" fg:w="3"/><text x="1.6089%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.64%)</title><rect x="1.0392%" y="805" width="0.6395%" height="15" fill="rgb(246,12,2)" fg:x="13" fg:w="8"/><text x="1.2892%" y="815.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.64%)</title><rect x="1.0392%" y="789" width="0.6395%" height="15" fill="rgb(236,117,3)" fg:x="13" fg:w="8"/><text x="1.2892%" y="799.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="1.5987%" y="773" width="0.0799%" height="15" fill="rgb(216,128,52)" fg:x="20" fg:w="1"/><text x="1.8487%" y="783.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="1.5987%" y="757" width="0.0799%" height="15" fill="rgb(246,145,19)" fg:x="20" fg:w="1"/><text x="1.8487%" y="767.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.5987%" y="741" width="0.0799%" height="15" fill="rgb(222,11,46)" fg:x="20" fg:w="1"/><text x="1.8487%" y="751.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="1.6787%" y="805" width="0.0799%" height="15" fill="rgb(245,82,36)" fg:x="21" fg:w="1"/><text x="1.9287%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.6787%" y="789" width="0.0799%" height="15" fill="rgb(250,73,51)" fg:x="21" fg:w="1"/><text x="1.9287%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.6787%" y="773" width="0.0799%" height="15" fill="rgb(221,189,23)" fg:x="21" fg:w="1"/><text x="1.9287%" y="783.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (17 samples, 1.36%)</title><rect x="0.4796%" y="837" width="1.3589%" height="15" fill="rgb(210,33,7)" fg:x="6" fg:w="17"/><text x="0.7296%" y="847.50"></text></g><g><title>engine::session::Session::new (17 samples, 1.36%)</title><rect x="0.4796%" y="821" width="1.3589%" height="15" fill="rgb(210,107,22)" fg:x="6" fg:w="17"/><text x="0.7296%" y="831.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.7586%" y="805" width="0.0799%" height="15" fill="rgb(222,116,37)" fg:x="22" fg:w="1"/><text x="2.0086%" y="815.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.7586%" y="789" width="0.0799%" height="15" fill="rgb(254,17,48)" fg:x="22" fg:w="1"/><text x="2.0086%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.8385%" y="821" width="0.0799%" height="15" fill="rgb(224,36,32)" fg:x="23" fg:w="1"/><text x="2.0885%" y="831.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8385%" y="805" width="0.0799%" height="15" fill="rgb(232,90,46)" fg:x="23" fg:w="1"/><text x="2.0885%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.9185%" y="821" width="0.0799%" height="15" fill="rgb(241,66,40)" fg:x="24" fg:w="1"/><text x="2.1685%" y="831.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9185%" y="805" width="0.0799%" height="15" fill="rgb(249,184,29)" fg:x="24" fg:w="1"/><text x="2.1685%" y="815.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.9984%" y="789" width="0.0799%" height="15" fill="rgb(231,181,1)" fg:x="25" fg:w="1"/><text x="2.2484%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.9984%" y="773" width="0.0799%" height="15" fill="rgb(224,94,2)" fg:x="25" fg:w="1"/><text x="2.2484%" y="783.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="2.0783%" y="757" width="0.0799%" height="15" fill="rgb(229,170,15)" fg:x="26" fg:w="1"/><text x="2.3283%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="2.0783%" y="773" width="0.1599%" height="15" fill="rgb(240,127,35)" fg:x="26" fg:w="2"/><text x="2.3283%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1583%" y="757" width="0.0799%" height="15" fill="rgb(248,196,34)" fg:x="27" fg:w="1"/><text x="2.4083%" y="767.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="2.0783%" y="789" width="0.2398%" height="15" fill="rgb(236,137,7)" fg:x="26" fg:w="3"/><text x="2.3283%" y="799.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2382%" y="773" width="0.0799%" height="15" fill="rgb(235,127,16)" fg:x="28" fg:w="1"/><text x="2.4882%" y="783.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="2.3181%" y="725" width="0.3997%" height="15" fill="rgb(250,192,54)" fg:x="29" fg:w="5"/><text x="2.5681%" y="735.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="2.3181%" y="709" width="0.3997%" height="15" fill="rgb(218,98,20)" fg:x="29" fg:w="5"/><text x="2.5681%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.40%)</title><rect x="2.3181%" y="693" width="0.3997%" height="15" fill="rgb(230,176,47)" fg:x="29" fg:w="5"/><text x="2.5681%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.40%)</title><rect x="2.3181%" y="677" width="0.3997%" height="15" fill="rgb(244,2,33)" fg:x="29" fg:w="5"/><text x="2.5681%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.5580%" y="661" width="0.1599%" height="15" fill="rgb(231,100,17)" fg:x="32" fg:w="2"/><text x="2.8080%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.5580%" y="645" width="0.1599%" height="15" fill="rgb(245,23,12)" fg:x="32" fg:w="2"/><text x="2.8080%" y="655.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="2.5580%" y="629" width="0.1599%" height="15" fill="rgb(249,55,22)" fg:x="32" fg:w="2"/><text x="2.8080%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.7978%" y="709" width="0.0799%" height="15" fill="rgb(207,134,9)" fg:x="35" fg:w="1"/><text x="3.0478%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7978%" y="693" width="0.0799%" height="15" fill="rgb(218,134,0)" fg:x="35" fg:w="1"/><text x="3.0478%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7978%" y="677" width="0.0799%" height="15" fill="rgb(213,212,33)" fg:x="35" fg:w="1"/><text x="3.0478%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.7978%" y="661" width="0.0799%" height="15" fill="rgb(252,106,18)" fg:x="35" fg:w="1"/><text x="3.0478%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.7978%" y="645" width="0.0799%" height="15" fill="rgb(208,126,42)" fg:x="35" fg:w="1"/><text x="3.0478%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.8777%" y="677" width="0.0799%" height="15" fill="rgb(246,175,29)" fg:x="36" fg:w="1"/><text x="3.1277%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.9576%" y="661" width="0.0799%" height="15" fill="rgb(215,13,50)" fg:x="37" fg:w="1"/><text x="3.2076%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.9576%" y="645" width="0.0799%" height="15" fill="rgb(216,172,15)" fg:x="37" fg:w="1"/><text x="3.2076%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.9576%" y="677" width="0.1599%" height="15" fill="rgb(212,103,13)" fg:x="37" fg:w="2"/><text x="3.2076%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0376%" y="661" width="0.0799%" height="15" fill="rgb(231,171,36)" fg:x="38" fg:w="1"/><text x="3.2876%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.0376%" y="645" width="0.0799%" height="15" fill="rgb(250,123,20)" fg:x="38" fg:w="1"/><text x="3.2876%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.8777%" y="693" width="0.3197%" height="15" fill="rgb(212,53,50)" fg:x="36" fg:w="4"/><text x="3.1277%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.1175%" y="677" width="0.0799%" height="15" fill="rgb(243,54,12)" fg:x="39" fg:w="1"/><text x="3.3675%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.1175%" y="661" width="0.0799%" height="15" fill="rgb(234,101,34)" fg:x="39" fg:w="1"/><text x="3.3675%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="2.7178%" y="725" width="0.5596%" height="15" fill="rgb(254,67,22)" fg:x="34" fg:w="7"/><text x="2.9678%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="2.8777%" y="709" width="0.3997%" height="15" fill="rgb(250,35,47)" fg:x="36" fg:w="5"/><text x="3.1277%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.1974%" y="693" width="0.0799%" height="15" fill="rgb(226,126,38)" fg:x="40" fg:w="1"/><text x="3.4474%" y="703.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.12%)</title><rect x="2.3181%" y="757" width="1.1191%" height="15" fill="rgb(216,138,53)" fg:x="29" fg:w="14"/><text x="2.5681%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="2.3181%" y="741" width="1.1191%" height="15" fill="rgb(246,199,43)" fg:x="29" fg:w="14"/><text x="2.5681%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.2774%" y="725" width="0.1599%" height="15" fill="rgb(232,125,11)" fg:x="41" fg:w="2"/><text x="3.5274%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.3573%" y="709" width="0.0799%" height="15" fill="rgb(218,219,45)" fg:x="42" fg:w="1"/><text x="3.6073%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.3573%" y="693" width="0.0799%" height="15" fill="rgb(216,102,54)" fg:x="42" fg:w="1"/><text x="3.6073%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.3573%" y="677" width="0.0799%" height="15" fill="rgb(250,228,7)" fg:x="42" fg:w="1"/><text x="3.6073%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.3573%" y="661" width="0.0799%" height="15" fill="rgb(226,125,25)" fg:x="42" fg:w="1"/><text x="3.6073%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.3573%" y="645" width="0.0799%" height="15" fill="rgb(224,165,27)" fg:x="42" fg:w="1"/><text x="3.6073%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="3.4373%" y="725" width="0.1599%" height="15" fill="rgb(233,86,3)" fg:x="43" fg:w="2"/><text x="3.6873%" y="735.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="3.5971%" y="709" width="0.0799%" height="15" fill="rgb(228,116,20)" fg:x="45" fg:w="1"/><text x="3.8471%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.5971%" y="693" width="0.0799%" height="15" fill="rgb(209,192,17)" fg:x="45" fg:w="1"/><text x="3.8471%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="3.4373%" y="757" width="0.3197%" height="15" fill="rgb(224,88,34)" fg:x="43" fg:w="4"/><text x="3.6873%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="3.4373%" y="741" width="0.3197%" height="15" fill="rgb(233,38,6)" fg:x="43" fg:w="4"/><text x="3.6873%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.5971%" y="725" width="0.1599%" height="15" fill="rgb(212,59,30)" fg:x="45" fg:w="2"/><text x="3.8471%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.6771%" y="709" width="0.0799%" height="15" fill="rgb(213,80,3)" fg:x="46" fg:w="1"/><text x="3.9271%" y="719.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.7570%" y="709" width="0.0799%" height="15" fill="rgb(251,178,7)" fg:x="47" fg:w="1"/><text x="4.0070%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.7570%" y="693" width="0.0799%" height="15" fill="rgb(213,154,26)" fg:x="47" fg:w="1"/><text x="4.0070%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.7570%" y="677" width="0.0799%" height="15" fill="rgb(238,165,49)" fg:x="47" fg:w="1"/><text x="4.0070%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="3.8369%" y="661" width="0.1599%" height="15" fill="rgb(248,91,46)" fg:x="48" fg:w="2"/><text x="4.0869%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="3.8369%" y="645" width="0.1599%" height="15" fill="rgb(244,21,52)" fg:x="48" fg:w="2"/><text x="4.0869%" y="655.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.8369%" y="629" width="0.1599%" height="15" fill="rgb(247,122,20)" fg:x="48" fg:w="2"/><text x="4.0869%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.2366%" y="629" width="0.0799%" height="15" fill="rgb(218,27,9)" fg:x="53" fg:w="1"/><text x="4.4866%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.2366%" y="613" width="0.0799%" height="15" fill="rgb(246,7,6)" fg:x="53" fg:w="1"/><text x="4.4866%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2366%" y="597" width="0.0799%" height="15" fill="rgb(227,135,54)" fg:x="53" fg:w="1"/><text x="4.4866%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.3965%" y="549" width="0.0799%" height="15" fill="rgb(247,14,11)" fg:x="55" fg:w="1"/><text x="4.6465%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="4.4764%" y="549" width="0.0799%" height="15" fill="rgb(206,149,34)" fg:x="56" fg:w="1"/><text x="4.7264%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="4.0767%" y="645" width="0.5596%" height="15" fill="rgb(227,228,4)" fg:x="51" fg:w="7"/><text x="4.3267%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="4.3165%" y="629" width="0.3197%" height="15" fill="rgb(238,218,28)" fg:x="54" fg:w="4"/><text x="4.5665%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="4.3165%" y="613" width="0.3197%" height="15" fill="rgb(252,86,40)" fg:x="54" fg:w="4"/><text x="4.5665%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="4.3165%" y="597" width="0.3197%" height="15" fill="rgb(251,225,11)" fg:x="54" fg:w="4"/><text x="4.5665%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="4.3965%" y="581" width="0.2398%" height="15" fill="rgb(206,46,49)" fg:x="55" fg:w="3"/><text x="4.6465%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="4.3965%" y="565" width="0.2398%" height="15" fill="rgb(245,128,24)" fg:x="55" fg:w="3"/><text x="4.6465%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5564%" y="549" width="0.0799%" height="15" fill="rgb(219,177,34)" fg:x="57" fg:w="1"/><text x="4.8064%" y="559.50"></text></g><g><title>engine::session::Session::flush (35 samples, 2.80%)</title><rect x="1.9984%" y="821" width="2.7978%" height="15" fill="rgb(218,60,48)" fg:x="25" fg:w="35"/><text x="2.2484%" y="831.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (35 samples, 2.80%)</title><rect x="1.9984%" y="805" width="2.7978%" height="15" fill="rgb(221,11,5)" fg:x="25" fg:w="35"/><text x="2.2484%" y="815.50">en..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (31 samples, 2.48%)</title><rect x="2.3181%" y="789" width="2.4780%" height="15" fill="rgb(220,148,13)" fg:x="29" fg:w="31"/><text x="2.5681%" y="799.50">en..</text></g><g><title>engine::session::SavesEntities::check_for_changes (31 samples, 2.48%)</title><rect x="2.3181%" y="773" width="2.4780%" height="15" fill="rgb(210,16,3)" fg:x="29" fg:w="31"/><text x="2.5681%" y="783.50">en..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.04%)</title><rect x="3.7570%" y="757" width="1.0392%" height="15" fill="rgb(236,80,2)" fg:x="47" fg:w="13"/><text x="4.0070%" y="767.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.04%)</title><rect x="3.7570%" y="741" width="1.0392%" height="15" fill="rgb(239,129,19)" fg:x="47" fg:w="13"/><text x="4.0070%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.04%)</title><rect x="3.7570%" y="725" width="1.0392%" height="15" fill="rgb(220,106,35)" fg:x="47" fg:w="13"/><text x="4.0070%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.96%)</title><rect x="3.8369%" y="709" width="0.9592%" height="15" fill="rgb(252,139,45)" fg:x="48" fg:w="12"/><text x="4.0869%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="3.8369%" y="693" width="0.9592%" height="15" fill="rgb(229,8,36)" fg:x="48" fg:w="12"/><text x="4.0869%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.96%)</title><rect x="3.8369%" y="677" width="0.9592%" height="15" fill="rgb(230,126,33)" fg:x="48" fg:w="12"/><text x="4.0869%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.80%)</title><rect x="3.9968%" y="661" width="0.7994%" height="15" fill="rgb(239,140,21)" fg:x="50" fg:w="10"/><text x="4.2468%" y="671.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.6363%" y="645" width="0.1599%" height="15" fill="rgb(254,104,9)" fg:x="58" fg:w="2"/><text x="4.8863%" y="655.50"></text></g><g><title>&lt;kernel::model::scopes::Properties as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.7962%" y="741" width="0.0799%" height="15" fill="rgb(239,52,14)" fg:x="60" fg:w="1"/><text x="5.0462%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="4.7962%" y="773" width="0.1599%" height="15" fill="rgb(208,227,44)" fg:x="60" fg:w="2"/><text x="5.0462%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="4.7962%" y="757" width="0.1599%" height="15" fill="rgb(246,18,19)" fg:x="60" fg:w="2"/><text x="5.0462%" y="767.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="4.8761%" y="741" width="0.0799%" height="15" fill="rgb(235,228,25)" fg:x="61" fg:w="1"/><text x="5.1261%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.8761%" y="725" width="0.0799%" height="15" fill="rgb(240,156,20)" fg:x="61" fg:w="1"/><text x="5.1261%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="4.7962%" y="805" width="0.2398%" height="15" fill="rgb(224,8,20)" fg:x="60" fg:w="3"/><text x="5.0462%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="4.7962%" y="789" width="0.2398%" height="15" fill="rgb(214,12,52)" fg:x="60" fg:w="3"/><text x="5.0462%" y="799.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.9560%" y="773" width="0.0799%" height="15" fill="rgb(211,220,47)" fg:x="62" fg:w="1"/><text x="5.2060%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.9560%" y="757" width="0.0799%" height="15" fill="rgb(250,173,5)" fg:x="62" fg:w="1"/><text x="5.2060%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.9560%" y="741" width="0.0799%" height="15" fill="rgb(250,125,52)" fg:x="62" fg:w="1"/><text x="5.2060%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.9560%" y="725" width="0.0799%" height="15" fill="rgb(209,133,18)" fg:x="62" fg:w="1"/><text x="5.2060%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.9560%" y="709" width="0.0799%" height="15" fill="rgb(216,173,22)" fg:x="62" fg:w="1"/><text x="5.2060%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.9560%" y="693" width="0.0799%" height="15" fill="rgb(205,3,22)" fg:x="62" fg:w="1"/><text x="5.2060%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="4.9560%" y="677" width="0.0799%" height="15" fill="rgb(248,22,20)" fg:x="62" fg:w="1"/><text x="5.2060%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.9560%" y="661" width="0.0799%" height="15" fill="rgb(233,6,29)" fg:x="62" fg:w="1"/><text x="5.2060%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="5.0360%" y="789" width="0.0799%" height="15" fill="rgb(240,22,54)" fg:x="63" fg:w="1"/><text x="5.2860%" y="799.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0360%" y="773" width="0.0799%" height="15" fill="rgb(231,133,32)" fg:x="63" fg:w="1"/><text x="5.2860%" y="783.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.0360%" y="757" width="0.0799%" height="15" fill="rgb(248,193,4)" fg:x="63" fg:w="1"/><text x="5.2860%" y="767.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.0360%" y="741" width="0.0799%" height="15" fill="rgb(211,178,46)" fg:x="63" fg:w="1"/><text x="5.2860%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="5.0360%" y="725" width="0.0799%" height="15" fill="rgb(224,5,42)" fg:x="63" fg:w="1"/><text x="5.2860%" y="735.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="4.7962%" y="821" width="0.3997%" height="15" fill="rgb(239,176,25)" fg:x="60" fg:w="5"/><text x="5.0462%" y="831.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="5.0360%" y="805" width="0.1599%" height="15" fill="rgb(245,187,50)" fg:x="63" fg:w="2"/><text x="5.2860%" y="815.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="5.1159%" y="789" width="0.0799%" height="15" fill="rgb(248,24,15)" fg:x="64" fg:w="1"/><text x="5.3659%" y="799.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.1159%" y="773" width="0.0799%" height="15" fill="rgb(205,166,13)" fg:x="64" fg:w="1"/><text x="5.3659%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.1159%" y="757" width="0.0799%" height="15" fill="rgb(208,114,23)" fg:x="64" fg:w="1"/><text x="5.3659%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.1159%" y="741" width="0.0799%" height="15" fill="rgb(239,127,18)" fg:x="64" fg:w="1"/><text x="5.3659%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.1159%" y="725" width="0.0799%" height="15" fill="rgb(219,154,28)" fg:x="64" fg:w="1"/><text x="5.3659%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.1159%" y="709" width="0.0799%" height="15" fill="rgb(225,157,23)" fg:x="64" fg:w="1"/><text x="5.3659%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.1159%" y="693" width="0.0799%" height="15" fill="rgb(219,8,6)" fg:x="64" fg:w="1"/><text x="5.3659%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.1159%" y="677" width="0.0799%" height="15" fill="rgb(212,47,6)" fg:x="64" fg:w="1"/><text x="5.3659%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.1159%" y="661" width="0.0799%" height="15" fill="rgb(224,190,4)" fg:x="64" fg:w="1"/><text x="5.3659%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.1159%" y="645" width="0.0799%" height="15" fill="rgb(239,183,29)" fg:x="64" fg:w="1"/><text x="5.3659%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.1159%" y="629" width="0.0799%" height="15" fill="rgb(213,57,7)" fg:x="64" fg:w="1"/><text x="5.3659%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.1159%" y="613" width="0.0799%" height="15" fill="rgb(216,148,1)" fg:x="64" fg:w="1"/><text x="5.3659%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.1159%" y="597" width="0.0799%" height="15" fill="rgb(236,182,29)" fg:x="64" fg:w="1"/><text x="5.3659%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.1159%" y="581" width="0.0799%" height="15" fill="rgb(244,120,48)" fg:x="64" fg:w="1"/><text x="5.3659%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1159%" y="565" width="0.0799%" height="15" fill="rgb(206,71,34)" fg:x="64" fg:w="1"/><text x="5.3659%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="5.1958%" y="789" width="0.2398%" height="15" fill="rgb(242,32,6)" fg:x="65" fg:w="3"/><text x="5.4458%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="5.2758%" y="773" width="0.1599%" height="15" fill="rgb(241,35,3)" fg:x="66" fg:w="2"/><text x="5.5258%" y="783.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="5.3557%" y="757" width="0.0799%" height="15" fill="rgb(222,62,19)" fg:x="67" fg:w="1"/><text x="5.6057%" y="767.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3557%" y="741" width="0.0799%" height="15" fill="rgb(223,110,41)" fg:x="67" fg:w="1"/><text x="5.6057%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3557%" y="725" width="0.0799%" height="15" fill="rgb(208,224,4)" fg:x="67" fg:w="1"/><text x="5.6057%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3557%" y="709" width="0.0799%" height="15" fill="rgb(241,137,19)" fg:x="67" fg:w="1"/><text x="5.6057%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.3557%" y="693" width="0.0799%" height="15" fill="rgb(244,24,17)" fg:x="67" fg:w="1"/><text x="5.6057%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.3557%" y="677" width="0.0799%" height="15" fill="rgb(245,178,49)" fg:x="67" fg:w="1"/><text x="5.6057%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.3557%" y="661" width="0.0799%" height="15" fill="rgb(219,160,38)" fg:x="67" fg:w="1"/><text x="5.6057%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="5.3557%" y="645" width="0.0799%" height="15" fill="rgb(228,137,14)" fg:x="67" fg:w="1"/><text x="5.6057%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.3557%" y="629" width="0.0799%" height="15" fill="rgb(237,134,11)" fg:x="67" fg:w="1"/><text x="5.6057%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (4 samples, 0.32%)</title><rect x="5.1958%" y="821" width="0.3197%" height="15" fill="rgb(211,126,44)" fg:x="65" fg:w="4"/><text x="5.4458%" y="831.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="5.1958%" y="805" width="0.3197%" height="15" fill="rgb(226,171,33)" fg:x="65" fg:w="4"/><text x="5.4458%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.4357%" y="789" width="0.0799%" height="15" fill="rgb(253,99,13)" fg:x="68" fg:w="1"/><text x="5.6857%" y="799.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.4357%" y="773" width="0.0799%" height="15" fill="rgb(244,48,7)" fg:x="68" fg:w="1"/><text x="5.6857%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.4357%" y="757" width="0.0799%" height="15" fill="rgb(244,217,54)" fg:x="68" fg:w="1"/><text x="5.6857%" y="767.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="5.4357%" y="741" width="0.0799%" height="15" fill="rgb(224,15,18)" fg:x="68" fg:w="1"/><text x="5.6857%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="5.4357%" y="725" width="0.0799%" height="15" fill="rgb(244,99,12)" fg:x="68" fg:w="1"/><text x="5.6857%" y="735.50"></text></g><g><title>&lt;kernel::model::scopes::Properties as kernel::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="5.4357%" y="709" width="0.0799%" height="15" fill="rgb(233,226,8)" fg:x="68" fg:w="1"/><text x="5.6857%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.4357%" y="693" width="0.0799%" height="15" fill="rgb(229,211,3)" fg:x="68" fg:w="1"/><text x="5.6857%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4357%" y="677" width="0.0799%" height="15" fill="rgb(216,140,21)" fg:x="68" fg:w="1"/><text x="5.6857%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.4357%" y="661" width="0.0799%" height="15" fill="rgb(234,122,30)" fg:x="68" fg:w="1"/><text x="5.6857%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4357%" y="645" width="0.0799%" height="15" fill="rgb(236,25,46)" fg:x="68" fg:w="1"/><text x="5.6857%" y="655.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="5.5156%" y="821" width="0.0799%" height="15" fill="rgb(217,52,54)" fg:x="69" fg:w="1"/><text x="5.7656%" y="831.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="5.5156%" y="805" width="0.0799%" height="15" fill="rgb(222,29,26)" fg:x="69" fg:w="1"/><text x="5.7656%" y="815.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="5.5156%" y="789" width="0.0799%" height="15" fill="rgb(216,177,29)" fg:x="69" fg:w="1"/><text x="5.7656%" y="799.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="5.5156%" y="773" width="0.0799%" height="15" fill="rgb(247,136,51)" fg:x="69" fg:w="1"/><text x="5.7656%" y="783.50"></text></g><g><title>&lt;kernel::model::scopes::Properties as kernel::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5156%" y="757" width="0.0799%" height="15" fill="rgb(231,47,47)" fg:x="69" fg:w="1"/><text x="5.7656%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5156%" y="741" width="0.0799%" height="15" fill="rgb(211,192,36)" fg:x="69" fg:w="1"/><text x="5.7656%" y="751.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="5.5156%" y="725" width="0.0799%" height="15" fill="rgb(229,156,32)" fg:x="69" fg:w="1"/><text x="5.7656%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5156%" y="709" width="0.0799%" height="15" fill="rgb(248,213,20)" fg:x="69" fg:w="1"/><text x="5.7656%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.5156%" y="693" width="0.0799%" height="15" fill="rgb(217,64,7)" fg:x="69" fg:w="1"/><text x="5.7656%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="5.5156%" y="677" width="0.0799%" height="15" fill="rgb(232,142,8)" fg:x="69" fg:w="1"/><text x="5.7656%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.5156%" y="661" width="0.0799%" height="15" fill="rgb(224,92,44)" fg:x="69" fg:w="1"/><text x="5.7656%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.5156%" y="645" width="0.0799%" height="15" fill="rgb(214,169,17)" fg:x="69" fg:w="1"/><text x="5.7656%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.5156%" y="629" width="0.0799%" height="15" fill="rgb(210,59,37)" fg:x="69" fg:w="1"/><text x="5.7656%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.5955%" y="805" width="0.0799%" height="15" fill="rgb(214,116,48)" fg:x="70" fg:w="1"/><text x="5.8455%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.5955%" y="789" width="0.0799%" height="15" fill="rgb(244,191,6)" fg:x="70" fg:w="1"/><text x="5.8455%" y="799.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.5955%" y="773" width="0.0799%" height="15" fill="rgb(241,50,52)" fg:x="70" fg:w="1"/><text x="5.8455%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.5955%" y="757" width="0.0799%" height="15" fill="rgb(236,75,39)" fg:x="70" fg:w="1"/><text x="5.8455%" y="767.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.5955%" y="741" width="0.0799%" height="15" fill="rgb(236,99,0)" fg:x="70" fg:w="1"/><text x="5.8455%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.5955%" y="725" width="0.0799%" height="15" fill="rgb(207,202,15)" fg:x="70" fg:w="1"/><text x="5.8455%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5955%" y="709" width="0.0799%" height="15" fill="rgb(233,207,14)" fg:x="70" fg:w="1"/><text x="5.8455%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5955%" y="693" width="0.0799%" height="15" fill="rgb(226,27,51)" fg:x="70" fg:w="1"/><text x="5.8455%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.5955%" y="677" width="0.0799%" height="15" fill="rgb(206,104,42)" fg:x="70" fg:w="1"/><text x="5.8455%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="5.6755%" y="725" width="0.0799%" height="15" fill="rgb(212,225,4)" fg:x="71" fg:w="1"/><text x="5.9255%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="5.6755%" y="709" width="0.0799%" height="15" fill="rgb(233,96,42)" fg:x="71" fg:w="1"/><text x="5.9255%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.7554%" y="693" width="0.0799%" height="15" fill="rgb(229,21,32)" fg:x="72" fg:w="1"/><text x="6.0054%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.7554%" y="677" width="0.0799%" height="15" fill="rgb(226,216,24)" fg:x="72" fg:w="1"/><text x="6.0054%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.7554%" y="661" width="0.0799%" height="15" fill="rgb(221,163,17)" fg:x="72" fg:w="1"/><text x="6.0054%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="5.6755%" y="741" width="0.2398%" height="15" fill="rgb(216,216,42)" fg:x="71" fg:w="3"/><text x="5.9255%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="5.7554%" y="725" width="0.1599%" height="15" fill="rgb(240,118,7)" fg:x="72" fg:w="2"/><text x="6.0054%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="5.7554%" y="709" width="0.1599%" height="15" fill="rgb(221,67,37)" fg:x="72" fg:w="2"/><text x="6.0054%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.8353%" y="693" width="0.0799%" height="15" fill="rgb(241,32,44)" fg:x="73" fg:w="1"/><text x="6.0853%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.8353%" y="677" width="0.0799%" height="15" fill="rgb(235,204,43)" fg:x="73" fg:w="1"/><text x="6.0853%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.8353%" y="661" width="0.0799%" height="15" fill="rgb(213,116,10)" fg:x="73" fg:w="1"/><text x="6.0853%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.8353%" y="645" width="0.0799%" height="15" fill="rgb(239,15,48)" fg:x="73" fg:w="1"/><text x="6.0853%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.8353%" y="629" width="0.0799%" height="15" fill="rgb(207,123,36)" fg:x="73" fg:w="1"/><text x="6.0853%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="5.8353%" y="613" width="0.0799%" height="15" fill="rgb(209,103,30)" fg:x="73" fg:w="1"/><text x="6.0853%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.8353%" y="597" width="0.0799%" height="15" fill="rgb(238,100,19)" fg:x="73" fg:w="1"/><text x="6.0853%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="5.8353%" y="581" width="0.0799%" height="15" fill="rgb(244,30,14)" fg:x="73" fg:w="1"/><text x="6.0853%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.8353%" y="565" width="0.0799%" height="15" fill="rgb(249,174,6)" fg:x="73" fg:w="1"/><text x="6.0853%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8353%" y="549" width="0.0799%" height="15" fill="rgb(235,213,41)" fg:x="73" fg:w="1"/><text x="6.0853%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.8353%" y="533" width="0.0799%" height="15" fill="rgb(213,118,6)" fg:x="73" fg:w="1"/><text x="6.0853%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.9153%" y="693" width="0.0799%" height="15" fill="rgb(235,44,51)" fg:x="74" fg:w="1"/><text x="6.1653%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.9153%" y="677" width="0.0799%" height="15" fill="rgb(217,9,53)" fg:x="74" fg:w="1"/><text x="6.1653%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.9153%" y="661" width="0.0799%" height="15" fill="rgb(237,172,34)" fg:x="74" fg:w="1"/><text x="6.1653%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9153%" y="645" width="0.0799%" height="15" fill="rgb(206,206,11)" fg:x="74" fg:w="1"/><text x="6.1653%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9153%" y="629" width="0.0799%" height="15" fill="rgb(214,149,29)" fg:x="74" fg:w="1"/><text x="6.1653%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9153%" y="613" width="0.0799%" height="15" fill="rgb(208,123,3)" fg:x="74" fg:w="1"/><text x="6.1653%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9153%" y="597" width="0.0799%" height="15" fill="rgb(229,126,4)" fg:x="74" fg:w="1"/><text x="6.1653%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9153%" y="581" width="0.0799%" height="15" fill="rgb(222,92,36)" fg:x="74" fg:w="1"/><text x="6.1653%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9153%" y="565" width="0.0799%" height="15" fill="rgb(216,39,41)" fg:x="74" fg:w="1"/><text x="6.1653%" y="575.50"></text></g><g><title>plugins_core::build::Build::leads_to (5 samples, 0.40%)</title><rect x="5.6755%" y="757" width="0.3997%" height="15" fill="rgb(253,127,28)" fg:x="71" fg:w="5"/><text x="5.9255%" y="767.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="5.9153%" y="741" width="0.1599%" height="15" fill="rgb(249,152,51)" fg:x="74" fg:w="2"/><text x="6.1653%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="5.9153%" y="725" width="0.1599%" height="15" fill="rgb(209,123,42)" fg:x="74" fg:w="2"/><text x="6.1653%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="5.9153%" y="709" width="0.1599%" height="15" fill="rgb(241,118,22)" fg:x="74" fg:w="2"/><text x="6.1653%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.9952%" y="693" width="0.0799%" height="15" fill="rgb(208,25,7)" fg:x="75" fg:w="1"/><text x="6.2452%" y="703.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="5.9952%" y="677" width="0.0799%" height="15" fill="rgb(243,144,39)" fg:x="75" fg:w="1"/><text x="6.2452%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.9952%" y="661" width="0.0799%" height="15" fill="rgb(250,50,5)" fg:x="75" fg:w="1"/><text x="6.2452%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.48%)</title><rect x="5.6755%" y="805" width="0.4796%" height="15" fill="rgb(207,67,11)" fg:x="71" fg:w="6"/><text x="5.9255%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="5.6755%" y="789" width="0.4796%" height="15" fill="rgb(245,204,40)" fg:x="71" fg:w="6"/><text x="5.9255%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="5.6755%" y="773" width="0.4796%" height="15" fill="rgb(238,228,24)" fg:x="71" fg:w="6"/><text x="5.9255%" y="783.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.0751%" y="757" width="0.0799%" height="15" fill="rgb(217,116,22)" fg:x="76" fg:w="1"/><text x="6.3251%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.0751%" y="741" width="0.0799%" height="15" fill="rgb(234,98,12)" fg:x="76" fg:w="1"/><text x="6.3251%" y="751.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="6.0751%" y="725" width="0.0799%" height="15" fill="rgb(242,170,50)" fg:x="76" fg:w="1"/><text x="6.3251%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.0751%" y="709" width="0.0799%" height="15" fill="rgb(235,7,5)" fg:x="76" fg:w="1"/><text x="6.3251%" y="719.50"></text></g><g><title>&lt;kernel::model::scopes::Properties as kernel::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0751%" y="693" width="0.0799%" height="15" fill="rgb(241,114,28)" fg:x="76" fg:w="1"/><text x="6.3251%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0751%" y="677" width="0.0799%" height="15" fill="rgb(246,112,42)" fg:x="76" fg:w="1"/><text x="6.3251%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="6.0751%" y="661" width="0.0799%" height="15" fill="rgb(248,228,14)" fg:x="76" fg:w="1"/><text x="6.3251%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0751%" y="645" width="0.0799%" height="15" fill="rgb(208,133,18)" fg:x="76" fg:w="1"/><text x="6.3251%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="6.0751%" y="629" width="0.0799%" height="15" fill="rgb(207,35,49)" fg:x="76" fg:w="1"/><text x="6.3251%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="6.0751%" y="613" width="0.0799%" height="15" fill="rgb(205,68,36)" fg:x="76" fg:w="1"/><text x="6.3251%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0751%" y="597" width="0.0799%" height="15" fill="rgb(245,62,40)" fg:x="76" fg:w="1"/><text x="6.3251%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0751%" y="581" width="0.0799%" height="15" fill="rgb(228,27,24)" fg:x="76" fg:w="1"/><text x="6.3251%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.0751%" y="565" width="0.0799%" height="15" fill="rgb(253,19,12)" fg:x="76" fg:w="1"/><text x="6.3251%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="6.1551%" y="773" width="0.1599%" height="15" fill="rgb(232,28,20)" fg:x="77" fg:w="2"/><text x="6.4051%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2350%" y="757" width="0.0799%" height="15" fill="rgb(218,35,51)" fg:x="78" fg:w="1"/><text x="6.4850%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.2350%" y="741" width="0.0799%" height="15" fill="rgb(212,90,40)" fg:x="78" fg:w="1"/><text x="6.4850%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="6.2350%" y="725" width="0.0799%" height="15" fill="rgb(220,172,12)" fg:x="78" fg:w="1"/><text x="6.4850%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="6.2350%" y="709" width="0.0799%" height="15" fill="rgb(226,159,20)" fg:x="78" fg:w="1"/><text x="6.4850%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="6.2350%" y="693" width="0.0799%" height="15" fill="rgb(234,205,16)" fg:x="78" fg:w="1"/><text x="6.4850%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="6.2350%" y="677" width="0.0799%" height="15" fill="rgb(207,9,39)" fg:x="78" fg:w="1"/><text x="6.4850%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="6.2350%" y="661" width="0.0799%" height="15" fill="rgb(249,143,15)" fg:x="78" fg:w="1"/><text x="6.4850%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="6.3149%" y="741" width="0.0799%" height="15" fill="rgb(253,133,29)" fg:x="79" fg:w="1"/><text x="6.5649%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.3149%" y="725" width="0.0799%" height="15" fill="rgb(221,187,0)" fg:x="79" fg:w="1"/><text x="6.5649%" y="735.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="6.3149%" y="773" width="0.1599%" height="15" fill="rgb(205,204,26)" fg:x="79" fg:w="2"/><text x="6.5649%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="6.3149%" y="757" width="0.1599%" height="15" fill="rgb(224,68,54)" fg:x="79" fg:w="2"/><text x="6.5649%" y="767.50"></text></g><g><title>engine::session::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="6.3949%" y="741" width="0.0799%" height="15" fill="rgb(209,67,4)" fg:x="80" fg:w="1"/><text x="6.6449%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.3949%" y="725" width="0.0799%" height="15" fill="rgb(228,229,18)" fg:x="80" fg:w="1"/><text x="6.6449%" y="735.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="6.4748%" y="773" width="0.0799%" height="15" fill="rgb(231,89,13)" fg:x="81" fg:w="1"/><text x="6.7248%" y="783.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.4748%" y="757" width="0.0799%" height="15" fill="rgb(210,182,18)" fg:x="81" fg:w="1"/><text x="6.7248%" y="767.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4748%" y="741" width="0.0799%" height="15" fill="rgb(240,105,2)" fg:x="81" fg:w="1"/><text x="6.7248%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4748%" y="725" width="0.0799%" height="15" fill="rgb(207,170,50)" fg:x="81" fg:w="1"/><text x="6.7248%" y="735.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4748%" y="709" width="0.0799%" height="15" fill="rgb(232,133,24)" fg:x="81" fg:w="1"/><text x="6.7248%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.5548%" y="709" width="0.0799%" height="15" fill="rgb(235,166,27)" fg:x="82" fg:w="1"/><text x="6.8048%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.6347%" y="709" width="0.0799%" height="15" fill="rgb(209,19,13)" fg:x="83" fg:w="1"/><text x="6.8847%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.6347%" y="693" width="0.0799%" height="15" fill="rgb(226,79,39)" fg:x="83" fg:w="1"/><text x="6.8847%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.6347%" y="677" width="0.0799%" height="15" fill="rgb(222,163,10)" fg:x="83" fg:w="1"/><text x="6.8847%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.6347%" y="661" width="0.0799%" height="15" fill="rgb(214,44,19)" fg:x="83" fg:w="1"/><text x="6.8847%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.7146%" y="693" width="0.0799%" height="15" fill="rgb(210,217,13)" fg:x="84" fg:w="1"/><text x="6.9646%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7146%" y="677" width="0.0799%" height="15" fill="rgb(237,61,54)" fg:x="84" fg:w="1"/><text x="6.9646%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.7146%" y="661" width="0.0799%" height="15" fill="rgb(226,184,24)" fg:x="84" fg:w="1"/><text x="6.9646%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.7146%" y="645" width="0.0799%" height="15" fill="rgb(223,226,4)" fg:x="84" fg:w="1"/><text x="6.9646%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.7946%" y="677" width="0.0799%" height="15" fill="rgb(210,26,41)" fg:x="85" fg:w="1"/><text x="7.0446%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.7946%" y="661" width="0.0799%" height="15" fill="rgb(220,221,6)" fg:x="85" fg:w="1"/><text x="7.0446%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.7946%" y="645" width="0.0799%" height="15" fill="rgb(225,89,49)" fg:x="85" fg:w="1"/><text x="7.0446%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.7946%" y="629" width="0.0799%" height="15" fill="rgb(218,70,45)" fg:x="85" fg:w="1"/><text x="7.0446%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.9544%" y="661" width="0.0799%" height="15" fill="rgb(238,166,21)" fg:x="87" fg:w="1"/><text x="7.2044%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.9544%" y="645" width="0.0799%" height="15" fill="rgb(224,141,44)" fg:x="87" fg:w="1"/><text x="7.2044%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.9544%" y="629" width="0.0799%" height="15" fill="rgb(230,12,49)" fg:x="87" fg:w="1"/><text x="7.2044%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="6.7146%" y="709" width="0.3997%" height="15" fill="rgb(212,174,12)" fg:x="84" fg:w="5"/><text x="6.9646%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="6.7946%" y="693" width="0.3197%" height="15" fill="rgb(246,67,9)" fg:x="85" fg:w="4"/><text x="7.0446%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.8745%" y="677" width="0.2398%" height="15" fill="rgb(239,35,23)" fg:x="86" fg:w="3"/><text x="7.1245%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0344%" y="661" width="0.0799%" height="15" fill="rgb(211,167,0)" fg:x="88" fg:w="1"/><text x="7.2844%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.0344%" y="645" width="0.0799%" height="15" fill="rgb(225,119,45)" fg:x="88" fg:w="1"/><text x="7.2844%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.0344%" y="629" width="0.0799%" height="15" fill="rgb(210,162,6)" fg:x="88" fg:w="1"/><text x="7.2844%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.0344%" y="613" width="0.0799%" height="15" fill="rgb(208,118,35)" fg:x="88" fg:w="1"/><text x="7.2844%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.0344%" y="597" width="0.0799%" height="15" fill="rgb(239,4,53)" fg:x="88" fg:w="1"/><text x="7.2844%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="6.5548%" y="741" width="0.7194%" height="15" fill="rgb(213,130,21)" fg:x="82" fg:w="9"/><text x="6.8048%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="6.5548%" y="725" width="0.7194%" height="15" fill="rgb(235,148,0)" fg:x="82" fg:w="9"/><text x="6.8048%" y="735.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.1143%" y="709" width="0.1599%" height="15" fill="rgb(244,224,18)" fg:x="89" fg:w="2"/><text x="7.3643%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.1143%" y="693" width="0.1599%" height="15" fill="rgb(211,214,4)" fg:x="89" fg:w="2"/><text x="7.3643%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="7.1143%" y="677" width="0.1599%" height="15" fill="rgb(206,119,25)" fg:x="89" fg:w="2"/><text x="7.3643%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.1942%" y="661" width="0.0799%" height="15" fill="rgb(243,93,47)" fg:x="90" fg:w="1"/><text x="7.4442%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2742%" y="693" width="0.0799%" height="15" fill="rgb(224,194,6)" fg:x="91" fg:w="1"/><text x="7.5242%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2742%" y="677" width="0.0799%" height="15" fill="rgb(243,229,6)" fg:x="91" fg:w="1"/><text x="7.5242%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.2742%" y="741" width="0.2398%" height="15" fill="rgb(207,23,50)" fg:x="91" fg:w="3"/><text x="7.5242%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="7.2742%" y="725" width="0.2398%" height="15" fill="rgb(253,192,32)" fg:x="91" fg:w="3"/><text x="7.5242%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.2742%" y="709" width="0.2398%" height="15" fill="rgb(213,21,6)" fg:x="91" fg:w="3"/><text x="7.5242%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.3541%" y="693" width="0.1599%" height="15" fill="rgb(243,151,13)" fg:x="92" fg:w="2"/><text x="7.6041%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.3541%" y="677" width="0.1599%" height="15" fill="rgb(233,165,41)" fg:x="92" fg:w="2"/><text x="7.6041%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.4341%" y="661" width="0.0799%" height="15" fill="rgb(246,176,45)" fg:x="93" fg:w="1"/><text x="7.6841%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4341%" y="645" width="0.0799%" height="15" fill="rgb(217,170,52)" fg:x="93" fg:w="1"/><text x="7.6841%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.6739%" y="645" width="0.1599%" height="15" fill="rgb(214,203,54)" fg:x="96" fg:w="2"/><text x="7.9239%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.6739%" y="629" width="0.1599%" height="15" fill="rgb(248,215,49)" fg:x="96" fg:w="2"/><text x="7.9239%" y="639.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="7.6739%" y="613" width="0.1599%" height="15" fill="rgb(208,46,10)" fg:x="96" fg:w="2"/><text x="7.9239%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.8337%" y="613" width="0.1599%" height="15" fill="rgb(254,5,31)" fg:x="98" fg:w="2"/><text x="8.0837%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.8337%" y="597" width="0.1599%" height="15" fill="rgb(222,104,33)" fg:x="98" fg:w="2"/><text x="8.0837%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9137%" y="581" width="0.0799%" height="15" fill="rgb(248,49,16)" fg:x="99" fg:w="1"/><text x="8.1637%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="7.6739%" y="661" width="0.4796%" height="15" fill="rgb(232,198,41)" fg:x="96" fg:w="6"/><text x="7.9239%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="7.8337%" y="645" width="0.3197%" height="15" fill="rgb(214,125,3)" fg:x="98" fg:w="4"/><text x="8.0837%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="7.8337%" y="629" width="0.3197%" height="15" fill="rgb(229,220,28)" fg:x="98" fg:w="4"/><text x="8.0837%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.9936%" y="613" width="0.1599%" height="15" fill="rgb(222,64,37)" fg:x="100" fg:w="2"/><text x="8.2436%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0735%" y="597" width="0.0799%" height="15" fill="rgb(249,184,13)" fg:x="101" fg:w="1"/><text x="8.3235%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0735%" y="581" width="0.0799%" height="15" fill="rgb(252,176,6)" fg:x="101" fg:w="1"/><text x="8.3235%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0735%" y="565" width="0.0799%" height="15" fill="rgb(228,153,7)" fg:x="101" fg:w="1"/><text x="8.3235%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0735%" y="549" width="0.0799%" height="15" fill="rgb(242,193,5)" fg:x="101" fg:w="1"/><text x="8.3235%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0735%" y="533" width="0.0799%" height="15" fill="rgb(232,140,9)" fg:x="101" fg:w="1"/><text x="8.3235%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0735%" y="517" width="0.0799%" height="15" fill="rgb(213,222,16)" fg:x="101" fg:w="1"/><text x="8.3235%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0735%" y="501" width="0.0799%" height="15" fill="rgb(222,75,50)" fg:x="101" fg:w="1"/><text x="8.3235%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0735%" y="485" width="0.0799%" height="15" fill="rgb(205,180,2)" fg:x="101" fg:w="1"/><text x="8.3235%" y="495.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.08%)</title><rect x="6.1551%" y="805" width="2.0783%" height="15" fill="rgb(216,34,7)" fg:x="77" fg:w="26"/><text x="6.4051%" y="815.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (26 samples, 2.08%)</title><rect x="6.1551%" y="789" width="2.0783%" height="15" fill="rgb(253,16,32)" fg:x="77" fg:w="26"/><text x="6.4051%" y="799.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (21 samples, 1.68%)</title><rect x="6.5548%" y="773" width="1.6787%" height="15" fill="rgb(208,97,28)" fg:x="82" fg:w="21"/><text x="6.8048%" y="783.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (21 samples, 1.68%)</title><rect x="6.5548%" y="757" width="1.6787%" height="15" fill="rgb(225,92,11)" fg:x="82" fg:w="21"/><text x="6.8048%" y="767.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="7.5140%" y="741" width="0.7194%" height="15" fill="rgb(243,38,12)" fg:x="94" fg:w="9"/><text x="7.7640%" y="751.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="7.5140%" y="725" width="0.7194%" height="15" fill="rgb(208,139,16)" fg:x="94" fg:w="9"/><text x="7.7640%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="7.5140%" y="709" width="0.7194%" height="15" fill="rgb(227,24,9)" fg:x="94" fg:w="9"/><text x="7.7640%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.64%)</title><rect x="7.5939%" y="693" width="0.6395%" height="15" fill="rgb(206,62,11)" fg:x="95" fg:w="8"/><text x="7.8439%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="7.5939%" y="677" width="0.6395%" height="15" fill="rgb(228,134,27)" fg:x="95" fg:w="8"/><text x="7.8439%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.1535%" y="661" width="0.0799%" height="15" fill="rgb(205,55,33)" fg:x="102" fg:w="1"/><text x="8.4035%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1535%" y="645" width="0.0799%" height="15" fill="rgb(243,75,43)" fg:x="102" fg:w="1"/><text x="8.4035%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.2334%" y="773" width="0.0799%" height="15" fill="rgb(223,27,42)" fg:x="103" fg:w="1"/><text x="8.4834%" y="783.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="8.2334%" y="757" width="0.0799%" height="15" fill="rgb(232,189,33)" fg:x="103" fg:w="1"/><text x="8.4834%" y="767.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="8.2334%" y="741" width="0.0799%" height="15" fill="rgb(210,9,39)" fg:x="103" fg:w="1"/><text x="8.4834%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="8.2334%" y="725" width="0.0799%" height="15" fill="rgb(242,85,26)" fg:x="103" fg:w="1"/><text x="8.4834%" y="735.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (2 samples, 0.16%)</title><rect x="8.2334%" y="805" width="0.1599%" height="15" fill="rgb(248,44,4)" fg:x="103" fg:w="2"/><text x="8.4834%" y="815.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="8.2334%" y="789" width="0.1599%" height="15" fill="rgb(250,96,46)" fg:x="103" fg:w="2"/><text x="8.4834%" y="799.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.3133%" y="773" width="0.0799%" height="15" fill="rgb(229,116,26)" fg:x="104" fg:w="1"/><text x="8.5633%" y="783.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="8.3133%" y="757" width="0.0799%" height="15" fill="rgb(246,94,34)" fg:x="104" fg:w="1"/><text x="8.5633%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="8.3933%" y="773" width="0.0799%" height="15" fill="rgb(251,73,21)" fg:x="105" fg:w="1"/><text x="8.6433%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.4732%" y="741" width="0.0799%" height="15" fill="rgb(254,121,25)" fg:x="106" fg:w="1"/><text x="8.7232%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="8.4732%" y="725" width="0.0799%" height="15" fill="rgb(215,161,49)" fg:x="106" fg:w="1"/><text x="8.7232%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="8.4732%" y="709" width="0.0799%" height="15" fill="rgb(221,43,13)" fg:x="106" fg:w="1"/><text x="8.7232%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="8.4732%" y="693" width="0.0799%" height="15" fill="rgb(249,5,37)" fg:x="106" fg:w="1"/><text x="8.7232%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.4732%" y="677" width="0.0799%" height="15" fill="rgb(226,25,44)" fg:x="106" fg:w="1"/><text x="8.7232%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.4732%" y="661" width="0.0799%" height="15" fill="rgb(238,189,16)" fg:x="106" fg:w="1"/><text x="8.7232%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.4732%" y="645" width="0.0799%" height="15" fill="rgb(251,186,8)" fg:x="106" fg:w="1"/><text x="8.7232%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.4732%" y="629" width="0.0799%" height="15" fill="rgb(254,34,31)" fg:x="106" fg:w="1"/><text x="8.7232%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.4732%" y="613" width="0.0799%" height="15" fill="rgb(225,215,27)" fg:x="106" fg:w="1"/><text x="8.7232%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.4732%" y="597" width="0.0799%" height="15" fill="rgb(221,192,48)" fg:x="106" fg:w="1"/><text x="8.7232%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4732%" y="581" width="0.0799%" height="15" fill="rgb(219,137,20)" fg:x="106" fg:w="1"/><text x="8.7232%" y="591.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="8.4732%" y="757" width="0.1599%" height="15" fill="rgb(219,84,11)" fg:x="106" fg:w="2"/><text x="8.7232%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.5532%" y="741" width="0.0799%" height="15" fill="rgb(224,10,23)" fg:x="107" fg:w="1"/><text x="8.8032%" y="751.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="8.5532%" y="725" width="0.0799%" height="15" fill="rgb(248,22,39)" fg:x="107" fg:w="1"/><text x="8.8032%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="8.5532%" y="709" width="0.0799%" height="15" fill="rgb(212,154,20)" fg:x="107" fg:w="1"/><text x="8.8032%" y="719.50"></text></g><g><title>&lt;kernel::model::scopes::Properties as kernel::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5532%" y="693" width="0.0799%" height="15" fill="rgb(236,199,50)" fg:x="107" fg:w="1"/><text x="8.8032%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.5532%" y="677" width="0.0799%" height="15" fill="rgb(211,9,17)" fg:x="107" fg:w="1"/><text x="8.8032%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="8.5532%" y="661" width="0.0799%" height="15" fill="rgb(243,216,36)" fg:x="107" fg:w="1"/><text x="8.8032%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.5532%" y="645" width="0.0799%" height="15" fill="rgb(250,2,10)" fg:x="107" fg:w="1"/><text x="8.8032%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5532%" y="629" width="0.0799%" height="15" fill="rgb(226,50,48)" fg:x="107" fg:w="1"/><text x="8.8032%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5532%" y="613" width="0.0799%" height="15" fill="rgb(243,81,16)" fg:x="107" fg:w="1"/><text x="8.8032%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="8.3933%" y="789" width="0.5596%" height="15" fill="rgb(250,14,2)" fg:x="105" fg:w="7"/><text x="8.6433%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="8.4732%" y="773" width="0.4796%" height="15" fill="rgb(233,135,29)" fg:x="106" fg:w="6"/><text x="8.7232%" y="783.50"></text></g><g><title>engine::internal::EntityMap::add_entity (4 samples, 0.32%)</title><rect x="8.6331%" y="757" width="0.3197%" height="15" fill="rgb(224,64,43)" fg:x="108" fg:w="4"/><text x="8.8831%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.32%)</title><rect x="8.6331%" y="741" width="0.3197%" height="15" fill="rgb(238,84,13)" fg:x="108" fg:w="4"/><text x="8.8831%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.32%)</title><rect x="8.6331%" y="725" width="0.3197%" height="15" fill="rgb(253,48,26)" fg:x="108" fg:w="4"/><text x="8.8831%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.32%)</title><rect x="8.6331%" y="709" width="0.3197%" height="15" fill="rgb(205,223,31)" fg:x="108" fg:w="4"/><text x="8.8831%" y="719.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="8.7130%" y="693" width="0.2398%" height="15" fill="rgb(221,41,32)" fg:x="109" fg:w="3"/><text x="8.9630%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="8.9528%" y="773" width="0.0799%" height="15" fill="rgb(213,158,31)" fg:x="112" fg:w="1"/><text x="9.2028%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="8.9528%" y="757" width="0.0799%" height="15" fill="rgb(245,126,43)" fg:x="112" fg:w="1"/><text x="9.2028%" y="767.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9528%" y="741" width="0.0799%" height="15" fill="rgb(227,7,22)" fg:x="112" fg:w="1"/><text x="9.2028%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="9.0328%" y="773" width="0.0799%" height="15" fill="rgb(252,90,44)" fg:x="113" fg:w="1"/><text x="9.2828%" y="783.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.0328%" y="757" width="0.0799%" height="15" fill="rgb(253,91,0)" fg:x="113" fg:w="1"/><text x="9.2828%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.1127%" y="693" width="0.0799%" height="15" fill="rgb(252,175,49)" fg:x="114" fg:w="1"/><text x="9.3627%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.1127%" y="677" width="0.0799%" height="15" fill="rgb(246,150,1)" fg:x="114" fg:w="1"/><text x="9.3627%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1127%" y="661" width="0.0799%" height="15" fill="rgb(241,192,25)" fg:x="114" fg:w="1"/><text x="9.3627%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1127%" y="645" width="0.0799%" height="15" fill="rgb(239,187,11)" fg:x="114" fg:w="1"/><text x="9.3627%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1127%" y="629" width="0.0799%" height="15" fill="rgb(218,202,51)" fg:x="114" fg:w="1"/><text x="9.3627%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1127%" y="613" width="0.0799%" height="15" fill="rgb(225,176,8)" fg:x="114" fg:w="1"/><text x="9.3627%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.1127%" y="597" width="0.0799%" height="15" fill="rgb(219,122,41)" fg:x="114" fg:w="1"/><text x="9.3627%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.1127%" y="741" width="0.1599%" height="15" fill="rgb(248,140,20)" fg:x="114" fg:w="2"/><text x="9.3627%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="9.1127%" y="725" width="0.1599%" height="15" fill="rgb(245,41,37)" fg:x="114" fg:w="2"/><text x="9.3627%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="9.1127%" y="709" width="0.1599%" height="15" fill="rgb(235,82,39)" fg:x="114" fg:w="2"/><text x="9.3627%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.1926%" y="693" width="0.0799%" height="15" fill="rgb(230,108,42)" fg:x="115" fg:w="1"/><text x="9.4426%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1926%" y="677" width="0.0799%" height="15" fill="rgb(215,150,50)" fg:x="115" fg:w="1"/><text x="9.4426%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.1926%" y="661" width="0.0799%" height="15" fill="rgb(233,212,5)" fg:x="115" fg:w="1"/><text x="9.4426%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1926%" y="645" width="0.0799%" height="15" fill="rgb(245,80,22)" fg:x="115" fg:w="1"/><text x="9.4426%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.1926%" y="629" width="0.0799%" height="15" fill="rgb(238,129,16)" fg:x="115" fg:w="1"/><text x="9.4426%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1926%" y="613" width="0.0799%" height="15" fill="rgb(240,19,0)" fg:x="115" fg:w="1"/><text x="9.4426%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.1926%" y="597" width="0.0799%" height="15" fill="rgb(232,42,35)" fg:x="115" fg:w="1"/><text x="9.4426%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1926%" y="581" width="0.0799%" height="15" fill="rgb(223,130,24)" fg:x="115" fg:w="1"/><text x="9.4426%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1926%" y="565" width="0.0799%" height="15" fill="rgb(237,16,22)" fg:x="115" fg:w="1"/><text x="9.4426%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.1926%" y="549" width="0.0799%" height="15" fill="rgb(248,192,20)" fg:x="115" fg:w="1"/><text x="9.4426%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2726%" y="693" width="0.0799%" height="15" fill="rgb(233,167,2)" fg:x="116" fg:w="1"/><text x="9.5226%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2726%" y="677" width="0.0799%" height="15" fill="rgb(252,71,44)" fg:x="116" fg:w="1"/><text x="9.5226%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2726%" y="661" width="0.0799%" height="15" fill="rgb(238,37,47)" fg:x="116" fg:w="1"/><text x="9.5226%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2726%" y="645" width="0.0799%" height="15" fill="rgb(214,202,54)" fg:x="116" fg:w="1"/><text x="9.5226%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2726%" y="629" width="0.0799%" height="15" fill="rgb(254,165,40)" fg:x="116" fg:w="1"/><text x="9.5226%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.2726%" y="613" width="0.0799%" height="15" fill="rgb(246,173,38)" fg:x="116" fg:w="1"/><text x="9.5226%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.2726%" y="597" width="0.0799%" height="15" fill="rgb(215,3,27)" fg:x="116" fg:w="1"/><text x="9.5226%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.2726%" y="581" width="0.0799%" height="15" fill="rgb(239,169,51)" fg:x="116" fg:w="1"/><text x="9.5226%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.2726%" y="565" width="0.0799%" height="15" fill="rgb(212,5,25)" fg:x="116" fg:w="1"/><text x="9.5226%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.2726%" y="549" width="0.0799%" height="15" fill="rgb(243,45,17)" fg:x="116" fg:w="1"/><text x="9.5226%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.2726%" y="533" width="0.0799%" height="15" fill="rgb(242,97,9)" fg:x="116" fg:w="1"/><text x="9.5226%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.2726%" y="517" width="0.0799%" height="15" fill="rgb(228,71,31)" fg:x="116" fg:w="1"/><text x="9.5226%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.2726%" y="501" width="0.0799%" height="15" fill="rgb(252,184,16)" fg:x="116" fg:w="1"/><text x="9.5226%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.2726%" y="485" width="0.0799%" height="15" fill="rgb(236,169,46)" fg:x="116" fg:w="1"/><text x="9.5226%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2726%" y="469" width="0.0799%" height="15" fill="rgb(207,17,47)" fg:x="116" fg:w="1"/><text x="9.5226%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="9.3525%" y="693" width="0.0799%" height="15" fill="rgb(206,201,28)" fg:x="117" fg:w="1"/><text x="9.6025%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3525%" y="677" width="0.0799%" height="15" fill="rgb(224,184,23)" fg:x="117" fg:w="1"/><text x="9.6025%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.3525%" y="661" width="0.0799%" height="15" fill="rgb(208,139,48)" fg:x="117" fg:w="1"/><text x="9.6025%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3525%" y="645" width="0.0799%" height="15" fill="rgb(208,130,10)" fg:x="117" fg:w="1"/><text x="9.6025%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3525%" y="629" width="0.0799%" height="15" fill="rgb(211,213,45)" fg:x="117" fg:w="1"/><text x="9.6025%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3525%" y="613" width="0.0799%" height="15" fill="rgb(235,100,30)" fg:x="117" fg:w="1"/><text x="9.6025%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="9.4325%" y="597" width="0.0799%" height="15" fill="rgb(206,144,31)" fg:x="118" fg:w="1"/><text x="9.6825%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (7 samples, 0.56%)</title><rect x="9.1127%" y="773" width="0.5596%" height="15" fill="rgb(224,200,26)" fg:x="114" fg:w="7"/><text x="9.3627%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (7 samples, 0.56%)</title><rect x="9.1127%" y="757" width="0.5596%" height="15" fill="rgb(247,104,53)" fg:x="114" fg:w="7"/><text x="9.3627%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="9.2726%" y="741" width="0.3997%" height="15" fill="rgb(220,14,17)" fg:x="116" fg:w="5"/><text x="9.5226%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (5 samples, 0.40%)</title><rect x="9.2726%" y="725" width="0.3997%" height="15" fill="rgb(230,140,40)" fg:x="116" fg:w="5"/><text x="9.5226%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (5 samples, 0.40%)</title><rect x="9.2726%" y="709" width="0.3997%" height="15" fill="rgb(229,2,41)" fg:x="116" fg:w="5"/><text x="9.5226%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="9.4325%" y="693" width="0.2398%" height="15" fill="rgb(232,89,16)" fg:x="118" fg:w="3"/><text x="9.6825%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="9.4325%" y="677" width="0.2398%" height="15" fill="rgb(247,59,52)" fg:x="118" fg:w="3"/><text x="9.6825%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="9.4325%" y="661" width="0.2398%" height="15" fill="rgb(226,110,21)" fg:x="118" fg:w="3"/><text x="9.6825%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="9.4325%" y="645" width="0.2398%" height="15" fill="rgb(224,176,43)" fg:x="118" fg:w="3"/><text x="9.6825%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="9.4325%" y="629" width="0.2398%" height="15" fill="rgb(221,73,6)" fg:x="118" fg:w="3"/><text x="9.6825%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="9.4325%" y="613" width="0.2398%" height="15" fill="rgb(232,78,19)" fg:x="118" fg:w="3"/><text x="9.6825%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="9.5124%" y="597" width="0.1599%" height="15" fill="rgb(233,112,48)" fg:x="119" fg:w="2"/><text x="9.7624%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.5124%" y="581" width="0.1599%" height="15" fill="rgb(243,131,47)" fg:x="119" fg:w="2"/><text x="9.7624%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5923%" y="565" width="0.0799%" height="15" fill="rgb(226,51,1)" fg:x="120" fg:w="1"/><text x="9.8423%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="9.6723%" y="773" width="0.0799%" height="15" fill="rgb(247,58,7)" fg:x="121" fg:w="1"/><text x="9.9223%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7522%" y="677" width="0.0799%" height="15" fill="rgb(209,7,32)" fg:x="122" fg:w="1"/><text x="10.0022%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7522%" y="661" width="0.0799%" height="15" fill="rgb(209,39,41)" fg:x="122" fg:w="1"/><text x="10.0022%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7522%" y="645" width="0.0799%" height="15" fill="rgb(226,182,46)" fg:x="122" fg:w="1"/><text x="10.0022%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7522%" y="629" width="0.0799%" height="15" fill="rgb(230,219,10)" fg:x="122" fg:w="1"/><text x="10.0022%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.7522%" y="725" width="0.1599%" height="15" fill="rgb(227,175,30)" fg:x="122" fg:w="2"/><text x="10.0022%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="9.7522%" y="709" width="0.1599%" height="15" fill="rgb(217,2,50)" fg:x="122" fg:w="2"/><text x="10.0022%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="9.7522%" y="693" width="0.1599%" height="15" fill="rgb(229,160,0)" fg:x="122" fg:w="2"/><text x="10.0022%" y="703.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.8321%" y="677" width="0.0799%" height="15" fill="rgb(207,78,37)" fg:x="123" fg:w="1"/><text x="10.0821%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8321%" y="661" width="0.0799%" height="15" fill="rgb(225,57,0)" fg:x="123" fg:w="1"/><text x="10.0821%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.8321%" y="645" width="0.0799%" height="15" fill="rgb(232,154,2)" fg:x="123" fg:w="1"/><text x="10.0821%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8321%" y="629" width="0.0799%" height="15" fill="rgb(241,212,25)" fg:x="123" fg:w="1"/><text x="10.0821%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.8321%" y="613" width="0.0799%" height="15" fill="rgb(226,69,20)" fg:x="123" fg:w="1"/><text x="10.0821%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8321%" y="597" width="0.0799%" height="15" fill="rgb(247,184,54)" fg:x="123" fg:w="1"/><text x="10.0821%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.8321%" y="581" width="0.0799%" height="15" fill="rgb(210,145,0)" fg:x="123" fg:w="1"/><text x="10.0821%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8321%" y="565" width="0.0799%" height="15" fill="rgb(253,82,12)" fg:x="123" fg:w="1"/><text x="10.0821%" y="575.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="9.9121%" y="709" width="0.0799%" height="15" fill="rgb(245,42,11)" fg:x="124" fg:w="1"/><text x="10.1621%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.9920%" y="677" width="0.0799%" height="15" fill="rgb(219,147,32)" fg:x="125" fg:w="1"/><text x="10.2420%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9920%" y="661" width="0.0799%" height="15" fill="rgb(246,12,7)" fg:x="125" fg:w="1"/><text x="10.2420%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9920%" y="645" width="0.0799%" height="15" fill="rgb(243,50,9)" fg:x="125" fg:w="1"/><text x="10.2420%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9920%" y="629" width="0.0799%" height="15" fill="rgb(219,149,6)" fg:x="125" fg:w="1"/><text x="10.2420%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.9920%" y="613" width="0.0799%" height="15" fill="rgb(241,51,42)" fg:x="125" fg:w="1"/><text x="10.2420%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.9920%" y="597" width="0.0799%" height="15" fill="rgb(226,128,27)" fg:x="125" fg:w="1"/><text x="10.2420%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.9920%" y="581" width="0.0799%" height="15" fill="rgb(244,144,4)" fg:x="125" fg:w="1"/><text x="10.2420%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.9920%" y="565" width="0.0799%" height="15" fill="rgb(221,4,13)" fg:x="125" fg:w="1"/><text x="10.2420%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.9920%" y="549" width="0.0799%" height="15" fill="rgb(208,170,28)" fg:x="125" fg:w="1"/><text x="10.2420%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.9920%" y="533" width="0.0799%" height="15" fill="rgb(226,131,13)" fg:x="125" fg:w="1"/><text x="10.2420%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="9.9920%" y="517" width="0.0799%" height="15" fill="rgb(215,72,41)" fg:x="125" fg:w="1"/><text x="10.2420%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.9920%" y="501" width="0.0799%" height="15" fill="rgb(243,108,20)" fg:x="125" fg:w="1"/><text x="10.2420%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0719%" y="581" width="0.0799%" height="15" fill="rgb(230,189,17)" fg:x="126" fg:w="1"/><text x="10.3219%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (6 samples, 0.48%)</title><rect x="9.7522%" y="757" width="0.4796%" height="15" fill="rgb(220,50,17)" fg:x="122" fg:w="6"/><text x="10.0022%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (6 samples, 0.48%)</title><rect x="9.7522%" y="741" width="0.4796%" height="15" fill="rgb(248,152,48)" fg:x="122" fg:w="6"/><text x="10.0022%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="9.9121%" y="725" width="0.3197%" height="15" fill="rgb(244,91,11)" fg:x="124" fg:w="4"/><text x="10.1621%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="9.9920%" y="709" width="0.2398%" height="15" fill="rgb(220,157,5)" fg:x="125" fg:w="3"/><text x="10.2420%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="9.9920%" y="693" width="0.2398%" height="15" fill="rgb(253,137,8)" fg:x="125" fg:w="3"/><text x="10.2420%" y="703.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="10.0719%" y="677" width="0.1599%" height="15" fill="rgb(217,137,51)" fg:x="126" fg:w="2"/><text x="10.3219%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.0719%" y="661" width="0.1599%" height="15" fill="rgb(218,209,53)" fg:x="126" fg:w="2"/><text x="10.3219%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="10.0719%" y="645" width="0.1599%" height="15" fill="rgb(249,137,25)" fg:x="126" fg:w="2"/><text x="10.3219%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.0719%" y="629" width="0.1599%" height="15" fill="rgb(239,155,26)" fg:x="126" fg:w="2"/><text x="10.3219%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="10.0719%" y="613" width="0.1599%" height="15" fill="rgb(227,85,46)" fg:x="126" fg:w="2"/><text x="10.3219%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.0719%" y="597" width="0.1599%" height="15" fill="rgb(251,107,43)" fg:x="126" fg:w="2"/><text x="10.3219%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.1519%" y="581" width="0.0799%" height="15" fill="rgb(234,170,33)" fg:x="127" fg:w="1"/><text x="10.4019%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1519%" y="565" width="0.0799%" height="15" fill="rgb(206,29,35)" fg:x="127" fg:w="1"/><text x="10.4019%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.1519%" y="549" width="0.0799%" height="15" fill="rgb(227,138,25)" fg:x="127" fg:w="1"/><text x="10.4019%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.1519%" y="533" width="0.0799%" height="15" fill="rgb(249,131,35)" fg:x="127" fg:w="1"/><text x="10.4019%" y="543.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="10.1519%" y="517" width="0.0799%" height="15" fill="rgb(239,6,40)" fg:x="127" fg:w="1"/><text x="10.4019%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (24 samples, 1.92%)</title><rect x="8.3933%" y="805" width="1.9185%" height="15" fill="rgb(246,136,47)" fg:x="105" fg:w="24"/><text x="8.6433%" y="815.50">p..</text></g><g><title>plugins_core::tools::set_container (17 samples, 1.36%)</title><rect x="8.9528%" y="789" width="1.3589%" height="15" fill="rgb(253,58,26)" fg:x="112" fg:w="17"/><text x="9.2028%" y="799.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (7 samples, 0.56%)</title><rect x="9.7522%" y="773" width="0.5596%" height="15" fill="rgb(237,141,10)" fg:x="122" fg:w="7"/><text x="10.0022%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="10.2318%" y="757" width="0.0799%" height="15" fill="rgb(234,156,12)" fg:x="128" fg:w="1"/><text x="10.4818%" y="767.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="10.2318%" y="741" width="0.0799%" height="15" fill="rgb(243,224,36)" fg:x="128" fg:w="1"/><text x="10.4818%" y="751.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="10.2318%" y="725" width="0.0799%" height="15" fill="rgb(205,229,51)" fg:x="128" fg:w="1"/><text x="10.4818%" y="735.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="10.2318%" y="709" width="0.0799%" height="15" fill="rgb(223,189,4)" fg:x="128" fg:w="1"/><text x="10.4818%" y="719.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="10.3118%" y="805" width="0.0799%" height="15" fill="rgb(249,167,54)" fg:x="129" fg:w="1"/><text x="10.5618%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="10.3118%" y="789" width="0.0799%" height="15" fill="rgb(218,34,28)" fg:x="129" fg:w="1"/><text x="10.5618%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="10.3118%" y="773" width="0.0799%" height="15" fill="rgb(232,109,42)" fg:x="129" fg:w="1"/><text x="10.5618%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="10.3118%" y="757" width="0.0799%" height="15" fill="rgb(248,214,46)" fg:x="129" fg:w="1"/><text x="10.5618%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.3118%" y="741" width="0.0799%" height="15" fill="rgb(244,216,40)" fg:x="129" fg:w="1"/><text x="10.5618%" y="751.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="10.3118%" y="725" width="0.0799%" height="15" fill="rgb(231,226,31)" fg:x="129" fg:w="1"/><text x="10.5618%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.3118%" y="709" width="0.0799%" height="15" fill="rgb(238,38,43)" fg:x="129" fg:w="1"/><text x="10.5618%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.4716%" y="741" width="0.0799%" height="15" fill="rgb(208,88,43)" fg:x="131" fg:w="1"/><text x="10.7216%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="10.4716%" y="725" width="0.0799%" height="15" fill="rgb(205,136,37)" fg:x="131" fg:w="1"/><text x="10.7216%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="10.4716%" y="709" width="0.0799%" height="15" fill="rgb(237,34,14)" fg:x="131" fg:w="1"/><text x="10.7216%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.4716%" y="693" width="0.0799%" height="15" fill="rgb(236,193,44)" fg:x="131" fg:w="1"/><text x="10.7216%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.4716%" y="677" width="0.0799%" height="15" fill="rgb(231,48,10)" fg:x="131" fg:w="1"/><text x="10.7216%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.4716%" y="661" width="0.0799%" height="15" fill="rgb(213,141,34)" fg:x="131" fg:w="1"/><text x="10.7216%" y="671.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="10.5516%" y="725" width="0.0799%" height="15" fill="rgb(249,130,34)" fg:x="132" fg:w="1"/><text x="10.8016%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="10.5516%" y="709" width="0.0799%" height="15" fill="rgb(219,42,41)" fg:x="132" fg:w="1"/><text x="10.8016%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5516%" y="693" width="0.0799%" height="15" fill="rgb(224,100,54)" fg:x="132" fg:w="1"/><text x="10.8016%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5516%" y="677" width="0.0799%" height="15" fill="rgb(229,200,27)" fg:x="132" fg:w="1"/><text x="10.8016%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5516%" y="661" width="0.0799%" height="15" fill="rgb(217,118,10)" fg:x="132" fg:w="1"/><text x="10.8016%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5516%" y="645" width="0.0799%" height="15" fill="rgb(206,22,3)" fg:x="132" fg:w="1"/><text x="10.8016%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.5516%" y="629" width="0.0799%" height="15" fill="rgb(232,163,46)" fg:x="132" fg:w="1"/><text x="10.8016%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5516%" y="613" width="0.0799%" height="15" fill="rgb(206,95,13)" fg:x="132" fg:w="1"/><text x="10.8016%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.5516%" y="597" width="0.0799%" height="15" fill="rgb(253,154,18)" fg:x="132" fg:w="1"/><text x="10.8016%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.5516%" y="581" width="0.0799%" height="15" fill="rgb(219,32,23)" fg:x="132" fg:w="1"/><text x="10.8016%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6315%" y="693" width="0.0799%" height="15" fill="rgb(230,191,45)" fg:x="133" fg:w="1"/><text x="10.8815%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6315%" y="677" width="0.0799%" height="15" fill="rgb(229,64,36)" fg:x="133" fg:w="1"/><text x="10.8815%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="10.3917%" y="789" width="0.3997%" height="15" fill="rgb(205,129,25)" fg:x="130" fg:w="5"/><text x="10.6417%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="10.3917%" y="773" width="0.3997%" height="15" fill="rgb(254,112,7)" fg:x="130" fg:w="5"/><text x="10.6417%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="10.4716%" y="757" width="0.3197%" height="15" fill="rgb(226,53,48)" fg:x="131" fg:w="4"/><text x="10.7216%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="10.5516%" y="741" width="0.2398%" height="15" fill="rgb(214,153,38)" fg:x="132" fg:w="3"/><text x="10.8016%" y="751.50"></text></g><g><title>kernel::model::scopes::save_props (2 samples, 0.16%)</title><rect x="10.6315%" y="725" width="0.1599%" height="15" fill="rgb(243,101,7)" fg:x="133" fg:w="2"/><text x="10.8815%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (2 samples, 0.16%)</title><rect x="10.6315%" y="709" width="0.1599%" height="15" fill="rgb(240,140,22)" fg:x="133" fg:w="2"/><text x="10.8815%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="10.7114%" y="693" width="0.0799%" height="15" fill="rgb(235,114,2)" fg:x="134" fg:w="1"/><text x="10.9614%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7114%" y="677" width="0.0799%" height="15" fill="rgb(242,59,12)" fg:x="134" fg:w="1"/><text x="10.9614%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.7114%" y="661" width="0.0799%" height="15" fill="rgb(252,134,9)" fg:x="134" fg:w="1"/><text x="10.9614%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7114%" y="645" width="0.0799%" height="15" fill="rgb(236,4,44)" fg:x="134" fg:w="1"/><text x="10.9614%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7114%" y="629" width="0.0799%" height="15" fill="rgb(254,172,41)" fg:x="134" fg:w="1"/><text x="10.9614%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.7114%" y="613" width="0.0799%" height="15" fill="rgb(244,63,20)" fg:x="134" fg:w="1"/><text x="10.9614%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.7114%" y="597" width="0.0799%" height="15" fill="rgb(250,73,31)" fg:x="134" fg:w="1"/><text x="10.9614%" y="607.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="10.7914%" y="773" width="0.0799%" height="15" fill="rgb(241,38,36)" fg:x="135" fg:w="1"/><text x="11.0414%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="10.7914%" y="757" width="0.0799%" height="15" fill="rgb(245,211,2)" fg:x="135" fg:w="1"/><text x="11.0414%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.7914%" y="741" width="0.0799%" height="15" fill="rgb(206,120,28)" fg:x="135" fg:w="1"/><text x="11.0414%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="10.7914%" y="725" width="0.0799%" height="15" fill="rgb(211,59,34)" fg:x="135" fg:w="1"/><text x="11.0414%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="10.7914%" y="709" width="0.0799%" height="15" fill="rgb(233,168,5)" fg:x="135" fg:w="1"/><text x="11.0414%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.7914%" y="693" width="0.0799%" height="15" fill="rgb(234,33,13)" fg:x="135" fg:w="1"/><text x="11.0414%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7914%" y="677" width="0.0799%" height="15" fill="rgb(231,150,26)" fg:x="135" fg:w="1"/><text x="11.0414%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.7914%" y="661" width="0.0799%" height="15" fill="rgb(217,191,4)" fg:x="135" fg:w="1"/><text x="11.0414%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7914%" y="645" width="0.0799%" height="15" fill="rgb(246,198,38)" fg:x="135" fg:w="1"/><text x="11.0414%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.7914%" y="629" width="0.0799%" height="15" fill="rgb(245,64,37)" fg:x="135" fg:w="1"/><text x="11.0414%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.7914%" y="613" width="0.0799%" height="15" fill="rgb(250,30,36)" fg:x="135" fg:w="1"/><text x="11.0414%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.7914%" y="597" width="0.0799%" height="15" fill="rgb(217,86,53)" fg:x="135" fg:w="1"/><text x="11.0414%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.7914%" y="581" width="0.0799%" height="15" fill="rgb(228,157,16)" fg:x="135" fg:w="1"/><text x="11.0414%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.7914%" y="565" width="0.0799%" height="15" fill="rgb(217,59,31)" fg:x="135" fg:w="1"/><text x="11.0414%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="10.8713%" y="725" width="0.0799%" height="15" fill="rgb(237,138,41)" fg:x="136" fg:w="1"/><text x="11.1213%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="10.8713%" y="709" width="0.0799%" height="15" fill="rgb(227,91,49)" fg:x="136" fg:w="1"/><text x="11.1213%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="10.8713%" y="693" width="0.0799%" height="15" fill="rgb(247,21,44)" fg:x="136" fg:w="1"/><text x="11.1213%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8713%" y="677" width="0.0799%" height="15" fill="rgb(219,210,51)" fg:x="136" fg:w="1"/><text x="11.1213%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.8713%" y="661" width="0.0799%" height="15" fill="rgb(209,140,6)" fg:x="136" fg:w="1"/><text x="11.1213%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.8713%" y="645" width="0.0799%" height="15" fill="rgb(221,188,24)" fg:x="136" fg:w="1"/><text x="11.1213%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.8713%" y="629" width="0.0799%" height="15" fill="rgb(232,154,20)" fg:x="136" fg:w="1"/><text x="11.1213%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9512%" y="677" width="0.0799%" height="15" fill="rgb(244,137,50)" fg:x="137" fg:w="1"/><text x="11.2012%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9512%" y="661" width="0.0799%" height="15" fill="rgb(225,185,43)" fg:x="137" fg:w="1"/><text x="11.2012%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9512%" y="645" width="0.0799%" height="15" fill="rgb(213,205,38)" fg:x="137" fg:w="1"/><text x="11.2012%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9512%" y="629" width="0.0799%" height="15" fill="rgb(236,73,12)" fg:x="137" fg:w="1"/><text x="11.2012%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9512%" y="613" width="0.0799%" height="15" fill="rgb(235,219,13)" fg:x="137" fg:w="1"/><text x="11.2012%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9512%" y="597" width="0.0799%" height="15" fill="rgb(218,59,36)" fg:x="137" fg:w="1"/><text x="11.2012%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.9512%" y="581" width="0.0799%" height="15" fill="rgb(205,110,39)" fg:x="137" fg:w="1"/><text x="11.2012%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.9512%" y="565" width="0.0799%" height="15" fill="rgb(218,206,42)" fg:x="137" fg:w="1"/><text x="11.2012%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.9512%" y="549" width="0.0799%" height="15" fill="rgb(248,125,24)" fg:x="137" fg:w="1"/><text x="11.2012%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.9512%" y="533" width="0.0799%" height="15" fill="rgb(242,28,27)" fg:x="137" fg:w="1"/><text x="11.2012%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.9512%" y="517" width="0.0799%" height="15" fill="rgb(216,228,15)" fg:x="137" fg:w="1"/><text x="11.2012%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.9512%" y="501" width="0.0799%" height="15" fill="rgb(235,116,46)" fg:x="137" fg:w="1"/><text x="11.2012%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.9512%" y="485" width="0.0799%" height="15" fill="rgb(224,18,32)" fg:x="137" fg:w="1"/><text x="11.2012%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.9512%" y="469" width="0.0799%" height="15" fill="rgb(252,5,12)" fg:x="137" fg:w="1"/><text x="11.2012%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.9512%" y="453" width="0.0799%" height="15" fill="rgb(251,36,5)" fg:x="137" fg:w="1"/><text x="11.2012%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9512%" y="437" width="0.0799%" height="15" fill="rgb(217,53,14)" fg:x="137" fg:w="1"/><text x="11.2012%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (69 samples, 5.52%)</title><rect x="5.5955%" y="821" width="5.5156%" height="15" fill="rgb(215,86,45)" fg:x="70" fg:w="69"/><text x="5.8455%" y="831.50">plugins..</text></g><g><title>plugins_core::build::Build::occupying (9 samples, 0.72%)</title><rect x="10.3917%" y="805" width="0.7194%" height="15" fill="rgb(242,169,11)" fg:x="130" fg:w="9"/><text x="10.6417%" y="815.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="10.7914%" y="789" width="0.3197%" height="15" fill="rgb(211,213,45)" fg:x="135" fg:w="4"/><text x="11.0414%" y="799.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (3 samples, 0.24%)</title><rect x="10.8713%" y="773" width="0.2398%" height="15" fill="rgb(205,88,11)" fg:x="136" fg:w="3"/><text x="11.1213%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="10.8713%" y="757" width="0.2398%" height="15" fill="rgb(252,69,26)" fg:x="136" fg:w="3"/><text x="11.1213%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="10.8713%" y="741" width="0.2398%" height="15" fill="rgb(246,123,37)" fg:x="136" fg:w="3"/><text x="11.1213%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="10.9512%" y="725" width="0.1599%" height="15" fill="rgb(212,205,5)" fg:x="137" fg:w="2"/><text x="11.2012%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="10.9512%" y="709" width="0.1599%" height="15" fill="rgb(253,148,0)" fg:x="137" fg:w="2"/><text x="11.2012%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="10.9512%" y="693" width="0.1599%" height="15" fill="rgb(239,22,4)" fg:x="137" fg:w="2"/><text x="11.2012%" y="703.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.0312%" y="677" width="0.0799%" height="15" fill="rgb(226,26,53)" fg:x="138" fg:w="1"/><text x="11.2812%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0312%" y="661" width="0.0799%" height="15" fill="rgb(225,229,45)" fg:x="138" fg:w="1"/><text x="11.2812%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.0312%" y="645" width="0.0799%" height="15" fill="rgb(220,60,37)" fg:x="138" fg:w="1"/><text x="11.2812%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0312%" y="629" width="0.0799%" height="15" fill="rgb(217,180,35)" fg:x="138" fg:w="1"/><text x="11.2812%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.0312%" y="613" width="0.0799%" height="15" fill="rgb(229,7,53)" fg:x="138" fg:w="1"/><text x="11.2812%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0312%" y="597" width="0.0799%" height="15" fill="rgb(254,137,3)" fg:x="138" fg:w="1"/><text x="11.2812%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.0312%" y="581" width="0.0799%" height="15" fill="rgb(215,140,41)" fg:x="138" fg:w="1"/><text x="11.2812%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0312%" y="565" width="0.0799%" height="15" fill="rgb(250,80,15)" fg:x="138" fg:w="1"/><text x="11.2812%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0312%" y="549" width="0.0799%" height="15" fill="rgb(252,191,6)" fg:x="138" fg:w="1"/><text x="11.2812%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0312%" y="533" width="0.0799%" height="15" fill="rgb(246,217,18)" fg:x="138" fg:w="1"/><text x="11.2812%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="11.0312%" y="517" width="0.0799%" height="15" fill="rgb(223,93,7)" fg:x="138" fg:w="1"/><text x="11.2812%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="11.0312%" y="501" width="0.0799%" height="15" fill="rgb(225,55,52)" fg:x="138" fg:w="1"/><text x="11.2812%" y="511.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="11.0312%" y="485" width="0.0799%" height="15" fill="rgb(240,31,24)" fg:x="138" fg:w="1"/><text x="11.2812%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.1111%" y="741" width="0.0799%" height="15" fill="rgb(205,56,52)" fg:x="139" fg:w="1"/><text x="11.3611%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="11.1111%" y="725" width="0.0799%" height="15" fill="rgb(246,146,12)" fg:x="139" fg:w="1"/><text x="11.3611%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="11.1111%" y="709" width="0.0799%" height="15" fill="rgb(239,84,36)" fg:x="139" fg:w="1"/><text x="11.3611%" y="719.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="11.1111%" y="693" width="0.0799%" height="15" fill="rgb(207,41,40)" fg:x="139" fg:w="1"/><text x="11.3611%" y="703.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (118 samples, 9.43%)</title><rect x="1.8385%" y="837" width="9.4325%" height="15" fill="rgb(241,179,25)" fg:x="23" fg:w="118"/><text x="2.0885%" y="847.50">&lt;tests::Holdi..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="11.1111%" y="821" width="0.1599%" height="15" fill="rgb(210,0,34)" fg:x="139" fg:w="2"/><text x="11.3611%" y="831.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="11.1111%" y="805" width="0.1599%" height="15" fill="rgb(225,217,29)" fg:x="139" fg:w="2"/><text x="11.3611%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="11.1111%" y="789" width="0.1599%" height="15" fill="rgb(216,191,38)" fg:x="139" fg:w="2"/><text x="11.3611%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="11.1111%" y="773" width="0.1599%" height="15" fill="rgb(232,140,52)" fg:x="139" fg:w="2"/><text x="11.3611%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="11.1111%" y="757" width="0.1599%" height="15" fill="rgb(223,158,51)" fg:x="139" fg:w="2"/><text x="11.3611%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="11.1910%" y="741" width="0.0799%" height="15" fill="rgb(235,29,51)" fg:x="140" fg:w="1"/><text x="11.4410%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="11.1910%" y="725" width="0.0799%" height="15" fill="rgb(215,181,18)" fg:x="140" fg:w="1"/><text x="11.4410%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="11.1910%" y="709" width="0.0799%" height="15" fill="rgb(227,125,34)" fg:x="140" fg:w="1"/><text x="11.4410%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.1910%" y="693" width="0.0799%" height="15" fill="rgb(230,197,49)" fg:x="140" fg:w="1"/><text x="11.4410%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1910%" y="677" width="0.0799%" height="15" fill="rgb(239,141,16)" fg:x="140" fg:w="1"/><text x="11.4410%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.1910%" y="661" width="0.0799%" height="15" fill="rgb(225,105,43)" fg:x="140" fg:w="1"/><text x="11.4410%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1910%" y="645" width="0.0799%" height="15" fill="rgb(214,131,14)" fg:x="140" fg:w="1"/><text x="11.4410%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.1910%" y="629" width="0.0799%" height="15" fill="rgb(229,177,11)" fg:x="140" fg:w="1"/><text x="11.4410%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1910%" y="613" width="0.0799%" height="15" fill="rgb(231,180,14)" fg:x="140" fg:w="1"/><text x="11.4410%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.1910%" y="597" width="0.0799%" height="15" fill="rgb(232,88,2)" fg:x="140" fg:w="1"/><text x="11.4410%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1910%" y="581" width="0.0799%" height="15" fill="rgb(205,220,8)" fg:x="140" fg:w="1"/><text x="11.4410%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.1910%" y="565" width="0.0799%" height="15" fill="rgb(225,23,53)" fg:x="140" fg:w="1"/><text x="11.4410%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.1910%" y="549" width="0.0799%" height="15" fill="rgb(213,62,29)" fg:x="140" fg:w="1"/><text x="11.4410%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.1910%" y="533" width="0.0799%" height="15" fill="rgb(227,75,7)" fg:x="140" fg:w="1"/><text x="11.4410%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="11.2710%" y="709" width="0.0799%" height="15" fill="rgb(207,105,14)" fg:x="141" fg:w="1"/><text x="11.5210%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.2710%" y="693" width="0.0799%" height="15" fill="rgb(245,62,29)" fg:x="141" fg:w="1"/><text x="11.5210%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="11.2710%" y="677" width="0.0799%" height="15" fill="rgb(236,202,4)" fg:x="141" fg:w="1"/><text x="11.5210%" y="687.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.2710%" y="661" width="0.0799%" height="15" fill="rgb(250,67,1)" fg:x="141" fg:w="1"/><text x="11.5210%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.2710%" y="645" width="0.0799%" height="15" fill="rgb(253,115,44)" fg:x="141" fg:w="1"/><text x="11.5210%" y="655.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="11.2710%" y="629" width="0.0799%" height="15" fill="rgb(251,139,18)" fg:x="141" fg:w="1"/><text x="11.5210%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="11.2710%" y="613" width="0.0799%" height="15" fill="rgb(218,22,32)" fg:x="141" fg:w="1"/><text x="11.5210%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="11.2710%" y="597" width="0.0799%" height="15" fill="rgb(243,53,5)" fg:x="141" fg:w="1"/><text x="11.5210%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="11.2710%" y="581" width="0.0799%" height="15" fill="rgb(227,56,16)" fg:x="141" fg:w="1"/><text x="11.5210%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="11.2710%" y="565" width="0.0799%" height="15" fill="rgb(245,53,0)" fg:x="141" fg:w="1"/><text x="11.5210%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="11.2710%" y="549" width="0.0799%" height="15" fill="rgb(216,170,35)" fg:x="141" fg:w="1"/><text x="11.5210%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.2710%" y="533" width="0.0799%" height="15" fill="rgb(211,200,8)" fg:x="141" fg:w="1"/><text x="11.5210%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="11.2710%" y="517" width="0.0799%" height="15" fill="rgb(228,204,44)" fg:x="141" fg:w="1"/><text x="11.5210%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.08%)</title><rect x="11.2710%" y="501" width="0.0799%" height="15" fill="rgb(214,121,17)" fg:x="141" fg:w="1"/><text x="11.5210%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="11.2710%" y="821" width="0.1599%" height="15" fill="rgb(233,64,38)" fg:x="141" fg:w="2"/><text x="11.5210%" y="831.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="11.2710%" y="805" width="0.1599%" height="15" fill="rgb(253,54,19)" fg:x="141" fg:w="2"/><text x="11.5210%" y="815.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="11.2710%" y="789" width="0.1599%" height="15" fill="rgb(253,94,18)" fg:x="141" fg:w="2"/><text x="11.5210%" y="799.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="11.2710%" y="773" width="0.1599%" height="15" fill="rgb(227,57,52)" fg:x="141" fg:w="2"/><text x="11.5210%" y="783.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="11.2710%" y="757" width="0.1599%" height="15" fill="rgb(230,228,50)" fg:x="141" fg:w="2"/><text x="11.5210%" y="767.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="11.2710%" y="741" width="0.1599%" height="15" fill="rgb(217,205,27)" fg:x="141" fg:w="2"/><text x="11.5210%" y="751.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="11.2710%" y="725" width="0.1599%" height="15" fill="rgb(252,71,50)" fg:x="141" fg:w="2"/><text x="11.5210%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="11.3509%" y="709" width="0.0799%" height="15" fill="rgb(209,86,4)" fg:x="142" fg:w="1"/><text x="11.6009%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="11.3509%" y="693" width="0.0799%" height="15" fill="rgb(229,94,0)" fg:x="142" fg:w="1"/><text x="11.6009%" y="703.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.3509%" y="677" width="0.0799%" height="15" fill="rgb(252,223,21)" fg:x="142" fg:w="1"/><text x="11.6009%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.3509%" y="661" width="0.0799%" height="15" fill="rgb(230,210,4)" fg:x="142" fg:w="1"/><text x="11.6009%" y="671.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="11.3509%" y="645" width="0.0799%" height="15" fill="rgb(240,149,38)" fg:x="142" fg:w="1"/><text x="11.6009%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="11.3509%" y="629" width="0.0799%" height="15" fill="rgb(254,105,20)" fg:x="142" fg:w="1"/><text x="11.6009%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="11.3509%" y="613" width="0.0799%" height="15" fill="rgb(253,87,46)" fg:x="142" fg:w="1"/><text x="11.6009%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="11.3509%" y="597" width="0.0799%" height="15" fill="rgb(253,116,33)" fg:x="142" fg:w="1"/><text x="11.6009%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="11.3509%" y="581" width="0.0799%" height="15" fill="rgb(229,198,5)" fg:x="142" fg:w="1"/><text x="11.6009%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="11.3509%" y="565" width="0.0799%" height="15" fill="rgb(242,38,37)" fg:x="142" fg:w="1"/><text x="11.6009%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.08%)</title><rect x="11.3509%" y="549" width="0.0799%" height="15" fill="rgb(242,69,53)" fg:x="142" fg:w="1"/><text x="11.6009%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.08%)</title><rect x="11.3509%" y="533" width="0.0799%" height="15" fill="rgb(249,80,16)" fg:x="142" fg:w="1"/><text x="11.6009%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="11.4309%" y="805" width="0.0799%" height="15" fill="rgb(206,128,11)" fg:x="143" fg:w="1"/><text x="11.6809%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4309%" y="789" width="0.0799%" height="15" fill="rgb(212,35,20)" fg:x="143" fg:w="1"/><text x="11.6809%" y="799.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.5108%" y="805" width="0.0799%" height="15" fill="rgb(236,79,13)" fg:x="144" fg:w="1"/><text x="11.7608%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="11.5108%" y="789" width="0.0799%" height="15" fill="rgb(233,123,3)" fg:x="144" fg:w="1"/><text x="11.7608%" y="799.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="11.5108%" y="773" width="0.0799%" height="15" fill="rgb(214,93,52)" fg:x="144" fg:w="1"/><text x="11.7608%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5108%" y="757" width="0.0799%" height="15" fill="rgb(251,37,40)" fg:x="144" fg:w="1"/><text x="11.7608%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5108%" y="741" width="0.0799%" height="15" fill="rgb(227,80,54)" fg:x="144" fg:w="1"/><text x="11.7608%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.5108%" y="725" width="0.0799%" height="15" fill="rgb(254,48,11)" fg:x="144" fg:w="1"/><text x="11.7608%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.5108%" y="709" width="0.0799%" height="15" fill="rgb(235,193,26)" fg:x="144" fg:w="1"/><text x="11.7608%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.5108%" y="693" width="0.0799%" height="15" fill="rgb(229,99,21)" fg:x="144" fg:w="1"/><text x="11.7608%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.5108%" y="677" width="0.0799%" height="15" fill="rgb(211,140,41)" fg:x="144" fg:w="1"/><text x="11.7608%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.5108%" y="661" width="0.0799%" height="15" fill="rgb(240,227,30)" fg:x="144" fg:w="1"/><text x="11.7608%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.5108%" y="645" width="0.0799%" height="15" fill="rgb(215,224,45)" fg:x="144" fg:w="1"/><text x="11.7608%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.5108%" y="629" width="0.0799%" height="15" fill="rgb(206,123,31)" fg:x="144" fg:w="1"/><text x="11.7608%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.5108%" y="613" width="0.0799%" height="15" fill="rgb(210,138,16)" fg:x="144" fg:w="1"/><text x="11.7608%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.5108%" y="597" width="0.0799%" height="15" fill="rgb(228,57,28)" fg:x="144" fg:w="1"/><text x="11.7608%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5907%" y="773" width="0.0799%" height="15" fill="rgb(242,170,10)" fg:x="145" fg:w="1"/><text x="11.8407%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.5907%" y="757" width="0.0799%" height="15" fill="rgb(228,214,39)" fg:x="145" fg:w="1"/><text x="11.8407%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.5907%" y="741" width="0.0799%" height="15" fill="rgb(218,179,33)" fg:x="145" fg:w="1"/><text x="11.8407%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.5907%" y="725" width="0.0799%" height="15" fill="rgb(235,193,39)" fg:x="145" fg:w="1"/><text x="11.8407%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.5907%" y="709" width="0.0799%" height="15" fill="rgb(219,221,36)" fg:x="145" fg:w="1"/><text x="11.8407%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.5907%" y="693" width="0.0799%" height="15" fill="rgb(248,218,19)" fg:x="145" fg:w="1"/><text x="11.8407%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.5907%" y="677" width="0.0799%" height="15" fill="rgb(205,50,9)" fg:x="145" fg:w="1"/><text x="11.8407%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.5907%" y="661" width="0.0799%" height="15" fill="rgb(238,81,28)" fg:x="145" fg:w="1"/><text x="11.8407%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.5907%" y="645" width="0.0799%" height="15" fill="rgb(235,110,19)" fg:x="145" fg:w="1"/><text x="11.8407%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.5907%" y="629" width="0.0799%" height="15" fill="rgb(214,7,14)" fg:x="145" fg:w="1"/><text x="11.8407%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.5907%" y="613" width="0.0799%" height="15" fill="rgb(211,77,3)" fg:x="145" fg:w="1"/><text x="11.8407%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="11.5907%" y="597" width="0.0799%" height="15" fill="rgb(229,5,9)" fg:x="145" fg:w="1"/><text x="11.8407%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="11.5907%" y="581" width="0.0799%" height="15" fill="rgb(225,90,11)" fg:x="145" fg:w="1"/><text x="11.8407%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="11.7506%" y="741" width="0.2398%" height="15" fill="rgb(242,56,8)" fg:x="147" fg:w="3"/><text x="12.0006%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.8305%" y="725" width="0.1599%" height="15" fill="rgb(249,212,39)" fg:x="148" fg:w="2"/><text x="12.0805%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.9904%" y="725" width="0.0799%" height="15" fill="rgb(236,90,9)" fg:x="150" fg:w="1"/><text x="12.2404%" y="735.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="12.0703%" y="677" width="0.2398%" height="15" fill="rgb(206,88,35)" fg:x="151" fg:w="3"/><text x="12.3203%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.2302%" y="661" width="0.0799%" height="15" fill="rgb(205,126,30)" fg:x="153" fg:w="1"/><text x="12.4802%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.2302%" y="645" width="0.0799%" height="15" fill="rgb(230,176,12)" fg:x="153" fg:w="1"/><text x="12.4802%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.2302%" y="629" width="0.0799%" height="15" fill="rgb(243,19,9)" fg:x="153" fg:w="1"/><text x="12.4802%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="12.0703%" y="709" width="0.3197%" height="15" fill="rgb(245,171,17)" fg:x="151" fg:w="4"/><text x="12.3203%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="12.0703%" y="693" width="0.3197%" height="15" fill="rgb(227,52,21)" fg:x="151" fg:w="4"/><text x="12.3203%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.3102%" y="677" width="0.0799%" height="15" fill="rgb(238,69,14)" fg:x="154" fg:w="1"/><text x="12.5602%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.3102%" y="661" width="0.0799%" height="15" fill="rgb(241,156,39)" fg:x="154" fg:w="1"/><text x="12.5602%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="12.3102%" y="645" width="0.0799%" height="15" fill="rgb(212,227,28)" fg:x="154" fg:w="1"/><text x="12.5602%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="11.9904%" y="741" width="0.4796%" height="15" fill="rgb(209,118,27)" fg:x="150" fg:w="6"/><text x="12.2404%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="12.0703%" y="725" width="0.3997%" height="15" fill="rgb(226,102,5)" fg:x="151" fg:w="5"/><text x="12.3203%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.3901%" y="709" width="0.0799%" height="15" fill="rgb(223,34,3)" fg:x="155" fg:w="1"/><text x="12.6401%" y="719.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="11.6707%" y="773" width="0.8793%" height="15" fill="rgb(221,81,38)" fg:x="146" fg:w="11"/><text x="11.9207%" y="783.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="11.7506%" y="757" width="0.7994%" height="15" fill="rgb(236,219,28)" fg:x="147" fg:w="10"/><text x="12.0006%" y="767.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.4700%" y="741" width="0.0799%" height="15" fill="rgb(213,200,14)" fg:x="156" fg:w="1"/><text x="12.7200%" y="751.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.4700%" y="725" width="0.0799%" height="15" fill="rgb(240,33,19)" fg:x="156" fg:w="1"/><text x="12.7200%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.4700%" y="709" width="0.0799%" height="15" fill="rgb(233,113,27)" fg:x="156" fg:w="1"/><text x="12.7200%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7098%" y="725" width="0.0799%" height="15" fill="rgb(220,221,18)" fg:x="159" fg:w="1"/><text x="12.9598%" y="735.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.7898%" y="725" width="0.0799%" height="15" fill="rgb(238,92,8)" fg:x="160" fg:w="1"/><text x="13.0398%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.7898%" y="709" width="0.0799%" height="15" fill="rgb(222,164,16)" fg:x="160" fg:w="1"/><text x="13.0398%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="12.5500%" y="773" width="0.3997%" height="15" fill="rgb(241,119,3)" fg:x="157" fg:w="5"/><text x="12.8000%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="12.6299%" y="757" width="0.3197%" height="15" fill="rgb(241,44,8)" fg:x="158" fg:w="4"/><text x="12.8799%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="12.6299%" y="741" width="0.3197%" height="15" fill="rgb(230,36,40)" fg:x="158" fg:w="4"/><text x="12.8799%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8697%" y="725" width="0.0799%" height="15" fill="rgb(243,16,36)" fg:x="161" fg:w="1"/><text x="13.1197%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8697%" y="709" width="0.0799%" height="15" fill="rgb(231,4,26)" fg:x="161" fg:w="1"/><text x="13.1197%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.8697%" y="693" width="0.0799%" height="15" fill="rgb(240,9,31)" fg:x="161" fg:w="1"/><text x="13.1197%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.8697%" y="677" width="0.0799%" height="15" fill="rgb(207,173,15)" fg:x="161" fg:w="1"/><text x="13.1197%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8697%" y="661" width="0.0799%" height="15" fill="rgb(224,192,53)" fg:x="161" fg:w="1"/><text x="13.1197%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.9496%" y="709" width="0.0799%" height="15" fill="rgb(223,67,28)" fg:x="162" fg:w="1"/><text x="13.1996%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1095%" y="677" width="0.0799%" height="15" fill="rgb(211,20,47)" fg:x="164" fg:w="1"/><text x="13.3595%" y="687.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.1894%" y="661" width="0.1599%" height="15" fill="rgb(240,228,2)" fg:x="165" fg:w="2"/><text x="13.4394%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="13.3493%" y="661" width="0.0799%" height="15" fill="rgb(248,151,12)" fg:x="167" fg:w="1"/><text x="13.5993%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="13.3493%" y="645" width="0.0799%" height="15" fill="rgb(244,8,39)" fg:x="167" fg:w="1"/><text x="13.5993%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.3493%" y="629" width="0.0799%" height="15" fill="rgb(222,26,8)" fg:x="167" fg:w="1"/><text x="13.5993%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.4293%" y="645" width="0.0799%" height="15" fill="rgb(213,106,44)" fg:x="168" fg:w="1"/><text x="13.6793%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.4293%" y="629" width="0.0799%" height="15" fill="rgb(214,129,20)" fg:x="168" fg:w="1"/><text x="13.6793%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="12.9496%" y="741" width="0.6395%" height="15" fill="rgb(212,32,13)" fg:x="162" fg:w="8"/><text x="13.1996%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="12.9496%" y="725" width="0.6395%" height="15" fill="rgb(208,168,33)" fg:x="162" fg:w="8"/><text x="13.1996%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="13.0296%" y="709" width="0.5596%" height="15" fill="rgb(231,207,8)" fg:x="163" fg:w="7"/><text x="13.2796%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="13.1095%" y="693" width="0.4796%" height="15" fill="rgb(235,219,23)" fg:x="164" fg:w="6"/><text x="13.3595%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="13.1894%" y="677" width="0.3997%" height="15" fill="rgb(226,216,26)" fg:x="165" fg:w="5"/><text x="13.4394%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="13.4293%" y="661" width="0.1599%" height="15" fill="rgb(239,137,16)" fg:x="168" fg:w="2"/><text x="13.6793%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.5092%" y="645" width="0.0799%" height="15" fill="rgb(207,12,36)" fg:x="169" fg:w="1"/><text x="13.7592%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.5092%" y="629" width="0.0799%" height="15" fill="rgb(210,214,24)" fg:x="169" fg:w="1"/><text x="13.7592%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.5092%" y="613" width="0.0799%" height="15" fill="rgb(206,56,30)" fg:x="169" fg:w="1"/><text x="13.7592%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="13.8289%" y="661" width="0.0799%" height="15" fill="rgb(228,143,26)" fg:x="173" fg:w="1"/><text x="14.0789%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="13.8289%" y="645" width="0.0799%" height="15" fill="rgb(216,218,46)" fg:x="173" fg:w="1"/><text x="14.0789%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="13.6691%" y="725" width="0.3197%" height="15" fill="rgb(206,6,19)" fg:x="171" fg:w="4"/><text x="13.9191%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.32%)</title><rect x="13.6691%" y="709" width="0.3197%" height="15" fill="rgb(239,177,51)" fg:x="171" fg:w="4"/><text x="13.9191%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="13.8289%" y="693" width="0.1599%" height="15" fill="rgb(216,55,25)" fg:x="173" fg:w="2"/><text x="14.0789%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="13.8289%" y="677" width="0.1599%" height="15" fill="rgb(231,163,29)" fg:x="173" fg:w="2"/><text x="14.0789%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.9089%" y="661" width="0.0799%" height="15" fill="rgb(232,149,50)" fg:x="174" fg:w="1"/><text x="14.1589%" y="671.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (14 samples, 1.12%)</title><rect x="12.9496%" y="757" width="1.1191%" height="15" fill="rgb(223,142,48)" fg:x="162" fg:w="14"/><text x="13.1996%" y="767.50"></text></g><g><title>treediff::diff::diff (6 samples, 0.48%)</title><rect x="13.5891%" y="741" width="0.4796%" height="15" fill="rgb(245,83,23)" fg:x="170" fg:w="6"/><text x="13.8391%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="13.9888%" y="725" width="0.0799%" height="15" fill="rgb(224,63,2)" fg:x="175" fg:w="1"/><text x="14.2388%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.9888%" y="709" width="0.0799%" height="15" fill="rgb(218,65,53)" fg:x="175" fg:w="1"/><text x="14.2388%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9888%" y="693" width="0.0799%" height="15" fill="rgb(221,84,29)" fg:x="175" fg:w="1"/><text x="14.2388%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="14.0687%" y="725" width="0.0799%" height="15" fill="rgb(234,0,32)" fg:x="176" fg:w="1"/><text x="14.3187%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1487%" y="725" width="0.0799%" height="15" fill="rgb(206,20,16)" fg:x="177" fg:w="1"/><text x="14.3987%" y="735.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1487%" y="709" width="0.0799%" height="15" fill="rgb(244,172,18)" fg:x="177" fg:w="1"/><text x="14.3987%" y="719.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="14.1487%" y="693" width="0.0799%" height="15" fill="rgb(254,133,1)" fg:x="177" fg:w="1"/><text x="14.3987%" y="703.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="14.2286%" y="725" width="0.0799%" height="15" fill="rgb(222,206,41)" fg:x="178" fg:w="1"/><text x="14.4786%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.2286%" y="709" width="0.0799%" height="15" fill="rgb(212,3,42)" fg:x="178" fg:w="1"/><text x="14.4786%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.2286%" y="693" width="0.0799%" height="15" fill="rgb(241,11,4)" fg:x="178" fg:w="1"/><text x="14.4786%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="14.2286%" y="677" width="0.0799%" height="15" fill="rgb(205,19,26)" fg:x="178" fg:w="1"/><text x="14.4786%" y="687.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3086%" y="725" width="0.0799%" height="15" fill="rgb(210,179,32)" fg:x="179" fg:w="1"/><text x="14.5586%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.3086%" y="709" width="0.0799%" height="15" fill="rgb(227,116,49)" fg:x="179" fg:w="1"/><text x="14.5586%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3086%" y="693" width="0.0799%" height="15" fill="rgb(211,146,6)" fg:x="179" fg:w="1"/><text x="14.5586%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.5484%" y="709" width="0.0799%" height="15" fill="rgb(219,44,39)" fg:x="182" fg:w="1"/><text x="14.7984%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6283%" y="677" width="0.0799%" height="15" fill="rgb(234,128,11)" fg:x="183" fg:w="1"/><text x="14.8783%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.6283%" y="661" width="0.0799%" height="15" fill="rgb(220,183,53)" fg:x="183" fg:w="1"/><text x="14.8783%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6283%" y="645" width="0.0799%" height="15" fill="rgb(213,219,32)" fg:x="183" fg:w="1"/><text x="14.8783%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="14.7082%" y="661" width="0.0799%" height="15" fill="rgb(232,156,16)" fg:x="184" fg:w="1"/><text x="14.9582%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="14.7082%" y="677" width="0.1599%" height="15" fill="rgb(246,135,34)" fg:x="184" fg:w="2"/><text x="14.9582%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.7882%" y="661" width="0.0799%" height="15" fill="rgb(241,99,0)" fg:x="185" fg:w="1"/><text x="15.0382%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.0280%" y="565" width="0.0799%" height="15" fill="rgb(222,103,45)" fg:x="188" fg:w="1"/><text x="15.2780%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="14.9480%" y="629" width="0.2398%" height="15" fill="rgb(212,57,4)" fg:x="187" fg:w="3"/><text x="15.1980%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="14.9480%" y="613" width="0.2398%" height="15" fill="rgb(215,68,47)" fg:x="187" fg:w="3"/><text x="15.1980%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.0280%" y="597" width="0.1599%" height="15" fill="rgb(230,84,2)" fg:x="188" fg:w="2"/><text x="15.2780%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.0280%" y="581" width="0.1599%" height="15" fill="rgb(220,102,14)" fg:x="188" fg:w="2"/><text x="15.2780%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.1079%" y="565" width="0.0799%" height="15" fill="rgb(240,10,32)" fg:x="189" fg:w="1"/><text x="15.3579%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="14.6283%" y="693" width="0.6395%" height="15" fill="rgb(215,47,27)" fg:x="183" fg:w="8"/><text x="14.8783%" y="703.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="14.8681%" y="677" width="0.3997%" height="15" fill="rgb(233,188,43)" fg:x="186" fg:w="5"/><text x="15.1181%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="14.9480%" y="661" width="0.3197%" height="15" fill="rgb(253,190,1)" fg:x="187" fg:w="4"/><text x="15.1980%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="14.9480%" y="645" width="0.3197%" height="15" fill="rgb(206,114,52)" fg:x="187" fg:w="4"/><text x="15.1980%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.1878%" y="629" width="0.0799%" height="15" fill="rgb(233,120,37)" fg:x="190" fg:w="1"/><text x="15.4378%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.36%)</title><rect x="14.0687%" y="757" width="1.3589%" height="15" fill="rgb(214,52,39)" fg:x="176" fg:w="17"/><text x="14.3187%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.36%)</title><rect x="14.0687%" y="741" width="1.3589%" height="15" fill="rgb(223,80,29)" fg:x="176" fg:w="17"/><text x="14.3187%" y="751.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.04%)</title><rect x="14.3885%" y="725" width="1.0392%" height="15" fill="rgb(230,101,40)" fg:x="180" fg:w="13"/><text x="14.6385%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="14.6283%" y="709" width="0.7994%" height="15" fill="rgb(219,211,8)" fg:x="183" fg:w="10"/><text x="14.8783%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="15.2678%" y="693" width="0.1599%" height="15" fill="rgb(252,126,28)" fg:x="191" fg:w="2"/><text x="15.5178%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3477%" y="677" width="0.0799%" height="15" fill="rgb(215,56,38)" fg:x="192" fg:w="1"/><text x="15.5977%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="15.6675%" y="629" width="0.0799%" height="15" fill="rgb(249,55,44)" fg:x="196" fg:w="1"/><text x="15.9175%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.6675%" y="613" width="0.0799%" height="15" fill="rgb(220,221,32)" fg:x="196" fg:w="1"/><text x="15.9175%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.6675%" y="597" width="0.0799%" height="15" fill="rgb(212,216,41)" fg:x="196" fg:w="1"/><text x="15.9175%" y="607.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="15.6675%" y="581" width="0.0799%" height="15" fill="rgb(228,213,43)" fg:x="196" fg:w="1"/><text x="15.9175%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="15.5875%" y="661" width="0.3197%" height="15" fill="rgb(211,31,26)" fg:x="195" fg:w="4"/><text x="15.8375%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="15.6675%" y="645" width="0.2398%" height="15" fill="rgb(229,202,19)" fg:x="196" fg:w="3"/><text x="15.9175%" y="655.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="15.7474%" y="629" width="0.1599%" height="15" fill="rgb(229,105,46)" fg:x="197" fg:w="2"/><text x="15.9974%" y="639.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="15.8273%" y="613" width="0.0799%" height="15" fill="rgb(235,108,1)" fg:x="198" fg:w="1"/><text x="16.0773%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="15.5875%" y="693" width="0.5596%" height="15" fill="rgb(245,111,35)" fg:x="195" fg:w="7"/><text x="15.8375%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="15.5875%" y="677" width="0.5596%" height="15" fill="rgb(219,185,31)" fg:x="195" fg:w="7"/><text x="15.8375%" y="687.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="15.9073%" y="661" width="0.2398%" height="15" fill="rgb(214,4,43)" fg:x="199" fg:w="3"/><text x="16.1573%" y="671.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="15.9073%" y="645" width="0.2398%" height="15" fill="rgb(235,227,40)" fg:x="199" fg:w="3"/><text x="16.1573%" y="655.50"></text></g><g><title>engine::session::Session::save_entity_changes (62 samples, 4.96%)</title><rect x="11.4309%" y="821" width="4.9560%" height="15" fill="rgb(230,88,30)" fg:x="143" fg:w="62"/><text x="11.6809%" y="831.50">engine..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (60 samples, 4.80%)</title><rect x="11.5907%" y="805" width="4.7962%" height="15" fill="rgb(216,217,1)" fg:x="145" fg:w="60"/><text x="11.8407%" y="815.50">engine..</text></g><g><title>engine::session::SavesEntities::check_for_changes (60 samples, 4.80%)</title><rect x="11.5907%" y="789" width="4.7962%" height="15" fill="rgb(248,139,50)" fg:x="145" fg:w="60"/><text x="11.8407%" y="799.50">engine..</text></g><g><title>kernel::model::any_entity_changes (43 samples, 3.44%)</title><rect x="12.9496%" y="773" width="3.4373%" height="15" fill="rgb(233,1,21)" fg:x="162" fg:w="43"/><text x="13.1996%" y="783.50">ker..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (12 samples, 0.96%)</title><rect x="15.4277%" y="757" width="0.9592%" height="15" fill="rgb(215,183,12)" fg:x="193" fg:w="12"/><text x="15.6777%" y="767.50"></text></g><g><title>serde_json::de::from_trait (12 samples, 0.96%)</title><rect x="15.4277%" y="741" width="0.9592%" height="15" fill="rgb(229,104,42)" fg:x="193" fg:w="12"/><text x="15.6777%" y="751.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.96%)</title><rect x="15.4277%" y="725" width="0.9592%" height="15" fill="rgb(243,34,48)" fg:x="193" fg:w="12"/><text x="15.6777%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.96%)</title><rect x="15.4277%" y="709" width="0.9592%" height="15" fill="rgb(239,11,44)" fg:x="193" fg:w="12"/><text x="15.6777%" y="719.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="16.1471%" y="693" width="0.2398%" height="15" fill="rgb(231,98,35)" fg:x="202" fg:w="3"/><text x="16.3971%" y="703.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="16.3070%" y="677" width="0.0799%" height="15" fill="rgb(233,28,25)" fg:x="204" fg:w="1"/><text x="16.5570%" y="687.50"></text></g><g><title>engine::session::Session::close (66 samples, 5.28%)</title><rect x="11.2710%" y="837" width="5.2758%" height="15" fill="rgb(234,123,11)" fg:x="141" fg:w="66"/><text x="11.5210%" y="847.50">engine..</text></g><g><title>kernel::plugins::SessionPlugins::stop (2 samples, 0.16%)</title><rect x="16.3869%" y="821" width="0.1599%" height="15" fill="rgb(220,69,3)" fg:x="205" fg:w="2"/><text x="16.6369%" y="831.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="16.5468%" y="741" width="0.0799%" height="15" fill="rgb(214,64,36)" fg:x="207" fg:w="1"/><text x="16.7968%" y="751.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="16.5468%" y="725" width="0.0799%" height="15" fill="rgb(211,138,32)" fg:x="207" fg:w="1"/><text x="16.7968%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="16.6267%" y="693" width="0.0799%" height="15" fill="rgb(213,118,47)" fg:x="208" fg:w="1"/><text x="16.8767%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6267%" y="677" width="0.0799%" height="15" fill="rgb(243,124,49)" fg:x="208" fg:w="1"/><text x="16.8767%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.7066%" y="549" width="0.0799%" height="15" fill="rgb(221,30,28)" fg:x="209" fg:w="1"/><text x="16.9566%" y="559.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="16.7066%" y="533" width="0.0799%" height="15" fill="rgb(246,37,13)" fg:x="209" fg:w="1"/><text x="16.9566%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.7066%" y="517" width="0.0799%" height="15" fill="rgb(249,66,14)" fg:x="209" fg:w="1"/><text x="16.9566%" y="527.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="16.7866%" y="533" width="0.0799%" height="15" fill="rgb(213,166,5)" fg:x="210" fg:w="1"/><text x="17.0366%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.7866%" y="517" width="0.0799%" height="15" fill="rgb(221,66,24)" fg:x="210" fg:w="1"/><text x="17.0366%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="16.7066%" y="581" width="0.2398%" height="15" fill="rgb(210,132,17)" fg:x="209" fg:w="3"/><text x="16.9566%" y="591.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="16.7066%" y="565" width="0.2398%" height="15" fill="rgb(243,202,5)" fg:x="209" fg:w="3"/><text x="16.9566%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="16.7866%" y="549" width="0.1599%" height="15" fill="rgb(233,70,48)" fg:x="210" fg:w="2"/><text x="17.0366%" y="559.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="16.8665%" y="533" width="0.0799%" height="15" fill="rgb(238,41,26)" fg:x="211" fg:w="1"/><text x="17.1165%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="16.8665%" y="517" width="0.0799%" height="15" fill="rgb(241,19,31)" fg:x="211" fg:w="1"/><text x="17.1165%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8665%" y="501" width="0.0799%" height="15" fill="rgb(214,76,10)" fg:x="211" fg:w="1"/><text x="17.1165%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8665%" y="485" width="0.0799%" height="15" fill="rgb(254,202,22)" fg:x="211" fg:w="1"/><text x="17.1165%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8665%" y="469" width="0.0799%" height="15" fill="rgb(214,72,24)" fg:x="211" fg:w="1"/><text x="17.1165%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8665%" y="453" width="0.0799%" height="15" fill="rgb(221,92,46)" fg:x="211" fg:w="1"/><text x="17.1165%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8665%" y="437" width="0.0799%" height="15" fill="rgb(246,13,50)" fg:x="211" fg:w="1"/><text x="17.1165%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.8665%" y="421" width="0.0799%" height="15" fill="rgb(240,165,38)" fg:x="211" fg:w="1"/><text x="17.1165%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.8665%" y="405" width="0.0799%" height="15" fill="rgb(241,24,51)" fg:x="211" fg:w="1"/><text x="17.1165%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.8665%" y="389" width="0.0799%" height="15" fill="rgb(227,51,44)" fg:x="211" fg:w="1"/><text x="17.1165%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="16.8665%" y="373" width="0.0799%" height="15" fill="rgb(231,121,3)" fg:x="211" fg:w="1"/><text x="17.1165%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="16.8665%" y="357" width="0.0799%" height="15" fill="rgb(245,3,41)" fg:x="211" fg:w="1"/><text x="17.1165%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="16.9464%" y="565" width="0.0799%" height="15" fill="rgb(214,13,26)" fg:x="212" fg:w="1"/><text x="17.1964%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="16.9464%" y="549" width="0.0799%" height="15" fill="rgb(252,75,11)" fg:x="212" fg:w="1"/><text x="17.1964%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.9464%" y="533" width="0.0799%" height="15" fill="rgb(218,226,17)" fg:x="212" fg:w="1"/><text x="17.1964%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9464%" y="517" width="0.0799%" height="15" fill="rgb(248,89,38)" fg:x="212" fg:w="1"/><text x="17.1964%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.9464%" y="501" width="0.0799%" height="15" fill="rgb(237,73,46)" fg:x="212" fg:w="1"/><text x="17.1964%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9464%" y="485" width="0.0799%" height="15" fill="rgb(242,78,33)" fg:x="212" fg:w="1"/><text x="17.1964%" y="495.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="16.9464%" y="469" width="0.0799%" height="15" fill="rgb(235,60,3)" fg:x="212" fg:w="1"/><text x="17.1964%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="17.0264%" y="437" width="0.0799%" height="15" fill="rgb(216,172,19)" fg:x="213" fg:w="1"/><text x="17.2764%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0264%" y="421" width="0.0799%" height="15" fill="rgb(227,6,42)" fg:x="213" fg:w="1"/><text x="17.2764%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.0264%" y="405" width="0.0799%" height="15" fill="rgb(223,207,42)" fg:x="213" fg:w="1"/><text x="17.2764%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0264%" y="389" width="0.0799%" height="15" fill="rgb(246,138,30)" fg:x="213" fg:w="1"/><text x="17.2764%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.48%)</title><rect x="16.7066%" y="629" width="0.4796%" height="15" fill="rgb(251,199,47)" fg:x="209" fg:w="6"/><text x="16.9566%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="16.7066%" y="613" width="0.4796%" height="15" fill="rgb(228,218,44)" fg:x="209" fg:w="6"/><text x="16.9566%" y="623.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="16.7066%" y="597" width="0.4796%" height="15" fill="rgb(220,68,6)" fg:x="209" fg:w="6"/><text x="16.9566%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="16.9464%" y="581" width="0.2398%" height="15" fill="rgb(240,60,26)" fg:x="212" fg:w="3"/><text x="17.1964%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="17.0264%" y="565" width="0.1599%" height="15" fill="rgb(211,200,19)" fg:x="213" fg:w="2"/><text x="17.2764%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.0264%" y="549" width="0.1599%" height="15" fill="rgb(242,145,30)" fg:x="213" fg:w="2"/><text x="17.2764%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="17.0264%" y="533" width="0.1599%" height="15" fill="rgb(225,64,13)" fg:x="213" fg:w="2"/><text x="17.2764%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.0264%" y="517" width="0.1599%" height="15" fill="rgb(218,103,35)" fg:x="213" fg:w="2"/><text x="17.2764%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="17.0264%" y="501" width="0.1599%" height="15" fill="rgb(216,93,46)" fg:x="213" fg:w="2"/><text x="17.2764%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.0264%" y="485" width="0.1599%" height="15" fill="rgb(225,159,27)" fg:x="213" fg:w="2"/><text x="17.2764%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="17.0264%" y="469" width="0.1599%" height="15" fill="rgb(225,204,11)" fg:x="213" fg:w="2"/><text x="17.2764%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="17.0264%" y="453" width="0.1599%" height="15" fill="rgb(205,56,4)" fg:x="213" fg:w="2"/><text x="17.2764%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.1063%" y="437" width="0.0799%" height="15" fill="rgb(206,6,35)" fg:x="214" fg:w="1"/><text x="17.3563%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.1063%" y="421" width="0.0799%" height="15" fill="rgb(247,73,52)" fg:x="214" fg:w="1"/><text x="17.3563%" y="431.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (7 samples, 0.56%)</title><rect x="16.7066%" y="693" width="0.5596%" height="15" fill="rgb(246,97,4)" fg:x="209" fg:w="7"/><text x="16.9566%" y="703.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.56%)</title><rect x="16.7066%" y="677" width="0.5596%" height="15" fill="rgb(212,37,15)" fg:x="209" fg:w="7"/><text x="16.9566%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.56%)</title><rect x="16.7066%" y="661" width="0.5596%" height="15" fill="rgb(208,130,40)" fg:x="209" fg:w="7"/><text x="16.9566%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (7 samples, 0.56%)</title><rect x="16.7066%" y="645" width="0.5596%" height="15" fill="rgb(236,55,29)" fg:x="209" fg:w="7"/><text x="16.9566%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.1863%" y="629" width="0.0799%" height="15" fill="rgb(209,156,45)" fg:x="215" fg:w="1"/><text x="17.4363%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="17.3461%" y="549" width="0.0799%" height="15" fill="rgb(249,107,4)" fg:x="217" fg:w="1"/><text x="17.5961%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.3461%" y="533" width="0.0799%" height="15" fill="rgb(227,7,13)" fg:x="217" fg:w="1"/><text x="17.5961%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.4261%" y="389" width="0.0799%" height="15" fill="rgb(250,129,14)" fg:x="218" fg:w="1"/><text x="17.6761%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.4261%" y="373" width="0.0799%" height="15" fill="rgb(229,92,13)" fg:x="218" fg:w="1"/><text x="17.6761%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.4261%" y="357" width="0.0799%" height="15" fill="rgb(245,98,39)" fg:x="218" fg:w="1"/><text x="17.6761%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.4261%" y="341" width="0.0799%" height="15" fill="rgb(234,135,48)" fg:x="218" fg:w="1"/><text x="17.6761%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.4261%" y="325" width="0.0799%" height="15" fill="rgb(230,98,28)" fg:x="218" fg:w="1"/><text x="17.6761%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="17.4261%" y="309" width="0.0799%" height="15" fill="rgb(223,121,0)" fg:x="218" fg:w="1"/><text x="17.6761%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.4261%" y="293" width="0.0799%" height="15" fill="rgb(234,173,33)" fg:x="218" fg:w="1"/><text x="17.6761%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="17.4261%" y="469" width="0.2398%" height="15" fill="rgb(245,47,8)" fg:x="218" fg:w="3"/><text x="17.6761%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.4261%" y="453" width="0.2398%" height="15" fill="rgb(205,17,20)" fg:x="218" fg:w="3"/><text x="17.6761%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.4261%" y="437" width="0.2398%" height="15" fill="rgb(232,151,16)" fg:x="218" fg:w="3"/><text x="17.6761%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.4261%" y="421" width="0.2398%" height="15" fill="rgb(208,30,32)" fg:x="218" fg:w="3"/><text x="17.6761%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.4261%" y="405" width="0.2398%" height="15" fill="rgb(254,26,3)" fg:x="218" fg:w="3"/><text x="17.6761%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.5060%" y="389" width="0.1599%" height="15" fill="rgb(240,177,30)" fg:x="219" fg:w="2"/><text x="17.7560%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.6659%" y="469" width="0.0799%" height="15" fill="rgb(248,76,44)" fg:x="221" fg:w="1"/><text x="17.9159%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.6659%" y="453" width="0.0799%" height="15" fill="rgb(241,186,54)" fg:x="221" fg:w="1"/><text x="17.9159%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="17.7458%" y="469" width="0.0799%" height="15" fill="rgb(249,171,29)" fg:x="222" fg:w="1"/><text x="17.9958%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.7458%" y="453" width="0.0799%" height="15" fill="rgb(237,151,44)" fg:x="222" fg:w="1"/><text x="17.9958%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="17.7458%" y="437" width="0.0799%" height="15" fill="rgb(228,174,30)" fg:x="222" fg:w="1"/><text x="17.9958%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.7458%" y="421" width="0.0799%" height="15" fill="rgb(252,14,37)" fg:x="222" fg:w="1"/><text x="17.9958%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.7458%" y="405" width="0.0799%" height="15" fill="rgb(207,111,40)" fg:x="222" fg:w="1"/><text x="17.9958%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.7458%" y="389" width="0.0799%" height="15" fill="rgb(248,171,54)" fg:x="222" fg:w="1"/><text x="17.9958%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="17.7458%" y="373" width="0.0799%" height="15" fill="rgb(211,127,2)" fg:x="222" fg:w="1"/><text x="17.9958%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.7458%" y="357" width="0.0799%" height="15" fill="rgb(236,87,47)" fg:x="222" fg:w="1"/><text x="17.9958%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::desc (6 samples, 0.48%)</title><rect x="17.4261%" y="517" width="0.4796%" height="15" fill="rgb(223,190,45)" fg:x="218" fg:w="6"/><text x="17.6761%" y="527.50"></text></g><g><title>kernel::model::scopes::load_props (6 samples, 0.48%)</title><rect x="17.4261%" y="501" width="0.4796%" height="15" fill="rgb(215,5,16)" fg:x="218" fg:w="6"/><text x="17.6761%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (6 samples, 0.48%)</title><rect x="17.4261%" y="485" width="0.4796%" height="15" fill="rgb(252,82,33)" fg:x="218" fg:w="6"/><text x="17.6761%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.8257%" y="469" width="0.0799%" height="15" fill="rgb(247,213,44)" fg:x="223" fg:w="1"/><text x="18.0757%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8257%" y="453" width="0.0799%" height="15" fill="rgb(205,196,44)" fg:x="223" fg:w="1"/><text x="18.0757%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.8257%" y="437" width="0.0799%" height="15" fill="rgb(237,96,54)" fg:x="223" fg:w="1"/><text x="18.0757%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8257%" y="421" width="0.0799%" height="15" fill="rgb(230,113,34)" fg:x="223" fg:w="1"/><text x="18.0757%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.8257%" y="405" width="0.0799%" height="15" fill="rgb(221,224,12)" fg:x="223" fg:w="1"/><text x="18.0757%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8257%" y="389" width="0.0799%" height="15" fill="rgb(219,112,44)" fg:x="223" fg:w="1"/><text x="18.0757%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.8257%" y="373" width="0.0799%" height="15" fill="rgb(210,31,13)" fg:x="223" fg:w="1"/><text x="18.0757%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.9856%" y="389" width="0.0799%" height="15" fill="rgb(230,25,16)" fg:x="225" fg:w="1"/><text x="18.2356%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.9057%" y="453" width="0.2398%" height="15" fill="rgb(246,108,53)" fg:x="224" fg:w="3"/><text x="18.1557%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.9057%" y="437" width="0.2398%" height="15" fill="rgb(241,172,50)" fg:x="224" fg:w="3"/><text x="18.1557%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.9057%" y="421" width="0.2398%" height="15" fill="rgb(235,141,10)" fg:x="224" fg:w="3"/><text x="18.1557%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.9856%" y="405" width="0.1599%" height="15" fill="rgb(220,174,43)" fg:x="225" fg:w="2"/><text x="18.2356%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0655%" y="389" width="0.0799%" height="15" fill="rgb(215,181,40)" fg:x="226" fg:w="1"/><text x="18.3155%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.0655%" y="373" width="0.0799%" height="15" fill="rgb(230,97,2)" fg:x="226" fg:w="1"/><text x="18.3155%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.0655%" y="357" width="0.0799%" height="15" fill="rgb(211,25,27)" fg:x="226" fg:w="1"/><text x="18.3155%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.0655%" y="341" width="0.0799%" height="15" fill="rgb(230,87,26)" fg:x="226" fg:w="1"/><text x="18.3155%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.0655%" y="325" width="0.0799%" height="15" fill="rgb(227,160,17)" fg:x="226" fg:w="1"/><text x="18.3155%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.0655%" y="309" width="0.0799%" height="15" fill="rgb(244,85,34)" fg:x="226" fg:w="1"/><text x="18.3155%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.0655%" y="293" width="0.0799%" height="15" fill="rgb(207,70,0)" fg:x="226" fg:w="1"/><text x="18.3155%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.0655%" y="277" width="0.0799%" height="15" fill="rgb(223,129,7)" fg:x="226" fg:w="1"/><text x="18.3155%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.0655%" y="261" width="0.0799%" height="15" fill="rgb(246,105,7)" fg:x="226" fg:w="1"/><text x="18.3155%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.0655%" y="245" width="0.0799%" height="15" fill="rgb(215,154,42)" fg:x="226" fg:w="1"/><text x="18.3155%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.0655%" y="229" width="0.0799%" height="15" fill="rgb(220,215,30)" fg:x="226" fg:w="1"/><text x="18.3155%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0655%" y="213" width="0.0799%" height="15" fill="rgb(228,81,51)" fg:x="226" fg:w="1"/><text x="18.3155%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="17.9057%" y="469" width="0.3197%" height="15" fill="rgb(247,71,54)" fg:x="224" fg:w="4"/><text x="18.1557%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.1455%" y="453" width="0.0799%" height="15" fill="rgb(234,176,34)" fg:x="227" fg:w="1"/><text x="18.3955%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1455%" y="437" width="0.0799%" height="15" fill="rgb(241,103,54)" fg:x="227" fg:w="1"/><text x="18.3955%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1455%" y="421" width="0.0799%" height="15" fill="rgb(228,22,34)" fg:x="227" fg:w="1"/><text x="18.3955%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.1455%" y="405" width="0.0799%" height="15" fill="rgb(241,179,48)" fg:x="227" fg:w="1"/><text x="18.3955%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (6 samples, 0.48%)</title><rect x="17.9057%" y="517" width="0.4796%" height="15" fill="rgb(235,167,37)" fg:x="224" fg:w="6"/><text x="18.1557%" y="527.50"></text></g><g><title>kernel::model::scopes::load_props (6 samples, 0.48%)</title><rect x="17.9057%" y="501" width="0.4796%" height="15" fill="rgb(213,109,30)" fg:x="224" fg:w="6"/><text x="18.1557%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (6 samples, 0.48%)</title><rect x="17.9057%" y="485" width="0.4796%" height="15" fill="rgb(222,172,16)" fg:x="224" fg:w="6"/><text x="18.1557%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="18.2254%" y="469" width="0.1599%" height="15" fill="rgb(233,192,5)" fg:x="228" fg:w="2"/><text x="18.4754%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.2254%" y="453" width="0.1599%" height="15" fill="rgb(247,189,41)" fg:x="228" fg:w="2"/><text x="18.4754%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="18.2254%" y="437" width="0.1599%" height="15" fill="rgb(218,134,47)" fg:x="228" fg:w="2"/><text x="18.4754%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.2254%" y="421" width="0.1599%" height="15" fill="rgb(216,29,3)" fg:x="228" fg:w="2"/><text x="18.4754%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="18.2254%" y="405" width="0.1599%" height="15" fill="rgb(246,140,12)" fg:x="228" fg:w="2"/><text x="18.4754%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.2254%" y="389" width="0.1599%" height="15" fill="rgb(230,136,11)" fg:x="228" fg:w="2"/><text x="18.4754%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="18.2254%" y="373" width="0.1599%" height="15" fill="rgb(247,22,47)" fg:x="228" fg:w="2"/><text x="18.4754%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.2254%" y="357" width="0.1599%" height="15" fill="rgb(218,84,22)" fg:x="228" fg:w="2"/><text x="18.4754%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.2254%" y="341" width="0.1599%" height="15" fill="rgb(216,87,39)" fg:x="228" fg:w="2"/><text x="18.4754%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.2254%" y="325" width="0.1599%" height="15" fill="rgb(221,178,8)" fg:x="228" fg:w="2"/><text x="18.4754%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="18.2254%" y="309" width="0.1599%" height="15" fill="rgb(230,42,11)" fg:x="228" fg:w="2"/><text x="18.4754%" y="319.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="18.3853%" y="517" width="0.1599%" height="15" fill="rgb(237,229,4)" fg:x="230" fg:w="2"/><text x="18.6353%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="18.3853%" y="501" width="0.1599%" height="15" fill="rgb(222,31,33)" fg:x="230" fg:w="2"/><text x="18.6353%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="18.3853%" y="485" width="0.1599%" height="15" fill="rgb(210,17,39)" fg:x="230" fg:w="2"/><text x="18.6353%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="18.3853%" y="469" width="0.1599%" height="15" fill="rgb(244,93,20)" fg:x="230" fg:w="2"/><text x="18.6353%" y="479.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="18.3853%" y="453" width="0.1599%" height="15" fill="rgb(210,40,47)" fg:x="230" fg:w="2"/><text x="18.6353%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="18.3853%" y="437" width="0.1599%" height="15" fill="rgb(239,211,47)" fg:x="230" fg:w="2"/><text x="18.6353%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="18.3853%" y="421" width="0.1599%" height="15" fill="rgb(251,223,49)" fg:x="230" fg:w="2"/><text x="18.6353%" y="431.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="18.3853%" y="405" width="0.1599%" height="15" fill="rgb(221,149,5)" fg:x="230" fg:w="2"/><text x="18.6353%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="18.4652%" y="389" width="0.0799%" height="15" fill="rgb(219,224,51)" fg:x="231" fg:w="1"/><text x="18.7152%" y="399.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="18.4652%" y="373" width="0.0799%" height="15" fill="rgb(223,7,8)" fg:x="231" fg:w="1"/><text x="18.7152%" y="383.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="18.4652%" y="357" width="0.0799%" height="15" fill="rgb(241,217,22)" fg:x="231" fg:w="1"/><text x="18.7152%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.4652%" y="341" width="0.0799%" height="15" fill="rgb(248,209,0)" fg:x="231" fg:w="1"/><text x="18.7152%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="18.5452%" y="469" width="0.0799%" height="15" fill="rgb(217,205,4)" fg:x="232" fg:w="1"/><text x="18.7952%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="18.5452%" y="453" width="0.0799%" height="15" fill="rgb(228,124,39)" fg:x="232" fg:w="1"/><text x="18.7952%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="18.5452%" y="437" width="0.0799%" height="15" fill="rgb(250,116,42)" fg:x="232" fg:w="1"/><text x="18.7952%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="18.5452%" y="421" width="0.0799%" height="15" fill="rgb(223,202,9)" fg:x="232" fg:w="1"/><text x="18.7952%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.5452%" y="405" width="0.0799%" height="15" fill="rgb(242,222,40)" fg:x="232" fg:w="1"/><text x="18.7952%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.5452%" y="389" width="0.0799%" height="15" fill="rgb(229,99,46)" fg:x="232" fg:w="1"/><text x="18.7952%" y="399.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="18.5452%" y="373" width="0.0799%" height="15" fill="rgb(225,56,46)" fg:x="232" fg:w="1"/><text x="18.7952%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="18.5452%" y="357" width="0.0799%" height="15" fill="rgb(227,94,5)" fg:x="232" fg:w="1"/><text x="18.7952%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="18.5452%" y="341" width="0.0799%" height="15" fill="rgb(205,112,38)" fg:x="232" fg:w="1"/><text x="18.7952%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="18.5452%" y="325" width="0.0799%" height="15" fill="rgb(231,133,46)" fg:x="232" fg:w="1"/><text x="18.7952%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.5452%" y="309" width="0.0799%" height="15" fill="rgb(217,16,9)" fg:x="232" fg:w="1"/><text x="18.7952%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="18.7850%" y="357" width="0.0799%" height="15" fill="rgb(249,173,9)" fg:x="235" fg:w="1"/><text x="19.0350%" y="367.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="18.7850%" y="341" width="0.0799%" height="15" fill="rgb(205,163,53)" fg:x="235" fg:w="1"/><text x="19.0350%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="18.7850%" y="325" width="0.0799%" height="15" fill="rgb(217,54,41)" fg:x="235" fg:w="1"/><text x="19.0350%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="18.7050%" y="373" width="0.2398%" height="15" fill="rgb(228,216,12)" fg:x="234" fg:w="3"/><text x="18.9550%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="18.8649%" y="357" width="0.0799%" height="15" fill="rgb(244,228,15)" fg:x="236" fg:w="1"/><text x="19.1149%" y="367.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="18.8649%" y="341" width="0.0799%" height="15" fill="rgb(221,176,53)" fg:x="236" fg:w="1"/><text x="19.1149%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="18.9448%" y="357" width="0.1599%" height="15" fill="rgb(205,94,34)" fg:x="237" fg:w="2"/><text x="19.1948%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.0248%" y="341" width="0.0799%" height="15" fill="rgb(213,110,48)" fg:x="238" fg:w="1"/><text x="19.2748%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.0248%" y="325" width="0.0799%" height="15" fill="rgb(236,142,28)" fg:x="238" fg:w="1"/><text x="19.2748%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.0248%" y="309" width="0.0799%" height="15" fill="rgb(225,135,29)" fg:x="238" fg:w="1"/><text x="19.2748%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="18.7050%" y="437" width="0.5596%" height="15" fill="rgb(252,45,31)" fg:x="234" fg:w="7"/><text x="18.9550%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="18.7050%" y="421" width="0.5596%" height="15" fill="rgb(211,187,50)" fg:x="234" fg:w="7"/><text x="18.9550%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (7 samples, 0.56%)</title><rect x="18.7050%" y="405" width="0.5596%" height="15" fill="rgb(229,109,7)" fg:x="234" fg:w="7"/><text x="18.9550%" y="415.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (7 samples, 0.56%)</title><rect x="18.7050%" y="389" width="0.5596%" height="15" fill="rgb(251,131,51)" fg:x="234" fg:w="7"/><text x="18.9550%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (4 samples, 0.32%)</title><rect x="18.9448%" y="373" width="0.3197%" height="15" fill="rgb(251,180,35)" fg:x="237" fg:w="4"/><text x="19.1948%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="19.1047%" y="357" width="0.1599%" height="15" fill="rgb(211,46,32)" fg:x="239" fg:w="2"/><text x="19.3547%" y="367.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (2 samples, 0.16%)</title><rect x="19.1047%" y="341" width="0.1599%" height="15" fill="rgb(248,123,17)" fg:x="239" fg:w="2"/><text x="19.3547%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="19.1047%" y="325" width="0.1599%" height="15" fill="rgb(227,141,18)" fg:x="239" fg:w="2"/><text x="19.3547%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.1847%" y="309" width="0.0799%" height="15" fill="rgb(216,102,9)" fg:x="240" fg:w="1"/><text x="19.4347%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.1847%" y="293" width="0.0799%" height="15" fill="rgb(253,47,13)" fg:x="240" fg:w="1"/><text x="19.4347%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="19.2646%" y="389" width="0.0799%" height="15" fill="rgb(226,93,23)" fg:x="241" fg:w="1"/><text x="19.5146%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.4245%" y="373" width="0.1599%" height="15" fill="rgb(247,104,17)" fg:x="243" fg:w="2"/><text x="19.6745%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="19.5843%" y="357" width="0.1599%" height="15" fill="rgb(233,203,26)" fg:x="245" fg:w="2"/><text x="19.8343%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.12%)</title><rect x="19.7442%" y="357" width="1.1191%" height="15" fill="rgb(244,98,49)" fg:x="247" fg:w="14"/><text x="19.9942%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="20.7034%" y="341" width="0.1599%" height="15" fill="rgb(235,134,22)" fg:x="259" fg:w="2"/><text x="20.9534%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.36%)</title><rect x="19.5843%" y="373" width="1.3589%" height="15" fill="rgb(221,70,32)" fg:x="245" fg:w="17"/><text x="19.8343%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="20.8633%" y="357" width="0.0799%" height="15" fill="rgb(238,15,50)" fg:x="261" fg:w="1"/><text x="21.1133%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="21.1831%" y="357" width="0.3997%" height="15" fill="rgb(215,221,48)" fg:x="265" fg:w="5"/><text x="21.4331%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="21.5028%" y="341" width="0.0799%" height="15" fill="rgb(236,73,3)" fg:x="269" fg:w="1"/><text x="21.7528%" y="351.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="21.5028%" y="325" width="0.0799%" height="15" fill="rgb(250,107,11)" fg:x="269" fg:w="1"/><text x="21.7528%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="21.5028%" y="309" width="0.0799%" height="15" fill="rgb(242,39,14)" fg:x="269" fg:w="1"/><text x="21.7528%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.72%)</title><rect x="20.9432%" y="373" width="0.7194%" height="15" fill="rgb(248,164,37)" fg:x="262" fg:w="9"/><text x="21.1932%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="21.5827%" y="357" width="0.0799%" height="15" fill="rgb(217,60,12)" fg:x="270" fg:w="1"/><text x="21.8327%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="21.6627%" y="373" width="0.0799%" height="15" fill="rgb(240,125,29)" fg:x="271" fg:w="1"/><text x="21.9127%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="21.6627%" y="357" width="0.0799%" height="15" fill="rgb(208,207,28)" fg:x="271" fg:w="1"/><text x="21.9127%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="21.6627%" y="341" width="0.0799%" height="15" fill="rgb(209,159,27)" fg:x="271" fg:w="1"/><text x="21.9127%" y="351.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="22.1423%" y="309" width="0.1599%" height="15" fill="rgb(251,176,53)" fg:x="277" fg:w="2"/><text x="22.3923%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="22.3022%" y="309" width="0.2398%" height="15" fill="rgb(211,85,7)" fg:x="279" fg:w="3"/><text x="22.5522%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="22.3821%" y="293" width="0.1599%" height="15" fill="rgb(216,64,54)" fg:x="280" fg:w="2"/><text x="22.6321%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="22.3821%" y="277" width="0.1599%" height="15" fill="rgb(217,54,24)" fg:x="280" fg:w="2"/><text x="22.6321%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="22.3821%" y="261" width="0.1599%" height="15" fill="rgb(208,206,53)" fg:x="280" fg:w="2"/><text x="22.6321%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="22.5420%" y="309" width="0.1599%" height="15" fill="rgb(251,74,39)" fg:x="282" fg:w="2"/><text x="22.7920%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="22.5420%" y="293" width="0.1599%" height="15" fill="rgb(226,47,5)" fg:x="282" fg:w="2"/><text x="22.7920%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="22.5420%" y="277" width="0.1599%" height="15" fill="rgb(234,111,33)" fg:x="282" fg:w="2"/><text x="22.7920%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="22.5420%" y="261" width="0.1599%" height="15" fill="rgb(251,14,10)" fg:x="282" fg:w="2"/><text x="22.7920%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.7018%" y="277" width="0.0799%" height="15" fill="rgb(232,43,0)" fg:x="284" fg:w="1"/><text x="22.9518%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.7018%" y="261" width="0.0799%" height="15" fill="rgb(222,68,43)" fg:x="284" fg:w="1"/><text x="22.9518%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="22.7018%" y="245" width="0.0799%" height="15" fill="rgb(217,24,23)" fg:x="284" fg:w="1"/><text x="22.9518%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="22.7018%" y="229" width="0.0799%" height="15" fill="rgb(229,209,14)" fg:x="284" fg:w="1"/><text x="22.9518%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="22.7018%" y="309" width="0.2398%" height="15" fill="rgb(250,149,48)" fg:x="284" fg:w="3"/><text x="22.9518%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="22.7018%" y="293" width="0.2398%" height="15" fill="rgb(210,120,37)" fg:x="284" fg:w="3"/><text x="22.9518%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="22.7818%" y="277" width="0.1599%" height="15" fill="rgb(210,21,8)" fg:x="285" fg:w="2"/><text x="23.0318%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.8617%" y="261" width="0.0799%" height="15" fill="rgb(243,145,7)" fg:x="286" fg:w="1"/><text x="23.1117%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (84 samples, 6.71%)</title><rect x="22.9416%" y="309" width="6.7146%" height="15" fill="rgb(238,178,32)" fg:x="287" fg:w="84"/><text x="23.1916%" y="319.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (84 samples, 6.71%)</title><rect x="22.9416%" y="293" width="6.7146%" height="15" fill="rgb(222,4,10)" fg:x="287" fg:w="84"/><text x="23.1916%" y="303.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (84 samples, 6.71%)</title><rect x="22.9416%" y="277" width="6.7146%" height="15" fill="rgb(239,7,37)" fg:x="287" fg:w="84"/><text x="23.1916%" y="287.50">alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (98 samples, 7.83%)</title><rect x="21.9025%" y="357" width="7.8337%" height="15" fill="rgb(215,31,37)" fg:x="274" fg:w="98"/><text x="22.1525%" y="367.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (98 samples, 7.83%)</title><rect x="21.9025%" y="341" width="7.8337%" height="15" fill="rgb(224,83,33)" fg:x="274" fg:w="98"/><text x="22.1525%" y="351.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (97 samples, 7.75%)</title><rect x="21.9824%" y="325" width="7.7538%" height="15" fill="rgb(239,55,3)" fg:x="275" fg:w="97"/><text x="22.2324%" y="335.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="29.6563%" y="309" width="0.0799%" height="15" fill="rgb(247,92,11)" fg:x="371" fg:w="1"/><text x="29.9063%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.7362%" y="357" width="0.0799%" height="15" fill="rgb(239,200,7)" fg:x="372" fg:w="1"/><text x="29.9862%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8961%" y="341" width="0.0799%" height="15" fill="rgb(227,115,8)" fg:x="374" fg:w="1"/><text x="30.1461%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="29.9760%" y="341" width="0.2398%" height="15" fill="rgb(215,189,27)" fg:x="375" fg:w="3"/><text x="30.2260%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="30.0560%" y="325" width="0.1599%" height="15" fill="rgb(251,216,39)" fg:x="376" fg:w="2"/><text x="30.3060%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.0560%" y="309" width="0.1599%" height="15" fill="rgb(207,29,47)" fg:x="376" fg:w="2"/><text x="30.3060%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.1359%" y="293" width="0.0799%" height="15" fill="rgb(210,71,34)" fg:x="377" fg:w="1"/><text x="30.3859%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.72%)</title><rect x="30.2158%" y="341" width="0.7194%" height="15" fill="rgb(253,217,51)" fg:x="378" fg:w="9"/><text x="30.4658%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.8553%" y="325" width="0.0799%" height="15" fill="rgb(222,117,46)" fg:x="386" fg:w="1"/><text x="31.1053%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.20%)</title><rect x="29.8161%" y="357" width="1.1990%" height="15" fill="rgb(226,132,6)" fg:x="373" fg:w="15"/><text x="30.0661%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="30.9353%" y="341" width="0.0799%" height="15" fill="rgb(254,145,51)" fg:x="387" fg:w="1"/><text x="31.1853%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="31.0152%" y="357" width="0.0799%" height="15" fill="rgb(231,199,27)" fg:x="388" fg:w="1"/><text x="31.2652%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="31.0951%" y="341" width="0.0799%" height="15" fill="rgb(245,158,14)" fg:x="389" fg:w="1"/><text x="31.3451%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="31.0951%" y="357" width="0.1599%" height="15" fill="rgb(240,113,14)" fg:x="389" fg:w="2"/><text x="31.3451%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="31.1751%" y="341" width="0.0799%" height="15" fill="rgb(210,20,13)" fg:x="390" fg:w="1"/><text x="31.4251%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (120 samples, 9.59%)</title><rect x="21.7426%" y="373" width="9.5923%" height="15" fill="rgb(241,144,13)" fg:x="272" fg:w="120"/><text x="21.9926%" y="383.50">regex_automata..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="31.2550%" y="357" width="0.0799%" height="15" fill="rgb(235,43,34)" fg:x="391" fg:w="1"/><text x="31.5050%" y="367.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="31.2550%" y="341" width="0.0799%" height="15" fill="rgb(208,36,20)" fg:x="391" fg:w="1"/><text x="31.5050%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="31.2550%" y="325" width="0.0799%" height="15" fill="rgb(239,204,10)" fg:x="391" fg:w="1"/><text x="31.5050%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.2550%" y="309" width="0.0799%" height="15" fill="rgb(217,84,43)" fg:x="391" fg:w="1"/><text x="31.5050%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (151 samples, 12.07%)</title><rect x="19.3445%" y="389" width="12.0703%" height="15" fill="rgb(241,170,50)" fg:x="242" fg:w="151"/><text x="19.5945%" y="399.50">regex_automata::me..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="31.3349%" y="373" width="0.0799%" height="15" fill="rgb(226,205,29)" fg:x="392" fg:w="1"/><text x="31.5849%" y="383.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="31.3349%" y="357" width="0.0799%" height="15" fill="rgb(233,113,1)" fg:x="392" fg:w="1"/><text x="31.5849%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="31.4948%" y="341" width="0.1599%" height="15" fill="rgb(253,98,13)" fg:x="394" fg:w="2"/><text x="31.7448%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="31.5747%" y="325" width="0.0799%" height="15" fill="rgb(211,115,12)" fg:x="395" fg:w="1"/><text x="31.8247%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="31.5747%" y="309" width="0.0799%" height="15" fill="rgb(208,12,16)" fg:x="395" fg:w="1"/><text x="31.8247%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="31.6547%" y="341" width="0.0799%" height="15" fill="rgb(237,193,54)" fg:x="396" fg:w="1"/><text x="31.9047%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="31.7346%" y="325" width="0.4796%" height="15" fill="rgb(243,22,42)" fg:x="397" fg:w="6"/><text x="31.9846%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="31.7346%" y="309" width="0.4796%" height="15" fill="rgb(233,151,36)" fg:x="397" fg:w="6"/><text x="31.9846%" y="319.50"></text></g><g><title>__libc_malloc (6 samples, 0.48%)</title><rect x="31.7346%" y="293" width="0.4796%" height="15" fill="rgb(237,57,45)" fg:x="397" fg:w="6"/><text x="31.9846%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (10 samples, 0.80%)</title><rect x="31.4948%" y="357" width="0.7994%" height="15" fill="rgb(221,88,17)" fg:x="394" fg:w="10"/><text x="31.7448%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.56%)</title><rect x="31.7346%" y="341" width="0.5596%" height="15" fill="rgb(230,79,15)" fg:x="397" fg:w="7"/><text x="31.9846%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="32.2142%" y="325" width="0.0799%" height="15" fill="rgb(213,57,13)" fg:x="403" fg:w="1"/><text x="32.4642%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="32.2942%" y="357" width="0.0799%" height="15" fill="rgb(222,116,39)" fg:x="404" fg:w="1"/><text x="32.5442%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (15 samples, 1.20%)</title><rect x="31.4149%" y="389" width="1.1990%" height="15" fill="rgb(245,107,2)" fg:x="393" fg:w="15"/><text x="31.6649%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (15 samples, 1.20%)</title><rect x="31.4149%" y="373" width="1.1990%" height="15" fill="rgb(238,1,10)" fg:x="393" fg:w="15"/><text x="31.6649%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="32.3741%" y="357" width="0.2398%" height="15" fill="rgb(249,4,48)" fg:x="405" fg:w="3"/><text x="32.6241%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.5340%" y="341" width="0.0799%" height="15" fill="rgb(223,151,18)" fg:x="407" fg:w="1"/><text x="32.7840%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="32.6938%" y="325" width="0.1599%" height="15" fill="rgb(227,65,43)" fg:x="409" fg:w="2"/><text x="32.9438%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.7738%" y="309" width="0.0799%" height="15" fill="rgb(218,40,45)" fg:x="410" fg:w="1"/><text x="33.0238%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.7738%" y="293" width="0.0799%" height="15" fill="rgb(252,121,31)" fg:x="410" fg:w="1"/><text x="33.0238%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="32.6938%" y="357" width="0.2398%" height="15" fill="rgb(219,158,43)" fg:x="409" fg:w="3"/><text x="32.9438%" y="367.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="32.6938%" y="341" width="0.2398%" height="15" fill="rgb(231,162,42)" fg:x="409" fg:w="3"/><text x="32.9438%" y="351.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="32.8537%" y="325" width="0.0799%" height="15" fill="rgb(217,179,25)" fg:x="411" fg:w="1"/><text x="33.1037%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="32.9337%" y="357" width="0.0799%" height="15" fill="rgb(206,212,31)" fg:x="412" fg:w="1"/><text x="33.1837%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (173 samples, 13.83%)</title><rect x="19.2646%" y="405" width="13.8289%" height="15" fill="rgb(235,144,12)" fg:x="241" fg:w="173"/><text x="19.5146%" y="415.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="32.6139%" y="389" width="0.4796%" height="15" fill="rgb(213,51,10)" fg:x="408" fg:w="6"/><text x="32.8639%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="32.6139%" y="373" width="0.4796%" height="15" fill="rgb(231,145,14)" fg:x="408" fg:w="6"/><text x="32.8639%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="33.0136%" y="357" width="0.0799%" height="15" fill="rgb(235,15,28)" fg:x="413" fg:w="1"/><text x="33.2636%" y="367.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (174 samples, 13.91%)</title><rect x="19.2646%" y="437" width="13.9089%" height="15" fill="rgb(237,206,10)" fg:x="241" fg:w="174"/><text x="19.5146%" y="447.50">&lt;regex::regex::string..</text></g><g><title>regex::builders::Builder::build_one_string (174 samples, 13.91%)</title><rect x="19.2646%" y="421" width="13.9089%" height="15" fill="rgb(236,227,27)" fg:x="241" fg:w="174"/><text x="19.5146%" y="431.50">regex::builders::Buil..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="33.0935%" y="405" width="0.0799%" height="15" fill="rgb(246,83,35)" fg:x="414" fg:w="1"/><text x="33.3435%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.1735%" y="437" width="0.0799%" height="15" fill="rgb(220,136,24)" fg:x="415" fg:w="1"/><text x="33.4235%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.2534%" y="389" width="0.0799%" height="15" fill="rgb(217,3,25)" fg:x="416" fg:w="1"/><text x="33.5034%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.3333%" y="389" width="0.0799%" height="15" fill="rgb(239,24,14)" fg:x="417" fg:w="1"/><text x="33.5833%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="33.2534%" y="405" width="0.3197%" height="15" fill="rgb(244,16,53)" fg:x="416" fg:w="4"/><text x="33.5034%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="33.4133%" y="389" width="0.1599%" height="15" fill="rgb(208,175,44)" fg:x="418" fg:w="2"/><text x="33.6633%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.4932%" y="373" width="0.0799%" height="15" fill="rgb(252,18,48)" fg:x="419" fg:w="1"/><text x="33.7432%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="33.2534%" y="437" width="0.3997%" height="15" fill="rgb(234,199,32)" fg:x="416" fg:w="5"/><text x="33.5034%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="33.2534%" y="421" width="0.3997%" height="15" fill="rgb(225,77,54)" fg:x="416" fg:w="5"/><text x="33.5034%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="33.5731%" y="405" width="0.0799%" height="15" fill="rgb(225,42,25)" fg:x="420" fg:w="1"/><text x="33.8231%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.5731%" y="389" width="0.0799%" height="15" fill="rgb(242,227,46)" fg:x="420" fg:w="1"/><text x="33.8231%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.5731%" y="373" width="0.0799%" height="15" fill="rgb(246,197,35)" fg:x="420" fg:w="1"/><text x="33.8231%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="34.3725%" y="357" width="0.0799%" height="15" fill="rgb(215,159,26)" fg:x="430" fg:w="1"/><text x="34.6225%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.72%)</title><rect x="33.8129%" y="373" width="0.7194%" height="15" fill="rgb(212,194,50)" fg:x="423" fg:w="9"/><text x="34.0629%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="34.4524%" y="357" width="0.0799%" height="15" fill="rgb(246,132,1)" fg:x="431" fg:w="1"/><text x="34.7024%" y="367.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (201 samples, 16.07%)</title><rect x="18.6251%" y="453" width="16.0671%" height="15" fill="rgb(217,71,7)" fg:x="233" fg:w="201"/><text x="18.8751%" y="463.50">indefinite::helper::Helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.04%)</title><rect x="33.6531%" y="437" width="1.0392%" height="15" fill="rgb(252,59,32)" fg:x="421" fg:w="13"/><text x="33.9031%" y="447.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="33.7330%" y="421" width="0.9592%" height="15" fill="rgb(253,204,25)" fg:x="422" fg:w="12"/><text x="33.9830%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="33.7330%" y="405" width="0.9592%" height="15" fill="rgb(232,21,16)" fg:x="422" fg:w="12"/><text x="33.9830%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.96%)</title><rect x="33.7330%" y="389" width="0.9592%" height="15" fill="rgb(248,90,29)" fg:x="422" fg:w="12"/><text x="33.9830%" y="399.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="34.5324%" y="373" width="0.1599%" height="15" fill="rgb(249,223,7)" fg:x="432" fg:w="2"/><text x="34.7824%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.6123%" y="357" width="0.0799%" height="15" fill="rgb(231,119,42)" fg:x="433" fg:w="1"/><text x="34.8623%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.6123%" y="341" width="0.0799%" height="15" fill="rgb(215,41,35)" fg:x="433" fg:w="1"/><text x="34.8623%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.6123%" y="325" width="0.0799%" height="15" fill="rgb(220,44,45)" fg:x="433" fg:w="1"/><text x="34.8623%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.9321%" y="357" width="0.0799%" height="15" fill="rgb(253,197,36)" fg:x="437" fg:w="1"/><text x="35.1821%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="35.0120%" y="357" width="0.1599%" height="15" fill="rgb(245,225,54)" fg:x="438" fg:w="2"/><text x="35.2620%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.1719%" y="357" width="0.0799%" height="15" fill="rgb(239,94,37)" fg:x="440" fg:w="1"/><text x="35.4219%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="35.2518%" y="357" width="0.0799%" height="15" fill="rgb(242,217,10)" fg:x="441" fg:w="1"/><text x="35.5018%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.2518%" y="341" width="0.0799%" height="15" fill="rgb(250,193,7)" fg:x="441" fg:w="1"/><text x="35.5018%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="34.8521%" y="389" width="0.5596%" height="15" fill="rgb(230,104,19)" fg:x="436" fg:w="7"/><text x="35.1021%" y="399.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="34.8521%" y="373" width="0.5596%" height="15" fill="rgb(230,181,4)" fg:x="436" fg:w="7"/><text x="35.1021%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="35.3317%" y="357" width="0.0799%" height="15" fill="rgb(216,219,49)" fg:x="442" fg:w="1"/><text x="35.5817%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="35.4117%" y="389" width="0.0799%" height="15" fill="rgb(254,144,0)" fg:x="443" fg:w="1"/><text x="35.6617%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.4117%" y="373" width="0.0799%" height="15" fill="rgb(205,209,38)" fg:x="443" fg:w="1"/><text x="35.6617%" y="383.50"></text></g><g><title>__libc_free (6 samples, 0.48%)</title><rect x="35.7314%" y="357" width="0.4796%" height="15" fill="rgb(240,21,42)" fg:x="447" fg:w="6"/><text x="35.9814%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="36.2110%" y="357" width="0.0799%" height="15" fill="rgb(241,132,3)" fg:x="453" fg:w="1"/><text x="36.4610%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (25 samples, 2.00%)</title><rect x="35.7314%" y="373" width="1.9984%" height="15" fill="rgb(225,14,2)" fg:x="447" fg:w="25"/><text x="35.9814%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18 samples, 1.44%)</title><rect x="36.2910%" y="357" width="1.4388%" height="15" fill="rgb(210,141,35)" fg:x="454" fg:w="18"/><text x="36.5410%" y="367.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="37.4900%" y="341" width="0.2398%" height="15" fill="rgb(251,14,44)" fg:x="469" fg:w="3"/><text x="37.7400%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="37.7298%" y="373" width="0.0799%" height="15" fill="rgb(247,48,18)" fg:x="472" fg:w="1"/><text x="37.9798%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="37.7298%" y="357" width="0.0799%" height="15" fill="rgb(225,0,40)" fg:x="472" fg:w="1"/><text x="37.9798%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="37.7298%" y="341" width="0.0799%" height="15" fill="rgb(221,31,33)" fg:x="472" fg:w="1"/><text x="37.9798%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.7298%" y="325" width="0.0799%" height="15" fill="rgb(237,42,40)" fg:x="472" fg:w="1"/><text x="37.9798%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.0496%" y="325" width="0.0799%" height="15" fill="rgb(233,51,29)" fg:x="476" fg:w="1"/><text x="38.2996%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="37.9696%" y="357" width="0.2398%" height="15" fill="rgb(226,58,20)" fg:x="475" fg:w="3"/><text x="38.2196%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="38.0496%" y="341" width="0.1599%" height="15" fill="rgb(208,98,7)" fg:x="476" fg:w="2"/><text x="38.2996%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.1295%" y="325" width="0.0799%" height="15" fill="rgb(228,143,44)" fg:x="477" fg:w="1"/><text x="38.3795%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.1295%" y="309" width="0.0799%" height="15" fill="rgb(246,55,38)" fg:x="477" fg:w="1"/><text x="38.3795%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.1295%" y="293" width="0.0799%" height="15" fill="rgb(247,87,16)" fg:x="477" fg:w="1"/><text x="38.3795%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="37.8098%" y="373" width="0.4796%" height="15" fill="rgb(234,129,42)" fg:x="473" fg:w="6"/><text x="38.0598%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="38.2094%" y="357" width="0.0799%" height="15" fill="rgb(220,82,16)" fg:x="478" fg:w="1"/><text x="38.4594%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="38.2094%" y="341" width="0.0799%" height="15" fill="rgb(211,88,4)" fg:x="478" fg:w="1"/><text x="38.4594%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="38.2094%" y="325" width="0.0799%" height="15" fill="rgb(248,151,21)" fg:x="478" fg:w="1"/><text x="38.4594%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.2094%" y="309" width="0.0799%" height="15" fill="rgb(238,163,6)" fg:x="478" fg:w="1"/><text x="38.4594%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.2094%" y="293" width="0.0799%" height="15" fill="rgb(209,183,11)" fg:x="478" fg:w="1"/><text x="38.4594%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.2094%" y="277" width="0.0799%" height="15" fill="rgb(219,37,20)" fg:x="478" fg:w="1"/><text x="38.4594%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.5292%" y="341" width="0.0799%" height="15" fill="rgb(210,158,4)" fg:x="482" fg:w="1"/><text x="38.7792%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="38.6091%" y="325" width="0.3197%" height="15" fill="rgb(221,167,53)" fg:x="483" fg:w="4"/><text x="38.8591%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="38.6091%" y="309" width="0.3197%" height="15" fill="rgb(237,151,45)" fg:x="483" fg:w="4"/><text x="38.8591%" y="319.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="38.6091%" y="293" width="0.3197%" height="15" fill="rgb(231,39,3)" fg:x="483" fg:w="4"/><text x="38.8591%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="38.6091%" y="341" width="0.4796%" height="15" fill="rgb(212,167,28)" fg:x="483" fg:w="6"/><text x="38.8591%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.9289%" y="325" width="0.1599%" height="15" fill="rgb(232,178,8)" fg:x="487" fg:w="2"/><text x="39.1789%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.9289%" y="309" width="0.1599%" height="15" fill="rgb(225,151,20)" fg:x="487" fg:w="2"/><text x="39.1789%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.9289%" y="293" width="0.1599%" height="15" fill="rgb(238,3,37)" fg:x="487" fg:w="2"/><text x="39.1789%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="39.5683%" y="309" width="0.2398%" height="15" fill="rgb(251,147,42)" fg:x="495" fg:w="3"/><text x="39.8183%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="39.5683%" y="293" width="0.2398%" height="15" fill="rgb(208,173,10)" fg:x="495" fg:w="3"/><text x="39.8183%" y="303.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="39.5683%" y="277" width="0.2398%" height="15" fill="rgb(246,225,4)" fg:x="495" fg:w="3"/><text x="39.8183%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (11 samples, 0.88%)</title><rect x="39.0887%" y="341" width="0.8793%" height="15" fill="rgb(248,102,6)" fg:x="489" fg:w="11"/><text x="39.3387%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (7 samples, 0.56%)</title><rect x="39.4085%" y="325" width="0.5596%" height="15" fill="rgb(232,6,21)" fg:x="493" fg:w="7"/><text x="39.6585%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="39.8082%" y="309" width="0.1599%" height="15" fill="rgb(221,179,22)" fg:x="498" fg:w="2"/><text x="40.0582%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.8881%" y="293" width="0.0799%" height="15" fill="rgb(252,50,20)" fg:x="499" fg:w="1"/><text x="40.1381%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.8881%" y="277" width="0.0799%" height="15" fill="rgb(222,56,38)" fg:x="499" fg:w="1"/><text x="40.1381%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (9 samples, 0.72%)</title><rect x="39.9680%" y="341" width="0.7194%" height="15" fill="rgb(206,193,29)" fg:x="500" fg:w="9"/><text x="40.2180%" y="351.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (7 samples, 0.56%)</title><rect x="40.1279%" y="325" width="0.5596%" height="15" fill="rgb(239,192,45)" fg:x="502" fg:w="7"/><text x="40.3779%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (7 samples, 0.56%)</title><rect x="40.1279%" y="309" width="0.5596%" height="15" fill="rgb(254,18,36)" fg:x="502" fg:w="7"/><text x="40.3779%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (31 samples, 2.48%)</title><rect x="38.2894%" y="373" width="2.4780%" height="15" fill="rgb(221,127,11)" fg:x="479" fg:w="31"/><text x="38.5394%" y="383.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (31 samples, 2.48%)</title><rect x="38.2894%" y="357" width="2.4780%" height="15" fill="rgb(234,146,35)" fg:x="479" fg:w="31"/><text x="38.5394%" y="367.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="40.6875%" y="341" width="0.0799%" height="15" fill="rgb(254,201,37)" fg:x="509" fg:w="1"/><text x="40.9375%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.7674%" y="309" width="0.0799%" height="15" fill="rgb(211,202,23)" fg:x="510" fg:w="1"/><text x="41.0174%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.7674%" y="293" width="0.0799%" height="15" fill="rgb(237,91,2)" fg:x="510" fg:w="1"/><text x="41.0174%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7674%" y="277" width="0.0799%" height="15" fill="rgb(226,228,36)" fg:x="510" fg:w="1"/><text x="41.0174%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="40.7674%" y="325" width="0.1599%" height="15" fill="rgb(213,63,50)" fg:x="510" fg:w="2"/><text x="41.0174%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.8473%" y="309" width="0.0799%" height="15" fill="rgb(235,194,19)" fg:x="511" fg:w="1"/><text x="41.0973%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.9273%" y="309" width="0.0799%" height="15" fill="rgb(207,204,18)" fg:x="512" fg:w="1"/><text x="41.1773%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="41.0072%" y="309" width="0.1599%" height="15" fill="rgb(248,8,7)" fg:x="513" fg:w="2"/><text x="41.2572%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="41.1671%" y="293" width="0.0799%" height="15" fill="rgb(223,145,47)" fg:x="515" fg:w="1"/><text x="41.4171%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.2470%" y="277" width="0.0799%" height="15" fill="rgb(228,84,11)" fg:x="516" fg:w="1"/><text x="41.4970%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="41.3269%" y="277" width="0.0799%" height="15" fill="rgb(218,76,45)" fg:x="517" fg:w="1"/><text x="41.5769%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="42.8457%" y="261" width="0.4796%" height="15" fill="rgb(223,80,15)" fg:x="536" fg:w="6"/><text x="43.0957%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="43.3253%" y="261" width="0.1599%" height="15" fill="rgb(219,218,33)" fg:x="542" fg:w="2"/><text x="43.5753%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.64%)</title><rect x="43.4852%" y="261" width="0.6395%" height="15" fill="rgb(208,51,11)" fg:x="544" fg:w="8"/><text x="43.7352%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.9648%" y="245" width="0.1599%" height="15" fill="rgb(229,165,39)" fg:x="550" fg:w="2"/><text x="44.2148%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.9648%" y="229" width="0.1599%" height="15" fill="rgb(241,100,24)" fg:x="550" fg:w="2"/><text x="44.2148%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.9648%" y="213" width="0.1599%" height="15" fill="rgb(228,14,23)" fg:x="550" fg:w="2"/><text x="44.2148%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="44.1247%" y="261" width="0.1599%" height="15" fill="rgb(247,116,52)" fg:x="552" fg:w="2"/><text x="44.3747%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="45.0040%" y="197" width="0.1599%" height="15" fill="rgb(216,149,33)" fg:x="563" fg:w="2"/><text x="45.2540%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="45.0040%" y="229" width="0.2398%" height="15" fill="rgb(238,142,29)" fg:x="563" fg:w="3"/><text x="45.2540%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="45.0040%" y="213" width="0.2398%" height="15" fill="rgb(224,83,40)" fg:x="563" fg:w="3"/><text x="45.2540%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.1639%" y="197" width="0.0799%" height="15" fill="rgb(234,165,11)" fg:x="565" fg:w="1"/><text x="45.4139%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="45.9632%" y="213" width="0.2398%" height="15" fill="rgb(215,96,23)" fg:x="575" fg:w="3"/><text x="46.2132%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (25 samples, 2.00%)</title><rect x="44.2846%" y="261" width="1.9984%" height="15" fill="rgb(233,179,26)" fg:x="554" fg:w="25"/><text x="44.5346%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (24 samples, 1.92%)</title><rect x="44.3645%" y="245" width="1.9185%" height="15" fill="rgb(225,129,33)" fg:x="555" fg:w="24"/><text x="44.6145%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (13 samples, 1.04%)</title><rect x="45.2438%" y="229" width="1.0392%" height="15" fill="rgb(237,49,13)" fg:x="566" fg:w="13"/><text x="45.4938%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="46.2030%" y="213" width="0.0799%" height="15" fill="rgb(211,3,31)" fg:x="578" fg:w="1"/><text x="46.4530%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="46.2830%" y="245" width="0.0799%" height="15" fill="rgb(216,152,19)" fg:x="579" fg:w="1"/><text x="46.5330%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="46.2830%" y="229" width="0.0799%" height="15" fill="rgb(251,121,35)" fg:x="579" fg:w="1"/><text x="46.5330%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="46.2830%" y="213" width="0.0799%" height="15" fill="rgb(210,217,47)" fg:x="579" fg:w="1"/><text x="46.5330%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="46.2830%" y="261" width="0.1599%" height="15" fill="rgb(244,116,22)" fg:x="579" fg:w="2"/><text x="46.5330%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="46.3629%" y="245" width="0.0799%" height="15" fill="rgb(228,17,21)" fg:x="580" fg:w="1"/><text x="46.6129%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="46.3629%" y="229" width="0.0799%" height="15" fill="rgb(240,149,34)" fg:x="580" fg:w="1"/><text x="46.6129%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.3629%" y="213" width="0.0799%" height="15" fill="rgb(208,125,47)" fg:x="580" fg:w="1"/><text x="46.6129%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="46.4428%" y="229" width="0.0799%" height="15" fill="rgb(249,186,39)" fg:x="581" fg:w="1"/><text x="46.6928%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (103 samples, 8.23%)</title><rect x="46.4428%" y="261" width="8.2334%" height="15" fill="rgb(240,220,33)" fg:x="581" fg:w="103"/><text x="46.6928%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (103 samples, 8.23%)</title><rect x="46.4428%" y="245" width="8.2334%" height="15" fill="rgb(243,110,23)" fg:x="581" fg:w="103"/><text x="46.6928%" y="255.50">regex_autom..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (102 samples, 8.15%)</title><rect x="46.5228%" y="229" width="8.1535%" height="15" fill="rgb(219,163,46)" fg:x="582" fg:w="102"/><text x="46.7728%" y="239.50">alloc::vec:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (8 samples, 0.64%)</title><rect x="54.6763%" y="261" width="0.6395%" height="15" fill="rgb(216,126,30)" fg:x="684" fg:w="8"/><text x="54.9263%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="55.0759%" y="245" width="0.2398%" height="15" fill="rgb(208,139,11)" fg:x="689" fg:w="3"/><text x="55.3259%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (188 samples, 15.03%)</title><rect x="40.7674%" y="357" width="15.0280%" height="15" fill="rgb(213,118,36)" fg:x="510" fg:w="188"/><text x="41.0174%" y="367.50">&lt;core::iter::adapters::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (188 samples, 15.03%)</title><rect x="40.7674%" y="341" width="15.0280%" height="15" fill="rgb(226,43,17)" fg:x="510" fg:w="188"/><text x="41.0174%" y="351.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (186 samples, 14.87%)</title><rect x="40.9273%" y="325" width="14.8681%" height="15" fill="rgb(254,217,4)" fg:x="512" fg:w="186"/><text x="41.1773%" y="335.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (183 samples, 14.63%)</title><rect x="41.1671%" y="309" width="14.6283%" height="15" fill="rgb(210,134,47)" fg:x="515" fg:w="183"/><text x="41.4171%" y="319.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (182 samples, 14.55%)</title><rect x="41.2470%" y="293" width="14.5484%" height="15" fill="rgb(237,24,49)" fg:x="516" fg:w="182"/><text x="41.4970%" y="303.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (180 samples, 14.39%)</title><rect x="41.4069%" y="277" width="14.3885%" height="15" fill="rgb(251,39,46)" fg:x="518" fg:w="180"/><text x="41.6569%" y="287.50">regex_automata::nfa::t..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="55.3157%" y="261" width="0.4796%" height="15" fill="rgb(251,220,3)" fg:x="692" fg:w="6"/><text x="55.5657%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.6355%" y="245" width="0.1599%" height="15" fill="rgb(228,105,12)" fg:x="696" fg:w="2"/><text x="55.8855%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.6355%" y="229" width="0.1599%" height="15" fill="rgb(215,196,1)" fg:x="696" fg:w="2"/><text x="55.8855%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.6355%" y="213" width="0.1599%" height="15" fill="rgb(214,33,39)" fg:x="696" fg:w="2"/><text x="55.8855%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (16 samples, 1.28%)</title><rect x="55.9552%" y="341" width="1.2790%" height="15" fill="rgb(220,19,52)" fg:x="700" fg:w="16"/><text x="56.2052%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="56.7546%" y="325" width="0.4796%" height="15" fill="rgb(221,78,38)" fg:x="710" fg:w="6"/><text x="57.0046%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="56.8345%" y="309" width="0.3997%" height="15" fill="rgb(253,30,16)" fg:x="711" fg:w="5"/><text x="57.0845%" y="319.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="56.8345%" y="293" width="0.3997%" height="15" fill="rgb(242,65,0)" fg:x="711" fg:w="5"/><text x="57.0845%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.64%)</title><rect x="57.2342%" y="341" width="0.6395%" height="15" fill="rgb(235,201,12)" fg:x="716" fg:w="8"/><text x="57.4842%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.7938%" y="325" width="0.0799%" height="15" fill="rgb(233,161,9)" fg:x="723" fg:w="1"/><text x="58.0438%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.7938%" y="309" width="0.0799%" height="15" fill="rgb(241,207,41)" fg:x="723" fg:w="1"/><text x="58.0438%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.7938%" y="293" width="0.0799%" height="15" fill="rgb(212,69,46)" fg:x="723" fg:w="1"/><text x="58.0438%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (4 samples, 0.32%)</title><rect x="57.8737%" y="341" width="0.3197%" height="15" fill="rgb(239,69,45)" fg:x="724" fg:w="4"/><text x="58.1237%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (285 samples, 22.78%)</title><rect x="35.4916%" y="389" width="22.7818%" height="15" fill="rgb(242,117,48)" fg:x="444" fg:w="285"/><text x="35.7416%" y="399.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (219 samples, 17.51%)</title><rect x="40.7674%" y="373" width="17.5060%" height="15" fill="rgb(228,41,36)" fg:x="510" fg:w="219"/><text x="41.0174%" y="383.50">regex_automata::nfa::thomps..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (31 samples, 2.48%)</title><rect x="55.7954%" y="357" width="2.4780%" height="15" fill="rgb(212,3,32)" fg:x="698" fg:w="31"/><text x="56.0454%" y="367.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="58.1934%" y="341" width="0.0799%" height="15" fill="rgb(233,41,49)" fg:x="728" fg:w="1"/><text x="58.4434%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.1934%" y="325" width="0.0799%" height="15" fill="rgb(252,170,49)" fg:x="728" fg:w="1"/><text x="58.4434%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.1934%" y="309" width="0.0799%" height="15" fill="rgb(229,53,26)" fg:x="728" fg:w="1"/><text x="58.4434%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.1934%" y="293" width="0.0799%" height="15" fill="rgb(217,157,12)" fg:x="728" fg:w="1"/><text x="58.4434%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="58.4333%" y="357" width="0.4796%" height="15" fill="rgb(227,17,9)" fg:x="731" fg:w="6"/><text x="58.6833%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="58.5931%" y="341" width="0.3197%" height="15" fill="rgb(218,84,12)" fg:x="733" fg:w="4"/><text x="58.8431%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="58.5931%" y="325" width="0.3197%" height="15" fill="rgb(212,79,24)" fg:x="733" fg:w="4"/><text x="58.8431%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="58.5931%" y="309" width="0.3197%" height="15" fill="rgb(217,222,37)" fg:x="733" fg:w="4"/><text x="58.8431%" y="319.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="58.5931%" y="293" width="0.3197%" height="15" fill="rgb(246,208,8)" fg:x="733" fg:w="4"/><text x="58.8431%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="58.9129%" y="357" width="0.0799%" height="15" fill="rgb(244,133,10)" fg:x="737" fg:w="1"/><text x="59.1629%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="58.9928%" y="357" width="0.0799%" height="15" fill="rgb(209,219,41)" fg:x="738" fg:w="1"/><text x="59.2428%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="59.0727%" y="357" width="0.0799%" height="15" fill="rgb(253,175,45)" fg:x="739" fg:w="1"/><text x="59.3227%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.04%)</title><rect x="58.2734%" y="389" width="1.0392%" height="15" fill="rgb(235,100,37)" fg:x="729" fg:w="13"/><text x="58.5234%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.04%)</title><rect x="58.2734%" y="373" width="1.0392%" height="15" fill="rgb(225,87,19)" fg:x="729" fg:w="13"/><text x="58.5234%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="59.1527%" y="357" width="0.1599%" height="15" fill="rgb(217,152,17)" fg:x="740" fg:w="2"/><text x="59.4027%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.2326%" y="341" width="0.0799%" height="15" fill="rgb(235,72,13)" fg:x="741" fg:w="1"/><text x="59.4826%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.56%)</title><rect x="59.3925%" y="341" width="0.5596%" height="15" fill="rgb(233,140,18)" fg:x="743" fg:w="7"/><text x="59.6425%" y="351.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="59.7922%" y="325" width="0.1599%" height="15" fill="rgb(207,212,28)" fg:x="748" fg:w="2"/><text x="60.0422%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="59.9520%" y="341" width="0.0799%" height="15" fill="rgb(220,130,25)" fg:x="750" fg:w="1"/><text x="60.2020%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="59.9520%" y="325" width="0.0799%" height="15" fill="rgb(205,55,34)" fg:x="750" fg:w="1"/><text x="60.2020%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (9 samples, 0.72%)</title><rect x="59.3925%" y="357" width="0.7194%" height="15" fill="rgb(237,54,35)" fg:x="743" fg:w="9"/><text x="59.6425%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="60.0320%" y="341" width="0.0799%" height="15" fill="rgb(208,67,23)" fg:x="751" fg:w="1"/><text x="60.2820%" y="351.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="60.1918%" y="341" width="0.0799%" height="15" fill="rgb(206,207,50)" fg:x="753" fg:w="1"/><text x="60.4418%" y="351.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="60.1918%" y="325" width="0.0799%" height="15" fill="rgb(213,211,42)" fg:x="753" fg:w="1"/><text x="60.4418%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (319 samples, 25.50%)</title><rect x="34.8521%" y="405" width="25.4996%" height="15" fill="rgb(252,197,50)" fg:x="436" fg:w="319"/><text x="35.1021%" y="415.50">regex_automata::meta::regex::Builder::bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (13 samples, 1.04%)</title><rect x="59.3125%" y="389" width="1.0392%" height="15" fill="rgb(251,211,41)" fg:x="742" fg:w="13"/><text x="59.5625%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (13 samples, 1.04%)</title><rect x="59.3125%" y="373" width="1.0392%" height="15" fill="rgb(229,211,5)" fg:x="742" fg:w="13"/><text x="59.5625%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="60.1119%" y="357" width="0.2398%" height="15" fill="rgb(239,36,31)" fg:x="752" fg:w="3"/><text x="60.3619%" y="367.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="60.2718%" y="341" width="0.0799%" height="15" fill="rgb(248,67,31)" fg:x="754" fg:w="1"/><text x="60.5218%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="60.3517%" y="405" width="0.0799%" height="15" fill="rgb(249,55,44)" fg:x="755" fg:w="1"/><text x="60.6017%" y="415.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (323 samples, 25.82%)</title><rect x="34.6922%" y="437" width="25.8193%" height="15" fill="rgb(216,82,12)" fg:x="434" fg:w="323"/><text x="34.9422%" y="447.50">&lt;regex::regex::string::Regex as core::str..</text></g><g><title>regex::builders::Builder::build_one_string (323 samples, 25.82%)</title><rect x="34.6922%" y="421" width="25.8193%" height="15" fill="rgb(242,174,1)" fg:x="434" fg:w="323"/><text x="34.9422%" y="431.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="60.4317%" y="405" width="0.0799%" height="15" fill="rgb(208,120,29)" fg:x="756" fg:w="1"/><text x="60.6817%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.5915%" y="389" width="0.0799%" height="15" fill="rgb(221,105,43)" fg:x="758" fg:w="1"/><text x="60.8415%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.5915%" y="373" width="0.0799%" height="15" fill="rgb(234,124,22)" fg:x="758" fg:w="1"/><text x="60.8415%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="60.5915%" y="405" width="0.2398%" height="15" fill="rgb(212,23,30)" fg:x="758" fg:w="3"/><text x="60.8415%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="60.6715%" y="389" width="0.1599%" height="15" fill="rgb(219,122,53)" fg:x="759" fg:w="2"/><text x="60.9215%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="60.6715%" y="373" width="0.1599%" height="15" fill="rgb(248,84,24)" fg:x="759" fg:w="2"/><text x="60.9215%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.6715%" y="357" width="0.1599%" height="15" fill="rgb(245,115,18)" fg:x="759" fg:w="2"/><text x="60.9215%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="60.6715%" y="341" width="0.1599%" height="15" fill="rgb(227,176,51)" fg:x="759" fg:w="2"/><text x="60.9215%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="60.8313%" y="389" width="0.0799%" height="15" fill="rgb(229,63,42)" fg:x="761" fg:w="1"/><text x="61.0813%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.8313%" y="373" width="0.0799%" height="15" fill="rgb(247,202,24)" fg:x="761" fg:w="1"/><text x="61.0813%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="60.5116%" y="437" width="0.4796%" height="15" fill="rgb(244,173,20)" fg:x="757" fg:w="6"/><text x="60.7616%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="60.5915%" y="421" width="0.3997%" height="15" fill="rgb(242,81,47)" fg:x="758" fg:w="5"/><text x="60.8415%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="60.8313%" y="405" width="0.1599%" height="15" fill="rgb(231,185,54)" fg:x="761" fg:w="2"/><text x="61.0813%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="60.9113%" y="389" width="0.0799%" height="15" fill="rgb(243,55,32)" fg:x="762" fg:w="1"/><text x="61.1613%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.9113%" y="373" width="0.0799%" height="15" fill="rgb(208,167,19)" fg:x="762" fg:w="1"/><text x="61.1613%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="60.9912%" y="421" width="0.0799%" height="15" fill="rgb(231,72,35)" fg:x="763" fg:w="1"/><text x="61.2412%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="60.9912%" y="405" width="0.0799%" height="15" fill="rgb(250,173,51)" fg:x="763" fg:w="1"/><text x="61.2412%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="60.9912%" y="389" width="0.0799%" height="15" fill="rgb(209,5,22)" fg:x="763" fg:w="1"/><text x="61.2412%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="61.8705%" y="341" width="0.3197%" height="15" fill="rgb(250,174,19)" fg:x="774" fg:w="4"/><text x="62.1205%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="61.8705%" y="325" width="0.3197%" height="15" fill="rgb(217,3,49)" fg:x="774" fg:w="4"/><text x="62.1205%" y="335.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="61.8705%" y="309" width="0.3197%" height="15" fill="rgb(218,225,5)" fg:x="774" fg:w="4"/><text x="62.1205%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.1902%" y="341" width="0.0799%" height="15" fill="rgb(236,89,11)" fg:x="778" fg:w="1"/><text x="62.4402%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.1902%" y="325" width="0.0799%" height="15" fill="rgb(206,33,28)" fg:x="778" fg:w="1"/><text x="62.4402%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.48%)</title><rect x="62.2702%" y="341" width="0.4796%" height="15" fill="rgb(241,56,42)" fg:x="779" fg:w="6"/><text x="62.5202%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (22 samples, 1.76%)</title><rect x="61.0711%" y="357" width="1.7586%" height="15" fill="rgb(222,44,11)" fg:x="764" fg:w="22"/><text x="61.3211%" y="367.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="62.7498%" y="341" width="0.0799%" height="15" fill="rgb(234,111,20)" fg:x="785" fg:w="1"/><text x="62.9998%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.7498%" y="325" width="0.0799%" height="15" fill="rgb(237,77,6)" fg:x="785" fg:w="1"/><text x="62.9998%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.7498%" y="309" width="0.0799%" height="15" fill="rgb(235,111,23)" fg:x="785" fg:w="1"/><text x="62.9998%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7498%" y="293" width="0.0799%" height="15" fill="rgb(251,135,29)" fg:x="785" fg:w="1"/><text x="62.9998%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (354 samples, 28.30%)</title><rect x="34.6922%" y="453" width="28.2974%" height="15" fill="rgb(217,57,1)" fg:x="434" fg:w="354"/><text x="34.9422%" y="463.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (25 samples, 2.00%)</title><rect x="60.9912%" y="437" width="1.9984%" height="15" fill="rgb(249,119,31)" fg:x="763" fg:w="25"/><text x="61.2412%" y="447.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (24 samples, 1.92%)</title><rect x="61.0711%" y="421" width="1.9185%" height="15" fill="rgb(233,164,33)" fg:x="764" fg:w="24"/><text x="61.3211%" y="431.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (24 samples, 1.92%)</title><rect x="61.0711%" y="405" width="1.9185%" height="15" fill="rgb(250,217,43)" fg:x="764" fg:w="24"/><text x="61.3211%" y="415.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (24 samples, 1.92%)</title><rect x="61.0711%" y="389" width="1.9185%" height="15" fill="rgb(232,154,50)" fg:x="764" fg:w="24"/><text x="61.3211%" y="399.50">&lt;..</text></g><g><title>regex_automata::hybrid::dfa::Cache::new (24 samples, 1.92%)</title><rect x="61.0711%" y="373" width="1.9185%" height="15" fill="rgb(227,190,8)" fg:x="764" fg:w="24"/><text x="61.3211%" y="383.50">r..</text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="62.8297%" y="357" width="0.1599%" height="15" fill="rgb(209,217,32)" fg:x="786" fg:w="2"/><text x="63.0797%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.9097%" y="341" width="0.0799%" height="15" fill="rgb(243,203,50)" fg:x="787" fg:w="1"/><text x="63.1597%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.9097%" y="325" width="0.0799%" height="15" fill="rgb(232,152,27)" fg:x="787" fg:w="1"/><text x="63.1597%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9097%" y="309" width="0.0799%" height="15" fill="rgb(240,34,29)" fg:x="787" fg:w="1"/><text x="63.1597%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.9896%" y="373" width="0.1599%" height="15" fill="rgb(215,185,52)" fg:x="788" fg:w="2"/><text x="63.2396%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.9896%" y="357" width="0.1599%" height="15" fill="rgb(240,89,49)" fg:x="788" fg:w="2"/><text x="63.2396%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.0695%" y="341" width="0.0799%" height="15" fill="rgb(225,12,52)" fg:x="789" fg:w="1"/><text x="63.3195%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.1495%" y="373" width="0.1599%" height="15" fill="rgb(239,128,45)" fg:x="790" fg:w="2"/><text x="63.3995%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.3094%" y="373" width="0.0799%" height="15" fill="rgb(211,78,47)" fg:x="792" fg:w="1"/><text x="63.5594%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.3893%" y="341" width="0.0799%" height="15" fill="rgb(232,31,21)" fg:x="793" fg:w="1"/><text x="63.6393%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="63.3893%" y="373" width="0.3197%" height="15" fill="rgb(222,168,14)" fg:x="793" fg:w="4"/><text x="63.6393%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="63.3893%" y="357" width="0.3197%" height="15" fill="rgb(209,128,24)" fg:x="793" fg:w="4"/><text x="63.6393%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="63.4692%" y="341" width="0.2398%" height="15" fill="rgb(249,35,13)" fg:x="794" fg:w="3"/><text x="63.7192%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="63.4692%" y="325" width="0.2398%" height="15" fill="rgb(218,7,2)" fg:x="794" fg:w="3"/><text x="63.7192%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.6291%" y="309" width="0.0799%" height="15" fill="rgb(238,107,27)" fg:x="796" fg:w="1"/><text x="63.8791%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.9488%" y="357" width="0.0799%" height="15" fill="rgb(217,88,38)" fg:x="800" fg:w="1"/><text x="64.1988%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="64.0288%" y="357" width="0.0799%" height="15" fill="rgb(230,207,0)" fg:x="801" fg:w="1"/><text x="64.2788%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="64.0288%" y="341" width="0.0799%" height="15" fill="rgb(249,64,54)" fg:x="801" fg:w="1"/><text x="64.2788%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="64.1087%" y="357" width="0.0799%" height="15" fill="rgb(231,7,11)" fg:x="802" fg:w="1"/><text x="64.3587%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="64.3485%" y="341" width="0.4796%" height="15" fill="rgb(205,149,21)" fg:x="805" fg:w="6"/><text x="64.5985%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.88%)</title><rect x="64.1886%" y="357" width="0.8793%" height="15" fill="rgb(215,126,34)" fg:x="803" fg:w="11"/><text x="64.4386%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.24%)</title><rect x="64.8281%" y="341" width="0.2398%" height="15" fill="rgb(241,132,45)" fg:x="811" fg:w="3"/><text x="65.0781%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (3 samples, 0.24%)</title><rect x="64.8281%" y="325" width="0.2398%" height="15" fill="rgb(252,69,32)" fg:x="811" fg:w="3"/><text x="65.0781%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.9880%" y="309" width="0.0799%" height="15" fill="rgb(232,204,19)" fg:x="813" fg:w="1"/><text x="65.2380%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.1479%" y="277" width="0.0799%" height="15" fill="rgb(249,15,47)" fg:x="815" fg:w="1"/><text x="65.3979%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1479%" y="261" width="0.0799%" height="15" fill="rgb(209,227,23)" fg:x="815" fg:w="1"/><text x="65.3979%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="65.0679%" y="341" width="0.3197%" height="15" fill="rgb(248,92,24)" fg:x="814" fg:w="4"/><text x="65.3179%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="65.0679%" y="325" width="0.3197%" height="15" fill="rgb(247,59,2)" fg:x="814" fg:w="4"/><text x="65.3179%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="65.0679%" y="309" width="0.3197%" height="15" fill="rgb(221,30,5)" fg:x="814" fg:w="4"/><text x="65.3179%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="65.1479%" y="293" width="0.2398%" height="15" fill="rgb(208,108,53)" fg:x="815" fg:w="3"/><text x="65.3979%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="65.2278%" y="277" width="0.1599%" height="15" fill="rgb(211,183,26)" fg:x="816" fg:w="2"/><text x="65.4778%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.3078%" y="261" width="0.0799%" height="15" fill="rgb(232,132,4)" fg:x="817" fg:w="1"/><text x="65.5578%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.3078%" y="245" width="0.0799%" height="15" fill="rgb(253,128,37)" fg:x="817" fg:w="1"/><text x="65.5578%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.3078%" y="229" width="0.0799%" height="15" fill="rgb(221,58,24)" fg:x="817" fg:w="1"/><text x="65.5578%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5476%" y="325" width="0.0799%" height="15" fill="rgb(230,54,45)" fg:x="820" fg:w="1"/><text x="65.7976%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="65.6275%" y="325" width="0.0799%" height="15" fill="rgb(254,21,18)" fg:x="821" fg:w="1"/><text x="65.8775%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.6275%" y="309" width="0.0799%" height="15" fill="rgb(221,108,0)" fg:x="821" fg:w="1"/><text x="65.8775%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.6275%" y="293" width="0.0799%" height="15" fill="rgb(206,95,1)" fg:x="821" fg:w="1"/><text x="65.8775%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.6275%" y="277" width="0.0799%" height="15" fill="rgb(237,52,5)" fg:x="821" fg:w="1"/><text x="65.8775%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="65.7074%" y="325" width="0.4796%" height="15" fill="rgb(218,150,34)" fg:x="822" fg:w="6"/><text x="65.9574%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (32 samples, 2.56%)</title><rect x="63.7090%" y="373" width="2.5580%" height="15" fill="rgb(235,194,28)" fg:x="797" fg:w="32"/><text x="63.9590%" y="383.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 1.20%)</title><rect x="65.0679%" y="357" width="1.1990%" height="15" fill="rgb(245,92,18)" fg:x="814" fg:w="15"/><text x="65.3179%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="65.3877%" y="341" width="0.8793%" height="15" fill="rgb(253,203,53)" fg:x="818" fg:w="11"/><text x="65.6377%" y="351.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="66.1871%" y="325" width="0.0799%" height="15" fill="rgb(249,185,47)" fg:x="828" fg:w="1"/><text x="66.4371%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="66.1871%" y="309" width="0.0799%" height="15" fill="rgb(252,194,52)" fg:x="828" fg:w="1"/><text x="66.4371%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.1871%" y="293" width="0.0799%" height="15" fill="rgb(210,53,36)" fg:x="828" fg:w="1"/><text x="66.4371%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.1871%" y="277" width="0.0799%" height="15" fill="rgb(237,37,25)" fg:x="828" fg:w="1"/><text x="66.4371%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.1871%" y="261" width="0.0799%" height="15" fill="rgb(242,116,27)" fg:x="828" fg:w="1"/><text x="66.4371%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (3 samples, 0.24%)</title><rect x="66.4269%" y="325" width="0.2398%" height="15" fill="rgb(213,185,26)" fg:x="831" fg:w="3"/><text x="66.6769%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.5867%" y="309" width="0.0799%" height="15" fill="rgb(225,204,8)" fg:x="833" fg:w="1"/><text x="66.8367%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.5867%" y="293" width="0.0799%" height="15" fill="rgb(254,111,37)" fg:x="833" fg:w="1"/><text x="66.8367%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.5867%" y="277" width="0.0799%" height="15" fill="rgb(242,35,9)" fg:x="833" fg:w="1"/><text x="66.8367%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="66.6667%" y="293" width="0.0799%" height="15" fill="rgb(232,138,49)" fg:x="834" fg:w="1"/><text x="66.9167%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="66.6667%" y="325" width="0.2398%" height="15" fill="rgb(247,56,4)" fg:x="834" fg:w="3"/><text x="66.9167%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (3 samples, 0.24%)</title><rect x="66.6667%" y="309" width="0.2398%" height="15" fill="rgb(226,179,17)" fg:x="834" fg:w="3"/><text x="66.9167%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (2 samples, 0.16%)</title><rect x="66.7466%" y="293" width="0.1599%" height="15" fill="rgb(216,163,45)" fg:x="835" fg:w="2"/><text x="66.9966%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="66.9065%" y="325" width="0.0799%" height="15" fill="rgb(211,157,3)" fg:x="837" fg:w="1"/><text x="67.1565%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="66.9065%" y="309" width="0.0799%" height="15" fill="rgb(234,44,20)" fg:x="837" fg:w="1"/><text x="67.1565%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (12 samples, 0.96%)</title><rect x="66.2670%" y="341" width="0.9592%" height="15" fill="rgb(254,138,23)" fg:x="829" fg:w="12"/><text x="66.5170%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="66.9864%" y="325" width="0.2398%" height="15" fill="rgb(206,119,39)" fg:x="838" fg:w="3"/><text x="67.2364%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="67.0663%" y="309" width="0.1599%" height="15" fill="rgb(231,105,52)" fg:x="839" fg:w="2"/><text x="67.3163%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.0663%" y="293" width="0.1599%" height="15" fill="rgb(250,20,5)" fg:x="839" fg:w="2"/><text x="67.3163%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="67.0663%" y="277" width="0.1599%" height="15" fill="rgb(215,198,30)" fg:x="839" fg:w="2"/><text x="67.3163%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.04%)</title><rect x="66.2670%" y="373" width="1.0392%" height="15" fill="rgb(246,142,8)" fg:x="829" fg:w="13"/><text x="66.5170%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.04%)</title><rect x="66.2670%" y="357" width="1.0392%" height="15" fill="rgb(243,26,38)" fg:x="829" fg:w="13"/><text x="66.5170%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="67.2262%" y="341" width="0.0799%" height="15" fill="rgb(205,133,28)" fg:x="841" fg:w="1"/><text x="67.4762%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.3062%" y="325" width="0.0799%" height="15" fill="rgb(212,34,0)" fg:x="842" fg:w="1"/><text x="67.5562%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="67.3062%" y="341" width="0.4796%" height="15" fill="rgb(251,226,22)" fg:x="842" fg:w="6"/><text x="67.5562%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="67.3861%" y="325" width="0.3997%" height="15" fill="rgb(252,119,9)" fg:x="843" fg:w="5"/><text x="67.6361%" y="335.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (3 samples, 0.24%)</title><rect x="67.5460%" y="309" width="0.2398%" height="15" fill="rgb(213,150,50)" fg:x="845" fg:w="3"/><text x="67.7960%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.7858%" y="325" width="0.0799%" height="15" fill="rgb(212,24,39)" fg:x="848" fg:w="1"/><text x="68.0358%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.7858%" y="309" width="0.0799%" height="15" fill="rgb(213,46,39)" fg:x="848" fg:w="1"/><text x="68.0358%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7858%" y="293" width="0.0799%" height="15" fill="rgb(239,106,12)" fg:x="848" fg:w="1"/><text x="68.0358%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="67.7858%" y="341" width="0.2398%" height="15" fill="rgb(249,229,21)" fg:x="848" fg:w="3"/><text x="68.0358%" y="351.50"></text></g><g><title>regex_syntax::hir::Hir::class (2 samples, 0.16%)</title><rect x="67.8657%" y="325" width="0.1599%" height="15" fill="rgb(212,158,3)" fg:x="849" fg:w="2"/><text x="68.1157%" y="335.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::literal (1 samples, 0.08%)</title><rect x="67.9456%" y="309" width="0.0799%" height="15" fill="rgb(253,26,48)" fg:x="850" fg:w="1"/><text x="68.1956%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="68.0256%" y="341" width="0.0799%" height="15" fill="rgb(238,178,20)" fg:x="851" fg:w="1"/><text x="68.2756%" y="351.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (65 samples, 5.20%)</title><rect x="62.9896%" y="421" width="5.1958%" height="15" fill="rgb(208,86,15)" fg:x="788" fg:w="65"/><text x="63.2396%" y="431.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (65 samples, 5.20%)</title><rect x="62.9896%" y="405" width="5.1958%" height="15" fill="rgb(239,42,53)" fg:x="788" fg:w="65"/><text x="63.2396%" y="415.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (65 samples, 5.20%)</title><rect x="62.9896%" y="389" width="5.1958%" height="15" fill="rgb(245,226,8)" fg:x="788" fg:w="65"/><text x="63.2396%" y="399.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.88%)</title><rect x="67.3062%" y="373" width="0.8793%" height="15" fill="rgb(216,176,32)" fg:x="842" fg:w="11"/><text x="67.5562%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.88%)</title><rect x="67.3062%" y="357" width="0.8793%" height="15" fill="rgb(231,186,21)" fg:x="842" fg:w="11"/><text x="67.5562%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.1055%" y="341" width="0.0799%" height="15" fill="rgb(205,95,49)" fg:x="852" fg:w="1"/><text x="68.3555%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="68.1855%" y="389" width="0.1599%" height="15" fill="rgb(217,145,8)" fg:x="853" fg:w="2"/><text x="68.4355%" y="399.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="68.2654%" y="373" width="0.0799%" height="15" fill="rgb(239,144,48)" fg:x="854" fg:w="1"/><text x="68.5154%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="68.1855%" y="421" width="0.3197%" height="15" fill="rgb(214,189,23)" fg:x="853" fg:w="4"/><text x="68.4355%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="68.1855%" y="405" width="0.3197%" height="15" fill="rgb(229,157,17)" fg:x="853" fg:w="4"/><text x="68.4355%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="68.3453%" y="389" width="0.1599%" height="15" fill="rgb(230,5,48)" fg:x="855" fg:w="2"/><text x="68.5953%" y="399.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="68.4253%" y="373" width="0.0799%" height="15" fill="rgb(224,156,48)" fg:x="856" fg:w="1"/><text x="68.6753%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="68.5052%" y="389" width="0.0799%" height="15" fill="rgb(223,14,29)" fg:x="857" fg:w="1"/><text x="68.7552%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="68.5052%" y="373" width="0.0799%" height="15" fill="rgb(229,96,36)" fg:x="857" fg:w="1"/><text x="68.7552%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="68.5052%" y="421" width="0.1599%" height="15" fill="rgb(231,102,53)" fg:x="857" fg:w="2"/><text x="68.7552%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="68.5052%" y="405" width="0.1599%" height="15" fill="rgb(210,77,38)" fg:x="857" fg:w="2"/><text x="68.7552%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="68.5851%" y="389" width="0.0799%" height="15" fill="rgb(235,131,6)" fg:x="858" fg:w="1"/><text x="68.8351%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="68.5851%" y="373" width="0.0799%" height="15" fill="rgb(252,55,38)" fg:x="858" fg:w="1"/><text x="68.8351%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5851%" y="357" width="0.0799%" height="15" fill="rgb(246,38,14)" fg:x="858" fg:w="1"/><text x="68.8351%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.9848%" y="341" width="0.0799%" height="15" fill="rgb(242,27,5)" fg:x="863" fg:w="1"/><text x="69.2348%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.9848%" y="325" width="0.0799%" height="15" fill="rgb(228,65,35)" fg:x="863" fg:w="1"/><text x="69.2348%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0647%" y="341" width="0.0799%" height="15" fill="rgb(245,93,11)" fg:x="864" fg:w="1"/><text x="69.3147%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0647%" y="325" width="0.0799%" height="15" fill="rgb(213,1,31)" fg:x="864" fg:w="1"/><text x="69.3147%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="69.0647%" y="309" width="0.0799%" height="15" fill="rgb(237,205,14)" fg:x="864" fg:w="1"/><text x="69.3147%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.64%)</title><rect x="68.6651%" y="357" width="0.6395%" height="15" fill="rgb(232,118,45)" fg:x="859" fg:w="8"/><text x="68.9151%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="69.1447%" y="341" width="0.1599%" height="15" fill="rgb(218,5,6)" fg:x="865" fg:w="2"/><text x="69.3947%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="68.6651%" y="373" width="0.8793%" height="15" fill="rgb(251,87,51)" fg:x="859" fg:w="11"/><text x="68.9151%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="69.3046%" y="357" width="0.2398%" height="15" fill="rgb(207,225,20)" fg:x="867" fg:w="3"/><text x="69.5546%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="69.3046%" y="341" width="0.2398%" height="15" fill="rgb(222,78,54)" fg:x="867" fg:w="3"/><text x="69.5546%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="69.3046%" y="325" width="0.2398%" height="15" fill="rgb(232,85,16)" fg:x="867" fg:w="3"/><text x="69.5546%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.3845%" y="309" width="0.1599%" height="15" fill="rgb(244,25,33)" fg:x="868" fg:w="2"/><text x="69.6345%" y="319.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (83 samples, 6.63%)</title><rect x="62.9896%" y="437" width="6.6347%" height="15" fill="rgb(233,24,36)" fg:x="788" fg:w="83"/><text x="63.2396%" y="447.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.96%)</title><rect x="68.6651%" y="421" width="0.9592%" height="15" fill="rgb(253,49,54)" fg:x="859" fg:w="12"/><text x="68.9151%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (12 samples, 0.96%)</title><rect x="68.6651%" y="405" width="0.9592%" height="15" fill="rgb(245,12,22)" fg:x="859" fg:w="12"/><text x="68.9151%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="68.6651%" y="389" width="0.9592%" height="15" fill="rgb(253,141,28)" fg:x="859" fg:w="12"/><text x="68.9151%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="69.5444%" y="373" width="0.0799%" height="15" fill="rgb(225,207,27)" fg:x="870" fg:w="1"/><text x="69.7944%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="69.5444%" y="357" width="0.0799%" height="15" fill="rgb(220,84,2)" fg:x="870" fg:w="1"/><text x="69.7944%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.5444%" y="341" width="0.0799%" height="15" fill="rgb(224,37,37)" fg:x="870" fg:w="1"/><text x="69.7944%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.5444%" y="325" width="0.0799%" height="15" fill="rgb(220,143,18)" fg:x="870" fg:w="1"/><text x="69.7944%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (654 samples, 52.28%)</title><rect x="17.4261%" y="533" width="52.2782%" height="15" fill="rgb(210,88,33)" fg:x="218" fg:w="654"/><text x="17.6761%" y="543.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Observ..</text></g><g><title>plugins_core::looking::model::qualify_name (640 samples, 51.16%)</title><rect x="18.5452%" y="517" width="51.1591%" height="15" fill="rgb(219,87,51)" fg:x="232" fg:w="640"/><text x="18.7952%" y="527.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (640 samples, 51.16%)</title><rect x="18.5452%" y="501" width="51.1591%" height="15" fill="rgb(211,7,35)" fg:x="232" fg:w="640"/><text x="18.7952%" y="511.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (640 samples, 51.16%)</title><rect x="18.5452%" y="485" width="51.1591%" height="15" fill="rgb(232,77,2)" fg:x="232" fg:w="640"/><text x="18.7952%" y="495.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (639 samples, 51.08%)</title><rect x="18.6251%" y="469" width="51.0791%" height="15" fill="rgb(249,94,25)" fg:x="233" fg:w="639"/><text x="18.8751%" y="479.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (84 samples, 6.71%)</title><rect x="62.9896%" y="453" width="6.7146%" height="15" fill="rgb(215,112,2)" fg:x="788" fg:w="84"/><text x="63.2396%" y="463.50">indefinit..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="69.6243%" y="437" width="0.0799%" height="15" fill="rgb(226,115,48)" fg:x="871" fg:w="1"/><text x="69.8743%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8641%" y="357" width="0.0799%" height="15" fill="rgb(249,196,10)" fg:x="874" fg:w="1"/><text x="70.1141%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.8641%" y="341" width="0.0799%" height="15" fill="rgb(237,109,14)" fg:x="874" fg:w="1"/><text x="70.1141%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.8641%" y="325" width="0.0799%" height="15" fill="rgb(217,103,53)" fg:x="874" fg:w="1"/><text x="70.1141%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.8641%" y="309" width="0.0799%" height="15" fill="rgb(244,137,9)" fg:x="874" fg:w="1"/><text x="70.1141%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.8641%" y="293" width="0.0799%" height="15" fill="rgb(227,201,3)" fg:x="874" fg:w="1"/><text x="70.1141%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.8641%" y="277" width="0.0799%" height="15" fill="rgb(243,94,6)" fg:x="874" fg:w="1"/><text x="70.1141%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8641%" y="261" width="0.0799%" height="15" fill="rgb(235,118,5)" fg:x="874" fg:w="1"/><text x="70.1141%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="69.7842%" y="501" width="0.2398%" height="15" fill="rgb(247,10,30)" fg:x="873" fg:w="3"/><text x="70.0342%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.8641%" y="485" width="0.1599%" height="15" fill="rgb(205,26,28)" fg:x="874" fg:w="2"/><text x="70.1141%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.8641%" y="469" width="0.1599%" height="15" fill="rgb(206,99,35)" fg:x="874" fg:w="2"/><text x="70.1141%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.8641%" y="453" width="0.1599%" height="15" fill="rgb(238,130,40)" fg:x="874" fg:w="2"/><text x="70.1141%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.8641%" y="437" width="0.1599%" height="15" fill="rgb(224,126,31)" fg:x="874" fg:w="2"/><text x="70.1141%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="69.8641%" y="421" width="0.1599%" height="15" fill="rgb(254,105,17)" fg:x="874" fg:w="2"/><text x="70.1141%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="69.8641%" y="405" width="0.1599%" height="15" fill="rgb(216,87,36)" fg:x="874" fg:w="2"/><text x="70.1141%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="69.8641%" y="389" width="0.1599%" height="15" fill="rgb(240,21,12)" fg:x="874" fg:w="2"/><text x="70.1141%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="69.8641%" y="373" width="0.1599%" height="15" fill="rgb(245,192,34)" fg:x="874" fg:w="2"/><text x="70.1141%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.9440%" y="357" width="0.0799%" height="15" fill="rgb(226,100,49)" fg:x="875" fg:w="1"/><text x="70.1940%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.9440%" y="341" width="0.0799%" height="15" fill="rgb(245,188,27)" fg:x="875" fg:w="1"/><text x="70.1940%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.0240%" y="357" width="0.0799%" height="15" fill="rgb(212,170,8)" fg:x="876" fg:w="1"/><text x="70.2740%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0240%" y="341" width="0.0799%" height="15" fill="rgb(217,113,29)" fg:x="876" fg:w="1"/><text x="70.2740%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="70.0240%" y="389" width="0.1599%" height="15" fill="rgb(237,30,3)" fg:x="876" fg:w="2"/><text x="70.2740%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="70.0240%" y="373" width="0.1599%" height="15" fill="rgb(227,19,28)" fg:x="876" fg:w="2"/><text x="70.2740%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.1039%" y="357" width="0.0799%" height="15" fill="rgb(239,172,45)" fg:x="877" fg:w="1"/><text x="70.3539%" y="367.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.1039%" y="341" width="0.0799%" height="15" fill="rgb(254,55,39)" fg:x="877" fg:w="1"/><text x="70.3539%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.1039%" y="325" width="0.0799%" height="15" fill="rgb(249,208,12)" fg:x="877" fg:w="1"/><text x="70.3539%" y="335.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.1039%" y="309" width="0.0799%" height="15" fill="rgb(240,52,13)" fg:x="877" fg:w="1"/><text x="70.3539%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1039%" y="293" width="0.0799%" height="15" fill="rgb(252,149,13)" fg:x="877" fg:w="1"/><text x="70.3539%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.1039%" y="277" width="0.0799%" height="15" fill="rgb(232,81,48)" fg:x="877" fg:w="1"/><text x="70.3539%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1039%" y="261" width="0.0799%" height="15" fill="rgb(222,144,2)" fg:x="877" fg:w="1"/><text x="70.3539%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.1039%" y="245" width="0.0799%" height="15" fill="rgb(216,81,32)" fg:x="877" fg:w="1"/><text x="70.3539%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1039%" y="229" width="0.0799%" height="15" fill="rgb(244,78,51)" fg:x="877" fg:w="1"/><text x="70.3539%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.1039%" y="213" width="0.0799%" height="15" fill="rgb(217,66,21)" fg:x="877" fg:w="1"/><text x="70.3539%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1039%" y="197" width="0.0799%" height="15" fill="rgb(247,101,42)" fg:x="877" fg:w="1"/><text x="70.3539%" y="207.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="70.1839%" y="389" width="0.1599%" height="15" fill="rgb(227,81,39)" fg:x="878" fg:w="2"/><text x="70.4339%" y="399.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="70.1839%" y="373" width="0.1599%" height="15" fill="rgb(220,223,44)" fg:x="878" fg:w="2"/><text x="70.4339%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="70.1839%" y="357" width="0.1599%" height="15" fill="rgb(205,218,2)" fg:x="878" fg:w="2"/><text x="70.4339%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="70.1839%" y="341" width="0.1599%" height="15" fill="rgb(212,207,28)" fg:x="878" fg:w="2"/><text x="70.4339%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.1839%" y="325" width="0.1599%" height="15" fill="rgb(224,12,41)" fg:x="878" fg:w="2"/><text x="70.4339%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2638%" y="309" width="0.0799%" height="15" fill="rgb(216,118,12)" fg:x="879" fg:w="1"/><text x="70.5138%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2638%" y="293" width="0.0799%" height="15" fill="rgb(252,97,46)" fg:x="879" fg:w="1"/><text x="70.5138%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2638%" y="277" width="0.0799%" height="15" fill="rgb(244,206,19)" fg:x="879" fg:w="1"/><text x="70.5138%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2638%" y="261" width="0.0799%" height="15" fill="rgb(231,84,31)" fg:x="879" fg:w="1"/><text x="70.5138%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2638%" y="245" width="0.0799%" height="15" fill="rgb(244,133,0)" fg:x="879" fg:w="1"/><text x="70.5138%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="70.3437%" y="373" width="0.0799%" height="15" fill="rgb(223,15,50)" fg:x="880" fg:w="1"/><text x="70.5937%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="70.3437%" y="357" width="0.0799%" height="15" fill="rgb(250,118,49)" fg:x="880" fg:w="1"/><text x="70.5937%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.3437%" y="341" width="0.0799%" height="15" fill="rgb(248,25,38)" fg:x="880" fg:w="1"/><text x="70.5937%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3437%" y="325" width="0.0799%" height="15" fill="rgb(215,70,14)" fg:x="880" fg:w="1"/><text x="70.5937%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.3437%" y="309" width="0.0799%" height="15" fill="rgb(215,28,15)" fg:x="880" fg:w="1"/><text x="70.5937%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.3437%" y="293" width="0.0799%" height="15" fill="rgb(243,6,28)" fg:x="880" fg:w="1"/><text x="70.5937%" y="303.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.3437%" y="277" width="0.0799%" height="15" fill="rgb(222,130,1)" fg:x="880" fg:w="1"/><text x="70.5937%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.3437%" y="261" width="0.0799%" height="15" fill="rgb(236,166,44)" fg:x="880" fg:w="1"/><text x="70.5937%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.3437%" y="245" width="0.0799%" height="15" fill="rgb(221,108,14)" fg:x="880" fg:w="1"/><text x="70.5937%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.3437%" y="229" width="0.0799%" height="15" fill="rgb(252,3,45)" fg:x="880" fg:w="1"/><text x="70.5937%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.3437%" y="213" width="0.0799%" height="15" fill="rgb(237,68,30)" fg:x="880" fg:w="1"/><text x="70.5937%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.3437%" y="197" width="0.0799%" height="15" fill="rgb(211,79,22)" fg:x="880" fg:w="1"/><text x="70.5937%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.3437%" y="181" width="0.0799%" height="15" fill="rgb(252,185,21)" fg:x="880" fg:w="1"/><text x="70.5937%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5036%" y="293" width="0.0799%" height="15" fill="rgb(225,189,26)" fg:x="882" fg:w="1"/><text x="70.7536%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5036%" y="277" width="0.0799%" height="15" fill="rgb(241,30,40)" fg:x="882" fg:w="1"/><text x="70.7536%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5036%" y="261" width="0.0799%" height="15" fill="rgb(235,215,44)" fg:x="882" fg:w="1"/><text x="70.7536%" y="271.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (8 samples, 0.64%)</title><rect x="70.0240%" y="501" width="0.6395%" height="15" fill="rgb(205,8,29)" fg:x="876" fg:w="8"/><text x="70.2740%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.64%)</title><rect x="70.0240%" y="485" width="0.6395%" height="15" fill="rgb(241,137,42)" fg:x="876" fg:w="8"/><text x="70.2740%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="70.0240%" y="469" width="0.6395%" height="15" fill="rgb(237,155,2)" fg:x="876" fg:w="8"/><text x="70.2740%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.64%)</title><rect x="70.0240%" y="453" width="0.6395%" height="15" fill="rgb(245,29,42)" fg:x="876" fg:w="8"/><text x="70.2740%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.64%)</title><rect x="70.0240%" y="437" width="0.6395%" height="15" fill="rgb(234,101,35)" fg:x="876" fg:w="8"/><text x="70.2740%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.64%)</title><rect x="70.0240%" y="421" width="0.6395%" height="15" fill="rgb(228,64,37)" fg:x="876" fg:w="8"/><text x="70.2740%" y="431.50"></text></g><g><title>engine::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="70.0240%" y="405" width="0.6395%" height="15" fill="rgb(217,214,36)" fg:x="876" fg:w="8"/><text x="70.2740%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="70.3437%" y="389" width="0.3197%" height="15" fill="rgb(243,70,3)" fg:x="880" fg:w="4"/><text x="70.5937%" y="399.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.4237%" y="373" width="0.2398%" height="15" fill="rgb(253,158,52)" fg:x="881" fg:w="3"/><text x="70.6737%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.4237%" y="357" width="0.2398%" height="15" fill="rgb(234,111,54)" fg:x="881" fg:w="3"/><text x="70.6737%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.4237%" y="341" width="0.2398%" height="15" fill="rgb(217,70,32)" fg:x="881" fg:w="3"/><text x="70.6737%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.4237%" y="325" width="0.2398%" height="15" fill="rgb(234,18,33)" fg:x="881" fg:w="3"/><text x="70.6737%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.4237%" y="309" width="0.2398%" height="15" fill="rgb(234,12,49)" fg:x="881" fg:w="3"/><text x="70.6737%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.5835%" y="293" width="0.0799%" height="15" fill="rgb(236,10,21)" fg:x="883" fg:w="1"/><text x="70.8335%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5835%" y="277" width="0.0799%" height="15" fill="rgb(248,182,45)" fg:x="883" fg:w="1"/><text x="70.8335%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.5835%" y="261" width="0.0799%" height="15" fill="rgb(217,95,36)" fg:x="883" fg:w="1"/><text x="70.8335%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5835%" y="245" width="0.0799%" height="15" fill="rgb(212,110,31)" fg:x="883" fg:w="1"/><text x="70.8335%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.5835%" y="229" width="0.0799%" height="15" fill="rgb(206,32,53)" fg:x="883" fg:w="1"/><text x="70.8335%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5835%" y="213" width="0.0799%" height="15" fill="rgb(246,141,37)" fg:x="883" fg:w="1"/><text x="70.8335%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.5835%" y="197" width="0.0799%" height="15" fill="rgb(219,16,7)" fg:x="883" fg:w="1"/><text x="70.8335%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5835%" y="181" width="0.0799%" height="15" fill="rgb(230,205,45)" fg:x="883" fg:w="1"/><text x="70.8335%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.5835%" y="165" width="0.0799%" height="15" fill="rgb(231,43,49)" fg:x="883" fg:w="1"/><text x="70.8335%" y="175.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.5835%" y="149" width="0.0799%" height="15" fill="rgb(212,106,34)" fg:x="883" fg:w="1"/><text x="70.8335%" y="159.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="70.6635%" y="501" width="0.1599%" height="15" fill="rgb(206,83,17)" fg:x="884" fg:w="2"/><text x="70.9135%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.8233%" y="501" width="0.0799%" height="15" fill="rgb(244,154,49)" fg:x="886" fg:w="1"/><text x="71.0733%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.8233%" y="485" width="0.0799%" height="15" fill="rgb(244,149,49)" fg:x="886" fg:w="1"/><text x="71.0733%" y="495.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (681 samples, 54.44%)</title><rect x="16.6267%" y="709" width="54.4365%" height="15" fill="rgb(227,134,18)" fg:x="208" fg:w="681"/><text x="16.8767%" y="719.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::apply_middleware (673 samples, 53.80%)</title><rect x="17.2662%" y="693" width="53.7970%" height="15" fill="rgb(237,116,36)" fg:x="216" fg:w="673"/><text x="17.5162%" y="703.50">kernel::plugins::apply_middleware</text></g><g><title>kernel::plugins::MiddlewareNext::handle (673 samples, 53.80%)</title><rect x="17.2662%" y="677" width="53.7970%" height="15" fill="rgb(205,129,40)" fg:x="216" fg:w="673"/><text x="17.5162%" y="687.50">kernel::plugins::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::Middleware&gt;::handle (673 samples, 53.80%)</title><rect x="17.2662%" y="661" width="53.7970%" height="15" fill="rgb(236,178,4)" fg:x="216" fg:w="673"/><text x="17.5162%" y="671.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::Middleware&gt;::handle</text></g><g><title>kernel::plugins::MiddlewareNext::handle (672 samples, 53.72%)</title><rect x="17.3461%" y="645" width="53.7170%" height="15" fill="rgb(251,76,53)" fg:x="217" fg:w="672"/><text x="17.5961%" y="655.50">kernel::plugins::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (672 samples, 53.72%)</title><rect x="17.3461%" y="629" width="53.7170%" height="15" fill="rgb(242,92,40)" fg:x="217" fg:w="672"/><text x="17.5961%" y="639.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::MiddlewareNext::handle (672 samples, 53.72%)</title><rect x="17.3461%" y="613" width="53.7170%" height="15" fill="rgb(209,45,30)" fg:x="217" fg:w="672"/><text x="17.5961%" y="623.50">kernel::plugins::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (672 samples, 53.72%)</title><rect x="17.3461%" y="597" width="53.7170%" height="15" fill="rgb(218,157,36)" fg:x="217" fg:w="672"/><text x="17.5961%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (672 samples, 53.72%)</title><rect x="17.3461%" y="581" width="53.7170%" height="15" fill="rgb(222,186,16)" fg:x="217" fg:w="672"/><text x="17.5961%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (672 samples, 53.72%)</title><rect x="17.3461%" y="565" width="53.7170%" height="15" fill="rgb(254,72,35)" fg:x="217" fg:w="672"/><text x="17.5961%" y="575.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (671 samples, 53.64%)</title><rect x="17.4261%" y="549" width="53.6371%" height="15" fill="rgb(224,25,35)" fg:x="218" fg:w="671"/><text x="17.6761%" y="559.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (17 samples, 1.36%)</title><rect x="69.7042%" y="533" width="1.3589%" height="15" fill="rgb(206,135,52)" fg:x="872" fg:w="17"/><text x="69.9542%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (16 samples, 1.28%)</title><rect x="69.7842%" y="517" width="1.2790%" height="15" fill="rgb(229,174,47)" fg:x="873" fg:w="16"/><text x="70.0342%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.9033%" y="501" width="0.1599%" height="15" fill="rgb(242,184,21)" fg:x="887" fg:w="2"/><text x="71.1533%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.9033%" y="485" width="0.1599%" height="15" fill="rgb(213,22,45)" fg:x="887" fg:w="2"/><text x="71.1533%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="70.9033%" y="469" width="0.1599%" height="15" fill="rgb(237,81,54)" fg:x="887" fg:w="2"/><text x="71.1533%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="70.9033%" y="453" width="0.1599%" height="15" fill="rgb(248,177,18)" fg:x="887" fg:w="2"/><text x="71.1533%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="70.9033%" y="437" width="0.1599%" height="15" fill="rgb(254,31,16)" fg:x="887" fg:w="2"/><text x="71.1533%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.9033%" y="421" width="0.1599%" height="15" fill="rgb(235,20,31)" fg:x="887" fg:w="2"/><text x="71.1533%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.9033%" y="405" width="0.1599%" height="15" fill="rgb(240,56,43)" fg:x="887" fg:w="2"/><text x="71.1533%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.9832%" y="389" width="0.0799%" height="15" fill="rgb(237,197,51)" fg:x="888" fg:w="1"/><text x="71.2332%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9832%" y="373" width="0.0799%" height="15" fill="rgb(241,162,44)" fg:x="888" fg:w="1"/><text x="71.2332%" y="383.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="71.0631%" y="661" width="0.0799%" height="15" fill="rgb(224,23,20)" fg:x="889" fg:w="1"/><text x="71.3131%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0631%" y="645" width="0.0799%" height="15" fill="rgb(250,109,34)" fg:x="889" fg:w="1"/><text x="71.3131%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0631%" y="629" width="0.0799%" height="15" fill="rgb(214,175,50)" fg:x="889" fg:w="1"/><text x="71.3131%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.0631%" y="613" width="0.0799%" height="15" fill="rgb(213,182,5)" fg:x="889" fg:w="1"/><text x="71.3131%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.0631%" y="597" width="0.0799%" height="15" fill="rgb(209,199,19)" fg:x="889" fg:w="1"/><text x="71.3131%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.0631%" y="581" width="0.0799%" height="15" fill="rgb(236,224,42)" fg:x="889" fg:w="1"/><text x="71.3131%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.0631%" y="565" width="0.0799%" height="15" fill="rgb(246,226,29)" fg:x="889" fg:w="1"/><text x="71.3131%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.0631%" y="549" width="0.0799%" height="15" fill="rgb(227,223,11)" fg:x="889" fg:w="1"/><text x="71.3131%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1431%" y="437" width="0.0799%" height="15" fill="rgb(219,7,51)" fg:x="890" fg:w="1"/><text x="71.3931%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1431%" y="421" width="0.0799%" height="15" fill="rgb(245,167,10)" fg:x="890" fg:w="1"/><text x="71.3931%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.1431%" y="613" width="0.1599%" height="15" fill="rgb(237,224,16)" fg:x="890" fg:w="2"/><text x="71.3931%" y="623.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="71.1431%" y="597" width="0.1599%" height="15" fill="rgb(226,132,13)" fg:x="890" fg:w="2"/><text x="71.3931%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="71.1431%" y="581" width="0.1599%" height="15" fill="rgb(214,140,3)" fg:x="890" fg:w="2"/><text x="71.3931%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.1431%" y="565" width="0.1599%" height="15" fill="rgb(221,177,4)" fg:x="890" fg:w="2"/><text x="71.3931%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1431%" y="549" width="0.1599%" height="15" fill="rgb(238,139,3)" fg:x="890" fg:w="2"/><text x="71.3931%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.1431%" y="533" width="0.1599%" height="15" fill="rgb(216,17,39)" fg:x="890" fg:w="2"/><text x="71.3931%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1431%" y="517" width="0.1599%" height="15" fill="rgb(238,120,9)" fg:x="890" fg:w="2"/><text x="71.3931%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.1431%" y="501" width="0.1599%" height="15" fill="rgb(244,92,53)" fg:x="890" fg:w="2"/><text x="71.3931%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1431%" y="485" width="0.1599%" height="15" fill="rgb(224,148,33)" fg:x="890" fg:w="2"/><text x="71.3931%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.1431%" y="469" width="0.1599%" height="15" fill="rgb(243,6,36)" fg:x="890" fg:w="2"/><text x="71.3931%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.1431%" y="453" width="0.1599%" height="15" fill="rgb(230,102,11)" fg:x="890" fg:w="2"/><text x="71.3931%" y="463.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="71.2230%" y="437" width="0.0799%" height="15" fill="rgb(234,148,36)" fg:x="891" fg:w="1"/><text x="71.4730%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="71.1431%" y="645" width="0.2398%" height="15" fill="rgb(251,153,25)" fg:x="890" fg:w="3"/><text x="71.3931%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="71.1431%" y="629" width="0.2398%" height="15" fill="rgb(215,129,8)" fg:x="890" fg:w="3"/><text x="71.3931%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.3030%" y="613" width="0.0799%" height="15" fill="rgb(224,128,35)" fg:x="892" fg:w="1"/><text x="71.5530%" y="623.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="71.3030%" y="597" width="0.0799%" height="15" fill="rgb(237,56,52)" fg:x="892" fg:w="1"/><text x="71.5530%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="71.3030%" y="581" width="0.0799%" height="15" fill="rgb(234,213,19)" fg:x="892" fg:w="1"/><text x="71.5530%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.3030%" y="565" width="0.0799%" height="15" fill="rgb(252,82,23)" fg:x="892" fg:w="1"/><text x="71.5530%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3030%" y="549" width="0.0799%" height="15" fill="rgb(254,201,21)" fg:x="892" fg:w="1"/><text x="71.5530%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3030%" y="533" width="0.0799%" height="15" fill="rgb(250,186,11)" fg:x="892" fg:w="1"/><text x="71.5530%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3030%" y="517" width="0.0799%" height="15" fill="rgb(211,174,5)" fg:x="892" fg:w="1"/><text x="71.5530%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3030%" y="501" width="0.0799%" height="15" fill="rgb(214,121,10)" fg:x="892" fg:w="1"/><text x="71.5530%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3030%" y="485" width="0.0799%" height="15" fill="rgb(241,66,2)" fg:x="892" fg:w="1"/><text x="71.5530%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.4628%" y="485" width="0.0799%" height="15" fill="rgb(220,167,19)" fg:x="894" fg:w="1"/><text x="71.7128%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="71.3829%" y="629" width="0.2398%" height="15" fill="rgb(231,54,50)" fg:x="893" fg:w="3"/><text x="71.6329%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="71.3829%" y="613" width="0.2398%" height="15" fill="rgb(239,217,53)" fg:x="893" fg:w="3"/><text x="71.6329%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="71.3829%" y="597" width="0.2398%" height="15" fill="rgb(248,8,0)" fg:x="893" fg:w="3"/><text x="71.6329%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="71.3829%" y="581" width="0.2398%" height="15" fill="rgb(229,118,37)" fg:x="893" fg:w="3"/><text x="71.6329%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.4628%" y="565" width="0.1599%" height="15" fill="rgb(253,223,43)" fg:x="894" fg:w="2"/><text x="71.7128%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4628%" y="549" width="0.1599%" height="15" fill="rgb(211,77,36)" fg:x="894" fg:w="2"/><text x="71.7128%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.4628%" y="533" width="0.1599%" height="15" fill="rgb(219,3,53)" fg:x="894" fg:w="2"/><text x="71.7128%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.4628%" y="517" width="0.1599%" height="15" fill="rgb(244,45,42)" fg:x="894" fg:w="2"/><text x="71.7128%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.4628%" y="501" width="0.1599%" height="15" fill="rgb(225,95,27)" fg:x="894" fg:w="2"/><text x="71.7128%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.5428%" y="485" width="0.0799%" height="15" fill="rgb(207,74,8)" fg:x="895" fg:w="1"/><text x="71.7928%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.5428%" y="469" width="0.0799%" height="15" fill="rgb(243,63,36)" fg:x="895" fg:w="1"/><text x="71.7928%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.5428%" y="453" width="0.0799%" height="15" fill="rgb(211,180,12)" fg:x="895" fg:w="1"/><text x="71.7928%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.5428%" y="437" width="0.0799%" height="15" fill="rgb(254,166,49)" fg:x="895" fg:w="1"/><text x="71.7928%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.5428%" y="421" width="0.0799%" height="15" fill="rgb(205,19,0)" fg:x="895" fg:w="1"/><text x="71.7928%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.5428%" y="405" width="0.0799%" height="15" fill="rgb(224,172,32)" fg:x="895" fg:w="1"/><text x="71.7928%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (8 samples, 0.64%)</title><rect x="71.0631%" y="677" width="0.6395%" height="15" fill="rgb(254,136,30)" fg:x="889" fg:w="8"/><text x="71.3131%" y="687.50"></text></g><g><title>engine::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="71.1431%" y="661" width="0.5596%" height="15" fill="rgb(246,19,35)" fg:x="890" fg:w="7"/><text x="71.3931%" y="671.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="71.3829%" y="645" width="0.3197%" height="15" fill="rgb(219,24,36)" fg:x="893" fg:w="4"/><text x="71.6329%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="71.6227%" y="629" width="0.0799%" height="15" fill="rgb(251,55,1)" fg:x="896" fg:w="1"/><text x="71.8727%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.6227%" y="613" width="0.0799%" height="15" fill="rgb(218,117,39)" fg:x="896" fg:w="1"/><text x="71.8727%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.6227%" y="597" width="0.0799%" height="15" fill="rgb(248,169,11)" fg:x="896" fg:w="1"/><text x="71.8727%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.6227%" y="581" width="0.0799%" height="15" fill="rgb(244,40,44)" fg:x="896" fg:w="1"/><text x="71.8727%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.6227%" y="565" width="0.0799%" height="15" fill="rgb(234,62,37)" fg:x="896" fg:w="1"/><text x="71.8727%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.6227%" y="549" width="0.0799%" height="15" fill="rgb(207,117,42)" fg:x="896" fg:w="1"/><text x="71.8727%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.6227%" y="533" width="0.0799%" height="15" fill="rgb(213,43,2)" fg:x="896" fg:w="1"/><text x="71.8727%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.6227%" y="517" width="0.0799%" height="15" fill="rgb(244,202,51)" fg:x="896" fg:w="1"/><text x="71.8727%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.6227%" y="501" width="0.0799%" height="15" fill="rgb(253,174,46)" fg:x="896" fg:w="1"/><text x="71.8727%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.6227%" y="485" width="0.0799%" height="15" fill="rgb(251,23,1)" fg:x="896" fg:w="1"/><text x="71.8727%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.6227%" y="469" width="0.0799%" height="15" fill="rgb(253,26,1)" fg:x="896" fg:w="1"/><text x="71.8727%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.6227%" y="453" width="0.0799%" height="15" fill="rgb(216,89,31)" fg:x="896" fg:w="1"/><text x="71.8727%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (9 samples, 0.72%)</title><rect x="71.0631%" y="693" width="0.7194%" height="15" fill="rgb(209,109,5)" fg:x="889" fg:w="9"/><text x="71.3131%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="71.7026%" y="677" width="0.0799%" height="15" fill="rgb(229,63,13)" fg:x="897" fg:w="1"/><text x="71.9526%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="71.7026%" y="661" width="0.0799%" height="15" fill="rgb(238,137,54)" fg:x="897" fg:w="1"/><text x="71.9526%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="71.7026%" y="645" width="0.0799%" height="15" fill="rgb(228,1,9)" fg:x="897" fg:w="1"/><text x="71.9526%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.7026%" y="629" width="0.0799%" height="15" fill="rgb(249,120,48)" fg:x="897" fg:w="1"/><text x="71.9526%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.7026%" y="613" width="0.0799%" height="15" fill="rgb(209,72,36)" fg:x="897" fg:w="1"/><text x="71.9526%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="71.7026%" y="597" width="0.0799%" height="15" fill="rgb(247,98,49)" fg:x="897" fg:w="1"/><text x="71.9526%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.7026%" y="581" width="0.0799%" height="15" fill="rgb(233,75,36)" fg:x="897" fg:w="1"/><text x="71.9526%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.7026%" y="565" width="0.0799%" height="15" fill="rgb(225,14,24)" fg:x="897" fg:w="1"/><text x="71.9526%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.7026%" y="549" width="0.0799%" height="15" fill="rgb(237,193,20)" fg:x="897" fg:w="1"/><text x="71.9526%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.7026%" y="533" width="0.0799%" height="15" fill="rgb(239,122,19)" fg:x="897" fg:w="1"/><text x="71.9526%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.7026%" y="517" width="0.0799%" height="15" fill="rgb(231,220,10)" fg:x="897" fg:w="1"/><text x="71.9526%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="71.7026%" y="501" width="0.0799%" height="15" fill="rgb(220,66,15)" fg:x="897" fg:w="1"/><text x="71.9526%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="71.7026%" y="485" width="0.0799%" height="15" fill="rgb(215,171,52)" fg:x="897" fg:w="1"/><text x="71.9526%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.7026%" y="469" width="0.0799%" height="15" fill="rgb(241,169,50)" fg:x="897" fg:w="1"/><text x="71.9526%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="71.7026%" y="453" width="0.0799%" height="15" fill="rgb(236,189,0)" fg:x="897" fg:w="1"/><text x="71.9526%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.7026%" y="437" width="0.0799%" height="15" fill="rgb(217,147,20)" fg:x="897" fg:w="1"/><text x="71.9526%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.7026%" y="421" width="0.0799%" height="15" fill="rgb(206,188,39)" fg:x="897" fg:w="1"/><text x="71.9526%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.7026%" y="405" width="0.0799%" height="15" fill="rgb(227,118,25)" fg:x="897" fg:w="1"/><text x="71.9526%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="71.7026%" y="389" width="0.0799%" height="15" fill="rgb(248,171,40)" fg:x="897" fg:w="1"/><text x="71.9526%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.7026%" y="373" width="0.0799%" height="15" fill="rgb(251,90,54)" fg:x="897" fg:w="1"/><text x="71.9526%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="71.7026%" y="357" width="0.0799%" height="15" fill="rgb(234,11,46)" fg:x="897" fg:w="1"/><text x="71.9526%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="71.7026%" y="341" width="0.0799%" height="15" fill="rgb(229,134,13)" fg:x="897" fg:w="1"/><text x="71.9526%" y="351.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="71.7026%" y="325" width="0.0799%" height="15" fill="rgb(223,129,3)" fg:x="897" fg:w="1"/><text x="71.9526%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.7026%" y="309" width="0.0799%" height="15" fill="rgb(221,124,13)" fg:x="897" fg:w="1"/><text x="71.9526%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (899 samples, 71.86%)</title><rect x="0.0000%" y="885" width="71.8625%" height="15" fill="rgb(234,3,18)" fg:x="0" fg:w="899"/><text x="0.2500%" y="895.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (899 samples, 71.86%)</title><rect x="0.0000%" y="869" width="71.8625%" height="15" fill="rgb(249,199,20)" fg:x="0" fg:w="899"/><text x="0.2500%" y="879.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (899 samples, 71.86%)</title><rect x="0.0000%" y="853" width="71.8625%" height="15" fill="rgb(224,134,6)" fg:x="0" fg:w="899"/><text x="0.2500%" y="863.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (692 samples, 55.32%)</title><rect x="16.5468%" y="837" width="55.3157%" height="15" fill="rgb(254,83,26)" fg:x="207" fg:w="692"/><text x="16.7968%" y="847.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (692 samples, 55.32%)</title><rect x="16.5468%" y="821" width="55.3157%" height="15" fill="rgb(217,88,9)" fg:x="207" fg:w="692"/><text x="16.7968%" y="831.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (692 samples, 55.32%)</title><rect x="16.5468%" y="805" width="55.3157%" height="15" fill="rgb(225,73,2)" fg:x="207" fg:w="692"/><text x="16.7968%" y="815.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (692 samples, 55.32%)</title><rect x="16.5468%" y="789" width="55.3157%" height="15" fill="rgb(226,44,39)" fg:x="207" fg:w="692"/><text x="16.7968%" y="799.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (692 samples, 55.32%)</title><rect x="16.5468%" y="773" width="55.3157%" height="15" fill="rgb(228,53,17)" fg:x="207" fg:w="692"/><text x="16.7968%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (692 samples, 55.32%)</title><rect x="16.5468%" y="757" width="55.3157%" height="15" fill="rgb(212,27,27)" fg:x="207" fg:w="692"/><text x="16.7968%" y="767.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (691 samples, 55.24%)</title><rect x="16.6267%" y="741" width="55.2358%" height="15" fill="rgb(241,50,6)" fg:x="208" fg:w="691"/><text x="16.8767%" y="751.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (691 samples, 55.24%)</title><rect x="16.6267%" y="725" width="55.2358%" height="15" fill="rgb(225,28,51)" fg:x="208" fg:w="691"/><text x="16.8767%" y="735.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (10 samples, 0.80%)</title><rect x="71.0631%" y="709" width="0.7994%" height="15" fill="rgb(215,33,16)" fg:x="889" fg:w="10"/><text x="71.3131%" y="719.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="71.7826%" y="693" width="0.0799%" height="15" fill="rgb(243,40,39)" fg:x="898" fg:w="1"/><text x="72.0326%" y="703.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="71.7826%" y="677" width="0.0799%" height="15" fill="rgb(225,11,42)" fg:x="898" fg:w="1"/><text x="72.0326%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="71.7826%" y="661" width="0.0799%" height="15" fill="rgb(241,220,38)" fg:x="898" fg:w="1"/><text x="72.0326%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="71.7826%" y="645" width="0.0799%" height="15" fill="rgb(244,52,35)" fg:x="898" fg:w="1"/><text x="72.0326%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.7826%" y="629" width="0.0799%" height="15" fill="rgb(246,42,46)" fg:x="898" fg:w="1"/><text x="72.0326%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.7826%" y="613" width="0.0799%" height="15" fill="rgb(205,184,13)" fg:x="898" fg:w="1"/><text x="72.0326%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.8625%" y="677" width="0.0799%" height="15" fill="rgb(209,48,36)" fg:x="899" fg:w="1"/><text x="72.1125%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;kernel::model::entity::ScopeValue&gt;&gt; (2 samples, 0.16%)</title><rect x="71.8625%" y="741" width="0.1599%" height="15" fill="rgb(244,34,51)" fg:x="899" fg:w="2"/><text x="72.1125%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.8625%" y="725" width="0.1599%" height="15" fill="rgb(221,107,33)" fg:x="899" fg:w="2"/><text x="72.1125%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.8625%" y="709" width="0.1599%" height="15" fill="rgb(224,203,12)" fg:x="899" fg:w="2"/><text x="72.1125%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.8625%" y="693" width="0.1599%" height="15" fill="rgb(230,215,18)" fg:x="899" fg:w="2"/><text x="72.1125%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.9424%" y="677" width="0.0799%" height="15" fill="rgb(206,185,35)" fg:x="900" fg:w="1"/><text x="72.1924%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.9424%" y="661" width="0.0799%" height="15" fill="rgb(228,140,34)" fg:x="900" fg:w="1"/><text x="72.1924%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.9424%" y="645" width="0.0799%" height="15" fill="rgb(208,93,13)" fg:x="900" fg:w="1"/><text x="72.1924%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.0224%" y="677" width="0.0799%" height="15" fill="rgb(221,193,39)" fg:x="901" fg:w="1"/><text x="72.2724%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0224%" y="661" width="0.0799%" height="15" fill="rgb(241,132,34)" fg:x="901" fg:w="1"/><text x="72.2724%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="71.8625%" y="837" width="0.3197%" height="15" fill="rgb(221,141,10)" fg:x="899" fg:w="4"/><text x="72.1125%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (4 samples, 0.32%)</title><rect x="71.8625%" y="821" width="0.3197%" height="15" fill="rgb(226,90,31)" fg:x="899" fg:w="4"/><text x="72.1125%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="71.8625%" y="805" width="0.3197%" height="15" fill="rgb(243,75,5)" fg:x="899" fg:w="4"/><text x="72.1125%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (4 samples, 0.32%)</title><rect x="71.8625%" y="789" width="0.3197%" height="15" fill="rgb(227,156,21)" fg:x="899" fg:w="4"/><text x="72.1125%" y="799.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="71.8625%" y="773" width="0.3197%" height="15" fill="rgb(250,195,8)" fg:x="899" fg:w="4"/><text x="72.1125%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="71.8625%" y="757" width="0.3197%" height="15" fill="rgb(220,134,5)" fg:x="899" fg:w="4"/><text x="72.1125%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.0224%" y="741" width="0.1599%" height="15" fill="rgb(246,106,34)" fg:x="901" fg:w="2"/><text x="72.2724%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="72.0224%" y="725" width="0.1599%" height="15" fill="rgb(205,1,4)" fg:x="901" fg:w="2"/><text x="72.2724%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.0224%" y="709" width="0.1599%" height="15" fill="rgb(224,151,29)" fg:x="901" fg:w="2"/><text x="72.2724%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.0224%" y="693" width="0.1599%" height="15" fill="rgb(251,196,0)" fg:x="901" fg:w="2"/><text x="72.2724%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1023%" y="677" width="0.0799%" height="15" fill="rgb(212,127,0)" fg:x="902" fg:w="1"/><text x="72.3523%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1023%" y="661" width="0.0799%" height="15" fill="rgb(236,71,53)" fg:x="902" fg:w="1"/><text x="72.3523%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="72.1823%" y="757" width="0.0799%" height="15" fill="rgb(227,99,0)" fg:x="903" fg:w="1"/><text x="72.4323%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="72.1823%" y="741" width="0.0799%" height="15" fill="rgb(239,89,21)" fg:x="903" fg:w="1"/><text x="72.4323%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.1823%" y="725" width="0.0799%" height="15" fill="rgb(243,122,19)" fg:x="903" fg:w="1"/><text x="72.4323%" y="735.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="72.1823%" y="709" width="0.0799%" height="15" fill="rgb(229,192,45)" fg:x="903" fg:w="1"/><text x="72.4323%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.1823%" y="693" width="0.0799%" height="15" fill="rgb(235,165,35)" fg:x="903" fg:w="1"/><text x="72.4323%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.1823%" y="677" width="0.0799%" height="15" fill="rgb(253,202,0)" fg:x="903" fg:w="1"/><text x="72.4323%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.2622%" y="677" width="0.0799%" height="15" fill="rgb(235,51,20)" fg:x="904" fg:w="1"/><text x="72.5122%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2622%" y="661" width="0.0799%" height="15" fill="rgb(218,95,46)" fg:x="904" fg:w="1"/><text x="72.5122%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.2622%" y="645" width="0.0799%" height="15" fill="rgb(212,81,10)" fg:x="904" fg:w="1"/><text x="72.5122%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.2622%" y="629" width="0.0799%" height="15" fill="rgb(240,59,0)" fg:x="904" fg:w="1"/><text x="72.5122%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.2622%" y="613" width="0.0799%" height="15" fill="rgb(212,191,42)" fg:x="904" fg:w="1"/><text x="72.5122%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2622%" y="597" width="0.0799%" height="15" fill="rgb(233,140,3)" fg:x="904" fg:w="1"/><text x="72.5122%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="72.2622%" y="741" width="0.1599%" height="15" fill="rgb(215,69,23)" fg:x="904" fg:w="2"/><text x="72.5122%" y="751.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="72.2622%" y="725" width="0.1599%" height="15" fill="rgb(240,202,20)" fg:x="904" fg:w="2"/><text x="72.5122%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.2622%" y="709" width="0.1599%" height="15" fill="rgb(209,146,50)" fg:x="904" fg:w="2"/><text x="72.5122%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.2622%" y="693" width="0.1599%" height="15" fill="rgb(253,102,54)" fg:x="904" fg:w="2"/><text x="72.5122%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3421%" y="677" width="0.0799%" height="15" fill="rgb(250,173,47)" fg:x="905" fg:w="1"/><text x="72.5921%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3421%" y="661" width="0.0799%" height="15" fill="rgb(232,142,7)" fg:x="905" fg:w="1"/><text x="72.5921%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.3421%" y="645" width="0.0799%" height="15" fill="rgb(230,157,47)" fg:x="905" fg:w="1"/><text x="72.5921%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.3421%" y="629" width="0.0799%" height="15" fill="rgb(214,177,35)" fg:x="905" fg:w="1"/><text x="72.5921%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.48%)</title><rect x="72.1823%" y="805" width="0.4796%" height="15" fill="rgb(234,119,46)" fg:x="903" fg:w="6"/><text x="72.4323%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="72.1823%" y="789" width="0.4796%" height="15" fill="rgb(241,180,50)" fg:x="903" fg:w="6"/><text x="72.4323%" y="799.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="72.1823%" y="773" width="0.4796%" height="15" fill="rgb(221,54,25)" fg:x="903" fg:w="6"/><text x="72.4323%" y="783.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="72.2622%" y="757" width="0.3997%" height="15" fill="rgb(209,157,44)" fg:x="904" fg:w="5"/><text x="72.5122%" y="767.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="72.4221%" y="741" width="0.2398%" height="15" fill="rgb(246,115,41)" fg:x="906" fg:w="3"/><text x="72.6721%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="72.4221%" y="725" width="0.2398%" height="15" fill="rgb(229,86,1)" fg:x="906" fg:w="3"/><text x="72.6721%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.4221%" y="709" width="0.2398%" height="15" fill="rgb(240,108,53)" fg:x="906" fg:w="3"/><text x="72.6721%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="72.4221%" y="693" width="0.2398%" height="15" fill="rgb(227,134,2)" fg:x="906" fg:w="3"/><text x="72.6721%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.5020%" y="677" width="0.1599%" height="15" fill="rgb(213,129,25)" fg:x="907" fg:w="2"/><text x="72.7520%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.5020%" y="661" width="0.1599%" height="15" fill="rgb(226,35,21)" fg:x="907" fg:w="2"/><text x="72.7520%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.5020%" y="645" width="0.1599%" height="15" fill="rgb(208,129,26)" fg:x="907" fg:w="2"/><text x="72.7520%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.5020%" y="629" width="0.1599%" height="15" fill="rgb(224,83,6)" fg:x="907" fg:w="2"/><text x="72.7520%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5819%" y="613" width="0.0799%" height="15" fill="rgb(227,52,39)" fg:x="908" fg:w="1"/><text x="72.8319%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.5819%" y="597" width="0.0799%" height="15" fill="rgb(241,30,17)" fg:x="908" fg:w="1"/><text x="72.8319%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5819%" y="581" width="0.0799%" height="15" fill="rgb(246,186,42)" fg:x="908" fg:w="1"/><text x="72.8319%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.5819%" y="565" width="0.0799%" height="15" fill="rgb(221,169,15)" fg:x="908" fg:w="1"/><text x="72.8319%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5819%" y="549" width="0.0799%" height="15" fill="rgb(235,108,21)" fg:x="908" fg:w="1"/><text x="72.8319%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5819%" y="533" width="0.0799%" height="15" fill="rgb(219,148,30)" fg:x="908" fg:w="1"/><text x="72.8319%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.5819%" y="517" width="0.0799%" height="15" fill="rgb(220,109,5)" fg:x="908" fg:w="1"/><text x="72.8319%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5819%" y="501" width="0.0799%" height="15" fill="rgb(213,203,48)" fg:x="908" fg:w="1"/><text x="72.8319%" y="511.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="72.6619%" y="805" width="0.0799%" height="15" fill="rgb(244,71,33)" fg:x="909" fg:w="1"/><text x="72.9119%" y="815.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="72.6619%" y="789" width="0.0799%" height="15" fill="rgb(209,23,2)" fg:x="909" fg:w="1"/><text x="72.9119%" y="799.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="72.6619%" y="773" width="0.0799%" height="15" fill="rgb(219,97,7)" fg:x="909" fg:w="1"/><text x="72.9119%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6619%" y="757" width="0.0799%" height="15" fill="rgb(216,161,23)" fg:x="909" fg:w="1"/><text x="72.9119%" y="767.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6619%" y="741" width="0.0799%" height="15" fill="rgb(207,45,42)" fg:x="909" fg:w="1"/><text x="72.9119%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="72.6619%" y="725" width="0.0799%" height="15" fill="rgb(241,61,4)" fg:x="909" fg:w="1"/><text x="72.9119%" y="735.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.6619%" y="709" width="0.0799%" height="15" fill="rgb(236,170,1)" fg:x="909" fg:w="1"/><text x="72.9119%" y="719.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="72.7418%" y="805" width="0.0799%" height="15" fill="rgb(239,72,5)" fg:x="910" fg:w="1"/><text x="72.9918%" y="815.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="72.7418%" y="789" width="0.0799%" height="15" fill="rgb(214,13,50)" fg:x="910" fg:w="1"/><text x="72.9918%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.7418%" y="773" width="0.0799%" height="15" fill="rgb(224,88,9)" fg:x="910" fg:w="1"/><text x="72.9918%" y="783.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="72.7418%" y="757" width="0.0799%" height="15" fill="rgb(238,192,34)" fg:x="910" fg:w="1"/><text x="72.9918%" y="767.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7418%" y="741" width="0.0799%" height="15" fill="rgb(217,203,50)" fg:x="910" fg:w="1"/><text x="72.9918%" y="751.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (1 samples, 0.08%)</title><rect x="72.8217%" y="805" width="0.0799%" height="15" fill="rgb(241,123,32)" fg:x="911" fg:w="1"/><text x="73.0717%" y="815.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="72.8217%" y="789" width="0.0799%" height="15" fill="rgb(248,151,39)" fg:x="911" fg:w="1"/><text x="73.0717%" y="799.50"></text></g><g><title>libloading::os::unix::Library::open (1 samples, 0.08%)</title><rect x="72.8217%" y="773" width="0.0799%" height="15" fill="rgb(208,89,6)" fg:x="911" fg:w="1"/><text x="73.0717%" y="783.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="72.8217%" y="757" width="0.0799%" height="15" fill="rgb(254,43,26)" fg:x="911" fg:w="1"/><text x="73.0717%" y="767.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="72.8217%" y="741" width="0.0799%" height="15" fill="rgb(216,158,13)" fg:x="911" fg:w="1"/><text x="73.0717%" y="751.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.80%)</title><rect x="72.1823%" y="837" width="0.7994%" height="15" fill="rgb(212,47,37)" fg:x="903" fg:w="10"/><text x="72.4323%" y="847.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.80%)</title><rect x="72.1823%" y="821" width="0.7994%" height="15" fill="rgb(254,16,10)" fg:x="903" fg:w="10"/><text x="72.4323%" y="831.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="72.9017%" y="805" width="0.0799%" height="15" fill="rgb(223,228,16)" fg:x="912" fg:w="1"/><text x="73.1517%" y="815.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="72.9017%" y="789" width="0.0799%" height="15" fill="rgb(249,108,50)" fg:x="912" fg:w="1"/><text x="73.1517%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.9017%" y="773" width="0.0799%" height="15" fill="rgb(208,220,5)" fg:x="912" fg:w="1"/><text x="73.1517%" y="783.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="72.9816%" y="741" width="0.1599%" height="15" fill="rgb(217,89,48)" fg:x="913" fg:w="2"/><text x="73.2316%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="72.9816%" y="725" width="0.1599%" height="15" fill="rgb(212,113,41)" fg:x="913" fg:w="2"/><text x="73.2316%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="72.9816%" y="709" width="0.1599%" height="15" fill="rgb(231,127,5)" fg:x="913" fg:w="2"/><text x="73.2316%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.0616%" y="693" width="0.0799%" height="15" fill="rgb(217,141,17)" fg:x="914" fg:w="1"/><text x="73.3116%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.1415%" y="709" width="0.0799%" height="15" fill="rgb(245,125,54)" fg:x="915" fg:w="1"/><text x="73.3915%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.1415%" y="693" width="0.0799%" height="15" fill="rgb(248,125,3)" fg:x="915" fg:w="1"/><text x="73.3915%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="73.1415%" y="725" width="0.1599%" height="15" fill="rgb(236,119,51)" fg:x="915" fg:w="2"/><text x="73.3915%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2214%" y="709" width="0.0799%" height="15" fill="rgb(239,99,8)" fg:x="916" fg:w="1"/><text x="73.4714%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2214%" y="693" width="0.0799%" height="15" fill="rgb(224,228,4)" fg:x="916" fg:w="1"/><text x="73.4714%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="73.2214%" y="677" width="0.0799%" height="15" fill="rgb(220,131,45)" fg:x="916" fg:w="1"/><text x="73.4714%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.2214%" y="661" width="0.0799%" height="15" fill="rgb(215,62,5)" fg:x="916" fg:w="1"/><text x="73.4714%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.2214%" y="645" width="0.0799%" height="15" fill="rgb(253,12,24)" fg:x="916" fg:w="1"/><text x="73.4714%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.2214%" y="629" width="0.0799%" height="15" fill="rgb(248,120,50)" fg:x="916" fg:w="1"/><text x="73.4714%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.2214%" y="613" width="0.0799%" height="15" fill="rgb(245,194,10)" fg:x="916" fg:w="1"/><text x="73.4714%" y="623.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="72.9816%" y="757" width="0.3997%" height="15" fill="rgb(241,149,38)" fg:x="913" fg:w="5"/><text x="73.2316%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.1415%" y="741" width="0.2398%" height="15" fill="rgb(219,215,7)" fg:x="915" fg:w="3"/><text x="73.3915%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.3014%" y="725" width="0.0799%" height="15" fill="rgb(208,120,31)" fg:x="917" fg:w="1"/><text x="73.5514%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.3014%" y="709" width="0.0799%" height="15" fill="rgb(244,30,8)" fg:x="917" fg:w="1"/><text x="73.5514%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.3014%" y="693" width="0.0799%" height="15" fill="rgb(238,35,44)" fg:x="917" fg:w="1"/><text x="73.5514%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.3014%" y="677" width="0.0799%" height="15" fill="rgb(243,218,37)" fg:x="917" fg:w="1"/><text x="73.5514%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.3014%" y="661" width="0.0799%" height="15" fill="rgb(218,169,10)" fg:x="917" fg:w="1"/><text x="73.5514%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="73.3014%" y="645" width="0.0799%" height="15" fill="rgb(221,144,10)" fg:x="917" fg:w="1"/><text x="73.5514%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.3813%" y="757" width="0.1599%" height="15" fill="rgb(226,41,38)" fg:x="918" fg:w="2"/><text x="73.6313%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="73.3813%" y="741" width="0.1599%" height="15" fill="rgb(228,3,1)" fg:x="918" fg:w="2"/><text x="73.6313%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4612%" y="725" width="0.0799%" height="15" fill="rgb(209,129,12)" fg:x="919" fg:w="1"/><text x="73.7112%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4612%" y="709" width="0.0799%" height="15" fill="rgb(213,136,33)" fg:x="919" fg:w="1"/><text x="73.7112%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.4612%" y="693" width="0.0799%" height="15" fill="rgb(209,181,29)" fg:x="919" fg:w="1"/><text x="73.7112%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.7810%" y="661" width="0.0799%" height="15" fill="rgb(234,173,18)" fg:x="923" fg:w="1"/><text x="74.0310%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7810%" y="645" width="0.0799%" height="15" fill="rgb(227,73,47)" fg:x="923" fg:w="1"/><text x="74.0310%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.7810%" y="629" width="0.0799%" height="15" fill="rgb(234,9,34)" fg:x="923" fg:w="1"/><text x="74.0310%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7810%" y="613" width="0.0799%" height="15" fill="rgb(235,172,15)" fg:x="923" fg:w="1"/><text x="74.0310%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7810%" y="597" width="0.0799%" height="15" fill="rgb(245,61,2)" fg:x="923" fg:w="1"/><text x="74.0310%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7810%" y="581" width="0.0799%" height="15" fill="rgb(238,39,47)" fg:x="923" fg:w="1"/><text x="74.0310%" y="591.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.04%)</title><rect x="72.9816%" y="821" width="1.0392%" height="15" fill="rgb(234,37,24)" fg:x="913" fg:w="13"/><text x="73.2316%" y="831.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.04%)</title><rect x="72.9816%" y="805" width="1.0392%" height="15" fill="rgb(248,223,24)" fg:x="913" fg:w="13"/><text x="73.2316%" y="815.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (13 samples, 1.04%)</title><rect x="72.9816%" y="789" width="1.0392%" height="15" fill="rgb(223,12,15)" fg:x="913" fg:w="13"/><text x="73.2316%" y="799.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (13 samples, 1.04%)</title><rect x="72.9816%" y="773" width="1.0392%" height="15" fill="rgb(249,6,3)" fg:x="913" fg:w="13"/><text x="73.2316%" y="783.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="73.5412%" y="757" width="0.4796%" height="15" fill="rgb(237,105,33)" fg:x="920" fg:w="6"/><text x="73.7912%" y="767.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="73.5412%" y="741" width="0.4796%" height="15" fill="rgb(252,208,35)" fg:x="920" fg:w="6"/><text x="73.7912%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="73.5412%" y="725" width="0.4796%" height="15" fill="rgb(215,181,35)" fg:x="920" fg:w="6"/><text x="73.7912%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="73.7010%" y="709" width="0.3197%" height="15" fill="rgb(246,212,3)" fg:x="922" fg:w="4"/><text x="73.9510%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="73.7810%" y="693" width="0.2398%" height="15" fill="rgb(247,156,24)" fg:x="923" fg:w="3"/><text x="74.0310%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="73.7810%" y="677" width="0.2398%" height="15" fill="rgb(248,9,31)" fg:x="923" fg:w="3"/><text x="74.0310%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.8609%" y="661" width="0.1599%" height="15" fill="rgb(234,26,45)" fg:x="924" fg:w="2"/><text x="74.1109%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.8609%" y="645" width="0.1599%" height="15" fill="rgb(249,11,32)" fg:x="924" fg:w="2"/><text x="74.1109%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.8609%" y="629" width="0.1599%" height="15" fill="rgb(249,162,33)" fg:x="924" fg:w="2"/><text x="74.1109%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.8609%" y="613" width="0.1599%" height="15" fill="rgb(232,4,32)" fg:x="924" fg:w="2"/><text x="74.1109%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.8609%" y="597" width="0.1599%" height="15" fill="rgb(212,5,45)" fg:x="924" fg:w="2"/><text x="74.1109%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.8609%" y="581" width="0.1599%" height="15" fill="rgb(227,95,13)" fg:x="924" fg:w="2"/><text x="74.1109%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.9408%" y="565" width="0.0799%" height="15" fill="rgb(223,205,10)" fg:x="925" fg:w="1"/><text x="74.1908%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.9408%" y="549" width="0.0799%" height="15" fill="rgb(222,178,8)" fg:x="925" fg:w="1"/><text x="74.1908%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9408%" y="533" width="0.0799%" height="15" fill="rgb(216,13,22)" fg:x="925" fg:w="1"/><text x="74.1908%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9408%" y="517" width="0.0799%" height="15" fill="rgb(240,167,12)" fg:x="925" fg:w="1"/><text x="74.1908%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9408%" y="501" width="0.0799%" height="15" fill="rgb(235,68,35)" fg:x="925" fg:w="1"/><text x="74.1908%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="74.0208%" y="789" width="0.0799%" height="15" fill="rgb(253,40,27)" fg:x="926" fg:w="1"/><text x="74.2708%" y="799.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="74.0208%" y="773" width="0.0799%" height="15" fill="rgb(214,19,28)" fg:x="926" fg:w="1"/><text x="74.2708%" y="783.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.0208%" y="757" width="0.0799%" height="15" fill="rgb(210,167,45)" fg:x="926" fg:w="1"/><text x="74.2708%" y="767.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="74.0208%" y="741" width="0.0799%" height="15" fill="rgb(232,97,40)" fg:x="926" fg:w="1"/><text x="74.2708%" y="751.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="74.0208%" y="821" width="0.1599%" height="15" fill="rgb(250,35,23)" fg:x="926" fg:w="2"/><text x="74.2708%" y="831.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="74.0208%" y="805" width="0.1599%" height="15" fill="rgb(248,47,53)" fg:x="926" fg:w="2"/><text x="74.2708%" y="815.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="74.1007%" y="789" width="0.0799%" height="15" fill="rgb(226,58,50)" fg:x="927" fg:w="1"/><text x="74.3507%" y="799.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="74.1007%" y="773" width="0.0799%" height="15" fill="rgb(217,105,26)" fg:x="927" fg:w="1"/><text x="74.3507%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="74.1007%" y="757" width="0.0799%" height="15" fill="rgb(208,64,1)" fg:x="927" fg:w="1"/><text x="74.3507%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.1007%" y="741" width="0.0799%" height="15" fill="rgb(214,80,1)" fg:x="927" fg:w="1"/><text x="74.3507%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="74.1007%" y="725" width="0.0799%" height="15" fill="rgb(206,175,26)" fg:x="927" fg:w="1"/><text x="74.3507%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="74.1007%" y="709" width="0.0799%" height="15" fill="rgb(235,156,37)" fg:x="927" fg:w="1"/><text x="74.3507%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1007%" y="693" width="0.0799%" height="15" fill="rgb(213,100,9)" fg:x="927" fg:w="1"/><text x="74.3507%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1007%" y="677" width="0.0799%" height="15" fill="rgb(241,15,13)" fg:x="927" fg:w="1"/><text x="74.3507%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1007%" y="661" width="0.0799%" height="15" fill="rgb(205,97,43)" fg:x="927" fg:w="1"/><text x="74.3507%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1007%" y="645" width="0.0799%" height="15" fill="rgb(216,106,32)" fg:x="927" fg:w="1"/><text x="74.3507%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.1007%" y="629" width="0.0799%" height="15" fill="rgb(226,200,8)" fg:x="927" fg:w="1"/><text x="74.3507%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1007%" y="613" width="0.0799%" height="15" fill="rgb(244,54,29)" fg:x="927" fg:w="1"/><text x="74.3507%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1007%" y="597" width="0.0799%" height="15" fill="rgb(252,169,12)" fg:x="927" fg:w="1"/><text x="74.3507%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1007%" y="581" width="0.0799%" height="15" fill="rgb(231,199,11)" fg:x="927" fg:w="1"/><text x="74.3507%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.1007%" y="565" width="0.0799%" height="15" fill="rgb(233,191,18)" fg:x="927" fg:w="1"/><text x="74.3507%" y="575.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="74.1807%" y="821" width="0.0799%" height="15" fill="rgb(215,83,47)" fg:x="928" fg:w="1"/><text x="74.4307%" y="831.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.1807%" y="805" width="0.0799%" height="15" fill="rgb(251,67,19)" fg:x="928" fg:w="1"/><text x="74.4307%" y="815.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.1807%" y="789" width="0.0799%" height="15" fill="rgb(240,7,20)" fg:x="928" fg:w="1"/><text x="74.4307%" y="799.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.1807%" y="773" width="0.0799%" height="15" fill="rgb(210,150,26)" fg:x="928" fg:w="1"/><text x="74.4307%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.1807%" y="757" width="0.0799%" height="15" fill="rgb(228,75,42)" fg:x="928" fg:w="1"/><text x="74.4307%" y="767.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="74.1807%" y="741" width="0.0799%" height="15" fill="rgb(237,134,48)" fg:x="928" fg:w="1"/><text x="74.4307%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="74.1807%" y="725" width="0.0799%" height="15" fill="rgb(205,80,50)" fg:x="928" fg:w="1"/><text x="74.4307%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="74.1807%" y="709" width="0.0799%" height="15" fill="rgb(217,74,48)" fg:x="928" fg:w="1"/><text x="74.4307%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1807%" y="693" width="0.0799%" height="15" fill="rgb(205,82,50)" fg:x="928" fg:w="1"/><text x="74.4307%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.1807%" y="677" width="0.0799%" height="15" fill="rgb(228,1,33)" fg:x="928" fg:w="1"/><text x="74.4307%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1807%" y="661" width="0.0799%" height="15" fill="rgb(214,50,23)" fg:x="928" fg:w="1"/><text x="74.4307%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.1807%" y="645" width="0.0799%" height="15" fill="rgb(210,62,9)" fg:x="928" fg:w="1"/><text x="74.4307%" y="655.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.2606%" y="789" width="0.0799%" height="15" fill="rgb(210,104,37)" fg:x="929" fg:w="1"/><text x="74.5106%" y="799.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="74.2606%" y="773" width="0.0799%" height="15" fill="rgb(232,104,43)" fg:x="929" fg:w="1"/><text x="74.5106%" y="783.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.2606%" y="757" width="0.0799%" height="15" fill="rgb(244,52,6)" fg:x="929" fg:w="1"/><text x="74.5106%" y="767.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="74.2606%" y="741" width="0.0799%" height="15" fill="rgb(211,174,52)" fg:x="929" fg:w="1"/><text x="74.5106%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="74.2606%" y="725" width="0.0799%" height="15" fill="rgb(229,48,4)" fg:x="929" fg:w="1"/><text x="74.5106%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.2606%" y="709" width="0.0799%" height="15" fill="rgb(205,155,16)" fg:x="929" fg:w="1"/><text x="74.5106%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="74.2606%" y="805" width="0.1599%" height="15" fill="rgb(211,141,53)" fg:x="929" fg:w="2"/><text x="74.5106%" y="815.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="74.3405%" y="789" width="0.0799%" height="15" fill="rgb(240,148,11)" fg:x="930" fg:w="1"/><text x="74.5905%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3405%" y="773" width="0.0799%" height="15" fill="rgb(214,45,23)" fg:x="930" fg:w="1"/><text x="74.5905%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3405%" y="757" width="0.0799%" height="15" fill="rgb(248,74,26)" fg:x="930" fg:w="1"/><text x="74.5905%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3405%" y="741" width="0.0799%" height="15" fill="rgb(218,121,16)" fg:x="930" fg:w="1"/><text x="74.5905%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3405%" y="725" width="0.0799%" height="15" fill="rgb(218,10,47)" fg:x="930" fg:w="1"/><text x="74.5905%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3405%" y="709" width="0.0799%" height="15" fill="rgb(227,99,14)" fg:x="930" fg:w="1"/><text x="74.5905%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.3405%" y="693" width="0.0799%" height="15" fill="rgb(229,83,46)" fg:x="930" fg:w="1"/><text x="74.5905%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.3405%" y="677" width="0.0799%" height="15" fill="rgb(228,25,1)" fg:x="930" fg:w="1"/><text x="74.5905%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.4205%" y="741" width="0.0799%" height="15" fill="rgb(252,190,15)" fg:x="931" fg:w="1"/><text x="74.6705%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.4205%" y="725" width="0.0799%" height="15" fill="rgb(213,103,51)" fg:x="931" fg:w="1"/><text x="74.6705%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="74.4205%" y="709" width="0.0799%" height="15" fill="rgb(220,38,44)" fg:x="931" fg:w="1"/><text x="74.6705%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4205%" y="693" width="0.0799%" height="15" fill="rgb(210,45,26)" fg:x="931" fg:w="1"/><text x="74.6705%" y="703.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="74.4205%" y="757" width="0.1599%" height="15" fill="rgb(205,95,48)" fg:x="931" fg:w="2"/><text x="74.6705%" y="767.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="74.5004%" y="741" width="0.0799%" height="15" fill="rgb(225,179,37)" fg:x="932" fg:w="1"/><text x="74.7504%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="74.5004%" y="725" width="0.0799%" height="15" fill="rgb(230,209,3)" fg:x="932" fg:w="1"/><text x="74.7504%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="74.5004%" y="709" width="0.0799%" height="15" fill="rgb(248,12,46)" fg:x="932" fg:w="1"/><text x="74.7504%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.5004%" y="693" width="0.0799%" height="15" fill="rgb(234,18,0)" fg:x="932" fg:w="1"/><text x="74.7504%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5004%" y="677" width="0.0799%" height="15" fill="rgb(238,197,14)" fg:x="932" fg:w="1"/><text x="74.7504%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="74.4205%" y="805" width="0.2398%" height="15" fill="rgb(251,162,48)" fg:x="931" fg:w="3"/><text x="74.6705%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="74.4205%" y="789" width="0.2398%" height="15" fill="rgb(237,73,42)" fg:x="931" fg:w="3"/><text x="74.6705%" y="799.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="74.4205%" y="773" width="0.2398%" height="15" fill="rgb(211,108,8)" fg:x="931" fg:w="3"/><text x="74.6705%" y="783.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="74.5803%" y="757" width="0.0799%" height="15" fill="rgb(213,45,22)" fg:x="933" fg:w="1"/><text x="74.8303%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="74.5803%" y="741" width="0.0799%" height="15" fill="rgb(252,154,5)" fg:x="933" fg:w="1"/><text x="74.8303%" y="751.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="74.5803%" y="725" width="0.0799%" height="15" fill="rgb(221,79,52)" fg:x="933" fg:w="1"/><text x="74.8303%" y="735.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5803%" y="709" width="0.0799%" height="15" fill="rgb(229,220,36)" fg:x="933" fg:w="1"/><text x="74.8303%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="74.6603%" y="725" width="0.0799%" height="15" fill="rgb(211,17,16)" fg:x="934" fg:w="1"/><text x="74.9103%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.7402%" y="661" width="0.0799%" height="15" fill="rgb(222,55,31)" fg:x="935" fg:w="1"/><text x="74.9902%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.7402%" y="645" width="0.0799%" height="15" fill="rgb(221,221,31)" fg:x="935" fg:w="1"/><text x="74.9902%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.7402%" y="629" width="0.0799%" height="15" fill="rgb(227,168,26)" fg:x="935" fg:w="1"/><text x="74.9902%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.7402%" y="613" width="0.0799%" height="15" fill="rgb(224,139,9)" fg:x="935" fg:w="1"/><text x="74.9902%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="74.7402%" y="709" width="0.1599%" height="15" fill="rgb(254,172,0)" fg:x="935" fg:w="2"/><text x="74.9902%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="74.7402%" y="693" width="0.1599%" height="15" fill="rgb(235,203,1)" fg:x="935" fg:w="2"/><text x="74.9902%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="74.7402%" y="677" width="0.1599%" height="15" fill="rgb(216,205,24)" fg:x="935" fg:w="2"/><text x="74.9902%" y="687.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="74.8201%" y="661" width="0.0799%" height="15" fill="rgb(233,24,6)" fg:x="936" fg:w="1"/><text x="75.0701%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9001%" y="645" width="0.0799%" height="15" fill="rgb(244,110,9)" fg:x="937" fg:w="1"/><text x="75.1501%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.9001%" y="629" width="0.0799%" height="15" fill="rgb(239,222,42)" fg:x="937" fg:w="1"/><text x="75.1501%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.9001%" y="613" width="0.0799%" height="15" fill="rgb(218,145,13)" fg:x="937" fg:w="1"/><text x="75.1501%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.9001%" y="597" width="0.0799%" height="15" fill="rgb(207,69,11)" fg:x="937" fg:w="1"/><text x="75.1501%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.9001%" y="581" width="0.0799%" height="15" fill="rgb(220,223,22)" fg:x="937" fg:w="1"/><text x="75.1501%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.9001%" y="565" width="0.0799%" height="15" fill="rgb(245,102,5)" fg:x="937" fg:w="1"/><text x="75.1501%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.9001%" y="549" width="0.0799%" height="15" fill="rgb(211,148,2)" fg:x="937" fg:w="1"/><text x="75.1501%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.9001%" y="661" width="0.1599%" height="15" fill="rgb(241,13,44)" fg:x="937" fg:w="2"/><text x="75.1501%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.9800%" y="645" width="0.0799%" height="15" fill="rgb(219,137,21)" fg:x="938" fg:w="1"/><text x="75.2300%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.9001%" y="677" width="0.2398%" height="15" fill="rgb(242,206,5)" fg:x="937" fg:w="3"/><text x="75.1501%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.0600%" y="661" width="0.0799%" height="15" fill="rgb(217,114,22)" fg:x="939" fg:w="1"/><text x="75.3100%" y="671.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="74.6603%" y="741" width="0.5596%" height="15" fill="rgb(253,206,42)" fg:x="934" fg:w="7"/><text x="74.9103%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="74.7402%" y="725" width="0.4796%" height="15" fill="rgb(236,102,18)" fg:x="935" fg:w="6"/><text x="74.9902%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="74.9001%" y="709" width="0.3197%" height="15" fill="rgb(208,59,49)" fg:x="937" fg:w="4"/><text x="75.1501%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="74.9001%" y="693" width="0.3197%" height="15" fill="rgb(215,194,28)" fg:x="937" fg:w="4"/><text x="75.1501%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.1399%" y="677" width="0.0799%" height="15" fill="rgb(243,207,11)" fg:x="940" fg:w="1"/><text x="75.3899%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.1399%" y="661" width="0.0799%" height="15" fill="rgb(254,179,35)" fg:x="940" fg:w="1"/><text x="75.3899%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.1399%" y="645" width="0.0799%" height="15" fill="rgb(235,97,3)" fg:x="940" fg:w="1"/><text x="75.3899%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.2998%" y="709" width="0.0799%" height="15" fill="rgb(215,155,33)" fg:x="942" fg:w="1"/><text x="75.5498%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2998%" y="693" width="0.0799%" height="15" fill="rgb(223,128,12)" fg:x="942" fg:w="1"/><text x="75.5498%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.3797%" y="693" width="0.0799%" height="15" fill="rgb(208,157,18)" fg:x="943" fg:w="1"/><text x="75.6297%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.2198%" y="741" width="0.3197%" height="15" fill="rgb(249,70,54)" fg:x="941" fg:w="4"/><text x="75.4698%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="75.2198%" y="725" width="0.3197%" height="15" fill="rgb(244,118,24)" fg:x="941" fg:w="4"/><text x="75.4698%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.3797%" y="709" width="0.1599%" height="15" fill="rgb(211,54,0)" fg:x="943" fg:w="2"/><text x="75.6297%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.4596%" y="693" width="0.0799%" height="15" fill="rgb(245,137,45)" fg:x="944" fg:w="1"/><text x="75.7096%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5396%" y="693" width="0.0799%" height="15" fill="rgb(232,154,31)" fg:x="945" fg:w="1"/><text x="75.7896%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5396%" y="677" width="0.0799%" height="15" fill="rgb(253,6,39)" fg:x="945" fg:w="1"/><text x="75.7896%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="75.6994%" y="645" width="0.0799%" height="15" fill="rgb(234,183,24)" fg:x="947" fg:w="1"/><text x="75.9494%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.6994%" y="629" width="0.0799%" height="15" fill="rgb(252,84,40)" fg:x="947" fg:w="1"/><text x="75.9494%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.6994%" y="613" width="0.0799%" height="15" fill="rgb(224,65,2)" fg:x="947" fg:w="1"/><text x="75.9494%" y="623.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.20%)</title><rect x="74.6603%" y="805" width="1.1990%" height="15" fill="rgb(229,38,24)" fg:x="934" fg:w="15"/><text x="74.9103%" y="815.50"></text></g><g><title>engine::session::Session::save_entity_changes (15 samples, 1.20%)</title><rect x="74.6603%" y="789" width="1.1990%" height="15" fill="rgb(218,131,50)" fg:x="934" fg:w="15"/><text x="74.9103%" y="799.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (15 samples, 1.20%)</title><rect x="74.6603%" y="773" width="1.1990%" height="15" fill="rgb(233,106,18)" fg:x="934" fg:w="15"/><text x="74.9103%" y="783.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (15 samples, 1.20%)</title><rect x="74.6603%" y="757" width="1.1990%" height="15" fill="rgb(220,216,11)" fg:x="934" fg:w="15"/><text x="74.9103%" y="767.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="75.5396%" y="741" width="0.3197%" height="15" fill="rgb(251,100,45)" fg:x="945" fg:w="4"/><text x="75.7896%" y="751.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="75.5396%" y="725" width="0.3197%" height="15" fill="rgb(235,143,32)" fg:x="945" fg:w="4"/><text x="75.7896%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="75.5396%" y="709" width="0.3197%" height="15" fill="rgb(248,124,34)" fg:x="945" fg:w="4"/><text x="75.7896%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="75.6195%" y="693" width="0.2398%" height="15" fill="rgb(225,221,4)" fg:x="946" fg:w="3"/><text x="75.8695%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.6195%" y="677" width="0.2398%" height="15" fill="rgb(242,27,43)" fg:x="946" fg:w="3"/><text x="75.8695%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="75.6195%" y="661" width="0.2398%" height="15" fill="rgb(227,54,8)" fg:x="946" fg:w="3"/><text x="75.8695%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7794%" y="645" width="0.0799%" height="15" fill="rgb(253,139,49)" fg:x="948" fg:w="1"/><text x="76.0294%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7794%" y="629" width="0.0799%" height="15" fill="rgb(231,26,43)" fg:x="948" fg:w="1"/><text x="76.0294%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.8593%" y="789" width="0.0799%" height="15" fill="rgb(207,121,39)" fg:x="949" fg:w="1"/><text x="76.1093%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.8593%" y="773" width="0.0799%" height="15" fill="rgb(223,101,35)" fg:x="949" fg:w="1"/><text x="76.1093%" y="783.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="75.8593%" y="757" width="0.0799%" height="15" fill="rgb(232,87,23)" fg:x="949" fg:w="1"/><text x="76.1093%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8593%" y="741" width="0.0799%" height="15" fill="rgb(225,180,29)" fg:x="949" fg:w="1"/><text x="76.1093%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8593%" y="725" width="0.0799%" height="15" fill="rgb(225,25,17)" fg:x="949" fg:w="1"/><text x="76.1093%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.8593%" y="709" width="0.0799%" height="15" fill="rgb(223,8,52)" fg:x="949" fg:w="1"/><text x="76.1093%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.8593%" y="693" width="0.0799%" height="15" fill="rgb(246,42,21)" fg:x="949" fg:w="1"/><text x="76.1093%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.9392%" y="693" width="0.0799%" height="15" fill="rgb(205,64,43)" fg:x="950" fg:w="1"/><text x="76.1892%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9392%" y="677" width="0.0799%" height="15" fill="rgb(221,160,13)" fg:x="950" fg:w="1"/><text x="76.1892%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.9392%" y="661" width="0.0799%" height="15" fill="rgb(239,58,35)" fg:x="950" fg:w="1"/><text x="76.1892%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9392%" y="645" width="0.0799%" height="15" fill="rgb(251,26,40)" fg:x="950" fg:w="1"/><text x="76.1892%" y="655.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="75.9392%" y="773" width="0.1599%" height="15" fill="rgb(247,0,4)" fg:x="950" fg:w="2"/><text x="76.1892%" y="783.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="75.9392%" y="757" width="0.1599%" height="15" fill="rgb(218,130,10)" fg:x="950" fg:w="2"/><text x="76.1892%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="75.9392%" y="741" width="0.1599%" height="15" fill="rgb(239,32,7)" fg:x="950" fg:w="2"/><text x="76.1892%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="75.9392%" y="725" width="0.1599%" height="15" fill="rgb(210,192,24)" fg:x="950" fg:w="2"/><text x="76.1892%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="75.9392%" y="709" width="0.1599%" height="15" fill="rgb(226,212,17)" fg:x="950" fg:w="2"/><text x="76.1892%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.0192%" y="693" width="0.0799%" height="15" fill="rgb(219,201,28)" fg:x="951" fg:w="1"/><text x="76.2692%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0192%" y="677" width="0.0799%" height="15" fill="rgb(235,207,41)" fg:x="951" fg:w="1"/><text x="76.2692%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.0192%" y="661" width="0.0799%" height="15" fill="rgb(241,95,54)" fg:x="951" fg:w="1"/><text x="76.2692%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.0192%" y="645" width="0.0799%" height="15" fill="rgb(248,12,23)" fg:x="951" fg:w="1"/><text x="76.2692%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.0991%" y="645" width="0.0799%" height="15" fill="rgb(228,173,4)" fg:x="952" fg:w="1"/><text x="76.3491%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.0991%" y="629" width="0.0799%" height="15" fill="rgb(254,99,5)" fg:x="952" fg:w="1"/><text x="76.3491%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.0991%" y="613" width="0.0799%" height="15" fill="rgb(212,184,17)" fg:x="952" fg:w="1"/><text x="76.3491%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.0991%" y="597" width="0.0799%" height="15" fill="rgb(252,174,1)" fg:x="952" fg:w="1"/><text x="76.3491%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="76.0991%" y="725" width="0.1599%" height="15" fill="rgb(241,118,51)" fg:x="952" fg:w="2"/><text x="76.3491%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="76.0991%" y="709" width="0.1599%" height="15" fill="rgb(227,94,47)" fg:x="952" fg:w="2"/><text x="76.3491%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="76.0991%" y="693" width="0.1599%" height="15" fill="rgb(229,104,2)" fg:x="952" fg:w="2"/><text x="76.3491%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="76.0991%" y="677" width="0.1599%" height="15" fill="rgb(219,28,31)" fg:x="952" fg:w="2"/><text x="76.3491%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.0991%" y="661" width="0.1599%" height="15" fill="rgb(233,109,36)" fg:x="952" fg:w="2"/><text x="76.3491%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1791%" y="645" width="0.0799%" height="15" fill="rgb(246,88,11)" fg:x="953" fg:w="1"/><text x="76.4291%" y="655.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="75.8593%" y="805" width="0.4796%" height="15" fill="rgb(209,212,17)" fg:x="949" fg:w="6"/><text x="76.1093%" y="815.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="75.9392%" y="789" width="0.3997%" height="15" fill="rgb(243,59,29)" fg:x="950" fg:w="5"/><text x="76.1892%" y="799.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="76.0991%" y="773" width="0.2398%" height="15" fill="rgb(244,205,48)" fg:x="952" fg:w="3"/><text x="76.3491%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="76.0991%" y="757" width="0.2398%" height="15" fill="rgb(227,30,6)" fg:x="952" fg:w="3"/><text x="76.3491%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="76.0991%" y="741" width="0.2398%" height="15" fill="rgb(220,205,48)" fg:x="952" fg:w="3"/><text x="76.3491%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.2590%" y="725" width="0.0799%" height="15" fill="rgb(250,94,14)" fg:x="954" fg:w="1"/><text x="76.5090%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="76.2590%" y="709" width="0.0799%" height="15" fill="rgb(216,119,42)" fg:x="954" fg:w="1"/><text x="76.5090%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="76.2590%" y="693" width="0.0799%" height="15" fill="rgb(232,155,0)" fg:x="954" fg:w="1"/><text x="76.5090%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="76.2590%" y="677" width="0.0799%" height="15" fill="rgb(212,24,32)" fg:x="954" fg:w="1"/><text x="76.5090%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2590%" y="661" width="0.0799%" height="15" fill="rgb(216,69,20)" fg:x="954" fg:w="1"/><text x="76.5090%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2590%" y="645" width="0.0799%" height="15" fill="rgb(229,73,31)" fg:x="954" fg:w="1"/><text x="76.5090%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2590%" y="629" width="0.0799%" height="15" fill="rgb(224,219,20)" fg:x="954" fg:w="1"/><text x="76.5090%" y="639.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="76.3389%" y="725" width="0.0799%" height="15" fill="rgb(215,146,41)" fg:x="955" fg:w="1"/><text x="76.5889%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="76.3389%" y="709" width="0.0799%" height="15" fill="rgb(244,71,31)" fg:x="955" fg:w="1"/><text x="76.5889%" y="719.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3389%" y="693" width="0.0799%" height="15" fill="rgb(224,24,11)" fg:x="955" fg:w="1"/><text x="76.5889%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3389%" y="677" width="0.0799%" height="15" fill="rgb(229,76,15)" fg:x="955" fg:w="1"/><text x="76.5889%" y="687.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3389%" y="661" width="0.0799%" height="15" fill="rgb(209,93,2)" fg:x="955" fg:w="1"/><text x="76.5889%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3389%" y="645" width="0.0799%" height="15" fill="rgb(216,200,50)" fg:x="955" fg:w="1"/><text x="76.5889%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.3389%" y="629" width="0.0799%" height="15" fill="rgb(211,67,34)" fg:x="955" fg:w="1"/><text x="76.5889%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3389%" y="613" width="0.0799%" height="15" fill="rgb(225,87,47)" fg:x="955" fg:w="1"/><text x="76.5889%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3389%" y="597" width="0.0799%" height="15" fill="rgb(217,185,16)" fg:x="955" fg:w="1"/><text x="76.5889%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3389%" y="581" width="0.0799%" height="15" fill="rgb(205,0,0)" fg:x="955" fg:w="1"/><text x="76.5889%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.3389%" y="565" width="0.0799%" height="15" fill="rgb(207,116,45)" fg:x="955" fg:w="1"/><text x="76.5889%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3389%" y="549" width="0.0799%" height="15" fill="rgb(221,156,26)" fg:x="955" fg:w="1"/><text x="76.5889%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.3389%" y="789" width="0.1599%" height="15" fill="rgb(213,140,4)" fg:x="955" fg:w="2"/><text x="76.5889%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="76.3389%" y="773" width="0.1599%" height="15" fill="rgb(231,224,15)" fg:x="955" fg:w="2"/><text x="76.5889%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="76.3389%" y="757" width="0.1599%" height="15" fill="rgb(244,76,20)" fg:x="955" fg:w="2"/><text x="76.5889%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="76.3389%" y="741" width="0.1599%" height="15" fill="rgb(238,117,7)" fg:x="955" fg:w="2"/><text x="76.5889%" y="751.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="76.4189%" y="725" width="0.0799%" height="15" fill="rgb(235,1,10)" fg:x="956" fg:w="1"/><text x="76.6689%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="76.4189%" y="709" width="0.0799%" height="15" fill="rgb(216,165,6)" fg:x="956" fg:w="1"/><text x="76.6689%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="76.4189%" y="693" width="0.0799%" height="15" fill="rgb(246,91,35)" fg:x="956" fg:w="1"/><text x="76.6689%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4189%" y="677" width="0.0799%" height="15" fill="rgb(228,96,24)" fg:x="956" fg:w="1"/><text x="76.6689%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.4189%" y="661" width="0.0799%" height="15" fill="rgb(254,217,53)" fg:x="956" fg:w="1"/><text x="76.6689%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4189%" y="645" width="0.0799%" height="15" fill="rgb(209,60,0)" fg:x="956" fg:w="1"/><text x="76.6689%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4189%" y="629" width="0.0799%" height="15" fill="rgb(250,93,26)" fg:x="956" fg:w="1"/><text x="76.6689%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4189%" y="613" width="0.0799%" height="15" fill="rgb(211,9,40)" fg:x="956" fg:w="1"/><text x="76.6689%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4189%" y="597" width="0.0799%" height="15" fill="rgb(242,57,20)" fg:x="956" fg:w="1"/><text x="76.6689%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4189%" y="581" width="0.0799%" height="15" fill="rgb(248,85,48)" fg:x="956" fg:w="1"/><text x="76.6689%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="76.4988%" y="677" width="0.0799%" height="15" fill="rgb(212,117,2)" fg:x="957" fg:w="1"/><text x="76.7488%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4988%" y="661" width="0.0799%" height="15" fill="rgb(243,19,3)" fg:x="957" fg:w="1"/><text x="76.7488%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.4988%" y="645" width="0.0799%" height="15" fill="rgb(232,217,24)" fg:x="957" fg:w="1"/><text x="76.7488%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4988%" y="629" width="0.0799%" height="15" fill="rgb(224,175,40)" fg:x="957" fg:w="1"/><text x="76.7488%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4988%" y="613" width="0.0799%" height="15" fill="rgb(212,162,32)" fg:x="957" fg:w="1"/><text x="76.7488%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4988%" y="597" width="0.0799%" height="15" fill="rgb(215,9,4)" fg:x="957" fg:w="1"/><text x="76.7488%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.4988%" y="581" width="0.0799%" height="15" fill="rgb(242,42,7)" fg:x="957" fg:w="1"/><text x="76.7488%" y="591.50"></text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="76.3389%" y="805" width="0.3197%" height="15" fill="rgb(242,184,45)" fg:x="955" fg:w="4"/><text x="76.5889%" y="815.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="76.4988%" y="789" width="0.1599%" height="15" fill="rgb(228,111,51)" fg:x="957" fg:w="2"/><text x="76.7488%" y="799.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="76.4988%" y="773" width="0.1599%" height="15" fill="rgb(236,147,17)" fg:x="957" fg:w="2"/><text x="76.7488%" y="783.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="76.4988%" y="757" width="0.1599%" height="15" fill="rgb(210,75,22)" fg:x="957" fg:w="2"/><text x="76.7488%" y="767.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="76.4988%" y="741" width="0.1599%" height="15" fill="rgb(217,159,45)" fg:x="957" fg:w="2"/><text x="76.7488%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="76.4988%" y="725" width="0.1599%" height="15" fill="rgb(245,165,53)" fg:x="957" fg:w="2"/><text x="76.7488%" y="735.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="76.4988%" y="709" width="0.1599%" height="15" fill="rgb(251,190,50)" fg:x="957" fg:w="2"/><text x="76.7488%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="76.4988%" y="693" width="0.1599%" height="15" fill="rgb(208,203,29)" fg:x="957" fg:w="2"/><text x="76.7488%" y="703.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.5787%" y="677" width="0.0799%" height="15" fill="rgb(207,209,35)" fg:x="958" fg:w="1"/><text x="76.8287%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5787%" y="661" width="0.0799%" height="15" fill="rgb(230,144,49)" fg:x="958" fg:w="1"/><text x="76.8287%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.6587%" y="789" width="0.0799%" height="15" fill="rgb(229,31,6)" fg:x="959" fg:w="1"/><text x="76.9087%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.6587%" y="773" width="0.0799%" height="15" fill="rgb(251,129,24)" fg:x="959" fg:w="1"/><text x="76.9087%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="76.6587%" y="757" width="0.0799%" height="15" fill="rgb(235,105,15)" fg:x="959" fg:w="1"/><text x="76.9087%" y="767.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="76.6587%" y="741" width="0.0799%" height="15" fill="rgb(216,52,43)" fg:x="959" fg:w="1"/><text x="76.9087%" y="751.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="76.6587%" y="725" width="0.0799%" height="15" fill="rgb(238,144,41)" fg:x="959" fg:w="1"/><text x="76.9087%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="76.6587%" y="709" width="0.0799%" height="15" fill="rgb(243,63,9)" fg:x="959" fg:w="1"/><text x="76.9087%" y="719.50"></text></g><g><title>&lt;kernel::model::scopes::Properties as kernel::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6587%" y="693" width="0.0799%" height="15" fill="rgb(246,208,1)" fg:x="959" fg:w="1"/><text x="76.9087%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6587%" y="677" width="0.0799%" height="15" fill="rgb(233,182,18)" fg:x="959" fg:w="1"/><text x="76.9087%" y="687.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="76.6587%" y="661" width="0.0799%" height="15" fill="rgb(242,224,8)" fg:x="959" fg:w="1"/><text x="76.9087%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6587%" y="645" width="0.0799%" height="15" fill="rgb(243,54,37)" fg:x="959" fg:w="1"/><text x="76.9087%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.6587%" y="629" width="0.0799%" height="15" fill="rgb(233,192,12)" fg:x="959" fg:w="1"/><text x="76.9087%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="76.6587%" y="613" width="0.0799%" height="15" fill="rgb(251,192,53)" fg:x="959" fg:w="1"/><text x="76.9087%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6587%" y="597" width="0.0799%" height="15" fill="rgb(246,141,26)" fg:x="959" fg:w="1"/><text x="76.9087%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6587%" y="581" width="0.0799%" height="15" fill="rgb(239,195,19)" fg:x="959" fg:w="1"/><text x="76.9087%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="76.6587%" y="565" width="0.0799%" height="15" fill="rgb(241,16,39)" fg:x="959" fg:w="1"/><text x="76.9087%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (32 samples, 2.56%)</title><rect x="74.2606%" y="821" width="2.5580%" height="15" fill="rgb(223,13,53)" fg:x="929" fg:w="32"/><text x="74.5106%" y="831.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="76.6587%" y="805" width="0.1599%" height="15" fill="rgb(214,227,0)" fg:x="959" fg:w="2"/><text x="76.9087%" y="815.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="76.7386%" y="789" width="0.0799%" height="15" fill="rgb(228,103,26)" fg:x="960" fg:w="1"/><text x="76.9886%" y="799.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="76.7386%" y="773" width="0.0799%" height="15" fill="rgb(254,177,53)" fg:x="960" fg:w="1"/><text x="76.9886%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="76.7386%" y="757" width="0.0799%" height="15" fill="rgb(208,201,34)" fg:x="960" fg:w="1"/><text x="76.9886%" y="767.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7386%" y="741" width="0.0799%" height="15" fill="rgb(212,39,5)" fg:x="960" fg:w="1"/><text x="76.9886%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7386%" y="725" width="0.0799%" height="15" fill="rgb(246,117,3)" fg:x="960" fg:w="1"/><text x="76.9886%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7386%" y="709" width="0.0799%" height="15" fill="rgb(244,118,39)" fg:x="960" fg:w="1"/><text x="76.9886%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.7386%" y="693" width="0.0799%" height="15" fill="rgb(241,64,10)" fg:x="960" fg:w="1"/><text x="76.9886%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.7386%" y="677" width="0.0799%" height="15" fill="rgb(229,39,44)" fg:x="960" fg:w="1"/><text x="76.9886%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.7386%" y="661" width="0.0799%" height="15" fill="rgb(230,226,3)" fg:x="960" fg:w="1"/><text x="76.9886%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="76.7386%" y="645" width="0.0799%" height="15" fill="rgb(222,13,42)" fg:x="960" fg:w="1"/><text x="76.9886%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="76.7386%" y="629" width="0.0799%" height="15" fill="rgb(247,180,54)" fg:x="960" fg:w="1"/><text x="76.9886%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="76.8185%" y="821" width="0.0799%" height="15" fill="rgb(205,96,16)" fg:x="961" fg:w="1"/><text x="77.0685%" y="831.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="76.8185%" y="805" width="0.0799%" height="15" fill="rgb(205,100,21)" fg:x="961" fg:w="1"/><text x="77.0685%" y="815.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8185%" y="789" width="0.0799%" height="15" fill="rgb(248,51,4)" fg:x="961" fg:w="1"/><text x="77.0685%" y="799.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="76.8985%" y="821" width="0.0799%" height="15" fill="rgb(217,197,30)" fg:x="962" fg:w="1"/><text x="77.1485%" y="831.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (51 samples, 4.08%)</title><rect x="72.9816%" y="837" width="4.0767%" height="15" fill="rgb(240,179,40)" fg:x="913" fg:w="51"/><text x="73.2316%" y="847.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="76.9784%" y="821" width="0.0799%" height="15" fill="rgb(212,185,35)" fg:x="963" fg:w="1"/><text x="77.2284%" y="831.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="76.9784%" y="805" width="0.0799%" height="15" fill="rgb(251,222,31)" fg:x="963" fg:w="1"/><text x="77.2284%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.9784%" y="789" width="0.0799%" height="15" fill="rgb(208,140,36)" fg:x="963" fg:w="1"/><text x="77.2284%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.9784%" y="773" width="0.0799%" height="15" fill="rgb(220,148,1)" fg:x="963" fg:w="1"/><text x="77.2284%" y="783.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="76.9784%" y="757" width="0.0799%" height="15" fill="rgb(254,4,28)" fg:x="963" fg:w="1"/><text x="77.2284%" y="767.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="77.1383%" y="805" width="0.0799%" height="15" fill="rgb(222,185,44)" fg:x="965" fg:w="1"/><text x="77.3883%" y="815.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="77.1383%" y="789" width="0.0799%" height="15" fill="rgb(215,74,39)" fg:x="965" fg:w="1"/><text x="77.3883%" y="799.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="77.2982%" y="741" width="0.2398%" height="15" fill="rgb(247,86,4)" fg:x="967" fg:w="3"/><text x="77.5482%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.4580%" y="725" width="0.0799%" height="15" fill="rgb(231,105,32)" fg:x="969" fg:w="1"/><text x="77.7080%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.4580%" y="709" width="0.0799%" height="15" fill="rgb(222,65,35)" fg:x="969" fg:w="1"/><text x="77.7080%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5380%" y="741" width="0.0799%" height="15" fill="rgb(218,145,35)" fg:x="970" fg:w="1"/><text x="77.7880%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5380%" y="725" width="0.0799%" height="15" fill="rgb(208,7,15)" fg:x="970" fg:w="1"/><text x="77.7880%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5380%" y="709" width="0.0799%" height="15" fill="rgb(209,83,13)" fg:x="970" fg:w="1"/><text x="77.7880%" y="719.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="77.2982%" y="773" width="0.3997%" height="15" fill="rgb(218,3,10)" fg:x="967" fg:w="5"/><text x="77.5482%" y="783.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="77.2982%" y="757" width="0.3997%" height="15" fill="rgb(211,219,4)" fg:x="967" fg:w="5"/><text x="77.5482%" y="767.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.6179%" y="741" width="0.0799%" height="15" fill="rgb(228,194,12)" fg:x="971" fg:w="1"/><text x="77.8679%" y="751.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.6179%" y="725" width="0.0799%" height="15" fill="rgb(210,175,7)" fg:x="971" fg:w="1"/><text x="77.8679%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.6179%" y="709" width="0.0799%" height="15" fill="rgb(243,132,6)" fg:x="971" fg:w="1"/><text x="77.8679%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6978%" y="693" width="0.0799%" height="15" fill="rgb(207,72,18)" fg:x="972" fg:w="1"/><text x="77.9478%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.7778%" y="677" width="0.0799%" height="15" fill="rgb(236,1,18)" fg:x="973" fg:w="1"/><text x="78.0278%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7778%" y="661" width="0.0799%" height="15" fill="rgb(227,0,18)" fg:x="973" fg:w="1"/><text x="78.0278%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.6978%" y="773" width="0.2398%" height="15" fill="rgb(247,37,5)" fg:x="972" fg:w="3"/><text x="77.9478%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="77.6978%" y="757" width="0.2398%" height="15" fill="rgb(237,179,24)" fg:x="972" fg:w="3"/><text x="77.9478%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.6978%" y="741" width="0.2398%" height="15" fill="rgb(226,53,20)" fg:x="972" fg:w="3"/><text x="77.9478%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.6978%" y="725" width="0.2398%" height="15" fill="rgb(247,75,7)" fg:x="972" fg:w="3"/><text x="77.9478%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.6978%" y="709" width="0.2398%" height="15" fill="rgb(233,96,12)" fg:x="972" fg:w="3"/><text x="77.9478%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.7778%" y="693" width="0.1599%" height="15" fill="rgb(224,125,0)" fg:x="973" fg:w="2"/><text x="78.0278%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.8577%" y="677" width="0.0799%" height="15" fill="rgb(224,92,25)" fg:x="974" fg:w="1"/><text x="78.1077%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.8577%" y="661" width="0.0799%" height="15" fill="rgb(224,42,24)" fg:x="974" fg:w="1"/><text x="78.1077%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.8577%" y="645" width="0.0799%" height="15" fill="rgb(234,132,49)" fg:x="974" fg:w="1"/><text x="78.1077%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9376%" y="741" width="0.0799%" height="15" fill="rgb(248,100,35)" fg:x="975" fg:w="1"/><text x="78.1876%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0176%" y="677" width="0.0799%" height="15" fill="rgb(239,94,40)" fg:x="976" fg:w="1"/><text x="78.2676%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.0975%" y="677" width="0.0799%" height="15" fill="rgb(235,139,28)" fg:x="977" fg:w="1"/><text x="78.3475%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.0975%" y="661" width="0.0799%" height="15" fill="rgb(217,144,7)" fg:x="977" fg:w="1"/><text x="78.3475%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="78.0176%" y="741" width="0.2398%" height="15" fill="rgb(227,55,4)" fg:x="976" fg:w="3"/><text x="78.2676%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="78.0176%" y="725" width="0.2398%" height="15" fill="rgb(252,82,54)" fg:x="976" fg:w="3"/><text x="78.2676%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="78.0176%" y="709" width="0.2398%" height="15" fill="rgb(245,172,4)" fg:x="976" fg:w="3"/><text x="78.2676%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="78.0176%" y="693" width="0.2398%" height="15" fill="rgb(207,26,27)" fg:x="976" fg:w="3"/><text x="78.2676%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1775%" y="677" width="0.0799%" height="15" fill="rgb(252,98,18)" fg:x="978" fg:w="1"/><text x="78.4275%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1775%" y="661" width="0.0799%" height="15" fill="rgb(244,8,26)" fg:x="978" fg:w="1"/><text x="78.4275%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="78.2574%" y="725" width="0.0799%" height="15" fill="rgb(237,173,45)" fg:x="979" fg:w="1"/><text x="78.5074%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="78.2574%" y="709" width="0.0799%" height="15" fill="rgb(208,213,49)" fg:x="979" fg:w="1"/><text x="78.5074%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.2574%" y="693" width="0.0799%" height="15" fill="rgb(212,122,37)" fg:x="979" fg:w="1"/><text x="78.5074%" y="703.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="77.9376%" y="757" width="0.4796%" height="15" fill="rgb(213,80,17)" fg:x="975" fg:w="6"/><text x="78.1876%" y="767.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="78.2574%" y="741" width="0.1599%" height="15" fill="rgb(206,210,43)" fg:x="979" fg:w="2"/><text x="78.5074%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.3373%" y="725" width="0.0799%" height="15" fill="rgb(229,214,3)" fg:x="980" fg:w="1"/><text x="78.5873%" y="735.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.4972%" y="709" width="0.0799%" height="15" fill="rgb(235,213,29)" fg:x="982" fg:w="1"/><text x="78.7472%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5771%" y="709" width="0.0799%" height="15" fill="rgb(248,135,26)" fg:x="983" fg:w="1"/><text x="78.8271%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6571%" y="677" width="0.0799%" height="15" fill="rgb(242,188,12)" fg:x="984" fg:w="1"/><text x="78.9071%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6571%" y="661" width="0.0799%" height="15" fill="rgb(245,38,12)" fg:x="984" fg:w="1"/><text x="78.9071%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6571%" y="645" width="0.0799%" height="15" fill="rgb(218,42,13)" fg:x="984" fg:w="1"/><text x="78.9071%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.7370%" y="645" width="0.0799%" height="15" fill="rgb(238,132,49)" fg:x="985" fg:w="1"/><text x="78.9870%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.7370%" y="629" width="0.0799%" height="15" fill="rgb(209,196,19)" fg:x="985" fg:w="1"/><text x="78.9870%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7370%" y="613" width="0.0799%" height="15" fill="rgb(244,131,22)" fg:x="985" fg:w="1"/><text x="78.9870%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="78.4173%" y="757" width="0.7994%" height="15" fill="rgb(223,18,34)" fg:x="981" fg:w="10"/><text x="78.6673%" y="767.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="78.4173%" y="741" width="0.7994%" height="15" fill="rgb(252,124,54)" fg:x="981" fg:w="10"/><text x="78.6673%" y="751.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="78.4972%" y="725" width="0.7194%" height="15" fill="rgb(229,106,42)" fg:x="982" fg:w="9"/><text x="78.7472%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="78.6571%" y="709" width="0.5596%" height="15" fill="rgb(221,129,1)" fg:x="984" fg:w="7"/><text x="78.9071%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="78.6571%" y="693" width="0.5596%" height="15" fill="rgb(229,74,15)" fg:x="984" fg:w="7"/><text x="78.9071%" y="703.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="78.7370%" y="677" width="0.4796%" height="15" fill="rgb(210,206,50)" fg:x="985" fg:w="6"/><text x="78.9870%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="78.7370%" y="661" width="0.4796%" height="15" fill="rgb(251,114,31)" fg:x="985" fg:w="6"/><text x="78.9870%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="78.8169%" y="645" width="0.3997%" height="15" fill="rgb(215,225,28)" fg:x="986" fg:w="5"/><text x="79.0669%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="78.9768%" y="629" width="0.2398%" height="15" fill="rgb(237,109,14)" fg:x="988" fg:w="3"/><text x="79.2268%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="78.9768%" y="613" width="0.2398%" height="15" fill="rgb(230,13,37)" fg:x="988" fg:w="3"/><text x="79.2268%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="78.9768%" y="597" width="0.2398%" height="15" fill="rgb(231,40,28)" fg:x="988" fg:w="3"/><text x="79.2268%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="78.9768%" y="581" width="0.2398%" height="15" fill="rgb(231,202,18)" fg:x="988" fg:w="3"/><text x="79.2268%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="79.0568%" y="565" width="0.1599%" height="15" fill="rgb(225,33,18)" fg:x="989" fg:w="2"/><text x="79.3068%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.0568%" y="549" width="0.1599%" height="15" fill="rgb(223,64,47)" fg:x="989" fg:w="2"/><text x="79.3068%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="79.0568%" y="533" width="0.1599%" height="15" fill="rgb(234,114,13)" fg:x="989" fg:w="2"/><text x="79.3068%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="79.0568%" y="517" width="0.1599%" height="15" fill="rgb(248,56,40)" fg:x="989" fg:w="2"/><text x="79.3068%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.2966%" y="661" width="0.0799%" height="15" fill="rgb(221,194,21)" fg:x="992" fg:w="1"/><text x="79.5466%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.2966%" y="645" width="0.0799%" height="15" fill="rgb(242,108,46)" fg:x="992" fg:w="1"/><text x="79.5466%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.2966%" y="629" width="0.0799%" height="15" fill="rgb(220,106,10)" fg:x="992" fg:w="1"/><text x="79.5466%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.2966%" y="613" width="0.0799%" height="15" fill="rgb(211,88,4)" fg:x="992" fg:w="1"/><text x="79.5466%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.2966%" y="597" width="0.0799%" height="15" fill="rgb(214,95,34)" fg:x="992" fg:w="1"/><text x="79.5466%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.2966%" y="581" width="0.0799%" height="15" fill="rgb(250,160,33)" fg:x="992" fg:w="1"/><text x="79.5466%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2966%" y="565" width="0.0799%" height="15" fill="rgb(225,29,10)" fg:x="992" fg:w="1"/><text x="79.5466%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="79.2166%" y="693" width="0.2398%" height="15" fill="rgb(224,28,30)" fg:x="991" fg:w="3"/><text x="79.4666%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="79.2166%" y="677" width="0.2398%" height="15" fill="rgb(231,77,4)" fg:x="991" fg:w="3"/><text x="79.4666%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3765%" y="661" width="0.0799%" height="15" fill="rgb(209,63,21)" fg:x="993" fg:w="1"/><text x="79.6265%" y="671.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (29 samples, 2.32%)</title><rect x="77.2182%" y="805" width="2.3181%" height="15" fill="rgb(226,22,11)" fg:x="966" fg:w="29"/><text x="77.4682%" y="815.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (29 samples, 2.32%)</title><rect x="77.2182%" y="789" width="2.3181%" height="15" fill="rgb(216,82,30)" fg:x="966" fg:w="29"/><text x="77.4682%" y="799.50">e..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.60%)</title><rect x="77.9376%" y="773" width="1.5987%" height="15" fill="rgb(246,227,38)" fg:x="975" fg:w="20"/><text x="78.1876%" y="783.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="79.2166%" y="757" width="0.3197%" height="15" fill="rgb(251,203,53)" fg:x="991" fg:w="4"/><text x="79.4666%" y="767.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="79.2166%" y="741" width="0.3197%" height="15" fill="rgb(254,101,1)" fg:x="991" fg:w="4"/><text x="79.4666%" y="751.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="79.2166%" y="725" width="0.3197%" height="15" fill="rgb(241,180,5)" fg:x="991" fg:w="4"/><text x="79.4666%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="79.2166%" y="709" width="0.3197%" height="15" fill="rgb(218,168,4)" fg:x="991" fg:w="4"/><text x="79.4666%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4564%" y="693" width="0.0799%" height="15" fill="rgb(224,223,32)" fg:x="994" fg:w="1"/><text x="79.7064%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4564%" y="677" width="0.0799%" height="15" fill="rgb(236,106,22)" fg:x="994" fg:w="1"/><text x="79.7064%" y="687.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="79.5364%" y="805" width="0.0799%" height="15" fill="rgb(206,121,5)" fg:x="995" fg:w="1"/><text x="79.7864%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="79.5364%" y="789" width="0.0799%" height="15" fill="rgb(233,87,28)" fg:x="995" fg:w="1"/><text x="79.7864%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="79.5364%" y="773" width="0.0799%" height="15" fill="rgb(236,137,17)" fg:x="995" fg:w="1"/><text x="79.7864%" y="783.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="79.5364%" y="757" width="0.0799%" height="15" fill="rgb(209,183,38)" fg:x="995" fg:w="1"/><text x="79.7864%" y="767.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="79.5364%" y="741" width="0.0799%" height="15" fill="rgb(206,162,44)" fg:x="995" fg:w="1"/><text x="79.7864%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="79.5364%" y="725" width="0.0799%" height="15" fill="rgb(237,70,39)" fg:x="995" fg:w="1"/><text x="79.7864%" y="735.50"></text></g><g><title>engine::session::Session::close (33 samples, 2.64%)</title><rect x="77.0584%" y="837" width="2.6379%" height="15" fill="rgb(212,176,5)" fg:x="964" fg:w="33"/><text x="77.3084%" y="847.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (33 samples, 2.64%)</title><rect x="77.0584%" y="821" width="2.6379%" height="15" fill="rgb(232,95,16)" fg:x="964" fg:w="33"/><text x="77.3084%" y="831.50">en..</text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="79.6163%" y="805" width="0.0799%" height="15" fill="rgb(219,115,35)" fg:x="996" fg:w="1"/><text x="79.8663%" y="815.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="79.6163%" y="789" width="0.0799%" height="15" fill="rgb(251,67,27)" fg:x="996" fg:w="1"/><text x="79.8663%" y="799.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="79.6163%" y="773" width="0.0799%" height="15" fill="rgb(222,95,40)" fg:x="996" fg:w="1"/><text x="79.8663%" y="783.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="79.6163%" y="757" width="0.0799%" height="15" fill="rgb(250,35,16)" fg:x="996" fg:w="1"/><text x="79.8663%" y="767.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="79.6163%" y="741" width="0.0799%" height="15" fill="rgb(224,86,44)" fg:x="996" fg:w="1"/><text x="79.8663%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.6163%" y="725" width="0.0799%" height="15" fill="rgb(237,53,53)" fg:x="996" fg:w="1"/><text x="79.8663%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="79.6962%" y="693" width="0.0799%" height="15" fill="rgb(208,171,33)" fg:x="997" fg:w="1"/><text x="79.9462%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="79.6962%" y="677" width="0.0799%" height="15" fill="rgb(222,64,27)" fg:x="997" fg:w="1"/><text x="79.9462%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="79.7762%" y="661" width="0.0799%" height="15" fill="rgb(221,121,35)" fg:x="998" fg:w="1"/><text x="80.0262%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="79.7762%" y="645" width="0.0799%" height="15" fill="rgb(228,137,42)" fg:x="998" fg:w="1"/><text x="80.0262%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="79.7762%" y="629" width="0.0799%" height="15" fill="rgb(227,54,21)" fg:x="998" fg:w="1"/><text x="80.0262%" y="639.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="79.8561%" y="613" width="0.0799%" height="15" fill="rgb(240,168,33)" fg:x="999" fg:w="1"/><text x="80.1061%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8561%" y="597" width="0.0799%" height="15" fill="rgb(243,159,6)" fg:x="999" fg:w="1"/><text x="80.1061%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8561%" y="581" width="0.0799%" height="15" fill="rgb(205,211,41)" fg:x="999" fg:w="1"/><text x="80.1061%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.8561%" y="565" width="0.0799%" height="15" fill="rgb(253,30,1)" fg:x="999" fg:w="1"/><text x="80.1061%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.8561%" y="549" width="0.0799%" height="15" fill="rgb(226,80,18)" fg:x="999" fg:w="1"/><text x="80.1061%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.8561%" y="533" width="0.0799%" height="15" fill="rgb(253,156,46)" fg:x="999" fg:w="1"/><text x="80.1061%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8561%" y="517" width="0.0799%" height="15" fill="rgb(248,87,27)" fg:x="999" fg:w="1"/><text x="80.1061%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8561%" y="501" width="0.0799%" height="15" fill="rgb(227,122,2)" fg:x="999" fg:w="1"/><text x="80.1061%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.8561%" y="485" width="0.0799%" height="15" fill="rgb(229,94,39)" fg:x="999" fg:w="1"/><text x="80.1061%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.8561%" y="469" width="0.0799%" height="15" fill="rgb(225,173,31)" fg:x="999" fg:w="1"/><text x="80.1061%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.8561%" y="453" width="0.0799%" height="15" fill="rgb(239,176,30)" fg:x="999" fg:w="1"/><text x="80.1061%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.8561%" y="437" width="0.0799%" height="15" fill="rgb(212,104,21)" fg:x="999" fg:w="1"/><text x="80.1061%" y="447.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="79.9361%" y="597" width="0.0799%" height="15" fill="rgb(240,209,40)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9361%" y="581" width="0.0799%" height="15" fill="rgb(234,195,5)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9361%" y="565" width="0.0799%" height="15" fill="rgb(238,213,1)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.9361%" y="549" width="0.0799%" height="15" fill="rgb(235,182,54)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.9361%" y="533" width="0.0799%" height="15" fill="rgb(229,50,46)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.9361%" y="517" width="0.0799%" height="15" fill="rgb(219,145,13)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9361%" y="501" width="0.0799%" height="15" fill="rgb(220,226,10)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9361%" y="485" width="0.0799%" height="15" fill="rgb(248,47,30)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.9361%" y="469" width="0.0799%" height="15" fill="rgb(231,209,44)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.9361%" y="453" width="0.0799%" height="15" fill="rgb(209,80,30)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.9361%" y="437" width="0.0799%" height="15" fill="rgb(232,9,14)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.9361%" y="421" width="0.0799%" height="15" fill="rgb(243,91,43)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9361%" y="405" width="0.0799%" height="15" fill="rgb(231,90,52)" fg:x="1000" fg:w="1"/><text x="80.1861%" y="415.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (4 samples, 0.32%)</title><rect x="79.7762%" y="693" width="0.3197%" height="15" fill="rgb(253,192,44)" fg:x="998" fg:w="4"/><text x="80.0262%" y="703.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="79.7762%" y="677" width="0.3197%" height="15" fill="rgb(241,66,31)" fg:x="998" fg:w="4"/><text x="80.0262%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="79.8561%" y="661" width="0.2398%" height="15" fill="rgb(235,81,37)" fg:x="999" fg:w="3"/><text x="80.1061%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="79.8561%" y="645" width="0.2398%" height="15" fill="rgb(223,221,9)" fg:x="999" fg:w="3"/><text x="80.1061%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="79.8561%" y="629" width="0.2398%" height="15" fill="rgb(242,180,7)" fg:x="999" fg:w="3"/><text x="80.1061%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="79.9361%" y="613" width="0.1599%" height="15" fill="rgb(243,78,19)" fg:x="1000" fg:w="2"/><text x="80.1861%" y="623.50"></text></g><g><title>engine::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="80.0160%" y="597" width="0.0799%" height="15" fill="rgb(233,23,17)" fg:x="1001" fg:w="1"/><text x="80.2660%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="80.0160%" y="581" width="0.0799%" height="15" fill="rgb(252,122,45)" fg:x="1001" fg:w="1"/><text x="80.2660%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="80.0160%" y="565" width="0.0799%" height="15" fill="rgb(247,108,20)" fg:x="1001" fg:w="1"/><text x="80.2660%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.0160%" y="549" width="0.0799%" height="15" fill="rgb(235,84,21)" fg:x="1001" fg:w="1"/><text x="80.2660%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.0160%" y="533" width="0.0799%" height="15" fill="rgb(247,129,10)" fg:x="1001" fg:w="1"/><text x="80.2660%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.0160%" y="517" width="0.0799%" height="15" fill="rgb(208,173,14)" fg:x="1001" fg:w="1"/><text x="80.2660%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.0160%" y="501" width="0.0799%" height="15" fill="rgb(236,31,38)" fg:x="1001" fg:w="1"/><text x="80.2660%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.0160%" y="485" width="0.0799%" height="15" fill="rgb(232,65,17)" fg:x="1001" fg:w="1"/><text x="80.2660%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="80.0160%" y="469" width="0.0799%" height="15" fill="rgb(224,45,49)" fg:x="1001" fg:w="1"/><text x="80.2660%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0959%" y="549" width="0.0799%" height="15" fill="rgb(225,2,53)" fg:x="1002" fg:w="1"/><text x="80.3459%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="80.1759%" y="517" width="0.1599%" height="15" fill="rgb(248,210,53)" fg:x="1003" fg:w="2"/><text x="80.4259%" y="527.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="80.1759%" y="501" width="0.1599%" height="15" fill="rgb(211,1,30)" fg:x="1003" fg:w="2"/><text x="80.4259%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="80.1759%" y="485" width="0.1599%" height="15" fill="rgb(224,96,15)" fg:x="1003" fg:w="2"/><text x="80.4259%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="80.1759%" y="469" width="0.1599%" height="15" fill="rgb(252,45,11)" fg:x="1003" fg:w="2"/><text x="80.4259%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.1759%" y="453" width="0.1599%" height="15" fill="rgb(220,125,38)" fg:x="1003" fg:w="2"/><text x="80.4259%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.2558%" y="437" width="0.0799%" height="15" fill="rgb(243,161,33)" fg:x="1004" fg:w="1"/><text x="80.5058%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2558%" y="421" width="0.0799%" height="15" fill="rgb(248,197,34)" fg:x="1004" fg:w="1"/><text x="80.5058%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.2558%" y="405" width="0.0799%" height="15" fill="rgb(228,165,23)" fg:x="1004" fg:w="1"/><text x="80.5058%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2558%" y="389" width="0.0799%" height="15" fill="rgb(236,94,38)" fg:x="1004" fg:w="1"/><text x="80.5058%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.2558%" y="373" width="0.0799%" height="15" fill="rgb(220,13,23)" fg:x="1004" fg:w="1"/><text x="80.5058%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.4157%" y="469" width="0.0799%" height="15" fill="rgb(234,26,39)" fg:x="1006" fg:w="1"/><text x="80.6657%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.4157%" y="453" width="0.0799%" height="15" fill="rgb(205,117,44)" fg:x="1006" fg:w="1"/><text x="80.6657%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.4157%" y="437" width="0.0799%" height="15" fill="rgb(250,42,2)" fg:x="1006" fg:w="1"/><text x="80.6657%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.4157%" y="421" width="0.0799%" height="15" fill="rgb(223,83,14)" fg:x="1006" fg:w="1"/><text x="80.6657%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.4157%" y="405" width="0.0799%" height="15" fill="rgb(241,147,50)" fg:x="1006" fg:w="1"/><text x="80.6657%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.4157%" y="389" width="0.0799%" height="15" fill="rgb(218,90,6)" fg:x="1006" fg:w="1"/><text x="80.6657%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.4157%" y="373" width="0.0799%" height="15" fill="rgb(210,191,5)" fg:x="1006" fg:w="1"/><text x="80.6657%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="80.3357%" y="517" width="0.2398%" height="15" fill="rgb(225,139,19)" fg:x="1005" fg:w="3"/><text x="80.5857%" y="527.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="80.3357%" y="501" width="0.2398%" height="15" fill="rgb(210,1,33)" fg:x="1005" fg:w="3"/><text x="80.5857%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="80.3357%" y="485" width="0.2398%" height="15" fill="rgb(213,50,3)" fg:x="1005" fg:w="3"/><text x="80.5857%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.4956%" y="469" width="0.0799%" height="15" fill="rgb(234,227,4)" fg:x="1007" fg:w="1"/><text x="80.7456%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4956%" y="453" width="0.0799%" height="15" fill="rgb(246,63,5)" fg:x="1007" fg:w="1"/><text x="80.7456%" y="463.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.4956%" y="437" width="0.0799%" height="15" fill="rgb(245,136,27)" fg:x="1007" fg:w="1"/><text x="80.7456%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4956%" y="421" width="0.0799%" height="15" fill="rgb(247,199,27)" fg:x="1007" fg:w="1"/><text x="80.7456%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.4956%" y="405" width="0.0799%" height="15" fill="rgb(252,158,49)" fg:x="1007" fg:w="1"/><text x="80.7456%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4956%" y="389" width="0.0799%" height="15" fill="rgb(254,73,1)" fg:x="1007" fg:w="1"/><text x="80.7456%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.4956%" y="373" width="0.0799%" height="15" fill="rgb(248,93,19)" fg:x="1007" fg:w="1"/><text x="80.7456%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4956%" y="357" width="0.0799%" height="15" fill="rgb(206,67,5)" fg:x="1007" fg:w="1"/><text x="80.7456%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="80.5755%" y="517" width="0.0799%" height="15" fill="rgb(209,210,4)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="80.5755%" y="501" width="0.0799%" height="15" fill="rgb(214,185,36)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="80.5755%" y="485" width="0.0799%" height="15" fill="rgb(233,191,26)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="80.5755%" y="469" width="0.0799%" height="15" fill="rgb(248,94,17)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="479.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="80.5755%" y="453" width="0.0799%" height="15" fill="rgb(250,64,4)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="80.5755%" y="437" width="0.0799%" height="15" fill="rgb(218,41,53)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="80.5755%" y="421" width="0.0799%" height="15" fill="rgb(251,176,28)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.5755%" y="405" width="0.0799%" height="15" fill="rgb(247,22,9)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.5755%" y="389" width="0.0799%" height="15" fill="rgb(218,201,14)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="399.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="80.5755%" y="373" width="0.0799%" height="15" fill="rgb(218,94,10)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="383.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="80.5755%" y="357" width="0.0799%" height="15" fill="rgb(222,183,52)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.5755%" y="341" width="0.0799%" height="15" fill="rgb(242,140,25)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.5755%" y="325" width="0.0799%" height="15" fill="rgb(235,197,38)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="80.5755%" y="309" width="0.0799%" height="15" fill="rgb(237,136,15)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="80.5755%" y="293" width="0.0799%" height="15" fill="rgb(223,44,49)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="80.5755%" y="277" width="0.0799%" height="15" fill="rgb(227,71,15)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="80.5755%" y="261" width="0.0799%" height="15" fill="rgb(225,153,20)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="80.5755%" y="245" width="0.0799%" height="15" fill="rgb(210,190,26)" fg:x="1008" fg:w="1"/><text x="80.8255%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="80.6555%" y="469" width="0.0799%" height="15" fill="rgb(223,147,5)" fg:x="1009" fg:w="1"/><text x="80.9055%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="80.6555%" y="453" width="0.0799%" height="15" fill="rgb(207,14,23)" fg:x="1009" fg:w="1"/><text x="80.9055%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.6555%" y="437" width="0.0799%" height="15" fill="rgb(211,195,53)" fg:x="1009" fg:w="1"/><text x="80.9055%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.6555%" y="421" width="0.0799%" height="15" fill="rgb(237,75,46)" fg:x="1009" fg:w="1"/><text x="80.9055%" y="431.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="80.6555%" y="405" width="0.0799%" height="15" fill="rgb(254,55,14)" fg:x="1009" fg:w="1"/><text x="80.9055%" y="415.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="80.7354%" y="453" width="0.0799%" height="15" fill="rgb(230,185,30)" fg:x="1010" fg:w="1"/><text x="80.9854%" y="463.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="80.7354%" y="437" width="0.0799%" height="15" fill="rgb(220,14,11)" fg:x="1010" fg:w="1"/><text x="80.9854%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="80.7354%" y="421" width="0.0799%" height="15" fill="rgb(215,169,44)" fg:x="1010" fg:w="1"/><text x="80.9854%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.7354%" y="405" width="0.0799%" height="15" fill="rgb(253,203,20)" fg:x="1010" fg:w="1"/><text x="80.9854%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.7354%" y="389" width="0.0799%" height="15" fill="rgb(229,225,17)" fg:x="1010" fg:w="1"/><text x="80.9854%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.7354%" y="373" width="0.0799%" height="15" fill="rgb(236,76,26)" fg:x="1010" fg:w="1"/><text x="80.9854%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.7354%" y="357" width="0.0799%" height="15" fill="rgb(234,15,30)" fg:x="1010" fg:w="1"/><text x="80.9854%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.7354%" y="341" width="0.0799%" height="15" fill="rgb(211,113,48)" fg:x="1010" fg:w="1"/><text x="80.9854%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.7354%" y="325" width="0.0799%" height="15" fill="rgb(221,31,36)" fg:x="1010" fg:w="1"/><text x="80.9854%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="80.8953%" y="373" width="0.0799%" height="15" fill="rgb(215,118,52)" fg:x="1012" fg:w="1"/><text x="81.1453%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::search_finish (1 samples, 0.08%)</title><rect x="80.8953%" y="357" width="0.0799%" height="15" fill="rgb(241,151,27)" fg:x="1012" fg:w="1"/><text x="81.1453%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="80.9752%" y="357" width="0.0799%" height="15" fill="rgb(253,51,3)" fg:x="1013" fg:w="1"/><text x="81.2252%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.9752%" y="341" width="0.0799%" height="15" fill="rgb(216,201,24)" fg:x="1013" fg:w="1"/><text x="81.2252%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.9752%" y="325" width="0.0799%" height="15" fill="rgb(231,107,4)" fg:x="1013" fg:w="1"/><text x="81.2252%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.9752%" y="309" width="0.0799%" height="15" fill="rgb(243,97,54)" fg:x="1013" fg:w="1"/><text x="81.2252%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="80.8153%" y="437" width="0.3197%" height="15" fill="rgb(221,32,51)" fg:x="1011" fg:w="4"/><text x="81.0653%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="80.8153%" y="421" width="0.3197%" height="15" fill="rgb(218,171,35)" fg:x="1011" fg:w="4"/><text x="81.0653%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="80.8153%" y="405" width="0.3197%" height="15" fill="rgb(214,20,53)" fg:x="1011" fg:w="4"/><text x="81.0653%" y="415.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="80.8153%" y="389" width="0.3197%" height="15" fill="rgb(239,9,52)" fg:x="1011" fg:w="4"/><text x="81.0653%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="80.9752%" y="373" width="0.1599%" height="15" fill="rgb(215,114,45)" fg:x="1013" fg:w="2"/><text x="81.2252%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="81.0552%" y="357" width="0.0799%" height="15" fill="rgb(208,118,9)" fg:x="1014" fg:w="1"/><text x="81.3052%" y="367.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="81.1351%" y="389" width="0.0799%" height="15" fill="rgb(235,7,39)" fg:x="1015" fg:w="1"/><text x="81.3851%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.2950%" y="373" width="0.0799%" height="15" fill="rgb(243,225,15)" fg:x="1017" fg:w="1"/><text x="81.5450%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.3749%" y="357" width="0.0799%" height="15" fill="rgb(225,216,18)" fg:x="1018" fg:w="1"/><text x="81.6249%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="81.3749%" y="373" width="0.4796%" height="15" fill="rgb(233,36,38)" fg:x="1018" fg:w="6"/><text x="81.6249%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="81.4548%" y="357" width="0.3997%" height="15" fill="rgb(239,88,23)" fg:x="1019" fg:w="5"/><text x="81.7048%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7746%" y="341" width="0.0799%" height="15" fill="rgb(219,181,35)" fg:x="1023" fg:w="1"/><text x="82.0246%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="81.8545%" y="373" width="0.3197%" height="15" fill="rgb(215,18,46)" fg:x="1024" fg:w="4"/><text x="82.1045%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="81.9345%" y="357" width="0.2398%" height="15" fill="rgb(241,38,11)" fg:x="1025" fg:w="3"/><text x="82.1845%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.1743%" y="309" width="0.0799%" height="15" fill="rgb(248,169,45)" fg:x="1028" fg:w="1"/><text x="82.4243%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.2542%" y="293" width="0.0799%" height="15" fill="rgb(239,50,49)" fg:x="1029" fg:w="1"/><text x="82.5042%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.2542%" y="277" width="0.0799%" height="15" fill="rgb(231,96,31)" fg:x="1029" fg:w="1"/><text x="82.5042%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.2542%" y="261" width="0.0799%" height="15" fill="rgb(224,193,37)" fg:x="1029" fg:w="1"/><text x="82.5042%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.64%)</title><rect x="82.2542%" y="309" width="2.6379%" height="15" fill="rgb(227,153,50)" fg:x="1029" fg:w="33"/><text x="82.5042%" y="319.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (32 samples, 2.56%)</title><rect x="82.3341%" y="293" width="2.5580%" height="15" fill="rgb(249,228,3)" fg:x="1030" fg:w="32"/><text x="82.5841%" y="303.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (32 samples, 2.56%)</title><rect x="82.3341%" y="277" width="2.5580%" height="15" fill="rgb(219,164,43)" fg:x="1030" fg:w="32"/><text x="82.5841%" y="287.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="84.8921%" y="309" width="0.0799%" height="15" fill="rgb(216,45,41)" fg:x="1062" fg:w="1"/><text x="85.1421%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 2.88%)</title><rect x="82.1743%" y="357" width="2.8777%" height="15" fill="rgb(210,226,51)" fg:x="1028" fg:w="36"/><text x="82.4243%" y="367.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.88%)</title><rect x="82.1743%" y="341" width="2.8777%" height="15" fill="rgb(209,117,49)" fg:x="1028" fg:w="36"/><text x="82.4243%" y="351.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.88%)</title><rect x="82.1743%" y="325" width="2.8777%" height="15" fill="rgb(206,196,24)" fg:x="1028" fg:w="36"/><text x="82.4243%" y="335.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="84.9720%" y="309" width="0.0799%" height="15" fill="rgb(253,218,3)" fg:x="1063" fg:w="1"/><text x="85.2220%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="85.1319%" y="341" width="0.1599%" height="15" fill="rgb(252,166,2)" fg:x="1065" fg:w="2"/><text x="85.3819%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.1319%" y="325" width="0.1599%" height="15" fill="rgb(236,218,26)" fg:x="1065" fg:w="2"/><text x="85.3819%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.1319%" y="309" width="0.1599%" height="15" fill="rgb(254,84,19)" fg:x="1065" fg:w="2"/><text x="85.3819%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.2118%" y="293" width="0.0799%" height="15" fill="rgb(219,137,29)" fg:x="1066" fg:w="1"/><text x="85.4618%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="85.3717%" y="293" width="0.0799%" height="15" fill="rgb(227,47,52)" fg:x="1068" fg:w="1"/><text x="85.6217%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="85.3717%" y="277" width="0.0799%" height="15" fill="rgb(229,167,24)" fg:x="1068" fg:w="1"/><text x="85.6217%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="85.2918%" y="341" width="0.2398%" height="15" fill="rgb(233,164,1)" fg:x="1067" fg:w="3"/><text x="85.5418%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="85.3717%" y="325" width="0.1599%" height="15" fill="rgb(218,88,48)" fg:x="1068" fg:w="2"/><text x="85.6217%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="85.3717%" y="309" width="0.1599%" height="15" fill="rgb(226,214,24)" fg:x="1068" fg:w="2"/><text x="85.6217%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.4516%" y="293" width="0.0799%" height="15" fill="rgb(233,29,12)" fg:x="1069" fg:w="1"/><text x="85.7016%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (43 samples, 3.44%)</title><rect x="82.1743%" y="373" width="3.4373%" height="15" fill="rgb(219,120,34)" fg:x="1028" fg:w="43"/><text x="82.4243%" y="383.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="85.0520%" y="357" width="0.5596%" height="15" fill="rgb(226,78,44)" fg:x="1064" fg:w="7"/><text x="85.3020%" y="367.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="85.5316%" y="341" width="0.0799%" height="15" fill="rgb(240,15,48)" fg:x="1070" fg:w="1"/><text x="85.7816%" y="351.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="85.5316%" y="325" width="0.0799%" height="15" fill="rgb(253,176,7)" fg:x="1070" fg:w="1"/><text x="85.7816%" y="335.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="85.6115%" y="373" width="0.0799%" height="15" fill="rgb(206,166,28)" fg:x="1071" fg:w="1"/><text x="85.8615%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (58 samples, 4.64%)</title><rect x="81.2150%" y="389" width="4.6363%" height="15" fill="rgb(241,53,51)" fg:x="1016" fg:w="58"/><text x="81.4650%" y="399.50">regex..</text></g><g><title>regex_automata::util::prefilter::suffixes (2 samples, 0.16%)</title><rect x="85.6914%" y="373" width="0.1599%" height="15" fill="rgb(249,112,30)" fg:x="1072" fg:w="2"/><text x="85.9414%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::literal::Extractor as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="85.7714%" y="357" width="0.0799%" height="15" fill="rgb(217,85,30)" fg:x="1073" fg:w="1"/><text x="86.0214%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="85.8513%" y="341" width="0.0799%" height="15" fill="rgb(233,49,7)" fg:x="1074" fg:w="1"/><text x="86.1013%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="85.8513%" y="389" width="0.1599%" height="15" fill="rgb(234,109,9)" fg:x="1074" fg:w="2"/><text x="86.1013%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="85.8513%" y="373" width="0.1599%" height="15" fill="rgb(253,95,22)" fg:x="1074" fg:w="2"/><text x="86.1013%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="85.8513%" y="357" width="0.1599%" height="15" fill="rgb(233,176,25)" fg:x="1074" fg:w="2"/><text x="86.1013%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="85.9313%" y="341" width="0.0799%" height="15" fill="rgb(236,33,39)" fg:x="1075" fg:w="1"/><text x="86.1813%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.9313%" y="325" width="0.0799%" height="15" fill="rgb(223,226,42)" fg:x="1075" fg:w="1"/><text x="86.1813%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.9313%" y="309" width="0.0799%" height="15" fill="rgb(216,99,33)" fg:x="1075" fg:w="1"/><text x="86.1813%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9313%" y="293" width="0.0799%" height="15" fill="rgb(235,84,23)" fg:x="1075" fg:w="1"/><text x="86.1813%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="86.0112%" y="357" width="0.0799%" height="15" fill="rgb(232,2,27)" fg:x="1076" fg:w="1"/><text x="86.2612%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="86.0112%" y="341" width="0.0799%" height="15" fill="rgb(241,23,22)" fg:x="1076" fg:w="1"/><text x="86.2612%" y="351.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (63 samples, 5.04%)</title><rect x="81.1351%" y="437" width="5.0360%" height="15" fill="rgb(211,73,27)" fg:x="1015" fg:w="63"/><text x="81.3851%" y="447.50">&lt;regex..</text></g><g><title>regex::builders::Builder::build_one_string (63 samples, 5.04%)</title><rect x="81.1351%" y="421" width="5.0360%" height="15" fill="rgb(235,109,49)" fg:x="1015" fg:w="63"/><text x="81.3851%" y="431.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (63 samples, 5.04%)</title><rect x="81.1351%" y="405" width="5.0360%" height="15" fill="rgb(230,99,29)" fg:x="1015" fg:w="63"/><text x="81.3851%" y="415.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="86.0112%" y="389" width="0.1599%" height="15" fill="rgb(245,199,7)" fg:x="1076" fg:w="2"/><text x="86.2612%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.0112%" y="373" width="0.1599%" height="15" fill="rgb(217,179,10)" fg:x="1076" fg:w="2"/><text x="86.2612%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.0911%" y="357" width="0.0799%" height="15" fill="rgb(254,99,47)" fg:x="1077" fg:w="1"/><text x="86.3411%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="86.0911%" y="341" width="0.0799%" height="15" fill="rgb(251,121,7)" fg:x="1077" fg:w="1"/><text x="86.3411%" y="351.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="86.0911%" y="325" width="0.0799%" height="15" fill="rgb(250,177,26)" fg:x="1077" fg:w="1"/><text x="86.3411%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="86.0911%" y="309" width="0.0799%" height="15" fill="rgb(232,88,15)" fg:x="1077" fg:w="1"/><text x="86.3411%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.1711%" y="405" width="0.0799%" height="15" fill="rgb(251,54,54)" fg:x="1078" fg:w="1"/><text x="86.4211%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.1711%" y="389" width="0.0799%" height="15" fill="rgb(208,177,15)" fg:x="1078" fg:w="1"/><text x="86.4211%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.1711%" y="373" width="0.0799%" height="15" fill="rgb(205,97,32)" fg:x="1078" fg:w="1"/><text x="86.4211%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.2510%" y="389" width="0.0799%" height="15" fill="rgb(217,192,13)" fg:x="1079" fg:w="1"/><text x="86.5010%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="86.1711%" y="437" width="0.3197%" height="15" fill="rgb(215,163,41)" fg:x="1078" fg:w="4"/><text x="86.4211%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="86.1711%" y="421" width="0.3197%" height="15" fill="rgb(246,83,29)" fg:x="1078" fg:w="4"/><text x="86.4211%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="86.2510%" y="405" width="0.2398%" height="15" fill="rgb(219,2,45)" fg:x="1079" fg:w="3"/><text x="86.5010%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="86.3309%" y="389" width="0.1599%" height="15" fill="rgb(242,215,33)" fg:x="1080" fg:w="2"/><text x="86.5809%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="86.3309%" y="373" width="0.1599%" height="15" fill="rgb(217,1,6)" fg:x="1080" fg:w="2"/><text x="86.5809%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="86.4908%" y="373" width="0.3997%" height="15" fill="rgb(207,85,52)" fg:x="1082" fg:w="5"/><text x="86.7408%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="86.6507%" y="357" width="0.2398%" height="15" fill="rgb(231,171,19)" fg:x="1084" fg:w="3"/><text x="86.9007%" y="367.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (77 samples, 6.16%)</title><rect x="80.8153%" y="453" width="6.1551%" height="15" fill="rgb(207,128,4)" fg:x="1011" fg:w="77"/><text x="81.0653%" y="463.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="86.4908%" y="437" width="0.4796%" height="15" fill="rgb(219,208,4)" fg:x="1082" fg:w="6"/><text x="86.7408%" y="447.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="86.4908%" y="421" width="0.4796%" height="15" fill="rgb(235,161,42)" fg:x="1082" fg:w="6"/><text x="86.7408%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="86.4908%" y="405" width="0.4796%" height="15" fill="rgb(247,218,18)" fg:x="1082" fg:w="6"/><text x="86.7408%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="86.4908%" y="389" width="0.4796%" height="15" fill="rgb(232,114,51)" fg:x="1082" fg:w="6"/><text x="86.7408%" y="399.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="86.8905%" y="373" width="0.0799%" height="15" fill="rgb(222,95,3)" fg:x="1087" fg:w="1"/><text x="87.1405%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="86.9704%" y="357" width="0.0799%" height="15" fill="rgb(240,65,29)" fg:x="1088" fg:w="1"/><text x="87.2204%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="86.9704%" y="389" width="0.2398%" height="15" fill="rgb(249,209,20)" fg:x="1088" fg:w="3"/><text x="87.2204%" y="399.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="86.9704%" y="373" width="0.2398%" height="15" fill="rgb(241,48,37)" fg:x="1088" fg:w="3"/><text x="87.2204%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="87.0504%" y="357" width="0.1599%" height="15" fill="rgb(230,140,42)" fg:x="1089" fg:w="2"/><text x="87.3004%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.0504%" y="341" width="0.1599%" height="15" fill="rgb(230,176,45)" fg:x="1089" fg:w="2"/><text x="87.3004%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.1303%" y="325" width="0.0799%" height="15" fill="rgb(245,112,21)" fg:x="1090" fg:w="1"/><text x="87.3803%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.1303%" y="309" width="0.0799%" height="15" fill="rgb(207,183,35)" fg:x="1090" fg:w="1"/><text x="87.3803%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.1303%" y="293" width="0.0799%" height="15" fill="rgb(227,44,33)" fg:x="1090" fg:w="1"/><text x="87.3803%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.1303%" y="277" width="0.0799%" height="15" fill="rgb(246,120,21)" fg:x="1090" fg:w="1"/><text x="87.3803%" y="287.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="87.2102%" y="389" width="0.1599%" height="15" fill="rgb(235,57,52)" fg:x="1091" fg:w="2"/><text x="87.4602%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="87.6099%" y="357" width="0.1599%" height="15" fill="rgb(238,84,10)" fg:x="1096" fg:w="2"/><text x="87.8599%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.72%)</title><rect x="87.5300%" y="373" width="0.7194%" height="15" fill="rgb(251,200,32)" fg:x="1095" fg:w="9"/><text x="87.7800%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="87.7698%" y="357" width="0.4796%" height="15" fill="rgb(247,159,13)" fg:x="1098" fg:w="6"/><text x="88.0198%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.1695%" y="341" width="0.0799%" height="15" fill="rgb(238,64,4)" fg:x="1103" fg:w="1"/><text x="88.4195%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="88.2494%" y="373" width="0.3997%" height="15" fill="rgb(221,131,51)" fg:x="1104" fg:w="5"/><text x="88.4994%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="88.3293%" y="357" width="0.3197%" height="15" fill="rgb(242,5,29)" fg:x="1105" fg:w="4"/><text x="88.5793%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.9688%" y="341" width="0.0799%" height="15" fill="rgb(214,130,32)" fg:x="1113" fg:w="1"/><text x="89.2188%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="89.0488%" y="341" width="0.2398%" height="15" fill="rgb(244,210,16)" fg:x="1114" fg:w="3"/><text x="89.2988%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="89.2086%" y="325" width="0.0799%" height="15" fill="rgb(234,48,26)" fg:x="1116" fg:w="1"/><text x="89.4586%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.2086%" y="309" width="0.0799%" height="15" fill="rgb(231,82,38)" fg:x="1116" fg:w="1"/><text x="89.4586%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2086%" y="293" width="0.0799%" height="15" fill="rgb(254,128,41)" fg:x="1116" fg:w="1"/><text x="89.4586%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.2086%" y="277" width="0.0799%" height="15" fill="rgb(212,73,49)" fg:x="1116" fg:w="1"/><text x="89.4586%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="89.2886%" y="341" width="0.3997%" height="15" fill="rgb(205,62,54)" fg:x="1117" fg:w="5"/><text x="89.5386%" y="351.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="89.2886%" y="325" width="0.3997%" height="15" fill="rgb(228,0,8)" fg:x="1117" fg:w="5"/><text x="89.5386%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="89.2886%" y="309" width="0.3997%" height="15" fill="rgb(251,28,17)" fg:x="1117" fg:w="5"/><text x="89.5386%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (16 samples, 1.28%)</title><rect x="88.6491%" y="373" width="1.2790%" height="15" fill="rgb(238,105,27)" fg:x="1109" fg:w="16"/><text x="88.8991%" y="383.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (16 samples, 1.28%)</title><rect x="88.6491%" y="357" width="1.2790%" height="15" fill="rgb(237,216,33)" fg:x="1109" fg:w="16"/><text x="88.8991%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (3 samples, 0.24%)</title><rect x="89.6882%" y="341" width="0.2398%" height="15" fill="rgb(229,228,25)" fg:x="1122" fg:w="3"/><text x="89.9382%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.8481%" y="325" width="0.0799%" height="15" fill="rgb(233,75,23)" fg:x="1124" fg:w="1"/><text x="90.0981%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8481%" y="309" width="0.0799%" height="15" fill="rgb(231,207,16)" fg:x="1124" fg:w="1"/><text x="90.0981%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.8481%" y="293" width="0.0799%" height="15" fill="rgb(231,191,45)" fg:x="1124" fg:w="1"/><text x="90.0981%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.9281%" y="309" width="0.0799%" height="15" fill="rgb(224,133,17)" fg:x="1125" fg:w="1"/><text x="90.1781%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="90.7274%" y="261" width="0.2398%" height="15" fill="rgb(209,178,27)" fg:x="1135" fg:w="3"/><text x="90.9774%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.9672%" y="261" width="0.0799%" height="15" fill="rgb(218,37,11)" fg:x="1138" fg:w="1"/><text x="91.2172%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="91.0472%" y="261" width="0.2398%" height="15" fill="rgb(251,226,25)" fg:x="1139" fg:w="3"/><text x="91.2972%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="91.2870%" y="261" width="0.1599%" height="15" fill="rgb(209,222,27)" fg:x="1142" fg:w="2"/><text x="91.5370%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.3669%" y="245" width="0.0799%" height="15" fill="rgb(238,22,21)" fg:x="1143" fg:w="1"/><text x="91.6169%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.3669%" y="229" width="0.0799%" height="15" fill="rgb(233,161,25)" fg:x="1143" fg:w="1"/><text x="91.6169%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.3669%" y="213" width="0.0799%" height="15" fill="rgb(226,122,53)" fg:x="1143" fg:w="1"/><text x="91.6169%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.7666%" y="229" width="0.0799%" height="15" fill="rgb(220,123,17)" fg:x="1148" fg:w="1"/><text x="92.0166%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="91.8465%" y="197" width="0.1599%" height="15" fill="rgb(230,224,35)" fg:x="1149" fg:w="2"/><text x="92.0965%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="91.8465%" y="229" width="0.2398%" height="15" fill="rgb(246,83,8)" fg:x="1149" fg:w="3"/><text x="92.0965%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="91.8465%" y="213" width="0.2398%" height="15" fill="rgb(230,214,17)" fg:x="1149" fg:w="3"/><text x="92.0965%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.0064%" y="197" width="0.0799%" height="15" fill="rgb(222,97,18)" fg:x="1151" fg:w="1"/><text x="92.2564%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (13 samples, 1.04%)</title><rect x="91.4468%" y="261" width="1.0392%" height="15" fill="rgb(206,79,1)" fg:x="1144" fg:w="13"/><text x="91.6968%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (13 samples, 1.04%)</title><rect x="91.4468%" y="245" width="1.0392%" height="15" fill="rgb(214,121,34)" fg:x="1144" fg:w="13"/><text x="91.6968%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="92.0863%" y="229" width="0.3997%" height="15" fill="rgb(249,199,46)" fg:x="1152" fg:w="5"/><text x="92.3363%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.4061%" y="213" width="0.0799%" height="15" fill="rgb(214,222,46)" fg:x="1156" fg:w="1"/><text x="92.6561%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.4860%" y="245" width="0.0799%" height="15" fill="rgb(248,168,30)" fg:x="1157" fg:w="1"/><text x="92.7360%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.4860%" y="229" width="0.0799%" height="15" fill="rgb(226,14,28)" fg:x="1157" fg:w="1"/><text x="92.7360%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.4860%" y="213" width="0.0799%" height="15" fill="rgb(253,123,1)" fg:x="1157" fg:w="1"/><text x="92.7360%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.4860%" y="197" width="0.0799%" height="15" fill="rgb(225,24,42)" fg:x="1157" fg:w="1"/><text x="92.7360%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (23 samples, 1.84%)</title><rect x="92.4860%" y="261" width="1.8385%" height="15" fill="rgb(216,161,37)" fg:x="1157" fg:w="23"/><text x="92.7360%" y="271.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.76%)</title><rect x="92.5659%" y="245" width="1.7586%" height="15" fill="rgb(251,164,26)" fg:x="1158" fg:w="22"/><text x="92.8159%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22 samples, 1.76%)</title><rect x="92.5659%" y="229" width="1.7586%" height="15" fill="rgb(219,177,3)" fg:x="1158" fg:w="22"/><text x="92.8159%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="94.3245%" y="261" width="0.1599%" height="15" fill="rgb(222,65,0)" fg:x="1180" fg:w="2"/><text x="94.5745%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 4.72%)</title><rect x="89.9281%" y="357" width="4.7162%" height="15" fill="rgb(223,69,54)" fg:x="1125" fg:w="59"/><text x="90.1781%" y="367.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (59 samples, 4.72%)</title><rect x="89.9281%" y="341" width="4.7162%" height="15" fill="rgb(235,30,27)" fg:x="1125" fg:w="59"/><text x="90.1781%" y="351.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (59 samples, 4.72%)</title><rect x="89.9281%" y="325" width="4.7162%" height="15" fill="rgb(220,183,50)" fg:x="1125" fg:w="59"/><text x="90.1781%" y="335.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (58 samples, 4.64%)</title><rect x="90.0080%" y="309" width="4.6363%" height="15" fill="rgb(248,198,15)" fg:x="1126" fg:w="58"/><text x="90.2580%" y="319.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (58 samples, 4.64%)</title><rect x="90.0080%" y="293" width="4.6363%" height="15" fill="rgb(222,211,4)" fg:x="1126" fg:w="58"/><text x="90.2580%" y="303.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (57 samples, 4.56%)</title><rect x="90.0879%" y="277" width="4.5564%" height="15" fill="rgb(214,102,34)" fg:x="1127" fg:w="57"/><text x="90.3379%" y="287.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="94.4844%" y="261" width="0.1599%" height="15" fill="rgb(245,92,5)" fg:x="1182" fg:w="2"/><text x="94.7344%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6443%" y="341" width="0.0799%" height="15" fill="rgb(252,72,51)" fg:x="1184" fg:w="1"/><text x="94.8943%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.7242%" y="341" width="0.0799%" height="15" fill="rgb(252,208,19)" fg:x="1185" fg:w="1"/><text x="94.9742%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7242%" y="325" width="0.0799%" height="15" fill="rgb(211,69,7)" fg:x="1185" fg:w="1"/><text x="94.9742%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7242%" y="309" width="0.0799%" height="15" fill="rgb(211,27,16)" fg:x="1185" fg:w="1"/><text x="94.9742%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.2038%" y="293" width="0.0799%" height="15" fill="rgb(219,216,14)" fg:x="1191" fg:w="1"/><text x="95.4538%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.2038%" y="277" width="0.0799%" height="15" fill="rgb(219,71,8)" fg:x="1191" fg:w="1"/><text x="95.4538%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (7 samples, 0.56%)</title><rect x="94.8042%" y="341" width="0.5596%" height="15" fill="rgb(223,170,53)" fg:x="1186" fg:w="7"/><text x="95.0542%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="95.1239%" y="325" width="0.2398%" height="15" fill="rgb(246,21,26)" fg:x="1190" fg:w="3"/><text x="95.3739%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.2038%" y="309" width="0.1599%" height="15" fill="rgb(248,20,46)" fg:x="1191" fg:w="2"/><text x="95.4538%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.2838%" y="293" width="0.0799%" height="15" fill="rgb(252,94,11)" fg:x="1192" fg:w="1"/><text x="95.5338%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="95.3637%" y="341" width="0.4796%" height="15" fill="rgb(236,163,8)" fg:x="1193" fg:w="6"/><text x="95.6137%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="95.6035%" y="325" width="0.2398%" height="15" fill="rgb(217,221,45)" fg:x="1196" fg:w="3"/><text x="95.8535%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.6835%" y="309" width="0.1599%" height="15" fill="rgb(238,38,17)" fg:x="1197" fg:w="2"/><text x="95.9335%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.7634%" y="293" width="0.0799%" height="15" fill="rgb(242,210,23)" fg:x="1198" fg:w="1"/><text x="96.0134%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (107 samples, 8.55%)</title><rect x="87.3701%" y="389" width="8.5532%" height="15" fill="rgb(250,86,53)" fg:x="1093" fg:w="107"/><text x="87.6201%" y="399.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (75 samples, 6.00%)</title><rect x="89.9281%" y="373" width="5.9952%" height="15" fill="rgb(223,168,25)" fg:x="1125" fg:w="75"/><text x="90.1781%" y="383.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.28%)</title><rect x="94.6443%" y="357" width="1.2790%" height="15" fill="rgb(251,189,4)" fg:x="1184" fg:w="16"/><text x="94.8943%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.8433%" y="341" width="0.0799%" height="15" fill="rgb(245,19,28)" fg:x="1199" fg:w="1"/><text x="96.0933%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.9233%" y="357" width="0.1599%" height="15" fill="rgb(207,10,34)" fg:x="1200" fg:w="2"/><text x="96.1733%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="95.9233%" y="341" width="0.1599%" height="15" fill="rgb(235,153,31)" fg:x="1200" fg:w="2"/><text x="96.1733%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.0032%" y="325" width="0.0799%" height="15" fill="rgb(228,72,37)" fg:x="1201" fg:w="1"/><text x="96.2532%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.9233%" y="389" width="0.2398%" height="15" fill="rgb(215,15,16)" fg:x="1200" fg:w="3"/><text x="96.1733%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.9233%" y="373" width="0.2398%" height="15" fill="rgb(250,119,29)" fg:x="1200" fg:w="3"/><text x="96.1733%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="96.0831%" y="357" width="0.0799%" height="15" fill="rgb(214,59,1)" fg:x="1202" fg:w="1"/><text x="96.3331%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="96.1631%" y="357" width="0.0799%" height="15" fill="rgb(223,109,25)" fg:x="1203" fg:w="1"/><text x="96.4131%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="96.1631%" y="341" width="0.0799%" height="15" fill="rgb(230,198,22)" fg:x="1203" fg:w="1"/><text x="96.4131%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.2430%" y="341" width="0.0799%" height="15" fill="rgb(245,184,46)" fg:x="1204" fg:w="1"/><text x="96.4930%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.2430%" y="325" width="0.0799%" height="15" fill="rgb(253,73,16)" fg:x="1204" fg:w="1"/><text x="96.4930%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.2430%" y="309" width="0.0799%" height="15" fill="rgb(206,94,45)" fg:x="1204" fg:w="1"/><text x="96.4930%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="96.2430%" y="357" width="0.2398%" height="15" fill="rgb(236,83,27)" fg:x="1204" fg:w="3"/><text x="96.4930%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="96.3229%" y="341" width="0.1599%" height="15" fill="rgb(220,196,8)" fg:x="1205" fg:w="2"/><text x="96.5729%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="96.4828%" y="357" width="0.1599%" height="15" fill="rgb(254,185,14)" fg:x="1207" fg:w="2"/><text x="96.7328%" y="367.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.5627%" y="341" width="0.0799%" height="15" fill="rgb(226,50,22)" fg:x="1208" fg:w="1"/><text x="96.8127%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5627%" y="325" width="0.0799%" height="15" fill="rgb(253,147,0)" fg:x="1208" fg:w="1"/><text x="96.8127%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5627%" y="309" width="0.0799%" height="15" fill="rgb(252,46,33)" fg:x="1208" fg:w="1"/><text x="96.8127%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5627%" y="293" width="0.0799%" height="15" fill="rgb(242,22,54)" fg:x="1208" fg:w="1"/><text x="96.8127%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (122 samples, 9.75%)</title><rect x="86.9704%" y="437" width="9.7522%" height="15" fill="rgb(223,178,32)" fg:x="1088" fg:w="122"/><text x="87.2204%" y="447.50">&lt;regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (122 samples, 9.75%)</title><rect x="86.9704%" y="421" width="9.7522%" height="15" fill="rgb(214,106,53)" fg:x="1088" fg:w="122"/><text x="87.2204%" y="431.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (122 samples, 9.75%)</title><rect x="86.9704%" y="405" width="9.7522%" height="15" fill="rgb(232,65,50)" fg:x="1088" fg:w="122"/><text x="87.2204%" y="415.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="96.1631%" y="389" width="0.5596%" height="15" fill="rgb(231,110,28)" fg:x="1203" fg:w="7"/><text x="96.4131%" y="399.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="96.1631%" y="373" width="0.5596%" height="15" fill="rgb(216,71,40)" fg:x="1203" fg:w="7"/><text x="96.4131%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="96.6427%" y="357" width="0.0799%" height="15" fill="rgb(229,89,53)" fg:x="1209" fg:w="1"/><text x="96.8927%" y="367.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="96.6427%" y="341" width="0.0799%" height="15" fill="rgb(210,124,14)" fg:x="1209" fg:w="1"/><text x="96.8927%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6427%" y="325" width="0.0799%" height="15" fill="rgb(236,213,6)" fg:x="1209" fg:w="1"/><text x="96.8927%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6427%" y="309" width="0.0799%" height="15" fill="rgb(228,41,5)" fg:x="1209" fg:w="1"/><text x="96.8927%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.6427%" y="293" width="0.0799%" height="15" fill="rgb(221,167,25)" fg:x="1209" fg:w="1"/><text x="96.8927%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.8026%" y="357" width="0.0799%" height="15" fill="rgb(228,144,37)" fg:x="1211" fg:w="1"/><text x="97.0526%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8026%" y="341" width="0.0799%" height="15" fill="rgb(227,189,38)" fg:x="1211" fg:w="1"/><text x="97.0526%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="96.7226%" y="437" width="0.2398%" height="15" fill="rgb(218,8,2)" fg:x="1210" fg:w="3"/><text x="96.9726%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="96.7226%" y="421" width="0.2398%" height="15" fill="rgb(209,61,28)" fg:x="1210" fg:w="3"/><text x="96.9726%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="96.7226%" y="405" width="0.2398%" height="15" fill="rgb(233,140,39)" fg:x="1210" fg:w="3"/><text x="96.9726%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="96.8026%" y="389" width="0.1599%" height="15" fill="rgb(251,66,48)" fg:x="1211" fg:w="2"/><text x="97.0526%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="96.8026%" y="373" width="0.1599%" height="15" fill="rgb(210,44,45)" fg:x="1211" fg:w="2"/><text x="97.0526%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8825%" y="357" width="0.0799%" height="15" fill="rgb(214,136,46)" fg:x="1212" fg:w="1"/><text x="97.1325%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3621%" y="341" width="0.0799%" height="15" fill="rgb(207,130,50)" fg:x="1218" fg:w="1"/><text x="97.6121%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.3621%" y="325" width="0.0799%" height="15" fill="rgb(228,102,49)" fg:x="1218" fg:w="1"/><text x="97.6121%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.3621%" y="309" width="0.0799%" height="15" fill="rgb(253,55,1)" fg:x="1218" fg:w="1"/><text x="97.6121%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="96.9624%" y="357" width="0.5596%" height="15" fill="rgb(238,222,9)" fg:x="1213" fg:w="7"/><text x="97.2124%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.4420%" y="341" width="0.0799%" height="15" fill="rgb(246,99,6)" fg:x="1219" fg:w="1"/><text x="97.6920%" y="351.50"></text></g><g><title>indefinite::rules::number::Number::check (134 samples, 10.71%)</title><rect x="86.9704%" y="453" width="10.7114%" height="15" fill="rgb(219,110,26)" fg:x="1088" fg:w="134"/><text x="87.2204%" y="463.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="96.9624%" y="437" width="0.7194%" height="15" fill="rgb(239,160,33)" fg:x="1213" fg:w="9"/><text x="97.2124%" y="447.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="96.9624%" y="421" width="0.7194%" height="15" fill="rgb(220,202,23)" fg:x="1213" fg:w="9"/><text x="97.2124%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="96.9624%" y="405" width="0.7194%" height="15" fill="rgb(208,80,26)" fg:x="1213" fg:w="9"/><text x="97.2124%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="96.9624%" y="389" width="0.7194%" height="15" fill="rgb(243,85,7)" fg:x="1213" fg:w="9"/><text x="97.2124%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="96.9624%" y="373" width="0.7194%" height="15" fill="rgb(228,77,47)" fg:x="1213" fg:w="9"/><text x="97.2124%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="97.5220%" y="357" width="0.1599%" height="15" fill="rgb(212,226,8)" fg:x="1220" fg:w="2"/><text x="97.7720%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.6019%" y="341" width="0.0799%" height="15" fill="rgb(241,120,54)" fg:x="1221" fg:w="1"/><text x="97.8519%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.6019%" y="325" width="0.0799%" height="15" fill="rgb(226,80,16)" fg:x="1221" fg:w="1"/><text x="97.8519%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6019%" y="309" width="0.0799%" height="15" fill="rgb(240,76,13)" fg:x="1221" fg:w="1"/><text x="97.8519%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.6819%" y="373" width="0.0799%" height="15" fill="rgb(252,74,8)" fg:x="1222" fg:w="1"/><text x="97.9319%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.6819%" y="357" width="0.0799%" height="15" fill="rgb(244,155,2)" fg:x="1222" fg:w="1"/><text x="97.9319%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="97.6819%" y="341" width="0.0799%" height="15" fill="rgb(215,81,35)" fg:x="1222" fg:w="1"/><text x="97.9319%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.6819%" y="325" width="0.0799%" height="15" fill="rgb(206,55,2)" fg:x="1222" fg:w="1"/><text x="97.9319%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="97.7618%" y="357" width="0.0799%" height="15" fill="rgb(231,2,34)" fg:x="1223" fg:w="1"/><text x="98.0118%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="97.7618%" y="341" width="0.0799%" height="15" fill="rgb(242,176,48)" fg:x="1223" fg:w="1"/><text x="98.0118%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.8417%" y="325" width="0.0799%" height="15" fill="rgb(249,31,36)" fg:x="1224" fg:w="1"/><text x="98.0917%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.8417%" y="309" width="0.0799%" height="15" fill="rgb(205,18,17)" fg:x="1224" fg:w="1"/><text x="98.0917%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8417%" y="293" width="0.0799%" height="15" fill="rgb(254,130,5)" fg:x="1224" fg:w="1"/><text x="98.0917%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.8417%" y="277" width="0.0799%" height="15" fill="rgb(229,42,45)" fg:x="1224" fg:w="1"/><text x="98.0917%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="97.8417%" y="341" width="0.1599%" height="15" fill="rgb(245,95,25)" fg:x="1224" fg:w="2"/><text x="98.0917%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="97.9217%" y="325" width="0.0799%" height="15" fill="rgb(249,193,38)" fg:x="1225" fg:w="1"/><text x="98.1717%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.9217%" y="309" width="0.0799%" height="15" fill="rgb(241,140,43)" fg:x="1225" fg:w="1"/><text x="98.1717%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.9217%" y="293" width="0.0799%" height="15" fill="rgb(245,78,48)" fg:x="1225" fg:w="1"/><text x="98.1717%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="97.9217%" y="277" width="0.0799%" height="15" fill="rgb(214,92,39)" fg:x="1225" fg:w="1"/><text x="98.1717%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.9217%" y="261" width="0.0799%" height="15" fill="rgb(211,189,14)" fg:x="1225" fg:w="1"/><text x="98.1717%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.9217%" y="245" width="0.0799%" height="15" fill="rgb(218,7,24)" fg:x="1225" fg:w="1"/><text x="98.1717%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.9217%" y="229" width="0.0799%" height="15" fill="rgb(224,200,49)" fg:x="1225" fg:w="1"/><text x="98.1717%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0815%" y="325" width="0.0799%" height="15" fill="rgb(218,210,14)" fg:x="1227" fg:w="1"/><text x="98.3315%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.80%)</title><rect x="97.7618%" y="373" width="0.7994%" height="15" fill="rgb(234,142,31)" fg:x="1223" fg:w="10"/><text x="98.0118%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.72%)</title><rect x="97.8417%" y="357" width="0.7194%" height="15" fill="rgb(227,165,2)" fg:x="1224" fg:w="9"/><text x="98.0917%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="98.0016%" y="341" width="0.5596%" height="15" fill="rgb(232,44,46)" fg:x="1226" fg:w="7"/><text x="98.2516%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="98.1615%" y="325" width="0.3997%" height="15" fill="rgb(236,149,47)" fg:x="1228" fg:w="5"/><text x="98.4115%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.4812%" y="309" width="0.0799%" height="15" fill="rgb(227,45,31)" fg:x="1232" fg:w="1"/><text x="98.7312%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.4812%" y="293" width="0.0799%" height="15" fill="rgb(240,176,51)" fg:x="1232" fg:w="1"/><text x="98.7312%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4812%" y="277" width="0.0799%" height="15" fill="rgb(249,146,41)" fg:x="1232" fg:w="1"/><text x="98.7312%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="98.5612%" y="325" width="0.1599%" height="15" fill="rgb(213,208,4)" fg:x="1233" fg:w="2"/><text x="98.8112%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="98.6411%" y="309" width="0.0799%" height="15" fill="rgb(245,84,36)" fg:x="1234" fg:w="1"/><text x="98.8911%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.6411%" y="293" width="0.0799%" height="15" fill="rgb(254,84,18)" fg:x="1234" fg:w="1"/><text x="98.8911%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.6411%" y="277" width="0.0799%" height="15" fill="rgb(225,38,54)" fg:x="1234" fg:w="1"/><text x="98.8911%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (14 samples, 1.12%)</title><rect x="97.6819%" y="421" width="1.1191%" height="15" fill="rgb(246,50,30)" fg:x="1222" fg:w="14"/><text x="97.9319%" y="431.50"></text></g><g><title>regex::builders::Builder::build_one_string (14 samples, 1.12%)</title><rect x="97.6819%" y="405" width="1.1191%" height="15" fill="rgb(246,148,9)" fg:x="1222" fg:w="14"/><text x="97.9319%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.12%)</title><rect x="97.6819%" y="389" width="1.1191%" height="15" fill="rgb(223,75,4)" fg:x="1222" fg:w="14"/><text x="97.9319%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="98.5612%" y="373" width="0.2398%" height="15" fill="rgb(239,148,41)" fg:x="1233" fg:w="3"/><text x="98.8112%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="98.5612%" y="357" width="0.2398%" height="15" fill="rgb(205,195,3)" fg:x="1233" fg:w="3"/><text x="98.8112%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="98.5612%" y="341" width="0.2398%" height="15" fill="rgb(254,161,1)" fg:x="1233" fg:w="3"/><text x="98.8112%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="98.7210%" y="325" width="0.0799%" height="15" fill="rgb(211,229,8)" fg:x="1235" fg:w="1"/><text x="98.9710%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="98.7210%" y="309" width="0.0799%" height="15" fill="rgb(220,97,9)" fg:x="1235" fg:w="1"/><text x="98.9710%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="98.7210%" y="293" width="0.0799%" height="15" fill="rgb(240,218,8)" fg:x="1235" fg:w="1"/><text x="98.9710%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="98.8010%" y="421" width="0.0799%" height="15" fill="rgb(250,44,0)" fg:x="1236" fg:w="1"/><text x="99.0510%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="98.8010%" y="405" width="0.0799%" height="15" fill="rgb(236,41,53)" fg:x="1236" fg:w="1"/><text x="99.0510%" y="415.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="98.8010%" y="389" width="0.0799%" height="15" fill="rgb(218,227,13)" fg:x="1236" fg:w="1"/><text x="99.0510%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8010%" y="373" width="0.0799%" height="15" fill="rgb(217,94,32)" fg:x="1236" fg:w="1"/><text x="99.0510%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8010%" y="357" width="0.0799%" height="15" fill="rgb(213,217,12)" fg:x="1236" fg:w="1"/><text x="99.0510%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.8010%" y="341" width="0.0799%" height="15" fill="rgb(229,13,46)" fg:x="1236" fg:w="1"/><text x="99.0510%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="98.8809%" y="357" width="0.3197%" height="15" fill="rgb(243,139,5)" fg:x="1237" fg:w="4"/><text x="99.1309%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1207%" y="341" width="0.0799%" height="15" fill="rgb(249,38,45)" fg:x="1240" fg:w="1"/><text x="99.3707%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.1207%" y="325" width="0.0799%" height="15" fill="rgb(216,70,11)" fg:x="1240" fg:w="1"/><text x="99.3707%" y="335.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (239 samples, 19.10%)</title><rect x="80.1759%" y="533" width="19.1047%" height="15" fill="rgb(253,101,25)" fg:x="1003" fg:w="239"/><text x="80.4259%" y="543.50">&lt;&amp;kernel::model::entry::Entry ..</text></g><g><title>plugins_core::looking::model::qualify_name (233 samples, 18.63%)</title><rect x="80.6555%" y="517" width="18.6251%" height="15" fill="rgb(207,197,30)" fg:x="1009" fg:w="233"/><text x="80.9055%" y="527.50">plugins_core::looking::model:..</text></g><g><title>indefinite::indefinite (233 samples, 18.63%)</title><rect x="80.6555%" y="501" width="18.6251%" height="15" fill="rgb(238,87,13)" fg:x="1009" fg:w="233"/><text x="80.9055%" y="511.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (233 samples, 18.63%)</title><rect x="80.6555%" y="485" width="18.6251%" height="15" fill="rgb(215,155,8)" fg:x="1009" fg:w="233"/><text x="80.9055%" y="495.50">indefinite::methods::indefini..</text></g><g><title>indefinite::methods::apply_rules (232 samples, 18.55%)</title><rect x="80.7354%" y="469" width="18.5452%" height="15" fill="rgb(239,166,38)" fg:x="1010" fg:w="232"/><text x="80.9854%" y="479.50">indefinite::methods::apply_ru..</text></g><g><title>indefinite::rules::other::Other::run (20 samples, 1.60%)</title><rect x="97.6819%" y="453" width="1.5987%" height="15" fill="rgb(240,194,35)" fg:x="1222" fg:w="20"/><text x="97.9319%" y="463.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.60%)</title><rect x="97.6819%" y="437" width="1.5987%" height="15" fill="rgb(219,10,44)" fg:x="1222" fg:w="20"/><text x="97.9319%" y="447.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="98.8809%" y="421" width="0.3997%" height="15" fill="rgb(251,220,35)" fg:x="1237" fg:w="5"/><text x="99.1309%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="98.8809%" y="405" width="0.3997%" height="15" fill="rgb(218,117,13)" fg:x="1237" fg:w="5"/><text x="99.1309%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="98.8809%" y="389" width="0.3997%" height="15" fill="rgb(221,213,40)" fg:x="1237" fg:w="5"/><text x="99.1309%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="98.8809%" y="373" width="0.3997%" height="15" fill="rgb(251,224,35)" fg:x="1237" fg:w="5"/><text x="99.1309%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="99.2006%" y="357" width="0.0799%" height="15" fill="rgb(241,33,39)" fg:x="1241" fg:w="1"/><text x="99.4506%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="99.2806%" y="533" width="0.0799%" height="15" fill="rgb(222,74,17)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="99.2806%" y="517" width="0.0799%" height="15" fill="rgb(225,103,0)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.2806%" y="501" width="0.0799%" height="15" fill="rgb(240,0,12)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.2806%" y="485" width="0.0799%" height="15" fill="rgb(233,213,37)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.2806%" y="469" width="0.0799%" height="15" fill="rgb(225,84,52)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.2806%" y="453" width="0.0799%" height="15" fill="rgb(247,160,51)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.2806%" y="437" width="0.0799%" height="15" fill="rgb(244,60,51)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.2806%" y="421" width="0.0799%" height="15" fill="rgb(233,114,7)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.2806%" y="405" width="0.0799%" height="15" fill="rgb(246,136,16)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.2806%" y="389" width="0.0799%" height="15" fill="rgb(243,114,45)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.2806%" y="373" width="0.0799%" height="15" fill="rgb(247,183,43)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="99.2806%" y="357" width="0.0799%" height="15" fill="rgb(251,210,42)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.2806%" y="341" width="0.0799%" height="15" fill="rgb(221,88,35)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.2806%" y="325" width="0.0799%" height="15" fill="rgb(242,21,20)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.2806%" y="309" width="0.0799%" height="15" fill="rgb(233,226,36)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="319.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="99.2806%" y="293" width="0.0799%" height="15" fill="rgb(243,189,34)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="303.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="99.2806%" y="277" width="0.0799%" height="15" fill="rgb(207,145,50)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.2806%" y="261" width="0.0799%" height="15" fill="rgb(242,1,50)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.2806%" y="245" width="0.0799%" height="15" fill="rgb(231,65,32)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.2806%" y="229" width="0.0799%" height="15" fill="rgb(208,68,49)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.2806%" y="213" width="0.0799%" height="15" fill="rgb(253,54,49)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.2806%" y="197" width="0.0799%" height="15" fill="rgb(245,186,24)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.2806%" y="181" width="0.0799%" height="15" fill="rgb(209,2,41)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.2806%" y="165" width="0.0799%" height="15" fill="rgb(242,208,54)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.2806%" y="149" width="0.0799%" height="15" fill="rgb(225,9,51)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.2806%" y="133" width="0.0799%" height="15" fill="rgb(207,207,25)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="99.2806%" y="117" width="0.0799%" height="15" fill="rgb(253,96,18)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="99.2806%" y="101" width="0.0799%" height="15" fill="rgb(252,215,20)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="99.2806%" y="85" width="0.0799%" height="15" fill="rgb(245,227,26)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="99.2806%" y="69" width="0.0799%" height="15" fill="rgb(241,208,0)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="99.2806%" y="53" width="0.0799%" height="15" fill="rgb(224,130,10)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="99.2806%" y="37" width="0.0799%" height="15" fill="rgb(237,29,0)" fg:x="1242" fg:w="1"/><text x="99.5306%" y="47.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.3605%" y="389" width="0.0799%" height="15" fill="rgb(219,27,41)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.3605%" y="373" width="0.0799%" height="15" fill="rgb(245,101,19)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.3605%" y="357" width="0.0799%" height="15" fill="rgb(243,44,37)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="367.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="99.3605%" y="341" width="0.0799%" height="15" fill="rgb(228,213,43)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="99.3605%" y="325" width="0.0799%" height="15" fill="rgb(219,163,21)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="335.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3605%" y="309" width="0.0799%" height="15" fill="rgb(234,86,24)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3605%" y="293" width="0.0799%" height="15" fill="rgb(225,10,24)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="303.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3605%" y="277" width="0.0799%" height="15" fill="rgb(218,109,7)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3605%" y="261" width="0.0799%" height="15" fill="rgb(210,20,26)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.3605%" y="245" width="0.0799%" height="15" fill="rgb(216,18,1)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3605%" y="229" width="0.0799%" height="15" fill="rgb(206,163,23)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3605%" y="213" width="0.0799%" height="15" fill="rgb(229,150,31)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3605%" y="197" width="0.0799%" height="15" fill="rgb(231,10,5)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3605%" y="181" width="0.0799%" height="15" fill="rgb(250,40,50)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3605%" y="165" width="0.0799%" height="15" fill="rgb(217,119,7)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.3605%" y="149" width="0.0799%" height="15" fill="rgb(245,214,40)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.3605%" y="133" width="0.0799%" height="15" fill="rgb(216,187,1)" fg:x="1243" fg:w="1"/><text x="99.6105%" y="143.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="99.4404%" y="373" width="0.0799%" height="15" fill="rgb(237,146,21)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="99.4404%" y="357" width="0.0799%" height="15" fill="rgb(210,174,47)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4404%" y="341" width="0.0799%" height="15" fill="rgb(218,111,39)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4404%" y="325" width="0.0799%" height="15" fill="rgb(224,95,19)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4404%" y="309" width="0.0799%" height="15" fill="rgb(234,15,38)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4404%" y="293" width="0.0799%" height="15" fill="rgb(246,56,12)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="303.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.4404%" y="277" width="0.0799%" height="15" fill="rgb(247,16,17)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4404%" y="261" width="0.0799%" height="15" fill="rgb(215,151,11)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4404%" y="245" width="0.0799%" height="15" fill="rgb(225,16,24)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::size_hint (1 samples, 0.08%)</title><rect x="99.4404%" y="229" width="0.0799%" height="15" fill="rgb(217,117,5)" fg:x="1244" fg:w="1"/><text x="99.6904%" y="239.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (3 samples, 0.24%)</title><rect x="99.3605%" y="501" width="0.2398%" height="15" fill="rgb(246,187,53)" fg:x="1243" fg:w="3"/><text x="99.6105%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="99.3605%" y="485" width="0.2398%" height="15" fill="rgb(241,71,40)" fg:x="1243" fg:w="3"/><text x="99.6105%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="99.3605%" y="469" width="0.2398%" height="15" fill="rgb(231,67,39)" fg:x="1243" fg:w="3"/><text x="99.6105%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="99.3605%" y="453" width="0.2398%" height="15" fill="rgb(222,120,24)" fg:x="1243" fg:w="3"/><text x="99.6105%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="99.3605%" y="437" width="0.2398%" height="15" fill="rgb(248,3,3)" fg:x="1243" fg:w="3"/><text x="99.6105%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.3605%" y="421" width="0.2398%" height="15" fill="rgb(228,218,5)" fg:x="1243" fg:w="3"/><text x="99.6105%" y="431.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.3605%" y="405" width="0.2398%" height="15" fill="rgb(212,202,43)" fg:x="1243" fg:w="3"/><text x="99.6105%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="99.4404%" y="389" width="0.1599%" height="15" fill="rgb(235,183,2)" fg:x="1244" fg:w="2"/><text x="99.6904%" y="399.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5204%" y="373" width="0.0799%" height="15" fill="rgb(230,165,10)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5204%" y="357" width="0.0799%" height="15" fill="rgb(219,54,40)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5204%" y="341" width="0.0799%" height="15" fill="rgb(244,73,9)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5204%" y="325" width="0.0799%" height="15" fill="rgb(212,32,45)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5204%" y="309" width="0.0799%" height="15" fill="rgb(205,58,31)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5204%" y="293" width="0.0799%" height="15" fill="rgb(250,120,43)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5204%" y="277" width="0.0799%" height="15" fill="rgb(235,13,10)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5204%" y="261" width="0.0799%" height="15" fill="rgb(232,219,31)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5204%" y="245" width="0.0799%" height="15" fill="rgb(218,157,51)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5204%" y="229" width="0.0799%" height="15" fill="rgb(211,91,52)" fg:x="1245" fg:w="1"/><text x="99.7704%" y="239.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="99.6003%" y="501" width="0.0799%" height="15" fill="rgb(240,173,1)" fg:x="1246" fg:w="1"/><text x="99.8503%" y="511.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (251 samples, 20.06%)</title><rect x="79.6962%" y="709" width="20.0639%" height="15" fill="rgb(248,20,47)" fg:x="997" fg:w="251"/><text x="79.9462%" y="719.50">&lt;engine::perform::StandardPerfor..</text></g><g><title>kernel::plugins::apply_middleware (246 samples, 19.66%)</title><rect x="80.0959%" y="693" width="19.6643%" height="15" fill="rgb(217,221,40)" fg:x="1002" fg:w="246"/><text x="80.3459%" y="703.50">kernel::plugins::apply_middlewa..</text></g><g><title>kernel::plugins::MiddlewareNext::handle (246 samples, 19.66%)</title><rect x="80.0959%" y="677" width="19.6643%" height="15" fill="rgb(226,149,51)" fg:x="1002" fg:w="246"/><text x="80.3459%" y="687.50">kernel::plugins::MiddlewareNext..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::Middleware&gt;::handle (246 samples, 19.66%)</title><rect x="80.0959%" y="661" width="19.6643%" height="15" fill="rgb(252,193,7)" fg:x="1002" fg:w="246"/><text x="80.3459%" y="671.50">&lt;plugins_dynlib::DynamicMiddlew..</text></g><g><title>kernel::plugins::MiddlewareNext::handle (246 samples, 19.66%)</title><rect x="80.0959%" y="645" width="19.6643%" height="15" fill="rgb(205,123,0)" fg:x="1002" fg:w="246"/><text x="80.3459%" y="655.50">kernel::plugins::MiddlewareNext..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (246 samples, 19.66%)</title><rect x="80.0959%" y="629" width="19.6643%" height="15" fill="rgb(233,173,25)" fg:x="1002" fg:w="246"/><text x="80.3459%" y="639.50">core::ops::function::FnOnce::ca..</text></g><g><title>kernel::plugins::MiddlewareNext::handle (246 samples, 19.66%)</title><rect x="80.0959%" y="613" width="19.6643%" height="15" fill="rgb(216,63,32)" fg:x="1002" fg:w="246"/><text x="80.3459%" y="623.50">kernel::plugins::MiddlewareNext..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (246 samples, 19.66%)</title><rect x="80.0959%" y="597" width="19.6643%" height="15" fill="rgb(209,56,45)" fg:x="1002" fg:w="246"/><text x="80.3459%" y="607.50">core::ops::function::FnOnce::ca..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (246 samples, 19.66%)</title><rect x="80.0959%" y="581" width="19.6643%" height="15" fill="rgb(226,111,49)" fg:x="1002" fg:w="246"/><text x="80.3459%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (246 samples, 19.66%)</title><rect x="80.0959%" y="565" width="19.6643%" height="15" fill="rgb(244,181,21)" fg:x="1002" fg:w="246"/><text x="80.3459%" y="575.50">&lt;plugins_core::looking::actions..</text></g><g><title>plugins_core::looking::model::new_area_observation (245 samples, 19.58%)</title><rect x="80.1759%" y="549" width="19.5843%" height="15" fill="rgb(222,126,15)" fg:x="1003" fg:w="245"/><text x="80.4259%" y="559.50">plugins_core::looking::model::n..</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="99.3605%" y="533" width="0.3997%" height="15" fill="rgb(222,95,17)" fg:x="1243" fg:w="5"/><text x="99.6105%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (5 samples, 0.40%)</title><rect x="99.3605%" y="517" width="0.3997%" height="15" fill="rgb(254,46,5)" fg:x="1243" fg:w="5"/><text x="99.6105%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6803%" y="501" width="0.0799%" height="15" fill="rgb(236,216,35)" fg:x="1247" fg:w="1"/><text x="99.9303%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6803%" y="485" width="0.0799%" height="15" fill="rgb(217,187,26)" fg:x="1247" fg:w="1"/><text x="99.9303%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7602%" y="549" width="0.0799%" height="15" fill="rgb(207,192,25)" fg:x="1248" fg:w="1"/><text x="100.0102%" y="559.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (253 samples, 20.22%)</title><rect x="79.6962%" y="805" width="20.2238%" height="15" fill="rgb(253,135,27)" fg:x="997" fg:w="253"/><text x="79.9462%" y="815.50">&lt;kernel::plugins::SessionPlugins..</text></g><g><title>core::iter::adapters::try_process (253 samples, 20.22%)</title><rect x="79.6962%" y="789" width="20.2238%" height="15" fill="rgb(211,122,29)" fg:x="997" fg:w="253"/><text x="79.9462%" y="799.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (253 samples, 20.22%)</title><rect x="79.6962%" y="773" width="20.2238%" height="15" fill="rgb(233,162,40)" fg:x="997" fg:w="253"/><text x="79.9462%" y="783.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (253 samples, 20.22%)</title><rect x="79.6962%" y="757" width="20.2238%" height="15" fill="rgb(222,184,47)" fg:x="997" fg:w="253"/><text x="79.9462%" y="767.50">&lt;core::iter::adapters::map::Map&lt;..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (253 samples, 20.22%)</title><rect x="79.6962%" y="741" width="20.2238%" height="15" fill="rgb(249,99,23)" fg:x="997" fg:w="253"/><text x="79.9462%" y="751.50">&lt;plugins_core::looking::LookingP..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (253 samples, 20.22%)</title><rect x="79.6962%" y="725" width="20.2238%" height="15" fill="rgb(214,60,12)" fg:x="997" fg:w="253"/><text x="79.9462%" y="735.50">&lt;engine::perform::StandardPerfor..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (2 samples, 0.16%)</title><rect x="99.7602%" y="709" width="0.1599%" height="15" fill="rgb(250,229,36)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="99.7602%" y="693" width="0.1599%" height="15" fill="rgb(232,195,10)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.7602%" y="677" width="0.1599%" height="15" fill="rgb(205,213,31)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="687.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.7602%" y="661" width="0.1599%" height="15" fill="rgb(237,43,8)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="671.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="99.7602%" y="645" width="0.1599%" height="15" fill="rgb(216,208,3)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.7602%" y="629" width="0.1599%" height="15" fill="rgb(228,179,44)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.7602%" y="613" width="0.1599%" height="15" fill="rgb(230,192,27)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7602%" y="597" width="0.1599%" height="15" fill="rgb(251,30,38)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.7602%" y="581" width="0.1599%" height="15" fill="rgb(246,55,52)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.7602%" y="565" width="0.1599%" height="15" fill="rgb(249,79,26)" fg:x="1248" fg:w="2"/><text x="100.0102%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8401%" y="549" width="0.0799%" height="15" fill="rgb(220,202,16)" fg:x="1249" fg:w="1"/><text x="100.0901%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8401%" y="533" width="0.0799%" height="15" fill="rgb(250,170,23)" fg:x="1249" fg:w="1"/><text x="100.0901%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8401%" y="517" width="0.0799%" height="15" fill="rgb(230,7,37)" fg:x="1249" fg:w="1"/><text x="100.0901%" y="527.50"></text></g><g><title>all (1,251 samples, 100%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(213,71,1)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1199.50"></text></g><g><title>simple-5e588292 (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(227,87,39)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1183.50">simple-5e588292</text></g><g><title>_start (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(210,41,29)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1167.50">_start</text></g><g><title>__libc_start_main (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(206,191,31)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1151.50">__libc_start_main</text></g><g><title>main (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(247,75,54)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1135.50">main</text></g><g><title>std::rt::lang_start_internal (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(208,54,50)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1119.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(214,90,37)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1103.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(220,132,6)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1087.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(213,167,7)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1071.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(243,36,27)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1055.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(235,147,12)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1039.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,251 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(212,198,44)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1023.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,251 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(218,68,50)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="1007.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,251 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(224,79,48)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="991.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,251 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(213,191,50)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="975.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,251 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(254,146,10)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="959.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,251 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(215,175,11)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="943.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,251 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(207,49,7)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="927.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,251 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(234,144,29)" fg:x="0" fg:w="1251"/><text x="0.2500%" y="911.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (352 samples, 28.14%)</title><rect x="71.8625%" y="885" width="28.1375%" height="15" fill="rgb(213,222,48)" fg:x="899" fg:w="352"/><text x="72.1125%" y="895.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as crite..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (352 samples, 28.14%)</title><rect x="71.8625%" y="869" width="28.1375%" height="15" fill="rgb(222,8,6)" fg:x="899" fg:w="352"/><text x="72.1125%" y="879.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (352 samples, 28.14%)</title><rect x="71.8625%" y="853" width="28.1375%" height="15" fill="rgb(221,114,49)" fg:x="899" fg:w="352"/><text x="72.1125%" y="863.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (254 samples, 20.30%)</title><rect x="79.6962%" y="837" width="20.3038%" height="15" fill="rgb(250,140,42)" fg:x="997" fg:w="254"/><text x="79.9462%" y="847.50">engine::session::Session::evalua..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (254 samples, 20.30%)</title><rect x="79.6962%" y="821" width="20.3038%" height="15" fill="rgb(250,150,27)" fg:x="997" fg:w="254"/><text x="79.9462%" y="831.50">engine::perform::StandardPerform..</text></g><g><title>core::ptr::drop_in_place&lt;engine::perform::StandardPerformer&gt; (1 samples, 0.08%)</title><rect x="99.9201%" y="805" width="0.0799%" height="15" fill="rgb(252,159,3)" fg:x="1250" fg:w="1"/><text x="100.1701%" y="815.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.9201%" y="789" width="0.0799%" height="15" fill="rgb(241,182,3)" fg:x="1250" fg:w="1"/><text x="100.1701%" y="799.50"></text></g></svg></svg>