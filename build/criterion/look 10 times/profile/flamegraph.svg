<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1205.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="1227"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="821" width="0.0815%" height="15" fill="rgb(248,201,23)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0000%" y="805" width="0.0815%" height="15" fill="rgb(251,170,31)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="789" width="0.0815%" height="15" fill="rgb(207,110,25)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="0.0000%" y="773" width="0.0815%" height="15" fill="rgb(250,54,15)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="757" width="0.0815%" height="15" fill="rgb(227,68,33)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="741" width="0.0815%" height="15" fill="rgb(238,34,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0815%" height="15" fill="rgb(220,11,15)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.0815%" y="645" width="0.0815%" height="15" fill="rgb(246,111,35)" fg:x="1" fg:w="1"/><text x="0.3315%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0815%" y="629" width="0.0815%" height="15" fill="rgb(209,88,53)" fg:x="1" fg:w="1"/><text x="0.3315%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="0.0815%" y="741" width="0.1630%" height="15" fill="rgb(231,185,47)" fg:x="1" fg:w="2"/><text x="0.3315%" y="751.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="0.0815%" y="725" width="0.1630%" height="15" fill="rgb(233,154,1)" fg:x="1" fg:w="2"/><text x="0.3315%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.0815%" y="709" width="0.1630%" height="15" fill="rgb(225,15,46)" fg:x="1" fg:w="2"/><text x="0.3315%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.0815%" y="693" width="0.1630%" height="15" fill="rgb(211,135,41)" fg:x="1" fg:w="2"/><text x="0.3315%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="0.0815%" y="677" width="0.1630%" height="15" fill="rgb(208,54,0)" fg:x="1" fg:w="2"/><text x="0.3315%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.0815%" y="661" width="0.1630%" height="15" fill="rgb(244,136,14)" fg:x="1" fg:w="2"/><text x="0.3315%" y="671.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.1630%" y="645" width="0.0815%" height="15" fill="rgb(241,56,14)" fg:x="2" fg:w="1"/><text x="0.4130%" y="655.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="0.1630%" y="629" width="0.0815%" height="15" fill="rgb(205,80,24)" fg:x="2" fg:w="1"/><text x="0.4130%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.1630%" y="613" width="0.0815%" height="15" fill="rgb(220,57,4)" fg:x="2" fg:w="1"/><text x="0.4130%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.2445%" y="661" width="0.0815%" height="15" fill="rgb(226,193,50)" fg:x="3" fg:w="1"/><text x="0.4945%" y="671.50"></text></g><g><title>engine::internal::Entities::prepare_entity (5 samples, 0.41%)</title><rect x="0.0815%" y="773" width="0.4075%" height="15" fill="rgb(231,168,22)" fg:x="1" fg:w="5"/><text x="0.3315%" y="783.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.41%)</title><rect x="0.0815%" y="757" width="0.4075%" height="15" fill="rgb(254,215,14)" fg:x="1" fg:w="5"/><text x="0.3315%" y="767.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="0.2445%" y="741" width="0.2445%" height="15" fill="rgb(211,115,16)" fg:x="3" fg:w="3"/><text x="0.4945%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="0.2445%" y="725" width="0.2445%" height="15" fill="rgb(236,210,16)" fg:x="3" fg:w="3"/><text x="0.4945%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="0.2445%" y="709" width="0.2445%" height="15" fill="rgb(221,94,12)" fg:x="3" fg:w="3"/><text x="0.4945%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="0.2445%" y="693" width="0.2445%" height="15" fill="rgb(235,218,49)" fg:x="3" fg:w="3"/><text x="0.4945%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="0.2445%" y="677" width="0.2445%" height="15" fill="rgb(217,114,14)" fg:x="3" fg:w="3"/><text x="0.4945%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.3260%" y="661" width="0.1630%" height="15" fill="rgb(216,145,22)" fg:x="4" fg:w="2"/><text x="0.5760%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.3260%" y="645" width="0.1630%" height="15" fill="rgb(217,112,39)" fg:x="4" fg:w="2"/><text x="0.5760%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.3260%" y="629" width="0.1630%" height="15" fill="rgb(225,85,32)" fg:x="4" fg:w="2"/><text x="0.5760%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.3260%" y="613" width="0.1630%" height="15" fill="rgb(245,209,47)" fg:x="4" fg:w="2"/><text x="0.5760%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.3260%" y="597" width="0.1630%" height="15" fill="rgb(218,220,15)" fg:x="4" fg:w="2"/><text x="0.5760%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.4075%" y="581" width="0.0815%" height="15" fill="rgb(222,202,31)" fg:x="5" fg:w="1"/><text x="0.6575%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.49%)</title><rect x="0.0815%" y="789" width="0.4890%" height="15" fill="rgb(243,203,4)" fg:x="1" fg:w="6"/><text x="0.3315%" y="799.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="0.4890%" y="773" width="0.0815%" height="15" fill="rgb(237,92,17)" fg:x="6" fg:w="1"/><text x="0.7390%" y="783.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.4890%" y="757" width="0.0815%" height="15" fill="rgb(231,119,7)" fg:x="6" fg:w="1"/><text x="0.7390%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.4890%" y="741" width="0.0815%" height="15" fill="rgb(237,82,41)" fg:x="6" fg:w="1"/><text x="0.7390%" y="751.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.4890%" y="725" width="0.0815%" height="15" fill="rgb(226,81,48)" fg:x="6" fg:w="1"/><text x="0.7390%" y="735.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="0.4890%" y="709" width="0.0815%" height="15" fill="rgb(234,70,51)" fg:x="6" fg:w="1"/><text x="0.7390%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="0.4890%" y="693" width="0.0815%" height="15" fill="rgb(251,86,4)" fg:x="6" fg:w="1"/><text x="0.7390%" y="703.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="0.4890%" y="677" width="0.0815%" height="15" fill="rgb(244,144,28)" fg:x="6" fg:w="1"/><text x="0.7390%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.4890%" y="661" width="0.0815%" height="15" fill="rgb(232,161,39)" fg:x="6" fg:w="1"/><text x="0.7390%" y="671.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.4890%" y="645" width="0.0815%" height="15" fill="rgb(247,34,51)" fg:x="6" fg:w="1"/><text x="0.7390%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.4890%" y="629" width="0.0815%" height="15" fill="rgb(225,132,2)" fg:x="6" fg:w="1"/><text x="0.7390%" y="639.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="0.4890%" y="613" width="0.0815%" height="15" fill="rgb(209,159,44)" fg:x="6" fg:w="1"/><text x="0.7390%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="0.4890%" y="597" width="0.0815%" height="15" fill="rgb(251,214,1)" fg:x="6" fg:w="1"/><text x="0.7390%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="0.4890%" y="581" width="0.0815%" height="15" fill="rgb(247,84,47)" fg:x="6" fg:w="1"/><text x="0.7390%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="0.4890%" y="565" width="0.0815%" height="15" fill="rgb(240,111,43)" fg:x="6" fg:w="1"/><text x="0.7390%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="0.4890%" y="549" width="0.0815%" height="15" fill="rgb(215,214,35)" fg:x="6" fg:w="1"/><text x="0.7390%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.6520%" y="741" width="0.0815%" height="15" fill="rgb(248,207,23)" fg:x="8" fg:w="1"/><text x="0.9020%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.6520%" y="725" width="0.0815%" height="15" fill="rgb(214,186,4)" fg:x="8" fg:w="1"/><text x="0.9020%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.6520%" y="709" width="0.0815%" height="15" fill="rgb(220,133,22)" fg:x="8" fg:w="1"/><text x="0.9020%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="0.6520%" y="693" width="0.0815%" height="15" fill="rgb(239,134,19)" fg:x="8" fg:w="1"/><text x="0.9020%" y="703.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.6520%" y="677" width="0.0815%" height="15" fill="rgb(250,140,9)" fg:x="8" fg:w="1"/><text x="0.9020%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.6520%" y="661" width="0.0815%" height="15" fill="rgb(225,59,14)" fg:x="8" fg:w="1"/><text x="0.9020%" y="671.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="0.6520%" y="645" width="0.0815%" height="15" fill="rgb(214,152,51)" fg:x="8" fg:w="1"/><text x="0.9020%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="0.6520%" y="629" width="0.0815%" height="15" fill="rgb(251,227,43)" fg:x="8" fg:w="1"/><text x="0.9020%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="0.6520%" y="613" width="0.0815%" height="15" fill="rgb(241,96,17)" fg:x="8" fg:w="1"/><text x="0.9020%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="0.6520%" y="597" width="0.0815%" height="15" fill="rgb(234,198,43)" fg:x="8" fg:w="1"/><text x="0.9020%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.6520%" y="581" width="0.0815%" height="15" fill="rgb(220,108,29)" fg:x="8" fg:w="1"/><text x="0.9020%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="0.6520%" y="565" width="0.0815%" height="15" fill="rgb(226,163,33)" fg:x="8" fg:w="1"/><text x="0.9020%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.08%)</title><rect x="0.6520%" y="549" width="0.0815%" height="15" fill="rgb(205,194,45)" fg:x="8" fg:w="1"/><text x="0.9020%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.08%)</title><rect x="0.6520%" y="533" width="0.0815%" height="15" fill="rgb(206,143,44)" fg:x="8" fg:w="1"/><text x="0.9020%" y="543.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.7335%" y="709" width="0.0815%" height="15" fill="rgb(236,136,36)" fg:x="9" fg:w="1"/><text x="0.9835%" y="719.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="0.7335%" y="725" width="0.1630%" height="15" fill="rgb(249,172,42)" fg:x="9" fg:w="2"/><text x="0.9835%" y="735.50"></text></g><g><title>pthread_rwlock_unlock (1 samples, 0.08%)</title><rect x="0.8150%" y="709" width="0.0815%" height="15" fill="rgb(216,139,23)" fg:x="10" fg:w="1"/><text x="1.0650%" y="719.50"></text></g><g><title>libloading::os::unix::Library::open (9 samples, 0.73%)</title><rect x="0.7335%" y="741" width="0.7335%" height="15" fill="rgb(207,166,20)" fg:x="9" fg:w="9"/><text x="0.9835%" y="751.50"></text></g><g><title>dlopen (7 samples, 0.57%)</title><rect x="0.8965%" y="725" width="0.5705%" height="15" fill="rgb(210,209,22)" fg:x="11" fg:w="7"/><text x="1.1465%" y="735.50"></text></g><g><title>_dl_catch_error (7 samples, 0.57%)</title><rect x="0.8965%" y="709" width="0.5705%" height="15" fill="rgb(232,118,20)" fg:x="11" fg:w="7"/><text x="1.1465%" y="719.50"></text></g><g><title>_dl_catch_exception (7 samples, 0.57%)</title><rect x="0.8965%" y="693" width="0.5705%" height="15" fill="rgb(238,113,42)" fg:x="11" fg:w="7"/><text x="1.1465%" y="703.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.41%)</title><rect x="1.0595%" y="677" width="0.4075%" height="15" fill="rgb(231,42,5)" fg:x="13" fg:w="5"/><text x="1.3095%" y="687.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="1.1410%" y="661" width="0.3260%" height="15" fill="rgb(243,166,24)" fg:x="14" fg:w="4"/><text x="1.3910%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (18 samples, 1.47%)</title><rect x="0.0815%" y="821" width="1.4670%" height="15" fill="rgb(237,226,12)" fg:x="1" fg:w="18"/><text x="0.3315%" y="831.50"></text></g><g><title>engine::session::Session::new (18 samples, 1.47%)</title><rect x="0.0815%" y="805" width="1.4670%" height="15" fill="rgb(229,133,24)" fg:x="1" fg:w="18"/><text x="0.3315%" y="815.50"></text></g><g><title>engine::session::Session::initialize (12 samples, 0.98%)</title><rect x="0.5705%" y="789" width="0.9780%" height="15" fill="rgb(238,33,43)" fg:x="7" fg:w="12"/><text x="0.8205%" y="799.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (12 samples, 0.98%)</title><rect x="0.5705%" y="773" width="0.9780%" height="15" fill="rgb(227,59,38)" fg:x="7" fg:w="12"/><text x="0.8205%" y="783.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (11 samples, 0.90%)</title><rect x="0.6520%" y="757" width="0.8965%" height="15" fill="rgb(230,97,0)" fg:x="8" fg:w="11"/><text x="0.9020%" y="767.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="1.4670%" y="741" width="0.0815%" height="15" fill="rgb(250,173,50)" fg:x="18" fg:w="1"/><text x="1.7170%" y="751.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="1.4670%" y="725" width="0.0815%" height="15" fill="rgb(240,15,50)" fg:x="18" fg:w="1"/><text x="1.7170%" y="735.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.4670%" y="709" width="0.0815%" height="15" fill="rgb(221,93,22)" fg:x="18" fg:w="1"/><text x="1.7170%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="1.5485%" y="805" width="0.0815%" height="15" fill="rgb(245,180,53)" fg:x="19" fg:w="1"/><text x="1.7985%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.5485%" y="789" width="0.0815%" height="15" fill="rgb(231,88,51)" fg:x="19" fg:w="1"/><text x="1.7985%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.5485%" y="773" width="0.0815%" height="15" fill="rgb(240,58,21)" fg:x="19" fg:w="1"/><text x="1.7985%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5485%" y="757" width="0.0815%" height="15" fill="rgb(237,21,10)" fg:x="19" fg:w="1"/><text x="1.7985%" y="767.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.6300%" y="773" width="0.0815%" height="15" fill="rgb(218,43,11)" fg:x="20" fg:w="1"/><text x="1.8800%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="1.6300%" y="757" width="0.0815%" height="15" fill="rgb(218,221,29)" fg:x="20" fg:w="1"/><text x="1.8800%" y="767.50"></text></g><g><title>engine::session::Session::save_entity (1 samples, 0.08%)</title><rect x="1.6300%" y="741" width="0.0815%" height="15" fill="rgb(214,118,42)" fg:x="20" fg:w="1"/><text x="1.8800%" y="751.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="1.7115%" y="773" width="0.0815%" height="15" fill="rgb(251,200,26)" fg:x="21" fg:w="1"/><text x="1.9615%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="1.7115%" y="757" width="0.0815%" height="15" fill="rgb(237,101,39)" fg:x="21" fg:w="1"/><text x="1.9615%" y="767.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="1.7115%" y="741" width="0.0815%" height="15" fill="rgb(251,117,11)" fg:x="21" fg:w="1"/><text x="1.9615%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="1.7115%" y="725" width="0.0815%" height="15" fill="rgb(216,223,23)" fg:x="21" fg:w="1"/><text x="1.9615%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="1.7115%" y="709" width="0.0815%" height="15" fill="rgb(251,54,12)" fg:x="21" fg:w="1"/><text x="1.9615%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.7930%" y="677" width="0.0815%" height="15" fill="rgb(254,176,54)" fg:x="22" fg:w="1"/><text x="2.0430%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="1.8745%" y="677" width="0.2445%" height="15" fill="rgb(210,32,8)" fg:x="23" fg:w="3"/><text x="2.1245%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.9560%" y="661" width="0.1630%" height="15" fill="rgb(235,52,38)" fg:x="24" fg:w="2"/><text x="2.2060%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0375%" y="645" width="0.0815%" height="15" fill="rgb(231,4,44)" fg:x="25" fg:w="1"/><text x="2.2875%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.0375%" y="629" width="0.0815%" height="15" fill="rgb(249,2,32)" fg:x="25" fg:w="1"/><text x="2.2875%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.1190%" y="661" width="0.0815%" height="15" fill="rgb(224,65,26)" fg:x="26" fg:w="1"/><text x="2.3690%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.1190%" y="677" width="0.1630%" height="15" fill="rgb(250,73,40)" fg:x="26" fg:w="2"/><text x="2.3690%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.2005%" y="661" width="0.0815%" height="15" fill="rgb(253,177,16)" fg:x="27" fg:w="1"/><text x="2.4505%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2005%" y="645" width="0.0815%" height="15" fill="rgb(217,32,34)" fg:x="27" fg:w="1"/><text x="2.4505%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2005%" y="629" width="0.0815%" height="15" fill="rgb(212,7,10)" fg:x="27" fg:w="1"/><text x="2.4505%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="1.7930%" y="709" width="0.5705%" height="15" fill="rgb(245,89,8)" fg:x="22" fg:w="7"/><text x="2.0430%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="1.7930%" y="693" width="0.5705%" height="15" fill="rgb(237,16,53)" fg:x="22" fg:w="7"/><text x="2.0430%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2820%" y="677" width="0.0815%" height="15" fill="rgb(250,204,30)" fg:x="28" fg:w="1"/><text x="2.5320%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2820%" y="661" width="0.0815%" height="15" fill="rgb(208,77,27)" fg:x="28" fg:w="1"/><text x="2.5320%" y="671.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.65%)</title><rect x="1.7930%" y="741" width="0.6520%" height="15" fill="rgb(250,204,28)" fg:x="22" fg:w="8"/><text x="2.0430%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="1.7930%" y="725" width="0.6520%" height="15" fill="rgb(244,63,21)" fg:x="22" fg:w="8"/><text x="2.0430%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.3635%" y="709" width="0.0815%" height="15" fill="rgb(236,85,44)" fg:x="29" fg:w="1"/><text x="2.6135%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.3635%" y="693" width="0.0815%" height="15" fill="rgb(215,98,4)" fg:x="29" fg:w="1"/><text x="2.6135%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.3635%" y="677" width="0.0815%" height="15" fill="rgb(235,38,11)" fg:x="29" fg:w="1"/><text x="2.6135%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.3635%" y="661" width="0.0815%" height="15" fill="rgb(254,186,25)" fg:x="29" fg:w="1"/><text x="2.6135%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.3635%" y="645" width="0.0815%" height="15" fill="rgb(225,55,31)" fg:x="29" fg:w="1"/><text x="2.6135%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.3635%" y="629" width="0.0815%" height="15" fill="rgb(211,15,21)" fg:x="29" fg:w="1"/><text x="2.6135%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4450%" y="709" width="0.0815%" height="15" fill="rgb(215,187,41)" fg:x="30" fg:w="1"/><text x="2.6950%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.4450%" y="741" width="0.2445%" height="15" fill="rgb(248,69,32)" fg:x="30" fg:w="3"/><text x="2.6950%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="2.4450%" y="725" width="0.2445%" height="15" fill="rgb(252,102,52)" fg:x="30" fg:w="3"/><text x="2.6950%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.5265%" y="709" width="0.1630%" height="15" fill="rgb(253,140,32)" fg:x="31" fg:w="2"/><text x="2.7765%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6080%" y="693" width="0.0815%" height="15" fill="rgb(216,56,42)" fg:x="32" fg:w="1"/><text x="2.8580%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.8525%" y="693" width="0.1630%" height="15" fill="rgb(216,184,14)" fg:x="35" fg:w="2"/><text x="3.1025%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.8525%" y="677" width="0.1630%" height="15" fill="rgb(237,187,27)" fg:x="35" fg:w="2"/><text x="3.1025%" y="687.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0155%" y="693" width="0.0815%" height="15" fill="rgb(219,65,3)" fg:x="37" fg:w="1"/><text x="3.2655%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0155%" y="677" width="0.0815%" height="15" fill="rgb(245,83,25)" fg:x="37" fg:w="1"/><text x="3.2655%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1785%" y="645" width="0.0815%" height="15" fill="rgb(214,205,45)" fg:x="39" fg:w="1"/><text x="3.4285%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.1785%" y="629" width="0.0815%" height="15" fill="rgb(241,20,18)" fg:x="39" fg:w="1"/><text x="3.4285%" y="639.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.71%)</title><rect x="1.6300%" y="805" width="1.7115%" height="15" fill="rgb(232,163,23)" fg:x="20" fg:w="21"/><text x="1.8800%" y="815.50"></text></g><g><title>engine::session::Session::save_entity_changes (21 samples, 1.71%)</title><rect x="1.6300%" y="789" width="1.7115%" height="15" fill="rgb(214,5,46)" fg:x="20" fg:w="21"/><text x="1.8800%" y="799.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (19 samples, 1.55%)</title><rect x="1.7930%" y="773" width="1.5485%" height="15" fill="rgb(229,78,17)" fg:x="22" fg:w="19"/><text x="2.0430%" y="783.50"></text></g><g><title>engine::session::Session::check_for_changes (19 samples, 1.55%)</title><rect x="1.7930%" y="757" width="1.5485%" height="15" fill="rgb(248,89,10)" fg:x="22" fg:w="19"/><text x="2.0430%" y="767.50"></text></g><g><title>kernel::compare::any_entity_changes (8 samples, 0.65%)</title><rect x="2.6895%" y="741" width="0.6520%" height="15" fill="rgb(248,54,15)" fg:x="33" fg:w="8"/><text x="2.9395%" y="751.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="2.7710%" y="725" width="0.5705%" height="15" fill="rgb(223,116,6)" fg:x="34" fg:w="7"/><text x="3.0210%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="2.7710%" y="709" width="0.5705%" height="15" fill="rgb(205,125,38)" fg:x="34" fg:w="7"/><text x="3.0210%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="3.0970%" y="693" width="0.2445%" height="15" fill="rgb(251,78,38)" fg:x="38" fg:w="3"/><text x="3.3470%" y="703.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="3.0970%" y="677" width="0.2445%" height="15" fill="rgb(253,78,28)" fg:x="38" fg:w="3"/><text x="3.3470%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="3.1785%" y="661" width="0.1630%" height="15" fill="rgb(209,120,3)" fg:x="39" fg:w="2"/><text x="3.4285%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.2600%" y="645" width="0.0815%" height="15" fill="rgb(238,229,9)" fg:x="40" fg:w="1"/><text x="3.5100%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.2600%" y="629" width="0.0815%" height="15" fill="rgb(253,159,18)" fg:x="40" fg:w="1"/><text x="3.5100%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2600%" y="613" width="0.0815%" height="15" fill="rgb(244,42,34)" fg:x="40" fg:w="1"/><text x="3.5100%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.3415%" y="773" width="0.0815%" height="15" fill="rgb(224,8,7)" fg:x="41" fg:w="1"/><text x="3.5915%" y="783.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="3.3415%" y="805" width="0.1630%" height="15" fill="rgb(210,201,45)" fg:x="41" fg:w="2"/><text x="3.5915%" y="815.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="3.3415%" y="789" width="0.1630%" height="15" fill="rgb(252,185,21)" fg:x="41" fg:w="2"/><text x="3.5915%" y="799.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="3.4230%" y="773" width="0.0815%" height="15" fill="rgb(223,131,1)" fg:x="42" fg:w="1"/><text x="3.6730%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="3.4230%" y="757" width="0.0815%" height="15" fill="rgb(245,141,16)" fg:x="42" fg:w="1"/><text x="3.6730%" y="767.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="3.4230%" y="741" width="0.0815%" height="15" fill="rgb(229,55,45)" fg:x="42" fg:w="1"/><text x="3.6730%" y="751.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="3.4230%" y="725" width="0.0815%" height="15" fill="rgb(208,92,15)" fg:x="42" fg:w="1"/><text x="3.6730%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="3.4230%" y="709" width="0.0815%" height="15" fill="rgb(234,185,47)" fg:x="42" fg:w="1"/><text x="3.6730%" y="719.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="3.4230%" y="693" width="0.0815%" height="15" fill="rgb(253,104,50)" fg:x="42" fg:w="1"/><text x="3.6730%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.4230%" y="677" width="0.0815%" height="15" fill="rgb(205,70,7)" fg:x="42" fg:w="1"/><text x="3.6730%" y="687.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="3.4230%" y="661" width="0.0815%" height="15" fill="rgb(240,178,43)" fg:x="42" fg:w="1"/><text x="3.6730%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="3.4230%" y="645" width="0.0815%" height="15" fill="rgb(214,112,2)" fg:x="42" fg:w="1"/><text x="3.6730%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4230%" y="629" width="0.0815%" height="15" fill="rgb(206,46,17)" fg:x="42" fg:w="1"/><text x="3.6730%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.4230%" y="613" width="0.0815%" height="15" fill="rgb(225,220,16)" fg:x="42" fg:w="1"/><text x="3.6730%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.4230%" y="597" width="0.0815%" height="15" fill="rgb(238,65,40)" fg:x="42" fg:w="1"/><text x="3.6730%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.4230%" y="581" width="0.0815%" height="15" fill="rgb(230,151,21)" fg:x="42" fg:w="1"/><text x="3.6730%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.4230%" y="565" width="0.0815%" height="15" fill="rgb(218,58,49)" fg:x="42" fg:w="1"/><text x="3.6730%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.4230%" y="549" width="0.0815%" height="15" fill="rgb(219,179,14)" fg:x="42" fg:w="1"/><text x="3.6730%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4230%" y="533" width="0.0815%" height="15" fill="rgb(223,72,1)" fg:x="42" fg:w="1"/><text x="3.6730%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.5045%" y="805" width="0.0815%" height="15" fill="rgb(238,126,10)" fg:x="43" fg:w="1"/><text x="3.7545%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.5045%" y="789" width="0.0815%" height="15" fill="rgb(224,206,38)" fg:x="43" fg:w="1"/><text x="3.7545%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.5045%" y="773" width="0.0815%" height="15" fill="rgb(212,201,54)" fg:x="43" fg:w="1"/><text x="3.7545%" y="783.50"></text></g><g><title>kernel::model::Entity::gid (1 samples, 0.08%)</title><rect x="3.5045%" y="757" width="0.0815%" height="15" fill="rgb(218,154,48)" fg:x="43" fg:w="1"/><text x="3.7545%" y="767.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="3.5045%" y="741" width="0.0815%" height="15" fill="rgb(232,93,24)" fg:x="43" fg:w="1"/><text x="3.7545%" y="751.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.5045%" y="725" width="0.0815%" height="15" fill="rgb(245,30,21)" fg:x="43" fg:w="1"/><text x="3.7545%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.5045%" y="709" width="0.0815%" height="15" fill="rgb(242,148,29)" fg:x="43" fg:w="1"/><text x="3.7545%" y="719.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.5860%" y="805" width="0.0815%" height="15" fill="rgb(244,153,54)" fg:x="44" fg:w="1"/><text x="3.8360%" y="815.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="3.5860%" y="789" width="0.0815%" height="15" fill="rgb(252,87,22)" fg:x="44" fg:w="1"/><text x="3.8360%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.6675%" y="725" width="0.0815%" height="15" fill="rgb(210,51,29)" fg:x="45" fg:w="1"/><text x="3.9175%" y="735.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.6675%" y="709" width="0.0815%" height="15" fill="rgb(242,136,47)" fg:x="45" fg:w="1"/><text x="3.9175%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6675%" y="693" width="0.0815%" height="15" fill="rgb(238,68,4)" fg:x="45" fg:w="1"/><text x="3.9175%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6675%" y="677" width="0.0815%" height="15" fill="rgb(242,161,30)" fg:x="45" fg:w="1"/><text x="3.9175%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6675%" y="661" width="0.0815%" height="15" fill="rgb(218,58,44)" fg:x="45" fg:w="1"/><text x="3.9175%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.6675%" y="645" width="0.0815%" height="15" fill="rgb(252,125,32)" fg:x="45" fg:w="1"/><text x="3.9175%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.6675%" y="629" width="0.0815%" height="15" fill="rgb(219,178,0)" fg:x="45" fg:w="1"/><text x="3.9175%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.6675%" y="613" width="0.0815%" height="15" fill="rgb(213,152,7)" fg:x="45" fg:w="1"/><text x="3.9175%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6675%" y="597" width="0.0815%" height="15" fill="rgb(249,109,34)" fg:x="45" fg:w="1"/><text x="3.9175%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.6675%" y="581" width="0.0815%" height="15" fill="rgb(232,96,21)" fg:x="45" fg:w="1"/><text x="3.9175%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.6675%" y="565" width="0.0815%" height="15" fill="rgb(228,27,39)" fg:x="45" fg:w="1"/><text x="3.9175%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.6675%" y="549" width="0.0815%" height="15" fill="rgb(211,182,52)" fg:x="45" fg:w="1"/><text x="3.9175%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.6675%" y="533" width="0.0815%" height="15" fill="rgb(234,178,38)" fg:x="45" fg:w="1"/><text x="3.9175%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.6675%" y="517" width="0.0815%" height="15" fill="rgb(221,111,3)" fg:x="45" fg:w="1"/><text x="3.9175%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="3.6675%" y="789" width="0.1630%" height="15" fill="rgb(228,175,21)" fg:x="45" fg:w="2"/><text x="3.9175%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.6675%" y="773" width="0.1630%" height="15" fill="rgb(228,174,43)" fg:x="45" fg:w="2"/><text x="3.9175%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="3.6675%" y="757" width="0.1630%" height="15" fill="rgb(211,191,0)" fg:x="45" fg:w="2"/><text x="3.9175%" y="767.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="3.6675%" y="741" width="0.1630%" height="15" fill="rgb(253,117,3)" fg:x="45" fg:w="2"/><text x="3.9175%" y="751.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="3.7490%" y="725" width="0.0815%" height="15" fill="rgb(241,127,19)" fg:x="46" fg:w="1"/><text x="3.9990%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.7490%" y="709" width="0.0815%" height="15" fill="rgb(218,103,12)" fg:x="46" fg:w="1"/><text x="3.9990%" y="719.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="3.7490%" y="693" width="0.0815%" height="15" fill="rgb(236,214,43)" fg:x="46" fg:w="1"/><text x="3.9990%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.8305%" y="757" width="0.0815%" height="15" fill="rgb(244,144,19)" fg:x="47" fg:w="1"/><text x="4.0805%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.8305%" y="741" width="0.0815%" height="15" fill="rgb(246,188,10)" fg:x="47" fg:w="1"/><text x="4.0805%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.8305%" y="725" width="0.0815%" height="15" fill="rgb(212,193,33)" fg:x="47" fg:w="1"/><text x="4.0805%" y="735.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.8305%" y="709" width="0.0815%" height="15" fill="rgb(241,51,29)" fg:x="47" fg:w="1"/><text x="4.0805%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.9935%" y="709" width="0.0815%" height="15" fill="rgb(211,58,19)" fg:x="49" fg:w="1"/><text x="4.2435%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.9935%" y="693" width="0.0815%" height="15" fill="rgb(229,111,26)" fg:x="49" fg:w="1"/><text x="4.2435%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.0750%" y="693" width="0.1630%" height="15" fill="rgb(213,115,40)" fg:x="50" fg:w="2"/><text x="4.3250%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.1565%" y="677" width="0.0815%" height="15" fill="rgb(209,56,44)" fg:x="51" fg:w="1"/><text x="4.4065%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.2380%" y="677" width="0.0815%" height="15" fill="rgb(230,108,32)" fg:x="52" fg:w="1"/><text x="4.4880%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.2380%" y="661" width="0.0815%" height="15" fill="rgb(216,165,31)" fg:x="52" fg:w="1"/><text x="4.4880%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2380%" y="645" width="0.0815%" height="15" fill="rgb(218,122,21)" fg:x="52" fg:w="1"/><text x="4.4880%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.2380%" y="629" width="0.0815%" height="15" fill="rgb(223,224,47)" fg:x="52" fg:w="1"/><text x="4.4880%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.2380%" y="693" width="0.1630%" height="15" fill="rgb(238,102,44)" fg:x="52" fg:w="2"/><text x="4.4880%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3195%" y="677" width="0.0815%" height="15" fill="rgb(236,46,40)" fg:x="53" fg:w="1"/><text x="4.5695%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.49%)</title><rect x="3.9935%" y="725" width="0.4890%" height="15" fill="rgb(247,202,50)" fg:x="49" fg:w="6"/><text x="4.2435%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="4.0750%" y="709" width="0.4075%" height="15" fill="rgb(209,99,20)" fg:x="50" fg:w="5"/><text x="4.3250%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4010%" y="693" width="0.0815%" height="15" fill="rgb(252,27,34)" fg:x="54" fg:w="1"/><text x="4.6510%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4010%" y="677" width="0.0815%" height="15" fill="rgb(215,206,23)" fg:x="54" fg:w="1"/><text x="4.6510%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="4.4825%" y="645" width="0.0815%" height="15" fill="rgb(212,135,36)" fg:x="55" fg:w="1"/><text x="4.7325%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.4825%" y="629" width="0.0815%" height="15" fill="rgb(240,189,1)" fg:x="55" fg:w="1"/><text x="4.7325%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.4825%" y="613" width="0.0815%" height="15" fill="rgb(242,56,20)" fg:x="55" fg:w="1"/><text x="4.7325%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.4825%" y="725" width="0.1630%" height="15" fill="rgb(247,132,33)" fg:x="55" fg:w="2"/><text x="4.7325%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="4.4825%" y="709" width="0.1630%" height="15" fill="rgb(208,149,11)" fg:x="55" fg:w="2"/><text x="4.7325%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.4825%" y="693" width="0.1630%" height="15" fill="rgb(211,33,11)" fg:x="55" fg:w="2"/><text x="4.7325%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.4825%" y="677" width="0.1630%" height="15" fill="rgb(221,29,38)" fg:x="55" fg:w="2"/><text x="4.7325%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.4825%" y="661" width="0.1630%" height="15" fill="rgb(206,182,49)" fg:x="55" fg:w="2"/><text x="4.7325%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5640%" y="645" width="0.0815%" height="15" fill="rgb(216,140,1)" fg:x="56" fg:w="1"/><text x="4.8140%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5640%" y="629" width="0.0815%" height="15" fill="rgb(232,57,40)" fg:x="56" fg:w="1"/><text x="4.8140%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.6455%" y="677" width="0.0815%" height="15" fill="rgb(224,186,18)" fg:x="57" fg:w="1"/><text x="4.8955%" y="687.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7270%" y="677" width="0.0815%" height="15" fill="rgb(215,121,11)" fg:x="58" fg:w="1"/><text x="4.9770%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.7270%" y="661" width="0.0815%" height="15" fill="rgb(245,147,10)" fg:x="58" fg:w="1"/><text x="4.9770%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.7270%" y="645" width="0.0815%" height="15" fill="rgb(238,153,13)" fg:x="58" fg:w="1"/><text x="4.9770%" y="655.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.06%)</title><rect x="3.8305%" y="789" width="1.0595%" height="15" fill="rgb(233,108,0)" fg:x="47" fg:w="13"/><text x="4.0805%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.06%)</title><rect x="3.8305%" y="773" width="1.0595%" height="15" fill="rgb(212,157,17)" fg:x="47" fg:w="13"/><text x="4.0805%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.98%)</title><rect x="3.9120%" y="757" width="0.9780%" height="15" fill="rgb(225,213,38)" fg:x="48" fg:w="12"/><text x="4.1620%" y="767.50"></text></g><g><title>engine::session::Session::check_for_changes (12 samples, 0.98%)</title><rect x="3.9120%" y="741" width="0.9780%" height="15" fill="rgb(248,16,11)" fg:x="48" fg:w="12"/><text x="4.1620%" y="751.50"></text></g><g><title>kernel::compare::any_entity_changes (3 samples, 0.24%)</title><rect x="4.6455%" y="725" width="0.2445%" height="15" fill="rgb(241,33,4)" fg:x="57" fg:w="3"/><text x="4.8955%" y="735.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="4.6455%" y="709" width="0.2445%" height="15" fill="rgb(222,26,43)" fg:x="57" fg:w="3"/><text x="4.8955%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="4.6455%" y="693" width="0.2445%" height="15" fill="rgb(243,29,36)" fg:x="57" fg:w="3"/><text x="4.8955%" y="703.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="4.8085%" y="677" width="0.0815%" height="15" fill="rgb(241,9,27)" fg:x="59" fg:w="1"/><text x="5.0585%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.8085%" y="661" width="0.0815%" height="15" fill="rgb(205,117,26)" fg:x="59" fg:w="1"/><text x="5.0585%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="4.8085%" y="645" width="0.0815%" height="15" fill="rgb(209,80,39)" fg:x="59" fg:w="1"/><text x="5.0585%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8085%" y="629" width="0.0815%" height="15" fill="rgb(239,155,6)" fg:x="59" fg:w="1"/><text x="5.0585%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="4.8900%" y="789" width="0.0815%" height="15" fill="rgb(212,104,12)" fg:x="60" fg:w="1"/><text x="5.1400%" y="799.50"></text></g><g><title>kernel::model::EntityPtr::modified (1 samples, 0.08%)</title><rect x="4.8900%" y="773" width="0.0815%" height="15" fill="rgb(234,204,3)" fg:x="60" fg:w="1"/><text x="5.1400%" y="783.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9715%" y="677" width="0.0815%" height="15" fill="rgb(251,218,7)" fg:x="61" fg:w="1"/><text x="5.2215%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.9715%" y="773" width="0.1630%" height="15" fill="rgb(221,81,32)" fg:x="61" fg:w="2"/><text x="5.2215%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.9715%" y="757" width="0.1630%" height="15" fill="rgb(214,152,26)" fg:x="61" fg:w="2"/><text x="5.2215%" y="767.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="4.9715%" y="741" width="0.1630%" height="15" fill="rgb(223,22,3)" fg:x="61" fg:w="2"/><text x="5.2215%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.9715%" y="725" width="0.1630%" height="15" fill="rgb(207,174,7)" fg:x="61" fg:w="2"/><text x="5.2215%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.9715%" y="709" width="0.1630%" height="15" fill="rgb(224,19,52)" fg:x="61" fg:w="2"/><text x="5.2215%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="4.9715%" y="693" width="0.1630%" height="15" fill="rgb(228,24,14)" fg:x="61" fg:w="2"/><text x="5.2215%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.0530%" y="677" width="0.0815%" height="15" fill="rgb(230,153,43)" fg:x="62" fg:w="1"/><text x="5.3030%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::carrying::model::Location&gt;&gt; (1 samples, 0.08%)</title><rect x="5.1345%" y="757" width="0.0815%" height="15" fill="rgb(231,106,12)" fg:x="63" fg:w="1"/><text x="5.3845%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="5.1345%" y="741" width="0.0815%" height="15" fill="rgb(215,92,2)" fg:x="63" fg:w="1"/><text x="5.3845%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.1345%" y="725" width="0.0815%" height="15" fill="rgb(249,143,25)" fg:x="63" fg:w="1"/><text x="5.3845%" y="735.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2160%" y="725" width="0.0815%" height="15" fill="rgb(252,7,35)" fg:x="64" fg:w="1"/><text x="5.4660%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2160%" y="709" width="0.0815%" height="15" fill="rgb(216,69,40)" fg:x="64" fg:w="1"/><text x="5.4660%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.2160%" y="693" width="0.0815%" height="15" fill="rgb(240,36,33)" fg:x="64" fg:w="1"/><text x="5.4660%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="5.2160%" y="677" width="0.0815%" height="15" fill="rgb(231,128,14)" fg:x="64" fg:w="1"/><text x="5.4660%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2160%" y="661" width="0.0815%" height="15" fill="rgb(245,143,14)" fg:x="64" fg:w="1"/><text x="5.4660%" y="671.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.41%)</title><rect x="4.9715%" y="789" width="0.4075%" height="15" fill="rgb(222,130,28)" fg:x="61" fg:w="5"/><text x="5.2215%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="5.1345%" y="773" width="0.2445%" height="15" fill="rgb(212,10,48)" fg:x="63" fg:w="3"/><text x="5.3845%" y="783.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="5.2160%" y="757" width="0.1630%" height="15" fill="rgb(254,118,45)" fg:x="64" fg:w="2"/><text x="5.4660%" y="767.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="5.2160%" y="741" width="0.1630%" height="15" fill="rgb(228,6,45)" fg:x="64" fg:w="2"/><text x="5.4660%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2975%" y="725" width="0.0815%" height="15" fill="rgb(241,18,35)" fg:x="65" fg:w="1"/><text x="5.5475%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2975%" y="709" width="0.0815%" height="15" fill="rgb(227,214,53)" fg:x="65" fg:w="1"/><text x="5.5475%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.2975%" y="693" width="0.0815%" height="15" fill="rgb(224,107,51)" fg:x="65" fg:w="1"/><text x="5.5475%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.2975%" y="677" width="0.0815%" height="15" fill="rgb(248,60,28)" fg:x="65" fg:w="1"/><text x="5.5475%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2975%" y="661" width="0.0815%" height="15" fill="rgb(249,101,23)" fg:x="65" fg:w="1"/><text x="5.5475%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2975%" y="645" width="0.0815%" height="15" fill="rgb(228,51,19)" fg:x="65" fg:w="1"/><text x="5.5475%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2975%" y="629" width="0.0815%" height="15" fill="rgb(213,20,6)" fg:x="65" fg:w="1"/><text x="5.5475%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="5.3790%" y="789" width="0.0815%" height="15" fill="rgb(212,124,10)" fg:x="66" fg:w="1"/><text x="5.6290%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.3790%" y="773" width="0.0815%" height="15" fill="rgb(248,3,40)" fg:x="66" fg:w="1"/><text x="5.6290%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.3790%" y="757" width="0.0815%" height="15" fill="rgb(223,178,23)" fg:x="66" fg:w="1"/><text x="5.6290%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3790%" y="741" width="0.0815%" height="15" fill="rgb(240,132,45)" fg:x="66" fg:w="1"/><text x="5.6290%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3790%" y="725" width="0.0815%" height="15" fill="rgb(245,164,36)" fg:x="66" fg:w="1"/><text x="5.6290%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.3790%" y="709" width="0.0815%" height="15" fill="rgb(231,188,53)" fg:x="66" fg:w="1"/><text x="5.6290%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.3790%" y="693" width="0.0815%" height="15" fill="rgb(237,198,39)" fg:x="66" fg:w="1"/><text x="5.6290%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.3790%" y="677" width="0.0815%" height="15" fill="rgb(223,120,35)" fg:x="66" fg:w="1"/><text x="5.6290%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3790%" y="661" width="0.0815%" height="15" fill="rgb(253,107,49)" fg:x="66" fg:w="1"/><text x="5.6290%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3790%" y="645" width="0.0815%" height="15" fill="rgb(216,44,31)" fg:x="66" fg:w="1"/><text x="5.6290%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.3790%" y="629" width="0.0815%" height="15" fill="rgb(253,87,21)" fg:x="66" fg:w="1"/><text x="5.6290%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.3790%" y="613" width="0.0815%" height="15" fill="rgb(226,18,2)" fg:x="66" fg:w="1"/><text x="5.6290%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.3790%" y="597" width="0.0815%" height="15" fill="rgb(216,8,46)" fg:x="66" fg:w="1"/><text x="5.6290%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.3790%" y="581" width="0.0815%" height="15" fill="rgb(226,140,39)" fg:x="66" fg:w="1"/><text x="5.6290%" y="591.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="5.3790%" y="565" width="0.0815%" height="15" fill="rgb(221,194,54)" fg:x="66" fg:w="1"/><text x="5.6290%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4605%" y="725" width="0.0815%" height="15" fill="rgb(213,92,11)" fg:x="67" fg:w="1"/><text x="5.7105%" y="735.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="5.4605%" y="789" width="0.2445%" height="15" fill="rgb(229,162,46)" fg:x="67" fg:w="3"/><text x="5.7105%" y="799.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="5.4605%" y="773" width="0.2445%" height="15" fill="rgb(214,111,36)" fg:x="67" fg:w="3"/><text x="5.7105%" y="783.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (3 samples, 0.24%)</title><rect x="5.4605%" y="757" width="0.2445%" height="15" fill="rgb(207,6,21)" fg:x="67" fg:w="3"/><text x="5.7105%" y="767.50"></text></g><g><title>kernel::model::Entity::replace_scope (3 samples, 0.24%)</title><rect x="5.4605%" y="741" width="0.2445%" height="15" fill="rgb(213,127,38)" fg:x="67" fg:w="3"/><text x="5.7105%" y="751.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (2 samples, 0.16%)</title><rect x="5.5420%" y="725" width="0.1630%" height="15" fill="rgb(238,118,32)" fg:x="68" fg:w="2"/><text x="5.7920%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.5420%" y="709" width="0.1630%" height="15" fill="rgb(240,139,39)" fg:x="68" fg:w="2"/><text x="5.7920%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="5.5420%" y="693" width="0.1630%" height="15" fill="rgb(235,10,37)" fg:x="68" fg:w="2"/><text x="5.7920%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.5420%" y="677" width="0.1630%" height="15" fill="rgb(249,171,38)" fg:x="68" fg:w="2"/><text x="5.7920%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.5420%" y="661" width="0.1630%" height="15" fill="rgb(242,144,32)" fg:x="68" fg:w="2"/><text x="5.7920%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.6235%" y="645" width="0.0815%" height="15" fill="rgb(217,117,21)" fg:x="69" fg:w="1"/><text x="5.8735%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.6235%" y="629" width="0.0815%" height="15" fill="rgb(249,87,1)" fg:x="69" fg:w="1"/><text x="5.8735%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (27 samples, 2.20%)</title><rect x="3.6675%" y="805" width="2.2005%" height="15" fill="rgb(248,196,48)" fg:x="45" fg:w="27"/><text x="3.9175%" y="815.50">p..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="5.7050%" y="789" width="0.1630%" height="15" fill="rgb(251,206,33)" fg:x="70" fg:w="2"/><text x="5.9550%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.7865%" y="773" width="0.0815%" height="15" fill="rgb(232,141,28)" fg:x="71" fg:w="1"/><text x="6.0365%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.7865%" y="757" width="0.0815%" height="15" fill="rgb(209,167,14)" fg:x="71" fg:w="1"/><text x="6.0365%" y="767.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.7865%" y="741" width="0.0815%" height="15" fill="rgb(225,11,50)" fg:x="71" fg:w="1"/><text x="6.0365%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.7865%" y="725" width="0.0815%" height="15" fill="rgb(209,50,20)" fg:x="71" fg:w="1"/><text x="6.0365%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="5.7865%" y="709" width="0.0815%" height="15" fill="rgb(212,17,46)" fg:x="71" fg:w="1"/><text x="6.0365%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="5.7865%" y="693" width="0.0815%" height="15" fill="rgb(216,101,39)" fg:x="71" fg:w="1"/><text x="6.0365%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.8680%" y="773" width="0.0815%" height="15" fill="rgb(212,228,48)" fg:x="72" fg:w="1"/><text x="6.1180%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.8680%" y="757" width="0.0815%" height="15" fill="rgb(250,6,50)" fg:x="72" fg:w="1"/><text x="6.1180%" y="767.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.8680%" y="741" width="0.0815%" height="15" fill="rgb(250,160,48)" fg:x="72" fg:w="1"/><text x="6.1180%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8680%" y="725" width="0.0815%" height="15" fill="rgb(244,216,33)" fg:x="72" fg:w="1"/><text x="6.1180%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.8680%" y="709" width="0.0815%" height="15" fill="rgb(207,157,5)" fg:x="72" fg:w="1"/><text x="6.1180%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.8680%" y="693" width="0.0815%" height="15" fill="rgb(228,199,8)" fg:x="72" fg:w="1"/><text x="6.1180%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8680%" y="677" width="0.0815%" height="15" fill="rgb(227,80,20)" fg:x="72" fg:w="1"/><text x="6.1180%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (55 samples, 4.48%)</title><rect x="1.5485%" y="821" width="4.4825%" height="15" fill="rgb(222,9,33)" fg:x="19" fg:w="55"/><text x="1.7985%" y="831.50">&lt;test..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="5.8680%" y="805" width="0.1630%" height="15" fill="rgb(239,44,28)" fg:x="72" fg:w="2"/><text x="6.1180%" y="815.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="5.8680%" y="789" width="0.1630%" height="15" fill="rgb(249,187,43)" fg:x="72" fg:w="2"/><text x="6.1180%" y="799.50"></text></g><g><title>kernel::model::EntityPtr::set_name (1 samples, 0.08%)</title><rect x="5.9495%" y="773" width="0.0815%" height="15" fill="rgb(216,141,28)" fg:x="73" fg:w="1"/><text x="6.1995%" y="783.50"></text></g><g><title>kernel::model::EntityPtr::modified (1 samples, 0.08%)</title><rect x="5.9495%" y="757" width="0.0815%" height="15" fill="rgb(230,154,53)" fg:x="73" fg:w="1"/><text x="6.1995%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9495%" y="741" width="0.0815%" height="15" fill="rgb(227,82,4)" fg:x="73" fg:w="1"/><text x="6.1995%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9495%" y="725" width="0.0815%" height="15" fill="rgb(220,107,16)" fg:x="73" fg:w="1"/><text x="6.1995%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9495%" y="709" width="0.0815%" height="15" fill="rgb(207,187,2)" fg:x="73" fg:w="1"/><text x="6.1995%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9495%" y="693" width="0.0815%" height="15" fill="rgb(210,162,52)" fg:x="73" fg:w="1"/><text x="6.1995%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9495%" y="677" width="0.0815%" height="15" fill="rgb(217,216,49)" fg:x="73" fg:w="1"/><text x="6.1995%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="5.9495%" y="661" width="0.0815%" height="15" fill="rgb(218,146,49)" fg:x="73" fg:w="1"/><text x="6.1995%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.9495%" y="645" width="0.0815%" height="15" fill="rgb(216,55,40)" fg:x="73" fg:w="1"/><text x="6.1995%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="6.0310%" y="821" width="0.0815%" height="15" fill="rgb(208,196,21)" fg:x="74" fg:w="1"/><text x="6.2810%" y="831.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="6.1125%" y="741" width="0.1630%" height="15" fill="rgb(242,117,42)" fg:x="75" fg:w="2"/><text x="6.3625%" y="751.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.1125%" y="725" width="0.1630%" height="15" fill="rgb(210,11,23)" fg:x="75" fg:w="2"/><text x="6.3625%" y="735.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.1125%" y="709" width="0.1630%" height="15" fill="rgb(217,110,2)" fg:x="75" fg:w="2"/><text x="6.3625%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.1940%" y="693" width="0.0815%" height="15" fill="rgb(229,77,54)" fg:x="76" fg:w="1"/><text x="6.4440%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3570%" y="725" width="0.0815%" height="15" fill="rgb(218,53,16)" fg:x="78" fg:w="1"/><text x="6.6070%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3570%" y="709" width="0.0815%" height="15" fill="rgb(215,38,13)" fg:x="78" fg:w="1"/><text x="6.6070%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.4385%" y="709" width="0.0815%" height="15" fill="rgb(235,42,18)" fg:x="79" fg:w="1"/><text x="6.6885%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4385%" y="693" width="0.0815%" height="15" fill="rgb(219,66,54)" fg:x="79" fg:w="1"/><text x="6.6885%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.5200%" y="693" width="0.0815%" height="15" fill="rgb(222,205,4)" fg:x="80" fg:w="1"/><text x="6.7700%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5200%" y="677" width="0.0815%" height="15" fill="rgb(227,213,46)" fg:x="80" fg:w="1"/><text x="6.7700%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="6.1125%" y="757" width="0.5705%" height="15" fill="rgb(250,145,42)" fg:x="75" fg:w="7"/><text x="6.3625%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="6.2755%" y="741" width="0.4075%" height="15" fill="rgb(219,15,2)" fg:x="77" fg:w="5"/><text x="6.5255%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.4385%" y="725" width="0.2445%" height="15" fill="rgb(231,181,52)" fg:x="79" fg:w="3"/><text x="6.6885%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.5200%" y="709" width="0.1630%" height="15" fill="rgb(235,1,42)" fg:x="80" fg:w="2"/><text x="6.7700%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.6015%" y="693" width="0.0815%" height="15" fill="rgb(249,88,27)" fg:x="81" fg:w="1"/><text x="6.8515%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.6015%" y="677" width="0.0815%" height="15" fill="rgb(235,145,16)" fg:x="81" fg:w="1"/><text x="6.8515%" y="687.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="6.6015%" y="661" width="0.0815%" height="15" fill="rgb(237,114,19)" fg:x="81" fg:w="1"/><text x="6.8515%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.6830%" y="725" width="0.0815%" height="15" fill="rgb(238,51,50)" fg:x="82" fg:w="1"/><text x="6.9330%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.6830%" y="757" width="0.1630%" height="15" fill="rgb(205,194,25)" fg:x="82" fg:w="2"/><text x="6.9330%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="6.6830%" y="741" width="0.1630%" height="15" fill="rgb(215,203,17)" fg:x="82" fg:w="2"/><text x="6.9330%" y="751.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7645%" y="725" width="0.0815%" height="15" fill="rgb(233,112,49)" fg:x="83" fg:w="1"/><text x="7.0145%" y="735.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="6.8460%" y="709" width="0.1630%" height="15" fill="rgb(241,130,26)" fg:x="84" fg:w="2"/><text x="7.0960%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2535%" y="661" width="0.0815%" height="15" fill="rgb(252,223,19)" fg:x="89" fg:w="1"/><text x="7.5035%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="6.8460%" y="741" width="0.6520%" height="15" fill="rgb(211,95,25)" fg:x="84" fg:w="8"/><text x="7.0960%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.65%)</title><rect x="6.8460%" y="725" width="0.6520%" height="15" fill="rgb(251,182,27)" fg:x="84" fg:w="8"/><text x="7.0960%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="7.0090%" y="709" width="0.4890%" height="15" fill="rgb(238,24,4)" fg:x="86" fg:w="6"/><text x="7.2590%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="7.0905%" y="693" width="0.4075%" height="15" fill="rgb(224,220,25)" fg:x="87" fg:w="5"/><text x="7.3405%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="7.0905%" y="677" width="0.4075%" height="15" fill="rgb(239,133,26)" fg:x="87" fg:w="5"/><text x="7.3405%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="7.3350%" y="661" width="0.1630%" height="15" fill="rgb(211,94,48)" fg:x="90" fg:w="2"/><text x="7.5850%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.4165%" y="645" width="0.0815%" height="15" fill="rgb(239,87,6)" fg:x="91" fg:w="1"/><text x="7.6665%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4165%" y="629" width="0.0815%" height="15" fill="rgb(227,62,0)" fg:x="91" fg:w="1"/><text x="7.6665%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="7.5795%" y="709" width="0.2445%" height="15" fill="rgb(211,226,4)" fg:x="93" fg:w="3"/><text x="7.8295%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="7.5795%" y="693" width="0.2445%" height="15" fill="rgb(253,38,52)" fg:x="93" fg:w="3"/><text x="7.8295%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.7425%" y="677" width="0.0815%" height="15" fill="rgb(229,126,40)" fg:x="95" fg:w="1"/><text x="7.9925%" y="687.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8240%" y="709" width="0.0815%" height="15" fill="rgb(229,165,44)" fg:x="96" fg:w="1"/><text x="8.0740%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8240%" y="693" width="0.0815%" height="15" fill="rgb(247,95,47)" fg:x="96" fg:w="1"/><text x="8.0740%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="7.8240%" y="677" width="0.0815%" height="15" fill="rgb(216,140,30)" fg:x="96" fg:w="1"/><text x="8.0740%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="8.0685%" y="661" width="0.2445%" height="15" fill="rgb(246,214,8)" fg:x="99" fg:w="3"/><text x="8.3185%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="8.0685%" y="645" width="0.2445%" height="15" fill="rgb(227,224,15)" fg:x="99" fg:w="3"/><text x="8.3185%" y="655.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="8.0685%" y="629" width="0.2445%" height="15" fill="rgb(233,175,4)" fg:x="99" fg:w="3"/><text x="8.3185%" y="639.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (7 samples, 0.57%)</title><rect x="7.9055%" y="709" width="0.5705%" height="15" fill="rgb(221,66,45)" fg:x="97" fg:w="7"/><text x="8.1555%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="7.9055%" y="693" width="0.5705%" height="15" fill="rgb(221,178,18)" fg:x="97" fg:w="7"/><text x="8.1555%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="7.9870%" y="677" width="0.4890%" height="15" fill="rgb(213,81,29)" fg:x="98" fg:w="6"/><text x="8.2370%" y="687.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="8.3130%" y="661" width="0.1630%" height="15" fill="rgb(220,89,49)" fg:x="102" fg:w="2"/><text x="8.5630%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="8.3130%" y="645" width="0.1630%" height="15" fill="rgb(227,60,33)" fg:x="102" fg:w="2"/><text x="8.5630%" y="655.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="8.3130%" y="629" width="0.1630%" height="15" fill="rgb(205,113,12)" fg:x="102" fg:w="2"/><text x="8.5630%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3945%" y="613" width="0.0815%" height="15" fill="rgb(211,32,1)" fg:x="103" fg:w="1"/><text x="8.6445%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.3945%" y="597" width="0.0815%" height="15" fill="rgb(246,2,12)" fg:x="103" fg:w="1"/><text x="8.6445%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.3945%" y="581" width="0.0815%" height="15" fill="rgb(243,37,27)" fg:x="103" fg:w="1"/><text x="8.6445%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3945%" y="565" width="0.0815%" height="15" fill="rgb(248,211,31)" fg:x="103" fg:w="1"/><text x="8.6445%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.5575%" y="661" width="0.0815%" height="15" fill="rgb(242,146,47)" fg:x="105" fg:w="1"/><text x="8.8075%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5575%" y="645" width="0.0815%" height="15" fill="rgb(206,70,20)" fg:x="105" fg:w="1"/><text x="8.8075%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.5575%" y="629" width="0.0815%" height="15" fill="rgb(215,10,51)" fg:x="105" fg:w="1"/><text x="8.8075%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.5575%" y="613" width="0.0815%" height="15" fill="rgb(243,178,53)" fg:x="105" fg:w="1"/><text x="8.8075%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5575%" y="597" width="0.0815%" height="15" fill="rgb(233,221,20)" fg:x="105" fg:w="1"/><text x="8.8075%" y="607.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (15 samples, 1.22%)</title><rect x="7.4980%" y="741" width="1.2225%" height="15" fill="rgb(218,95,35)" fg:x="92" fg:w="15"/><text x="7.7480%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.22%)</title><rect x="7.4980%" y="725" width="1.2225%" height="15" fill="rgb(229,13,5)" fg:x="92" fg:w="15"/><text x="7.7480%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="8.4760%" y="709" width="0.2445%" height="15" fill="rgb(252,164,30)" fg:x="104" fg:w="3"/><text x="8.7260%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="8.5575%" y="693" width="0.1630%" height="15" fill="rgb(232,68,36)" fg:x="105" fg:w="2"/><text x="8.8075%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="8.5575%" y="677" width="0.1630%" height="15" fill="rgb(219,59,54)" fg:x="105" fg:w="2"/><text x="8.8075%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6390%" y="661" width="0.0815%" height="15" fill="rgb(250,92,33)" fg:x="106" fg:w="1"/><text x="8.8890%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6390%" y="645" width="0.0815%" height="15" fill="rgb(229,162,54)" fg:x="106" fg:w="1"/><text x="8.8890%" y="655.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="8.7205%" y="565" width="0.0815%" height="15" fill="rgb(244,114,52)" fg:x="107" fg:w="1"/><text x="8.9705%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="8.7205%" y="645" width="0.1630%" height="15" fill="rgb(212,211,43)" fg:x="107" fg:w="2"/><text x="8.9705%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="8.7205%" y="629" width="0.1630%" height="15" fill="rgb(226,147,8)" fg:x="107" fg:w="2"/><text x="8.9705%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="8.7205%" y="613" width="0.1630%" height="15" fill="rgb(226,23,13)" fg:x="107" fg:w="2"/><text x="8.9705%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="8.7205%" y="597" width="0.1630%" height="15" fill="rgb(240,63,4)" fg:x="107" fg:w="2"/><text x="8.9705%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="8.7205%" y="581" width="0.1630%" height="15" fill="rgb(221,1,32)" fg:x="107" fg:w="2"/><text x="8.9705%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8020%" y="565" width="0.0815%" height="15" fill="rgb(242,117,10)" fg:x="108" fg:w="1"/><text x="9.0520%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="8.7205%" y="741" width="0.3260%" height="15" fill="rgb(249,172,44)" fg:x="107" fg:w="4"/><text x="8.9705%" y="751.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="8.7205%" y="725" width="0.3260%" height="15" fill="rgb(244,46,45)" fg:x="107" fg:w="4"/><text x="8.9705%" y="735.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="8.7205%" y="709" width="0.3260%" height="15" fill="rgb(206,43,17)" fg:x="107" fg:w="4"/><text x="8.9705%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="8.7205%" y="693" width="0.3260%" height="15" fill="rgb(239,218,39)" fg:x="107" fg:w="4"/><text x="8.9705%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="8.7205%" y="677" width="0.3260%" height="15" fill="rgb(208,169,54)" fg:x="107" fg:w="4"/><text x="8.9705%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="8.7205%" y="661" width="0.3260%" height="15" fill="rgb(247,25,42)" fg:x="107" fg:w="4"/><text x="8.9705%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.8835%" y="645" width="0.1630%" height="15" fill="rgb(226,23,31)" fg:x="109" fg:w="2"/><text x="9.1335%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9650%" y="629" width="0.0815%" height="15" fill="rgb(247,16,28)" fg:x="110" fg:w="1"/><text x="9.2150%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9650%" y="613" width="0.0815%" height="15" fill="rgb(231,147,38)" fg:x="110" fg:w="1"/><text x="9.2150%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="9.2910%" y="677" width="0.0815%" height="15" fill="rgb(253,81,48)" fg:x="114" fg:w="1"/><text x="9.5410%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.2910%" y="661" width="0.0815%" height="15" fill="rgb(249,222,43)" fg:x="114" fg:w="1"/><text x="9.5410%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.33%)</title><rect x="9.1280%" y="709" width="0.3260%" height="15" fill="rgb(221,3,27)" fg:x="112" fg:w="4"/><text x="9.3780%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.2910%" y="693" width="0.1630%" height="15" fill="rgb(228,180,5)" fg:x="114" fg:w="2"/><text x="9.5410%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.3725%" y="677" width="0.0815%" height="15" fill="rgb(227,131,42)" fg:x="115" fg:w="1"/><text x="9.6225%" y="687.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (42 samples, 3.42%)</title><rect x="6.1125%" y="789" width="3.4230%" height="15" fill="rgb(212,3,39)" fg:x="75" fg:w="42"/><text x="6.3625%" y="799.50">eng..</text></g><g><title>engine::session::Session::check_for_changes (42 samples, 3.42%)</title><rect x="6.1125%" y="773" width="3.4230%" height="15" fill="rgb(226,45,5)" fg:x="75" fg:w="42"/><text x="6.3625%" y="783.50">eng..</text></g><g><title>kernel::compare::any_entity_changes (33 samples, 2.69%)</title><rect x="6.8460%" y="757" width="2.6895%" height="15" fill="rgb(215,167,45)" fg:x="84" fg:w="33"/><text x="7.0960%" y="767.50">ke..</text></g><g><title>treediff::diff::diff (6 samples, 0.49%)</title><rect x="9.0465%" y="741" width="0.4890%" height="15" fill="rgb(250,218,53)" fg:x="111" fg:w="6"/><text x="9.2965%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.49%)</title><rect x="9.0465%" y="725" width="0.4890%" height="15" fill="rgb(207,140,0)" fg:x="111" fg:w="6"/><text x="9.2965%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.4540%" y="709" width="0.0815%" height="15" fill="rgb(238,133,51)" fg:x="116" fg:w="1"/><text x="9.7040%" y="719.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="9.5355%" y="757" width="0.0815%" height="15" fill="rgb(218,203,53)" fg:x="117" fg:w="1"/><text x="9.7855%" y="767.50"></text></g><g><title>engine::session::Session::close (45 samples, 3.67%)</title><rect x="6.1125%" y="821" width="3.6675%" height="15" fill="rgb(226,184,25)" fg:x="75" fg:w="45"/><text x="6.3625%" y="831.50">engi..</text></g><g><title>engine::session::Session::save_entity_changes (45 samples, 3.67%)</title><rect x="6.1125%" y="805" width="3.6675%" height="15" fill="rgb(231,121,21)" fg:x="75" fg:w="45"/><text x="6.3625%" y="815.50">engi..</text></g><g><title>engine::session::Session::world (3 samples, 0.24%)</title><rect x="9.5355%" y="789" width="0.2445%" height="15" fill="rgb(251,14,34)" fg:x="117" fg:w="3"/><text x="9.7855%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="9.5355%" y="773" width="0.2445%" height="15" fill="rgb(249,193,11)" fg:x="117" fg:w="3"/><text x="9.7855%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="9.6170%" y="757" width="0.1630%" height="15" fill="rgb(220,172,37)" fg:x="118" fg:w="2"/><text x="9.8670%" y="767.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="9.6170%" y="741" width="0.1630%" height="15" fill="rgb(231,229,43)" fg:x="118" fg:w="2"/><text x="9.8670%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="9.6170%" y="725" width="0.1630%" height="15" fill="rgb(250,161,5)" fg:x="118" fg:w="2"/><text x="9.8670%" y="735.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="9.6170%" y="709" width="0.1630%" height="15" fill="rgb(218,225,18)" fg:x="118" fg:w="2"/><text x="9.8670%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="9.6170%" y="693" width="0.1630%" height="15" fill="rgb(245,45,42)" fg:x="118" fg:w="2"/><text x="9.8670%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="9.6170%" y="677" width="0.1630%" height="15" fill="rgb(211,115,1)" fg:x="118" fg:w="2"/><text x="9.8670%" y="687.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="9.6170%" y="661" width="0.1630%" height="15" fill="rgb(248,133,52)" fg:x="118" fg:w="2"/><text x="9.8670%" y="671.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="9.6170%" y="645" width="0.1630%" height="15" fill="rgb(238,100,21)" fg:x="118" fg:w="2"/><text x="9.8670%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="9.6170%" y="629" width="0.1630%" height="15" fill="rgb(247,144,11)" fg:x="118" fg:w="2"/><text x="9.8670%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="9.6170%" y="613" width="0.1630%" height="15" fill="rgb(206,164,16)" fg:x="118" fg:w="2"/><text x="9.8670%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.6985%" y="597" width="0.0815%" height="15" fill="rgb(222,34,3)" fg:x="119" fg:w="1"/><text x="9.9485%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.6985%" y="581" width="0.0815%" height="15" fill="rgb(248,82,4)" fg:x="119" fg:w="1"/><text x="9.9485%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.6985%" y="565" width="0.0815%" height="15" fill="rgb(228,81,46)" fg:x="119" fg:w="1"/><text x="9.9485%" y="575.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="9.6985%" y="549" width="0.0815%" height="15" fill="rgb(227,67,47)" fg:x="119" fg:w="1"/><text x="9.9485%" y="559.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="9.7800%" y="741" width="0.0815%" height="15" fill="rgb(215,93,53)" fg:x="120" fg:w="1"/><text x="10.0300%" y="751.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="9.7800%" y="725" width="0.0815%" height="15" fill="rgb(248,194,39)" fg:x="120" fg:w="1"/><text x="10.0300%" y="735.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="9.8615%" y="645" width="0.0815%" height="15" fill="rgb(215,5,19)" fg:x="121" fg:w="1"/><text x="10.1115%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.8615%" y="629" width="0.0815%" height="15" fill="rgb(226,215,51)" fg:x="121" fg:w="1"/><text x="10.1115%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.8615%" y="613" width="0.0815%" height="15" fill="rgb(225,56,26)" fg:x="121" fg:w="1"/><text x="10.1115%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.8615%" y="597" width="0.0815%" height="15" fill="rgb(222,75,29)" fg:x="121" fg:w="1"/><text x="10.1115%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.8615%" y="581" width="0.0815%" height="15" fill="rgb(236,139,6)" fg:x="121" fg:w="1"/><text x="10.1115%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::desc (1 samples, 0.08%)</title><rect x="9.9430%" y="645" width="0.0815%" height="15" fill="rgb(223,137,36)" fg:x="122" fg:w="1"/><text x="10.1930%" y="655.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="9.9430%" y="629" width="0.0815%" height="15" fill="rgb(226,99,2)" fg:x="122" fg:w="1"/><text x="10.1930%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="10.0244%" y="613" width="0.0815%" height="15" fill="rgb(206,133,23)" fg:x="123" fg:w="1"/><text x="10.2744%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="10.0244%" y="597" width="0.0815%" height="15" fill="rgb(243,173,15)" fg:x="123" fg:w="1"/><text x="10.2744%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="10.0244%" y="581" width="0.0815%" height="15" fill="rgb(228,69,28)" fg:x="123" fg:w="1"/><text x="10.2744%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="10.0244%" y="645" width="0.1630%" height="15" fill="rgb(212,51,22)" fg:x="123" fg:w="2"/><text x="10.2744%" y="655.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="10.0244%" y="629" width="0.1630%" height="15" fill="rgb(227,113,0)" fg:x="123" fg:w="2"/><text x="10.2744%" y="639.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="10.1059%" y="613" width="0.0815%" height="15" fill="rgb(252,84,27)" fg:x="124" fg:w="1"/><text x="10.3559%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="10.1874%" y="597" width="0.0815%" height="15" fill="rgb(223,145,39)" fg:x="125" fg:w="1"/><text x="10.4374%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.1874%" y="581" width="0.0815%" height="15" fill="rgb(239,219,30)" fg:x="125" fg:w="1"/><text x="10.4374%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.1874%" y="565" width="0.0815%" height="15" fill="rgb(224,196,39)" fg:x="125" fg:w="1"/><text x="10.4374%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="10.3504%" y="581" width="0.0815%" height="15" fill="rgb(205,35,43)" fg:x="127" fg:w="1"/><text x="10.6004%" y="591.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.33%)</title><rect x="10.5134%" y="501" width="0.3260%" height="15" fill="rgb(228,201,21)" fg:x="129" fg:w="4"/><text x="10.7634%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="10.6764%" y="485" width="0.1630%" height="15" fill="rgb(237,118,16)" fg:x="131" fg:w="2"/><text x="10.9264%" y="495.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="10.6764%" y="469" width="0.1630%" height="15" fill="rgb(241,17,19)" fg:x="131" fg:w="2"/><text x="10.9264%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="10.7579%" y="453" width="0.0815%" height="15" fill="rgb(214,10,25)" fg:x="132" fg:w="1"/><text x="11.0079%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8394%" y="469" width="0.0815%" height="15" fill="rgb(238,37,29)" fg:x="133" fg:w="1"/><text x="11.0894%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="10.4319%" y="565" width="0.5705%" height="15" fill="rgb(253,83,25)" fg:x="128" fg:w="7"/><text x="10.6819%" y="575.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="10.5134%" y="549" width="0.4890%" height="15" fill="rgb(234,192,12)" fg:x="129" fg:w="6"/><text x="10.7634%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.49%)</title><rect x="10.5134%" y="533" width="0.4890%" height="15" fill="rgb(241,216,45)" fg:x="129" fg:w="6"/><text x="10.7634%" y="543.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.49%)</title><rect x="10.5134%" y="517" width="0.4890%" height="15" fill="rgb(242,22,33)" fg:x="129" fg:w="6"/><text x="10.7634%" y="527.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="10.8394%" y="501" width="0.1630%" height="15" fill="rgb(231,105,49)" fg:x="133" fg:w="2"/><text x="11.0894%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="10.8394%" y="485" width="0.1630%" height="15" fill="rgb(218,204,15)" fg:x="133" fg:w="2"/><text x="11.0894%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9209%" y="469" width="0.0815%" height="15" fill="rgb(235,138,41)" fg:x="134" fg:w="1"/><text x="11.1709%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9209%" y="453" width="0.0815%" height="15" fill="rgb(246,0,9)" fg:x="134" fg:w="1"/><text x="11.1709%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="10.9209%" y="437" width="0.0815%" height="15" fill="rgb(210,74,4)" fg:x="134" fg:w="1"/><text x="11.1709%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.9209%" y="421" width="0.0815%" height="15" fill="rgb(250,60,41)" fg:x="134" fg:w="1"/><text x="11.1709%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.9209%" y="405" width="0.0815%" height="15" fill="rgb(220,115,12)" fg:x="134" fg:w="1"/><text x="11.1709%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="11.0024%" y="549" width="0.0815%" height="15" fill="rgb(237,100,13)" fg:x="135" fg:w="1"/><text x="11.2524%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="11.0024%" y="533" width="0.0815%" height="15" fill="rgb(213,55,26)" fg:x="135" fg:w="1"/><text x="11.2524%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0024%" y="517" width="0.0815%" height="15" fill="rgb(216,17,4)" fg:x="135" fg:w="1"/><text x="11.2524%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0839%" y="517" width="0.0815%" height="15" fill="rgb(220,153,47)" fg:x="136" fg:w="1"/><text x="11.3339%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="11.1654%" y="517" width="0.0815%" height="15" fill="rgb(215,131,9)" fg:x="137" fg:w="1"/><text x="11.4154%" y="527.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="11.2469%" y="517" width="0.0815%" height="15" fill="rgb(233,46,42)" fg:x="138" fg:w="1"/><text x="11.4969%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.4099%" y="485" width="0.1630%" height="15" fill="rgb(226,86,7)" fg:x="140" fg:w="2"/><text x="11.6599%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.30%)</title><rect x="11.4099%" y="501" width="1.3040%" height="15" fill="rgb(239,226,21)" fg:x="140" fg:w="16"/><text x="11.6599%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.14%)</title><rect x="11.5729%" y="485" width="1.1410%" height="15" fill="rgb(244,137,22)" fg:x="142" fg:w="14"/><text x="11.8229%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="12.7139%" y="501" width="0.1630%" height="15" fill="rgb(211,139,35)" fg:x="156" fg:w="2"/><text x="12.9639%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.65%)</title><rect x="12.8769%" y="485" width="0.6520%" height="15" fill="rgb(214,62,50)" fg:x="158" fg:w="8"/><text x="13.1269%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.73%)</title><rect x="12.8769%" y="501" width="0.7335%" height="15" fill="rgb(212,113,44)" fg:x="158" fg:w="9"/><text x="13.1269%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="13.5289%" y="485" width="0.0815%" height="15" fill="rgb(226,150,43)" fg:x="166" fg:w="1"/><text x="13.7789%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="13.5289%" y="469" width="0.0815%" height="15" fill="rgb(250,71,37)" fg:x="166" fg:w="1"/><text x="13.7789%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="13.5289%" y="453" width="0.0815%" height="15" fill="rgb(219,76,19)" fg:x="166" fg:w="1"/><text x="13.7789%" y="463.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="13.6104%" y="501" width="0.0815%" height="15" fill="rgb(250,39,11)" fg:x="167" fg:w="1"/><text x="13.8604%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="13.9364%" y="453" width="0.0815%" height="15" fill="rgb(230,64,31)" fg:x="171" fg:w="1"/><text x="14.1864%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="14.0179%" y="453" width="0.0815%" height="15" fill="rgb(208,222,23)" fg:x="172" fg:w="1"/><text x="14.2679%" y="463.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.5069%" y="437" width="0.0815%" height="15" fill="rgb(227,125,18)" fg:x="178" fg:w="1"/><text x="14.7569%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="14.5884%" y="437" width="0.1630%" height="15" fill="rgb(234,210,9)" fg:x="179" fg:w="2"/><text x="14.8384%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="14.5884%" y="421" width="0.1630%" height="15" fill="rgb(217,127,24)" fg:x="179" fg:w="2"/><text x="14.8384%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.5884%" y="405" width="0.1630%" height="15" fill="rgb(239,141,48)" fg:x="179" fg:w="2"/><text x="14.8384%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="14.5884%" y="389" width="0.1630%" height="15" fill="rgb(227,109,8)" fg:x="179" fg:w="2"/><text x="14.8384%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="14.7514%" y="437" width="0.1630%" height="15" fill="rgb(235,184,23)" fg:x="181" fg:w="2"/><text x="15.0014%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.8329%" y="421" width="0.0815%" height="15" fill="rgb(227,226,48)" fg:x="182" fg:w="1"/><text x="15.0829%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.8329%" y="405" width="0.0815%" height="15" fill="rgb(206,150,11)" fg:x="182" fg:w="1"/><text x="15.0829%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.8329%" y="389" width="0.0815%" height="15" fill="rgb(254,2,33)" fg:x="182" fg:w="1"/><text x="15.0829%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="15.0774%" y="405" width="0.2445%" height="15" fill="rgb(243,160,20)" fg:x="185" fg:w="3"/><text x="15.3274%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="15.0774%" y="389" width="0.2445%" height="15" fill="rgb(218,208,30)" fg:x="185" fg:w="3"/><text x="15.3274%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.1589%" y="373" width="0.1630%" height="15" fill="rgb(224,120,49)" fg:x="186" fg:w="2"/><text x="15.4089%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.49%)</title><rect x="14.9144%" y="437" width="0.4890%" height="15" fill="rgb(246,12,2)" fg:x="183" fg:w="6"/><text x="15.1644%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="15.0774%" y="421" width="0.3260%" height="15" fill="rgb(236,117,3)" fg:x="185" fg:w="4"/><text x="15.3274%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="15.3219%" y="405" width="0.0815%" height="15" fill="rgb(216,128,52)" fg:x="188" fg:w="1"/><text x="15.5719%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="15.4034%" y="437" width="0.0815%" height="15" fill="rgb(246,145,19)" fg:x="189" fg:w="1"/><text x="15.6534%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="15.4034%" y="421" width="0.0815%" height="15" fill="rgb(222,11,46)" fg:x="189" fg:w="1"/><text x="15.6534%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="15.4034%" y="405" width="0.0815%" height="15" fill="rgb(245,82,36)" fg:x="189" fg:w="1"/><text x="15.6534%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (81 samples, 6.60%)</title><rect x="15.4849%" y="437" width="6.6015%" height="15" fill="rgb(250,73,51)" fg:x="190" fg:w="81"/><text x="15.7349%" y="447.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (81 samples, 6.60%)</title><rect x="15.4849%" y="421" width="6.6015%" height="15" fill="rgb(221,189,23)" fg:x="190" fg:w="81"/><text x="15.7349%" y="431.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (81 samples, 6.60%)</title><rect x="15.4849%" y="405" width="6.6015%" height="15" fill="rgb(210,33,7)" fg:x="190" fg:w="81"/><text x="15.7349%" y="415.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (11 samples, 0.90%)</title><rect x="22.0864%" y="437" width="0.8965%" height="15" fill="rgb(210,107,22)" fg:x="271" fg:w="11"/><text x="22.3364%" y="447.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="22.6569%" y="421" width="0.3260%" height="15" fill="rgb(222,116,37)" fg:x="278" fg:w="4"/><text x="22.9069%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (113 samples, 9.21%)</title><rect x="13.8549%" y="485" width="9.2095%" height="15" fill="rgb(254,17,48)" fg:x="170" fg:w="113"/><text x="14.1049%" y="495.50">&lt;core::iter::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (113 samples, 9.21%)</title><rect x="13.8549%" y="469" width="9.2095%" height="15" fill="rgb(224,36,32)" fg:x="170" fg:w="113"/><text x="14.1049%" y="479.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (110 samples, 8.96%)</title><rect x="14.0994%" y="453" width="8.9650%" height="15" fill="rgb(232,90,46)" fg:x="173" fg:w="110"/><text x="14.3494%" y="463.50">regex_automat..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="22.9829%" y="437" width="0.0815%" height="15" fill="rgb(241,66,40)" fg:x="282" fg:w="1"/><text x="23.2329%" y="447.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="23.3089%" y="469" width="0.0815%" height="15" fill="rgb(249,184,29)" fg:x="286" fg:w="1"/><text x="23.5589%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.98%)</title><rect x="23.0644%" y="485" width="0.9780%" height="15" fill="rgb(231,181,1)" fg:x="283" fg:w="12"/><text x="23.3144%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.65%)</title><rect x="23.3904%" y="469" width="0.6520%" height="15" fill="rgb(224,94,2)" fg:x="287" fg:w="8"/><text x="23.6404%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.9609%" y="453" width="0.0815%" height="15" fill="rgb(229,170,15)" fg:x="294" fg:w="1"/><text x="24.2109%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="24.0424%" y="485" width="0.0815%" height="15" fill="rgb(240,127,35)" fg:x="295" fg:w="1"/><text x="24.2924%" y="495.50"></text></g><g><title>regex_automata::meta::strategy::new (158 samples, 12.88%)</title><rect x="11.3284%" y="517" width="12.8769%" height="15" fill="rgb(248,196,34)" fg:x="139" fg:w="158"/><text x="11.5784%" y="527.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (129 samples, 10.51%)</title><rect x="13.6919%" y="501" width="10.5134%" height="15" fill="rgb(236,137,7)" fg:x="168" fg:w="129"/><text x="13.9419%" y="511.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="24.1239%" y="485" width="0.0815%" height="15" fill="rgb(235,127,16)" fg:x="296" fg:w="1"/><text x="24.3739%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="24.1239%" y="469" width="0.0815%" height="15" fill="rgb(250,192,54)" fg:x="296" fg:w="1"/><text x="24.3739%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="24.1239%" y="453" width="0.0815%" height="15" fill="rgb(218,98,20)" fg:x="296" fg:w="1"/><text x="24.3739%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="24.2054%" y="469" width="0.0815%" height="15" fill="rgb(230,176,47)" fg:x="297" fg:w="1"/><text x="24.4554%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="24.2054%" y="453" width="0.0815%" height="15" fill="rgb(244,2,33)" fg:x="297" fg:w="1"/><text x="24.4554%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="24.2869%" y="453" width="0.0815%" height="15" fill="rgb(231,100,17)" fg:x="298" fg:w="1"/><text x="24.5369%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="24.2869%" y="469" width="0.1630%" height="15" fill="rgb(245,23,12)" fg:x="298" fg:w="2"/><text x="24.5369%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="24.3684%" y="453" width="0.0815%" height="15" fill="rgb(249,55,22)" fg:x="299" fg:w="1"/><text x="24.6184%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (10 samples, 0.81%)</title><rect x="24.2054%" y="485" width="0.8150%" height="15" fill="rgb(207,134,9)" fg:x="297" fg:w="10"/><text x="24.4554%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.57%)</title><rect x="24.4499%" y="469" width="0.5705%" height="15" fill="rgb(218,134,0)" fg:x="300" fg:w="7"/><text x="24.6999%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.49%)</title><rect x="24.5314%" y="453" width="0.4890%" height="15" fill="rgb(213,212,33)" fg:x="301" fg:w="6"/><text x="24.7814%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="24.5314%" y="437" width="0.4890%" height="15" fill="rgb(252,106,18)" fg:x="301" fg:w="6"/><text x="24.7814%" y="447.50"></text></g><g><title>__libc_malloc (6 samples, 0.49%)</title><rect x="24.5314%" y="421" width="0.4890%" height="15" fill="rgb(208,126,42)" fg:x="301" fg:w="6"/><text x="24.7814%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.90%)</title><rect x="24.2054%" y="517" width="0.8965%" height="15" fill="rgb(246,175,29)" fg:x="297" fg:w="11"/><text x="24.4554%" y="527.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.90%)</title><rect x="24.2054%" y="501" width="0.8965%" height="15" fill="rgb(215,13,50)" fg:x="297" fg:w="11"/><text x="24.4554%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="25.0204%" y="485" width="0.0815%" height="15" fill="rgb(216,172,15)" fg:x="307" fg:w="1"/><text x="25.2704%" y="495.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="25.1834%" y="469" width="0.0815%" height="15" fill="rgb(212,103,13)" fg:x="309" fg:w="1"/><text x="25.4334%" y="479.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="25.1834%" y="453" width="0.0815%" height="15" fill="rgb(231,171,36)" fg:x="309" fg:w="1"/><text x="25.4334%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="25.1019%" y="485" width="0.2445%" height="15" fill="rgb(250,123,20)" fg:x="308" fg:w="3"/><text x="25.3519%" y="495.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="25.2649%" y="469" width="0.0815%" height="15" fill="rgb(212,53,50)" fg:x="310" fg:w="1"/><text x="25.5149%" y="479.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="25.2649%" y="453" width="0.0815%" height="15" fill="rgb(243,54,12)" fg:x="310" fg:w="1"/><text x="25.5149%" y="463.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (177 samples, 14.43%)</title><rect x="11.0024%" y="565" width="14.4254%" height="15" fill="rgb(234,101,34)" fg:x="135" fg:w="177"/><text x="11.2524%" y="575.50">&lt;regex::regex::string:..</text></g><g><title>regex::builders::Builder::build_one_string (176 samples, 14.34%)</title><rect x="11.0839%" y="549" width="14.3439%" height="15" fill="rgb(254,67,22)" fg:x="136" fg:w="176"/><text x="11.3339%" y="559.50">regex::builders::Build..</text></g><g><title>regex_automata::meta::regex::Builder::build (176 samples, 14.34%)</title><rect x="11.0839%" y="533" width="14.3439%" height="15" fill="rgb(250,35,47)" fg:x="136" fg:w="176"/><text x="11.3339%" y="543.50">regex_automata::meta::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="25.1019%" y="517" width="0.3260%" height="15" fill="rgb(226,126,38)" fg:x="308" fg:w="4"/><text x="25.3519%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="25.1019%" y="501" width="0.3260%" height="15" fill="rgb(216,138,53)" fg:x="308" fg:w="4"/><text x="25.3519%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="25.3464%" y="485" width="0.0815%" height="15" fill="rgb(246,199,43)" fg:x="311" fg:w="1"/><text x="25.5964%" y="495.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="25.3464%" y="469" width="0.0815%" height="15" fill="rgb(232,125,11)" fg:x="311" fg:w="1"/><text x="25.5964%" y="479.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="25.4279%" y="565" width="0.0815%" height="15" fill="rgb(218,219,45)" fg:x="312" fg:w="1"/><text x="25.6779%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="25.5094%" y="565" width="0.1630%" height="15" fill="rgb(216,102,54)" fg:x="313" fg:w="2"/><text x="25.7594%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="25.5094%" y="549" width="0.1630%" height="15" fill="rgb(250,228,7)" fg:x="313" fg:w="2"/><text x="25.7594%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="25.5094%" y="533" width="0.1630%" height="15" fill="rgb(226,125,25)" fg:x="313" fg:w="2"/><text x="25.7594%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="25.5094%" y="517" width="0.1630%" height="15" fill="rgb(224,165,27)" fg:x="313" fg:w="2"/><text x="25.7594%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.5094%" y="501" width="0.1630%" height="15" fill="rgb(233,86,3)" fg:x="313" fg:w="2"/><text x="25.7594%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.73%)</title><rect x="25.9169%" y="501" width="0.7335%" height="15" fill="rgb(228,116,20)" fg:x="318" fg:w="9"/><text x="26.1669%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.41%)</title><rect x="26.2429%" y="485" width="0.4075%" height="15" fill="rgb(209,192,17)" fg:x="322" fg:w="5"/><text x="26.4929%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.81%)</title><rect x="25.9169%" y="517" width="0.8150%" height="15" fill="rgb(224,88,34)" fg:x="318" fg:w="10"/><text x="26.1669%" y="527.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="26.6504%" y="501" width="0.0815%" height="15" fill="rgb(233,38,6)" fg:x="327" fg:w="1"/><text x="26.9004%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.6504%" y="485" width="0.0815%" height="15" fill="rgb(212,59,30)" fg:x="327" fg:w="1"/><text x="26.9004%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.6504%" y="469" width="0.0815%" height="15" fill="rgb(213,80,3)" fg:x="327" fg:w="1"/><text x="26.9004%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.6504%" y="453" width="0.0815%" height="15" fill="rgb(251,178,7)" fg:x="327" fg:w="1"/><text x="26.9004%" y="463.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (201 samples, 16.38%)</title><rect x="10.4319%" y="581" width="16.3814%" height="15" fill="rgb(213,154,26)" fg:x="128" fg:w="201"/><text x="10.6819%" y="591.50">indefinite::helper::Helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.14%)</title><rect x="25.6724%" y="565" width="1.1410%" height="15" fill="rgb(238,165,49)" fg:x="315" fg:w="14"/><text x="25.9224%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.14%)</title><rect x="25.6724%" y="549" width="1.1410%" height="15" fill="rgb(248,91,46)" fg:x="315" fg:w="14"/><text x="25.9224%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.14%)</title><rect x="25.6724%" y="533" width="1.1410%" height="15" fill="rgb(244,21,52)" fg:x="315" fg:w="14"/><text x="25.9224%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="26.7319%" y="517" width="0.0815%" height="15" fill="rgb(247,122,20)" fg:x="328" fg:w="1"/><text x="26.9819%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="26.7319%" y="501" width="0.0815%" height="15" fill="rgb(218,27,9)" fg:x="328" fg:w="1"/><text x="26.9819%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.7319%" y="485" width="0.0815%" height="15" fill="rgb(246,7,6)" fg:x="328" fg:w="1"/><text x="26.9819%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.7319%" y="469" width="0.0815%" height="15" fill="rgb(227,135,54)" fg:x="328" fg:w="1"/><text x="26.9819%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.7319%" y="453" width="0.0815%" height="15" fill="rgb(247,14,11)" fg:x="328" fg:w="1"/><text x="26.9819%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.8949%" y="517" width="0.0815%" height="15" fill="rgb(206,149,34)" fg:x="330" fg:w="1"/><text x="27.1449%" y="527.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.8949%" y="501" width="0.0815%" height="15" fill="rgb(227,228,4)" fg:x="330" fg:w="1"/><text x="27.1449%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8949%" y="485" width="0.0815%" height="15" fill="rgb(238,218,28)" fg:x="330" fg:w="1"/><text x="27.1449%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="26.9764%" y="517" width="0.0815%" height="15" fill="rgb(252,86,40)" fg:x="331" fg:w="1"/><text x="27.2264%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="26.9764%" y="501" width="0.0815%" height="15" fill="rgb(251,225,11)" fg:x="331" fg:w="1"/><text x="27.2264%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="27.0579%" y="517" width="0.1630%" height="15" fill="rgb(206,46,49)" fg:x="332" fg:w="2"/><text x="27.3079%" y="527.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="27.0579%" y="501" width="0.1630%" height="15" fill="rgb(245,128,24)" fg:x="332" fg:w="2"/><text x="27.3079%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="27.0579%" y="485" width="0.1630%" height="15" fill="rgb(219,177,34)" fg:x="332" fg:w="2"/><text x="27.3079%" y="495.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="27.0579%" y="469" width="0.1630%" height="15" fill="rgb(218,60,48)" fg:x="332" fg:w="2"/><text x="27.3079%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="27.1394%" y="453" width="0.0815%" height="15" fill="rgb(221,11,5)" fg:x="333" fg:w="1"/><text x="27.3894%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.3839%" y="501" width="0.0815%" height="15" fill="rgb(220,148,13)" fg:x="336" fg:w="1"/><text x="27.6339%" y="511.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="27.6284%" y="485" width="0.2445%" height="15" fill="rgb(210,16,3)" fg:x="339" fg:w="3"/><text x="27.8784%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (20 samples, 1.63%)</title><rect x="27.4654%" y="501" width="1.6300%" height="15" fill="rgb(236,80,2)" fg:x="337" fg:w="20"/><text x="27.7154%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.22%)</title><rect x="27.8729%" y="485" width="1.2225%" height="15" fill="rgb(239,129,19)" fg:x="342" fg:w="15"/><text x="28.1229%" y="495.50"></text></g><g><title>__libc_free (7 samples, 0.57%)</title><rect x="28.5249%" y="469" width="0.5705%" height="15" fill="rgb(220,106,35)" fg:x="350" fg:w="7"/><text x="28.7749%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="29.0954%" y="501" width="0.0815%" height="15" fill="rgb(252,139,45)" fg:x="357" fg:w="1"/><text x="29.3454%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="29.2584%" y="485" width="0.0815%" height="15" fill="rgb(229,8,36)" fg:x="359" fg:w="1"/><text x="29.5084%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="29.2584%" y="469" width="0.0815%" height="15" fill="rgb(230,126,33)" fg:x="359" fg:w="1"/><text x="29.5084%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.2584%" y="453" width="0.0815%" height="15" fill="rgb(239,140,21)" fg:x="359" fg:w="1"/><text x="29.5084%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="29.3399%" y="485" width="0.3260%" height="15" fill="rgb(254,104,9)" fg:x="360" fg:w="4"/><text x="29.5899%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.65%)</title><rect x="29.1769%" y="501" width="0.6520%" height="15" fill="rgb(239,52,14)" fg:x="358" fg:w="8"/><text x="29.4269%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="29.6659%" y="485" width="0.1630%" height="15" fill="rgb(208,227,44)" fg:x="364" fg:w="2"/><text x="29.9159%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="29.6659%" y="469" width="0.1630%" height="15" fill="rgb(246,18,19)" fg:x="364" fg:w="2"/><text x="29.9159%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="29.7474%" y="453" width="0.0815%" height="15" fill="rgb(235,228,25)" fg:x="365" fg:w="1"/><text x="29.9974%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.7474%" y="437" width="0.0815%" height="15" fill="rgb(240,156,20)" fg:x="365" fg:w="1"/><text x="29.9974%" y="447.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.41%)</title><rect x="30.2363%" y="469" width="0.4075%" height="15" fill="rgb(224,8,20)" fg:x="371" fg:w="5"/><text x="30.4863%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.33%)</title><rect x="30.3178%" y="453" width="0.3260%" height="15" fill="rgb(214,12,52)" fg:x="372" fg:w="4"/><text x="30.5678%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="30.3178%" y="437" width="0.3260%" height="15" fill="rgb(211,220,47)" fg:x="372" fg:w="4"/><text x="30.5678%" y="447.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="30.3178%" y="421" width="0.3260%" height="15" fill="rgb(250,173,5)" fg:x="372" fg:w="4"/><text x="30.5678%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (17 samples, 1.39%)</title><rect x="30.6438%" y="469" width="1.3855%" height="15" fill="rgb(250,125,52)" fg:x="376" fg:w="17"/><text x="30.8938%" y="479.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (9 samples, 0.73%)</title><rect x="31.2958%" y="453" width="0.7335%" height="15" fill="rgb(209,133,18)" fg:x="384" fg:w="9"/><text x="31.5458%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.65%)</title><rect x="31.3773%" y="437" width="0.6520%" height="15" fill="rgb(216,173,22)" fg:x="385" fg:w="8"/><text x="31.6273%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.57%)</title><rect x="31.4588%" y="421" width="0.5705%" height="15" fill="rgb(205,3,22)" fg:x="386" fg:w="7"/><text x="31.7088%" y="431.50"></text></g><g><title>realloc (7 samples, 0.57%)</title><rect x="31.4588%" y="405" width="0.5705%" height="15" fill="rgb(248,22,20)" fg:x="386" fg:w="7"/><text x="31.7088%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.49%)</title><rect x="32.0293%" y="469" width="0.4890%" height="15" fill="rgb(233,6,29)" fg:x="393" fg:w="6"/><text x="32.2793%" y="479.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.49%)</title><rect x="32.0293%" y="453" width="0.4890%" height="15" fill="rgb(240,22,54)" fg:x="393" fg:w="6"/><text x="32.2793%" y="463.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.49%)</title><rect x="32.0293%" y="437" width="0.4890%" height="15" fill="rgb(231,133,32)" fg:x="393" fg:w="6"/><text x="32.2793%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (34 samples, 2.77%)</title><rect x="29.8289%" y="501" width="2.7710%" height="15" fill="rgb(248,193,4)" fg:x="366" fg:w="34"/><text x="30.0789%" y="511.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (34 samples, 2.77%)</title><rect x="29.8289%" y="485" width="2.7710%" height="15" fill="rgb(211,178,46)" fg:x="366" fg:w="34"/><text x="30.0789%" y="495.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="32.5183%" y="469" width="0.0815%" height="15" fill="rgb(224,5,42)" fg:x="399" fg:w="1"/><text x="32.7683%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="32.5998%" y="405" width="0.0815%" height="15" fill="rgb(239,176,25)" fg:x="400" fg:w="1"/><text x="32.8498%" y="415.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="33.9038%" y="389" width="0.5705%" height="15" fill="rgb(245,187,50)" fg:x="416" fg:w="7"/><text x="34.1538%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.4743%" y="389" width="0.1630%" height="15" fill="rgb(248,24,15)" fg:x="423" fg:w="2"/><text x="34.7243%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.65%)</title><rect x="34.6373%" y="389" width="0.6520%" height="15" fill="rgb(205,166,13)" fg:x="425" fg:w="8"/><text x="34.8873%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="34.8818%" y="373" width="0.4075%" height="15" fill="rgb(208,114,23)" fg:x="428" fg:w="5"/><text x="35.1318%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="34.9633%" y="357" width="0.3260%" height="15" fill="rgb(239,127,18)" fg:x="429" fg:w="4"/><text x="35.2133%" y="367.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="34.9633%" y="341" width="0.3260%" height="15" fill="rgb(219,154,28)" fg:x="429" fg:w="4"/><text x="35.2133%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="35.2893%" y="389" width="0.1630%" height="15" fill="rgb(225,157,23)" fg:x="433" fg:w="2"/><text x="35.5393%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.9413%" y="325" width="0.0815%" height="15" fill="rgb(219,8,6)" fg:x="441" fg:w="1"/><text x="36.1913%" y="335.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="36.0228%" y="325" width="0.0815%" height="15" fill="rgb(212,47,6)" fg:x="442" fg:w="1"/><text x="36.2728%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="35.8598%" y="357" width="0.4075%" height="15" fill="rgb(224,190,4)" fg:x="440" fg:w="5"/><text x="36.1098%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="35.8598%" y="341" width="0.4075%" height="15" fill="rgb(239,183,29)" fg:x="440" fg:w="5"/><text x="36.1098%" y="351.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.1043%" y="325" width="0.1630%" height="15" fill="rgb(213,57,7)" fg:x="443" fg:w="2"/><text x="36.3543%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.6748%" y="341" width="0.0815%" height="15" fill="rgb(216,148,1)" fg:x="450" fg:w="1"/><text x="36.9248%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (18 samples, 1.47%)</title><rect x="35.4523%" y="389" width="1.4670%" height="15" fill="rgb(236,182,29)" fg:x="435" fg:w="18"/><text x="35.7023%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (17 samples, 1.39%)</title><rect x="35.5338%" y="373" width="1.3855%" height="15" fill="rgb(244,120,48)" fg:x="436" fg:w="17"/><text x="35.7838%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.65%)</title><rect x="36.2673%" y="357" width="0.6520%" height="15" fill="rgb(206,71,34)" fg:x="445" fg:w="8"/><text x="36.5173%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="36.7563%" y="341" width="0.1630%" height="15" fill="rgb(242,32,6)" fg:x="451" fg:w="2"/><text x="37.0063%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="36.7563%" y="325" width="0.1630%" height="15" fill="rgb(241,35,3)" fg:x="451" fg:w="2"/><text x="37.0063%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.7563%" y="309" width="0.1630%" height="15" fill="rgb(222,62,19)" fg:x="451" fg:w="2"/><text x="37.0063%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.7563%" y="293" width="0.1630%" height="15" fill="rgb(223,110,41)" fg:x="451" fg:w="2"/><text x="37.0063%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="36.9193%" y="373" width="0.0815%" height="15" fill="rgb(208,224,4)" fg:x="453" fg:w="1"/><text x="37.1693%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (3 samples, 0.24%)</title><rect x="36.9193%" y="389" width="0.2445%" height="15" fill="rgb(241,137,19)" fg:x="453" fg:w="3"/><text x="37.1693%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="37.0008%" y="373" width="0.1630%" height="15" fill="rgb(244,24,17)" fg:x="454" fg:w="2"/><text x="37.2508%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="37.0823%" y="357" width="0.0815%" height="15" fill="rgb(245,178,49)" fg:x="455" fg:w="1"/><text x="37.3323%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (77 samples, 6.28%)</title><rect x="37.1638%" y="389" width="6.2755%" height="15" fill="rgb(219,160,38)" fg:x="456" fg:w="77"/><text x="37.4138%" y="399.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (77 samples, 6.28%)</title><rect x="37.1638%" y="373" width="6.2755%" height="15" fill="rgb(228,137,14)" fg:x="456" fg:w="77"/><text x="37.4138%" y="383.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (77 samples, 6.28%)</title><rect x="37.1638%" y="357" width="6.2755%" height="15" fill="rgb(237,134,11)" fg:x="456" fg:w="77"/><text x="37.4138%" y="367.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.49%)</title><rect x="43.4393%" y="389" width="0.4890%" height="15" fill="rgb(211,126,44)" fg:x="533" fg:w="6"/><text x="43.6893%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.8468%" y="373" width="0.0815%" height="15" fill="rgb(226,171,33)" fg:x="538" fg:w="1"/><text x="44.0968%" y="383.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="43.9283%" y="389" width="0.1630%" height="15" fill="rgb(253,99,13)" fg:x="539" fg:w="2"/><text x="44.1783%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 12.06%)</title><rect x="32.5998%" y="485" width="12.0619%" height="15" fill="rgb(244,48,7)" fg:x="400" fg:w="148"/><text x="32.8498%" y="495.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (148 samples, 12.06%)</title><rect x="32.5998%" y="469" width="12.0619%" height="15" fill="rgb(244,217,54)" fg:x="400" fg:w="148"/><text x="32.8498%" y="479.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (148 samples, 12.06%)</title><rect x="32.5998%" y="453" width="12.0619%" height="15" fill="rgb(224,15,18)" fg:x="400" fg:w="148"/><text x="32.8498%" y="463.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (148 samples, 12.06%)</title><rect x="32.5998%" y="437" width="12.0619%" height="15" fill="rgb(244,99,12)" fg:x="400" fg:w="148"/><text x="32.8498%" y="447.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (148 samples, 12.06%)</title><rect x="32.5998%" y="421" width="12.0619%" height="15" fill="rgb(233,226,8)" fg:x="400" fg:w="148"/><text x="32.8498%" y="431.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (147 samples, 11.98%)</title><rect x="32.6813%" y="405" width="11.9804%" height="15" fill="rgb(229,211,3)" fg:x="401" fg:w="147"/><text x="32.9313%" y="415.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.57%)</title><rect x="44.0913%" y="389" width="0.5705%" height="15" fill="rgb(216,140,21)" fg:x="541" fg:w="7"/><text x="44.3413%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="44.3358%" y="373" width="0.3260%" height="15" fill="rgb(234,122,30)" fg:x="544" fg:w="4"/><text x="44.5858%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="44.4988%" y="357" width="0.1630%" height="15" fill="rgb(236,25,46)" fg:x="546" fg:w="2"/><text x="44.7488%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.5803%" y="341" width="0.0815%" height="15" fill="rgb(217,52,54)" fg:x="547" fg:w="1"/><text x="44.8303%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.9063%" y="469" width="0.0815%" height="15" fill="rgb(222,29,26)" fg:x="551" fg:w="1"/><text x="45.1563%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.9878%" y="469" width="0.0815%" height="15" fill="rgb(216,177,29)" fg:x="552" fg:w="1"/><text x="45.2378%" y="479.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="45.0693%" y="469" width="0.0815%" height="15" fill="rgb(247,136,51)" fg:x="553" fg:w="1"/><text x="45.3193%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.81%)</title><rect x="45.1508%" y="469" width="0.8150%" height="15" fill="rgb(231,47,47)" fg:x="554" fg:w="10"/><text x="45.4008%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="45.6398%" y="453" width="0.3260%" height="15" fill="rgb(211,192,36)" fg:x="560" fg:w="4"/><text x="45.8898%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="45.7213%" y="437" width="0.2445%" height="15" fill="rgb(229,156,32)" fg:x="561" fg:w="3"/><text x="45.9713%" y="447.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="45.7213%" y="421" width="0.2445%" height="15" fill="rgb(248,213,20)" fg:x="561" fg:w="3"/><text x="45.9713%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (13 samples, 1.06%)</title><rect x="45.9658%" y="469" width="1.0595%" height="15" fill="rgb(217,64,7)" fg:x="564" fg:w="13"/><text x="46.2158%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.9438%" y="453" width="0.0815%" height="15" fill="rgb(232,142,8)" fg:x="576" fg:w="1"/><text x="47.1938%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.9438%" y="437" width="0.0815%" height="15" fill="rgb(224,92,44)" fg:x="576" fg:w="1"/><text x="47.1938%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.9438%" y="421" width="0.0815%" height="15" fill="rgb(214,169,17)" fg:x="576" fg:w="1"/><text x="47.1938%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="47.0253%" y="469" width="0.0815%" height="15" fill="rgb(210,59,37)" fg:x="577" fg:w="1"/><text x="47.2753%" y="479.50"></text></g><g><title>regex_automata::meta::strategy::new (245 samples, 19.97%)</title><rect x="27.2209%" y="517" width="19.9674%" height="15" fill="rgb(214,116,48)" fg:x="334" fg:w="245"/><text x="27.4709%" y="527.50">regex_automata::meta::strategy:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (179 samples, 14.59%)</title><rect x="32.5998%" y="501" width="14.5884%" height="15" fill="rgb(244,191,6)" fg:x="400" fg:w="179"/><text x="32.8498%" y="511.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (31 samples, 2.53%)</title><rect x="44.6618%" y="485" width="2.5265%" height="15" fill="rgb(241,50,52)" fg:x="548" fg:w="31"/><text x="44.9118%" y="495.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="47.1068%" y="469" width="0.0815%" height="15" fill="rgb(236,75,39)" fg:x="578" fg:w="1"/><text x="47.3568%" y="479.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="47.2698%" y="469" width="0.0815%" height="15" fill="rgb(236,99,0)" fg:x="580" fg:w="1"/><text x="47.5198%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.2698%" y="453" width="0.0815%" height="15" fill="rgb(207,202,15)" fg:x="580" fg:w="1"/><text x="47.5198%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.2698%" y="437" width="0.0815%" height="15" fill="rgb(233,207,14)" fg:x="580" fg:w="1"/><text x="47.5198%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.2698%" y="421" width="0.0815%" height="15" fill="rgb(226,27,51)" fg:x="580" fg:w="1"/><text x="47.5198%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="47.3513%" y="469" width="0.0815%" height="15" fill="rgb(206,104,42)" fg:x="581" fg:w="1"/><text x="47.6013%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="47.4328%" y="469" width="0.0815%" height="15" fill="rgb(212,225,4)" fg:x="582" fg:w="1"/><text x="47.6828%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="47.1883%" y="485" width="0.4890%" height="15" fill="rgb(233,96,42)" fg:x="579" fg:w="6"/><text x="47.4383%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="47.5143%" y="469" width="0.1630%" height="15" fill="rgb(229,21,32)" fg:x="583" fg:w="2"/><text x="47.7643%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="47.5143%" y="453" width="0.1630%" height="15" fill="rgb(226,216,24)" fg:x="583" fg:w="2"/><text x="47.7643%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="47.5143%" y="437" width="0.1630%" height="15" fill="rgb(221,163,17)" fg:x="583" fg:w="2"/><text x="47.7643%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="47.5143%" y="421" width="0.1630%" height="15" fill="rgb(216,216,42)" fg:x="583" fg:w="2"/><text x="47.7643%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="47.6773%" y="485" width="0.0815%" height="15" fill="rgb(240,118,7)" fg:x="585" fg:w="1"/><text x="47.9273%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.6773%" y="469" width="0.0815%" height="15" fill="rgb(221,67,37)" fg:x="585" fg:w="1"/><text x="47.9273%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="47.7588%" y="485" width="0.0815%" height="15" fill="rgb(241,32,44)" fg:x="586" fg:w="1"/><text x="48.0088%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="47.7588%" y="469" width="0.0815%" height="15" fill="rgb(235,204,43)" fg:x="586" fg:w="1"/><text x="48.0088%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="47.7588%" y="453" width="0.0815%" height="15" fill="rgb(213,116,10)" fg:x="586" fg:w="1"/><text x="48.0088%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.90%)</title><rect x="47.1883%" y="517" width="0.8965%" height="15" fill="rgb(239,15,48)" fg:x="579" fg:w="11"/><text x="47.4383%" y="527.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.90%)</title><rect x="47.1883%" y="501" width="0.8965%" height="15" fill="rgb(207,123,36)" fg:x="579" fg:w="11"/><text x="47.4383%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="47.8403%" y="485" width="0.2445%" height="15" fill="rgb(209,103,30)" fg:x="587" fg:w="3"/><text x="48.0903%" y="495.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="48.0033%" y="469" width="0.0815%" height="15" fill="rgb(238,100,19)" fg:x="589" fg:w="1"/><text x="48.2533%" y="479.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.49%)</title><rect x="48.2478%" y="469" width="0.4890%" height="15" fill="rgb(244,30,14)" fg:x="592" fg:w="6"/><text x="48.4978%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.57%)</title><rect x="48.2478%" y="485" width="0.5705%" height="15" fill="rgb(249,174,6)" fg:x="592" fg:w="7"/><text x="48.4978%" y="495.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="48.7368%" y="469" width="0.0815%" height="15" fill="rgb(235,213,41)" fg:x="598" fg:w="1"/><text x="48.9868%" y="479.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="48.7368%" y="453" width="0.0815%" height="15" fill="rgb(213,118,6)" fg:x="598" fg:w="1"/><text x="48.9868%" y="463.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (274 samples, 22.33%)</title><rect x="26.8134%" y="565" width="22.3309%" height="15" fill="rgb(235,44,51)" fg:x="329" fg:w="274"/><text x="27.0634%" y="575.50">&lt;regex::regex::string::Regex as cor..</text></g><g><title>regex::builders::Builder::build_one_string (274 samples, 22.33%)</title><rect x="26.8134%" y="549" width="22.3309%" height="15" fill="rgb(217,9,53)" fg:x="329" fg:w="274"/><text x="27.0634%" y="559.50">regex::builders::Builder::build_one..</text></g><g><title>regex_automata::meta::regex::Builder::build (274 samples, 22.33%)</title><rect x="26.8134%" y="533" width="22.3309%" height="15" fill="rgb(237,172,34)" fg:x="329" fg:w="274"/><text x="27.0634%" y="543.50">regex_automata::meta::regex::Builde..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (13 samples, 1.06%)</title><rect x="48.0848%" y="517" width="1.0595%" height="15" fill="rgb(206,206,11)" fg:x="590" fg:w="13"/><text x="48.3348%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::visit (13 samples, 1.06%)</title><rect x="48.0848%" y="501" width="1.0595%" height="15" fill="rgb(214,149,29)" fg:x="590" fg:w="13"/><text x="48.3348%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.33%)</title><rect x="48.8183%" y="485" width="0.3260%" height="15" fill="rgb(208,123,3)" fg:x="599" fg:w="4"/><text x="49.0683%" y="495.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="49.0628%" y="469" width="0.0815%" height="15" fill="rgb(229,126,4)" fg:x="602" fg:w="1"/><text x="49.3128%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.1443%" y="549" width="0.0815%" height="15" fill="rgb(222,92,36)" fg:x="603" fg:w="1"/><text x="49.3943%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.2258%" y="549" width="0.0815%" height="15" fill="rgb(216,39,41)" fg:x="604" fg:w="1"/><text x="49.4758%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.3073%" y="533" width="0.0815%" height="15" fill="rgb(253,127,28)" fg:x="605" fg:w="1"/><text x="49.5573%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.3073%" y="517" width="0.0815%" height="15" fill="rgb(249,152,51)" fg:x="605" fg:w="1"/><text x="49.5573%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.3073%" y="501" width="0.0815%" height="15" fill="rgb(209,123,42)" fg:x="605" fg:w="1"/><text x="49.5573%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.3888%" y="517" width="0.0815%" height="15" fill="rgb(241,118,22)" fg:x="606" fg:w="1"/><text x="49.6388%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.4703%" y="517" width="0.0815%" height="15" fill="rgb(208,25,7)" fg:x="607" fg:w="1"/><text x="49.7203%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.4703%" y="501" width="0.0815%" height="15" fill="rgb(243,144,39)" fg:x="607" fg:w="1"/><text x="49.7203%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (8 samples, 0.65%)</title><rect x="49.1443%" y="565" width="0.6520%" height="15" fill="rgb(250,50,5)" fg:x="603" fg:w="8"/><text x="49.3943%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.49%)</title><rect x="49.3073%" y="549" width="0.4890%" height="15" fill="rgb(207,67,11)" fg:x="605" fg:w="6"/><text x="49.5573%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.41%)</title><rect x="49.3888%" y="533" width="0.4075%" height="15" fill="rgb(245,204,40)" fg:x="606" fg:w="5"/><text x="49.6388%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="49.5518%" y="517" width="0.2445%" height="15" fill="rgb(238,228,24)" fg:x="608" fg:w="3"/><text x="49.8018%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="49.6333%" y="501" width="0.1630%" height="15" fill="rgb(217,116,22)" fg:x="609" fg:w="2"/><text x="49.8833%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="49.7963%" y="517" width="0.0815%" height="15" fill="rgb(234,98,12)" fg:x="611" fg:w="1"/><text x="50.0463%" y="527.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="49.7963%" y="501" width="0.0815%" height="15" fill="rgb(242,170,50)" fg:x="611" fg:w="1"/><text x="50.0463%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="49.7963%" y="549" width="0.1630%" height="15" fill="rgb(235,7,5)" fg:x="611" fg:w="2"/><text x="50.0463%" y="559.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="49.7963%" y="533" width="0.1630%" height="15" fill="rgb(241,114,28)" fg:x="611" fg:w="2"/><text x="50.0463%" y="543.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="49.8778%" y="517" width="0.0815%" height="15" fill="rgb(246,112,42)" fg:x="612" fg:w="1"/><text x="50.1278%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="49.8778%" y="501" width="0.0815%" height="15" fill="rgb(248,228,14)" fg:x="612" fg:w="1"/><text x="50.1278%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="49.8778%" y="485" width="0.0815%" height="15" fill="rgb(208,133,18)" fg:x="612" fg:w="1"/><text x="50.1278%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="50.0407%" y="485" width="0.0815%" height="15" fill="rgb(207,35,49)" fg:x="614" fg:w="1"/><text x="50.2907%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.41%)</title><rect x="50.5297%" y="469" width="0.4075%" height="15" fill="rgb(205,68,36)" fg:x="620" fg:w="5"/><text x="50.7797%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="50.5297%" y="453" width="0.4075%" height="15" fill="rgb(245,62,40)" fg:x="620" fg:w="5"/><text x="50.7797%" y="463.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="50.6112%" y="437" width="0.3260%" height="15" fill="rgb(228,27,24)" fg:x="621" fg:w="4"/><text x="50.8612%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="50.9372%" y="469" width="0.0815%" height="15" fill="rgb(253,19,12)" fg:x="625" fg:w="1"/><text x="51.1872%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="50.9372%" y="453" width="0.0815%" height="15" fill="rgb(232,28,20)" fg:x="625" fg:w="1"/><text x="51.1872%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.47%)</title><rect x="50.0407%" y="501" width="1.4670%" height="15" fill="rgb(218,35,51)" fg:x="614" fg:w="18"/><text x="50.2907%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.39%)</title><rect x="50.1222%" y="485" width="1.3855%" height="15" fill="rgb(212,90,40)" fg:x="615" fg:w="17"/><text x="50.3722%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.49%)</title><rect x="51.0187%" y="469" width="0.4890%" height="15" fill="rgb(220,172,12)" fg:x="626" fg:w="6"/><text x="51.2687%" y="479.50"></text></g><g><title>indefinite::rules::number::Number::check (304 samples, 24.78%)</title><rect x="26.8134%" y="581" width="24.7759%" height="15" fill="rgb(226,159,20)" fg:x="329" fg:w="304"/><text x="27.0634%" y="591.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (22 samples, 1.79%)</title><rect x="49.7963%" y="565" width="1.7930%" height="15" fill="rgb(234,205,16)" fg:x="611" fg:w="22"/><text x="50.0463%" y="575.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (20 samples, 1.63%)</title><rect x="49.9593%" y="549" width="1.6300%" height="15" fill="rgb(207,9,39)" fg:x="613" fg:w="20"/><text x="50.2093%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (19 samples, 1.55%)</title><rect x="50.0407%" y="533" width="1.5485%" height="15" fill="rgb(249,143,15)" fg:x="614" fg:w="19"/><text x="50.2907%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (19 samples, 1.55%)</title><rect x="50.0407%" y="517" width="1.5485%" height="15" fill="rgb(253,133,29)" fg:x="614" fg:w="19"/><text x="50.2907%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="51.5077%" y="501" width="0.0815%" height="15" fill="rgb(221,187,0)" fg:x="632" fg:w="1"/><text x="51.7577%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="51.5077%" y="485" width="0.0815%" height="15" fill="rgb(205,204,26)" fg:x="632" fg:w="1"/><text x="51.7577%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.5077%" y="469" width="0.0815%" height="15" fill="rgb(224,68,54)" fg:x="632" fg:w="1"/><text x="51.7577%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.5077%" y="453" width="0.0815%" height="15" fill="rgb(209,67,4)" fg:x="632" fg:w="1"/><text x="51.7577%" y="463.50"></text></g><g><title>alloc::rc::rcbox_layout_for_value_layout (1 samples, 0.08%)</title><rect x="51.5892%" y="565" width="0.0815%" height="15" fill="rgb(228,229,18)" fg:x="633" fg:w="1"/><text x="51.8392%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.6707%" y="533" width="0.0815%" height="15" fill="rgb(231,89,13)" fg:x="634" fg:w="1"/><text x="51.9207%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.6707%" y="517" width="0.0815%" height="15" fill="rgb(210,182,18)" fg:x="634" fg:w="1"/><text x="51.9207%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.7522%" y="501" width="0.1630%" height="15" fill="rgb(240,105,2)" fg:x="635" fg:w="2"/><text x="52.0022%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.7522%" y="485" width="0.1630%" height="15" fill="rgb(207,170,50)" fg:x="635" fg:w="2"/><text x="52.0022%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.8337%" y="469" width="0.0815%" height="15" fill="rgb(232,133,24)" fg:x="636" fg:w="1"/><text x="52.0837%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.9152%" y="469" width="0.0815%" height="15" fill="rgb(235,166,27)" fg:x="637" fg:w="1"/><text x="52.1652%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.9152%" y="453" width="0.0815%" height="15" fill="rgb(209,19,13)" fg:x="637" fg:w="1"/><text x="52.1652%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.9152%" y="437" width="0.0815%" height="15" fill="rgb(226,79,39)" fg:x="637" fg:w="1"/><text x="52.1652%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.9152%" y="421" width="0.0815%" height="15" fill="rgb(222,163,10)" fg:x="637" fg:w="1"/><text x="52.1652%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="51.9152%" y="501" width="0.1630%" height="15" fill="rgb(214,44,19)" fg:x="637" fg:w="2"/><text x="52.1652%" y="511.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.9152%" y="485" width="0.1630%" height="15" fill="rgb(210,217,13)" fg:x="637" fg:w="2"/><text x="52.1652%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="51.9967%" y="469" width="0.0815%" height="15" fill="rgb(237,61,54)" fg:x="638" fg:w="1"/><text x="52.2467%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="51.9967%" y="453" width="0.0815%" height="15" fill="rgb(226,184,24)" fg:x="638" fg:w="1"/><text x="52.2467%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.9967%" y="437" width="0.0815%" height="15" fill="rgb(223,226,4)" fg:x="638" fg:w="1"/><text x="52.2467%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.3227%" y="485" width="0.0815%" height="15" fill="rgb(210,26,41)" fg:x="642" fg:w="1"/><text x="52.5727%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="52.4042%" y="485" width="0.0815%" height="15" fill="rgb(220,221,6)" fg:x="643" fg:w="1"/><text x="52.6542%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="52.4042%" y="469" width="0.0815%" height="15" fill="rgb(225,89,49)" fg:x="643" fg:w="1"/><text x="52.6542%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (9 samples, 0.73%)</title><rect x="52.5672%" y="469" width="0.7335%" height="15" fill="rgb(218,70,45)" fg:x="645" fg:w="9"/><text x="52.8172%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.90%)</title><rect x="52.4857%" y="485" width="0.8965%" height="15" fill="rgb(238,166,21)" fg:x="644" fg:w="11"/><text x="52.7357%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="53.3007%" y="469" width="0.0815%" height="15" fill="rgb(224,141,44)" fg:x="654" fg:w="1"/><text x="53.5507%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="53.3822%" y="469" width="0.0815%" height="15" fill="rgb(230,12,49)" fg:x="655" fg:w="1"/><text x="53.6322%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="53.3822%" y="453" width="0.0815%" height="15" fill="rgb(212,174,12)" fg:x="655" fg:w="1"/><text x="53.6322%" y="463.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="53.7082%" y="453" width="0.0815%" height="15" fill="rgb(246,67,9)" fg:x="659" fg:w="1"/><text x="53.9582%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="53.7897%" y="453" width="0.0815%" height="15" fill="rgb(239,35,23)" fg:x="660" fg:w="1"/><text x="54.0397%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.7897%" y="437" width="0.0815%" height="15" fill="rgb(211,167,0)" fg:x="660" fg:w="1"/><text x="54.0397%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.7897%" y="421" width="0.0815%" height="15" fill="rgb(225,119,45)" fg:x="660" fg:w="1"/><text x="54.0397%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.7897%" y="405" width="0.0815%" height="15" fill="rgb(210,162,6)" fg:x="660" fg:w="1"/><text x="54.0397%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="53.8712%" y="453" width="0.1630%" height="15" fill="rgb(208,118,35)" fg:x="661" fg:w="2"/><text x="54.1212%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::new (25 samples, 2.04%)</title><rect x="52.0782%" y="501" width="2.0375%" height="15" fill="rgb(239,4,53)" fg:x="639" fg:w="25"/><text x="52.3282%" y="511.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.73%)</title><rect x="53.3822%" y="485" width="0.7335%" height="15" fill="rgb(213,130,21)" fg:x="655" fg:w="9"/><text x="53.6322%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="53.4637%" y="469" width="0.6520%" height="15" fill="rgb(235,148,0)" fg:x="656" fg:w="8"/><text x="53.7137%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="54.0342%" y="453" width="0.0815%" height="15" fill="rgb(244,224,18)" fg:x="663" fg:w="1"/><text x="54.2842%" y="463.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="54.2787%" y="453" width="0.0815%" height="15" fill="rgb(211,214,4)" fg:x="666" fg:w="1"/><text x="54.5287%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="54.3602%" y="453" width="0.0815%" height="15" fill="rgb(206,119,25)" fg:x="667" fg:w="1"/><text x="54.6102%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="54.3602%" y="437" width="0.0815%" height="15" fill="rgb(243,93,47)" fg:x="667" fg:w="1"/><text x="54.6102%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="54.1157%" y="501" width="0.4075%" height="15" fill="rgb(224,194,6)" fg:x="664" fg:w="5"/><text x="54.3657%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="54.1157%" y="485" width="0.4075%" height="15" fill="rgb(243,229,6)" fg:x="664" fg:w="5"/><text x="54.3657%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="54.1157%" y="469" width="0.4075%" height="15" fill="rgb(207,23,50)" fg:x="664" fg:w="5"/><text x="54.3657%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="54.4417%" y="453" width="0.0815%" height="15" fill="rgb(253,192,32)" fg:x="668" fg:w="1"/><text x="54.6917%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="54.4417%" y="437" width="0.0815%" height="15" fill="rgb(213,21,6)" fg:x="668" fg:w="1"/><text x="54.6917%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.4417%" y="421" width="0.0815%" height="15" fill="rgb(243,151,13)" fg:x="668" fg:w="1"/><text x="54.6917%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.5232%" y="453" width="0.0815%" height="15" fill="rgb(233,165,41)" fg:x="669" fg:w="1"/><text x="54.7732%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.5232%" y="437" width="0.0815%" height="15" fill="rgb(246,176,45)" fg:x="669" fg:w="1"/><text x="54.7732%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.5232%" y="421" width="0.0815%" height="15" fill="rgb(217,170,52)" fg:x="669" fg:w="1"/><text x="54.7732%" y="431.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (38 samples, 3.10%)</title><rect x="51.6707%" y="549" width="3.0970%" height="15" fill="rgb(214,203,54)" fg:x="634" fg:w="38"/><text x="51.9207%" y="559.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (37 samples, 3.02%)</title><rect x="51.7522%" y="533" width="3.0155%" height="15" fill="rgb(248,215,49)" fg:x="635" fg:w="37"/><text x="52.0022%" y="543.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (37 samples, 3.02%)</title><rect x="51.7522%" y="517" width="3.0155%" height="15" fill="rgb(208,46,10)" fg:x="635" fg:w="37"/><text x="52.0022%" y="527.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="54.5232%" y="501" width="0.2445%" height="15" fill="rgb(254,5,31)" fg:x="669" fg:w="3"/><text x="54.7732%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="54.5232%" y="485" width="0.2445%" height="15" fill="rgb(222,104,33)" fg:x="669" fg:w="3"/><text x="54.7732%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="54.5232%" y="469" width="0.2445%" height="15" fill="rgb(248,49,16)" fg:x="669" fg:w="3"/><text x="54.7732%" y="479.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="54.6047%" y="453" width="0.1630%" height="15" fill="rgb(232,198,41)" fg:x="670" fg:w="2"/><text x="54.8547%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.6862%" y="437" width="0.0815%" height="15" fill="rgb(214,125,3)" fg:x="671" fg:w="1"/><text x="54.9362%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.6862%" y="421" width="0.0815%" height="15" fill="rgb(229,220,28)" fg:x="671" fg:w="1"/><text x="54.9362%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.6862%" y="405" width="0.0815%" height="15" fill="rgb(222,64,37)" fg:x="671" fg:w="1"/><text x="54.9362%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="54.8492%" y="501" width="0.0815%" height="15" fill="rgb(249,184,13)" fg:x="673" fg:w="1"/><text x="55.0992%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="54.8492%" y="485" width="0.0815%" height="15" fill="rgb(252,176,6)" fg:x="673" fg:w="1"/><text x="55.0992%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="54.8492%" y="517" width="0.1630%" height="15" fill="rgb(228,153,7)" fg:x="673" fg:w="2"/><text x="55.0992%" y="527.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="54.9307%" y="501" width="0.0815%" height="15" fill="rgb(242,193,5)" fg:x="674" fg:w="1"/><text x="55.1807%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (6 samples, 0.49%)</title><rect x="54.7677%" y="549" width="0.4890%" height="15" fill="rgb(232,140,9)" fg:x="672" fg:w="6"/><text x="55.0177%" y="559.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.49%)</title><rect x="54.7677%" y="533" width="0.4890%" height="15" fill="rgb(213,222,16)" fg:x="672" fg:w="6"/><text x="55.0177%" y="543.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="55.0122%" y="517" width="0.2445%" height="15" fill="rgb(222,75,50)" fg:x="675" fg:w="3"/><text x="55.2622%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="55.0937%" y="501" width="0.1630%" height="15" fill="rgb(205,180,2)" fg:x="676" fg:w="2"/><text x="55.3437%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="55.1752%" y="485" width="0.0815%" height="15" fill="rgb(216,34,7)" fg:x="677" fg:w="1"/><text x="55.4252%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.2567%" y="517" width="0.0815%" height="15" fill="rgb(253,16,32)" fg:x="678" fg:w="1"/><text x="55.5067%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.2567%" y="501" width="0.0815%" height="15" fill="rgb(208,97,28)" fg:x="678" fg:w="1"/><text x="55.5067%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.2567%" y="485" width="0.0815%" height="15" fill="rgb(225,92,11)" fg:x="678" fg:w="1"/><text x="55.5067%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.3382%" y="501" width="0.0815%" height="15" fill="rgb(243,38,12)" fg:x="679" fg:w="1"/><text x="55.5882%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.3382%" y="485" width="0.0815%" height="15" fill="rgb(208,139,16)" fg:x="679" fg:w="1"/><text x="55.5882%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="55.4197%" y="485" width="0.0815%" height="15" fill="rgb(227,24,9)" fg:x="680" fg:w="1"/><text x="55.6697%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="55.2567%" y="549" width="0.3260%" height="15" fill="rgb(206,62,11)" fg:x="678" fg:w="4"/><text x="55.5067%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="55.2567%" y="533" width="0.3260%" height="15" fill="rgb(228,134,27)" fg:x="678" fg:w="4"/><text x="55.5067%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="55.3382%" y="517" width="0.2445%" height="15" fill="rgb(205,55,33)" fg:x="679" fg:w="3"/><text x="55.5882%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="55.4197%" y="501" width="0.1630%" height="15" fill="rgb(243,75,43)" fg:x="680" fg:w="2"/><text x="55.6697%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.5012%" y="485" width="0.0815%" height="15" fill="rgb(223,27,42)" fg:x="681" fg:w="1"/><text x="55.7512%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.5827%" y="485" width="0.0815%" height="15" fill="rgb(232,189,33)" fg:x="682" fg:w="1"/><text x="55.8327%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.8272%" y="469" width="0.0815%" height="15" fill="rgb(210,9,39)" fg:x="685" fg:w="1"/><text x="56.0772%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.8272%" y="453" width="0.0815%" height="15" fill="rgb(242,85,26)" fg:x="685" fg:w="1"/><text x="56.0772%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.8272%" y="437" width="0.0815%" height="15" fill="rgb(248,44,4)" fg:x="685" fg:w="1"/><text x="56.0772%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="55.9902%" y="453" width="0.0815%" height="15" fill="rgb(250,96,46)" fg:x="687" fg:w="1"/><text x="56.2402%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="55.9087%" y="469" width="0.2445%" height="15" fill="rgb(229,116,26)" fg:x="686" fg:w="3"/><text x="56.1587%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="56.0717%" y="453" width="0.0815%" height="15" fill="rgb(246,94,34)" fg:x="688" fg:w="1"/><text x="56.3217%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="56.0717%" y="437" width="0.0815%" height="15" fill="rgb(251,73,21)" fg:x="688" fg:w="1"/><text x="56.3217%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.0717%" y="421" width="0.0815%" height="15" fill="rgb(254,121,25)" fg:x="688" fg:w="1"/><text x="56.3217%" y="431.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (570 samples, 46.45%)</title><rect x="9.8615%" y="661" width="46.4548%" height="15" fill="rgb(215,161,49)" fg:x="121" fg:w="570"/><text x="10.1115%" y="671.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;repli..</text></g><g><title>plugins_core::looking::model::qualify_name (566 samples, 46.13%)</title><rect x="10.1874%" y="645" width="46.1288%" height="15" fill="rgb(221,43,13)" fg:x="125" fg:w="566"/><text x="10.4374%" y="655.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (566 samples, 46.13%)</title><rect x="10.1874%" y="629" width="46.1288%" height="15" fill="rgb(249,5,37)" fg:x="125" fg:w="566"/><text x="10.4374%" y="639.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (566 samples, 46.13%)</title><rect x="10.1874%" y="613" width="46.1288%" height="15" fill="rgb(226,25,44)" fg:x="125" fg:w="566"/><text x="10.4374%" y="623.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (565 samples, 46.05%)</title><rect x="10.2689%" y="597" width="46.0473%" height="15" fill="rgb(238,189,16)" fg:x="126" fg:w="565"/><text x="10.5189%" y="607.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (58 samples, 4.73%)</title><rect x="51.5892%" y="581" width="4.7270%" height="15" fill="rgb(251,186,8)" fg:x="633" fg:w="58"/><text x="51.8392%" y="591.50">indefi..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (57 samples, 4.65%)</title><rect x="51.6707%" y="565" width="4.6455%" height="15" fill="rgb(254,34,31)" fg:x="634" fg:w="57"/><text x="51.9207%" y="575.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.73%)</title><rect x="55.5827%" y="549" width="0.7335%" height="15" fill="rgb(225,215,27)" fg:x="682" fg:w="9"/><text x="55.8327%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.73%)</title><rect x="55.5827%" y="533" width="0.7335%" height="15" fill="rgb(221,192,48)" fg:x="682" fg:w="9"/><text x="55.8327%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.73%)</title><rect x="55.5827%" y="517" width="0.7335%" height="15" fill="rgb(219,137,20)" fg:x="682" fg:w="9"/><text x="55.8327%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="55.5827%" y="501" width="0.7335%" height="15" fill="rgb(219,84,11)" fg:x="682" fg:w="9"/><text x="55.8327%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="55.6642%" y="485" width="0.6520%" height="15" fill="rgb(224,10,23)" fg:x="683" fg:w="8"/><text x="55.9142%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="56.1532%" y="469" width="0.1630%" height="15" fill="rgb(248,22,39)" fg:x="689" fg:w="2"/><text x="56.4032%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="56.3162%" y="661" width="0.0815%" height="15" fill="rgb(212,154,20)" fg:x="691" fg:w="1"/><text x="56.5662%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="56.3162%" y="645" width="0.0815%" height="15" fill="rgb(236,199,50)" fg:x="691" fg:w="1"/><text x="56.5662%" y="655.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="56.3977%" y="661" width="0.0815%" height="15" fill="rgb(211,9,17)" fg:x="692" fg:w="1"/><text x="56.6477%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="56.3977%" y="645" width="0.0815%" height="15" fill="rgb(243,216,36)" fg:x="692" fg:w="1"/><text x="56.6477%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="56.3977%" y="629" width="0.0815%" height="15" fill="rgb(250,2,10)" fg:x="692" fg:w="1"/><text x="56.6477%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="56.3977%" y="613" width="0.0815%" height="15" fill="rgb(226,50,48)" fg:x="692" fg:w="1"/><text x="56.6477%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="56.3977%" y="597" width="0.0815%" height="15" fill="rgb(243,81,16)" fg:x="692" fg:w="1"/><text x="56.6477%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="56.3977%" y="581" width="0.0815%" height="15" fill="rgb(250,14,2)" fg:x="692" fg:w="1"/><text x="56.6477%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="56.3977%" y="565" width="0.0815%" height="15" fill="rgb(233,135,29)" fg:x="692" fg:w="1"/><text x="56.6477%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="56.3977%" y="549" width="0.0815%" height="15" fill="rgb(224,64,43)" fg:x="692" fg:w="1"/><text x="56.6477%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="56.3977%" y="533" width="0.0815%" height="15" fill="rgb(238,84,13)" fg:x="692" fg:w="1"/><text x="56.6477%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="56.3977%" y="517" width="0.0815%" height="15" fill="rgb(253,48,26)" fg:x="692" fg:w="1"/><text x="56.6477%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="56.3977%" y="501" width="0.0815%" height="15" fill="rgb(205,223,31)" fg:x="692" fg:w="1"/><text x="56.6477%" y="511.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="56.3977%" y="485" width="0.0815%" height="15" fill="rgb(221,41,32)" fg:x="692" fg:w="1"/><text x="56.6477%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="56.3977%" y="469" width="0.0815%" height="15" fill="rgb(213,158,31)" fg:x="692" fg:w="1"/><text x="56.6477%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="56.3977%" y="453" width="0.0815%" height="15" fill="rgb(245,126,43)" fg:x="692" fg:w="1"/><text x="56.6477%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="56.3977%" y="437" width="0.0815%" height="15" fill="rgb(227,7,22)" fg:x="692" fg:w="1"/><text x="56.6477%" y="447.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="56.3977%" y="421" width="0.0815%" height="15" fill="rgb(252,90,44)" fg:x="692" fg:w="1"/><text x="56.6477%" y="431.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="56.3977%" y="405" width="0.0815%" height="15" fill="rgb(253,91,0)" fg:x="692" fg:w="1"/><text x="56.6477%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="56.3977%" y="389" width="0.0815%" height="15" fill="rgb(252,175,49)" fg:x="692" fg:w="1"/><text x="56.6477%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="56.3977%" y="373" width="0.0815%" height="15" fill="rgb(246,150,1)" fg:x="692" fg:w="1"/><text x="56.6477%" y="383.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="56.3977%" y="357" width="0.0815%" height="15" fill="rgb(241,192,25)" fg:x="692" fg:w="1"/><text x="56.6477%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="56.3977%" y="341" width="0.0815%" height="15" fill="rgb(239,187,11)" fg:x="692" fg:w="1"/><text x="56.6477%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.3977%" y="325" width="0.0815%" height="15" fill="rgb(218,202,51)" fg:x="692" fg:w="1"/><text x="56.6477%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="56.3977%" y="309" width="0.0815%" height="15" fill="rgb(225,176,8)" fg:x="692" fg:w="1"/><text x="56.6477%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="56.3977%" y="293" width="0.0815%" height="15" fill="rgb(219,122,41)" fg:x="692" fg:w="1"/><text x="56.6477%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="56.3977%" y="277" width="0.0815%" height="15" fill="rgb(248,140,20)" fg:x="692" fg:w="1"/><text x="56.6477%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.3977%" y="261" width="0.0815%" height="15" fill="rgb(245,41,37)" fg:x="692" fg:w="1"/><text x="56.6477%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="56.3977%" y="245" width="0.0815%" height="15" fill="rgb(235,82,39)" fg:x="692" fg:w="1"/><text x="56.6477%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.3977%" y="229" width="0.0815%" height="15" fill="rgb(230,108,42)" fg:x="692" fg:w="1"/><text x="56.6477%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="56.3977%" y="213" width="0.0815%" height="15" fill="rgb(215,150,50)" fg:x="692" fg:w="1"/><text x="56.6477%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="56.3977%" y="197" width="0.0815%" height="15" fill="rgb(233,212,5)" fg:x="692" fg:w="1"/><text x="56.6477%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="56.3977%" y="181" width="0.0815%" height="15" fill="rgb(245,80,22)" fg:x="692" fg:w="1"/><text x="56.6477%" y="191.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="56.3977%" y="165" width="0.0815%" height="15" fill="rgb(238,129,16)" fg:x="692" fg:w="1"/><text x="56.6477%" y="175.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (575 samples, 46.86%)</title><rect x="9.8615%" y="693" width="46.8623%" height="15" fill="rgb(240,19,0)" fg:x="121" fg:w="575"/><text x="10.1115%" y="703.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perfo..</text></g><g><title>plugins_core::looking::model::new_area_observation (575 samples, 46.86%)</title><rect x="9.8615%" y="677" width="46.8623%" height="15" fill="rgb(232,42,35)" fg:x="121" fg:w="575"/><text x="10.1115%" y="687.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="56.4792%" y="661" width="0.2445%" height="15" fill="rgb(223,130,24)" fg:x="693" fg:w="3"/><text x="56.7292%" y="671.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="56.4792%" y="645" width="0.2445%" height="15" fill="rgb(237,16,22)" fg:x="693" fg:w="3"/><text x="56.7292%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="56.5607%" y="629" width="0.1630%" height="15" fill="rgb(248,192,20)" fg:x="694" fg:w="2"/><text x="56.8107%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.6422%" y="613" width="0.0815%" height="15" fill="rgb(233,167,2)" fg:x="695" fg:w="1"/><text x="56.8922%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="56.6422%" y="597" width="0.0815%" height="15" fill="rgb(252,71,44)" fg:x="695" fg:w="1"/><text x="56.8922%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.6422%" y="581" width="0.0815%" height="15" fill="rgb(238,37,47)" fg:x="695" fg:w="1"/><text x="56.8922%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="56.6422%" y="565" width="0.0815%" height="15" fill="rgb(214,202,54)" fg:x="695" fg:w="1"/><text x="56.8922%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="56.6422%" y="549" width="0.0815%" height="15" fill="rgb(254,165,40)" fg:x="695" fg:w="1"/><text x="56.8922%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="56.6422%" y="533" width="0.0815%" height="15" fill="rgb(246,173,38)" fg:x="695" fg:w="1"/><text x="56.8922%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="56.6422%" y="517" width="0.0815%" height="15" fill="rgb(215,3,27)" fg:x="695" fg:w="1"/><text x="56.8922%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.6422%" y="501" width="0.0815%" height="15" fill="rgb(239,169,51)" fg:x="695" fg:w="1"/><text x="56.8922%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="56.6422%" y="485" width="0.0815%" height="15" fill="rgb(212,5,25)" fg:x="695" fg:w="1"/><text x="56.8922%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="56.6422%" y="469" width="0.0815%" height="15" fill="rgb(243,45,17)" fg:x="695" fg:w="1"/><text x="56.8922%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="56.6422%" y="453" width="0.0815%" height="15" fill="rgb(242,97,9)" fg:x="695" fg:w="1"/><text x="56.8922%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="56.6422%" y="437" width="0.0815%" height="15" fill="rgb(228,71,31)" fg:x="695" fg:w="1"/><text x="56.8922%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="56.6422%" y="421" width="0.0815%" height="15" fill="rgb(252,184,16)" fg:x="695" fg:w="1"/><text x="56.8922%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.6422%" y="405" width="0.0815%" height="15" fill="rgb(236,169,46)" fg:x="695" fg:w="1"/><text x="56.8922%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="56.8867%" y="629" width="0.0815%" height="15" fill="rgb(207,17,47)" fg:x="698" fg:w="1"/><text x="57.1367%" y="639.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="56.8867%" y="613" width="0.0815%" height="15" fill="rgb(206,201,28)" fg:x="698" fg:w="1"/><text x="57.1367%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="56.8867%" y="597" width="0.0815%" height="15" fill="rgb(224,184,23)" fg:x="698" fg:w="1"/><text x="57.1367%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="56.8867%" y="581" width="0.0815%" height="15" fill="rgb(208,139,48)" fg:x="698" fg:w="1"/><text x="57.1367%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.33%)</title><rect x="56.7237%" y="677" width="0.3260%" height="15" fill="rgb(208,130,10)" fg:x="696" fg:w="4"/><text x="56.9737%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="56.8052%" y="661" width="0.2445%" height="15" fill="rgb(211,213,45)" fg:x="697" fg:w="3"/><text x="57.0552%" y="671.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="56.8052%" y="645" width="0.2445%" height="15" fill="rgb(235,100,30)" fg:x="697" fg:w="3"/><text x="57.0552%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.9682%" y="629" width="0.0815%" height="15" fill="rgb(206,144,31)" fg:x="699" fg:w="1"/><text x="57.2182%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.9682%" y="613" width="0.0815%" height="15" fill="rgb(224,200,26)" fg:x="699" fg:w="1"/><text x="57.2182%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="56.9682%" y="597" width="0.0815%" height="15" fill="rgb(247,104,53)" fg:x="699" fg:w="1"/><text x="57.2182%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="56.9682%" y="581" width="0.0815%" height="15" fill="rgb(220,14,17)" fg:x="699" fg:w="1"/><text x="57.2182%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.9682%" y="565" width="0.0815%" height="15" fill="rgb(230,140,40)" fg:x="699" fg:w="1"/><text x="57.2182%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="56.9682%" y="549" width="0.0815%" height="15" fill="rgb(229,2,41)" fg:x="699" fg:w="1"/><text x="57.2182%" y="559.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (5 samples, 0.41%)</title><rect x="56.7237%" y="693" width="0.4075%" height="15" fill="rgb(232,89,16)" fg:x="696" fg:w="5"/><text x="56.9737%" y="703.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="57.0497%" y="677" width="0.0815%" height="15" fill="rgb(247,59,52)" fg:x="700" fg:w="1"/><text x="57.2997%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="57.0497%" y="661" width="0.0815%" height="15" fill="rgb(226,110,21)" fg:x="700" fg:w="1"/><text x="57.2997%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="57.0497%" y="645" width="0.0815%" height="15" fill="rgb(224,176,43)" fg:x="700" fg:w="1"/><text x="57.2997%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="57.0497%" y="629" width="0.0815%" height="15" fill="rgb(221,73,6)" fg:x="700" fg:w="1"/><text x="57.2997%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="57.0497%" y="613" width="0.0815%" height="15" fill="rgb(232,78,19)" fg:x="700" fg:w="1"/><text x="57.2997%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="57.0497%" y="597" width="0.0815%" height="15" fill="rgb(233,112,48)" fg:x="700" fg:w="1"/><text x="57.2997%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="57.0497%" y="581" width="0.0815%" height="15" fill="rgb(243,131,47)" fg:x="700" fg:w="1"/><text x="57.2997%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="57.0497%" y="565" width="0.0815%" height="15" fill="rgb(226,51,1)" fg:x="700" fg:w="1"/><text x="57.2997%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="57.0497%" y="549" width="0.0815%" height="15" fill="rgb(247,58,7)" fg:x="700" fg:w="1"/><text x="57.2997%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="57.0497%" y="533" width="0.0815%" height="15" fill="rgb(209,7,32)" fg:x="700" fg:w="1"/><text x="57.2997%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="57.0497%" y="517" width="0.0815%" height="15" fill="rgb(209,39,41)" fg:x="700" fg:w="1"/><text x="57.2997%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.1312%" y="613" width="0.0815%" height="15" fill="rgb(226,182,46)" fg:x="701" fg:w="1"/><text x="57.3812%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.1312%" y="597" width="0.0815%" height="15" fill="rgb(230,219,10)" fg:x="701" fg:w="1"/><text x="57.3812%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="57.1312%" y="629" width="0.1630%" height="15" fill="rgb(227,175,30)" fg:x="701" fg:w="2"/><text x="57.3812%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.2127%" y="613" width="0.0815%" height="15" fill="rgb(217,2,50)" fg:x="702" fg:w="1"/><text x="57.4627%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (3 samples, 0.24%)</title><rect x="57.1312%" y="661" width="0.2445%" height="15" fill="rgb(229,160,0)" fg:x="701" fg:w="3"/><text x="57.3812%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="57.1312%" y="645" width="0.2445%" height="15" fill="rgb(207,78,37)" fg:x="701" fg:w="3"/><text x="57.3812%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="57.2942%" y="629" width="0.0815%" height="15" fill="rgb(225,57,0)" fg:x="703" fg:w="1"/><text x="57.5442%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="57.3757%" y="629" width="0.0815%" height="15" fill="rgb(232,154,2)" fg:x="704" fg:w="1"/><text x="57.6257%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="57.3757%" y="613" width="0.0815%" height="15" fill="rgb(241,212,25)" fg:x="704" fg:w="1"/><text x="57.6257%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="57.4572%" y="629" width="0.0815%" height="15" fill="rgb(226,69,20)" fg:x="705" fg:w="1"/><text x="57.7072%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="57.4572%" y="613" width="0.0815%" height="15" fill="rgb(247,184,54)" fg:x="705" fg:w="1"/><text x="57.7072%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="57.4572%" y="597" width="0.0815%" height="15" fill="rgb(210,145,0)" fg:x="705" fg:w="1"/><text x="57.7072%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="57.5387%" y="629" width="0.0815%" height="15" fill="rgb(253,82,12)" fg:x="706" fg:w="1"/><text x="57.7887%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="57.5387%" y="613" width="0.0815%" height="15" fill="rgb(245,42,11)" fg:x="706" fg:w="1"/><text x="57.7887%" y="623.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="57.6202%" y="501" width="0.0815%" height="15" fill="rgb(219,147,32)" fg:x="707" fg:w="1"/><text x="57.8702%" y="511.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="57.6202%" y="485" width="0.0815%" height="15" fill="rgb(246,12,7)" fg:x="707" fg:w="1"/><text x="57.8702%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.6202%" y="469" width="0.0815%" height="15" fill="rgb(243,50,9)" fg:x="707" fg:w="1"/><text x="57.8702%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.6202%" y="453" width="0.0815%" height="15" fill="rgb(219,149,6)" fg:x="707" fg:w="1"/><text x="57.8702%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.6202%" y="437" width="0.0815%" height="15" fill="rgb(241,51,42)" fg:x="707" fg:w="1"/><text x="57.8702%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.6202%" y="421" width="0.0815%" height="15" fill="rgb(226,128,27)" fg:x="707" fg:w="1"/><text x="57.8702%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.6202%" y="405" width="0.0815%" height="15" fill="rgb(244,144,4)" fg:x="707" fg:w="1"/><text x="57.8702%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.6202%" y="389" width="0.0815%" height="15" fill="rgb(221,4,13)" fg:x="707" fg:w="1"/><text x="57.8702%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.6202%" y="373" width="0.0815%" height="15" fill="rgb(208,170,28)" fg:x="707" fg:w="1"/><text x="57.8702%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.6202%" y="357" width="0.0815%" height="15" fill="rgb(226,131,13)" fg:x="707" fg:w="1"/><text x="57.8702%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.6202%" y="341" width="0.0815%" height="15" fill="rgb(215,72,41)" fg:x="707" fg:w="1"/><text x="57.8702%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.6202%" y="325" width="0.0815%" height="15" fill="rgb(243,108,20)" fg:x="707" fg:w="1"/><text x="57.8702%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.6202%" y="309" width="0.0815%" height="15" fill="rgb(230,189,17)" fg:x="707" fg:w="1"/><text x="57.8702%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.6202%" y="293" width="0.0815%" height="15" fill="rgb(220,50,17)" fg:x="707" fg:w="1"/><text x="57.8702%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6202%" y="277" width="0.0815%" height="15" fill="rgb(248,152,48)" fg:x="707" fg:w="1"/><text x="57.8702%" y="287.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="57.7017%" y="501" width="0.0815%" height="15" fill="rgb(244,91,11)" fg:x="708" fg:w="1"/><text x="57.9517%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.7017%" y="485" width="0.0815%" height="15" fill="rgb(220,157,5)" fg:x="708" fg:w="1"/><text x="57.9517%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.7017%" y="469" width="0.0815%" height="15" fill="rgb(253,137,8)" fg:x="708" fg:w="1"/><text x="57.9517%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.7017%" y="453" width="0.0815%" height="15" fill="rgb(217,137,51)" fg:x="708" fg:w="1"/><text x="57.9517%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.7017%" y="437" width="0.0815%" height="15" fill="rgb(218,209,53)" fg:x="708" fg:w="1"/><text x="57.9517%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.7017%" y="421" width="0.0815%" height="15" fill="rgb(249,137,25)" fg:x="708" fg:w="1"/><text x="57.9517%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.7017%" y="405" width="0.0815%" height="15" fill="rgb(239,155,26)" fg:x="708" fg:w="1"/><text x="57.9517%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.7017%" y="389" width="0.0815%" height="15" fill="rgb(227,85,46)" fg:x="708" fg:w="1"/><text x="57.9517%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.7017%" y="373" width="0.0815%" height="15" fill="rgb(251,107,43)" fg:x="708" fg:w="1"/><text x="57.9517%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.7017%" y="357" width="0.0815%" height="15" fill="rgb(234,170,33)" fg:x="708" fg:w="1"/><text x="57.9517%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.7017%" y="341" width="0.0815%" height="15" fill="rgb(206,29,35)" fg:x="708" fg:w="1"/><text x="57.9517%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.7017%" y="325" width="0.0815%" height="15" fill="rgb(227,138,25)" fg:x="708" fg:w="1"/><text x="57.9517%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.7017%" y="309" width="0.0815%" height="15" fill="rgb(249,131,35)" fg:x="708" fg:w="1"/><text x="57.9517%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.7832%" y="485" width="0.0815%" height="15" fill="rgb(239,6,40)" fg:x="709" fg:w="1"/><text x="58.0332%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.7832%" y="469" width="0.0815%" height="15" fill="rgb(246,136,47)" fg:x="709" fg:w="1"/><text x="58.0332%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.7832%" y="453" width="0.0815%" height="15" fill="rgb(253,58,26)" fg:x="709" fg:w="1"/><text x="58.0332%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.7832%" y="437" width="0.0815%" height="15" fill="rgb(237,141,10)" fg:x="709" fg:w="1"/><text x="58.0332%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.7832%" y="421" width="0.0815%" height="15" fill="rgb(234,156,12)" fg:x="709" fg:w="1"/><text x="58.0332%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.7832%" y="405" width="0.0815%" height="15" fill="rgb(243,224,36)" fg:x="709" fg:w="1"/><text x="58.0332%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.7832%" y="389" width="0.0815%" height="15" fill="rgb(205,229,51)" fg:x="709" fg:w="1"/><text x="58.0332%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.7832%" y="373" width="0.0815%" height="15" fill="rgb(223,189,4)" fg:x="709" fg:w="1"/><text x="58.0332%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.7832%" y="357" width="0.0815%" height="15" fill="rgb(249,167,54)" fg:x="709" fg:w="1"/><text x="58.0332%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.7832%" y="341" width="0.0815%" height="15" fill="rgb(218,34,28)" fg:x="709" fg:w="1"/><text x="58.0332%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.7832%" y="325" width="0.0815%" height="15" fill="rgb(232,109,42)" fg:x="709" fg:w="1"/><text x="58.0332%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.7832%" y="309" width="0.0815%" height="15" fill="rgb(248,214,46)" fg:x="709" fg:w="1"/><text x="58.0332%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="57.9462%" y="373" width="0.0815%" height="15" fill="rgb(244,216,40)" fg:x="711" fg:w="1"/><text x="58.1962%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="57.9462%" y="357" width="0.0815%" height="15" fill="rgb(231,226,31)" fg:x="711" fg:w="1"/><text x="58.1962%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="57.9462%" y="341" width="0.0815%" height="15" fill="rgb(238,38,43)" fg:x="711" fg:w="1"/><text x="58.1962%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="57.9462%" y="325" width="0.0815%" height="15" fill="rgb(208,88,43)" fg:x="711" fg:w="1"/><text x="58.1962%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="57.9462%" y="309" width="0.0815%" height="15" fill="rgb(205,136,37)" fg:x="711" fg:w="1"/><text x="58.1962%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="57.9462%" y="293" width="0.0815%" height="15" fill="rgb(237,34,14)" fg:x="711" fg:w="1"/><text x="58.1962%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="57.9462%" y="277" width="0.0815%" height="15" fill="rgb(236,193,44)" fg:x="711" fg:w="1"/><text x="58.1962%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="57.6202%" y="549" width="0.4890%" height="15" fill="rgb(231,48,10)" fg:x="707" fg:w="6"/><text x="57.8702%" y="559.50"></text></g><g><title>kernel::model::EntityRef::into_entry (6 samples, 0.49%)</title><rect x="57.6202%" y="533" width="0.4890%" height="15" fill="rgb(213,141,34)" fg:x="707" fg:w="6"/><text x="57.8702%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.49%)</title><rect x="57.6202%" y="517" width="0.4890%" height="15" fill="rgb(249,130,34)" fg:x="707" fg:w="6"/><text x="57.8702%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (4 samples, 0.33%)</title><rect x="57.7832%" y="501" width="0.3260%" height="15" fill="rgb(219,42,41)" fg:x="709" fg:w="4"/><text x="58.0332%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="57.8647%" y="485" width="0.2445%" height="15" fill="rgb(224,100,54)" fg:x="710" fg:w="3"/><text x="58.1147%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="57.8647%" y="469" width="0.2445%" height="15" fill="rgb(229,200,27)" fg:x="710" fg:w="3"/><text x="58.1147%" y="479.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="57.8647%" y="453" width="0.2445%" height="15" fill="rgb(217,118,10)" fg:x="710" fg:w="3"/><text x="58.1147%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="57.8647%" y="437" width="0.2445%" height="15" fill="rgb(206,22,3)" fg:x="710" fg:w="3"/><text x="58.1147%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="57.8647%" y="421" width="0.2445%" height="15" fill="rgb(232,163,46)" fg:x="710" fg:w="3"/><text x="58.1147%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="57.8647%" y="405" width="0.2445%" height="15" fill="rgb(206,95,13)" fg:x="710" fg:w="3"/><text x="58.1147%" y="415.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="57.8647%" y="389" width="0.2445%" height="15" fill="rgb(253,154,18)" fg:x="710" fg:w="3"/><text x="58.1147%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="58.0277%" y="373" width="0.0815%" height="15" fill="rgb(219,32,23)" fg:x="712" fg:w="1"/><text x="58.2777%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="58.0277%" y="357" width="0.0815%" height="15" fill="rgb(230,191,45)" fg:x="712" fg:w="1"/><text x="58.2777%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="58.0277%" y="341" width="0.0815%" height="15" fill="rgb(229,64,36)" fg:x="712" fg:w="1"/><text x="58.2777%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="58.0277%" y="325" width="0.0815%" height="15" fill="rgb(205,129,25)" fg:x="712" fg:w="1"/><text x="58.2777%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="58.0277%" y="309" width="0.0815%" height="15" fill="rgb(254,112,7)" fg:x="712" fg:w="1"/><text x="58.2777%" y="319.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="58.0277%" y="293" width="0.0815%" height="15" fill="rgb(226,53,48)" fg:x="712" fg:w="1"/><text x="58.2777%" y="303.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="58.0277%" y="277" width="0.0815%" height="15" fill="rgb(214,153,38)" fg:x="712" fg:w="1"/><text x="58.2777%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="58.0277%" y="261" width="0.0815%" height="15" fill="rgb(243,101,7)" fg:x="712" fg:w="1"/><text x="58.2777%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="58.0277%" y="245" width="0.0815%" height="15" fill="rgb(240,140,22)" fg:x="712" fg:w="1"/><text x="58.2777%" y="255.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="58.0277%" y="229" width="0.0815%" height="15" fill="rgb(235,114,2)" fg:x="712" fg:w="1"/><text x="58.2777%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="58.0277%" y="213" width="0.0815%" height="15" fill="rgb(242,59,12)" fg:x="712" fg:w="1"/><text x="58.2777%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="58.0277%" y="197" width="0.0815%" height="15" fill="rgb(252,134,9)" fg:x="712" fg:w="1"/><text x="58.2777%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="58.0277%" y="181" width="0.0815%" height="15" fill="rgb(236,4,44)" fg:x="712" fg:w="1"/><text x="58.2777%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="58.0277%" y="165" width="0.0815%" height="15" fill="rgb(254,172,41)" fg:x="712" fg:w="1"/><text x="58.2777%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="58.0277%" y="149" width="0.0815%" height="15" fill="rgb(244,63,20)" fg:x="712" fg:w="1"/><text x="58.2777%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.0277%" y="133" width="0.0815%" height="15" fill="rgb(250,73,31)" fg:x="712" fg:w="1"/><text x="58.2777%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="58.0277%" y="117" width="0.0815%" height="15" fill="rgb(241,38,36)" fg:x="712" fg:w="1"/><text x="58.2777%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.0277%" y="101" width="0.0815%" height="15" fill="rgb(245,211,2)" fg:x="712" fg:w="1"/><text x="58.2777%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="58.0277%" y="85" width="0.0815%" height="15" fill="rgb(206,120,28)" fg:x="712" fg:w="1"/><text x="58.2777%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="58.0277%" y="69" width="0.0815%" height="15" fill="rgb(211,59,34)" fg:x="712" fg:w="1"/><text x="58.2777%" y="79.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="58.0277%" y="53" width="0.0815%" height="15" fill="rgb(233,168,5)" fg:x="712" fg:w="1"/><text x="58.2777%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.0277%" y="37" width="0.0815%" height="15" fill="rgb(234,33,13)" fg:x="712" fg:w="1"/><text x="58.2777%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="58.1092%" y="533" width="0.0815%" height="15" fill="rgb(231,150,26)" fg:x="713" fg:w="1"/><text x="58.3592%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="58.1092%" y="517" width="0.0815%" height="15" fill="rgb(217,191,4)" fg:x="713" fg:w="1"/><text x="58.3592%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.1092%" y="501" width="0.0815%" height="15" fill="rgb(246,198,38)" fg:x="713" fg:w="1"/><text x="58.3592%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.1907%" y="293" width="0.0815%" height="15" fill="rgb(245,64,37)" fg:x="714" fg:w="1"/><text x="58.4407%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.1907%" y="277" width="0.0815%" height="15" fill="rgb(250,30,36)" fg:x="714" fg:w="1"/><text x="58.4407%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.73%)</title><rect x="57.6202%" y="565" width="0.7335%" height="15" fill="rgb(217,86,53)" fg:x="707" fg:w="9"/><text x="57.8702%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="58.1092%" y="549" width="0.2445%" height="15" fill="rgb(228,157,16)" fg:x="713" fg:w="3"/><text x="58.3592%" y="559.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="58.1907%" y="533" width="0.1630%" height="15" fill="rgb(217,59,31)" fg:x="714" fg:w="2"/><text x="58.4407%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="58.1907%" y="517" width="0.1630%" height="15" fill="rgb(237,138,41)" fg:x="714" fg:w="2"/><text x="58.4407%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="58.1907%" y="501" width="0.1630%" height="15" fill="rgb(227,91,49)" fg:x="714" fg:w="2"/><text x="58.4407%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="58.1907%" y="485" width="0.1630%" height="15" fill="rgb(247,21,44)" fg:x="714" fg:w="2"/><text x="58.4407%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="58.1907%" y="469" width="0.1630%" height="15" fill="rgb(219,210,51)" fg:x="714" fg:w="2"/><text x="58.4407%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="58.1907%" y="453" width="0.1630%" height="15" fill="rgb(209,140,6)" fg:x="714" fg:w="2"/><text x="58.4407%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="58.1907%" y="437" width="0.1630%" height="15" fill="rgb(221,188,24)" fg:x="714" fg:w="2"/><text x="58.4407%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.1907%" y="421" width="0.1630%" height="15" fill="rgb(232,154,20)" fg:x="714" fg:w="2"/><text x="58.4407%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.1907%" y="405" width="0.1630%" height="15" fill="rgb(244,137,50)" fg:x="714" fg:w="2"/><text x="58.4407%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.1907%" y="389" width="0.1630%" height="15" fill="rgb(225,185,43)" fg:x="714" fg:w="2"/><text x="58.4407%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.1907%" y="373" width="0.1630%" height="15" fill="rgb(213,205,38)" fg:x="714" fg:w="2"/><text x="58.4407%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.1907%" y="357" width="0.1630%" height="15" fill="rgb(236,73,12)" fg:x="714" fg:w="2"/><text x="58.4407%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.1907%" y="341" width="0.1630%" height="15" fill="rgb(235,219,13)" fg:x="714" fg:w="2"/><text x="58.4407%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="58.1907%" y="325" width="0.1630%" height="15" fill="rgb(218,59,36)" fg:x="714" fg:w="2"/><text x="58.4407%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="58.1907%" y="309" width="0.1630%" height="15" fill="rgb(205,110,39)" fg:x="714" fg:w="2"/><text x="58.4407%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.2722%" y="293" width="0.0815%" height="15" fill="rgb(218,206,42)" fg:x="715" fg:w="1"/><text x="58.5222%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="58.2722%" y="277" width="0.0815%" height="15" fill="rgb(248,125,24)" fg:x="715" fg:w="1"/><text x="58.5222%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.2722%" y="261" width="0.0815%" height="15" fill="rgb(242,28,27)" fg:x="715" fg:w="1"/><text x="58.5222%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.2722%" y="245" width="0.0815%" height="15" fill="rgb(216,228,15)" fg:x="715" fg:w="1"/><text x="58.5222%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.2722%" y="229" width="0.0815%" height="15" fill="rgb(235,116,46)" fg:x="715" fg:w="1"/><text x="58.5222%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.3537%" y="533" width="0.0815%" height="15" fill="rgb(224,18,32)" fg:x="716" fg:w="1"/><text x="58.6037%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.3537%" y="517" width="0.0815%" height="15" fill="rgb(252,5,12)" fg:x="716" fg:w="1"/><text x="58.6037%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.3537%" y="501" width="0.0815%" height="15" fill="rgb(251,36,5)" fg:x="716" fg:w="1"/><text x="58.6037%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.3537%" y="485" width="0.0815%" height="15" fill="rgb(217,53,14)" fg:x="716" fg:w="1"/><text x="58.6037%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.3537%" y="469" width="0.0815%" height="15" fill="rgb(215,86,45)" fg:x="716" fg:w="1"/><text x="58.6037%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.3537%" y="453" width="0.0815%" height="15" fill="rgb(242,169,11)" fg:x="716" fg:w="1"/><text x="58.6037%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.3537%" y="437" width="0.0815%" height="15" fill="rgb(211,213,45)" fg:x="716" fg:w="1"/><text x="58.6037%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.3537%" y="421" width="0.0815%" height="15" fill="rgb(205,88,11)" fg:x="716" fg:w="1"/><text x="58.6037%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.3537%" y="405" width="0.0815%" height="15" fill="rgb(252,69,26)" fg:x="716" fg:w="1"/><text x="58.6037%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.3537%" y="389" width="0.0815%" height="15" fill="rgb(246,123,37)" fg:x="716" fg:w="1"/><text x="58.6037%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.3537%" y="373" width="0.0815%" height="15" fill="rgb(212,205,5)" fg:x="716" fg:w="1"/><text x="58.6037%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.3537%" y="357" width="0.0815%" height="15" fill="rgb(253,148,0)" fg:x="716" fg:w="1"/><text x="58.6037%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.3537%" y="341" width="0.0815%" height="15" fill="rgb(239,22,4)" fg:x="716" fg:w="1"/><text x="58.6037%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.3537%" y="325" width="0.0815%" height="15" fill="rgb(226,26,53)" fg:x="716" fg:w="1"/><text x="58.6037%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.3537%" y="309" width="0.0815%" height="15" fill="rgb(225,229,45)" fg:x="716" fg:w="1"/><text x="58.6037%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.4352%" y="469" width="0.0815%" height="15" fill="rgb(220,60,37)" fg:x="717" fg:w="1"/><text x="58.6852%" y="479.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="58.4352%" y="533" width="0.1630%" height="15" fill="rgb(217,180,35)" fg:x="717" fg:w="2"/><text x="58.6852%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="58.4352%" y="517" width="0.1630%" height="15" fill="rgb(229,7,53)" fg:x="717" fg:w="2"/><text x="58.6852%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="58.4352%" y="501" width="0.1630%" height="15" fill="rgb(254,137,3)" fg:x="717" fg:w="2"/><text x="58.6852%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="58.4352%" y="485" width="0.1630%" height="15" fill="rgb(215,140,41)" fg:x="717" fg:w="2"/><text x="58.6852%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="58.5167%" y="469" width="0.0815%" height="15" fill="rgb(250,80,15)" fg:x="718" fg:w="1"/><text x="58.7667%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="58.5167%" y="453" width="0.0815%" height="15" fill="rgb(252,191,6)" fg:x="718" fg:w="1"/><text x="58.7667%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.5167%" y="437" width="0.0815%" height="15" fill="rgb(246,217,18)" fg:x="718" fg:w="1"/><text x="58.7667%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="58.5167%" y="421" width="0.0815%" height="15" fill="rgb(223,93,7)" fg:x="718" fg:w="1"/><text x="58.7667%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.5982%" y="501" width="0.0815%" height="15" fill="rgb(225,55,52)" fg:x="719" fg:w="1"/><text x="58.8482%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.5982%" y="485" width="0.0815%" height="15" fill="rgb(240,31,24)" fg:x="719" fg:w="1"/><text x="58.8482%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.5982%" y="469" width="0.0815%" height="15" fill="rgb(205,56,52)" fg:x="719" fg:w="1"/><text x="58.8482%" y="479.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (14 samples, 1.14%)</title><rect x="57.6202%" y="581" width="1.1410%" height="15" fill="rgb(246,146,12)" fg:x="707" fg:w="14"/><text x="57.8702%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.41%)</title><rect x="58.3537%" y="565" width="0.4075%" height="15" fill="rgb(239,84,36)" fg:x="716" fg:w="5"/><text x="58.6037%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.41%)</title><rect x="58.3537%" y="549" width="0.4075%" height="15" fill="rgb(207,41,40)" fg:x="716" fg:w="5"/><text x="58.6037%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="58.5982%" y="533" width="0.1630%" height="15" fill="rgb(241,179,25)" fg:x="719" fg:w="2"/><text x="58.8482%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.5982%" y="517" width="0.1630%" height="15" fill="rgb(210,0,34)" fg:x="719" fg:w="2"/><text x="58.8482%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="58.6797%" y="501" width="0.0815%" height="15" fill="rgb(225,217,29)" fg:x="720" fg:w="1"/><text x="58.9297%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="58.6797%" y="485" width="0.0815%" height="15" fill="rgb(216,191,38)" fg:x="720" fg:w="1"/><text x="58.9297%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="58.6797%" y="469" width="0.0815%" height="15" fill="rgb(232,140,52)" fg:x="720" fg:w="1"/><text x="58.9297%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.6797%" y="453" width="0.0815%" height="15" fill="rgb(223,158,51)" fg:x="720" fg:w="1"/><text x="58.9297%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.6797%" y="437" width="0.0815%" height="15" fill="rgb(235,29,51)" fg:x="720" fg:w="1"/><text x="58.9297%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.9242%" y="533" width="0.1630%" height="15" fill="rgb(215,181,18)" fg:x="723" fg:w="2"/><text x="59.1742%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.0057%" y="517" width="0.0815%" height="15" fill="rgb(227,125,34)" fg:x="724" fg:w="1"/><text x="59.2557%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.0057%" y="501" width="0.0815%" height="15" fill="rgb(230,197,49)" fg:x="724" fg:w="1"/><text x="59.2557%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.0057%" y="485" width="0.0815%" height="15" fill="rgb(239,141,16)" fg:x="724" fg:w="1"/><text x="59.2557%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.0057%" y="469" width="0.0815%" height="15" fill="rgb(225,105,43)" fg:x="724" fg:w="1"/><text x="59.2557%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.0057%" y="453" width="0.0815%" height="15" fill="rgb(214,131,14)" fg:x="724" fg:w="1"/><text x="59.2557%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.0057%" y="437" width="0.0815%" height="15" fill="rgb(229,177,11)" fg:x="724" fg:w="1"/><text x="59.2557%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.0057%" y="421" width="0.0815%" height="15" fill="rgb(231,180,14)" fg:x="724" fg:w="1"/><text x="59.2557%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.0057%" y="405" width="0.0815%" height="15" fill="rgb(232,88,2)" fg:x="724" fg:w="1"/><text x="59.2557%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.0057%" y="389" width="0.0815%" height="15" fill="rgb(205,220,8)" fg:x="724" fg:w="1"/><text x="59.2557%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.0057%" y="373" width="0.0815%" height="15" fill="rgb(225,23,53)" fg:x="724" fg:w="1"/><text x="59.2557%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.0057%" y="357" width="0.0815%" height="15" fill="rgb(213,62,29)" fg:x="724" fg:w="1"/><text x="59.2557%" y="367.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="59.0057%" y="341" width="0.0815%" height="15" fill="rgb(227,75,7)" fg:x="724" fg:w="1"/><text x="59.2557%" y="351.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="59.0057%" y="325" width="0.0815%" height="15" fill="rgb(207,105,14)" fg:x="724" fg:w="1"/><text x="59.2557%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.0872%" y="293" width="0.0815%" height="15" fill="rgb(245,62,29)" fg:x="725" fg:w="1"/><text x="59.3372%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.0872%" y="277" width="0.0815%" height="15" fill="rgb(236,202,4)" fg:x="725" fg:w="1"/><text x="59.3372%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.0872%" y="261" width="0.0815%" height="15" fill="rgb(250,67,1)" fg:x="725" fg:w="1"/><text x="59.3372%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="59.0872%" y="437" width="0.1630%" height="15" fill="rgb(253,115,44)" fg:x="725" fg:w="2"/><text x="59.3372%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="59.0872%" y="421" width="0.1630%" height="15" fill="rgb(251,139,18)" fg:x="725" fg:w="2"/><text x="59.3372%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.0872%" y="405" width="0.1630%" height="15" fill="rgb(218,22,32)" fg:x="725" fg:w="2"/><text x="59.3372%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.0872%" y="389" width="0.1630%" height="15" fill="rgb(243,53,5)" fg:x="725" fg:w="2"/><text x="59.3372%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="59.0872%" y="373" width="0.1630%" height="15" fill="rgb(227,56,16)" fg:x="725" fg:w="2"/><text x="59.3372%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.0872%" y="357" width="0.1630%" height="15" fill="rgb(245,53,0)" fg:x="725" fg:w="2"/><text x="59.3372%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.0872%" y="341" width="0.1630%" height="15" fill="rgb(216,170,35)" fg:x="725" fg:w="2"/><text x="59.3372%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="59.0872%" y="325" width="0.1630%" height="15" fill="rgb(211,200,8)" fg:x="725" fg:w="2"/><text x="59.3372%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.0872%" y="309" width="0.1630%" height="15" fill="rgb(228,204,44)" fg:x="725" fg:w="2"/><text x="59.3372%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.1687%" y="293" width="0.0815%" height="15" fill="rgb(214,121,17)" fg:x="726" fg:w="1"/><text x="59.4187%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.2502%" y="293" width="0.0815%" height="15" fill="rgb(233,64,38)" fg:x="727" fg:w="1"/><text x="59.5002%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="59.2502%" y="277" width="0.0815%" height="15" fill="rgb(253,54,19)" fg:x="727" fg:w="1"/><text x="59.5002%" y="287.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (4 samples, 0.33%)</title><rect x="59.0872%" y="533" width="0.3260%" height="15" fill="rgb(253,94,18)" fg:x="725" fg:w="4"/><text x="59.3372%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.33%)</title><rect x="59.0872%" y="517" width="0.3260%" height="15" fill="rgb(227,57,52)" fg:x="725" fg:w="4"/><text x="59.3372%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="59.0872%" y="501" width="0.3260%" height="15" fill="rgb(230,228,50)" fg:x="725" fg:w="4"/><text x="59.3372%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.33%)</title><rect x="59.0872%" y="485" width="0.3260%" height="15" fill="rgb(217,205,27)" fg:x="725" fg:w="4"/><text x="59.3372%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.33%)</title><rect x="59.0872%" y="469" width="0.3260%" height="15" fill="rgb(252,71,50)" fg:x="725" fg:w="4"/><text x="59.3372%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.33%)</title><rect x="59.0872%" y="453" width="0.3260%" height="15" fill="rgb(209,86,4)" fg:x="725" fg:w="4"/><text x="59.3372%" y="463.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="59.2502%" y="437" width="0.1630%" height="15" fill="rgb(229,94,0)" fg:x="727" fg:w="2"/><text x="59.5002%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.2502%" y="421" width="0.1630%" height="15" fill="rgb(252,223,21)" fg:x="727" fg:w="2"/><text x="59.5002%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.2502%" y="405" width="0.1630%" height="15" fill="rgb(230,210,4)" fg:x="727" fg:w="2"/><text x="59.5002%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.2502%" y="389" width="0.1630%" height="15" fill="rgb(240,149,38)" fg:x="727" fg:w="2"/><text x="59.5002%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.2502%" y="373" width="0.1630%" height="15" fill="rgb(254,105,20)" fg:x="727" fg:w="2"/><text x="59.5002%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.2502%" y="357" width="0.1630%" height="15" fill="rgb(253,87,46)" fg:x="727" fg:w="2"/><text x="59.5002%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.2502%" y="341" width="0.1630%" height="15" fill="rgb(253,116,33)" fg:x="727" fg:w="2"/><text x="59.5002%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="59.2502%" y="325" width="0.1630%" height="15" fill="rgb(229,198,5)" fg:x="727" fg:w="2"/><text x="59.5002%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.2502%" y="309" width="0.1630%" height="15" fill="rgb(242,38,37)" fg:x="727" fg:w="2"/><text x="59.5002%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.3317%" y="293" width="0.0815%" height="15" fill="rgb(242,69,53)" fg:x="728" fg:w="1"/><text x="59.5817%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="59.4132%" y="533" width="0.1630%" height="15" fill="rgb(249,80,16)" fg:x="729" fg:w="2"/><text x="59.6632%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="59.4947%" y="517" width="0.0815%" height="15" fill="rgb(206,128,11)" fg:x="730" fg:w="1"/><text x="59.7447%" y="527.50"></text></g><g><title>plugins_core::tools::get_contained_keys (11 samples, 0.90%)</title><rect x="58.7612%" y="581" width="0.8965%" height="15" fill="rgb(212,35,20)" fg:x="721" fg:w="11"/><text x="59.0112%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (11 samples, 0.90%)</title><rect x="58.7612%" y="565" width="0.8965%" height="15" fill="rgb(236,79,13)" fg:x="721" fg:w="11"/><text x="59.0112%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (10 samples, 0.81%)</title><rect x="58.8427%" y="549" width="0.8150%" height="15" fill="rgb(233,123,3)" fg:x="722" fg:w="10"/><text x="59.0927%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.5762%" y="533" width="0.0815%" height="15" fill="rgb(214,93,52)" fg:x="731" fg:w="1"/><text x="59.8262%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.5762%" y="517" width="0.0815%" height="15" fill="rgb(251,37,40)" fg:x="731" fg:w="1"/><text x="59.8262%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="59.5762%" y="501" width="0.0815%" height="15" fill="rgb(227,80,54)" fg:x="731" fg:w="1"/><text x="59.8262%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="59.5762%" y="485" width="0.0815%" height="15" fill="rgb(254,48,11)" fg:x="731" fg:w="1"/><text x="59.8262%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="59.5762%" y="469" width="0.0815%" height="15" fill="rgb(235,193,26)" fg:x="731" fg:w="1"/><text x="59.8262%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.5762%" y="453" width="0.0815%" height="15" fill="rgb(229,99,21)" fg:x="731" fg:w="1"/><text x="59.8262%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.5762%" y="437" width="0.0815%" height="15" fill="rgb(211,140,41)" fg:x="731" fg:w="1"/><text x="59.8262%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.6577%" y="565" width="0.0815%" height="15" fill="rgb(240,227,30)" fg:x="732" fg:w="1"/><text x="59.9077%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.6577%" y="549" width="0.0815%" height="15" fill="rgb(215,224,45)" fg:x="732" fg:w="1"/><text x="59.9077%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.6577%" y="533" width="0.0815%" height="15" fill="rgb(206,123,31)" fg:x="732" fg:w="1"/><text x="59.9077%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.6577%" y="517" width="0.0815%" height="15" fill="rgb(210,138,16)" fg:x="732" fg:w="1"/><text x="59.9077%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.6577%" y="501" width="0.0815%" height="15" fill="rgb(228,57,28)" fg:x="732" fg:w="1"/><text x="59.9077%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.6577%" y="485" width="0.0815%" height="15" fill="rgb(242,170,10)" fg:x="732" fg:w="1"/><text x="59.9077%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.6577%" y="469" width="0.0815%" height="15" fill="rgb(228,214,39)" fg:x="732" fg:w="1"/><text x="59.9077%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.6577%" y="453" width="0.0815%" height="15" fill="rgb(218,179,33)" fg:x="732" fg:w="1"/><text x="59.9077%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.6577%" y="437" width="0.0815%" height="15" fill="rgb(235,193,39)" fg:x="732" fg:w="1"/><text x="59.9077%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.6577%" y="421" width="0.0815%" height="15" fill="rgb(219,221,36)" fg:x="732" fg:w="1"/><text x="59.9077%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.6577%" y="405" width="0.0815%" height="15" fill="rgb(248,218,19)" fg:x="732" fg:w="1"/><text x="59.9077%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.6577%" y="389" width="0.0815%" height="15" fill="rgb(205,50,9)" fg:x="732" fg:w="1"/><text x="59.9077%" y="399.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="59.6577%" y="373" width="0.0815%" height="15" fill="rgb(238,81,28)" fg:x="732" fg:w="1"/><text x="59.9077%" y="383.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="59.7392%" y="533" width="0.0815%" height="15" fill="rgb(235,110,19)" fg:x="733" fg:w="1"/><text x="59.9892%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.7392%" y="517" width="0.0815%" height="15" fill="rgb(214,7,14)" fg:x="733" fg:w="1"/><text x="59.9892%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 2.28%)</title><rect x="57.6202%" y="613" width="2.2820%" height="15" fill="rgb(211,77,3)" fg:x="707" fg:w="28"/><text x="57.8702%" y="623.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (28 samples, 2.28%)</title><rect x="57.6202%" y="597" width="2.2820%" height="15" fill="rgb(229,5,9)" fg:x="707" fg:w="28"/><text x="57.8702%" y="607.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (3 samples, 0.24%)</title><rect x="59.6577%" y="581" width="0.2445%" height="15" fill="rgb(225,90,11)" fg:x="732" fg:w="3"/><text x="59.9077%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="59.7392%" y="565" width="0.1630%" height="15" fill="rgb(242,56,8)" fg:x="733" fg:w="2"/><text x="59.9892%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="59.7392%" y="549" width="0.1630%" height="15" fill="rgb(249,212,39)" fg:x="733" fg:w="2"/><text x="59.9892%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.8207%" y="533" width="0.0815%" height="15" fill="rgb(236,90,9)" fg:x="734" fg:w="1"/><text x="60.0707%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8207%" y="517" width="0.0815%" height="15" fill="rgb(206,88,35)" fg:x="734" fg:w="1"/><text x="60.0707%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.8207%" y="501" width="0.0815%" height="15" fill="rgb(205,126,30)" fg:x="734" fg:w="1"/><text x="60.0707%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.8207%" y="485" width="0.0815%" height="15" fill="rgb(230,176,12)" fg:x="734" fg:w="1"/><text x="60.0707%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="59.8207%" y="469" width="0.0815%" height="15" fill="rgb(243,19,9)" fg:x="734" fg:w="1"/><text x="60.0707%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="59.9022%" y="549" width="0.1630%" height="15" fill="rgb(245,171,17)" fg:x="735" fg:w="2"/><text x="60.1522%" y="559.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="59.9022%" y="533" width="0.1630%" height="15" fill="rgb(227,52,21)" fg:x="735" fg:w="2"/><text x="60.1522%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.24%)</title><rect x="59.9022%" y="565" width="0.2445%" height="15" fill="rgb(238,69,14)" fg:x="735" fg:w="3"/><text x="60.1522%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="60.0652%" y="549" width="0.0815%" height="15" fill="rgb(241,156,39)" fg:x="737" fg:w="1"/><text x="60.3152%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="60.0652%" y="533" width="0.0815%" height="15" fill="rgb(212,227,28)" fg:x="737" fg:w="1"/><text x="60.3152%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.0652%" y="517" width="0.0815%" height="15" fill="rgb(209,118,27)" fg:x="737" fg:w="1"/><text x="60.3152%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.0652%" y="501" width="0.0815%" height="15" fill="rgb(226,102,5)" fg:x="737" fg:w="1"/><text x="60.3152%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.0652%" y="485" width="0.0815%" height="15" fill="rgb(223,34,3)" fg:x="737" fg:w="1"/><text x="60.3152%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="60.0652%" y="469" width="0.0815%" height="15" fill="rgb(221,81,38)" fg:x="737" fg:w="1"/><text x="60.3152%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="60.0652%" y="453" width="0.0815%" height="15" fill="rgb(236,219,28)" fg:x="737" fg:w="1"/><text x="60.3152%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.0652%" y="437" width="0.0815%" height="15" fill="rgb(213,200,14)" fg:x="737" fg:w="1"/><text x="60.3152%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.0652%" y="421" width="0.0815%" height="15" fill="rgb(240,33,19)" fg:x="737" fg:w="1"/><text x="60.3152%" y="431.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="60.0652%" y="405" width="0.0815%" height="15" fill="rgb(233,113,27)" fg:x="737" fg:w="1"/><text x="60.3152%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="60.0652%" y="389" width="0.0815%" height="15" fill="rgb(220,221,18)" fg:x="737" fg:w="1"/><text x="60.3152%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.0652%" y="373" width="0.0815%" height="15" fill="rgb(238,92,8)" fg:x="737" fg:w="1"/><text x="60.3152%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.0652%" y="357" width="0.0815%" height="15" fill="rgb(222,164,16)" fg:x="737" fg:w="1"/><text x="60.3152%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="60.0652%" y="341" width="0.0815%" height="15" fill="rgb(241,119,3)" fg:x="737" fg:w="1"/><text x="60.3152%" y="351.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="60.3912%" y="357" width="0.1630%" height="15" fill="rgb(241,44,8)" fg:x="741" fg:w="2"/><text x="60.6412%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.3912%" y="341" width="0.1630%" height="15" fill="rgb(230,36,40)" fg:x="741" fg:w="2"/><text x="60.6412%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="60.3912%" y="325" width="0.1630%" height="15" fill="rgb(243,16,36)" fg:x="741" fg:w="2"/><text x="60.6412%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.4727%" y="309" width="0.0815%" height="15" fill="rgb(231,4,26)" fg:x="742" fg:w="1"/><text x="60.7227%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.4727%" y="293" width="0.0815%" height="15" fill="rgb(240,9,31)" fg:x="742" fg:w="1"/><text x="60.7227%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="60.4727%" y="277" width="0.0815%" height="15" fill="rgb(207,173,15)" fg:x="742" fg:w="1"/><text x="60.7227%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.33%)</title><rect x="60.3912%" y="373" width="0.3260%" height="15" fill="rgb(224,192,53)" fg:x="741" fg:w="4"/><text x="60.6412%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="60.5542%" y="357" width="0.1630%" height="15" fill="rgb(223,67,28)" fg:x="743" fg:w="2"/><text x="60.8042%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.6357%" y="341" width="0.0815%" height="15" fill="rgb(211,20,47)" fg:x="744" fg:w="1"/><text x="60.8857%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="60.3912%" y="389" width="0.4890%" height="15" fill="rgb(240,228,2)" fg:x="741" fg:w="6"/><text x="60.6412%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="60.7172%" y="373" width="0.1630%" height="15" fill="rgb(248,151,12)" fg:x="745" fg:w="2"/><text x="60.9672%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.7172%" y="357" width="0.1630%" height="15" fill="rgb(244,8,39)" fg:x="745" fg:w="2"/><text x="60.9672%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.81%)</title><rect x="60.3097%" y="405" width="0.8150%" height="15" fill="rgb(222,26,8)" fg:x="740" fg:w="10"/><text x="60.5597%" y="415.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="60.8802%" y="389" width="0.2445%" height="15" fill="rgb(213,106,44)" fg:x="747" fg:w="3"/><text x="61.1302%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="60.8802%" y="373" width="0.2445%" height="15" fill="rgb(214,129,20)" fg:x="747" fg:w="3"/><text x="61.1302%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="60.9617%" y="357" width="0.1630%" height="15" fill="rgb(212,32,13)" fg:x="748" fg:w="2"/><text x="61.2117%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.9617%" y="341" width="0.1630%" height="15" fill="rgb(208,168,33)" fg:x="748" fg:w="2"/><text x="61.2117%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="60.9617%" y="325" width="0.1630%" height="15" fill="rgb(231,207,8)" fg:x="748" fg:w="2"/><text x="61.2117%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.0432%" y="309" width="0.0815%" height="15" fill="rgb(235,219,23)" fg:x="749" fg:w="1"/><text x="61.2932%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.0432%" y="293" width="0.0815%" height="15" fill="rgb(226,216,26)" fg:x="749" fg:w="1"/><text x="61.2932%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.1247%" y="405" width="0.0815%" height="15" fill="rgb(239,137,16)" fg:x="750" fg:w="1"/><text x="61.3747%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1247%" y="389" width="0.0815%" height="15" fill="rgb(207,12,36)" fg:x="750" fg:w="1"/><text x="61.3747%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.06%)</title><rect x="60.3097%" y="421" width="1.0595%" height="15" fill="rgb(210,214,24)" fg:x="740" fg:w="13"/><text x="60.5597%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.2062%" y="405" width="0.1630%" height="15" fill="rgb(206,56,30)" fg:x="751" fg:w="2"/><text x="61.4562%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="61.2877%" y="389" width="0.0815%" height="15" fill="rgb(228,143,26)" fg:x="752" fg:w="1"/><text x="61.5377%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 1.30%)</title><rect x="60.3097%" y="437" width="1.3040%" height="15" fill="rgb(216,218,46)" fg:x="740" fg:w="16"/><text x="60.5597%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="61.3692%" y="421" width="0.2445%" height="15" fill="rgb(206,6,19)" fg:x="753" fg:w="3"/><text x="61.6192%" y="431.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="61.3692%" y="405" width="0.2445%" height="15" fill="rgb(239,177,51)" fg:x="753" fg:w="3"/><text x="61.6192%" y="415.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (17 samples, 1.39%)</title><rect x="60.3097%" y="453" width="1.3855%" height="15" fill="rgb(216,55,25)" fg:x="740" fg:w="17"/><text x="60.5597%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="61.6137%" y="437" width="0.0815%" height="15" fill="rgb(231,163,29)" fg:x="756" fg:w="1"/><text x="61.8637%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="61.6137%" y="421" width="0.0815%" height="15" fill="rgb(232,149,50)" fg:x="756" fg:w="1"/><text x="61.8637%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 1.63%)</title><rect x="60.1467%" y="469" width="1.6300%" height="15" fill="rgb(223,142,48)" fg:x="738" fg:w="20"/><text x="60.3967%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.6952%" y="453" width="0.0815%" height="15" fill="rgb(245,83,23)" fg:x="757" fg:w="1"/><text x="61.9452%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="61.6952%" y="437" width="0.0815%" height="15" fill="rgb(224,63,2)" fg:x="757" fg:w="1"/><text x="61.9452%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="61.6952%" y="421" width="0.0815%" height="15" fill="rgb(218,65,53)" fg:x="757" fg:w="1"/><text x="61.9452%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.7767%" y="453" width="0.1630%" height="15" fill="rgb(221,84,29)" fg:x="758" fg:w="2"/><text x="62.0267%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 1.87%)</title><rect x="60.1467%" y="517" width="1.8745%" height="15" fill="rgb(234,0,32)" fg:x="738" fg:w="23"/><text x="60.3967%" y="527.50">&lt;..</text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (23 samples, 1.87%)</title><rect x="60.1467%" y="501" width="1.8745%" height="15" fill="rgb(206,20,16)" fg:x="738" fg:w="23"/><text x="60.3967%" y="511.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (23 samples, 1.87%)</title><rect x="60.1467%" y="485" width="1.8745%" height="15" fill="rgb(244,172,18)" fg:x="738" fg:w="23"/><text x="60.3967%" y="495.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.24%)</title><rect x="61.7767%" y="469" width="0.2445%" height="15" fill="rgb(254,133,1)" fg:x="758" fg:w="3"/><text x="62.0267%" y="479.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="61.9397%" y="453" width="0.0815%" height="15" fill="rgb(222,206,41)" fg:x="760" fg:w="1"/><text x="62.1897%" y="463.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="61.9397%" y="437" width="0.0815%" height="15" fill="rgb(212,3,42)" fg:x="760" fg:w="1"/><text x="62.1897%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (24 samples, 1.96%)</title><rect x="60.1467%" y="549" width="1.9560%" height="15" fill="rgb(241,11,4)" fg:x="738" fg:w="24"/><text x="60.3967%" y="559.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (24 samples, 1.96%)</title><rect x="60.1467%" y="533" width="1.9560%" height="15" fill="rgb(205,19,26)" fg:x="738" fg:w="24"/><text x="60.3967%" y="543.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="62.0212%" y="517" width="0.0815%" height="15" fill="rgb(210,179,32)" fg:x="761" fg:w="1"/><text x="62.2712%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.0212%" y="501" width="0.0815%" height="15" fill="rgb(227,116,49)" fg:x="761" fg:w="1"/><text x="62.2712%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="62.1842%" y="501" width="0.0815%" height="15" fill="rgb(211,146,6)" fg:x="763" fg:w="1"/><text x="62.4342%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.1842%" y="485" width="0.0815%" height="15" fill="rgb(219,44,39)" fg:x="763" fg:w="1"/><text x="62.4342%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2657%" y="469" width="0.0815%" height="15" fill="rgb(234,128,11)" fg:x="764" fg:w="1"/><text x="62.5157%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.3472%" y="469" width="0.0815%" height="15" fill="rgb(220,183,53)" fg:x="765" fg:w="1"/><text x="62.5972%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="62.4287%" y="453" width="0.1630%" height="15" fill="rgb(213,219,32)" fg:x="766" fg:w="2"/><text x="62.6787%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="62.4287%" y="437" width="0.1630%" height="15" fill="rgb(232,156,16)" fg:x="766" fg:w="2"/><text x="62.6787%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.4287%" y="421" width="0.1630%" height="15" fill="rgb(246,135,34)" fg:x="766" fg:w="2"/><text x="62.6787%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.5917%" y="389" width="0.0815%" height="15" fill="rgb(241,99,0)" fg:x="768" fg:w="1"/><text x="62.8417%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.5917%" y="373" width="0.0815%" height="15" fill="rgb(222,103,45)" fg:x="768" fg:w="1"/><text x="62.8417%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5917%" y="357" width="0.0815%" height="15" fill="rgb(212,57,4)" fg:x="768" fg:w="1"/><text x="62.8417%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (6 samples, 0.49%)</title><rect x="62.2657%" y="501" width="0.4890%" height="15" fill="rgb(215,68,47)" fg:x="764" fg:w="6"/><text x="62.5157%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="62.2657%" y="485" width="0.4890%" height="15" fill="rgb(230,84,2)" fg:x="764" fg:w="6"/><text x="62.5157%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="62.4287%" y="469" width="0.3260%" height="15" fill="rgb(220,102,14)" fg:x="766" fg:w="4"/><text x="62.6787%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="62.5917%" y="453" width="0.1630%" height="15" fill="rgb(240,10,32)" fg:x="768" fg:w="2"/><text x="62.8417%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="62.5917%" y="437" width="0.1630%" height="15" fill="rgb(215,47,27)" fg:x="768" fg:w="2"/><text x="62.8417%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="62.5917%" y="421" width="0.1630%" height="15" fill="rgb(233,188,43)" fg:x="768" fg:w="2"/><text x="62.8417%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="62.5917%" y="405" width="0.1630%" height="15" fill="rgb(253,190,1)" fg:x="768" fg:w="2"/><text x="62.8417%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="62.6732%" y="389" width="0.0815%" height="15" fill="rgb(206,114,52)" fg:x="769" fg:w="1"/><text x="62.9232%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="62.6732%" y="373" width="0.0815%" height="15" fill="rgb(233,120,37)" fg:x="769" fg:w="1"/><text x="62.9232%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="62.7547%" y="501" width="0.0815%" height="15" fill="rgb(214,52,39)" fg:x="770" fg:w="1"/><text x="63.0047%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="62.7547%" y="485" width="0.0815%" height="15" fill="rgb(223,80,29)" fg:x="770" fg:w="1"/><text x="63.0047%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="62.8362%" y="453" width="0.0815%" height="15" fill="rgb(230,101,40)" fg:x="771" fg:w="1"/><text x="63.0862%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="62.8362%" y="437" width="0.0815%" height="15" fill="rgb(219,211,8)" fg:x="771" fg:w="1"/><text x="63.0862%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="62.8362%" y="421" width="0.0815%" height="15" fill="rgb(252,126,28)" fg:x="771" fg:w="1"/><text x="63.0862%" y="431.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (35 samples, 2.85%)</title><rect x="60.1467%" y="565" width="2.8525%" height="15" fill="rgb(215,56,38)" fg:x="738" fg:w="35"/><text x="60.3967%" y="575.50">&lt;r..</text></g><g><title>kernel::model::EntityPtr::to_json_value (11 samples, 0.90%)</title><rect x="62.1027%" y="549" width="0.8965%" height="15" fill="rgb(249,55,44)" fg:x="762" fg:w="11"/><text x="62.3527%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (11 samples, 0.90%)</title><rect x="62.1027%" y="533" width="0.8965%" height="15" fill="rgb(220,221,32)" fg:x="762" fg:w="11"/><text x="62.3527%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.90%)</title><rect x="62.1027%" y="517" width="0.8965%" height="15" fill="rgb(212,216,41)" fg:x="762" fg:w="11"/><text x="62.3527%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="62.8362%" y="501" width="0.1630%" height="15" fill="rgb(228,213,43)" fg:x="771" fg:w="2"/><text x="63.0862%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="62.8362%" y="485" width="0.1630%" height="15" fill="rgb(211,31,26)" fg:x="771" fg:w="2"/><text x="63.0862%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="62.8362%" y="469" width="0.1630%" height="15" fill="rgb(229,202,19)" fg:x="771" fg:w="2"/><text x="63.0862%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="62.9177%" y="453" width="0.0815%" height="15" fill="rgb(229,105,46)" fg:x="772" fg:w="1"/><text x="63.1677%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="62.9177%" y="437" width="0.0815%" height="15" fill="rgb(235,108,1)" fg:x="772" fg:w="1"/><text x="63.1677%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.9177%" y="421" width="0.0815%" height="15" fill="rgb(245,111,35)" fg:x="772" fg:w="1"/><text x="63.1677%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.9177%" y="405" width="0.0815%" height="15" fill="rgb(219,185,31)" fg:x="772" fg:w="1"/><text x="63.1677%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9177%" y="389" width="0.0815%" height="15" fill="rgb(214,4,43)" fg:x="772" fg:w="1"/><text x="63.1677%" y="399.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (653 samples, 53.22%)</title><rect x="9.8615%" y="709" width="53.2192%" height="15" fill="rgb(235,227,40)" fg:x="121" fg:w="653"/><text x="10.1115%" y="719.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (73 samples, 5.95%)</title><rect x="57.1312%" y="693" width="5.9495%" height="15" fill="rgb(230,88,30)" fg:x="701" fg:w="73"/><text x="57.3812%" y="703.50">kernel::..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (73 samples, 5.95%)</title><rect x="57.1312%" y="677" width="5.9495%" height="15" fill="rgb(216,217,1)" fg:x="701" fg:w="73"/><text x="57.3812%" y="687.50">&lt;plugins..</text></g><g><title>plugins_rpc::querying::have_surroundings (70 samples, 5.70%)</title><rect x="57.3757%" y="661" width="5.7050%" height="15" fill="rgb(248,139,50)" fg:x="704" fg:w="70"/><text x="57.6257%" y="671.50">plugins..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (70 samples, 5.70%)</title><rect x="57.3757%" y="645" width="5.7050%" height="15" fill="rgb(233,1,21)" fg:x="704" fg:w="70"/><text x="57.6257%" y="655.50">&lt;plugin..</text></g><g><title>core::iter::adapters::try_process (67 samples, 5.46%)</title><rect x="57.6202%" y="629" width="5.4605%" height="15" fill="rgb(215,183,12)" fg:x="707" fg:w="67"/><text x="57.8702%" y="639.50">core::i..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (39 samples, 3.18%)</title><rect x="59.9022%" y="613" width="3.1785%" height="15" fill="rgb(229,104,42)" fg:x="735" fg:w="39"/><text x="60.1522%" y="623.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 3.18%)</title><rect x="59.9022%" y="597" width="3.1785%" height="15" fill="rgb(243,34,48)" fg:x="735" fg:w="39"/><text x="60.1522%" y="607.50">&lt;co..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (39 samples, 3.18%)</title><rect x="59.9022%" y="581" width="3.1785%" height="15" fill="rgb(239,11,44)" fg:x="735" fg:w="39"/><text x="60.1522%" y="591.50">plu..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="62.9992%" y="565" width="0.0815%" height="15" fill="rgb(231,98,35)" fg:x="773" fg:w="1"/><text x="63.2492%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.9992%" y="549" width="0.0815%" height="15" fill="rgb(233,28,25)" fg:x="773" fg:w="1"/><text x="63.2492%" y="559.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="63.0807%" y="661" width="0.0815%" height="15" fill="rgb(234,123,11)" fg:x="774" fg:w="1"/><text x="63.3307%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.0807%" y="645" width="0.0815%" height="15" fill="rgb(220,69,3)" fg:x="774" fg:w="1"/><text x="63.3307%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.2437%" y="581" width="0.0815%" height="15" fill="rgb(214,64,36)" fg:x="776" fg:w="1"/><text x="63.4937%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2437%" y="565" width="0.0815%" height="15" fill="rgb(211,138,32)" fg:x="776" fg:w="1"/><text x="63.4937%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.2437%" y="549" width="0.0815%" height="15" fill="rgb(213,118,47)" fg:x="776" fg:w="1"/><text x="63.4937%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.2437%" y="533" width="0.0815%" height="15" fill="rgb(243,124,49)" fg:x="776" fg:w="1"/><text x="63.4937%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.2437%" y="517" width="0.0815%" height="15" fill="rgb(221,30,28)" fg:x="776" fg:w="1"/><text x="63.4937%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.2437%" y="501" width="0.0815%" height="15" fill="rgb(246,37,13)" fg:x="776" fg:w="1"/><text x="63.4937%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.33%)</title><rect x="63.0807%" y="677" width="0.3260%" height="15" fill="rgb(249,66,14)" fg:x="774" fg:w="4"/><text x="63.3307%" y="687.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="63.1622%" y="661" width="0.2445%" height="15" fill="rgb(213,166,5)" fg:x="775" fg:w="3"/><text x="63.4122%" y="671.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="63.1622%" y="645" width="0.2445%" height="15" fill="rgb(221,66,24)" fg:x="775" fg:w="3"/><text x="63.4122%" y="655.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="63.1622%" y="629" width="0.2445%" height="15" fill="rgb(210,132,17)" fg:x="775" fg:w="3"/><text x="63.4122%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="63.1622%" y="613" width="0.2445%" height="15" fill="rgb(243,202,5)" fg:x="775" fg:w="3"/><text x="63.4122%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="63.1622%" y="597" width="0.2445%" height="15" fill="rgb(233,70,48)" fg:x="775" fg:w="3"/><text x="63.4122%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.3252%" y="581" width="0.0815%" height="15" fill="rgb(238,41,26)" fg:x="777" fg:w="1"/><text x="63.5752%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.3252%" y="565" width="0.0815%" height="15" fill="rgb(241,19,31)" fg:x="777" fg:w="1"/><text x="63.5752%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.3252%" y="549" width="0.0815%" height="15" fill="rgb(214,76,10)" fg:x="777" fg:w="1"/><text x="63.5752%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.3252%" y="533" width="0.0815%" height="15" fill="rgb(254,202,22)" fg:x="777" fg:w="1"/><text x="63.5752%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.3252%" y="517" width="0.0815%" height="15" fill="rgb(214,72,24)" fg:x="777" fg:w="1"/><text x="63.5752%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.3252%" y="501" width="0.0815%" height="15" fill="rgb(221,92,46)" fg:x="777" fg:w="1"/><text x="63.5752%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.3252%" y="485" width="0.0815%" height="15" fill="rgb(246,13,50)" fg:x="777" fg:w="1"/><text x="63.5752%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.41%)</title><rect x="63.0807%" y="693" width="0.4075%" height="15" fill="rgb(240,165,38)" fg:x="774" fg:w="5"/><text x="63.3307%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="63.4067%" y="677" width="0.0815%" height="15" fill="rgb(241,24,51)" fg:x="778" fg:w="1"/><text x="63.6567%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="63.4067%" y="661" width="0.0815%" height="15" fill="rgb(227,51,44)" fg:x="778" fg:w="1"/><text x="63.6567%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="63.4067%" y="645" width="0.0815%" height="15" fill="rgb(231,121,3)" fg:x="778" fg:w="1"/><text x="63.6567%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="63.4067%" y="629" width="0.0815%" height="15" fill="rgb(245,3,41)" fg:x="778" fg:w="1"/><text x="63.6567%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="63.4067%" y="613" width="0.0815%" height="15" fill="rgb(214,13,26)" fg:x="778" fg:w="1"/><text x="63.6567%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="63.4067%" y="597" width="0.0815%" height="15" fill="rgb(252,75,11)" fg:x="778" fg:w="1"/><text x="63.6567%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="63.4067%" y="581" width="0.0815%" height="15" fill="rgb(218,226,17)" fg:x="778" fg:w="1"/><text x="63.6567%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="63.4067%" y="565" width="0.0815%" height="15" fill="rgb(248,89,38)" fg:x="778" fg:w="1"/><text x="63.6567%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="63.4067%" y="549" width="0.0815%" height="15" fill="rgb(237,73,46)" fg:x="778" fg:w="1"/><text x="63.6567%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="63.4067%" y="533" width="0.0815%" height="15" fill="rgb(242,78,33)" fg:x="778" fg:w="1"/><text x="63.6567%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="63.4882%" y="693" width="0.0815%" height="15" fill="rgb(235,60,3)" fg:x="779" fg:w="1"/><text x="63.7382%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="63.4882%" y="677" width="0.0815%" height="15" fill="rgb(216,172,19)" fg:x="779" fg:w="1"/><text x="63.7382%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4882%" y="661" width="0.0815%" height="15" fill="rgb(227,6,42)" fg:x="779" fg:w="1"/><text x="63.7382%" y="671.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (660 samples, 53.79%)</title><rect x="9.8615%" y="725" width="53.7897%" height="15" fill="rgb(223,207,42)" fg:x="121" fg:w="660"/><text x="10.1115%" y="735.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (7 samples, 0.57%)</title><rect x="63.0807%" y="709" width="0.5705%" height="15" fill="rgb(246,138,30)" fg:x="774" fg:w="7"/><text x="63.3307%" y="719.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="63.5697%" y="693" width="0.0815%" height="15" fill="rgb(251,199,47)" fg:x="780" fg:w="1"/><text x="63.8197%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="63.5697%" y="677" width="0.0815%" height="15" fill="rgb(228,218,44)" fg:x="780" fg:w="1"/><text x="63.8197%" y="687.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="63.5697%" y="661" width="0.0815%" height="15" fill="rgb(220,68,6)" fg:x="780" fg:w="1"/><text x="63.8197%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.5697%" y="645" width="0.0815%" height="15" fill="rgb(240,60,26)" fg:x="780" fg:w="1"/><text x="63.8197%" y="655.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (661 samples, 53.87%)</title><rect x="9.8615%" y="741" width="53.8712%" height="15" fill="rgb(211,200,19)" fg:x="121" fg:w="661"/><text x="10.1115%" y="751.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;plugins_core::looking::parser::LookActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="63.6512%" y="725" width="0.0815%" height="15" fill="rgb(242,145,30)" fg:x="781" fg:w="1"/><text x="63.9012%" y="735.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="63.6512%" y="709" width="0.0815%" height="15" fill="rgb(225,64,13)" fg:x="781" fg:w="1"/><text x="63.9012%" y="719.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="63.6512%" y="693" width="0.0815%" height="15" fill="rgb(218,103,35)" fg:x="781" fg:w="1"/><text x="63.9012%" y="703.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (663 samples, 54.03%)</title><rect x="9.7800%" y="821" width="54.0342%" height="15" fill="rgb(216,93,46)" fg:x="120" fg:w="663"/><text x="10.0300%" y="831.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (663 samples, 54.03%)</title><rect x="9.7800%" y="805" width="54.0342%" height="15" fill="rgb(225,159,27)" fg:x="120" fg:w="663"/><text x="10.0300%" y="815.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (663 samples, 54.03%)</title><rect x="9.7800%" y="789" width="54.0342%" height="15" fill="rgb(225,204,11)" fg:x="120" fg:w="663"/><text x="10.0300%" y="799.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (663 samples, 54.03%)</title><rect x="9.7800%" y="773" width="54.0342%" height="15" fill="rgb(205,56,4)" fg:x="120" fg:w="663"/><text x="10.0300%" y="783.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (663 samples, 54.03%)</title><rect x="9.7800%" y="757" width="54.0342%" height="15" fill="rgb(206,6,35)" fg:x="120" fg:w="663"/><text x="10.0300%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.7327%" y="741" width="0.0815%" height="15" fill="rgb(247,73,52)" fg:x="782" fg:w="1"/><text x="63.9827%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.7327%" y="725" width="0.0815%" height="15" fill="rgb(246,97,4)" fg:x="782" fg:w="1"/><text x="63.9827%" y="735.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.7327%" y="709" width="0.0815%" height="15" fill="rgb(212,37,15)" fg:x="782" fg:w="1"/><text x="63.9827%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (784 samples, 63.90%)</title><rect x="0.0000%" y="869" width="63.8957%" height="15" fill="rgb(208,130,40)" fg:x="0" fg:w="784"/><text x="0.2500%" y="879.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (784 samples, 63.90%)</title><rect x="0.0000%" y="853" width="63.8957%" height="15" fill="rgb(236,55,29)" fg:x="0" fg:w="784"/><text x="0.2500%" y="863.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (784 samples, 63.90%)</title><rect x="0.0000%" y="837" width="63.8957%" height="15" fill="rgb(209,156,45)" fg:x="0" fg:w="784"/><text x="0.2500%" y="847.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="63.8142%" y="821" width="0.0815%" height="15" fill="rgb(249,107,4)" fg:x="783" fg:w="1"/><text x="64.0642%" y="831.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="63.8142%" y="805" width="0.0815%" height="15" fill="rgb(227,7,13)" fg:x="783" fg:w="1"/><text x="64.0642%" y="815.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8957%" y="773" width="0.0815%" height="15" fill="rgb(250,129,14)" fg:x="784" fg:w="1"/><text x="64.1457%" y="783.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="63.9772%" y="725" width="0.1630%" height="15" fill="rgb(229,92,13)" fg:x="785" fg:w="2"/><text x="64.2272%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.1402%" y="677" width="0.0815%" height="15" fill="rgb(245,98,39)" fg:x="787" fg:w="1"/><text x="64.3902%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="64.1402%" y="661" width="0.0815%" height="15" fill="rgb(234,135,48)" fg:x="787" fg:w="1"/><text x="64.3902%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.1402%" y="645" width="0.0815%" height="15" fill="rgb(230,98,28)" fg:x="787" fg:w="1"/><text x="64.3902%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="63.8957%" y="821" width="0.4075%" height="15" fill="rgb(223,121,0)" fg:x="784" fg:w="5"/><text x="64.1457%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (5 samples, 0.41%)</title><rect x="63.8957%" y="805" width="0.4075%" height="15" fill="rgb(234,173,33)" fg:x="784" fg:w="5"/><text x="64.1457%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="63.8957%" y="789" width="0.4075%" height="15" fill="rgb(245,47,8)" fg:x="784" fg:w="5"/><text x="64.1457%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (4 samples, 0.33%)</title><rect x="63.9772%" y="773" width="0.3260%" height="15" fill="rgb(205,17,20)" fg:x="785" fg:w="4"/><text x="64.2272%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="63.9772%" y="757" width="0.3260%" height="15" fill="rgb(232,151,16)" fg:x="785" fg:w="4"/><text x="64.2272%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="63.9772%" y="741" width="0.3260%" height="15" fill="rgb(208,30,32)" fg:x="785" fg:w="4"/><text x="64.2272%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="64.1402%" y="725" width="0.1630%" height="15" fill="rgb(254,26,3)" fg:x="787" fg:w="2"/><text x="64.3902%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="64.1402%" y="709" width="0.1630%" height="15" fill="rgb(240,177,30)" fg:x="787" fg:w="2"/><text x="64.3902%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="64.1402%" y="693" width="0.1630%" height="15" fill="rgb(248,76,44)" fg:x="787" fg:w="2"/><text x="64.3902%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.2217%" y="677" width="0.0815%" height="15" fill="rgb(241,186,54)" fg:x="788" fg:w="1"/><text x="64.4717%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2217%" y="661" width="0.0815%" height="15" fill="rgb(249,171,29)" fg:x="788" fg:w="1"/><text x="64.4717%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.3032%" y="677" width="0.0815%" height="15" fill="rgb(237,151,44)" fg:x="789" fg:w="1"/><text x="64.5532%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.3847%" y="677" width="0.0815%" height="15" fill="rgb(228,174,30)" fg:x="790" fg:w="1"/><text x="64.6347%" y="687.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="64.3032%" y="741" width="0.2445%" height="15" fill="rgb(252,14,37)" fg:x="789" fg:w="3"/><text x="64.5532%" y="751.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="64.3032%" y="725" width="0.2445%" height="15" fill="rgb(207,111,40)" fg:x="789" fg:w="3"/><text x="64.5532%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="64.3032%" y="709" width="0.2445%" height="15" fill="rgb(248,171,54)" fg:x="789" fg:w="3"/><text x="64.5532%" y="719.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="64.3032%" y="693" width="0.2445%" height="15" fill="rgb(211,127,2)" fg:x="789" fg:w="3"/><text x="64.5532%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.4662%" y="677" width="0.0815%" height="15" fill="rgb(236,87,47)" fg:x="791" fg:w="1"/><text x="64.7162%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.4662%" y="661" width="0.0815%" height="15" fill="rgb(223,190,45)" fg:x="791" fg:w="1"/><text x="64.7162%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.4662%" y="645" width="0.0815%" height="15" fill="rgb(215,5,16)" fg:x="791" fg:w="1"/><text x="64.7162%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.4662%" y="629" width="0.0815%" height="15" fill="rgb(252,82,33)" fg:x="791" fg:w="1"/><text x="64.7162%" y="639.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="64.4662%" y="613" width="0.0815%" height="15" fill="rgb(247,213,44)" fg:x="791" fg:w="1"/><text x="64.7162%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.33%)</title><rect x="64.3032%" y="789" width="0.3260%" height="15" fill="rgb(205,196,44)" fg:x="789" fg:w="4"/><text x="64.5532%" y="799.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.33%)</title><rect x="64.3032%" y="773" width="0.3260%" height="15" fill="rgb(237,96,54)" fg:x="789" fg:w="4"/><text x="64.5532%" y="783.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.33%)</title><rect x="64.3032%" y="757" width="0.3260%" height="15" fill="rgb(230,113,34)" fg:x="789" fg:w="4"/><text x="64.5532%" y="767.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="64.5477%" y="741" width="0.0815%" height="15" fill="rgb(221,224,12)" fg:x="792" fg:w="1"/><text x="64.7977%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.5477%" y="725" width="0.0815%" height="15" fill="rgb(219,112,44)" fg:x="792" fg:w="1"/><text x="64.7977%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.5477%" y="709" width="0.0815%" height="15" fill="rgb(210,31,13)" fg:x="792" fg:w="1"/><text x="64.7977%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.5477%" y="693" width="0.0815%" height="15" fill="rgb(230,25,16)" fg:x="792" fg:w="1"/><text x="64.7977%" y="703.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.5477%" y="677" width="0.0815%" height="15" fill="rgb(246,108,53)" fg:x="792" fg:w="1"/><text x="64.7977%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.5477%" y="661" width="0.0815%" height="15" fill="rgb(241,172,50)" fg:x="792" fg:w="1"/><text x="64.7977%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.5477%" y="645" width="0.0815%" height="15" fill="rgb(235,141,10)" fg:x="792" fg:w="1"/><text x="64.7977%" y="655.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="64.6292%" y="725" width="0.0815%" height="15" fill="rgb(220,174,43)" fg:x="793" fg:w="1"/><text x="64.8792%" y="735.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="64.6292%" y="709" width="0.0815%" height="15" fill="rgb(215,181,40)" fg:x="793" fg:w="1"/><text x="64.8792%" y="719.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.49%)</title><rect x="64.3032%" y="821" width="0.4890%" height="15" fill="rgb(230,97,2)" fg:x="789" fg:w="6"/><text x="64.5532%" y="831.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.49%)</title><rect x="64.3032%" y="805" width="0.4890%" height="15" fill="rgb(211,25,27)" fg:x="789" fg:w="6"/><text x="64.5532%" y="815.50"></text></g><g><title>engine::session::Session::initialize (2 samples, 0.16%)</title><rect x="64.6292%" y="789" width="0.1630%" height="15" fill="rgb(230,87,26)" fg:x="793" fg:w="2"/><text x="64.8792%" y="799.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (2 samples, 0.16%)</title><rect x="64.6292%" y="773" width="0.1630%" height="15" fill="rgb(227,160,17)" fg:x="793" fg:w="2"/><text x="64.8792%" y="783.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="64.6292%" y="757" width="0.1630%" height="15" fill="rgb(244,85,34)" fg:x="793" fg:w="2"/><text x="64.8792%" y="767.50"></text></g><g><title>libloading::os::unix::Library::open (2 samples, 0.16%)</title><rect x="64.6292%" y="741" width="0.1630%" height="15" fill="rgb(207,70,0)" fg:x="793" fg:w="2"/><text x="64.8792%" y="751.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="64.7107%" y="725" width="0.0815%" height="15" fill="rgb(223,129,7)" fg:x="794" fg:w="1"/><text x="64.9607%" y="735.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="64.7107%" y="709" width="0.0815%" height="15" fill="rgb(246,105,7)" fg:x="794" fg:w="1"/><text x="64.9607%" y="719.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="64.7107%" y="693" width="0.0815%" height="15" fill="rgb(215,154,42)" fg:x="794" fg:w="1"/><text x="64.9607%" y="703.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="64.7107%" y="677" width="0.0815%" height="15" fill="rgb(220,215,30)" fg:x="794" fg:w="1"/><text x="64.9607%" y="687.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="64.7107%" y="661" width="0.0815%" height="15" fill="rgb(228,81,51)" fg:x="794" fg:w="1"/><text x="64.9607%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="64.7922%" y="725" width="0.0815%" height="15" fill="rgb(247,71,54)" fg:x="795" fg:w="1"/><text x="65.0422%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="64.7922%" y="709" width="0.0815%" height="15" fill="rgb(234,176,34)" fg:x="795" fg:w="1"/><text x="65.0422%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="64.7922%" y="693" width="0.0815%" height="15" fill="rgb(241,103,54)" fg:x="795" fg:w="1"/><text x="65.0422%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="64.7922%" y="677" width="0.0815%" height="15" fill="rgb(228,22,34)" fg:x="795" fg:w="1"/><text x="65.0422%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="64.7922%" y="741" width="0.2445%" height="15" fill="rgb(241,179,48)" fg:x="795" fg:w="3"/><text x="65.0422%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="64.8737%" y="725" width="0.1630%" height="15" fill="rgb(235,167,37)" fg:x="796" fg:w="2"/><text x="65.1237%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="64.8737%" y="709" width="0.1630%" height="15" fill="rgb(213,109,30)" fg:x="796" fg:w="2"/><text x="65.1237%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="64.8737%" y="693" width="0.1630%" height="15" fill="rgb(222,172,16)" fg:x="796" fg:w="2"/><text x="65.1237%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="64.8737%" y="677" width="0.1630%" height="15" fill="rgb(233,192,5)" fg:x="796" fg:w="2"/><text x="65.1237%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="64.8737%" y="661" width="0.1630%" height="15" fill="rgb(247,189,41)" fg:x="796" fg:w="2"/><text x="65.1237%" y="671.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="64.8737%" y="645" width="0.1630%" height="15" fill="rgb(218,134,47)" fg:x="796" fg:w="2"/><text x="65.1237%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="64.9552%" y="629" width="0.0815%" height="15" fill="rgb(216,29,3)" fg:x="797" fg:w="1"/><text x="65.2052%" y="639.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="65.0367%" y="693" width="0.0815%" height="15" fill="rgb(246,140,12)" fg:x="798" fg:w="1"/><text x="65.2867%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="65.0367%" y="677" width="0.0815%" height="15" fill="rgb(230,136,11)" fg:x="798" fg:w="1"/><text x="65.2867%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0367%" y="661" width="0.0815%" height="15" fill="rgb(247,22,47)" fg:x="798" fg:w="1"/><text x="65.2867%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0367%" y="645" width="0.0815%" height="15" fill="rgb(218,84,22)" fg:x="798" fg:w="1"/><text x="65.2867%" y="655.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="65.0367%" y="629" width="0.0815%" height="15" fill="rgb(216,87,39)" fg:x="798" fg:w="1"/><text x="65.2867%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="65.0367%" y="613" width="0.0815%" height="15" fill="rgb(221,178,8)" fg:x="798" fg:w="1"/><text x="65.2867%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="65.0367%" y="725" width="0.1630%" height="15" fill="rgb(230,42,11)" fg:x="798" fg:w="2"/><text x="65.2867%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="65.0367%" y="709" width="0.1630%" height="15" fill="rgb(237,229,4)" fg:x="798" fg:w="2"/><text x="65.2867%" y="719.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="65.1182%" y="693" width="0.0815%" height="15" fill="rgb(222,31,33)" fg:x="799" fg:w="1"/><text x="65.3682%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1182%" y="677" width="0.0815%" height="15" fill="rgb(210,17,39)" fg:x="799" fg:w="1"/><text x="65.3682%" y="687.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.57%)</title><rect x="64.7922%" y="805" width="0.5705%" height="15" fill="rgb(244,93,20)" fg:x="795" fg:w="7"/><text x="65.0422%" y="815.50"></text></g><g><title>engine::session::Session::save_entity_changes (7 samples, 0.57%)</title><rect x="64.7922%" y="789" width="0.5705%" height="15" fill="rgb(210,40,47)" fg:x="795" fg:w="7"/><text x="65.0422%" y="799.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.57%)</title><rect x="64.7922%" y="773" width="0.5705%" height="15" fill="rgb(239,211,47)" fg:x="795" fg:w="7"/><text x="65.0422%" y="783.50"></text></g><g><title>engine::session::Session::check_for_changes (7 samples, 0.57%)</title><rect x="64.7922%" y="757" width="0.5705%" height="15" fill="rgb(251,223,49)" fg:x="795" fg:w="7"/><text x="65.0422%" y="767.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.33%)</title><rect x="65.0367%" y="741" width="0.3260%" height="15" fill="rgb(221,149,5)" fg:x="798" fg:w="4"/><text x="65.2867%" y="751.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="65.1997%" y="725" width="0.1630%" height="15" fill="rgb(219,224,51)" fg:x="800" fg:w="2"/><text x="65.4497%" y="735.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="65.2812%" y="709" width="0.0815%" height="15" fill="rgb(223,7,8)" fg:x="801" fg:w="1"/><text x="65.5312%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2812%" y="693" width="0.0815%" height="15" fill="rgb(241,217,22)" fg:x="801" fg:w="1"/><text x="65.5312%" y="703.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="65.3627%" y="805" width="0.0815%" height="15" fill="rgb(248,209,0)" fg:x="802" fg:w="1"/><text x="65.6127%" y="815.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="65.3627%" y="789" width="0.0815%" height="15" fill="rgb(217,205,4)" fg:x="802" fg:w="1"/><text x="65.6127%" y="799.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="65.3627%" y="773" width="0.0815%" height="15" fill="rgb(228,124,39)" fg:x="802" fg:w="1"/><text x="65.6127%" y="783.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="65.3627%" y="757" width="0.0815%" height="15" fill="rgb(250,116,42)" fg:x="802" fg:w="1"/><text x="65.6127%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3627%" y="741" width="0.0815%" height="15" fill="rgb(223,202,9)" fg:x="802" fg:w="1"/><text x="65.6127%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.3627%" y="725" width="0.0815%" height="15" fill="rgb(242,222,40)" fg:x="802" fg:w="1"/><text x="65.6127%" y="735.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="65.4442%" y="789" width="0.0815%" height="15" fill="rgb(229,99,46)" fg:x="803" fg:w="1"/><text x="65.6942%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.4442%" y="773" width="0.0815%" height="15" fill="rgb(225,56,46)" fg:x="803" fg:w="1"/><text x="65.6942%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="65.4442%" y="757" width="0.0815%" height="15" fill="rgb(227,94,5)" fg:x="803" fg:w="1"/><text x="65.6942%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.5257%" y="757" width="0.0815%" height="15" fill="rgb(205,112,38)" fg:x="804" fg:w="1"/><text x="65.7757%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="65.5257%" y="741" width="0.0815%" height="15" fill="rgb(231,133,46)" fg:x="804" fg:w="1"/><text x="65.7757%" y="751.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5257%" y="725" width="0.0815%" height="15" fill="rgb(217,16,9)" fg:x="804" fg:w="1"/><text x="65.7757%" y="735.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.6072%" y="757" width="0.0815%" height="15" fill="rgb(249,173,9)" fg:x="805" fg:w="1"/><text x="65.8572%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="65.6072%" y="741" width="0.0815%" height="15" fill="rgb(205,163,53)" fg:x="805" fg:w="1"/><text x="65.8572%" y="751.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="65.6072%" y="725" width="0.0815%" height="15" fill="rgb(217,54,41)" fg:x="805" fg:w="1"/><text x="65.8572%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.6072%" y="709" width="0.0815%" height="15" fill="rgb(228,216,12)" fg:x="805" fg:w="1"/><text x="65.8572%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.6072%" y="693" width="0.0815%" height="15" fill="rgb(244,228,15)" fg:x="805" fg:w="1"/><text x="65.8572%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.6072%" y="677" width="0.0815%" height="15" fill="rgb(221,176,53)" fg:x="805" fg:w="1"/><text x="65.8572%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.6072%" y="661" width="0.0815%" height="15" fill="rgb(205,94,34)" fg:x="805" fg:w="1"/><text x="65.8572%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.6072%" y="645" width="0.0815%" height="15" fill="rgb(213,110,48)" fg:x="805" fg:w="1"/><text x="65.8572%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="65.6072%" y="629" width="0.0815%" height="15" fill="rgb(236,142,28)" fg:x="805" fg:w="1"/><text x="65.8572%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="65.6072%" y="613" width="0.0815%" height="15" fill="rgb(225,135,29)" fg:x="805" fg:w="1"/><text x="65.8572%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="65.7702%" y="709" width="0.0815%" height="15" fill="rgb(252,45,31)" fg:x="807" fg:w="1"/><text x="66.0202%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="65.7702%" y="693" width="0.0815%" height="15" fill="rgb(211,187,50)" fg:x="807" fg:w="1"/><text x="66.0202%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="65.7702%" y="677" width="0.0815%" height="15" fill="rgb(229,109,7)" fg:x="807" fg:w="1"/><text x="66.0202%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.7702%" y="661" width="0.0815%" height="15" fill="rgb(251,131,51)" fg:x="807" fg:w="1"/><text x="66.0202%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.7702%" y="645" width="0.0815%" height="15" fill="rgb(251,180,35)" fg:x="807" fg:w="1"/><text x="66.0202%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.7702%" y="629" width="0.0815%" height="15" fill="rgb(211,46,32)" fg:x="807" fg:w="1"/><text x="66.0202%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7702%" y="613" width="0.0815%" height="15" fill="rgb(248,123,17)" fg:x="807" fg:w="1"/><text x="66.0202%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.7702%" y="597" width="0.0815%" height="15" fill="rgb(227,141,18)" fg:x="807" fg:w="1"/><text x="66.0202%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="65.8517%" y="693" width="0.1630%" height="15" fill="rgb(216,102,9)" fg:x="808" fg:w="2"/><text x="66.1017%" y="703.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="65.8517%" y="677" width="0.1630%" height="15" fill="rgb(253,47,13)" fg:x="808" fg:w="2"/><text x="66.1017%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="65.9332%" y="661" width="0.0815%" height="15" fill="rgb(226,93,23)" fg:x="809" fg:w="1"/><text x="66.1832%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="65.9332%" y="645" width="0.0815%" height="15" fill="rgb(247,104,17)" fg:x="809" fg:w="1"/><text x="66.1832%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.0147%" y="661" width="0.0815%" height="15" fill="rgb(233,203,26)" fg:x="810" fg:w="1"/><text x="66.2647%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.0147%" y="645" width="0.0815%" height="15" fill="rgb(244,98,49)" fg:x="810" fg:w="1"/><text x="66.2647%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.0147%" y="629" width="0.0815%" height="15" fill="rgb(235,134,22)" fg:x="810" fg:w="1"/><text x="66.2647%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.0147%" y="613" width="0.0815%" height="15" fill="rgb(221,70,32)" fg:x="810" fg:w="1"/><text x="66.2647%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="66.0147%" y="693" width="0.1630%" height="15" fill="rgb(238,15,50)" fg:x="810" fg:w="2"/><text x="66.2647%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="66.0147%" y="677" width="0.1630%" height="15" fill="rgb(215,221,48)" fg:x="810" fg:w="2"/><text x="66.2647%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.0962%" y="661" width="0.0815%" height="15" fill="rgb(236,73,3)" fg:x="811" fg:w="1"/><text x="66.3462%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.0962%" y="645" width="0.0815%" height="15" fill="rgb(250,107,11)" fg:x="811" fg:w="1"/><text x="66.3462%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.0962%" y="629" width="0.0815%" height="15" fill="rgb(242,39,14)" fg:x="811" fg:w="1"/><text x="66.3462%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="65.6887%" y="725" width="0.5705%" height="15" fill="rgb(248,164,37)" fg:x="806" fg:w="7"/><text x="65.9387%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="65.8517%" y="709" width="0.4075%" height="15" fill="rgb(217,60,12)" fg:x="808" fg:w="5"/><text x="66.1017%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.1777%" y="693" width="0.0815%" height="15" fill="rgb(240,125,29)" fg:x="812" fg:w="1"/><text x="66.4277%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.1777%" y="677" width="0.0815%" height="15" fill="rgb(208,207,28)" fg:x="812" fg:w="1"/><text x="66.4277%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.1777%" y="661" width="0.0815%" height="15" fill="rgb(209,159,27)" fg:x="812" fg:w="1"/><text x="66.4277%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2592%" y="645" width="0.0815%" height="15" fill="rgb(251,176,53)" fg:x="813" fg:w="1"/><text x="66.5092%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3407%" y="613" width="0.0815%" height="15" fill="rgb(211,85,7)" fg:x="814" fg:w="1"/><text x="66.5907%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="66.2592%" y="725" width="0.2445%" height="15" fill="rgb(216,64,54)" fg:x="813" fg:w="3"/><text x="66.5092%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="66.2592%" y="709" width="0.2445%" height="15" fill="rgb(217,54,24)" fg:x="813" fg:w="3"/><text x="66.5092%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="66.2592%" y="693" width="0.2445%" height="15" fill="rgb(208,206,53)" fg:x="813" fg:w="3"/><text x="66.5092%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="66.2592%" y="677" width="0.2445%" height="15" fill="rgb(251,74,39)" fg:x="813" fg:w="3"/><text x="66.5092%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="66.2592%" y="661" width="0.2445%" height="15" fill="rgb(226,47,5)" fg:x="813" fg:w="3"/><text x="66.5092%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="66.3407%" y="645" width="0.1630%" height="15" fill="rgb(234,111,33)" fg:x="814" fg:w="2"/><text x="66.5907%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="66.3407%" y="629" width="0.1630%" height="15" fill="rgb(251,14,10)" fg:x="814" fg:w="2"/><text x="66.5907%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.4222%" y="613" width="0.0815%" height="15" fill="rgb(232,43,0)" fg:x="815" fg:w="1"/><text x="66.6722%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="66.5037%" y="613" width="0.0815%" height="15" fill="rgb(222,68,43)" fg:x="816" fg:w="1"/><text x="66.7537%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="66.5037%" y="597" width="0.0815%" height="15" fill="rgb(217,24,23)" fg:x="816" fg:w="1"/><text x="66.7537%" y="607.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="66.5037%" y="677" width="0.1630%" height="15" fill="rgb(229,209,14)" fg:x="816" fg:w="2"/><text x="66.7537%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="66.5037%" y="661" width="0.1630%" height="15" fill="rgb(250,149,48)" fg:x="816" fg:w="2"/><text x="66.7537%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="66.5037%" y="645" width="0.1630%" height="15" fill="rgb(210,120,37)" fg:x="816" fg:w="2"/><text x="66.7537%" y="655.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="66.5037%" y="629" width="0.1630%" height="15" fill="rgb(210,21,8)" fg:x="816" fg:w="2"/><text x="66.7537%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.5852%" y="613" width="0.0815%" height="15" fill="rgb(243,145,7)" fg:x="817" fg:w="1"/><text x="66.8352%" y="623.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="66.5852%" y="597" width="0.0815%" height="15" fill="rgb(238,178,32)" fg:x="817" fg:w="1"/><text x="66.8352%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.5852%" y="581" width="0.0815%" height="15" fill="rgb(222,4,10)" fg:x="817" fg:w="1"/><text x="66.8352%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5852%" y="565" width="0.0815%" height="15" fill="rgb(239,7,37)" fg:x="817" fg:w="1"/><text x="66.8352%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5852%" y="549" width="0.0815%" height="15" fill="rgb(215,31,37)" fg:x="817" fg:w="1"/><text x="66.8352%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5852%" y="533" width="0.0815%" height="15" fill="rgb(224,83,33)" fg:x="817" fg:w="1"/><text x="66.8352%" y="543.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.22%)</title><rect x="65.5257%" y="789" width="1.2225%" height="15" fill="rgb(239,55,3)" fg:x="804" fg:w="15"/><text x="65.7757%" y="799.50"></text></g><g><title>engine::session::Session::save_entity_changes (15 samples, 1.22%)</title><rect x="65.5257%" y="773" width="1.2225%" height="15" fill="rgb(247,92,11)" fg:x="804" fg:w="15"/><text x="65.7757%" y="783.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (13 samples, 1.06%)</title><rect x="65.6887%" y="757" width="1.0595%" height="15" fill="rgb(239,200,7)" fg:x="806" fg:w="13"/><text x="65.9387%" y="767.50"></text></g><g><title>engine::session::Session::check_for_changes (13 samples, 1.06%)</title><rect x="65.6887%" y="741" width="1.0595%" height="15" fill="rgb(227,115,8)" fg:x="806" fg:w="13"/><text x="65.9387%" y="751.50"></text></g><g><title>kernel::compare::any_entity_changes (3 samples, 0.24%)</title><rect x="66.5037%" y="725" width="0.2445%" height="15" fill="rgb(215,189,27)" fg:x="816" fg:w="3"/><text x="66.7537%" y="735.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="66.5037%" y="709" width="0.2445%" height="15" fill="rgb(251,216,39)" fg:x="816" fg:w="3"/><text x="66.7537%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="66.5037%" y="693" width="0.2445%" height="15" fill="rgb(207,29,47)" fg:x="816" fg:w="3"/><text x="66.7537%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="66.6667%" y="677" width="0.0815%" height="15" fill="rgb(210,71,34)" fg:x="818" fg:w="1"/><text x="66.9167%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.6667%" y="661" width="0.0815%" height="15" fill="rgb(253,217,51)" fg:x="818" fg:w="1"/><text x="66.9167%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.6667%" y="645" width="0.0815%" height="15" fill="rgb(222,117,46)" fg:x="818" fg:w="1"/><text x="66.9167%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6667%" y="629" width="0.0815%" height="15" fill="rgb(226,132,6)" fg:x="818" fg:w="1"/><text x="66.9167%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="66.7482%" y="773" width="0.0815%" height="15" fill="rgb(254,145,51)" fg:x="819" fg:w="1"/><text x="66.9982%" y="783.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="66.7482%" y="757" width="0.0815%" height="15" fill="rgb(231,199,27)" fg:x="819" fg:w="1"/><text x="66.9982%" y="767.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="66.7482%" y="741" width="0.0815%" height="15" fill="rgb(245,158,14)" fg:x="819" fg:w="1"/><text x="66.9982%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.7482%" y="725" width="0.0815%" height="15" fill="rgb(240,113,14)" fg:x="819" fg:w="1"/><text x="66.9982%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.7482%" y="709" width="0.0815%" height="15" fill="rgb(210,20,13)" fg:x="819" fg:w="1"/><text x="66.9982%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.7482%" y="693" width="0.0815%" height="15" fill="rgb(241,144,13)" fg:x="819" fg:w="1"/><text x="66.9982%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.7482%" y="677" width="0.0815%" height="15" fill="rgb(235,43,34)" fg:x="819" fg:w="1"/><text x="66.9982%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (26 samples, 2.12%)</title><rect x="64.7922%" y="821" width="2.1190%" height="15" fill="rgb(208,36,20)" fg:x="795" fg:w="26"/><text x="65.0422%" y="831.50">&lt;..</text></g><g><title>plugins_core::build::BuildSurroundings::build (18 samples, 1.47%)</title><rect x="65.4442%" y="805" width="1.4670%" height="15" fill="rgb(239,204,10)" fg:x="803" fg:w="18"/><text x="65.6942%" y="815.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="66.7482%" y="789" width="0.1630%" height="15" fill="rgb(217,84,43)" fg:x="819" fg:w="2"/><text x="66.9982%" y="799.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="66.8297%" y="773" width="0.0815%" height="15" fill="rgb(241,170,50)" fg:x="820" fg:w="1"/><text x="67.0797%" y="783.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="66.8297%" y="757" width="0.0815%" height="15" fill="rgb(226,205,29)" fg:x="820" fg:w="1"/><text x="67.0797%" y="767.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="66.8297%" y="741" width="0.0815%" height="15" fill="rgb(233,113,1)" fg:x="820" fg:w="1"/><text x="67.0797%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="66.8297%" y="725" width="0.0815%" height="15" fill="rgb(253,98,13)" fg:x="820" fg:w="1"/><text x="67.0797%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.8297%" y="709" width="0.0815%" height="15" fill="rgb(211,115,12)" fg:x="820" fg:w="1"/><text x="67.0797%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="66.8297%" y="693" width="0.0815%" height="15" fill="rgb(208,12,16)" fg:x="820" fg:w="1"/><text x="67.0797%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="66.8297%" y="677" width="0.0815%" height="15" fill="rgb(237,193,54)" fg:x="820" fg:w="1"/><text x="67.0797%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8297%" y="661" width="0.0815%" height="15" fill="rgb(243,22,42)" fg:x="820" fg:w="1"/><text x="67.0797%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.8297%" y="645" width="0.0815%" height="15" fill="rgb(233,151,36)" fg:x="820" fg:w="1"/><text x="67.0797%" y="655.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="66.9112%" y="789" width="0.0815%" height="15" fill="rgb(237,57,45)" fg:x="821" fg:w="1"/><text x="67.1612%" y="799.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="66.9112%" y="773" width="0.0815%" height="15" fill="rgb(221,88,17)" fg:x="821" fg:w="1"/><text x="67.1612%" y="783.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="66.9112%" y="757" width="0.0815%" height="15" fill="rgb(230,79,15)" fg:x="821" fg:w="1"/><text x="67.1612%" y="767.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.9927%" y="725" width="0.0815%" height="15" fill="rgb(213,57,13)" fg:x="822" fg:w="1"/><text x="67.2427%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.9927%" y="709" width="0.0815%" height="15" fill="rgb(222,116,39)" fg:x="822" fg:w="1"/><text x="67.2427%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="66.9927%" y="741" width="0.1630%" height="15" fill="rgb(245,107,2)" fg:x="822" fg:w="2"/><text x="67.2427%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.0742%" y="725" width="0.0815%" height="15" fill="rgb(238,1,10)" fg:x="823" fg:w="1"/><text x="67.3242%" y="735.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.0742%" y="709" width="0.0815%" height="15" fill="rgb(249,4,48)" fg:x="823" fg:w="1"/><text x="67.3242%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.0742%" y="693" width="0.0815%" height="15" fill="rgb(223,151,18)" fg:x="823" fg:w="1"/><text x="67.3242%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="67.1557%" y="677" width="0.1630%" height="15" fill="rgb(227,65,43)" fg:x="824" fg:w="2"/><text x="67.4057%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.1557%" y="661" width="0.1630%" height="15" fill="rgb(218,40,45)" fg:x="824" fg:w="2"/><text x="67.4057%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.2372%" y="645" width="0.0815%" height="15" fill="rgb(252,121,31)" fg:x="825" fg:w="1"/><text x="67.4872%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="67.1557%" y="709" width="0.2445%" height="15" fill="rgb(219,158,43)" fg:x="824" fg:w="3"/><text x="67.4057%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="67.1557%" y="693" width="0.2445%" height="15" fill="rgb(231,162,42)" fg:x="824" fg:w="3"/><text x="67.4057%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="67.3187%" y="677" width="0.0815%" height="15" fill="rgb(217,179,25)" fg:x="826" fg:w="1"/><text x="67.5687%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="67.4002%" y="709" width="0.1630%" height="15" fill="rgb(206,212,31)" fg:x="827" fg:w="2"/><text x="67.6502%" y="719.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.4002%" y="693" width="0.1630%" height="15" fill="rgb(235,144,12)" fg:x="827" fg:w="2"/><text x="67.6502%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.4817%" y="677" width="0.0815%" height="15" fill="rgb(213,51,10)" fg:x="828" fg:w="1"/><text x="67.7317%" y="687.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="66.9927%" y="757" width="0.8150%" height="15" fill="rgb(231,145,14)" fg:x="822" fg:w="10"/><text x="67.2427%" y="767.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="67.1557%" y="741" width="0.6520%" height="15" fill="rgb(235,15,28)" fg:x="824" fg:w="8"/><text x="67.4057%" y="751.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="67.1557%" y="725" width="0.6520%" height="15" fill="rgb(237,206,10)" fg:x="824" fg:w="8"/><text x="67.4057%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="67.5632%" y="709" width="0.2445%" height="15" fill="rgb(236,227,27)" fg:x="829" fg:w="3"/><text x="67.8132%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="67.5632%" y="693" width="0.2445%" height="15" fill="rgb(246,83,35)" fg:x="829" fg:w="3"/><text x="67.8132%" y="703.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="67.6447%" y="677" width="0.1630%" height="15" fill="rgb(220,136,24)" fg:x="830" fg:w="2"/><text x="67.8947%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.7262%" y="661" width="0.0815%" height="15" fill="rgb(217,3,25)" fg:x="831" fg:w="1"/><text x="67.9762%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.7262%" y="645" width="0.0815%" height="15" fill="rgb(239,24,14)" fg:x="831" fg:w="1"/><text x="67.9762%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8077%" y="709" width="0.0815%" height="15" fill="rgb(244,16,53)" fg:x="832" fg:w="1"/><text x="68.0577%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.8077%" y="757" width="0.1630%" height="15" fill="rgb(208,175,44)" fg:x="832" fg:w="2"/><text x="68.0577%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="67.8077%" y="741" width="0.1630%" height="15" fill="rgb(252,18,48)" fg:x="832" fg:w="2"/><text x="68.0577%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.8077%" y="725" width="0.1630%" height="15" fill="rgb(234,199,32)" fg:x="832" fg:w="2"/><text x="68.0577%" y="735.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.8892%" y="709" width="0.0815%" height="15" fill="rgb(225,77,54)" fg:x="833" fg:w="1"/><text x="68.1392%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.9707%" y="677" width="0.0815%" height="15" fill="rgb(225,42,25)" fg:x="834" fg:w="1"/><text x="68.2207%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.9707%" y="741" width="0.2445%" height="15" fill="rgb(242,227,46)" fg:x="834" fg:w="3"/><text x="68.2207%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="67.9707%" y="725" width="0.2445%" height="15" fill="rgb(246,197,35)" fg:x="834" fg:w="3"/><text x="68.2207%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.9707%" y="709" width="0.2445%" height="15" fill="rgb(215,159,26)" fg:x="834" fg:w="3"/><text x="68.2207%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="67.9707%" y="693" width="0.2445%" height="15" fill="rgb(212,194,50)" fg:x="834" fg:w="3"/><text x="68.2207%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.0522%" y="677" width="0.1630%" height="15" fill="rgb(246,132,1)" fg:x="835" fg:w="2"/><text x="68.3022%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.1337%" y="661" width="0.0815%" height="15" fill="rgb(217,71,7)" fg:x="836" fg:w="1"/><text x="68.3837%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2152%" y="709" width="0.0815%" height="15" fill="rgb(252,59,32)" fg:x="837" fg:w="1"/><text x="68.4652%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.2152%" y="693" width="0.0815%" height="15" fill="rgb(253,204,25)" fg:x="837" fg:w="1"/><text x="68.4652%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.2152%" y="677" width="0.0815%" height="15" fill="rgb(232,21,16)" fg:x="837" fg:w="1"/><text x="68.4652%" y="687.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2967%" y="709" width="0.0815%" height="15" fill="rgb(248,90,29)" fg:x="838" fg:w="1"/><text x="68.5467%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.2967%" y="693" width="0.0815%" height="15" fill="rgb(249,223,7)" fg:x="838" fg:w="1"/><text x="68.5467%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.2967%" y="677" width="0.0815%" height="15" fill="rgb(231,119,42)" fg:x="838" fg:w="1"/><text x="68.5467%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.3782%" y="661" width="0.0815%" height="15" fill="rgb(215,41,35)" fg:x="839" fg:w="1"/><text x="68.6282%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.3782%" y="645" width="0.0815%" height="15" fill="rgb(220,44,45)" fg:x="839" fg:w="1"/><text x="68.6282%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3782%" y="629" width="0.0815%" height="15" fill="rgb(253,197,36)" fg:x="839" fg:w="1"/><text x="68.6282%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.4597%" y="645" width="0.0815%" height="15" fill="rgb(245,225,54)" fg:x="840" fg:w="1"/><text x="68.7097%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.4597%" y="629" width="0.0815%" height="15" fill="rgb(239,94,37)" fg:x="840" fg:w="1"/><text x="68.7097%" y="639.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="68.3782%" y="709" width="0.2445%" height="15" fill="rgb(242,217,10)" fg:x="839" fg:w="3"/><text x="68.6282%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="68.3782%" y="693" width="0.2445%" height="15" fill="rgb(250,193,7)" fg:x="839" fg:w="3"/><text x="68.6282%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="68.3782%" y="677" width="0.2445%" height="15" fill="rgb(230,104,19)" fg:x="839" fg:w="3"/><text x="68.6282%" y="687.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="68.4597%" y="661" width="0.1630%" height="15" fill="rgb(230,181,4)" fg:x="840" fg:w="2"/><text x="68.7097%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="68.5412%" y="645" width="0.0815%" height="15" fill="rgb(216,219,49)" fg:x="841" fg:w="1"/><text x="68.7912%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6227%" y="693" width="0.0815%" height="15" fill="rgb(254,144,0)" fg:x="842" fg:w="1"/><text x="68.8727%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.6227%" y="677" width="0.0815%" height="15" fill="rgb(205,209,38)" fg:x="842" fg:w="1"/><text x="68.8727%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.6227%" y="661" width="0.0815%" height="15" fill="rgb(240,21,42)" fg:x="842" fg:w="1"/><text x="68.8727%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.7042%" y="661" width="0.0815%" height="15" fill="rgb(241,132,3)" fg:x="843" fg:w="1"/><text x="68.9542%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.7042%" y="645" width="0.0815%" height="15" fill="rgb(225,14,2)" fg:x="843" fg:w="1"/><text x="68.9542%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.7042%" y="629" width="0.0815%" height="15" fill="rgb(210,141,35)" fg:x="843" fg:w="1"/><text x="68.9542%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.7042%" y="613" width="0.0815%" height="15" fill="rgb(251,14,44)" fg:x="843" fg:w="1"/><text x="68.9542%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7042%" y="597" width="0.0815%" height="15" fill="rgb(247,48,18)" fg:x="843" fg:w="1"/><text x="68.9542%" y="607.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (11 samples, 0.90%)</title><rect x="68.2152%" y="741" width="0.8965%" height="15" fill="rgb(225,0,40)" fg:x="837" fg:w="11"/><text x="68.4652%" y="751.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.90%)</title><rect x="68.2152%" y="725" width="0.8965%" height="15" fill="rgb(221,31,33)" fg:x="837" fg:w="11"/><text x="68.4652%" y="735.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="68.6227%" y="709" width="0.4890%" height="15" fill="rgb(237,42,40)" fg:x="842" fg:w="6"/><text x="68.8727%" y="719.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (5 samples, 0.41%)</title><rect x="68.7042%" y="693" width="0.4075%" height="15" fill="rgb(233,51,29)" fg:x="843" fg:w="5"/><text x="68.9542%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="68.7042%" y="677" width="0.4075%" height="15" fill="rgb(226,58,20)" fg:x="843" fg:w="5"/><text x="68.9542%" y="687.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="68.7857%" y="661" width="0.3260%" height="15" fill="rgb(208,98,7)" fg:x="844" fg:w="4"/><text x="69.0357%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.9487%" y="645" width="0.1630%" height="15" fill="rgb(228,143,44)" fg:x="846" fg:w="2"/><text x="69.1987%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0302%" y="629" width="0.0815%" height="15" fill="rgb(246,55,38)" fg:x="847" fg:w="1"/><text x="69.2802%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0302%" y="613" width="0.0815%" height="15" fill="rgb(247,87,16)" fg:x="847" fg:w="1"/><text x="69.2802%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.1932%" y="597" width="0.0815%" height="15" fill="rgb(234,129,42)" fg:x="849" fg:w="1"/><text x="69.4432%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.1932%" y="581" width="0.0815%" height="15" fill="rgb(220,82,16)" fg:x="849" fg:w="1"/><text x="69.4432%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.1932%" y="565" width="0.0815%" height="15" fill="rgb(211,88,4)" fg:x="849" fg:w="1"/><text x="69.4432%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1932%" y="549" width="0.0815%" height="15" fill="rgb(248,151,21)" fg:x="849" fg:w="1"/><text x="69.4432%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="69.2747%" y="581" width="0.2445%" height="15" fill="rgb(238,163,6)" fg:x="850" fg:w="3"/><text x="69.5247%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.3562%" y="565" width="0.1630%" height="15" fill="rgb(209,183,11)" fg:x="851" fg:w="2"/><text x="69.6062%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.3562%" y="549" width="0.1630%" height="15" fill="rgb(219,37,20)" fg:x="851" fg:w="2"/><text x="69.6062%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.3562%" y="533" width="0.1630%" height="15" fill="rgb(210,158,4)" fg:x="851" fg:w="2"/><text x="69.6062%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="69.3562%" y="517" width="0.1630%" height="15" fill="rgb(221,167,53)" fg:x="851" fg:w="2"/><text x="69.6062%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="69.1932%" y="613" width="0.4075%" height="15" fill="rgb(237,151,45)" fg:x="849" fg:w="5"/><text x="69.4432%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="69.2747%" y="597" width="0.3260%" height="15" fill="rgb(231,39,3)" fg:x="850" fg:w="4"/><text x="69.5247%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5192%" y="581" width="0.0815%" height="15" fill="rgb(212,167,28)" fg:x="853" fg:w="1"/><text x="69.7692%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5192%" y="565" width="0.0815%" height="15" fill="rgb(232,178,8)" fg:x="853" fg:w="1"/><text x="69.7692%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5192%" y="549" width="0.0815%" height="15" fill="rgb(225,151,20)" fg:x="853" fg:w="1"/><text x="69.7692%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="69.1117%" y="677" width="0.5705%" height="15" fill="rgb(238,3,37)" fg:x="848" fg:w="7"/><text x="69.3617%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="69.1117%" y="661" width="0.5705%" height="15" fill="rgb(251,147,42)" fg:x="848" fg:w="7"/><text x="69.3617%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="69.1117%" y="645" width="0.5705%" height="15" fill="rgb(208,173,10)" fg:x="848" fg:w="7"/><text x="69.3617%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="69.1932%" y="629" width="0.4890%" height="15" fill="rgb(246,225,4)" fg:x="849" fg:w="6"/><text x="69.4432%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6007%" y="613" width="0.0815%" height="15" fill="rgb(248,102,6)" fg:x="854" fg:w="1"/><text x="69.8507%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6007%" y="597" width="0.0815%" height="15" fill="rgb(232,6,21)" fg:x="854" fg:w="1"/><text x="69.8507%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6007%" y="581" width="0.0815%" height="15" fill="rgb(221,179,22)" fg:x="854" fg:w="1"/><text x="69.8507%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.65%)</title><rect x="69.1117%" y="741" width="0.6520%" height="15" fill="rgb(252,50,20)" fg:x="848" fg:w="8"/><text x="69.3617%" y="751.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.65%)</title><rect x="69.1117%" y="725" width="0.6520%" height="15" fill="rgb(222,56,38)" fg:x="848" fg:w="8"/><text x="69.3617%" y="735.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="69.1117%" y="709" width="0.6520%" height="15" fill="rgb(206,193,29)" fg:x="848" fg:w="8"/><text x="69.3617%" y="719.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="69.1117%" y="693" width="0.6520%" height="15" fill="rgb(239,192,45)" fg:x="848" fg:w="8"/><text x="69.3617%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6822%" y="677" width="0.0815%" height="15" fill="rgb(254,18,36)" fg:x="855" fg:w="1"/><text x="69.9322%" y="687.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (35 samples, 2.85%)</title><rect x="66.9927%" y="789" width="2.8525%" height="15" fill="rgb(221,127,11)" fg:x="822" fg:w="35"/><text x="67.2427%" y="799.50">en..</text></g><g><title>engine::session::Session::check_for_changes (35 samples, 2.85%)</title><rect x="66.9927%" y="773" width="2.8525%" height="15" fill="rgb(234,146,35)" fg:x="822" fg:w="35"/><text x="67.2427%" y="783.50">en..</text></g><g><title>kernel::compare::any_entity_changes (23 samples, 1.87%)</title><rect x="67.9707%" y="757" width="1.8745%" height="15" fill="rgb(254,201,37)" fg:x="834" fg:w="23"/><text x="68.2207%" y="767.50">k..</text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="69.7637%" y="741" width="0.0815%" height="15" fill="rgb(211,202,23)" fg:x="856" fg:w="1"/><text x="70.0137%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="69.7637%" y="725" width="0.0815%" height="15" fill="rgb(237,91,2)" fg:x="856" fg:w="1"/><text x="70.0137%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="69.7637%" y="709" width="0.0815%" height="15" fill="rgb(226,228,36)" fg:x="856" fg:w="1"/><text x="70.0137%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="69.7637%" y="693" width="0.0815%" height="15" fill="rgb(213,63,50)" fg:x="856" fg:w="1"/><text x="70.0137%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="69.7637%" y="677" width="0.0815%" height="15" fill="rgb(235,194,19)" fg:x="856" fg:w="1"/><text x="70.0137%" y="687.50"></text></g><g><title>engine::session::Session::close (37 samples, 3.02%)</title><rect x="66.9112%" y="821" width="3.0155%" height="15" fill="rgb(207,204,18)" fg:x="821" fg:w="37"/><text x="67.1612%" y="831.50">eng..</text></g><g><title>engine::session::Session::save_entity_changes (37 samples, 3.02%)</title><rect x="66.9112%" y="805" width="3.0155%" height="15" fill="rgb(248,8,7)" fg:x="821" fg:w="37"/><text x="67.1612%" y="815.50">eng..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="69.8452%" y="789" width="0.0815%" height="15" fill="rgb(223,145,47)" fg:x="857" fg:w="1"/><text x="70.0952%" y="799.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="69.8452%" y="773" width="0.0815%" height="15" fill="rgb(228,84,11)" fg:x="857" fg:w="1"/><text x="70.0952%" y="783.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="69.8452%" y="757" width="0.0815%" height="15" fill="rgb(218,76,45)" fg:x="857" fg:w="1"/><text x="70.0952%" y="767.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.8452%" y="741" width="0.0815%" height="15" fill="rgb(223,80,15)" fg:x="857" fg:w="1"/><text x="70.0952%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.8452%" y="725" width="0.0815%" height="15" fill="rgb(219,218,33)" fg:x="857" fg:w="1"/><text x="70.0952%" y="735.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.9267%" y="789" width="0.0815%" height="15" fill="rgb(208,51,11)" fg:x="858" fg:w="1"/><text x="70.1767%" y="799.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="70.1711%" y="597" width="0.1630%" height="15" fill="rgb(229,165,39)" fg:x="861" fg:w="2"/><text x="70.4211%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="70.1711%" y="581" width="0.1630%" height="15" fill="rgb(241,100,24)" fg:x="861" fg:w="2"/><text x="70.4211%" y="591.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="70.1711%" y="565" width="0.1630%" height="15" fill="rgb(228,14,23)" fg:x="861" fg:w="2"/><text x="70.4211%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="70.1711%" y="549" width="0.1630%" height="15" fill="rgb(247,116,52)" fg:x="861" fg:w="2"/><text x="70.4211%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="70.2526%" y="533" width="0.0815%" height="15" fill="rgb(216,149,33)" fg:x="862" fg:w="1"/><text x="70.5026%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.3341%" y="565" width="0.0815%" height="15" fill="rgb(238,142,29)" fg:x="863" fg:w="1"/><text x="70.5841%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="70.4156%" y="469" width="0.1630%" height="15" fill="rgb(224,83,40)" fg:x="864" fg:w="2"/><text x="70.6656%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.4971%" y="453" width="0.0815%" height="15" fill="rgb(234,165,11)" fg:x="865" fg:w="1"/><text x="70.7471%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="70.4156%" y="565" width="0.2445%" height="15" fill="rgb(215,96,23)" fg:x="864" fg:w="3"/><text x="70.6656%" y="575.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="70.4156%" y="549" width="0.2445%" height="15" fill="rgb(233,179,26)" fg:x="864" fg:w="3"/><text x="70.6656%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="70.4156%" y="533" width="0.2445%" height="15" fill="rgb(225,129,33)" fg:x="864" fg:w="3"/><text x="70.6656%" y="543.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="70.4156%" y="517" width="0.2445%" height="15" fill="rgb(237,49,13)" fg:x="864" fg:w="3"/><text x="70.6656%" y="527.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="70.4156%" y="501" width="0.2445%" height="15" fill="rgb(211,3,31)" fg:x="864" fg:w="3"/><text x="70.6656%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="70.4156%" y="485" width="0.2445%" height="15" fill="rgb(216,152,19)" fg:x="864" fg:w="3"/><text x="70.6656%" y="495.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="70.5786%" y="469" width="0.0815%" height="15" fill="rgb(251,121,35)" fg:x="866" fg:w="1"/><text x="70.8286%" y="479.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="70.5786%" y="453" width="0.0815%" height="15" fill="rgb(210,217,47)" fg:x="866" fg:w="1"/><text x="70.8286%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6601%" y="533" width="0.0815%" height="15" fill="rgb(244,116,22)" fg:x="867" fg:w="1"/><text x="70.9101%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8231%" y="501" width="0.0815%" height="15" fill="rgb(228,17,21)" fg:x="869" fg:w="1"/><text x="71.0731%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9046%" y="485" width="0.0815%" height="15" fill="rgb(240,149,34)" fg:x="870" fg:w="1"/><text x="71.1546%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="70.9046%" y="501" width="0.2445%" height="15" fill="rgb(208,125,47)" fg:x="870" fg:w="3"/><text x="71.1546%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="70.9861%" y="485" width="0.1630%" height="15" fill="rgb(249,186,39)" fg:x="871" fg:w="2"/><text x="71.2361%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="71.1491%" y="501" width="0.2445%" height="15" fill="rgb(240,220,33)" fg:x="873" fg:w="3"/><text x="71.3991%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="71.1491%" y="485" width="0.2445%" height="15" fill="rgb(243,110,23)" fg:x="873" fg:w="3"/><text x="71.3991%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="71.3936%" y="501" width="0.1630%" height="15" fill="rgb(219,163,46)" fg:x="876" fg:w="2"/><text x="71.6436%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="71.4751%" y="485" width="0.0815%" height="15" fill="rgb(216,126,30)" fg:x="877" fg:w="1"/><text x="71.7251%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="71.4751%" y="469" width="0.0815%" height="15" fill="rgb(208,139,11)" fg:x="877" fg:w="1"/><text x="71.7251%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="71.4751%" y="453" width="0.0815%" height="15" fill="rgb(213,118,36)" fg:x="877" fg:w="1"/><text x="71.7251%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.4751%" y="437" width="0.0815%" height="15" fill="rgb(226,43,17)" fg:x="877" fg:w="1"/><text x="71.7251%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.4751%" y="421" width="0.0815%" height="15" fill="rgb(254,217,4)" fg:x="877" fg:w="1"/><text x="71.7251%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4751%" y="405" width="0.0815%" height="15" fill="rgb(210,134,47)" fg:x="877" fg:w="1"/><text x="71.7251%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="71.5566%" y="453" width="0.0815%" height="15" fill="rgb(237,24,49)" fg:x="878" fg:w="1"/><text x="71.8066%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="71.5566%" y="437" width="0.0815%" height="15" fill="rgb(251,39,46)" fg:x="878" fg:w="1"/><text x="71.8066%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.8011%" y="437" width="0.0815%" height="15" fill="rgb(251,220,3)" fg:x="881" fg:w="1"/><text x="72.0511%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="71.8826%" y="437" width="0.0815%" height="15" fill="rgb(228,105,12)" fg:x="882" fg:w="1"/><text x="72.1326%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="71.8826%" y="421" width="0.0815%" height="15" fill="rgb(215,196,1)" fg:x="882" fg:w="1"/><text x="72.1326%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.8826%" y="405" width="0.0815%" height="15" fill="rgb(214,33,39)" fg:x="882" fg:w="1"/><text x="72.1326%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.8826%" y="389" width="0.0815%" height="15" fill="rgb(220,19,52)" fg:x="882" fg:w="1"/><text x="72.1326%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="71.9641%" y="437" width="0.0815%" height="15" fill="rgb(221,78,38)" fg:x="883" fg:w="1"/><text x="72.2141%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="71.9641%" y="421" width="0.0815%" height="15" fill="rgb(253,30,16)" fg:x="883" fg:w="1"/><text x="72.2141%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="72.0456%" y="437" width="0.0815%" height="15" fill="rgb(242,65,0)" fg:x="884" fg:w="1"/><text x="72.2956%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="72.0456%" y="421" width="0.0815%" height="15" fill="rgb(235,201,12)" fg:x="884" fg:w="1"/><text x="72.2956%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (46 samples, 3.75%)</title><rect x="72.1271%" y="437" width="3.7490%" height="15" fill="rgb(233,161,9)" fg:x="885" fg:w="46"/><text x="72.3771%" y="447.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (46 samples, 3.75%)</title><rect x="72.1271%" y="421" width="3.7490%" height="15" fill="rgb(241,207,41)" fg:x="885" fg:w="46"/><text x="72.3771%" y="431.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (46 samples, 3.75%)</title><rect x="72.1271%" y="405" width="3.7490%" height="15" fill="rgb(212,69,46)" fg:x="885" fg:w="46"/><text x="72.3771%" y="415.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1 samples, 0.08%)</title><rect x="75.8761%" y="437" width="0.0815%" height="15" fill="rgb(239,69,45)" fg:x="931" fg:w="1"/><text x="76.1261%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="75.9576%" y="437" width="0.3260%" height="15" fill="rgb(242,117,48)" fg:x="932" fg:w="4"/><text x="76.2076%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2021%" y="421" width="0.0815%" height="15" fill="rgb(228,41,36)" fg:x="935" fg:w="1"/><text x="76.4521%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 4.81%)</title><rect x="71.5566%" y="485" width="4.8085%" height="15" fill="rgb(212,3,32)" fg:x="878" fg:w="59"/><text x="71.8066%" y="495.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (59 samples, 4.81%)</title><rect x="71.5566%" y="469" width="4.8085%" height="15" fill="rgb(233,41,49)" fg:x="878" fg:w="59"/><text x="71.8066%" y="479.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (58 samples, 4.73%)</title><rect x="71.6381%" y="453" width="4.7270%" height="15" fill="rgb(252,170,49)" fg:x="879" fg:w="58"/><text x="71.8881%" y="463.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="76.2836%" y="437" width="0.0815%" height="15" fill="rgb(229,53,26)" fg:x="936" fg:w="1"/><text x="76.5336%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.2836%" y="421" width="0.0815%" height="15" fill="rgb(217,157,12)" fg:x="936" fg:w="1"/><text x="76.5336%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.2836%" y="405" width="0.0815%" height="15" fill="rgb(227,17,9)" fg:x="936" fg:w="1"/><text x="76.5336%" y="415.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="76.4466%" y="469" width="0.0815%" height="15" fill="rgb(218,84,12)" fg:x="938" fg:w="1"/><text x="76.6966%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="76.5281%" y="469" width="0.0815%" height="15" fill="rgb(212,79,24)" fg:x="939" fg:w="1"/><text x="76.7781%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.5281%" y="453" width="0.0815%" height="15" fill="rgb(217,222,37)" fg:x="939" fg:w="1"/><text x="76.7781%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.5281%" y="437" width="0.0815%" height="15" fill="rgb(246,208,8)" fg:x="939" fg:w="1"/><text x="76.7781%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.5281%" y="421" width="0.0815%" height="15" fill="rgb(244,133,10)" fg:x="939" fg:w="1"/><text x="76.7781%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.57%)</title><rect x="76.3651%" y="485" width="0.5705%" height="15" fill="rgb(209,219,41)" fg:x="937" fg:w="7"/><text x="76.6151%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="76.6096%" y="469" width="0.3260%" height="15" fill="rgb(253,175,45)" fg:x="940" fg:w="4"/><text x="76.8596%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="76.9356%" y="469" width="0.0815%" height="15" fill="rgb(235,100,37)" fg:x="944" fg:w="1"/><text x="77.1856%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.9356%" y="453" width="0.0815%" height="15" fill="rgb(225,87,19)" fg:x="944" fg:w="1"/><text x="77.1856%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9356%" y="437" width="0.0815%" height="15" fill="rgb(217,152,17)" fg:x="944" fg:w="1"/><text x="77.1856%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (68 samples, 5.54%)</title><rect x="71.5566%" y="501" width="5.5420%" height="15" fill="rgb(235,72,13)" fg:x="878" fg:w="68"/><text x="71.8066%" y="511.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="76.9356%" y="485" width="0.1630%" height="15" fill="rgb(233,140,18)" fg:x="944" fg:w="2"/><text x="77.1856%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="77.0171%" y="469" width="0.0815%" height="15" fill="rgb(207,212,28)" fg:x="945" fg:w="1"/><text x="77.2671%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.0171%" y="453" width="0.0815%" height="15" fill="rgb(220,130,25)" fg:x="945" fg:w="1"/><text x="77.2671%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::new (79 samples, 6.44%)</title><rect x="70.7416%" y="517" width="6.4385%" height="15" fill="rgb(205,55,34)" fg:x="868" fg:w="79"/><text x="70.9916%" y="527.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="77.0986%" y="501" width="0.0815%" height="15" fill="rgb(237,54,35)" fg:x="946" fg:w="1"/><text x="77.3486%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="77.0986%" y="485" width="0.0815%" height="15" fill="rgb(208,67,23)" fg:x="946" fg:w="1"/><text x="77.3486%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="77.0986%" y="469" width="0.0815%" height="15" fill="rgb(206,207,50)" fg:x="946" fg:w="1"/><text x="77.3486%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="77.2616%" y="469" width="0.0815%" height="15" fill="rgb(213,211,42)" fg:x="948" fg:w="1"/><text x="77.5116%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="77.2616%" y="453" width="0.0815%" height="15" fill="rgb(252,197,50)" fg:x="948" fg:w="1"/><text x="77.5116%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="77.1801%" y="485" width="0.2445%" height="15" fill="rgb(251,211,41)" fg:x="947" fg:w="3"/><text x="77.4301%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="77.3431%" y="469" width="0.0815%" height="15" fill="rgb(229,211,5)" fg:x="949" fg:w="1"/><text x="77.5931%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.3431%" y="453" width="0.0815%" height="15" fill="rgb(239,36,31)" fg:x="949" fg:w="1"/><text x="77.5931%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.3431%" y="437" width="0.0815%" height="15" fill="rgb(248,67,31)" fg:x="949" fg:w="1"/><text x="77.5931%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3431%" y="421" width="0.0815%" height="15" fill="rgb(249,55,44)" fg:x="949" fg:w="1"/><text x="77.5931%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="77.1801%" y="517" width="0.3260%" height="15" fill="rgb(216,82,12)" fg:x="947" fg:w="4"/><text x="77.4301%" y="527.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="77.1801%" y="501" width="0.3260%" height="15" fill="rgb(242,174,1)" fg:x="947" fg:w="4"/><text x="77.4301%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="77.4246%" y="485" width="0.0815%" height="15" fill="rgb(208,120,29)" fg:x="950" fg:w="1"/><text x="77.6746%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.5876%" y="453" width="0.0815%" height="15" fill="rgb(221,105,43)" fg:x="952" fg:w="1"/><text x="77.8376%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.5876%" y="437" width="0.0815%" height="15" fill="rgb(234,124,22)" fg:x="952" fg:w="1"/><text x="77.8376%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.5876%" y="421" width="0.0815%" height="15" fill="rgb(212,23,30)" fg:x="952" fg:w="1"/><text x="77.8376%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="77.5876%" y="469" width="0.1630%" height="15" fill="rgb(219,122,53)" fg:x="952" fg:w="2"/><text x="77.8376%" y="479.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="77.6691%" y="453" width="0.0815%" height="15" fill="rgb(248,84,24)" fg:x="953" fg:w="1"/><text x="77.9191%" y="463.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (87 samples, 7.09%)</title><rect x="70.7416%" y="533" width="7.0905%" height="15" fill="rgb(245,115,18)" fg:x="868" fg:w="87"/><text x="70.9916%" y="543.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="77.5061%" y="517" width="0.3260%" height="15" fill="rgb(227,176,51)" fg:x="951" fg:w="4"/><text x="77.7561%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="77.5061%" y="501" width="0.3260%" height="15" fill="rgb(229,63,42)" fg:x="951" fg:w="4"/><text x="77.7561%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="77.5876%" y="485" width="0.2445%" height="15" fill="rgb(247,202,24)" fg:x="952" fg:w="3"/><text x="77.8376%" y="495.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="77.7506%" y="469" width="0.0815%" height="15" fill="rgb(244,173,20)" fg:x="954" fg:w="1"/><text x="78.0006%" y="479.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="77.7506%" y="453" width="0.0815%" height="15" fill="rgb(242,81,47)" fg:x="954" fg:w="1"/><text x="78.0006%" y="463.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="77.7506%" y="437" width="0.0815%" height="15" fill="rgb(231,185,54)" fg:x="954" fg:w="1"/><text x="78.0006%" y="447.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (89 samples, 7.25%)</title><rect x="70.6601%" y="565" width="7.2535%" height="15" fill="rgb(243,55,32)" fg:x="867" fg:w="89"/><text x="70.9101%" y="575.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (89 samples, 7.25%)</title><rect x="70.6601%" y="549" width="7.2535%" height="15" fill="rgb(208,167,19)" fg:x="867" fg:w="89"/><text x="70.9101%" y="559.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Config::match_kind (1 samples, 0.08%)</title><rect x="77.8321%" y="533" width="0.0815%" height="15" fill="rgb(231,72,35)" fg:x="955" fg:w="1"/><text x="78.0821%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="77.9136%" y="533" width="0.0815%" height="15" fill="rgb(250,173,51)" fg:x="956" fg:w="1"/><text x="78.1636%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="77.9136%" y="517" width="0.0815%" height="15" fill="rgb(209,5,22)" fg:x="956" fg:w="1"/><text x="78.1636%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="77.9136%" y="501" width="0.0815%" height="15" fill="rgb(250,174,19)" fg:x="956" fg:w="1"/><text x="78.1636%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9136%" y="485" width="0.0815%" height="15" fill="rgb(217,3,49)" fg:x="956" fg:w="1"/><text x="78.1636%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="77.9136%" y="565" width="0.1630%" height="15" fill="rgb(218,225,5)" fg:x="956" fg:w="2"/><text x="78.1636%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="77.9136%" y="549" width="0.1630%" height="15" fill="rgb(236,89,11)" fg:x="956" fg:w="2"/><text x="78.1636%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="77.9951%" y="533" width="0.0815%" height="15" fill="rgb(206,33,28)" fg:x="957" fg:w="1"/><text x="78.2451%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="77.9951%" y="517" width="0.0815%" height="15" fill="rgb(241,56,42)" fg:x="957" fg:w="1"/><text x="78.2451%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9951%" y="501" width="0.0815%" height="15" fill="rgb(222,44,11)" fg:x="957" fg:w="1"/><text x="78.2451%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.2396%" y="485" width="0.1630%" height="15" fill="rgb(234,111,20)" fg:x="960" fg:w="2"/><text x="78.4896%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3211%" y="469" width="0.0815%" height="15" fill="rgb(237,77,6)" fg:x="961" fg:w="1"/><text x="78.5711%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="78.3211%" y="453" width="0.0815%" height="15" fill="rgb(235,111,23)" fg:x="961" fg:w="1"/><text x="78.5711%" y="463.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (101 samples, 8.23%)</title><rect x="70.3341%" y="581" width="8.2315%" height="15" fill="rgb(251,135,29)" fg:x="863" fg:w="101"/><text x="70.5841%" y="591.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="78.0766%" y="565" width="0.4890%" height="15" fill="rgb(217,57,1)" fg:x="958" fg:w="6"/><text x="78.3266%" y="575.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="78.0766%" y="549" width="0.4890%" height="15" fill="rgb(249,119,31)" fg:x="958" fg:w="6"/><text x="78.3266%" y="559.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="78.0766%" y="533" width="0.4890%" height="15" fill="rgb(233,164,33)" fg:x="958" fg:w="6"/><text x="78.3266%" y="543.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="78.0766%" y="517" width="0.4890%" height="15" fill="rgb(250,217,43)" fg:x="958" fg:w="6"/><text x="78.3266%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="78.0766%" y="501" width="0.4890%" height="15" fill="rgb(232,154,50)" fg:x="958" fg:w="6"/><text x="78.3266%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="78.4026%" y="485" width="0.1630%" height="15" fill="rgb(227,190,8)" fg:x="962" fg:w="2"/><text x="78.6526%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="78.5656%" y="517" width="0.0815%" height="15" fill="rgb(209,217,32)" fg:x="964" fg:w="1"/><text x="78.8156%" y="527.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.5656%" y="501" width="0.0815%" height="15" fill="rgb(243,203,50)" fg:x="964" fg:w="1"/><text x="78.8156%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.5656%" y="485" width="0.0815%" height="15" fill="rgb(232,152,27)" fg:x="964" fg:w="1"/><text x="78.8156%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.5656%" y="469" width="0.0815%" height="15" fill="rgb(240,34,29)" fg:x="964" fg:w="1"/><text x="78.8156%" y="479.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="78.6471%" y="517" width="0.0815%" height="15" fill="rgb(215,185,52)" fg:x="965" fg:w="1"/><text x="78.8971%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.6471%" y="501" width="0.0815%" height="15" fill="rgb(240,89,49)" fg:x="965" fg:w="1"/><text x="78.8971%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.6471%" y="485" width="0.0815%" height="15" fill="rgb(225,12,52)" fg:x="965" fg:w="1"/><text x="78.8971%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.6471%" y="469" width="0.0815%" height="15" fill="rgb(239,128,45)" fg:x="965" fg:w="1"/><text x="78.8971%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="78.7286%" y="485" width="0.0815%" height="15" fill="rgb(211,78,47)" fg:x="966" fg:w="1"/><text x="78.9786%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.81%)</title><rect x="78.7286%" y="501" width="0.8150%" height="15" fill="rgb(232,31,21)" fg:x="966" fg:w="10"/><text x="78.9786%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.73%)</title><rect x="78.8101%" y="485" width="0.7335%" height="15" fill="rgb(222,168,14)" fg:x="967" fg:w="9"/><text x="79.0601%" y="495.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="79.2991%" y="469" width="0.2445%" height="15" fill="rgb(209,128,24)" fg:x="973" fg:w="3"/><text x="79.5491%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="79.6251%" y="485" width="0.0815%" height="15" fill="rgb(249,35,13)" fg:x="977" fg:w="1"/><text x="79.8751%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="79.6251%" y="469" width="0.0815%" height="15" fill="rgb(218,7,2)" fg:x="977" fg:w="1"/><text x="79.8751%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="79.7066%" y="485" width="0.4890%" height="15" fill="rgb(238,107,27)" fg:x="978" fg:w="6"/><text x="79.9566%" y="495.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.73%)</title><rect x="79.5436%" y="501" width="0.7335%" height="15" fill="rgb(217,88,38)" fg:x="976" fg:w="9"/><text x="79.7936%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="80.1956%" y="485" width="0.0815%" height="15" fill="rgb(230,207,0)" fg:x="984" fg:w="1"/><text x="80.4456%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="80.1956%" y="469" width="0.0815%" height="15" fill="rgb(249,64,54)" fg:x="984" fg:w="1"/><text x="80.4456%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="80.1956%" y="453" width="0.0815%" height="15" fill="rgb(231,7,11)" fg:x="984" fg:w="1"/><text x="80.4456%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.1956%" y="437" width="0.0815%" height="15" fill="rgb(205,149,21)" fg:x="984" fg:w="1"/><text x="80.4456%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="80.4401%" y="469" width="0.1630%" height="15" fill="rgb(215,126,34)" fg:x="987" fg:w="2"/><text x="80.6901%" y="479.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="80.6031%" y="469" width="0.0815%" height="15" fill="rgb(241,132,45)" fg:x="989" fg:w="1"/><text x="80.8531%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.6031%" y="453" width="0.0815%" height="15" fill="rgb(252,69,32)" fg:x="989" fg:w="1"/><text x="80.8531%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.6031%" y="437" width="0.0815%" height="15" fill="rgb(232,204,19)" fg:x="989" fg:w="1"/><text x="80.8531%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.6031%" y="421" width="0.0815%" height="15" fill="rgb(249,15,47)" fg:x="989" fg:w="1"/><text x="80.8531%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.33%)</title><rect x="81.3366%" y="437" width="0.3260%" height="15" fill="rgb(209,227,23)" fg:x="998" fg:w="4"/><text x="81.5866%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="81.3366%" y="421" width="0.3260%" height="15" fill="rgb(248,92,24)" fg:x="998" fg:w="4"/><text x="81.5866%" y="431.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="81.3366%" y="405" width="0.3260%" height="15" fill="rgb(247,59,2)" fg:x="998" fg:w="4"/><text x="81.5866%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (14 samples, 1.14%)</title><rect x="80.6846%" y="469" width="1.1410%" height="15" fill="rgb(221,30,5)" fg:x="990" fg:w="14"/><text x="80.9346%" y="479.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (9 samples, 0.73%)</title><rect x="81.0921%" y="453" width="0.7335%" height="15" fill="rgb(208,108,53)" fg:x="995" fg:w="9"/><text x="81.3421%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="81.6626%" y="437" width="0.1630%" height="15" fill="rgb(211,183,26)" fg:x="1002" fg:w="2"/><text x="81.9126%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="81.6626%" y="421" width="0.1630%" height="15" fill="rgb(232,132,4)" fg:x="1002" fg:w="2"/><text x="81.9126%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.7441%" y="405" width="0.0815%" height="15" fill="rgb(253,128,37)" fg:x="1003" fg:w="1"/><text x="81.9941%" y="415.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.49%)</title><rect x="81.8256%" y="469" width="0.4890%" height="15" fill="rgb(221,58,24)" fg:x="1004" fg:w="6"/><text x="82.0756%" y="479.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.41%)</title><rect x="81.9071%" y="453" width="0.4075%" height="15" fill="rgb(230,54,45)" fg:x="1005" fg:w="5"/><text x="82.1571%" y="463.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.41%)</title><rect x="81.9071%" y="437" width="0.4075%" height="15" fill="rgb(254,21,18)" fg:x="1005" fg:w="5"/><text x="82.1571%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (26 samples, 2.12%)</title><rect x="80.2771%" y="501" width="2.1190%" height="15" fill="rgb(221,108,0)" fg:x="985" fg:w="26"/><text x="80.5271%" y="511.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (26 samples, 2.12%)</title><rect x="80.2771%" y="485" width="2.1190%" height="15" fill="rgb(206,95,1)" fg:x="985" fg:w="26"/><text x="80.5271%" y="495.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="82.3146%" y="469" width="0.0815%" height="15" fill="rgb(237,52,5)" fg:x="1010" fg:w="1"/><text x="82.5646%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="82.3961%" y="501" width="0.0815%" height="15" fill="rgb(218,150,34)" fg:x="1011" fg:w="1"/><text x="82.6461%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="83.2111%" y="389" width="0.0815%" height="15" fill="rgb(235,194,28)" fg:x="1021" fg:w="1"/><text x="83.4611%" y="399.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="83.2926%" y="389" width="0.1630%" height="15" fill="rgb(245,92,18)" fg:x="1022" fg:w="2"/><text x="83.5426%" y="399.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="83.4556%" y="389" width="0.1630%" height="15" fill="rgb(253,203,53)" fg:x="1024" fg:w="2"/><text x="83.7056%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.41%)</title><rect x="83.6186%" y="389" width="0.4075%" height="15" fill="rgb(249,185,47)" fg:x="1026" fg:w="5"/><text x="83.8686%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="83.9446%" y="373" width="0.0815%" height="15" fill="rgb(252,194,52)" fg:x="1030" fg:w="1"/><text x="84.1946%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.9446%" y="357" width="0.0815%" height="15" fill="rgb(210,53,36)" fg:x="1030" fg:w="1"/><text x="84.1946%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.9446%" y="341" width="0.0815%" height="15" fill="rgb(237,37,25)" fg:x="1030" fg:w="1"/><text x="84.1946%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="84.0261%" y="389" width="0.0815%" height="15" fill="rgb(242,116,27)" fg:x="1031" fg:w="1"/><text x="84.2761%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.5151%" y="357" width="0.0815%" height="15" fill="rgb(213,185,26)" fg:x="1037" fg:w="1"/><text x="84.7651%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="84.5966%" y="357" width="0.1630%" height="15" fill="rgb(225,204,8)" fg:x="1038" fg:w="2"/><text x="84.8466%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.6781%" y="341" width="0.0815%" height="15" fill="rgb(254,111,37)" fg:x="1039" fg:w="1"/><text x="84.9281%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.98%)</title><rect x="84.1076%" y="389" width="0.9780%" height="15" fill="rgb(242,35,9)" fg:x="1032" fg:w="12"/><text x="84.3576%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.73%)</title><rect x="84.3521%" y="373" width="0.7335%" height="15" fill="rgb(232,138,49)" fg:x="1035" fg:w="9"/><text x="84.6021%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.33%)</title><rect x="84.7596%" y="357" width="0.3260%" height="15" fill="rgb(247,56,4)" fg:x="1040" fg:w="4"/><text x="85.0096%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="85.0041%" y="341" width="0.0815%" height="15" fill="rgb(226,179,17)" fg:x="1043" fg:w="1"/><text x="85.2541%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.0041%" y="325" width="0.0815%" height="15" fill="rgb(216,163,45)" fg:x="1043" fg:w="1"/><text x="85.2541%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="85.0856%" y="389" width="0.1630%" height="15" fill="rgb(211,157,3)" fg:x="1044" fg:w="2"/><text x="85.3356%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="85.0856%" y="373" width="0.1630%" height="15" fill="rgb(234,44,20)" fg:x="1044" fg:w="2"/><text x="85.3356%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="85.0856%" y="357" width="0.1630%" height="15" fill="rgb(254,138,23)" fg:x="1044" fg:w="2"/><text x="85.3356%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (44 samples, 3.59%)</title><rect x="85.2486%" y="389" width="3.5860%" height="15" fill="rgb(206,119,39)" fg:x="1046" fg:w="44"/><text x="85.4986%" y="399.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (44 samples, 3.59%)</title><rect x="85.2486%" y="373" width="3.5860%" height="15" fill="rgb(231,105,52)" fg:x="1046" fg:w="44"/><text x="85.4986%" y="383.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (44 samples, 3.59%)</title><rect x="85.2486%" y="357" width="3.5860%" height="15" fill="rgb(250,20,5)" fg:x="1046" fg:w="44"/><text x="85.4986%" y="367.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="88.8346%" y="389" width="0.1630%" height="15" fill="rgb(215,198,30)" fg:x="1090" fg:w="2"/><text x="89.0846%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.9161%" y="373" width="0.0815%" height="15" fill="rgb(246,142,8)" fg:x="1091" fg:w="1"/><text x="89.1661%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 6.85%)</title><rect x="82.4776%" y="485" width="6.8460%" height="15" fill="rgb(243,26,38)" fg:x="1012" fg:w="84"/><text x="82.7276%" y="495.50">&lt;core::it..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (84 samples, 6.85%)</title><rect x="82.4776%" y="469" width="6.8460%" height="15" fill="rgb(205,133,28)" fg:x="1012" fg:w="84"/><text x="82.7276%" y="479.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (84 samples, 6.85%)</title><rect x="82.4776%" y="453" width="6.8460%" height="15" fill="rgb(212,34,0)" fg:x="1012" fg:w="84"/><text x="82.7276%" y="463.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (84 samples, 6.85%)</title><rect x="82.4776%" y="437" width="6.8460%" height="15" fill="rgb(251,226,22)" fg:x="1012" fg:w="84"/><text x="82.7276%" y="447.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (84 samples, 6.85%)</title><rect x="82.4776%" y="421" width="6.8460%" height="15" fill="rgb(252,119,9)" fg:x="1012" fg:w="84"/><text x="82.7276%" y="431.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (84 samples, 6.85%)</title><rect x="82.4776%" y="405" width="6.8460%" height="15" fill="rgb(213,150,50)" fg:x="1012" fg:w="84"/><text x="82.7276%" y="415.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.33%)</title><rect x="88.9976%" y="389" width="0.3260%" height="15" fill="rgb(212,24,39)" fg:x="1092" fg:w="4"/><text x="89.2476%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="88.9976%" y="373" width="0.3260%" height="15" fill="rgb(213,46,39)" fg:x="1092" fg:w="4"/><text x="89.2476%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="88.9976%" y="357" width="0.3260%" height="15" fill="rgb(239,106,12)" fg:x="1092" fg:w="4"/><text x="89.2476%" y="367.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="89.0791%" y="341" width="0.2445%" height="15" fill="rgb(249,229,21)" fg:x="1093" fg:w="3"/><text x="89.3291%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.3236%" y="485" width="0.0815%" height="15" fill="rgb(212,158,3)" fg:x="1096" fg:w="1"/><text x="89.5736%" y="495.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="89.4866%" y="469" width="0.0815%" height="15" fill="rgb(253,26,48)" fg:x="1098" fg:w="1"/><text x="89.7366%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="89.5681%" y="469" width="0.2445%" height="15" fill="rgb(238,178,20)" fg:x="1099" fg:w="3"/><text x="89.8181%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="89.8126%" y="469" width="0.2445%" height="15" fill="rgb(208,86,15)" fg:x="1102" fg:w="3"/><text x="90.0626%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="89.8941%" y="453" width="0.1630%" height="15" fill="rgb(239,42,53)" fg:x="1103" fg:w="2"/><text x="90.1441%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.8941%" y="437" width="0.1630%" height="15" fill="rgb(245,226,8)" fg:x="1103" fg:w="2"/><text x="90.1441%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.8941%" y="421" width="0.1630%" height="15" fill="rgb(216,176,32)" fg:x="1103" fg:w="2"/><text x="90.1441%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.1385%" y="453" width="0.0815%" height="15" fill="rgb(231,186,21)" fg:x="1106" fg:w="1"/><text x="90.3885%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="90.0570%" y="469" width="0.3260%" height="15" fill="rgb(205,95,49)" fg:x="1105" fg:w="4"/><text x="90.3070%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="90.2200%" y="453" width="0.1630%" height="15" fill="rgb(217,145,8)" fg:x="1107" fg:w="2"/><text x="90.4700%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::new (146 samples, 11.90%)</title><rect x="78.7286%" y="517" width="11.8989%" height="15" fill="rgb(239,144,48)" fg:x="966" fg:w="146"/><text x="78.9786%" y="527.50">regex_automata::me..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (100 samples, 8.15%)</title><rect x="82.4776%" y="501" width="8.1500%" height="15" fill="rgb(214,189,23)" fg:x="1012" fg:w="100"/><text x="82.7276%" y="511.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.22%)</title><rect x="89.4051%" y="485" width="1.2225%" height="15" fill="rgb(229,157,17)" fg:x="1097" fg:w="15"/><text x="89.6551%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="90.3830%" y="469" width="0.2445%" height="15" fill="rgb(230,5,48)" fg:x="1109" fg:w="3"/><text x="90.6330%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="90.6275%" y="469" width="0.0815%" height="15" fill="rgb(224,156,48)" fg:x="1112" fg:w="1"/><text x="90.8775%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="90.6275%" y="517" width="0.2445%" height="15" fill="rgb(223,14,29)" fg:x="1112" fg:w="3"/><text x="90.8775%" y="527.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="90.6275%" y="501" width="0.2445%" height="15" fill="rgb(229,96,36)" fg:x="1112" fg:w="3"/><text x="90.8775%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="90.6275%" y="485" width="0.2445%" height="15" fill="rgb(231,102,53)" fg:x="1112" fg:w="3"/><text x="90.8775%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="90.7090%" y="469" width="0.1630%" height="15" fill="rgb(210,77,38)" fg:x="1113" fg:w="2"/><text x="90.9590%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.7090%" y="453" width="0.1630%" height="15" fill="rgb(235,131,6)" fg:x="1113" fg:w="2"/><text x="90.9590%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.7090%" y="437" width="0.1630%" height="15" fill="rgb(252,55,38)" fg:x="1113" fg:w="2"/><text x="90.9590%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="90.7090%" y="421" width="0.1630%" height="15" fill="rgb(246,38,14)" fg:x="1113" fg:w="2"/><text x="90.9590%" y="431.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (153 samples, 12.47%)</title><rect x="78.5656%" y="565" width="12.4694%" height="15" fill="rgb(242,27,5)" fg:x="964" fg:w="153"/><text x="78.8156%" y="575.50">&lt;regex::regex::stri..</text></g><g><title>regex::builders::Builder::build_one_string (153 samples, 12.47%)</title><rect x="78.5656%" y="549" width="12.4694%" height="15" fill="rgb(228,65,35)" fg:x="964" fg:w="153"/><text x="78.8156%" y="559.50">regex::builders::Bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (153 samples, 12.47%)</title><rect x="78.5656%" y="533" width="12.4694%" height="15" fill="rgb(245,93,11)" fg:x="964" fg:w="153"/><text x="78.8156%" y="543.50">regex_automata::met..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="90.8720%" y="517" width="0.1630%" height="15" fill="rgb(213,1,31)" fg:x="1115" fg:w="2"/><text x="91.1220%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="90.8720%" y="501" width="0.1630%" height="15" fill="rgb(237,205,14)" fg:x="1115" fg:w="2"/><text x="91.1220%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="90.9535%" y="485" width="0.0815%" height="15" fill="rgb(232,118,45)" fg:x="1116" fg:w="1"/><text x="91.2035%" y="495.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="90.9535%" y="469" width="0.0815%" height="15" fill="rgb(218,5,6)" fg:x="1116" fg:w="1"/><text x="91.2035%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.9535%" y="453" width="0.0815%" height="15" fill="rgb(251,87,51)" fg:x="1116" fg:w="1"/><text x="91.2035%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.9535%" y="437" width="0.0815%" height="15" fill="rgb(207,225,20)" fg:x="1116" fg:w="1"/><text x="91.2035%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.9535%" y="421" width="0.0815%" height="15" fill="rgb(222,78,54)" fg:x="1116" fg:w="1"/><text x="91.2035%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="91.0350%" y="517" width="0.0815%" height="15" fill="rgb(232,85,16)" fg:x="1117" fg:w="1"/><text x="91.2850%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.0350%" y="501" width="0.0815%" height="15" fill="rgb(244,25,33)" fg:x="1117" fg:w="1"/><text x="91.2850%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="91.0350%" y="565" width="0.1630%" height="15" fill="rgb(233,24,36)" fg:x="1117" fg:w="2"/><text x="91.2850%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="91.0350%" y="549" width="0.1630%" height="15" fill="rgb(253,49,54)" fg:x="1117" fg:w="2"/><text x="91.2850%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="91.0350%" y="533" width="0.1630%" height="15" fill="rgb(245,12,22)" fg:x="1117" fg:w="2"/><text x="91.2850%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="91.1165%" y="517" width="0.0815%" height="15" fill="rgb(253,141,28)" fg:x="1118" fg:w="1"/><text x="91.3665%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="91.1165%" y="501" width="0.0815%" height="15" fill="rgb(225,207,27)" fg:x="1118" fg:w="1"/><text x="91.3665%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="91.3610%" y="517" width="0.0815%" height="15" fill="rgb(220,84,2)" fg:x="1121" fg:w="1"/><text x="91.6110%" y="527.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="91.3610%" y="501" width="0.0815%" height="15" fill="rgb(224,37,37)" fg:x="1121" fg:w="1"/><text x="91.6110%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="91.2795%" y="549" width="0.2445%" height="15" fill="rgb(220,143,18)" fg:x="1120" fg:w="3"/><text x="91.5295%" y="559.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="91.2795%" y="533" width="0.2445%" height="15" fill="rgb(210,88,33)" fg:x="1120" fg:w="3"/><text x="91.5295%" y="543.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="91.4425%" y="517" width="0.0815%" height="15" fill="rgb(219,87,51)" fg:x="1122" fg:w="1"/><text x="91.6925%" y="527.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="91.4425%" y="501" width="0.0815%" height="15" fill="rgb(211,7,35)" fg:x="1122" fg:w="1"/><text x="91.6925%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="91.6055%" y="485" width="0.0815%" height="15" fill="rgb(232,77,2)" fg:x="1124" fg:w="1"/><text x="91.8555%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.0945%" y="469" width="0.0815%" height="15" fill="rgb(249,94,25)" fg:x="1130" fg:w="1"/><text x="92.3445%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.0945%" y="453" width="0.0815%" height="15" fill="rgb(215,112,2)" fg:x="1130" fg:w="1"/><text x="92.3445%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.0945%" y="437" width="0.0815%" height="15" fill="rgb(226,115,48)" fg:x="1130" fg:w="1"/><text x="92.3445%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="92.1760%" y="453" width="0.0815%" height="15" fill="rgb(249,196,10)" fg:x="1131" fg:w="1"/><text x="92.4260%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="92.1760%" y="469" width="0.1630%" height="15" fill="rgb(237,109,14)" fg:x="1131" fg:w="2"/><text x="92.4260%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="92.2575%" y="453" width="0.0815%" height="15" fill="rgb(217,103,53)" fg:x="1132" fg:w="1"/><text x="92.5075%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="92.2575%" y="437" width="0.0815%" height="15" fill="rgb(244,137,9)" fg:x="1132" fg:w="1"/><text x="92.5075%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.2575%" y="421" width="0.0815%" height="15" fill="rgb(227,201,3)" fg:x="1132" fg:w="1"/><text x="92.5075%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.22%)</title><rect x="91.6055%" y="501" width="1.2225%" height="15" fill="rgb(243,94,6)" fg:x="1124" fg:w="15"/><text x="91.8555%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.14%)</title><rect x="91.6870%" y="485" width="1.1410%" height="15" fill="rgb(235,118,5)" fg:x="1125" fg:w="14"/><text x="91.9370%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.49%)</title><rect x="92.3390%" y="469" width="0.4890%" height="15" fill="rgb(247,10,30)" fg:x="1133" fg:w="6"/><text x="92.5890%" y="479.50"></text></g><g><title>indefinite::rules::number::Number::check (176 samples, 14.34%)</title><rect x="78.5656%" y="581" width="14.3439%" height="15" fill="rgb(205,26,28)" fg:x="964" fg:w="176"/><text x="78.8156%" y="591.50">indefinite::rules::num..</text></g><g><title>regex::regex::string::Regex::is_match_at (21 samples, 1.71%)</title><rect x="91.1980%" y="565" width="1.7115%" height="15" fill="rgb(206,99,35)" fg:x="1119" fg:w="21"/><text x="91.4480%" y="575.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.39%)</title><rect x="91.5240%" y="549" width="1.3855%" height="15" fill="rgb(238,130,40)" fg:x="1123" fg:w="17"/><text x="91.7740%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (17 samples, 1.39%)</title><rect x="91.5240%" y="533" width="1.3855%" height="15" fill="rgb(224,126,31)" fg:x="1123" fg:w="17"/><text x="91.7740%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (17 samples, 1.39%)</title><rect x="91.5240%" y="517" width="1.3855%" height="15" fill="rgb(254,105,17)" fg:x="1123" fg:w="17"/><text x="91.7740%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="92.8280%" y="501" width="0.0815%" height="15" fill="rgb(216,87,36)" fg:x="1139" fg:w="1"/><text x="93.0780%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="92.8280%" y="485" width="0.0815%" height="15" fill="rgb(240,21,12)" fg:x="1139" fg:w="1"/><text x="93.0780%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.8280%" y="469" width="0.0815%" height="15" fill="rgb(245,192,34)" fg:x="1139" fg:w="1"/><text x="93.0780%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.8280%" y="453" width="0.0815%" height="15" fill="rgb(226,100,49)" fg:x="1139" fg:w="1"/><text x="93.0780%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.8280%" y="437" width="0.0815%" height="15" fill="rgb(245,188,27)" fg:x="1139" fg:w="1"/><text x="93.0780%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="92.9910%" y="533" width="0.0815%" height="15" fill="rgb(212,170,8)" fg:x="1141" fg:w="1"/><text x="93.2410%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="92.9910%" y="517" width="0.0815%" height="15" fill="rgb(217,113,29)" fg:x="1141" fg:w="1"/><text x="93.2410%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.1540%" y="501" width="0.0815%" height="15" fill="rgb(237,30,3)" fg:x="1143" fg:w="1"/><text x="93.4040%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.1540%" y="485" width="0.0815%" height="15" fill="rgb(227,19,28)" fg:x="1143" fg:w="1"/><text x="93.4040%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="93.1540%" y="469" width="0.0815%" height="15" fill="rgb(239,172,45)" fg:x="1143" fg:w="1"/><text x="93.4040%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.2355%" y="469" width="0.0815%" height="15" fill="rgb(254,55,39)" fg:x="1144" fg:w="1"/><text x="93.4855%" y="479.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.2355%" y="453" width="0.0815%" height="15" fill="rgb(249,208,12)" fg:x="1144" fg:w="1"/><text x="93.4855%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="93.2355%" y="501" width="0.1630%" height="15" fill="rgb(240,52,13)" fg:x="1144" fg:w="2"/><text x="93.4855%" y="511.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="93.2355%" y="485" width="0.1630%" height="15" fill="rgb(252,149,13)" fg:x="1144" fg:w="2"/><text x="93.4855%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="93.3170%" y="469" width="0.0815%" height="15" fill="rgb(232,81,48)" fg:x="1145" fg:w="1"/><text x="93.5670%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.3170%" y="453" width="0.0815%" height="15" fill="rgb(222,144,2)" fg:x="1145" fg:w="1"/><text x="93.5670%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.3170%" y="437" width="0.0815%" height="15" fill="rgb(216,81,32)" fg:x="1145" fg:w="1"/><text x="93.5670%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.3170%" y="421" width="0.0815%" height="15" fill="rgb(244,78,51)" fg:x="1145" fg:w="1"/><text x="93.5670%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.3170%" y="405" width="0.0815%" height="15" fill="rgb(217,66,21)" fg:x="1145" fg:w="1"/><text x="93.5670%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.3170%" y="389" width="0.0815%" height="15" fill="rgb(247,101,42)" fg:x="1145" fg:w="1"/><text x="93.5670%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="93.5615%" y="485" width="0.0815%" height="15" fill="rgb(227,81,39)" fg:x="1148" fg:w="1"/><text x="93.8115%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.5615%" y="469" width="0.0815%" height="15" fill="rgb(220,223,44)" fg:x="1148" fg:w="1"/><text x="93.8115%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="93.6430%" y="469" width="0.4890%" height="15" fill="rgb(205,218,2)" fg:x="1149" fg:w="6"/><text x="93.8930%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.57%)</title><rect x="93.6430%" y="485" width="0.5705%" height="15" fill="rgb(212,207,28)" fg:x="1149" fg:w="7"/><text x="93.8930%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="94.1320%" y="469" width="0.0815%" height="15" fill="rgb(224,12,41)" fg:x="1155" fg:w="1"/><text x="94.3820%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="94.1320%" y="453" width="0.0815%" height="15" fill="rgb(216,118,12)" fg:x="1155" fg:w="1"/><text x="94.3820%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="94.1320%" y="437" width="0.0815%" height="15" fill="rgb(252,97,46)" fg:x="1155" fg:w="1"/><text x="94.3820%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.1320%" y="421" width="0.0815%" height="15" fill="rgb(244,206,19)" fg:x="1155" fg:w="1"/><text x="94.3820%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.1320%" y="405" width="0.0815%" height="15" fill="rgb(231,84,31)" fg:x="1155" fg:w="1"/><text x="94.3820%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.1320%" y="389" width="0.0815%" height="15" fill="rgb(244,133,0)" fg:x="1155" fg:w="1"/><text x="94.3820%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.2950%" y="405" width="0.0815%" height="15" fill="rgb(223,15,50)" fg:x="1157" fg:w="1"/><text x="94.5450%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="94.2135%" y="469" width="0.2445%" height="15" fill="rgb(250,118,49)" fg:x="1156" fg:w="3"/><text x="94.4635%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="94.2950%" y="453" width="0.1630%" height="15" fill="rgb(248,25,38)" fg:x="1157" fg:w="2"/><text x="94.5450%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="94.2950%" y="437" width="0.1630%" height="15" fill="rgb(215,70,14)" fg:x="1157" fg:w="2"/><text x="94.5450%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="94.2950%" y="421" width="0.1630%" height="15" fill="rgb(215,28,15)" fg:x="1157" fg:w="2"/><text x="94.5450%" y="431.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="94.3765%" y="405" width="0.0815%" height="15" fill="rgb(243,6,28)" fg:x="1158" fg:w="1"/><text x="94.6265%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.4580%" y="469" width="0.0815%" height="15" fill="rgb(222,130,1)" fg:x="1159" fg:w="1"/><text x="94.7080%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="94.5395%" y="453" width="0.1630%" height="15" fill="rgb(236,166,44)" fg:x="1160" fg:w="2"/><text x="94.7895%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::new (17 samples, 1.39%)</title><rect x="93.3985%" y="501" width="1.3855%" height="15" fill="rgb(221,108,14)" fg:x="1146" fg:w="17"/><text x="93.6485%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.57%)</title><rect x="94.2135%" y="485" width="0.5705%" height="15" fill="rgb(252,3,45)" fg:x="1156" fg:w="7"/><text x="94.4635%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="94.5395%" y="469" width="0.2445%" height="15" fill="rgb(237,68,30)" fg:x="1160" fg:w="3"/><text x="94.7895%" y="479.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="94.7025%" y="453" width="0.0815%" height="15" fill="rgb(211,79,22)" fg:x="1162" fg:w="1"/><text x="94.9525%" y="463.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="94.7025%" y="437" width="0.0815%" height="15" fill="rgb(252,185,21)" fg:x="1162" fg:w="1"/><text x="94.9525%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7025%" y="421" width="0.0815%" height="15" fill="rgb(225,189,26)" fg:x="1162" fg:w="1"/><text x="94.9525%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7025%" y="405" width="0.0815%" height="15" fill="rgb(241,30,40)" fg:x="1162" fg:w="1"/><text x="94.9525%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7025%" y="389" width="0.0815%" height="15" fill="rgb(235,215,44)" fg:x="1162" fg:w="1"/><text x="94.9525%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="94.7840%" y="501" width="0.2445%" height="15" fill="rgb(205,8,29)" fg:x="1163" fg:w="3"/><text x="95.0340%" y="511.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="94.7840%" y="485" width="0.2445%" height="15" fill="rgb(241,137,42)" fg:x="1163" fg:w="3"/><text x="95.0340%" y="495.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="94.8655%" y="469" width="0.1630%" height="15" fill="rgb(237,155,2)" fg:x="1164" fg:w="2"/><text x="95.1155%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="94.8655%" y="453" width="0.1630%" height="15" fill="rgb(245,29,42)" fg:x="1164" fg:w="2"/><text x="95.1155%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.8655%" y="437" width="0.1630%" height="15" fill="rgb(234,101,35)" fg:x="1164" fg:w="2"/><text x="95.1155%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.8655%" y="421" width="0.1630%" height="15" fill="rgb(228,64,37)" fg:x="1164" fg:w="2"/><text x="95.1155%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.8655%" y="405" width="0.1630%" height="15" fill="rgb(217,214,36)" fg:x="1164" fg:w="2"/><text x="95.1155%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.0285%" y="453" width="0.0815%" height="15" fill="rgb(243,70,3)" fg:x="1166" fg:w="1"/><text x="95.2785%" y="463.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="95.0285%" y="437" width="0.0815%" height="15" fill="rgb(253,158,52)" fg:x="1166" fg:w="1"/><text x="95.2785%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.0285%" y="469" width="0.1630%" height="15" fill="rgb(234,111,54)" fg:x="1166" fg:w="2"/><text x="95.2785%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="95.1100%" y="453" width="0.0815%" height="15" fill="rgb(217,70,32)" fg:x="1167" fg:w="1"/><text x="95.3600%" y="463.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (29 samples, 2.36%)</title><rect x="92.9095%" y="549" width="2.3635%" height="15" fill="rgb(234,18,33)" fg:x="1140" fg:w="29"/><text x="93.1595%" y="559.50">&lt;r..</text></g><g><title>regex::builders::Builder::build_one_string (27 samples, 2.20%)</title><rect x="93.0725%" y="533" width="2.2005%" height="15" fill="rgb(234,12,49)" fg:x="1142" fg:w="27"/><text x="93.3225%" y="543.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (27 samples, 2.20%)</title><rect x="93.0725%" y="517" width="2.2005%" height="15" fill="rgb(236,10,21)" fg:x="1142" fg:w="27"/><text x="93.3225%" y="527.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="95.0285%" y="501" width="0.2445%" height="15" fill="rgb(248,182,45)" fg:x="1166" fg:w="3"/><text x="95.2785%" y="511.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="95.0285%" y="485" width="0.2445%" height="15" fill="rgb(217,95,36)" fg:x="1166" fg:w="3"/><text x="95.2785%" y="495.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="95.1915%" y="469" width="0.0815%" height="15" fill="rgb(212,110,31)" fg:x="1168" fg:w="1"/><text x="95.4415%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="95.1915%" y="453" width="0.0815%" height="15" fill="rgb(206,32,53)" fg:x="1168" fg:w="1"/><text x="95.4415%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1915%" y="437" width="0.0815%" height="15" fill="rgb(246,141,37)" fg:x="1168" fg:w="1"/><text x="95.4415%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.2730%" y="517" width="0.0815%" height="15" fill="rgb(219,16,7)" fg:x="1169" fg:w="1"/><text x="95.5230%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="95.2730%" y="501" width="0.0815%" height="15" fill="rgb(230,205,45)" fg:x="1169" fg:w="1"/><text x="95.5230%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.2730%" y="485" width="0.0815%" height="15" fill="rgb(231,43,49)" fg:x="1169" fg:w="1"/><text x="95.5230%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.2730%" y="469" width="0.0815%" height="15" fill="rgb(212,106,34)" fg:x="1169" fg:w="1"/><text x="95.5230%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.3545%" y="501" width="0.0815%" height="15" fill="rgb(206,83,17)" fg:x="1170" fg:w="1"/><text x="95.6045%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.3545%" y="485" width="0.0815%" height="15" fill="rgb(244,154,49)" fg:x="1170" fg:w="1"/><text x="95.6045%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="95.2730%" y="549" width="0.2445%" height="15" fill="rgb(244,149,49)" fg:x="1169" fg:w="3"/><text x="95.5230%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="95.2730%" y="533" width="0.2445%" height="15" fill="rgb(227,134,18)" fg:x="1169" fg:w="3"/><text x="95.5230%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="95.3545%" y="517" width="0.1630%" height="15" fill="rgb(237,116,36)" fg:x="1170" fg:w="2"/><text x="95.6045%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.4360%" y="501" width="0.0815%" height="15" fill="rgb(205,129,40)" fg:x="1171" fg:w="1"/><text x="95.6860%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.4360%" y="485" width="0.0815%" height="15" fill="rgb(236,178,4)" fg:x="1171" fg:w="1"/><text x="95.6860%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="95.5990%" y="485" width="0.1630%" height="15" fill="rgb(251,76,53)" fg:x="1173" fg:w="2"/><text x="95.8490%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.6805%" y="469" width="0.0815%" height="15" fill="rgb(242,92,40)" fg:x="1174" fg:w="1"/><text x="95.9305%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6805%" y="453" width="0.0815%" height="15" fill="rgb(209,45,30)" fg:x="1174" fg:w="1"/><text x="95.9305%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.6805%" y="437" width="0.0815%" height="15" fill="rgb(218,157,36)" fg:x="1174" fg:w="1"/><text x="95.9305%" y="447.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (36 samples, 2.93%)</title><rect x="92.9095%" y="565" width="2.9340%" height="15" fill="rgb(222,186,16)" fg:x="1140" fg:w="36"/><text x="93.1595%" y="575.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="95.5175%" y="549" width="0.3260%" height="15" fill="rgb(254,72,35)" fg:x="1172" fg:w="4"/><text x="95.7675%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="95.5990%" y="533" width="0.2445%" height="15" fill="rgb(224,25,35)" fg:x="1173" fg:w="3"/><text x="95.8490%" y="543.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="95.5990%" y="517" width="0.2445%" height="15" fill="rgb(206,135,52)" fg:x="1173" fg:w="3"/><text x="95.8490%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="95.5990%" y="501" width="0.2445%" height="15" fill="rgb(229,174,47)" fg:x="1173" fg:w="3"/><text x="95.8490%" y="511.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="95.7620%" y="485" width="0.0815%" height="15" fill="rgb(242,184,21)" fg:x="1175" fg:w="1"/><text x="96.0120%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7620%" y="469" width="0.0815%" height="15" fill="rgb(213,22,45)" fg:x="1175" fg:w="1"/><text x="96.0120%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7620%" y="453" width="0.0815%" height="15" fill="rgb(237,81,54)" fg:x="1175" fg:w="1"/><text x="96.0120%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7620%" y="437" width="0.0815%" height="15" fill="rgb(248,177,18)" fg:x="1175" fg:w="1"/><text x="96.0120%" y="447.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (316 samples, 25.75%)</title><rect x="70.1711%" y="661" width="25.7539%" height="15" fill="rgb(254,31,16)" fg:x="861" fg:w="316"/><text x="70.4211%" y="671.50">&lt;&amp;kernel::model::entry::Entry as plugins_..</text></g><g><title>plugins_core::looking::model::qualify_name (316 samples, 25.75%)</title><rect x="70.1711%" y="645" width="25.7539%" height="15" fill="rgb(235,20,31)" fg:x="861" fg:w="316"/><text x="70.4211%" y="655.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (316 samples, 25.75%)</title><rect x="70.1711%" y="629" width="25.7539%" height="15" fill="rgb(240,56,43)" fg:x="861" fg:w="316"/><text x="70.4211%" y="639.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (316 samples, 25.75%)</title><rect x="70.1711%" y="613" width="25.7539%" height="15" fill="rgb(237,197,51)" fg:x="861" fg:w="316"/><text x="70.4211%" y="623.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (314 samples, 25.59%)</title><rect x="70.3341%" y="597" width="25.5909%" height="15" fill="rgb(241,162,44)" fg:x="863" fg:w="314"/><text x="70.5841%" y="607.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (37 samples, 3.02%)</title><rect x="92.9095%" y="581" width="3.0155%" height="15" fill="rgb(224,23,20)" fg:x="1140" fg:w="37"/><text x="93.1595%" y="591.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="95.8435%" y="565" width="0.0815%" height="15" fill="rgb(250,109,34)" fg:x="1176" fg:w="1"/><text x="96.0935%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8435%" y="549" width="0.0815%" height="15" fill="rgb(214,175,50)" fg:x="1176" fg:w="1"/><text x="96.0935%" y="559.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="95.9250%" y="629" width="0.0815%" height="15" fill="rgb(213,182,5)" fg:x="1177" fg:w="1"/><text x="96.1750%" y="639.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="95.9250%" y="613" width="0.0815%" height="15" fill="rgb(209,199,19)" fg:x="1177" fg:w="1"/><text x="96.1750%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="95.9250%" y="597" width="0.0815%" height="15" fill="rgb(236,224,42)" fg:x="1177" fg:w="1"/><text x="96.1750%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="95.9250%" y="581" width="0.0815%" height="15" fill="rgb(246,226,29)" fg:x="1177" fg:w="1"/><text x="96.1750%" y="591.50"></text></g><g><title>kernel::model::EntityRef::into_entry (2 samples, 0.16%)</title><rect x="95.9250%" y="661" width="0.1630%" height="15" fill="rgb(227,223,11)" fg:x="1177" fg:w="2"/><text x="96.1750%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="95.9250%" y="645" width="0.1630%" height="15" fill="rgb(219,7,51)" fg:x="1177" fg:w="2"/><text x="96.1750%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="96.0065%" y="629" width="0.0815%" height="15" fill="rgb(245,167,10)" fg:x="1178" fg:w="1"/><text x="96.2565%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.0880%" y="629" width="0.0815%" height="15" fill="rgb(237,224,16)" fg:x="1179" fg:w="1"/><text x="96.3380%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.0880%" y="613" width="0.0815%" height="15" fill="rgb(226,132,13)" fg:x="1179" fg:w="1"/><text x="96.3380%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="96.1695%" y="629" width="0.0815%" height="15" fill="rgb(214,140,3)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="96.1695%" y="613" width="0.0815%" height="15" fill="rgb(221,177,4)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.1695%" y="597" width="0.0815%" height="15" fill="rgb(238,139,3)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="96.1695%" y="581" width="0.0815%" height="15" fill="rgb(216,17,39)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="96.1695%" y="565" width="0.0815%" height="15" fill="rgb(238,120,9)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.1695%" y="549" width="0.0815%" height="15" fill="rgb(244,92,53)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.1695%" y="533" width="0.0815%" height="15" fill="rgb(224,148,33)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.1695%" y="517" width="0.0815%" height="15" fill="rgb(243,6,36)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.1695%" y="501" width="0.0815%" height="15" fill="rgb(230,102,11)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.1695%" y="485" width="0.0815%" height="15" fill="rgb(234,148,36)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="96.1695%" y="469" width="0.0815%" height="15" fill="rgb(251,153,25)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="96.1695%" y="453" width="0.0815%" height="15" fill="rgb(215,129,8)" fg:x="1180" fg:w="1"/><text x="96.4195%" y="463.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (323 samples, 26.32%)</title><rect x="70.0081%" y="693" width="26.3244%" height="15" fill="rgb(224,128,35)" fg:x="859" fg:w="323"/><text x="70.2581%" y="703.50">&lt;plugins_core::looking::actions::LookActio..</text></g><g><title>plugins_core::looking::model::new_area_observation (322 samples, 26.24%)</title><rect x="70.0896%" y="677" width="26.2429%" height="15" fill="rgb(237,56,52)" fg:x="860" fg:w="322"/><text x="70.3396%" y="687.50">plugins_core::looking::model::new_area_obs..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="96.0880%" y="661" width="0.2445%" height="15" fill="rgb(234,213,19)" fg:x="1179" fg:w="3"/><text x="96.3380%" y="671.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="96.0880%" y="645" width="0.2445%" height="15" fill="rgb(252,82,23)" fg:x="1179" fg:w="3"/><text x="96.3380%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.2510%" y="629" width="0.0815%" height="15" fill="rgb(254,201,21)" fg:x="1181" fg:w="1"/><text x="96.5010%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.2510%" y="613" width="0.0815%" height="15" fill="rgb(250,186,11)" fg:x="1181" fg:w="1"/><text x="96.5010%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="96.2510%" y="597" width="0.0815%" height="15" fill="rgb(211,174,5)" fg:x="1181" fg:w="1"/><text x="96.5010%" y="607.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.2510%" y="581" width="0.0815%" height="15" fill="rgb(214,121,10)" fg:x="1181" fg:w="1"/><text x="96.5010%" y="591.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.2510%" y="565" width="0.0815%" height="15" fill="rgb(241,66,2)" fg:x="1181" fg:w="1"/><text x="96.5010%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="96.4140%" y="661" width="0.0815%" height="15" fill="rgb(220,167,19)" fg:x="1183" fg:w="1"/><text x="96.6640%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4955%" y="629" width="0.0815%" height="15" fill="rgb(231,54,50)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.4955%" y="613" width="0.0815%" height="15" fill="rgb(239,217,53)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4955%" y="597" width="0.0815%" height="15" fill="rgb(248,8,0)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.4955%" y="581" width="0.0815%" height="15" fill="rgb(229,118,37)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.4955%" y="565" width="0.0815%" height="15" fill="rgb(253,223,43)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.4955%" y="549" width="0.0815%" height="15" fill="rgb(211,77,36)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.4955%" y="533" width="0.0815%" height="15" fill="rgb(219,3,53)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.4955%" y="517" width="0.0815%" height="15" fill="rgb(244,45,42)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.4955%" y="501" width="0.0815%" height="15" fill="rgb(225,95,27)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.4955%" y="485" width="0.0815%" height="15" fill="rgb(207,74,8)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.4955%" y="469" width="0.0815%" height="15" fill="rgb(243,63,36)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.4955%" y="453" width="0.0815%" height="15" fill="rgb(211,180,12)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.4955%" y="437" width="0.0815%" height="15" fill="rgb(254,166,49)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="447.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="96.4955%" y="421" width="0.0815%" height="15" fill="rgb(205,19,0)" fg:x="1184" fg:w="1"/><text x="96.7455%" y="431.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (5 samples, 0.41%)</title><rect x="96.3325%" y="693" width="0.4075%" height="15" fill="rgb(224,172,32)" fg:x="1182" fg:w="5"/><text x="96.5825%" y="703.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (5 samples, 0.41%)</title><rect x="96.3325%" y="677" width="0.4075%" height="15" fill="rgb(254,136,30)" fg:x="1182" fg:w="5"/><text x="96.5825%" y="687.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="96.4955%" y="661" width="0.2445%" height="15" fill="rgb(246,19,35)" fg:x="1184" fg:w="3"/><text x="96.7455%" y="671.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="96.4955%" y="645" width="0.2445%" height="15" fill="rgb(219,24,36)" fg:x="1184" fg:w="3"/><text x="96.7455%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="96.5770%" y="629" width="0.1630%" height="15" fill="rgb(251,55,1)" fg:x="1185" fg:w="2"/><text x="96.8270%" y="639.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="96.6585%" y="613" width="0.0815%" height="15" fill="rgb(218,117,39)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="96.6585%" y="597" width="0.0815%" height="15" fill="rgb(248,169,11)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="96.6585%" y="581" width="0.0815%" height="15" fill="rgb(244,40,44)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="96.6585%" y="565" width="0.0815%" height="15" fill="rgb(234,62,37)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.6585%" y="549" width="0.0815%" height="15" fill="rgb(207,117,42)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.6585%" y="533" width="0.0815%" height="15" fill="rgb(213,43,2)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.6585%" y="517" width="0.0815%" height="15" fill="rgb(244,202,51)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.6585%" y="501" width="0.0815%" height="15" fill="rgb(253,174,46)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.6585%" y="485" width="0.0815%" height="15" fill="rgb(251,23,1)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.6585%" y="469" width="0.0815%" height="15" fill="rgb(253,26,1)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6585%" y="453" width="0.0815%" height="15" fill="rgb(216,89,31)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="96.6585%" y="437" width="0.0815%" height="15" fill="rgb(209,109,5)" fg:x="1186" fg:w="1"/><text x="96.9085%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (1 samples, 0.08%)</title><rect x="96.7400%" y="661" width="0.0815%" height="15" fill="rgb(229,63,13)" fg:x="1187" fg:w="1"/><text x="96.9900%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.7400%" y="645" width="0.0815%" height="15" fill="rgb(238,137,54)" fg:x="1187" fg:w="1"/><text x="96.9900%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.7400%" y="629" width="0.0815%" height="15" fill="rgb(228,1,9)" fg:x="1187" fg:w="1"/><text x="96.9900%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.9030%" y="549" width="0.0815%" height="15" fill="rgb(249,120,48)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="559.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="96.9030%" y="533" width="0.0815%" height="15" fill="rgb(209,72,36)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="96.9030%" y="517" width="0.0815%" height="15" fill="rgb(247,98,49)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="96.9030%" y="501" width="0.0815%" height="15" fill="rgb(233,75,36)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9030%" y="485" width="0.0815%" height="15" fill="rgb(225,14,24)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.9030%" y="469" width="0.0815%" height="15" fill="rgb(237,193,20)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.9030%" y="453" width="0.0815%" height="15" fill="rgb(239,122,19)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.9030%" y="437" width="0.0815%" height="15" fill="rgb(231,220,10)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.9030%" y="421" width="0.0815%" height="15" fill="rgb(220,66,15)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.9030%" y="405" width="0.0815%" height="15" fill="rgb(215,171,52)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.9030%" y="389" width="0.0815%" height="15" fill="rgb(241,169,50)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.9030%" y="373" width="0.0815%" height="15" fill="rgb(236,189,0)" fg:x="1189" fg:w="1"/><text x="97.1530%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="96.9030%" y="565" width="0.1630%" height="15" fill="rgb(217,147,20)" fg:x="1189" fg:w="2"/><text x="97.1530%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.9845%" y="549" width="0.0815%" height="15" fill="rgb(206,188,39)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="559.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (1 samples, 0.08%)</title><rect x="96.9845%" y="533" width="0.0815%" height="15" fill="rgb(227,118,25)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (1 samples, 0.08%)</title><rect x="96.9845%" y="517" width="0.0815%" height="15" fill="rgb(248,171,40)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="96.9845%" y="501" width="0.0815%" height="15" fill="rgb(251,90,54)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="96.9845%" y="485" width="0.0815%" height="15" fill="rgb(234,11,46)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="96.9845%" y="469" width="0.0815%" height="15" fill="rgb(229,134,13)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="96.9845%" y="453" width="0.0815%" height="15" fill="rgb(223,129,3)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="96.9845%" y="437" width="0.0815%" height="15" fill="rgb(221,124,13)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.9845%" y="421" width="0.0815%" height="15" fill="rgb(234,3,18)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.9845%" y="405" width="0.0815%" height="15" fill="rgb(249,199,20)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.9845%" y="389" width="0.0815%" height="15" fill="rgb(224,134,6)" fg:x="1190" fg:w="1"/><text x="97.2345%" y="399.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (4 samples, 0.33%)</title><rect x="96.8215%" y="581" width="0.3260%" height="15" fill="rgb(254,83,26)" fg:x="1188" fg:w="4"/><text x="97.0715%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.0660%" y="565" width="0.0815%" height="15" fill="rgb(217,88,9)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.0660%" y="549" width="0.0815%" height="15" fill="rgb(225,73,2)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0660%" y="533" width="0.0815%" height="15" fill="rgb(226,44,39)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0660%" y="517" width="0.0815%" height="15" fill="rgb(228,53,17)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0660%" y="501" width="0.0815%" height="15" fill="rgb(212,27,27)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.0660%" y="485" width="0.0815%" height="15" fill="rgb(241,50,6)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.0660%" y="469" width="0.0815%" height="15" fill="rgb(225,28,51)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.0660%" y="453" width="0.0815%" height="15" fill="rgb(215,33,16)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0660%" y="437" width="0.0815%" height="15" fill="rgb(243,40,39)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0660%" y="421" width="0.0815%" height="15" fill="rgb(225,11,42)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.0660%" y="405" width="0.0815%" height="15" fill="rgb(241,220,38)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.0660%" y="389" width="0.0815%" height="15" fill="rgb(244,52,35)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.0660%" y="373" width="0.0815%" height="15" fill="rgb(246,42,46)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.0660%" y="357" width="0.0815%" height="15" fill="rgb(205,184,13)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0660%" y="341" width="0.0815%" height="15" fill="rgb(209,48,36)" fg:x="1191" fg:w="1"/><text x="97.3160%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1475%" y="533" width="0.0815%" height="15" fill="rgb(244,34,51)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1475%" y="517" width="0.0815%" height="15" fill="rgb(221,107,33)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1475%" y="501" width="0.0815%" height="15" fill="rgb(224,203,12)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1475%" y="485" width="0.0815%" height="15" fill="rgb(230,215,18)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1475%" y="469" width="0.0815%" height="15" fill="rgb(206,185,35)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.1475%" y="453" width="0.0815%" height="15" fill="rgb(228,140,34)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.1475%" y="437" width="0.0815%" height="15" fill="rgb(208,93,13)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.1475%" y="421" width="0.0815%" height="15" fill="rgb(221,193,39)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1475%" y="405" width="0.0815%" height="15" fill="rgb(241,132,34)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1475%" y="389" width="0.0815%" height="15" fill="rgb(221,141,10)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.1475%" y="373" width="0.0815%" height="15" fill="rgb(226,90,31)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.1475%" y="357" width="0.0815%" height="15" fill="rgb(243,75,5)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.1475%" y="341" width="0.0815%" height="15" fill="rgb(227,156,21)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.1475%" y="325" width="0.0815%" height="15" fill="rgb(250,195,8)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1475%" y="309" width="0.0815%" height="15" fill="rgb(220,134,5)" fg:x="1192" fg:w="1"/><text x="97.3975%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.2290%" y="437" width="0.0815%" height="15" fill="rgb(246,106,34)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.2290%" y="421" width="0.0815%" height="15" fill="rgb(205,1,4)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2290%" y="405" width="0.0815%" height="15" fill="rgb(224,151,29)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2290%" y="389" width="0.0815%" height="15" fill="rgb(251,196,0)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.2290%" y="373" width="0.0815%" height="15" fill="rgb(212,127,0)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2290%" y="357" width="0.0815%" height="15" fill="rgb(236,71,53)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.2290%" y="341" width="0.0815%" height="15" fill="rgb(227,99,0)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.2290%" y="325" width="0.0815%" height="15" fill="rgb(239,89,21)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.2290%" y="309" width="0.0815%" height="15" fill="rgb(243,122,19)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2290%" y="293" width="0.0815%" height="15" fill="rgb(229,192,45)" fg:x="1193" fg:w="1"/><text x="97.4790%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="97.3105%" y="357" width="0.1630%" height="15" fill="rgb(235,165,35)" fg:x="1194" fg:w="2"/><text x="97.5605%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3920%" y="341" width="0.0815%" height="15" fill="rgb(253,202,0)" fg:x="1195" fg:w="1"/><text x="97.6420%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.4735%" y="309" width="0.0815%" height="15" fill="rgb(235,51,20)" fg:x="1196" fg:w="1"/><text x="97.7235%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.4735%" y="293" width="0.0815%" height="15" fill="rgb(218,95,46)" fg:x="1196" fg:w="1"/><text x="97.7235%" y="303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="97.4735%" y="277" width="0.0815%" height="15" fill="rgb(212,81,10)" fg:x="1196" fg:w="1"/><text x="97.7235%" y="287.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (5 samples, 0.41%)</title><rect x="97.2290%" y="533" width="0.4075%" height="15" fill="rgb(240,59,0)" fg:x="1193" fg:w="5"/><text x="97.4790%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.41%)</title><rect x="97.2290%" y="517" width="0.4075%" height="15" fill="rgb(212,191,42)" fg:x="1193" fg:w="5"/><text x="97.4790%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="97.2290%" y="501" width="0.4075%" height="15" fill="rgb(233,140,3)" fg:x="1193" fg:w="5"/><text x="97.4790%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.41%)</title><rect x="97.2290%" y="485" width="0.4075%" height="15" fill="rgb(215,69,23)" fg:x="1193" fg:w="5"/><text x="97.4790%" y="495.50"></text></g><g><title>engine::internal::Entities::prepare_entity (5 samples, 0.41%)</title><rect x="97.2290%" y="469" width="0.4075%" height="15" fill="rgb(240,202,20)" fg:x="1193" fg:w="5"/><text x="97.4790%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.41%)</title><rect x="97.2290%" y="453" width="0.4075%" height="15" fill="rgb(209,146,50)" fg:x="1193" fg:w="5"/><text x="97.4790%" y="463.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="97.3105%" y="437" width="0.3260%" height="15" fill="rgb(253,102,54)" fg:x="1194" fg:w="4"/><text x="97.5605%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="97.3105%" y="421" width="0.3260%" height="15" fill="rgb(250,173,47)" fg:x="1194" fg:w="4"/><text x="97.5605%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="97.3105%" y="405" width="0.3260%" height="15" fill="rgb(232,142,7)" fg:x="1194" fg:w="4"/><text x="97.5605%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.33%)</title><rect x="97.3105%" y="389" width="0.3260%" height="15" fill="rgb(230,157,47)" fg:x="1194" fg:w="4"/><text x="97.5605%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="97.3105%" y="373" width="0.3260%" height="15" fill="rgb(214,177,35)" fg:x="1194" fg:w="4"/><text x="97.5605%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.4735%" y="357" width="0.1630%" height="15" fill="rgb(234,119,46)" fg:x="1196" fg:w="2"/><text x="97.7235%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.4735%" y="341" width="0.1630%" height="15" fill="rgb(241,180,50)" fg:x="1196" fg:w="2"/><text x="97.7235%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.4735%" y="325" width="0.1630%" height="15" fill="rgb(221,54,25)" fg:x="1196" fg:w="2"/><text x="97.7235%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.5550%" y="309" width="0.0815%" height="15" fill="rgb(209,157,44)" fg:x="1197" fg:w="1"/><text x="97.8050%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.5550%" y="293" width="0.0815%" height="15" fill="rgb(246,115,41)" fg:x="1197" fg:w="1"/><text x="97.8050%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5550%" y="277" width="0.0815%" height="15" fill="rgb(229,86,1)" fg:x="1197" fg:w="1"/><text x="97.8050%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5550%" y="261" width="0.0815%" height="15" fill="rgb(240,108,53)" fg:x="1197" fg:w="1"/><text x="97.8050%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="97.5550%" y="245" width="0.0815%" height="15" fill="rgb(227,134,2)" fg:x="1197" fg:w="1"/><text x="97.8050%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.6365%" y="533" width="0.0815%" height="15" fill="rgb(213,129,25)" fg:x="1198" fg:w="1"/><text x="97.8865%" y="543.50"></text></g><g><title>plugins_core::tools::get_contained_keys (8 samples, 0.65%)</title><rect x="97.1475%" y="581" width="0.6520%" height="15" fill="rgb(226,35,21)" fg:x="1192" fg:w="8"/><text x="97.3975%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.65%)</title><rect x="97.1475%" y="565" width="0.6520%" height="15" fill="rgb(208,129,26)" fg:x="1192" fg:w="8"/><text x="97.3975%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (8 samples, 0.65%)</title><rect x="97.1475%" y="549" width="0.6520%" height="15" fill="rgb(224,83,6)" fg:x="1192" fg:w="8"/><text x="97.3975%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7180%" y="533" width="0.0815%" height="15" fill="rgb(227,52,39)" fg:x="1199" fg:w="1"/><text x="97.9680%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7180%" y="517" width="0.0815%" height="15" fill="rgb(241,30,17)" fg:x="1199" fg:w="1"/><text x="97.9680%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.7180%" y="501" width="0.0815%" height="15" fill="rgb(246,186,42)" fg:x="1199" fg:w="1"/><text x="97.9680%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.7180%" y="485" width="0.0815%" height="15" fill="rgb(221,169,15)" fg:x="1199" fg:w="1"/><text x="97.9680%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.7180%" y="469" width="0.0815%" height="15" fill="rgb(235,108,21)" fg:x="1199" fg:w="1"/><text x="97.9680%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.06%)</title><rect x="96.8215%" y="613" width="1.0595%" height="15" fill="rgb(219,148,30)" fg:x="1188" fg:w="13"/><text x="97.0715%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.06%)</title><rect x="96.8215%" y="597" width="1.0595%" height="15" fill="rgb(220,109,5)" fg:x="1188" fg:w="13"/><text x="97.0715%" y="607.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="97.7995%" y="581" width="0.0815%" height="15" fill="rgb(213,203,48)" fg:x="1200" fg:w="1"/><text x="98.0495%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.7995%" y="565" width="0.0815%" height="15" fill="rgb(244,71,33)" fg:x="1200" fg:w="1"/><text x="98.0495%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.7995%" y="549" width="0.0815%" height="15" fill="rgb(209,23,2)" fg:x="1200" fg:w="1"/><text x="98.0495%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8810%" y="565" width="0.0815%" height="15" fill="rgb(219,97,7)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8810%" y="549" width="0.0815%" height="15" fill="rgb(216,161,23)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.8810%" y="533" width="0.0815%" height="15" fill="rgb(207,45,42)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.8810%" y="517" width="0.0815%" height="15" fill="rgb(241,61,4)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.8810%" y="501" width="0.0815%" height="15" fill="rgb(236,170,1)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8810%" y="485" width="0.0815%" height="15" fill="rgb(239,72,5)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.8810%" y="469" width="0.0815%" height="15" fill="rgb(214,13,50)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.8810%" y="453" width="0.0815%" height="15" fill="rgb(224,88,9)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.8810%" y="437" width="0.0815%" height="15" fill="rgb(238,192,34)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.8810%" y="421" width="0.0815%" height="15" fill="rgb(217,203,50)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.8810%" y="405" width="0.0815%" height="15" fill="rgb(241,123,32)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8810%" y="389" width="0.0815%" height="15" fill="rgb(248,151,39)" fg:x="1201" fg:w="1"/><text x="98.1310%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.9625%" y="565" width="0.0815%" height="15" fill="rgb(208,89,6)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="575.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="97.9625%" y="549" width="0.0815%" height="15" fill="rgb(254,43,26)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="97.9625%" y="533" width="0.0815%" height="15" fill="rgb(216,158,13)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.9625%" y="517" width="0.0815%" height="15" fill="rgb(212,47,37)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.9625%" y="501" width="0.0815%" height="15" fill="rgb(254,16,10)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.9625%" y="485" width="0.0815%" height="15" fill="rgb(223,228,16)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="97.9625%" y="469" width="0.0815%" height="15" fill="rgb(249,108,50)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="97.9625%" y="453" width="0.0815%" height="15" fill="rgb(208,220,5)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.9625%" y="437" width="0.0815%" height="15" fill="rgb(217,89,48)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.9625%" y="421" width="0.0815%" height="15" fill="rgb(212,113,41)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.9625%" y="405" width="0.0815%" height="15" fill="rgb(231,127,5)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="415.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="97.9625%" y="389" width="0.0815%" height="15" fill="rgb(217,141,17)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="97.9625%" y="373" width="0.0815%" height="15" fill="rgb(245,125,54)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.9625%" y="357" width="0.0815%" height="15" fill="rgb(248,125,3)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="97.9625%" y="341" width="0.0815%" height="15" fill="rgb(236,119,51)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.9625%" y="325" width="0.0815%" height="15" fill="rgb(239,99,8)" fg:x="1202" fg:w="1"/><text x="98.2125%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.0440%" y="357" width="0.1630%" height="15" fill="rgb(224,228,4)" fg:x="1203" fg:w="2"/><text x="98.2940%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.1255%" y="341" width="0.0815%" height="15" fill="rgb(220,131,45)" fg:x="1204" fg:w="1"/><text x="98.3755%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.2070%" y="357" width="0.0815%" height="15" fill="rgb(215,62,5)" fg:x="1205" fg:w="1"/><text x="98.4570%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.33%)</title><rect x="98.0440%" y="373" width="0.3260%" height="15" fill="rgb(253,12,24)" fg:x="1203" fg:w="4"/><text x="98.2940%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2885%" y="357" width="0.0815%" height="15" fill="rgb(248,120,50)" fg:x="1206" fg:w="1"/><text x="98.5385%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="98.0440%" y="389" width="0.4075%" height="15" fill="rgb(245,194,10)" fg:x="1203" fg:w="5"/><text x="98.2940%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.3700%" y="373" width="0.0815%" height="15" fill="rgb(241,149,38)" fg:x="1207" fg:w="1"/><text x="98.6200%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3700%" y="357" width="0.0815%" height="15" fill="rgb(219,215,7)" fg:x="1207" fg:w="1"/><text x="98.6200%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.4515%" y="309" width="0.0815%" height="15" fill="rgb(208,120,31)" fg:x="1208" fg:w="1"/><text x="98.7015%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.5330%" y="293" width="0.0815%" height="15" fill="rgb(244,30,8)" fg:x="1209" fg:w="1"/><text x="98.7830%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="98.5330%" y="277" width="0.0815%" height="15" fill="rgb(238,35,44)" fg:x="1209" fg:w="1"/><text x="98.7830%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.65%)</title><rect x="98.0440%" y="405" width="0.6520%" height="15" fill="rgb(243,218,37)" fg:x="1203" fg:w="8"/><text x="98.2940%" y="415.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.4515%" y="389" width="0.2445%" height="15" fill="rgb(218,169,10)" fg:x="1208" fg:w="3"/><text x="98.7015%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.4515%" y="373" width="0.2445%" height="15" fill="rgb(221,144,10)" fg:x="1208" fg:w="3"/><text x="98.7015%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="98.4515%" y="357" width="0.2445%" height="15" fill="rgb(226,41,38)" fg:x="1208" fg:w="3"/><text x="98.7015%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.4515%" y="341" width="0.2445%" height="15" fill="rgb(228,3,1)" fg:x="1208" fg:w="3"/><text x="98.7015%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="98.4515%" y="325" width="0.2445%" height="15" fill="rgb(209,129,12)" fg:x="1208" fg:w="3"/><text x="98.7015%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.5330%" y="309" width="0.1630%" height="15" fill="rgb(213,136,33)" fg:x="1209" fg:w="2"/><text x="98.7830%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6145%" y="293" width="0.0815%" height="15" fill="rgb(209,181,29)" fg:x="1210" fg:w="1"/><text x="98.8645%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.73%)</title><rect x="98.0440%" y="437" width="0.7335%" height="15" fill="rgb(234,173,18)" fg:x="1203" fg:w="9"/><text x="98.2940%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.73%)</title><rect x="98.0440%" y="421" width="0.7335%" height="15" fill="rgb(227,73,47)" fg:x="1203" fg:w="9"/><text x="98.2940%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.6960%" y="405" width="0.0815%" height="15" fill="rgb(234,9,34)" fg:x="1211" fg:w="1"/><text x="98.9460%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.6960%" y="389" width="0.0815%" height="15" fill="rgb(235,172,15)" fg:x="1211" fg:w="1"/><text x="98.9460%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.81%)</title><rect x="98.0440%" y="453" width="0.8150%" height="15" fill="rgb(245,61,2)" fg:x="1203" fg:w="10"/><text x="98.2940%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7775%" y="437" width="0.0815%" height="15" fill="rgb(238,39,47)" fg:x="1212" fg:w="1"/><text x="99.0275%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7775%" y="421" width="0.0815%" height="15" fill="rgb(234,37,24)" fg:x="1212" fg:w="1"/><text x="99.0275%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7775%" y="405" width="0.0815%" height="15" fill="rgb(248,223,24)" fg:x="1212" fg:w="1"/><text x="99.0275%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.90%)</title><rect x="98.0440%" y="469" width="0.8965%" height="15" fill="rgb(223,12,15)" fg:x="1203" fg:w="11"/><text x="98.2940%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8590%" y="453" width="0.0815%" height="15" fill="rgb(249,6,3)" fg:x="1213" fg:w="1"/><text x="99.1090%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.8590%" y="437" width="0.0815%" height="15" fill="rgb(237,105,33)" fg:x="1213" fg:w="1"/><text x="99.1090%" y="447.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (12 samples, 0.98%)</title><rect x="98.0440%" y="501" width="0.9780%" height="15" fill="rgb(252,208,35)" fg:x="1203" fg:w="12"/><text x="98.2940%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.98%)</title><rect x="98.0440%" y="485" width="0.9780%" height="15" fill="rgb(215,181,35)" fg:x="1203" fg:w="12"/><text x="98.2940%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.9405%" y="469" width="0.0815%" height="15" fill="rgb(246,212,3)" fg:x="1214" fg:w="1"/><text x="99.1905%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9405%" y="453" width="0.0815%" height="15" fill="rgb(247,156,24)" fg:x="1214" fg:w="1"/><text x="99.1905%" y="463.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.06%)</title><rect x="98.0440%" y="549" width="1.0595%" height="15" fill="rgb(248,9,31)" fg:x="1203" fg:w="13"/><text x="98.2940%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.06%)</title><rect x="98.0440%" y="533" width="1.0595%" height="15" fill="rgb(234,26,45)" fg:x="1203" fg:w="13"/><text x="98.2940%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.06%)</title><rect x="98.0440%" y="517" width="1.0595%" height="15" fill="rgb(249,11,32)" fg:x="1203" fg:w="13"/><text x="98.2940%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.0220%" y="501" width="0.0815%" height="15" fill="rgb(249,162,33)" fg:x="1215" fg:w="1"/><text x="99.2720%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="99.1035%" y="501" width="0.2445%" height="15" fill="rgb(232,4,32)" fg:x="1216" fg:w="3"/><text x="99.3535%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2665%" y="485" width="0.0815%" height="15" fill="rgb(212,5,45)" fg:x="1218" fg:w="1"/><text x="99.5165%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.2665%" y="469" width="0.0815%" height="15" fill="rgb(227,95,13)" fg:x="1218" fg:w="1"/><text x="99.5165%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="99.3480%" y="501" width="0.0815%" height="15" fill="rgb(223,205,10)" fg:x="1219" fg:w="1"/><text x="99.5980%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.3480%" y="485" width="0.0815%" height="15" fill="rgb(222,178,8)" fg:x="1219" fg:w="1"/><text x="99.5980%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3480%" y="469" width="0.0815%" height="15" fill="rgb(216,13,22)" fg:x="1219" fg:w="1"/><text x="99.5980%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4295%" y="453" width="0.0815%" height="15" fill="rgb(240,167,12)" fg:x="1220" fg:w="1"/><text x="99.6795%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4295%" y="437" width="0.0815%" height="15" fill="rgb(235,68,35)" fg:x="1220" fg:w="1"/><text x="99.6795%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4295%" y="421" width="0.0815%" height="15" fill="rgb(253,40,27)" fg:x="1220" fg:w="1"/><text x="99.6795%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="99.4295%" y="501" width="0.1630%" height="15" fill="rgb(214,19,28)" fg:x="1220" fg:w="2"/><text x="99.6795%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.4295%" y="485" width="0.1630%" height="15" fill="rgb(210,167,45)" fg:x="1220" fg:w="2"/><text x="99.6795%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.4295%" y="469" width="0.1630%" height="15" fill="rgb(232,97,40)" fg:x="1220" fg:w="2"/><text x="99.6795%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5110%" y="453" width="0.0815%" height="15" fill="rgb(250,35,23)" fg:x="1221" fg:w="1"/><text x="99.7610%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.5110%" y="437" width="0.0815%" height="15" fill="rgb(248,47,53)" fg:x="1221" fg:w="1"/><text x="99.7610%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5110%" y="421" width="0.0815%" height="15" fill="rgb(226,58,50)" fg:x="1221" fg:w="1"/><text x="99.7610%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5925%" y="453" width="0.0815%" height="15" fill="rgb(217,105,26)" fg:x="1222" fg:w="1"/><text x="99.8425%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.6740%" y="453" width="0.0815%" height="15" fill="rgb(208,64,1)" fg:x="1223" fg:w="1"/><text x="99.9240%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6740%" y="437" width="0.0815%" height="15" fill="rgb(214,80,1)" fg:x="1223" fg:w="1"/><text x="99.9240%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.6740%" y="421" width="0.0815%" height="15" fill="rgb(206,175,26)" fg:x="1223" fg:w="1"/><text x="99.9240%" y="431.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (366 samples, 29.83%)</title><rect x="70.0081%" y="709" width="29.8289%" height="15" fill="rgb(235,156,37)" fg:x="859" fg:w="366"/><text x="70.2581%" y="719.50">&lt;engine::perform::StandardPerformer as kernel::s..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (38 samples, 3.10%)</title><rect x="96.7400%" y="693" width="3.0970%" height="15" fill="rgb(213,100,9)" fg:x="1187" fg:w="38"/><text x="96.9900%" y="703.50">ker..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (38 samples, 3.10%)</title><rect x="96.7400%" y="677" width="3.0970%" height="15" fill="rgb(241,15,13)" fg:x="1187" fg:w="38"/><text x="96.9900%" y="687.50">&lt;pl..</text></g><g><title>plugins_rpc::querying::have_surroundings (37 samples, 3.02%)</title><rect x="96.8215%" y="661" width="3.0155%" height="15" fill="rgb(205,97,43)" fg:x="1188" fg:w="37"/><text x="97.0715%" y="671.50">plu..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (37 samples, 3.02%)</title><rect x="96.8215%" y="645" width="3.0155%" height="15" fill="rgb(216,106,32)" fg:x="1188" fg:w="37"/><text x="97.0715%" y="655.50">&lt;pl..</text></g><g><title>core::iter::adapters::try_process (37 samples, 3.02%)</title><rect x="96.8215%" y="629" width="3.0155%" height="15" fill="rgb(226,200,8)" fg:x="1188" fg:w="37"/><text x="97.0715%" y="639.50">cor..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (24 samples, 1.96%)</title><rect x="97.8810%" y="613" width="1.9560%" height="15" fill="rgb(244,54,29)" fg:x="1201" fg:w="24"/><text x="98.1310%" y="623.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (24 samples, 1.96%)</title><rect x="97.8810%" y="597" width="1.9560%" height="15" fill="rgb(252,169,12)" fg:x="1201" fg:w="24"/><text x="98.1310%" y="607.50">&lt;..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (24 samples, 1.96%)</title><rect x="97.8810%" y="581" width="1.9560%" height="15" fill="rgb(231,199,11)" fg:x="1201" fg:w="24"/><text x="98.1310%" y="591.50">p..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (22 samples, 1.79%)</title><rect x="98.0440%" y="565" width="1.7930%" height="15" fill="rgb(233,191,18)" fg:x="1203" fg:w="22"/><text x="98.2940%" y="575.50">&lt;..</text></g><g><title>kernel::model::EntityPtr::to_json_value (9 samples, 0.73%)</title><rect x="99.1035%" y="549" width="0.7335%" height="15" fill="rgb(215,83,47)" fg:x="1216" fg:w="9"/><text x="99.3535%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="99.1035%" y="533" width="0.7335%" height="15" fill="rgb(251,67,19)" fg:x="1216" fg:w="9"/><text x="99.3535%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.73%)</title><rect x="99.1035%" y="517" width="0.7335%" height="15" fill="rgb(240,7,20)" fg:x="1216" fg:w="9"/><text x="99.3535%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="99.5925%" y="501" width="0.2445%" height="15" fill="rgb(210,150,26)" fg:x="1222" fg:w="3"/><text x="99.8425%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="99.5925%" y="485" width="0.2445%" height="15" fill="rgb(228,75,42)" fg:x="1222" fg:w="3"/><text x="99.8425%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="99.5925%" y="469" width="0.2445%" height="15" fill="rgb(237,134,48)" fg:x="1222" fg:w="3"/><text x="99.8425%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.7555%" y="453" width="0.0815%" height="15" fill="rgb(205,80,50)" fg:x="1224" fg:w="1"/><text x="100.0055%" y="463.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (367 samples, 29.91%)</title><rect x="70.0081%" y="789" width="29.9104%" height="15" fill="rgb(217,74,48)" fg:x="859" fg:w="367"/><text x="70.2581%" y="799.50">&lt;kernel::plugins::SessionPlugins as kernel::plug..</text></g><g><title>core::iter::adapters::try_process (367 samples, 29.91%)</title><rect x="70.0081%" y="773" width="29.9104%" height="15" fill="rgb(205,82,50)" fg:x="859" fg:w="367"/><text x="70.2581%" y="783.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (367 samples, 29.91%)</title><rect x="70.0081%" y="757" width="29.9104%" height="15" fill="rgb(228,1,33)" fg:x="859" fg:w="367"/><text x="70.2581%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_ite..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (367 samples, 29.91%)</title><rect x="70.0081%" y="741" width="29.9104%" height="15" fill="rgb(214,50,23)" fg:x="859" fg:w="367"/><text x="70.2581%" y="751.50">&lt;plugins_core::looking::LookingPlugin as kernel:..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (367 samples, 29.91%)</title><rect x="70.0081%" y="725" width="29.9104%" height="15" fill="rgb(210,62,9)" fg:x="859" fg:w="367"/><text x="70.2581%" y="735.50">&lt;engine::perform::StandardPerformer as kernel::s..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (1 samples, 0.08%)</title><rect x="99.8370%" y="709" width="0.0815%" height="15" fill="rgb(210,104,37)" fg:x="1225" fg:w="1"/><text x="100.0870%" y="719.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.8370%" y="693" width="0.0815%" height="15" fill="rgb(232,104,43)" fg:x="1225" fg:w="1"/><text x="100.0870%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.8370%" y="677" width="0.0815%" height="15" fill="rgb(244,52,6)" fg:x="1225" fg:w="1"/><text x="100.0870%" y="687.50"></text></g><g><title>all (1,227 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(211,174,52)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1183.50"></text></g><g><title>simple-bd24e590 (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(229,48,4)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1167.50">simple-bd24e590</text></g><g><title>_start (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(205,155,16)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1151.50">_start</text></g><g><title>__libc_start_main (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(211,141,53)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1135.50">__libc_start_main</text></g><g><title>main (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(240,148,11)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1119.50">main</text></g><g><title>std::rt::lang_start_internal (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(214,45,23)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1103.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(248,74,26)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(218,121,16)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(218,10,47)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1055.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(227,99,14)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1039.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,227 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(229,83,46)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,227 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(228,25,1)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,227 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(252,190,15)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="991.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,227 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(213,103,51)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="975.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,227 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(220,38,44)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="959.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,227 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(210,45,26)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="943.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,227 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(205,95,48)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="927.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,227 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(225,179,37)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="911.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,227 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(230,209,3)" fg:x="0" fg:w="1227"/><text x="0.2500%" y="895.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (443 samples, 36.10%)</title><rect x="63.8957%" y="869" width="36.1043%" height="15" fill="rgb(248,12,46)" fg:x="784" fg:w="443"/><text x="64.1457%" y="879.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine:..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (443 samples, 36.10%)</title><rect x="63.8957%" y="853" width="36.1043%" height="15" fill="rgb(234,18,0)" fg:x="784" fg:w="443"/><text x="64.1457%" y="863.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (443 samples, 36.10%)</title><rect x="63.8957%" y="837" width="36.1043%" height="15" fill="rgb(238,197,14)" fg:x="784" fg:w="443"/><text x="64.1457%" y="847.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (369 samples, 30.07%)</title><rect x="69.9267%" y="821" width="30.0733%" height="15" fill="rgb(251,162,48)" fg:x="858" fg:w="369"/><text x="70.1767%" y="831.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (369 samples, 30.07%)</title><rect x="69.9267%" y="805" width="30.0733%" height="15" fill="rgb(237,73,42)" fg:x="858" fg:w="369"/><text x="70.1767%" y="815.50">engine::perform::StandardPerformer::evaluate_and..</text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.9185%" y="789" width="0.0815%" height="15" fill="rgb(211,108,8)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="799.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.9185%" y="773" width="0.0815%" height="15" fill="rgb(213,45,22)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="783.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9185%" y="757" width="0.0815%" height="15" fill="rgb(252,154,5)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="767.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.9185%" y="741" width="0.0815%" height="15" fill="rgb(221,79,52)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="751.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.9185%" y="725" width="0.0815%" height="15" fill="rgb(229,220,36)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="735.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="99.9185%" y="709" width="0.0815%" height="15" fill="rgb(211,17,16)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="719.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="99.9185%" y="693" width="0.0815%" height="15" fill="rgb(222,55,31)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="703.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.9185%" y="677" width="0.0815%" height="15" fill="rgb(221,221,31)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.9185%" y="661" width="0.0815%" height="15" fill="rgb(227,168,26)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="671.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.9185%" y="645" width="0.0815%" height="15" fill="rgb(224,139,9)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.9185%" y="629" width="0.0815%" height="15" fill="rgb(254,172,0)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="639.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.9185%" y="613" width="0.0815%" height="15" fill="rgb(235,203,1)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.9185%" y="597" width="0.0815%" height="15" fill="rgb(216,205,24)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.9185%" y="581" width="0.0815%" height="15" fill="rgb(233,24,6)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.9185%" y="565" width="0.0815%" height="15" fill="rgb(244,110,9)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.9185%" y="549" width="0.0815%" height="15" fill="rgb(239,222,42)" fg:x="1226" fg:w="1"/><text x="100.1685%" y="559.50"></text></g></svg></svg>