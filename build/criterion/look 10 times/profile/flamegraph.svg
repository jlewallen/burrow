<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1249"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2402%" y="661" width="0.0801%" height="15" fill="rgb(248,152,48)" fg:x="3" fg:w="1"/><text x="0.4902%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.1601%" y="725" width="0.2402%" height="15" fill="rgb(244,91,11)" fg:x="2" fg:w="3"/><text x="0.4101%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.1601%" y="709" width="0.2402%" height="15" fill="rgb(220,157,5)" fg:x="2" fg:w="3"/><text x="0.4101%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.2402%" y="693" width="0.1601%" height="15" fill="rgb(253,137,8)" fg:x="3" fg:w="2"/><text x="0.4902%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="0.2402%" y="677" width="0.1601%" height="15" fill="rgb(217,137,51)" fg:x="3" fg:w="2"/><text x="0.4902%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.3203%" y="661" width="0.0801%" height="15" fill="rgb(218,209,53)" fg:x="4" fg:w="1"/><text x="0.5703%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3203%" y="645" width="0.0801%" height="15" fill="rgb(249,137,25)" fg:x="4" fg:w="1"/><text x="0.5703%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4003%" y="693" width="0.0801%" height="15" fill="rgb(239,155,26)" fg:x="5" fg:w="1"/><text x="0.6503%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4804%" y="613" width="0.0801%" height="15" fill="rgb(227,85,46)" fg:x="6" fg:w="1"/><text x="0.7304%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5604%" y="565" width="0.0801%" height="15" fill="rgb(251,107,43)" fg:x="7" fg:w="1"/><text x="0.8104%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.5604%" y="597" width="0.1601%" height="15" fill="rgb(234,170,33)" fg:x="7" fg:w="2"/><text x="0.8104%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="0.5604%" y="581" width="0.1601%" height="15" fill="rgb(206,29,35)" fg:x="7" fg:w="2"/><text x="0.8104%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6405%" y="565" width="0.0801%" height="15" fill="rgb(227,138,25)" fg:x="8" fg:w="1"/><text x="0.8905%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.6405%" y="549" width="0.0801%" height="15" fill="rgb(249,131,35)" fg:x="8" fg:w="1"/><text x="0.8905%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6405%" y="533" width="0.0801%" height="15" fill="rgb(239,6,40)" fg:x="8" fg:w="1"/><text x="0.8905%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.4804%" y="661" width="0.4804%" height="15" fill="rgb(246,136,47)" fg:x="6" fg:w="6"/><text x="0.7304%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (6 samples, 0.48%)</title><rect x="0.4804%" y="645" width="0.4804%" height="15" fill="rgb(253,58,26)" fg:x="6" fg:w="6"/><text x="0.7304%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="0.4804%" y="629" width="0.4804%" height="15" fill="rgb(237,141,10)" fg:x="6" fg:w="6"/><text x="0.7304%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.5604%" y="613" width="0.4003%" height="15" fill="rgb(234,156,12)" fg:x="7" fg:w="5"/><text x="0.8104%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="0.7206%" y="597" width="0.2402%" height="15" fill="rgb(243,224,36)" fg:x="9" fg:w="3"/><text x="0.9706%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.8006%" y="581" width="0.1601%" height="15" fill="rgb(205,229,51)" fg:x="10" fg:w="2"/><text x="1.0506%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9608%" y="645" width="0.0801%" height="15" fill="rgb(223,189,4)" fg:x="12" fg:w="1"/><text x="1.2108%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1209%" y="629" width="0.0801%" height="15" fill="rgb(249,167,54)" fg:x="14" fg:w="1"/><text x="1.3709%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2010%" y="613" width="0.0801%" height="15" fill="rgb(218,34,28)" fg:x="15" fg:w="1"/><text x="1.4510%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2010%" y="597" width="0.0801%" height="15" fill="rgb(232,109,42)" fg:x="15" fg:w="1"/><text x="1.4510%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.2810%" y="565" width="0.1601%" height="15" fill="rgb(248,214,46)" fg:x="16" fg:w="2"/><text x="1.5310%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="1.2810%" y="597" width="0.2402%" height="15" fill="rgb(244,216,40)" fg:x="16" fg:w="3"/><text x="1.5310%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="1.2810%" y="581" width="0.2402%" height="15" fill="rgb(231,226,31)" fg:x="16" fg:w="3"/><text x="1.5310%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4412%" y="565" width="0.0801%" height="15" fill="rgb(238,38,43)" fg:x="18" fg:w="1"/><text x="1.6912%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4412%" y="549" width="0.0801%" height="15" fill="rgb(208,88,43)" fg:x="18" fg:w="1"/><text x="1.6912%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.12%)</title><rect x="0.4804%" y="677" width="1.1209%" height="15" fill="rgb(205,136,37)" fg:x="6" fg:w="14"/><text x="0.7304%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="0.9608%" y="661" width="0.6405%" height="15" fill="rgb(237,34,14)" fg:x="12" fg:w="8"/><text x="1.2108%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="1.0408%" y="645" width="0.5604%" height="15" fill="rgb(236,193,44)" fg:x="13" fg:w="7"/><text x="1.2908%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.2010%" y="629" width="0.4003%" height="15" fill="rgb(231,48,10)" fg:x="15" fg:w="5"/><text x="1.4510%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.2810%" y="613" width="0.3203%" height="15" fill="rgb(213,141,34)" fg:x="16" fg:w="4"/><text x="1.5310%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5212%" y="597" width="0.0801%" height="15" fill="rgb(249,130,34)" fg:x="19" fg:w="1"/><text x="1.7712%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5212%" y="581" width="0.0801%" height="15" fill="rgb(219,42,41)" fg:x="19" fg:w="1"/><text x="1.7712%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.68%)</title><rect x="0.0801%" y="741" width="1.6813%" height="15" fill="rgb(224,100,54)" fg:x="1" fg:w="21"/><text x="0.3301%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (17 samples, 1.36%)</title><rect x="0.4003%" y="725" width="1.3611%" height="15" fill="rgb(229,200,27)" fg:x="5" fg:w="17"/><text x="0.6503%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.36%)</title><rect x="0.4003%" y="709" width="1.3611%" height="15" fill="rgb(217,118,10)" fg:x="5" fg:w="17"/><text x="0.6503%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (16 samples, 1.28%)</title><rect x="0.4804%" y="693" width="1.2810%" height="15" fill="rgb(206,22,3)" fg:x="6" fg:w="16"/><text x="0.7304%" y="703.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.6013%" y="677" width="0.1601%" height="15" fill="rgb(232,163,46)" fg:x="20" fg:w="2"/><text x="1.8513%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.9215%" y="693" width="0.0801%" height="15" fill="rgb(206,95,13)" fg:x="24" fg:w="1"/><text x="2.1715%" y="703.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.0016%" y="693" width="0.0801%" height="15" fill="rgb(253,154,18)" fg:x="25" fg:w="1"/><text x="2.2516%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0016%" y="677" width="0.0801%" height="15" fill="rgb(219,32,23)" fg:x="25" fg:w="1"/><text x="2.2516%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6421%" y="613" width="0.0801%" height="15" fill="rgb(230,191,45)" fg:x="33" fg:w="1"/><text x="2.8921%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="2.7222%" y="613" width="0.1601%" height="15" fill="rgb(229,64,36)" fg:x="34" fg:w="2"/><text x="2.9722%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.7222%" y="597" width="0.1601%" height="15" fill="rgb(205,129,25)" fg:x="34" fg:w="2"/><text x="2.9722%" y="607.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="2.7222%" y="581" width="0.1601%" height="15" fill="rgb(254,112,7)" fg:x="34" fg:w="2"/><text x="2.9722%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="2.5620%" y="645" width="0.4003%" height="15" fill="rgb(226,53,48)" fg:x="32" fg:w="5"/><text x="2.8120%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="2.5620%" y="629" width="0.4003%" height="15" fill="rgb(214,153,38)" fg:x="32" fg:w="5"/><text x="2.8120%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.8823%" y="613" width="0.0801%" height="15" fill="rgb(243,101,7)" fg:x="36" fg:w="1"/><text x="3.1323%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.9624%" y="645" width="0.1601%" height="15" fill="rgb(240,140,22)" fg:x="37" fg:w="2"/><text x="3.2124%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.9624%" y="629" width="0.1601%" height="15" fill="rgb(235,114,2)" fg:x="37" fg:w="2"/><text x="3.2124%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.0424%" y="613" width="0.0801%" height="15" fill="rgb(242,59,12)" fg:x="38" fg:w="1"/><text x="3.2924%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.0424%" y="597" width="0.0801%" height="15" fill="rgb(252,134,9)" fg:x="38" fg:w="1"/><text x="3.2924%" y="607.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.0424%" y="581" width="0.0801%" height="15" fill="rgb(236,4,44)" fg:x="38" fg:w="1"/><text x="3.2924%" y="591.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.0424%" y="565" width="0.0801%" height="15" fill="rgb(254,172,41)" fg:x="38" fg:w="1"/><text x="3.2924%" y="575.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.1225%" y="645" width="0.0801%" height="15" fill="rgb(244,63,20)" fg:x="39" fg:w="1"/><text x="3.3725%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.1225%" y="629" width="0.0801%" height="15" fill="rgb(250,73,31)" fg:x="39" fg:w="1"/><text x="3.3725%" y="639.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.1225%" y="613" width="0.0801%" height="15" fill="rgb(241,38,36)" fg:x="39" fg:w="1"/><text x="3.3725%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.1225%" y="597" width="0.0801%" height="15" fill="rgb(245,211,2)" fg:x="39" fg:w="1"/><text x="3.3725%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1225%" y="581" width="0.0801%" height="15" fill="rgb(206,120,28)" fg:x="39" fg:w="1"/><text x="3.3725%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.2026%" y="645" width="0.0801%" height="15" fill="rgb(211,59,34)" fg:x="40" fg:w="1"/><text x="3.4526%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.2026%" y="629" width="0.0801%" height="15" fill="rgb(233,168,5)" fg:x="40" fg:w="1"/><text x="3.4526%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.2026%" y="613" width="0.0801%" height="15" fill="rgb(234,33,13)" fg:x="40" fg:w="1"/><text x="3.4526%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.2026%" y="597" width="0.0801%" height="15" fill="rgb(231,150,26)" fg:x="40" fg:w="1"/><text x="3.4526%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.2826%" y="645" width="0.0801%" height="15" fill="rgb(217,191,4)" fg:x="41" fg:w="1"/><text x="3.5326%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.2826%" y="629" width="0.0801%" height="15" fill="rgb(246,198,38)" fg:x="41" fg:w="1"/><text x="3.5326%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.2826%" y="613" width="0.0801%" height="15" fill="rgb(245,64,37)" fg:x="41" fg:w="1"/><text x="3.5326%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.2826%" y="597" width="0.0801%" height="15" fill="rgb(250,30,36)" fg:x="41" fg:w="1"/><text x="3.5326%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2826%" y="581" width="0.0801%" height="15" fill="rgb(217,86,53)" fg:x="41" fg:w="1"/><text x="3.5326%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (14 samples, 1.12%)</title><rect x="2.3219%" y="661" width="1.1209%" height="15" fill="rgb(228,157,16)" fg:x="29" fg:w="14"/><text x="2.5719%" y="671.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.3627%" y="645" width="0.0801%" height="15" fill="rgb(217,59,31)" fg:x="42" fg:w="1"/><text x="3.6127%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.3627%" y="629" width="0.0801%" height="15" fill="rgb(237,138,41)" fg:x="42" fg:w="1"/><text x="3.6127%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="3.3627%" y="613" width="0.0801%" height="15" fill="rgb(227,91,49)" fg:x="42" fg:w="1"/><text x="3.6127%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.3627%" y="597" width="0.0801%" height="15" fill="rgb(247,21,44)" fg:x="42" fg:w="1"/><text x="3.6127%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.3627%" y="581" width="0.0801%" height="15" fill="rgb(219,210,51)" fg:x="42" fg:w="1"/><text x="3.6127%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.3627%" y="565" width="0.0801%" height="15" fill="rgb(209,140,6)" fg:x="42" fg:w="1"/><text x="3.6127%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.3627%" y="549" width="0.0801%" height="15" fill="rgb(221,188,24)" fg:x="42" fg:w="1"/><text x="3.6127%" y="559.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="3.4428%" y="645" width="0.0801%" height="15" fill="rgb(232,154,20)" fg:x="43" fg:w="1"/><text x="3.6928%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="3.4428%" y="661" width="0.4003%" height="15" fill="rgb(244,137,50)" fg:x="43" fg:w="5"/><text x="3.6928%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="3.5228%" y="645" width="0.3203%" height="15" fill="rgb(225,185,43)" fg:x="44" fg:w="4"/><text x="3.7728%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="3.5228%" y="629" width="0.3203%" height="15" fill="rgb(213,205,38)" fg:x="44" fg:w="4"/><text x="3.7728%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="3.5228%" y="613" width="0.3203%" height="15" fill="rgb(236,73,12)" fg:x="44" fg:w="4"/><text x="3.7728%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="3.5228%" y="597" width="0.3203%" height="15" fill="rgb(235,219,13)" fg:x="44" fg:w="4"/><text x="3.7728%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="3.5228%" y="581" width="0.3203%" height="15" fill="rgb(218,59,36)" fg:x="44" fg:w="4"/><text x="3.7728%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="3.5228%" y="565" width="0.3203%" height="15" fill="rgb(205,110,39)" fg:x="44" fg:w="4"/><text x="3.7728%" y="575.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="3.5228%" y="549" width="0.3203%" height="15" fill="rgb(218,206,42)" fg:x="44" fg:w="4"/><text x="3.7728%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.9231%" y="597" width="0.1601%" height="15" fill="rgb(248,125,24)" fg:x="49" fg:w="2"/><text x="4.1731%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.9231%" y="581" width="0.1601%" height="15" fill="rgb(242,28,27)" fg:x="49" fg:w="2"/><text x="4.1731%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="3.9231%" y="565" width="0.1601%" height="15" fill="rgb(216,228,15)" fg:x="49" fg:w="2"/><text x="4.1731%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="3.9231%" y="549" width="0.1601%" height="15" fill="rgb(235,116,46)" fg:x="49" fg:w="2"/><text x="4.1731%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="3.9231%" y="533" width="0.1601%" height="15" fill="rgb(224,18,32)" fg:x="49" fg:w="2"/><text x="4.1731%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="3.9231%" y="517" width="0.1601%" height="15" fill="rgb(252,5,12)" fg:x="49" fg:w="2"/><text x="4.1731%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="3.9231%" y="501" width="0.1601%" height="15" fill="rgb(251,36,5)" fg:x="49" fg:w="2"/><text x="4.1731%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="3.9231%" y="485" width="0.1601%" height="15" fill="rgb(217,53,14)" fg:x="49" fg:w="2"/><text x="4.1731%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="3.9231%" y="469" width="0.1601%" height="15" fill="rgb(215,86,45)" fg:x="49" fg:w="2"/><text x="4.1731%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="3.9231%" y="453" width="0.1601%" height="15" fill="rgb(242,169,11)" fg:x="49" fg:w="2"/><text x="4.1731%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="3.9231%" y="437" width="0.1601%" height="15" fill="rgb(211,213,45)" fg:x="49" fg:w="2"/><text x="4.1731%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0032%" y="421" width="0.0801%" height="15" fill="rgb(205,88,11)" fg:x="50" fg:w="1"/><text x="4.2532%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="3.8431%" y="613" width="0.3203%" height="15" fill="rgb(252,69,26)" fg:x="48" fg:w="4"/><text x="4.0931%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0833%" y="597" width="0.0801%" height="15" fill="rgb(246,123,37)" fg:x="51" fg:w="1"/><text x="4.3333%" y="607.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (5 samples, 0.40%)</title><rect x="3.8431%" y="645" width="0.4003%" height="15" fill="rgb(212,205,5)" fg:x="48" fg:w="5"/><text x="4.0931%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.40%)</title><rect x="3.8431%" y="629" width="0.4003%" height="15" fill="rgb(253,148,0)" fg:x="48" fg:w="5"/><text x="4.0931%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1633%" y="613" width="0.0801%" height="15" fill="rgb(239,22,4)" fg:x="52" fg:w="1"/><text x="4.4133%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.3235%" y="533" width="0.0801%" height="15" fill="rgb(226,26,53)" fg:x="54" fg:w="1"/><text x="4.5735%" y="543.50"></text></g><g><title>glob::is_dir (13 samples, 1.04%)</title><rect x="4.2434%" y="597" width="1.0408%" height="15" fill="rgb(225,229,45)" fg:x="53" fg:w="13"/><text x="4.4934%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (13 samples, 1.04%)</title><rect x="4.2434%" y="581" width="1.0408%" height="15" fill="rgb(220,60,37)" fg:x="53" fg:w="13"/><text x="4.4934%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (13 samples, 1.04%)</title><rect x="4.2434%" y="565" width="1.0408%" height="15" fill="rgb(217,180,35)" fg:x="53" fg:w="13"/><text x="4.4934%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (13 samples, 1.04%)</title><rect x="4.2434%" y="549" width="1.0408%" height="15" fill="rgb(229,7,53)" fg:x="53" fg:w="13"/><text x="4.4934%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (11 samples, 0.88%)</title><rect x="4.4035%" y="533" width="0.8807%" height="15" fill="rgb(254,137,3)" fg:x="55" fg:w="11"/><text x="4.6535%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (11 samples, 0.88%)</title><rect x="4.4035%" y="517" width="0.8807%" height="15" fill="rgb(215,140,41)" fg:x="55" fg:w="11"/><text x="4.6535%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (11 samples, 0.88%)</title><rect x="4.4035%" y="501" width="0.8807%" height="15" fill="rgb(250,80,15)" fg:x="55" fg:w="11"/><text x="4.6535%" y="511.50"></text></g><g><title>statx (11 samples, 0.88%)</title><rect x="4.4035%" y="485" width="0.8807%" height="15" fill="rgb(252,191,6)" fg:x="55" fg:w="11"/><text x="4.6535%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 1.28%)</title><rect x="4.2434%" y="629" width="1.2810%" height="15" fill="rgb(246,217,18)" fg:x="53" fg:w="16"/><text x="4.4934%" y="639.50"></text></g><g><title>glob::fill_todo (16 samples, 1.28%)</title><rect x="4.2434%" y="613" width="1.2810%" height="15" fill="rgb(223,93,7)" fg:x="53" fg:w="16"/><text x="4.4934%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="5.2842%" y="597" width="0.2402%" height="15" fill="rgb(225,55,52)" fg:x="66" fg:w="3"/><text x="5.5342%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="5.2842%" y="581" width="0.2402%" height="15" fill="rgb(240,31,24)" fg:x="66" fg:w="3"/><text x="5.5342%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="5.2842%" y="565" width="0.2402%" height="15" fill="rgb(205,56,52)" fg:x="66" fg:w="3"/><text x="5.5342%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="5.2842%" y="549" width="0.2402%" height="15" fill="rgb(246,146,12)" fg:x="66" fg:w="3"/><text x="5.5342%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="5.2842%" y="533" width="0.2402%" height="15" fill="rgb(239,84,36)" fg:x="66" fg:w="3"/><text x="5.5342%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="5.2842%" y="517" width="0.2402%" height="15" fill="rgb(207,41,40)" fg:x="66" fg:w="3"/><text x="5.5342%" y="527.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="5.2842%" y="501" width="0.2402%" height="15" fill="rgb(241,179,25)" fg:x="66" fg:w="3"/><text x="5.5342%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="5.5244%" y="629" width="0.0801%" height="15" fill="rgb(210,0,34)" fg:x="69" fg:w="1"/><text x="5.7744%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.5244%" y="613" width="0.0801%" height="15" fill="rgb(225,217,29)" fg:x="69" fg:w="1"/><text x="5.7744%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.08%)</title><rect x="5.6045%" y="485" width="0.0801%" height="15" fill="rgb(216,191,38)" fg:x="70" fg:w="1"/><text x="5.8545%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.08%)</title><rect x="5.6045%" y="469" width="0.0801%" height="15" fill="rgb(232,140,52)" fg:x="70" fg:w="1"/><text x="5.8545%" y="479.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.6045%" y="597" width="0.1601%" height="15" fill="rgb(223,158,51)" fg:x="70" fg:w="2"/><text x="5.8545%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (2 samples, 0.16%)</title><rect x="5.6045%" y="581" width="0.1601%" height="15" fill="rgb(235,29,51)" fg:x="70" fg:w="2"/><text x="5.8545%" y="591.50"></text></g><g><title>std::ffi::os_str::OsString::push (2 samples, 0.16%)</title><rect x="5.6045%" y="565" width="0.1601%" height="15" fill="rgb(215,181,18)" fg:x="70" fg:w="2"/><text x="5.8545%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (2 samples, 0.16%)</title><rect x="5.6045%" y="549" width="0.1601%" height="15" fill="rgb(227,125,34)" fg:x="70" fg:w="2"/><text x="5.8545%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="5.6045%" y="533" width="0.1601%" height="15" fill="rgb(230,197,49)" fg:x="70" fg:w="2"/><text x="5.8545%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="5.6045%" y="517" width="0.1601%" height="15" fill="rgb(239,141,16)" fg:x="70" fg:w="2"/><text x="5.8545%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="5.6045%" y="501" width="0.1601%" height="15" fill="rgb(225,105,43)" fg:x="70" fg:w="2"/><text x="5.8545%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.6845%" y="485" width="0.0801%" height="15" fill="rgb(214,131,14)" fg:x="71" fg:w="1"/><text x="5.9345%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="5.6845%" y="469" width="0.0801%" height="15" fill="rgb(229,177,11)" fg:x="71" fg:w="1"/><text x="5.9345%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6845%" y="453" width="0.0801%" height="15" fill="rgb(231,180,14)" fg:x="71" fg:w="1"/><text x="5.9345%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="5.6845%" y="437" width="0.0801%" height="15" fill="rgb(232,88,2)" fg:x="71" fg:w="1"/><text x="5.9345%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.08%)</title><rect x="5.6845%" y="421" width="0.0801%" height="15" fill="rgb(205,220,8)" fg:x="71" fg:w="1"/><text x="5.9345%" y="431.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="5.7646%" y="597" width="0.1601%" height="15" fill="rgb(225,23,53)" fg:x="72" fg:w="2"/><text x="6.0146%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8447%" y="581" width="0.0801%" height="15" fill="rgb(213,62,29)" fg:x="73" fg:w="1"/><text x="6.0947%" y="591.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (27 samples, 2.16%)</title><rect x="3.8431%" y="661" width="2.1617%" height="15" fill="rgb(227,75,7)" fg:x="48" fg:w="27"/><text x="4.0931%" y="671.50">&lt;..</text></g><g><title>plugins_rune::sources::load_directory_sources (22 samples, 1.76%)</title><rect x="4.2434%" y="645" width="1.7614%" height="15" fill="rgb(207,105,14)" fg:x="53" fg:w="22"/><text x="4.4934%" y="655.50"></text></g><g><title>glob::glob (5 samples, 0.40%)</title><rect x="5.6045%" y="629" width="0.4003%" height="15" fill="rgb(245,62,29)" fg:x="70" fg:w="5"/><text x="5.8545%" y="639.50"></text></g><g><title>glob::glob_with (5 samples, 0.40%)</title><rect x="5.6045%" y="613" width="0.4003%" height="15" fill="rgb(236,202,4)" fg:x="70" fg:w="5"/><text x="5.8545%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="5.9247%" y="597" width="0.0801%" height="15" fill="rgb(250,67,1)" fg:x="74" fg:w="1"/><text x="6.1747%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9247%" y="581" width="0.0801%" height="15" fill="rgb(253,115,44)" fg:x="74" fg:w="1"/><text x="6.1747%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9247%" y="565" width="0.0801%" height="15" fill="rgb(251,139,18)" fg:x="74" fg:w="1"/><text x="6.1747%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9247%" y="549" width="0.0801%" height="15" fill="rgb(218,22,32)" fg:x="74" fg:w="1"/><text x="6.1747%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9247%" y="533" width="0.0801%" height="15" fill="rgb(243,53,5)" fg:x="74" fg:w="1"/><text x="6.1747%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="5.9247%" y="517" width="0.0801%" height="15" fill="rgb(227,56,16)" fg:x="74" fg:w="1"/><text x="6.1747%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="5.9247%" y="501" width="0.0801%" height="15" fill="rgb(245,53,0)" fg:x="74" fg:w="1"/><text x="6.1747%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0048%" y="661" width="0.0801%" height="15" fill="rgb(216,170,35)" fg:x="75" fg:w="1"/><text x="6.2548%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (5 samples, 0.40%)</title><rect x="6.0849%" y="661" width="0.4003%" height="15" fill="rgb(211,200,8)" fg:x="76" fg:w="5"/><text x="6.3349%" y="671.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="6.2450%" y="645" width="0.2402%" height="15" fill="rgb(228,204,44)" fg:x="78" fg:w="3"/><text x="6.4950%" y="655.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="6.4852%" y="645" width="0.0801%" height="15" fill="rgb(214,121,17)" fg:x="81" fg:w="1"/><text x="6.7352%" y="655.50"></text></g><g><title>engine::session::Session::initialize (59 samples, 4.72%)</title><rect x="2.0817%" y="693" width="4.7238%" height="15" fill="rgb(233,64,38)" fg:x="26" fg:w="59"/><text x="2.3317%" y="703.50">engine..</text></g><g><title>kernel::plugins::SessionPlugins::initialize (59 samples, 4.72%)</title><rect x="2.0817%" y="677" width="4.7238%" height="15" fill="rgb(253,54,19)" fg:x="26" fg:w="59"/><text x="2.3317%" y="687.50">kernel..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (4 samples, 0.32%)</title><rect x="6.4852%" y="661" width="0.3203%" height="15" fill="rgb(253,94,18)" fg:x="81" fg:w="4"/><text x="6.7352%" y="671.50"></text></g><g><title>clock_gettime (3 samples, 0.24%)</title><rect x="6.5653%" y="645" width="0.2402%" height="15" fill="rgb(227,57,52)" fg:x="82" fg:w="3"/><text x="6.8153%" y="655.50"></text></g><g><title>&lt;plugins_rune::RunePluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="6.8855%" y="661" width="0.0801%" height="15" fill="rgb(230,228,50)" fg:x="86" fg:w="1"/><text x="7.1355%" y="671.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (66 samples, 5.28%)</title><rect x="1.7614%" y="741" width="5.2842%" height="15" fill="rgb(217,205,27)" fg:x="22" fg:w="66"/><text x="2.0114%" y="751.50">&lt;engin..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (66 samples, 5.28%)</title><rect x="1.7614%" y="725" width="5.2842%" height="15" fill="rgb(252,71,50)" fg:x="22" fg:w="66"/><text x="2.0114%" y="735.50">engine..</text></g><g><title>engine::session::Session::new (65 samples, 5.20%)</title><rect x="1.8415%" y="709" width="5.2042%" height="15" fill="rgb(209,86,4)" fg:x="23" fg:w="65"/><text x="2.0915%" y="719.50">engine..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (3 samples, 0.24%)</title><rect x="6.8054%" y="693" width="0.2402%" height="15" fill="rgb(229,94,0)" fg:x="85" fg:w="3"/><text x="7.0554%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="6.8054%" y="677" width="0.2402%" height="15" fill="rgb(252,223,21)" fg:x="85" fg:w="3"/><text x="7.0554%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.9656%" y="661" width="0.0801%" height="15" fill="rgb(230,210,4)" fg:x="87" fg:w="1"/><text x="7.2156%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.9656%" y="645" width="0.0801%" height="15" fill="rgb(240,149,38)" fg:x="87" fg:w="1"/><text x="7.2156%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.9656%" y="629" width="0.0801%" height="15" fill="rgb(254,105,20)" fg:x="87" fg:w="1"/><text x="7.2156%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="7.0456%" y="709" width="0.0801%" height="15" fill="rgb(253,87,46)" fg:x="88" fg:w="1"/><text x="7.2956%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0456%" y="693" width="0.0801%" height="15" fill="rgb(253,116,33)" fg:x="88" fg:w="1"/><text x="7.2956%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.0456%" y="677" width="0.0801%" height="15" fill="rgb(229,198,5)" fg:x="88" fg:w="1"/><text x="7.2956%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.0456%" y="661" width="0.0801%" height="15" fill="rgb(242,38,37)" fg:x="88" fg:w="1"/><text x="7.2956%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.0456%" y="645" width="0.0801%" height="15" fill="rgb(242,69,53)" fg:x="88" fg:w="1"/><text x="7.2956%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.0456%" y="629" width="0.0801%" height="15" fill="rgb(249,80,16)" fg:x="88" fg:w="1"/><text x="7.2956%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.0456%" y="613" width="0.0801%" height="15" fill="rgb(206,128,11)" fg:x="88" fg:w="1"/><text x="7.2956%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.0456%" y="597" width="0.0801%" height="15" fill="rgb(212,35,20)" fg:x="88" fg:w="1"/><text x="7.2956%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.0456%" y="581" width="0.0801%" height="15" fill="rgb(236,79,13)" fg:x="88" fg:w="1"/><text x="7.2956%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.0456%" y="565" width="0.0801%" height="15" fill="rgb(233,123,3)" fg:x="88" fg:w="1"/><text x="7.2956%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.0456%" y="549" width="0.0801%" height="15" fill="rgb(214,93,52)" fg:x="88" fg:w="1"/><text x="7.2956%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.0456%" y="533" width="0.0801%" height="15" fill="rgb(251,37,40)" fg:x="88" fg:w="1"/><text x="7.2956%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0456%" y="517" width="0.0801%" height="15" fill="rgb(227,80,54)" fg:x="88" fg:w="1"/><text x="7.2956%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.1257%" y="677" width="0.0801%" height="15" fill="rgb(254,48,11)" fg:x="89" fg:w="1"/><text x="7.3757%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="7.1257%" y="661" width="0.0801%" height="15" fill="rgb(235,193,26)" fg:x="89" fg:w="1"/><text x="7.3757%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="7.1257%" y="645" width="0.0801%" height="15" fill="rgb(229,99,21)" fg:x="89" fg:w="1"/><text x="7.3757%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="7.2058%" y="613" width="0.1601%" height="15" fill="rgb(211,140,41)" fg:x="90" fg:w="2"/><text x="7.4558%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.2058%" y="597" width="0.1601%" height="15" fill="rgb(240,227,30)" fg:x="90" fg:w="2"/><text x="7.4558%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.2858%" y="581" width="0.0801%" height="15" fill="rgb(215,224,45)" fg:x="91" fg:w="1"/><text x="7.5358%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.2858%" y="565" width="0.0801%" height="15" fill="rgb(206,123,31)" fg:x="91" fg:w="1"/><text x="7.5358%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.2858%" y="549" width="0.0801%" height="15" fill="rgb(210,138,16)" fg:x="91" fg:w="1"/><text x="7.5358%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.2858%" y="533" width="0.0801%" height="15" fill="rgb(228,57,28)" fg:x="91" fg:w="1"/><text x="7.5358%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.2858%" y="517" width="0.0801%" height="15" fill="rgb(242,170,10)" fg:x="91" fg:w="1"/><text x="7.5358%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.2858%" y="501" width="0.0801%" height="15" fill="rgb(228,214,39)" fg:x="91" fg:w="1"/><text x="7.5358%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.3659%" y="597" width="0.1601%" height="15" fill="rgb(218,179,33)" fg:x="92" fg:w="2"/><text x="7.6159%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.4460%" y="581" width="0.0801%" height="15" fill="rgb(235,193,39)" fg:x="93" fg:w="1"/><text x="7.6960%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.5260%" y="581" width="0.0801%" height="15" fill="rgb(219,221,36)" fg:x="94" fg:w="1"/><text x="7.7760%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.5260%" y="565" width="0.0801%" height="15" fill="rgb(248,218,19)" fg:x="94" fg:w="1"/><text x="7.7760%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.6061%" y="581" width="0.0801%" height="15" fill="rgb(205,50,9)" fg:x="95" fg:w="1"/><text x="7.8561%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.6061%" y="565" width="0.0801%" height="15" fill="rgb(238,81,28)" fg:x="95" fg:w="1"/><text x="7.8561%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.6061%" y="549" width="0.0801%" height="15" fill="rgb(235,110,19)" fg:x="95" fg:w="1"/><text x="7.8561%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="7.6861%" y="565" width="0.0801%" height="15" fill="rgb(214,7,14)" fg:x="96" fg:w="1"/><text x="7.9361%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.6861%" y="549" width="0.0801%" height="15" fill="rgb(211,77,3)" fg:x="96" fg:w="1"/><text x="7.9361%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.6861%" y="533" width="0.0801%" height="15" fill="rgb(229,5,9)" fg:x="96" fg:w="1"/><text x="7.9361%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7662%" y="565" width="0.0801%" height="15" fill="rgb(225,90,11)" fg:x="97" fg:w="1"/><text x="8.0162%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="7.3659%" y="613" width="0.5604%" height="15" fill="rgb(242,56,8)" fg:x="92" fg:w="7"/><text x="7.6159%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="7.5260%" y="597" width="0.4003%" height="15" fill="rgb(249,212,39)" fg:x="94" fg:w="5"/><text x="7.7760%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="7.6861%" y="581" width="0.2402%" height="15" fill="rgb(236,90,9)" fg:x="96" fg:w="3"/><text x="7.9361%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.8463%" y="565" width="0.0801%" height="15" fill="rgb(206,88,35)" fg:x="98" fg:w="1"/><text x="8.0963%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="7.2058%" y="629" width="0.8006%" height="15" fill="rgb(205,126,30)" fg:x="90" fg:w="10"/><text x="7.4558%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="7.9263%" y="613" width="0.0801%" height="15" fill="rgb(230,176,12)" fg:x="99" fg:w="1"/><text x="8.1763%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="7.9263%" y="597" width="0.0801%" height="15" fill="rgb(243,19,9)" fg:x="99" fg:w="1"/><text x="8.1763%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.9263%" y="581" width="0.0801%" height="15" fill="rgb(245,171,17)" fg:x="99" fg:w="1"/><text x="8.1763%" y="591.50"></text></g><g><title>burrow_bon::perms::find_acls (1 samples, 0.08%)</title><rect x="8.0064%" y="629" width="0.0801%" height="15" fill="rgb(227,52,21)" fg:x="100" fg:w="1"/><text x="8.2564%" y="639.50"></text></g><g><title>burrow_bon::scour::scour (1 samples, 0.08%)</title><rect x="8.0064%" y="613" width="0.0801%" height="15" fill="rgb(238,69,14)" fg:x="100" fg:w="1"/><text x="8.2564%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0865%" y="597" width="0.0801%" height="15" fill="rgb(241,156,39)" fg:x="101" fg:w="1"/><text x="8.3365%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.1665%" y="597" width="0.0801%" height="15" fill="rgb(212,227,28)" fg:x="102" fg:w="1"/><text x="8.4165%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="8.0865%" y="629" width="0.3203%" height="15" fill="rgb(209,118,27)" fg:x="101" fg:w="4"/><text x="8.3365%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="8.0865%" y="613" width="0.3203%" height="15" fill="rgb(226,102,5)" fg:x="101" fg:w="4"/><text x="8.3365%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2466%" y="597" width="0.1601%" height="15" fill="rgb(223,34,3)" fg:x="103" fg:w="2"/><text x="8.4966%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2466%" y="581" width="0.1601%" height="15" fill="rgb(221,81,38)" fg:x="103" fg:w="2"/><text x="8.4966%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="8.2466%" y="565" width="0.1601%" height="15" fill="rgb(236,219,28)" fg:x="103" fg:w="2"/><text x="8.4966%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="8.2466%" y="549" width="0.1601%" height="15" fill="rgb(213,200,14)" fg:x="103" fg:w="2"/><text x="8.4966%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="8.4067%" y="613" width="0.0801%" height="15" fill="rgb(240,33,19)" fg:x="105" fg:w="1"/><text x="8.6567%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.4067%" y="597" width="0.0801%" height="15" fill="rgb(233,113,27)" fg:x="105" fg:w="1"/><text x="8.6567%" y="607.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="8.4067%" y="581" width="0.0801%" height="15" fill="rgb(220,221,18)" fg:x="105" fg:w="1"/><text x="8.6567%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.4067%" y="565" width="0.0801%" height="15" fill="rgb(238,92,8)" fg:x="105" fg:w="1"/><text x="8.6567%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.5669%" y="581" width="0.1601%" height="15" fill="rgb(222,164,16)" fg:x="107" fg:w="2"/><text x="8.8169%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.6469%" y="565" width="0.0801%" height="15" fill="rgb(241,119,3)" fg:x="108" fg:w="1"/><text x="8.8969%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7270%" y="581" width="0.0801%" height="15" fill="rgb(241,44,8)" fg:x="109" fg:w="1"/><text x="8.9770%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7270%" y="565" width="0.0801%" height="15" fill="rgb(230,36,40)" fg:x="109" fg:w="1"/><text x="8.9770%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8070%" y="581" width="0.0801%" height="15" fill="rgb(243,16,36)" fg:x="110" fg:w="1"/><text x="9.0570%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8070%" y="565" width="0.0801%" height="15" fill="rgb(231,4,26)" fg:x="110" fg:w="1"/><text x="9.0570%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8070%" y="549" width="0.0801%" height="15" fill="rgb(240,9,31)" fg:x="110" fg:w="1"/><text x="9.0570%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.8871%" y="581" width="0.0801%" height="15" fill="rgb(207,173,15)" fg:x="111" fg:w="1"/><text x="9.1371%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.8871%" y="565" width="0.0801%" height="15" fill="rgb(224,192,53)" fg:x="111" fg:w="1"/><text x="9.1371%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8871%" y="549" width="0.0801%" height="15" fill="rgb(223,67,28)" fg:x="111" fg:w="1"/><text x="9.1371%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="8.9672%" y="565" width="0.0801%" height="15" fill="rgb(211,20,47)" fg:x="112" fg:w="1"/><text x="9.2172%" y="575.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.08%)</title><rect x="7.0456%" y="725" width="2.0817%" height="15" fill="rgb(240,228,2)" fg:x="88" fg:w="26"/><text x="7.2956%" y="735.50">e..</text></g><g><title>engine::session::state::State::close (25 samples, 2.00%)</title><rect x="7.1257%" y="709" width="2.0016%" height="15" fill="rgb(248,151,12)" fg:x="89" fg:w="25"/><text x="7.3757%" y="719.50">e..</text></g><g><title>engine::session::state::State::flush_entities (25 samples, 2.00%)</title><rect x="7.1257%" y="693" width="2.0016%" height="15" fill="rgb(244,8,39)" fg:x="89" fg:w="25"/><text x="7.3757%" y="703.50">e..</text></g><g><title>core::iter::adapters::try_process (24 samples, 1.92%)</title><rect x="7.2058%" y="677" width="1.9215%" height="15" fill="rgb(222,26,8)" fg:x="90" fg:w="24"/><text x="7.4558%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.92%)</title><rect x="7.2058%" y="661" width="1.9215%" height="15" fill="rgb(213,106,44)" fg:x="90" fg:w="24"/><text x="7.4558%" y="671.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (24 samples, 1.92%)</title><rect x="7.2058%" y="645" width="1.9215%" height="15" fill="rgb(214,129,20)" fg:x="90" fg:w="24"/><text x="7.4558%" y="655.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="8.4067%" y="629" width="0.7206%" height="15" fill="rgb(212,32,13)" fg:x="105" fg:w="9"/><text x="8.6567%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="8.4868%" y="613" width="0.6405%" height="15" fill="rgb(208,168,33)" fg:x="106" fg:w="8"/><text x="8.7368%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="8.5669%" y="597" width="0.5604%" height="15" fill="rgb(231,207,8)" fg:x="107" fg:w="7"/><text x="8.8169%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="8.9672%" y="581" width="0.1601%" height="15" fill="rgb(235,219,23)" fg:x="112" fg:w="2"/><text x="9.2172%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="9.0472%" y="565" width="0.0801%" height="15" fill="rgb(226,216,26)" fg:x="113" fg:w="1"/><text x="9.2972%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.0472%" y="549" width="0.0801%" height="15" fill="rgb(239,137,16)" fg:x="113" fg:w="1"/><text x="9.2972%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0472%" y="533" width="0.0801%" height="15" fill="rgb(207,12,36)" fg:x="113" fg:w="1"/><text x="9.2972%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0472%" y="517" width="0.0801%" height="15" fill="rgb(210,214,24)" fg:x="113" fg:w="1"/><text x="9.2972%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.1273%" y="725" width="0.0801%" height="15" fill="rgb(206,56,30)" fg:x="114" fg:w="1"/><text x="9.3773%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="9.1273%" y="709" width="0.0801%" height="15" fill="rgb(228,143,26)" fg:x="114" fg:w="1"/><text x="9.3773%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="9.1273%" y="693" width="0.0801%" height="15" fill="rgb(216,218,46)" fg:x="114" fg:w="1"/><text x="9.3773%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1273%" y="677" width="0.0801%" height="15" fill="rgb(206,6,19)" fg:x="114" fg:w="1"/><text x="9.3773%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2074%" y="677" width="0.0801%" height="15" fill="rgb(239,177,51)" fg:x="115" fg:w="1"/><text x="9.4574%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="9.2074%" y="709" width="0.2402%" height="15" fill="rgb(216,55,25)" fg:x="115" fg:w="3"/><text x="9.4574%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="9.2074%" y="693" width="0.2402%" height="15" fill="rgb(231,163,29)" fg:x="115" fg:w="3"/><text x="9.4574%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="9.2874%" y="677" width="0.1601%" height="15" fill="rgb(232,149,50)" fg:x="116" fg:w="2"/><text x="9.5374%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.2874%" y="661" width="0.1601%" height="15" fill="rgb(223,142,48)" fg:x="116" fg:w="2"/><text x="9.5374%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="9.2874%" y="645" width="0.1601%" height="15" fill="rgb(245,83,23)" fg:x="116" fg:w="2"/><text x="9.5374%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.2874%" y="629" width="0.1601%" height="15" fill="rgb(224,63,2)" fg:x="116" fg:w="2"/><text x="9.5374%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="9.2874%" y="613" width="0.1601%" height="15" fill="rgb(218,65,53)" fg:x="116" fg:w="2"/><text x="9.5374%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.2874%" y="597" width="0.1601%" height="15" fill="rgb(221,84,29)" fg:x="116" fg:w="2"/><text x="9.5374%" y="607.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="9.3675%" y="581" width="0.0801%" height="15" fill="rgb(234,0,32)" fg:x="117" fg:w="1"/><text x="9.6175%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4476%" y="645" width="0.0801%" height="15" fill="rgb(206,20,16)" fg:x="118" fg:w="1"/><text x="9.6976%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.4476%" y="693" width="0.1601%" height="15" fill="rgb(244,172,18)" fg:x="118" fg:w="2"/><text x="9.6976%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="9.4476%" y="677" width="0.1601%" height="15" fill="rgb(254,133,1)" fg:x="118" fg:w="2"/><text x="9.6976%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="9.4476%" y="661" width="0.1601%" height="15" fill="rgb(222,206,41)" fg:x="118" fg:w="2"/><text x="9.6976%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.5276%" y="645" width="0.0801%" height="15" fill="rgb(212,3,42)" fg:x="119" fg:w="1"/><text x="9.7776%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.5276%" y="629" width="0.0801%" height="15" fill="rgb(241,11,4)" fg:x="119" fg:w="1"/><text x="9.7776%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.5276%" y="613" width="0.0801%" height="15" fill="rgb(205,19,26)" fg:x="119" fg:w="1"/><text x="9.7776%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.5276%" y="597" width="0.0801%" height="15" fill="rgb(210,179,32)" fg:x="119" fg:w="1"/><text x="9.7776%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.6077%" y="677" width="0.0801%" height="15" fill="rgb(227,116,49)" fg:x="120" fg:w="1"/><text x="9.8577%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.6077%" y="661" width="0.0801%" height="15" fill="rgb(211,146,6)" fg:x="120" fg:w="1"/><text x="9.8577%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6077%" y="645" width="0.0801%" height="15" fill="rgb(219,44,39)" fg:x="120" fg:w="1"/><text x="9.8577%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.6077%" y="629" width="0.0801%" height="15" fill="rgb(234,128,11)" fg:x="120" fg:w="1"/><text x="9.8577%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="9.6077%" y="693" width="0.1601%" height="15" fill="rgb(220,183,53)" fg:x="120" fg:w="2"/><text x="9.8577%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="9.6878%" y="677" width="0.0801%" height="15" fill="rgb(213,219,32)" fg:x="121" fg:w="1"/><text x="9.9378%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="9.6878%" y="661" width="0.0801%" height="15" fill="rgb(232,156,16)" fg:x="121" fg:w="1"/><text x="9.9378%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="9.6878%" y="645" width="0.0801%" height="15" fill="rgb(246,135,34)" fg:x="121" fg:w="1"/><text x="9.9378%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="9.7678%" y="677" width="0.0801%" height="15" fill="rgb(241,99,0)" fg:x="122" fg:w="1"/><text x="10.0178%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="9.7678%" y="661" width="0.0801%" height="15" fill="rgb(222,103,45)" fg:x="122" fg:w="1"/><text x="10.0178%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="9.7678%" y="645" width="0.0801%" height="15" fill="rgb(212,57,4)" fg:x="122" fg:w="1"/><text x="10.0178%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7678%" y="629" width="0.0801%" height="15" fill="rgb(215,68,47)" fg:x="122" fg:w="1"/><text x="10.0178%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7678%" y="613" width="0.0801%" height="15" fill="rgb(230,84,2)" fg:x="122" fg:w="1"/><text x="10.0178%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.7678%" y="597" width="0.0801%" height="15" fill="rgb(220,102,14)" fg:x="122" fg:w="1"/><text x="10.0178%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7678%" y="581" width="0.0801%" height="15" fill="rgb(240,10,32)" fg:x="122" fg:w="1"/><text x="10.0178%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.7678%" y="565" width="0.0801%" height="15" fill="rgb(215,47,27)" fg:x="122" fg:w="1"/><text x="10.0178%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.7678%" y="549" width="0.0801%" height="15" fill="rgb(233,188,43)" fg:x="122" fg:w="1"/><text x="10.0178%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.7678%" y="533" width="0.0801%" height="15" fill="rgb(253,190,1)" fg:x="122" fg:w="1"/><text x="10.0178%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.7678%" y="517" width="0.0801%" height="15" fill="rgb(206,114,52)" fg:x="122" fg:w="1"/><text x="10.0178%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.7678%" y="501" width="0.0801%" height="15" fill="rgb(233,120,37)" fg:x="122" fg:w="1"/><text x="10.0178%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.7678%" y="485" width="0.0801%" height="15" fill="rgb(214,52,39)" fg:x="122" fg:w="1"/><text x="10.0178%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.7678%" y="469" width="0.0801%" height="15" fill="rgb(223,80,29)" fg:x="122" fg:w="1"/><text x="10.0178%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.7678%" y="453" width="0.0801%" height="15" fill="rgb(230,101,40)" fg:x="122" fg:w="1"/><text x="10.0178%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.7678%" y="437" width="0.0801%" height="15" fill="rgb(219,211,8)" fg:x="122" fg:w="1"/><text x="10.0178%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.7678%" y="421" width="0.0801%" height="15" fill="rgb(252,126,28)" fg:x="122" fg:w="1"/><text x="10.0178%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7678%" y="405" width="0.0801%" height="15" fill="rgb(215,56,38)" fg:x="122" fg:w="1"/><text x="10.0178%" y="415.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="9.8479%" y="677" width="0.0801%" height="15" fill="rgb(249,55,44)" fg:x="123" fg:w="1"/><text x="10.0979%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8479%" y="661" width="0.0801%" height="15" fill="rgb(220,221,32)" fg:x="123" fg:w="1"/><text x="10.0979%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.8479%" y="645" width="0.0801%" height="15" fill="rgb(212,216,41)" fg:x="123" fg:w="1"/><text x="10.0979%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9279%" y="645" width="0.0801%" height="15" fill="rgb(228,213,43)" fg:x="124" fg:w="1"/><text x="10.1779%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.9279%" y="629" width="0.0801%" height="15" fill="rgb(211,31,26)" fg:x="124" fg:w="1"/><text x="10.1779%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0080%" y="565" width="0.0801%" height="15" fill="rgb(229,202,19)" fg:x="125" fg:w="1"/><text x="10.2580%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0080%" y="549" width="0.0801%" height="15" fill="rgb(229,105,46)" fg:x="125" fg:w="1"/><text x="10.2580%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="9.7678%" y="693" width="0.4003%" height="15" fill="rgb(235,108,1)" fg:x="122" fg:w="5"/><text x="10.0178%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="9.9279%" y="677" width="0.2402%" height="15" fill="rgb(245,111,35)" fg:x="124" fg:w="3"/><text x="10.1779%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="9.9279%" y="661" width="0.2402%" height="15" fill="rgb(219,185,31)" fg:x="124" fg:w="3"/><text x="10.1779%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="10.0080%" y="645" width="0.1601%" height="15" fill="rgb(214,4,43)" fg:x="125" fg:w="2"/><text x="10.2580%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="10.0080%" y="629" width="0.1601%" height="15" fill="rgb(235,227,40)" fg:x="125" fg:w="2"/><text x="10.2580%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.0080%" y="613" width="0.1601%" height="15" fill="rgb(230,88,30)" fg:x="125" fg:w="2"/><text x="10.2580%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.0080%" y="597" width="0.1601%" height="15" fill="rgb(216,217,1)" fg:x="125" fg:w="2"/><text x="10.2580%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.0080%" y="581" width="0.1601%" height="15" fill="rgb(248,139,50)" fg:x="125" fg:w="2"/><text x="10.2580%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0881%" y="565" width="0.0801%" height="15" fill="rgb(233,1,21)" fg:x="126" fg:w="1"/><text x="10.3381%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.0881%" y="549" width="0.0801%" height="15" fill="rgb(215,183,12)" fg:x="126" fg:w="1"/><text x="10.3381%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (11 samples, 0.88%)</title><rect x="9.4476%" y="709" width="0.8807%" height="15" fill="rgb(229,104,42)" fg:x="118" fg:w="11"/><text x="9.6976%" y="719.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (2 samples, 0.16%)</title><rect x="10.1681%" y="693" width="0.1601%" height="15" fill="rgb(243,34,48)" fg:x="127" fg:w="2"/><text x="10.4181%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="10.2482%" y="677" width="0.0801%" height="15" fill="rgb(239,11,44)" fg:x="128" fg:w="1"/><text x="10.4982%" y="687.50"></text></g><g><title>plugins_core::build::Build::save (16 samples, 1.28%)</title><rect x="9.2074%" y="725" width="1.2810%" height="15" fill="rgb(231,98,35)" fg:x="115" fg:w="16"/><text x="9.4574%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="10.3283%" y="709" width="0.1601%" height="15" fill="rgb(233,28,25)" fg:x="129" fg:w="2"/><text x="10.5783%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4083%" y="693" width="0.0801%" height="15" fill="rgb(234,123,11)" fg:x="130" fg:w="1"/><text x="10.6583%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4083%" y="677" width="0.0801%" height="15" fill="rgb(220,69,3)" fg:x="130" fg:w="1"/><text x="10.6583%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.4884%" y="693" width="0.0801%" height="15" fill="rgb(214,64,36)" fg:x="131" fg:w="1"/><text x="10.7384%" y="703.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="10.4884%" y="677" width="0.0801%" height="15" fill="rgb(211,138,32)" fg:x="131" fg:w="1"/><text x="10.7384%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.24%)</title><rect x="10.4884%" y="725" width="0.2402%" height="15" fill="rgb(213,118,47)" fg:x="131" fg:w="3"/><text x="10.7384%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.24%)</title><rect x="10.4884%" y="709" width="0.2402%" height="15" fill="rgb(243,124,49)" fg:x="131" fg:w="3"/><text x="10.7384%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="10.5685%" y="693" width="0.1601%" height="15" fill="rgb(221,30,28)" fg:x="132" fg:w="2"/><text x="10.8185%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="10.5685%" y="677" width="0.1601%" height="15" fill="rgb(246,37,13)" fg:x="132" fg:w="2"/><text x="10.8185%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.5685%" y="661" width="0.1601%" height="15" fill="rgb(249,66,14)" fg:x="132" fg:w="2"/><text x="10.8185%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (2 samples, 0.16%)</title><rect x="10.5685%" y="645" width="0.1601%" height="15" fill="rgb(213,166,5)" fg:x="132" fg:w="2"/><text x="10.8185%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.5685%" y="629" width="0.1601%" height="15" fill="rgb(221,66,24)" fg:x="132" fg:w="2"/><text x="10.8185%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.6485%" y="613" width="0.0801%" height="15" fill="rgb(210,132,17)" fg:x="133" fg:w="1"/><text x="10.8985%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="10.8086%" y="693" width="0.1601%" height="15" fill="rgb(243,202,5)" fg:x="135" fg:w="2"/><text x="11.0586%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="10.8086%" y="677" width="0.1601%" height="15" fill="rgb(233,70,48)" fg:x="135" fg:w="2"/><text x="11.0586%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="10.8086%" y="661" width="0.1601%" height="15" fill="rgb(238,41,26)" fg:x="135" fg:w="2"/><text x="11.0586%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="10.8086%" y="645" width="0.1601%" height="15" fill="rgb(241,19,31)" fg:x="135" fg:w="2"/><text x="11.0586%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.8086%" y="629" width="0.1601%" height="15" fill="rgb(214,76,10)" fg:x="135" fg:w="2"/><text x="11.0586%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.8086%" y="613" width="0.1601%" height="15" fill="rgb(254,202,22)" fg:x="135" fg:w="2"/><text x="11.0586%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="10.8086%" y="597" width="0.1601%" height="15" fill="rgb(214,72,24)" fg:x="135" fg:w="2"/><text x="11.0586%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.8086%" y="581" width="0.1601%" height="15" fill="rgb(221,92,46)" fg:x="135" fg:w="2"/><text x="11.0586%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8887%" y="565" width="0.0801%" height="15" fill="rgb(246,13,50)" fg:x="136" fg:w="1"/><text x="11.1387%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.0488%" y="645" width="0.0801%" height="15" fill="rgb(240,165,38)" fg:x="138" fg:w="1"/><text x="11.2988%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="10.9688%" y="693" width="0.2402%" height="15" fill="rgb(241,24,51)" fg:x="137" fg:w="3"/><text x="11.2188%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="11.0488%" y="677" width="0.1601%" height="15" fill="rgb(227,51,44)" fg:x="138" fg:w="2"/><text x="11.2988%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.0488%" y="661" width="0.1601%" height="15" fill="rgb(231,121,3)" fg:x="138" fg:w="2"/><text x="11.2988%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.1289%" y="645" width="0.0801%" height="15" fill="rgb(245,3,41)" fg:x="139" fg:w="1"/><text x="11.3789%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1289%" y="629" width="0.0801%" height="15" fill="rgb(214,13,26)" fg:x="139" fg:w="1"/><text x="11.3789%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.1289%" y="613" width="0.0801%" height="15" fill="rgb(252,75,11)" fg:x="139" fg:w="1"/><text x="11.3789%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2090%" y="661" width="0.0801%" height="15" fill="rgb(218,226,17)" fg:x="140" fg:w="1"/><text x="11.4590%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.2090%" y="645" width="0.0801%" height="15" fill="rgb(248,89,38)" fg:x="140" fg:w="1"/><text x="11.4590%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.2090%" y="629" width="0.0801%" height="15" fill="rgb(237,73,46)" fg:x="140" fg:w="1"/><text x="11.4590%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.2090%" y="613" width="0.0801%" height="15" fill="rgb(242,78,33)" fg:x="140" fg:w="1"/><text x="11.4590%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.2090%" y="597" width="0.0801%" height="15" fill="rgb(235,60,3)" fg:x="140" fg:w="1"/><text x="11.4590%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.2090%" y="581" width="0.0801%" height="15" fill="rgb(216,172,19)" fg:x="140" fg:w="1"/><text x="11.4590%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.2090%" y="565" width="0.0801%" height="15" fill="rgb(227,6,42)" fg:x="140" fg:w="1"/><text x="11.4590%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.2090%" y="549" width="0.0801%" height="15" fill="rgb(223,207,42)" fg:x="140" fg:w="1"/><text x="11.4590%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.2090%" y="533" width="0.0801%" height="15" fill="rgb(246,138,30)" fg:x="140" fg:w="1"/><text x="11.4590%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="11.2090%" y="677" width="0.2402%" height="15" fill="rgb(251,199,47)" fg:x="140" fg:w="3"/><text x="11.4590%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.2890%" y="661" width="0.1601%" height="15" fill="rgb(228,218,44)" fg:x="141" fg:w="2"/><text x="11.5390%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3691%" y="645" width="0.0801%" height="15" fill="rgb(220,68,6)" fg:x="142" fg:w="1"/><text x="11.6191%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.3691%" y="629" width="0.0801%" height="15" fill="rgb(240,60,26)" fg:x="142" fg:w="1"/><text x="11.6191%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3691%" y="613" width="0.0801%" height="15" fill="rgb(211,200,19)" fg:x="142" fg:w="1"/><text x="11.6191%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.3691%" y="597" width="0.0801%" height="15" fill="rgb(242,145,30)" fg:x="142" fg:w="1"/><text x="11.6191%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.3691%" y="581" width="0.0801%" height="15" fill="rgb(225,64,13)" fg:x="142" fg:w="1"/><text x="11.6191%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.3691%" y="565" width="0.0801%" height="15" fill="rgb(218,103,35)" fg:x="142" fg:w="1"/><text x="11.6191%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4492%" y="613" width="0.0801%" height="15" fill="rgb(216,93,46)" fg:x="143" fg:w="1"/><text x="11.6992%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4492%" y="597" width="0.0801%" height="15" fill="rgb(225,159,27)" fg:x="143" fg:w="1"/><text x="11.6992%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4492%" y="581" width="0.0801%" height="15" fill="rgb(225,204,11)" fg:x="143" fg:w="1"/><text x="11.6992%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.4492%" y="565" width="0.0801%" height="15" fill="rgb(205,56,4)" fg:x="143" fg:w="1"/><text x="11.6992%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.4492%" y="549" width="0.0801%" height="15" fill="rgb(206,6,35)" fg:x="143" fg:w="1"/><text x="11.6992%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.4492%" y="533" width="0.0801%" height="15" fill="rgb(247,73,52)" fg:x="143" fg:w="1"/><text x="11.6992%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.4492%" y="517" width="0.0801%" height="15" fill="rgb(246,97,4)" fg:x="143" fg:w="1"/><text x="11.6992%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.4492%" y="501" width="0.0801%" height="15" fill="rgb(212,37,15)" fg:x="143" fg:w="1"/><text x="11.6992%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.4492%" y="485" width="0.0801%" height="15" fill="rgb(208,130,40)" fg:x="143" fg:w="1"/><text x="11.6992%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.4492%" y="469" width="0.0801%" height="15" fill="rgb(236,55,29)" fg:x="143" fg:w="1"/><text x="11.6992%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.4492%" y="453" width="0.0801%" height="15" fill="rgb(209,156,45)" fg:x="143" fg:w="1"/><text x="11.6992%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.4492%" y="437" width="0.0801%" height="15" fill="rgb(249,107,4)" fg:x="143" fg:w="1"/><text x="11.6992%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.4492%" y="421" width="0.0801%" height="15" fill="rgb(227,7,13)" fg:x="143" fg:w="1"/><text x="11.6992%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.4492%" y="405" width="0.0801%" height="15" fill="rgb(250,129,14)" fg:x="143" fg:w="1"/><text x="11.6992%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4492%" y="389" width="0.0801%" height="15" fill="rgb(229,92,13)" fg:x="143" fg:w="1"/><text x="11.6992%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5292%" y="549" width="0.0801%" height="15" fill="rgb(245,98,39)" fg:x="144" fg:w="1"/><text x="11.7792%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="11.4492%" y="645" width="0.2402%" height="15" fill="rgb(234,135,48)" fg:x="143" fg:w="3"/><text x="11.6992%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="11.4492%" y="629" width="0.2402%" height="15" fill="rgb(230,98,28)" fg:x="143" fg:w="3"/><text x="11.6992%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.5292%" y="613" width="0.1601%" height="15" fill="rgb(223,121,0)" fg:x="144" fg:w="2"/><text x="11.7792%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.5292%" y="597" width="0.1601%" height="15" fill="rgb(234,173,33)" fg:x="144" fg:w="2"/><text x="11.7792%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="11.5292%" y="581" width="0.1601%" height="15" fill="rgb(245,47,8)" fg:x="144" fg:w="2"/><text x="11.7792%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.5292%" y="565" width="0.1601%" height="15" fill="rgb(205,17,20)" fg:x="144" fg:w="2"/><text x="11.7792%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.6093%" y="549" width="0.0801%" height="15" fill="rgb(232,151,16)" fg:x="145" fg:w="1"/><text x="11.8593%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6093%" y="533" width="0.0801%" height="15" fill="rgb(208,30,32)" fg:x="145" fg:w="1"/><text x="11.8593%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6093%" y="517" width="0.0801%" height="15" fill="rgb(254,26,3)" fg:x="145" fg:w="1"/><text x="11.8593%" y="527.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (7 samples, 0.56%)</title><rect x="11.2090%" y="693" width="0.5604%" height="15" fill="rgb(240,177,30)" fg:x="140" fg:w="7"/><text x="11.4590%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="11.4492%" y="677" width="0.3203%" height="15" fill="rgb(248,76,44)" fg:x="143" fg:w="4"/><text x="11.6992%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="11.4492%" y="661" width="0.3203%" height="15" fill="rgb(241,186,54)" fg:x="143" fg:w="4"/><text x="11.6992%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.6894%" y="645" width="0.0801%" height="15" fill="rgb(249,171,29)" fg:x="146" fg:w="1"/><text x="11.9394%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="11.6894%" y="629" width="0.0801%" height="15" fill="rgb(237,151,44)" fg:x="146" fg:w="1"/><text x="11.9394%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6894%" y="613" width="0.0801%" height="15" fill="rgb(228,174,30)" fg:x="146" fg:w="1"/><text x="11.9394%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6894%" y="597" width="0.0801%" height="15" fill="rgb(252,14,37)" fg:x="146" fg:w="1"/><text x="11.9394%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6894%" y="581" width="0.0801%" height="15" fill="rgb(207,111,40)" fg:x="146" fg:w="1"/><text x="11.9394%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6894%" y="565" width="0.0801%" height="15" fill="rgb(248,171,54)" fg:x="146" fg:w="1"/><text x="11.9394%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.6894%" y="549" width="0.0801%" height="15" fill="rgb(211,127,2)" fg:x="146" fg:w="1"/><text x="11.9394%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.6894%" y="533" width="0.0801%" height="15" fill="rgb(236,87,47)" fg:x="146" fg:w="1"/><text x="11.9394%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.6894%" y="517" width="0.0801%" height="15" fill="rgb(223,190,45)" fg:x="146" fg:w="1"/><text x="11.9394%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6894%" y="501" width="0.0801%" height="15" fill="rgb(215,5,16)" fg:x="146" fg:w="1"/><text x="11.9394%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6894%" y="485" width="0.0801%" height="15" fill="rgb(252,82,33)" fg:x="146" fg:w="1"/><text x="11.9394%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.6894%" y="469" width="0.0801%" height="15" fill="rgb(247,213,44)" fg:x="146" fg:w="1"/><text x="11.9394%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="11.6894%" y="453" width="0.0801%" height="15" fill="rgb(205,196,44)" fg:x="146" fg:w="1"/><text x="11.9394%" y="463.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="11.6894%" y="437" width="0.0801%" height="15" fill="rgb(237,96,54)" fg:x="146" fg:w="1"/><text x="11.9394%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (14 samples, 1.12%)</title><rect x="10.7286%" y="725" width="1.1209%" height="15" fill="rgb(230,113,34)" fg:x="134" fg:w="14"/><text x="10.9786%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (14 samples, 1.12%)</title><rect x="10.7286%" y="709" width="1.1209%" height="15" fill="rgb(221,224,12)" fg:x="134" fg:w="14"/><text x="10.9786%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="11.7694%" y="693" width="0.0801%" height="15" fill="rgb(219,112,44)" fg:x="147" fg:w="1"/><text x="12.0194%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.7694%" y="677" width="0.0801%" height="15" fill="rgb(210,31,13)" fg:x="147" fg:w="1"/><text x="12.0194%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.7694%" y="661" width="0.0801%" height="15" fill="rgb(230,25,16)" fg:x="147" fg:w="1"/><text x="12.0194%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="11.8495%" y="709" width="0.0801%" height="15" fill="rgb(246,108,53)" fg:x="148" fg:w="1"/><text x="12.0995%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8495%" y="693" width="0.0801%" height="15" fill="rgb(241,172,50)" fg:x="148" fg:w="1"/><text x="12.0995%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.8495%" y="677" width="0.0801%" height="15" fill="rgb(235,141,10)" fg:x="148" fg:w="1"/><text x="12.0995%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="11.8495%" y="661" width="0.0801%" height="15" fill="rgb(220,174,43)" fg:x="148" fg:w="1"/><text x="12.0995%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8495%" y="645" width="0.0801%" height="15" fill="rgb(215,181,40)" fg:x="148" fg:w="1"/><text x="12.0995%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.8495%" y="629" width="0.0801%" height="15" fill="rgb(230,97,2)" fg:x="148" fg:w="1"/><text x="12.0995%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.8495%" y="613" width="0.0801%" height="15" fill="rgb(211,25,27)" fg:x="148" fg:w="1"/><text x="12.0995%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="11.9295%" y="709" width="0.0801%" height="15" fill="rgb(230,87,26)" fg:x="149" fg:w="1"/><text x="12.1795%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="11.9295%" y="693" width="0.0801%" height="15" fill="rgb(227,160,17)" fg:x="149" fg:w="1"/><text x="12.1795%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9295%" y="677" width="0.0801%" height="15" fill="rgb(244,85,34)" fg:x="149" fg:w="1"/><text x="12.1795%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="11.9295%" y="661" width="0.0801%" height="15" fill="rgb(207,70,0)" fg:x="149" fg:w="1"/><text x="12.1795%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.0897%" y="597" width="0.0801%" height="15" fill="rgb(223,129,7)" fg:x="151" fg:w="1"/><text x="12.3397%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.1697%" y="597" width="0.0801%" height="15" fill="rgb(246,105,7)" fg:x="152" fg:w="1"/><text x="12.4197%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.1697%" y="581" width="0.0801%" height="15" fill="rgb(215,154,42)" fg:x="152" fg:w="1"/><text x="12.4197%" y="591.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="12.0897%" y="629" width="0.2402%" height="15" fill="rgb(220,215,30)" fg:x="151" fg:w="3"/><text x="12.3397%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="12.0897%" y="613" width="0.2402%" height="15" fill="rgb(228,81,51)" fg:x="151" fg:w="3"/><text x="12.3397%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.2498%" y="597" width="0.0801%" height="15" fill="rgb(247,71,54)" fg:x="153" fg:w="1"/><text x="12.4998%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.2498%" y="581" width="0.0801%" height="15" fill="rgb(234,176,34)" fg:x="153" fg:w="1"/><text x="12.4998%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.2498%" y="565" width="0.0801%" height="15" fill="rgb(241,103,54)" fg:x="153" fg:w="1"/><text x="12.4998%" y="575.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="12.0096%" y="709" width="0.4003%" height="15" fill="rgb(228,22,34)" fg:x="150" fg:w="5"/><text x="12.2596%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="12.0897%" y="693" width="0.3203%" height="15" fill="rgb(241,179,48)" fg:x="151" fg:w="4"/><text x="12.3397%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="12.0897%" y="677" width="0.3203%" height="15" fill="rgb(235,167,37)" fg:x="151" fg:w="4"/><text x="12.3397%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="12.0897%" y="661" width="0.3203%" height="15" fill="rgb(213,109,30)" fg:x="151" fg:w="4"/><text x="12.3397%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="12.0897%" y="645" width="0.3203%" height="15" fill="rgb(222,172,16)" fg:x="151" fg:w="4"/><text x="12.3397%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.3299%" y="629" width="0.0801%" height="15" fill="rgb(233,192,5)" fg:x="154" fg:w="1"/><text x="12.5799%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.3299%" y="613" width="0.0801%" height="15" fill="rgb(247,189,41)" fg:x="154" fg:w="1"/><text x="12.5799%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3299%" y="597" width="0.0801%" height="15" fill="rgb(218,134,47)" fg:x="154" fg:w="1"/><text x="12.5799%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.3299%" y="581" width="0.0801%" height="15" fill="rgb(216,29,3)" fg:x="154" fg:w="1"/><text x="12.5799%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::EntityPtr&gt;&gt; (1 samples, 0.08%)</title><rect x="12.4099%" y="709" width="0.0801%" height="15" fill="rgb(246,140,12)" fg:x="155" fg:w="1"/><text x="12.6599%" y="719.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="12.4900%" y="677" width="0.0801%" height="15" fill="rgb(230,136,11)" fg:x="156" fg:w="1"/><text x="12.7400%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="12.4900%" y="661" width="0.0801%" height="15" fill="rgb(247,22,47)" fg:x="156" fg:w="1"/><text x="12.7400%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="12.4900%" y="645" width="0.0801%" height="15" fill="rgb(218,84,22)" fg:x="156" fg:w="1"/><text x="12.7400%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="12.4900%" y="629" width="0.0801%" height="15" fill="rgb(216,87,39)" fg:x="156" fg:w="1"/><text x="12.7400%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="12.4900%" y="613" width="0.0801%" height="15" fill="rgb(221,178,8)" fg:x="156" fg:w="1"/><text x="12.7400%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="12.4900%" y="597" width="0.0801%" height="15" fill="rgb(230,42,11)" fg:x="156" fg:w="1"/><text x="12.7400%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="12.4900%" y="581" width="0.0801%" height="15" fill="rgb(237,229,4)" fg:x="156" fg:w="1"/><text x="12.7400%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="12.4900%" y="565" width="0.0801%" height="15" fill="rgb(222,31,33)" fg:x="156" fg:w="1"/><text x="12.7400%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.5701%" y="645" width="0.0801%" height="15" fill="rgb(210,17,39)" fg:x="157" fg:w="1"/><text x="12.8201%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="12.5701%" y="629" width="0.0801%" height="15" fill="rgb(244,93,20)" fg:x="157" fg:w="1"/><text x="12.8201%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="12.5701%" y="613" width="0.0801%" height="15" fill="rgb(210,40,47)" fg:x="157" fg:w="1"/><text x="12.8201%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="12.5701%" y="597" width="0.0801%" height="15" fill="rgb(239,211,47)" fg:x="157" fg:w="1"/><text x="12.8201%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.5701%" y="581" width="0.0801%" height="15" fill="rgb(251,223,49)" fg:x="157" fg:w="1"/><text x="12.8201%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5701%" y="565" width="0.0801%" height="15" fill="rgb(221,149,5)" fg:x="157" fg:w="1"/><text x="12.8201%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.7302%" y="517" width="0.0801%" height="15" fill="rgb(219,224,51)" fg:x="159" fg:w="1"/><text x="12.9802%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.7302%" y="501" width="0.0801%" height="15" fill="rgb(223,7,8)" fg:x="159" fg:w="1"/><text x="12.9802%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="12.7302%" y="549" width="0.1601%" height="15" fill="rgb(241,217,22)" fg:x="159" fg:w="2"/><text x="12.9802%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="12.7302%" y="533" width="0.1601%" height="15" fill="rgb(248,209,0)" fg:x="159" fg:w="2"/><text x="12.9802%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8102%" y="517" width="0.0801%" height="15" fill="rgb(217,205,4)" fg:x="160" fg:w="1"/><text x="13.0602%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="12.8102%" y="501" width="0.0801%" height="15" fill="rgb(228,124,39)" fg:x="160" fg:w="1"/><text x="13.0602%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="12.8102%" y="485" width="0.0801%" height="15" fill="rgb(250,116,42)" fg:x="160" fg:w="1"/><text x="13.0602%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.8903%" y="549" width="0.0801%" height="15" fill="rgb(223,202,9)" fg:x="161" fg:w="1"/><text x="13.1403%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.8903%" y="533" width="0.0801%" height="15" fill="rgb(242,222,40)" fg:x="161" fg:w="1"/><text x="13.1403%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.9704%" y="533" width="0.0801%" height="15" fill="rgb(229,99,46)" fg:x="162" fg:w="1"/><text x="13.2204%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="13.0504%" y="533" width="0.1601%" height="15" fill="rgb(225,56,46)" fg:x="163" fg:w="2"/><text x="13.3004%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="13.0504%" y="517" width="0.1601%" height="15" fill="rgb(227,94,5)" fg:x="163" fg:w="2"/><text x="13.3004%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.0504%" y="501" width="0.1601%" height="15" fill="rgb(205,112,38)" fg:x="163" fg:w="2"/><text x="13.3004%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.1305%" y="485" width="0.0801%" height="15" fill="rgb(231,133,46)" fg:x="164" fg:w="1"/><text x="13.3805%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="12.9704%" y="549" width="0.3203%" height="15" fill="rgb(217,16,9)" fg:x="162" fg:w="4"/><text x="13.2204%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.2106%" y="533" width="0.0801%" height="15" fill="rgb(249,173,9)" fg:x="165" fg:w="1"/><text x="13.4606%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.2106%" y="517" width="0.0801%" height="15" fill="rgb(205,163,53)" fg:x="165" fg:w="1"/><text x="13.4606%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.2106%" y="501" width="0.0801%" height="15" fill="rgb(217,54,41)" fg:x="165" fg:w="1"/><text x="13.4606%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="12.7302%" y="565" width="0.6405%" height="15" fill="rgb(228,216,12)" fg:x="159" fg:w="8"/><text x="12.9802%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.2906%" y="549" width="0.0801%" height="15" fill="rgb(244,228,15)" fg:x="166" fg:w="1"/><text x="13.5406%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.2906%" y="533" width="0.0801%" height="15" fill="rgb(221,176,53)" fg:x="166" fg:w="1"/><text x="13.5406%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.96%)</title><rect x="12.6501%" y="597" width="0.9608%" height="15" fill="rgb(205,94,34)" fg:x="158" fg:w="12"/><text x="12.9001%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="12.7302%" y="581" width="0.8807%" height="15" fill="rgb(213,110,48)" fg:x="159" fg:w="11"/><text x="12.9802%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="13.3707%" y="565" width="0.2402%" height="15" fill="rgb(236,142,28)" fg:x="167" fg:w="3"/><text x="13.6207%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.4508%" y="549" width="0.1601%" height="15" fill="rgb(225,135,29)" fg:x="168" fg:w="2"/><text x="13.7008%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5308%" y="533" width="0.0801%" height="15" fill="rgb(252,45,31)" fg:x="169" fg:w="1"/><text x="13.7808%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="13.6109%" y="597" width="0.0801%" height="15" fill="rgb(211,187,50)" fg:x="170" fg:w="1"/><text x="13.8609%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="13.6109%" y="581" width="0.0801%" height="15" fill="rgb(229,109,7)" fg:x="170" fg:w="1"/><text x="13.8609%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.6910%" y="533" width="0.0801%" height="15" fill="rgb(251,131,51)" fg:x="171" fg:w="1"/><text x="13.9410%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.6910%" y="597" width="0.2402%" height="15" fill="rgb(251,180,35)" fg:x="171" fg:w="3"/><text x="13.9410%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="13.6910%" y="581" width="0.2402%" height="15" fill="rgb(211,46,32)" fg:x="171" fg:w="3"/><text x="13.9410%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.6910%" y="565" width="0.2402%" height="15" fill="rgb(248,123,17)" fg:x="171" fg:w="3"/><text x="13.9410%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="13.6910%" y="549" width="0.2402%" height="15" fill="rgb(227,141,18)" fg:x="171" fg:w="3"/><text x="13.9410%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="13.7710%" y="533" width="0.1601%" height="15" fill="rgb(216,102,9)" fg:x="172" fg:w="2"/><text x="14.0210%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.8511%" y="517" width="0.0801%" height="15" fill="rgb(253,47,13)" fg:x="173" fg:w="1"/><text x="14.1011%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.0112%" y="549" width="0.1601%" height="15" fill="rgb(226,93,23)" fg:x="175" fg:w="2"/><text x="14.2612%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="14.0112%" y="533" width="0.1601%" height="15" fill="rgb(247,104,17)" fg:x="175" fg:w="2"/><text x="14.2612%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="14.1713%" y="549" width="0.0801%" height="15" fill="rgb(233,203,26)" fg:x="177" fg:w="1"/><text x="14.4213%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.1713%" y="533" width="0.0801%" height="15" fill="rgb(244,98,49)" fg:x="177" fg:w="1"/><text x="14.4213%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.1713%" y="517" width="0.0801%" height="15" fill="rgb(235,134,22)" fg:x="177" fg:w="1"/><text x="14.4213%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.3315%" y="517" width="0.0801%" height="15" fill="rgb(221,70,32)" fg:x="179" fg:w="1"/><text x="14.5815%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.4115%" y="501" width="0.0801%" height="15" fill="rgb(238,15,50)" fg:x="180" fg:w="1"/><text x="14.6615%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="14.4115%" y="485" width="0.0801%" height="15" fill="rgb(215,221,48)" fg:x="180" fg:w="1"/><text x="14.6615%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="14.4115%" y="469" width="0.0801%" height="15" fill="rgb(236,73,3)" fg:x="180" fg:w="1"/><text x="14.6615%" y="479.50"></text></g><g><title>engine::session::Session::flush (28 samples, 2.24%)</title><rect x="12.4900%" y="709" width="2.2418%" height="15" fill="rgb(250,107,11)" fg:x="156" fg:w="28"/><text x="12.7400%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (28 samples, 2.24%)</title><rect x="12.4900%" y="693" width="2.2418%" height="15" fill="rgb(242,39,14)" fg:x="156" fg:w="28"/><text x="12.7400%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (27 samples, 2.16%)</title><rect x="12.5701%" y="677" width="2.1617%" height="15" fill="rgb(248,164,37)" fg:x="157" fg:w="27"/><text x="12.8201%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (27 samples, 2.16%)</title><rect x="12.5701%" y="661" width="2.1617%" height="15" fill="rgb(217,60,12)" fg:x="157" fg:w="27"/><text x="12.8201%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (26 samples, 2.08%)</title><rect x="12.6501%" y="645" width="2.0817%" height="15" fill="rgb(240,125,29)" fg:x="158" fg:w="26"/><text x="12.9001%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 2.08%)</title><rect x="12.6501%" y="629" width="2.0817%" height="15" fill="rgb(208,207,28)" fg:x="158" fg:w="26"/><text x="12.9001%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (26 samples, 2.08%)</title><rect x="12.6501%" y="613" width="2.0817%" height="15" fill="rgb(209,159,27)" fg:x="158" fg:w="26"/><text x="12.9001%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="13.9311%" y="597" width="0.8006%" height="15" fill="rgb(251,176,53)" fg:x="174" fg:w="10"/><text x="14.1811%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="13.9311%" y="581" width="0.8006%" height="15" fill="rgb(211,85,7)" fg:x="174" fg:w="10"/><text x="14.1811%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="13.9311%" y="565" width="0.8006%" height="15" fill="rgb(216,64,54)" fg:x="174" fg:w="10"/><text x="14.1811%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="14.2514%" y="549" width="0.4804%" height="15" fill="rgb(217,54,24)" fg:x="178" fg:w="6"/><text x="14.5014%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="14.3315%" y="533" width="0.4003%" height="15" fill="rgb(208,206,53)" fg:x="179" fg:w="5"/><text x="14.5815%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="14.4115%" y="517" width="0.3203%" height="15" fill="rgb(251,74,39)" fg:x="180" fg:w="4"/><text x="14.6615%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="14.4916%" y="501" width="0.2402%" height="15" fill="rgb(226,47,5)" fg:x="181" fg:w="3"/><text x="14.7416%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="14.5717%" y="485" width="0.1601%" height="15" fill="rgb(234,111,33)" fg:x="182" fg:w="2"/><text x="14.8217%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="14.5717%" y="469" width="0.1601%" height="15" fill="rgb(251,14,10)" fg:x="182" fg:w="2"/><text x="14.8217%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="14.6517%" y="453" width="0.0801%" height="15" fill="rgb(232,43,0)" fg:x="183" fg:w="1"/><text x="14.9017%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="14.7318%" y="677" width="0.0801%" height="15" fill="rgb(222,68,43)" fg:x="184" fg:w="1"/><text x="14.9818%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="14.8118%" y="677" width="0.1601%" height="15" fill="rgb(217,24,23)" fg:x="185" fg:w="2"/><text x="15.0618%" y="687.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.8118%" y="661" width="0.1601%" height="15" fill="rgb(229,209,14)" fg:x="185" fg:w="2"/><text x="15.0618%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.9720%" y="677" width="0.0801%" height="15" fill="rgb(250,149,48)" fg:x="187" fg:w="1"/><text x="15.2220%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (5 samples, 0.40%)</title><rect x="14.7318%" y="709" width="0.4003%" height="15" fill="rgb(210,120,37)" fg:x="184" fg:w="5"/><text x="14.9818%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (5 samples, 0.40%)</title><rect x="14.7318%" y="693" width="0.4003%" height="15" fill="rgb(210,21,8)" fg:x="184" fg:w="5"/><text x="14.9818%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0520%" y="677" width="0.0801%" height="15" fill="rgb(243,145,7)" fg:x="188" fg:w="1"/><text x="15.3020%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.0520%" y="661" width="0.0801%" height="15" fill="rgb(238,178,32)" fg:x="188" fg:w="1"/><text x="15.3020%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="15.0520%" y="645" width="0.0801%" height="15" fill="rgb(222,4,10)" fg:x="188" fg:w="1"/><text x="15.3020%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0520%" y="629" width="0.0801%" height="15" fill="rgb(239,7,37)" fg:x="188" fg:w="1"/><text x="15.3020%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.0520%" y="613" width="0.0801%" height="15" fill="rgb(215,31,37)" fg:x="188" fg:w="1"/><text x="15.3020%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.2122%" y="661" width="0.1601%" height="15" fill="rgb(224,83,33)" fg:x="190" fg:w="2"/><text x="15.4622%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.2122%" y="645" width="0.1601%" height="15" fill="rgb(239,55,3)" fg:x="190" fg:w="2"/><text x="15.4622%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.2122%" y="629" width="0.1601%" height="15" fill="rgb(247,92,11)" fg:x="190" fg:w="2"/><text x="15.4622%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.2122%" y="613" width="0.1601%" height="15" fill="rgb(239,200,7)" fg:x="190" fg:w="2"/><text x="15.4622%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.2122%" y="597" width="0.1601%" height="15" fill="rgb(227,115,8)" fg:x="190" fg:w="2"/><text x="15.4622%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="15.2122%" y="581" width="0.1601%" height="15" fill="rgb(215,189,27)" fg:x="190" fg:w="2"/><text x="15.4622%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="15.2122%" y="565" width="0.1601%" height="15" fill="rgb(251,216,39)" fg:x="190" fg:w="2"/><text x="15.4622%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="15.2122%" y="549" width="0.1601%" height="15" fill="rgb(207,29,47)" fg:x="190" fg:w="2"/><text x="15.4622%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="15.2122%" y="533" width="0.1601%" height="15" fill="rgb(210,71,34)" fg:x="190" fg:w="2"/><text x="15.4622%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="15.2122%" y="517" width="0.1601%" height="15" fill="rgb(253,217,51)" fg:x="190" fg:w="2"/><text x="15.4622%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="15.2122%" y="501" width="0.1601%" height="15" fill="rgb(222,117,46)" fg:x="190" fg:w="2"/><text x="15.4622%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="15.2122%" y="485" width="0.1601%" height="15" fill="rgb(226,132,6)" fg:x="190" fg:w="2"/><text x="15.4622%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="15.2122%" y="469" width="0.1601%" height="15" fill="rgb(254,145,51)" fg:x="190" fg:w="2"/><text x="15.4622%" y="479.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="15.2122%" y="453" width="0.1601%" height="15" fill="rgb(231,199,27)" fg:x="190" fg:w="2"/><text x="15.4622%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.2122%" y="437" width="0.1601%" height="15" fill="rgb(245,158,14)" fg:x="190" fg:w="2"/><text x="15.4622%" y="447.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="15.2122%" y="693" width="0.2402%" height="15" fill="rgb(240,113,14)" fg:x="190" fg:w="3"/><text x="15.4622%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="15.2122%" y="677" width="0.2402%" height="15" fill="rgb(210,20,13)" fg:x="190" fg:w="3"/><text x="15.4622%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.3723%" y="661" width="0.0801%" height="15" fill="rgb(241,144,13)" fg:x="192" fg:w="1"/><text x="15.6223%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3723%" y="645" width="0.0801%" height="15" fill="rgb(235,43,34)" fg:x="192" fg:w="1"/><text x="15.6223%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.3723%" y="629" width="0.0801%" height="15" fill="rgb(208,36,20)" fg:x="192" fg:w="1"/><text x="15.6223%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3723%" y="613" width="0.0801%" height="15" fill="rgb(239,204,10)" fg:x="192" fg:w="1"/><text x="15.6223%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.3723%" y="597" width="0.0801%" height="15" fill="rgb(217,84,43)" fg:x="192" fg:w="1"/><text x="15.6223%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3723%" y="581" width="0.0801%" height="15" fill="rgb(241,170,50)" fg:x="192" fg:w="1"/><text x="15.6223%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.3723%" y="565" width="0.0801%" height="15" fill="rgb(226,205,29)" fg:x="192" fg:w="1"/><text x="15.6223%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="15.4524%" y="661" width="0.0801%" height="15" fill="rgb(233,113,1)" fg:x="193" fg:w="1"/><text x="15.7024%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.5324%" y="629" width="0.0801%" height="15" fill="rgb(253,98,13)" fg:x="194" fg:w="1"/><text x="15.7824%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="15.4524%" y="677" width="0.2402%" height="15" fill="rgb(211,115,12)" fg:x="193" fg:w="3"/><text x="15.7024%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.5324%" y="661" width="0.1601%" height="15" fill="rgb(208,12,16)" fg:x="194" fg:w="2"/><text x="15.7824%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.5324%" y="645" width="0.1601%" height="15" fill="rgb(237,193,54)" fg:x="194" fg:w="2"/><text x="15.7824%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="15.6125%" y="629" width="0.0801%" height="15" fill="rgb(243,22,42)" fg:x="195" fg:w="1"/><text x="15.8625%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.6125%" y="613" width="0.0801%" height="15" fill="rgb(233,151,36)" fg:x="195" fg:w="1"/><text x="15.8625%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="15.6125%" y="597" width="0.0801%" height="15" fill="rgb(237,57,45)" fg:x="195" fg:w="1"/><text x="15.8625%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.6926%" y="629" width="0.0801%" height="15" fill="rgb(221,88,17)" fg:x="196" fg:w="1"/><text x="15.9426%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="15.6926%" y="661" width="0.1601%" height="15" fill="rgb(230,79,15)" fg:x="196" fg:w="2"/><text x="15.9426%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="15.6926%" y="645" width="0.1601%" height="15" fill="rgb(213,57,13)" fg:x="196" fg:w="2"/><text x="15.9426%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="15.7726%" y="629" width="0.0801%" height="15" fill="rgb(222,116,39)" fg:x="197" fg:w="1"/><text x="16.0226%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="15.7726%" y="613" width="0.0801%" height="15" fill="rgb(245,107,2)" fg:x="197" fg:w="1"/><text x="16.0226%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7726%" y="597" width="0.0801%" height="15" fill="rgb(238,1,10)" fg:x="197" fg:w="1"/><text x="16.0226%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7726%" y="581" width="0.0801%" height="15" fill="rgb(249,4,48)" fg:x="197" fg:w="1"/><text x="16.0226%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.7726%" y="565" width="0.0801%" height="15" fill="rgb(223,151,18)" fg:x="197" fg:w="1"/><text x="16.0226%" y="575.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8527%" y="629" width="0.0801%" height="15" fill="rgb(227,65,43)" fg:x="198" fg:w="1"/><text x="16.1027%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.8527%" y="613" width="0.0801%" height="15" fill="rgb(218,40,45)" fg:x="198" fg:w="1"/><text x="16.1027%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8527%" y="597" width="0.0801%" height="15" fill="rgb(252,121,31)" fg:x="198" fg:w="1"/><text x="16.1027%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8527%" y="581" width="0.0801%" height="15" fill="rgb(219,158,43)" fg:x="198" fg:w="1"/><text x="16.1027%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.8527%" y="565" width="0.0801%" height="15" fill="rgb(231,162,42)" fg:x="198" fg:w="1"/><text x="16.1027%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.9327%" y="517" width="0.0801%" height="15" fill="rgb(217,179,25)" fg:x="199" fg:w="1"/><text x="16.1827%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.9327%" y="501" width="0.0801%" height="15" fill="rgb(206,212,31)" fg:x="199" fg:w="1"/><text x="16.1827%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9327%" y="485" width="0.0801%" height="15" fill="rgb(235,144,12)" fg:x="199" fg:w="1"/><text x="16.1827%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="15.4524%" y="693" width="0.6405%" height="15" fill="rgb(213,51,10)" fg:x="193" fg:w="8"/><text x="15.7024%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="15.6926%" y="677" width="0.4003%" height="15" fill="rgb(231,145,14)" fg:x="196" fg:w="5"/><text x="15.9426%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="15.8527%" y="661" width="0.2402%" height="15" fill="rgb(235,15,28)" fg:x="198" fg:w="3"/><text x="16.1027%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="15.8527%" y="645" width="0.2402%" height="15" fill="rgb(237,206,10)" fg:x="198" fg:w="3"/><text x="16.1027%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="15.9327%" y="629" width="0.1601%" height="15" fill="rgb(236,227,27)" fg:x="199" fg:w="2"/><text x="16.1827%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="15.9327%" y="613" width="0.1601%" height="15" fill="rgb(246,83,35)" fg:x="199" fg:w="2"/><text x="16.1827%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.9327%" y="597" width="0.1601%" height="15" fill="rgb(220,136,24)" fg:x="199" fg:w="2"/><text x="16.1827%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9327%" y="581" width="0.1601%" height="15" fill="rgb(217,3,25)" fg:x="199" fg:w="2"/><text x="16.1827%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.9327%" y="565" width="0.1601%" height="15" fill="rgb(239,24,14)" fg:x="199" fg:w="2"/><text x="16.1827%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9327%" y="549" width="0.1601%" height="15" fill="rgb(244,16,53)" fg:x="199" fg:w="2"/><text x="16.1827%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.9327%" y="533" width="0.1601%" height="15" fill="rgb(208,175,44)" fg:x="199" fg:w="2"/><text x="16.1827%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0128%" y="517" width="0.0801%" height="15" fill="rgb(252,18,48)" fg:x="200" fg:w="1"/><text x="16.2628%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0128%" y="501" width="0.0801%" height="15" fill="rgb(234,199,32)" fg:x="200" fg:w="1"/><text x="16.2628%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.12%)</title><rect x="15.1321%" y="709" width="1.1209%" height="15" fill="rgb(225,77,54)" fg:x="189" fg:w="14"/><text x="15.3821%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="16.0929%" y="693" width="0.1601%" height="15" fill="rgb(225,42,25)" fg:x="201" fg:w="2"/><text x="16.3429%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="16.0929%" y="677" width="0.1601%" height="15" fill="rgb(242,227,46)" fg:x="201" fg:w="2"/><text x="16.3429%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="16.0929%" y="661" width="0.1601%" height="15" fill="rgb(246,197,35)" fg:x="201" fg:w="2"/><text x="16.3429%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="16.0929%" y="645" width="0.1601%" height="15" fill="rgb(215,159,26)" fg:x="201" fg:w="2"/><text x="16.3429%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="16.0929%" y="629" width="0.1601%" height="15" fill="rgb(212,194,50)" fg:x="201" fg:w="2"/><text x="16.3429%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="16.0929%" y="613" width="0.1601%" height="15" fill="rgb(246,132,1)" fg:x="201" fg:w="2"/><text x="16.3429%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="16.0929%" y="597" width="0.1601%" height="15" fill="rgb(217,71,7)" fg:x="201" fg:w="2"/><text x="16.3429%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="16.0929%" y="581" width="0.1601%" height="15" fill="rgb(252,59,32)" fg:x="201" fg:w="2"/><text x="16.3429%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="16.0929%" y="565" width="0.1601%" height="15" fill="rgb(253,204,25)" fg:x="201" fg:w="2"/><text x="16.3429%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="16.0929%" y="549" width="0.1601%" height="15" fill="rgb(232,21,16)" fg:x="201" fg:w="2"/><text x="16.3429%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="16.0929%" y="533" width="0.1601%" height="15" fill="rgb(248,90,29)" fg:x="201" fg:w="2"/><text x="16.3429%" y="543.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="16.0929%" y="517" width="0.1601%" height="15" fill="rgb(249,223,7)" fg:x="201" fg:w="2"/><text x="16.3429%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.0929%" y="501" width="0.1601%" height="15" fill="rgb(231,119,42)" fg:x="201" fg:w="2"/><text x="16.3429%" y="511.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.2530%" y="677" width="0.0801%" height="15" fill="rgb(215,41,35)" fg:x="203" fg:w="1"/><text x="16.5030%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.3331%" y="645" width="0.1601%" height="15" fill="rgb(220,44,45)" fg:x="204" fg:w="2"/><text x="16.5831%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.3331%" y="629" width="0.1601%" height="15" fill="rgb(253,197,36)" fg:x="204" fg:w="2"/><text x="16.5831%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.3331%" y="613" width="0.1601%" height="15" fill="rgb(245,225,54)" fg:x="204" fg:w="2"/><text x="16.5831%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.3331%" y="597" width="0.1601%" height="15" fill="rgb(239,94,37)" fg:x="204" fg:w="2"/><text x="16.5831%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4131%" y="581" width="0.0801%" height="15" fill="rgb(242,217,10)" fg:x="205" fg:w="1"/><text x="16.6631%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="16.2530%" y="709" width="0.3203%" height="15" fill="rgb(250,193,7)" fg:x="203" fg:w="4"/><text x="16.5030%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="16.2530%" y="693" width="0.3203%" height="15" fill="rgb(230,104,19)" fg:x="203" fg:w="4"/><text x="16.5030%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="16.3331%" y="677" width="0.2402%" height="15" fill="rgb(230,181,4)" fg:x="204" fg:w="3"/><text x="16.5831%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="16.3331%" y="661" width="0.2402%" height="15" fill="rgb(216,219,49)" fg:x="204" fg:w="3"/><text x="16.5831%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="16.4932%" y="645" width="0.0801%" height="15" fill="rgb(254,144,0)" fg:x="206" fg:w="1"/><text x="16.7432%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.4932%" y="629" width="0.0801%" height="15" fill="rgb(205,209,38)" fg:x="206" fg:w="1"/><text x="16.7432%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.4932%" y="613" width="0.0801%" height="15" fill="rgb(240,21,42)" fg:x="206" fg:w="1"/><text x="16.7432%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.4932%" y="597" width="0.0801%" height="15" fill="rgb(241,132,3)" fg:x="206" fg:w="1"/><text x="16.7432%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.4932%" y="581" width="0.0801%" height="15" fill="rgb(225,14,2)" fg:x="206" fg:w="1"/><text x="16.7432%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.4932%" y="565" width="0.0801%" height="15" fill="rgb(210,141,35)" fg:x="206" fg:w="1"/><text x="16.7432%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.4932%" y="549" width="0.0801%" height="15" fill="rgb(251,14,44)" fg:x="206" fg:w="1"/><text x="16.7432%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.4932%" y="533" width="0.0801%" height="15" fill="rgb(247,48,18)" fg:x="206" fg:w="1"/><text x="16.7432%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.4932%" y="517" width="0.0801%" height="15" fill="rgb(225,0,40)" fg:x="206" fg:w="1"/><text x="16.7432%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.4932%" y="501" width="0.0801%" height="15" fill="rgb(221,31,33)" fg:x="206" fg:w="1"/><text x="16.7432%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.4932%" y="485" width="0.0801%" height="15" fill="rgb(237,42,40)" fg:x="206" fg:w="1"/><text x="16.7432%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.4932%" y="469" width="0.0801%" height="15" fill="rgb(233,51,29)" fg:x="206" fg:w="1"/><text x="16.7432%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.4932%" y="453" width="0.0801%" height="15" fill="rgb(226,58,20)" fg:x="206" fg:w="1"/><text x="16.7432%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.4932%" y="437" width="0.0801%" height="15" fill="rgb(208,98,7)" fg:x="206" fg:w="1"/><text x="16.7432%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.4932%" y="421" width="0.0801%" height="15" fill="rgb(228,143,44)" fg:x="206" fg:w="1"/><text x="16.7432%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.4932%" y="405" width="0.0801%" height="15" fill="rgb(246,55,38)" fg:x="206" fg:w="1"/><text x="16.7432%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4932%" y="389" width="0.0801%" height="15" fill="rgb(247,87,16)" fg:x="206" fg:w="1"/><text x="16.7432%" y="399.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.5733%" y="693" width="0.0801%" height="15" fill="rgb(234,129,42)" fg:x="207" fg:w="1"/><text x="16.8233%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.5733%" y="677" width="0.0801%" height="15" fill="rgb(220,82,16)" fg:x="207" fg:w="1"/><text x="16.8233%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.5733%" y="661" width="0.0801%" height="15" fill="rgb(211,88,4)" fg:x="207" fg:w="1"/><text x="16.8233%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="16.5733%" y="645" width="0.0801%" height="15" fill="rgb(248,151,21)" fg:x="207" fg:w="1"/><text x="16.8233%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="16.5733%" y="629" width="0.0801%" height="15" fill="rgb(238,163,6)" fg:x="207" fg:w="1"/><text x="16.8233%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="16.5733%" y="613" width="0.0801%" height="15" fill="rgb(209,183,11)" fg:x="207" fg:w="1"/><text x="16.8233%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.5733%" y="597" width="0.0801%" height="15" fill="rgb(219,37,20)" fg:x="207" fg:w="1"/><text x="16.8233%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.5733%" y="581" width="0.0801%" height="15" fill="rgb(210,158,4)" fg:x="207" fg:w="1"/><text x="16.8233%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="16.5733%" y="565" width="0.0801%" height="15" fill="rgb(221,167,53)" fg:x="207" fg:w="1"/><text x="16.8233%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="16.6533%" y="693" width="0.0801%" height="15" fill="rgb(237,151,45)" fg:x="208" fg:w="1"/><text x="16.9033%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="16.6533%" y="677" width="0.0801%" height="15" fill="rgb(231,39,3)" fg:x="208" fg:w="1"/><text x="16.9033%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6533%" y="661" width="0.0801%" height="15" fill="rgb(212,167,28)" fg:x="208" fg:w="1"/><text x="16.9033%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="16.5733%" y="709" width="0.2402%" height="15" fill="rgb(232,178,8)" fg:x="207" fg:w="3"/><text x="16.8233%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.7334%" y="693" width="0.0801%" height="15" fill="rgb(225,151,20)" fg:x="209" fg:w="1"/><text x="16.9834%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7334%" y="677" width="0.0801%" height="15" fill="rgb(238,3,37)" fg:x="209" fg:w="1"/><text x="16.9834%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7334%" y="661" width="0.0801%" height="15" fill="rgb(251,147,42)" fg:x="209" fg:w="1"/><text x="16.9834%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.8135%" y="693" width="0.0801%" height="15" fill="rgb(208,173,10)" fg:x="210" fg:w="1"/><text x="17.0635%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8135%" y="677" width="0.0801%" height="15" fill="rgb(246,225,4)" fg:x="210" fg:w="1"/><text x="17.0635%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.8135%" y="661" width="0.0801%" height="15" fill="rgb(248,102,6)" fg:x="210" fg:w="1"/><text x="17.0635%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="16.8135%" y="645" width="0.0801%" height="15" fill="rgb(232,6,21)" fg:x="210" fg:w="1"/><text x="17.0635%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8135%" y="629" width="0.0801%" height="15" fill="rgb(221,179,22)" fg:x="210" fg:w="1"/><text x="17.0635%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.8135%" y="613" width="0.0801%" height="15" fill="rgb(252,50,20)" fg:x="210" fg:w="1"/><text x="17.0635%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.8135%" y="597" width="0.0801%" height="15" fill="rgb(222,56,38)" fg:x="210" fg:w="1"/><text x="17.0635%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8935%" y="661" width="0.0801%" height="15" fill="rgb(206,193,29)" fg:x="211" fg:w="1"/><text x="17.1435%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8935%" y="645" width="0.0801%" height="15" fill="rgb(239,192,45)" fg:x="211" fg:w="1"/><text x="17.1435%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.8935%" y="629" width="0.0801%" height="15" fill="rgb(254,18,36)" fg:x="211" fg:w="1"/><text x="17.1435%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8935%" y="613" width="0.0801%" height="15" fill="rgb(221,127,11)" fg:x="211" fg:w="1"/><text x="17.1435%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8935%" y="597" width="0.0801%" height="15" fill="rgb(234,146,35)" fg:x="211" fg:w="1"/><text x="17.1435%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.8935%" y="581" width="0.0801%" height="15" fill="rgb(254,201,37)" fg:x="211" fg:w="1"/><text x="17.1435%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.8935%" y="565" width="0.0801%" height="15" fill="rgb(211,202,23)" fg:x="211" fg:w="1"/><text x="17.1435%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.8935%" y="549" width="0.0801%" height="15" fill="rgb(237,91,2)" fg:x="211" fg:w="1"/><text x="17.1435%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8935%" y="533" width="0.0801%" height="15" fill="rgb(226,228,36)" fg:x="211" fg:w="1"/><text x="17.1435%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8935%" y="517" width="0.0801%" height="15" fill="rgb(213,63,50)" fg:x="211" fg:w="1"/><text x="17.1435%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.8935%" y="501" width="0.0801%" height="15" fill="rgb(235,194,19)" fg:x="211" fg:w="1"/><text x="17.1435%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.8935%" y="485" width="0.0801%" height="15" fill="rgb(207,204,18)" fg:x="211" fg:w="1"/><text x="17.1435%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.8935%" y="469" width="0.0801%" height="15" fill="rgb(248,8,7)" fg:x="211" fg:w="1"/><text x="17.1435%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.8935%" y="453" width="0.0801%" height="15" fill="rgb(223,145,47)" fg:x="211" fg:w="1"/><text x="17.1435%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8935%" y="437" width="0.0801%" height="15" fill="rgb(228,84,11)" fg:x="211" fg:w="1"/><text x="17.1435%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="16.8935%" y="677" width="0.1601%" height="15" fill="rgb(218,76,45)" fg:x="211" fg:w="2"/><text x="17.1435%" y="687.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="16.9736%" y="661" width="0.0801%" height="15" fill="rgb(223,80,15)" fg:x="212" fg:w="1"/><text x="17.2236%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.0536%" y="613" width="0.0801%" height="15" fill="rgb(219,218,33)" fg:x="213" fg:w="1"/><text x="17.3036%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.0536%" y="597" width="0.0801%" height="15" fill="rgb(208,51,11)" fg:x="213" fg:w="1"/><text x="17.3036%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.0536%" y="581" width="0.0801%" height="15" fill="rgb(229,165,39)" fg:x="213" fg:w="1"/><text x="17.3036%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.0536%" y="565" width="0.0801%" height="15" fill="rgb(241,100,24)" fg:x="213" fg:w="1"/><text x="17.3036%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.0536%" y="549" width="0.0801%" height="15" fill="rgb(228,14,23)" fg:x="213" fg:w="1"/><text x="17.3036%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.0536%" y="533" width="0.0801%" height="15" fill="rgb(247,116,52)" fg:x="213" fg:w="1"/><text x="17.3036%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.0536%" y="517" width="0.0801%" height="15" fill="rgb(216,149,33)" fg:x="213" fg:w="1"/><text x="17.3036%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.0536%" y="501" width="0.0801%" height="15" fill="rgb(238,142,29)" fg:x="213" fg:w="1"/><text x="17.3036%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.0536%" y="485" width="0.0801%" height="15" fill="rgb(224,83,40)" fg:x="213" fg:w="1"/><text x="17.3036%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.0536%" y="469" width="0.0801%" height="15" fill="rgb(234,165,11)" fg:x="213" fg:w="1"/><text x="17.3036%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.0536%" y="453" width="0.0801%" height="15" fill="rgb(215,96,23)" fg:x="213" fg:w="1"/><text x="17.3036%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.0536%" y="437" width="0.0801%" height="15" fill="rgb(233,179,26)" fg:x="213" fg:w="1"/><text x="17.3036%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.0536%" y="421" width="0.0801%" height="15" fill="rgb(225,129,33)" fg:x="213" fg:w="1"/><text x="17.3036%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.0536%" y="405" width="0.0801%" height="15" fill="rgb(237,49,13)" fg:x="213" fg:w="1"/><text x="17.3036%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.0536%" y="389" width="0.0801%" height="15" fill="rgb(211,3,31)" fg:x="213" fg:w="1"/><text x="17.3036%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="17.0536%" y="629" width="0.1601%" height="15" fill="rgb(216,152,19)" fg:x="213" fg:w="2"/><text x="17.3036%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.1337%" y="613" width="0.0801%" height="15" fill="rgb(251,121,35)" fg:x="214" fg:w="1"/><text x="17.3837%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.40%)</title><rect x="16.8935%" y="693" width="0.4003%" height="15" fill="rgb(210,217,47)" fg:x="211" fg:w="5"/><text x="17.1435%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="17.0536%" y="677" width="0.2402%" height="15" fill="rgb(244,116,22)" fg:x="213" fg:w="3"/><text x="17.3036%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="17.0536%" y="661" width="0.2402%" height="15" fill="rgb(228,17,21)" fg:x="213" fg:w="3"/><text x="17.3036%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="17.0536%" y="645" width="0.2402%" height="15" fill="rgb(240,149,34)" fg:x="213" fg:w="3"/><text x="17.3036%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.2138%" y="629" width="0.0801%" height="15" fill="rgb(208,125,47)" fg:x="215" fg:w="1"/><text x="17.4638%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (69 samples, 5.52%)</title><rect x="11.8495%" y="725" width="5.5244%" height="15" fill="rgb(249,186,39)" fg:x="148" fg:w="69"/><text x="12.0995%" y="735.50">plugins..</text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="16.8135%" y="709" width="0.5604%" height="15" fill="rgb(240,220,33)" fg:x="210" fg:w="7"/><text x="17.0635%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="17.2938%" y="693" width="0.0801%" height="15" fill="rgb(243,110,23)" fg:x="216" fg:w="1"/><text x="17.5438%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.2938%" y="677" width="0.0801%" height="15" fill="rgb(219,163,46)" fg:x="216" fg:w="1"/><text x="17.5438%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2938%" y="661" width="0.0801%" height="15" fill="rgb(216,126,30)" fg:x="216" fg:w="1"/><text x="17.5438%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.2938%" y="645" width="0.0801%" height="15" fill="rgb(208,139,11)" fg:x="216" fg:w="1"/><text x="17.5438%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2938%" y="629" width="0.0801%" height="15" fill="rgb(213,118,36)" fg:x="216" fg:w="1"/><text x="17.5438%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.2938%" y="613" width="0.0801%" height="15" fill="rgb(226,43,17)" fg:x="216" fg:w="1"/><text x="17.5438%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2938%" y="597" width="0.0801%" height="15" fill="rgb(254,217,4)" fg:x="216" fg:w="1"/><text x="17.5438%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="17.3739%" y="725" width="0.0801%" height="15" fill="rgb(210,134,47)" fg:x="217" fg:w="1"/><text x="17.6239%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="17.3739%" y="709" width="0.0801%" height="15" fill="rgb(237,24,49)" fg:x="217" fg:w="1"/><text x="17.6239%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="17.3739%" y="693" width="0.0801%" height="15" fill="rgb(251,39,46)" fg:x="217" fg:w="1"/><text x="17.6239%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="17.3739%" y="677" width="0.0801%" height="15" fill="rgb(251,220,3)" fg:x="217" fg:w="1"/><text x="17.6239%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="17.3739%" y="661" width="0.0801%" height="15" fill="rgb(228,105,12)" fg:x="217" fg:w="1"/><text x="17.6239%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.3739%" y="645" width="0.0801%" height="15" fill="rgb(215,196,1)" fg:x="217" fg:w="1"/><text x="17.6239%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3739%" y="629" width="0.0801%" height="15" fill="rgb(214,33,39)" fg:x="217" fg:w="1"/><text x="17.6239%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="17.4540%" y="693" width="0.0801%" height="15" fill="rgb(220,19,52)" fg:x="218" fg:w="1"/><text x="17.7040%" y="703.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="17.4540%" y="677" width="0.0801%" height="15" fill="rgb(221,78,38)" fg:x="218" fg:w="1"/><text x="17.7040%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4540%" y="661" width="0.0801%" height="15" fill="rgb(253,30,16)" fg:x="218" fg:w="1"/><text x="17.7040%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.4540%" y="645" width="0.0801%" height="15" fill="rgb(242,65,0)" fg:x="218" fg:w="1"/><text x="17.7040%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.4540%" y="629" width="0.0801%" height="15" fill="rgb(235,201,12)" fg:x="218" fg:w="1"/><text x="17.7040%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="17.5340%" y="677" width="0.0801%" height="15" fill="rgb(233,161,9)" fg:x="219" fg:w="1"/><text x="17.7840%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.5340%" y="661" width="0.0801%" height="15" fill="rgb(241,207,41)" fg:x="219" fg:w="1"/><text x="17.7840%" y="671.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="17.5340%" y="693" width="0.1601%" height="15" fill="rgb(212,69,46)" fg:x="219" fg:w="2"/><text x="17.7840%" y="703.50"></text></g><g><title>kernel::model::builder::EntityBuilder::with_key (1 samples, 0.08%)</title><rect x="17.6141%" y="677" width="0.0801%" height="15" fill="rgb(239,69,45)" fg:x="220" fg:w="1"/><text x="17.8641%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.6942%" y="677" width="0.0801%" height="15" fill="rgb(242,117,48)" fg:x="221" fg:w="1"/><text x="17.9442%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.6942%" y="661" width="0.0801%" height="15" fill="rgb(228,41,36)" fg:x="221" fg:w="1"/><text x="17.9442%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6942%" y="645" width="0.0801%" height="15" fill="rgb(212,3,32)" fg:x="221" fg:w="1"/><text x="17.9442%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="17.7742%" y="629" width="0.0801%" height="15" fill="rgb(233,41,49)" fg:x="222" fg:w="1"/><text x="18.0242%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="17.7742%" y="645" width="0.1601%" height="15" fill="rgb(252,170,49)" fg:x="222" fg:w="2"/><text x="18.0242%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="17.8543%" y="629" width="0.0801%" height="15" fill="rgb(229,53,26)" fg:x="223" fg:w="1"/><text x="18.1043%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (4 samples, 0.32%)</title><rect x="17.7742%" y="661" width="0.3203%" height="15" fill="rgb(217,157,12)" fg:x="222" fg:w="4"/><text x="18.0242%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="17.9343%" y="645" width="0.1601%" height="15" fill="rgb(227,17,9)" fg:x="224" fg:w="2"/><text x="18.1843%" y="655.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="17.9343%" y="629" width="0.1601%" height="15" fill="rgb(218,84,12)" fg:x="224" fg:w="2"/><text x="18.1843%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.0144%" y="613" width="0.0801%" height="15" fill="rgb(212,79,24)" fg:x="225" fg:w="1"/><text x="18.2644%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.0144%" y="597" width="0.0801%" height="15" fill="rgb(217,222,37)" fg:x="225" fg:w="1"/><text x="18.2644%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="18.0945%" y="645" width="0.0801%" height="15" fill="rgb(246,208,8)" fg:x="226" fg:w="1"/><text x="18.3445%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="18.1745%" y="629" width="0.0801%" height="15" fill="rgb(244,133,10)" fg:x="227" fg:w="1"/><text x="18.4245%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (12 samples, 0.96%)</title><rect x="17.4540%" y="725" width="0.9608%" height="15" fill="rgb(209,219,41)" fg:x="218" fg:w="12"/><text x="17.7040%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (12 samples, 0.96%)</title><rect x="17.4540%" y="709" width="0.9608%" height="15" fill="rgb(253,175,45)" fg:x="218" fg:w="12"/><text x="17.7040%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.72%)</title><rect x="17.6942%" y="693" width="0.7206%" height="15" fill="rgb(235,100,37)" fg:x="221" fg:w="9"/><text x="17.9442%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="17.7742%" y="677" width="0.6405%" height="15" fill="rgb(225,87,19)" fg:x="222" fg:w="8"/><text x="18.0242%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="18.0945%" y="661" width="0.3203%" height="15" fill="rgb(217,152,17)" fg:x="226" fg:w="4"/><text x="18.3445%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="18.1745%" y="645" width="0.2402%" height="15" fill="rgb(235,72,13)" fg:x="227" fg:w="3"/><text x="18.4245%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.2546%" y="629" width="0.1601%" height="15" fill="rgb(233,140,18)" fg:x="228" fg:w="2"/><text x="18.5046%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.3347%" y="613" width="0.0801%" height="15" fill="rgb(207,212,28)" fg:x="229" fg:w="1"/><text x="18.5847%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3347%" y="597" width="0.0801%" height="15" fill="rgb(220,130,25)" fg:x="229" fg:w="1"/><text x="18.5847%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="18.4147%" y="693" width="0.1601%" height="15" fill="rgb(205,55,34)" fg:x="230" fg:w="2"/><text x="18.6647%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4948%" y="677" width="0.0801%" height="15" fill="rgb(237,54,35)" fg:x="231" fg:w="1"/><text x="18.7448%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="18.5749%" y="693" width="0.0801%" height="15" fill="rgb(208,67,23)" fg:x="232" fg:w="1"/><text x="18.8249%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5749%" y="677" width="0.0801%" height="15" fill="rgb(206,207,50)" fg:x="232" fg:w="1"/><text x="18.8249%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (5 samples, 0.40%)</title><rect x="18.4147%" y="709" width="0.4003%" height="15" fill="rgb(213,211,42)" fg:x="230" fg:w="5"/><text x="18.6647%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="18.6549%" y="693" width="0.1601%" height="15" fill="rgb(252,197,50)" fg:x="233" fg:w="2"/><text x="18.9049%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.6549%" y="677" width="0.1601%" height="15" fill="rgb(251,211,41)" fg:x="233" fg:w="2"/><text x="18.9049%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="18.6549%" y="661" width="0.1601%" height="15" fill="rgb(229,211,5)" fg:x="233" fg:w="2"/><text x="18.9049%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="18.7350%" y="645" width="0.0801%" height="15" fill="rgb(239,36,31)" fg:x="234" fg:w="1"/><text x="18.9850%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="18.7350%" y="629" width="0.0801%" height="15" fill="rgb(248,67,31)" fg:x="234" fg:w="1"/><text x="18.9850%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7350%" y="613" width="0.0801%" height="15" fill="rgb(249,55,44)" fg:x="234" fg:w="1"/><text x="18.9850%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7350%" y="597" width="0.0801%" height="15" fill="rgb(216,82,12)" fg:x="234" fg:w="1"/><text x="18.9850%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.7350%" y="581" width="0.0801%" height="15" fill="rgb(242,174,1)" fg:x="234" fg:w="1"/><text x="18.9850%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.8151%" y="709" width="0.0801%" height="15" fill="rgb(208,120,29)" fg:x="235" fg:w="1"/><text x="19.0651%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.8151%" y="693" width="0.0801%" height="15" fill="rgb(221,105,43)" fg:x="235" fg:w="1"/><text x="19.0651%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.8151%" y="677" width="0.0801%" height="15" fill="rgb(234,124,22)" fg:x="235" fg:w="1"/><text x="19.0651%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="18.9752%" y="677" width="0.0801%" height="15" fill="rgb(212,23,30)" fg:x="237" fg:w="1"/><text x="19.2252%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9752%" y="661" width="0.0801%" height="15" fill="rgb(219,122,53)" fg:x="237" fg:w="1"/><text x="19.2252%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.9752%" y="645" width="0.0801%" height="15" fill="rgb(248,84,24)" fg:x="237" fg:w="1"/><text x="19.2252%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="18.9752%" y="629" width="0.0801%" height="15" fill="rgb(245,115,18)" fg:x="237" fg:w="1"/><text x="19.2252%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0552%" y="677" width="0.0801%" height="15" fill="rgb(227,176,51)" fg:x="238" fg:w="1"/><text x="19.3052%" y="687.50"></text></g><g><title>plugins_core::build::Build::new_world (4 samples, 0.32%)</title><rect x="18.8951%" y="709" width="0.3203%" height="15" fill="rgb(229,63,42)" fg:x="236" fg:w="4"/><text x="19.1451%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (4 samples, 0.32%)</title><rect x="18.8951%" y="693" width="0.3203%" height="15" fill="rgb(247,202,24)" fg:x="236" fg:w="4"/><text x="19.1451%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="19.1353%" y="677" width="0.0801%" height="15" fill="rgb(244,173,20)" fg:x="239" fg:w="1"/><text x="19.3853%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.1353%" y="661" width="0.0801%" height="15" fill="rgb(242,81,47)" fg:x="239" fg:w="1"/><text x="19.3853%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.1353%" y="645" width="0.0801%" height="15" fill="rgb(231,185,54)" fg:x="239" fg:w="1"/><text x="19.3853%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.1353%" y="629" width="0.0801%" height="15" fill="rgb(243,55,32)" fg:x="239" fg:w="1"/><text x="19.3853%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.2154%" y="693" width="0.0801%" height="15" fill="rgb(208,167,19)" fg:x="240" fg:w="1"/><text x="19.4654%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.2154%" y="677" width="0.0801%" height="15" fill="rgb(231,72,35)" fg:x="240" fg:w="1"/><text x="19.4654%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2154%" y="661" width="0.0801%" height="15" fill="rgb(250,173,51)" fg:x="240" fg:w="1"/><text x="19.4654%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2154%" y="645" width="0.0801%" height="15" fill="rgb(209,5,22)" fg:x="240" fg:w="1"/><text x="19.4654%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2154%" y="629" width="0.0801%" height="15" fill="rgb(250,174,19)" fg:x="240" fg:w="1"/><text x="19.4654%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2154%" y="613" width="0.0801%" height="15" fill="rgb(217,3,49)" fg:x="240" fg:w="1"/><text x="19.4654%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2154%" y="597" width="0.0801%" height="15" fill="rgb(218,225,5)" fg:x="240" fg:w="1"/><text x="19.4654%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.2154%" y="581" width="0.0801%" height="15" fill="rgb(236,89,11)" fg:x="240" fg:w="1"/><text x="19.4654%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.2154%" y="565" width="0.0801%" height="15" fill="rgb(206,33,28)" fg:x="240" fg:w="1"/><text x="19.4654%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.2154%" y="549" width="0.0801%" height="15" fill="rgb(241,56,42)" fg:x="240" fg:w="1"/><text x="19.4654%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.2154%" y="533" width="0.0801%" height="15" fill="rgb(222,44,11)" fg:x="240" fg:w="1"/><text x="19.4654%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.2154%" y="517" width="0.0801%" height="15" fill="rgb(234,111,20)" fg:x="240" fg:w="1"/><text x="19.4654%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.2154%" y="501" width="0.0801%" height="15" fill="rgb(237,77,6)" fg:x="240" fg:w="1"/><text x="19.4654%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.2154%" y="485" width="0.0801%" height="15" fill="rgb(235,111,23)" fg:x="240" fg:w="1"/><text x="19.4654%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.2154%" y="469" width="0.0801%" height="15" fill="rgb(251,135,29)" fg:x="240" fg:w="1"/><text x="19.4654%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.2154%" y="453" width="0.0801%" height="15" fill="rgb(217,57,1)" fg:x="240" fg:w="1"/><text x="19.4654%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="19.2154%" y="437" width="0.0801%" height="15" fill="rgb(249,119,31)" fg:x="240" fg:w="1"/><text x="19.4654%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="19.2154%" y="421" width="0.0801%" height="15" fill="rgb(233,164,33)" fg:x="240" fg:w="1"/><text x="19.4654%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="19.3755%" y="613" width="0.1601%" height="15" fill="rgb(250,217,43)" fg:x="242" fg:w="2"/><text x="19.6255%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4556%" y="597" width="0.0801%" height="15" fill="rgb(232,154,50)" fg:x="243" fg:w="1"/><text x="19.7056%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.4556%" y="581" width="0.0801%" height="15" fill="rgb(227,190,8)" fg:x="243" fg:w="1"/><text x="19.7056%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4556%" y="565" width="0.0801%" height="15" fill="rgb(209,217,32)" fg:x="243" fg:w="1"/><text x="19.7056%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.4556%" y="549" width="0.0801%" height="15" fill="rgb(243,203,50)" fg:x="243" fg:w="1"/><text x="19.7056%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.4556%" y="533" width="0.0801%" height="15" fill="rgb(232,152,27)" fg:x="243" fg:w="1"/><text x="19.7056%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.4556%" y="517" width="0.0801%" height="15" fill="rgb(240,34,29)" fg:x="243" fg:w="1"/><text x="19.7056%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.4556%" y="501" width="0.0801%" height="15" fill="rgb(215,185,52)" fg:x="243" fg:w="1"/><text x="19.7056%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.4556%" y="485" width="0.0801%" height="15" fill="rgb(240,89,49)" fg:x="243" fg:w="1"/><text x="19.7056%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.4556%" y="469" width="0.0801%" height="15" fill="rgb(225,12,52)" fg:x="243" fg:w="1"/><text x="19.7056%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.4556%" y="453" width="0.0801%" height="15" fill="rgb(239,128,45)" fg:x="243" fg:w="1"/><text x="19.7056%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.4556%" y="437" width="0.0801%" height="15" fill="rgb(211,78,47)" fg:x="243" fg:w="1"/><text x="19.7056%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.4556%" y="421" width="0.0801%" height="15" fill="rgb(232,31,21)" fg:x="243" fg:w="1"/><text x="19.7056%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.4556%" y="405" width="0.0801%" height="15" fill="rgb(222,168,14)" fg:x="243" fg:w="1"/><text x="19.7056%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4556%" y="389" width="0.0801%" height="15" fill="rgb(209,128,24)" fg:x="243" fg:w="1"/><text x="19.7056%" y="399.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="19.3755%" y="661" width="0.2402%" height="15" fill="rgb(249,35,13)" fg:x="242" fg:w="3"/><text x="19.6255%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="19.3755%" y="645" width="0.2402%" height="15" fill="rgb(218,7,2)" fg:x="242" fg:w="3"/><text x="19.6255%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="19.3755%" y="629" width="0.2402%" height="15" fill="rgb(238,107,27)" fg:x="242" fg:w="3"/><text x="19.6255%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.5356%" y="613" width="0.0801%" height="15" fill="rgb(217,88,38)" fg:x="244" fg:w="1"/><text x="19.7856%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5356%" y="597" width="0.0801%" height="15" fill="rgb(230,207,0)" fg:x="244" fg:w="1"/><text x="19.7856%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.5356%" y="581" width="0.0801%" height="15" fill="rgb(249,64,54)" fg:x="244" fg:w="1"/><text x="19.7856%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.5356%" y="565" width="0.0801%" height="15" fill="rgb(231,7,11)" fg:x="244" fg:w="1"/><text x="19.7856%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.5356%" y="549" width="0.0801%" height="15" fill="rgb(205,149,21)" fg:x="244" fg:w="1"/><text x="19.7856%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="19.6157%" y="661" width="0.0801%" height="15" fill="rgb(215,126,34)" fg:x="245" fg:w="1"/><text x="19.8657%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.6157%" y="645" width="0.0801%" height="15" fill="rgb(241,132,45)" fg:x="245" fg:w="1"/><text x="19.8657%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="19.6157%" y="629" width="0.0801%" height="15" fill="rgb(252,69,32)" fg:x="245" fg:w="1"/><text x="19.8657%" y="639.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (159 samples, 12.73%)</title><rect x="7.0456%" y="741" width="12.7302%" height="15" fill="rgb(232,204,19)" fg:x="88" fg:w="159"/><text x="7.2956%" y="751.50">&lt;tests::HoldingKeyI..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (17 samples, 1.36%)</title><rect x="18.4147%" y="725" width="1.3611%" height="15" fill="rgb(249,15,47)" fg:x="230" fg:w="17"/><text x="18.6647%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.56%)</title><rect x="19.2154%" y="709" width="0.5604%" height="15" fill="rgb(209,227,23)" fg:x="240" fg:w="7"/><text x="19.4654%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="19.2954%" y="693" width="0.4804%" height="15" fill="rgb(248,92,24)" fg:x="241" fg:w="6"/><text x="19.5454%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.40%)</title><rect x="19.3755%" y="677" width="0.4003%" height="15" fill="rgb(247,59,2)" fg:x="242" fg:w="5"/><text x="19.6255%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="19.6958%" y="661" width="0.0801%" height="15" fill="rgb(221,30,5)" fg:x="246" fg:w="1"/><text x="19.9458%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.6958%" y="645" width="0.0801%" height="15" fill="rgb(208,108,53)" fg:x="246" fg:w="1"/><text x="19.9458%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.6958%" y="629" width="0.0801%" height="15" fill="rgb(211,183,26)" fg:x="246" fg:w="1"/><text x="19.9458%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.7758%" y="693" width="0.0801%" height="15" fill="rgb(232,132,4)" fg:x="247" fg:w="1"/><text x="20.0258%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.7758%" y="677" width="0.0801%" height="15" fill="rgb(253,128,37)" fg:x="247" fg:w="1"/><text x="20.0258%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="19.7758%" y="661" width="0.0801%" height="15" fill="rgb(221,58,24)" fg:x="247" fg:w="1"/><text x="20.0258%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (2 samples, 0.16%)</title><rect x="19.7758%" y="741" width="0.1601%" height="15" fill="rgb(230,54,45)" fg:x="247" fg:w="2"/><text x="20.0258%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="19.7758%" y="725" width="0.1601%" height="15" fill="rgb(254,21,18)" fg:x="247" fg:w="2"/><text x="20.0258%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="19.7758%" y="709" width="0.1601%" height="15" fill="rgb(221,108,0)" fg:x="247" fg:w="2"/><text x="20.0258%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.8559%" y="693" width="0.0801%" height="15" fill="rgb(206,95,1)" fg:x="248" fg:w="1"/><text x="20.1059%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.8559%" y="677" width="0.0801%" height="15" fill="rgb(237,52,5)" fg:x="248" fg:w="1"/><text x="20.1059%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9359%" y="693" width="0.0801%" height="15" fill="rgb(218,150,34)" fg:x="249" fg:w="1"/><text x="20.1859%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9359%" y="677" width="0.0801%" height="15" fill="rgb(235,194,28)" fg:x="249" fg:w="1"/><text x="20.1859%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.9359%" y="661" width="0.0801%" height="15" fill="rgb(245,92,18)" fg:x="249" fg:w="1"/><text x="20.1859%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.9359%" y="645" width="0.0801%" height="15" fill="rgb(253,203,53)" fg:x="249" fg:w="1"/><text x="20.1859%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.9359%" y="629" width="0.0801%" height="15" fill="rgb(249,185,47)" fg:x="249" fg:w="1"/><text x="20.1859%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.9359%" y="613" width="0.0801%" height="15" fill="rgb(252,194,52)" fg:x="249" fg:w="1"/><text x="20.1859%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="19.9359%" y="597" width="0.0801%" height="15" fill="rgb(210,53,36)" fg:x="249" fg:w="1"/><text x="20.1859%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="19.9359%" y="581" width="0.0801%" height="15" fill="rgb(237,37,25)" fg:x="249" fg:w="1"/><text x="20.1859%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="20.0160%" y="693" width="0.1601%" height="15" fill="rgb(242,116,27)" fg:x="250" fg:w="2"/><text x="20.2660%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="20.0961%" y="677" width="0.0801%" height="15" fill="rgb(213,185,26)" fg:x="251" fg:w="1"/><text x="20.3461%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0961%" y="661" width="0.0801%" height="15" fill="rgb(225,204,8)" fg:x="251" fg:w="1"/><text x="20.3461%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="20.2562%" y="629" width="0.0801%" height="15" fill="rgb(254,111,37)" fg:x="253" fg:w="1"/><text x="20.5062%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.2562%" y="613" width="0.0801%" height="15" fill="rgb(242,35,9)" fg:x="253" fg:w="1"/><text x="20.5062%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.2562%" y="597" width="0.0801%" height="15" fill="rgb(232,138,49)" fg:x="253" fg:w="1"/><text x="20.5062%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="20.3363%" y="613" width="0.2402%" height="15" fill="rgb(247,56,4)" fg:x="254" fg:w="3"/><text x="20.5863%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.4163%" y="597" width="0.1601%" height="15" fill="rgb(226,179,17)" fg:x="255" fg:w="2"/><text x="20.6663%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.4964%" y="581" width="0.0801%" height="15" fill="rgb(216,163,45)" fg:x="256" fg:w="1"/><text x="20.7464%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.4964%" y="565" width="0.0801%" height="15" fill="rgb(211,157,3)" fg:x="256" fg:w="1"/><text x="20.7464%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="20.5765%" y="597" width="0.0801%" height="15" fill="rgb(234,44,20)" fg:x="257" fg:w="1"/><text x="20.8265%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.5765%" y="581" width="0.0801%" height="15" fill="rgb(254,138,23)" fg:x="257" fg:w="1"/><text x="20.8265%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="20.6565%" y="581" width="0.2402%" height="15" fill="rgb(206,119,39)" fg:x="258" fg:w="3"/><text x="20.9065%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.7366%" y="565" width="0.1601%" height="15" fill="rgb(231,105,52)" fg:x="259" fg:w="2"/><text x="20.9866%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.8167%" y="549" width="0.0801%" height="15" fill="rgb(250,20,5)" fg:x="260" fg:w="1"/><text x="21.0667%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="20.6565%" y="597" width="0.4003%" height="15" fill="rgb(215,198,30)" fg:x="258" fg:w="5"/><text x="20.9065%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="20.8967%" y="581" width="0.1601%" height="15" fill="rgb(246,142,8)" fg:x="261" fg:w="2"/><text x="21.1467%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="20.9768%" y="565" width="0.0801%" height="15" fill="rgb(243,26,38)" fg:x="262" fg:w="1"/><text x="21.2268%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.9768%" y="549" width="0.0801%" height="15" fill="rgb(205,133,28)" fg:x="262" fg:w="1"/><text x="21.2268%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.9768%" y="533" width="0.0801%" height="15" fill="rgb(212,34,0)" fg:x="262" fg:w="1"/><text x="21.2268%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.9768%" y="517" width="0.0801%" height="15" fill="rgb(251,226,22)" fg:x="262" fg:w="1"/><text x="21.2268%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="20.5765%" y="613" width="0.5604%" height="15" fill="rgb(252,119,9)" fg:x="257" fg:w="7"/><text x="20.8265%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.0568%" y="597" width="0.0801%" height="15" fill="rgb(213,150,50)" fg:x="263" fg:w="1"/><text x="21.3068%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.0568%" y="581" width="0.0801%" height="15" fill="rgb(212,24,39)" fg:x="263" fg:w="1"/><text x="21.3068%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.0568%" y="565" width="0.0801%" height="15" fill="rgb(213,46,39)" fg:x="263" fg:w="1"/><text x="21.3068%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.96%)</title><rect x="20.2562%" y="645" width="0.9608%" height="15" fill="rgb(239,106,12)" fg:x="253" fg:w="12"/><text x="20.5062%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="20.3363%" y="629" width="0.8807%" height="15" fill="rgb(249,229,21)" fg:x="254" fg:w="11"/><text x="20.5863%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.1369%" y="613" width="0.0801%" height="15" fill="rgb(212,158,3)" fg:x="264" fg:w="1"/><text x="21.3869%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.1369%" y="597" width="0.0801%" height="15" fill="rgb(253,26,48)" fg:x="264" fg:w="1"/><text x="21.3869%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.2170%" y="581" width="0.0801%" height="15" fill="rgb(238,178,20)" fg:x="265" fg:w="1"/><text x="21.4670%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.2970%" y="565" width="0.0801%" height="15" fill="rgb(208,86,15)" fg:x="266" fg:w="1"/><text x="21.5470%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.2970%" y="549" width="0.0801%" height="15" fill="rgb(239,42,53)" fg:x="266" fg:w="1"/><text x="21.5470%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.2170%" y="645" width="0.2402%" height="15" fill="rgb(245,226,8)" fg:x="265" fg:w="3"/><text x="21.4670%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="21.2170%" y="629" width="0.2402%" height="15" fill="rgb(216,176,32)" fg:x="265" fg:w="3"/><text x="21.4670%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.2170%" y="613" width="0.2402%" height="15" fill="rgb(231,186,21)" fg:x="265" fg:w="3"/><text x="21.4670%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="21.2170%" y="597" width="0.2402%" height="15" fill="rgb(205,95,49)" fg:x="265" fg:w="3"/><text x="21.4670%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="21.2970%" y="581" width="0.1601%" height="15" fill="rgb(217,145,8)" fg:x="266" fg:w="2"/><text x="21.5470%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.3771%" y="565" width="0.0801%" height="15" fill="rgb(239,144,48)" fg:x="267" fg:w="1"/><text x="21.6271%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.3771%" y="549" width="0.0801%" height="15" fill="rgb(214,189,23)" fg:x="267" fg:w="1"/><text x="21.6271%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5372%" y="581" width="0.0801%" height="15" fill="rgb(229,157,17)" fg:x="269" fg:w="1"/><text x="21.7872%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.6974%" y="565" width="0.0801%" height="15" fill="rgb(230,5,48)" fg:x="271" fg:w="1"/><text x="21.9474%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="21.7774%" y="565" width="0.1601%" height="15" fill="rgb(224,156,48)" fg:x="272" fg:w="2"/><text x="22.0274%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="21.7774%" y="549" width="0.1601%" height="15" fill="rgb(223,14,29)" fg:x="272" fg:w="2"/><text x="22.0274%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.9376%" y="549" width="0.0801%" height="15" fill="rgb(229,96,36)" fg:x="274" fg:w="1"/><text x="22.1876%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="22.0977%" y="533" width="0.1601%" height="15" fill="rgb(231,102,53)" fg:x="276" fg:w="2"/><text x="22.3477%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.2578%" y="533" width="0.0801%" height="15" fill="rgb(210,77,38)" fg:x="278" fg:w="1"/><text x="22.5078%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="22.3379%" y="533" width="0.0801%" height="15" fill="rgb(235,131,6)" fg:x="279" fg:w="1"/><text x="22.5879%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="22.3379%" y="517" width="0.0801%" height="15" fill="rgb(252,55,38)" fg:x="279" fg:w="1"/><text x="22.5879%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.3379%" y="501" width="0.0801%" height="15" fill="rgb(246,38,14)" fg:x="279" fg:w="1"/><text x="22.5879%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.20%)</title><rect x="21.4572%" y="613" width="1.2010%" height="15" fill="rgb(242,27,5)" fg:x="268" fg:w="15"/><text x="21.7072%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (15 samples, 1.20%)</title><rect x="21.4572%" y="597" width="1.2010%" height="15" fill="rgb(228,65,35)" fg:x="268" fg:w="15"/><text x="21.7072%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.04%)</title><rect x="21.6173%" y="581" width="1.0408%" height="15" fill="rgb(245,93,11)" fg:x="270" fg:w="13"/><text x="21.8673%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.72%)</title><rect x="21.9376%" y="565" width="0.7206%" height="15" fill="rgb(213,1,31)" fg:x="274" fg:w="9"/><text x="22.1876%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="22.0176%" y="549" width="0.6405%" height="15" fill="rgb(237,205,14)" fg:x="275" fg:w="8"/><text x="22.2676%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="22.4179%" y="533" width="0.2402%" height="15" fill="rgb(232,118,45)" fg:x="280" fg:w="3"/><text x="22.6679%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="22.4980%" y="517" width="0.1601%" height="15" fill="rgb(218,5,6)" fg:x="281" fg:w="2"/><text x="22.7480%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.5781%" y="501" width="0.0801%" height="15" fill="rgb(251,87,51)" fg:x="282" fg:w="1"/><text x="22.8281%" y="511.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="22.6581%" y="613" width="0.0801%" height="15" fill="rgb(207,225,20)" fg:x="283" fg:w="1"/><text x="22.9081%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="22.6581%" y="597" width="0.0801%" height="15" fill="rgb(222,78,54)" fg:x="283" fg:w="1"/><text x="22.9081%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.7382%" y="581" width="0.0801%" height="15" fill="rgb(232,85,16)" fg:x="284" fg:w="1"/><text x="22.9882%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.8183%" y="581" width="0.0801%" height="15" fill="rgb(244,25,33)" fg:x="285" fg:w="1"/><text x="23.0683%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="22.8183%" y="565" width="0.0801%" height="15" fill="rgb(233,24,36)" fg:x="285" fg:w="1"/><text x="23.0683%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="22.8183%" y="549" width="0.0801%" height="15" fill="rgb(253,49,54)" fg:x="285" fg:w="1"/><text x="23.0683%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (3 samples, 0.24%)</title><rect x="22.7382%" y="613" width="0.2402%" height="15" fill="rgb(245,12,22)" fg:x="284" fg:w="3"/><text x="22.9882%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="22.7382%" y="597" width="0.2402%" height="15" fill="rgb(253,141,28)" fg:x="284" fg:w="3"/><text x="22.9882%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.8983%" y="581" width="0.0801%" height="15" fill="rgb(225,207,27)" fg:x="286" fg:w="1"/><text x="23.1483%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="23.2986%" y="549" width="0.0801%" height="15" fill="rgb(220,84,2)" fg:x="291" fg:w="1"/><text x="23.5486%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="23.2986%" y="533" width="0.0801%" height="15" fill="rgb(224,37,37)" fg:x="291" fg:w="1"/><text x="23.5486%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="23.2186%" y="565" width="0.2402%" height="15" fill="rgb(220,143,18)" fg:x="290" fg:w="3"/><text x="23.4686%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="23.3787%" y="549" width="0.0801%" height="15" fill="rgb(210,88,33)" fg:x="292" fg:w="1"/><text x="23.6287%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (27 samples, 2.16%)</title><rect x="21.4572%" y="629" width="2.1617%" height="15" fill="rgb(219,87,51)" fg:x="268" fg:w="27"/><text x="21.7072%" y="639.50">&lt;..</text></g><g><title>treediff::diff::diff (8 samples, 0.64%)</title><rect x="22.9784%" y="613" width="0.6405%" height="15" fill="rgb(211,7,35)" fg:x="287" fg:w="8"/><text x="23.2284%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.64%)</title><rect x="22.9784%" y="597" width="0.6405%" height="15" fill="rgb(232,77,2)" fg:x="287" fg:w="8"/><text x="23.2284%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (7 samples, 0.56%)</title><rect x="23.0584%" y="581" width="0.5604%" height="15" fill="rgb(249,94,25)" fg:x="288" fg:w="7"/><text x="23.3084%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="23.4588%" y="565" width="0.1601%" height="15" fill="rgb(215,112,2)" fg:x="293" fg:w="2"/><text x="23.7088%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.6990%" y="597" width="0.0801%" height="15" fill="rgb(226,115,48)" fg:x="296" fg:w="1"/><text x="23.9490%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0993%" y="549" width="0.0801%" height="15" fill="rgb(249,196,10)" fg:x="301" fg:w="1"/><text x="24.3493%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.0993%" y="533" width="0.0801%" height="15" fill="rgb(237,109,14)" fg:x="301" fg:w="1"/><text x="24.3493%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="24.1793%" y="549" width="0.1601%" height="15" fill="rgb(217,103,53)" fg:x="302" fg:w="2"/><text x="24.4293%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.1793%" y="533" width="0.1601%" height="15" fill="rgb(244,137,9)" fg:x="302" fg:w="2"/><text x="24.4293%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.2594%" y="517" width="0.0801%" height="15" fill="rgb(227,201,3)" fg:x="303" fg:w="1"/><text x="24.5094%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.2594%" y="501" width="0.0801%" height="15" fill="rgb(243,94,6)" fg:x="303" fg:w="1"/><text x="24.5094%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="24.2594%" y="485" width="0.0801%" height="15" fill="rgb(235,118,5)" fg:x="303" fg:w="1"/><text x="24.5094%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="24.4195%" y="517" width="0.1601%" height="15" fill="rgb(247,10,30)" fg:x="305" fg:w="2"/><text x="24.6695%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.72%)</title><rect x="24.0192%" y="565" width="0.7206%" height="15" fill="rgb(205,26,28)" fg:x="300" fg:w="9"/><text x="24.2692%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="24.3395%" y="549" width="0.4003%" height="15" fill="rgb(206,99,35)" fg:x="304" fg:w="5"/><text x="24.5895%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="24.4195%" y="533" width="0.3203%" height="15" fill="rgb(238,130,40)" fg:x="305" fg:w="4"/><text x="24.6695%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.5797%" y="517" width="0.1601%" height="15" fill="rgb(224,126,31)" fg:x="307" fg:w="2"/><text x="24.8297%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="24.5797%" y="501" width="0.1601%" height="15" fill="rgb(254,105,17)" fg:x="307" fg:w="2"/><text x="24.8297%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6597%" y="485" width="0.0801%" height="15" fill="rgb(216,87,36)" fg:x="308" fg:w="1"/><text x="24.9097%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (14 samples, 1.12%)</title><rect x="23.9392%" y="581" width="1.1209%" height="15" fill="rgb(240,21,12)" fg:x="299" fg:w="14"/><text x="24.1892%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="24.7398%" y="565" width="0.3203%" height="15" fill="rgb(245,192,34)" fg:x="309" fg:w="4"/><text x="24.9898%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.8999%" y="549" width="0.1601%" height="15" fill="rgb(226,100,49)" fg:x="311" fg:w="2"/><text x="25.1499%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0600%" y="581" width="0.0801%" height="15" fill="rgb(245,188,27)" fg:x="313" fg:w="1"/><text x="25.3100%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (21 samples, 1.68%)</title><rect x="23.6189%" y="629" width="1.6813%" height="15" fill="rgb(212,170,8)" fg:x="295" fg:w="21"/><text x="23.8689%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (21 samples, 1.68%)</title><rect x="23.6189%" y="613" width="1.6813%" height="15" fill="rgb(217,113,29)" fg:x="295" fg:w="21"/><text x="23.8689%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.52%)</title><rect x="23.7790%" y="597" width="1.5212%" height="15" fill="rgb(237,30,3)" fg:x="297" fg:w="19"/><text x="24.0290%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.1401%" y="581" width="0.1601%" height="15" fill="rgb(227,19,28)" fg:x="314" fg:w="2"/><text x="25.3901%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.5404%" y="517" width="0.0801%" height="15" fill="rgb(239,172,45)" fg:x="319" fg:w="1"/><text x="25.7904%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.7806%" y="453" width="0.0801%" height="15" fill="rgb(254,55,39)" fg:x="322" fg:w="1"/><text x="26.0306%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.7806%" y="437" width="0.0801%" height="15" fill="rgb(249,208,12)" fg:x="322" fg:w="1"/><text x="26.0306%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.8607%" y="437" width="0.0801%" height="15" fill="rgb(240,52,13)" fg:x="323" fg:w="1"/><text x="26.1107%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="25.7806%" y="485" width="0.3203%" height="15" fill="rgb(252,149,13)" fg:x="322" fg:w="4"/><text x="26.0306%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="25.7806%" y="469" width="0.3203%" height="15" fill="rgb(232,81,48)" fg:x="322" fg:w="4"/><text x="26.0306%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="25.8607%" y="453" width="0.2402%" height="15" fill="rgb(222,144,2)" fg:x="323" fg:w="3"/><text x="26.1107%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="25.9408%" y="437" width="0.1601%" height="15" fill="rgb(216,81,32)" fg:x="324" fg:w="2"/><text x="26.1908%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.1809%" y="469" width="0.0801%" height="15" fill="rgb(244,78,51)" fg:x="327" fg:w="1"/><text x="26.4309%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.1809%" y="453" width="0.0801%" height="15" fill="rgb(217,66,21)" fg:x="327" fg:w="1"/><text x="26.4309%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.1809%" y="437" width="0.0801%" height="15" fill="rgb(247,101,42)" fg:x="327" fg:w="1"/><text x="26.4309%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1809%" y="421" width="0.0801%" height="15" fill="rgb(227,81,39)" fg:x="327" fg:w="1"/><text x="26.4309%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.2610%" y="469" width="0.0801%" height="15" fill="rgb(220,223,44)" fg:x="328" fg:w="1"/><text x="26.5110%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.2610%" y="453" width="0.0801%" height="15" fill="rgb(205,218,2)" fg:x="328" fg:w="1"/><text x="26.5110%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.96%)</title><rect x="25.6205%" y="501" width="0.9608%" height="15" fill="rgb(212,207,28)" fg:x="320" fg:w="12"/><text x="25.8705%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="26.1009%" y="485" width="0.4804%" height="15" fill="rgb(224,12,41)" fg:x="326" fg:w="6"/><text x="26.3509%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="26.3411%" y="469" width="0.2402%" height="15" fill="rgb(216,118,12)" fg:x="329" fg:w="3"/><text x="26.5911%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.4211%" y="453" width="0.1601%" height="15" fill="rgb(252,97,46)" fg:x="330" fg:w="2"/><text x="26.6711%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5012%" y="437" width="0.0801%" height="15" fill="rgb(244,206,19)" fg:x="331" fg:w="1"/><text x="26.7512%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.12%)</title><rect x="25.5404%" y="533" width="1.1209%" height="15" fill="rgb(231,84,31)" fg:x="319" fg:w="14"/><text x="25.7904%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.04%)</title><rect x="25.6205%" y="517" width="1.0408%" height="15" fill="rgb(244,133,0)" fg:x="320" fg:w="13"/><text x="25.8705%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.5813%" y="501" width="0.0801%" height="15" fill="rgb(223,15,50)" fg:x="332" fg:w="1"/><text x="26.8313%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.5813%" y="485" width="0.0801%" height="15" fill="rgb(250,118,49)" fg:x="332" fg:w="1"/><text x="26.8313%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5813%" y="469" width="0.0801%" height="15" fill="rgb(248,25,38)" fg:x="332" fg:w="1"/><text x="26.8313%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="26.6613%" y="533" width="0.3203%" height="15" fill="rgb(215,70,14)" fg:x="333" fg:w="4"/><text x="26.9113%" y="543.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="26.7414%" y="517" width="0.2402%" height="15" fill="rgb(215,28,15)" fg:x="334" fg:w="3"/><text x="26.9914%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21 samples, 1.68%)</title><rect x="25.3803%" y="565" width="1.6813%" height="15" fill="rgb(243,6,28)" fg:x="317" fg:w="21"/><text x="25.6303%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 1.52%)</title><rect x="25.5404%" y="549" width="1.5212%" height="15" fill="rgb(222,130,1)" fg:x="319" fg:w="19"/><text x="25.7904%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9816%" y="533" width="0.0801%" height="15" fill="rgb(236,166,44)" fg:x="337" fg:w="1"/><text x="27.2316%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.9816%" y="517" width="0.0801%" height="15" fill="rgb(221,108,14)" fg:x="337" fg:w="1"/><text x="27.2316%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="27.1417%" y="549" width="0.0801%" height="15" fill="rgb(252,3,45)" fg:x="339" fg:w="1"/><text x="27.3917%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="27.0616%" y="565" width="0.3203%" height="15" fill="rgb(237,68,30)" fg:x="338" fg:w="4"/><text x="27.3116%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.2218%" y="549" width="0.1601%" height="15" fill="rgb(211,79,22)" fg:x="340" fg:w="2"/><text x="27.4718%" y="559.50"></text></g><g><title>engine::session::Session::close (94 samples, 7.53%)</title><rect x="19.9359%" y="741" width="7.5260%" height="15" fill="rgb(252,185,21)" fg:x="249" fg:w="94"/><text x="20.1859%" y="751.50">engine::se..</text></g><g><title>engine::session::state::State::close (94 samples, 7.53%)</title><rect x="19.9359%" y="725" width="7.5260%" height="15" fill="rgb(225,189,26)" fg:x="249" fg:w="94"/><text x="20.1859%" y="735.50">engine::se..</text></g><g><title>engine::session::state::State::flush_entities (94 samples, 7.53%)</title><rect x="19.9359%" y="709" width="7.5260%" height="15" fill="rgb(241,30,40)" fg:x="249" fg:w="94"/><text x="20.1859%" y="719.50">engine::se..</text></g><g><title>core::iter::adapters::try_process (91 samples, 7.29%)</title><rect x="20.1761%" y="693" width="7.2858%" height="15" fill="rgb(235,215,44)" fg:x="252" fg:w="91"/><text x="20.4261%" y="703.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (91 samples, 7.29%)</title><rect x="20.1761%" y="677" width="7.2858%" height="15" fill="rgb(205,8,29)" fg:x="252" fg:w="91"/><text x="20.4261%" y="687.50">&lt;alloc::ve..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (91 samples, 7.29%)</title><rect x="20.1761%" y="661" width="7.2858%" height="15" fill="rgb(241,137,42)" fg:x="252" fg:w="91"/><text x="20.4261%" y="671.50">engine::se..</text></g><g><title>kernel::model::any_entity_changes (75 samples, 6.00%)</title><rect x="21.4572%" y="645" width="6.0048%" height="15" fill="rgb(237,155,2)" fg:x="268" fg:w="75"/><text x="21.7072%" y="655.50">kernel::..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (27 samples, 2.16%)</title><rect x="25.3002%" y="629" width="2.1617%" height="15" fill="rgb(245,29,42)" fg:x="316" fg:w="27"/><text x="25.5502%" y="639.50">s..</text></g><g><title>serde_json::de::from_trait (27 samples, 2.16%)</title><rect x="25.3002%" y="613" width="2.1617%" height="15" fill="rgb(234,101,35)" fg:x="316" fg:w="27"/><text x="25.5502%" y="623.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (27 samples, 2.16%)</title><rect x="25.3002%" y="597" width="2.1617%" height="15" fill="rgb(228,64,37)" fg:x="316" fg:w="27"/><text x="25.5502%" y="607.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (27 samples, 2.16%)</title><rect x="25.3002%" y="581" width="2.1617%" height="15" fill="rgb(217,214,36)" fg:x="316" fg:w="27"/><text x="25.5502%" y="591.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.3819%" y="565" width="0.0801%" height="15" fill="rgb(243,70,3)" fg:x="342" fg:w="1"/><text x="27.6319%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.3819%" y="549" width="0.0801%" height="15" fill="rgb(253,158,52)" fg:x="342" fg:w="1"/><text x="27.6319%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="27.3819%" y="533" width="0.0801%" height="15" fill="rgb(234,111,54)" fg:x="342" fg:w="1"/><text x="27.6319%" y="543.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="27.4620%" y="709" width="0.0801%" height="15" fill="rgb(217,70,32)" fg:x="343" fg:w="1"/><text x="27.7120%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="27.4620%" y="693" width="0.0801%" height="15" fill="rgb(234,18,33)" fg:x="343" fg:w="1"/><text x="27.7120%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="27.4620%" y="677" width="0.0801%" height="15" fill="rgb(234,12,49)" fg:x="343" fg:w="1"/><text x="27.7120%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.5420%" y="709" width="0.0801%" height="15" fill="rgb(236,10,21)" fg:x="344" fg:w="1"/><text x="27.7920%" y="719.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="27.7022%" y="549" width="0.0801%" height="15" fill="rgb(248,182,45)" fg:x="346" fg:w="1"/><text x="27.9522%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="27.7022%" y="533" width="0.0801%" height="15" fill="rgb(217,95,36)" fg:x="346" fg:w="1"/><text x="27.9522%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="27.7022%" y="517" width="0.0801%" height="15" fill="rgb(212,110,31)" fg:x="346" fg:w="1"/><text x="27.9522%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="27.7022%" y="501" width="0.0801%" height="15" fill="rgb(206,32,53)" fg:x="346" fg:w="1"/><text x="27.9522%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="27.7022%" y="485" width="0.0801%" height="15" fill="rgb(246,141,37)" fg:x="346" fg:w="1"/><text x="27.9522%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="27.6221%" y="693" width="0.2402%" height="15" fill="rgb(219,16,7)" fg:x="345" fg:w="3"/><text x="27.8721%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="27.6221%" y="677" width="0.2402%" height="15" fill="rgb(230,205,45)" fg:x="345" fg:w="3"/><text x="27.8721%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="27.7022%" y="661" width="0.1601%" height="15" fill="rgb(231,43,49)" fg:x="346" fg:w="2"/><text x="27.9522%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="27.7022%" y="645" width="0.1601%" height="15" fill="rgb(212,106,34)" fg:x="346" fg:w="2"/><text x="27.9522%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="27.7022%" y="629" width="0.1601%" height="15" fill="rgb(206,83,17)" fg:x="346" fg:w="2"/><text x="27.9522%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="27.7022%" y="613" width="0.1601%" height="15" fill="rgb(244,154,49)" fg:x="346" fg:w="2"/><text x="27.9522%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="27.7022%" y="597" width="0.1601%" height="15" fill="rgb(244,149,49)" fg:x="346" fg:w="2"/><text x="27.9522%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="27.7022%" y="581" width="0.1601%" height="15" fill="rgb(227,134,18)" fg:x="346" fg:w="2"/><text x="27.9522%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="27.7022%" y="565" width="0.1601%" height="15" fill="rgb(237,116,36)" fg:x="346" fg:w="2"/><text x="27.9522%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="27.7822%" y="549" width="0.0801%" height="15" fill="rgb(205,129,40)" fg:x="347" fg:w="1"/><text x="28.0322%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="27.7822%" y="533" width="0.0801%" height="15" fill="rgb(236,178,4)" fg:x="347" fg:w="1"/><text x="28.0322%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="27.7822%" y="517" width="0.0801%" height="15" fill="rgb(251,76,53)" fg:x="347" fg:w="1"/><text x="28.0322%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="27.7822%" y="501" width="0.0801%" height="15" fill="rgb(242,92,40)" fg:x="347" fg:w="1"/><text x="28.0322%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="27.7822%" y="485" width="0.0801%" height="15" fill="rgb(209,45,30)" fg:x="347" fg:w="1"/><text x="28.0322%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="27.7822%" y="469" width="0.0801%" height="15" fill="rgb(218,157,36)" fg:x="347" fg:w="1"/><text x="28.0322%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="27.7822%" y="453" width="0.0801%" height="15" fill="rgb(222,186,16)" fg:x="347" fg:w="1"/><text x="28.0322%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::actions::Perform&gt; (1 samples, 0.08%)</title><rect x="27.8623%" y="693" width="0.0801%" height="15" fill="rgb(254,72,35)" fg:x="348" fg:w="1"/><text x="28.1123%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.9424%" y="677" width="0.0801%" height="15" fill="rgb(224,25,35)" fg:x="349" fg:w="1"/><text x="28.1924%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="27.9424%" y="661" width="0.0801%" height="15" fill="rgb(206,135,52)" fg:x="349" fg:w="1"/><text x="28.1924%" y="671.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="28.0224%" y="677" width="0.0801%" height="15" fill="rgb(229,174,47)" fg:x="350" fg:w="1"/><text x="28.2724%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="28.0224%" y="661" width="0.0801%" height="15" fill="rgb(242,184,21)" fg:x="350" fg:w="1"/><text x="28.2724%" y="671.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="28.0224%" y="645" width="0.0801%" height="15" fill="rgb(213,22,45)" fg:x="350" fg:w="1"/><text x="28.2724%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.1825%" y="549" width="0.0801%" height="15" fill="rgb(237,81,54)" fg:x="352" fg:w="1"/><text x="28.4325%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.1825%" y="533" width="0.0801%" height="15" fill="rgb(248,177,18)" fg:x="352" fg:w="1"/><text x="28.4325%" y="543.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="28.2626%" y="549" width="0.0801%" height="15" fill="rgb(254,31,16)" fg:x="353" fg:w="1"/><text x="28.5126%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="28.1825%" y="565" width="0.3203%" height="15" fill="rgb(235,20,31)" fg:x="352" fg:w="4"/><text x="28.4325%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="28.3427%" y="549" width="0.1601%" height="15" fill="rgb(240,56,43)" fg:x="354" fg:w="2"/><text x="28.5927%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.3427%" y="533" width="0.1601%" height="15" fill="rgb(237,197,51)" fg:x="354" fg:w="2"/><text x="28.5927%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="28.3427%" y="517" width="0.1601%" height="15" fill="rgb(241,162,44)" fg:x="354" fg:w="2"/><text x="28.5927%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.3427%" y="501" width="0.1601%" height="15" fill="rgb(224,23,20)" fg:x="354" fg:w="2"/><text x="28.5927%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="28.4227%" y="485" width="0.0801%" height="15" fill="rgb(250,109,34)" fg:x="355" fg:w="1"/><text x="28.6727%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="28.5829%" y="517" width="0.0801%" height="15" fill="rgb(214,175,50)" fg:x="357" fg:w="1"/><text x="28.8329%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="28.6629%" y="501" width="0.0801%" height="15" fill="rgb(213,182,5)" fg:x="358" fg:w="1"/><text x="28.9129%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.6629%" y="485" width="0.0801%" height="15" fill="rgb(209,199,19)" fg:x="358" fg:w="1"/><text x="28.9129%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.6629%" y="469" width="0.0801%" height="15" fill="rgb(236,224,42)" fg:x="358" fg:w="1"/><text x="28.9129%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.6629%" y="453" width="0.0801%" height="15" fill="rgb(246,226,29)" fg:x="358" fg:w="1"/><text x="28.9129%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.7430%" y="421" width="0.0801%" height="15" fill="rgb(227,223,11)" fg:x="359" fg:w="1"/><text x="28.9930%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.8231%" y="405" width="0.0801%" height="15" fill="rgb(219,7,51)" fg:x="360" fg:w="1"/><text x="29.0731%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.8231%" y="389" width="0.0801%" height="15" fill="rgb(245,167,10)" fg:x="360" fg:w="1"/><text x="29.0731%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.8231%" y="373" width="0.0801%" height="15" fill="rgb(237,224,16)" fg:x="360" fg:w="1"/><text x="29.0731%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.8231%" y="357" width="0.0801%" height="15" fill="rgb(226,132,13)" fg:x="360" fg:w="1"/><text x="29.0731%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.8231%" y="341" width="0.0801%" height="15" fill="rgb(214,140,3)" fg:x="360" fg:w="1"/><text x="29.0731%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8231%" y="325" width="0.0801%" height="15" fill="rgb(221,177,4)" fg:x="360" fg:w="1"/><text x="29.0731%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="28.7430%" y="453" width="0.2402%" height="15" fill="rgb(238,139,3)" fg:x="359" fg:w="3"/><text x="28.9930%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="28.7430%" y="437" width="0.2402%" height="15" fill="rgb(216,17,39)" fg:x="359" fg:w="3"/><text x="28.9930%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="28.8231%" y="421" width="0.1601%" height="15" fill="rgb(238,120,9)" fg:x="360" fg:w="2"/><text x="29.0731%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="28.9031%" y="405" width="0.0801%" height="15" fill="rgb(244,92,53)" fg:x="361" fg:w="1"/><text x="29.1531%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="28.9031%" y="389" width="0.0801%" height="15" fill="rgb(224,148,33)" fg:x="361" fg:w="1"/><text x="29.1531%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.9031%" y="373" width="0.0801%" height="15" fill="rgb(243,6,36)" fg:x="361" fg:w="1"/><text x="29.1531%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="28.7430%" y="501" width="0.3203%" height="15" fill="rgb(230,102,11)" fg:x="359" fg:w="4"/><text x="28.9930%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="28.7430%" y="485" width="0.3203%" height="15" fill="rgb(234,148,36)" fg:x="359" fg:w="4"/><text x="28.9930%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="28.7430%" y="469" width="0.3203%" height="15" fill="rgb(251,153,25)" fg:x="359" fg:w="4"/><text x="28.9930%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.9832%" y="453" width="0.0801%" height="15" fill="rgb(215,129,8)" fg:x="362" fg:w="1"/><text x="29.2332%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.9832%" y="437" width="0.0801%" height="15" fill="rgb(224,128,35)" fg:x="362" fg:w="1"/><text x="29.2332%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.9832%" y="421" width="0.0801%" height="15" fill="rgb(237,56,52)" fg:x="362" fg:w="1"/><text x="29.2332%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="28.6629%" y="517" width="0.4804%" height="15" fill="rgb(234,213,19)" fg:x="358" fg:w="6"/><text x="28.9129%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="29.0633%" y="501" width="0.0801%" height="15" fill="rgb(252,82,23)" fg:x="363" fg:w="1"/><text x="29.3133%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="29.0633%" y="485" width="0.0801%" height="15" fill="rgb(254,201,21)" fg:x="363" fg:w="1"/><text x="29.3133%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.0633%" y="469" width="0.0801%" height="15" fill="rgb(250,186,11)" fg:x="363" fg:w="1"/><text x="29.3133%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.0633%" y="453" width="0.0801%" height="15" fill="rgb(211,174,5)" fg:x="363" fg:w="1"/><text x="29.3133%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.0633%" y="437" width="0.0801%" height="15" fill="rgb(214,121,10)" fg:x="363" fg:w="1"/><text x="29.3133%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.0633%" y="421" width="0.0801%" height="15" fill="rgb(241,66,2)" fg:x="363" fg:w="1"/><text x="29.3133%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.0633%" y="405" width="0.0801%" height="15" fill="rgb(220,167,19)" fg:x="363" fg:w="1"/><text x="29.3133%" y="415.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (14 samples, 1.12%)</title><rect x="28.1025%" y="581" width="1.1209%" height="15" fill="rgb(231,54,50)" fg:x="351" fg:w="14"/><text x="28.3525%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.72%)</title><rect x="28.5028%" y="565" width="0.7206%" height="15" fill="rgb(239,217,53)" fg:x="356" fg:w="9"/><text x="28.7528%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.64%)</title><rect x="28.5829%" y="549" width="0.6405%" height="15" fill="rgb(248,8,0)" fg:x="357" fg:w="8"/><text x="28.8329%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="28.5829%" y="533" width="0.6405%" height="15" fill="rgb(229,118,37)" fg:x="357" fg:w="8"/><text x="28.8329%" y="543.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="29.1433%" y="517" width="0.0801%" height="15" fill="rgb(253,223,43)" fg:x="364" fg:w="1"/><text x="29.3933%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.1433%" y="501" width="0.0801%" height="15" fill="rgb(211,77,36)" fg:x="364" fg:w="1"/><text x="29.3933%" y="511.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (16 samples, 1.28%)</title><rect x="28.1025%" y="597" width="1.2810%" height="15" fill="rgb(219,3,53)" fg:x="351" fg:w="16"/><text x="28.3525%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (2 samples, 0.16%)</title><rect x="29.2234%" y="581" width="0.1601%" height="15" fill="rgb(244,45,42)" fg:x="365" fg:w="2"/><text x="29.4734%" y="591.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="29.3034%" y="565" width="0.0801%" height="15" fill="rgb(225,95,27)" fg:x="366" fg:w="1"/><text x="29.5534%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::Item&gt; (1 samples, 0.08%)</title><rect x="29.4636%" y="565" width="0.0801%" height="15" fill="rgb(207,74,8)" fg:x="368" fg:w="1"/><text x="29.7136%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.7838%" y="357" width="0.1601%" height="15" fill="rgb(243,63,36)" fg:x="372" fg:w="2"/><text x="30.0338%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.8639%" y="341" width="0.0801%" height="15" fill="rgb(211,180,12)" fg:x="373" fg:w="1"/><text x="30.1139%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.8639%" y="325" width="0.0801%" height="15" fill="rgb(254,166,49)" fg:x="373" fg:w="1"/><text x="30.1139%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="29.9440%" y="357" width="0.0801%" height="15" fill="rgb(205,19,0)" fg:x="374" fg:w="1"/><text x="30.1940%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.9440%" y="341" width="0.0801%" height="15" fill="rgb(224,172,32)" fg:x="374" fg:w="1"/><text x="30.1940%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="29.9440%" y="325" width="0.0801%" height="15" fill="rgb(254,136,30)" fg:x="374" fg:w="1"/><text x="30.1940%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="29.9440%" y="309" width="0.0801%" height="15" fill="rgb(246,19,35)" fg:x="374" fg:w="1"/><text x="30.1940%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="30.0240%" y="325" width="0.0801%" height="15" fill="rgb(219,24,36)" fg:x="375" fg:w="1"/><text x="30.2740%" y="335.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="30.1841%" y="309" width="0.2402%" height="15" fill="rgb(251,55,1)" fg:x="377" fg:w="3"/><text x="30.4341%" y="319.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (9 samples, 0.72%)</title><rect x="29.7838%" y="405" width="0.7206%" height="15" fill="rgb(218,117,39)" fg:x="372" fg:w="9"/><text x="30.0338%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (9 samples, 0.72%)</title><rect x="29.7838%" y="389" width="0.7206%" height="15" fill="rgb(248,169,11)" fg:x="372" fg:w="9"/><text x="30.0338%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="29.7838%" y="373" width="0.7206%" height="15" fill="rgb(244,40,44)" fg:x="372" fg:w="9"/><text x="30.0338%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.48%)</title><rect x="30.0240%" y="357" width="0.4804%" height="15" fill="rgb(234,62,37)" fg:x="375" fg:w="6"/><text x="30.2740%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (6 samples, 0.48%)</title><rect x="30.0240%" y="341" width="0.4804%" height="15" fill="rgb(207,117,42)" fg:x="375" fg:w="6"/><text x="30.2740%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="30.1041%" y="325" width="0.4003%" height="15" fill="rgb(213,43,2)" fg:x="376" fg:w="5"/><text x="30.3541%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4243%" y="309" width="0.0801%" height="15" fill="rgb(244,202,51)" fg:x="380" fg:w="1"/><text x="30.6743%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4243%" y="293" width="0.0801%" height="15" fill="rgb(253,174,46)" fg:x="380" fg:w="1"/><text x="30.6743%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.4243%" y="277" width="0.0801%" height="15" fill="rgb(251,23,1)" fg:x="380" fg:w="1"/><text x="30.6743%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (10 samples, 0.80%)</title><rect x="29.7838%" y="421" width="0.8006%" height="15" fill="rgb(253,26,1)" fg:x="372" fg:w="10"/><text x="30.0338%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="30.5044%" y="405" width="0.0801%" height="15" fill="rgb(216,89,31)" fg:x="381" fg:w="1"/><text x="30.7544%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="30.5044%" y="389" width="0.0801%" height="15" fill="rgb(209,109,5)" fg:x="381" fg:w="1"/><text x="30.7544%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.5044%" y="373" width="0.0801%" height="15" fill="rgb(229,63,13)" fg:x="381" fg:w="1"/><text x="30.7544%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.7446%" y="309" width="0.0801%" height="15" fill="rgb(238,137,54)" fg:x="384" fg:w="1"/><text x="30.9946%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.7446%" y="293" width="0.0801%" height="15" fill="rgb(228,1,9)" fg:x="384" fg:w="1"/><text x="30.9946%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.7446%" y="277" width="0.0801%" height="15" fill="rgb(249,120,48)" fg:x="384" fg:w="1"/><text x="30.9946%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.7446%" y="261" width="0.0801%" height="15" fill="rgb(209,72,36)" fg:x="384" fg:w="1"/><text x="30.9946%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.7446%" y="245" width="0.0801%" height="15" fill="rgb(247,98,49)" fg:x="384" fg:w="1"/><text x="30.9946%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.7446%" y="229" width="0.0801%" height="15" fill="rgb(233,75,36)" fg:x="384" fg:w="1"/><text x="30.9946%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.7446%" y="213" width="0.0801%" height="15" fill="rgb(225,14,24)" fg:x="384" fg:w="1"/><text x="30.9946%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.7446%" y="197" width="0.0801%" height="15" fill="rgb(237,193,20)" fg:x="384" fg:w="1"/><text x="30.9946%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.7446%" y="181" width="0.0801%" height="15" fill="rgb(239,122,19)" fg:x="384" fg:w="1"/><text x="30.9946%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.7446%" y="165" width="0.0801%" height="15" fill="rgb(231,220,10)" fg:x="384" fg:w="1"/><text x="30.9946%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.7446%" y="149" width="0.0801%" height="15" fill="rgb(220,66,15)" fg:x="384" fg:w="1"/><text x="30.9946%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="30.7446%" y="357" width="0.1601%" height="15" fill="rgb(215,171,52)" fg:x="384" fg:w="2"/><text x="30.9946%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="30.7446%" y="341" width="0.1601%" height="15" fill="rgb(241,169,50)" fg:x="384" fg:w="2"/><text x="30.9946%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="30.7446%" y="325" width="0.1601%" height="15" fill="rgb(236,189,0)" fg:x="384" fg:w="2"/><text x="30.9946%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8247%" y="309" width="0.0801%" height="15" fill="rgb(217,147,20)" fg:x="385" fg:w="1"/><text x="31.0747%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="30.7446%" y="373" width="0.3203%" height="15" fill="rgb(206,188,39)" fg:x="384" fg:w="4"/><text x="30.9946%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="30.9047%" y="357" width="0.1601%" height="15" fill="rgb(227,118,25)" fg:x="386" fg:w="2"/><text x="31.1547%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.9047%" y="341" width="0.1601%" height="15" fill="rgb(248,171,40)" fg:x="386" fg:w="2"/><text x="31.1547%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="30.9047%" y="325" width="0.1601%" height="15" fill="rgb(251,90,54)" fg:x="386" fg:w="2"/><text x="31.1547%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.9047%" y="309" width="0.1601%" height="15" fill="rgb(234,11,46)" fg:x="386" fg:w="2"/><text x="31.1547%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="30.9047%" y="293" width="0.1601%" height="15" fill="rgb(229,134,13)" fg:x="386" fg:w="2"/><text x="31.1547%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.9047%" y="277" width="0.1601%" height="15" fill="rgb(223,129,3)" fg:x="386" fg:w="2"/><text x="31.1547%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="30.7446%" y="389" width="0.4003%" height="15" fill="rgb(221,124,13)" fg:x="384" fg:w="5"/><text x="30.9946%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.0649%" y="373" width="0.0801%" height="15" fill="rgb(234,3,18)" fg:x="388" fg:w="1"/><text x="31.3149%" y="383.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="31.1449%" y="389" width="0.1601%" height="15" fill="rgb(249,199,20)" fg:x="389" fg:w="2"/><text x="31.3949%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="31.1449%" y="373" width="0.1601%" height="15" fill="rgb(224,134,6)" fg:x="389" fg:w="2"/><text x="31.3949%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="31.1449%" y="357" width="0.1601%" height="15" fill="rgb(254,83,26)" fg:x="389" fg:w="2"/><text x="31.3949%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="31.1449%" y="341" width="0.1601%" height="15" fill="rgb(217,88,9)" fg:x="389" fg:w="2"/><text x="31.3949%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="31.1449%" y="325" width="0.1601%" height="15" fill="rgb(225,73,2)" fg:x="389" fg:w="2"/><text x="31.3949%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.2250%" y="309" width="0.0801%" height="15" fill="rgb(226,44,39)" fg:x="390" fg:w="1"/><text x="31.4750%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.2250%" y="293" width="0.0801%" height="15" fill="rgb(228,53,17)" fg:x="390" fg:w="1"/><text x="31.4750%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.3050%" y="245" width="0.0801%" height="15" fill="rgb(212,27,27)" fg:x="391" fg:w="1"/><text x="31.5550%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.3050%" y="229" width="0.0801%" height="15" fill="rgb(241,50,6)" fg:x="391" fg:w="1"/><text x="31.5550%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.3050%" y="213" width="0.0801%" height="15" fill="rgb(225,28,51)" fg:x="391" fg:w="1"/><text x="31.5550%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.3050%" y="197" width="0.0801%" height="15" fill="rgb(215,33,16)" fg:x="391" fg:w="1"/><text x="31.5550%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.3050%" y="181" width="0.0801%" height="15" fill="rgb(243,40,39)" fg:x="391" fg:w="1"/><text x="31.5550%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.3050%" y="165" width="0.0801%" height="15" fill="rgb(225,11,42)" fg:x="391" fg:w="1"/><text x="31.5550%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.3050%" y="149" width="0.0801%" height="15" fill="rgb(241,220,38)" fg:x="391" fg:w="1"/><text x="31.5550%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="31.3050%" y="373" width="0.1601%" height="15" fill="rgb(244,52,35)" fg:x="391" fg:w="2"/><text x="31.5550%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="31.3050%" y="357" width="0.1601%" height="15" fill="rgb(246,42,46)" fg:x="391" fg:w="2"/><text x="31.5550%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="31.3050%" y="341" width="0.1601%" height="15" fill="rgb(205,184,13)" fg:x="391" fg:w="2"/><text x="31.5550%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="31.3050%" y="325" width="0.1601%" height="15" fill="rgb(209,48,36)" fg:x="391" fg:w="2"/><text x="31.5550%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="31.3050%" y="309" width="0.1601%" height="15" fill="rgb(244,34,51)" fg:x="391" fg:w="2"/><text x="31.5550%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="31.3050%" y="293" width="0.1601%" height="15" fill="rgb(221,107,33)" fg:x="391" fg:w="2"/><text x="31.5550%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="31.3050%" y="277" width="0.1601%" height="15" fill="rgb(224,203,12)" fg:x="391" fg:w="2"/><text x="31.5550%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="31.3050%" y="261" width="0.1601%" height="15" fill="rgb(230,215,18)" fg:x="391" fg:w="2"/><text x="31.5550%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="31.3851%" y="245" width="0.0801%" height="15" fill="rgb(206,185,35)" fg:x="392" fg:w="1"/><text x="31.6351%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="31.3851%" y="229" width="0.0801%" height="15" fill="rgb(228,140,34)" fg:x="392" fg:w="1"/><text x="31.6351%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="31.5452%" y="309" width="0.1601%" height="15" fill="rgb(208,93,13)" fg:x="394" fg:w="2"/><text x="31.7952%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="31.3050%" y="389" width="0.4804%" height="15" fill="rgb(221,193,39)" fg:x="391" fg:w="6"/><text x="31.5550%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="31.4652%" y="373" width="0.3203%" height="15" fill="rgb(241,132,34)" fg:x="393" fg:w="4"/><text x="31.7152%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="31.4652%" y="357" width="0.3203%" height="15" fill="rgb(221,141,10)" fg:x="393" fg:w="4"/><text x="31.7152%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="31.5452%" y="341" width="0.2402%" height="15" fill="rgb(226,90,31)" fg:x="394" fg:w="3"/><text x="31.7952%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="31.5452%" y="325" width="0.2402%" height="15" fill="rgb(243,75,5)" fg:x="394" fg:w="3"/><text x="31.7952%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.7054%" y="309" width="0.0801%" height="15" fill="rgb(227,156,21)" fg:x="396" fg:w="1"/><text x="31.9554%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.7054%" y="293" width="0.0801%" height="15" fill="rgb(250,195,8)" fg:x="396" fg:w="1"/><text x="31.9554%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.7054%" y="277" width="0.0801%" height="15" fill="rgb(220,134,5)" fg:x="396" fg:w="1"/><text x="31.9554%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="31.7054%" y="261" width="0.0801%" height="15" fill="rgb(246,106,34)" fg:x="396" fg:w="1"/><text x="31.9554%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.7854%" y="341" width="0.0801%" height="15" fill="rgb(205,1,4)" fg:x="397" fg:w="1"/><text x="32.0354%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.7854%" y="325" width="0.0801%" height="15" fill="rgb(224,151,29)" fg:x="397" fg:w="1"/><text x="32.0354%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.7854%" y="309" width="0.0801%" height="15" fill="rgb(251,196,0)" fg:x="397" fg:w="1"/><text x="32.0354%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.7854%" y="293" width="0.0801%" height="15" fill="rgb(212,127,0)" fg:x="397" fg:w="1"/><text x="32.0354%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.7854%" y="277" width="0.0801%" height="15" fill="rgb(236,71,53)" fg:x="397" fg:w="1"/><text x="32.0354%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.7854%" y="261" width="0.0801%" height="15" fill="rgb(227,99,0)" fg:x="397" fg:w="1"/><text x="32.0354%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.7854%" y="245" width="0.0801%" height="15" fill="rgb(239,89,21)" fg:x="397" fg:w="1"/><text x="32.0354%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.7854%" y="229" width="0.0801%" height="15" fill="rgb(243,122,19)" fg:x="397" fg:w="1"/><text x="32.0354%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.7854%" y="213" width="0.0801%" height="15" fill="rgb(229,192,45)" fg:x="397" fg:w="1"/><text x="32.0354%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.7854%" y="197" width="0.0801%" height="15" fill="rgb(235,165,35)" fg:x="397" fg:w="1"/><text x="32.0354%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.7854%" y="181" width="0.0801%" height="15" fill="rgb(253,202,0)" fg:x="397" fg:w="1"/><text x="32.0354%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="31.7854%" y="357" width="0.1601%" height="15" fill="rgb(235,51,20)" fg:x="397" fg:w="2"/><text x="32.0354%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8655%" y="341" width="0.0801%" height="15" fill="rgb(218,95,46)" fg:x="398" fg:w="1"/><text x="32.1155%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.0256%" y="341" width="0.0801%" height="15" fill="rgb(212,81,10)" fg:x="400" fg:w="1"/><text x="32.2756%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.0256%" y="325" width="0.0801%" height="15" fill="rgb(240,59,0)" fg:x="400" fg:w="1"/><text x="32.2756%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="32.0256%" y="309" width="0.0801%" height="15" fill="rgb(212,191,42)" fg:x="400" fg:w="1"/><text x="32.2756%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="32.0256%" y="293" width="0.0801%" height="15" fill="rgb(233,140,3)" fg:x="400" fg:w="1"/><text x="32.2756%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="32.0256%" y="277" width="0.0801%" height="15" fill="rgb(215,69,23)" fg:x="400" fg:w="1"/><text x="32.2756%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="32.0256%" y="261" width="0.0801%" height="15" fill="rgb(240,202,20)" fg:x="400" fg:w="1"/><text x="32.2756%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="32.0256%" y="245" width="0.0801%" height="15" fill="rgb(209,146,50)" fg:x="400" fg:w="1"/><text x="32.2756%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="31.9456%" y="357" width="0.2402%" height="15" fill="rgb(253,102,54)" fg:x="399" fg:w="3"/><text x="32.1956%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.1057%" y="341" width="0.0801%" height="15" fill="rgb(250,173,47)" fg:x="401" fg:w="1"/><text x="32.3557%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.1857%" y="357" width="0.0801%" height="15" fill="rgb(232,142,7)" fg:x="402" fg:w="1"/><text x="32.4357%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.4259%" y="293" width="0.0801%" height="15" fill="rgb(230,157,47)" fg:x="405" fg:w="1"/><text x="32.6759%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.4259%" y="277" width="0.0801%" height="15" fill="rgb(214,177,35)" fg:x="405" fg:w="1"/><text x="32.6759%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.4259%" y="261" width="0.0801%" height="15" fill="rgb(234,119,46)" fg:x="405" fg:w="1"/><text x="32.6759%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (10 samples, 0.80%)</title><rect x="31.7854%" y="389" width="0.8006%" height="15" fill="rgb(241,180,50)" fg:x="397" fg:w="10"/><text x="32.0354%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (10 samples, 0.80%)</title><rect x="31.7854%" y="373" width="0.8006%" height="15" fill="rgb(221,54,25)" fg:x="397" fg:w="10"/><text x="32.0354%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="32.2658%" y="357" width="0.3203%" height="15" fill="rgb(209,157,44)" fg:x="403" fg:w="4"/><text x="32.5158%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="32.2658%" y="341" width="0.3203%" height="15" fill="rgb(246,115,41)" fg:x="403" fg:w="4"/><text x="32.5158%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="32.4259%" y="325" width="0.1601%" height="15" fill="rgb(229,86,1)" fg:x="405" fg:w="2"/><text x="32.6759%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.4259%" y="309" width="0.1601%" height="15" fill="rgb(240,108,53)" fg:x="405" fg:w="2"/><text x="32.6759%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.5060%" y="293" width="0.0801%" height="15" fill="rgb(227,134,2)" fg:x="406" fg:w="1"/><text x="32.7560%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.5060%" y="277" width="0.0801%" height="15" fill="rgb(213,129,25)" fg:x="406" fg:w="1"/><text x="32.7560%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.5060%" y="261" width="0.0801%" height="15" fill="rgb(226,35,21)" fg:x="406" fg:w="1"/><text x="32.7560%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.5060%" y="245" width="0.0801%" height="15" fill="rgb(208,129,26)" fg:x="406" fg:w="1"/><text x="32.7560%" y="255.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="32.5861%" y="389" width="0.0801%" height="15" fill="rgb(224,83,6)" fg:x="407" fg:w="1"/><text x="32.8361%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.5861%" y="373" width="0.0801%" height="15" fill="rgb(227,52,39)" fg:x="407" fg:w="1"/><text x="32.8361%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.5861%" y="357" width="0.0801%" height="15" fill="rgb(241,30,17)" fg:x="407" fg:w="1"/><text x="32.8361%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="32.8263%" y="309" width="0.2402%" height="15" fill="rgb(246,186,42)" fg:x="410" fg:w="3"/><text x="33.0763%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="32.8263%" y="293" width="0.2402%" height="15" fill="rgb(221,169,15)" fg:x="410" fg:w="3"/><text x="33.0763%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="32.8263%" y="277" width="0.2402%" height="15" fill="rgb(235,108,21)" fg:x="410" fg:w="3"/><text x="33.0763%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="32.8263%" y="261" width="0.2402%" height="15" fill="rgb(219,148,30)" fg:x="410" fg:w="3"/><text x="33.0763%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="32.9864%" y="245" width="0.0801%" height="15" fill="rgb(220,109,5)" fg:x="412" fg:w="1"/><text x="33.2364%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="32.9864%" y="229" width="0.0801%" height="15" fill="rgb(213,203,48)" fg:x="412" fg:w="1"/><text x="33.2364%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.5468%" y="245" width="0.0801%" height="15" fill="rgb(244,71,33)" fg:x="419" fg:w="1"/><text x="33.7968%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7070%" y="229" width="0.0801%" height="15" fill="rgb(209,23,2)" fg:x="421" fg:w="1"/><text x="33.9570%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.96%)</title><rect x="33.6269%" y="245" width="0.9608%" height="15" fill="rgb(219,97,7)" fg:x="420" fg:w="12"/><text x="33.8769%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.80%)</title><rect x="33.7870%" y="229" width="0.8006%" height="15" fill="rgb(216,161,23)" fg:x="422" fg:w="10"/><text x="34.0370%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="34.3475%" y="213" width="0.2402%" height="15" fill="rgb(207,45,42)" fg:x="429" fg:w="3"/><text x="34.5975%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="34.5877%" y="245" width="0.0801%" height="15" fill="rgb(241,61,4)" fg:x="432" fg:w="1"/><text x="34.8377%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="34.5877%" y="229" width="0.0801%" height="15" fill="rgb(236,170,1)" fg:x="432" fg:w="1"/><text x="34.8377%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="34.5877%" y="213" width="0.0801%" height="15" fill="rgb(239,72,5)" fg:x="432" fg:w="1"/><text x="34.8377%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.5877%" y="197" width="0.0801%" height="15" fill="rgb(214,13,50)" fg:x="432" fg:w="1"/><text x="34.8377%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="34.7478%" y="229" width="0.0801%" height="15" fill="rgb(224,88,9)" fg:x="434" fg:w="1"/><text x="34.9978%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="34.6677%" y="245" width="0.3203%" height="15" fill="rgb(238,192,34)" fg:x="433" fg:w="4"/><text x="34.9177%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="34.8279%" y="229" width="0.1601%" height="15" fill="rgb(217,203,50)" fg:x="435" fg:w="2"/><text x="35.0779%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="34.9880%" y="245" width="0.0801%" height="15" fill="rgb(241,123,32)" fg:x="437" fg:w="1"/><text x="35.2380%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="35.0681%" y="197" width="0.0801%" height="15" fill="rgb(248,151,39)" fg:x="438" fg:w="1"/><text x="35.3181%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.0681%" y="181" width="0.0801%" height="15" fill="rgb(208,89,6)" fg:x="438" fg:w="1"/><text x="35.3181%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.0681%" y="165" width="0.0801%" height="15" fill="rgb(254,43,26)" fg:x="438" fg:w="1"/><text x="35.3181%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.5484%" y="181" width="0.0801%" height="15" fill="rgb(216,158,13)" fg:x="444" fg:w="1"/><text x="35.7984%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="35.6285%" y="181" width="0.0801%" height="15" fill="rgb(212,47,37)" fg:x="445" fg:w="1"/><text x="35.8785%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.6285%" y="165" width="0.0801%" height="15" fill="rgb(254,16,10)" fg:x="445" fg:w="1"/><text x="35.8785%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.6285%" y="149" width="0.0801%" height="15" fill="rgb(223,228,16)" fg:x="445" fg:w="1"/><text x="35.8785%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.6285%" y="133" width="0.0801%" height="15" fill="rgb(249,108,50)" fg:x="445" fg:w="1"/><text x="35.8785%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.7886%" y="149" width="0.0801%" height="15" fill="rgb(208,220,5)" fg:x="447" fg:w="1"/><text x="36.0386%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.7886%" y="133" width="0.0801%" height="15" fill="rgb(217,89,48)" fg:x="447" fg:w="1"/><text x="36.0386%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="35.7086%" y="181" width="0.3203%" height="15" fill="rgb(212,113,41)" fg:x="446" fg:w="4"/><text x="35.9586%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="35.7086%" y="165" width="0.3203%" height="15" fill="rgb(231,127,5)" fg:x="446" fg:w="4"/><text x="35.9586%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="35.8687%" y="149" width="0.1601%" height="15" fill="rgb(217,141,17)" fg:x="448" fg:w="2"/><text x="36.1187%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="35.9488%" y="133" width="0.0801%" height="15" fill="rgb(245,125,54)" fg:x="449" fg:w="1"/><text x="36.1988%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.9488%" y="117" width="0.0801%" height="15" fill="rgb(248,125,3)" fg:x="449" fg:w="1"/><text x="36.1988%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.9488%" y="101" width="0.0801%" height="15" fill="rgb(236,119,51)" fg:x="449" fg:w="1"/><text x="36.1988%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.9488%" y="85" width="0.0801%" height="15" fill="rgb(239,99,8)" fg:x="449" fg:w="1"/><text x="36.1988%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="36.0288%" y="181" width="0.0801%" height="15" fill="rgb(224,228,4)" fg:x="450" fg:w="1"/><text x="36.2788%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="36.0288%" y="165" width="0.0801%" height="15" fill="rgb(220,131,45)" fg:x="450" fg:w="1"/><text x="36.2788%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="36.1089%" y="149" width="0.1601%" height="15" fill="rgb(215,62,5)" fg:x="451" fg:w="2"/><text x="36.3589%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (53 samples, 4.24%)</title><rect x="36.1089%" y="181" width="4.2434%" height="15" fill="rgb(253,12,24)" fg:x="451" fg:w="53"/><text x="36.3589%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (53 samples, 4.24%)</title><rect x="36.1089%" y="165" width="4.2434%" height="15" fill="rgb(248,120,50)" fg:x="451" fg:w="53"/><text x="36.3589%" y="175.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (51 samples, 4.08%)</title><rect x="36.2690%" y="149" width="4.0833%" height="15" fill="rgb(245,194,10)" fg:x="453" fg:w="51"/><text x="36.5190%" y="159.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="40.3523%" y="181" width="0.1601%" height="15" fill="rgb(241,149,38)" fg:x="504" fg:w="2"/><text x="40.6023%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.4323%" y="165" width="0.0801%" height="15" fill="rgb(219,215,7)" fg:x="505" fg:w="1"/><text x="40.6823%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 5.60%)</title><rect x="35.0681%" y="229" width="5.6045%" height="15" fill="rgb(208,120,31)" fg:x="438" fg:w="70"/><text x="35.3181%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (70 samples, 5.60%)</title><rect x="35.0681%" y="213" width="5.6045%" height="15" fill="rgb(244,30,8)" fg:x="438" fg:w="70"/><text x="35.3181%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (69 samples, 5.52%)</title><rect x="35.1481%" y="197" width="5.5244%" height="15" fill="rgb(238,35,44)" fg:x="439" fg:w="69"/><text x="35.3981%" y="207.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="40.5124%" y="181" width="0.1601%" height="15" fill="rgb(243,218,37)" fg:x="506" fg:w="2"/><text x="40.7624%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.5925%" y="165" width="0.0801%" height="15" fill="rgb(218,169,10)" fg:x="507" fg:w="1"/><text x="40.8425%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="41.0729%" y="213" width="0.0801%" height="15" fill="rgb(221,144,10)" fg:x="513" fg:w="1"/><text x="41.3229%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.1529%" y="213" width="0.0801%" height="15" fill="rgb(226,41,38)" fg:x="514" fg:w="1"/><text x="41.4029%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="41.2330%" y="213" width="0.0801%" height="15" fill="rgb(228,3,1)" fg:x="515" fg:w="1"/><text x="41.4830%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="41.3131%" y="213" width="0.4804%" height="15" fill="rgb(209,129,12)" fg:x="516" fg:w="6"/><text x="41.5631%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.7134%" y="197" width="0.0801%" height="15" fill="rgb(213,136,33)" fg:x="521" fg:w="1"/><text x="41.9634%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="41.7934%" y="213" width="0.0801%" height="15" fill="rgb(209,181,29)" fg:x="522" fg:w="1"/><text x="42.0434%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.28%)</title><rect x="40.6725%" y="229" width="1.2810%" height="15" fill="rgb(234,173,18)" fg:x="508" fg:w="16"/><text x="40.9225%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="41.8735%" y="213" width="0.0801%" height="15" fill="rgb(227,73,47)" fg:x="523" fg:w="1"/><text x="42.1235%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.8735%" y="197" width="0.0801%" height="15" fill="rgb(234,9,34)" fg:x="523" fg:w="1"/><text x="42.1235%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (87 samples, 6.97%)</title><rect x="35.0681%" y="245" width="6.9656%" height="15" fill="rgb(235,172,15)" fg:x="438" fg:w="87"/><text x="35.3181%" y="255.50">regex_aut..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="41.9536%" y="229" width="0.0801%" height="15" fill="rgb(245,61,2)" fg:x="524" fg:w="1"/><text x="42.2036%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="41.9536%" y="213" width="0.0801%" height="15" fill="rgb(238,39,47)" fg:x="524" fg:w="1"/><text x="42.2036%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="41.9536%" y="197" width="0.0801%" height="15" fill="rgb(234,37,24)" fg:x="524" fg:w="1"/><text x="42.2036%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="42.0336%" y="245" width="0.0801%" height="15" fill="rgb(248,223,24)" fg:x="525" fg:w="1"/><text x="42.2836%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="42.0336%" y="229" width="0.0801%" height="15" fill="rgb(223,12,15)" fg:x="525" fg:w="1"/><text x="42.2836%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="42.0336%" y="213" width="0.0801%" height="15" fill="rgb(249,6,3)" fg:x="525" fg:w="1"/><text x="42.2836%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.0336%" y="197" width="0.0801%" height="15" fill="rgb(237,105,33)" fg:x="525" fg:w="1"/><text x="42.2836%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.0336%" y="181" width="0.0801%" height="15" fill="rgb(252,208,35)" fg:x="525" fg:w="1"/><text x="42.2836%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.0336%" y="165" width="0.0801%" height="15" fill="rgb(215,181,35)" fg:x="525" fg:w="1"/><text x="42.2836%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (113 samples, 9.05%)</title><rect x="33.2266%" y="261" width="9.0472%" height="15" fill="rgb(246,212,3)" fg:x="415" fg:w="113"/><text x="33.4766%" y="271.50">regex_automat..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="42.1137%" y="245" width="0.1601%" height="15" fill="rgb(247,156,24)" fg:x="526" fg:w="2"/><text x="42.3637%" y="255.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="42.2738%" y="261" width="0.0801%" height="15" fill="rgb(248,9,31)" fg:x="528" fg:w="1"/><text x="42.5238%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::NestLimiter&lt;P&gt;::check (1 samples, 0.08%)</title><rect x="42.5140%" y="229" width="0.0801%" height="15" fill="rgb(234,26,45)" fg:x="531" fg:w="1"/><text x="42.7640%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="42.5941%" y="213" width="0.1601%" height="15" fill="rgb(249,11,32)" fg:x="532" fg:w="2"/><text x="42.8441%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="42.6741%" y="197" width="0.0801%" height="15" fill="rgb(249,162,33)" fg:x="533" fg:w="1"/><text x="42.9241%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="42.5941%" y="229" width="0.6405%" height="15" fill="rgb(232,4,32)" fg:x="532" fg:w="8"/><text x="42.8441%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.48%)</title><rect x="42.7542%" y="213" width="0.4804%" height="15" fill="rgb(212,5,45)" fg:x="534" fg:w="6"/><text x="43.0042%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="42.7542%" y="197" width="0.4804%" height="15" fill="rgb(227,95,13)" fg:x="534" fg:w="6"/><text x="43.0042%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="42.7542%" y="181" width="0.4804%" height="15" fill="rgb(223,205,10)" fg:x="534" fg:w="6"/><text x="43.0042%" y="191.50"></text></g><g><title>__libc_malloc (6 samples, 0.48%)</title><rect x="42.7542%" y="165" width="0.4804%" height="15" fill="rgb(222,178,8)" fg:x="534" fg:w="6"/><text x="43.0042%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.96%)</title><rect x="42.3539%" y="261" width="0.9608%" height="15" fill="rgb(216,13,22)" fg:x="529" fg:w="12"/><text x="42.6039%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.88%)</title><rect x="42.4339%" y="245" width="0.8807%" height="15" fill="rgb(240,167,12)" fg:x="530" fg:w="11"/><text x="42.6839%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="43.2346%" y="229" width="0.0801%" height="15" fill="rgb(235,68,35)" fg:x="540" fg:w="1"/><text x="43.4846%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="43.3147%" y="213" width="0.0801%" height="15" fill="rgb(253,40,27)" fg:x="541" fg:w="1"/><text x="43.5647%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="43.3147%" y="229" width="0.1601%" height="15" fill="rgb(214,19,28)" fg:x="541" fg:w="2"/><text x="43.5647%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="43.3947%" y="213" width="0.0801%" height="15" fill="rgb(210,167,45)" fg:x="542" fg:w="1"/><text x="43.6447%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="43.3947%" y="197" width="0.0801%" height="15" fill="rgb(232,97,40)" fg:x="542" fg:w="1"/><text x="43.6447%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (131 samples, 10.49%)</title><rect x="33.0665%" y="277" width="10.4884%" height="15" fill="rgb(250,35,23)" fg:x="413" fg:w="131"/><text x="33.3165%" y="287.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="43.3147%" y="261" width="0.2402%" height="15" fill="rgb(248,47,53)" fg:x="541" fg:w="3"/><text x="43.5647%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="43.3147%" y="245" width="0.2402%" height="15" fill="rgb(226,58,50)" fg:x="541" fg:w="3"/><text x="43.5647%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="43.4748%" y="229" width="0.0801%" height="15" fill="rgb(217,105,26)" fg:x="543" fg:w="1"/><text x="43.7248%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="43.5548%" y="277" width="0.0801%" height="15" fill="rgb(208,64,1)" fg:x="544" fg:w="1"/><text x="43.8048%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (133 samples, 10.65%)</title><rect x="33.0665%" y="309" width="10.6485%" height="15" fill="rgb(214,80,1)" fg:x="413" fg:w="133"/><text x="33.3165%" y="319.50">&lt;regex::regex::s..</text></g><g><title>regex::builders::string::RegexBuilder::build (133 samples, 10.65%)</title><rect x="33.0665%" y="293" width="10.6485%" height="15" fill="rgb(206,175,26)" fg:x="413" fg:w="133"/><text x="33.3165%" y="303.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="43.6349%" y="277" width="0.0801%" height="15" fill="rgb(235,156,37)" fg:x="545" fg:w="1"/><text x="43.8849%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.7150%" y="293" width="0.0801%" height="15" fill="rgb(213,100,9)" fg:x="546" fg:w="1"/><text x="43.9650%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.8751%" y="261" width="0.0801%" height="15" fill="rgb(241,15,13)" fg:x="548" fg:w="1"/><text x="44.1251%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="43.8751%" y="277" width="0.1601%" height="15" fill="rgb(205,97,43)" fg:x="548" fg:w="2"/><text x="44.1251%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="43.9552%" y="261" width="0.0801%" height="15" fill="rgb(216,106,32)" fg:x="549" fg:w="1"/><text x="44.2052%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="43.9552%" y="245" width="0.0801%" height="15" fill="rgb(226,200,8)" fg:x="549" fg:w="1"/><text x="44.2052%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="44.0352%" y="261" width="0.1601%" height="15" fill="rgb(244,54,29)" fg:x="550" fg:w="2"/><text x="44.2852%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.1153%" y="245" width="0.0801%" height="15" fill="rgb(252,169,12)" fg:x="551" fg:w="1"/><text x="44.3653%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="43.7150%" y="309" width="0.5604%" height="15" fill="rgb(231,199,11)" fg:x="546" fg:w="7"/><text x="43.9650%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="43.7950%" y="293" width="0.4804%" height="15" fill="rgb(233,191,18)" fg:x="547" fg:w="6"/><text x="44.0450%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="44.0352%" y="277" width="0.2402%" height="15" fill="rgb(215,83,47)" fg:x="550" fg:w="3"/><text x="44.2852%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="44.1954%" y="261" width="0.0801%" height="15" fill="rgb(251,67,19)" fg:x="552" fg:w="1"/><text x="44.4454%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.1954%" y="245" width="0.0801%" height="15" fill="rgb(240,7,20)" fg:x="552" fg:w="1"/><text x="44.4454%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="44.4355%" y="261" width="0.4003%" height="15" fill="rgb(210,150,26)" fg:x="555" fg:w="5"/><text x="44.6855%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="44.5156%" y="245" width="0.3203%" height="15" fill="rgb(228,75,42)" fg:x="556" fg:w="4"/><text x="44.7656%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (152 samples, 12.17%)</title><rect x="32.7462%" y="325" width="12.1697%" height="15" fill="rgb(237,134,48)" fg:x="409" fg:w="152"/><text x="32.9962%" y="335.50">indefinite::helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="44.2754%" y="309" width="0.6405%" height="15" fill="rgb(205,80,50)" fg:x="553" fg:w="8"/><text x="44.5254%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="44.3555%" y="293" width="0.5604%" height="15" fill="rgb(217,74,48)" fg:x="554" fg:w="7"/><text x="44.6055%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="44.3555%" y="277" width="0.5604%" height="15" fill="rgb(205,82,50)" fg:x="554" fg:w="7"/><text x="44.6055%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="44.8359%" y="261" width="0.0801%" height="15" fill="rgb(228,1,33)" fg:x="560" fg:w="1"/><text x="45.0859%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="44.8359%" y="245" width="0.0801%" height="15" fill="rgb(214,50,23)" fg:x="560" fg:w="1"/><text x="45.0859%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.8359%" y="229" width="0.0801%" height="15" fill="rgb(210,62,9)" fg:x="560" fg:w="1"/><text x="45.0859%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.8359%" y="213" width="0.0801%" height="15" fill="rgb(210,104,37)" fg:x="560" fg:w="1"/><text x="45.0859%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.8359%" y="197" width="0.0801%" height="15" fill="rgb(232,104,43)" fg:x="560" fg:w="1"/><text x="45.0859%" y="207.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="44.9960%" y="293" width="0.0801%" height="15" fill="rgb(244,52,6)" fg:x="562" fg:w="1"/><text x="45.2460%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="44.9960%" y="277" width="0.0801%" height="15" fill="rgb(211,174,52)" fg:x="562" fg:w="1"/><text x="45.2460%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.9960%" y="261" width="0.0801%" height="15" fill="rgb(229,48,4)" fg:x="562" fg:w="1"/><text x="45.2460%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="45.0761%" y="229" width="0.0801%" height="15" fill="rgb(205,155,16)" fg:x="563" fg:w="1"/><text x="45.3261%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.0761%" y="213" width="0.0801%" height="15" fill="rgb(211,141,53)" fg:x="563" fg:w="1"/><text x="45.3261%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.0761%" y="197" width="0.0801%" height="15" fill="rgb(240,148,11)" fg:x="563" fg:w="1"/><text x="45.3261%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.0761%" y="181" width="0.0801%" height="15" fill="rgb(214,45,23)" fg:x="563" fg:w="1"/><text x="45.3261%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="45.0761%" y="261" width="0.1601%" height="15" fill="rgb(248,74,26)" fg:x="563" fg:w="2"/><text x="45.3261%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="45.0761%" y="245" width="0.1601%" height="15" fill="rgb(218,121,16)" fg:x="563" fg:w="2"/><text x="45.3261%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="45.1561%" y="229" width="0.0801%" height="15" fill="rgb(218,10,47)" fg:x="564" fg:w="1"/><text x="45.4061%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="45.2362%" y="261" width="0.0801%" height="15" fill="rgb(227,99,14)" fg:x="565" fg:w="1"/><text x="45.4862%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="45.4764%" y="229" width="0.1601%" height="15" fill="rgb(229,83,46)" fg:x="568" fg:w="2"/><text x="45.7264%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.80%)</title><rect x="45.3963%" y="245" width="0.8006%" height="15" fill="rgb(228,25,1)" fg:x="567" fg:w="10"/><text x="45.6463%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="45.6365%" y="229" width="0.5604%" height="15" fill="rgb(252,190,15)" fg:x="570" fg:w="7"/><text x="45.8865%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="46.1970%" y="229" width="0.4003%" height="15" fill="rgb(213,103,51)" fg:x="577" fg:w="5"/><text x="46.4470%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="46.5172%" y="213" width="0.0801%" height="15" fill="rgb(220,38,44)" fg:x="581" fg:w="1"/><text x="46.7672%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.5172%" y="197" width="0.0801%" height="15" fill="rgb(210,45,26)" fg:x="581" fg:w="1"/><text x="46.7672%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="46.1970%" y="245" width="0.4804%" height="15" fill="rgb(205,95,48)" fg:x="577" fg:w="6"/><text x="46.4470%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="46.5973%" y="229" width="0.0801%" height="15" fill="rgb(225,179,37)" fg:x="582" fg:w="1"/><text x="46.8473%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="46.5973%" y="213" width="0.0801%" height="15" fill="rgb(230,209,3)" fg:x="582" fg:w="1"/><text x="46.8473%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="46.5973%" y="197" width="0.0801%" height="15" fill="rgb(248,12,46)" fg:x="582" fg:w="1"/><text x="46.8473%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.5973%" y="181" width="0.0801%" height="15" fill="rgb(234,18,0)" fg:x="582" fg:w="1"/><text x="46.8473%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.5973%" y="165" width="0.0801%" height="15" fill="rgb(238,197,14)" fg:x="582" fg:w="1"/><text x="46.8473%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.2378%" y="213" width="0.0801%" height="15" fill="rgb(251,162,48)" fg:x="590" fg:w="1"/><text x="47.4878%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.2378%" y="197" width="0.0801%" height="15" fill="rgb(237,73,42)" fg:x="590" fg:w="1"/><text x="47.4878%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="47.3179%" y="213" width="0.4003%" height="15" fill="rgb(211,108,8)" fg:x="591" fg:w="5"/><text x="47.5679%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="47.3979%" y="197" width="0.3203%" height="15" fill="rgb(213,45,22)" fg:x="592" fg:w="4"/><text x="47.6479%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="47.4780%" y="181" width="0.2402%" height="15" fill="rgb(252,154,5)" fg:x="593" fg:w="3"/><text x="47.7280%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="47.4780%" y="165" width="0.2402%" height="15" fill="rgb(221,79,52)" fg:x="593" fg:w="3"/><text x="47.7280%" y="175.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="47.4780%" y="149" width="0.2402%" height="15" fill="rgb(229,220,36)" fg:x="593" fg:w="3"/><text x="47.7280%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="47.7182%" y="213" width="0.3203%" height="15" fill="rgb(211,17,16)" fg:x="596" fg:w="4"/><text x="47.9682%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="47.7182%" y="197" width="0.3203%" height="15" fill="rgb(222,55,31)" fg:x="596" fg:w="4"/><text x="47.9682%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="47.7182%" y="181" width="0.3203%" height="15" fill="rgb(221,221,31)" fg:x="596" fg:w="4"/><text x="47.9682%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (18 samples, 1.44%)</title><rect x="46.6773%" y="245" width="1.4412%" height="15" fill="rgb(227,168,26)" fg:x="583" fg:w="18"/><text x="46.9273%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (17 samples, 1.36%)</title><rect x="46.7574%" y="229" width="1.3611%" height="15" fill="rgb(224,139,9)" fg:x="584" fg:w="17"/><text x="47.0074%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="48.0384%" y="213" width="0.0801%" height="15" fill="rgb(254,172,0)" fg:x="600" fg:w="1"/><text x="48.2884%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="48.1986%" y="197" width="0.1601%" height="15" fill="rgb(235,203,1)" fg:x="602" fg:w="2"/><text x="48.4486%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.1986%" y="181" width="0.1601%" height="15" fill="rgb(216,205,24)" fg:x="602" fg:w="2"/><text x="48.4486%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="48.1986%" y="165" width="0.1601%" height="15" fill="rgb(233,24,6)" fg:x="602" fg:w="2"/><text x="48.4486%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="48.1986%" y="149" width="0.1601%" height="15" fill="rgb(244,110,9)" fg:x="602" fg:w="2"/><text x="48.4486%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="48.9191%" y="133" width="0.2402%" height="15" fill="rgb(239,222,42)" fg:x="611" fg:w="3"/><text x="49.1691%" y="143.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="49.1593%" y="133" width="0.2402%" height="15" fill="rgb(218,145,13)" fg:x="614" fg:w="3"/><text x="49.4093%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.64%)</title><rect x="49.3995%" y="133" width="0.6405%" height="15" fill="rgb(207,69,11)" fg:x="617" fg:w="8"/><text x="49.6495%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="49.6397%" y="117" width="0.4003%" height="15" fill="rgb(220,223,22)" fg:x="620" fg:w="5"/><text x="49.8897%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="49.7198%" y="101" width="0.3203%" height="15" fill="rgb(245,102,5)" fg:x="621" fg:w="4"/><text x="49.9698%" y="111.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="49.7198%" y="85" width="0.3203%" height="15" fill="rgb(211,148,2)" fg:x="621" fg:w="4"/><text x="49.9698%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="50.0400%" y="133" width="0.0801%" height="15" fill="rgb(241,13,44)" fg:x="625" fg:w="1"/><text x="50.2900%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.0400%" y="117" width="0.0801%" height="15" fill="rgb(219,137,21)" fg:x="625" fg:w="1"/><text x="50.2900%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.0400%" y="101" width="0.0801%" height="15" fill="rgb(242,206,5)" fg:x="625" fg:w="1"/><text x="50.2900%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.0400%" y="85" width="0.0801%" height="15" fill="rgb(217,114,22)" fg:x="625" fg:w="1"/><text x="50.2900%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.2802%" y="101" width="0.0801%" height="15" fill="rgb(253,206,42)" fg:x="628" fg:w="1"/><text x="50.5302%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.2802%" y="85" width="0.0801%" height="15" fill="rgb(236,102,18)" fg:x="628" fg:w="1"/><text x="50.5302%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.7606%" y="85" width="0.0801%" height="15" fill="rgb(208,59,49)" fg:x="634" fg:w="1"/><text x="51.0106%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.80%)</title><rect x="50.1201%" y="133" width="0.8006%" height="15" fill="rgb(215,194,28)" fg:x="626" fg:w="10"/><text x="50.3701%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.72%)</title><rect x="50.2002%" y="117" width="0.7206%" height="15" fill="rgb(243,207,11)" fg:x="627" fg:w="9"/><text x="50.4502%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.56%)</title><rect x="50.3603%" y="101" width="0.5604%" height="15" fill="rgb(254,179,35)" fg:x="629" fg:w="7"/><text x="50.6103%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.8407%" y="85" width="0.0801%" height="15" fill="rgb(235,97,3)" fg:x="635" fg:w="1"/><text x="51.0907%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.8407%" y="69" width="0.0801%" height="15" fill="rgb(215,155,33)" fg:x="635" fg:w="1"/><text x="51.0907%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.8407%" y="53" width="0.0801%" height="15" fill="rgb(223,128,12)" fg:x="635" fg:w="1"/><text x="51.0907%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.8407%" y="37" width="0.0801%" height="15" fill="rgb(208,157,18)" fg:x="635" fg:w="1"/><text x="51.0907%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="50.9207%" y="133" width="0.0801%" height="15" fill="rgb(249,70,54)" fg:x="636" fg:w="1"/><text x="51.1707%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="50.9207%" y="117" width="0.0801%" height="15" fill="rgb(244,118,24)" fg:x="636" fg:w="1"/><text x="51.1707%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.0008%" y="101" width="0.0801%" height="15" fill="rgb(211,54,0)" fg:x="637" fg:w="1"/><text x="51.2508%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (52 samples, 4.16%)</title><rect x="51.0008%" y="133" width="4.1633%" height="15" fill="rgb(245,137,45)" fg:x="637" fg:w="52"/><text x="51.2508%" y="143.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (52 samples, 4.16%)</title><rect x="51.0008%" y="117" width="4.1633%" height="15" fill="rgb(232,154,31)" fg:x="637" fg:w="52"/><text x="51.2508%" y="127.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (51 samples, 4.08%)</title><rect x="51.0809%" y="101" width="4.0833%" height="15" fill="rgb(253,6,39)" fg:x="638" fg:w="51"/><text x="51.3309%" y="111.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="55.1641%" y="133" width="0.1601%" height="15" fill="rgb(234,183,24)" fg:x="689" fg:w="2"/><text x="55.4141%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 7.37%)</title><rect x="48.1185%" y="229" width="7.3659%" height="15" fill="rgb(252,84,40)" fg:x="601" fg:w="92"/><text x="48.3685%" y="239.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (91 samples, 7.29%)</title><rect x="48.1986%" y="213" width="7.2858%" height="15" fill="rgb(224,65,2)" fg:x="602" fg:w="91"/><text x="48.4486%" y="223.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (89 samples, 7.13%)</title><rect x="48.3587%" y="197" width="7.1257%" height="15" fill="rgb(229,38,24)" fg:x="604" fg:w="89"/><text x="48.6087%" y="207.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (89 samples, 7.13%)</title><rect x="48.3587%" y="181" width="7.1257%" height="15" fill="rgb(218,131,50)" fg:x="604" fg:w="89"/><text x="48.6087%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (89 samples, 7.13%)</title><rect x="48.3587%" y="165" width="7.1257%" height="15" fill="rgb(233,106,18)" fg:x="604" fg:w="89"/><text x="48.6087%" y="175.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (89 samples, 7.13%)</title><rect x="48.3587%" y="149" width="7.1257%" height="15" fill="rgb(220,216,11)" fg:x="604" fg:w="89"/><text x="48.6087%" y="159.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="55.3243%" y="133" width="0.1601%" height="15" fill="rgb(251,100,45)" fg:x="691" fg:w="2"/><text x="55.5743%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.4043%" y="117" width="0.0801%" height="15" fill="rgb(235,143,32)" fg:x="692" fg:w="1"/><text x="55.6543%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.4043%" y="101" width="0.0801%" height="15" fill="rgb(248,124,34)" fg:x="692" fg:w="1"/><text x="55.6543%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.4043%" y="85" width="0.0801%" height="15" fill="rgb(225,221,4)" fg:x="692" fg:w="1"/><text x="55.6543%" y="95.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="55.4844%" y="213" width="0.0801%" height="15" fill="rgb(242,27,43)" fg:x="693" fg:w="1"/><text x="55.7344%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.5645%" y="213" width="0.0801%" height="15" fill="rgb(227,54,8)" fg:x="694" fg:w="1"/><text x="55.8145%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="55.6445%" y="213" width="0.2402%" height="15" fill="rgb(253,139,49)" fg:x="695" fg:w="3"/><text x="55.8945%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.8046%" y="197" width="0.0801%" height="15" fill="rgb(231,26,43)" fg:x="697" fg:w="1"/><text x="56.0546%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.8046%" y="181" width="0.0801%" height="15" fill="rgb(207,121,39)" fg:x="697" fg:w="1"/><text x="56.0546%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.8046%" y="165" width="0.0801%" height="15" fill="rgb(223,101,35)" fg:x="697" fg:w="1"/><text x="56.0546%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="55.8847%" y="213" width="0.5604%" height="15" fill="rgb(232,87,23)" fg:x="698" fg:w="7"/><text x="56.1347%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.24%)</title><rect x="56.4452%" y="213" width="0.2402%" height="15" fill="rgb(225,180,29)" fg:x="705" fg:w="3"/><text x="56.6952%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (108 samples, 8.65%)</title><rect x="48.1185%" y="245" width="8.6469%" height="15" fill="rgb(225,25,17)" fg:x="601" fg:w="108"/><text x="48.3685%" y="255.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.28%)</title><rect x="55.4844%" y="229" width="1.2810%" height="15" fill="rgb(223,8,52)" fg:x="693" fg:w="16"/><text x="55.7344%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="56.6853%" y="213" width="0.0801%" height="15" fill="rgb(246,42,21)" fg:x="708" fg:w="1"/><text x="56.9353%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="56.6853%" y="197" width="0.0801%" height="15" fill="rgb(205,64,43)" fg:x="708" fg:w="1"/><text x="56.9353%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.6853%" y="181" width="0.0801%" height="15" fill="rgb(221,160,13)" fg:x="708" fg:w="1"/><text x="56.9353%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.6853%" y="165" width="0.0801%" height="15" fill="rgb(239,58,35)" fg:x="708" fg:w="1"/><text x="56.9353%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (144 samples, 11.53%)</title><rect x="45.3163%" y="261" width="11.5292%" height="15" fill="rgb(251,26,40)" fg:x="566" fg:w="144"/><text x="45.5663%" y="271.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.7654%" y="245" width="0.0801%" height="15" fill="rgb(247,0,4)" fg:x="709" fg:w="1"/><text x="57.0154%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="56.7654%" y="229" width="0.0801%" height="15" fill="rgb(218,130,10)" fg:x="709" fg:w="1"/><text x="57.0154%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.7654%" y="213" width="0.0801%" height="15" fill="rgb(239,32,7)" fg:x="709" fg:w="1"/><text x="57.0154%" y="223.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="56.8455%" y="261" width="0.0801%" height="15" fill="rgb(210,192,24)" fg:x="710" fg:w="1"/><text x="57.0955%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="56.8455%" y="245" width="0.0801%" height="15" fill="rgb(226,212,17)" fg:x="710" fg:w="1"/><text x="57.0955%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="56.8455%" y="229" width="0.0801%" height="15" fill="rgb(219,201,28)" fg:x="710" fg:w="1"/><text x="57.0955%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="56.8455%" y="213" width="0.0801%" height="15" fill="rgb(235,207,41)" fg:x="710" fg:w="1"/><text x="57.0955%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="56.9255%" y="229" width="0.0801%" height="15" fill="rgb(241,95,54)" fg:x="711" fg:w="1"/><text x="57.1755%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="57.0056%" y="229" width="0.3203%" height="15" fill="rgb(248,12,23)" fg:x="712" fg:w="4"/><text x="57.2556%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="57.0857%" y="213" width="0.2402%" height="15" fill="rgb(228,173,4)" fg:x="713" fg:w="3"/><text x="57.3357%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="57.0857%" y="197" width="0.2402%" height="15" fill="rgb(254,99,5)" fg:x="713" fg:w="3"/><text x="57.3357%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="57.0857%" y="181" width="0.2402%" height="15" fill="rgb(212,184,17)" fg:x="713" fg:w="3"/><text x="57.3357%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="57.0857%" y="165" width="0.2402%" height="15" fill="rgb(252,174,1)" fg:x="713" fg:w="3"/><text x="57.3357%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="57.3259%" y="229" width="0.0801%" height="15" fill="rgb(241,118,51)" fg:x="716" fg:w="1"/><text x="57.5759%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="56.9255%" y="261" width="0.7206%" height="15" fill="rgb(227,94,47)" fg:x="711" fg:w="9"/><text x="57.1755%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="56.9255%" y="245" width="0.7206%" height="15" fill="rgb(229,104,2)" fg:x="711" fg:w="9"/><text x="57.1755%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="57.4059%" y="229" width="0.2402%" height="15" fill="rgb(219,28,31)" fg:x="717" fg:w="3"/><text x="57.6559%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="57.5661%" y="213" width="0.0801%" height="15" fill="rgb(233,109,36)" fg:x="719" fg:w="1"/><text x="57.8161%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.7262%" y="213" width="0.0801%" height="15" fill="rgb(246,88,11)" fg:x="721" fg:w="1"/><text x="57.9762%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.7262%" y="197" width="0.0801%" height="15" fill="rgb(209,212,17)" fg:x="721" fg:w="1"/><text x="57.9762%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.7262%" y="181" width="0.0801%" height="15" fill="rgb(243,59,29)" fg:x="721" fg:w="1"/><text x="57.9762%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="57.8062%" y="213" width="0.0801%" height="15" fill="rgb(244,205,48)" fg:x="722" fg:w="1"/><text x="58.0562%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="57.8062%" y="197" width="0.0801%" height="15" fill="rgb(227,30,6)" fg:x="722" fg:w="1"/><text x="58.0562%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="57.7262%" y="229" width="0.2402%" height="15" fill="rgb(220,205,48)" fg:x="721" fg:w="3"/><text x="57.9762%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="57.8863%" y="213" width="0.0801%" height="15" fill="rgb(250,94,14)" fg:x="723" fg:w="1"/><text x="58.1363%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="57.8863%" y="197" width="0.0801%" height="15" fill="rgb(216,119,42)" fg:x="723" fg:w="1"/><text x="58.1363%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (164 samples, 13.13%)</title><rect x="44.9960%" y="309" width="13.1305%" height="15" fill="rgb(232,155,0)" fg:x="562" fg:w="164"/><text x="45.2460%" y="319.50">&lt;regex::regex::strin..</text></g><g><title>regex::builders::string::RegexBuilder::build (163 samples, 13.05%)</title><rect x="45.0761%" y="293" width="13.0504%" height="15" fill="rgb(212,24,32)" fg:x="563" fg:w="163"/><text x="45.3261%" y="303.50">regex::builders::str..</text></g><g><title>regex_automata::meta::regex::Builder::build (163 samples, 13.05%)</title><rect x="45.0761%" y="277" width="13.0504%" height="15" fill="rgb(216,69,20)" fg:x="563" fg:w="163"/><text x="45.3261%" y="287.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="57.6461%" y="261" width="0.4804%" height="15" fill="rgb(229,73,31)" fg:x="720" fg:w="6"/><text x="57.8961%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="57.6461%" y="245" width="0.4804%" height="15" fill="rgb(224,219,20)" fg:x="720" fg:w="6"/><text x="57.8961%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="57.9664%" y="229" width="0.1601%" height="15" fill="rgb(215,146,41)" fg:x="724" fg:w="2"/><text x="58.2164%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="58.0464%" y="213" width="0.0801%" height="15" fill="rgb(244,71,31)" fg:x="725" fg:w="1"/><text x="58.2964%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.0464%" y="197" width="0.0801%" height="15" fill="rgb(224,24,11)" fg:x="725" fg:w="1"/><text x="58.2964%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.0464%" y="181" width="0.0801%" height="15" fill="rgb(229,76,15)" fg:x="725" fg:w="1"/><text x="58.2964%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="58.1265%" y="261" width="0.0801%" height="15" fill="rgb(209,93,2)" fg:x="726" fg:w="1"/><text x="58.3765%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.1265%" y="245" width="0.0801%" height="15" fill="rgb(216,200,50)" fg:x="726" fg:w="1"/><text x="58.3765%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="58.1265%" y="277" width="0.1601%" height="15" fill="rgb(211,67,34)" fg:x="726" fg:w="2"/><text x="58.3765%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="58.2066%" y="261" width="0.0801%" height="15" fill="rgb(225,87,47)" fg:x="727" fg:w="1"/><text x="58.4566%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.2066%" y="245" width="0.0801%" height="15" fill="rgb(217,185,16)" fg:x="727" fg:w="1"/><text x="58.4566%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.2066%" y="229" width="0.0801%" height="15" fill="rgb(205,0,0)" fg:x="727" fg:w="1"/><text x="58.4566%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="58.1265%" y="309" width="0.2402%" height="15" fill="rgb(207,116,45)" fg:x="726" fg:w="3"/><text x="58.3765%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="58.1265%" y="293" width="0.2402%" height="15" fill="rgb(221,156,26)" fg:x="726" fg:w="3"/><text x="58.3765%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="58.2866%" y="277" width="0.0801%" height="15" fill="rgb(213,140,4)" fg:x="728" fg:w="1"/><text x="58.5366%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.2866%" y="261" width="0.0801%" height="15" fill="rgb(231,224,15)" fg:x="728" fg:w="1"/><text x="58.5366%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.8471%" y="213" width="0.0801%" height="15" fill="rgb(244,76,20)" fg:x="735" fg:w="1"/><text x="59.0971%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.8471%" y="197" width="0.0801%" height="15" fill="rgb(238,117,7)" fg:x="735" fg:w="1"/><text x="59.0971%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.8471%" y="181" width="0.0801%" height="15" fill="rgb(235,1,10)" fg:x="735" fg:w="1"/><text x="59.0971%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (177 samples, 14.17%)</title><rect x="44.9159%" y="325" width="14.1713%" height="15" fill="rgb(216,165,6)" fg:x="561" fg:w="177"/><text x="45.1659%" y="335.50">indefinite::rules::num..</text></g><g><title>regex::regex::string::Regex::is_match_at (9 samples, 0.72%)</title><rect x="58.3667%" y="309" width="0.7206%" height="15" fill="rgb(246,91,35)" fg:x="729" fg:w="9"/><text x="58.6167%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.72%)</title><rect x="58.3667%" y="293" width="0.7206%" height="15" fill="rgb(228,96,24)" fg:x="729" fg:w="9"/><text x="58.6167%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="58.3667%" y="277" width="0.7206%" height="15" fill="rgb(254,217,53)" fg:x="729" fg:w="9"/><text x="58.6167%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="58.3667%" y="261" width="0.7206%" height="15" fill="rgb(209,60,0)" fg:x="729" fg:w="9"/><text x="58.6167%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="58.4468%" y="245" width="0.6405%" height="15" fill="rgb(250,93,26)" fg:x="730" fg:w="8"/><text x="58.6968%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="58.5268%" y="229" width="0.5604%" height="15" fill="rgb(211,9,40)" fg:x="731" fg:w="7"/><text x="58.7768%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="58.9271%" y="213" width="0.1601%" height="15" fill="rgb(242,57,20)" fg:x="736" fg:w="2"/><text x="59.1771%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="59.0873%" y="245" width="0.1601%" height="15" fill="rgb(248,85,48)" fg:x="738" fg:w="2"/><text x="59.3373%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="59.0873%" y="229" width="0.1601%" height="15" fill="rgb(212,117,2)" fg:x="738" fg:w="2"/><text x="59.3373%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.1673%" y="213" width="0.0801%" height="15" fill="rgb(243,19,3)" fg:x="739" fg:w="1"/><text x="59.4173%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.1673%" y="197" width="0.0801%" height="15" fill="rgb(232,217,24)" fg:x="739" fg:w="1"/><text x="59.4173%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.1673%" y="181" width="0.0801%" height="15" fill="rgb(224,175,40)" fg:x="739" fg:w="1"/><text x="59.4173%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.1673%" y="165" width="0.0801%" height="15" fill="rgb(212,162,32)" fg:x="739" fg:w="1"/><text x="59.4173%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="59.2474%" y="213" width="0.0801%" height="15" fill="rgb(215,9,4)" fg:x="740" fg:w="1"/><text x="59.4974%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="59.2474%" y="229" width="0.1601%" height="15" fill="rgb(242,42,7)" fg:x="740" fg:w="2"/><text x="59.4974%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="59.3275%" y="213" width="0.0801%" height="15" fill="rgb(242,184,45)" fg:x="741" fg:w="1"/><text x="59.5775%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.3275%" y="197" width="0.0801%" height="15" fill="rgb(228,111,51)" fg:x="741" fg:w="1"/><text x="59.5775%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="59.4075%" y="229" width="0.3203%" height="15" fill="rgb(236,147,17)" fg:x="742" fg:w="4"/><text x="59.6575%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="59.4876%" y="213" width="0.2402%" height="15" fill="rgb(210,75,22)" fg:x="743" fg:w="3"/><text x="59.7376%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="59.7278%" y="229" width="0.0801%" height="15" fill="rgb(217,159,45)" fg:x="746" fg:w="1"/><text x="59.9778%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="59.8879%" y="213" width="0.0801%" height="15" fill="rgb(245,165,53)" fg:x="748" fg:w="1"/><text x="60.1379%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="59.8879%" y="197" width="0.0801%" height="15" fill="rgb(251,190,50)" fg:x="748" fg:w="1"/><text x="60.1379%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="59.8879%" y="181" width="0.0801%" height="15" fill="rgb(208,203,29)" fg:x="748" fg:w="1"/><text x="60.1379%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="59.8879%" y="165" width="0.0801%" height="15" fill="rgb(207,209,35)" fg:x="748" fg:w="1"/><text x="60.1379%" y="175.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="59.8879%" y="149" width="0.0801%" height="15" fill="rgb(230,144,49)" fg:x="748" fg:w="1"/><text x="60.1379%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="59.9680%" y="197" width="0.0801%" height="15" fill="rgb(229,31,6)" fg:x="749" fg:w="1"/><text x="60.2180%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (13 samples, 1.04%)</title><rect x="59.2474%" y="245" width="1.0408%" height="15" fill="rgb(251,129,24)" fg:x="740" fg:w="13"/><text x="59.4974%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="59.8078%" y="229" width="0.4804%" height="15" fill="rgb(235,105,15)" fg:x="747" fg:w="6"/><text x="60.0578%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="59.9680%" y="213" width="0.3203%" height="15" fill="rgb(216,52,43)" fg:x="749" fg:w="4"/><text x="60.2180%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="60.0480%" y="197" width="0.2402%" height="15" fill="rgb(238,144,41)" fg:x="750" fg:w="3"/><text x="60.2980%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="60.3683%" y="197" width="0.0801%" height="15" fill="rgb(243,63,9)" fg:x="754" fg:w="1"/><text x="60.6183%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="60.2882%" y="213" width="0.2402%" height="15" fill="rgb(246,208,1)" fg:x="753" fg:w="3"/><text x="60.5382%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="60.4484%" y="197" width="0.0801%" height="15" fill="rgb(233,182,18)" fg:x="755" fg:w="1"/><text x="60.6984%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.4484%" y="181" width="0.0801%" height="15" fill="rgb(242,224,8)" fg:x="755" fg:w="1"/><text x="60.6984%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.4484%" y="165" width="0.0801%" height="15" fill="rgb(243,54,37)" fg:x="755" fg:w="1"/><text x="60.6984%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.4484%" y="149" width="0.0801%" height="15" fill="rgb(233,192,12)" fg:x="755" fg:w="1"/><text x="60.6984%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="60.2882%" y="245" width="0.3203%" height="15" fill="rgb(251,192,53)" fg:x="753" fg:w="4"/><text x="60.5382%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="60.2882%" y="229" width="0.3203%" height="15" fill="rgb(246,141,26)" fg:x="753" fg:w="4"/><text x="60.5382%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="60.5284%" y="213" width="0.0801%" height="15" fill="rgb(239,195,19)" fg:x="756" fg:w="1"/><text x="60.7784%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="60.5284%" y="197" width="0.0801%" height="15" fill="rgb(241,16,39)" fg:x="756" fg:w="1"/><text x="60.7784%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="60.6085%" y="213" width="0.0801%" height="15" fill="rgb(223,13,53)" fg:x="757" fg:w="1"/><text x="60.8585%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="60.6085%" y="197" width="0.0801%" height="15" fill="rgb(214,227,0)" fg:x="757" fg:w="1"/><text x="60.8585%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (21 samples, 1.68%)</title><rect x="59.0873%" y="293" width="1.6813%" height="15" fill="rgb(228,103,26)" fg:x="738" fg:w="21"/><text x="59.3373%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (21 samples, 1.68%)</title><rect x="59.0873%" y="277" width="1.6813%" height="15" fill="rgb(254,177,53)" fg:x="738" fg:w="21"/><text x="59.3373%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (21 samples, 1.68%)</title><rect x="59.0873%" y="261" width="1.6813%" height="15" fill="rgb(208,201,34)" fg:x="738" fg:w="21"/><text x="59.3373%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="60.6085%" y="245" width="0.1601%" height="15" fill="rgb(212,39,5)" fg:x="757" fg:w="2"/><text x="60.8585%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="60.6085%" y="229" width="0.1601%" height="15" fill="rgb(246,117,3)" fg:x="757" fg:w="2"/><text x="60.8585%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="60.6886%" y="213" width="0.0801%" height="15" fill="rgb(244,118,39)" fg:x="758" fg:w="1"/><text x="60.9386%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="60.6886%" y="197" width="0.0801%" height="15" fill="rgb(241,64,10)" fg:x="758" fg:w="1"/><text x="60.9386%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="60.6886%" y="181" width="0.0801%" height="15" fill="rgb(229,39,44)" fg:x="758" fg:w="1"/><text x="60.9386%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.6886%" y="165" width="0.0801%" height="15" fill="rgb(230,226,3)" fg:x="758" fg:w="1"/><text x="60.9386%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.7686%" y="245" width="0.0801%" height="15" fill="rgb(222,13,42)" fg:x="759" fg:w="1"/><text x="61.0186%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7686%" y="229" width="0.0801%" height="15" fill="rgb(247,180,54)" fg:x="759" fg:w="1"/><text x="61.0186%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="60.7686%" y="261" width="0.1601%" height="15" fill="rgb(205,96,16)" fg:x="759" fg:w="2"/><text x="61.0186%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="60.8487%" y="245" width="0.0801%" height="15" fill="rgb(205,100,21)" fg:x="760" fg:w="1"/><text x="61.0987%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.8487%" y="229" width="0.0801%" height="15" fill="rgb(248,51,4)" fg:x="760" fg:w="1"/><text x="61.0987%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="60.7686%" y="293" width="0.3203%" height="15" fill="rgb(217,197,30)" fg:x="759" fg:w="4"/><text x="61.0186%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="60.7686%" y="277" width="0.3203%" height="15" fill="rgb(240,179,40)" fg:x="759" fg:w="4"/><text x="61.0186%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="60.9287%" y="261" width="0.1601%" height="15" fill="rgb(212,185,35)" fg:x="761" fg:w="2"/><text x="61.1787%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="60.9287%" y="245" width="0.1601%" height="15" fill="rgb(251,222,31)" fg:x="761" fg:w="2"/><text x="61.1787%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.0088%" y="229" width="0.0801%" height="15" fill="rgb(208,140,36)" fg:x="762" fg:w="1"/><text x="61.2588%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="61.0889%" y="229" width="0.3203%" height="15" fill="rgb(220,148,1)" fg:x="763" fg:w="4"/><text x="61.3389%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="61.2490%" y="213" width="0.1601%" height="15" fill="rgb(254,4,28)" fg:x="765" fg:w="2"/><text x="61.4990%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (30 samples, 2.40%)</title><rect x="59.0873%" y="309" width="2.4019%" height="15" fill="rgb(222,185,44)" fg:x="738" fg:w="30"/><text x="59.3373%" y="319.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="61.0889%" y="293" width="0.4003%" height="15" fill="rgb(215,74,39)" fg:x="763" fg:w="5"/><text x="61.3389%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="61.0889%" y="277" width="0.4003%" height="15" fill="rgb(247,86,4)" fg:x="763" fg:w="5"/><text x="61.3389%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="61.0889%" y="261" width="0.4003%" height="15" fill="rgb(231,105,32)" fg:x="763" fg:w="5"/><text x="61.3389%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="61.0889%" y="245" width="0.4003%" height="15" fill="rgb(222,65,35)" fg:x="763" fg:w="5"/><text x="61.3389%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="61.4091%" y="229" width="0.0801%" height="15" fill="rgb(218,145,35)" fg:x="767" fg:w="1"/><text x="61.6591%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.4091%" y="213" width="0.0801%" height="15" fill="rgb(208,7,15)" fg:x="767" fg:w="1"/><text x="61.6591%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.4091%" y="197" width="0.0801%" height="15" fill="rgb(209,83,13)" fg:x="767" fg:w="1"/><text x="61.6591%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (388 samples, 31.06%)</title><rect x="30.5845%" y="405" width="31.0649%" height="15" fill="rgb(218,3,10)" fg:x="382" fg:w="388"/><text x="30.8345%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::lookin..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (362 samples, 28.98%)</title><rect x="32.6661%" y="389" width="28.9832%" height="15" fill="rgb(211,219,4)" fg:x="408" fg:w="362"/><text x="32.9161%" y="399.50">plugins_core::looking::model::Unqualified::qual..</text></g><g><title>indefinite::indefinite (362 samples, 28.98%)</title><rect x="32.6661%" y="373" width="28.9832%" height="15" fill="rgb(228,194,12)" fg:x="408" fg:w="362"/><text x="32.9161%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (362 samples, 28.98%)</title><rect x="32.6661%" y="357" width="28.9832%" height="15" fill="rgb(210,175,7)" fg:x="408" fg:w="362"/><text x="32.9161%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (362 samples, 28.98%)</title><rect x="32.6661%" y="341" width="28.9832%" height="15" fill="rgb(243,132,6)" fg:x="408" fg:w="362"/><text x="32.9161%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (32 samples, 2.56%)</title><rect x="59.0873%" y="325" width="2.5620%" height="15" fill="rgb(207,72,18)" fg:x="738" fg:w="32"/><text x="59.3373%" y="335.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="61.4892%" y="309" width="0.1601%" height="15" fill="rgb(236,1,18)" fg:x="768" fg:w="2"/><text x="61.7392%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.6493%" y="389" width="0.0801%" height="15" fill="rgb(227,0,18)" fg:x="770" fg:w="1"/><text x="61.8993%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.6493%" y="373" width="0.0801%" height="15" fill="rgb(247,37,5)" fg:x="770" fg:w="1"/><text x="61.8993%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.6493%" y="357" width="0.0801%" height="15" fill="rgb(237,179,24)" fg:x="770" fg:w="1"/><text x="61.8993%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.6493%" y="341" width="0.0801%" height="15" fill="rgb(226,53,20)" fg:x="770" fg:w="1"/><text x="61.8993%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.6493%" y="325" width="0.0801%" height="15" fill="rgb(247,75,7)" fg:x="770" fg:w="1"/><text x="61.8993%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.6493%" y="309" width="0.0801%" height="15" fill="rgb(233,96,12)" fg:x="770" fg:w="1"/><text x="61.8993%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.6493%" y="293" width="0.0801%" height="15" fill="rgb(224,125,0)" fg:x="770" fg:w="1"/><text x="61.8993%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.6493%" y="277" width="0.0801%" height="15" fill="rgb(224,92,25)" fg:x="770" fg:w="1"/><text x="61.8993%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.6493%" y="261" width="0.0801%" height="15" fill="rgb(224,42,24)" fg:x="770" fg:w="1"/><text x="61.8993%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.6493%" y="245" width="0.0801%" height="15" fill="rgb(234,132,49)" fg:x="770" fg:w="1"/><text x="61.8993%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.6493%" y="229" width="0.0801%" height="15" fill="rgb(248,100,35)" fg:x="770" fg:w="1"/><text x="61.8993%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.6493%" y="213" width="0.0801%" height="15" fill="rgb(239,94,40)" fg:x="770" fg:w="1"/><text x="61.8993%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.6493%" y="197" width="0.0801%" height="15" fill="rgb(235,139,28)" fg:x="770" fg:w="1"/><text x="61.8993%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.6493%" y="181" width="0.0801%" height="15" fill="rgb(217,144,7)" fg:x="770" fg:w="1"/><text x="61.8993%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.6493%" y="165" width="0.0801%" height="15" fill="rgb(227,55,4)" fg:x="770" fg:w="1"/><text x="61.8993%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.6493%" y="149" width="0.0801%" height="15" fill="rgb(252,82,54)" fg:x="770" fg:w="1"/><text x="61.8993%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6493%" y="133" width="0.0801%" height="15" fill="rgb(245,172,4)" fg:x="770" fg:w="1"/><text x="61.8993%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="61.7294%" y="389" width="0.0801%" height="15" fill="rgb(207,26,27)" fg:x="771" fg:w="1"/><text x="61.9794%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="61.7294%" y="373" width="0.0801%" height="15" fill="rgb(252,98,18)" fg:x="771" fg:w="1"/><text x="61.9794%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="61.7294%" y="357" width="0.0801%" height="15" fill="rgb(244,8,26)" fg:x="771" fg:w="1"/><text x="61.9794%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.8094%" y="357" width="0.0801%" height="15" fill="rgb(237,173,45)" fg:x="772" fg:w="1"/><text x="62.0594%" y="367.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (3 samples, 0.24%)</title><rect x="61.8895%" y="309" width="0.2402%" height="15" fill="rgb(208,213,49)" fg:x="773" fg:w="3"/><text x="62.1395%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.0496%" y="293" width="0.0801%" height="15" fill="rgb(212,122,37)" fg:x="775" fg:w="1"/><text x="62.2996%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0496%" y="277" width="0.0801%" height="15" fill="rgb(213,80,17)" fg:x="775" fg:w="1"/><text x="62.2996%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.0496%" y="261" width="0.0801%" height="15" fill="rgb(206,210,43)" fg:x="775" fg:w="1"/><text x="62.2996%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.0496%" y="245" width="0.0801%" height="15" fill="rgb(229,214,3)" fg:x="775" fg:w="1"/><text x="62.2996%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.0496%" y="229" width="0.0801%" height="15" fill="rgb(235,213,29)" fg:x="775" fg:w="1"/><text x="62.2996%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (5 samples, 0.40%)</title><rect x="61.8895%" y="357" width="0.4003%" height="15" fill="rgb(248,135,26)" fg:x="773" fg:w="5"/><text x="62.1395%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (5 samples, 0.40%)</title><rect x="61.8895%" y="341" width="0.4003%" height="15" fill="rgb(242,188,12)" fg:x="773" fg:w="5"/><text x="62.1395%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (5 samples, 0.40%)</title><rect x="61.8895%" y="325" width="0.4003%" height="15" fill="rgb(245,38,12)" fg:x="773" fg:w="5"/><text x="62.1395%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.1297%" y="309" width="0.1601%" height="15" fill="rgb(218,42,13)" fg:x="776" fg:w="2"/><text x="62.3797%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.1297%" y="293" width="0.1601%" height="15" fill="rgb(238,132,49)" fg:x="776" fg:w="2"/><text x="62.3797%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (9 samples, 0.72%)</title><rect x="61.6493%" y="405" width="0.7206%" height="15" fill="rgb(209,196,19)" fg:x="770" fg:w="9"/><text x="61.8993%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="61.8094%" y="389" width="0.5604%" height="15" fill="rgb(244,131,22)" fg:x="772" fg:w="7"/><text x="62.0594%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="61.8094%" y="373" width="0.5604%" height="15" fill="rgb(223,18,34)" fg:x="772" fg:w="7"/><text x="62.0594%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2898%" y="357" width="0.0801%" height="15" fill="rgb(252,124,54)" fg:x="778" fg:w="1"/><text x="62.5398%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2898%" y="341" width="0.0801%" height="15" fill="rgb(229,106,42)" fg:x="778" fg:w="1"/><text x="62.5398%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.2898%" y="325" width="0.0801%" height="15" fill="rgb(221,129,1)" fg:x="778" fg:w="1"/><text x="62.5398%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2898%" y="309" width="0.0801%" height="15" fill="rgb(229,74,15)" fg:x="778" fg:w="1"/><text x="62.5398%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="62.3699%" y="405" width="0.1601%" height="15" fill="rgb(210,206,50)" fg:x="779" fg:w="2"/><text x="62.6199%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;replies::ObservedEntity&gt;&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="62.3699%" y="389" width="0.1601%" height="15" fill="rgb(251,114,31)" fg:x="779" fg:w="2"/><text x="62.6199%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="62.6101%" y="357" width="0.0801%" height="15" fill="rgb(215,225,28)" fg:x="782" fg:w="1"/><text x="62.8601%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6101%" y="341" width="0.0801%" height="15" fill="rgb(237,109,14)" fg:x="782" fg:w="1"/><text x="62.8601%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6101%" y="325" width="0.0801%" height="15" fill="rgb(230,13,37)" fg:x="782" fg:w="1"/><text x="62.8601%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.6101%" y="309" width="0.0801%" height="15" fill="rgb(231,40,28)" fg:x="782" fg:w="1"/><text x="62.8601%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6101%" y="293" width="0.0801%" height="15" fill="rgb(231,202,18)" fg:x="782" fg:w="1"/><text x="62.8601%" y="303.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="62.6101%" y="373" width="0.1601%" height="15" fill="rgb(225,33,18)" fg:x="782" fg:w="2"/><text x="62.8601%" y="383.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="62.6902%" y="357" width="0.0801%" height="15" fill="rgb(223,64,47)" fg:x="783" fg:w="1"/><text x="62.9402%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.6902%" y="341" width="0.0801%" height="15" fill="rgb(234,114,13)" fg:x="783" fg:w="1"/><text x="62.9402%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.6902%" y="325" width="0.0801%" height="15" fill="rgb(248,56,40)" fg:x="783" fg:w="1"/><text x="62.9402%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.6902%" y="309" width="0.0801%" height="15" fill="rgb(221,194,21)" fg:x="783" fg:w="1"/><text x="62.9402%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.6902%" y="293" width="0.0801%" height="15" fill="rgb(242,108,46)" fg:x="783" fg:w="1"/><text x="62.9402%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.6902%" y="277" width="0.0801%" height="15" fill="rgb(220,106,10)" fg:x="783" fg:w="1"/><text x="62.9402%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.6902%" y="261" width="0.0801%" height="15" fill="rgb(211,88,4)" fg:x="783" fg:w="1"/><text x="62.9402%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="62.6902%" y="245" width="0.0801%" height="15" fill="rgb(214,95,34)" fg:x="783" fg:w="1"/><text x="62.9402%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="62.6902%" y="229" width="0.0801%" height="15" fill="rgb(250,160,33)" fg:x="783" fg:w="1"/><text x="62.9402%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="62.6902%" y="213" width="0.0801%" height="15" fill="rgb(225,29,10)" fg:x="783" fg:w="1"/><text x="62.9402%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="62.6902%" y="197" width="0.0801%" height="15" fill="rgb(224,28,30)" fg:x="783" fg:w="1"/><text x="62.9402%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="62.6902%" y="181" width="0.0801%" height="15" fill="rgb(231,77,4)" fg:x="783" fg:w="1"/><text x="62.9402%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="62.7702%" y="373" width="0.1601%" height="15" fill="rgb(209,63,21)" fg:x="784" fg:w="2"/><text x="63.0202%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.7702%" y="357" width="0.1601%" height="15" fill="rgb(226,22,11)" fg:x="784" fg:w="2"/><text x="63.0202%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.7702%" y="341" width="0.1601%" height="15" fill="rgb(216,82,30)" fg:x="784" fg:w="2"/><text x="63.0202%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="62.7702%" y="325" width="0.1601%" height="15" fill="rgb(246,227,38)" fg:x="784" fg:w="2"/><text x="63.0202%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.7702%" y="309" width="0.1601%" height="15" fill="rgb(251,203,53)" fg:x="784" fg:w="2"/><text x="63.0202%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.7702%" y="293" width="0.1601%" height="15" fill="rgb(254,101,1)" fg:x="784" fg:w="2"/><text x="63.0202%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.7702%" y="277" width="0.1601%" height="15" fill="rgb(241,180,5)" fg:x="784" fg:w="2"/><text x="63.0202%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (6 samples, 0.48%)</title><rect x="62.5300%" y="389" width="0.4804%" height="15" fill="rgb(218,168,4)" fg:x="781" fg:w="6"/><text x="62.7800%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="62.9303%" y="373" width="0.0801%" height="15" fill="rgb(224,223,32)" fg:x="786" fg:w="1"/><text x="63.1803%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="63.0104%" y="325" width="0.0801%" height="15" fill="rgb(236,106,22)" fg:x="787" fg:w="1"/><text x="63.2604%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.0104%" y="309" width="0.0801%" height="15" fill="rgb(206,121,5)" fg:x="787" fg:w="1"/><text x="63.2604%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.0104%" y="293" width="0.0801%" height="15" fill="rgb(233,87,28)" fg:x="787" fg:w="1"/><text x="63.2604%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.0104%" y="277" width="0.0801%" height="15" fill="rgb(236,137,17)" fg:x="787" fg:w="1"/><text x="63.2604%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.0104%" y="261" width="0.0801%" height="15" fill="rgb(209,183,38)" fg:x="787" fg:w="1"/><text x="63.2604%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.0104%" y="245" width="0.0801%" height="15" fill="rgb(206,162,44)" fg:x="787" fg:w="1"/><text x="63.2604%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.0104%" y="229" width="0.0801%" height="15" fill="rgb(237,70,39)" fg:x="787" fg:w="1"/><text x="63.2604%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.0104%" y="213" width="0.0801%" height="15" fill="rgb(212,176,5)" fg:x="787" fg:w="1"/><text x="63.2604%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.0104%" y="197" width="0.0801%" height="15" fill="rgb(232,95,16)" fg:x="787" fg:w="1"/><text x="63.2604%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="63.0104%" y="181" width="0.0801%" height="15" fill="rgb(219,115,35)" fg:x="787" fg:w="1"/><text x="63.2604%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.0104%" y="165" width="0.0801%" height="15" fill="rgb(251,67,27)" fg:x="787" fg:w="1"/><text x="63.2604%" y="175.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="63.0905%" y="325" width="0.0801%" height="15" fill="rgb(222,95,40)" fg:x="788" fg:w="1"/><text x="63.3405%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.0905%" y="309" width="0.0801%" height="15" fill="rgb(250,35,16)" fg:x="788" fg:w="1"/><text x="63.3405%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="63.2506%" y="245" width="0.1601%" height="15" fill="rgb(224,86,44)" fg:x="790" fg:w="2"/><text x="63.5006%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.3307%" y="229" width="0.0801%" height="15" fill="rgb(237,53,53)" fg:x="791" fg:w="1"/><text x="63.5807%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.4107%" y="229" width="0.1601%" height="15" fill="rgb(208,171,33)" fg:x="792" fg:w="2"/><text x="63.6607%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.4107%" y="213" width="0.1601%" height="15" fill="rgb(222,64,27)" fg:x="792" fg:w="2"/><text x="63.6607%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.4107%" y="197" width="0.1601%" height="15" fill="rgb(221,121,35)" fg:x="792" fg:w="2"/><text x="63.6607%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.4107%" y="181" width="0.1601%" height="15" fill="rgb(228,137,42)" fg:x="792" fg:w="2"/><text x="63.6607%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.4908%" y="165" width="0.0801%" height="15" fill="rgb(227,54,21)" fg:x="793" fg:w="1"/><text x="63.7408%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.4908%" y="149" width="0.0801%" height="15" fill="rgb(240,168,33)" fg:x="793" fg:w="1"/><text x="63.7408%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="63.4908%" y="133" width="0.0801%" height="15" fill="rgb(243,159,6)" fg:x="793" fg:w="1"/><text x="63.7408%" y="143.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="63.1705%" y="325" width="0.5604%" height="15" fill="rgb(205,211,41)" fg:x="789" fg:w="7"/><text x="63.4205%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="63.1705%" y="309" width="0.5604%" height="15" fill="rgb(253,30,1)" fg:x="789" fg:w="7"/><text x="63.4205%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="63.1705%" y="293" width="0.5604%" height="15" fill="rgb(226,80,18)" fg:x="789" fg:w="7"/><text x="63.4205%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="63.2506%" y="277" width="0.4804%" height="15" fill="rgb(253,156,46)" fg:x="790" fg:w="6"/><text x="63.5006%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="63.2506%" y="261" width="0.4804%" height="15" fill="rgb(248,87,27)" fg:x="790" fg:w="6"/><text x="63.5006%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="63.4107%" y="245" width="0.3203%" height="15" fill="rgb(227,122,2)" fg:x="792" fg:w="4"/><text x="63.6607%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.5709%" y="229" width="0.1601%" height="15" fill="rgb(229,94,39)" fg:x="794" fg:w="2"/><text x="63.8209%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.5709%" y="213" width="0.1601%" height="15" fill="rgb(225,173,31)" fg:x="794" fg:w="2"/><text x="63.8209%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.6509%" y="197" width="0.0801%" height="15" fill="rgb(239,176,30)" fg:x="795" fg:w="1"/><text x="63.9009%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.6509%" y="181" width="0.0801%" height="15" fill="rgb(212,104,21)" fg:x="795" fg:w="1"/><text x="63.9009%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.6509%" y="165" width="0.0801%" height="15" fill="rgb(240,209,40)" fg:x="795" fg:w="1"/><text x="63.9009%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.6509%" y="149" width="0.0801%" height="15" fill="rgb(234,195,5)" fg:x="795" fg:w="1"/><text x="63.9009%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.6509%" y="133" width="0.0801%" height="15" fill="rgb(238,213,1)" fg:x="795" fg:w="1"/><text x="63.9009%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.6509%" y="117" width="0.0801%" height="15" fill="rgb(235,182,54)" fg:x="795" fg:w="1"/><text x="63.9009%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.6509%" y="101" width="0.0801%" height="15" fill="rgb(229,50,46)" fg:x="795" fg:w="1"/><text x="63.9009%" y="111.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.6509%" y="85" width="0.0801%" height="15" fill="rgb(219,145,13)" fg:x="795" fg:w="1"/><text x="63.9009%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.7310%" y="261" width="0.0801%" height="15" fill="rgb(220,226,10)" fg:x="796" fg:w="1"/><text x="63.9810%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7310%" y="245" width="0.0801%" height="15" fill="rgb(248,47,30)" fg:x="796" fg:w="1"/><text x="63.9810%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.7310%" y="229" width="0.0801%" height="15" fill="rgb(231,209,44)" fg:x="796" fg:w="1"/><text x="63.9810%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7310%" y="213" width="0.0801%" height="15" fill="rgb(209,80,30)" fg:x="796" fg:w="1"/><text x="63.9810%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.7310%" y="197" width="0.0801%" height="15" fill="rgb(232,9,14)" fg:x="796" fg:w="1"/><text x="63.9810%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7310%" y="181" width="0.0801%" height="15" fill="rgb(243,91,43)" fg:x="796" fg:w="1"/><text x="63.9810%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.7310%" y="165" width="0.0801%" height="15" fill="rgb(231,90,52)" fg:x="796" fg:w="1"/><text x="63.9810%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.7310%" y="149" width="0.0801%" height="15" fill="rgb(253,192,44)" fg:x="796" fg:w="1"/><text x="63.9810%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.7310%" y="133" width="0.0801%" height="15" fill="rgb(241,66,31)" fg:x="796" fg:w="1"/><text x="63.9810%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7310%" y="117" width="0.0801%" height="15" fill="rgb(235,81,37)" fg:x="796" fg:w="1"/><text x="63.9810%" y="127.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (427 samples, 34.19%)</title><rect x="29.7038%" y="437" width="34.1873%" height="15" fill="rgb(223,221,9)" fg:x="371" fg:w="427"/><text x="29.9538%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::..</text></g><g><title>plugins_core::looking::model::new_area_observation (416 samples, 33.31%)</title><rect x="30.5845%" y="421" width="33.3066%" height="15" fill="rgb(242,180,7)" fg:x="382" fg:w="416"/><text x="30.8345%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 1.36%)</title><rect x="62.5300%" y="405" width="1.3611%" height="15" fill="rgb(243,78,19)" fg:x="781" fg:w="17"/><text x="62.7800%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.88%)</title><rect x="63.0104%" y="389" width="0.8807%" height="15" fill="rgb(233,23,17)" fg:x="787" fg:w="11"/><text x="63.2604%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.88%)</title><rect x="63.0104%" y="373" width="0.8807%" height="15" fill="rgb(252,122,45)" fg:x="787" fg:w="11"/><text x="63.2604%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.88%)</title><rect x="63.0104%" y="357" width="0.8807%" height="15" fill="rgb(247,108,20)" fg:x="787" fg:w="11"/><text x="63.2604%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.88%)</title><rect x="63.0104%" y="341" width="0.8807%" height="15" fill="rgb(235,84,21)" fg:x="787" fg:w="11"/><text x="63.2604%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="63.7310%" y="325" width="0.1601%" height="15" fill="rgb(247,129,10)" fg:x="796" fg:w="2"/><text x="63.9810%" y="335.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="63.7310%" y="309" width="0.1601%" height="15" fill="rgb(208,173,14)" fg:x="796" fg:w="2"/><text x="63.9810%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.7310%" y="293" width="0.1601%" height="15" fill="rgb(236,31,38)" fg:x="796" fg:w="2"/><text x="63.9810%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.7310%" y="277" width="0.1601%" height="15" fill="rgb(232,65,17)" fg:x="796" fg:w="2"/><text x="63.9810%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.8110%" y="261" width="0.0801%" height="15" fill="rgb(224,45,49)" fg:x="797" fg:w="1"/><text x="64.0610%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8110%" y="245" width="0.0801%" height="15" fill="rgb(225,2,53)" fg:x="797" fg:w="1"/><text x="64.0610%" y="255.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (430 samples, 34.43%)</title><rect x="29.5436%" y="565" width="34.4275%" height="15" fill="rgb(248,210,53)" fg:x="369" fg:w="430"/><text x="29.7936%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (430 samples, 34.43%)</title><rect x="29.5436%" y="549" width="34.4275%" height="15" fill="rgb(211,1,30)" fg:x="369" fg:w="430"/><text x="29.7936%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (430 samples, 34.43%)</title><rect x="29.5436%" y="533" width="34.4275%" height="15" fill="rgb(224,96,15)" fg:x="369" fg:w="430"/><text x="29.7936%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (430 samples, 34.43%)</title><rect x="29.5436%" y="517" width="34.4275%" height="15" fill="rgb(252,45,11)" fg:x="369" fg:w="430"/><text x="29.7936%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (430 samples, 34.43%)</title><rect x="29.5436%" y="501" width="34.4275%" height="15" fill="rgb(220,125,38)" fg:x="369" fg:w="430"/><text x="29.7936%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (430 samples, 34.43%)</title><rect x="29.5436%" y="485" width="34.4275%" height="15" fill="rgb(243,161,33)" fg:x="369" fg:w="430"/><text x="29.7936%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (430 samples, 34.43%)</title><rect x="29.5436%" y="469" width="34.4275%" height="15" fill="rgb(248,197,34)" fg:x="369" fg:w="430"/><text x="29.7936%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;A..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (429 samples, 34.35%)</title><rect x="29.6237%" y="453" width="34.3475%" height="15" fill="rgb(228,165,23)" fg:x="370" fg:w="429"/><text x="29.8737%" y="463.50">&lt;engine::session::state::State as kernel::actions::Perfo..</text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="63.8911%" y="437" width="0.0801%" height="15" fill="rgb(236,94,38)" fg:x="798" fg:w="1"/><text x="64.1411%" y="447.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="63.9712%" y="549" width="0.0801%" height="15" fill="rgb(220,13,23)" fg:x="799" fg:w="1"/><text x="64.2212%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.0512%" y="533" width="0.0801%" height="15" fill="rgb(234,26,39)" fg:x="800" fg:w="1"/><text x="64.3012%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="64.2114%" y="501" width="0.1601%" height="15" fill="rgb(205,117,44)" fg:x="802" fg:w="2"/><text x="64.4614%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="64.1313%" y="517" width="0.4003%" height="15" fill="rgb(250,42,2)" fg:x="801" fg:w="5"/><text x="64.3813%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="64.3715%" y="501" width="0.1601%" height="15" fill="rgb(223,83,14)" fg:x="804" fg:w="2"/><text x="64.6215%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.3715%" y="485" width="0.1601%" height="15" fill="rgb(241,147,50)" fg:x="804" fg:w="2"/><text x="64.6215%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="64.4516%" y="469" width="0.0801%" height="15" fill="rgb(218,90,6)" fg:x="805" fg:w="1"/><text x="64.7016%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="64.4516%" y="453" width="0.0801%" height="15" fill="rgb(210,191,5)" fg:x="805" fg:w="1"/><text x="64.7016%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.4516%" y="437" width="0.0801%" height="15" fill="rgb(225,139,19)" fg:x="805" fg:w="1"/><text x="64.7016%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.5316%" y="421" width="0.0801%" height="15" fill="rgb(210,1,33)" fg:x="806" fg:w="1"/><text x="64.7816%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.5316%" y="405" width="0.0801%" height="15" fill="rgb(213,50,3)" fg:x="806" fg:w="1"/><text x="64.7816%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.5316%" y="389" width="0.0801%" height="15" fill="rgb(234,227,4)" fg:x="806" fg:w="1"/><text x="64.7816%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="64.5316%" y="453" width="0.1601%" height="15" fill="rgb(246,63,5)" fg:x="806" fg:w="2"/><text x="64.7816%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="64.5316%" y="437" width="0.1601%" height="15" fill="rgb(245,136,27)" fg:x="806" fg:w="2"/><text x="64.7816%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.6117%" y="421" width="0.0801%" height="15" fill="rgb(247,199,27)" fg:x="807" fg:w="1"/><text x="64.8617%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="64.6918%" y="453" width="0.0801%" height="15" fill="rgb(252,158,49)" fg:x="808" fg:w="1"/><text x="64.9418%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.6918%" y="437" width="0.0801%" height="15" fill="rgb(254,73,1)" fg:x="808" fg:w="1"/><text x="64.9418%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6918%" y="421" width="0.0801%" height="15" fill="rgb(248,93,19)" fg:x="808" fg:w="1"/><text x="64.9418%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.6918%" y="405" width="0.0801%" height="15" fill="rgb(206,67,5)" fg:x="808" fg:w="1"/><text x="64.9418%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6918%" y="389" width="0.0801%" height="15" fill="rgb(209,210,4)" fg:x="808" fg:w="1"/><text x="64.9418%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.6918%" y="373" width="0.0801%" height="15" fill="rgb(214,185,36)" fg:x="808" fg:w="1"/><text x="64.9418%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.6918%" y="357" width="0.0801%" height="15" fill="rgb(233,191,26)" fg:x="808" fg:w="1"/><text x="64.9418%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.6918%" y="341" width="0.0801%" height="15" fill="rgb(248,94,17)" fg:x="808" fg:w="1"/><text x="64.9418%" y="351.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.7718%" y="405" width="0.0801%" height="15" fill="rgb(250,64,4)" fg:x="809" fg:w="1"/><text x="65.0218%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7718%" y="389" width="0.0801%" height="15" fill="rgb(218,41,53)" fg:x="809" fg:w="1"/><text x="65.0218%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.7718%" y="373" width="0.0801%" height="15" fill="rgb(251,176,28)" fg:x="809" fg:w="1"/><text x="65.0218%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.8519%" y="293" width="0.0801%" height="15" fill="rgb(247,22,9)" fg:x="810" fg:w="1"/><text x="65.1019%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8519%" y="277" width="0.0801%" height="15" fill="rgb(218,201,14)" fg:x="810" fg:w="1"/><text x="65.1019%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="64.8519%" y="261" width="0.0801%" height="15" fill="rgb(218,94,10)" fg:x="810" fg:w="1"/><text x="65.1019%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8519%" y="245" width="0.0801%" height="15" fill="rgb(222,183,52)" fg:x="810" fg:w="1"/><text x="65.1019%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.8519%" y="325" width="0.1601%" height="15" fill="rgb(242,140,25)" fg:x="810" fg:w="2"/><text x="65.1019%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.8519%" y="309" width="0.1601%" height="15" fill="rgb(235,197,38)" fg:x="810" fg:w="2"/><text x="65.1019%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="64.9319%" y="293" width="0.0801%" height="15" fill="rgb(237,136,15)" fg:x="811" fg:w="1"/><text x="65.1819%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.9319%" y="277" width="0.0801%" height="15" fill="rgb(223,44,49)" fg:x="811" fg:w="1"/><text x="65.1819%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.9319%" y="261" width="0.0801%" height="15" fill="rgb(227,71,15)" fg:x="811" fg:w="1"/><text x="65.1819%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="64.9319%" y="245" width="0.0801%" height="15" fill="rgb(225,153,20)" fg:x="811" fg:w="1"/><text x="65.1819%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.9319%" y="229" width="0.0801%" height="15" fill="rgb(210,190,26)" fg:x="811" fg:w="1"/><text x="65.1819%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9319%" y="213" width="0.0801%" height="15" fill="rgb(223,147,5)" fg:x="811" fg:w="1"/><text x="65.1819%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="64.8519%" y="357" width="0.2402%" height="15" fill="rgb(207,14,23)" fg:x="810" fg:w="3"/><text x="65.1019%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.8519%" y="341" width="0.2402%" height="15" fill="rgb(211,195,53)" fg:x="810" fg:w="3"/><text x="65.1019%" y="351.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="65.0120%" y="325" width="0.0801%" height="15" fill="rgb(237,75,46)" fg:x="812" fg:w="1"/><text x="65.2620%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.0120%" y="309" width="0.0801%" height="15" fill="rgb(254,55,14)" fg:x="812" fg:w="1"/><text x="65.2620%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.0120%" y="293" width="0.0801%" height="15" fill="rgb(230,185,30)" fg:x="812" fg:w="1"/><text x="65.2620%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.0120%" y="277" width="0.0801%" height="15" fill="rgb(220,14,11)" fg:x="812" fg:w="1"/><text x="65.2620%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0120%" y="261" width="0.0801%" height="15" fill="rgb(215,169,44)" fg:x="812" fg:w="1"/><text x="65.2620%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.0921%" y="325" width="0.0801%" height="15" fill="rgb(253,203,20)" fg:x="813" fg:w="1"/><text x="65.3421%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="65.0921%" y="357" width="0.1601%" height="15" fill="rgb(229,225,17)" fg:x="813" fg:w="2"/><text x="65.3421%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.0921%" y="341" width="0.1601%" height="15" fill="rgb(236,76,26)" fg:x="813" fg:w="2"/><text x="65.3421%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="65.1721%" y="325" width="0.0801%" height="15" fill="rgb(234,15,30)" fg:x="814" fg:w="1"/><text x="65.4221%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="65.1721%" y="309" width="0.0801%" height="15" fill="rgb(211,113,48)" fg:x="814" fg:w="1"/><text x="65.4221%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1721%" y="293" width="0.0801%" height="15" fill="rgb(221,31,36)" fg:x="814" fg:w="1"/><text x="65.4221%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="64.7718%" y="453" width="0.5604%" height="15" fill="rgb(215,118,52)" fg:x="809" fg:w="7"/><text x="65.0218%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="64.7718%" y="437" width="0.5604%" height="15" fill="rgb(241,151,27)" fg:x="809" fg:w="7"/><text x="65.0218%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="64.7718%" y="421" width="0.5604%" height="15" fill="rgb(253,51,3)" fg:x="809" fg:w="7"/><text x="65.0218%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="64.8519%" y="405" width="0.4804%" height="15" fill="rgb(216,201,24)" fg:x="810" fg:w="6"/><text x="65.1019%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="64.8519%" y="389" width="0.4804%" height="15" fill="rgb(231,107,4)" fg:x="810" fg:w="6"/><text x="65.1019%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="64.8519%" y="373" width="0.4804%" height="15" fill="rgb(243,97,54)" fg:x="810" fg:w="6"/><text x="65.1019%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.2522%" y="357" width="0.0801%" height="15" fill="rgb(221,32,51)" fg:x="815" fg:w="1"/><text x="65.5022%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.2522%" y="341" width="0.0801%" height="15" fill="rgb(218,171,35)" fg:x="815" fg:w="1"/><text x="65.5022%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.2522%" y="325" width="0.0801%" height="15" fill="rgb(214,20,53)" fg:x="815" fg:w="1"/><text x="65.5022%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.2522%" y="309" width="0.0801%" height="15" fill="rgb(239,9,52)" fg:x="815" fg:w="1"/><text x="65.5022%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="65.3323%" y="357" width="0.2402%" height="15" fill="rgb(215,114,45)" fg:x="816" fg:w="3"/><text x="65.5823%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.4123%" y="341" width="0.1601%" height="15" fill="rgb(208,118,9)" fg:x="817" fg:w="2"/><text x="65.6623%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.4924%" y="325" width="0.0801%" height="15" fill="rgb(235,7,39)" fg:x="818" fg:w="1"/><text x="65.7424%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.4924%" y="309" width="0.0801%" height="15" fill="rgb(243,225,15)" fg:x="818" fg:w="1"/><text x="65.7424%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.4924%" y="293" width="0.0801%" height="15" fill="rgb(225,216,18)" fg:x="818" fg:w="1"/><text x="65.7424%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4924%" y="277" width="0.0801%" height="15" fill="rgb(233,36,38)" fg:x="818" fg:w="1"/><text x="65.7424%" y="287.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.12%)</title><rect x="64.5316%" y="469" width="1.1209%" height="15" fill="rgb(239,88,23)" fg:x="806" fg:w="14"/><text x="64.7816%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="65.3323%" y="453" width="0.3203%" height="15" fill="rgb(219,181,35)" fg:x="816" fg:w="4"/><text x="65.5823%" y="463.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="65.3323%" y="437" width="0.3203%" height="15" fill="rgb(215,18,46)" fg:x="816" fg:w="4"/><text x="65.5823%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="65.3323%" y="421" width="0.3203%" height="15" fill="rgb(241,38,11)" fg:x="816" fg:w="4"/><text x="65.5823%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="65.3323%" y="405" width="0.3203%" height="15" fill="rgb(248,169,45)" fg:x="816" fg:w="4"/><text x="65.5823%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="65.3323%" y="389" width="0.3203%" height="15" fill="rgb(239,50,49)" fg:x="816" fg:w="4"/><text x="65.5823%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="65.3323%" y="373" width="0.3203%" height="15" fill="rgb(231,96,31)" fg:x="816" fg:w="4"/><text x="65.5823%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.5725%" y="357" width="0.0801%" height="15" fill="rgb(224,193,37)" fg:x="819" fg:w="1"/><text x="65.8225%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="65.5725%" y="341" width="0.0801%" height="15" fill="rgb(227,153,50)" fg:x="819" fg:w="1"/><text x="65.8225%" y="351.50"></text></g><g><title>plugins_core::tools::contained_by (20 samples, 1.60%)</title><rect x="64.1313%" y="533" width="1.6013%" height="15" fill="rgb(249,228,3)" fg:x="801" fg:w="20"/><text x="64.3813%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (15 samples, 1.20%)</title><rect x="64.5316%" y="517" width="1.2010%" height="15" fill="rgb(219,164,43)" fg:x="806" fg:w="15"/><text x="64.7816%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (15 samples, 1.20%)</title><rect x="64.5316%" y="501" width="1.2010%" height="15" fill="rgb(216,45,41)" fg:x="806" fg:w="15"/><text x="64.7816%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.20%)</title><rect x="64.5316%" y="485" width="1.2010%" height="15" fill="rgb(210,226,51)" fg:x="806" fg:w="15"/><text x="64.7816%" y="495.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="65.6525%" y="469" width="0.0801%" height="15" fill="rgb(209,117,49)" fg:x="820" fg:w="1"/><text x="65.9025%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.6525%" y="453" width="0.0801%" height="15" fill="rgb(206,196,24)" fg:x="820" fg:w="1"/><text x="65.9025%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="65.6525%" y="437" width="0.0801%" height="15" fill="rgb(253,218,3)" fg:x="820" fg:w="1"/><text x="65.9025%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.7326%" y="469" width="0.0801%" height="15" fill="rgb(252,166,2)" fg:x="821" fg:w="1"/><text x="65.9826%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="65.7326%" y="517" width="0.1601%" height="15" fill="rgb(236,218,26)" fg:x="821" fg:w="2"/><text x="65.9826%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.7326%" y="501" width="0.1601%" height="15" fill="rgb(254,84,19)" fg:x="821" fg:w="2"/><text x="65.9826%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.7326%" y="485" width="0.1601%" height="15" fill="rgb(219,137,29)" fg:x="821" fg:w="2"/><text x="65.9826%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="65.8127%" y="469" width="0.0801%" height="15" fill="rgb(227,47,52)" fg:x="822" fg:w="1"/><text x="66.0627%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="65.8127%" y="453" width="0.0801%" height="15" fill="rgb(229,167,24)" fg:x="822" fg:w="1"/><text x="66.0627%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="65.8127%" y="437" width="0.0801%" height="15" fill="rgb(233,164,1)" fg:x="822" fg:w="1"/><text x="66.0627%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.8127%" y="421" width="0.0801%" height="15" fill="rgb(218,88,48)" fg:x="822" fg:w="1"/><text x="66.0627%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.8127%" y="405" width="0.0801%" height="15" fill="rgb(226,214,24)" fg:x="822" fg:w="1"/><text x="66.0627%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.8127%" y="389" width="0.0801%" height="15" fill="rgb(233,29,12)" fg:x="822" fg:w="1"/><text x="66.0627%" y="399.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="65.7326%" y="533" width="0.2402%" height="15" fill="rgb(219,120,34)" fg:x="821" fg:w="3"/><text x="65.9826%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="65.8927%" y="517" width="0.0801%" height="15" fill="rgb(226,78,44)" fg:x="823" fg:w="1"/><text x="66.1427%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="65.8927%" y="501" width="0.0801%" height="15" fill="rgb(240,15,48)" fg:x="823" fg:w="1"/><text x="66.1427%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8927%" y="485" width="0.0801%" height="15" fill="rgb(253,176,7)" fg:x="823" fg:w="1"/><text x="66.1427%" y="495.50"></text></g><g><title>engine::session::Session::captured (480 samples, 38.43%)</title><rect x="27.6221%" y="709" width="38.4307%" height="15" fill="rgb(206,166,28)" fg:x="345" fg:w="480"/><text x="27.8721%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (476 samples, 38.11%)</title><rect x="27.9424%" y="693" width="38.1105%" height="15" fill="rgb(241,53,51)" fg:x="349" fg:w="476"/><text x="28.1924%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (474 samples, 37.95%)</title><rect x="28.1025%" y="677" width="37.9504%" height="15" fill="rgb(249,112,30)" fg:x="351" fg:w="474"/><text x="28.3525%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (474 samples, 37.95%)</title><rect x="28.1025%" y="661" width="37.9504%" height="15" fill="rgb(217,85,30)" fg:x="351" fg:w="474"/><text x="28.3525%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perf..</text></g><g><title>kernel::plugins::mw::apply_middleware (474 samples, 37.95%)</title><rect x="28.1025%" y="645" width="37.9504%" height="15" fill="rgb(233,49,7)" fg:x="351" fg:w="474"/><text x="28.3525%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (474 samples, 37.95%)</title><rect x="28.1025%" y="629" width="37.9504%" height="15" fill="rgb(234,109,9)" fg:x="351" fg:w="474"/><text x="28.3525%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (474 samples, 37.95%)</title><rect x="28.1025%" y="613" width="37.9504%" height="15" fill="rgb(253,95,22)" fg:x="351" fg:w="474"/><text x="28.3525%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plug..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (458 samples, 36.67%)</title><rect x="29.3835%" y="597" width="36.6693%" height="15" fill="rgb(233,176,25)" fg:x="367" fg:w="458"/><text x="29.6335%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (458 samples, 36.67%)</title><rect x="29.3835%" y="581" width="36.6693%" height="15" fill="rgb(236,33,39)" fg:x="367" fg:w="458"/><text x="29.6335%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middle..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (26 samples, 2.08%)</title><rect x="63.9712%" y="565" width="2.0817%" height="15" fill="rgb(223,226,42)" fg:x="799" fg:w="26"/><text x="64.2212%" y="575.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (25 samples, 2.00%)</title><rect x="64.0512%" y="549" width="2.0016%" height="15" fill="rgb(216,99,33)" fg:x="800" fg:w="25"/><text x="64.3012%" y="559.50">p..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="65.9728%" y="533" width="0.0801%" height="15" fill="rgb(235,84,23)" fg:x="824" fg:w="1"/><text x="66.2228%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="65.9728%" y="517" width="0.0801%" height="15" fill="rgb(232,2,27)" fg:x="824" fg:w="1"/><text x="66.2228%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.9728%" y="501" width="0.0801%" height="15" fill="rgb(241,23,22)" fg:x="824" fg:w="1"/><text x="66.2228%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.1329%" y="565" width="0.0801%" height="15" fill="rgb(211,73,27)" fg:x="826" fg:w="1"/><text x="66.3829%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="66.2130%" y="565" width="0.1601%" height="15" fill="rgb(235,109,49)" fg:x="827" fg:w="2"/><text x="66.4630%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="66.2130%" y="549" width="0.1601%" height="15" fill="rgb(230,99,29)" fg:x="827" fg:w="2"/><text x="66.4630%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="66.2130%" y="533" width="0.1601%" height="15" fill="rgb(245,199,7)" fg:x="827" fg:w="2"/><text x="66.4630%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="66.2130%" y="517" width="0.1601%" height="15" fill="rgb(217,179,10)" fg:x="827" fg:w="2"/><text x="66.4630%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="66.2130%" y="501" width="0.1601%" height="15" fill="rgb(254,99,47)" fg:x="827" fg:w="2"/><text x="66.4630%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="66.2130%" y="485" width="0.1601%" height="15" fill="rgb(251,121,7)" fg:x="827" fg:w="2"/><text x="66.4630%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.2930%" y="469" width="0.0801%" height="15" fill="rgb(250,177,26)" fg:x="828" fg:w="1"/><text x="66.5430%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.2930%" y="453" width="0.0801%" height="15" fill="rgb(232,88,15)" fg:x="828" fg:w="1"/><text x="66.5430%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="66.2930%" y="437" width="0.0801%" height="15" fill="rgb(251,54,54)" fg:x="828" fg:w="1"/><text x="66.5430%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="66.0528%" y="613" width="0.4003%" height="15" fill="rgb(208,177,15)" fg:x="825" fg:w="5"/><text x="66.3028%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="66.0528%" y="597" width="0.4003%" height="15" fill="rgb(205,97,32)" fg:x="825" fg:w="5"/><text x="66.3028%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="66.0528%" y="581" width="0.4003%" height="15" fill="rgb(217,192,13)" fg:x="825" fg:w="5"/><text x="66.3028%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.3731%" y="565" width="0.0801%" height="15" fill="rgb(215,163,41)" fg:x="829" fg:w="1"/><text x="66.6231%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.3731%" y="549" width="0.0801%" height="15" fill="rgb(246,83,29)" fg:x="829" fg:w="1"/><text x="66.6231%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3731%" y="533" width="0.0801%" height="15" fill="rgb(219,2,45)" fg:x="829" fg:w="1"/><text x="66.6231%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="66.0528%" y="661" width="0.4804%" height="15" fill="rgb(242,215,33)" fg:x="825" fg:w="6"/><text x="66.3028%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="66.0528%" y="645" width="0.4804%" height="15" fill="rgb(217,1,6)" fg:x="825" fg:w="6"/><text x="66.3028%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.48%)</title><rect x="66.0528%" y="629" width="0.4804%" height="15" fill="rgb(207,85,52)" fg:x="825" fg:w="6"/><text x="66.3028%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.4532%" y="613" width="0.0801%" height="15" fill="rgb(231,171,19)" fg:x="830" fg:w="1"/><text x="66.7032%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.6934%" y="565" width="0.0801%" height="15" fill="rgb(207,128,4)" fg:x="833" fg:w="1"/><text x="66.9434%" y="575.50"></text></g><g><title>engine::session::internal::Added::find_refs (11 samples, 0.88%)</title><rect x="66.0528%" y="693" width="0.8807%" height="15" fill="rgb(219,208,4)" fg:x="825" fg:w="11"/><text x="66.3028%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (11 samples, 0.88%)</title><rect x="66.0528%" y="677" width="0.8807%" height="15" fill="rgb(235,161,42)" fg:x="825" fg:w="11"/><text x="66.3028%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="66.5332%" y="661" width="0.4003%" height="15" fill="rgb(247,218,18)" fg:x="831" fg:w="5"/><text x="66.7832%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="66.5332%" y="645" width="0.4003%" height="15" fill="rgb(232,114,51)" fg:x="831" fg:w="5"/><text x="66.7832%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="66.6133%" y="629" width="0.3203%" height="15" fill="rgb(222,95,3)" fg:x="832" fg:w="4"/><text x="66.8633%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="66.6133%" y="613" width="0.3203%" height="15" fill="rgb(240,65,29)" fg:x="832" fg:w="4"/><text x="66.8633%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="66.6133%" y="597" width="0.3203%" height="15" fill="rgb(249,209,20)" fg:x="832" fg:w="4"/><text x="66.8633%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="66.6133%" y="581" width="0.3203%" height="15" fill="rgb(241,48,37)" fg:x="832" fg:w="4"/><text x="66.8633%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="66.7734%" y="565" width="0.1601%" height="15" fill="rgb(230,140,42)" fg:x="834" fg:w="2"/><text x="67.0234%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="66.7734%" y="549" width="0.1601%" height="15" fill="rgb(230,176,45)" fg:x="834" fg:w="2"/><text x="67.0234%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.8535%" y="533" width="0.0801%" height="15" fill="rgb(245,112,21)" fg:x="835" fg:w="1"/><text x="67.1035%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.9335%" y="613" width="0.0801%" height="15" fill="rgb(207,183,35)" fg:x="836" fg:w="1"/><text x="67.1835%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9335%" y="597" width="0.0801%" height="15" fill="rgb(227,44,33)" fg:x="836" fg:w="1"/><text x="67.1835%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.9335%" y="629" width="0.1601%" height="15" fill="rgb(246,120,21)" fg:x="836" fg:w="2"/><text x="67.1835%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0136%" y="613" width="0.0801%" height="15" fill="rgb(235,57,52)" fg:x="837" fg:w="1"/><text x="67.2636%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0136%" y="597" width="0.0801%" height="15" fill="rgb(238,84,10)" fg:x="837" fg:w="1"/><text x="67.2636%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.0136%" y="581" width="0.0801%" height="15" fill="rgb(251,200,32)" fg:x="837" fg:w="1"/><text x="67.2636%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.0136%" y="565" width="0.0801%" height="15" fill="rgb(247,159,13)" fg:x="837" fg:w="1"/><text x="67.2636%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.0136%" y="549" width="0.0801%" height="15" fill="rgb(238,64,4)" fg:x="837" fg:w="1"/><text x="67.2636%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.0136%" y="533" width="0.0801%" height="15" fill="rgb(221,131,51)" fg:x="837" fg:w="1"/><text x="67.2636%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.0136%" y="517" width="0.0801%" height="15" fill="rgb(242,5,29)" fg:x="837" fg:w="1"/><text x="67.2636%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="66.9335%" y="677" width="0.2402%" height="15" fill="rgb(214,130,32)" fg:x="836" fg:w="3"/><text x="67.1835%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="66.9335%" y="661" width="0.2402%" height="15" fill="rgb(244,210,16)" fg:x="836" fg:w="3"/><text x="67.1835%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="66.9335%" y="645" width="0.2402%" height="15" fill="rgb(234,48,26)" fg:x="836" fg:w="3"/><text x="67.1835%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0937%" y="629" width="0.0801%" height="15" fill="rgb(231,82,38)" fg:x="838" fg:w="1"/><text x="67.3437%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.0937%" y="613" width="0.0801%" height="15" fill="rgb(254,128,41)" fg:x="838" fg:w="1"/><text x="67.3437%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.0937%" y="597" width="0.0801%" height="15" fill="rgb(212,73,49)" fg:x="838" fg:w="1"/><text x="67.3437%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.0937%" y="581" width="0.0801%" height="15" fill="rgb(205,62,54)" fg:x="838" fg:w="1"/><text x="67.3437%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.0937%" y="565" width="0.0801%" height="15" fill="rgb(228,0,8)" fg:x="838" fg:w="1"/><text x="67.3437%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.0937%" y="549" width="0.0801%" height="15" fill="rgb(251,28,17)" fg:x="838" fg:w="1"/><text x="67.3437%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.0937%" y="533" width="0.0801%" height="15" fill="rgb(238,105,27)" fg:x="838" fg:w="1"/><text x="67.3437%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.0937%" y="517" width="0.0801%" height="15" fill="rgb(237,216,33)" fg:x="838" fg:w="1"/><text x="67.3437%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.0937%" y="501" width="0.0801%" height="15" fill="rgb(229,228,25)" fg:x="838" fg:w="1"/><text x="67.3437%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.0937%" y="485" width="0.0801%" height="15" fill="rgb(233,75,23)" fg:x="838" fg:w="1"/><text x="67.3437%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.0937%" y="469" width="0.0801%" height="15" fill="rgb(231,207,16)" fg:x="838" fg:w="1"/><text x="67.3437%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.0937%" y="453" width="0.0801%" height="15" fill="rgb(231,191,45)" fg:x="838" fg:w="1"/><text x="67.3437%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.3339%" y="501" width="0.0801%" height="15" fill="rgb(224,133,17)" fg:x="841" fg:w="1"/><text x="67.5839%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.3339%" y="485" width="0.0801%" height="15" fill="rgb(209,178,27)" fg:x="841" fg:w="1"/><text x="67.5839%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="67.3339%" y="469" width="0.0801%" height="15" fill="rgb(218,37,11)" fg:x="841" fg:w="1"/><text x="67.5839%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.3339%" y="453" width="0.0801%" height="15" fill="rgb(251,226,25)" fg:x="841" fg:w="1"/><text x="67.5839%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3339%" y="437" width="0.0801%" height="15" fill="rgb(209,222,27)" fg:x="841" fg:w="1"/><text x="67.5839%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="67.2538%" y="549" width="0.2402%" height="15" fill="rgb(238,22,21)" fg:x="840" fg:w="3"/><text x="67.5038%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.3339%" y="533" width="0.1601%" height="15" fill="rgb(233,161,25)" fg:x="841" fg:w="2"/><text x="67.5839%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="67.3339%" y="517" width="0.1601%" height="15" fill="rgb(226,122,53)" fg:x="841" fg:w="2"/><text x="67.5839%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="67.4139%" y="501" width="0.0801%" height="15" fill="rgb(220,123,17)" fg:x="842" fg:w="1"/><text x="67.6639%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4139%" y="485" width="0.0801%" height="15" fill="rgb(230,224,35)" fg:x="842" fg:w="1"/><text x="67.6639%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="67.2538%" y="581" width="0.3203%" height="15" fill="rgb(246,83,8)" fg:x="840" fg:w="4"/><text x="67.5038%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="67.2538%" y="565" width="0.3203%" height="15" fill="rgb(230,214,17)" fg:x="840" fg:w="4"/><text x="67.5038%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="67.4940%" y="549" width="0.0801%" height="15" fill="rgb(222,97,18)" fg:x="843" fg:w="1"/><text x="67.7440%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.4940%" y="533" width="0.0801%" height="15" fill="rgb(206,79,1)" fg:x="843" fg:w="1"/><text x="67.7440%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.4940%" y="517" width="0.0801%" height="15" fill="rgb(214,121,34)" fg:x="843" fg:w="1"/><text x="67.7440%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.4940%" y="501" width="0.0801%" height="15" fill="rgb(249,199,46)" fg:x="843" fg:w="1"/><text x="67.7440%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4940%" y="485" width="0.0801%" height="15" fill="rgb(214,222,46)" fg:x="843" fg:w="1"/><text x="67.7440%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.5741%" y="501" width="0.0801%" height="15" fill="rgb(248,168,30)" fg:x="844" fg:w="1"/><text x="67.8241%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.56%)</title><rect x="67.1737%" y="629" width="0.5604%" height="15" fill="rgb(226,14,28)" fg:x="839" fg:w="7"/><text x="67.4237%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="67.1737%" y="613" width="0.5604%" height="15" fill="rgb(253,123,1)" fg:x="839" fg:w="7"/><text x="67.4237%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.48%)</title><rect x="67.2538%" y="597" width="0.4804%" height="15" fill="rgb(225,24,42)" fg:x="840" fg:w="6"/><text x="67.5038%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.5741%" y="581" width="0.1601%" height="15" fill="rgb(216,161,37)" fg:x="844" fg:w="2"/><text x="67.8241%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.5741%" y="565" width="0.1601%" height="15" fill="rgb(251,164,26)" fg:x="844" fg:w="2"/><text x="67.8241%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="67.5741%" y="549" width="0.1601%" height="15" fill="rgb(219,177,3)" fg:x="844" fg:w="2"/><text x="67.8241%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.5741%" y="533" width="0.1601%" height="15" fill="rgb(222,65,0)" fg:x="844" fg:w="2"/><text x="67.8241%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.5741%" y="517" width="0.1601%" height="15" fill="rgb(223,69,54)" fg:x="844" fg:w="2"/><text x="67.8241%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="67.6541%" y="501" width="0.0801%" height="15" fill="rgb(235,30,27)" fg:x="845" fg:w="1"/><text x="67.9041%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6541%" y="485" width="0.0801%" height="15" fill="rgb(220,183,50)" fg:x="845" fg:w="1"/><text x="67.9041%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.6541%" y="469" width="0.0801%" height="15" fill="rgb(248,198,15)" fg:x="845" fg:w="1"/><text x="67.9041%" y="479.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="67.1737%" y="677" width="0.6405%" height="15" fill="rgb(222,211,4)" fg:x="839" fg:w="8"/><text x="67.4237%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="67.1737%" y="661" width="0.6405%" height="15" fill="rgb(214,102,34)" fg:x="839" fg:w="8"/><text x="67.4237%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="67.1737%" y="645" width="0.6405%" height="15" fill="rgb(245,92,5)" fg:x="839" fg:w="8"/><text x="67.4237%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7342%" y="629" width="0.0801%" height="15" fill="rgb(252,72,51)" fg:x="846" fg:w="1"/><text x="67.9842%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7342%" y="613" width="0.0801%" height="15" fill="rgb(252,208,19)" fg:x="846" fg:w="1"/><text x="67.9842%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.8943%" y="533" width="0.0801%" height="15" fill="rgb(211,69,7)" fg:x="848" fg:w="1"/><text x="68.1443%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.8943%" y="517" width="0.0801%" height="15" fill="rgb(211,27,16)" fg:x="848" fg:w="1"/><text x="68.1443%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8943%" y="501" width="0.0801%" height="15" fill="rgb(219,216,14)" fg:x="848" fg:w="1"/><text x="68.1443%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.8943%" y="485" width="0.0801%" height="15" fill="rgb(219,71,8)" fg:x="848" fg:w="1"/><text x="68.1443%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.8943%" y="469" width="0.0801%" height="15" fill="rgb(223,170,53)" fg:x="848" fg:w="1"/><text x="68.1443%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.8943%" y="581" width="0.1601%" height="15" fill="rgb(246,21,26)" fg:x="848" fg:w="2"/><text x="68.1443%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.8943%" y="565" width="0.1601%" height="15" fill="rgb(248,20,46)" fg:x="848" fg:w="2"/><text x="68.1443%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.8943%" y="549" width="0.1601%" height="15" fill="rgb(252,94,11)" fg:x="848" fg:w="2"/><text x="68.1443%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.9744%" y="533" width="0.0801%" height="15" fill="rgb(236,163,8)" fg:x="849" fg:w="1"/><text x="68.2244%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.9744%" y="517" width="0.0801%" height="15" fill="rgb(217,221,45)" fg:x="849" fg:w="1"/><text x="68.2244%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="67.8943%" y="597" width="0.2402%" height="15" fill="rgb(238,38,17)" fg:x="848" fg:w="3"/><text x="68.1443%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0544%" y="581" width="0.0801%" height="15" fill="rgb(242,210,23)" fg:x="850" fg:w="1"/><text x="68.3044%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0544%" y="565" width="0.0801%" height="15" fill="rgb(250,86,53)" fg:x="850" fg:w="1"/><text x="68.3044%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (27 samples, 2.16%)</title><rect x="66.0528%" y="709" width="2.1617%" height="15" fill="rgb(223,168,25)" fg:x="825" fg:w="27"/><text x="66.3028%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.28%)</title><rect x="66.9335%" y="693" width="1.2810%" height="15" fill="rgb(251,189,4)" fg:x="836" fg:w="16"/><text x="67.1835%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="67.8143%" y="677" width="0.4003%" height="15" fill="rgb(245,19,28)" fg:x="847" fg:w="5"/><text x="68.0643%" y="687.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="67.8143%" y="661" width="0.4003%" height="15" fill="rgb(207,10,34)" fg:x="847" fg:w="5"/><text x="68.0643%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="67.8143%" y="645" width="0.4003%" height="15" fill="rgb(235,153,31)" fg:x="847" fg:w="5"/><text x="68.0643%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="67.8143%" y="629" width="0.4003%" height="15" fill="rgb(228,72,37)" fg:x="847" fg:w="5"/><text x="68.0643%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="67.8143%" y="613" width="0.4003%" height="15" fill="rgb(215,15,16)" fg:x="847" fg:w="5"/><text x="68.0643%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1345%" y="597" width="0.0801%" height="15" fill="rgb(250,119,29)" fg:x="851" fg:w="1"/><text x="68.3845%" y="607.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="68.2146%" y="709" width="0.2402%" height="15" fill="rgb(214,59,1)" fg:x="852" fg:w="3"/><text x="68.4646%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="68.2146%" y="693" width="0.2402%" height="15" fill="rgb(223,109,25)" fg:x="852" fg:w="3"/><text x="68.4646%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.2146%" y="677" width="0.2402%" height="15" fill="rgb(230,198,22)" fg:x="852" fg:w="3"/><text x="68.4646%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.2946%" y="661" width="0.1601%" height="15" fill="rgb(245,184,46)" fg:x="853" fg:w="2"/><text x="68.5446%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.3747%" y="645" width="0.0801%" height="15" fill="rgb(253,73,16)" fg:x="854" fg:w="1"/><text x="68.6247%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.3747%" y="629" width="0.0801%" height="15" fill="rgb(206,94,45)" fg:x="854" fg:w="1"/><text x="68.6247%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="68.4548%" y="661" width="0.1601%" height="15" fill="rgb(236,83,27)" fg:x="855" fg:w="2"/><text x="68.7048%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.5348%" y="645" width="0.0801%" height="15" fill="rgb(220,196,8)" fg:x="856" fg:w="1"/><text x="68.7848%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6149%" y="661" width="0.0801%" height="15" fill="rgb(254,185,14)" fg:x="857" fg:w="1"/><text x="68.8649%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="68.7750%" y="613" width="0.0801%" height="15" fill="rgb(226,50,22)" fg:x="859" fg:w="1"/><text x="69.0250%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8551%" y="613" width="0.0801%" height="15" fill="rgb(253,147,0)" fg:x="860" fg:w="1"/><text x="69.1051%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8551%" y="597" width="0.0801%" height="15" fill="rgb(252,46,33)" fg:x="860" fg:w="1"/><text x="69.1051%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9351%" y="581" width="0.0801%" height="15" fill="rgb(242,22,54)" fg:x="861" fg:w="1"/><text x="69.1851%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.9351%" y="565" width="0.0801%" height="15" fill="rgb(223,178,32)" fg:x="861" fg:w="1"/><text x="69.1851%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="68.9351%" y="549" width="0.0801%" height="15" fill="rgb(214,106,53)" fg:x="861" fg:w="1"/><text x="69.1851%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.0152%" y="533" width="0.0801%" height="15" fill="rgb(232,65,50)" fg:x="862" fg:w="1"/><text x="69.2652%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0152%" y="517" width="0.0801%" height="15" fill="rgb(231,110,28)" fg:x="862" fg:w="1"/><text x="69.2652%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.0152%" y="501" width="0.0801%" height="15" fill="rgb(216,71,40)" fg:x="862" fg:w="1"/><text x="69.2652%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.0152%" y="565" width="0.1601%" height="15" fill="rgb(229,89,53)" fg:x="862" fg:w="2"/><text x="69.2652%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.0152%" y="549" width="0.1601%" height="15" fill="rgb(210,124,14)" fg:x="862" fg:w="2"/><text x="69.2652%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0953%" y="533" width="0.0801%" height="15" fill="rgb(236,213,6)" fg:x="863" fg:w="1"/><text x="69.3453%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1753%" y="533" width="0.0801%" height="15" fill="rgb(228,41,5)" fg:x="864" fg:w="1"/><text x="69.4253%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.64%)</title><rect x="68.6950%" y="661" width="0.6405%" height="15" fill="rgb(221,167,25)" fg:x="858" fg:w="8"/><text x="68.9450%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.64%)</title><rect x="68.6950%" y="645" width="0.6405%" height="15" fill="rgb(228,144,37)" fg:x="858" fg:w="8"/><text x="68.9450%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.64%)</title><rect x="68.6950%" y="629" width="0.6405%" height="15" fill="rgb(227,189,38)" fg:x="858" fg:w="8"/><text x="68.9450%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="68.9351%" y="613" width="0.4003%" height="15" fill="rgb(218,8,2)" fg:x="861" fg:w="5"/><text x="69.1851%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="68.9351%" y="597" width="0.4003%" height="15" fill="rgb(209,61,28)" fg:x="861" fg:w="5"/><text x="69.1851%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="69.0152%" y="581" width="0.3203%" height="15" fill="rgb(233,140,39)" fg:x="862" fg:w="4"/><text x="69.2652%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="69.1753%" y="565" width="0.1601%" height="15" fill="rgb(251,66,48)" fg:x="864" fg:w="2"/><text x="69.4253%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.1753%" y="549" width="0.1601%" height="15" fill="rgb(210,44,45)" fg:x="864" fg:w="2"/><text x="69.4253%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.2554%" y="533" width="0.0801%" height="15" fill="rgb(214,136,46)" fg:x="865" fg:w="1"/><text x="69.5054%" y="543.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="69.3355%" y="661" width="0.0801%" height="15" fill="rgb(207,130,50)" fg:x="866" fg:w="1"/><text x="69.5855%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (868 samples, 69.50%)</title><rect x="0.0000%" y="789" width="69.4956%" height="15" fill="rgb(228,102,49)" fg:x="0" fg:w="868"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (868 samples, 69.50%)</title><rect x="0.0000%" y="773" width="69.4956%" height="15" fill="rgb(253,55,1)" fg:x="0" fg:w="868"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (868 samples, 69.50%)</title><rect x="0.0000%" y="757" width="69.4956%" height="15" fill="rgb(238,222,9)" fg:x="0" fg:w="868"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (525 samples, 42.03%)</title><rect x="27.4620%" y="741" width="42.0336%" height="15" fill="rgb(246,99,6)" fg:x="343" fg:w="525"/><text x="27.7120%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (525 samples, 42.03%)</title><rect x="27.4620%" y="725" width="42.0336%" height="15" fill="rgb(219,110,26)" fg:x="343" fg:w="525"/><text x="27.7120%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (13 samples, 1.04%)</title><rect x="68.4548%" y="709" width="1.0408%" height="15" fill="rgb(239,160,33)" fg:x="855" fg:w="13"/><text x="68.7048%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.04%)</title><rect x="68.4548%" y="693" width="1.0408%" height="15" fill="rgb(220,202,23)" fg:x="855" fg:w="13"/><text x="68.7048%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="68.4548%" y="677" width="1.0408%" height="15" fill="rgb(208,80,26)" fg:x="855" fg:w="13"/><text x="68.7048%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="69.4155%" y="661" width="0.0801%" height="15" fill="rgb(243,85,7)" fg:x="867" fg:w="1"/><text x="69.6655%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.4155%" y="645" width="0.0801%" height="15" fill="rgb(228,77,47)" fg:x="867" fg:w="1"/><text x="69.6655%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4155%" y="629" width="0.0801%" height="15" fill="rgb(212,226,8)" fg:x="867" fg:w="1"/><text x="69.6655%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4155%" y="613" width="0.0801%" height="15" fill="rgb(241,120,54)" fg:x="867" fg:w="1"/><text x="69.6655%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4155%" y="597" width="0.0801%" height="15" fill="rgb(226,80,16)" fg:x="867" fg:w="1"/><text x="69.6655%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4155%" y="581" width="0.0801%" height="15" fill="rgb(240,76,13)" fg:x="867" fg:w="1"/><text x="69.6655%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4155%" y="565" width="0.0801%" height="15" fill="rgb(252,74,8)" fg:x="867" fg:w="1"/><text x="69.6655%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4155%" y="549" width="0.0801%" height="15" fill="rgb(244,155,2)" fg:x="867" fg:w="1"/><text x="69.6655%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4155%" y="533" width="0.0801%" height="15" fill="rgb(215,81,35)" fg:x="867" fg:w="1"/><text x="69.6655%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4155%" y="517" width="0.0801%" height="15" fill="rgb(206,55,2)" fg:x="867" fg:w="1"/><text x="69.6655%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4155%" y="501" width="0.0801%" height="15" fill="rgb(231,2,34)" fg:x="867" fg:w="1"/><text x="69.6655%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.4155%" y="485" width="0.0801%" height="15" fill="rgb(242,176,48)" fg:x="867" fg:w="1"/><text x="69.6655%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.4155%" y="469" width="0.0801%" height="15" fill="rgb(249,31,36)" fg:x="867" fg:w="1"/><text x="69.6655%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.4155%" y="453" width="0.0801%" height="15" fill="rgb(205,18,17)" fg:x="867" fg:w="1"/><text x="69.6655%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="69.4956%" y="725" width="0.2402%" height="15" fill="rgb(254,130,5)" fg:x="868" fg:w="3"/><text x="69.7456%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.4956%" y="709" width="0.2402%" height="15" fill="rgb(229,42,45)" fg:x="868" fg:w="3"/><text x="69.7456%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="69.5757%" y="693" width="0.1601%" height="15" fill="rgb(245,95,25)" fg:x="869" fg:w="2"/><text x="69.8257%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.08%)</title><rect x="69.6557%" y="677" width="0.0801%" height="15" fill="rgb(249,193,38)" fg:x="870" fg:w="1"/><text x="69.9057%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="69.6557%" y="661" width="0.0801%" height="15" fill="rgb(241,140,43)" fg:x="870" fg:w="1"/><text x="69.9057%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6557%" y="645" width="0.0801%" height="15" fill="rgb(245,78,48)" fg:x="870" fg:w="1"/><text x="69.9057%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.7358%" y="597" width="0.1601%" height="15" fill="rgb(214,92,39)" fg:x="871" fg:w="2"/><text x="69.9858%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.7358%" y="661" width="0.2402%" height="15" fill="rgb(211,189,14)" fg:x="871" fg:w="3"/><text x="69.9858%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="69.7358%" y="645" width="0.2402%" height="15" fill="rgb(218,7,24)" fg:x="871" fg:w="3"/><text x="69.9858%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="69.7358%" y="629" width="0.2402%" height="15" fill="rgb(224,200,49)" fg:x="871" fg:w="3"/><text x="69.9858%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="69.7358%" y="613" width="0.2402%" height="15" fill="rgb(218,210,14)" fg:x="871" fg:w="3"/><text x="69.9858%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8959%" y="597" width="0.0801%" height="15" fill="rgb(234,142,31)" fg:x="873" fg:w="1"/><text x="70.1459%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.8959%" y="581" width="0.0801%" height="15" fill="rgb(227,165,2)" fg:x="873" fg:w="1"/><text x="70.1459%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9760%" y="629" width="0.0801%" height="15" fill="rgb(232,44,46)" fg:x="874" fg:w="1"/><text x="70.2260%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.0560%" y="629" width="0.0801%" height="15" fill="rgb(236,149,47)" fg:x="875" fg:w="1"/><text x="70.3060%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.1361%" y="613" width="0.0801%" height="15" fill="rgb(227,45,31)" fg:x="876" fg:w="1"/><text x="70.3861%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.2162%" y="597" width="0.1601%" height="15" fill="rgb(240,176,51)" fg:x="877" fg:w="2"/><text x="70.4662%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.96%)</title><rect x="69.4956%" y="741" width="0.9608%" height="15" fill="rgb(249,146,41)" fg:x="868" fg:w="12"/><text x="69.7456%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (9 samples, 0.72%)</title><rect x="69.7358%" y="725" width="0.7206%" height="15" fill="rgb(213,208,4)" fg:x="871" fg:w="9"/><text x="69.9858%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="69.7358%" y="709" width="0.7206%" height="15" fill="rgb(245,84,36)" fg:x="871" fg:w="9"/><text x="69.9858%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (9 samples, 0.72%)</title><rect x="69.7358%" y="693" width="0.7206%" height="15" fill="rgb(254,84,18)" fg:x="871" fg:w="9"/><text x="69.9858%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="69.7358%" y="677" width="0.7206%" height="15" fill="rgb(225,38,54)" fg:x="871" fg:w="9"/><text x="69.9858%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="69.9760%" y="661" width="0.4804%" height="15" fill="rgb(246,50,30)" fg:x="874" fg:w="6"/><text x="70.2260%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="69.9760%" y="645" width="0.4804%" height="15" fill="rgb(246,148,9)" fg:x="874" fg:w="6"/><text x="70.2260%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.1361%" y="629" width="0.3203%" height="15" fill="rgb(223,75,4)" fg:x="876" fg:w="4"/><text x="70.3861%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="70.2162%" y="613" width="0.2402%" height="15" fill="rgb(239,148,41)" fg:x="877" fg:w="3"/><text x="70.4662%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.3763%" y="597" width="0.0801%" height="15" fill="rgb(205,195,3)" fg:x="879" fg:w="1"/><text x="70.6263%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.3763%" y="581" width="0.0801%" height="15" fill="rgb(254,161,1)" fg:x="879" fg:w="1"/><text x="70.6263%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorageFactory as engine::storage::StorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="70.4564%" y="693" width="0.0801%" height="15" fill="rgb(211,229,8)" fg:x="880" fg:w="1"/><text x="70.7064%" y="703.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="70.6165%" y="645" width="0.0801%" height="15" fill="rgb(220,97,9)" fg:x="882" fg:w="1"/><text x="70.8665%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="70.6165%" y="629" width="0.0801%" height="15" fill="rgb(240,218,8)" fg:x="882" fg:w="1"/><text x="70.8665%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="70.6165%" y="613" width="0.0801%" height="15" fill="rgb(250,44,0)" fg:x="882" fg:w="1"/><text x="70.8665%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="70.6966%" y="645" width="0.0801%" height="15" fill="rgb(236,41,53)" fg:x="883" fg:w="1"/><text x="70.9466%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="70.6966%" y="629" width="0.0801%" height="15" fill="rgb(218,227,13)" fg:x="883" fg:w="1"/><text x="70.9466%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="70.6966%" y="613" width="0.0801%" height="15" fill="rgb(217,94,32)" fg:x="883" fg:w="1"/><text x="70.9466%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="70.6966%" y="597" width="0.0801%" height="15" fill="rgb(213,217,12)" fg:x="883" fg:w="1"/><text x="70.9466%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.6966%" y="581" width="0.0801%" height="15" fill="rgb(229,13,46)" fg:x="883" fg:w="1"/><text x="70.9466%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.6966%" y="565" width="0.0801%" height="15" fill="rgb(243,139,5)" fg:x="883" fg:w="1"/><text x="70.9466%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6966%" y="549" width="0.0801%" height="15" fill="rgb(249,38,45)" fg:x="883" fg:w="1"/><text x="70.9466%" y="559.50"></text></g><g><title>&lt;plugins_core::emote::EmotePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="70.7766%" y="645" width="0.0801%" height="15" fill="rgb(216,70,11)" fg:x="884" fg:w="1"/><text x="71.0266%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="70.7766%" y="629" width="0.0801%" height="15" fill="rgb(253,101,25)" fg:x="884" fg:w="1"/><text x="71.0266%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="70.7766%" y="613" width="0.0801%" height="15" fill="rgb(207,197,30)" fg:x="884" fg:w="1"/><text x="71.0266%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.7766%" y="597" width="0.0801%" height="15" fill="rgb(238,87,13)" fg:x="884" fg:w="1"/><text x="71.0266%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7766%" y="581" width="0.0801%" height="15" fill="rgb(215,155,8)" fg:x="884" fg:w="1"/><text x="71.0266%" y="591.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="70.8567%" y="645" width="0.0801%" height="15" fill="rgb(239,166,38)" fg:x="885" fg:w="1"/><text x="71.1067%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="70.8567%" y="629" width="0.0801%" height="15" fill="rgb(240,194,35)" fg:x="885" fg:w="1"/><text x="71.1067%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="70.8567%" y="613" width="0.0801%" height="15" fill="rgb(219,10,44)" fg:x="885" fg:w="1"/><text x="71.1067%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.8567%" y="597" width="0.0801%" height="15" fill="rgb(251,220,35)" fg:x="885" fg:w="1"/><text x="71.1067%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="70.9367%" y="645" width="0.0801%" height="15" fill="rgb(218,117,13)" fg:x="886" fg:w="1"/><text x="71.1867%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="70.9367%" y="629" width="0.0801%" height="15" fill="rgb(221,213,40)" fg:x="886" fg:w="1"/><text x="71.1867%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="70.9367%" y="613" width="0.0801%" height="15" fill="rgb(251,224,35)" fg:x="886" fg:w="1"/><text x="71.1867%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9367%" y="597" width="0.0801%" height="15" fill="rgb(241,33,39)" fg:x="886" fg:w="1"/><text x="71.1867%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.56%)</title><rect x="70.5364%" y="661" width="0.5604%" height="15" fill="rgb(222,74,17)" fg:x="881" fg:w="7"/><text x="70.7864%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="71.0168%" y="645" width="0.0801%" height="15" fill="rgb(225,103,0)" fg:x="887" fg:w="1"/><text x="71.2668%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (1 samples, 0.08%)</title><rect x="71.0969%" y="661" width="0.0801%" height="15" fill="rgb(240,0,12)" fg:x="888" fg:w="1"/><text x="71.3469%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="71.0969%" y="645" width="0.0801%" height="15" fill="rgb(233,213,37)" fg:x="888" fg:w="1"/><text x="71.3469%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="71.0969%" y="629" width="0.0801%" height="15" fill="rgb(225,84,52)" fg:x="888" fg:w="1"/><text x="71.3469%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="71.0969%" y="613" width="0.0801%" height="15" fill="rgb(247,160,51)" fg:x="888" fg:w="1"/><text x="71.3469%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.0969%" y="597" width="0.0801%" height="15" fill="rgb(244,60,51)" fg:x="888" fg:w="1"/><text x="71.3469%" y="607.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (2 samples, 0.16%)</title><rect x="71.1769%" y="645" width="0.1601%" height="15" fill="rgb(233,114,7)" fg:x="889" fg:w="2"/><text x="71.4269%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.1769%" y="629" width="0.1601%" height="15" fill="rgb(246,136,16)" fg:x="889" fg:w="2"/><text x="71.4269%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.1769%" y="613" width="0.1601%" height="15" fill="rgb(243,114,45)" fg:x="889" fg:w="2"/><text x="71.4269%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2570%" y="597" width="0.0801%" height="15" fill="rgb(247,183,43)" fg:x="890" fg:w="1"/><text x="71.5070%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2570%" y="581" width="0.0801%" height="15" fill="rgb(251,210,42)" fg:x="890" fg:w="1"/><text x="71.5070%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2570%" y="565" width="0.0801%" height="15" fill="rgb(221,88,35)" fg:x="890" fg:w="1"/><text x="71.5070%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2570%" y="549" width="0.0801%" height="15" fill="rgb(242,21,20)" fg:x="890" fg:w="1"/><text x="71.5070%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2570%" y="533" width="0.0801%" height="15" fill="rgb(233,226,36)" fg:x="890" fg:w="1"/><text x="71.5070%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2570%" y="517" width="0.0801%" height="15" fill="rgb(243,189,34)" fg:x="890" fg:w="1"/><text x="71.5070%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.2570%" y="501" width="0.0801%" height="15" fill="rgb(207,145,50)" fg:x="890" fg:w="1"/><text x="71.5070%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.2570%" y="485" width="0.0801%" height="15" fill="rgb(242,1,50)" fg:x="890" fg:w="1"/><text x="71.5070%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.2570%" y="469" width="0.0801%" height="15" fill="rgb(231,65,32)" fg:x="890" fg:w="1"/><text x="71.5070%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.2570%" y="453" width="0.0801%" height="15" fill="rgb(208,68,49)" fg:x="890" fg:w="1"/><text x="71.5070%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.2570%" y="437" width="0.0801%" height="15" fill="rgb(253,54,49)" fg:x="890" fg:w="1"/><text x="71.5070%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2570%" y="421" width="0.0801%" height="15" fill="rgb(245,186,24)" fg:x="890" fg:w="1"/><text x="71.5070%" y="431.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="71.1769%" y="661" width="0.5604%" height="15" fill="rgb(209,2,41)" fg:x="889" fg:w="7"/><text x="71.4269%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.40%)</title><rect x="71.3371%" y="645" width="0.4003%" height="15" fill="rgb(242,208,54)" fg:x="891" fg:w="5"/><text x="71.5871%" y="655.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="71.3371%" y="629" width="0.4003%" height="15" fill="rgb(225,9,51)" fg:x="891" fg:w="5"/><text x="71.5871%" y="639.50"></text></g><g><title>glob::fill_todo (5 samples, 0.40%)</title><rect x="71.3371%" y="613" width="0.4003%" height="15" fill="rgb(207,207,25)" fg:x="891" fg:w="5"/><text x="71.5871%" y="623.50"></text></g><g><title>glob::is_dir (4 samples, 0.32%)</title><rect x="71.4171%" y="597" width="0.3203%" height="15" fill="rgb(253,96,18)" fg:x="892" fg:w="4"/><text x="71.6671%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="71.4171%" y="581" width="0.3203%" height="15" fill="rgb(252,215,20)" fg:x="892" fg:w="4"/><text x="71.6671%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="71.4171%" y="565" width="0.3203%" height="15" fill="rgb(245,227,26)" fg:x="892" fg:w="4"/><text x="71.6671%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="71.4171%" y="549" width="0.3203%" height="15" fill="rgb(241,208,0)" fg:x="892" fg:w="4"/><text x="71.6671%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (4 samples, 0.32%)</title><rect x="71.4171%" y="533" width="0.3203%" height="15" fill="rgb(224,130,10)" fg:x="892" fg:w="4"/><text x="71.6671%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (4 samples, 0.32%)</title><rect x="71.4171%" y="517" width="0.3203%" height="15" fill="rgb(237,29,0)" fg:x="892" fg:w="4"/><text x="71.6671%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (4 samples, 0.32%)</title><rect x="71.4171%" y="501" width="0.3203%" height="15" fill="rgb(219,27,41)" fg:x="892" fg:w="4"/><text x="71.6671%" y="511.50"></text></g><g><title>statx (4 samples, 0.32%)</title><rect x="71.4171%" y="485" width="0.3203%" height="15" fill="rgb(245,101,19)" fg:x="892" fg:w="4"/><text x="71.6671%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7374%" y="645" width="0.0801%" height="15" fill="rgb(243,44,37)" fg:x="896" fg:w="1"/><text x="71.9874%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (18 samples, 1.44%)</title><rect x="70.5364%" y="677" width="1.4412%" height="15" fill="rgb(228,213,43)" fg:x="881" fg:w="18"/><text x="70.7864%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="71.7374%" y="661" width="0.2402%" height="15" fill="rgb(219,163,21)" fg:x="896" fg:w="3"/><text x="71.9874%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="71.8175%" y="645" width="0.1601%" height="15" fill="rgb(234,86,24)" fg:x="897" fg:w="2"/><text x="72.0675%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.8975%" y="629" width="0.0801%" height="15" fill="rgb(225,10,24)" fg:x="898" fg:w="1"/><text x="72.1475%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (20 samples, 1.60%)</title><rect x="70.4564%" y="741" width="1.6013%" height="15" fill="rgb(218,109,7)" fg:x="880" fg:w="20"/><text x="70.7064%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (20 samples, 1.60%)</title><rect x="70.4564%" y="725" width="1.6013%" height="15" fill="rgb(210,20,26)" fg:x="880" fg:w="20"/><text x="70.7064%" y="735.50"></text></g><g><title>engine::session::Session::new (20 samples, 1.60%)</title><rect x="70.4564%" y="709" width="1.6013%" height="15" fill="rgb(216,18,1)" fg:x="880" fg:w="20"/><text x="70.7064%" y="719.50"></text></g><g><title>engine::session::Session::initialize (19 samples, 1.52%)</title><rect x="70.5364%" y="693" width="1.5212%" height="15" fill="rgb(206,163,23)" fg:x="881" fg:w="19"/><text x="70.7864%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="71.9776%" y="677" width="0.0801%" height="15" fill="rgb(229,150,31)" fg:x="899" fg:w="1"/><text x="72.2276%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.9776%" y="661" width="0.0801%" height="15" fill="rgb(231,10,5)" fg:x="899" fg:w="1"/><text x="72.2276%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.9776%" y="645" width="0.0801%" height="15" fill="rgb(250,40,50)" fg:x="899" fg:w="1"/><text x="72.2276%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="72.0576%" y="709" width="0.0801%" height="15" fill="rgb(217,119,7)" fg:x="900" fg:w="1"/><text x="72.3076%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="72.0576%" y="693" width="0.0801%" height="15" fill="rgb(245,214,40)" fg:x="900" fg:w="1"/><text x="72.3076%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.1377%" y="613" width="0.0801%" height="15" fill="rgb(216,187,1)" fg:x="901" fg:w="1"/><text x="72.3877%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.1377%" y="597" width="0.0801%" height="15" fill="rgb(237,146,21)" fg:x="901" fg:w="1"/><text x="72.3877%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.2178%" y="597" width="0.0801%" height="15" fill="rgb(210,174,47)" fg:x="902" fg:w="1"/><text x="72.4678%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.2978%" y="581" width="0.0801%" height="15" fill="rgb(218,111,39)" fg:x="903" fg:w="1"/><text x="72.5478%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2978%" y="565" width="0.0801%" height="15" fill="rgb(224,95,19)" fg:x="903" fg:w="1"/><text x="72.5478%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.2978%" y="549" width="0.0801%" height="15" fill="rgb(234,15,38)" fg:x="903" fg:w="1"/><text x="72.5478%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.2978%" y="533" width="0.0801%" height="15" fill="rgb(246,56,12)" fg:x="903" fg:w="1"/><text x="72.5478%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.2978%" y="517" width="0.0801%" height="15" fill="rgb(247,16,17)" fg:x="903" fg:w="1"/><text x="72.5478%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.2978%" y="501" width="0.0801%" height="15" fill="rgb(215,151,11)" fg:x="903" fg:w="1"/><text x="72.5478%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.2978%" y="485" width="0.0801%" height="15" fill="rgb(225,16,24)" fg:x="903" fg:w="1"/><text x="72.5478%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.2978%" y="469" width="0.0801%" height="15" fill="rgb(217,117,5)" fg:x="903" fg:w="1"/><text x="72.5478%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.2978%" y="453" width="0.0801%" height="15" fill="rgb(246,187,53)" fg:x="903" fg:w="1"/><text x="72.5478%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.3779%" y="581" width="0.0801%" height="15" fill="rgb(241,71,40)" fg:x="904" fg:w="1"/><text x="72.6279%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.4580%" y="549" width="0.0801%" height="15" fill="rgb(231,67,39)" fg:x="905" fg:w="1"/><text x="72.7080%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.4580%" y="533" width="0.0801%" height="15" fill="rgb(222,120,24)" fg:x="905" fg:w="1"/><text x="72.7080%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="72.2978%" y="597" width="0.3203%" height="15" fill="rgb(248,3,3)" fg:x="903" fg:w="4"/><text x="72.5478%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.4580%" y="581" width="0.1601%" height="15" fill="rgb(228,218,5)" fg:x="905" fg:w="2"/><text x="72.7080%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.4580%" y="565" width="0.1601%" height="15" fill="rgb(212,202,43)" fg:x="905" fg:w="2"/><text x="72.7080%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5380%" y="549" width="0.0801%" height="15" fill="rgb(235,183,2)" fg:x="906" fg:w="1"/><text x="72.7880%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.5380%" y="533" width="0.0801%" height="15" fill="rgb(230,165,10)" fg:x="906" fg:w="1"/><text x="72.7880%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.5380%" y="517" width="0.0801%" height="15" fill="rgb(219,54,40)" fg:x="906" fg:w="1"/><text x="72.7880%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.5380%" y="501" width="0.0801%" height="15" fill="rgb(244,73,9)" fg:x="906" fg:w="1"/><text x="72.7880%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="72.1377%" y="629" width="0.6405%" height="15" fill="rgb(212,32,45)" fg:x="901" fg:w="8"/><text x="72.3877%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="72.2178%" y="613" width="0.5604%" height="15" fill="rgb(205,58,31)" fg:x="902" fg:w="7"/><text x="72.4678%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="72.6181%" y="597" width="0.1601%" height="15" fill="rgb(250,120,43)" fg:x="907" fg:w="2"/><text x="72.8681%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.6982%" y="581" width="0.0801%" height="15" fill="rgb(235,13,10)" fg:x="908" fg:w="1"/><text x="72.9482%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.6982%" y="565" width="0.0801%" height="15" fill="rgb(232,219,31)" fg:x="908" fg:w="1"/><text x="72.9482%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="72.8583%" y="549" width="0.0801%" height="15" fill="rgb(218,157,51)" fg:x="910" fg:w="1"/><text x="73.1083%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.8583%" y="533" width="0.0801%" height="15" fill="rgb(211,91,52)" fg:x="910" fg:w="1"/><text x="73.1083%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8583%" y="517" width="0.0801%" height="15" fill="rgb(240,173,1)" fg:x="910" fg:w="1"/><text x="73.1083%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.7782%" y="629" width="0.2402%" height="15" fill="rgb(248,20,47)" fg:x="909" fg:w="3"/><text x="73.0282%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="72.7782%" y="613" width="0.2402%" height="15" fill="rgb(217,221,40)" fg:x="909" fg:w="3"/><text x="73.0282%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.7782%" y="597" width="0.2402%" height="15" fill="rgb(226,149,51)" fg:x="909" fg:w="3"/><text x="73.0282%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.8583%" y="581" width="0.1601%" height="15" fill="rgb(252,193,7)" fg:x="910" fg:w="2"/><text x="73.1083%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.8583%" y="565" width="0.1601%" height="15" fill="rgb(205,123,0)" fg:x="910" fg:w="2"/><text x="73.1083%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.9384%" y="549" width="0.0801%" height="15" fill="rgb(233,173,25)" fg:x="911" fg:w="1"/><text x="73.1884%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9384%" y="533" width="0.0801%" height="15" fill="rgb(216,63,32)" fg:x="911" fg:w="1"/><text x="73.1884%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0184%" y="581" width="0.0801%" height="15" fill="rgb(209,56,45)" fg:x="912" fg:w="1"/><text x="73.2684%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="73.1785%" y="549" width="0.0801%" height="15" fill="rgb(226,111,49)" fg:x="914" fg:w="1"/><text x="73.4285%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.2586%" y="533" width="0.0801%" height="15" fill="rgb(244,181,21)" fg:x="915" fg:w="1"/><text x="73.5086%" y="543.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.44%)</title><rect x="72.0576%" y="725" width="1.4412%" height="15" fill="rgb(222,126,15)" fg:x="900" fg:w="18"/><text x="72.3076%" y="735.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.36%)</title><rect x="72.1377%" y="709" width="1.3611%" height="15" fill="rgb(222,95,17)" fg:x="901" fg:w="17"/><text x="72.3877%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.36%)</title><rect x="72.1377%" y="693" width="1.3611%" height="15" fill="rgb(254,46,5)" fg:x="901" fg:w="17"/><text x="72.3877%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.36%)</title><rect x="72.1377%" y="677" width="1.3611%" height="15" fill="rgb(236,216,35)" fg:x="901" fg:w="17"/><text x="72.3877%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.36%)</title><rect x="72.1377%" y="661" width="1.3611%" height="15" fill="rgb(217,187,26)" fg:x="901" fg:w="17"/><text x="72.3877%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.36%)</title><rect x="72.1377%" y="645" width="1.3611%" height="15" fill="rgb(207,192,25)" fg:x="901" fg:w="17"/><text x="72.3877%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="73.0184%" y="629" width="0.4804%" height="15" fill="rgb(253,135,27)" fg:x="912" fg:w="6"/><text x="73.2684%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="73.0184%" y="613" width="0.4804%" height="15" fill="rgb(211,122,29)" fg:x="912" fg:w="6"/><text x="73.2684%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="73.0184%" y="597" width="0.4804%" height="15" fill="rgb(233,162,40)" fg:x="912" fg:w="6"/><text x="73.2684%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="73.0985%" y="581" width="0.4003%" height="15" fill="rgb(222,184,47)" fg:x="913" fg:w="5"/><text x="73.3485%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="73.1785%" y="565" width="0.3203%" height="15" fill="rgb(249,99,23)" fg:x="914" fg:w="4"/><text x="73.4285%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="73.2586%" y="549" width="0.2402%" height="15" fill="rgb(214,60,12)" fg:x="915" fg:w="3"/><text x="73.5086%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.3387%" y="533" width="0.1601%" height="15" fill="rgb(250,229,36)" fg:x="916" fg:w="2"/><text x="73.5887%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.3387%" y="517" width="0.1601%" height="15" fill="rgb(232,195,10)" fg:x="916" fg:w="2"/><text x="73.5887%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.3387%" y="501" width="0.1601%" height="15" fill="rgb(205,213,31)" fg:x="916" fg:w="2"/><text x="73.5887%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.4187%" y="485" width="0.0801%" height="15" fill="rgb(237,43,8)" fg:x="917" fg:w="1"/><text x="73.6687%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.4187%" y="469" width="0.0801%" height="15" fill="rgb(216,208,3)" fg:x="917" fg:w="1"/><text x="73.6687%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="73.4988%" y="693" width="0.0801%" height="15" fill="rgb(228,179,44)" fg:x="918" fg:w="1"/><text x="73.7488%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeMut&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="73.4988%" y="677" width="0.0801%" height="15" fill="rgb(230,192,27)" fg:x="918" fg:w="1"/><text x="73.7488%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="73.5789%" y="693" width="0.0801%" height="15" fill="rgb(251,30,38)" fg:x="919" fg:w="1"/><text x="73.8289%" y="703.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="73.5789%" y="677" width="0.0801%" height="15" fill="rgb(246,55,52)" fg:x="919" fg:w="1"/><text x="73.8289%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (3 samples, 0.24%)</title><rect x="73.4988%" y="725" width="0.2402%" height="15" fill="rgb(249,79,26)" fg:x="918" fg:w="3"/><text x="73.7488%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (3 samples, 0.24%)</title><rect x="73.4988%" y="709" width="0.2402%" height="15" fill="rgb(220,202,16)" fg:x="918" fg:w="3"/><text x="73.7488%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6589%" y="693" width="0.0801%" height="15" fill="rgb(250,170,23)" fg:x="920" fg:w="1"/><text x="73.9089%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.6589%" y="677" width="0.0801%" height="15" fill="rgb(230,7,37)" fg:x="920" fg:w="1"/><text x="73.9089%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.6589%" y="661" width="0.0801%" height="15" fill="rgb(213,71,1)" fg:x="920" fg:w="1"/><text x="73.9089%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6589%" y="645" width="0.0801%" height="15" fill="rgb(227,87,39)" fg:x="920" fg:w="1"/><text x="73.9089%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.6589%" y="629" width="0.0801%" height="15" fill="rgb(210,41,29)" fg:x="920" fg:w="1"/><text x="73.9089%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6589%" y="613" width="0.0801%" height="15" fill="rgb(206,191,31)" fg:x="920" fg:w="1"/><text x="73.9089%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6589%" y="597" width="0.0801%" height="15" fill="rgb(247,75,54)" fg:x="920" fg:w="1"/><text x="73.9089%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.7390%" y="693" width="0.0801%" height="15" fill="rgb(208,54,50)" fg:x="921" fg:w="1"/><text x="73.9890%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7390%" y="677" width="0.0801%" height="15" fill="rgb(214,90,37)" fg:x="921" fg:w="1"/><text x="73.9890%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7390%" y="661" width="0.0801%" height="15" fill="rgb(220,132,6)" fg:x="921" fg:w="1"/><text x="73.9890%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7390%" y="645" width="0.0801%" height="15" fill="rgb(213,167,7)" fg:x="921" fg:w="1"/><text x="73.9890%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.7390%" y="629" width="0.0801%" height="15" fill="rgb(243,36,27)" fg:x="921" fg:w="1"/><text x="73.9890%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.7390%" y="613" width="0.0801%" height="15" fill="rgb(235,147,12)" fg:x="921" fg:w="1"/><text x="73.9890%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.7390%" y="597" width="0.0801%" height="15" fill="rgb(212,198,44)" fg:x="921" fg:w="1"/><text x="73.9890%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.7390%" y="581" width="0.0801%" height="15" fill="rgb(218,68,50)" fg:x="921" fg:w="1"/><text x="73.9890%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7390%" y="565" width="0.0801%" height="15" fill="rgb(224,79,48)" fg:x="921" fg:w="1"/><text x="73.9890%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.7390%" y="549" width="0.0801%" height="15" fill="rgb(213,191,50)" fg:x="921" fg:w="1"/><text x="73.9890%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.7390%" y="533" width="0.0801%" height="15" fill="rgb(254,146,10)" fg:x="921" fg:w="1"/><text x="73.9890%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.7390%" y="517" width="0.0801%" height="15" fill="rgb(215,175,11)" fg:x="921" fg:w="1"/><text x="73.9890%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.7390%" y="501" width="0.0801%" height="15" fill="rgb(207,49,7)" fg:x="921" fg:w="1"/><text x="73.9890%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.7390%" y="485" width="0.0801%" height="15" fill="rgb(234,144,29)" fg:x="921" fg:w="1"/><text x="73.9890%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7390%" y="469" width="0.0801%" height="15" fill="rgb(213,222,48)" fg:x="921" fg:w="1"/><text x="73.9890%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.8191%" y="661" width="0.0801%" height="15" fill="rgb(222,8,6)" fg:x="922" fg:w="1"/><text x="74.0691%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.8191%" y="645" width="0.0801%" height="15" fill="rgb(221,114,49)" fg:x="922" fg:w="1"/><text x="74.0691%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="73.8191%" y="677" width="0.1601%" height="15" fill="rgb(250,140,42)" fg:x="922" fg:w="2"/><text x="74.0691%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8991%" y="661" width="0.0801%" height="15" fill="rgb(250,150,27)" fg:x="923" fg:w="1"/><text x="74.1491%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8991%" y="645" width="0.0801%" height="15" fill="rgb(252,159,3)" fg:x="923" fg:w="1"/><text x="74.1491%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="73.8191%" y="693" width="0.2402%" height="15" fill="rgb(241,182,3)" fg:x="922" fg:w="3"/><text x="74.0691%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="73.9792%" y="677" width="0.0801%" height="15" fill="rgb(236,3,9)" fg:x="924" fg:w="1"/><text x="74.2292%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="74.0592%" y="677" width="0.1601%" height="15" fill="rgb(223,227,51)" fg:x="925" fg:w="2"/><text x="74.3092%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="74.0592%" y="661" width="0.1601%" height="15" fill="rgb(232,133,30)" fg:x="925" fg:w="2"/><text x="74.3092%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="74.0592%" y="645" width="0.1601%" height="15" fill="rgb(209,93,27)" fg:x="925" fg:w="2"/><text x="74.3092%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.0592%" y="629" width="0.1601%" height="15" fill="rgb(208,108,34)" fg:x="925" fg:w="2"/><text x="74.3092%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.0592%" y="613" width="0.1601%" height="15" fill="rgb(215,189,13)" fg:x="925" fg:w="2"/><text x="74.3092%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="74.0592%" y="597" width="0.1601%" height="15" fill="rgb(206,88,23)" fg:x="925" fg:w="2"/><text x="74.3092%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.0592%" y="581" width="0.1601%" height="15" fill="rgb(240,173,0)" fg:x="925" fg:w="2"/><text x="74.3092%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.1393%" y="565" width="0.0801%" height="15" fill="rgb(223,106,52)" fg:x="926" fg:w="1"/><text x="74.3893%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1393%" y="549" width="0.0801%" height="15" fill="rgb(206,130,16)" fg:x="926" fg:w="1"/><text x="74.3893%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1393%" y="533" width="0.0801%" height="15" fill="rgb(220,54,25)" fg:x="926" fg:w="1"/><text x="74.3893%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2194%" y="645" width="0.0801%" height="15" fill="rgb(210,4,38)" fg:x="927" fg:w="1"/><text x="74.4694%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.2194%" y="629" width="0.0801%" height="15" fill="rgb(238,94,39)" fg:x="927" fg:w="1"/><text x="74.4694%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2194%" y="613" width="0.0801%" height="15" fill="rgb(234,124,34)" fg:x="927" fg:w="1"/><text x="74.4694%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.80%)</title><rect x="73.7390%" y="725" width="0.8006%" height="15" fill="rgb(221,91,40)" fg:x="921" fg:w="10"/><text x="73.9890%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.80%)</title><rect x="73.7390%" y="709" width="0.8006%" height="15" fill="rgb(246,53,28)" fg:x="921" fg:w="10"/><text x="73.9890%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="74.0592%" y="693" width="0.4804%" height="15" fill="rgb(229,109,7)" fg:x="925" fg:w="6"/><text x="74.3092%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="74.2194%" y="677" width="0.3203%" height="15" fill="rgb(249,117,8)" fg:x="927" fg:w="4"/><text x="74.4694%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="74.2194%" y="661" width="0.3203%" height="15" fill="rgb(210,181,1)" fg:x="927" fg:w="4"/><text x="74.4694%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="74.2994%" y="645" width="0.2402%" height="15" fill="rgb(211,66,1)" fg:x="928" fg:w="3"/><text x="74.5494%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="74.2994%" y="629" width="0.2402%" height="15" fill="rgb(221,90,14)" fg:x="928" fg:w="3"/><text x="74.5494%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.2994%" y="613" width="0.2402%" height="15" fill="rgb(219,222,44)" fg:x="928" fg:w="3"/><text x="74.5494%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.2994%" y="597" width="0.2402%" height="15" fill="rgb(246,34,33)" fg:x="928" fg:w="3"/><text x="74.5494%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.2994%" y="581" width="0.2402%" height="15" fill="rgb(227,135,41)" fg:x="928" fg:w="3"/><text x="74.5494%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.2994%" y="565" width="0.2402%" height="15" fill="rgb(226,15,14)" fg:x="928" fg:w="3"/><text x="74.5494%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="74.2994%" y="549" width="0.2402%" height="15" fill="rgb(236,148,47)" fg:x="928" fg:w="3"/><text x="74.5494%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.2994%" y="533" width="0.2402%" height="15" fill="rgb(233,162,52)" fg:x="928" fg:w="3"/><text x="74.5494%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.3795%" y="517" width="0.1601%" height="15" fill="rgb(244,35,28)" fg:x="929" fg:w="2"/><text x="74.6295%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="74.5396%" y="725" width="0.0801%" height="15" fill="rgb(205,121,10)" fg:x="931" fg:w="1"/><text x="74.7896%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="74.5396%" y="709" width="0.0801%" height="15" fill="rgb(250,58,18)" fg:x="931" fg:w="1"/><text x="74.7896%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.5396%" y="693" width="0.0801%" height="15" fill="rgb(216,37,13)" fg:x="931" fg:w="1"/><text x="74.7896%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="74.5396%" y="677" width="0.0801%" height="15" fill="rgb(221,215,42)" fg:x="931" fg:w="1"/><text x="74.7896%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5396%" y="661" width="0.0801%" height="15" fill="rgb(217,214,19)" fg:x="931" fg:w="1"/><text x="74.7896%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="74.6197%" y="725" width="0.0801%" height="15" fill="rgb(233,139,13)" fg:x="932" fg:w="1"/><text x="74.8697%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="74.6197%" y="709" width="0.0801%" height="15" fill="rgb(247,168,23)" fg:x="932" fg:w="1"/><text x="74.8697%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="74.6197%" y="693" width="0.0801%" height="15" fill="rgb(207,202,1)" fg:x="932" fg:w="1"/><text x="74.8697%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.6197%" y="677" width="0.0801%" height="15" fill="rgb(220,155,48)" fg:x="932" fg:w="1"/><text x="74.8697%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6197%" y="661" width="0.0801%" height="15" fill="rgb(250,43,26)" fg:x="932" fg:w="1"/><text x="74.8697%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6197%" y="645" width="0.0801%" height="15" fill="rgb(212,190,23)" fg:x="932" fg:w="1"/><text x="74.8697%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6197%" y="629" width="0.0801%" height="15" fill="rgb(216,39,24)" fg:x="932" fg:w="1"/><text x="74.8697%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6197%" y="613" width="0.0801%" height="15" fill="rgb(252,113,16)" fg:x="932" fg:w="1"/><text x="74.8697%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6197%" y="597" width="0.0801%" height="15" fill="rgb(208,113,19)" fg:x="932" fg:w="1"/><text x="74.8697%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.6197%" y="581" width="0.0801%" height="15" fill="rgb(234,107,25)" fg:x="932" fg:w="1"/><text x="74.8697%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.6197%" y="565" width="0.0801%" height="15" fill="rgb(234,217,51)" fg:x="932" fg:w="1"/><text x="74.8697%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.6197%" y="549" width="0.0801%" height="15" fill="rgb(251,29,42)" fg:x="932" fg:w="1"/><text x="74.8697%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.6197%" y="533" width="0.0801%" height="15" fill="rgb(221,62,51)" fg:x="932" fg:w="1"/><text x="74.8697%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.6197%" y="517" width="0.0801%" height="15" fill="rgb(240,192,43)" fg:x="932" fg:w="1"/><text x="74.8697%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.6197%" y="501" width="0.0801%" height="15" fill="rgb(224,157,47)" fg:x="932" fg:w="1"/><text x="74.8697%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.6197%" y="485" width="0.0801%" height="15" fill="rgb(226,84,45)" fg:x="932" fg:w="1"/><text x="74.8697%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.6197%" y="469" width="0.0801%" height="15" fill="rgb(208,207,23)" fg:x="932" fg:w="1"/><text x="74.8697%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.6197%" y="453" width="0.0801%" height="15" fill="rgb(253,34,51)" fg:x="932" fg:w="1"/><text x="74.8697%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6197%" y="437" width="0.0801%" height="15" fill="rgb(227,26,34)" fg:x="932" fg:w="1"/><text x="74.8697%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.6998%" y="709" width="0.0801%" height="15" fill="rgb(245,75,19)" fg:x="933" fg:w="1"/><text x="74.9498%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.6998%" y="693" width="0.0801%" height="15" fill="rgb(250,191,31)" fg:x="933" fg:w="1"/><text x="74.9498%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6998%" y="677" width="0.0801%" height="15" fill="rgb(224,11,50)" fg:x="933" fg:w="1"/><text x="74.9498%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6998%" y="661" width="0.0801%" height="15" fill="rgb(231,171,7)" fg:x="933" fg:w="1"/><text x="74.9498%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6998%" y="645" width="0.0801%" height="15" fill="rgb(252,214,10)" fg:x="933" fg:w="1"/><text x="74.9498%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.7798%" y="645" width="0.0801%" height="15" fill="rgb(249,45,46)" fg:x="934" fg:w="1"/><text x="75.0298%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="74.7798%" y="629" width="0.0801%" height="15" fill="rgb(240,173,7)" fg:x="934" fg:w="1"/><text x="75.0298%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="74.7798%" y="613" width="0.0801%" height="15" fill="rgb(235,214,13)" fg:x="934" fg:w="1"/><text x="75.0298%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.7798%" y="597" width="0.0801%" height="15" fill="rgb(245,156,8)" fg:x="934" fg:w="1"/><text x="75.0298%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.7798%" y="581" width="0.0801%" height="15" fill="rgb(235,46,12)" fg:x="934" fg:w="1"/><text x="75.0298%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7798%" y="565" width="0.0801%" height="15" fill="rgb(221,81,14)" fg:x="934" fg:w="1"/><text x="75.0298%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.8599%" y="581" width="0.0801%" height="15" fill="rgb(238,207,9)" fg:x="935" fg:w="1"/><text x="75.1099%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.8599%" y="565" width="0.0801%" height="15" fill="rgb(224,129,35)" fg:x="935" fg:w="1"/><text x="75.1099%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.9400%" y="549" width="0.0801%" height="15" fill="rgb(243,218,34)" fg:x="936" fg:w="1"/><text x="75.1900%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9400%" y="533" width="0.0801%" height="15" fill="rgb(220,166,13)" fg:x="936" fg:w="1"/><text x="75.1900%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.9400%" y="517" width="0.0801%" height="15" fill="rgb(227,167,49)" fg:x="936" fg:w="1"/><text x="75.1900%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.9400%" y="501" width="0.0801%" height="15" fill="rgb(234,142,12)" fg:x="936" fg:w="1"/><text x="75.1900%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.9400%" y="485" width="0.0801%" height="15" fill="rgb(207,100,48)" fg:x="936" fg:w="1"/><text x="75.1900%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.9400%" y="469" width="0.0801%" height="15" fill="rgb(210,25,14)" fg:x="936" fg:w="1"/><text x="75.1900%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.0200%" y="549" width="0.0801%" height="15" fill="rgb(246,116,27)" fg:x="937" fg:w="1"/><text x="75.2700%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.0200%" y="533" width="0.0801%" height="15" fill="rgb(214,193,42)" fg:x="937" fg:w="1"/><text x="75.2700%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.0200%" y="517" width="0.0801%" height="15" fill="rgb(214,122,8)" fg:x="937" fg:w="1"/><text x="75.2700%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.0200%" y="501" width="0.0801%" height="15" fill="rgb(244,173,18)" fg:x="937" fg:w="1"/><text x="75.2700%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.1001%" y="533" width="0.0801%" height="15" fill="rgb(232,68,19)" fg:x="938" fg:w="1"/><text x="75.3501%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.1001%" y="517" width="0.0801%" height="15" fill="rgb(236,224,1)" fg:x="938" fg:w="1"/><text x="75.3501%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.1801%" y="517" width="0.0801%" height="15" fill="rgb(240,11,8)" fg:x="939" fg:w="1"/><text x="75.4301%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="74.8599%" y="597" width="0.4804%" height="15" fill="rgb(244,159,20)" fg:x="935" fg:w="6"/><text x="75.1099%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="74.9400%" y="581" width="0.4003%" height="15" fill="rgb(240,223,54)" fg:x="936" fg:w="5"/><text x="75.1900%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="74.9400%" y="565" width="0.4003%" height="15" fill="rgb(237,146,5)" fg:x="936" fg:w="5"/><text x="75.1900%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="75.1001%" y="549" width="0.2402%" height="15" fill="rgb(218,221,32)" fg:x="938" fg:w="3"/><text x="75.3501%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.1801%" y="533" width="0.1601%" height="15" fill="rgb(244,96,26)" fg:x="939" fg:w="2"/><text x="75.4301%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.2602%" y="517" width="0.0801%" height="15" fill="rgb(245,184,37)" fg:x="940" fg:w="1"/><text x="75.5102%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.2602%" y="501" width="0.0801%" height="15" fill="rgb(248,91,47)" fg:x="940" fg:w="1"/><text x="75.5102%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.2602%" y="485" width="0.0801%" height="15" fill="rgb(243,199,8)" fg:x="940" fg:w="1"/><text x="75.5102%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.3403%" y="565" width="0.0801%" height="15" fill="rgb(249,12,15)" fg:x="941" fg:w="1"/><text x="75.5903%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.3403%" y="549" width="0.0801%" height="15" fill="rgb(245,97,12)" fg:x="941" fg:w="1"/><text x="75.5903%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.4203%" y="533" width="0.0801%" height="15" fill="rgb(244,61,1)" fg:x="942" fg:w="1"/><text x="75.6703%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4203%" y="517" width="0.0801%" height="15" fill="rgb(222,194,10)" fg:x="942" fg:w="1"/><text x="75.6703%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.3403%" y="597" width="0.3203%" height="15" fill="rgb(226,178,8)" fg:x="941" fg:w="4"/><text x="75.5903%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="75.3403%" y="581" width="0.3203%" height="15" fill="rgb(241,32,34)" fg:x="941" fg:w="4"/><text x="75.5903%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.4203%" y="565" width="0.2402%" height="15" fill="rgb(254,26,6)" fg:x="942" fg:w="3"/><text x="75.6703%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.4203%" y="549" width="0.2402%" height="15" fill="rgb(249,71,11)" fg:x="942" fg:w="3"/><text x="75.6703%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.5004%" y="533" width="0.1601%" height="15" fill="rgb(232,170,27)" fg:x="943" fg:w="2"/><text x="75.7504%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.8207%" y="549" width="0.0801%" height="15" fill="rgb(214,223,17)" fg:x="947" fg:w="1"/><text x="76.0707%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="75.9007%" y="549" width="0.0801%" height="15" fill="rgb(250,18,15)" fg:x="948" fg:w="1"/><text x="76.1507%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.9007%" y="533" width="0.0801%" height="15" fill="rgb(212,153,51)" fg:x="948" fg:w="1"/><text x="76.1507%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9007%" y="517" width="0.0801%" height="15" fill="rgb(219,194,12)" fg:x="948" fg:w="1"/><text x="76.1507%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.9808%" y="501" width="0.0801%" height="15" fill="rgb(212,58,17)" fg:x="949" fg:w="1"/><text x="76.2308%" y="511.50"></text></g><g><title>engine::session::Session::flush (17 samples, 1.36%)</title><rect x="74.7798%" y="709" width="1.3611%" height="15" fill="rgb(254,5,10)" fg:x="934" fg:w="17"/><text x="75.0298%" y="719.50"></text></g><g><title>engine::session::Session::save_changes (17 samples, 1.36%)</title><rect x="74.7798%" y="693" width="1.3611%" height="15" fill="rgb(246,91,7)" fg:x="934" fg:w="17"/><text x="75.0298%" y="703.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.36%)</title><rect x="74.7798%" y="677" width="1.3611%" height="15" fill="rgb(218,108,49)" fg:x="934" fg:w="17"/><text x="75.0298%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.36%)</title><rect x="74.7798%" y="661" width="1.3611%" height="15" fill="rgb(238,123,20)" fg:x="934" fg:w="17"/><text x="75.0298%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.28%)</title><rect x="74.8599%" y="645" width="1.2810%" height="15" fill="rgb(231,69,23)" fg:x="935" fg:w="16"/><text x="75.1099%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.28%)</title><rect x="74.8599%" y="629" width="1.2810%" height="15" fill="rgb(230,209,3)" fg:x="935" fg:w="16"/><text x="75.1099%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (16 samples, 1.28%)</title><rect x="74.8599%" y="613" width="1.2810%" height="15" fill="rgb(231,19,0)" fg:x="935" fg:w="16"/><text x="75.1099%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="75.6605%" y="597" width="0.4804%" height="15" fill="rgb(226,192,25)" fg:x="945" fg:w="6"/><text x="75.9105%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="75.6605%" y="581" width="0.4804%" height="15" fill="rgb(223,175,53)" fg:x="945" fg:w="6"/><text x="75.9105%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="75.7406%" y="565" width="0.4003%" height="15" fill="rgb(248,35,51)" fg:x="946" fg:w="5"/><text x="75.9906%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="75.9808%" y="549" width="0.1601%" height="15" fill="rgb(230,37,26)" fg:x="949" fg:w="2"/><text x="76.2308%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="75.9808%" y="533" width="0.1601%" height="15" fill="rgb(206,120,22)" fg:x="949" fg:w="2"/><text x="76.2308%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.9808%" y="517" width="0.1601%" height="15" fill="rgb(207,165,28)" fg:x="949" fg:w="2"/><text x="76.2308%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.0608%" y="501" width="0.0801%" height="15" fill="rgb(226,23,46)" fg:x="950" fg:w="1"/><text x="76.3108%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0608%" y="485" width="0.0801%" height="15" fill="rgb(208,130,44)" fg:x="950" fg:w="1"/><text x="76.3108%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.0608%" y="469" width="0.0801%" height="15" fill="rgb(231,67,8)" fg:x="950" fg:w="1"/><text x="76.3108%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.0608%" y="453" width="0.0801%" height="15" fill="rgb(205,183,22)" fg:x="950" fg:w="1"/><text x="76.3108%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0608%" y="437" width="0.0801%" height="15" fill="rgb(224,47,9)" fg:x="950" fg:w="1"/><text x="76.3108%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.1409%" y="661" width="0.0801%" height="15" fill="rgb(250,183,49)" fg:x="951" fg:w="1"/><text x="76.3909%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1409%" y="645" width="0.0801%" height="15" fill="rgb(220,151,39)" fg:x="951" fg:w="1"/><text x="76.3909%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="76.1409%" y="693" width="0.1601%" height="15" fill="rgb(220,118,20)" fg:x="951" fg:w="2"/><text x="76.3909%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="76.1409%" y="677" width="0.1601%" height="15" fill="rgb(231,65,51)" fg:x="951" fg:w="2"/><text x="76.3909%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.2210%" y="661" width="0.0801%" height="15" fill="rgb(253,125,37)" fg:x="952" fg:w="1"/><text x="76.4710%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2210%" y="645" width="0.0801%" height="15" fill="rgb(232,102,6)" fg:x="952" fg:w="1"/><text x="76.4710%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.2210%" y="629" width="0.0801%" height="15" fill="rgb(251,105,13)" fg:x="952" fg:w="1"/><text x="76.4710%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.2210%" y="613" width="0.0801%" height="15" fill="rgb(222,179,29)" fg:x="952" fg:w="1"/><text x="76.4710%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2210%" y="597" width="0.0801%" height="15" fill="rgb(229,180,53)" fg:x="952" fg:w="1"/><text x="76.4710%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.2210%" y="581" width="0.0801%" height="15" fill="rgb(238,104,13)" fg:x="952" fg:w="1"/><text x="76.4710%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="76.3010%" y="677" width="0.0801%" height="15" fill="rgb(210,130,5)" fg:x="953" fg:w="1"/><text x="76.5510%" y="687.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="76.3010%" y="661" width="0.0801%" height="15" fill="rgb(233,87,49)" fg:x="953" fg:w="1"/><text x="76.5510%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3010%" y="645" width="0.0801%" height="15" fill="rgb(243,34,9)" fg:x="953" fg:w="1"/><text x="76.5510%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3010%" y="629" width="0.0801%" height="15" fill="rgb(235,225,10)" fg:x="953" fg:w="1"/><text x="76.5510%" y="639.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.3010%" y="613" width="0.0801%" height="15" fill="rgb(212,0,30)" fg:x="953" fg:w="1"/><text x="76.5510%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.3010%" y="597" width="0.0801%" height="15" fill="rgb(211,177,0)" fg:x="953" fg:w="1"/><text x="76.5510%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="76.3811%" y="661" width="0.1601%" height="15" fill="rgb(225,220,11)" fg:x="954" fg:w="2"/><text x="76.6311%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="76.3811%" y="645" width="0.1601%" height="15" fill="rgb(215,10,13)" fg:x="954" fg:w="2"/><text x="76.6311%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="76.4612%" y="629" width="0.0801%" height="15" fill="rgb(240,177,14)" fg:x="955" fg:w="1"/><text x="76.7112%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.4612%" y="613" width="0.0801%" height="15" fill="rgb(243,7,39)" fg:x="955" fg:w="1"/><text x="76.7112%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.4612%" y="597" width="0.0801%" height="15" fill="rgb(212,99,0)" fg:x="955" fg:w="1"/><text x="76.7112%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.4612%" y="581" width="0.0801%" height="15" fill="rgb(225,162,48)" fg:x="955" fg:w="1"/><text x="76.7112%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.4612%" y="565" width="0.0801%" height="15" fill="rgb(246,16,25)" fg:x="955" fg:w="1"/><text x="76.7112%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5412%" y="629" width="0.0801%" height="15" fill="rgb(220,150,2)" fg:x="956" fg:w="1"/><text x="76.7912%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.5412%" y="613" width="0.0801%" height="15" fill="rgb(237,113,11)" fg:x="956" fg:w="1"/><text x="76.7912%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5412%" y="597" width="0.0801%" height="15" fill="rgb(236,70,20)" fg:x="956" fg:w="1"/><text x="76.7912%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.5412%" y="581" width="0.0801%" height="15" fill="rgb(234,94,7)" fg:x="956" fg:w="1"/><text x="76.7912%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.5412%" y="565" width="0.0801%" height="15" fill="rgb(250,221,0)" fg:x="956" fg:w="1"/><text x="76.7912%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="76.3010%" y="693" width="0.4003%" height="15" fill="rgb(245,149,46)" fg:x="953" fg:w="5"/><text x="76.5510%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="76.3811%" y="677" width="0.3203%" height="15" fill="rgb(215,37,27)" fg:x="954" fg:w="4"/><text x="76.6311%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="76.5412%" y="661" width="0.1601%" height="15" fill="rgb(232,65,3)" fg:x="956" fg:w="2"/><text x="76.7912%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="76.5412%" y="645" width="0.1601%" height="15" fill="rgb(214,2,16)" fg:x="956" fg:w="2"/><text x="76.7912%" y="655.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6213%" y="629" width="0.0801%" height="15" fill="rgb(227,131,50)" fg:x="957" fg:w="1"/><text x="76.8713%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6213%" y="613" width="0.0801%" height="15" fill="rgb(247,131,45)" fg:x="957" fg:w="1"/><text x="76.8713%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6213%" y="597" width="0.0801%" height="15" fill="rgb(215,97,47)" fg:x="957" fg:w="1"/><text x="76.8713%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6213%" y="581" width="0.0801%" height="15" fill="rgb(233,143,12)" fg:x="957" fg:w="1"/><text x="76.8713%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6213%" y="565" width="0.0801%" height="15" fill="rgb(222,57,17)" fg:x="957" fg:w="1"/><text x="76.8713%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="76.1409%" y="709" width="0.6405%" height="15" fill="rgb(214,119,38)" fg:x="951" fg:w="8"/><text x="76.3909%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.7014%" y="693" width="0.0801%" height="15" fill="rgb(217,28,47)" fg:x="958" fg:w="1"/><text x="76.9514%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="76.7814%" y="645" width="0.1601%" height="15" fill="rgb(231,14,52)" fg:x="959" fg:w="2"/><text x="77.0314%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="76.7814%" y="629" width="0.1601%" height="15" fill="rgb(220,158,18)" fg:x="959" fg:w="2"/><text x="77.0314%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.8615%" y="613" width="0.0801%" height="15" fill="rgb(222,143,46)" fg:x="960" fg:w="1"/><text x="77.1115%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="76.9416%" y="629" width="0.0801%" height="15" fill="rgb(227,165,5)" fg:x="961" fg:w="1"/><text x="77.1916%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.9416%" y="613" width="0.0801%" height="15" fill="rgb(216,222,49)" fg:x="961" fg:w="1"/><text x="77.1916%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9416%" y="597" width="0.0801%" height="15" fill="rgb(238,73,39)" fg:x="961" fg:w="1"/><text x="77.1916%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.9416%" y="581" width="0.0801%" height="15" fill="rgb(252,115,9)" fg:x="961" fg:w="1"/><text x="77.1916%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.9416%" y="565" width="0.0801%" height="15" fill="rgb(238,202,4)" fg:x="961" fg:w="1"/><text x="77.1916%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.9416%" y="549" width="0.0801%" height="15" fill="rgb(252,153,44)" fg:x="961" fg:w="1"/><text x="77.1916%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.9416%" y="533" width="0.0801%" height="15" fill="rgb(235,128,27)" fg:x="961" fg:w="1"/><text x="77.1916%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="76.7814%" y="677" width="0.3203%" height="15" fill="rgb(221,121,47)" fg:x="959" fg:w="4"/><text x="77.0314%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="76.7814%" y="661" width="0.3203%" height="15" fill="rgb(247,211,47)" fg:x="959" fg:w="4"/><text x="77.0314%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="76.9416%" y="645" width="0.1601%" height="15" fill="rgb(252,47,49)" fg:x="961" fg:w="2"/><text x="77.1916%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.0216%" y="629" width="0.0801%" height="15" fill="rgb(219,119,53)" fg:x="962" fg:w="1"/><text x="77.2716%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (5 samples, 0.40%)</title><rect x="76.7814%" y="709" width="0.4003%" height="15" fill="rgb(243,165,53)" fg:x="959" fg:w="5"/><text x="77.0314%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="76.7814%" y="693" width="0.4003%" height="15" fill="rgb(230,12,35)" fg:x="959" fg:w="5"/><text x="77.0314%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.1017%" y="677" width="0.0801%" height="15" fill="rgb(239,57,49)" fg:x="963" fg:w="1"/><text x="77.3517%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1017%" y="661" width="0.0801%" height="15" fill="rgb(231,154,7)" fg:x="963" fg:w="1"/><text x="77.3517%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1017%" y="645" width="0.0801%" height="15" fill="rgb(248,81,34)" fg:x="963" fg:w="1"/><text x="77.3517%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1017%" y="629" width="0.0801%" height="15" fill="rgb(247,9,5)" fg:x="963" fg:w="1"/><text x="77.3517%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2618%" y="645" width="0.0801%" height="15" fill="rgb(228,172,27)" fg:x="965" fg:w="1"/><text x="77.5118%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="77.3419%" y="645" width="0.0801%" height="15" fill="rgb(230,57,44)" fg:x="966" fg:w="1"/><text x="77.5919%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="77.3419%" y="629" width="0.0801%" height="15" fill="rgb(249,35,22)" fg:x="966" fg:w="1"/><text x="77.5919%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="77.3419%" y="613" width="0.0801%" height="15" fill="rgb(250,137,27)" fg:x="966" fg:w="1"/><text x="77.5919%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.3419%" y="597" width="0.0801%" height="15" fill="rgb(251,57,31)" fg:x="966" fg:w="1"/><text x="77.5919%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.3419%" y="581" width="0.0801%" height="15" fill="rgb(238,60,0)" fg:x="966" fg:w="1"/><text x="77.5919%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.3419%" y="565" width="0.0801%" height="15" fill="rgb(242,185,39)" fg:x="966" fg:w="1"/><text x="77.5919%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3419%" y="549" width="0.0801%" height="15" fill="rgb(240,63,43)" fg:x="966" fg:w="1"/><text x="77.5919%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="77.1817%" y="693" width="0.3203%" height="15" fill="rgb(236,155,6)" fg:x="964" fg:w="4"/><text x="77.4317%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="77.2618%" y="677" width="0.2402%" height="15" fill="rgb(215,11,29)" fg:x="965" fg:w="3"/><text x="77.5118%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="77.2618%" y="661" width="0.2402%" height="15" fill="rgb(228,180,48)" fg:x="965" fg:w="3"/><text x="77.5118%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.4219%" y="645" width="0.0801%" height="15" fill="rgb(241,102,12)" fg:x="967" fg:w="1"/><text x="77.6719%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.4219%" y="629" width="0.0801%" height="15" fill="rgb(246,213,4)" fg:x="967" fg:w="1"/><text x="77.6719%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="77.4219%" y="613" width="0.0801%" height="15" fill="rgb(218,134,35)" fg:x="967" fg:w="1"/><text x="77.6719%" y="623.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="77.4219%" y="597" width="0.0801%" height="15" fill="rgb(251,117,35)" fg:x="967" fg:w="1"/><text x="77.6719%" y="607.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="77.4219%" y="581" width="0.0801%" height="15" fill="rgb(206,156,45)" fg:x="967" fg:w="1"/><text x="77.6719%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.5020%" y="661" width="0.0801%" height="15" fill="rgb(218,52,27)" fg:x="968" fg:w="1"/><text x="77.7520%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5020%" y="645" width="0.0801%" height="15" fill="rgb(238,83,36)" fg:x="968" fg:w="1"/><text x="77.7520%" y="655.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (6 samples, 0.48%)</title><rect x="77.1817%" y="709" width="0.4804%" height="15" fill="rgb(218,53,43)" fg:x="964" fg:w="6"/><text x="77.4317%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="77.5020%" y="693" width="0.1601%" height="15" fill="rgb(239,54,39)" fg:x="968" fg:w="2"/><text x="77.7520%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="77.5020%" y="677" width="0.1601%" height="15" fill="rgb(212,198,13)" fg:x="968" fg:w="2"/><text x="77.7520%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.5821%" y="661" width="0.0801%" height="15" fill="rgb(234,54,46)" fg:x="969" fg:w="1"/><text x="77.8321%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5821%" y="645" width="0.0801%" height="15" fill="rgb(217,120,7)" fg:x="969" fg:w="1"/><text x="77.8321%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5821%" y="629" width="0.0801%" height="15" fill="rgb(246,39,15)" fg:x="969" fg:w="1"/><text x="77.8321%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.5821%" y="613" width="0.0801%" height="15" fill="rgb(242,143,31)" fg:x="969" fg:w="1"/><text x="77.8321%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5821%" y="597" width="0.0801%" height="15" fill="rgb(252,60,24)" fg:x="969" fg:w="1"/><text x="77.8321%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.5821%" y="581" width="0.0801%" height="15" fill="rgb(249,220,7)" fg:x="969" fg:w="1"/><text x="77.8321%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5821%" y="565" width="0.0801%" height="15" fill="rgb(236,67,13)" fg:x="969" fg:w="1"/><text x="77.8321%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5821%" y="549" width="0.0801%" height="15" fill="rgb(210,62,39)" fg:x="969" fg:w="1"/><text x="77.8321%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.5821%" y="533" width="0.0801%" height="15" fill="rgb(219,122,53)" fg:x="969" fg:w="1"/><text x="77.8321%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="77.6621%" y="645" width="0.0801%" height="15" fill="rgb(218,87,25)" fg:x="970" fg:w="1"/><text x="77.9121%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.6621%" y="629" width="0.0801%" height="15" fill="rgb(234,179,48)" fg:x="970" fg:w="1"/><text x="77.9121%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6621%" y="613" width="0.0801%" height="15" fill="rgb(248,90,0)" fg:x="970" fg:w="1"/><text x="77.9121%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.6621%" y="597" width="0.0801%" height="15" fill="rgb(207,228,37)" fg:x="970" fg:w="1"/><text x="77.9121%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6621%" y="581" width="0.0801%" height="15" fill="rgb(235,214,15)" fg:x="970" fg:w="1"/><text x="77.9121%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.6621%" y="565" width="0.0801%" height="15" fill="rgb(210,144,39)" fg:x="970" fg:w="1"/><text x="77.9121%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.6621%" y="549" width="0.0801%" height="15" fill="rgb(222,67,41)" fg:x="970" fg:w="1"/><text x="77.9121%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="77.6621%" y="693" width="0.1601%" height="15" fill="rgb(205,35,37)" fg:x="970" fg:w="2"/><text x="77.9121%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="77.6621%" y="677" width="0.1601%" height="15" fill="rgb(216,125,40)" fg:x="970" fg:w="2"/><text x="77.9121%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="77.6621%" y="661" width="0.1601%" height="15" fill="rgb(228,227,20)" fg:x="970" fg:w="2"/><text x="77.9121%" y="671.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="77.7422%" y="645" width="0.0801%" height="15" fill="rgb(242,173,45)" fg:x="971" fg:w="1"/><text x="77.9922%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="77.8223%" y="693" width="0.0801%" height="15" fill="rgb(215,79,24)" fg:x="972" fg:w="1"/><text x="78.0723%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="77.8223%" y="677" width="0.0801%" height="15" fill="rgb(238,164,38)" fg:x="972" fg:w="1"/><text x="78.0723%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.8223%" y="661" width="0.0801%" height="15" fill="rgb(245,196,38)" fg:x="972" fg:w="1"/><text x="78.0723%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.8223%" y="645" width="0.0801%" height="15" fill="rgb(231,217,29)" fg:x="972" fg:w="1"/><text x="78.0723%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="77.8223%" y="629" width="0.0801%" height="15" fill="rgb(245,6,4)" fg:x="972" fg:w="1"/><text x="78.0723%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8223%" y="613" width="0.0801%" height="15" fill="rgb(214,76,49)" fg:x="972" fg:w="1"/><text x="78.0723%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8223%" y="597" width="0.0801%" height="15" fill="rgb(205,96,12)" fg:x="972" fg:w="1"/><text x="78.0723%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="77.8223%" y="581" width="0.0801%" height="15" fill="rgb(243,131,4)" fg:x="972" fg:w="1"/><text x="78.0723%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8223%" y="565" width="0.0801%" height="15" fill="rgb(214,114,4)" fg:x="972" fg:w="1"/><text x="78.0723%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="77.8223%" y="549" width="0.0801%" height="15" fill="rgb(234,215,15)" fg:x="972" fg:w="1"/><text x="78.0723%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8223%" y="533" width="0.0801%" height="15" fill="rgb(250,216,45)" fg:x="972" fg:w="1"/><text x="78.0723%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (41 samples, 3.28%)</title><rect x="74.6998%" y="725" width="3.2826%" height="15" fill="rgb(236,128,4)" fg:x="933" fg:w="41"/><text x="74.9498%" y="735.50">plu..</text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="77.6621%" y="709" width="0.3203%" height="15" fill="rgb(234,50,33)" fg:x="970" fg:w="4"/><text x="77.9121%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="77.9023%" y="693" width="0.0801%" height="15" fill="rgb(253,131,37)" fg:x="973" fg:w="1"/><text x="78.1523%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.9023%" y="677" width="0.0801%" height="15" fill="rgb(218,55,27)" fg:x="973" fg:w="1"/><text x="78.1523%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="77.9023%" y="661" width="0.0801%" height="15" fill="rgb(241,220,28)" fg:x="973" fg:w="1"/><text x="78.1523%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.9023%" y="645" width="0.0801%" height="15" fill="rgb(241,90,48)" fg:x="973" fg:w="1"/><text x="78.1523%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="77.9824%" y="725" width="0.0801%" height="15" fill="rgb(216,43,37)" fg:x="974" fg:w="1"/><text x="78.2324%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="77.9824%" y="709" width="0.0801%" height="15" fill="rgb(207,173,9)" fg:x="974" fg:w="1"/><text x="78.2324%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="77.9824%" y="693" width="0.0801%" height="15" fill="rgb(240,126,30)" fg:x="974" fg:w="1"/><text x="78.2324%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="77.9824%" y="677" width="0.0801%" height="15" fill="rgb(228,178,53)" fg:x="974" fg:w="1"/><text x="78.2324%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="77.9824%" y="661" width="0.0801%" height="15" fill="rgb(217,33,4)" fg:x="974" fg:w="1"/><text x="78.2324%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="77.9824%" y="645" width="0.0801%" height="15" fill="rgb(206,124,34)" fg:x="974" fg:w="1"/><text x="78.2324%" y="655.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="77.9824%" y="629" width="0.0801%" height="15" fill="rgb(208,122,53)" fg:x="974" fg:w="1"/><text x="78.2324%" y="639.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="78.0624%" y="693" width="0.0801%" height="15" fill="rgb(215,202,26)" fg:x="975" fg:w="1"/><text x="78.3124%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="78.0624%" y="677" width="0.0801%" height="15" fill="rgb(232,198,31)" fg:x="975" fg:w="1"/><text x="78.3124%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="78.0624%" y="661" width="0.0801%" height="15" fill="rgb(222,23,35)" fg:x="975" fg:w="1"/><text x="78.3124%" y="671.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="78.0624%" y="645" width="0.0801%" height="15" fill="rgb(242,27,53)" fg:x="975" fg:w="1"/><text x="78.3124%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0624%" y="629" width="0.0801%" height="15" fill="rgb(210,216,42)" fg:x="975" fg:w="1"/><text x="78.3124%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="78.1425%" y="677" width="0.0801%" height="15" fill="rgb(234,39,38)" fg:x="976" fg:w="1"/><text x="78.3925%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="78.1425%" y="661" width="0.0801%" height="15" fill="rgb(235,126,54)" fg:x="976" fg:w="1"/><text x="78.3925%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1425%" y="645" width="0.0801%" height="15" fill="rgb(235,150,33)" fg:x="976" fg:w="1"/><text x="78.3925%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.1425%" y="629" width="0.0801%" height="15" fill="rgb(249,49,53)" fg:x="976" fg:w="1"/><text x="78.3925%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.1425%" y="613" width="0.0801%" height="15" fill="rgb(238,60,50)" fg:x="976" fg:w="1"/><text x="78.3925%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="78.1425%" y="597" width="0.0801%" height="15" fill="rgb(210,5,2)" fg:x="976" fg:w="1"/><text x="78.3925%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.1425%" y="581" width="0.0801%" height="15" fill="rgb(214,207,24)" fg:x="976" fg:w="1"/><text x="78.3925%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1425%" y="565" width="0.0801%" height="15" fill="rgb(228,173,2)" fg:x="976" fg:w="1"/><text x="78.3925%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.1425%" y="549" width="0.0801%" height="15" fill="rgb(244,26,8)" fg:x="976" fg:w="1"/><text x="78.3925%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1425%" y="533" width="0.0801%" height="15" fill="rgb(249,153,35)" fg:x="976" fg:w="1"/><text x="78.3925%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.1425%" y="517" width="0.0801%" height="15" fill="rgb(221,215,40)" fg:x="976" fg:w="1"/><text x="78.3925%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1425%" y="501" width="0.0801%" height="15" fill="rgb(238,106,35)" fg:x="976" fg:w="1"/><text x="78.3925%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.1425%" y="485" width="0.0801%" height="15" fill="rgb(207,195,21)" fg:x="976" fg:w="1"/><text x="78.3925%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1425%" y="469" width="0.0801%" height="15" fill="rgb(205,43,29)" fg:x="976" fg:w="1"/><text x="78.3925%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="78.0624%" y="725" width="0.2402%" height="15" fill="rgb(236,35,21)" fg:x="975" fg:w="3"/><text x="78.3124%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="78.0624%" y="709" width="0.2402%" height="15" fill="rgb(244,74,8)" fg:x="975" fg:w="3"/><text x="78.3124%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="78.1425%" y="693" width="0.1601%" height="15" fill="rgb(241,229,7)" fg:x="976" fg:w="2"/><text x="78.3925%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.2226%" y="677" width="0.0801%" height="15" fill="rgb(212,223,25)" fg:x="977" fg:w="1"/><text x="78.4726%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2226%" y="661" width="0.0801%" height="15" fill="rgb(234,58,53)" fg:x="977" fg:w="1"/><text x="78.4726%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2226%" y="645" width="0.0801%" height="15" fill="rgb(244,36,1)" fg:x="977" fg:w="1"/><text x="78.4726%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2226%" y="629" width="0.0801%" height="15" fill="rgb(222,40,54)" fg:x="977" fg:w="1"/><text x="78.4726%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="78.3827%" y="709" width="0.0801%" height="15" fill="rgb(210,207,39)" fg:x="979" fg:w="1"/><text x="78.6327%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="78.5428%" y="661" width="0.0801%" height="15" fill="rgb(234,52,14)" fg:x="981" fg:w="1"/><text x="78.7928%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="78.5428%" y="645" width="0.0801%" height="15" fill="rgb(239,108,46)" fg:x="981" fg:w="1"/><text x="78.7928%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.5428%" y="629" width="0.0801%" height="15" fill="rgb(252,223,5)" fg:x="981" fg:w="1"/><text x="78.7928%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.5428%" y="613" width="0.0801%" height="15" fill="rgb(227,181,11)" fg:x="981" fg:w="1"/><text x="78.7928%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5428%" y="597" width="0.0801%" height="15" fill="rgb(248,126,40)" fg:x="981" fg:w="1"/><text x="78.7928%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (83 samples, 6.65%)</title><rect x="72.0576%" y="741" width="6.6453%" height="15" fill="rgb(243,1,18)" fg:x="900" fg:w="83"/><text x="72.3076%" y="751.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="78.3026%" y="725" width="0.4003%" height="15" fill="rgb(214,145,23)" fg:x="978" fg:w="5"/><text x="78.5526%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="78.4628%" y="709" width="0.2402%" height="15" fill="rgb(241,218,11)" fg:x="980" fg:w="3"/><text x="78.7128%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="78.5428%" y="693" width="0.1601%" height="15" fill="rgb(214,219,24)" fg:x="981" fg:w="2"/><text x="78.7928%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="78.5428%" y="677" width="0.1601%" height="15" fill="rgb(235,32,7)" fg:x="981" fg:w="2"/><text x="78.7928%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.6229%" y="661" width="0.0801%" height="15" fill="rgb(227,121,28)" fg:x="982" fg:w="1"/><text x="78.8729%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.6229%" y="645" width="0.0801%" height="15" fill="rgb(216,129,49)" fg:x="982" fg:w="1"/><text x="78.8729%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6229%" y="629" width="0.0801%" height="15" fill="rgb(207,194,50)" fg:x="982" fg:w="1"/><text x="78.8729%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="78.7030%" y="741" width="0.0801%" height="15" fill="rgb(207,4,18)" fg:x="983" fg:w="1"/><text x="78.9530%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.7030%" y="725" width="0.0801%" height="15" fill="rgb(213,50,30)" fg:x="983" fg:w="1"/><text x="78.9530%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="78.7830%" y="741" width="0.0801%" height="15" fill="rgb(208,77,22)" fg:x="984" fg:w="1"/><text x="79.0330%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.7830%" y="725" width="0.0801%" height="15" fill="rgb(244,204,34)" fg:x="984" fg:w="1"/><text x="79.0330%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.7830%" y="709" width="0.0801%" height="15" fill="rgb(230,20,17)" fg:x="984" fg:w="1"/><text x="79.0330%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.7830%" y="693" width="0.0801%" height="15" fill="rgb(237,83,15)" fg:x="984" fg:w="1"/><text x="79.0330%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="78.8631%" y="725" width="0.0801%" height="15" fill="rgb(221,109,25)" fg:x="985" fg:w="1"/><text x="79.1131%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8631%" y="709" width="0.0801%" height="15" fill="rgb(205,194,52)" fg:x="985" fg:w="1"/><text x="79.1131%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.8631%" y="693" width="0.0801%" height="15" fill="rgb(244,173,54)" fg:x="985" fg:w="1"/><text x="79.1131%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="78.8631%" y="677" width="0.0801%" height="15" fill="rgb(227,181,18)" fg:x="985" fg:w="1"/><text x="79.1131%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.9432%" y="725" width="0.0801%" height="15" fill="rgb(238,36,30)" fg:x="986" fg:w="1"/><text x="79.1932%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="78.9432%" y="709" width="0.0801%" height="15" fill="rgb(254,85,0)" fg:x="986" fg:w="1"/><text x="79.1932%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.9432%" y="693" width="0.0801%" height="15" fill="rgb(247,63,33)" fg:x="986" fg:w="1"/><text x="79.1932%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.9432%" y="677" width="0.0801%" height="15" fill="rgb(220,7,54)" fg:x="986" fg:w="1"/><text x="79.1932%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.9432%" y="661" width="0.0801%" height="15" fill="rgb(238,227,21)" fg:x="986" fg:w="1"/><text x="79.1932%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="78.9432%" y="645" width="0.0801%" height="15" fill="rgb(237,29,31)" fg:x="986" fg:w="1"/><text x="79.1932%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="78.9432%" y="629" width="0.0801%" height="15" fill="rgb(211,21,50)" fg:x="986" fg:w="1"/><text x="79.1932%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="78.9432%" y="613" width="0.0801%" height="15" fill="rgb(239,119,2)" fg:x="986" fg:w="1"/><text x="79.1932%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="78.9432%" y="597" width="0.0801%" height="15" fill="rgb(250,2,39)" fg:x="986" fg:w="1"/><text x="79.1932%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="78.9432%" y="581" width="0.0801%" height="15" fill="rgb(244,46,53)" fg:x="986" fg:w="1"/><text x="79.1932%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="78.9432%" y="565" width="0.0801%" height="15" fill="rgb(209,21,19)" fg:x="986" fg:w="1"/><text x="79.1932%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.9432%" y="549" width="0.0801%" height="15" fill="rgb(236,145,4)" fg:x="986" fg:w="1"/><text x="79.1932%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.9432%" y="533" width="0.0801%" height="15" fill="rgb(220,133,36)" fg:x="986" fg:w="1"/><text x="79.1932%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="78.9432%" y="517" width="0.0801%" height="15" fill="rgb(244,18,3)" fg:x="986" fg:w="1"/><text x="79.1932%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="78.9432%" y="501" width="0.0801%" height="15" fill="rgb(232,171,48)" fg:x="986" fg:w="1"/><text x="79.1932%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.9432%" y="485" width="0.0801%" height="15" fill="rgb(223,223,53)" fg:x="986" fg:w="1"/><text x="79.1932%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="78.9432%" y="469" width="0.0801%" height="15" fill="rgb(246,92,13)" fg:x="986" fg:w="1"/><text x="79.1932%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.9432%" y="453" width="0.0801%" height="15" fill="rgb(229,171,10)" fg:x="986" fg:w="1"/><text x="79.1932%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="78.9432%" y="437" width="0.0801%" height="15" fill="rgb(213,131,26)" fg:x="986" fg:w="1"/><text x="79.1932%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.9432%" y="421" width="0.0801%" height="15" fill="rgb(242,87,54)" fg:x="986" fg:w="1"/><text x="79.1932%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="78.9432%" y="405" width="0.0801%" height="15" fill="rgb(237,21,35)" fg:x="986" fg:w="1"/><text x="79.1932%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.9432%" y="389" width="0.0801%" height="15" fill="rgb(253,13,47)" fg:x="986" fg:w="1"/><text x="79.1932%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9432%" y="373" width="0.0801%" height="15" fill="rgb(215,122,49)" fg:x="986" fg:w="1"/><text x="79.1932%" y="383.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="79.0232%" y="645" width="0.0801%" height="15" fill="rgb(209,179,30)" fg:x="987" fg:w="1"/><text x="79.2732%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="79.0232%" y="629" width="0.0801%" height="15" fill="rgb(235,100,24)" fg:x="987" fg:w="1"/><text x="79.2732%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.0232%" y="613" width="0.0801%" height="15" fill="rgb(209,67,24)" fg:x="987" fg:w="1"/><text x="79.2732%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="79.1033%" y="629" width="0.1601%" height="15" fill="rgb(206,74,32)" fg:x="988" fg:w="2"/><text x="79.3533%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.1033%" y="613" width="0.1601%" height="15" fill="rgb(212,45,25)" fg:x="988" fg:w="2"/><text x="79.3533%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.1033%" y="597" width="0.1601%" height="15" fill="rgb(239,26,3)" fg:x="988" fg:w="2"/><text x="79.3533%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.1833%" y="581" width="0.0801%" height="15" fill="rgb(218,36,15)" fg:x="989" fg:w="1"/><text x="79.4333%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.1833%" y="565" width="0.0801%" height="15" fill="rgb(206,108,24)" fg:x="989" fg:w="1"/><text x="79.4333%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.2634%" y="613" width="0.0801%" height="15" fill="rgb(234,204,42)" fg:x="990" fg:w="1"/><text x="79.5134%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.2634%" y="597" width="0.0801%" height="15" fill="rgb(229,2,11)" fg:x="990" fg:w="1"/><text x="79.5134%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.2634%" y="581" width="0.0801%" height="15" fill="rgb(221,20,48)" fg:x="990" fg:w="1"/><text x="79.5134%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.2634%" y="565" width="0.0801%" height="15" fill="rgb(244,164,10)" fg:x="990" fg:w="1"/><text x="79.5134%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.3435%" y="597" width="0.0801%" height="15" fill="rgb(243,229,2)" fg:x="991" fg:w="1"/><text x="79.5935%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.4235%" y="597" width="0.0801%" height="15" fill="rgb(232,131,37)" fg:x="992" fg:w="1"/><text x="79.6735%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5036%" y="597" width="0.0801%" height="15" fill="rgb(217,156,11)" fg:x="993" fg:w="1"/><text x="79.7536%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.5036%" y="581" width="0.0801%" height="15" fill="rgb(239,99,48)" fg:x="993" fg:w="1"/><text x="79.7536%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.5036%" y="565" width="0.0801%" height="15" fill="rgb(231,209,9)" fg:x="993" fg:w="1"/><text x="79.7536%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.5036%" y="549" width="0.0801%" height="15" fill="rgb(254,97,27)" fg:x="993" fg:w="1"/><text x="79.7536%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5036%" y="533" width="0.0801%" height="15" fill="rgb(223,151,38)" fg:x="993" fg:w="1"/><text x="79.7536%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.5036%" y="517" width="0.0801%" height="15" fill="rgb(219,206,35)" fg:x="993" fg:w="1"/><text x="79.7536%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.5036%" y="501" width="0.0801%" height="15" fill="rgb(216,130,31)" fg:x="993" fg:w="1"/><text x="79.7536%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.5036%" y="485" width="0.0801%" height="15" fill="rgb(251,97,34)" fg:x="993" fg:w="1"/><text x="79.7536%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="79.3435%" y="613" width="0.4003%" height="15" fill="rgb(246,159,47)" fg:x="991" fg:w="5"/><text x="79.5935%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.5837%" y="597" width="0.1601%" height="15" fill="rgb(232,87,10)" fg:x="994" fg:w="2"/><text x="79.8337%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="79.5837%" y="581" width="0.1601%" height="15" fill="rgb(249,1,37)" fg:x="994" fg:w="2"/><text x="79.8337%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.6637%" y="565" width="0.0801%" height="15" fill="rgb(239,135,14)" fg:x="995" fg:w="1"/><text x="79.9137%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.80%)</title><rect x="79.1033%" y="645" width="0.8006%" height="15" fill="rgb(253,116,46)" fg:x="988" fg:w="10"/><text x="79.3533%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="79.2634%" y="629" width="0.6405%" height="15" fill="rgb(222,217,37)" fg:x="990" fg:w="8"/><text x="79.5134%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.7438%" y="613" width="0.1601%" height="15" fill="rgb(252,96,8)" fg:x="996" fg:w="2"/><text x="79.9938%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.8239%" y="597" width="0.0801%" height="15" fill="rgb(254,103,41)" fg:x="997" fg:w="1"/><text x="80.0739%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.9840%" y="613" width="0.0801%" height="15" fill="rgb(218,213,19)" fg:x="999" fg:w="1"/><text x="80.2340%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9840%" y="597" width="0.0801%" height="15" fill="rgb(253,95,21)" fg:x="999" fg:w="1"/><text x="80.2340%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.1441%" y="565" width="0.0801%" height="15" fill="rgb(229,26,28)" fg:x="1001" fg:w="1"/><text x="80.3941%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="79.9039%" y="645" width="0.4003%" height="15" fill="rgb(230,129,16)" fg:x="998" fg:w="5"/><text x="80.1539%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="79.9039%" y="629" width="0.4003%" height="15" fill="rgb(236,126,17)" fg:x="998" fg:w="5"/><text x="80.1539%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="80.0641%" y="613" width="0.2402%" height="15" fill="rgb(209,33,33)" fg:x="1000" fg:w="3"/><text x="80.3141%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="80.0641%" y="597" width="0.2402%" height="15" fill="rgb(227,85,29)" fg:x="1000" fg:w="3"/><text x="80.3141%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="80.0641%" y="581" width="0.2402%" height="15" fill="rgb(241,53,46)" fg:x="1000" fg:w="3"/><text x="80.3141%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.2242%" y="565" width="0.0801%" height="15" fill="rgb(228,167,53)" fg:x="1002" fg:w="1"/><text x="80.4742%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2242%" y="549" width="0.0801%" height="15" fill="rgb(238,195,45)" fg:x="1002" fg:w="1"/><text x="80.4742%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.3843%" y="565" width="0.0801%" height="15" fill="rgb(252,124,45)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3843%" y="549" width="0.0801%" height="15" fill="rgb(251,38,35)" fg:x="1004" fg:w="1"/><text x="80.6343%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4644%" y="549" width="0.0801%" height="15" fill="rgb(227,33,2)" fg:x="1005" fg:w="1"/><text x="80.7144%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.5444%" y="549" width="0.0801%" height="15" fill="rgb(223,157,46)" fg:x="1006" fg:w="1"/><text x="80.7944%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="80.6245%" y="533" width="0.0801%" height="15" fill="rgb(222,78,41)" fg:x="1007" fg:w="1"/><text x="80.8745%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="80.3042%" y="613" width="0.4804%" height="15" fill="rgb(248,176,11)" fg:x="1003" fg:w="6"/><text x="80.5542%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="80.3042%" y="597" width="0.4804%" height="15" fill="rgb(241,221,18)" fg:x="1003" fg:w="6"/><text x="80.5542%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="80.3042%" y="581" width="0.4804%" height="15" fill="rgb(218,85,22)" fg:x="1003" fg:w="6"/><text x="80.5542%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="80.4644%" y="565" width="0.3203%" height="15" fill="rgb(222,223,7)" fg:x="1005" fg:w="4"/><text x="80.7144%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.6245%" y="549" width="0.1601%" height="15" fill="rgb(254,59,39)" fg:x="1007" fg:w="2"/><text x="80.8745%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7046%" y="533" width="0.0801%" height="15" fill="rgb(247,100,27)" fg:x="1008" fg:w="1"/><text x="80.9546%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (7 samples, 0.56%)</title><rect x="80.3042%" y="629" width="0.5604%" height="15" fill="rgb(237,207,10)" fg:x="1003" fg:w="7"/><text x="80.5542%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="80.7846%" y="613" width="0.0801%" height="15" fill="rgb(220,121,28)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.7846%" y="597" width="0.0801%" height="15" fill="rgb(213,223,20)" fg:x="1009" fg:w="1"/><text x="81.0346%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9448%" y="597" width="0.0801%" height="15" fill="rgb(205,121,27)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.0248%" y="597" width="0.0801%" height="15" fill="rgb(253,24,53)" fg:x="1012" fg:w="1"/><text x="81.2748%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="81.0248%" y="581" width="0.0801%" height="15" fill="rgb(224,224,47)" fg:x="1012" fg:w="1"/><text x="81.2748%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.1049%" y="597" width="0.0801%" height="15" fill="rgb(250,125,36)" fg:x="1013" fg:w="1"/><text x="81.3549%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.1049%" y="581" width="0.0801%" height="15" fill="rgb(240,144,38)" fg:x="1013" fg:w="1"/><text x="81.3549%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="81.2650%" y="549" width="0.1601%" height="15" fill="rgb(250,15,50)" fg:x="1015" fg:w="2"/><text x="81.5150%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="81.2650%" y="533" width="0.1601%" height="15" fill="rgb(210,24,26)" fg:x="1015" fg:w="2"/><text x="81.5150%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.4251%" y="549" width="0.0801%" height="15" fill="rgb(234,53,53)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4251%" y="533" width="0.0801%" height="15" fill="rgb(208,108,28)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.4251%" y="517" width="0.0801%" height="15" fill="rgb(227,143,7)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4251%" y="501" width="0.0801%" height="15" fill="rgb(238,189,38)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.4251%" y="485" width="0.0801%" height="15" fill="rgb(222,69,15)" fg:x="1017" fg:w="1"/><text x="81.6751%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5853%" y="517" width="0.0801%" height="15" fill="rgb(213,169,7)" fg:x="1019" fg:w="1"/><text x="81.8353%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.5853%" y="501" width="0.0801%" height="15" fill="rgb(251,219,4)" fg:x="1019" fg:w="1"/><text x="81.8353%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="81.6653%" y="485" width="0.1601%" height="15" fill="rgb(241,55,40)" fg:x="1020" fg:w="2"/><text x="81.9153%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7454%" y="469" width="0.0801%" height="15" fill="rgb(243,57,30)" fg:x="1021" fg:w="1"/><text x="81.9954%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="81.2650%" y="565" width="0.6405%" height="15" fill="rgb(234,50,30)" fg:x="1015" fg:w="8"/><text x="81.5150%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="81.5052%" y="549" width="0.4003%" height="15" fill="rgb(239,23,42)" fg:x="1018" fg:w="5"/><text x="81.7552%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="81.5853%" y="533" width="0.3203%" height="15" fill="rgb(217,38,19)" fg:x="1019" fg:w="4"/><text x="81.8353%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="81.6653%" y="517" width="0.2402%" height="15" fill="rgb(215,179,16)" fg:x="1020" fg:w="3"/><text x="81.9153%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="81.6653%" y="501" width="0.2402%" height="15" fill="rgb(254,21,37)" fg:x="1020" fg:w="3"/><text x="81.9153%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.8255%" y="485" width="0.0801%" height="15" fill="rgb(219,207,48)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8255%" y="469" width="0.0801%" height="15" fill="rgb(227,225,41)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.12%)</title><rect x="80.8647%" y="629" width="1.1209%" height="15" fill="rgb(223,130,1)" fg:x="1010" fg:w="14"/><text x="81.1147%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.12%)</title><rect x="80.8647%" y="613" width="1.1209%" height="15" fill="rgb(249,54,42)" fg:x="1010" fg:w="14"/><text x="81.1147%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.80%)</title><rect x="81.1849%" y="597" width="0.8006%" height="15" fill="rgb(248,69,25)" fg:x="1014" fg:w="10"/><text x="81.4349%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.72%)</title><rect x="81.2650%" y="581" width="0.7206%" height="15" fill="rgb(234,21,32)" fg:x="1015" fg:w="9"/><text x="81.5150%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.9055%" y="565" width="0.0801%" height="15" fill="rgb(252,136,6)" fg:x="1023" fg:w="1"/><text x="82.1555%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.9055%" y="549" width="0.0801%" height="15" fill="rgb(245,87,12)" fg:x="1023" fg:w="1"/><text x="82.1555%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="81.9856%" y="565" width="0.2402%" height="15" fill="rgb(208,12,15)" fg:x="1024" fg:w="3"/><text x="82.2356%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="81.9856%" y="549" width="0.2402%" height="15" fill="rgb(250,98,2)" fg:x="1024" fg:w="3"/><text x="82.2356%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="81.9856%" y="533" width="0.2402%" height="15" fill="rgb(205,213,15)" fg:x="1024" fg:w="3"/><text x="82.2356%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="82.0657%" y="517" width="0.1601%" height="15" fill="rgb(248,192,44)" fg:x="1025" fg:w="2"/><text x="82.3157%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="82.0657%" y="501" width="0.1601%" height="15" fill="rgb(221,89,17)" fg:x="1025" fg:w="2"/><text x="82.3157%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="82.0657%" y="485" width="0.1601%" height="15" fill="rgb(209,55,3)" fg:x="1025" fg:w="2"/><text x="82.3157%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.1457%" y="469" width="0.0801%" height="15" fill="rgb(247,23,45)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.1457%" y="453" width="0.0801%" height="15" fill="rgb(235,152,23)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.1457%" y="437" width="0.0801%" height="15" fill="rgb(244,63,13)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="447.50"></text></g><g><title>engine::session::state::State::close (42 samples, 3.36%)</title><rect x="79.0232%" y="725" width="3.3627%" height="15" fill="rgb(227,30,37)" fg:x="987" fg:w="42"/><text x="79.2732%" y="735.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.36%)</title><rect x="79.0232%" y="709" width="3.3627%" height="15" fill="rgb(224,49,42)" fg:x="987" fg:w="42"/><text x="79.2732%" y="719.50">eng..</text></g><g><title>core::iter::adapters::try_process (42 samples, 3.36%)</title><rect x="79.0232%" y="693" width="3.3627%" height="15" fill="rgb(218,129,5)" fg:x="987" fg:w="42"/><text x="79.2732%" y="703.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 3.36%)</title><rect x="79.0232%" y="677" width="3.3627%" height="15" fill="rgb(240,199,54)" fg:x="987" fg:w="42"/><text x="79.2732%" y="687.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (42 samples, 3.36%)</title><rect x="79.0232%" y="661" width="3.3627%" height="15" fill="rgb(234,31,13)" fg:x="987" fg:w="42"/><text x="79.2732%" y="671.50">eng..</text></g><g><title>kernel::model::any_entity_changes (26 samples, 2.08%)</title><rect x="80.3042%" y="645" width="2.0817%" height="15" fill="rgb(219,73,54)" fg:x="1003" fg:w="26"/><text x="80.5542%" y="655.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="81.9856%" y="629" width="0.4003%" height="15" fill="rgb(251,162,10)" fg:x="1024" fg:w="5"/><text x="82.2356%" y="639.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="81.9856%" y="613" width="0.4003%" height="15" fill="rgb(240,138,47)" fg:x="1024" fg:w="5"/><text x="82.2356%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="81.9856%" y="597" width="0.4003%" height="15" fill="rgb(216,138,26)" fg:x="1024" fg:w="5"/><text x="82.2356%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="81.9856%" y="581" width="0.4003%" height="15" fill="rgb(243,17,35)" fg:x="1024" fg:w="5"/><text x="82.2356%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="82.2258%" y="565" width="0.1601%" height="15" fill="rgb(241,60,18)" fg:x="1027" fg:w="2"/><text x="82.4758%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="82.3058%" y="549" width="0.0801%" height="15" fill="rgb(234,2,44)" fg:x="1028" fg:w="1"/><text x="82.5558%" y="559.50"></text></g><g><title>engine::session::Session::close (45 samples, 3.60%)</title><rect x="78.8631%" y="741" width="3.6029%" height="15" fill="rgb(225,225,33)" fg:x="985" fg:w="45"/><text x="79.1131%" y="751.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="82.3859%" y="725" width="0.0801%" height="15" fill="rgb(234,50,31)" fg:x="1029" fg:w="1"/><text x="82.6359%" y="735.50"></text></g><g><title>kernel::plugins::Plugin::stop (1 samples, 0.08%)</title><rect x="82.3859%" y="709" width="0.0801%" height="15" fill="rgb(249,6,25)" fg:x="1029" fg:w="1"/><text x="82.6359%" y="719.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="82.5460%" y="709" width="0.0801%" height="15" fill="rgb(241,5,17)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="82.5460%" y="693" width="0.0801%" height="15" fill="rgb(207,116,10)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="703.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="82.5460%" y="677" width="0.0801%" height="15" fill="rgb(222,128,18)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="687.50"></text></g><g><title>plugins_core::looking::model::new_area_observation (1 samples, 0.08%)</title><rect x="82.5460%" y="661" width="0.0801%" height="15" fill="rgb(229,109,25)" fg:x="1031" fg:w="1"/><text x="82.7960%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.6261%" y="677" width="0.0801%" height="15" fill="rgb(222,102,25)" fg:x="1032" fg:w="1"/><text x="82.8761%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="82.6261%" y="661" width="0.0801%" height="15" fill="rgb(239,211,5)" fg:x="1032" fg:w="1"/><text x="82.8761%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.7062%" y="517" width="0.0801%" height="15" fill="rgb(223,136,26)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.7062%" y="501" width="0.0801%" height="15" fill="rgb(227,30,15)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="82.7062%" y="485" width="0.0801%" height="15" fill="rgb(247,76,4)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="82.7062%" y="469" width="0.0801%" height="15" fill="rgb(245,38,48)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="82.7062%" y="453" width="0.0801%" height="15" fill="rgb(210,220,14)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.7062%" y="437" width="0.0801%" height="15" fill="rgb(224,60,51)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.7062%" y="421" width="0.0801%" height="15" fill="rgb(212,133,49)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="82.7062%" y="405" width="0.0801%" height="15" fill="rgb(231,39,22)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="82.7062%" y="389" width="0.0801%" height="15" fill="rgb(236,173,22)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="82.7062%" y="373" width="0.0801%" height="15" fill="rgb(210,70,0)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="82.7062%" y="357" width="0.0801%" height="15" fill="rgb(215,170,11)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7062%" y="341" width="0.0801%" height="15" fill="rgb(220,154,28)" fg:x="1033" fg:w="1"/><text x="82.9562%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="82.7062%" y="549" width="0.1601%" height="15" fill="rgb(240,160,41)" fg:x="1033" fg:w="2"/><text x="82.9562%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="82.7062%" y="533" width="0.1601%" height="15" fill="rgb(243,215,41)" fg:x="1033" fg:w="2"/><text x="82.9562%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7862%" y="517" width="0.0801%" height="15" fill="rgb(214,208,31)" fg:x="1034" fg:w="1"/><text x="83.0362%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="82.7062%" y="565" width="0.3203%" height="15" fill="rgb(247,57,22)" fg:x="1033" fg:w="4"/><text x="82.9562%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="82.8663%" y="549" width="0.1601%" height="15" fill="rgb(228,73,52)" fg:x="1035" fg:w="2"/><text x="83.1163%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="82.8663%" y="533" width="0.1601%" height="15" fill="rgb(252,60,9)" fg:x="1035" fg:w="2"/><text x="83.1163%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="82.8663%" y="517" width="0.1601%" height="15" fill="rgb(233,9,51)" fg:x="1035" fg:w="2"/><text x="83.1163%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="82.8663%" y="501" width="0.1601%" height="15" fill="rgb(223,67,14)" fg:x="1035" fg:w="2"/><text x="83.1163%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.9464%" y="485" width="0.0801%" height="15" fill="rgb(222,86,2)" fg:x="1036" fg:w="1"/><text x="83.1964%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.0264%" y="469" width="0.0801%" height="15" fill="rgb(243,58,54)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.0264%" y="453" width="0.0801%" height="15" fill="rgb(210,200,39)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.0264%" y="437" width="0.0801%" height="15" fill="rgb(238,135,9)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.0264%" y="421" width="0.0801%" height="15" fill="rgb(232,179,7)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.0264%" y="405" width="0.0801%" height="15" fill="rgb(245,65,41)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.0264%" y="389" width="0.0801%" height="15" fill="rgb(227,43,8)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.0264%" y="373" width="0.0801%" height="15" fill="rgb(235,91,14)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.0264%" y="357" width="0.0801%" height="15" fill="rgb(235,219,31)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.0264%" y="341" width="0.0801%" height="15" fill="rgb(227,121,25)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.0264%" y="325" width="0.0801%" height="15" fill="rgb(254,129,24)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.0264%" y="309" width="0.0801%" height="15" fill="rgb(226,144,49)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.0264%" y="293" width="0.0801%" height="15" fill="rgb(214,187,32)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.0264%" y="277" width="0.0801%" height="15" fill="rgb(243,129,46)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.0264%" y="261" width="0.0801%" height="15" fill="rgb(221,185,35)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.0264%" y="245" width="0.0801%" height="15" fill="rgb(205,0,32)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.0264%" y="229" width="0.0801%" height="15" fill="rgb(229,179,12)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.0264%" y="213" width="0.0801%" height="15" fill="rgb(252,107,19)" fg:x="1037" fg:w="1"/><text x="83.2764%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="83.0264%" y="501" width="0.1601%" height="15" fill="rgb(220,95,27)" fg:x="1037" fg:w="2"/><text x="83.2764%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="83.0264%" y="485" width="0.1601%" height="15" fill="rgb(240,113,40)" fg:x="1037" fg:w="2"/><text x="83.2764%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.1065%" y="469" width="0.0801%" height="15" fill="rgb(208,4,43)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.1065%" y="453" width="0.0801%" height="15" fill="rgb(247,189,30)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="83.1065%" y="437" width="0.0801%" height="15" fill="rgb(231,157,17)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="83.1065%" y="421" width="0.0801%" height="15" fill="rgb(224,139,6)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="83.1065%" y="405" width="0.0801%" height="15" fill="rgb(223,83,16)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.1065%" y="389" width="0.0801%" height="15" fill="rgb(232,211,20)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="83.1065%" y="373" width="0.0801%" height="15" fill="rgb(225,203,35)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="83.1065%" y="357" width="0.0801%" height="15" fill="rgb(215,211,44)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="83.1065%" y="341" width="0.0801%" height="15" fill="rgb(248,213,26)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="83.1065%" y="325" width="0.0801%" height="15" fill="rgb(214,23,52)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="83.1065%" y="309" width="0.0801%" height="15" fill="rgb(225,173,50)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.1065%" y="293" width="0.0801%" height="15" fill="rgb(206,150,22)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="83.1865%" y="501" width="0.0801%" height="15" fill="rgb(239,64,23)" fg:x="1039" fg:w="1"/><text x="83.4365%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.3467%" y="373" width="0.0801%" height="15" fill="rgb(242,50,38)" fg:x="1041" fg:w="1"/><text x="83.5967%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.3467%" y="357" width="0.0801%" height="15" fill="rgb(217,91,15)" fg:x="1041" fg:w="1"/><text x="83.5967%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="83.2666%" y="405" width="0.2402%" height="15" fill="rgb(230,172,6)" fg:x="1040" fg:w="3"/><text x="83.5166%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="83.2666%" y="389" width="0.2402%" height="15" fill="rgb(221,98,26)" fg:x="1040" fg:w="3"/><text x="83.5166%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="83.4267%" y="373" width="0.0801%" height="15" fill="rgb(227,210,45)" fg:x="1042" fg:w="1"/><text x="83.6767%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.4267%" y="357" width="0.0801%" height="15" fill="rgb(206,8,30)" fg:x="1042" fg:w="1"/><text x="83.6767%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="83.2666%" y="501" width="0.3203%" height="15" fill="rgb(241,219,17)" fg:x="1040" fg:w="4"/><text x="83.5166%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="83.2666%" y="485" width="0.3203%" height="15" fill="rgb(247,121,29)" fg:x="1040" fg:w="4"/><text x="83.5166%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="83.2666%" y="469" width="0.3203%" height="15" fill="rgb(219,169,49)" fg:x="1040" fg:w="4"/><text x="83.5166%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="83.2666%" y="453" width="0.3203%" height="15" fill="rgb(253,49,49)" fg:x="1040" fg:w="4"/><text x="83.5166%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="83.2666%" y="437" width="0.3203%" height="15" fill="rgb(217,178,3)" fg:x="1040" fg:w="4"/><text x="83.5166%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="83.2666%" y="421" width="0.3203%" height="15" fill="rgb(234,73,37)" fg:x="1040" fg:w="4"/><text x="83.5166%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.5068%" y="405" width="0.0801%" height="15" fill="rgb(250,98,22)" fg:x="1043" fg:w="1"/><text x="83.7568%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.5068%" y="389" width="0.0801%" height="15" fill="rgb(220,108,37)" fg:x="1043" fg:w="1"/><text x="83.7568%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (12 samples, 0.96%)</title><rect x="82.7062%" y="597" width="0.9608%" height="15" fill="rgb(225,168,10)" fg:x="1033" fg:w="12"/><text x="82.9562%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (12 samples, 0.96%)</title><rect x="82.7062%" y="581" width="0.9608%" height="15" fill="rgb(247,215,21)" fg:x="1033" fg:w="12"/><text x="82.9562%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.64%)</title><rect x="83.0264%" y="565" width="0.6405%" height="15" fill="rgb(253,189,31)" fg:x="1037" fg:w="8"/><text x="83.2764%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.64%)</title><rect x="83.0264%" y="549" width="0.6405%" height="15" fill="rgb(241,54,22)" fg:x="1037" fg:w="8"/><text x="83.2764%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.64%)</title><rect x="83.0264%" y="533" width="0.6405%" height="15" fill="rgb(211,87,4)" fg:x="1037" fg:w="8"/><text x="83.2764%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="83.0264%" y="517" width="0.6405%" height="15" fill="rgb(245,112,24)" fg:x="1037" fg:w="8"/><text x="83.2764%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="83.5869%" y="501" width="0.0801%" height="15" fill="rgb(235,190,41)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="511.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="83.5869%" y="485" width="0.0801%" height="15" fill="rgb(214,89,8)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.5869%" y="469" width="0.0801%" height="15" fill="rgb(249,155,35)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.5869%" y="453" width="0.0801%" height="15" fill="rgb(249,88,26)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.5869%" y="437" width="0.0801%" height="15" fill="rgb(232,56,8)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.5869%" y="421" width="0.0801%" height="15" fill="rgb(240,95,3)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.5869%" y="405" width="0.0801%" height="15" fill="rgb(222,44,28)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="83.5869%" y="389" width="0.0801%" height="15" fill="rgb(234,16,30)" fg:x="1044" fg:w="1"/><text x="83.8369%" y="399.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="83.6669%" y="357" width="0.1601%" height="15" fill="rgb(223,26,17)" fg:x="1045" fg:w="2"/><text x="83.9169%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="83.6669%" y="341" width="0.1601%" height="15" fill="rgb(239,187,47)" fg:x="1045" fg:w="2"/><text x="83.9169%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.8271%" y="309" width="0.0801%" height="15" fill="rgb(247,102,50)" fg:x="1047" fg:w="1"/><text x="84.0771%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="83.8271%" y="341" width="0.1601%" height="15" fill="rgb(231,216,22)" fg:x="1047" fg:w="2"/><text x="84.0771%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="83.8271%" y="325" width="0.1601%" height="15" fill="rgb(216,201,26)" fg:x="1047" fg:w="2"/><text x="84.0771%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9071%" y="309" width="0.0801%" height="15" fill="rgb(214,186,23)" fg:x="1048" fg:w="1"/><text x="84.1571%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9071%" y="293" width="0.0801%" height="15" fill="rgb(235,184,4)" fg:x="1048" fg:w="1"/><text x="84.1571%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="83.9071%" y="277" width="0.0801%" height="15" fill="rgb(244,46,17)" fg:x="1048" fg:w="1"/><text x="84.1571%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (5 samples, 0.40%)</title><rect x="83.6669%" y="421" width="0.4003%" height="15" fill="rgb(248,74,46)" fg:x="1045" fg:w="5"/><text x="83.9169%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="83.6669%" y="405" width="0.4003%" height="15" fill="rgb(243,79,5)" fg:x="1045" fg:w="5"/><text x="83.9169%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (5 samples, 0.40%)</title><rect x="83.6669%" y="389" width="0.4003%" height="15" fill="rgb(213,148,1)" fg:x="1045" fg:w="5"/><text x="83.9169%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="83.6669%" y="373" width="0.4003%" height="15" fill="rgb(221,30,0)" fg:x="1045" fg:w="5"/><text x="83.9169%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="83.8271%" y="357" width="0.2402%" height="15" fill="rgb(207,85,29)" fg:x="1047" fg:w="3"/><text x="84.0771%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="83.9872%" y="341" width="0.0801%" height="15" fill="rgb(239,31,46)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.9872%" y="325" width="0.0801%" height="15" fill="rgb(219,6,1)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.9872%" y="309" width="0.0801%" height="15" fill="rgb(229,90,29)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.9872%" y="293" width="0.0801%" height="15" fill="rgb(242,201,42)" fg:x="1049" fg:w="1"/><text x="84.2372%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="84.0673%" y="389" width="0.0801%" height="15" fill="rgb(243,80,54)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.0673%" y="373" width="0.0801%" height="15" fill="rgb(223,166,15)" fg:x="1050" fg:w="1"/><text x="84.3173%" y="383.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="84.1473%" y="389" width="0.2402%" height="15" fill="rgb(238,78,27)" fg:x="1051" fg:w="3"/><text x="84.3973%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="84.1473%" y="373" width="0.2402%" height="15" fill="rgb(235,28,43)" fg:x="1051" fg:w="3"/><text x="84.3973%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="84.1473%" y="357" width="0.2402%" height="15" fill="rgb(240,210,28)" fg:x="1051" fg:w="3"/><text x="84.3973%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="84.1473%" y="341" width="0.2402%" height="15" fill="rgb(253,6,46)" fg:x="1051" fg:w="3"/><text x="84.3973%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="84.2274%" y="325" width="0.1601%" height="15" fill="rgb(250,159,47)" fg:x="1052" fg:w="2"/><text x="84.4774%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.2274%" y="309" width="0.1601%" height="15" fill="rgb(216,139,2)" fg:x="1052" fg:w="2"/><text x="84.4774%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="84.2274%" y="293" width="0.1601%" height="15" fill="rgb(221,124,44)" fg:x="1052" fg:w="2"/><text x="84.4774%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.2274%" y="277" width="0.1601%" height="15" fill="rgb(205,37,22)" fg:x="1052" fg:w="2"/><text x="84.4774%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="84.2274%" y="261" width="0.1601%" height="15" fill="rgb(250,55,8)" fg:x="1052" fg:w="2"/><text x="84.4774%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.3074%" y="245" width="0.0801%" height="15" fill="rgb(215,83,48)" fg:x="1053" fg:w="1"/><text x="84.5574%" y="255.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="84.3875%" y="389" width="0.0801%" height="15" fill="rgb(253,2,32)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="84.3875%" y="373" width="0.0801%" height="15" fill="rgb(236,67,28)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="84.3875%" y="357" width="0.0801%" height="15" fill="rgb(252,55,15)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="84.3875%" y="341" width="0.0801%" height="15" fill="rgb(243,173,17)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.3875%" y="325" width="0.0801%" height="15" fill="rgb(215,212,13)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.3875%" y="309" width="0.0801%" height="15" fill="rgb(253,176,6)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.3875%" y="293" width="0.0801%" height="15" fill="rgb(236,105,26)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="84.3875%" y="277" width="0.0801%" height="15" fill="rgb(239,226,32)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="84.3875%" y="261" width="0.0801%" height="15" fill="rgb(236,104,51)" fg:x="1054" fg:w="1"/><text x="84.6375%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.4676%" y="309" width="0.0801%" height="15" fill="rgb(220,172,33)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="84.4676%" y="293" width="0.0801%" height="15" fill="rgb(224,182,25)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="84.4676%" y="277" width="0.0801%" height="15" fill="rgb(236,184,24)" fg:x="1055" fg:w="1"/><text x="84.7176%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="84.4676%" y="389" width="0.1601%" height="15" fill="rgb(241,221,14)" fg:x="1055" fg:w="2"/><text x="84.7176%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="84.4676%" y="373" width="0.1601%" height="15" fill="rgb(227,146,5)" fg:x="1055" fg:w="2"/><text x="84.7176%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.4676%" y="357" width="0.1601%" height="15" fill="rgb(214,15,23)" fg:x="1055" fg:w="2"/><text x="84.7176%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="84.4676%" y="341" width="0.1601%" height="15" fill="rgb(233,157,31)" fg:x="1055" fg:w="2"/><text x="84.7176%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="84.4676%" y="325" width="0.1601%" height="15" fill="rgb(211,27,52)" fg:x="1055" fg:w="2"/><text x="84.7176%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.5476%" y="309" width="0.0801%" height="15" fill="rgb(212,223,15)" fg:x="1056" fg:w="1"/><text x="84.7976%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.5476%" y="293" width="0.0801%" height="15" fill="rgb(254,211,0)" fg:x="1056" fg:w="1"/><text x="84.7976%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.5476%" y="277" width="0.0801%" height="15" fill="rgb(205,43,38)" fg:x="1056" fg:w="1"/><text x="84.7976%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="84.6277%" y="373" width="0.0801%" height="15" fill="rgb(242,206,46)" fg:x="1057" fg:w="1"/><text x="84.8777%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="84.6277%" y="357" width="0.0801%" height="15" fill="rgb(220,221,12)" fg:x="1057" fg:w="1"/><text x="84.8777%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.6277%" y="341" width="0.0801%" height="15" fill="rgb(217,156,35)" fg:x="1057" fg:w="1"/><text x="84.8777%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="84.6277%" y="325" width="0.0801%" height="15" fill="rgb(207,181,49)" fg:x="1057" fg:w="1"/><text x="84.8777%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="84.6277%" y="309" width="0.0801%" height="15" fill="rgb(235,103,47)" fg:x="1057" fg:w="1"/><text x="84.8777%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.6277%" y="293" width="0.0801%" height="15" fill="rgb(222,63,28)" fg:x="1057" fg:w="1"/><text x="84.8777%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="84.6277%" y="389" width="0.1601%" height="15" fill="rgb(244,137,21)" fg:x="1057" fg:w="2"/><text x="84.8777%" y="399.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="84.7078%" y="373" width="0.0801%" height="15" fill="rgb(228,35,27)" fg:x="1058" fg:w="1"/><text x="84.9578%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.9480%" y="309" width="0.0801%" height="15" fill="rgb(226,191,41)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.9480%" y="293" width="0.0801%" height="15" fill="rgb(210,154,3)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.9480%" y="277" width="0.0801%" height="15" fill="rgb(216,60,49)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9480%" y="261" width="0.0801%" height="15" fill="rgb(226,17,20)" fg:x="1061" fg:w="1"/><text x="85.1980%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0280%" y="261" width="0.0801%" height="15" fill="rgb(206,115,35)" fg:x="1062" fg:w="1"/><text x="85.2780%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="85.1081%" y="261" width="0.0801%" height="15" fill="rgb(227,88,1)" fg:x="1063" fg:w="1"/><text x="85.3581%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.1081%" y="245" width="0.0801%" height="15" fill="rgb(230,222,24)" fg:x="1063" fg:w="1"/><text x="85.3581%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.1081%" y="229" width="0.0801%" height="15" fill="rgb(214,124,32)" fg:x="1063" fg:w="1"/><text x="85.3581%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="85.2682%" y="245" width="0.4003%" height="15" fill="rgb(240,41,36)" fg:x="1065" fg:w="5"/><text x="85.5182%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="85.3483%" y="229" width="0.3203%" height="15" fill="rgb(221,17,52)" fg:x="1066" fg:w="4"/><text x="85.5983%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="85.6685%" y="245" width="0.5604%" height="15" fill="rgb(252,70,16)" fg:x="1070" fg:w="7"/><text x="85.9185%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="85.7486%" y="229" width="0.4804%" height="15" fill="rgb(250,177,4)" fg:x="1071" fg:w="6"/><text x="85.9986%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="86.2290%" y="245" width="0.0801%" height="15" fill="rgb(240,188,47)" fg:x="1077" fg:w="1"/><text x="86.4790%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.3090%" y="213" width="0.0801%" height="15" fill="rgb(215,92,12)" fg:x="1078" fg:w="1"/><text x="86.5590%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="86.4692%" y="181" width="0.0801%" height="15" fill="rgb(242,110,29)" fg:x="1080" fg:w="1"/><text x="86.7192%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.5492%" y="181" width="0.0801%" height="15" fill="rgb(208,211,26)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.5492%" y="165" width="0.0801%" height="15" fill="rgb(244,147,6)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.5492%" y="149" width="0.0801%" height="15" fill="rgb(211,130,42)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.5492%" y="133" width="0.0801%" height="15" fill="rgb(220,63,1)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (17 samples, 1.36%)</title><rect x="86.6293%" y="181" width="1.3611%" height="15" fill="rgb(241,212,30)" fg:x="1082" fg:w="17"/><text x="86.8793%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (17 samples, 1.36%)</title><rect x="86.6293%" y="165" width="1.3611%" height="15" fill="rgb(233,153,17)" fg:x="1082" fg:w="17"/><text x="86.8793%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.36%)</title><rect x="86.6293%" y="149" width="1.3611%" height="15" fill="rgb(236,3,10)" fg:x="1082" fg:w="17"/><text x="86.8793%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.76%)</title><rect x="86.3090%" y="229" width="1.7614%" height="15" fill="rgb(232,41,21)" fg:x="1078" fg:w="22"/><text x="86.5590%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (21 samples, 1.68%)</title><rect x="86.3891%" y="213" width="1.6813%" height="15" fill="rgb(206,63,51)" fg:x="1079" fg:w="21"/><text x="86.6391%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.68%)</title><rect x="86.3891%" y="197" width="1.6813%" height="15" fill="rgb(250,214,3)" fg:x="1079" fg:w="21"/><text x="86.6391%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="87.9904%" y="181" width="0.0801%" height="15" fill="rgb(254,89,27)" fg:x="1099" fg:w="1"/><text x="88.2404%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.9904%" y="165" width="0.0801%" height="15" fill="rgb(249,41,14)" fg:x="1099" fg:w="1"/><text x="88.2404%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.9904%" y="149" width="0.0801%" height="15" fill="rgb(221,196,51)" fg:x="1099" fg:w="1"/><text x="88.2404%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.9904%" y="133" width="0.0801%" height="15" fill="rgb(214,116,26)" fg:x="1099" fg:w="1"/><text x="88.2404%" y="143.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="88.1505%" y="213" width="0.0801%" height="15" fill="rgb(236,67,7)" fg:x="1101" fg:w="1"/><text x="88.4005%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.2306%" y="213" width="0.0801%" height="15" fill="rgb(253,179,32)" fg:x="1102" fg:w="1"/><text x="88.4806%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="88.3106%" y="213" width="0.0801%" height="15" fill="rgb(218,33,15)" fg:x="1103" fg:w="1"/><text x="88.5606%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.64%)</title><rect x="88.0705%" y="229" width="0.6405%" height="15" fill="rgb(217,202,41)" fg:x="1100" fg:w="8"/><text x="88.3205%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="88.3907%" y="213" width="0.3203%" height="15" fill="rgb(234,133,5)" fg:x="1104" fg:w="4"/><text x="88.6407%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.6309%" y="197" width="0.0801%" height="15" fill="rgb(240,47,40)" fg:x="1107" fg:w="1"/><text x="88.8809%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.6309%" y="181" width="0.0801%" height="15" fill="rgb(234,166,26)" fg:x="1107" fg:w="1"/><text x="88.8809%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.6309%" y="165" width="0.0801%" height="15" fill="rgb(244,125,51)" fg:x="1107" fg:w="1"/><text x="88.8809%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (45 samples, 3.60%)</title><rect x="85.1882%" y="261" width="3.6029%" height="15" fill="rgb(229,171,11)" fg:x="1064" fg:w="45"/><text x="85.4382%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (31 samples, 2.48%)</title><rect x="86.3090%" y="245" width="2.4820%" height="15" fill="rgb(224,38,45)" fg:x="1078" fg:w="31"/><text x="86.5590%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="88.7110%" y="229" width="0.0801%" height="15" fill="rgb(237,27,7)" fg:x="1108" fg:w="1"/><text x="88.9610%" y="239.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.08%)</title><rect x="88.7910%" y="261" width="0.0801%" height="15" fill="rgb(216,52,7)" fg:x="1109" fg:w="1"/><text x="89.0410%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="88.7910%" y="245" width="0.0801%" height="15" fill="rgb(243,11,11)" fg:x="1109" fg:w="1"/><text x="89.0410%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="88.7910%" y="229" width="0.0801%" height="15" fill="rgb(253,167,20)" fg:x="1109" fg:w="1"/><text x="89.0410%" y="239.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (1 samples, 0.08%)</title><rect x="88.7910%" y="213" width="0.0801%" height="15" fill="rgb(215,207,5)" fg:x="1109" fg:w="1"/><text x="89.0410%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.08%)</title><rect x="88.7910%" y="197" width="0.0801%" height="15" fill="rgb(252,127,31)" fg:x="1109" fg:w="1"/><text x="89.0410%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="88.8711%" y="261" width="0.1601%" height="15" fill="rgb(209,106,27)" fg:x="1110" fg:w="2"/><text x="89.1211%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="88.8711%" y="245" width="0.1601%" height="15" fill="rgb(214,220,18)" fg:x="1110" fg:w="2"/><text x="89.1211%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="88.9512%" y="229" width="0.0801%" height="15" fill="rgb(237,89,12)" fg:x="1111" fg:w="1"/><text x="89.2012%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="88.9512%" y="213" width="0.0801%" height="15" fill="rgb(209,167,36)" fg:x="1111" fg:w="1"/><text x="89.2012%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="88.9512%" y="197" width="0.0801%" height="15" fill="rgb(243,45,22)" fg:x="1111" fg:w="1"/><text x="89.2012%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (52 samples, 4.16%)</title><rect x="85.0280%" y="309" width="4.1633%" height="15" fill="rgb(239,2,46)" fg:x="1062" fg:w="52"/><text x="85.2780%" y="319.50">&lt;rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (52 samples, 4.16%)</title><rect x="85.0280%" y="293" width="4.1633%" height="15" fill="rgb(241,101,0)" fg:x="1062" fg:w="52"/><text x="85.2780%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (52 samples, 4.16%)</title><rect x="85.0280%" y="277" width="4.1633%" height="15" fill="rgb(244,34,31)" fg:x="1062" fg:w="52"/><text x="85.2780%" y="287.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="89.0312%" y="261" width="0.1601%" height="15" fill="rgb(248,23,22)" fg:x="1112" fg:w="2"/><text x="89.2812%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="89.0312%" y="245" width="0.1601%" height="15" fill="rgb(218,27,48)" fg:x="1112" fg:w="2"/><text x="89.2812%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="89.0312%" y="229" width="0.1601%" height="15" fill="rgb(232,78,1)" fg:x="1112" fg:w="2"/><text x="89.2812%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="89.1113%" y="213" width="0.0801%" height="15" fill="rgb(233,169,12)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.1113%" y="197" width="0.0801%" height="15" fill="rgb(225,222,54)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.1113%" y="181" width="0.0801%" height="15" fill="rgb(245,126,29)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.1113%" y="165" width="0.0801%" height="15" fill="rgb(241,63,48)" fg:x="1113" fg:w="1"/><text x="89.3613%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="89.2714%" y="229" width="0.0801%" height="15" fill="rgb(235,126,38)" fg:x="1115" fg:w="1"/><text x="89.5214%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (57 samples, 4.56%)</title><rect x="84.8679%" y="325" width="4.5637%" height="15" fill="rgb(232,96,49)" fg:x="1060" fg:w="57"/><text x="85.1179%" y="335.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="89.1914%" y="309" width="0.2402%" height="15" fill="rgb(211,146,40)" fg:x="1114" fg:w="3"/><text x="89.4414%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="89.1914%" y="293" width="0.2402%" height="15" fill="rgb(247,93,44)" fg:x="1114" fg:w="3"/><text x="89.4414%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="89.1914%" y="277" width="0.2402%" height="15" fill="rgb(251,41,49)" fg:x="1114" fg:w="3"/><text x="89.4414%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="89.1914%" y="261" width="0.2402%" height="15" fill="rgb(218,155,12)" fg:x="1114" fg:w="3"/><text x="89.4414%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="89.1914%" y="245" width="0.2402%" height="15" fill="rgb(221,161,30)" fg:x="1114" fg:w="3"/><text x="89.4414%" y="255.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="89.3515%" y="229" width="0.0801%" height="15" fill="rgb(221,179,11)" fg:x="1116" fg:w="1"/><text x="89.6015%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.3515%" y="213" width="0.0801%" height="15" fill="rgb(224,170,48)" fg:x="1116" fg:w="1"/><text x="89.6015%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="89.4315%" y="261" width="0.1601%" height="15" fill="rgb(223,117,5)" fg:x="1117" fg:w="2"/><text x="89.6815%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.5116%" y="245" width="0.0801%" height="15" fill="rgb(209,52,20)" fg:x="1118" fg:w="1"/><text x="89.7616%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="89.5116%" y="229" width="0.0801%" height="15" fill="rgb(209,19,41)" fg:x="1118" fg:w="1"/><text x="89.7616%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="89.5917%" y="261" width="0.1601%" height="15" fill="rgb(210,177,12)" fg:x="1119" fg:w="2"/><text x="89.8417%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="89.5917%" y="245" width="0.1601%" height="15" fill="rgb(211,159,37)" fg:x="1119" fg:w="2"/><text x="89.8417%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="89.5917%" y="229" width="0.1601%" height="15" fill="rgb(209,20,2)" fg:x="1119" fg:w="2"/><text x="89.8417%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="89.5917%" y="213" width="0.1601%" height="15" fill="rgb(244,3,46)" fg:x="1119" fg:w="2"/><text x="89.8417%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="89.6717%" y="197" width="0.0801%" height="15" fill="rgb(220,94,38)" fg:x="1120" fg:w="1"/><text x="89.9217%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.6717%" y="181" width="0.0801%" height="15" fill="rgb(253,14,31)" fg:x="1120" fg:w="1"/><text x="89.9217%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.6717%" y="165" width="0.0801%" height="15" fill="rgb(234,176,13)" fg:x="1120" fg:w="1"/><text x="89.9217%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.6717%" y="149" width="0.0801%" height="15" fill="rgb(218,62,25)" fg:x="1120" fg:w="1"/><text x="89.9217%" y="159.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="89.7518%" y="261" width="0.0801%" height="15" fill="rgb(216,124,40)" fg:x="1121" fg:w="1"/><text x="90.0018%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.9119%" y="229" width="0.1601%" height="15" fill="rgb(228,170,12)" fg:x="1123" fg:w="2"/><text x="90.1619%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="89.9119%" y="245" width="0.4804%" height="15" fill="rgb(231,226,5)" fg:x="1123" fg:w="6"/><text x="90.1619%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="90.0721%" y="229" width="0.3203%" height="15" fill="rgb(237,122,22)" fg:x="1125" fg:w="4"/><text x="90.3221%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="90.3923%" y="245" width="0.2402%" height="15" fill="rgb(209,185,25)" fg:x="1129" fg:w="3"/><text x="90.6423%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.5524%" y="229" width="0.0801%" height="15" fill="rgb(228,200,32)" fg:x="1131" fg:w="1"/><text x="90.8024%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="90.7126%" y="213" width="0.0801%" height="15" fill="rgb(217,140,10)" fg:x="1133" fg:w="1"/><text x="90.9626%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="90.7926%" y="213" width="0.0801%" height="15" fill="rgb(253,17,24)" fg:x="1134" fg:w="1"/><text x="91.0426%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="90.8727%" y="213" width="0.0801%" height="15" fill="rgb(212,61,6)" fg:x="1135" fg:w="1"/><text x="91.1227%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="90.8727%" y="197" width="0.0801%" height="15" fill="rgb(205,14,25)" fg:x="1135" fg:w="1"/><text x="91.1227%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="90.8727%" y="181" width="0.0801%" height="15" fill="rgb(232,69,41)" fg:x="1135" fg:w="1"/><text x="91.1227%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="90.6325%" y="245" width="0.4003%" height="15" fill="rgb(241,106,47)" fg:x="1132" fg:w="5"/><text x="90.8825%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="90.6325%" y="229" width="0.4003%" height="15" fill="rgb(210,213,53)" fg:x="1132" fg:w="5"/><text x="90.8825%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="90.9528%" y="213" width="0.0801%" height="15" fill="rgb(253,175,27)" fg:x="1136" fg:w="1"/><text x="91.2028%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="91.0328%" y="197" width="0.0801%" height="15" fill="rgb(211,171,24)" fg:x="1137" fg:w="1"/><text x="91.2828%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.0328%" y="181" width="0.0801%" height="15" fill="rgb(229,80,7)" fg:x="1137" fg:w="1"/><text x="91.2828%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.0328%" y="165" width="0.0801%" height="15" fill="rgb(212,46,39)" fg:x="1137" fg:w="1"/><text x="91.2828%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.0328%" y="149" width="0.0801%" height="15" fill="rgb(240,80,45)" fg:x="1137" fg:w="1"/><text x="91.2828%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="91.3531%" y="133" width="0.2402%" height="15" fill="rgb(253,177,40)" fg:x="1141" fg:w="3"/><text x="91.6031%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.7534%" y="101" width="0.0801%" height="15" fill="rgb(249,200,15)" fg:x="1146" fg:w="1"/><text x="92.0034%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.7534%" y="85" width="0.0801%" height="15" fill="rgb(217,78,26)" fg:x="1146" fg:w="1"/><text x="92.0034%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.7534%" y="69" width="0.0801%" height="15" fill="rgb(254,151,32)" fg:x="1146" fg:w="1"/><text x="92.0034%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="91.5933%" y="133" width="0.4003%" height="15" fill="rgb(226,165,27)" fg:x="1144" fg:w="5"/><text x="91.8433%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="91.5933%" y="117" width="0.4003%" height="15" fill="rgb(250,206,4)" fg:x="1144" fg:w="5"/><text x="91.8433%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="91.8335%" y="101" width="0.1601%" height="15" fill="rgb(231,229,27)" fg:x="1147" fg:w="2"/><text x="92.0835%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.9135%" y="85" width="0.0801%" height="15" fill="rgb(239,217,8)" fg:x="1148" fg:w="1"/><text x="92.1635%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.76%)</title><rect x="91.9936%" y="133" width="1.7614%" height="15" fill="rgb(225,204,27)" fg:x="1149" fg:w="22"/><text x="92.2436%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (22 samples, 1.76%)</title><rect x="91.9936%" y="117" width="1.7614%" height="15" fill="rgb(230,56,32)" fg:x="1149" fg:w="22"/><text x="92.2436%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22 samples, 1.76%)</title><rect x="91.9936%" y="101" width="1.7614%" height="15" fill="rgb(222,56,27)" fg:x="1149" fg:w="22"/><text x="92.2436%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="93.7550%" y="133" width="0.0801%" height="15" fill="rgb(253,108,27)" fg:x="1171" fg:w="1"/><text x="94.0050%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="93.8351%" y="133" width="0.0801%" height="15" fill="rgb(212,87,36)" fg:x="1172" fg:w="1"/><text x="94.0851%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 3.04%)</title><rect x="91.0328%" y="229" width="3.0424%" height="15" fill="rgb(247,82,36)" fg:x="1137" fg:w="38"/><text x="91.2828%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (38 samples, 3.04%)</title><rect x="91.0328%" y="213" width="3.0424%" height="15" fill="rgb(222,143,9)" fg:x="1137" fg:w="38"/><text x="91.2828%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 2.96%)</title><rect x="91.1129%" y="197" width="2.9624%" height="15" fill="rgb(238,162,48)" fg:x="1138" fg:w="37"/><text x="91.3629%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 2.96%)</title><rect x="91.1129%" y="181" width="2.9624%" height="15" fill="rgb(221,59,43)" fg:x="1138" fg:w="37"/><text x="91.3629%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (37 samples, 2.96%)</title><rect x="91.1129%" y="165" width="2.9624%" height="15" fill="rgb(205,166,41)" fg:x="1138" fg:w="37"/><text x="91.3629%" y="175.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 2.96%)</title><rect x="91.1129%" y="149" width="2.9624%" height="15" fill="rgb(241,186,40)" fg:x="1138" fg:w="37"/><text x="91.3629%" y="159.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="93.9151%" y="133" width="0.1601%" height="15" fill="rgb(216,119,35)" fg:x="1173" fg:w="2"/><text x="94.1651%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.9952%" y="117" width="0.0801%" height="15" fill="rgb(208,68,38)" fg:x="1174" fg:w="1"/><text x="94.2452%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.9952%" y="101" width="0.0801%" height="15" fill="rgb(217,113,1)" fg:x="1174" fg:w="1"/><text x="94.2452%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.9952%" y="85" width="0.0801%" height="15" fill="rgb(242,153,3)" fg:x="1174" fg:w="1"/><text x="94.2452%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.1553%" y="213" width="0.0801%" height="15" fill="rgb(229,76,35)" fg:x="1176" fg:w="1"/><text x="94.4053%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="94.2354%" y="213" width="0.2402%" height="15" fill="rgb(229,125,34)" fg:x="1177" fg:w="3"/><text x="94.4854%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.3955%" y="197" width="0.0801%" height="15" fill="rgb(238,179,36)" fg:x="1179" fg:w="1"/><text x="94.6455%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.3955%" y="181" width="0.0801%" height="15" fill="rgb(244,183,19)" fg:x="1179" fg:w="1"/><text x="94.6455%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.3955%" y="165" width="0.0801%" height="15" fill="rgb(216,85,49)" fg:x="1179" fg:w="1"/><text x="94.6455%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="94.4756%" y="213" width="0.3203%" height="15" fill="rgb(208,161,47)" fg:x="1180" fg:w="4"/><text x="94.7256%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (48 samples, 3.84%)</title><rect x="91.0328%" y="245" width="3.8431%" height="15" fill="rgb(233,210,18)" fg:x="1137" fg:w="48"/><text x="91.2828%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="94.0753%" y="229" width="0.8006%" height="15" fill="rgb(205,104,42)" fg:x="1175" fg:w="10"/><text x="94.3253%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="94.7958%" y="213" width="0.0801%" height="15" fill="rgb(248,90,43)" fg:x="1184" fg:w="1"/><text x="95.0458%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (64 samples, 5.12%)</title><rect x="89.8319%" y="261" width="5.1241%" height="15" fill="rgb(206,198,11)" fg:x="1122" fg:w="64"/><text x="90.0819%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="94.8759%" y="245" width="0.0801%" height="15" fill="rgb(239,165,27)" fg:x="1185" fg:w="1"/><text x="95.1259%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.0360%" y="213" width="0.0801%" height="15" fill="rgb(246,44,32)" fg:x="1187" fg:w="1"/><text x="95.2860%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="95.0360%" y="197" width="0.0801%" height="15" fill="rgb(252,65,42)" fg:x="1187" fg:w="1"/><text x="95.2860%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (72 samples, 5.76%)</title><rect x="89.4315%" y="309" width="5.7646%" height="15" fill="rgb(246,197,18)" fg:x="1117" fg:w="72"/><text x="89.6815%" y="319.50">&lt;regex:..</text></g><g><title>regex::builders::string::RegexBuilder::build (72 samples, 5.76%)</title><rect x="89.4315%" y="293" width="5.7646%" height="15" fill="rgb(216,192,4)" fg:x="1117" fg:w="72"/><text x="89.6815%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (72 samples, 5.76%)</title><rect x="89.4315%" y="277" width="5.7646%" height="15" fill="rgb(208,117,10)" fg:x="1117" fg:w="72"/><text x="89.6815%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="94.9560%" y="261" width="0.2402%" height="15" fill="rgb(240,61,47)" fg:x="1186" fg:w="3"/><text x="95.2060%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="94.9560%" y="245" width="0.2402%" height="15" fill="rgb(228,178,21)" fg:x="1186" fg:w="3"/><text x="95.2060%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="94.9560%" y="229" width="0.2402%" height="15" fill="rgb(219,96,54)" fg:x="1186" fg:w="3"/><text x="95.2060%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::look (1 samples, 0.08%)</title><rect x="95.1161%" y="213" width="0.0801%" height="15" fill="rgb(250,177,24)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.1962%" y="277" width="0.0801%" height="15" fill="rgb(242,154,46)" fg:x="1189" fg:w="1"/><text x="95.4462%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="95.2762%" y="277" width="0.1601%" height="15" fill="rgb(226,176,29)" fg:x="1190" fg:w="2"/><text x="95.5262%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="95.2762%" y="261" width="0.1601%" height="15" fill="rgb(226,29,2)" fg:x="1190" fg:w="2"/><text x="95.5262%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="95.2762%" y="245" width="0.1601%" height="15" fill="rgb(237,104,14)" fg:x="1190" fg:w="2"/><text x="95.5262%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.2762%" y="229" width="0.1601%" height="15" fill="rgb(245,207,31)" fg:x="1190" fg:w="2"/><text x="95.5262%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="95.2762%" y="213" width="0.1601%" height="15" fill="rgb(229,211,45)" fg:x="1190" fg:w="2"/><text x="95.5262%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="95.4363%" y="261" width="0.1601%" height="15" fill="rgb(229,113,15)" fg:x="1192" fg:w="2"/><text x="95.6863%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="95.4363%" y="245" width="0.1601%" height="15" fill="rgb(237,147,15)" fg:x="1192" fg:w="2"/><text x="95.6863%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="95.5965%" y="261" width="0.0801%" height="15" fill="rgb(244,120,12)" fg:x="1194" fg:w="1"/><text x="95.8465%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.5965%" y="245" width="0.0801%" height="15" fill="rgb(205,120,12)" fg:x="1194" fg:w="1"/><text x="95.8465%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="95.1962%" y="309" width="0.5604%" height="15" fill="rgb(231,26,45)" fg:x="1189" fg:w="7"/><text x="95.4462%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (7 samples, 0.56%)</title><rect x="95.1962%" y="293" width="0.5604%" height="15" fill="rgb(246,98,1)" fg:x="1189" fg:w="7"/><text x="95.4462%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="95.4363%" y="277" width="0.3203%" height="15" fill="rgb(207,68,45)" fg:x="1192" fg:w="4"/><text x="95.6863%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="95.6765%" y="261" width="0.0801%" height="15" fill="rgb(231,27,38)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.6765%" y="245" width="0.0801%" height="15" fill="rgb(214,223,3)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.7566%" y="293" width="0.0801%" height="15" fill="rgb(228,195,46)" fg:x="1196" fg:w="1"/><text x="96.0066%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.7566%" y="277" width="0.0801%" height="15" fill="rgb(231,100,42)" fg:x="1196" fg:w="1"/><text x="96.0066%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (84 samples, 6.73%)</title><rect x="89.4315%" y="325" width="6.7254%" height="15" fill="rgb(236,53,4)" fg:x="1117" fg:w="84"/><text x="89.6815%" y="335.50">indefinit..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="95.7566%" y="309" width="0.4003%" height="15" fill="rgb(230,152,12)" fg:x="1196" fg:w="5"/><text x="96.0066%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="95.8367%" y="293" width="0.3203%" height="15" fill="rgb(226,101,19)" fg:x="1197" fg:w="4"/><text x="96.0867%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="95.9167%" y="277" width="0.2402%" height="15" fill="rgb(250,149,32)" fg:x="1198" fg:w="3"/><text x="96.1667%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="95.9167%" y="261" width="0.2402%" height="15" fill="rgb(232,178,12)" fg:x="1198" fg:w="3"/><text x="96.1667%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="95.9968%" y="245" width="0.1601%" height="15" fill="rgb(246,151,17)" fg:x="1199" fg:w="2"/><text x="96.2468%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="95.9968%" y="229" width="0.1601%" height="15" fill="rgb(252,17,51)" fg:x="1199" fg:w="2"/><text x="96.2468%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.0769%" y="213" width="0.0801%" height="15" fill="rgb(250,207,23)" fg:x="1200" fg:w="1"/><text x="96.3269%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1569%" y="213" width="0.0801%" height="15" fill="rgb(205,27,5)" fg:x="1201" fg:w="1"/><text x="96.4069%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.1569%" y="245" width="0.1601%" height="15" fill="rgb(224,32,19)" fg:x="1201" fg:w="2"/><text x="96.4069%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.1569%" y="229" width="0.1601%" height="15" fill="rgb(247,214,40)" fg:x="1201" fg:w="2"/><text x="96.4069%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2370%" y="213" width="0.0801%" height="15" fill="rgb(239,199,17)" fg:x="1202" fg:w="1"/><text x="96.4870%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3171%" y="245" width="0.0801%" height="15" fill="rgb(251,159,9)" fg:x="1203" fg:w="1"/><text x="96.5671%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.3971%" y="245" width="0.0801%" height="15" fill="rgb(225,78,32)" fg:x="1204" fg:w="1"/><text x="96.6471%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3971%" y="229" width="0.0801%" height="15" fill="rgb(206,97,47)" fg:x="1204" fg:w="1"/><text x="96.6471%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="96.4772%" y="229" width="0.1601%" height="15" fill="rgb(227,107,4)" fg:x="1205" fg:w="2"/><text x="96.7272%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="96.4772%" y="213" width="0.1601%" height="15" fill="rgb(241,146,50)" fg:x="1205" fg:w="2"/><text x="96.7272%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.6373%" y="197" width="0.0801%" height="15" fill="rgb(232,92,30)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6373%" y="181" width="0.0801%" height="15" fill="rgb(222,0,40)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6373%" y="165" width="0.0801%" height="15" fill="rgb(219,54,33)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.6373%" y="149" width="0.0801%" height="15" fill="rgb(226,209,28)" fg:x="1207" fg:w="1"/><text x="96.8873%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.40%)</title><rect x="96.4772%" y="245" width="0.4003%" height="15" fill="rgb(254,205,35)" fg:x="1205" fg:w="5"/><text x="96.7272%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="96.6373%" y="229" width="0.2402%" height="15" fill="rgb(230,159,3)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.6373%" y="213" width="0.2402%" height="15" fill="rgb(232,190,24)" fg:x="1207" fg:w="3"/><text x="96.8873%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.7174%" y="197" width="0.1601%" height="15" fill="rgb(217,227,44)" fg:x="1208" fg:w="2"/><text x="96.9674%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.8775%" y="197" width="0.0801%" height="15" fill="rgb(236,211,1)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.8775%" y="245" width="0.1601%" height="15" fill="rgb(250,127,46)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.8775%" y="229" width="0.1601%" height="15" fill="rgb(229,213,6)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.8775%" y="213" width="0.1601%" height="15" fill="rgb(237,15,36)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="96.9576%" y="197" width="0.0801%" height="15" fill="rgb(213,131,41)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9576%" y="181" width="0.0801%" height="15" fill="rgb(225,82,44)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9576%" y="165" width="0.0801%" height="15" fill="rgb(249,42,11)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9576%" y="149" width="0.0801%" height="15" fill="rgb(253,11,29)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (13 samples, 1.04%)</title><rect x="96.1569%" y="293" width="1.0408%" height="15" fill="rgb(206,8,54)" fg:x="1201" fg:w="13"/><text x="96.4069%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (13 samples, 1.04%)</title><rect x="96.1569%" y="277" width="1.0408%" height="15" fill="rgb(222,186,2)" fg:x="1201" fg:w="13"/><text x="96.4069%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.04%)</title><rect x="96.1569%" y="261" width="1.0408%" height="15" fill="rgb(221,206,53)" fg:x="1201" fg:w="13"/><text x="96.4069%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.0376%" y="245" width="0.1601%" height="15" fill="rgb(230,150,21)" fg:x="1212" fg:w="2"/><text x="97.2876%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.0376%" y="229" width="0.1601%" height="15" fill="rgb(253,202,10)" fg:x="1212" fg:w="2"/><text x="97.2876%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="97.0376%" y="213" width="0.1601%" height="15" fill="rgb(238,109,40)" fg:x="1212" fg:w="2"/><text x="97.2876%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="97.0376%" y="197" width="0.1601%" height="15" fill="rgb(247,120,22)" fg:x="1212" fg:w="2"/><text x="97.2876%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="97.1978%" y="293" width="0.1601%" height="15" fill="rgb(207,43,30)" fg:x="1214" fg:w="2"/><text x="97.4478%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="97.2778%" y="277" width="0.0801%" height="15" fill="rgb(213,211,24)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="97.2778%" y="261" width="0.0801%" height="15" fill="rgb(239,73,39)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="97.3579%" y="293" width="0.0801%" height="15" fill="rgb(245,182,19)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.3579%" y="277" width="0.0801%" height="15" fill="rgb(247,143,26)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3579%" y="261" width="0.0801%" height="15" fill="rgb(228,191,23)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.4380%" y="229" width="0.0801%" height="15" fill="rgb(253,165,31)" fg:x="1217" fg:w="1"/><text x="97.6880%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (170 samples, 13.61%)</title><rect x="84.0673%" y="405" width="13.6109%" height="15" fill="rgb(234,138,20)" fg:x="1050" fg:w="170"/><text x="84.3173%" y="415.50">&lt;&amp;kernel::model::Enti..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (161 samples, 12.89%)</title><rect x="84.7878%" y="389" width="12.8903%" height="15" fill="rgb(218,191,29)" fg:x="1059" fg:w="161"/><text x="85.0378%" y="399.50">plugins_core::looki..</text></g><g><title>indefinite::indefinite (161 samples, 12.89%)</title><rect x="84.7878%" y="373" width="12.8903%" height="15" fill="rgb(221,157,19)" fg:x="1059" fg:w="161"/><text x="85.0378%" y="383.50">indefinite::indefin..</text></g><g><title>indefinite::methods::indefinite (161 samples, 12.89%)</title><rect x="84.7878%" y="357" width="12.8903%" height="15" fill="rgb(237,26,42)" fg:x="1059" fg:w="161"/><text x="85.0378%" y="367.50">indefinite::methods..</text></g><g><title>indefinite::methods::apply_rules (161 samples, 12.89%)</title><rect x="84.7878%" y="341" width="12.8903%" height="15" fill="rgb(220,163,24)" fg:x="1059" fg:w="161"/><text x="85.0378%" y="351.50">indefinite::methods..</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.52%)</title><rect x="96.1569%" y="325" width="1.5212%" height="15" fill="rgb(242,115,20)" fg:x="1201" fg:w="19"/><text x="96.4069%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (19 samples, 1.52%)</title><rect x="96.1569%" y="309" width="1.5212%" height="15" fill="rgb(210,206,9)" fg:x="1201" fg:w="19"/><text x="96.4069%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="97.4380%" y="293" width="0.2402%" height="15" fill="rgb(208,71,17)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="97.4380%" y="277" width="0.2402%" height="15" fill="rgb(233,7,5)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="97.4380%" y="261" width="0.2402%" height="15" fill="rgb(207,92,33)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="97.4380%" y="245" width="0.2402%" height="15" fill="rgb(218,87,9)" fg:x="1217" fg:w="3"/><text x="97.6880%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="97.5180%" y="229" width="0.1601%" height="15" fill="rgb(219,47,37)" fg:x="1218" fg:w="2"/><text x="97.7680%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.5981%" y="213" width="0.0801%" height="15" fill="rgb(221,152,34)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="97.5981%" y="197" width="0.0801%" height="15" fill="rgb(235,176,21)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="207.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.6781%" y="405" width="0.0801%" height="15" fill="rgb(232,212,21)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="389" width="0.0801%" height="15" fill="rgb(245,82,39)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6781%" y="373" width="0.0801%" height="15" fill="rgb(241,52,51)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="357" width="0.0801%" height="15" fill="rgb(219,91,24)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="341" width="0.0801%" height="15" fill="rgb(241,142,12)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="351.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (1 samples, 0.08%)</title><rect x="97.7582%" y="389" width="0.0801%" height="15" fill="rgb(230,27,9)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="97.7582%" y="373" width="0.0801%" height="15" fill="rgb(249,181,32)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="97.7582%" y="357" width="0.0801%" height="15" fill="rgb(230,107,3)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7582%" y="341" width="0.0801%" height="15" fill="rgb(246,204,14)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7582%" y="325" width="0.0801%" height="15" fill="rgb(213,192,47)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.7582%" y="309" width="0.0801%" height="15" fill="rgb(240,44,36)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.8383%" y="325" width="0.0801%" height="15" fill="rgb(244,209,38)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8383%" y="309" width="0.0801%" height="15" fill="rgb(219,34,37)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8383%" y="293" width="0.0801%" height="15" fill="rgb(210,28,6)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.8383%" y="277" width="0.0801%" height="15" fill="rgb(244,110,52)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8383%" y="261" width="0.0801%" height="15" fill="rgb(254,124,47)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.8383%" y="245" width="0.0801%" height="15" fill="rgb(254,110,13)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8383%" y="229" width="0.0801%" height="15" fill="rgb(252,57,21)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8383%" y="213" width="0.0801%" height="15" fill="rgb(242,60,45)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8383%" y="197" width="0.0801%" height="15" fill="rgb(234,49,30)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8383%" y="181" width="0.0801%" height="15" fill="rgb(218,98,6)" fg:x="1222" fg:w="1"/><text x="98.0883%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.9183%" y="165" width="0.0801%" height="15" fill="rgb(220,174,29)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.9183%" y="261" width="0.1601%" height="15" fill="rgb(236,163,23)" fg:x="1223" fg:w="2"/><text x="98.1683%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.9183%" y="245" width="0.1601%" height="15" fill="rgb(242,114,45)" fg:x="1223" fg:w="2"/><text x="98.1683%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.9183%" y="229" width="0.1601%" height="15" fill="rgb(232,10,53)" fg:x="1223" fg:w="2"/><text x="98.1683%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.9183%" y="213" width="0.1601%" height="15" fill="rgb(245,108,29)" fg:x="1223" fg:w="2"/><text x="98.1683%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.9183%" y="197" width="0.1601%" height="15" fill="rgb(240,89,53)" fg:x="1223" fg:w="2"/><text x="98.1683%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.9183%" y="181" width="0.1601%" height="15" fill="rgb(226,60,45)" fg:x="1223" fg:w="2"/><text x="98.1683%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.9984%" y="165" width="0.0801%" height="15" fill="rgb(230,41,44)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.9984%" y="149" width="0.0801%" height="15" fill="rgb(230,26,20)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="97.9984%" y="133" width="0.0801%" height="15" fill="rgb(237,170,32)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="143.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (181 samples, 14.49%)</title><rect x="83.6669%" y="565" width="14.4916%" height="15" fill="rgb(212,35,42)" fg:x="1045" fg:w="181"/><text x="83.9169%" y="575.50">kernel::plugins::mw::M..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (181 samples, 14.49%)</title><rect x="83.6669%" y="549" width="14.4916%" height="15" fill="rgb(227,31,34)" fg:x="1045" fg:w="181"/><text x="83.9169%" y="559.50">&lt;plugins_dynlib::Dynam..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (181 samples, 14.49%)</title><rect x="83.6669%" y="533" width="14.4916%" height="15" fill="rgb(216,19,18)" fg:x="1045" fg:w="181"/><text x="83.9169%" y="543.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (181 samples, 14.49%)</title><rect x="83.6669%" y="517" width="14.4916%" height="15" fill="rgb(211,133,42)" fg:x="1045" fg:w="181"/><text x="83.9169%" y="527.50">core::ops::function::F..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (181 samples, 14.49%)</title><rect x="83.6669%" y="501" width="14.4916%" height="15" fill="rgb(244,66,13)" fg:x="1045" fg:w="181"/><text x="83.9169%" y="511.50">kernel::plugins::mw::M..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (181 samples, 14.49%)</title><rect x="83.6669%" y="485" width="14.4916%" height="15" fill="rgb(218,185,50)" fg:x="1045" fg:w="181"/><text x="83.9169%" y="495.50">core::ops::function::F..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (181 samples, 14.49%)</title><rect x="83.6669%" y="469" width="14.4916%" height="15" fill="rgb(219,149,13)" fg:x="1045" fg:w="181"/><text x="83.9169%" y="479.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (181 samples, 14.49%)</title><rect x="83.6669%" y="453" width="14.4916%" height="15" fill="rgb(221,125,0)" fg:x="1045" fg:w="181"/><text x="83.9169%" y="463.50">&lt;engine::session::stat..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (181 samples, 14.49%)</title><rect x="83.6669%" y="437" width="14.4916%" height="15" fill="rgb(247,126,27)" fg:x="1045" fg:w="181"/><text x="83.9169%" y="447.50">&lt;plugins_core::looking..</text></g><g><title>plugins_core::looking::model::new_area_observation (176 samples, 14.09%)</title><rect x="84.0673%" y="421" width="14.0913%" height="15" fill="rgb(250,138,30)" fg:x="1050" fg:w="176"/><text x="84.3173%" y="431.50">plugins_core::looking..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="97.7582%" y="405" width="0.4003%" height="15" fill="rgb(230,151,9)" fg:x="1221" fg:w="5"/><text x="98.0082%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="97.8383%" y="389" width="0.3203%" height="15" fill="rgb(233,80,38)" fg:x="1222" fg:w="4"/><text x="98.0883%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.32%)</title><rect x="97.8383%" y="373" width="0.3203%" height="15" fill="rgb(232,68,43)" fg:x="1222" fg:w="4"/><text x="98.0883%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.32%)</title><rect x="97.8383%" y="357" width="0.3203%" height="15" fill="rgb(254,5,50)" fg:x="1222" fg:w="4"/><text x="98.0883%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="97.8383%" y="341" width="0.3203%" height="15" fill="rgb(225,45,5)" fg:x="1222" fg:w="4"/><text x="98.0883%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="97.9183%" y="325" width="0.2402%" height="15" fill="rgb(239,22,3)" fg:x="1223" fg:w="3"/><text x="98.1683%" y="335.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="97.9183%" y="309" width="0.2402%" height="15" fill="rgb(243,129,0)" fg:x="1223" fg:w="3"/><text x="98.1683%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.9183%" y="293" width="0.2402%" height="15" fill="rgb(223,164,0)" fg:x="1223" fg:w="3"/><text x="98.1683%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.9183%" y="277" width="0.2402%" height="15" fill="rgb(221,46,29)" fg:x="1223" fg:w="3"/><text x="98.1683%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.0785%" y="261" width="0.0801%" height="15" fill="rgb(205,97,47)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.0785%" y="245" width="0.0801%" height="15" fill="rgb(249,14,8)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1585%" y="437" width="0.0801%" height="15" fill="rgb(216,77,3)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.1585%" y="421" width="0.0801%" height="15" fill="rgb(206,168,54)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.1585%" y="405" width="0.0801%" height="15" fill="rgb(236,3,41)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.1585%" y="389" width="0.0801%" height="15" fill="rgb(231,132,24)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.1585%" y="373" width="0.0801%" height="15" fill="rgb(227,221,40)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.1585%" y="357" width="0.0801%" height="15" fill="rgb(233,151,11)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.1585%" y="341" width="0.0801%" height="15" fill="rgb(247,81,35)" fg:x="1226" fg:w="1"/><text x="98.4085%" y="351.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="98.1585%" y="453" width="0.1601%" height="15" fill="rgb(243,128,48)" fg:x="1226" fg:w="2"/><text x="98.4085%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2386%" y="437" width="0.0801%" height="15" fill="rgb(253,16,10)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.2386%" y="421" width="0.0801%" height="15" fill="rgb(228,67,27)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.2386%" y="405" width="0.0801%" height="15" fill="rgb(231,105,25)" fg:x="1227" fg:w="1"/><text x="98.4886%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="98.1585%" y="501" width="0.2402%" height="15" fill="rgb(213,166,47)" fg:x="1226" fg:w="3"/><text x="98.4085%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="98.1585%" y="485" width="0.2402%" height="15" fill="rgb(209,27,10)" fg:x="1226" fg:w="3"/><text x="98.4085%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="98.1585%" y="469" width="0.2402%" height="15" fill="rgb(241,44,30)" fg:x="1226" fg:w="3"/><text x="98.4085%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.3187%" y="453" width="0.0801%" height="15" fill="rgb(223,216,15)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.3187%" y="437" width="0.0801%" height="15" fill="rgb(227,14,7)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3187%" y="421" width="0.0801%" height="15" fill="rgb(237,14,5)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="405" width="0.0801%" height="15" fill="rgb(232,14,36)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3187%" y="389" width="0.0801%" height="15" fill="rgb(234,0,38)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="373" width="0.0801%" height="15" fill="rgb(207,170,14)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3187%" y="357" width="0.0801%" height="15" fill="rgb(252,45,13)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="341" width="0.0801%" height="15" fill="rgb(213,142,7)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3187%" y="325" width="0.0801%" height="15" fill="rgb(216,157,23)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="309" width="0.0801%" height="15" fill="rgb(212,145,33)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.3187%" y="293" width="0.0801%" height="15" fill="rgb(233,26,13)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="277" width="0.0801%" height="15" fill="rgb(219,196,19)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.3187%" y="261" width="0.0801%" height="15" fill="rgb(246,56,21)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.3187%" y="245" width="0.0801%" height="15" fill="rgb(222,28,53)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="255.50"></text></g><g><title>plugins_core::tools::contained_by (4 samples, 0.32%)</title><rect x="98.1585%" y="533" width="0.3203%" height="15" fill="rgb(224,5,27)" fg:x="1226" fg:w="4"/><text x="98.4085%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.32%)</title><rect x="98.1585%" y="517" width="0.3203%" height="15" fill="rgb(220,153,33)" fg:x="1226" fg:w="4"/><text x="98.4085%" y="527.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="98.3987%" y="501" width="0.0801%" height="15" fill="rgb(226,58,19)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="511.50"></text></g><g><title>engine::session::Session::captured (201 samples, 16.09%)</title><rect x="82.6261%" y="709" width="16.0929%" height="15" fill="rgb(239,112,23)" fg:x="1032" fg:w="201"/><text x="82.8761%" y="719.50">engine::session::Session:..</text></g><g><title>engine::session::logs::capture (201 samples, 16.09%)</title><rect x="82.6261%" y="693" width="16.0929%" height="15" fill="rgb(251,213,20)" fg:x="1032" fg:w="201"/><text x="82.8761%" y="703.50">engine::session::logs::ca..</text></g><g><title>tracing_core::dispatcher::with_default (200 samples, 16.01%)</title><rect x="82.7062%" y="677" width="16.0128%" height="15" fill="rgb(215,181,21)" fg:x="1033" fg:w="200"/><text x="82.9562%" y="687.50">tracing_core::dispatcher:..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (200 samples, 16.01%)</title><rect x="82.7062%" y="661" width="16.0128%" height="15" fill="rgb(240,8,35)" fg:x="1033" fg:w="200"/><text x="82.9562%" y="671.50">&lt;engine::session::Session..</text></g><g><title>kernel::plugins::mw::apply_middleware (200 samples, 16.01%)</title><rect x="82.7062%" y="645" width="16.0128%" height="15" fill="rgb(232,203,3)" fg:x="1033" fg:w="200"/><text x="82.9562%" y="655.50">kernel::plugins::mw::appl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (200 samples, 16.01%)</title><rect x="82.7062%" y="629" width="16.0128%" height="15" fill="rgb(214,202,43)" fg:x="1033" fg:w="200"/><text x="82.9562%" y="639.50">kernel::plugins::mw::Midd..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (200 samples, 16.01%)</title><rect x="82.7062%" y="613" width="16.0128%" height="15" fill="rgb(254,35,11)" fg:x="1033" fg:w="200"/><text x="82.9562%" y="623.50">&lt;engine::session::ExpandS..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (188 samples, 15.05%)</title><rect x="83.6669%" y="597" width="15.0520%" height="15" fill="rgb(239,173,13)" fg:x="1045" fg:w="188"/><text x="83.9169%" y="607.50">kernel::plugins::mw::Mi..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (188 samples, 15.05%)</title><rect x="83.6669%" y="581" width="15.0520%" height="15" fill="rgb(220,141,0)" fg:x="1045" fg:w="188"/><text x="83.9169%" y="591.50">&lt;plugins_rune::RuneMidd..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (7 samples, 0.56%)</title><rect x="98.1585%" y="565" width="0.5604%" height="15" fill="rgb(210,98,12)" fg:x="1226" fg:w="7"/><text x="98.4085%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.56%)</title><rect x="98.1585%" y="549" width="0.5604%" height="15" fill="rgb(254,153,22)" fg:x="1226" fg:w="7"/><text x="98.4085%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (3 samples, 0.24%)</title><rect x="98.4788%" y="533" width="0.2402%" height="15" fill="rgb(247,223,17)" fg:x="1230" fg:w="3"/><text x="98.7288%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="98.4788%" y="517" width="0.2402%" height="15" fill="rgb(246,56,7)" fg:x="1230" fg:w="3"/><text x="98.7288%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="98.4788%" y="501" width="0.2402%" height="15" fill="rgb(240,226,12)" fg:x="1230" fg:w="3"/><text x="98.7288%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="98.4788%" y="485" width="0.2402%" height="15" fill="rgb(205,87,46)" fg:x="1230" fg:w="3"/><text x="98.7288%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.6389%" y="469" width="0.0801%" height="15" fill="rgb(245,214,51)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.6389%" y="453" width="0.0801%" height="15" fill="rgb(223,172,33)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.6389%" y="437" width="0.0801%" height="15" fill="rgb(227,203,34)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.6389%" y="421" width="0.0801%" height="15" fill="rgb(248,143,44)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6389%" y="405" width="0.0801%" height="15" fill="rgb(226,162,5)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6389%" y="389" width="0.0801%" height="15" fill="rgb(211,143,1)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6389%" y="373" width="0.0801%" height="15" fill="rgb(224,96,15)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6389%" y="357" width="0.0801%" height="15" fill="rgb(222,4,38)" fg:x="1232" fg:w="1"/><text x="98.8889%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7990%" y="613" width="0.0801%" height="15" fill="rgb(253,228,15)" fg:x="1234" fg:w="1"/><text x="99.0490%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.8791%" y="565" width="0.0801%" height="15" fill="rgb(242,194,12)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.8791%" y="549" width="0.0801%" height="15" fill="rgb(214,177,31)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.8791%" y="533" width="0.0801%" height="15" fill="rgb(226,58,51)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.8791%" y="517" width="0.0801%" height="15" fill="rgb(250,119,16)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8791%" y="501" width="0.0801%" height="15" fill="rgb(223,128,53)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.8791%" y="485" width="0.0801%" height="15" fill="rgb(251,199,15)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.8791%" y="469" width="0.0801%" height="15" fill="rgb(235,168,42)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.8791%" y="453" width="0.0801%" height="15" fill="rgb(250,210,17)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.8791%" y="437" width="0.0801%" height="15" fill="rgb(226,36,41)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.8791%" y="421" width="0.0801%" height="15" fill="rgb(225,87,10)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.8791%" y="405" width="0.0801%" height="15" fill="rgb(228,83,9)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.8791%" y="389" width="0.0801%" height="15" fill="rgb(225,16,36)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.8791%" y="373" width="0.0801%" height="15" fill="rgb(242,198,13)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.8791%" y="357" width="0.0801%" height="15" fill="rgb(239,25,51)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="98.8791%" y="341" width="0.0801%" height="15" fill="rgb(239,28,37)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="98.8791%" y="325" width="0.0801%" height="15" fill="rgb(234,70,17)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.8791%" y="309" width="0.0801%" height="15" fill="rgb(231,215,53)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="98.8791%" y="293" width="0.0801%" height="15" fill="rgb(218,140,42)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.8791%" y="277" width="0.0801%" height="15" fill="rgb(233,227,45)" fg:x="1235" fg:w="1"/><text x="99.1291%" y="287.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="98.7190%" y="693" width="0.3203%" height="15" fill="rgb(225,189,21)" fg:x="1233" fg:w="4"/><text x="98.9690%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.7190%" y="677" width="0.3203%" height="15" fill="rgb(237,176,54)" fg:x="1233" fg:w="4"/><text x="98.9690%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.7190%" y="661" width="0.3203%" height="15" fill="rgb(215,131,46)" fg:x="1233" fg:w="4"/><text x="98.9690%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="98.7190%" y="645" width="0.3203%" height="15" fill="rgb(218,95,20)" fg:x="1233" fg:w="4"/><text x="98.9690%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.7990%" y="629" width="0.2402%" height="15" fill="rgb(208,198,12)" fg:x="1234" fg:w="3"/><text x="99.0490%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.8791%" y="613" width="0.1601%" height="15" fill="rgb(239,107,50)" fg:x="1235" fg:w="2"/><text x="99.1291%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.8791%" y="597" width="0.1601%" height="15" fill="rgb(240,217,37)" fg:x="1235" fg:w="2"/><text x="99.1291%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.8791%" y="581" width="0.1601%" height="15" fill="rgb(242,197,49)" fg:x="1235" fg:w="2"/><text x="99.1291%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.9592%" y="565" width="0.0801%" height="15" fill="rgb(219,171,17)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9592%" y="549" width="0.0801%" height="15" fill="rgb(209,81,40)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9592%" y="533" width="0.0801%" height="15" fill="rgb(237,156,30)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0392%" y="677" width="0.1601%" height="15" fill="rgb(212,127,16)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.0392%" y="661" width="0.1601%" height="15" fill="rgb(226,66,32)" fg:x="1237" fg:w="2"/><text x="99.2892%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1193%" y="645" width="0.0801%" height="15" fill="rgb(245,22,46)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1193%" y="629" width="0.0801%" height="15" fill="rgb(210,112,21)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1193%" y="613" width="0.0801%" height="15" fill="rgb(207,118,39)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1994%" y="581" width="0.0801%" height="15" fill="rgb(205,206,35)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1994%" y="565" width="0.0801%" height="15" fill="rgb(222,120,2)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="99.1994%" y="549" width="0.0801%" height="15" fill="rgb(205,38,18)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.1994%" y="677" width="0.1601%" height="15" fill="rgb(226,61,2)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1994%" y="661" width="0.1601%" height="15" fill="rgb(242,161,23)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1994%" y="645" width="0.1601%" height="15" fill="rgb(213,13,52)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.1994%" y="629" width="0.1601%" height="15" fill="rgb(246,209,47)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1994%" y="613" width="0.1601%" height="15" fill="rgb(214,41,3)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.1994%" y="597" width="0.1601%" height="15" fill="rgb(236,119,38)" fg:x="1239" fg:w="2"/><text x="99.4494%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2794%" y="581" width="0.0801%" height="15" fill="rgb(218,50,11)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2794%" y="565" width="0.0801%" height="15" fill="rgb(228,38,11)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="575.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="98.7190%" y="709" width="0.7206%" height="15" fill="rgb(212,13,9)" fg:x="1233" fg:w="9"/><text x="98.9690%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.0392%" y="693" width="0.4003%" height="15" fill="rgb(208,211,9)" fg:x="1237" fg:w="5"/><text x="99.2892%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.3595%" y="677" width="0.0801%" height="15" fill="rgb(239,39,32)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.3595%" y="661" width="0.0801%" height="15" fill="rgb(254,179,26)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3595%" y="645" width="0.0801%" height="15" fill="rgb(249,165,28)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3595%" y="629" width="0.0801%" height="15" fill="rgb(225,59,50)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="639.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.4396%" y="709" width="0.0801%" height="15" fill="rgb(209,122,5)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.4396%" y="693" width="0.0801%" height="15" fill="rgb(214,65,34)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4396%" y="677" width="0.0801%" height="15" fill="rgb(249,183,32)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.5997%" y="661" width="0.0801%" height="15" fill="rgb(218,122,24)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5997%" y="645" width="0.0801%" height="15" fill="rgb(224,109,18)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5997%" y="629" width="0.0801%" height="15" fill="rgb(210,68,50)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5997%" y="613" width="0.0801%" height="15" fill="rgb(212,184,34)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5997%" y="597" width="0.0801%" height="15" fill="rgb(238,105,48)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5997%" y="581" width="0.0801%" height="15" fill="rgb(222,134,54)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5997%" y="565" width="0.0801%" height="15" fill="rgb(246,24,43)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="575.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.6797%" y="661" width="0.0801%" height="15" fill="rgb(227,169,22)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6797%" y="645" width="0.0801%" height="15" fill="rgb(253,152,4)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.6797%" y="629" width="0.0801%" height="15" fill="rgb(219,158,36)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="99.6797%" y="613" width="0.0801%" height="15" fill="rgb(251,128,40)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.7598%" y="661" width="0.0801%" height="15" fill="rgb(254,101,39)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7598%" y="645" width="0.0801%" height="15" fill="rgb(221,168,40)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7598%" y="629" width="0.0801%" height="15" fill="rgb(221,14,27)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7598%" y="613" width="0.0801%" height="15" fill="rgb(207,36,43)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7598%" y="597" width="0.0801%" height="15" fill="rgb(240,172,53)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7598%" y="581" width="0.0801%" height="15" fill="rgb(241,138,43)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7598%" y="565" width="0.0801%" height="15" fill="rgb(227,78,19)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7598%" y="549" width="0.0801%" height="15" fill="rgb(215,127,44)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.7598%" y="533" width="0.0801%" height="15" fill="rgb(227,13,10)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="99.7598%" y="517" width="0.0801%" height="15" fill="rgb(249,177,6)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="527.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (218 samples, 17.45%)</title><rect x="82.4660%" y="741" width="17.4540%" height="15" fill="rgb(215,154,26)" fg:x="1030" fg:w="218"/><text x="82.7160%" y="751.50">engine::session::Session::e..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (218 samples, 17.45%)</title><rect x="82.4660%" y="725" width="17.4540%" height="15" fill="rgb(250,168,20)" fg:x="1030" fg:w="218"/><text x="82.7160%" y="735.50">engine::session::Session::e..</text></g><g><title>kernel::model::EntityPtrResolver::world (5 samples, 0.40%)</title><rect x="99.5196%" y="709" width="0.4003%" height="15" fill="rgb(222,53,38)" fg:x="1243" fg:w="5"/><text x="99.7696%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="99.5196%" y="693" width="0.4003%" height="15" fill="rgb(245,154,5)" fg:x="1243" fg:w="5"/><text x="99.7696%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.5196%" y="677" width="0.4003%" height="15" fill="rgb(214,89,50)" fg:x="1243" fg:w="5"/><text x="99.7696%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8399%" y="661" width="0.0801%" height="15" fill="rgb(232,73,14)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8399%" y="645" width="0.0801%" height="15" fill="rgb(230,101,20)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8399%" y="629" width="0.0801%" height="15" fill="rgb(208,56,28)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8399%" y="613" width="0.0801%" height="15" fill="rgb(247,205,22)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8399%" y="597" width="0.0801%" height="15" fill="rgb(252,109,51)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="607.50"></text></g><g><title>all (1,249 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(220,40,24)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-5f2b8b49 (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(251,108,7)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1087.50">simple-5f2b8b49</text></g><g><title>_start (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(238,102,51)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(219,149,34)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(239,70,0)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(246,214,23)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(239,221,51)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(254,62,14)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(253,57,33)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(229,34,6)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(235,191,23)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(217,207,27)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(232,41,44)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,249 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(221,188,19)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(245,180,45)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,249 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(250,220,42)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(234,16,34)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,249 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(233,217,23)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,249 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(209,22,46)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (381 samples, 30.50%)</title><rect x="69.4956%" y="789" width="30.5044%" height="15" fill="rgb(213,101,18)" fg:x="868" fg:w="381"/><text x="69.7456%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (381 samples, 30.50%)</title><rect x="69.4956%" y="773" width="30.5044%" height="15" fill="rgb(215,179,52)" fg:x="868" fg:w="381"/><text x="69.7456%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (381 samples, 30.50%)</title><rect x="69.4956%" y="757" width="30.5044%" height="15" fill="rgb(223,50,25)" fg:x="868" fg:w="381"/><text x="69.7456%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9199%" y="741" width="0.0801%" height="15" fill="rgb(224,51,44)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.9199%" y="725" width="0.0801%" height="15" fill="rgb(224,13,54)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="735.50"></text></g></svg></svg>