<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1046" onload="init(evt)" viewBox="0 0 1200 1046" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1046" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1029.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1029.00"> </text><svg id="frames" x="10" width="1180" total_samples="1244"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0804%" y="597" width="0.0804%" height="15" fill="rgb(254,224,29)" fg:x="1" fg:w="1"/><text x="0.3304%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2412%" y="549" width="0.0804%" height="15" fill="rgb(232,14,29)" fg:x="3" fg:w="1"/><text x="0.4912%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="0.0804%" y="613" width="0.3215%" height="15" fill="rgb(208,45,52)" fg:x="1" fg:w="4"/><text x="0.3304%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="0.1608%" y="597" width="0.2412%" height="15" fill="rgb(234,191,28)" fg:x="2" fg:w="3"/><text x="0.4108%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.1608%" y="581" width="0.2412%" height="15" fill="rgb(244,67,43)" fg:x="2" fg:w="3"/><text x="0.4108%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.1608%" y="565" width="0.2412%" height="15" fill="rgb(236,189,24)" fg:x="2" fg:w="3"/><text x="0.4108%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3215%" y="549" width="0.0804%" height="15" fill="rgb(239,214,33)" fg:x="4" fg:w="1"/><text x="0.5715%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.3215%" y="533" width="0.0804%" height="15" fill="rgb(226,176,41)" fg:x="4" fg:w="1"/><text x="0.5715%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3215%" y="517" width="0.0804%" height="15" fill="rgb(248,47,8)" fg:x="4" fg:w="1"/><text x="0.5715%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3215%" y="501" width="0.0804%" height="15" fill="rgb(218,81,44)" fg:x="4" fg:w="1"/><text x="0.5715%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="0.0804%" y="645" width="0.4019%" height="15" fill="rgb(213,98,6)" fg:x="1" fg:w="5"/><text x="0.3304%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (5 samples, 0.40%)</title><rect x="0.0804%" y="629" width="0.4019%" height="15" fill="rgb(222,85,22)" fg:x="1" fg:w="5"/><text x="0.3304%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4019%" y="613" width="0.0804%" height="15" fill="rgb(239,46,39)" fg:x="5" fg:w="1"/><text x="0.6519%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="0.4823%" y="565" width="0.1608%" height="15" fill="rgb(237,12,29)" fg:x="6" fg:w="2"/><text x="0.7323%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="0.4823%" y="549" width="0.1608%" height="15" fill="rgb(214,77,8)" fg:x="6" fg:w="2"/><text x="0.7323%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.4823%" y="533" width="0.1608%" height="15" fill="rgb(217,168,37)" fg:x="6" fg:w="2"/><text x="0.7323%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.4823%" y="517" width="0.1608%" height="15" fill="rgb(221,217,23)" fg:x="6" fg:w="2"/><text x="0.7323%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.4823%" y="501" width="0.1608%" height="15" fill="rgb(243,229,36)" fg:x="6" fg:w="2"/><text x="0.7323%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.4823%" y="485" width="0.1608%" height="15" fill="rgb(251,163,40)" fg:x="6" fg:w="2"/><text x="0.7323%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="0.4823%" y="469" width="0.1608%" height="15" fill="rgb(237,222,12)" fg:x="6" fg:w="2"/><text x="0.7323%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.4823%" y="453" width="0.1608%" height="15" fill="rgb(248,132,6)" fg:x="6" fg:w="2"/><text x="0.7323%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.5627%" y="437" width="0.0804%" height="15" fill="rgb(227,167,50)" fg:x="7" fg:w="1"/><text x="0.8127%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5627%" y="421" width="0.0804%" height="15" fill="rgb(242,84,37)" fg:x="7" fg:w="1"/><text x="0.8127%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.6431%" y="517" width="0.0804%" height="15" fill="rgb(212,4,50)" fg:x="8" fg:w="1"/><text x="0.8931%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.32%)</title><rect x="0.4823%" y="597" width="0.3215%" height="15" fill="rgb(230,228,32)" fg:x="6" fg:w="4"/><text x="0.7323%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="0.4823%" y="581" width="0.3215%" height="15" fill="rgb(248,217,23)" fg:x="6" fg:w="4"/><text x="0.7323%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="0.6431%" y="565" width="0.1608%" height="15" fill="rgb(238,197,32)" fg:x="8" fg:w="2"/><text x="0.8931%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.6431%" y="549" width="0.1608%" height="15" fill="rgb(236,106,1)" fg:x="8" fg:w="2"/><text x="0.8931%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.6431%" y="533" width="0.1608%" height="15" fill="rgb(219,228,13)" fg:x="8" fg:w="2"/><text x="0.8931%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7235%" y="517" width="0.0804%" height="15" fill="rgb(238,30,35)" fg:x="9" fg:w="1"/><text x="0.9735%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.7235%" y="501" width="0.0804%" height="15" fill="rgb(236,70,23)" fg:x="9" fg:w="1"/><text x="0.9735%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.7235%" y="485" width="0.0804%" height="15" fill="rgb(249,104,48)" fg:x="9" fg:w="1"/><text x="0.9735%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="0.7235%" y="469" width="0.0804%" height="15" fill="rgb(254,117,50)" fg:x="9" fg:w="1"/><text x="0.9735%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.40%)</title><rect x="0.4823%" y="613" width="0.4019%" height="15" fill="rgb(223,152,4)" fg:x="6" fg:w="5"/><text x="0.7323%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="0.8039%" y="597" width="0.0804%" height="15" fill="rgb(245,6,2)" fg:x="10" fg:w="1"/><text x="1.0539%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.8039%" y="581" width="0.0804%" height="15" fill="rgb(249,150,24)" fg:x="10" fg:w="1"/><text x="1.0539%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.8039%" y="565" width="0.0804%" height="15" fill="rgb(228,185,42)" fg:x="10" fg:w="1"/><text x="1.0539%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.8039%" y="549" width="0.0804%" height="15" fill="rgb(226,39,33)" fg:x="10" fg:w="1"/><text x="1.0539%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="0.8039%" y="533" width="0.0804%" height="15" fill="rgb(221,166,19)" fg:x="10" fg:w="1"/><text x="1.0539%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="0.8039%" y="517" width="0.0804%" height="15" fill="rgb(209,109,2)" fg:x="10" fg:w="1"/><text x="1.0539%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="0.8039%" y="501" width="0.0804%" height="15" fill="rgb(252,216,26)" fg:x="10" fg:w="1"/><text x="1.0539%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.8039%" y="485" width="0.0804%" height="15" fill="rgb(227,173,36)" fg:x="10" fg:w="1"/><text x="1.0539%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="0.8039%" y="469" width="0.0804%" height="15" fill="rgb(209,90,7)" fg:x="10" fg:w="1"/><text x="1.0539%" y="479.50"></text></g><g><title>dlerror (3 samples, 0.24%)</title><rect x="0.9646%" y="549" width="0.2412%" height="15" fill="rgb(250,194,11)" fg:x="12" fg:w="3"/><text x="1.2146%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.1254%" y="533" width="0.0804%" height="15" fill="rgb(220,72,50)" fg:x="14" fg:w="1"/><text x="1.3754%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2058%" y="533" width="0.0804%" height="15" fill="rgb(222,106,48)" fg:x="15" fg:w="1"/><text x="1.4558%" y="543.50"></text></g><g><title>libloading::os::unix::Library::open (9 samples, 0.72%)</title><rect x="0.9646%" y="565" width="0.7235%" height="15" fill="rgb(216,220,45)" fg:x="12" fg:w="9"/><text x="1.2146%" y="575.50"></text></g><g><title>dlopen (6 samples, 0.48%)</title><rect x="1.2058%" y="549" width="0.4823%" height="15" fill="rgb(234,112,18)" fg:x="15" fg:w="6"/><text x="1.4558%" y="559.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="1.2862%" y="533" width="0.4019%" height="15" fill="rgb(206,179,9)" fg:x="16" fg:w="5"/><text x="1.5362%" y="543.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="1.2862%" y="517" width="0.4019%" height="15" fill="rgb(215,115,40)" fg:x="16" fg:w="5"/><text x="1.5362%" y="527.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="1.2862%" y="501" width="0.4019%" height="15" fill="rgb(222,69,34)" fg:x="16" fg:w="5"/><text x="1.5362%" y="511.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="1.3666%" y="485" width="0.3215%" height="15" fill="rgb(209,161,10)" fg:x="17" fg:w="4"/><text x="1.6166%" y="495.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (12 samples, 0.96%)</title><rect x="0.8842%" y="581" width="0.9646%" height="15" fill="rgb(217,6,38)" fg:x="11" fg:w="12"/><text x="1.1342%" y="591.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (2 samples, 0.16%)</title><rect x="1.6881%" y="565" width="0.1608%" height="15" fill="rgb(229,229,48)" fg:x="21" fg:w="2"/><text x="1.9381%" y="575.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (2 samples, 0.16%)</title><rect x="1.6881%" y="549" width="0.1608%" height="15" fill="rgb(225,21,28)" fg:x="21" fg:w="2"/><text x="1.9381%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (18 samples, 1.45%)</title><rect x="0.4823%" y="645" width="1.4469%" height="15" fill="rgb(206,33,13)" fg:x="6" fg:w="18"/><text x="0.7323%" y="655.50"></text></g><g><title>engine::session::Session::new (18 samples, 1.45%)</title><rect x="0.4823%" y="629" width="1.4469%" height="15" fill="rgb(242,178,17)" fg:x="6" fg:w="18"/><text x="0.7323%" y="639.50"></text></g><g><title>engine::session::Session::initialize (13 samples, 1.05%)</title><rect x="0.8842%" y="613" width="1.0450%" height="15" fill="rgb(220,162,5)" fg:x="11" fg:w="13"/><text x="1.1342%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (13 samples, 1.05%)</title><rect x="0.8842%" y="597" width="1.0450%" height="15" fill="rgb(210,33,43)" fg:x="11" fg:w="13"/><text x="1.1342%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.8489%" y="581" width="0.0804%" height="15" fill="rgb(216,116,54)" fg:x="23" fg:w="1"/><text x="2.0989%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.8489%" y="565" width="0.0804%" height="15" fill="rgb(249,92,24)" fg:x="23" fg:w="1"/><text x="2.0989%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="1.9293%" y="629" width="0.0804%" height="15" fill="rgb(231,189,14)" fg:x="24" fg:w="1"/><text x="2.1793%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.9293%" y="613" width="0.0804%" height="15" fill="rgb(230,8,41)" fg:x="24" fg:w="1"/><text x="2.1793%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.9293%" y="597" width="0.0804%" height="15" fill="rgb(249,7,27)" fg:x="24" fg:w="1"/><text x="2.1793%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9293%" y="581" width="0.0804%" height="15" fill="rgb(232,86,5)" fg:x="24" fg:w="1"/><text x="2.1793%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="2.0096%" y="597" width="0.0804%" height="15" fill="rgb(224,175,18)" fg:x="25" fg:w="1"/><text x="2.2596%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0096%" y="581" width="0.0804%" height="15" fill="rgb(220,129,12)" fg:x="25" fg:w="1"/><text x="2.2596%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.0900%" y="533" width="0.0804%" height="15" fill="rgb(210,19,36)" fg:x="26" fg:w="1"/><text x="2.3400%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0900%" y="517" width="0.0804%" height="15" fill="rgb(219,96,14)" fg:x="26" fg:w="1"/><text x="2.3400%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="2.1704%" y="533" width="0.1608%" height="15" fill="rgb(249,106,1)" fg:x="27" fg:w="2"/><text x="2.4204%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2508%" y="517" width="0.0804%" height="15" fill="rgb(249,155,20)" fg:x="28" fg:w="1"/><text x="2.5008%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2508%" y="501" width="0.0804%" height="15" fill="rgb(244,168,9)" fg:x="28" fg:w="1"/><text x="2.5008%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.3312%" y="517" width="0.0804%" height="15" fill="rgb(216,23,50)" fg:x="29" fg:w="1"/><text x="2.5812%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3312%" y="501" width="0.0804%" height="15" fill="rgb(224,219,20)" fg:x="29" fg:w="1"/><text x="2.5812%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.3312%" y="485" width="0.0804%" height="15" fill="rgb(222,156,15)" fg:x="29" fg:w="1"/><text x="2.5812%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.3312%" y="469" width="0.0804%" height="15" fill="rgb(231,97,17)" fg:x="29" fg:w="1"/><text x="2.5812%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.3312%" y="453" width="0.0804%" height="15" fill="rgb(218,70,48)" fg:x="29" fg:w="1"/><text x="2.5812%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.3312%" y="533" width="0.1608%" height="15" fill="rgb(212,196,52)" fg:x="29" fg:w="2"/><text x="2.5812%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4116%" y="517" width="0.0804%" height="15" fill="rgb(243,203,18)" fg:x="30" fg:w="1"/><text x="2.6616%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.4116%" y="501" width="0.0804%" height="15" fill="rgb(252,125,41)" fg:x="30" fg:w="1"/><text x="2.6616%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.4116%" y="485" width="0.0804%" height="15" fill="rgb(223,180,33)" fg:x="30" fg:w="1"/><text x="2.6616%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.4116%" y="469" width="0.0804%" height="15" fill="rgb(254,159,46)" fg:x="30" fg:w="1"/><text x="2.6616%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="2.0900%" y="565" width="0.6431%" height="15" fill="rgb(254,38,10)" fg:x="26" fg:w="8"/><text x="2.3400%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="2.0900%" y="549" width="0.6431%" height="15" fill="rgb(208,217,32)" fg:x="26" fg:w="8"/><text x="2.3400%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="2.4920%" y="533" width="0.2412%" height="15" fill="rgb(221,120,13)" fg:x="31" fg:w="3"/><text x="2.7420%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="2.4920%" y="517" width="0.2412%" height="15" fill="rgb(246,54,52)" fg:x="31" fg:w="3"/><text x="2.7420%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="2.4920%" y="501" width="0.2412%" height="15" fill="rgb(242,34,25)" fg:x="31" fg:w="3"/><text x="2.7420%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.5723%" y="485" width="0.1608%" height="15" fill="rgb(247,209,9)" fg:x="32" fg:w="2"/><text x="2.8223%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.6527%" y="469" width="0.0804%" height="15" fill="rgb(228,71,26)" fg:x="33" fg:w="1"/><text x="2.9027%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.6527%" y="453" width="0.0804%" height="15" fill="rgb(222,145,49)" fg:x="33" fg:w="1"/><text x="2.9027%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.7331%" y="565" width="0.0804%" height="15" fill="rgb(218,121,17)" fg:x="34" fg:w="1"/><text x="2.9831%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.7331%" y="549" width="0.0804%" height="15" fill="rgb(244,50,7)" fg:x="34" fg:w="1"/><text x="2.9831%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.7331%" y="533" width="0.0804%" height="15" fill="rgb(246,229,37)" fg:x="34" fg:w="1"/><text x="2.9831%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.7331%" y="517" width="0.0804%" height="15" fill="rgb(225,18,5)" fg:x="34" fg:w="1"/><text x="2.9831%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.7331%" y="501" width="0.0804%" height="15" fill="rgb(213,204,8)" fg:x="34" fg:w="1"/><text x="2.9831%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8135%" y="517" width="0.0804%" height="15" fill="rgb(238,103,6)" fg:x="35" fg:w="1"/><text x="3.0635%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.8135%" y="501" width="0.0804%" height="15" fill="rgb(222,25,35)" fg:x="35" fg:w="1"/><text x="3.0635%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="2.8135%" y="485" width="0.0804%" height="15" fill="rgb(213,203,35)" fg:x="35" fg:w="1"/><text x="3.0635%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="2.8135%" y="469" width="0.0804%" height="15" fill="rgb(221,79,53)" fg:x="35" fg:w="1"/><text x="3.0635%" y="479.50"></text></g><g><title>engine::session::Session::flush (12 samples, 0.96%)</title><rect x="2.0096%" y="629" width="0.9646%" height="15" fill="rgb(243,200,35)" fg:x="25" fg:w="12"/><text x="2.2596%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (12 samples, 0.96%)</title><rect x="2.0096%" y="613" width="0.9646%" height="15" fill="rgb(248,60,25)" fg:x="25" fg:w="12"/><text x="2.2596%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (11 samples, 0.88%)</title><rect x="2.0900%" y="597" width="0.8842%" height="15" fill="rgb(227,53,46)" fg:x="26" fg:w="11"/><text x="2.3400%" y="607.50"></text></g><g><title>engine::session::Session::check_for_changes (11 samples, 0.88%)</title><rect x="2.0900%" y="581" width="0.8842%" height="15" fill="rgb(216,120,32)" fg:x="26" fg:w="11"/><text x="2.3400%" y="591.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="2.8135%" y="565" width="0.1608%" height="15" fill="rgb(220,134,1)" fg:x="35" fg:w="2"/><text x="3.0635%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="2.8135%" y="549" width="0.1608%" height="15" fill="rgb(237,168,5)" fg:x="35" fg:w="2"/><text x="3.0635%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.8135%" y="533" width="0.1608%" height="15" fill="rgb(231,100,33)" fg:x="35" fg:w="2"/><text x="3.0635%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8939%" y="517" width="0.0804%" height="15" fill="rgb(236,177,47)" fg:x="36" fg:w="1"/><text x="3.1439%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.8939%" y="501" width="0.0804%" height="15" fill="rgb(235,7,49)" fg:x="36" fg:w="1"/><text x="3.1439%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8939%" y="485" width="0.0804%" height="15" fill="rgb(232,119,22)" fg:x="36" fg:w="1"/><text x="3.1439%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9743%" y="565" width="0.0804%" height="15" fill="rgb(254,73,53)" fg:x="37" fg:w="1"/><text x="3.2243%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9743%" y="549" width="0.0804%" height="15" fill="rgb(251,35,20)" fg:x="37" fg:w="1"/><text x="3.2243%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="2.9743%" y="533" width="0.0804%" height="15" fill="rgb(241,119,20)" fg:x="37" fg:w="1"/><text x="3.2243%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9743%" y="517" width="0.0804%" height="15" fill="rgb(207,102,14)" fg:x="37" fg:w="1"/><text x="3.2243%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (2 samples, 0.16%)</title><rect x="2.9743%" y="629" width="0.1608%" height="15" fill="rgb(248,201,50)" fg:x="37" fg:w="2"/><text x="3.2243%" y="639.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="2.9743%" y="613" width="0.1608%" height="15" fill="rgb(222,185,44)" fg:x="37" fg:w="2"/><text x="3.2243%" y="623.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="2.9743%" y="597" width="0.1608%" height="15" fill="rgb(218,107,18)" fg:x="37" fg:w="2"/><text x="3.2243%" y="607.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="2.9743%" y="581" width="0.1608%" height="15" fill="rgb(237,177,39)" fg:x="37" fg:w="2"/><text x="3.2243%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0547%" y="565" width="0.0804%" height="15" fill="rgb(246,69,6)" fg:x="38" fg:w="1"/><text x="3.3047%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0547%" y="549" width="0.0804%" height="15" fill="rgb(234,208,37)" fg:x="38" fg:w="1"/><text x="3.3047%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0547%" y="533" width="0.0804%" height="15" fill="rgb(225,4,6)" fg:x="38" fg:w="1"/><text x="3.3047%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.0547%" y="517" width="0.0804%" height="15" fill="rgb(233,45,0)" fg:x="38" fg:w="1"/><text x="3.3047%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0547%" y="501" width="0.0804%" height="15" fill="rgb(226,136,5)" fg:x="38" fg:w="1"/><text x="3.3047%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.0547%" y="485" width="0.0804%" height="15" fill="rgb(211,91,47)" fg:x="38" fg:w="1"/><text x="3.3047%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="3.0547%" y="469" width="0.0804%" height="15" fill="rgb(242,88,51)" fg:x="38" fg:w="1"/><text x="3.3047%" y="479.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.1350%" y="629" width="0.0804%" height="15" fill="rgb(230,91,28)" fg:x="39" fg:w="1"/><text x="3.3850%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.1350%" y="613" width="0.0804%" height="15" fill="rgb(254,186,29)" fg:x="39" fg:w="1"/><text x="3.3850%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="3.1350%" y="597" width="0.0804%" height="15" fill="rgb(238,6,4)" fg:x="39" fg:w="1"/><text x="3.3850%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="3.1350%" y="581" width="0.0804%" height="15" fill="rgb(221,151,16)" fg:x="39" fg:w="1"/><text x="3.3850%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="3.1350%" y="565" width="0.0804%" height="15" fill="rgb(251,143,52)" fg:x="39" fg:w="1"/><text x="3.3850%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="3.1350%" y="549" width="0.0804%" height="15" fill="rgb(206,90,15)" fg:x="39" fg:w="1"/><text x="3.3850%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.1350%" y="533" width="0.0804%" height="15" fill="rgb(218,35,8)" fg:x="39" fg:w="1"/><text x="3.3850%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.1350%" y="517" width="0.0804%" height="15" fill="rgb(239,215,6)" fg:x="39" fg:w="1"/><text x="3.3850%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="3.1350%" y="501" width="0.0804%" height="15" fill="rgb(245,116,39)" fg:x="39" fg:w="1"/><text x="3.3850%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.1350%" y="485" width="0.0804%" height="15" fill="rgb(242,65,28)" fg:x="39" fg:w="1"/><text x="3.3850%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.1350%" y="469" width="0.0804%" height="15" fill="rgb(252,132,53)" fg:x="39" fg:w="1"/><text x="3.3850%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="3.1350%" y="453" width="0.0804%" height="15" fill="rgb(224,159,50)" fg:x="39" fg:w="1"/><text x="3.3850%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="3.1350%" y="437" width="0.0804%" height="15" fill="rgb(224,93,4)" fg:x="39" fg:w="1"/><text x="3.3850%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="3.1350%" y="421" width="0.0804%" height="15" fill="rgb(208,81,34)" fg:x="39" fg:w="1"/><text x="3.3850%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="3.1350%" y="405" width="0.0804%" height="15" fill="rgb(233,92,54)" fg:x="39" fg:w="1"/><text x="3.3850%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="3.2154%" y="613" width="0.0804%" height="15" fill="rgb(237,21,14)" fg:x="40" fg:w="1"/><text x="3.4654%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="3.2958%" y="565" width="0.0804%" height="15" fill="rgb(249,128,51)" fg:x="41" fg:w="1"/><text x="3.5458%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2958%" y="549" width="0.0804%" height="15" fill="rgb(223,129,24)" fg:x="41" fg:w="1"/><text x="3.5458%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="3.4566%" y="517" width="0.2412%" height="15" fill="rgb(231,168,25)" fg:x="43" fg:w="3"/><text x="3.7066%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="3.4566%" y="501" width="0.2412%" height="15" fill="rgb(224,39,20)" fg:x="43" fg:w="3"/><text x="3.7066%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="3.4566%" y="485" width="0.2412%" height="15" fill="rgb(225,152,53)" fg:x="43" fg:w="3"/><text x="3.7066%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="3.5370%" y="469" width="0.1608%" height="15" fill="rgb(252,17,24)" fg:x="44" fg:w="2"/><text x="3.7870%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="3.5370%" y="453" width="0.1608%" height="15" fill="rgb(250,114,30)" fg:x="44" fg:w="2"/><text x="3.7870%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="3.5370%" y="437" width="0.1608%" height="15" fill="rgb(229,5,4)" fg:x="44" fg:w="2"/><text x="3.7870%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="3.5370%" y="421" width="0.1608%" height="15" fill="rgb(225,176,49)" fg:x="44" fg:w="2"/><text x="3.7870%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="3.4566%" y="533" width="0.3215%" height="15" fill="rgb(224,221,49)" fg:x="43" fg:w="4"/><text x="3.7066%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6977%" y="517" width="0.0804%" height="15" fill="rgb(253,169,27)" fg:x="46" fg:w="1"/><text x="3.9477%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6977%" y="501" width="0.0804%" height="15" fill="rgb(211,206,16)" fg:x="46" fg:w="1"/><text x="3.9477%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6977%" y="485" width="0.0804%" height="15" fill="rgb(244,87,35)" fg:x="46" fg:w="1"/><text x="3.9477%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.7781%" y="517" width="0.0804%" height="15" fill="rgb(246,28,10)" fg:x="47" fg:w="1"/><text x="4.0281%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.8585%" y="501" width="0.1608%" height="15" fill="rgb(229,12,44)" fg:x="48" fg:w="2"/><text x="4.1085%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9389%" y="485" width="0.0804%" height="15" fill="rgb(210,145,37)" fg:x="49" fg:w="1"/><text x="4.1889%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="3.8585%" y="517" width="0.3215%" height="15" fill="rgb(227,112,52)" fg:x="48" fg:w="4"/><text x="4.1085%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.0193%" y="501" width="0.1608%" height="15" fill="rgb(238,155,34)" fg:x="50" fg:w="2"/><text x="4.2693%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.0997%" y="485" width="0.0804%" height="15" fill="rgb(239,226,36)" fg:x="51" fg:w="1"/><text x="4.3497%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0997%" y="469" width="0.0804%" height="15" fill="rgb(230,16,23)" fg:x="51" fg:w="1"/><text x="4.3497%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0997%" y="453" width="0.0804%" height="15" fill="rgb(236,171,36)" fg:x="51" fg:w="1"/><text x="4.3497%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0997%" y="437" width="0.0804%" height="15" fill="rgb(221,22,14)" fg:x="51" fg:w="1"/><text x="4.3497%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.96%)</title><rect x="3.4566%" y="549" width="0.9646%" height="15" fill="rgb(242,43,11)" fg:x="43" fg:w="12"/><text x="3.7066%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="3.7781%" y="533" width="0.6431%" height="15" fill="rgb(232,69,23)" fg:x="47" fg:w="8"/><text x="4.0281%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="4.1801%" y="517" width="0.2412%" height="15" fill="rgb(216,180,54)" fg:x="52" fg:w="3"/><text x="4.4301%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="4.1801%" y="501" width="0.2412%" height="15" fill="rgb(216,5,24)" fg:x="52" fg:w="3"/><text x="4.4301%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="4.1801%" y="485" width="0.2412%" height="15" fill="rgb(225,89,9)" fg:x="52" fg:w="3"/><text x="4.4301%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="4.2605%" y="469" width="0.1608%" height="15" fill="rgb(243,75,33)" fg:x="53" fg:w="2"/><text x="4.5105%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="4.2605%" y="453" width="0.1608%" height="15" fill="rgb(247,141,45)" fg:x="53" fg:w="2"/><text x="4.5105%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="4.2605%" y="437" width="0.1608%" height="15" fill="rgb(232,177,36)" fg:x="53" fg:w="2"/><text x="4.5105%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.4212%" y="517" width="0.0804%" height="15" fill="rgb(219,125,36)" fg:x="55" fg:w="1"/><text x="4.6712%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.5016%" y="501" width="0.0804%" height="15" fill="rgb(227,94,9)" fg:x="56" fg:w="1"/><text x="4.7516%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.4212%" y="549" width="0.2412%" height="15" fill="rgb(240,34,52)" fg:x="55" fg:w="3"/><text x="4.6712%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="4.4212%" y="533" width="0.2412%" height="15" fill="rgb(216,45,12)" fg:x="55" fg:w="3"/><text x="4.6712%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.5016%" y="517" width="0.1608%" height="15" fill="rgb(246,21,19)" fg:x="56" fg:w="2"/><text x="4.7516%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5820%" y="501" width="0.0804%" height="15" fill="rgb(213,98,42)" fg:x="57" fg:w="1"/><text x="4.8320%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5820%" y="485" width="0.0804%" height="15" fill="rgb(250,136,47)" fg:x="57" fg:w="1"/><text x="4.8320%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="4.5820%" y="469" width="0.0804%" height="15" fill="rgb(251,124,27)" fg:x="57" fg:w="1"/><text x="4.8320%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.5820%" y="453" width="0.0804%" height="15" fill="rgb(229,180,14)" fg:x="57" fg:w="1"/><text x="4.8320%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5820%" y="437" width="0.0804%" height="15" fill="rgb(245,216,25)" fg:x="57" fg:w="1"/><text x="4.8320%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7428%" y="501" width="0.0804%" height="15" fill="rgb(251,43,5)" fg:x="59" fg:w="1"/><text x="4.9928%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="4.8232%" y="501" width="0.1608%" height="15" fill="rgb(250,128,24)" fg:x="60" fg:w="2"/><text x="5.0732%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="4.8232%" y="485" width="0.1608%" height="15" fill="rgb(217,117,27)" fg:x="60" fg:w="2"/><text x="5.0732%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="4.8232%" y="469" width="0.1608%" height="15" fill="rgb(245,147,4)" fg:x="60" fg:w="2"/><text x="5.0732%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="4.8232%" y="453" width="0.1608%" height="15" fill="rgb(242,201,35)" fg:x="60" fg:w="2"/><text x="5.0732%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="4.8232%" y="437" width="0.1608%" height="15" fill="rgb(218,181,1)" fg:x="60" fg:w="2"/><text x="5.0732%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9035%" y="421" width="0.0804%" height="15" fill="rgb(222,6,29)" fg:x="61" fg:w="1"/><text x="5.1535%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.9035%" y="405" width="0.0804%" height="15" fill="rgb(208,186,3)" fg:x="61" fg:w="1"/><text x="5.1535%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9035%" y="389" width="0.0804%" height="15" fill="rgb(216,36,26)" fg:x="61" fg:w="1"/><text x="5.1535%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9035%" y="373" width="0.0804%" height="15" fill="rgb(248,201,23)" fg:x="61" fg:w="1"/><text x="5.1535%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9035%" y="357" width="0.0804%" height="15" fill="rgb(251,170,31)" fg:x="61" fg:w="1"/><text x="5.1535%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9839%" y="485" width="0.0804%" height="15" fill="rgb(207,110,25)" fg:x="62" fg:w="1"/><text x="5.2339%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.9839%" y="469" width="0.0804%" height="15" fill="rgb(250,54,15)" fg:x="62" fg:w="1"/><text x="5.2339%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="4.9839%" y="453" width="0.0804%" height="15" fill="rgb(227,68,33)" fg:x="62" fg:w="1"/><text x="5.2339%" y="463.50"></text></g><g><title>engine::session::Session::flush (23 samples, 1.85%)</title><rect x="3.2958%" y="613" width="1.8489%" height="15" fill="rgb(238,34,41)" fg:x="41" fg:w="23"/><text x="3.5458%" y="623.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (23 samples, 1.85%)</title><rect x="3.2958%" y="597" width="1.8489%" height="15" fill="rgb(220,11,15)" fg:x="41" fg:w="23"/><text x="3.5458%" y="607.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (23 samples, 1.85%)</title><rect x="3.2958%" y="581" width="1.8489%" height="15" fill="rgb(246,111,35)" fg:x="41" fg:w="23"/><text x="3.5458%" y="591.50">e..</text></g><g><title>engine::session::Session::check_for_changes (22 samples, 1.77%)</title><rect x="3.3762%" y="565" width="1.7685%" height="15" fill="rgb(209,88,53)" fg:x="42" fg:w="22"/><text x="3.6262%" y="575.50"></text></g><g><title>kernel::compare::any_entity_changes (6 samples, 0.48%)</title><rect x="4.6624%" y="549" width="0.4823%" height="15" fill="rgb(231,185,47)" fg:x="58" fg:w="6"/><text x="4.9124%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="4.6624%" y="533" width="0.4823%" height="15" fill="rgb(233,154,1)" fg:x="58" fg:w="6"/><text x="4.9124%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="4.6624%" y="517" width="0.4823%" height="15" fill="rgb(225,15,46)" fg:x="58" fg:w="6"/><text x="4.9124%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="4.9839%" y="501" width="0.1608%" height="15" fill="rgb(211,135,41)" fg:x="62" fg:w="2"/><text x="5.2339%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0643%" y="485" width="0.0804%" height="15" fill="rgb(208,54,0)" fg:x="63" fg:w="1"/><text x="5.3143%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.0643%" y="469" width="0.0804%" height="15" fill="rgb(244,136,14)" fg:x="63" fg:w="1"/><text x="5.3143%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.0643%" y="453" width="0.0804%" height="15" fill="rgb(241,56,14)" fg:x="63" fg:w="1"/><text x="5.3143%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="5.0643%" y="437" width="0.0804%" height="15" fill="rgb(205,80,24)" fg:x="63" fg:w="1"/><text x="5.3143%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.0643%" y="421" width="0.0804%" height="15" fill="rgb(220,57,4)" fg:x="63" fg:w="1"/><text x="5.3143%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.1447%" y="597" width="0.0804%" height="15" fill="rgb(226,193,50)" fg:x="64" fg:w="1"/><text x="5.3947%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.1447%" y="581" width="0.0804%" height="15" fill="rgb(231,168,22)" fg:x="64" fg:w="1"/><text x="5.3947%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="5.1447%" y="565" width="0.0804%" height="15" fill="rgb(254,215,14)" fg:x="64" fg:w="1"/><text x="5.3947%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1447%" y="549" width="0.0804%" height="15" fill="rgb(211,115,16)" fg:x="64" fg:w="1"/><text x="5.3947%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.1447%" y="533" width="0.0804%" height="15" fill="rgb(236,210,16)" fg:x="64" fg:w="1"/><text x="5.3947%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="5.1447%" y="517" width="0.0804%" height="15" fill="rgb(221,94,12)" fg:x="64" fg:w="1"/><text x="5.3947%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1447%" y="501" width="0.0804%" height="15" fill="rgb(235,218,49)" fg:x="64" fg:w="1"/><text x="5.3947%" y="511.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.2251%" y="581" width="0.0804%" height="15" fill="rgb(217,114,14)" fg:x="65" fg:w="1"/><text x="5.4751%" y="591.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.2251%" y="565" width="0.0804%" height="15" fill="rgb(216,145,22)" fg:x="65" fg:w="1"/><text x="5.4751%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.2251%" y="549" width="0.0804%" height="15" fill="rgb(217,112,39)" fg:x="65" fg:w="1"/><text x="5.4751%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.2251%" y="533" width="0.0804%" height="15" fill="rgb(225,85,32)" fg:x="65" fg:w="1"/><text x="5.4751%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.2251%" y="517" width="0.0804%" height="15" fill="rgb(245,209,47)" fg:x="65" fg:w="1"/><text x="5.4751%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.2251%" y="501" width="0.0804%" height="15" fill="rgb(218,220,15)" fg:x="65" fg:w="1"/><text x="5.4751%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.2251%" y="485" width="0.0804%" height="15" fill="rgb(222,202,31)" fg:x="65" fg:w="1"/><text x="5.4751%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.2251%" y="469" width="0.0804%" height="15" fill="rgb(243,203,4)" fg:x="65" fg:w="1"/><text x="5.4751%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.2251%" y="453" width="0.0804%" height="15" fill="rgb(237,92,17)" fg:x="65" fg:w="1"/><text x="5.4751%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.2251%" y="437" width="0.0804%" height="15" fill="rgb(231,119,7)" fg:x="65" fg:w="1"/><text x="5.4751%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.2251%" y="421" width="0.0804%" height="15" fill="rgb(237,82,41)" fg:x="65" fg:w="1"/><text x="5.4751%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.2251%" y="405" width="0.0804%" height="15" fill="rgb(226,81,48)" fg:x="65" fg:w="1"/><text x="5.4751%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.2251%" y="389" width="0.0804%" height="15" fill="rgb(234,70,51)" fg:x="65" fg:w="1"/><text x="5.4751%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.2251%" y="373" width="0.0804%" height="15" fill="rgb(251,86,4)" fg:x="65" fg:w="1"/><text x="5.4751%" y="383.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="5.3055%" y="581" width="0.0804%" height="15" fill="rgb(244,144,28)" fg:x="66" fg:w="1"/><text x="5.5555%" y="591.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="5.3055%" y="565" width="0.0804%" height="15" fill="rgb(232,161,39)" fg:x="66" fg:w="1"/><text x="5.5555%" y="575.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3055%" y="549" width="0.0804%" height="15" fill="rgb(247,34,51)" fg:x="66" fg:w="1"/><text x="5.5555%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.3055%" y="533" width="0.0804%" height="15" fill="rgb(225,132,2)" fg:x="66" fg:w="1"/><text x="5.5555%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.3055%" y="517" width="0.0804%" height="15" fill="rgb(209,159,44)" fg:x="66" fg:w="1"/><text x="5.5555%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3055%" y="501" width="0.0804%" height="15" fill="rgb(251,214,1)" fg:x="66" fg:w="1"/><text x="5.5555%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.3055%" y="485" width="0.0804%" height="15" fill="rgb(247,84,47)" fg:x="66" fg:w="1"/><text x="5.5555%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3055%" y="469" width="0.0804%" height="15" fill="rgb(240,111,43)" fg:x="66" fg:w="1"/><text x="5.5555%" y="479.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="5.1447%" y="613" width="0.3215%" height="15" fill="rgb(215,214,35)" fg:x="64" fg:w="4"/><text x="5.3947%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="5.2251%" y="597" width="0.2412%" height="15" fill="rgb(248,207,23)" fg:x="65" fg:w="3"/><text x="5.4751%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="5.3859%" y="581" width="0.0804%" height="15" fill="rgb(214,186,4)" fg:x="67" fg:w="1"/><text x="5.6359%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="5.3859%" y="565" width="0.0804%" height="15" fill="rgb(220,133,22)" fg:x="67" fg:w="1"/><text x="5.6359%" y="575.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.3859%" y="549" width="0.0804%" height="15" fill="rgb(239,134,19)" fg:x="67" fg:w="1"/><text x="5.6359%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="5.3859%" y="533" width="0.0804%" height="15" fill="rgb(250,140,9)" fg:x="67" fg:w="1"/><text x="5.6359%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="5.3859%" y="517" width="0.0804%" height="15" fill="rgb(225,59,14)" fg:x="67" fg:w="1"/><text x="5.6359%" y="527.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="5.3859%" y="501" width="0.0804%" height="15" fill="rgb(214,152,51)" fg:x="67" fg:w="1"/><text x="5.6359%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.3859%" y="485" width="0.0804%" height="15" fill="rgb(251,227,43)" fg:x="67" fg:w="1"/><text x="5.6359%" y="495.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="5.3859%" y="469" width="0.0804%" height="15" fill="rgb(241,96,17)" fg:x="67" fg:w="1"/><text x="5.6359%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="5.3859%" y="453" width="0.0804%" height="15" fill="rgb(234,198,43)" fg:x="67" fg:w="1"/><text x="5.6359%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3859%" y="437" width="0.0804%" height="15" fill="rgb(220,108,29)" fg:x="67" fg:w="1"/><text x="5.6359%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3859%" y="421" width="0.0804%" height="15" fill="rgb(226,163,33)" fg:x="67" fg:w="1"/><text x="5.6359%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.3859%" y="405" width="0.0804%" height="15" fill="rgb(205,194,45)" fg:x="67" fg:w="1"/><text x="5.6359%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.3859%" y="389" width="0.0804%" height="15" fill="rgb(206,143,44)" fg:x="67" fg:w="1"/><text x="5.6359%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.3859%" y="373" width="0.0804%" height="15" fill="rgb(236,136,36)" fg:x="67" fg:w="1"/><text x="5.6359%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.3859%" y="357" width="0.0804%" height="15" fill="rgb(249,172,42)" fg:x="67" fg:w="1"/><text x="5.6359%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3859%" y="341" width="0.0804%" height="15" fill="rgb(216,139,23)" fg:x="67" fg:w="1"/><text x="5.6359%" y="351.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="5.4662%" y="613" width="0.0804%" height="15" fill="rgb(207,166,20)" fg:x="68" fg:w="1"/><text x="5.7162%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.4662%" y="597" width="0.0804%" height="15" fill="rgb(210,209,22)" fg:x="68" fg:w="1"/><text x="5.7162%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="5.4662%" y="581" width="0.0804%" height="15" fill="rgb(232,118,20)" fg:x="68" fg:w="1"/><text x="5.7162%" y="591.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="5.4662%" y="565" width="0.0804%" height="15" fill="rgb(238,113,42)" fg:x="68" fg:w="1"/><text x="5.7162%" y="575.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="5.4662%" y="549" width="0.0804%" height="15" fill="rgb(231,42,5)" fg:x="68" fg:w="1"/><text x="5.7162%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4662%" y="533" width="0.0804%" height="15" fill="rgb(243,166,24)" fg:x="68" fg:w="1"/><text x="5.7162%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4662%" y="517" width="0.0804%" height="15" fill="rgb(237,226,12)" fg:x="68" fg:w="1"/><text x="5.7162%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4662%" y="501" width="0.0804%" height="15" fill="rgb(229,133,24)" fg:x="68" fg:w="1"/><text x="5.7162%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.4662%" y="485" width="0.0804%" height="15" fill="rgb(238,33,43)" fg:x="68" fg:w="1"/><text x="5.7162%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.4662%" y="469" width="0.0804%" height="15" fill="rgb(227,59,38)" fg:x="68" fg:w="1"/><text x="5.7162%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.4662%" y="453" width="0.0804%" height="15" fill="rgb(230,97,0)" fg:x="68" fg:w="1"/><text x="5.7162%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.4662%" y="437" width="0.0804%" height="15" fill="rgb(250,173,50)" fg:x="68" fg:w="1"/><text x="5.7162%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.4662%" y="421" width="0.0804%" height="15" fill="rgb(240,15,50)" fg:x="68" fg:w="1"/><text x="5.7162%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.4662%" y="405" width="0.0804%" height="15" fill="rgb(221,93,22)" fg:x="68" fg:w="1"/><text x="5.7162%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.4662%" y="389" width="0.0804%" height="15" fill="rgb(245,180,53)" fg:x="68" fg:w="1"/><text x="5.7162%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.4662%" y="373" width="0.0804%" height="15" fill="rgb(231,88,51)" fg:x="68" fg:w="1"/><text x="5.7162%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.4662%" y="357" width="0.0804%" height="15" fill="rgb(240,58,21)" fg:x="68" fg:w="1"/><text x="5.7162%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4662%" y="341" width="0.0804%" height="15" fill="rgb(237,21,10)" fg:x="68" fg:w="1"/><text x="5.7162%" y="351.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="5.5466%" y="565" width="0.0804%" height="15" fill="rgb(218,43,11)" fg:x="69" fg:w="1"/><text x="5.7966%" y="575.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="5.5466%" y="549" width="0.0804%" height="15" fill="rgb(218,221,29)" fg:x="69" fg:w="1"/><text x="5.7966%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5466%" y="533" width="0.0804%" height="15" fill="rgb(214,118,42)" fg:x="69" fg:w="1"/><text x="5.7966%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5466%" y="517" width="0.0804%" height="15" fill="rgb(251,200,26)" fg:x="69" fg:w="1"/><text x="5.7966%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.5466%" y="501" width="0.0804%" height="15" fill="rgb(237,101,39)" fg:x="69" fg:w="1"/><text x="5.7966%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.5466%" y="485" width="0.0804%" height="15" fill="rgb(251,117,11)" fg:x="69" fg:w="1"/><text x="5.7966%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.5466%" y="469" width="0.0804%" height="15" fill="rgb(216,223,23)" fg:x="69" fg:w="1"/><text x="5.7966%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.5466%" y="453" width="0.0804%" height="15" fill="rgb(251,54,12)" fg:x="69" fg:w="1"/><text x="5.7966%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.5466%" y="437" width="0.0804%" height="15" fill="rgb(254,176,54)" fg:x="69" fg:w="1"/><text x="5.7966%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.5466%" y="421" width="0.0804%" height="15" fill="rgb(210,32,8)" fg:x="69" fg:w="1"/><text x="5.7966%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.5466%" y="405" width="0.0804%" height="15" fill="rgb(235,52,38)" fg:x="69" fg:w="1"/><text x="5.7966%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.5466%" y="389" width="0.0804%" height="15" fill="rgb(231,4,44)" fg:x="69" fg:w="1"/><text x="5.7966%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.5466%" y="373" width="0.0804%" height="15" fill="rgb(249,2,32)" fg:x="69" fg:w="1"/><text x="5.7966%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.5466%" y="357" width="0.0804%" height="15" fill="rgb(224,65,26)" fg:x="69" fg:w="1"/><text x="5.7966%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.5466%" y="341" width="0.0804%" height="15" fill="rgb(250,73,40)" fg:x="69" fg:w="1"/><text x="5.7966%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="5.5466%" y="581" width="0.1608%" height="15" fill="rgb(253,177,16)" fg:x="69" fg:w="2"/><text x="5.7966%" y="591.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="5.6270%" y="565" width="0.0804%" height="15" fill="rgb(217,32,34)" fg:x="70" fg:w="1"/><text x="5.8770%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="5.6270%" y="549" width="0.0804%" height="15" fill="rgb(212,7,10)" fg:x="70" fg:w="1"/><text x="5.8770%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="5.6270%" y="533" width="0.0804%" height="15" fill="rgb(245,89,8)" fg:x="70" fg:w="1"/><text x="5.8770%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (32 samples, 2.57%)</title><rect x="3.2154%" y="629" width="2.5723%" height="15" fill="rgb(237,16,53)" fg:x="40" fg:w="32"/><text x="3.4654%" y="639.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (3 samples, 0.24%)</title><rect x="5.5466%" y="613" width="0.2412%" height="15" fill="rgb(250,204,30)" fg:x="69" fg:w="3"/><text x="5.7966%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="5.5466%" y="597" width="0.2412%" height="15" fill="rgb(208,77,27)" fg:x="69" fg:w="3"/><text x="5.7966%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.7074%" y="581" width="0.0804%" height="15" fill="rgb(250,204,28)" fg:x="71" fg:w="1"/><text x="5.9574%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7074%" y="565" width="0.0804%" height="15" fill="rgb(244,63,21)" fg:x="71" fg:w="1"/><text x="5.9574%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7074%" y="549" width="0.0804%" height="15" fill="rgb(236,85,44)" fg:x="71" fg:w="1"/><text x="5.9574%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.7074%" y="533" width="0.0804%" height="15" fill="rgb(215,98,4)" fg:x="71" fg:w="1"/><text x="5.9574%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.7074%" y="517" width="0.0804%" height="15" fill="rgb(235,38,11)" fg:x="71" fg:w="1"/><text x="5.9574%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.7074%" y="501" width="0.0804%" height="15" fill="rgb(254,186,25)" fg:x="71" fg:w="1"/><text x="5.9574%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.7074%" y="485" width="0.0804%" height="15" fill="rgb(225,55,31)" fg:x="71" fg:w="1"/><text x="5.9574%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.7074%" y="469" width="0.0804%" height="15" fill="rgb(211,15,21)" fg:x="71" fg:w="1"/><text x="5.9574%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.7074%" y="453" width="0.0804%" height="15" fill="rgb(215,187,41)" fg:x="71" fg:w="1"/><text x="5.9574%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.7074%" y="437" width="0.0804%" height="15" fill="rgb(248,69,32)" fg:x="71" fg:w="1"/><text x="5.9574%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.7074%" y="421" width="0.0804%" height="15" fill="rgb(252,102,52)" fg:x="71" fg:w="1"/><text x="5.9574%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.7074%" y="405" width="0.0804%" height="15" fill="rgb(253,140,32)" fg:x="71" fg:w="1"/><text x="5.9574%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.7074%" y="389" width="0.0804%" height="15" fill="rgb(216,56,42)" fg:x="71" fg:w="1"/><text x="5.9574%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7074%" y="373" width="0.0804%" height="15" fill="rgb(216,184,14)" fg:x="71" fg:w="1"/><text x="5.9574%" y="383.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (49 samples, 3.94%)</title><rect x="1.9293%" y="645" width="3.9389%" height="15" fill="rgb(237,187,27)" fg:x="24" fg:w="49"/><text x="2.1793%" y="655.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="5.7878%" y="629" width="0.0804%" height="15" fill="rgb(219,65,3)" fg:x="72" fg:w="1"/><text x="6.0378%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="5.7878%" y="613" width="0.0804%" height="15" fill="rgb(245,83,25)" fg:x="72" fg:w="1"/><text x="6.0378%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.7878%" y="597" width="0.0804%" height="15" fill="rgb(214,205,45)" fg:x="72" fg:w="1"/><text x="6.0378%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="5.7878%" y="581" width="0.0804%" height="15" fill="rgb(241,20,18)" fg:x="72" fg:w="1"/><text x="6.0378%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="5.8682%" y="613" width="0.1608%" height="15" fill="rgb(232,163,23)" fg:x="73" fg:w="2"/><text x="6.1182%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.8682%" y="597" width="0.1608%" height="15" fill="rgb(214,5,46)" fg:x="73" fg:w="2"/><text x="6.1182%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.0289%" y="613" width="0.0804%" height="15" fill="rgb(229,78,17)" fg:x="75" fg:w="1"/><text x="6.2789%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="6.0289%" y="597" width="0.0804%" height="15" fill="rgb(248,89,10)" fg:x="75" fg:w="1"/><text x="6.2789%" y="607.50"></text></g><g><title>engine::session::Session::save_entity (1 samples, 0.08%)</title><rect x="6.0289%" y="581" width="0.0804%" height="15" fill="rgb(248,54,15)" fg:x="75" fg:w="1"/><text x="6.2789%" y="591.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="6.1093%" y="613" width="0.1608%" height="15" fill="rgb(223,116,6)" fg:x="76" fg:w="2"/><text x="6.3593%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="6.1093%" y="597" width="0.1608%" height="15" fill="rgb(205,125,38)" fg:x="76" fg:w="2"/><text x="6.3593%" y="607.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="6.1093%" y="581" width="0.1608%" height="15" fill="rgb(251,78,38)" fg:x="76" fg:w="2"/><text x="6.3593%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.1897%" y="565" width="0.0804%" height="15" fill="rgb(253,78,28)" fg:x="77" fg:w="1"/><text x="6.4397%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="6.2701%" y="581" width="0.0804%" height="15" fill="rgb(209,120,3)" fg:x="78" fg:w="1"/><text x="6.5201%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="6.2701%" y="565" width="0.0804%" height="15" fill="rgb(238,229,9)" fg:x="78" fg:w="1"/><text x="6.5201%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="6.2701%" y="549" width="0.0804%" height="15" fill="rgb(253,159,18)" fg:x="78" fg:w="1"/><text x="6.5201%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="6.2701%" y="533" width="0.0804%" height="15" fill="rgb(244,42,34)" fg:x="78" fg:w="1"/><text x="6.5201%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.2701%" y="517" width="0.0804%" height="15" fill="rgb(224,8,7)" fg:x="78" fg:w="1"/><text x="6.5201%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.2701%" y="501" width="0.0804%" height="15" fill="rgb(210,201,45)" fg:x="78" fg:w="1"/><text x="6.5201%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2701%" y="485" width="0.0804%" height="15" fill="rgb(252,185,21)" fg:x="78" fg:w="1"/><text x="6.5201%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.3505%" y="565" width="0.0804%" height="15" fill="rgb(223,131,1)" fg:x="79" fg:w="1"/><text x="6.6005%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.4309%" y="549" width="0.0804%" height="15" fill="rgb(245,141,16)" fg:x="80" fg:w="1"/><text x="6.6809%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.5113%" y="549" width="0.1608%" height="15" fill="rgb(229,55,45)" fg:x="81" fg:w="2"/><text x="6.7613%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5916%" y="533" width="0.0804%" height="15" fill="rgb(208,92,15)" fg:x="82" fg:w="1"/><text x="6.8416%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.5916%" y="517" width="0.0804%" height="15" fill="rgb(234,185,47)" fg:x="82" fg:w="1"/><text x="6.8416%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.5916%" y="501" width="0.0804%" height="15" fill="rgb(253,104,50)" fg:x="82" fg:w="1"/><text x="6.8416%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.5916%" y="485" width="0.0804%" height="15" fill="rgb(205,70,7)" fg:x="82" fg:w="1"/><text x="6.8416%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.5916%" y="469" width="0.0804%" height="15" fill="rgb(240,178,43)" fg:x="82" fg:w="1"/><text x="6.8416%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.5916%" y="453" width="0.0804%" height="15" fill="rgb(214,112,2)" fg:x="82" fg:w="1"/><text x="6.8416%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.6720%" y="517" width="0.1608%" height="15" fill="rgb(206,46,17)" fg:x="83" fg:w="2"/><text x="6.9220%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.6720%" y="501" width="0.1608%" height="15" fill="rgb(225,220,16)" fg:x="83" fg:w="2"/><text x="6.9220%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.7524%" y="485" width="0.0804%" height="15" fill="rgb(238,65,40)" fg:x="84" fg:w="1"/><text x="7.0024%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.6720%" y="549" width="0.2412%" height="15" fill="rgb(230,151,21)" fg:x="83" fg:w="3"/><text x="6.9220%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.6720%" y="533" width="0.2412%" height="15" fill="rgb(218,58,49)" fg:x="83" fg:w="3"/><text x="6.9220%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8328%" y="517" width="0.0804%" height="15" fill="rgb(219,179,14)" fg:x="85" fg:w="1"/><text x="7.0828%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.8328%" y="501" width="0.0804%" height="15" fill="rgb(223,72,1)" fg:x="85" fg:w="1"/><text x="7.0828%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="6.3505%" y="581" width="0.7235%" height="15" fill="rgb(238,126,10)" fg:x="79" fg:w="9"/><text x="6.6005%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="6.4309%" y="565" width="0.6431%" height="15" fill="rgb(224,206,38)" fg:x="80" fg:w="8"/><text x="6.6809%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.9132%" y="549" width="0.1608%" height="15" fill="rgb(212,201,54)" fg:x="86" fg:w="2"/><text x="7.1632%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.9936%" y="533" width="0.0804%" height="15" fill="rgb(218,154,48)" fg:x="87" fg:w="1"/><text x="7.2436%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.9936%" y="517" width="0.0804%" height="15" fill="rgb(232,93,24)" fg:x="87" fg:w="1"/><text x="7.2436%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.9936%" y="501" width="0.0804%" height="15" fill="rgb(245,30,21)" fg:x="87" fg:w="1"/><text x="7.2436%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.9936%" y="485" width="0.0804%" height="15" fill="rgb(242,148,29)" fg:x="87" fg:w="1"/><text x="7.2436%" y="495.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="6.9936%" y="469" width="0.0804%" height="15" fill="rgb(244,153,54)" fg:x="87" fg:w="1"/><text x="7.2436%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.0740%" y="533" width="0.0804%" height="15" fill="rgb(252,87,22)" fg:x="88" fg:w="1"/><text x="7.3240%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="7.1543%" y="517" width="0.0804%" height="15" fill="rgb(210,51,29)" fg:x="89" fg:w="1"/><text x="7.4043%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.0740%" y="581" width="0.2412%" height="15" fill="rgb(242,136,47)" fg:x="88" fg:w="3"/><text x="7.3240%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="7.0740%" y="565" width="0.2412%" height="15" fill="rgb(238,68,4)" fg:x="88" fg:w="3"/><text x="7.3240%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.0740%" y="549" width="0.2412%" height="15" fill="rgb(242,161,30)" fg:x="88" fg:w="3"/><text x="7.3240%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.1543%" y="533" width="0.1608%" height="15" fill="rgb(218,58,44)" fg:x="89" fg:w="2"/><text x="7.4043%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2347%" y="517" width="0.0804%" height="15" fill="rgb(252,125,32)" fg:x="90" fg:w="1"/><text x="7.4847%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2347%" y="501" width="0.0804%" height="15" fill="rgb(219,178,0)" fg:x="90" fg:w="1"/><text x="7.4847%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3151%" y="565" width="0.0804%" height="15" fill="rgb(213,152,7)" fg:x="91" fg:w="1"/><text x="7.5651%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.3955%" y="533" width="0.0804%" height="15" fill="rgb(249,109,34)" fg:x="92" fg:w="1"/><text x="7.6455%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.4759%" y="485" width="0.0804%" height="15" fill="rgb(232,96,21)" fg:x="93" fg:w="1"/><text x="7.7259%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4759%" y="469" width="0.0804%" height="15" fill="rgb(228,27,39)" fg:x="93" fg:w="1"/><text x="7.7259%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.3955%" y="565" width="0.2412%" height="15" fill="rgb(211,182,52)" fg:x="92" fg:w="3"/><text x="7.6455%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="7.3955%" y="549" width="0.2412%" height="15" fill="rgb(234,178,38)" fg:x="92" fg:w="3"/><text x="7.6455%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.4759%" y="533" width="0.1608%" height="15" fill="rgb(221,111,3)" fg:x="93" fg:w="2"/><text x="7.7259%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.4759%" y="517" width="0.1608%" height="15" fill="rgb(228,175,21)" fg:x="93" fg:w="2"/><text x="7.7259%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.4759%" y="501" width="0.1608%" height="15" fill="rgb(228,174,43)" fg:x="93" fg:w="2"/><text x="7.7259%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.5563%" y="485" width="0.0804%" height="15" fill="rgb(211,191,0)" fg:x="94" fg:w="1"/><text x="7.8063%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.5563%" y="469" width="0.0804%" height="15" fill="rgb(253,117,3)" fg:x="94" fg:w="1"/><text x="7.8063%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7170%" y="533" width="0.0804%" height="15" fill="rgb(241,127,19)" fg:x="96" fg:w="1"/><text x="7.9670%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="7.7170%" y="517" width="0.0804%" height="15" fill="rgb(218,103,12)" fg:x="96" fg:w="1"/><text x="7.9670%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="7.7974%" y="453" width="0.1608%" height="15" fill="rgb(236,214,43)" fg:x="97" fg:w="2"/><text x="8.0474%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.24%)</title><rect x="7.7974%" y="533" width="0.2412%" height="15" fill="rgb(244,144,19)" fg:x="97" fg:w="3"/><text x="8.0474%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="7.7974%" y="517" width="0.2412%" height="15" fill="rgb(246,188,10)" fg:x="97" fg:w="3"/><text x="8.0474%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="7.7974%" y="501" width="0.2412%" height="15" fill="rgb(212,193,33)" fg:x="97" fg:w="3"/><text x="8.0474%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="7.7974%" y="485" width="0.2412%" height="15" fill="rgb(241,51,29)" fg:x="97" fg:w="3"/><text x="8.0474%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="7.7974%" y="469" width="0.2412%" height="15" fill="rgb(211,58,19)" fg:x="97" fg:w="3"/><text x="8.0474%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.9582%" y="453" width="0.0804%" height="15" fill="rgb(229,111,26)" fg:x="99" fg:w="1"/><text x="8.2082%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0386%" y="517" width="0.0804%" height="15" fill="rgb(213,115,40)" fg:x="100" fg:w="1"/><text x="8.2886%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0386%" y="501" width="0.0804%" height="15" fill="rgb(209,56,44)" fg:x="100" fg:w="1"/><text x="8.2886%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0386%" y="485" width="0.0804%" height="15" fill="rgb(230,108,32)" fg:x="100" fg:w="1"/><text x="8.2886%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1190%" y="485" width="0.0804%" height="15" fill="rgb(216,165,31)" fg:x="101" fg:w="1"/><text x="8.3690%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.1190%" y="469" width="0.0804%" height="15" fill="rgb(218,122,21)" fg:x="101" fg:w="1"/><text x="8.3690%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1190%" y="453" width="0.0804%" height="15" fill="rgb(223,224,47)" fg:x="101" fg:w="1"/><text x="8.3690%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="7.6367%" y="565" width="0.7235%" height="15" fill="rgb(238,102,44)" fg:x="95" fg:w="9"/><text x="7.8867%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="7.6367%" y="549" width="0.7235%" height="15" fill="rgb(236,46,40)" fg:x="95" fg:w="9"/><text x="7.8867%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="8.0386%" y="533" width="0.3215%" height="15" fill="rgb(247,202,50)" fg:x="100" fg:w="4"/><text x="8.2886%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.24%)</title><rect x="8.1190%" y="517" width="0.2412%" height="15" fill="rgb(209,99,20)" fg:x="101" fg:w="3"/><text x="8.3690%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="8.1190%" y="501" width="0.2412%" height="15" fill="rgb(252,27,34)" fg:x="101" fg:w="3"/><text x="8.3690%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="8.1994%" y="485" width="0.1608%" height="15" fill="rgb(215,206,23)" fg:x="102" fg:w="2"/><text x="8.4494%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.2797%" y="469" width="0.0804%" height="15" fill="rgb(212,135,36)" fg:x="103" fg:w="1"/><text x="8.5297%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.2797%" y="453" width="0.0804%" height="15" fill="rgb(240,189,1)" fg:x="103" fg:w="1"/><text x="8.5297%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="8.3601%" y="421" width="0.1608%" height="15" fill="rgb(242,56,20)" fg:x="104" fg:w="2"/><text x="8.6101%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="8.3601%" y="405" width="0.1608%" height="15" fill="rgb(247,132,33)" fg:x="104" fg:w="2"/><text x="8.6101%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="8.3601%" y="389" width="0.1608%" height="15" fill="rgb(208,149,11)" fg:x="104" fg:w="2"/><text x="8.6101%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="8.5209%" y="405" width="0.0804%" height="15" fill="rgb(211,33,11)" fg:x="106" fg:w="1"/><text x="8.7709%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="8.5209%" y="389" width="0.0804%" height="15" fill="rgb(221,29,38)" fg:x="106" fg:w="1"/><text x="8.7709%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="8.6013%" y="405" width="0.0804%" height="15" fill="rgb(206,182,49)" fg:x="107" fg:w="1"/><text x="8.8513%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="8.6013%" y="389" width="0.0804%" height="15" fill="rgb(216,140,1)" fg:x="107" fg:w="1"/><text x="8.8513%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="8.3601%" y="469" width="0.4019%" height="15" fill="rgb(232,57,40)" fg:x="104" fg:w="5"/><text x="8.6101%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="8.3601%" y="453" width="0.4019%" height="15" fill="rgb(224,186,18)" fg:x="104" fg:w="5"/><text x="8.6101%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="8.3601%" y="437" width="0.4019%" height="15" fill="rgb(215,121,11)" fg:x="104" fg:w="5"/><text x="8.6101%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="8.5209%" y="421" width="0.2412%" height="15" fill="rgb(245,147,10)" fg:x="106" fg:w="3"/><text x="8.7709%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6817%" y="405" width="0.0804%" height="15" fill="rgb(238,153,13)" fg:x="108" fg:w="1"/><text x="8.9317%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="8.3601%" y="501" width="0.5627%" height="15" fill="rgb(233,108,0)" fg:x="104" fg:w="7"/><text x="8.6101%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="8.3601%" y="485" width="0.5627%" height="15" fill="rgb(212,157,17)" fg:x="104" fg:w="7"/><text x="8.6101%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.7621%" y="469" width="0.1608%" height="15" fill="rgb(225,213,38)" fg:x="109" fg:w="2"/><text x="9.0121%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8424%" y="453" width="0.0804%" height="15" fill="rgb(248,16,11)" fg:x="110" fg:w="1"/><text x="9.0924%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="8.3601%" y="565" width="0.6431%" height="15" fill="rgb(241,33,4)" fg:x="104" fg:w="8"/><text x="8.6101%" y="575.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="8.3601%" y="549" width="0.6431%" height="15" fill="rgb(222,26,43)" fg:x="104" fg:w="8"/><text x="8.6101%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="8.3601%" y="533" width="0.6431%" height="15" fill="rgb(243,29,36)" fg:x="104" fg:w="8"/><text x="8.6101%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="8.3601%" y="517" width="0.6431%" height="15" fill="rgb(241,9,27)" fg:x="104" fg:w="8"/><text x="8.6101%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="8.9228%" y="501" width="0.0804%" height="15" fill="rgb(205,117,26)" fg:x="111" fg:w="1"/><text x="9.1728%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="8.9228%" y="485" width="0.0804%" height="15" fill="rgb(209,80,39)" fg:x="111" fg:w="1"/><text x="9.1728%" y="495.50"></text></g><g><title>kernel::compare::any_entity_changes (23 samples, 1.85%)</title><rect x="7.3151%" y="581" width="1.8489%" height="15" fill="rgb(239,155,6)" fg:x="91" fg:w="23"/><text x="7.5651%" y="591.50">k..</text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="9.0032%" y="565" width="0.1608%" height="15" fill="rgb(212,104,12)" fg:x="112" fg:w="2"/><text x="9.2532%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.0032%" y="549" width="0.1608%" height="15" fill="rgb(234,204,3)" fg:x="112" fg:w="2"/><text x="9.2532%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="9.0032%" y="533" width="0.1608%" height="15" fill="rgb(251,218,7)" fg:x="112" fg:w="2"/><text x="9.2532%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.0836%" y="517" width="0.0804%" height="15" fill="rgb(221,81,32)" fg:x="113" fg:w="1"/><text x="9.3336%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="9.0836%" y="501" width="0.0804%" height="15" fill="rgb(214,152,26)" fg:x="113" fg:w="1"/><text x="9.3336%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.0836%" y="485" width="0.0804%" height="15" fill="rgb(223,22,3)" fg:x="113" fg:w="1"/><text x="9.3336%" y="495.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (37 samples, 2.97%)</title><rect x="6.2701%" y="613" width="2.9743%" height="15" fill="rgb(207,174,7)" fg:x="78" fg:w="37"/><text x="6.5201%" y="623.50">eng..</text></g><g><title>engine::session::Session::check_for_changes (37 samples, 2.97%)</title><rect x="6.2701%" y="597" width="2.9743%" height="15" fill="rgb(224,19,52)" fg:x="78" fg:w="37"/><text x="6.5201%" y="607.50">eng..</text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="9.1640%" y="581" width="0.0804%" height="15" fill="rgb(228,24,14)" fg:x="114" fg:w="1"/><text x="9.4140%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1640%" y="565" width="0.0804%" height="15" fill="rgb(230,153,43)" fg:x="114" fg:w="1"/><text x="9.4140%" y="575.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="9.2444%" y="613" width="0.0804%" height="15" fill="rgb(231,106,12)" fg:x="115" fg:w="1"/><text x="9.4944%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="9.2444%" y="597" width="0.0804%" height="15" fill="rgb(215,92,2)" fg:x="115" fg:w="1"/><text x="9.4944%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="9.2444%" y="581" width="0.0804%" height="15" fill="rgb(249,143,25)" fg:x="115" fg:w="1"/><text x="9.4944%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.2444%" y="565" width="0.0804%" height="15" fill="rgb(252,7,35)" fg:x="115" fg:w="1"/><text x="9.4944%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.2444%" y="549" width="0.0804%" height="15" fill="rgb(216,69,40)" fg:x="115" fg:w="1"/><text x="9.4944%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.2444%" y="533" width="0.0804%" height="15" fill="rgb(240,36,33)" fg:x="115" fg:w="1"/><text x="9.4944%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.2444%" y="517" width="0.0804%" height="15" fill="rgb(231,128,14)" fg:x="115" fg:w="1"/><text x="9.4944%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="9.2444%" y="501" width="0.0804%" height="15" fill="rgb(245,143,14)" fg:x="115" fg:w="1"/><text x="9.4944%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.2444%" y="485" width="0.0804%" height="15" fill="rgb(222,130,28)" fg:x="115" fg:w="1"/><text x="9.4944%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.2444%" y="469" width="0.0804%" height="15" fill="rgb(212,10,48)" fg:x="115" fg:w="1"/><text x="9.4944%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.2444%" y="453" width="0.0804%" height="15" fill="rgb(254,118,45)" fg:x="115" fg:w="1"/><text x="9.4944%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.2444%" y="437" width="0.0804%" height="15" fill="rgb(228,6,45)" fg:x="115" fg:w="1"/><text x="9.4944%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.2444%" y="421" width="0.0804%" height="15" fill="rgb(241,18,35)" fg:x="115" fg:w="1"/><text x="9.4944%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.2444%" y="405" width="0.0804%" height="15" fill="rgb(227,214,53)" fg:x="115" fg:w="1"/><text x="9.4944%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.2444%" y="389" width="0.0804%" height="15" fill="rgb(224,107,51)" fg:x="115" fg:w="1"/><text x="9.4944%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.2444%" y="373" width="0.0804%" height="15" fill="rgb(248,60,28)" fg:x="115" fg:w="1"/><text x="9.4944%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.2444%" y="357" width="0.0804%" height="15" fill="rgb(249,101,23)" fg:x="115" fg:w="1"/><text x="9.4944%" y="367.50"></text></g><g><title>engine::session::Session::close (44 samples, 3.54%)</title><rect x="5.8682%" y="645" width="3.5370%" height="15" fill="rgb(228,51,19)" fg:x="73" fg:w="44"/><text x="6.1182%" y="655.50">eng..</text></g><g><title>engine::session::Session::save_entity_changes (44 samples, 3.54%)</title><rect x="5.8682%" y="629" width="3.5370%" height="15" fill="rgb(213,20,6)" fg:x="73" fg:w="44"/><text x="6.1182%" y="639.50">eng..</text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="9.3248%" y="613" width="0.0804%" height="15" fill="rgb(212,124,10)" fg:x="116" fg:w="1"/><text x="9.5748%" y="623.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="9.3248%" y="597" width="0.0804%" height="15" fill="rgb(248,3,40)" fg:x="116" fg:w="1"/><text x="9.5748%" y="607.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="9.3248%" y="581" width="0.0804%" height="15" fill="rgb(223,178,23)" fg:x="116" fg:w="1"/><text x="9.5748%" y="591.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="9.3248%" y="565" width="0.0804%" height="15" fill="rgb(240,132,45)" fg:x="116" fg:w="1"/><text x="9.5748%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="9.3248%" y="549" width="0.0804%" height="15" fill="rgb(245,164,36)" fg:x="116" fg:w="1"/><text x="9.5748%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="9.3248%" y="533" width="0.0804%" height="15" fill="rgb(231,188,53)" fg:x="116" fg:w="1"/><text x="9.5748%" y="543.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="9.3248%" y="517" width="0.0804%" height="15" fill="rgb(237,198,39)" fg:x="116" fg:w="1"/><text x="9.5748%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="9.4051%" y="453" width="0.0804%" height="15" fill="rgb(223,120,35)" fg:x="117" fg:w="1"/><text x="9.6551%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.4051%" y="437" width="0.0804%" height="15" fill="rgb(253,107,49)" fg:x="117" fg:w="1"/><text x="9.6551%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.4051%" y="421" width="0.0804%" height="15" fill="rgb(216,44,31)" fg:x="117" fg:w="1"/><text x="9.6551%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.4051%" y="405" width="0.0804%" height="15" fill="rgb(253,87,21)" fg:x="117" fg:w="1"/><text x="9.6551%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.4051%" y="389" width="0.0804%" height="15" fill="rgb(226,18,2)" fg:x="117" fg:w="1"/><text x="9.6551%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.4051%" y="373" width="0.0804%" height="15" fill="rgb(216,8,46)" fg:x="117" fg:w="1"/><text x="9.6551%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.4051%" y="357" width="0.0804%" height="15" fill="rgb(226,140,39)" fg:x="117" fg:w="1"/><text x="9.6551%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4051%" y="341" width="0.0804%" height="15" fill="rgb(221,194,54)" fg:x="117" fg:w="1"/><text x="9.6551%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::name (1 samples, 0.08%)</title><rect x="9.4855%" y="453" width="0.0804%" height="15" fill="rgb(213,92,11)" fg:x="118" fg:w="1"/><text x="9.7355%" y="463.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="9.4855%" y="437" width="0.0804%" height="15" fill="rgb(229,162,46)" fg:x="118" fg:w="1"/><text x="9.7355%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="9.5659%" y="453" width="0.0804%" height="15" fill="rgb(214,111,36)" fg:x="119" fg:w="1"/><text x="9.8159%" y="463.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="9.5659%" y="437" width="0.0804%" height="15" fill="rgb(207,6,21)" fg:x="119" fg:w="1"/><text x="9.8159%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="9.5659%" y="421" width="0.0804%" height="15" fill="rgb(213,127,38)" fg:x="119" fg:w="1"/><text x="9.8159%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="9.5659%" y="405" width="0.0804%" height="15" fill="rgb(238,118,32)" fg:x="119" fg:w="1"/><text x="9.8159%" y="415.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="9.5659%" y="389" width="0.0804%" height="15" fill="rgb(240,139,39)" fg:x="119" fg:w="1"/><text x="9.8159%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.5659%" y="373" width="0.0804%" height="15" fill="rgb(235,10,37)" fg:x="119" fg:w="1"/><text x="9.8159%" y="383.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.5659%" y="357" width="0.0804%" height="15" fill="rgb(249,171,38)" fg:x="119" fg:w="1"/><text x="9.8159%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.5659%" y="341" width="0.0804%" height="15" fill="rgb(242,144,32)" fg:x="119" fg:w="1"/><text x="9.8159%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.7267%" y="405" width="0.0804%" height="15" fill="rgb(217,117,21)" fg:x="121" fg:w="1"/><text x="9.9767%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.7267%" y="389" width="0.0804%" height="15" fill="rgb(249,87,1)" fg:x="121" fg:w="1"/><text x="9.9767%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.7267%" y="373" width="0.0804%" height="15" fill="rgb(248,196,48)" fg:x="121" fg:w="1"/><text x="9.9767%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.7267%" y="357" width="0.0804%" height="15" fill="rgb(251,206,33)" fg:x="121" fg:w="1"/><text x="9.9767%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="10.2090%" y="277" width="0.0804%" height="15" fill="rgb(232,141,28)" fg:x="127" fg:w="1"/><text x="10.4590%" y="287.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="10.3698%" y="261" width="0.0804%" height="15" fill="rgb(209,167,14)" fg:x="129" fg:w="1"/><text x="10.6198%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (5 samples, 0.40%)</title><rect x="10.2090%" y="293" width="0.4019%" height="15" fill="rgb(225,11,50)" fg:x="127" fg:w="5"/><text x="10.4590%" y="303.50"></text></g><g><title>regex_automata::util::determinize::next (4 samples, 0.32%)</title><rect x="10.2894%" y="277" width="0.3215%" height="15" fill="rgb(209,50,20)" fg:x="128" fg:w="4"/><text x="10.5394%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="10.4502%" y="261" width="0.1608%" height="15" fill="rgb(212,17,46)" fg:x="130" fg:w="2"/><text x="10.7002%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="10.6109%" y="277" width="0.0804%" height="15" fill="rgb(216,101,39)" fg:x="132" fg:w="1"/><text x="10.8609%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (10 samples, 0.80%)</title><rect x="9.9678%" y="309" width="0.8039%" height="15" fill="rgb(212,228,48)" fg:x="124" fg:w="10"/><text x="10.2178%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="10.6109%" y="293" width="0.1608%" height="15" fill="rgb(250,6,50)" fg:x="132" fg:w="2"/><text x="10.8609%" y="303.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="10.6913%" y="277" width="0.0804%" height="15" fill="rgb(250,160,48)" fg:x="133" fg:w="1"/><text x="10.9413%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="10.6913%" y="261" width="0.0804%" height="15" fill="rgb(244,216,33)" fg:x="133" fg:w="1"/><text x="10.9413%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.6913%" y="245" width="0.0804%" height="15" fill="rgb(207,157,5)" fg:x="133" fg:w="1"/><text x="10.9413%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6913%" y="229" width="0.0804%" height="15" fill="rgb(228,199,8)" fg:x="133" fg:w="1"/><text x="10.9413%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.88%)</title><rect x="9.9678%" y="373" width="0.8842%" height="15" fill="rgb(227,80,20)" fg:x="124" fg:w="11"/><text x="10.2178%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.88%)</title><rect x="9.9678%" y="357" width="0.8842%" height="15" fill="rgb(222,9,33)" fg:x="124" fg:w="11"/><text x="10.2178%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (11 samples, 0.88%)</title><rect x="9.9678%" y="341" width="0.8842%" height="15" fill="rgb(239,44,28)" fg:x="124" fg:w="11"/><text x="10.2178%" y="351.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (11 samples, 0.88%)</title><rect x="9.9678%" y="325" width="0.8842%" height="15" fill="rgb(249,187,43)" fg:x="124" fg:w="11"/><text x="10.2178%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="10.7717%" y="309" width="0.0804%" height="15" fill="rgb(216,141,28)" fg:x="134" fg:w="1"/><text x="11.0217%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="10.7717%" y="293" width="0.0804%" height="15" fill="rgb(230,154,53)" fg:x="134" fg:w="1"/><text x="11.0217%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.7717%" y="277" width="0.0804%" height="15" fill="rgb(227,82,4)" fg:x="134" fg:w="1"/><text x="11.0217%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.7717%" y="261" width="0.0804%" height="15" fill="rgb(220,107,16)" fg:x="134" fg:w="1"/><text x="11.0217%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7717%" y="245" width="0.0804%" height="15" fill="rgb(207,187,2)" fg:x="134" fg:w="1"/><text x="11.0217%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.8521%" y="357" width="0.0804%" height="15" fill="rgb(210,162,52)" fg:x="135" fg:w="1"/><text x="11.1021%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.9325%" y="325" width="0.0804%" height="15" fill="rgb(217,216,49)" fg:x="136" fg:w="1"/><text x="11.1825%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="10.9325%" y="341" width="0.1608%" height="15" fill="rgb(218,146,49)" fg:x="136" fg:w="2"/><text x="11.1825%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="11.0129%" y="325" width="0.0804%" height="15" fill="rgb(216,55,40)" fg:x="137" fg:w="1"/><text x="11.2629%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="11.0129%" y="309" width="0.0804%" height="15" fill="rgb(208,196,21)" fg:x="137" fg:w="1"/><text x="11.2629%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="10.8521%" y="373" width="0.3215%" height="15" fill="rgb(242,117,42)" fg:x="135" fg:w="4"/><text x="11.1021%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="10.9325%" y="357" width="0.2412%" height="15" fill="rgb(210,11,23)" fg:x="136" fg:w="3"/><text x="11.1825%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="11.0932%" y="341" width="0.0804%" height="15" fill="rgb(217,110,2)" fg:x="138" fg:w="1"/><text x="11.3432%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="11.3344%" y="325" width="0.1608%" height="15" fill="rgb(229,77,54)" fg:x="141" fg:w="2"/><text x="11.5844%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="11.3344%" y="309" width="0.1608%" height="15" fill="rgb(218,53,16)" fg:x="141" fg:w="2"/><text x="11.5844%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="11.4148%" y="293" width="0.0804%" height="15" fill="rgb(215,38,13)" fg:x="142" fg:w="1"/><text x="11.6648%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="11.4148%" y="277" width="0.0804%" height="15" fill="rgb(235,42,18)" fg:x="142" fg:w="1"/><text x="11.6648%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="11.4148%" y="261" width="0.0804%" height="15" fill="rgb(219,66,54)" fg:x="142" fg:w="1"/><text x="11.6648%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="11.4148%" y="245" width="0.0804%" height="15" fill="rgb(222,205,4)" fg:x="142" fg:w="1"/><text x="11.6648%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="11.4952%" y="325" width="0.0804%" height="15" fill="rgb(227,213,46)" fg:x="143" fg:w="1"/><text x="11.7452%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.7363%" y="309" width="0.0804%" height="15" fill="rgb(250,145,42)" fg:x="146" fg:w="1"/><text x="11.9863%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.8167%" y="293" width="0.1608%" height="15" fill="rgb(219,15,2)" fg:x="147" fg:w="2"/><text x="12.0667%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (41 samples, 3.30%)</title><rect x="11.8167%" y="309" width="3.2958%" height="15" fill="rgb(231,181,52)" fg:x="147" fg:w="41"/><text x="12.0667%" y="319.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (39 samples, 3.14%)</title><rect x="11.9775%" y="293" width="3.1350%" height="15" fill="rgb(235,1,42)" fg:x="149" fg:w="39"/><text x="12.2275%" y="303.50">cor..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.9518%" y="277" width="0.1608%" height="15" fill="rgb(249,88,27)" fg:x="186" fg:w="2"/><text x="15.2018%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="15.1125%" y="309" width="0.0804%" height="15" fill="rgb(235,145,16)" fg:x="188" fg:w="1"/><text x="15.3625%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="15.2733%" y="293" width="0.0804%" height="15" fill="rgb(237,114,19)" fg:x="190" fg:w="1"/><text x="15.5233%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="15.2733%" y="277" width="0.0804%" height="15" fill="rgb(238,51,50)" fg:x="190" fg:w="1"/><text x="15.5233%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2733%" y="261" width="0.0804%" height="15" fill="rgb(205,194,25)" fg:x="190" fg:w="1"/><text x="15.5233%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="15.1929%" y="309" width="0.4019%" height="15" fill="rgb(215,203,17)" fg:x="189" fg:w="5"/><text x="15.4429%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="15.3537%" y="293" width="0.2412%" height="15" fill="rgb(233,112,49)" fg:x="191" fg:w="3"/><text x="15.6037%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="15.5145%" y="277" width="0.0804%" height="15" fill="rgb(241,130,26)" fg:x="193" fg:w="1"/><text x="15.7645%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="15.5949%" y="309" width="0.0804%" height="15" fill="rgb(252,223,19)" fg:x="194" fg:w="1"/><text x="15.8449%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="15.6752%" y="309" width="0.1608%" height="15" fill="rgb(211,95,25)" fg:x="195" fg:w="2"/><text x="15.9252%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="15.6752%" y="293" width="0.1608%" height="15" fill="rgb(251,182,27)" fg:x="195" fg:w="2"/><text x="15.9252%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="15.7556%" y="277" width="0.0804%" height="15" fill="rgb(238,24,4)" fg:x="196" fg:w="1"/><text x="16.0056%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="15.7556%" y="261" width="0.0804%" height="15" fill="rgb(224,220,25)" fg:x="196" fg:w="1"/><text x="16.0056%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="15.9968%" y="277" width="0.2412%" height="15" fill="rgb(239,133,26)" fg:x="199" fg:w="3"/><text x="16.2468%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="16.0772%" y="261" width="0.1608%" height="15" fill="rgb(211,94,48)" fg:x="200" fg:w="2"/><text x="16.3272%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.0772%" y="245" width="0.1608%" height="15" fill="rgb(239,87,6)" fg:x="200" fg:w="2"/><text x="16.3272%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="16.2379%" y="261" width="0.0804%" height="15" fill="rgb(227,62,0)" fg:x="202" fg:w="1"/><text x="16.4879%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="16.2379%" y="245" width="0.0804%" height="15" fill="rgb(211,226,4)" fg:x="202" fg:w="1"/><text x="16.4879%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.6399%" y="245" width="0.0804%" height="15" fill="rgb(253,38,52)" fg:x="207" fg:w="1"/><text x="16.8899%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="16.7203%" y="245" width="0.1608%" height="15" fill="rgb(229,126,40)" fg:x="208" fg:w="2"/><text x="16.9703%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="16.7203%" y="229" width="0.1608%" height="15" fill="rgb(229,165,44)" fg:x="208" fg:w="2"/><text x="16.9703%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="16.7203%" y="213" width="0.1608%" height="15" fill="rgb(247,95,47)" fg:x="208" fg:w="2"/><text x="16.9703%" y="223.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="16.7203%" y="197" width="0.1608%" height="15" fill="rgb(216,140,30)" fg:x="208" fg:w="2"/><text x="16.9703%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="16.8810%" y="245" width="0.0804%" height="15" fill="rgb(246,214,8)" fg:x="210" fg:w="1"/><text x="17.1310%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="16.9614%" y="245" width="0.1608%" height="15" fill="rgb(227,224,15)" fg:x="211" fg:w="2"/><text x="17.2114%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="16.9614%" y="229" width="0.1608%" height="15" fill="rgb(233,175,4)" fg:x="211" fg:w="2"/><text x="17.2114%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="17.0418%" y="213" width="0.0804%" height="15" fill="rgb(221,66,45)" fg:x="212" fg:w="1"/><text x="17.2918%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="17.1222%" y="245" width="0.0804%" height="15" fill="rgb(221,178,18)" fg:x="213" fg:w="1"/><text x="17.3722%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="17.1222%" y="229" width="0.0804%" height="15" fill="rgb(213,81,29)" fg:x="213" fg:w="1"/><text x="17.3722%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="17.1222%" y="213" width="0.0804%" height="15" fill="rgb(220,89,49)" fg:x="213" fg:w="1"/><text x="17.3722%" y="223.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="17.2026%" y="213" width="0.2412%" height="15" fill="rgb(227,60,33)" fg:x="214" fg:w="3"/><text x="17.4526%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (122 samples, 9.81%)</title><rect x="17.2026%" y="245" width="9.8071%" height="15" fill="rgb(205,113,12)" fg:x="214" fg:w="122"/><text x="17.4526%" y="255.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (122 samples, 9.81%)</title><rect x="17.2026%" y="229" width="9.8071%" height="15" fill="rgb(211,32,1)" fg:x="214" fg:w="122"/><text x="17.4526%" y="239.50">regex_automata..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (119 samples, 9.57%)</title><rect x="17.4437%" y="213" width="9.5659%" height="15" fill="rgb(246,2,12)" fg:x="217" fg:w="119"/><text x="17.6937%" y="223.50">alloc::vec::Ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="27.0096%" y="245" width="0.1608%" height="15" fill="rgb(243,37,27)" fg:x="336" fg:w="2"/><text x="27.2596%" y="255.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="27.1704%" y="245" width="0.0804%" height="15" fill="rgb(248,211,31)" fg:x="338" fg:w="1"/><text x="27.4204%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 11.58%)</title><rect x="15.8360%" y="293" width="11.5756%" height="15" fill="rgb(242,146,47)" fg:x="197" fg:w="144"/><text x="16.0860%" y="303.50">&lt;core::iter::adap..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (139 samples, 11.17%)</title><rect x="16.2379%" y="277" width="11.1736%" height="15" fill="rgb(206,70,20)" fg:x="202" fg:w="139"/><text x="16.4879%" y="287.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (138 samples, 11.09%)</title><rect x="16.3183%" y="261" width="11.0932%" height="15" fill="rgb(215,10,51)" fg:x="203" fg:w="138"/><text x="16.5683%" y="271.50">regex_automata::..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="27.2508%" y="245" width="0.1608%" height="15" fill="rgb(243,178,53)" fg:x="339" fg:w="2"/><text x="27.5008%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.3312%" y="229" width="0.0804%" height="15" fill="rgb(233,221,20)" fg:x="340" fg:w="1"/><text x="27.5812%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.3312%" y="213" width="0.0804%" height="15" fill="rgb(218,95,35)" fg:x="340" fg:w="1"/><text x="27.5812%" y="223.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="27.3312%" y="197" width="0.0804%" height="15" fill="rgb(229,13,5)" fg:x="340" fg:w="1"/><text x="27.5812%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.4116%" y="277" width="0.0804%" height="15" fill="rgb(252,164,30)" fg:x="341" fg:w="1"/><text x="27.6616%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="27.4920%" y="277" width="0.0804%" height="15" fill="rgb(232,68,36)" fg:x="342" fg:w="1"/><text x="27.7420%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="27.5723%" y="277" width="0.4823%" height="15" fill="rgb(219,59,54)" fg:x="343" fg:w="6"/><text x="27.8223%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.9743%" y="261" width="0.0804%" height="15" fill="rgb(250,92,33)" fg:x="348" fg:w="1"/><text x="28.2243%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.9743%" y="245" width="0.0804%" height="15" fill="rgb(229,162,54)" fg:x="348" fg:w="1"/><text x="28.2243%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="28.0547%" y="277" width="0.4823%" height="15" fill="rgb(244,114,52)" fg:x="349" fg:w="6"/><text x="28.3047%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.4566%" y="261" width="0.0804%" height="15" fill="rgb(212,211,43)" fg:x="354" fg:w="1"/><text x="28.7066%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.21%)</title><rect x="27.4116%" y="293" width="1.2058%" height="15" fill="rgb(226,147,8)" fg:x="341" fg:w="15"/><text x="27.6616%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="28.5370%" y="277" width="0.0804%" height="15" fill="rgb(226,23,13)" fg:x="355" fg:w="1"/><text x="28.7870%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="28.6174%" y="277" width="0.1608%" height="15" fill="rgb(240,63,4)" fg:x="356" fg:w="2"/><text x="28.8674%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.6977%" y="261" width="0.0804%" height="15" fill="rgb(221,1,32)" fg:x="357" fg:w="1"/><text x="28.9477%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (162 samples, 13.02%)</title><rect x="15.8360%" y="309" width="13.0225%" height="15" fill="rgb(242,117,10)" fg:x="197" fg:w="162"/><text x="16.0860%" y="319.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="28.6174%" y="293" width="0.2412%" height="15" fill="rgb(249,172,44)" fg:x="356" fg:w="3"/><text x="28.8674%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="28.7781%" y="277" width="0.0804%" height="15" fill="rgb(244,46,45)" fg:x="358" fg:w="1"/><text x="29.0281%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (216 samples, 17.36%)</title><rect x="11.5756%" y="325" width="17.3633%" height="15" fill="rgb(206,43,17)" fg:x="144" fg:w="216"/><text x="11.8256%" y="335.50">regex_automata::meta::strat..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="28.8585%" y="309" width="0.0804%" height="15" fill="rgb(239,218,39)" fg:x="359" fg:w="1"/><text x="29.1085%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="28.9389%" y="277" width="0.0804%" height="15" fill="rgb(208,169,54)" fg:x="360" fg:w="1"/><text x="29.1889%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="28.9389%" y="261" width="0.0804%" height="15" fill="rgb(247,25,42)" fg:x="360" fg:w="1"/><text x="29.1889%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="29.0193%" y="277" width="0.0804%" height="15" fill="rgb(226,23,31)" fg:x="361" fg:w="1"/><text x="29.2693%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="28.9389%" y="325" width="0.6431%" height="15" fill="rgb(247,16,28)" fg:x="360" fg:w="8"/><text x="29.1889%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="28.9389%" y="309" width="0.6431%" height="15" fill="rgb(231,147,38)" fg:x="360" fg:w="8"/><text x="29.1889%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="28.9389%" y="293" width="0.6431%" height="15" fill="rgb(253,81,48)" fg:x="360" fg:w="8"/><text x="29.1889%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (6 samples, 0.48%)</title><rect x="29.0997%" y="277" width="0.4823%" height="15" fill="rgb(249,222,43)" fg:x="362" fg:w="6"/><text x="29.3497%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="29.0997%" y="261" width="0.4823%" height="15" fill="rgb(221,3,27)" fg:x="362" fg:w="6"/><text x="29.3497%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="29.0997%" y="245" width="0.4823%" height="15" fill="rgb(228,180,5)" fg:x="362" fg:w="6"/><text x="29.3497%" y="255.50"></text></g><g><title>__libc_malloc (6 samples, 0.48%)</title><rect x="29.0997%" y="229" width="0.4823%" height="15" fill="rgb(227,131,42)" fg:x="362" fg:w="6"/><text x="29.3497%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="29.6624%" y="277" width="0.3215%" height="15" fill="rgb(212,3,39)" fg:x="369" fg:w="4"/><text x="29.9124%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.8232%" y="261" width="0.1608%" height="15" fill="rgb(226,45,5)" fg:x="371" fg:w="2"/><text x="30.0732%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.8232%" y="245" width="0.1608%" height="15" fill="rgb(215,167,45)" fg:x="371" fg:w="2"/><text x="30.0732%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="29.8232%" y="229" width="0.1608%" height="15" fill="rgb(250,218,53)" fg:x="371" fg:w="2"/><text x="30.0732%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.48%)</title><rect x="29.5820%" y="293" width="0.4823%" height="15" fill="rgb(207,140,0)" fg:x="368" fg:w="6"/><text x="29.8320%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="29.9839%" y="277" width="0.0804%" height="15" fill="rgb(238,133,51)" fg:x="373" fg:w="1"/><text x="30.2339%" y="287.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="29.9839%" y="261" width="0.0804%" height="15" fill="rgb(218,203,53)" fg:x="373" fg:w="1"/><text x="30.2339%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9839%" y="245" width="0.0804%" height="15" fill="rgb(226,184,25)" fg:x="373" fg:w="1"/><text x="30.2339%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="30.0643%" y="293" width="0.1608%" height="15" fill="rgb(231,121,21)" fg:x="374" fg:w="2"/><text x="30.3143%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (238 samples, 19.13%)</title><rect x="11.1736%" y="373" width="19.1318%" height="15" fill="rgb(251,14,34)" fg:x="139" fg:w="238"/><text x="11.4236%" y="383.50">regex::regex::string::Regex::n..</text></g><g><title>regex::builders::Builder::build_one_string (238 samples, 19.13%)</title><rect x="11.1736%" y="357" width="19.1318%" height="15" fill="rgb(249,193,11)" fg:x="139" fg:w="238"/><text x="11.4236%" y="367.50">regex::builders::Builder::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (237 samples, 19.05%)</title><rect x="11.2540%" y="341" width="19.0514%" height="15" fill="rgb(220,172,37)" fg:x="140" fg:w="237"/><text x="11.5040%" y="351.50">regex_automata::meta::regex::B..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.72%)</title><rect x="29.5820%" y="325" width="0.7235%" height="15" fill="rgb(231,229,43)" fg:x="368" fg:w="9"/><text x="29.8320%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.72%)</title><rect x="29.5820%" y="309" width="0.7235%" height="15" fill="rgb(250,161,5)" fg:x="368" fg:w="9"/><text x="29.8320%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.2251%" y="293" width="0.0804%" height="15" fill="rgb(218,225,18)" fg:x="376" fg:w="1"/><text x="30.4751%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.2251%" y="277" width="0.0804%" height="15" fill="rgb(245,45,42)" fg:x="376" fg:w="1"/><text x="30.4751%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.2251%" y="261" width="0.0804%" height="15" fill="rgb(211,115,1)" fg:x="376" fg:w="1"/><text x="30.4751%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.7074%" y="293" width="0.0804%" height="15" fill="rgb(248,133,52)" fg:x="382" fg:w="1"/><text x="30.9574%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.7878%" y="293" width="0.0804%" height="15" fill="rgb(238,100,21)" fg:x="383" fg:w="1"/><text x="31.0378%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.7878%" y="277" width="0.0804%" height="15" fill="rgb(247,144,11)" fg:x="383" fg:w="1"/><text x="31.0378%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7878%" y="261" width="0.0804%" height="15" fill="rgb(206,164,16)" fg:x="383" fg:w="1"/><text x="31.0378%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="30.5466%" y="309" width="0.4019%" height="15" fill="rgb(222,34,3)" fg:x="380" fg:w="5"/><text x="30.7966%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.8682%" y="293" width="0.0804%" height="15" fill="rgb(248,82,4)" fg:x="384" fg:w="1"/><text x="31.1182%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.8682%" y="277" width="0.0804%" height="15" fill="rgb(228,81,46)" fg:x="384" fg:w="1"/><text x="31.1182%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="30.8682%" y="261" width="0.0804%" height="15" fill="rgb(227,67,47)" fg:x="384" fg:w="1"/><text x="31.1182%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8682%" y="245" width="0.0804%" height="15" fill="rgb(215,93,53)" fg:x="384" fg:w="1"/><text x="31.1182%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="30.5466%" y="325" width="0.4823%" height="15" fill="rgb(248,194,39)" fg:x="380" fg:w="6"/><text x="30.7966%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="30.9486%" y="309" width="0.0804%" height="15" fill="rgb(215,5,19)" fg:x="385" fg:w="1"/><text x="31.1986%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.9486%" y="293" width="0.0804%" height="15" fill="rgb(226,215,51)" fg:x="385" fg:w="1"/><text x="31.1986%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.9486%" y="277" width="0.0804%" height="15" fill="rgb(225,56,26)" fg:x="385" fg:w="1"/><text x="31.1986%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9486%" y="261" width="0.0804%" height="15" fill="rgb(222,75,29)" fg:x="385" fg:w="1"/><text x="31.1986%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (264 samples, 21.22%)</title><rect x="9.8875%" y="389" width="21.2219%" height="15" fill="rgb(236,139,6)" fg:x="123" fg:w="264"/><text x="10.1375%" y="399.50">indefinite::helper::Helper::get_f..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="30.3055%" y="373" width="0.8039%" height="15" fill="rgb(223,137,36)" fg:x="377" fg:w="10"/><text x="30.5555%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="30.4662%" y="357" width="0.6431%" height="15" fill="rgb(226,99,2)" fg:x="379" fg:w="8"/><text x="30.7162%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="30.4662%" y="341" width="0.6431%" height="15" fill="rgb(206,133,23)" fg:x="379" fg:w="8"/><text x="30.7162%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="31.0289%" y="325" width="0.0804%" height="15" fill="rgb(243,173,15)" fg:x="386" fg:w="1"/><text x="31.2789%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="31.0289%" y="309" width="0.0804%" height="15" fill="rgb(228,69,28)" fg:x="386" fg:w="1"/><text x="31.2789%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.0289%" y="293" width="0.0804%" height="15" fill="rgb(212,51,22)" fg:x="386" fg:w="1"/><text x="31.2789%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.0289%" y="277" width="0.0804%" height="15" fill="rgb(227,113,0)" fg:x="386" fg:w="1"/><text x="31.2789%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0289%" y="261" width="0.0804%" height="15" fill="rgb(252,84,27)" fg:x="386" fg:w="1"/><text x="31.2789%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.1093%" y="373" width="0.0804%" height="15" fill="rgb(223,145,39)" fg:x="387" fg:w="1"/><text x="31.3593%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="31.1897%" y="325" width="0.0804%" height="15" fill="rgb(239,219,30)" fg:x="388" fg:w="1"/><text x="31.4397%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.1897%" y="309" width="0.0804%" height="15" fill="rgb(224,196,39)" fg:x="388" fg:w="1"/><text x="31.4397%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="31.1897%" y="341" width="0.1608%" height="15" fill="rgb(205,35,43)" fg:x="388" fg:w="2"/><text x="31.4397%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="31.2701%" y="325" width="0.0804%" height="15" fill="rgb(228,201,21)" fg:x="389" fg:w="1"/><text x="31.5201%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.2701%" y="309" width="0.0804%" height="15" fill="rgb(237,118,16)" fg:x="389" fg:w="1"/><text x="31.5201%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.2701%" y="293" width="0.0804%" height="15" fill="rgb(241,17,19)" fg:x="389" fg:w="1"/><text x="31.5201%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="31.1897%" y="373" width="0.2412%" height="15" fill="rgb(214,10,25)" fg:x="388" fg:w="3"/><text x="31.4397%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="31.1897%" y="357" width="0.2412%" height="15" fill="rgb(238,37,29)" fg:x="388" fg:w="3"/><text x="31.4397%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="31.3505%" y="341" width="0.0804%" height="15" fill="rgb(253,83,25)" fg:x="390" fg:w="1"/><text x="31.6005%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="31.3505%" y="325" width="0.0804%" height="15" fill="rgb(234,192,12)" fg:x="390" fg:w="1"/><text x="31.6005%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.3505%" y="309" width="0.0804%" height="15" fill="rgb(241,216,45)" fg:x="390" fg:w="1"/><text x="31.6005%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="31.5113%" y="325" width="0.1608%" height="15" fill="rgb(242,22,33)" fg:x="392" fg:w="2"/><text x="31.7613%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="31.5113%" y="309" width="0.1608%" height="15" fill="rgb(231,105,49)" fg:x="392" fg:w="2"/><text x="31.7613%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.6720%" y="309" width="0.0804%" height="15" fill="rgb(218,204,15)" fg:x="394" fg:w="1"/><text x="31.9220%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="31.7524%" y="309" width="0.0804%" height="15" fill="rgb(235,138,41)" fg:x="395" fg:w="1"/><text x="32.0024%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (6 samples, 0.48%)</title><rect x="31.4309%" y="357" width="0.4823%" height="15" fill="rgb(246,0,9)" fg:x="391" fg:w="6"/><text x="31.6809%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.48%)</title><rect x="31.4309%" y="341" width="0.4823%" height="15" fill="rgb(210,74,4)" fg:x="391" fg:w="6"/><text x="31.6809%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="31.6720%" y="325" width="0.2412%" height="15" fill="rgb(250,60,41)" fg:x="394" fg:w="3"/><text x="31.9220%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="31.8328%" y="309" width="0.0804%" height="15" fill="rgb(220,115,12)" fg:x="396" fg:w="1"/><text x="32.0828%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="31.9936%" y="309" width="0.0804%" height="15" fill="rgb(237,100,13)" fg:x="398" fg:w="1"/><text x="32.2436%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.0740%" y="293" width="0.0804%" height="15" fill="rgb(213,55,26)" fg:x="399" fg:w="1"/><text x="32.3240%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.05%)</title><rect x="32.0740%" y="309" width="1.0450%" height="15" fill="rgb(216,17,4)" fg:x="399" fg:w="13"/><text x="32.3240%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.96%)</title><rect x="32.1543%" y="293" width="0.9646%" height="15" fill="rgb(220,153,47)" fg:x="400" fg:w="12"/><text x="32.4043%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="32.7974%" y="277" width="0.3215%" height="15" fill="rgb(215,131,9)" fg:x="408" fg:w="4"/><text x="33.0474%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (22 samples, 1.77%)</title><rect x="31.4309%" y="373" width="1.7685%" height="15" fill="rgb(233,46,42)" fg:x="391" fg:w="22"/><text x="31.6809%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.29%)</title><rect x="31.9132%" y="357" width="1.2862%" height="15" fill="rgb(226,86,7)" fg:x="397" fg:w="16"/><text x="32.1632%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.29%)</title><rect x="31.9132%" y="341" width="1.2862%" height="15" fill="rgb(239,226,21)" fg:x="397" fg:w="16"/><text x="32.1632%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.21%)</title><rect x="31.9936%" y="325" width="1.2058%" height="15" fill="rgb(244,137,22)" fg:x="398" fg:w="15"/><text x="32.2436%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="33.1190%" y="309" width="0.0804%" height="15" fill="rgb(211,139,35)" fg:x="412" fg:w="1"/><text x="33.3690%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.3601%" y="325" width="0.0804%" height="15" fill="rgb(214,62,50)" fg:x="415" fg:w="1"/><text x="33.6101%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.3601%" y="309" width="0.0804%" height="15" fill="rgb(212,113,44)" fg:x="415" fg:w="1"/><text x="33.6101%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.3601%" y="293" width="0.0804%" height="15" fill="rgb(226,150,43)" fg:x="415" fg:w="1"/><text x="33.6101%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.6817%" y="293" width="0.0804%" height="15" fill="rgb(250,71,37)" fg:x="419" fg:w="1"/><text x="33.9317%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="33.6817%" y="277" width="0.0804%" height="15" fill="rgb(219,76,19)" fg:x="419" fg:w="1"/><text x="33.9317%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.6817%" y="261" width="0.0804%" height="15" fill="rgb(250,39,11)" fg:x="419" fg:w="1"/><text x="33.9317%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.6817%" y="245" width="0.0804%" height="15" fill="rgb(230,64,31)" fg:x="419" fg:w="1"/><text x="33.9317%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.7621%" y="293" width="0.0804%" height="15" fill="rgb(208,222,23)" fg:x="420" fg:w="1"/><text x="34.0121%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (6 samples, 0.48%)</title><rect x="33.4405%" y="325" width="0.4823%" height="15" fill="rgb(227,125,18)" fg:x="416" fg:w="6"/><text x="33.6905%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="33.5209%" y="309" width="0.4019%" height="15" fill="rgb(234,210,9)" fg:x="417" fg:w="5"/><text x="33.7709%" y="319.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="33.8424%" y="293" width="0.0804%" height="15" fill="rgb(217,127,24)" fg:x="421" fg:w="1"/><text x="34.0924%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="33.9228%" y="325" width="0.0804%" height="15" fill="rgb(239,141,48)" fg:x="422" fg:w="1"/><text x="34.1728%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.9228%" y="309" width="0.0804%" height="15" fill="rgb(227,109,8)" fg:x="422" fg:w="1"/><text x="34.1728%" y="319.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="34.0032%" y="325" width="0.0804%" height="15" fill="rgb(235,184,23)" fg:x="423" fg:w="1"/><text x="34.2532%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.0032%" y="309" width="0.0804%" height="15" fill="rgb(227,226,48)" fg:x="423" fg:w="1"/><text x="34.2532%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.2444%" y="309" width="0.0804%" height="15" fill="rgb(206,150,11)" fg:x="426" fg:w="1"/><text x="34.4944%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.4051%" y="293" width="0.0804%" height="15" fill="rgb(254,2,33)" fg:x="428" fg:w="1"/><text x="34.6551%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (37 samples, 2.97%)</title><rect x="34.3248%" y="309" width="2.9743%" height="15" fill="rgb(243,160,20)" fg:x="427" fg:w="37"/><text x="34.5748%" y="319.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (35 samples, 2.81%)</title><rect x="34.4855%" y="293" width="2.8135%" height="15" fill="rgb(218,208,30)" fg:x="429" fg:w="35"/><text x="34.7355%" y="303.50">co..</text></g><g><title>__libc_free (6 samples, 0.48%)</title><rect x="36.8167%" y="277" width="0.4823%" height="15" fill="rgb(224,120,49)" fg:x="458" fg:w="6"/><text x="37.0667%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="37.2990%" y="309" width="0.0804%" height="15" fill="rgb(246,12,2)" fg:x="464" fg:w="1"/><text x="37.5490%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="37.6206%" y="293" width="0.5627%" height="15" fill="rgb(236,117,3)" fg:x="468" fg:w="7"/><text x="37.8706%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="38.1029%" y="277" width="0.0804%" height="15" fill="rgb(216,128,52)" fg:x="474" fg:w="1"/><text x="38.3529%" y="287.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="38.1029%" y="261" width="0.0804%" height="15" fill="rgb(246,145,19)" fg:x="474" fg:w="1"/><text x="38.3529%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="38.1029%" y="245" width="0.0804%" height="15" fill="rgb(222,11,46)" fg:x="474" fg:w="1"/><text x="38.3529%" y="255.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="38.1029%" y="229" width="0.0804%" height="15" fill="rgb(245,82,36)" fg:x="474" fg:w="1"/><text x="38.3529%" y="239.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="38.1029%" y="213" width="0.0804%" height="15" fill="rgb(250,73,51)" fg:x="474" fg:w="1"/><text x="38.3529%" y="223.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="38.1029%" y="197" width="0.0804%" height="15" fill="rgb(221,189,23)" fg:x="474" fg:w="1"/><text x="38.3529%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="38.1833%" y="293" width="0.0804%" height="15" fill="rgb(210,33,7)" fg:x="475" fg:w="1"/><text x="38.4333%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (13 samples, 1.05%)</title><rect x="37.3794%" y="309" width="1.0450%" height="15" fill="rgb(210,107,22)" fg:x="465" fg:w="13"/><text x="37.6294%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="38.2637%" y="293" width="0.1608%" height="15" fill="rgb(222,116,37)" fg:x="476" fg:w="2"/><text x="38.5137%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="38.2637%" y="277" width="0.1608%" height="15" fill="rgb(254,17,48)" fg:x="476" fg:w="2"/><text x="38.5137%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="38.7460%" y="277" width="0.0804%" height="15" fill="rgb(224,36,32)" fg:x="482" fg:w="1"/><text x="38.9960%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.7460%" y="261" width="0.0804%" height="15" fill="rgb(232,90,46)" fg:x="482" fg:w="1"/><text x="38.9960%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.7460%" y="245" width="0.0804%" height="15" fill="rgb(241,66,40)" fg:x="482" fg:w="1"/><text x="38.9960%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="38.8264%" y="277" width="0.2412%" height="15" fill="rgb(249,184,29)" fg:x="483" fg:w="3"/><text x="39.0764%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="38.8264%" y="261" width="0.2412%" height="15" fill="rgb(231,181,1)" fg:x="483" fg:w="3"/><text x="39.0764%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="38.8264%" y="245" width="0.2412%" height="15" fill="rgb(224,94,2)" fg:x="483" fg:w="3"/><text x="39.0764%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="38.8264%" y="229" width="0.2412%" height="15" fill="rgb(229,170,15)" fg:x="483" fg:w="3"/><text x="39.0764%" y="239.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="39.3891%" y="213" width="0.0804%" height="15" fill="rgb(240,127,35)" fg:x="490" fg:w="1"/><text x="39.6391%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.72%)</title><rect x="39.3891%" y="245" width="0.7235%" height="15" fill="rgb(248,196,34)" fg:x="490" fg:w="9"/><text x="39.6391%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.72%)</title><rect x="39.3891%" y="229" width="0.7235%" height="15" fill="rgb(236,137,7)" fg:x="490" fg:w="9"/><text x="39.6391%" y="239.50"></text></g><g><title>realloc (8 samples, 0.64%)</title><rect x="39.4695%" y="213" width="0.6431%" height="15" fill="rgb(235,127,16)" fg:x="491" fg:w="8"/><text x="39.7195%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (14 samples, 1.13%)</title><rect x="39.0675%" y="277" width="1.1254%" height="15" fill="rgb(250,192,54)" fg:x="486" fg:w="14"/><text x="39.3175%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (12 samples, 0.96%)</title><rect x="39.2283%" y="261" width="0.9646%" height="15" fill="rgb(218,98,20)" fg:x="488" fg:w="12"/><text x="39.4783%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.1125%" y="245" width="0.0804%" height="15" fill="rgb(230,176,47)" fg:x="499" fg:w="1"/><text x="40.3625%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.1125%" y="229" width="0.0804%" height="15" fill="rgb(244,2,33)" fg:x="499" fg:w="1"/><text x="40.3625%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.1125%" y="213" width="0.0804%" height="15" fill="rgb(231,100,17)" fg:x="499" fg:w="1"/><text x="40.3625%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="40.1929%" y="277" width="0.3215%" height="15" fill="rgb(245,23,12)" fg:x="500" fg:w="4"/><text x="40.4429%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="40.1929%" y="261" width="0.3215%" height="15" fill="rgb(249,55,22)" fg:x="500" fg:w="4"/><text x="40.4429%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="40.1929%" y="245" width="0.3215%" height="15" fill="rgb(207,134,9)" fg:x="500" fg:w="4"/><text x="40.4429%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.25%)</title><rect x="38.4244%" y="309" width="2.2508%" height="15" fill="rgb(218,134,0)" fg:x="478" fg:w="28"/><text x="38.6744%" y="319.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (28 samples, 2.25%)</title><rect x="38.4244%" y="293" width="2.2508%" height="15" fill="rgb(213,212,33)" fg:x="478" fg:w="28"/><text x="38.6744%" y="303.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="40.5145%" y="277" width="0.1608%" height="15" fill="rgb(252,106,18)" fg:x="504" fg:w="2"/><text x="40.7645%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.5949%" y="261" width="0.0804%" height="15" fill="rgb(208,126,42)" fg:x="505" fg:w="1"/><text x="40.8449%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="40.6752%" y="277" width="0.0804%" height="15" fill="rgb(246,175,29)" fg:x="506" fg:w="1"/><text x="40.9252%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7556%" y="213" width="0.0804%" height="15" fill="rgb(215,13,50)" fg:x="507" fg:w="1"/><text x="41.0056%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="40.7556%" y="261" width="0.1608%" height="15" fill="rgb(216,172,15)" fg:x="507" fg:w="2"/><text x="41.0056%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="40.7556%" y="245" width="0.1608%" height="15" fill="rgb(212,103,13)" fg:x="507" fg:w="2"/><text x="41.0056%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.7556%" y="229" width="0.1608%" height="15" fill="rgb(231,171,36)" fg:x="507" fg:w="2"/><text x="41.0056%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="40.8360%" y="213" width="0.0804%" height="15" fill="rgb(250,123,20)" fg:x="508" fg:w="1"/><text x="41.0860%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="40.8360%" y="197" width="0.0804%" height="15" fill="rgb(212,53,50)" fg:x="508" fg:w="1"/><text x="41.0860%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="40.9968%" y="245" width="0.0804%" height="15" fill="rgb(243,54,12)" fg:x="510" fg:w="1"/><text x="41.2468%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="41.0772%" y="229" width="0.0804%" height="15" fill="rgb(234,101,34)" fg:x="511" fg:w="1"/><text x="41.3272%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="41.1576%" y="229" width="0.0804%" height="15" fill="rgb(254,67,22)" fg:x="512" fg:w="1"/><text x="41.4076%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="42.4437%" y="197" width="0.4823%" height="15" fill="rgb(250,35,47)" fg:x="528" fg:w="6"/><text x="42.6937%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.48%)</title><rect x="42.9260%" y="197" width="0.4823%" height="15" fill="rgb(226,126,38)" fg:x="534" fg:w="6"/><text x="43.1760%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="43.0868%" y="181" width="0.3215%" height="15" fill="rgb(216,138,53)" fg:x="536" fg:w="4"/><text x="43.3368%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="43.0868%" y="165" width="0.3215%" height="15" fill="rgb(246,199,43)" fg:x="536" fg:w="4"/><text x="43.3368%" y="175.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="43.0868%" y="149" width="0.3215%" height="15" fill="rgb(232,125,11)" fg:x="536" fg:w="4"/><text x="43.3368%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="43.4084%" y="197" width="0.0804%" height="15" fill="rgb(218,219,45)" fg:x="540" fg:w="1"/><text x="43.6584%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.4084%" y="181" width="0.0804%" height="15" fill="rgb(216,102,54)" fg:x="540" fg:w="1"/><text x="43.6584%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.4084%" y="165" width="0.0804%" height="15" fill="rgb(250,228,7)" fg:x="540" fg:w="1"/><text x="43.6584%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.4084%" y="149" width="0.0804%" height="15" fill="rgb(226,125,25)" fg:x="540" fg:w="1"/><text x="43.6584%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="43.9711%" y="165" width="0.0804%" height="15" fill="rgb(224,165,27)" fg:x="547" fg:w="1"/><text x="44.2211%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="43.9711%" y="149" width="0.0804%" height="15" fill="rgb(233,86,3)" fg:x="547" fg:w="1"/><text x="44.2211%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="43.9711%" y="133" width="0.0804%" height="15" fill="rgb(228,116,20)" fg:x="547" fg:w="1"/><text x="44.2211%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (11 samples, 0.88%)</title><rect x="43.4887%" y="197" width="0.8842%" height="15" fill="rgb(209,192,17)" fg:x="541" fg:w="11"/><text x="43.7387%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.80%)</title><rect x="43.5691%" y="181" width="0.8039%" height="15" fill="rgb(224,88,34)" fg:x="542" fg:w="10"/><text x="43.8191%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="44.0514%" y="165" width="0.3215%" height="15" fill="rgb(233,38,6)" fg:x="548" fg:w="4"/><text x="44.3014%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.2926%" y="149" width="0.0804%" height="15" fill="rgb(212,59,30)" fg:x="551" fg:w="1"/><text x="44.5426%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="44.3730%" y="197" width="0.0804%" height="15" fill="rgb(213,80,3)" fg:x="552" fg:w="1"/><text x="44.6230%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="44.3730%" y="181" width="0.0804%" height="15" fill="rgb(251,178,7)" fg:x="552" fg:w="1"/><text x="44.6230%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.4534%" y="181" width="0.0804%" height="15" fill="rgb(213,154,26)" fg:x="553" fg:w="1"/><text x="44.7034%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.4534%" y="165" width="0.0804%" height="15" fill="rgb(238,165,49)" fg:x="553" fg:w="1"/><text x="44.7034%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.4534%" y="149" width="0.0804%" height="15" fill="rgb(248,91,46)" fg:x="553" fg:w="1"/><text x="44.7034%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (142 samples, 11.41%)</title><rect x="44.4534%" y="197" width="11.4148%" height="15" fill="rgb(244,21,52)" fg:x="553" fg:w="142"/><text x="44.7034%" y="207.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (141 samples, 11.33%)</title><rect x="44.5338%" y="181" width="11.3344%" height="15" fill="rgb(247,122,20)" fg:x="554" fg:w="141"/><text x="44.7838%" y="191.50">regex_automata::n..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (140 samples, 11.25%)</title><rect x="44.6141%" y="165" width="11.2540%" height="15" fill="rgb(218,27,9)" fg:x="555" fg:w="140"/><text x="44.8641%" y="175.50">alloc::vec::Vec&lt;T..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="55.8682%" y="197" width="0.1608%" height="15" fill="rgb(246,7,6)" fg:x="695" fg:w="2"/><text x="56.1182%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="56.0289%" y="197" width="0.1608%" height="15" fill="rgb(227,135,54)" fg:x="697" fg:w="2"/><text x="56.2789%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (206 samples, 16.56%)</title><rect x="40.6752%" y="293" width="16.5595%" height="15" fill="rgb(247,14,11)" fg:x="506" fg:w="206"/><text x="40.9252%" y="303.50">&lt;core::iter::adapters::map..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (205 samples, 16.48%)</title><rect x="40.7556%" y="277" width="16.4791%" height="15" fill="rgb(206,149,34)" fg:x="507" fg:w="205"/><text x="41.0056%" y="287.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (203 samples, 16.32%)</title><rect x="40.9164%" y="261" width="16.3183%" height="15" fill="rgb(227,228,4)" fg:x="509" fg:w="203"/><text x="41.1664%" y="271.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (201 samples, 16.16%)</title><rect x="41.0772%" y="245" width="16.1576%" height="15" fill="rgb(238,218,28)" fg:x="511" fg:w="201"/><text x="41.3272%" y="255.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (199 samples, 16.00%)</title><rect x="41.2379%" y="229" width="15.9968%" height="15" fill="rgb(252,86,40)" fg:x="513" fg:w="199"/><text x="41.4879%" y="239.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (198 samples, 15.92%)</title><rect x="41.3183%" y="213" width="15.9164%" height="15" fill="rgb(251,225,11)" fg:x="514" fg:w="198"/><text x="41.5683%" y="223.50">regex_automata::nfa::tho..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (13 samples, 1.05%)</title><rect x="56.1897%" y="197" width="1.0450%" height="15" fill="rgb(206,46,49)" fg:x="699" fg:w="13"/><text x="56.4397%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.64%)</title><rect x="56.5916%" y="181" width="0.6431%" height="15" fill="rgb(245,128,24)" fg:x="704" fg:w="8"/><text x="56.8416%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.64%)</title><rect x="56.5916%" y="165" width="0.6431%" height="15" fill="rgb(219,177,34)" fg:x="704" fg:w="8"/><text x="56.8416%" y="175.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="56.9936%" y="149" width="0.2412%" height="15" fill="rgb(218,60,48)" fg:x="709" fg:w="3"/><text x="57.2436%" y="159.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="57.3955%" y="277" width="0.0804%" height="15" fill="rgb(221,11,5)" fg:x="714" fg:w="1"/><text x="57.6455%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.4759%" y="277" width="0.0804%" height="15" fill="rgb(220,148,13)" fg:x="715" fg:w="1"/><text x="57.7259%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (17 samples, 1.37%)</title><rect x="57.5563%" y="277" width="1.3666%" height="15" fill="rgb(210,16,3)" fg:x="716" fg:w="17"/><text x="57.8063%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="58.6013%" y="261" width="0.3215%" height="15" fill="rgb(236,80,2)" fg:x="729" fg:w="4"/><text x="58.8513%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="58.6013%" y="245" width="0.3215%" height="15" fill="rgb(239,129,19)" fg:x="729" fg:w="4"/><text x="58.8513%" y="255.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="58.6817%" y="229" width="0.2412%" height="15" fill="rgb(220,106,35)" fg:x="730" fg:w="3"/><text x="58.9317%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="58.9228%" y="277" width="0.5627%" height="15" fill="rgb(252,139,45)" fg:x="733" fg:w="7"/><text x="59.1728%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.4051%" y="261" width="0.0804%" height="15" fill="rgb(229,8,36)" fg:x="739" fg:w="1"/><text x="59.6551%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.4051%" y="245" width="0.0804%" height="15" fill="rgb(230,126,33)" fg:x="739" fg:w="1"/><text x="59.6551%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.4051%" y="229" width="0.0804%" height="15" fill="rgb(239,140,21)" fg:x="739" fg:w="1"/><text x="59.6551%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (29 samples, 2.33%)</title><rect x="57.2347%" y="293" width="2.3312%" height="15" fill="rgb(254,104,9)" fg:x="712" fg:w="29"/><text x="57.4847%" y="303.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="59.4855%" y="277" width="0.0804%" height="15" fill="rgb(239,52,14)" fg:x="740" fg:w="1"/><text x="59.7355%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (318 samples, 25.56%)</title><rect x="34.0836%" y="325" width="25.5627%" height="15" fill="rgb(208,227,44)" fg:x="424" fg:w="318"/><text x="34.3336%" y="335.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (236 samples, 18.97%)</title><rect x="40.6752%" y="309" width="18.9711%" height="15" fill="rgb(246,18,19)" fg:x="506" fg:w="236"/><text x="40.9252%" y="319.50">regex_automata::nfa::thompson:..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="59.5659%" y="293" width="0.0804%" height="15" fill="rgb(235,228,25)" fg:x="741" fg:w="1"/><text x="59.8159%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="59.6463%" y="277" width="0.0804%" height="15" fill="rgb(240,156,20)" fg:x="742" fg:w="1"/><text x="59.8963%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="59.6463%" y="261" width="0.0804%" height="15" fill="rgb(224,8,20)" fg:x="742" fg:w="1"/><text x="59.8963%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.7267%" y="261" width="0.0804%" height="15" fill="rgb(214,12,52)" fg:x="743" fg:w="1"/><text x="59.9767%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.7267%" y="245" width="0.0804%" height="15" fill="rgb(211,220,47)" fg:x="743" fg:w="1"/><text x="59.9767%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7267%" y="229" width="0.0804%" height="15" fill="rgb(250,173,5)" fg:x="743" fg:w="1"/><text x="59.9767%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="59.6463%" y="293" width="0.3215%" height="15" fill="rgb(250,125,52)" fg:x="742" fg:w="4"/><text x="59.8963%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="59.7267%" y="277" width="0.2412%" height="15" fill="rgb(209,133,18)" fg:x="743" fg:w="3"/><text x="59.9767%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (2 samples, 0.16%)</title><rect x="59.8071%" y="261" width="0.1608%" height="15" fill="rgb(216,173,22)" fg:x="744" fg:w="2"/><text x="60.0571%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="59.9678%" y="293" width="0.0804%" height="15" fill="rgb(205,3,22)" fg:x="746" fg:w="1"/><text x="60.2178%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="60.0482%" y="293" width="0.0804%" height="15" fill="rgb(248,22,20)" fg:x="747" fg:w="1"/><text x="60.2982%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="60.1286%" y="293" width="0.0804%" height="15" fill="rgb(233,6,29)" fg:x="748" fg:w="1"/><text x="60.3786%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="60.1286%" y="277" width="0.0804%" height="15" fill="rgb(240,22,54)" fg:x="748" fg:w="1"/><text x="60.3786%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="60.2090%" y="277" width="0.0804%" height="15" fill="rgb(231,133,32)" fg:x="749" fg:w="1"/><text x="60.4590%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="59.6463%" y="325" width="0.7235%" height="15" fill="rgb(248,193,4)" fg:x="742" fg:w="9"/><text x="59.8963%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="59.6463%" y="309" width="0.7235%" height="15" fill="rgb(211,178,46)" fg:x="742" fg:w="9"/><text x="59.8963%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="60.2090%" y="293" width="0.1608%" height="15" fill="rgb(224,5,42)" fg:x="749" fg:w="2"/><text x="60.4590%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.2894%" y="277" width="0.0804%" height="15" fill="rgb(239,176,25)" fg:x="750" fg:w="1"/><text x="60.5394%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.2894%" y="261" width="0.0804%" height="15" fill="rgb(245,187,50)" fg:x="750" fg:w="1"/><text x="60.5394%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="60.3698%" y="277" width="0.1608%" height="15" fill="rgb(248,24,15)" fg:x="751" fg:w="2"/><text x="60.6198%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="60.3698%" y="293" width="0.3215%" height="15" fill="rgb(205,166,13)" fg:x="751" fg:w="4"/><text x="60.6198%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="60.5305%" y="277" width="0.1608%" height="15" fill="rgb(208,114,23)" fg:x="753" fg:w="2"/><text x="60.7805%" y="287.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="60.5305%" y="261" width="0.1608%" height="15" fill="rgb(239,127,18)" fg:x="753" fg:w="2"/><text x="60.7805%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="60.6109%" y="245" width="0.0804%" height="15" fill="rgb(219,154,28)" fg:x="754" fg:w="1"/><text x="60.8609%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.7717%" y="277" width="0.0804%" height="15" fill="rgb(225,157,23)" fg:x="756" fg:w="1"/><text x="61.0217%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.7717%" y="261" width="0.0804%" height="15" fill="rgb(219,8,6)" fg:x="756" fg:w="1"/><text x="61.0217%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7717%" y="245" width="0.0804%" height="15" fill="rgb(212,47,6)" fg:x="756" fg:w="1"/><text x="61.0217%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="60.8521%" y="277" width="0.1608%" height="15" fill="rgb(224,190,4)" fg:x="757" fg:w="2"/><text x="61.1021%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.9325%" y="261" width="0.0804%" height="15" fill="rgb(239,183,29)" fg:x="758" fg:w="1"/><text x="61.1825%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.9325%" y="245" width="0.0804%" height="15" fill="rgb(213,57,7)" fg:x="758" fg:w="1"/><text x="61.1825%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9325%" y="229" width="0.0804%" height="15" fill="rgb(216,148,1)" fg:x="758" fg:w="1"/><text x="61.1825%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (6 samples, 0.48%)</title><rect x="60.6913%" y="293" width="0.4823%" height="15" fill="rgb(236,182,29)" fg:x="755" fg:w="6"/><text x="60.9413%" y="303.50"></text></g><g><title>regex_syntax::hir::Properties::capture (2 samples, 0.16%)</title><rect x="61.0129%" y="277" width="0.1608%" height="15" fill="rgb(244,120,48)" fg:x="759" fg:w="2"/><text x="61.2629%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (347 samples, 27.89%)</title><rect x="33.3601%" y="341" width="27.8939%" height="15" fill="rgb(206,71,34)" fg:x="415" fg:w="347"/><text x="33.6101%" y="351.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.88%)</title><rect x="60.3698%" y="325" width="0.8842%" height="15" fill="rgb(242,32,6)" fg:x="751" fg:w="11"/><text x="60.6198%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.88%)</title><rect x="60.3698%" y="309" width="0.8842%" height="15" fill="rgb(241,35,3)" fg:x="751" fg:w="11"/><text x="60.6198%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="61.1736%" y="293" width="0.0804%" height="15" fill="rgb(222,62,19)" fg:x="761" fg:w="1"/><text x="61.4236%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (376 samples, 30.23%)</title><rect x="31.1093%" y="389" width="30.2251%" height="15" fill="rgb(223,110,41)" fg:x="387" fg:w="376"/><text x="31.3593%" y="399.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (350 samples, 28.14%)</title><rect x="33.1994%" y="373" width="28.1350%" height="15" fill="rgb(208,224,4)" fg:x="413" fg:w="350"/><text x="33.4494%" y="383.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (349 samples, 28.05%)</title><rect x="33.2797%" y="357" width="28.0547%" height="15" fill="rgb(241,137,19)" fg:x="414" fg:w="349"/><text x="33.5297%" y="367.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="61.2540%" y="341" width="0.0804%" height="15" fill="rgb(244,24,17)" fg:x="762" fg:w="1"/><text x="61.5040%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="61.3344%" y="357" width="0.0804%" height="15" fill="rgb(245,178,49)" fg:x="763" fg:w="1"/><text x="61.5844%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="61.3344%" y="341" width="0.0804%" height="15" fill="rgb(219,160,38)" fg:x="763" fg:w="1"/><text x="61.5844%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="61.3344%" y="325" width="0.0804%" height="15" fill="rgb(228,137,14)" fg:x="763" fg:w="1"/><text x="61.5844%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="61.3344%" y="309" width="0.0804%" height="15" fill="rgb(237,134,11)" fg:x="763" fg:w="1"/><text x="61.5844%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="61.3344%" y="293" width="0.0804%" height="15" fill="rgb(211,126,44)" fg:x="763" fg:w="1"/><text x="61.5844%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="61.4148%" y="357" width="0.0804%" height="15" fill="rgb(226,171,33)" fg:x="764" fg:w="1"/><text x="61.6648%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="61.4148%" y="341" width="0.0804%" height="15" fill="rgb(253,99,13)" fg:x="764" fg:w="1"/><text x="61.6648%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.4148%" y="325" width="0.0804%" height="15" fill="rgb(244,48,7)" fg:x="764" fg:w="1"/><text x="61.6648%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.4148%" y="309" width="0.0804%" height="15" fill="rgb(244,217,54)" fg:x="764" fg:w="1"/><text x="61.6648%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.4148%" y="293" width="0.0804%" height="15" fill="rgb(224,15,18)" fg:x="764" fg:w="1"/><text x="61.6648%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4148%" y="277" width="0.0804%" height="15" fill="rgb(244,99,12)" fg:x="764" fg:w="1"/><text x="61.6648%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.7363%" y="309" width="0.0804%" height="15" fill="rgb(233,226,8)" fg:x="768" fg:w="1"/><text x="61.9863%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.7363%" y="293" width="0.0804%" height="15" fill="rgb(229,211,3)" fg:x="768" fg:w="1"/><text x="61.9863%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.8971%" y="277" width="0.0804%" height="15" fill="rgb(216,140,21)" fg:x="770" fg:w="1"/><text x="62.1471%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.8971%" y="261" width="0.0804%" height="15" fill="rgb(234,122,30)" fg:x="770" fg:w="1"/><text x="62.1471%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.8971%" y="245" width="0.0804%" height="15" fill="rgb(236,25,46)" fg:x="770" fg:w="1"/><text x="62.1471%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.8971%" y="229" width="0.0804%" height="15" fill="rgb(217,52,54)" fg:x="770" fg:w="1"/><text x="62.1471%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (5 samples, 0.40%)</title><rect x="61.8167%" y="309" width="0.4019%" height="15" fill="rgb(222,29,26)" fg:x="769" fg:w="5"/><text x="62.0667%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="61.8167%" y="293" width="0.4019%" height="15" fill="rgb(216,177,29)" fg:x="769" fg:w="5"/><text x="62.0667%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 0.24%)</title><rect x="61.9775%" y="277" width="0.2412%" height="15" fill="rgb(247,136,51)" fg:x="771" fg:w="3"/><text x="62.2275%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="62.0579%" y="261" width="0.1608%" height="15" fill="rgb(231,47,47)" fg:x="772" fg:w="2"/><text x="62.3079%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.1383%" y="245" width="0.0804%" height="15" fill="rgb(211,192,36)" fg:x="773" fg:w="1"/><text x="62.3883%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.1383%" y="229" width="0.0804%" height="15" fill="rgb(229,156,32)" fg:x="773" fg:w="1"/><text x="62.3883%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.1383%" y="213" width="0.0804%" height="15" fill="rgb(248,213,20)" fg:x="773" fg:w="1"/><text x="62.3883%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.1383%" y="197" width="0.0804%" height="15" fill="rgb(217,64,7)" fg:x="773" fg:w="1"/><text x="62.3883%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4598%" y="293" width="0.0804%" height="15" fill="rgb(232,142,8)" fg:x="777" fg:w="1"/><text x="62.7098%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5402%" y="277" width="0.0804%" height="15" fill="rgb(224,92,44)" fg:x="778" fg:w="1"/><text x="62.7902%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="62.5402%" y="293" width="0.1608%" height="15" fill="rgb(214,169,17)" fg:x="778" fg:w="2"/><text x="62.7902%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="62.6206%" y="277" width="0.0804%" height="15" fill="rgb(210,59,37)" fg:x="779" fg:w="1"/><text x="62.8706%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="62.7010%" y="293" width="0.4019%" height="15" fill="rgb(214,116,48)" fg:x="780" fg:w="5"/><text x="62.9510%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="62.8617%" y="277" width="0.2412%" height="15" fill="rgb(244,191,6)" fg:x="782" fg:w="3"/><text x="63.1117%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="63.1029%" y="261" width="0.0804%" height="15" fill="rgb(241,50,52)" fg:x="785" fg:w="1"/><text x="63.3529%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.1029%" y="245" width="0.0804%" height="15" fill="rgb(236,75,39)" fg:x="785" fg:w="1"/><text x="63.3529%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.1029%" y="229" width="0.0804%" height="15" fill="rgb(236,99,0)" fg:x="785" fg:w="1"/><text x="63.3529%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.1029%" y="213" width="0.0804%" height="15" fill="rgb(207,202,15)" fg:x="785" fg:w="1"/><text x="63.3529%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="63.1029%" y="277" width="0.3215%" height="15" fill="rgb(233,207,14)" fg:x="785" fg:w="4"/><text x="63.3529%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="63.1833%" y="261" width="0.2412%" height="15" fill="rgb(226,27,51)" fg:x="786" fg:w="3"/><text x="63.4333%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="63.1833%" y="245" width="0.2412%" height="15" fill="rgb(206,104,42)" fg:x="786" fg:w="3"/><text x="63.4333%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="63.1833%" y="229" width="0.2412%" height="15" fill="rgb(212,225,4)" fg:x="786" fg:w="3"/><text x="63.4333%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="63.3441%" y="213" width="0.0804%" height="15" fill="rgb(233,96,42)" fg:x="788" fg:w="1"/><text x="63.5941%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.3441%" y="197" width="0.0804%" height="15" fill="rgb(229,21,32)" fg:x="788" fg:w="1"/><text x="63.5941%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.3441%" y="181" width="0.0804%" height="15" fill="rgb(226,216,24)" fg:x="788" fg:w="1"/><text x="63.5941%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.3441%" y="165" width="0.0804%" height="15" fill="rgb(221,163,17)" fg:x="788" fg:w="1"/><text x="63.5941%" y="175.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="63.5048%" y="261" width="0.0804%" height="15" fill="rgb(216,216,42)" fg:x="790" fg:w="1"/><text x="63.7548%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="63.5852%" y="261" width="0.0804%" height="15" fill="rgb(240,118,7)" fg:x="791" fg:w="1"/><text x="63.8352%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="63.6656%" y="261" width="0.4823%" height="15" fill="rgb(221,67,37)" fg:x="792" fg:w="6"/><text x="63.9156%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.13%)</title><rect x="63.1029%" y="293" width="1.1254%" height="15" fill="rgb(241,32,44)" fg:x="785" fg:w="14"/><text x="63.3529%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.80%)</title><rect x="63.4244%" y="277" width="0.8039%" height="15" fill="rgb(235,204,43)" fg:x="789" fg:w="10"/><text x="63.6744%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="64.1479%" y="261" width="0.0804%" height="15" fill="rgb(213,116,10)" fg:x="798" fg:w="1"/><text x="64.3979%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="64.1479%" y="245" width="0.0804%" height="15" fill="rgb(239,15,48)" fg:x="798" fg:w="1"/><text x="64.3979%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.1479%" y="229" width="0.0804%" height="15" fill="rgb(207,123,36)" fg:x="798" fg:w="1"/><text x="64.3979%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.1479%" y="213" width="0.0804%" height="15" fill="rgb(209,103,30)" fg:x="798" fg:w="1"/><text x="64.3979%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1479%" y="197" width="0.0804%" height="15" fill="rgb(238,100,19)" fg:x="798" fg:w="1"/><text x="64.3979%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (26 samples, 2.09%)</title><rect x="62.2186%" y="309" width="2.0900%" height="15" fill="rgb(244,30,14)" fg:x="774" fg:w="26"/><text x="62.4686%" y="319.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.2283%" y="293" width="0.0804%" height="15" fill="rgb(249,174,6)" fg:x="799" fg:w="1"/><text x="64.4783%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="64.2283%" y="277" width="0.0804%" height="15" fill="rgb(235,213,41)" fg:x="799" fg:w="1"/><text x="64.4783%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="64.4695%" y="261" width="0.1608%" height="15" fill="rgb(213,118,6)" fg:x="802" fg:w="2"/><text x="64.7195%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.5498%" y="245" width="0.0804%" height="15" fill="rgb(235,44,51)" fg:x="803" fg:w="1"/><text x="64.7998%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.5498%" y="229" width="0.0804%" height="15" fill="rgb(217,9,53)" fg:x="803" fg:w="1"/><text x="64.7998%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5498%" y="213" width="0.0804%" height="15" fill="rgb(237,172,34)" fg:x="803" fg:w="1"/><text x="64.7998%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (4 samples, 0.32%)</title><rect x="64.6302%" y="261" width="0.3215%" height="15" fill="rgb(206,206,11)" fg:x="804" fg:w="4"/><text x="64.8802%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (3 samples, 0.24%)</title><rect x="64.7106%" y="245" width="0.2412%" height="15" fill="rgb(214,149,29)" fg:x="805" fg:w="3"/><text x="64.9606%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="64.9518%" y="245" width="0.0804%" height="15" fill="rgb(208,123,3)" fg:x="808" fg:w="1"/><text x="65.2018%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.9518%" y="229" width="0.0804%" height="15" fill="rgb(229,126,4)" fg:x="808" fg:w="1"/><text x="65.2018%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="64.9518%" y="261" width="0.1608%" height="15" fill="rgb(222,92,36)" fg:x="808" fg:w="2"/><text x="65.2018%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="65.0322%" y="245" width="0.0804%" height="15" fill="rgb(216,39,41)" fg:x="809" fg:w="1"/><text x="65.2822%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (12 samples, 0.96%)</title><rect x="64.3087%" y="277" width="0.9646%" height="15" fill="rgb(253,127,28)" fg:x="800" fg:w="12"/><text x="64.5587%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="65.1125%" y="261" width="0.1608%" height="15" fill="rgb(249,152,51)" fg:x="810" fg:w="2"/><text x="65.3625%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.1125%" y="245" width="0.1608%" height="15" fill="rgb(209,123,42)" fg:x="810" fg:w="2"/><text x="65.3625%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.1125%" y="229" width="0.1608%" height="15" fill="rgb(241,118,22)" fg:x="810" fg:w="2"/><text x="65.3625%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.1125%" y="213" width="0.1608%" height="15" fill="rgb(208,25,7)" fg:x="810" fg:w="2"/><text x="65.3625%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="65.2733%" y="277" width="0.0804%" height="15" fill="rgb(243,144,39)" fg:x="812" fg:w="1"/><text x="65.5233%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (14 samples, 1.13%)</title><rect x="64.3087%" y="309" width="1.1254%" height="15" fill="rgb(250,50,5)" fg:x="800" fg:w="14"/><text x="64.5587%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (14 samples, 1.13%)</title><rect x="64.3087%" y="293" width="1.1254%" height="15" fill="rgb(207,67,11)" fg:x="800" fg:w="14"/><text x="64.5587%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.3537%" y="277" width="0.0804%" height="15" fill="rgb(245,204,40)" fg:x="813" fg:w="1"/><text x="65.6037%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="65.4341%" y="277" width="0.0804%" height="15" fill="rgb(238,228,24)" fg:x="814" fg:w="1"/><text x="65.6841%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.5949%" y="261" width="0.0804%" height="15" fill="rgb(217,116,22)" fg:x="816" fg:w="1"/><text x="65.8449%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5949%" y="245" width="0.0804%" height="15" fill="rgb(234,98,12)" fg:x="816" fg:w="1"/><text x="65.8449%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.5949%" y="229" width="0.0804%" height="15" fill="rgb(242,170,50)" fg:x="816" fg:w="1"/><text x="65.8449%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="65.5145%" y="277" width="0.3215%" height="15" fill="rgb(235,7,5)" fg:x="815" fg:w="4"/><text x="65.7645%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="65.6752%" y="261" width="0.1608%" height="15" fill="rgb(241,114,28)" fg:x="817" fg:w="2"/><text x="65.9252%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="65.8360%" y="277" width="0.0804%" height="15" fill="rgb(246,112,42)" fg:x="819" fg:w="1"/><text x="66.0860%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="65.8360%" y="261" width="0.0804%" height="15" fill="rgb(248,228,14)" fg:x="819" fg:w="1"/><text x="66.0860%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.8360%" y="245" width="0.0804%" height="15" fill="rgb(208,133,18)" fg:x="819" fg:w="1"/><text x="66.0860%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.8360%" y="229" width="0.0804%" height="15" fill="rgb(207,35,49)" fg:x="819" fg:w="1"/><text x="66.0860%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8360%" y="213" width="0.0804%" height="15" fill="rgb(205,68,36)" fg:x="819" fg:w="1"/><text x="66.0860%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (56 samples, 4.50%)</title><rect x="61.4952%" y="357" width="4.5016%" height="15" fill="rgb(245,62,40)" fg:x="765" fg:w="56"/><text x="61.7452%" y="367.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (56 samples, 4.50%)</title><rect x="61.4952%" y="341" width="4.5016%" height="15" fill="rgb(228,27,24)" fg:x="765" fg:w="56"/><text x="61.7452%" y="351.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (56 samples, 4.50%)</title><rect x="61.4952%" y="325" width="4.5016%" height="15" fill="rgb(253,19,12)" fg:x="765" fg:w="56"/><text x="61.7452%" y="335.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="65.4341%" y="309" width="0.5627%" height="15" fill="rgb(232,28,20)" fg:x="814" fg:w="7"/><text x="65.6841%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="65.4341%" y="293" width="0.5627%" height="15" fill="rgb(218,35,51)" fg:x="814" fg:w="7"/><text x="65.6841%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.9164%" y="277" width="0.0804%" height="15" fill="rgb(212,90,40)" fg:x="820" fg:w="1"/><text x="66.1664%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.9164%" y="261" width="0.0804%" height="15" fill="rgb(220,172,12)" fg:x="820" fg:w="1"/><text x="66.1664%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9164%" y="245" width="0.0804%" height="15" fill="rgb(226,159,20)" fg:x="820" fg:w="1"/><text x="66.1664%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.3987%" y="261" width="0.0804%" height="15" fill="rgb(234,205,16)" fg:x="826" fg:w="1"/><text x="66.6487%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="66.3183%" y="277" width="0.2412%" height="15" fill="rgb(207,9,39)" fg:x="825" fg:w="3"/><text x="66.5683%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.4791%" y="261" width="0.0804%" height="15" fill="rgb(249,143,15)" fg:x="827" fg:w="1"/><text x="66.7291%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.4791%" y="245" width="0.0804%" height="15" fill="rgb(253,133,29)" fg:x="827" fg:w="1"/><text x="66.7291%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="66.5595%" y="277" width="0.1608%" height="15" fill="rgb(221,187,0)" fg:x="828" fg:w="2"/><text x="66.8095%" y="287.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (68 samples, 5.47%)</title><rect x="61.3344%" y="373" width="5.4662%" height="15" fill="rgb(205,204,26)" fg:x="763" fg:w="68"/><text x="61.5844%" y="383.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.80%)</title><rect x="65.9968%" y="357" width="0.8039%" height="15" fill="rgb(224,68,54)" fg:x="821" fg:w="10"/><text x="66.2468%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.72%)</title><rect x="66.0772%" y="341" width="0.7235%" height="15" fill="rgb(209,67,4)" fg:x="822" fg:w="9"/><text x="66.3272%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.72%)</title><rect x="66.0772%" y="325" width="0.7235%" height="15" fill="rgb(228,229,18)" fg:x="822" fg:w="9"/><text x="66.3272%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="66.0772%" y="309" width="0.7235%" height="15" fill="rgb(231,89,13)" fg:x="822" fg:w="9"/><text x="66.3272%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.72%)</title><rect x="66.0772%" y="293" width="0.7235%" height="15" fill="rgb(210,182,18)" fg:x="822" fg:w="9"/><text x="66.3272%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="66.7203%" y="277" width="0.0804%" height="15" fill="rgb(240,105,2)" fg:x="830" fg:w="1"/><text x="66.9703%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (718 samples, 57.72%)</title><rect x="9.4051%" y="469" width="57.7170%" height="15" fill="rgb(207,170,50)" fg:x="117" fg:w="718"/><text x="9.6551%" y="479.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;..</text></g><g><title>plugins_core::looking::model::qualify_name (715 samples, 57.48%)</title><rect x="9.6463%" y="453" width="57.4759%" height="15" fill="rgb(232,133,24)" fg:x="120" fg:w="715"/><text x="9.8963%" y="463.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (715 samples, 57.48%)</title><rect x="9.6463%" y="437" width="57.4759%" height="15" fill="rgb(235,166,27)" fg:x="120" fg:w="715"/><text x="9.8963%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (714 samples, 57.40%)</title><rect x="9.7267%" y="421" width="57.3955%" height="15" fill="rgb(209,19,13)" fg:x="121" fg:w="714"/><text x="9.9767%" y="431.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (713 samples, 57.32%)</title><rect x="9.8071%" y="405" width="57.3151%" height="15" fill="rgb(226,79,39)" fg:x="122" fg:w="713"/><text x="10.0571%" y="415.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (72 samples, 5.79%)</title><rect x="61.3344%" y="389" width="5.7878%" height="15" fill="rgb(222,163,10)" fg:x="763" fg:w="72"/><text x="61.5844%" y="399.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (4 samples, 0.32%)</title><rect x="66.8006%" y="373" width="0.3215%" height="15" fill="rgb(214,44,19)" fg:x="831" fg:w="4"/><text x="67.0506%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1222%" y="469" width="0.0804%" height="15" fill="rgb(210,217,13)" fg:x="835" fg:w="1"/><text x="67.3722%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="67.2026%" y="469" width="0.0804%" height="15" fill="rgb(237,61,54)" fg:x="836" fg:w="1"/><text x="67.4526%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2026%" y="453" width="0.0804%" height="15" fill="rgb(226,184,24)" fg:x="836" fg:w="1"/><text x="67.4526%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="67.2830%" y="453" width="0.0804%" height="15" fill="rgb(223,226,4)" fg:x="837" fg:w="1"/><text x="67.5330%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3633%" y="421" width="0.0804%" height="15" fill="rgb(210,26,41)" fg:x="838" fg:w="1"/><text x="67.6133%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3633%" y="405" width="0.0804%" height="15" fill="rgb(220,221,6)" fg:x="838" fg:w="1"/><text x="67.6133%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.3633%" y="389" width="0.0804%" height="15" fill="rgb(225,89,49)" fg:x="838" fg:w="1"/><text x="67.6133%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.3633%" y="373" width="0.0804%" height="15" fill="rgb(218,70,45)" fg:x="838" fg:w="1"/><text x="67.6133%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.3633%" y="357" width="0.0804%" height="15" fill="rgb(238,166,21)" fg:x="838" fg:w="1"/><text x="67.6133%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.3633%" y="341" width="0.0804%" height="15" fill="rgb(224,141,44)" fg:x="838" fg:w="1"/><text x="67.6133%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.3633%" y="325" width="0.0804%" height="15" fill="rgb(230,12,49)" fg:x="838" fg:w="1"/><text x="67.6133%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="67.3633%" y="437" width="0.1608%" height="15" fill="rgb(212,174,12)" fg:x="838" fg:w="2"/><text x="67.6133%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4437%" y="421" width="0.0804%" height="15" fill="rgb(246,67,9)" fg:x="839" fg:w="1"/><text x="67.6937%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.4437%" y="405" width="0.0804%" height="15" fill="rgb(239,35,23)" fg:x="839" fg:w="1"/><text x="67.6937%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.5241%" y="373" width="0.0804%" height="15" fill="rgb(211,167,0)" fg:x="840" fg:w="1"/><text x="67.7741%" y="383.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (2 samples, 0.16%)</title><rect x="67.5241%" y="437" width="0.1608%" height="15" fill="rgb(225,119,45)" fg:x="840" fg:w="2"/><text x="67.7741%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="67.5241%" y="421" width="0.1608%" height="15" fill="rgb(210,162,6)" fg:x="840" fg:w="2"/><text x="67.7741%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="67.5241%" y="405" width="0.1608%" height="15" fill="rgb(208,118,35)" fg:x="840" fg:w="2"/><text x="67.7741%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="67.5241%" y="389" width="0.1608%" height="15" fill="rgb(239,4,53)" fg:x="840" fg:w="2"/><text x="67.7741%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="67.6045%" y="373" width="0.0804%" height="15" fill="rgb(213,130,21)" fg:x="841" fg:w="1"/><text x="67.8545%" y="383.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="67.6045%" y="357" width="0.0804%" height="15" fill="rgb(235,148,0)" fg:x="841" fg:w="1"/><text x="67.8545%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6045%" y="341" width="0.0804%" height="15" fill="rgb(244,224,18)" fg:x="841" fg:w="1"/><text x="67.8545%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6045%" y="325" width="0.0804%" height="15" fill="rgb(211,214,4)" fg:x="841" fg:w="1"/><text x="67.8545%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6045%" y="309" width="0.0804%" height="15" fill="rgb(206,119,25)" fg:x="841" fg:w="1"/><text x="67.8545%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.6045%" y="293" width="0.0804%" height="15" fill="rgb(243,93,47)" fg:x="841" fg:w="1"/><text x="67.8545%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.6045%" y="277" width="0.0804%" height="15" fill="rgb(224,194,6)" fg:x="841" fg:w="1"/><text x="67.8545%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.6045%" y="261" width="0.0804%" height="15" fill="rgb(243,229,6)" fg:x="841" fg:w="1"/><text x="67.8545%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.6045%" y="245" width="0.0804%" height="15" fill="rgb(207,23,50)" fg:x="841" fg:w="1"/><text x="67.8545%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.6045%" y="229" width="0.0804%" height="15" fill="rgb(253,192,32)" fg:x="841" fg:w="1"/><text x="67.8545%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.6045%" y="213" width="0.0804%" height="15" fill="rgb(213,21,6)" fg:x="841" fg:w="1"/><text x="67.8545%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.6045%" y="197" width="0.0804%" height="15" fill="rgb(243,151,13)" fg:x="841" fg:w="1"/><text x="67.8545%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.6045%" y="181" width="0.0804%" height="15" fill="rgb(233,165,41)" fg:x="841" fg:w="1"/><text x="67.8545%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.6045%" y="165" width="0.0804%" height="15" fill="rgb(246,176,45)" fg:x="841" fg:w="1"/><text x="67.8545%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6045%" y="149" width="0.0804%" height="15" fill="rgb(217,170,52)" fg:x="841" fg:w="1"/><text x="67.8545%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.6849%" y="405" width="0.0804%" height="15" fill="rgb(214,203,54)" fg:x="842" fg:w="1"/><text x="67.9349%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.7653%" y="405" width="0.0804%" height="15" fill="rgb(248,215,49)" fg:x="843" fg:w="1"/><text x="68.0153%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8457%" y="373" width="0.0804%" height="15" fill="rgb(208,46,10)" fg:x="844" fg:w="1"/><text x="68.0957%" y="383.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (729 samples, 58.60%)</title><rect x="9.4051%" y="501" width="58.6013%" height="15" fill="rgb(254,5,31)" fg:x="117" fg:w="729"/><text x="9.6551%" y="511.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (729 samples, 58.60%)</title><rect x="9.4051%" y="485" width="58.6013%" height="15" fill="rgb(222,104,33)" fg:x="117" fg:w="729"/><text x="9.6551%" y="495.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.72%)</title><rect x="67.2830%" y="469" width="0.7235%" height="15" fill="rgb(248,49,16)" fg:x="837" fg:w="9"/><text x="67.5330%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (8 samples, 0.64%)</title><rect x="67.3633%" y="453" width="0.6431%" height="15" fill="rgb(232,198,41)" fg:x="838" fg:w="8"/><text x="67.6133%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="67.6849%" y="437" width="0.3215%" height="15" fill="rgb(214,125,3)" fg:x="842" fg:w="4"/><text x="67.9349%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="67.6849%" y="421" width="0.3215%" height="15" fill="rgb(229,220,28)" fg:x="842" fg:w="4"/><text x="67.9349%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="67.8457%" y="405" width="0.1608%" height="15" fill="rgb(222,64,37)" fg:x="844" fg:w="2"/><text x="68.0957%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="67.8457%" y="389" width="0.1608%" height="15" fill="rgb(249,184,13)" fg:x="844" fg:w="2"/><text x="68.0957%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="67.9260%" y="373" width="0.0804%" height="15" fill="rgb(252,176,6)" fg:x="845" fg:w="1"/><text x="68.1760%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.9260%" y="357" width="0.0804%" height="15" fill="rgb(228,153,7)" fg:x="845" fg:w="1"/><text x="68.1760%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9260%" y="341" width="0.0804%" height="15" fill="rgb(242,193,5)" fg:x="845" fg:w="1"/><text x="68.1760%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="68.0064%" y="501" width="0.0804%" height="15" fill="rgb(232,140,9)" fg:x="846" fg:w="1"/><text x="68.2564%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="68.0064%" y="485" width="0.0804%" height="15" fill="rgb(213,222,16)" fg:x="846" fg:w="1"/><text x="68.2564%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0064%" y="469" width="0.0804%" height="15" fill="rgb(222,75,50)" fg:x="846" fg:w="1"/><text x="68.2564%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="68.0868%" y="389" width="0.0804%" height="15" fill="rgb(205,180,2)" fg:x="847" fg:w="1"/><text x="68.3368%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="68.0868%" y="373" width="0.0804%" height="15" fill="rgb(216,34,7)" fg:x="847" fg:w="1"/><text x="68.3368%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0868%" y="357" width="0.0804%" height="15" fill="rgb(253,16,32)" fg:x="847" fg:w="1"/><text x="68.3368%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0868%" y="341" width="0.0804%" height="15" fill="rgb(208,97,28)" fg:x="847" fg:w="1"/><text x="68.3368%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.0868%" y="325" width="0.0804%" height="15" fill="rgb(225,92,11)" fg:x="847" fg:w="1"/><text x="68.3368%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0868%" y="309" width="0.0804%" height="15" fill="rgb(243,38,12)" fg:x="847" fg:w="1"/><text x="68.3368%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.0868%" y="293" width="0.0804%" height="15" fill="rgb(208,139,16)" fg:x="847" fg:w="1"/><text x="68.3368%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.1672%" y="309" width="0.0804%" height="15" fill="rgb(227,24,9)" fg:x="848" fg:w="1"/><text x="68.4172%" y="319.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (3 samples, 0.24%)</title><rect x="68.0868%" y="501" width="0.2412%" height="15" fill="rgb(206,62,11)" fg:x="847" fg:w="3"/><text x="68.3368%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="68.0868%" y="485" width="0.2412%" height="15" fill="rgb(228,134,27)" fg:x="847" fg:w="3"/><text x="68.3368%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="68.0868%" y="469" width="0.2412%" height="15" fill="rgb(205,55,33)" fg:x="847" fg:w="3"/><text x="68.3368%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="68.0868%" y="453" width="0.2412%" height="15" fill="rgb(243,75,43)" fg:x="847" fg:w="3"/><text x="68.3368%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="68.0868%" y="437" width="0.2412%" height="15" fill="rgb(223,27,42)" fg:x="847" fg:w="3"/><text x="68.3368%" y="447.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.24%)</title><rect x="68.0868%" y="421" width="0.2412%" height="15" fill="rgb(232,189,33)" fg:x="847" fg:w="3"/><text x="68.3368%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="68.0868%" y="405" width="0.2412%" height="15" fill="rgb(210,9,39)" fg:x="847" fg:w="3"/><text x="68.3368%" y="415.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="68.1672%" y="389" width="0.1608%" height="15" fill="rgb(242,85,26)" fg:x="848" fg:w="2"/><text x="68.4172%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.1672%" y="373" width="0.1608%" height="15" fill="rgb(248,44,4)" fg:x="848" fg:w="2"/><text x="68.4172%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.1672%" y="357" width="0.1608%" height="15" fill="rgb(250,96,46)" fg:x="848" fg:w="2"/><text x="68.4172%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.1672%" y="341" width="0.1608%" height="15" fill="rgb(229,116,26)" fg:x="848" fg:w="2"/><text x="68.4172%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.1672%" y="325" width="0.1608%" height="15" fill="rgb(246,94,34)" fg:x="848" fg:w="2"/><text x="68.4172%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.2476%" y="309" width="0.0804%" height="15" fill="rgb(251,73,21)" fg:x="849" fg:w="1"/><text x="68.4976%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.2476%" y="293" width="0.0804%" height="15" fill="rgb(254,121,25)" fg:x="849" fg:w="1"/><text x="68.4976%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.2476%" y="277" width="0.0804%" height="15" fill="rgb(215,161,49)" fg:x="849" fg:w="1"/><text x="68.4976%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2476%" y="261" width="0.0804%" height="15" fill="rgb(221,43,13)" fg:x="849" fg:w="1"/><text x="68.4976%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="68.3280%" y="437" width="0.3215%" height="15" fill="rgb(249,5,37)" fg:x="850" fg:w="4"/><text x="68.5780%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="68.4084%" y="421" width="0.2412%" height="15" fill="rgb(226,25,44)" fg:x="851" fg:w="3"/><text x="68.6584%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="68.4084%" y="405" width="0.2412%" height="15" fill="rgb(238,189,16)" fg:x="851" fg:w="3"/><text x="68.6584%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.4887%" y="389" width="0.1608%" height="15" fill="rgb(251,186,8)" fg:x="852" fg:w="2"/><text x="68.7387%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (6 samples, 0.48%)</title><rect x="68.3280%" y="469" width="0.4823%" height="15" fill="rgb(254,34,31)" fg:x="850" fg:w="6"/><text x="68.5780%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="68.3280%" y="453" width="0.4823%" height="15" fill="rgb(225,215,27)" fg:x="850" fg:w="6"/><text x="68.5780%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="68.6495%" y="437" width="0.1608%" height="15" fill="rgb(221,192,48)" fg:x="854" fg:w="2"/><text x="68.8995%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9711%" y="437" width="0.0804%" height="15" fill="rgb(219,137,20)" fg:x="858" fg:w="1"/><text x="69.2211%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="69.0514%" y="437" width="0.2412%" height="15" fill="rgb(219,84,11)" fg:x="859" fg:w="3"/><text x="69.3014%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 0.24%)</title><rect x="69.0514%" y="421" width="0.2412%" height="15" fill="rgb(224,10,23)" fg:x="859" fg:w="3"/><text x="69.3014%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="69.0514%" y="405" width="0.2412%" height="15" fill="rgb(248,22,39)" fg:x="859" fg:w="3"/><text x="69.3014%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.24%)</title><rect x="69.0514%" y="389" width="0.2412%" height="15" fill="rgb(212,154,20)" fg:x="859" fg:w="3"/><text x="69.3014%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.2122%" y="373" width="0.0804%" height="15" fill="rgb(236,199,50)" fg:x="861" fg:w="1"/><text x="69.4622%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.2122%" y="357" width="0.0804%" height="15" fill="rgb(211,9,17)" fg:x="861" fg:w="1"/><text x="69.4622%" y="367.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="69.2926%" y="437" width="0.0804%" height="15" fill="rgb(243,216,36)" fg:x="862" fg:w="1"/><text x="69.5426%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="69.2926%" y="421" width="0.0804%" height="15" fill="rgb(250,2,10)" fg:x="862" fg:w="1"/><text x="69.5426%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.2926%" y="405" width="0.0804%" height="15" fill="rgb(226,50,48)" fg:x="862" fg:w="1"/><text x="69.5426%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3730%" y="437" width="0.0804%" height="15" fill="rgb(243,81,16)" fg:x="863" fg:w="1"/><text x="69.6230%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.4534%" y="437" width="0.0804%" height="15" fill="rgb(250,14,2)" fg:x="864" fg:w="1"/><text x="69.7034%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="69.4534%" y="421" width="0.0804%" height="15" fill="rgb(233,135,29)" fg:x="864" fg:w="1"/><text x="69.7034%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="69.4534%" y="405" width="0.0804%" height="15" fill="rgb(224,64,43)" fg:x="864" fg:w="1"/><text x="69.7034%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="69.4534%" y="389" width="0.0804%" height="15" fill="rgb(238,84,13)" fg:x="864" fg:w="1"/><text x="69.7034%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4534%" y="373" width="0.0804%" height="15" fill="rgb(253,48,26)" fg:x="864" fg:w="1"/><text x="69.7034%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6141%" y="293" width="0.0804%" height="15" fill="rgb(205,223,31)" fg:x="866" fg:w="1"/><text x="69.8641%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6141%" y="277" width="0.0804%" height="15" fill="rgb(221,41,32)" fg:x="866" fg:w="1"/><text x="69.8641%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.6141%" y="261" width="0.0804%" height="15" fill="rgb(213,158,31)" fg:x="866" fg:w="1"/><text x="69.8641%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.6141%" y="245" width="0.0804%" height="15" fill="rgb(245,126,43)" fg:x="866" fg:w="1"/><text x="69.8641%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.6141%" y="229" width="0.0804%" height="15" fill="rgb(227,7,22)" fg:x="866" fg:w="1"/><text x="69.8641%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6141%" y="213" width="0.0804%" height="15" fill="rgb(252,90,44)" fg:x="866" fg:w="1"/><text x="69.8641%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6141%" y="197" width="0.0804%" height="15" fill="rgb(253,91,0)" fg:x="866" fg:w="1"/><text x="69.8641%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.6141%" y="181" width="0.0804%" height="15" fill="rgb(252,175,49)" fg:x="866" fg:w="1"/><text x="69.8641%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.6141%" y="165" width="0.0804%" height="15" fill="rgb(246,150,1)" fg:x="866" fg:w="1"/><text x="69.8641%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.6141%" y="149" width="0.0804%" height="15" fill="rgb(241,192,25)" fg:x="866" fg:w="1"/><text x="69.8641%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.6141%" y="133" width="0.0804%" height="15" fill="rgb(239,187,11)" fg:x="866" fg:w="1"/><text x="69.8641%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6141%" y="117" width="0.0804%" height="15" fill="rgb(218,202,51)" fg:x="866" fg:w="1"/><text x="69.8641%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="69.6141%" y="357" width="0.1608%" height="15" fill="rgb(225,176,8)" fg:x="866" fg:w="2"/><text x="69.8641%" y="367.50"></text></g><g><title>kernel::model::EntityRef::into_entry (2 samples, 0.16%)</title><rect x="69.6141%" y="341" width="0.1608%" height="15" fill="rgb(219,122,41)" fg:x="866" fg:w="2"/><text x="69.8641%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="69.6141%" y="325" width="0.1608%" height="15" fill="rgb(248,140,20)" fg:x="866" fg:w="2"/><text x="69.8641%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="69.6141%" y="309" width="0.1608%" height="15" fill="rgb(245,41,37)" fg:x="866" fg:w="2"/><text x="69.8641%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.6945%" y="293" width="0.0804%" height="15" fill="rgb(235,82,39)" fg:x="867" fg:w="1"/><text x="69.9445%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.7749%" y="341" width="0.0804%" height="15" fill="rgb(230,108,42)" fg:x="868" fg:w="1"/><text x="70.0249%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0965%" y="293" width="0.0804%" height="15" fill="rgb(215,150,50)" fg:x="872" fg:w="1"/><text x="70.3465%" y="303.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="70.1768%" y="277" width="0.0804%" height="15" fill="rgb(233,212,5)" fg:x="873" fg:w="1"/><text x="70.4268%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1768%" y="261" width="0.0804%" height="15" fill="rgb(245,80,22)" fg:x="873" fg:w="1"/><text x="70.4268%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1768%" y="245" width="0.0804%" height="15" fill="rgb(238,129,16)" fg:x="873" fg:w="1"/><text x="70.4268%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1768%" y="229" width="0.0804%" height="15" fill="rgb(240,19,0)" fg:x="873" fg:w="1"/><text x="70.4268%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1768%" y="213" width="0.0804%" height="15" fill="rgb(232,42,35)" fg:x="873" fg:w="1"/><text x="70.4268%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1768%" y="197" width="0.0804%" height="15" fill="rgb(223,130,24)" fg:x="873" fg:w="1"/><text x="70.4268%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1768%" y="181" width="0.0804%" height="15" fill="rgb(237,16,22)" fg:x="873" fg:w="1"/><text x="70.4268%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1768%" y="165" width="0.0804%" height="15" fill="rgb(248,192,20)" fg:x="873" fg:w="1"/><text x="70.4268%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.1768%" y="149" width="0.0804%" height="15" fill="rgb(233,167,2)" fg:x="873" fg:w="1"/><text x="70.4268%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.1768%" y="133" width="0.0804%" height="15" fill="rgb(252,71,44)" fg:x="873" fg:w="1"/><text x="70.4268%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.1768%" y="117" width="0.0804%" height="15" fill="rgb(238,37,47)" fg:x="873" fg:w="1"/><text x="70.4268%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.1768%" y="101" width="0.0804%" height="15" fill="rgb(214,202,54)" fg:x="873" fg:w="1"/><text x="70.4268%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1768%" y="85" width="0.0804%" height="15" fill="rgb(254,165,40)" fg:x="873" fg:w="1"/><text x="70.4268%" y="95.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="70.3376%" y="261" width="0.0804%" height="15" fill="rgb(246,173,38)" fg:x="875" fg:w="1"/><text x="70.5876%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3376%" y="245" width="0.0804%" height="15" fill="rgb(215,3,27)" fg:x="875" fg:w="1"/><text x="70.5876%" y="255.50"></text></g><g><title>core::iter::adapters::try_process (11 samples, 0.88%)</title><rect x="69.6141%" y="373" width="0.8842%" height="15" fill="rgb(239,169,51)" fg:x="866" fg:w="11"/><text x="69.8641%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="69.7749%" y="357" width="0.7235%" height="15" fill="rgb(212,5,25)" fg:x="868" fg:w="9"/><text x="70.0249%" y="367.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (8 samples, 0.64%)</title><rect x="69.8553%" y="341" width="0.6431%" height="15" fill="rgb(243,45,17)" fg:x="869" fg:w="8"/><text x="70.1053%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (8 samples, 0.64%)</title><rect x="69.8553%" y="325" width="0.6431%" height="15" fill="rgb(242,97,9)" fg:x="869" fg:w="8"/><text x="70.1053%" y="335.50"></text></g><g><title>kernel::model::Entity::load_scope (6 samples, 0.48%)</title><rect x="70.0161%" y="309" width="0.4823%" height="15" fill="rgb(228,71,31)" fg:x="871" fg:w="6"/><text x="70.2661%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="70.1768%" y="293" width="0.3215%" height="15" fill="rgb(252,184,16)" fg:x="873" fg:w="4"/><text x="70.4268%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.24%)</title><rect x="70.2572%" y="277" width="0.2412%" height="15" fill="rgb(236,169,46)" fg:x="874" fg:w="3"/><text x="70.5072%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="70.4180%" y="261" width="0.0804%" height="15" fill="rgb(207,17,47)" fg:x="876" fg:w="1"/><text x="70.6680%" y="271.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.4180%" y="245" width="0.0804%" height="15" fill="rgb(206,201,28)" fg:x="876" fg:w="1"/><text x="70.6680%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.4180%" y="229" width="0.0804%" height="15" fill="rgb(224,184,23)" fg:x="876" fg:w="1"/><text x="70.6680%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4180%" y="213" width="0.0804%" height="15" fill="rgb(208,139,48)" fg:x="876" fg:w="1"/><text x="70.6680%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.4180%" y="197" width="0.0804%" height="15" fill="rgb(208,130,10)" fg:x="876" fg:w="1"/><text x="70.6680%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4180%" y="181" width="0.0804%" height="15" fill="rgb(211,213,45)" fg:x="876" fg:w="1"/><text x="70.6680%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.4180%" y="165" width="0.0804%" height="15" fill="rgb(235,100,30)" fg:x="876" fg:w="1"/><text x="70.6680%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4180%" y="149" width="0.0804%" height="15" fill="rgb(206,144,31)" fg:x="876" fg:w="1"/><text x="70.6680%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.4180%" y="133" width="0.0804%" height="15" fill="rgb(224,200,26)" fg:x="876" fg:w="1"/><text x="70.6680%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4180%" y="117" width="0.0804%" height="15" fill="rgb(247,104,53)" fg:x="876" fg:w="1"/><text x="70.6680%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.4180%" y="101" width="0.0804%" height="15" fill="rgb(220,14,17)" fg:x="876" fg:w="1"/><text x="70.6680%" y="111.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (14 samples, 1.13%)</title><rect x="69.6141%" y="389" width="1.1254%" height="15" fill="rgb(230,140,40)" fg:x="866" fg:w="14"/><text x="69.8641%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="70.4984%" y="373" width="0.2412%" height="15" fill="rgb(229,2,41)" fg:x="877" fg:w="3"/><text x="70.7484%" y="383.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="70.4984%" y="357" width="0.2412%" height="15" fill="rgb(232,89,16)" fg:x="877" fg:w="3"/><text x="70.7484%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.6592%" y="341" width="0.0804%" height="15" fill="rgb(247,59,52)" fg:x="879" fg:w="1"/><text x="70.9092%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.6592%" y="325" width="0.0804%" height="15" fill="rgb(226,110,21)" fg:x="879" fg:w="1"/><text x="70.9092%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="70.6592%" y="309" width="0.0804%" height="15" fill="rgb(224,176,43)" fg:x="879" fg:w="1"/><text x="70.9092%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.6592%" y="293" width="0.0804%" height="15" fill="rgb(221,73,6)" fg:x="879" fg:w="1"/><text x="70.9092%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.6592%" y="277" width="0.0804%" height="15" fill="rgb(232,78,19)" fg:x="879" fg:w="1"/><text x="70.9092%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8199%" y="341" width="0.0804%" height="15" fill="rgb(233,112,48)" fg:x="881" fg:w="1"/><text x="71.0699%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8199%" y="325" width="0.0804%" height="15" fill="rgb(243,131,47)" fg:x="881" fg:w="1"/><text x="71.0699%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8199%" y="309" width="0.0804%" height="15" fill="rgb(226,51,1)" fg:x="881" fg:w="1"/><text x="71.0699%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8199%" y="293" width="0.0804%" height="15" fill="rgb(247,58,7)" fg:x="881" fg:w="1"/><text x="71.0699%" y="303.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="70.9003%" y="261" width="0.0804%" height="15" fill="rgb(209,7,32)" fg:x="882" fg:w="1"/><text x="71.1503%" y="271.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.9003%" y="245" width="0.0804%" height="15" fill="rgb(209,39,41)" fg:x="882" fg:w="1"/><text x="71.1503%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9003%" y="229" width="0.0804%" height="15" fill="rgb(226,182,46)" fg:x="882" fg:w="1"/><text x="71.1503%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.9003%" y="213" width="0.0804%" height="15" fill="rgb(230,219,10)" fg:x="882" fg:w="1"/><text x="71.1503%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.9003%" y="197" width="0.0804%" height="15" fill="rgb(227,175,30)" fg:x="882" fg:w="1"/><text x="71.1503%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.9003%" y="181" width="0.0804%" height="15" fill="rgb(217,2,50)" fg:x="882" fg:w="1"/><text x="71.1503%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.9003%" y="165" width="0.0804%" height="15" fill="rgb(229,160,0)" fg:x="882" fg:w="1"/><text x="71.1503%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.9003%" y="149" width="0.0804%" height="15" fill="rgb(207,78,37)" fg:x="882" fg:w="1"/><text x="71.1503%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.9003%" y="133" width="0.0804%" height="15" fill="rgb(225,57,0)" fg:x="882" fg:w="1"/><text x="71.1503%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.9003%" y="117" width="0.0804%" height="15" fill="rgb(232,154,2)" fg:x="882" fg:w="1"/><text x="71.1503%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.9003%" y="101" width="0.0804%" height="15" fill="rgb(241,212,25)" fg:x="882" fg:w="1"/><text x="71.1503%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.9003%" y="85" width="0.0804%" height="15" fill="rgb(226,69,20)" fg:x="882" fg:w="1"/><text x="71.1503%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.9003%" y="69" width="0.0804%" height="15" fill="rgb(247,184,54)" fg:x="882" fg:w="1"/><text x="71.1503%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9003%" y="53" width="0.0804%" height="15" fill="rgb(210,145,0)" fg:x="882" fg:w="1"/><text x="71.1503%" y="63.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0611%" y="117" width="0.0804%" height="15" fill="rgb(253,82,12)" fg:x="884" fg:w="1"/><text x="71.3111%" y="127.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="71.0611%" y="101" width="0.0804%" height="15" fill="rgb(245,42,11)" fg:x="884" fg:w="1"/><text x="71.3111%" y="111.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="70.9807%" y="245" width="0.2412%" height="15" fill="rgb(219,147,32)" fg:x="883" fg:w="3"/><text x="71.2307%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="70.9807%" y="229" width="0.2412%" height="15" fill="rgb(246,12,7)" fg:x="883" fg:w="3"/><text x="71.2307%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="70.9807%" y="213" width="0.2412%" height="15" fill="rgb(243,50,9)" fg:x="883" fg:w="3"/><text x="71.2307%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.9807%" y="197" width="0.2412%" height="15" fill="rgb(219,149,6)" fg:x="883" fg:w="3"/><text x="71.2307%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="70.9807%" y="181" width="0.2412%" height="15" fill="rgb(241,51,42)" fg:x="883" fg:w="3"/><text x="71.2307%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="70.9807%" y="165" width="0.2412%" height="15" fill="rgb(226,128,27)" fg:x="883" fg:w="3"/><text x="71.2307%" y="175.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="71.0611%" y="149" width="0.1608%" height="15" fill="rgb(244,144,4)" fg:x="884" fg:w="2"/><text x="71.3111%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.0611%" y="133" width="0.1608%" height="15" fill="rgb(221,4,13)" fg:x="884" fg:w="2"/><text x="71.3111%" y="143.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1415%" y="117" width="0.0804%" height="15" fill="rgb(208,170,28)" fg:x="885" fg:w="1"/><text x="71.3915%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1415%" y="101" width="0.0804%" height="15" fill="rgb(226,131,13)" fg:x="885" fg:w="1"/><text x="71.3915%" y="111.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1415%" y="85" width="0.0804%" height="15" fill="rgb(215,72,41)" fg:x="885" fg:w="1"/><text x="71.3915%" y="95.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1415%" y="69" width="0.0804%" height="15" fill="rgb(243,108,20)" fg:x="885" fg:w="1"/><text x="71.3915%" y="79.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1415%" y="53" width="0.0804%" height="15" fill="rgb(230,189,17)" fg:x="885" fg:w="1"/><text x="71.3915%" y="63.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2219%" y="165" width="0.0804%" height="15" fill="rgb(220,50,17)" fg:x="886" fg:w="1"/><text x="71.4719%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.2219%" y="149" width="0.0804%" height="15" fill="rgb(248,152,48)" fg:x="886" fg:w="1"/><text x="71.4719%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2219%" y="133" width="0.0804%" height="15" fill="rgb(244,91,11)" fg:x="886" fg:w="1"/><text x="71.4719%" y="143.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.48%)</title><rect x="70.9003%" y="325" width="0.4823%" height="15" fill="rgb(220,157,5)" fg:x="882" fg:w="6"/><text x="71.1503%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="70.9003%" y="309" width="0.4823%" height="15" fill="rgb(253,137,8)" fg:x="882" fg:w="6"/><text x="71.1503%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.48%)</title><rect x="70.9003%" y="293" width="0.4823%" height="15" fill="rgb(217,137,51)" fg:x="882" fg:w="6"/><text x="71.1503%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (6 samples, 0.48%)</title><rect x="70.9003%" y="277" width="0.4823%" height="15" fill="rgb(218,209,53)" fg:x="882" fg:w="6"/><text x="71.1503%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="70.9807%" y="261" width="0.4019%" height="15" fill="rgb(249,137,25)" fg:x="883" fg:w="5"/><text x="71.2307%" y="271.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="71.2219%" y="245" width="0.1608%" height="15" fill="rgb(239,155,26)" fg:x="886" fg:w="2"/><text x="71.4719%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.2219%" y="229" width="0.1608%" height="15" fill="rgb(227,85,46)" fg:x="886" fg:w="2"/><text x="71.4719%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.2219%" y="213" width="0.1608%" height="15" fill="rgb(251,107,43)" fg:x="886" fg:w="2"/><text x="71.4719%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="71.2219%" y="197" width="0.1608%" height="15" fill="rgb(234,170,33)" fg:x="886" fg:w="2"/><text x="71.4719%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.2219%" y="181" width="0.1608%" height="15" fill="rgb(206,29,35)" fg:x="886" fg:w="2"/><text x="71.4719%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.3023%" y="165" width="0.0804%" height="15" fill="rgb(227,138,25)" fg:x="887" fg:w="1"/><text x="71.5523%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.3023%" y="149" width="0.0804%" height="15" fill="rgb(249,131,35)" fg:x="887" fg:w="1"/><text x="71.5523%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.3023%" y="133" width="0.0804%" height="15" fill="rgb(239,6,40)" fg:x="887" fg:w="1"/><text x="71.5523%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3023%" y="117" width="0.0804%" height="15" fill="rgb(246,136,47)" fg:x="887" fg:w="1"/><text x="71.5523%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 1.93%)</title><rect x="69.5338%" y="421" width="1.9293%" height="15" fill="rgb(253,58,26)" fg:x="865" fg:w="24"/><text x="69.7838%" y="431.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (24 samples, 1.93%)</title><rect x="69.5338%" y="405" width="1.9293%" height="15" fill="rgb(237,141,10)" fg:x="865" fg:w="24"/><text x="69.7838%" y="415.50">&lt;..</text></g><g><title>plugins_core::tools::get_contained_keys (9 samples, 0.72%)</title><rect x="70.7395%" y="389" width="0.7235%" height="15" fill="rgb(234,156,12)" fg:x="880" fg:w="9"/><text x="70.9895%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.72%)</title><rect x="70.7395%" y="373" width="0.7235%" height="15" fill="rgb(243,224,36)" fg:x="880" fg:w="9"/><text x="70.9895%" y="383.50"></text></g><g><title>kernel::model::Entity::load_scope (8 samples, 0.64%)</title><rect x="70.8199%" y="357" width="0.6431%" height="15" fill="rgb(205,229,51)" fg:x="881" fg:w="8"/><text x="71.0699%" y="367.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (7 samples, 0.56%)</title><rect x="70.9003%" y="341" width="0.5627%" height="15" fill="rgb(223,189,4)" fg:x="882" fg:w="7"/><text x="71.1503%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="71.3826%" y="325" width="0.0804%" height="15" fill="rgb(249,167,54)" fg:x="888" fg:w="1"/><text x="71.6326%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3826%" y="309" width="0.0804%" height="15" fill="rgb(218,34,28)" fg:x="888" fg:w="1"/><text x="71.6326%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7846%" y="325" width="0.0804%" height="15" fill="rgb(232,109,42)" fg:x="893" fg:w="1"/><text x="72.0346%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7846%" y="309" width="0.0804%" height="15" fill="rgb(248,214,46)" fg:x="893" fg:w="1"/><text x="72.0346%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7846%" y="293" width="0.0804%" height="15" fill="rgb(244,216,40)" fg:x="893" fg:w="1"/><text x="72.0346%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7846%" y="277" width="0.0804%" height="15" fill="rgb(231,226,31)" fg:x="893" fg:w="1"/><text x="72.0346%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7846%" y="261" width="0.0804%" height="15" fill="rgb(238,38,43)" fg:x="893" fg:w="1"/><text x="72.0346%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7846%" y="245" width="0.0804%" height="15" fill="rgb(208,88,43)" fg:x="893" fg:w="1"/><text x="72.0346%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="71.7846%" y="373" width="0.1608%" height="15" fill="rgb(205,136,37)" fg:x="893" fg:w="2"/><text x="72.0346%" y="383.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="71.7846%" y="357" width="0.1608%" height="15" fill="rgb(237,34,14)" fg:x="893" fg:w="2"/><text x="72.0346%" y="367.50"></text></g><g><title>engine::internal::Maps::lookup_entity (2 samples, 0.16%)</title><rect x="71.7846%" y="341" width="0.1608%" height="15" fill="rgb(236,193,44)" fg:x="893" fg:w="2"/><text x="72.0346%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.8650%" y="325" width="0.0804%" height="15" fill="rgb(231,48,10)" fg:x="894" fg:w="1"/><text x="72.1150%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="72.3473%" y="133" width="0.0804%" height="15" fill="rgb(213,141,34)" fg:x="900" fg:w="1"/><text x="72.5973%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3473%" y="117" width="0.0804%" height="15" fill="rgb(249,130,34)" fg:x="900" fg:w="1"/><text x="72.5973%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.3473%" y="101" width="0.0804%" height="15" fill="rgb(219,42,41)" fg:x="900" fg:w="1"/><text x="72.5973%" y="111.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="72.3473%" y="213" width="0.1608%" height="15" fill="rgb(224,100,54)" fg:x="900" fg:w="2"/><text x="72.5973%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.3473%" y="197" width="0.1608%" height="15" fill="rgb(229,200,27)" fg:x="900" fg:w="2"/><text x="72.5973%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="72.3473%" y="181" width="0.1608%" height="15" fill="rgb(217,118,10)" fg:x="900" fg:w="2"/><text x="72.5973%" y="191.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="72.3473%" y="165" width="0.1608%" height="15" fill="rgb(206,22,3)" fg:x="900" fg:w="2"/><text x="72.5973%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.3473%" y="149" width="0.1608%" height="15" fill="rgb(232,163,46)" fg:x="900" fg:w="2"/><text x="72.5973%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.4277%" y="133" width="0.0804%" height="15" fill="rgb(206,95,13)" fg:x="901" fg:w="1"/><text x="72.6777%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4277%" y="117" width="0.0804%" height="15" fill="rgb(253,154,18)" fg:x="901" fg:w="1"/><text x="72.6777%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="72.2669%" y="229" width="0.4019%" height="15" fill="rgb(219,32,23)" fg:x="899" fg:w="5"/><text x="72.5169%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="72.5080%" y="213" width="0.1608%" height="15" fill="rgb(230,191,45)" fg:x="902" fg:w="2"/><text x="72.7580%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.5884%" y="197" width="0.0804%" height="15" fill="rgb(229,64,36)" fg:x="903" fg:w="1"/><text x="72.8384%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="72.2669%" y="245" width="0.4823%" height="15" fill="rgb(205,129,25)" fg:x="899" fg:w="6"/><text x="72.5169%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.6688%" y="229" width="0.0804%" height="15" fill="rgb(254,112,7)" fg:x="904" fg:w="1"/><text x="72.9188%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6688%" y="213" width="0.0804%" height="15" fill="rgb(226,53,48)" fg:x="904" fg:w="1"/><text x="72.9188%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.56%)</title><rect x="72.2669%" y="261" width="0.5627%" height="15" fill="rgb(214,153,38)" fg:x="899" fg:w="7"/><text x="72.5169%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.7492%" y="245" width="0.0804%" height="15" fill="rgb(243,101,7)" fg:x="905" fg:w="1"/><text x="72.9992%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="72.7492%" y="229" width="0.0804%" height="15" fill="rgb(240,140,22)" fg:x="905" fg:w="1"/><text x="72.9992%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="72.2669%" y="277" width="0.8039%" height="15" fill="rgb(235,114,2)" fg:x="899" fg:w="10"/><text x="72.5169%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="72.8296%" y="261" width="0.2412%" height="15" fill="rgb(242,59,12)" fg:x="906" fg:w="3"/><text x="73.0796%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="72.9100%" y="245" width="0.1608%" height="15" fill="rgb(252,134,9)" fg:x="907" fg:w="2"/><text x="73.1600%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.9904%" y="229" width="0.0804%" height="15" fill="rgb(236,4,44)" fg:x="908" fg:w="1"/><text x="73.2404%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (14 samples, 1.13%)</title><rect x="72.1061%" y="309" width="1.1254%" height="15" fill="rgb(254,172,41)" fg:x="897" fg:w="14"/><text x="72.3561%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="72.2669%" y="293" width="0.9646%" height="15" fill="rgb(244,63,20)" fg:x="899" fg:w="12"/><text x="72.5169%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="73.0707%" y="277" width="0.1608%" height="15" fill="rgb(250,73,31)" fg:x="909" fg:w="2"/><text x="73.3207%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.0707%" y="261" width="0.1608%" height="15" fill="rgb(241,38,36)" fg:x="909" fg:w="2"/><text x="73.3207%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.2315%" y="293" width="0.0804%" height="15" fill="rgb(245,211,2)" fg:x="911" fg:w="1"/><text x="73.4815%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 1.37%)</title><rect x="72.0257%" y="325" width="1.3666%" height="15" fill="rgb(206,120,28)" fg:x="896" fg:w="17"/><text x="72.2757%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.2315%" y="309" width="0.1608%" height="15" fill="rgb(211,59,34)" fg:x="911" fg:w="2"/><text x="73.4815%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3119%" y="293" width="0.0804%" height="15" fill="rgb(233,168,5)" fg:x="912" fg:w="1"/><text x="73.5619%" y="303.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (18 samples, 1.45%)</title><rect x="72.0257%" y="357" width="1.4469%" height="15" fill="rgb(234,33,13)" fg:x="896" fg:w="18"/><text x="72.2757%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 1.45%)</title><rect x="72.0257%" y="341" width="1.4469%" height="15" fill="rgb(231,150,26)" fg:x="896" fg:w="18"/><text x="72.2757%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.3923%" y="325" width="0.0804%" height="15" fill="rgb(217,191,4)" fg:x="913" fg:w="1"/><text x="73.6423%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.3923%" y="309" width="0.0804%" height="15" fill="rgb(246,198,38)" fg:x="913" fg:w="1"/><text x="73.6423%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5531%" y="309" width="0.0804%" height="15" fill="rgb(245,64,37)" fg:x="915" fg:w="1"/><text x="73.8031%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7138%" y="261" width="0.0804%" height="15" fill="rgb(250,30,36)" fg:x="917" fg:w="1"/><text x="73.9638%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7138%" y="245" width="0.0804%" height="15" fill="rgb(217,86,53)" fg:x="917" fg:w="1"/><text x="73.9638%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7138%" y="229" width="0.0804%" height="15" fill="rgb(228,157,16)" fg:x="917" fg:w="1"/><text x="73.9638%" y="239.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="73.7942%" y="245" width="0.1608%" height="15" fill="rgb(217,59,31)" fg:x="918" fg:w="2"/><text x="74.0442%" y="255.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="73.7942%" y="229" width="0.1608%" height="15" fill="rgb(237,138,41)" fg:x="918" fg:w="2"/><text x="74.0442%" y="239.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.8746%" y="213" width="0.0804%" height="15" fill="rgb(227,91,49)" fg:x="919" fg:w="1"/><text x="74.1246%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8746%" y="197" width="0.0804%" height="15" fill="rgb(247,21,44)" fg:x="919" fg:w="1"/><text x="74.1246%" y="207.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (5 samples, 0.40%)</title><rect x="73.6334%" y="309" width="0.4019%" height="15" fill="rgb(219,210,51)" fg:x="916" fg:w="5"/><text x="73.8834%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="73.6334%" y="293" width="0.4019%" height="15" fill="rgb(209,140,6)" fg:x="916" fg:w="5"/><text x="73.8834%" y="303.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="73.6334%" y="277" width="0.4019%" height="15" fill="rgb(221,188,24)" fg:x="916" fg:w="5"/><text x="73.8834%" y="287.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.24%)</title><rect x="73.7942%" y="261" width="0.2412%" height="15" fill="rgb(232,154,20)" fg:x="918" fg:w="3"/><text x="74.0442%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9550%" y="245" width="0.0804%" height="15" fill="rgb(244,137,50)" fg:x="920" fg:w="1"/><text x="74.2050%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0354%" y="261" width="0.0804%" height="15" fill="rgb(225,185,43)" fg:x="921" fg:w="1"/><text x="74.2854%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0354%" y="245" width="0.0804%" height="15" fill="rgb(213,205,38)" fg:x="921" fg:w="1"/><text x="74.2854%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0354%" y="229" width="0.0804%" height="15" fill="rgb(236,73,12)" fg:x="921" fg:w="1"/><text x="74.2854%" y="239.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.1158%" y="261" width="0.0804%" height="15" fill="rgb(235,219,13)" fg:x="922" fg:w="1"/><text x="74.3658%" y="271.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1158%" y="245" width="0.0804%" height="15" fill="rgb(218,59,36)" fg:x="922" fg:w="1"/><text x="74.3658%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1158%" y="229" width="0.0804%" height="15" fill="rgb(205,110,39)" fg:x="922" fg:w="1"/><text x="74.3658%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1961%" y="229" width="0.0804%" height="15" fill="rgb(218,206,42)" fg:x="923" fg:w="1"/><text x="74.4461%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1961%" y="213" width="0.0804%" height="15" fill="rgb(248,125,24)" fg:x="923" fg:w="1"/><text x="74.4461%" y="223.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.1961%" y="245" width="0.1608%" height="15" fill="rgb(242,28,27)" fg:x="923" fg:w="2"/><text x="74.4461%" y="255.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2765%" y="229" width="0.0804%" height="15" fill="rgb(216,228,15)" fg:x="924" fg:w="1"/><text x="74.5265%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2765%" y="213" width="0.0804%" height="15" fill="rgb(235,116,46)" fg:x="924" fg:w="1"/><text x="74.5265%" y="223.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="74.0354%" y="277" width="0.4019%" height="15" fill="rgb(224,18,32)" fg:x="921" fg:w="5"/><text x="74.2854%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="74.1961%" y="261" width="0.2412%" height="15" fill="rgb(252,5,12)" fg:x="923" fg:w="3"/><text x="74.4461%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3569%" y="245" width="0.0804%" height="15" fill="rgb(251,36,5)" fg:x="925" fg:w="1"/><text x="74.6069%" y="255.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (71 samples, 5.71%)</title><rect x="68.8103%" y="453" width="5.7074%" height="15" fill="rgb(217,53,14)" fg:x="856" fg:w="71"/><text x="69.0603%" y="463.50">&lt;plugin..</text></g><g><title>core::iter::adapters::try_process (62 samples, 4.98%)</title><rect x="69.5338%" y="437" width="4.9839%" height="15" fill="rgb(215,86,45)" fg:x="865" fg:w="62"/><text x="69.7838%" y="447.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (38 samples, 3.05%)</title><rect x="71.4630%" y="421" width="3.0547%" height="15" fill="rgb(242,169,11)" fg:x="889" fg:w="38"/><text x="71.7130%" y="431.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36 samples, 2.89%)</title><rect x="71.6238%" y="405" width="2.8939%" height="15" fill="rgb(211,213,45)" fg:x="891" fg:w="36"/><text x="71.8738%" y="415.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (35 samples, 2.81%)</title><rect x="71.7042%" y="389" width="2.8135%" height="15" fill="rgb(205,88,11)" fg:x="892" fg:w="35"/><text x="71.9542%" y="399.50">pl..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (32 samples, 2.57%)</title><rect x="71.9453%" y="373" width="2.5723%" height="15" fill="rgb(252,69,26)" fg:x="895" fg:w="32"/><text x="72.1953%" y="383.50">&lt;r..</text></g><g><title>kernel::model::EntityPtr::to_json_value (13 samples, 1.05%)</title><rect x="73.4727%" y="357" width="1.0450%" height="15" fill="rgb(246,123,37)" fg:x="914" fg:w="13"/><text x="73.7227%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (13 samples, 1.05%)</title><rect x="73.4727%" y="341" width="1.0450%" height="15" fill="rgb(212,205,5)" fg:x="914" fg:w="13"/><text x="73.7227%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.05%)</title><rect x="73.4727%" y="325" width="1.0450%" height="15" fill="rgb(253,148,0)" fg:x="914" fg:w="13"/><text x="73.7227%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="74.0354%" y="309" width="0.4823%" height="15" fill="rgb(239,22,4)" fg:x="921" fg:w="6"/><text x="74.2854%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (6 samples, 0.48%)</title><rect x="74.0354%" y="293" width="0.4823%" height="15" fill="rgb(226,26,53)" fg:x="921" fg:w="6"/><text x="74.2854%" y="303.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.4373%" y="277" width="0.0804%" height="15" fill="rgb(225,229,45)" fg:x="926" fg:w="1"/><text x="74.6873%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4373%" y="261" width="0.0804%" height="15" fill="rgb(220,60,37)" fg:x="926" fg:w="1"/><text x="74.6873%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5177%" y="453" width="0.0804%" height="15" fill="rgb(217,180,35)" fg:x="927" fg:w="1"/><text x="74.7677%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5981%" y="453" width="0.0804%" height="15" fill="rgb(229,7,53)" fg:x="928" fg:w="1"/><text x="74.8481%" y="463.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (813 samples, 65.35%)</title><rect x="9.4051%" y="517" width="65.3537%" height="15" fill="rgb(254,137,3)" fg:x="117" fg:w="813"/><text x="9.6551%" y="527.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (80 samples, 6.43%)</title><rect x="68.3280%" y="501" width="6.4309%" height="15" fill="rgb(215,140,41)" fg:x="850" fg:w="80"/><text x="68.5780%" y="511.50">kernel::..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (80 samples, 6.43%)</title><rect x="68.3280%" y="485" width="6.4309%" height="15" fill="rgb(250,80,15)" fg:x="850" fg:w="80"/><text x="68.5780%" y="495.50">&lt;plugins..</text></g><g><title>plugins_rpc::querying::have_surroundings (74 samples, 5.95%)</title><rect x="68.8103%" y="469" width="5.9486%" height="15" fill="rgb(252,191,6)" fg:x="856" fg:w="74"/><text x="69.0603%" y="479.50">plugins_..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.6785%" y="453" width="0.0804%" height="15" fill="rgb(246,217,18)" fg:x="929" fg:w="1"/><text x="74.9285%" y="463.50"></text></g><g><title>rpc_proto::&lt;impl core::convert::Into&lt;rpc_proto::EntityKey&gt; for kernel::model::EntityKey&gt;::into (1 samples, 0.08%)</title><rect x="74.6785%" y="437" width="0.0804%" height="15" fill="rgb(223,93,7)" fg:x="929" fg:w="1"/><text x="74.9285%" y="447.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;kernel::model::EntityKey&gt; for alloc::string::String&gt;::from (1 samples, 0.08%)</title><rect x="74.6785%" y="421" width="0.0804%" height="15" fill="rgb(225,55,52)" fg:x="929" fg:w="1"/><text x="74.9285%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="74.6785%" y="405" width="0.0804%" height="15" fill="rgb(240,31,24)" fg:x="929" fg:w="1"/><text x="74.9285%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.6785%" y="389" width="0.0804%" height="15" fill="rgb(205,56,52)" fg:x="929" fg:w="1"/><text x="74.9285%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.6785%" y="373" width="0.0804%" height="15" fill="rgb(246,146,12)" fg:x="929" fg:w="1"/><text x="74.9285%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.6785%" y="357" width="0.0804%" height="15" fill="rgb(239,84,36)" fg:x="929" fg:w="1"/><text x="74.9285%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="74.7588%" y="453" width="0.0804%" height="15" fill="rgb(207,41,40)" fg:x="930" fg:w="1"/><text x="75.0088%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="74.7588%" y="437" width="0.0804%" height="15" fill="rgb(241,179,25)" fg:x="930" fg:w="1"/><text x="75.0088%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.7588%" y="421" width="0.0804%" height="15" fill="rgb(210,0,34)" fg:x="930" fg:w="1"/><text x="75.0088%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7588%" y="405" width="0.0804%" height="15" fill="rgb(225,217,29)" fg:x="930" fg:w="1"/><text x="75.0088%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.7588%" y="389" width="0.0804%" height="15" fill="rgb(216,191,38)" fg:x="930" fg:w="1"/><text x="75.0088%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7588%" y="373" width="0.0804%" height="15" fill="rgb(232,140,52)" fg:x="930" fg:w="1"/><text x="75.0088%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.7588%" y="357" width="0.0804%" height="15" fill="rgb(223,158,51)" fg:x="930" fg:w="1"/><text x="75.0088%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7588%" y="341" width="0.0804%" height="15" fill="rgb(235,29,51)" fg:x="930" fg:w="1"/><text x="75.0088%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.7588%" y="325" width="0.0804%" height="15" fill="rgb(215,181,18)" fg:x="930" fg:w="1"/><text x="75.0088%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="74.7588%" y="309" width="0.0804%" height="15" fill="rgb(227,125,34)" fg:x="930" fg:w="1"/><text x="75.0088%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7588%" y="293" width="0.0804%" height="15" fill="rgb(230,197,49)" fg:x="930" fg:w="1"/><text x="75.0088%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.7588%" y="277" width="0.0804%" height="15" fill="rgb(239,141,16)" fg:x="930" fg:w="1"/><text x="75.0088%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.7588%" y="261" width="0.0804%" height="15" fill="rgb(225,105,43)" fg:x="930" fg:w="1"/><text x="75.0088%" y="271.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="74.7588%" y="501" width="0.1608%" height="15" fill="rgb(214,131,14)" fg:x="930" fg:w="2"/><text x="75.0088%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="74.7588%" y="485" width="0.1608%" height="15" fill="rgb(229,177,11)" fg:x="930" fg:w="2"/><text x="75.0088%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="74.7588%" y="469" width="0.1608%" height="15" fill="rgb(231,180,14)" fg:x="930" fg:w="2"/><text x="75.0088%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="74.8392%" y="453" width="0.0804%" height="15" fill="rgb(232,88,2)" fg:x="931" fg:w="1"/><text x="75.0892%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.8392%" y="437" width="0.0804%" height="15" fill="rgb(205,220,8)" fg:x="931" fg:w="1"/><text x="75.0892%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.8392%" y="421" width="0.0804%" height="15" fill="rgb(225,23,53)" fg:x="931" fg:w="1"/><text x="75.0892%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.8392%" y="405" width="0.0804%" height="15" fill="rgb(213,62,29)" fg:x="931" fg:w="1"/><text x="75.0892%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.8392%" y="389" width="0.0804%" height="15" fill="rgb(227,75,7)" fg:x="931" fg:w="1"/><text x="75.0892%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.8392%" y="373" width="0.0804%" height="15" fill="rgb(207,105,14)" fg:x="931" fg:w="1"/><text x="75.0892%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.8392%" y="357" width="0.0804%" height="15" fill="rgb(245,62,29)" fg:x="931" fg:w="1"/><text x="75.0892%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.8392%" y="341" width="0.0804%" height="15" fill="rgb(236,202,4)" fg:x="931" fg:w="1"/><text x="75.0892%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.8392%" y="325" width="0.0804%" height="15" fill="rgb(250,67,1)" fg:x="931" fg:w="1"/><text x="75.0892%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.8392%" y="309" width="0.0804%" height="15" fill="rgb(253,115,44)" fg:x="931" fg:w="1"/><text x="75.0892%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.8392%" y="293" width="0.0804%" height="15" fill="rgb(251,139,18)" fg:x="931" fg:w="1"/><text x="75.0892%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.9196%" y="341" width="0.0804%" height="15" fill="rgb(218,22,32)" fg:x="932" fg:w="1"/><text x="75.1696%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.9196%" y="325" width="0.0804%" height="15" fill="rgb(243,53,5)" fg:x="932" fg:w="1"/><text x="75.1696%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="74.9196%" y="309" width="0.0804%" height="15" fill="rgb(227,56,16)" fg:x="932" fg:w="1"/><text x="75.1696%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="74.9196%" y="293" width="0.0804%" height="15" fill="rgb(245,53,0)" fg:x="932" fg:w="1"/><text x="75.1696%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="74.9196%" y="277" width="0.0804%" height="15" fill="rgb(216,170,35)" fg:x="932" fg:w="1"/><text x="75.1696%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="74.9196%" y="261" width="0.0804%" height="15" fill="rgb(211,200,8)" fg:x="932" fg:w="1"/><text x="75.1696%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.9196%" y="245" width="0.0804%" height="15" fill="rgb(228,204,44)" fg:x="932" fg:w="1"/><text x="75.1696%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="74.9196%" y="229" width="0.0804%" height="15" fill="rgb(214,121,17)" fg:x="932" fg:w="1"/><text x="75.1696%" y="239.50"></text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="74.9196%" y="501" width="0.1608%" height="15" fill="rgb(233,64,38)" fg:x="932" fg:w="2"/><text x="75.1696%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="74.9196%" y="485" width="0.1608%" height="15" fill="rgb(253,54,19)" fg:x="932" fg:w="2"/><text x="75.1696%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="74.9196%" y="469" width="0.1608%" height="15" fill="rgb(253,94,18)" fg:x="932" fg:w="2"/><text x="75.1696%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="74.9196%" y="453" width="0.1608%" height="15" fill="rgb(227,57,52)" fg:x="932" fg:w="2"/><text x="75.1696%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="74.9196%" y="437" width="0.1608%" height="15" fill="rgb(230,228,50)" fg:x="932" fg:w="2"/><text x="75.1696%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="74.9196%" y="421" width="0.1608%" height="15" fill="rgb(217,205,27)" fg:x="932" fg:w="2"/><text x="75.1696%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="74.9196%" y="405" width="0.1608%" height="15" fill="rgb(252,71,50)" fg:x="932" fg:w="2"/><text x="75.1696%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="74.9196%" y="389" width="0.1608%" height="15" fill="rgb(209,86,4)" fg:x="932" fg:w="2"/><text x="75.1696%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="74.9196%" y="373" width="0.1608%" height="15" fill="rgb(229,94,0)" fg:x="932" fg:w="2"/><text x="75.1696%" y="383.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="74.9196%" y="357" width="0.1608%" height="15" fill="rgb(252,223,21)" fg:x="932" fg:w="2"/><text x="75.1696%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.0000%" y="341" width="0.0804%" height="15" fill="rgb(230,210,4)" fg:x="933" fg:w="1"/><text x="75.2500%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="75.0000%" y="325" width="0.0804%" height="15" fill="rgb(240,149,38)" fg:x="933" fg:w="1"/><text x="75.2500%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (935 samples, 75.16%)</title><rect x="0.0000%" y="693" width="75.1608%" height="15" fill="rgb(254,105,20)" fg:x="0" fg:w="935"/><text x="0.2500%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (935 samples, 75.16%)</title><rect x="0.0000%" y="677" width="75.1608%" height="15" fill="rgb(253,87,46)" fg:x="0" fg:w="935"/><text x="0.2500%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (935 samples, 75.16%)</title><rect x="0.0000%" y="661" width="75.1608%" height="15" fill="rgb(253,116,33)" fg:x="0" fg:w="935"/><text x="0.2500%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (818 samples, 65.76%)</title><rect x="9.4051%" y="645" width="65.7556%" height="15" fill="rgb(229,198,5)" fg:x="117" fg:w="818"/><text x="9.6551%" y="655.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (818 samples, 65.76%)</title><rect x="9.4051%" y="629" width="65.7556%" height="15" fill="rgb(242,38,37)" fg:x="117" fg:w="818"/><text x="9.6551%" y="639.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (818 samples, 65.76%)</title><rect x="9.4051%" y="613" width="65.7556%" height="15" fill="rgb(242,69,53)" fg:x="117" fg:w="818"/><text x="9.6551%" y="623.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (818 samples, 65.76%)</title><rect x="9.4051%" y="597" width="65.7556%" height="15" fill="rgb(249,80,16)" fg:x="117" fg:w="818"/><text x="9.6551%" y="607.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (818 samples, 65.76%)</title><rect x="9.4051%" y="581" width="65.7556%" height="15" fill="rgb(206,128,11)" fg:x="117" fg:w="818"/><text x="9.6551%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (818 samples, 65.76%)</title><rect x="9.4051%" y="565" width="65.7556%" height="15" fill="rgb(212,35,20)" fg:x="117" fg:w="818"/><text x="9.6551%" y="575.50">&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (818 samples, 65.76%)</title><rect x="9.4051%" y="549" width="65.7556%" height="15" fill="rgb(236,79,13)" fg:x="117" fg:w="818"/><text x="9.6551%" y="559.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (818 samples, 65.76%)</title><rect x="9.4051%" y="533" width="65.7556%" height="15" fill="rgb(233,123,3)" fg:x="117" fg:w="818"/><text x="9.6551%" y="543.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (5 samples, 0.40%)</title><rect x="74.7588%" y="517" width="0.4019%" height="15" fill="rgb(214,93,52)" fg:x="930" fg:w="5"/><text x="75.0088%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="75.0804%" y="501" width="0.0804%" height="15" fill="rgb(251,37,40)" fg:x="934" fg:w="1"/><text x="75.3304%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="75.0804%" y="485" width="0.0804%" height="15" fill="rgb(227,80,54)" fg:x="934" fg:w="1"/><text x="75.3304%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.1608%" y="645" width="0.0804%" height="15" fill="rgb(254,48,11)" fg:x="935" fg:w="1"/><text x="75.4108%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (1 samples, 0.08%)</title><rect x="75.1608%" y="629" width="0.0804%" height="15" fill="rgb(235,193,26)" fg:x="935" fg:w="1"/><text x="75.4108%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.1608%" y="613" width="0.0804%" height="15" fill="rgb(229,99,21)" fg:x="935" fg:w="1"/><text x="75.4108%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="75.1608%" y="597" width="0.0804%" height="15" fill="rgb(211,140,41)" fg:x="935" fg:w="1"/><text x="75.4108%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.1608%" y="581" width="0.0804%" height="15" fill="rgb(240,227,30)" fg:x="935" fg:w="1"/><text x="75.4108%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.1608%" y="565" width="0.0804%" height="15" fill="rgb(215,224,45)" fg:x="935" fg:w="1"/><text x="75.4108%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.1608%" y="549" width="0.0804%" height="15" fill="rgb(206,123,31)" fg:x="935" fg:w="1"/><text x="75.4108%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.1608%" y="533" width="0.0804%" height="15" fill="rgb(210,138,16)" fg:x="935" fg:w="1"/><text x="75.4108%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.1608%" y="517" width="0.0804%" height="15" fill="rgb(228,57,28)" fg:x="935" fg:w="1"/><text x="75.4108%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1608%" y="501" width="0.0804%" height="15" fill="rgb(242,170,10)" fg:x="935" fg:w="1"/><text x="75.4108%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="75.3215%" y="565" width="0.1608%" height="15" fill="rgb(228,214,39)" fg:x="937" fg:w="2"/><text x="75.5715%" y="575.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="75.3215%" y="549" width="0.1608%" height="15" fill="rgb(218,179,33)" fg:x="937" fg:w="2"/><text x="75.5715%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="75.3215%" y="533" width="0.1608%" height="15" fill="rgb(235,193,39)" fg:x="937" fg:w="2"/><text x="75.5715%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="75.3215%" y="517" width="0.1608%" height="15" fill="rgb(219,221,36)" fg:x="937" fg:w="2"/><text x="75.5715%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.4019%" y="501" width="0.0804%" height="15" fill="rgb(248,218,19)" fg:x="938" fg:w="1"/><text x="75.6519%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.4019%" y="485" width="0.0804%" height="15" fill="rgb(205,50,9)" fg:x="938" fg:w="1"/><text x="75.6519%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.4019%" y="469" width="0.0804%" height="15" fill="rgb(238,81,28)" fg:x="938" fg:w="1"/><text x="75.6519%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.24%)</title><rect x="75.3215%" y="597" width="0.2412%" height="15" fill="rgb(235,110,19)" fg:x="937" fg:w="3"/><text x="75.5715%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="75.3215%" y="581" width="0.2412%" height="15" fill="rgb(214,7,14)" fg:x="937" fg:w="3"/><text x="75.5715%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="75.4823%" y="565" width="0.0804%" height="15" fill="rgb(211,77,3)" fg:x="939" fg:w="1"/><text x="75.7323%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.40%)</title><rect x="75.2412%" y="645" width="0.4019%" height="15" fill="rgb(229,5,9)" fg:x="936" fg:w="5"/><text x="75.4912%" y="655.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.32%)</title><rect x="75.3215%" y="629" width="0.3215%" height="15" fill="rgb(225,90,11)" fg:x="937" fg:w="4"/><text x="75.5715%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="75.3215%" y="613" width="0.3215%" height="15" fill="rgb(242,56,8)" fg:x="937" fg:w="4"/><text x="75.5715%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="75.5627%" y="597" width="0.0804%" height="15" fill="rgb(249,212,39)" fg:x="940" fg:w="1"/><text x="75.8127%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="75.5627%" y="581" width="0.0804%" height="15" fill="rgb(236,90,9)" fg:x="940" fg:w="1"/><text x="75.8127%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="75.5627%" y="565" width="0.0804%" height="15" fill="rgb(206,88,35)" fg:x="940" fg:w="1"/><text x="75.8127%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.5627%" y="549" width="0.0804%" height="15" fill="rgb(205,126,30)" fg:x="940" fg:w="1"/><text x="75.8127%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.5627%" y="533" width="0.0804%" height="15" fill="rgb(230,176,12)" fg:x="940" fg:w="1"/><text x="75.8127%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="75.5627%" y="517" width="0.0804%" height="15" fill="rgb(243,19,9)" fg:x="940" fg:w="1"/><text x="75.8127%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.5627%" y="501" width="0.0804%" height="15" fill="rgb(245,171,17)" fg:x="940" fg:w="1"/><text x="75.8127%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.5627%" y="485" width="0.0804%" height="15" fill="rgb(227,52,21)" fg:x="940" fg:w="1"/><text x="75.8127%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.5627%" y="469" width="0.0804%" height="15" fill="rgb(238,69,14)" fg:x="940" fg:w="1"/><text x="75.8127%" y="479.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.5627%" y="453" width="0.0804%" height="15" fill="rgb(241,156,39)" fg:x="940" fg:w="1"/><text x="75.8127%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.5627%" y="437" width="0.0804%" height="15" fill="rgb(212,227,28)" fg:x="940" fg:w="1"/><text x="75.8127%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.5627%" y="421" width="0.0804%" height="15" fill="rgb(209,118,27)" fg:x="940" fg:w="1"/><text x="75.8127%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.5627%" y="405" width="0.0804%" height="15" fill="rgb(226,102,5)" fg:x="940" fg:w="1"/><text x="75.8127%" y="415.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="75.5627%" y="389" width="0.0804%" height="15" fill="rgb(223,34,3)" fg:x="940" fg:w="1"/><text x="75.8127%" y="399.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="75.5627%" y="373" width="0.0804%" height="15" fill="rgb(221,81,38)" fg:x="940" fg:w="1"/><text x="75.8127%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.5627%" y="357" width="0.0804%" height="15" fill="rgb(236,219,28)" fg:x="940" fg:w="1"/><text x="75.8127%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.5627%" y="341" width="0.0804%" height="15" fill="rgb(213,200,14)" fg:x="940" fg:w="1"/><text x="75.8127%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.5627%" y="325" width="0.0804%" height="15" fill="rgb(240,33,19)" fg:x="940" fg:w="1"/><text x="75.8127%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.5627%" y="309" width="0.0804%" height="15" fill="rgb(233,113,27)" fg:x="940" fg:w="1"/><text x="75.8127%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.5627%" y="293" width="0.0804%" height="15" fill="rgb(220,221,18)" fg:x="940" fg:w="1"/><text x="75.8127%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.5627%" y="277" width="0.0804%" height="15" fill="rgb(238,92,8)" fg:x="940" fg:w="1"/><text x="75.8127%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.5627%" y="261" width="0.0804%" height="15" fill="rgb(222,164,16)" fg:x="940" fg:w="1"/><text x="75.8127%" y="271.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.6431%" y="517" width="0.0804%" height="15" fill="rgb(241,119,3)" fg:x="941" fg:w="1"/><text x="75.8931%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.6431%" y="501" width="0.0804%" height="15" fill="rgb(241,44,8)" fg:x="941" fg:w="1"/><text x="75.8931%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.6431%" y="485" width="0.0804%" height="15" fill="rgb(230,36,40)" fg:x="941" fg:w="1"/><text x="75.8931%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.6431%" y="469" width="0.0804%" height="15" fill="rgb(243,16,36)" fg:x="941" fg:w="1"/><text x="75.8931%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="75.6431%" y="565" width="0.1608%" height="15" fill="rgb(231,4,26)" fg:x="941" fg:w="2"/><text x="75.8931%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.6431%" y="549" width="0.1608%" height="15" fill="rgb(240,9,31)" fg:x="941" fg:w="2"/><text x="75.8931%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.6431%" y="533" width="0.1608%" height="15" fill="rgb(207,173,15)" fg:x="941" fg:w="2"/><text x="75.8931%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7235%" y="517" width="0.0804%" height="15" fill="rgb(224,192,53)" fg:x="942" fg:w="1"/><text x="75.9735%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.7235%" y="501" width="0.0804%" height="15" fill="rgb(223,67,28)" fg:x="942" fg:w="1"/><text x="75.9735%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.8039%" y="565" width="0.2412%" height="15" fill="rgb(211,20,47)" fg:x="943" fg:w="3"/><text x="76.0539%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="75.8039%" y="549" width="0.2412%" height="15" fill="rgb(240,228,2)" fg:x="943" fg:w="3"/><text x="76.0539%" y="559.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="75.8039%" y="533" width="0.2412%" height="15" fill="rgb(248,151,12)" fg:x="943" fg:w="3"/><text x="76.0539%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0450%" y="517" width="0.0804%" height="15" fill="rgb(244,8,39)" fg:x="946" fg:w="1"/><text x="76.2950%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0450%" y="501" width="0.0804%" height="15" fill="rgb(222,26,8)" fg:x="946" fg:w="1"/><text x="76.2950%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1254%" y="517" width="0.0804%" height="15" fill="rgb(213,106,44)" fg:x="947" fg:w="1"/><text x="76.3754%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1254%" y="501" width="0.0804%" height="15" fill="rgb(214,129,20)" fg:x="947" fg:w="1"/><text x="76.3754%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1254%" y="485" width="0.0804%" height="15" fill="rgb(212,32,13)" fg:x="947" fg:w="1"/><text x="76.3754%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1254%" y="469" width="0.0804%" height="15" fill="rgb(208,168,33)" fg:x="947" fg:w="1"/><text x="76.3754%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.1254%" y="453" width="0.0804%" height="15" fill="rgb(231,207,8)" fg:x="947" fg:w="1"/><text x="76.3754%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.2058%" y="485" width="0.0804%" height="15" fill="rgb(235,219,23)" fg:x="948" fg:w="1"/><text x="76.4558%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.2058%" y="469" width="0.0804%" height="15" fill="rgb(226,216,26)" fg:x="948" fg:w="1"/><text x="76.4558%" y="479.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.72%)</title><rect x="75.6431%" y="629" width="0.7235%" height="15" fill="rgb(239,137,16)" fg:x="941" fg:w="9"/><text x="75.8931%" y="639.50"></text></g><g><title>engine::session::Session::save_entity_changes (9 samples, 0.72%)</title><rect x="75.6431%" y="613" width="0.7235%" height="15" fill="rgb(207,12,36)" fg:x="941" fg:w="9"/><text x="75.8931%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (9 samples, 0.72%)</title><rect x="75.6431%" y="597" width="0.7235%" height="15" fill="rgb(210,214,24)" fg:x="941" fg:w="9"/><text x="75.8931%" y="607.50"></text></g><g><title>engine::session::Session::check_for_changes (9 samples, 0.72%)</title><rect x="75.6431%" y="581" width="0.7235%" height="15" fill="rgb(206,56,30)" fg:x="941" fg:w="9"/><text x="75.8931%" y="591.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.32%)</title><rect x="76.0450%" y="565" width="0.3215%" height="15" fill="rgb(228,143,26)" fg:x="946" fg:w="4"/><text x="76.2950%" y="575.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="76.0450%" y="549" width="0.3215%" height="15" fill="rgb(216,218,46)" fg:x="946" fg:w="4"/><text x="76.2950%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="76.0450%" y="533" width="0.3215%" height="15" fill="rgb(206,6,19)" fg:x="946" fg:w="4"/><text x="76.2950%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="76.2058%" y="517" width="0.1608%" height="15" fill="rgb(239,177,51)" fg:x="948" fg:w="2"/><text x="76.4558%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="76.2058%" y="501" width="0.1608%" height="15" fill="rgb(216,55,25)" fg:x="948" fg:w="2"/><text x="76.4558%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="76.2862%" y="485" width="0.0804%" height="15" fill="rgb(231,163,29)" fg:x="949" fg:w="1"/><text x="76.5362%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2862%" y="469" width="0.0804%" height="15" fill="rgb(232,149,50)" fg:x="949" fg:w="1"/><text x="76.5362%" y="479.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="76.3666%" y="613" width="0.0804%" height="15" fill="rgb(223,142,48)" fg:x="950" fg:w="1"/><text x="76.6166%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.3666%" y="597" width="0.0804%" height="15" fill="rgb(245,83,23)" fg:x="950" fg:w="1"/><text x="76.6166%" y="607.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="76.3666%" y="581" width="0.0804%" height="15" fill="rgb(224,63,2)" fg:x="950" fg:w="1"/><text x="76.6166%" y="591.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="76.3666%" y="565" width="0.0804%" height="15" fill="rgb(218,65,53)" fg:x="950" fg:w="1"/><text x="76.6166%" y="575.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="76.3666%" y="549" width="0.0804%" height="15" fill="rgb(221,84,29)" fg:x="950" fg:w="1"/><text x="76.6166%" y="559.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="76.3666%" y="533" width="0.0804%" height="15" fill="rgb(234,0,32)" fg:x="950" fg:w="1"/><text x="76.6166%" y="543.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="76.3666%" y="517" width="0.0804%" height="15" fill="rgb(206,20,16)" fg:x="950" fg:w="1"/><text x="76.6166%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Exit&gt;::serialize (1 samples, 0.08%)</title><rect x="76.3666%" y="501" width="0.0804%" height="15" fill="rgb(244,172,18)" fg:x="950" fg:w="1"/><text x="76.6166%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.3666%" y="485" width="0.0804%" height="15" fill="rgb(254,133,1)" fg:x="950" fg:w="1"/><text x="76.6166%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3666%" y="469" width="0.0804%" height="15" fill="rgb(222,206,41)" fg:x="950" fg:w="1"/><text x="76.6166%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3666%" y="453" width="0.0804%" height="15" fill="rgb(212,3,42)" fg:x="950" fg:w="1"/><text x="76.6166%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3666%" y="437" width="0.0804%" height="15" fill="rgb(241,11,4)" fg:x="950" fg:w="1"/><text x="76.6166%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="76.4469%" y="549" width="0.1608%" height="15" fill="rgb(205,19,26)" fg:x="951" fg:w="2"/><text x="76.6969%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.4469%" y="533" width="0.1608%" height="15" fill="rgb(210,179,32)" fg:x="951" fg:w="2"/><text x="76.6969%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.4469%" y="517" width="0.1608%" height="15" fill="rgb(227,116,49)" fg:x="951" fg:w="2"/><text x="76.6969%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (3 samples, 0.24%)</title><rect x="76.4469%" y="581" width="0.2412%" height="15" fill="rgb(211,146,6)" fg:x="951" fg:w="3"/><text x="76.6969%" y="591.50"></text></g><g><title>engine::session::Session::check_for_changes (3 samples, 0.24%)</title><rect x="76.4469%" y="565" width="0.2412%" height="15" fill="rgb(219,44,39)" fg:x="951" fg:w="3"/><text x="76.6969%" y="575.50"></text></g><g><title>kernel::compare::any_entity_changes (1 samples, 0.08%)</title><rect x="76.6077%" y="549" width="0.0804%" height="15" fill="rgb(234,128,11)" fg:x="953" fg:w="1"/><text x="76.8577%" y="559.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6077%" y="533" width="0.0804%" height="15" fill="rgb(220,183,53)" fg:x="953" fg:w="1"/><text x="76.8577%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6077%" y="517" width="0.0804%" height="15" fill="rgb(213,219,32)" fg:x="953" fg:w="1"/><text x="76.8577%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="76.6077%" y="501" width="0.0804%" height="15" fill="rgb(232,156,16)" fg:x="953" fg:w="1"/><text x="76.8577%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6077%" y="485" width="0.0804%" height="15" fill="rgb(246,135,34)" fg:x="953" fg:w="1"/><text x="76.8577%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.6077%" y="469" width="0.0804%" height="15" fill="rgb(241,99,0)" fg:x="953" fg:w="1"/><text x="76.8577%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.6077%" y="453" width="0.0804%" height="15" fill="rgb(222,103,45)" fg:x="953" fg:w="1"/><text x="76.8577%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6077%" y="437" width="0.0804%" height="15" fill="rgb(212,57,4)" fg:x="953" fg:w="1"/><text x="76.8577%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="76.6077%" y="421" width="0.0804%" height="15" fill="rgb(215,68,47)" fg:x="953" fg:w="1"/><text x="76.8577%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6077%" y="405" width="0.0804%" height="15" fill="rgb(230,84,2)" fg:x="953" fg:w="1"/><text x="76.8577%" y="415.50"></text></g><g><title>engine::session::Session::flush (4 samples, 0.32%)</title><rect x="76.4469%" y="613" width="0.3215%" height="15" fill="rgb(220,102,14)" fg:x="951" fg:w="4"/><text x="76.6969%" y="623.50"></text></g><g><title>engine::session::Session::save_entity_changes (4 samples, 0.32%)</title><rect x="76.4469%" y="597" width="0.3215%" height="15" fill="rgb(240,10,32)" fg:x="951" fg:w="4"/><text x="76.6969%" y="607.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="76.6881%" y="581" width="0.0804%" height="15" fill="rgb(215,47,27)" fg:x="954" fg:w="1"/><text x="76.9381%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="76.6881%" y="565" width="0.0804%" height="15" fill="rgb(233,188,43)" fg:x="954" fg:w="1"/><text x="76.9381%" y="575.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="76.7685%" y="613" width="0.0804%" height="15" fill="rgb(253,190,1)" fg:x="955" fg:w="1"/><text x="77.0185%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.7685%" y="597" width="0.0804%" height="15" fill="rgb(206,114,52)" fg:x="955" fg:w="1"/><text x="77.0185%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.7685%" y="581" width="0.0804%" height="15" fill="rgb(233,120,37)" fg:x="955" fg:w="1"/><text x="77.0185%" y="591.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="76.7685%" y="565" width="0.0804%" height="15" fill="rgb(214,52,39)" fg:x="955" fg:w="1"/><text x="77.0185%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7685%" y="549" width="0.0804%" height="15" fill="rgb(223,80,29)" fg:x="955" fg:w="1"/><text x="77.0185%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7685%" y="533" width="0.0804%" height="15" fill="rgb(230,101,40)" fg:x="955" fg:w="1"/><text x="77.0185%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="76.7685%" y="517" width="0.0804%" height="15" fill="rgb(219,211,8)" fg:x="955" fg:w="1"/><text x="77.0185%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7685%" y="501" width="0.0804%" height="15" fill="rgb(252,126,28)" fg:x="955" fg:w="1"/><text x="77.0185%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (16 samples, 1.29%)</title><rect x="75.6431%" y="645" width="1.2862%" height="15" fill="rgb(215,56,38)" fg:x="941" fg:w="16"/><text x="75.8931%" y="655.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (7 samples, 0.56%)</title><rect x="76.3666%" y="629" width="0.5627%" height="15" fill="rgb(249,55,44)" fg:x="950" fg:w="7"/><text x="76.6166%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="76.8489%" y="613" width="0.0804%" height="15" fill="rgb(220,221,32)" fg:x="956" fg:w="1"/><text x="77.0989%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="76.8489%" y="597" width="0.0804%" height="15" fill="rgb(212,216,41)" fg:x="956" fg:w="1"/><text x="77.0989%" y="607.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.8489%" y="581" width="0.0804%" height="15" fill="rgb(228,213,43)" fg:x="956" fg:w="1"/><text x="77.0989%" y="591.50"></text></g><g><title>kernel::model::Entity::gid (1 samples, 0.08%)</title><rect x="76.8489%" y="565" width="0.0804%" height="15" fill="rgb(211,31,26)" fg:x="956" fg:w="1"/><text x="77.0989%" y="575.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="76.8489%" y="549" width="0.0804%" height="15" fill="rgb(229,202,19)" fg:x="956" fg:w="1"/><text x="77.0989%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.9293%" y="613" width="0.0804%" height="15" fill="rgb(229,105,46)" fg:x="957" fg:w="1"/><text x="77.1793%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="76.9293%" y="597" width="0.0804%" height="15" fill="rgb(235,108,1)" fg:x="957" fg:w="1"/><text x="77.1793%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="76.9293%" y="581" width="0.0804%" height="15" fill="rgb(245,111,35)" fg:x="957" fg:w="1"/><text x="77.1793%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.9293%" y="565" width="0.0804%" height="15" fill="rgb(219,185,31)" fg:x="957" fg:w="1"/><text x="77.1793%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.9293%" y="549" width="0.0804%" height="15" fill="rgb(214,4,43)" fg:x="957" fg:w="1"/><text x="77.1793%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.9293%" y="533" width="0.0804%" height="15" fill="rgb(235,227,40)" fg:x="957" fg:w="1"/><text x="77.1793%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.9293%" y="517" width="0.0804%" height="15" fill="rgb(230,88,30)" fg:x="957" fg:w="1"/><text x="77.1793%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.9293%" y="501" width="0.0804%" height="15" fill="rgb(216,217,1)" fg:x="957" fg:w="1"/><text x="77.1793%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.9293%" y="485" width="0.0804%" height="15" fill="rgb(248,139,50)" fg:x="957" fg:w="1"/><text x="77.1793%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.9293%" y="469" width="0.0804%" height="15" fill="rgb(233,1,21)" fg:x="957" fg:w="1"/><text x="77.1793%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.9293%" y="453" width="0.0804%" height="15" fill="rgb(215,183,12)" fg:x="957" fg:w="1"/><text x="77.1793%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.9293%" y="437" width="0.0804%" height="15" fill="rgb(229,104,42)" fg:x="957" fg:w="1"/><text x="77.1793%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.9293%" y="421" width="0.0804%" height="15" fill="rgb(243,34,48)" fg:x="957" fg:w="1"/><text x="77.1793%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.9293%" y="405" width="0.0804%" height="15" fill="rgb(239,11,44)" fg:x="957" fg:w="1"/><text x="77.1793%" y="415.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="76.9293%" y="389" width="0.0804%" height="15" fill="rgb(231,98,35)" fg:x="957" fg:w="1"/><text x="77.1793%" y="399.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.0096%" y="565" width="0.0804%" height="15" fill="rgb(233,28,25)" fg:x="958" fg:w="1"/><text x="77.2596%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.0096%" y="549" width="0.0804%" height="15" fill="rgb(234,123,11)" fg:x="958" fg:w="1"/><text x="77.2596%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.0096%" y="533" width="0.0804%" height="15" fill="rgb(220,69,3)" fg:x="958" fg:w="1"/><text x="77.2596%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.0096%" y="517" width="0.0804%" height="15" fill="rgb(214,64,36)" fg:x="958" fg:w="1"/><text x="77.2596%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.0096%" y="501" width="0.0804%" height="15" fill="rgb(211,138,32)" fg:x="958" fg:w="1"/><text x="77.2596%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.0096%" y="485" width="0.0804%" height="15" fill="rgb(213,118,47)" fg:x="958" fg:w="1"/><text x="77.2596%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.0096%" y="469" width="0.0804%" height="15" fill="rgb(243,124,49)" fg:x="958" fg:w="1"/><text x="77.2596%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.0096%" y="453" width="0.0804%" height="15" fill="rgb(221,30,28)" fg:x="958" fg:w="1"/><text x="77.2596%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.0900%" y="549" width="0.0804%" height="15" fill="rgb(246,37,13)" fg:x="959" fg:w="1"/><text x="77.3400%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.0900%" y="533" width="0.0804%" height="15" fill="rgb(249,66,14)" fg:x="959" fg:w="1"/><text x="77.3400%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.0900%" y="517" width="0.0804%" height="15" fill="rgb(213,166,5)" fg:x="959" fg:w="1"/><text x="77.3400%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.0900%" y="501" width="0.0804%" height="15" fill="rgb(221,66,24)" fg:x="959" fg:w="1"/><text x="77.3400%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="77.0096%" y="581" width="0.2412%" height="15" fill="rgb(210,132,17)" fg:x="958" fg:w="3"/><text x="77.2596%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="77.0900%" y="565" width="0.1608%" height="15" fill="rgb(243,202,5)" fg:x="959" fg:w="2"/><text x="77.3400%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1704%" y="549" width="0.0804%" height="15" fill="rgb(233,70,48)" fg:x="960" fg:w="1"/><text x="77.4204%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1704%" y="533" width="0.0804%" height="15" fill="rgb(238,41,26)" fg:x="960" fg:w="1"/><text x="77.4204%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.1704%" y="517" width="0.0804%" height="15" fill="rgb(241,19,31)" fg:x="960" fg:w="1"/><text x="77.4204%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1704%" y="501" width="0.0804%" height="15" fill="rgb(214,76,10)" fg:x="960" fg:w="1"/><text x="77.4204%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2508%" y="549" width="0.0804%" height="15" fill="rgb(254,202,22)" fg:x="961" fg:w="1"/><text x="77.5008%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3312%" y="501" width="0.0804%" height="15" fill="rgb(214,72,24)" fg:x="962" fg:w="1"/><text x="77.5812%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.2508%" y="581" width="0.2412%" height="15" fill="rgb(221,92,46)" fg:x="961" fg:w="3"/><text x="77.5008%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="77.2508%" y="565" width="0.2412%" height="15" fill="rgb(246,13,50)" fg:x="961" fg:w="3"/><text x="77.5008%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.3312%" y="549" width="0.1608%" height="15" fill="rgb(240,165,38)" fg:x="962" fg:w="2"/><text x="77.5812%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.3312%" y="533" width="0.1608%" height="15" fill="rgb(241,24,51)" fg:x="962" fg:w="2"/><text x="77.5812%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.3312%" y="517" width="0.1608%" height="15" fill="rgb(227,51,44)" fg:x="962" fg:w="2"/><text x="77.5812%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.4116%" y="501" width="0.0804%" height="15" fill="rgb(231,121,3)" fg:x="963" fg:w="1"/><text x="77.6616%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4116%" y="485" width="0.0804%" height="15" fill="rgb(245,3,41)" fg:x="963" fg:w="1"/><text x="77.6616%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.4920%" y="565" width="0.0804%" height="15" fill="rgb(214,13,26)" fg:x="964" fg:w="1"/><text x="77.7420%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.5723%" y="501" width="0.0804%" height="15" fill="rgb(252,75,11)" fg:x="965" fg:w="1"/><text x="77.8223%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5723%" y="485" width="0.0804%" height="15" fill="rgb(218,226,17)" fg:x="965" fg:w="1"/><text x="77.8223%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.5723%" y="565" width="0.1608%" height="15" fill="rgb(248,89,38)" fg:x="965" fg:w="2"/><text x="77.8223%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.5723%" y="549" width="0.1608%" height="15" fill="rgb(237,73,46)" fg:x="965" fg:w="2"/><text x="77.8223%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.5723%" y="533" width="0.1608%" height="15" fill="rgb(242,78,33)" fg:x="965" fg:w="2"/><text x="77.8223%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.5723%" y="517" width="0.1608%" height="15" fill="rgb(235,60,3)" fg:x="965" fg:w="2"/><text x="77.8223%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.6527%" y="501" width="0.0804%" height="15" fill="rgb(216,172,19)" fg:x="966" fg:w="1"/><text x="77.9027%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="77.6527%" y="485" width="0.0804%" height="15" fill="rgb(227,6,42)" fg:x="966" fg:w="1"/><text x="77.9027%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.6527%" y="469" width="0.0804%" height="15" fill="rgb(223,207,42)" fg:x="966" fg:w="1"/><text x="77.9027%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.6527%" y="453" width="0.0804%" height="15" fill="rgb(246,138,30)" fg:x="966" fg:w="1"/><text x="77.9027%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8939%" y="533" width="0.0804%" height="15" fill="rgb(251,199,47)" fg:x="969" fg:w="1"/><text x="78.1439%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.8939%" y="517" width="0.0804%" height="15" fill="rgb(228,218,44)" fg:x="969" fg:w="1"/><text x="78.1439%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="77.9743%" y="533" width="0.1608%" height="15" fill="rgb(220,68,6)" fg:x="970" fg:w="2"/><text x="78.2243%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.9743%" y="517" width="0.1608%" height="15" fill="rgb(240,60,26)" fg:x="970" fg:w="2"/><text x="78.2243%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="77.9743%" y="501" width="0.1608%" height="15" fill="rgb(211,200,19)" fg:x="970" fg:w="2"/><text x="78.2243%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="78.0547%" y="485" width="0.0804%" height="15" fill="rgb(242,145,30)" fg:x="971" fg:w="1"/><text x="78.3047%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.0547%" y="469" width="0.0804%" height="15" fill="rgb(225,64,13)" fg:x="971" fg:w="1"/><text x="78.3047%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.0547%" y="453" width="0.0804%" height="15" fill="rgb(218,103,35)" fg:x="971" fg:w="1"/><text x="78.3047%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1350%" y="533" width="0.0804%" height="15" fill="rgb(216,93,46)" fg:x="972" fg:w="1"/><text x="78.3850%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="78.1350%" y="517" width="0.0804%" height="15" fill="rgb(225,159,27)" fg:x="972" fg:w="1"/><text x="78.3850%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2154%" y="517" width="0.0804%" height="15" fill="rgb(225,204,11)" fg:x="973" fg:w="1"/><text x="78.4654%" y="527.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="77.7331%" y="565" width="0.6431%" height="15" fill="rgb(205,56,4)" fg:x="967" fg:w="8"/><text x="77.9831%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="77.7331%" y="549" width="0.6431%" height="15" fill="rgb(206,6,35)" fg:x="967" fg:w="8"/><text x="77.9831%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="78.2154%" y="533" width="0.1608%" height="15" fill="rgb(247,73,52)" fg:x="973" fg:w="2"/><text x="78.4654%" y="543.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2958%" y="517" width="0.0804%" height="15" fill="rgb(246,97,4)" fg:x="974" fg:w="1"/><text x="78.5458%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.2958%" y="501" width="0.0804%" height="15" fill="rgb(212,37,15)" fg:x="974" fg:w="1"/><text x="78.5458%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.2958%" y="485" width="0.0804%" height="15" fill="rgb(208,130,40)" fg:x="974" fg:w="1"/><text x="78.5458%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.2958%" y="469" width="0.0804%" height="15" fill="rgb(236,55,29)" fg:x="974" fg:w="1"/><text x="78.5458%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2958%" y="453" width="0.0804%" height="15" fill="rgb(209,156,45)" fg:x="974" fg:w="1"/><text x="78.5458%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2958%" y="437" width="0.0804%" height="15" fill="rgb(249,107,4)" fg:x="974" fg:w="1"/><text x="78.5458%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2958%" y="421" width="0.0804%" height="15" fill="rgb(227,7,13)" fg:x="974" fg:w="1"/><text x="78.5458%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.3762%" y="421" width="0.0804%" height="15" fill="rgb(250,129,14)" fg:x="975" fg:w="1"/><text x="78.6262%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.3762%" y="405" width="0.0804%" height="15" fill="rgb(229,92,13)" fg:x="975" fg:w="1"/><text x="78.6262%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3762%" y="389" width="0.0804%" height="15" fill="rgb(245,98,39)" fg:x="975" fg:w="1"/><text x="78.6262%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3762%" y="373" width="0.0804%" height="15" fill="rgb(234,135,48)" fg:x="975" fg:w="1"/><text x="78.6262%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.3762%" y="357" width="0.0804%" height="15" fill="rgb(230,98,28)" fg:x="975" fg:w="1"/><text x="78.6262%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.3762%" y="437" width="0.1608%" height="15" fill="rgb(223,121,0)" fg:x="975" fg:w="2"/><text x="78.6262%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.4566%" y="421" width="0.0804%" height="15" fill="rgb(234,173,33)" fg:x="976" fg:w="1"/><text x="78.7066%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.4566%" y="405" width="0.0804%" height="15" fill="rgb(245,47,8)" fg:x="976" fg:w="1"/><text x="78.7066%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.5370%" y="437" width="0.0804%" height="15" fill="rgb(205,17,20)" fg:x="977" fg:w="1"/><text x="78.7870%" y="447.50"></text></g><g><title>engine::session::Session::close (24 samples, 1.93%)</title><rect x="76.9293%" y="645" width="1.9293%" height="15" fill="rgb(232,151,16)" fg:x="957" fg:w="24"/><text x="77.1793%" y="655.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (24 samples, 1.93%)</title><rect x="76.9293%" y="629" width="1.9293%" height="15" fill="rgb(208,30,32)" fg:x="957" fg:w="24"/><text x="77.1793%" y="639.50">e..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (23 samples, 1.85%)</title><rect x="77.0096%" y="613" width="1.8489%" height="15" fill="rgb(254,26,3)" fg:x="958" fg:w="23"/><text x="77.2596%" y="623.50">e..</text></g><g><title>engine::session::Session::check_for_changes (23 samples, 1.85%)</title><rect x="77.0096%" y="597" width="1.8489%" height="15" fill="rgb(240,177,30)" fg:x="958" fg:w="23"/><text x="77.2596%" y="607.50">e..</text></g><g><title>kernel::compare::any_entity_changes (17 samples, 1.37%)</title><rect x="77.4920%" y="581" width="1.3666%" height="15" fill="rgb(248,76,44)" fg:x="964" fg:w="17"/><text x="77.7420%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="78.3762%" y="565" width="0.4823%" height="15" fill="rgb(241,186,54)" fg:x="975" fg:w="6"/><text x="78.6262%" y="575.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="78.3762%" y="549" width="0.4823%" height="15" fill="rgb(249,171,29)" fg:x="975" fg:w="6"/><text x="78.6262%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="78.3762%" y="533" width="0.4823%" height="15" fill="rgb(237,151,44)" fg:x="975" fg:w="6"/><text x="78.6262%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="78.3762%" y="517" width="0.4823%" height="15" fill="rgb(228,174,30)" fg:x="975" fg:w="6"/><text x="78.6262%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="78.3762%" y="501" width="0.4823%" height="15" fill="rgb(252,14,37)" fg:x="975" fg:w="6"/><text x="78.6262%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="78.3762%" y="485" width="0.4823%" height="15" fill="rgb(207,111,40)" fg:x="975" fg:w="6"/><text x="78.6262%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="78.3762%" y="469" width="0.4823%" height="15" fill="rgb(248,171,54)" fg:x="975" fg:w="6"/><text x="78.6262%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="78.3762%" y="453" width="0.4823%" height="15" fill="rgb(211,127,2)" fg:x="975" fg:w="6"/><text x="78.6262%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="78.6174%" y="437" width="0.2412%" height="15" fill="rgb(236,87,47)" fg:x="978" fg:w="3"/><text x="78.8674%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="78.6174%" y="421" width="0.2412%" height="15" fill="rgb(223,190,45)" fg:x="978" fg:w="3"/><text x="78.8674%" y="431.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="78.6174%" y="405" width="0.2412%" height="15" fill="rgb(215,5,16)" fg:x="978" fg:w="3"/><text x="78.8674%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::name (2 samples, 0.16%)</title><rect x="79.0193%" y="453" width="0.1608%" height="15" fill="rgb(252,82,33)" fg:x="983" fg:w="2"/><text x="79.2693%" y="463.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="79.0997%" y="437" width="0.0804%" height="15" fill="rgb(247,213,44)" fg:x="984" fg:w="1"/><text x="79.3497%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="79.1801%" y="453" width="0.0804%" height="15" fill="rgb(205,196,44)" fg:x="985" fg:w="1"/><text x="79.4301%" y="463.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="79.1801%" y="437" width="0.0804%" height="15" fill="rgb(237,96,54)" fg:x="985" fg:w="1"/><text x="79.4301%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="79.1801%" y="421" width="0.0804%" height="15" fill="rgb(230,113,34)" fg:x="985" fg:w="1"/><text x="79.4301%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="79.3408%" y="309" width="0.0804%" height="15" fill="rgb(221,224,12)" fg:x="987" fg:w="1"/><text x="79.5908%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="79.3408%" y="293" width="0.0804%" height="15" fill="rgb(219,112,44)" fg:x="987" fg:w="1"/><text x="79.5908%" y="303.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="79.3408%" y="277" width="0.0804%" height="15" fill="rgb(210,31,13)" fg:x="987" fg:w="1"/><text x="79.5908%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="79.2605%" y="357" width="0.2412%" height="15" fill="rgb(230,25,16)" fg:x="986" fg:w="3"/><text x="79.5105%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="79.2605%" y="341" width="0.2412%" height="15" fill="rgb(246,108,53)" fg:x="986" fg:w="3"/><text x="79.5105%" y="351.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="79.3408%" y="325" width="0.1608%" height="15" fill="rgb(241,172,50)" fg:x="987" fg:w="2"/><text x="79.5908%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="79.4212%" y="309" width="0.0804%" height="15" fill="rgb(235,141,10)" fg:x="988" fg:w="1"/><text x="79.6712%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="79.4212%" y="293" width="0.0804%" height="15" fill="rgb(220,174,43)" fg:x="988" fg:w="1"/><text x="79.6712%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4212%" y="277" width="0.0804%" height="15" fill="rgb(215,181,40)" fg:x="988" fg:w="1"/><text x="79.6712%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="79.2605%" y="373" width="0.3215%" height="15" fill="rgb(230,97,2)" fg:x="986" fg:w="4"/><text x="79.5105%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5016%" y="357" width="0.0804%" height="15" fill="rgb(211,25,27)" fg:x="989" fg:w="1"/><text x="79.7516%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5820%" y="341" width="0.0804%" height="15" fill="rgb(230,87,26)" fg:x="990" fg:w="1"/><text x="79.8320%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.6624%" y="325" width="0.0804%" height="15" fill="rgb(227,160,17)" fg:x="991" fg:w="1"/><text x="79.9124%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="79.7428%" y="325" width="0.1608%" height="15" fill="rgb(244,85,34)" fg:x="992" fg:w="2"/><text x="79.9928%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8232%" y="309" width="0.0804%" height="15" fill="rgb(207,70,0)" fg:x="993" fg:w="1"/><text x="80.0732%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1447%" y="309" width="0.0804%" height="15" fill="rgb(223,129,7)" fg:x="997" fg:w="1"/><text x="80.3947%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2251%" y="293" width="0.0804%" height="15" fill="rgb(246,105,7)" fg:x="998" fg:w="1"/><text x="80.4751%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.05%)</title><rect x="80.2251%" y="309" width="1.0450%" height="15" fill="rgb(215,154,42)" fg:x="998" fg:w="13"/><text x="80.4751%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.96%)</title><rect x="80.3055%" y="293" width="0.9646%" height="15" fill="rgb(220,215,30)" fg:x="999" fg:w="12"/><text x="80.5555%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.1897%" y="277" width="0.0804%" height="15" fill="rgb(228,81,51)" fg:x="1010" fg:w="1"/><text x="81.4397%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="81.2701%" y="309" width="0.2412%" height="15" fill="rgb(247,71,54)" fg:x="1011" fg:w="3"/><text x="81.5201%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="81.2701%" y="293" width="0.2412%" height="15" fill="rgb(234,176,34)" fg:x="1011" fg:w="3"/><text x="81.5201%" y="303.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.6720%" y="245" width="0.0804%" height="15" fill="rgb(241,103,54)" fg:x="1016" fg:w="1"/><text x="81.9220%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7524%" y="213" width="0.0804%" height="15" fill="rgb(228,22,34)" fg:x="1017" fg:w="1"/><text x="82.0024%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (50 samples, 4.02%)</title><rect x="81.7524%" y="245" width="4.0193%" height="15" fill="rgb(241,179,48)" fg:x="1017" fg:w="50"/><text x="82.0024%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (50 samples, 4.02%)</title><rect x="81.7524%" y="229" width="4.0193%" height="15" fill="rgb(235,167,37)" fg:x="1017" fg:w="50"/><text x="82.0024%" y="239.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 3.94%)</title><rect x="81.8328%" y="213" width="3.9389%" height="15" fill="rgb(213,109,30)" fg:x="1018" fg:w="49"/><text x="82.0828%" y="223.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 4.34%)</title><rect x="81.5113%" y="293" width="4.3408%" height="15" fill="rgb(222,172,16)" fg:x="1014" fg:w="54"/><text x="81.7613%" y="303.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.34%)</title><rect x="81.5113%" y="277" width="4.3408%" height="15" fill="rgb(233,192,5)" fg:x="1014" fg:w="54"/><text x="81.7613%" y="287.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (54 samples, 4.34%)</title><rect x="81.5113%" y="261" width="4.3408%" height="15" fill="rgb(247,189,41)" fg:x="1014" fg:w="54"/><text x="81.7613%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="85.7717%" y="245" width="0.0804%" height="15" fill="rgb(218,134,47)" fg:x="1067" fg:w="1"/><text x="86.0217%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7717%" y="229" width="0.0804%" height="15" fill="rgb(216,29,3)" fg:x="1067" fg:w="1"/><text x="86.0217%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="85.8521%" y="277" width="0.0804%" height="15" fill="rgb(246,140,12)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.8521%" y="261" width="0.0804%" height="15" fill="rgb(230,136,11)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.8521%" y="245" width="0.0804%" height="15" fill="rgb(247,22,47)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.8521%" y="229" width="0.0804%" height="15" fill="rgb(218,84,22)" fg:x="1068" fg:w="1"/><text x="86.1021%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="85.8521%" y="293" width="0.2412%" height="15" fill="rgb(216,87,39)" fg:x="1068" fg:w="3"/><text x="86.1021%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="85.9325%" y="277" width="0.1608%" height="15" fill="rgb(221,178,8)" fg:x="1069" fg:w="2"/><text x="86.1825%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (58 samples, 4.66%)</title><rect x="81.5113%" y="309" width="4.6624%" height="15" fill="rgb(230,42,11)" fg:x="1014" fg:w="58"/><text x="81.7613%" y="319.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="86.0932%" y="293" width="0.0804%" height="15" fill="rgb(237,229,4)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.0932%" y="277" width="0.0804%" height="15" fill="rgb(222,31,33)" fg:x="1071" fg:w="1"/><text x="86.3432%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (79 samples, 6.35%)</title><rect x="79.9035%" y="325" width="6.3505%" height="15" fill="rgb(210,17,39)" fg:x="994" fg:w="79"/><text x="80.1535%" y="335.50">regex_au..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="86.1736%" y="309" width="0.0804%" height="15" fill="rgb(244,93,20)" fg:x="1072" fg:w="1"/><text x="86.4236%" y="319.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="86.1736%" y="293" width="0.0804%" height="15" fill="rgb(210,40,47)" fg:x="1072" fg:w="1"/><text x="86.4236%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="86.2540%" y="277" width="0.0804%" height="15" fill="rgb(239,211,47)" fg:x="1073" fg:w="1"/><text x="86.5040%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="86.2540%" y="325" width="0.1608%" height="15" fill="rgb(251,223,49)" fg:x="1073" fg:w="2"/><text x="86.5040%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="86.2540%" y="309" width="0.1608%" height="15" fill="rgb(221,149,5)" fg:x="1073" fg:w="2"/><text x="86.5040%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="86.2540%" y="293" width="0.1608%" height="15" fill="rgb(219,224,51)" fg:x="1073" fg:w="2"/><text x="86.5040%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="86.3344%" y="277" width="0.0804%" height="15" fill="rgb(223,7,8)" fg:x="1074" fg:w="1"/><text x="86.5844%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.3344%" y="261" width="0.0804%" height="15" fill="rgb(241,217,22)" fg:x="1074" fg:w="1"/><text x="86.5844%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.3344%" y="245" width="0.0804%" height="15" fill="rgb(248,209,0)" fg:x="1074" fg:w="1"/><text x="86.5844%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.3344%" y="229" width="0.0804%" height="15" fill="rgb(217,205,4)" fg:x="1074" fg:w="1"/><text x="86.5844%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (85 samples, 6.83%)</title><rect x="79.6624%" y="341" width="6.8328%" height="15" fill="rgb(228,124,39)" fg:x="991" fg:w="85"/><text x="79.9124%" y="351.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="86.4148%" y="325" width="0.0804%" height="15" fill="rgb(250,116,42)" fg:x="1075" fg:w="1"/><text x="86.6648%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="86.4148%" y="309" width="0.0804%" height="15" fill="rgb(223,202,9)" fg:x="1075" fg:w="1"/><text x="86.6648%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (87 samples, 6.99%)</title><rect x="79.5820%" y="373" width="6.9936%" height="15" fill="rgb(242,222,40)" fg:x="990" fg:w="87"/><text x="79.8320%" y="383.50">regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (87 samples, 6.99%)</title><rect x="79.5820%" y="357" width="6.9936%" height="15" fill="rgb(229,99,46)" fg:x="990" fg:w="87"/><text x="79.8320%" y="367.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="86.4952%" y="341" width="0.0804%" height="15" fill="rgb(225,56,46)" fg:x="1076" fg:w="1"/><text x="86.7452%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.7363%" y="293" width="0.0804%" height="15" fill="rgb(227,94,5)" fg:x="1079" fg:w="1"/><text x="86.9863%" y="303.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (96 samples, 7.72%)</title><rect x="79.2605%" y="389" width="7.7170%" height="15" fill="rgb(205,112,38)" fg:x="986" fg:w="96"/><text x="79.5105%" y="399.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="86.5756%" y="373" width="0.4019%" height="15" fill="rgb(231,133,46)" fg:x="1077" fg:w="5"/><text x="86.8256%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="86.6559%" y="357" width="0.3215%" height="15" fill="rgb(217,16,9)" fg:x="1078" fg:w="4"/><text x="86.9059%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="86.6559%" y="341" width="0.3215%" height="15" fill="rgb(249,173,9)" fg:x="1078" fg:w="4"/><text x="86.9059%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="86.6559%" y="325" width="0.3215%" height="15" fill="rgb(205,163,53)" fg:x="1078" fg:w="4"/><text x="86.9059%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="86.6559%" y="309" width="0.3215%" height="15" fill="rgb(217,54,41)" fg:x="1078" fg:w="4"/><text x="86.9059%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="86.8167%" y="293" width="0.1608%" height="15" fill="rgb(228,216,12)" fg:x="1080" fg:w="2"/><text x="87.0667%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="87.0579%" y="325" width="0.0804%" height="15" fill="rgb(244,228,15)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.0579%" y="309" width="0.0804%" height="15" fill="rgb(221,176,53)" fg:x="1083" fg:w="1"/><text x="87.3079%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="86.9775%" y="373" width="0.2412%" height="15" fill="rgb(205,94,34)" fg:x="1082" fg:w="3"/><text x="87.2275%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="86.9775%" y="357" width="0.2412%" height="15" fill="rgb(213,110,48)" fg:x="1082" fg:w="3"/><text x="87.2275%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="86.9775%" y="341" width="0.2412%" height="15" fill="rgb(236,142,28)" fg:x="1082" fg:w="3"/><text x="87.2275%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="87.1383%" y="325" width="0.0804%" height="15" fill="rgb(225,135,29)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="87.1383%" y="309" width="0.0804%" height="15" fill="rgb(252,45,31)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.1383%" y="293" width="0.0804%" height="15" fill="rgb(211,187,50)" fg:x="1084" fg:w="1"/><text x="87.3883%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="87.2186%" y="357" width="0.0804%" height="15" fill="rgb(229,109,7)" fg:x="1085" fg:w="1"/><text x="87.4686%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="87.2186%" y="341" width="0.0804%" height="15" fill="rgb(251,131,51)" fg:x="1085" fg:w="1"/><text x="87.4686%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="87.2186%" y="325" width="0.0804%" height="15" fill="rgb(251,180,35)" fg:x="1085" fg:w="1"/><text x="87.4686%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="87.2186%" y="309" width="0.0804%" height="15" fill="rgb(211,46,32)" fg:x="1085" fg:w="1"/><text x="87.4686%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="87.2186%" y="293" width="0.0804%" height="15" fill="rgb(248,123,17)" fg:x="1085" fg:w="1"/><text x="87.4686%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="87.3794%" y="293" width="0.2412%" height="15" fill="rgb(227,141,18)" fg:x="1087" fg:w="3"/><text x="87.6294%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="87.4598%" y="277" width="0.1608%" height="15" fill="rgb(216,102,9)" fg:x="1088" fg:w="2"/><text x="87.7098%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="87.4598%" y="261" width="0.1608%" height="15" fill="rgb(253,47,13)" fg:x="1088" fg:w="2"/><text x="87.7098%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="87.4598%" y="245" width="0.1608%" height="15" fill="rgb(226,93,23)" fg:x="1088" fg:w="2"/><text x="87.7098%" y="255.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="87.2186%" y="373" width="0.4823%" height="15" fill="rgb(247,104,17)" fg:x="1085" fg:w="6"/><text x="87.4686%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="87.2990%" y="357" width="0.4019%" height="15" fill="rgb(233,203,26)" fg:x="1086" fg:w="5"/><text x="87.5490%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="87.2990%" y="341" width="0.4019%" height="15" fill="rgb(244,98,49)" fg:x="1086" fg:w="5"/><text x="87.5490%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="87.2990%" y="325" width="0.4019%" height="15" fill="rgb(235,134,22)" fg:x="1086" fg:w="5"/><text x="87.5490%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="87.3794%" y="309" width="0.3215%" height="15" fill="rgb(221,70,32)" fg:x="1087" fg:w="4"/><text x="87.6294%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="87.6206%" y="293" width="0.0804%" height="15" fill="rgb(238,15,50)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.6206%" y="277" width="0.0804%" height="15" fill="rgb(215,221,48)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.6206%" y="261" width="0.0804%" height="15" fill="rgb(236,73,3)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.6206%" y="245" width="0.0804%" height="15" fill="rgb(250,107,11)" fg:x="1090" fg:w="1"/><text x="87.8706%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.7010%" y="325" width="0.1608%" height="15" fill="rgb(242,39,14)" fg:x="1091" fg:w="2"/><text x="87.9510%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.7010%" y="309" width="0.1608%" height="15" fill="rgb(248,164,37)" fg:x="1091" fg:w="2"/><text x="87.9510%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="87.7814%" y="293" width="0.0804%" height="15" fill="rgb(217,60,12)" fg:x="1092" fg:w="1"/><text x="88.0314%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.7814%" y="277" width="0.0804%" height="15" fill="rgb(240,125,29)" fg:x="1092" fg:w="1"/><text x="88.0314%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8617%" y="325" width="0.0804%" height="15" fill="rgb(208,207,28)" fg:x="1093" fg:w="1"/><text x="88.1117%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="87.9421%" y="325" width="0.0804%" height="15" fill="rgb(209,159,27)" fg:x="1094" fg:w="1"/><text x="88.1921%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.9421%" y="309" width="0.0804%" height="15" fill="rgb(251,176,53)" fg:x="1094" fg:w="1"/><text x="88.1921%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.1029%" y="293" width="0.0804%" height="15" fill="rgb(211,85,7)" fg:x="1096" fg:w="1"/><text x="88.3529%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="88.0225%" y="309" width="0.5627%" height="15" fill="rgb(216,64,54)" fg:x="1095" fg:w="7"/><text x="88.2725%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="88.1833%" y="293" width="0.4019%" height="15" fill="rgb(217,54,24)" fg:x="1097" fg:w="5"/><text x="88.4333%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="88.5852%" y="309" width="0.4019%" height="15" fill="rgb(208,206,53)" fg:x="1102" fg:w="5"/><text x="88.8352%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="88.5852%" y="293" width="0.4019%" height="15" fill="rgb(251,74,39)" fg:x="1102" fg:w="5"/><text x="88.8352%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="88.8264%" y="277" width="0.1608%" height="15" fill="rgb(226,47,5)" fg:x="1105" fg:w="2"/><text x="89.0764%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.9068%" y="261" width="0.0804%" height="15" fill="rgb(234,111,33)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9068%" y="245" width="0.0804%" height="15" fill="rgb(251,14,10)" fg:x="1106" fg:w="1"/><text x="89.1568%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.1479%" y="277" width="0.0804%" height="15" fill="rgb(232,43,0)" fg:x="1109" fg:w="1"/><text x="89.3979%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="89.2283%" y="277" width="0.1608%" height="15" fill="rgb(222,68,43)" fg:x="1110" fg:w="2"/><text x="89.4783%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="89.2283%" y="261" width="0.1608%" height="15" fill="rgb(217,24,23)" fg:x="1110" fg:w="2"/><text x="89.4783%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.2283%" y="245" width="0.1608%" height="15" fill="rgb(229,209,14)" fg:x="1110" fg:w="2"/><text x="89.4783%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.2283%" y="229" width="0.1608%" height="15" fill="rgb(250,149,48)" fg:x="1110" fg:w="2"/><text x="89.4783%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="89.3891%" y="277" width="0.2412%" height="15" fill="rgb(210,120,37)" fg:x="1112" fg:w="3"/><text x="89.6391%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="89.5498%" y="261" width="0.0804%" height="15" fill="rgb(210,21,8)" fg:x="1114" fg:w="1"/><text x="89.7998%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.5498%" y="245" width="0.0804%" height="15" fill="rgb(243,145,7)" fg:x="1114" fg:w="1"/><text x="89.7998%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.5498%" y="229" width="0.0804%" height="15" fill="rgb(238,178,32)" fg:x="1114" fg:w="1"/><text x="89.7998%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.5498%" y="213" width="0.0804%" height="15" fill="rgb(222,4,10)" fg:x="1114" fg:w="1"/><text x="89.7998%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.72%)</title><rect x="88.9871%" y="309" width="0.7235%" height="15" fill="rgb(239,7,37)" fg:x="1107" fg:w="9"/><text x="89.2371%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="89.0675%" y="293" width="0.6431%" height="15" fill="rgb(215,31,37)" fg:x="1108" fg:w="8"/><text x="89.3175%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="89.6302%" y="277" width="0.0804%" height="15" fill="rgb(224,83,33)" fg:x="1115" fg:w="1"/><text x="89.8802%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="89.6302%" y="261" width="0.0804%" height="15" fill="rgb(239,55,3)" fg:x="1115" fg:w="1"/><text x="89.8802%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="89.6302%" y="245" width="0.0804%" height="15" fill="rgb(247,92,11)" fg:x="1115" fg:w="1"/><text x="89.8802%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="89.9518%" y="197" width="0.2412%" height="15" fill="rgb(239,200,7)" fg:x="1119" fg:w="3"/><text x="90.2018%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.1929%" y="197" width="0.0804%" height="15" fill="rgb(227,115,8)" fg:x="1122" fg:w="1"/><text x="90.4429%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="90.2733%" y="197" width="0.1608%" height="15" fill="rgb(215,189,27)" fg:x="1123" fg:w="2"/><text x="90.5233%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.3537%" y="181" width="0.0804%" height="15" fill="rgb(251,216,39)" fg:x="1124" fg:w="1"/><text x="90.6037%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.3537%" y="165" width="0.0804%" height="15" fill="rgb(207,29,47)" fg:x="1124" fg:w="1"/><text x="90.6037%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.3537%" y="149" width="0.0804%" height="15" fill="rgb(210,71,34)" fg:x="1124" fg:w="1"/><text x="90.6037%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="90.4341%" y="133" width="0.1608%" height="15" fill="rgb(253,217,51)" fg:x="1125" fg:w="2"/><text x="90.6841%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="90.4341%" y="165" width="0.2412%" height="15" fill="rgb(222,117,46)" fg:x="1125" fg:w="3"/><text x="90.6841%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="90.4341%" y="149" width="0.2412%" height="15" fill="rgb(226,132,6)" fg:x="1125" fg:w="3"/><text x="90.6841%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.5949%" y="133" width="0.0804%" height="15" fill="rgb(254,145,51)" fg:x="1127" fg:w="1"/><text x="90.8449%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="90.4341%" y="197" width="0.3215%" height="15" fill="rgb(231,199,27)" fg:x="1125" fg:w="4"/><text x="90.6841%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="90.4341%" y="181" width="0.3215%" height="15" fill="rgb(245,158,14)" fg:x="1125" fg:w="4"/><text x="90.6841%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="90.6752%" y="165" width="0.0804%" height="15" fill="rgb(240,113,14)" fg:x="1128" fg:w="1"/><text x="90.9252%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (40 samples, 3.22%)</title><rect x="90.7556%" y="197" width="3.2154%" height="15" fill="rgb(210,20,13)" fg:x="1129" fg:w="40"/><text x="91.0056%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (40 samples, 3.22%)</title><rect x="90.7556%" y="181" width="3.2154%" height="15" fill="rgb(241,144,13)" fg:x="1129" fg:w="40"/><text x="91.0056%" y="191.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (40 samples, 3.22%)</title><rect x="90.7556%" y="165" width="3.2154%" height="15" fill="rgb(235,43,34)" fg:x="1129" fg:w="40"/><text x="91.0056%" y="175.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="93.9711%" y="197" width="0.2412%" height="15" fill="rgb(208,36,20)" fg:x="1169" fg:w="3"/><text x="94.2211%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 4.82%)</title><rect x="89.7106%" y="293" width="4.8232%" height="15" fill="rgb(239,204,10)" fg:x="1116" fg:w="60"/><text x="89.9606%" y="303.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (60 samples, 4.82%)</title><rect x="89.7106%" y="277" width="4.8232%" height="15" fill="rgb(217,84,43)" fg:x="1116" fg:w="60"/><text x="89.9606%" y="287.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (60 samples, 4.82%)</title><rect x="89.7106%" y="261" width="4.8232%" height="15" fill="rgb(241,170,50)" fg:x="1116" fg:w="60"/><text x="89.9606%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (60 samples, 4.82%)</title><rect x="89.7106%" y="245" width="4.8232%" height="15" fill="rgb(226,205,29)" fg:x="1116" fg:w="60"/><text x="89.9606%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (60 samples, 4.82%)</title><rect x="89.7106%" y="229" width="4.8232%" height="15" fill="rgb(233,113,1)" fg:x="1116" fg:w="60"/><text x="89.9606%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (60 samples, 4.82%)</title><rect x="89.7106%" y="213" width="4.8232%" height="15" fill="rgb(253,98,13)" fg:x="1116" fg:w="60"/><text x="89.9606%" y="223.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="94.2122%" y="197" width="0.3215%" height="15" fill="rgb(211,115,12)" fg:x="1172" fg:w="4"/><text x="94.4622%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="94.2926%" y="181" width="0.2412%" height="15" fill="rgb(208,12,16)" fg:x="1173" fg:w="3"/><text x="94.5426%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.3730%" y="165" width="0.1608%" height="15" fill="rgb(237,193,54)" fg:x="1174" fg:w="2"/><text x="94.6230%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.4534%" y="149" width="0.0804%" height="15" fill="rgb(243,22,42)" fg:x="1175" fg:w="1"/><text x="94.7034%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6945%" y="277" width="0.0804%" height="15" fill="rgb(233,151,36)" fg:x="1178" fg:w="1"/><text x="94.9445%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="94.7749%" y="277" width="0.2412%" height="15" fill="rgb(237,57,45)" fg:x="1179" fg:w="3"/><text x="95.0249%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.9357%" y="261" width="0.0804%" height="15" fill="rgb(221,88,17)" fg:x="1181" fg:w="1"/><text x="95.1857%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9357%" y="245" width="0.0804%" height="15" fill="rgb(230,79,15)" fg:x="1181" fg:w="1"/><text x="95.1857%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.9357%" y="229" width="0.0804%" height="15" fill="rgb(213,57,13)" fg:x="1181" fg:w="1"/><text x="95.1857%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (88 samples, 7.07%)</title><rect x="88.0225%" y="325" width="7.0740%" height="15" fill="rgb(222,116,39)" fg:x="1095" fg:w="88"/><text x="88.2725%" y="335.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (67 samples, 5.39%)</title><rect x="89.7106%" y="309" width="5.3859%" height="15" fill="rgb(245,107,2)" fg:x="1116" fg:w="67"/><text x="89.9606%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="94.5338%" y="293" width="0.5627%" height="15" fill="rgb(238,1,10)" fg:x="1176" fg:w="7"/><text x="94.7838%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.0161%" y="277" width="0.0804%" height="15" fill="rgb(249,4,48)" fg:x="1182" fg:w="1"/><text x="95.2661%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.0965%" y="325" width="0.0804%" height="15" fill="rgb(223,151,18)" fg:x="1183" fg:w="1"/><text x="95.3465%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.0965%" y="309" width="0.0804%" height="15" fill="rgb(227,65,43)" fg:x="1183" fg:w="1"/><text x="95.3465%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.0965%" y="293" width="0.0804%" height="15" fill="rgb(218,40,45)" fg:x="1183" fg:w="1"/><text x="95.3465%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.1768%" y="293" width="0.1608%" height="15" fill="rgb(252,121,31)" fg:x="1184" fg:w="2"/><text x="95.4268%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="95.1768%" y="277" width="0.1608%" height="15" fill="rgb(219,158,43)" fg:x="1184" fg:w="2"/><text x="95.4268%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (106 samples, 8.52%)</title><rect x="86.9775%" y="389" width="8.5209%" height="15" fill="rgb(231,162,42)" fg:x="1082" fg:w="106"/><text x="87.2275%" y="399.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::new (97 samples, 7.80%)</title><rect x="87.7010%" y="373" width="7.7974%" height="15" fill="rgb(217,179,25)" fg:x="1091" fg:w="97"/><text x="87.9510%" y="383.50">regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (97 samples, 7.80%)</title><rect x="87.7010%" y="357" width="7.7974%" height="15" fill="rgb(206,212,31)" fg:x="1091" fg:w="97"/><text x="87.9510%" y="367.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (97 samples, 7.80%)</title><rect x="87.7010%" y="341" width="7.7974%" height="15" fill="rgb(235,144,12)" fg:x="1091" fg:w="97"/><text x="87.9510%" y="351.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="95.1768%" y="325" width="0.3215%" height="15" fill="rgb(213,51,10)" fg:x="1184" fg:w="4"/><text x="95.4268%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="95.1768%" y="309" width="0.3215%" height="15" fill="rgb(231,145,14)" fg:x="1184" fg:w="4"/><text x="95.4268%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="95.3376%" y="293" width="0.1608%" height="15" fill="rgb(235,15,28)" fg:x="1186" fg:w="2"/><text x="95.5876%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.4180%" y="277" width="0.0804%" height="15" fill="rgb(237,206,10)" fg:x="1187" fg:w="1"/><text x="95.6680%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.5788%" y="357" width="0.0804%" height="15" fill="rgb(236,227,27)" fg:x="1189" fg:w="1"/><text x="95.8288%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.5788%" y="341" width="0.0804%" height="15" fill="rgb(246,83,35)" fg:x="1189" fg:w="1"/><text x="95.8288%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.5788%" y="325" width="0.0804%" height="15" fill="rgb(220,136,24)" fg:x="1189" fg:w="1"/><text x="95.8288%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="95.5788%" y="309" width="0.0804%" height="15" fill="rgb(217,3,25)" fg:x="1189" fg:w="1"/><text x="95.8288%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5788%" y="293" width="0.0804%" height="15" fill="rgb(239,24,14)" fg:x="1189" fg:w="1"/><text x="95.8288%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5788%" y="277" width="0.0804%" height="15" fill="rgb(244,16,53)" fg:x="1189" fg:w="1"/><text x="95.8288%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.5788%" y="261" width="0.0804%" height="15" fill="rgb(208,175,44)" fg:x="1189" fg:w="1"/><text x="95.8288%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.6592%" y="357" width="0.0804%" height="15" fill="rgb(252,18,48)" fg:x="1190" fg:w="1"/><text x="95.9092%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.6592%" y="341" width="0.0804%" height="15" fill="rgb(234,199,32)" fg:x="1190" fg:w="1"/><text x="95.9092%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="95.6592%" y="325" width="0.0804%" height="15" fill="rgb(225,77,54)" fg:x="1190" fg:w="1"/><text x="95.9092%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="95.6592%" y="309" width="0.0804%" height="15" fill="rgb(225,42,25)" fg:x="1190" fg:w="1"/><text x="95.9092%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.6592%" y="293" width="0.0804%" height="15" fill="rgb(242,227,46)" fg:x="1190" fg:w="1"/><text x="95.9092%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.7395%" y="309" width="0.0804%" height="15" fill="rgb(246,197,35)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.7395%" y="293" width="0.0804%" height="15" fill="rgb(215,159,26)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.7395%" y="277" width="0.0804%" height="15" fill="rgb(212,194,50)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.7395%" y="261" width="0.0804%" height="15" fill="rgb(246,132,1)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7395%" y="245" width="0.0804%" height="15" fill="rgb(217,71,7)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.7395%" y="229" width="0.0804%" height="15" fill="rgb(252,59,32)" fg:x="1191" fg:w="1"/><text x="95.9895%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="95.8199%" y="277" width="0.0804%" height="15" fill="rgb(253,204,25)" fg:x="1192" fg:w="1"/><text x="96.0699%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.8199%" y="261" width="0.0804%" height="15" fill="rgb(232,21,16)" fg:x="1192" fg:w="1"/><text x="96.0699%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.8199%" y="245" width="0.0804%" height="15" fill="rgb(248,90,29)" fg:x="1192" fg:w="1"/><text x="96.0699%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.8199%" y="229" width="0.0804%" height="15" fill="rgb(249,223,7)" fg:x="1192" fg:w="1"/><text x="96.0699%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="95.8199%" y="309" width="0.1608%" height="15" fill="rgb(231,119,42)" fg:x="1192" fg:w="2"/><text x="96.0699%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="95.8199%" y="293" width="0.1608%" height="15" fill="rgb(215,41,35)" fg:x="1192" fg:w="2"/><text x="96.0699%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="95.9003%" y="277" width="0.0804%" height="15" fill="rgb(220,44,45)" fg:x="1193" fg:w="1"/><text x="96.1503%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.9003%" y="261" width="0.0804%" height="15" fill="rgb(253,197,36)" fg:x="1193" fg:w="1"/><text x="96.1503%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.9003%" y="245" width="0.0804%" height="15" fill="rgb(245,225,54)" fg:x="1193" fg:w="1"/><text x="96.1503%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.1415%" y="293" width="0.0804%" height="15" fill="rgb(239,94,37)" fg:x="1196" fg:w="1"/><text x="96.3915%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1415%" y="277" width="0.0804%" height="15" fill="rgb(242,217,10)" fg:x="1196" fg:w="1"/><text x="96.3915%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.2219%" y="277" width="0.0804%" height="15" fill="rgb(250,193,7)" fg:x="1197" fg:w="1"/><text x="96.4719%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="96.2219%" y="293" width="0.1608%" height="15" fill="rgb(230,104,19)" fg:x="1197" fg:w="2"/><text x="96.4719%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="96.3023%" y="277" width="0.0804%" height="15" fill="rgb(230,181,4)" fg:x="1198" fg:w="1"/><text x="96.5523%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="96.3023%" y="261" width="0.0804%" height="15" fill="rgb(216,219,49)" fg:x="1198" fg:w="1"/><text x="96.5523%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="96.3023%" y="245" width="0.0804%" height="15" fill="rgb(254,144,0)" fg:x="1198" fg:w="1"/><text x="96.5523%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3023%" y="229" width="0.0804%" height="15" fill="rgb(205,209,38)" fg:x="1198" fg:w="1"/><text x="96.5523%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3023%" y="213" width="0.0804%" height="15" fill="rgb(240,21,42)" fg:x="1198" fg:w="1"/><text x="96.5523%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.3023%" y="197" width="0.0804%" height="15" fill="rgb(241,132,3)" fg:x="1198" fg:w="1"/><text x="96.5523%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="96.3826%" y="277" width="0.1608%" height="15" fill="rgb(225,14,2)" fg:x="1199" fg:w="2"/><text x="96.6326%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="96.4630%" y="261" width="0.0804%" height="15" fill="rgb(210,141,35)" fg:x="1200" fg:w="1"/><text x="96.7130%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="96.4630%" y="245" width="0.0804%" height="15" fill="rgb(251,14,44)" fg:x="1200" fg:w="1"/><text x="96.7130%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5434%" y="245" width="0.0804%" height="15" fill="rgb(247,48,18)" fg:x="1201" fg:w="1"/><text x="96.7934%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5434%" y="229" width="0.0804%" height="15" fill="rgb(225,0,40)" fg:x="1201" fg:w="1"/><text x="96.7934%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5434%" y="213" width="0.0804%" height="15" fill="rgb(221,31,33)" fg:x="1201" fg:w="1"/><text x="96.7934%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="96.5434%" y="261" width="0.1608%" height="15" fill="rgb(237,42,40)" fg:x="1201" fg:w="2"/><text x="96.7934%" y="271.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="96.6238%" y="245" width="0.0804%" height="15" fill="rgb(233,51,29)" fg:x="1202" fg:w="1"/><text x="96.8738%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (10 samples, 0.80%)</title><rect x="95.9807%" y="309" width="0.8039%" height="15" fill="rgb(226,58,20)" fg:x="1194" fg:w="10"/><text x="96.2307%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="96.3826%" y="293" width="0.4019%" height="15" fill="rgb(208,98,7)" fg:x="1199" fg:w="5"/><text x="96.6326%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.5434%" y="277" width="0.2412%" height="15" fill="rgb(228,143,44)" fg:x="1201" fg:w="3"/><text x="96.7934%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="96.7042%" y="261" width="0.0804%" height="15" fill="rgb(246,55,38)" fg:x="1203" fg:w="1"/><text x="96.9542%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="96.7042%" y="245" width="0.0804%" height="15" fill="rgb(247,87,16)" fg:x="1203" fg:w="1"/><text x="96.9542%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="96.7846%" y="261" width="0.0804%" height="15" fill="rgb(234,129,42)" fg:x="1204" fg:w="1"/><text x="97.0346%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.7846%" y="309" width="0.1608%" height="15" fill="rgb(220,82,16)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.7846%" y="293" width="0.1608%" height="15" fill="rgb(211,88,4)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.7846%" y="277" width="0.1608%" height="15" fill="rgb(248,151,21)" fg:x="1204" fg:w="2"/><text x="97.0346%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.8650%" y="261" width="0.0804%" height="15" fill="rgb(238,163,6)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="96.8650%" y="245" width="0.0804%" height="15" fill="rgb(209,183,11)" fg:x="1205" fg:w="1"/><text x="97.1150%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (16 samples, 1.29%)</title><rect x="95.7395%" y="357" width="1.2862%" height="15" fill="rgb(219,37,20)" fg:x="1191" fg:w="16"/><text x="95.9895%" y="367.50"></text></g><g><title>regex::builders::Builder::build_one_string (16 samples, 1.29%)</title><rect x="95.7395%" y="341" width="1.2862%" height="15" fill="rgb(210,158,4)" fg:x="1191" fg:w="16"/><text x="95.9895%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (16 samples, 1.29%)</title><rect x="95.7395%" y="325" width="1.2862%" height="15" fill="rgb(221,167,53)" fg:x="1191" fg:w="16"/><text x="95.9895%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.9453%" y="309" width="0.0804%" height="15" fill="rgb(237,151,45)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.9453%" y="293" width="0.0804%" height="15" fill="rgb(231,39,3)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.9453%" y="277" width="0.0804%" height="15" fill="rgb(212,167,28)" fg:x="1206" fg:w="1"/><text x="97.1953%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.0257%" y="293" width="0.0804%" height="15" fill="rgb(232,178,8)" fg:x="1207" fg:w="1"/><text x="97.2757%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.0257%" y="277" width="0.0804%" height="15" fill="rgb(225,151,20)" fg:x="1207" fg:w="1"/><text x="97.2757%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.0257%" y="261" width="0.0804%" height="15" fill="rgb(238,3,37)" fg:x="1207" fg:w="1"/><text x="97.2757%" y="271.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.61%)</title><rect x="95.5788%" y="373" width="1.6077%" height="15" fill="rgb(251,147,42)" fg:x="1189" fg:w="20"/><text x="95.8288%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="97.0257%" y="357" width="0.1608%" height="15" fill="rgb(208,173,10)" fg:x="1207" fg:w="2"/><text x="97.2757%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="97.0257%" y="341" width="0.1608%" height="15" fill="rgb(246,225,4)" fg:x="1207" fg:w="2"/><text x="97.2757%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="97.0257%" y="325" width="0.1608%" height="15" fill="rgb(248,102,6)" fg:x="1207" fg:w="2"/><text x="97.2757%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="97.0257%" y="309" width="0.1608%" height="15" fill="rgb(232,6,21)" fg:x="1207" fg:w="2"/><text x="97.2757%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="97.1061%" y="293" width="0.0804%" height="15" fill="rgb(221,179,22)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.1061%" y="277" width="0.0804%" height="15" fill="rgb(252,50,20)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.1061%" y="261" width="0.0804%" height="15" fill="rgb(222,56,38)" fg:x="1208" fg:w="1"/><text x="97.3561%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (228 samples, 18.33%)</title><rect x="78.9389%" y="469" width="18.3280%" height="15" fill="rgb(206,193,29)" fg:x="982" fg:w="228"/><text x="79.1889%" y="479.50">&lt;&amp;kernel::model::entry::Entry..</text></g><g><title>plugins_core::looking::model::qualify_name (224 samples, 18.01%)</title><rect x="79.2605%" y="453" width="18.0064%" height="15" fill="rgb(239,192,45)" fg:x="986" fg:w="224"/><text x="79.5105%" y="463.50">plugins_core::looking::model..</text></g><g><title>indefinite::indefinite (224 samples, 18.01%)</title><rect x="79.2605%" y="437" width="18.0064%" height="15" fill="rgb(254,18,36)" fg:x="986" fg:w="224"/><text x="79.5105%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (224 samples, 18.01%)</title><rect x="79.2605%" y="421" width="18.0064%" height="15" fill="rgb(221,127,11)" fg:x="986" fg:w="224"/><text x="79.5105%" y="431.50">indefinite::methods::indefin..</text></g><g><title>indefinite::methods::apply_rules (224 samples, 18.01%)</title><rect x="79.2605%" y="405" width="18.0064%" height="15" fill="rgb(234,146,35)" fg:x="986" fg:w="224"/><text x="79.5105%" y="415.50">indefinite::methods::apply_r..</text></g><g><title>indefinite::rules::other::Other::run (22 samples, 1.77%)</title><rect x="95.4984%" y="389" width="1.7685%" height="15" fill="rgb(254,201,37)" fg:x="1188" fg:w="22"/><text x="95.7484%" y="399.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="97.1865%" y="373" width="0.0804%" height="15" fill="rgb(211,202,23)" fg:x="1209" fg:w="1"/><text x="97.4365%" y="383.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="97.2669%" y="469" width="0.0804%" height="15" fill="rgb(237,91,2)" fg:x="1210" fg:w="1"/><text x="97.5169%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.2669%" y="453" width="0.0804%" height="15" fill="rgb(226,228,36)" fg:x="1210" fg:w="1"/><text x="97.5169%" y="463.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="97.3473%" y="437" width="0.0804%" height="15" fill="rgb(213,63,50)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="97.3473%" y="421" width="0.0804%" height="15" fill="rgb(235,194,19)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.3473%" y="405" width="0.0804%" height="15" fill="rgb(207,204,18)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.3473%" y="389" width="0.0804%" height="15" fill="rgb(248,8,7)" fg:x="1211" fg:w="1"/><text x="97.5973%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.5080%" y="405" width="0.0804%" height="15" fill="rgb(223,145,47)" fg:x="1213" fg:w="1"/><text x="97.7580%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.5884%" y="405" width="0.0804%" height="15" fill="rgb(228,84,11)" fg:x="1214" fg:w="1"/><text x="97.8384%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.5884%" y="389" width="0.0804%" height="15" fill="rgb(218,76,45)" fg:x="1214" fg:w="1"/><text x="97.8384%" y="399.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (235 samples, 18.89%)</title><rect x="78.8585%" y="501" width="18.8907%" height="15" fill="rgb(223,80,15)" fg:x="981" fg:w="235"/><text x="79.1085%" y="511.50">&lt;plugins_core::looking::action..</text></g><g><title>plugins_core::looking::model::new_area_observation (235 samples, 18.89%)</title><rect x="78.8585%" y="485" width="18.8907%" height="15" fill="rgb(219,218,33)" fg:x="981" fg:w="235"/><text x="79.1085%" y="495.50">plugins_core::looking::model::..</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="97.3473%" y="469" width="0.4019%" height="15" fill="rgb(208,51,11)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.40%)</title><rect x="97.3473%" y="453" width="0.4019%" height="15" fill="rgb(229,165,39)" fg:x="1211" fg:w="5"/><text x="97.5973%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="97.4277%" y="437" width="0.3215%" height="15" fill="rgb(241,100,24)" fg:x="1212" fg:w="4"/><text x="97.6777%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.5080%" y="421" width="0.2412%" height="15" fill="rgb(228,14,23)" fg:x="1213" fg:w="3"/><text x="97.7580%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6688%" y="405" width="0.0804%" height="15" fill="rgb(247,116,52)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6688%" y="389" width="0.0804%" height="15" fill="rgb(216,149,33)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.6688%" y="373" width="0.0804%" height="15" fill="rgb(238,142,29)" fg:x="1215" fg:w="1"/><text x="97.9188%" y="383.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (1 samples, 0.08%)</title><rect x="97.7492%" y="501" width="0.0804%" height="15" fill="rgb(224,83,40)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="97.7492%" y="485" width="0.0804%" height="15" fill="rgb(234,165,11)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="97.7492%" y="469" width="0.0804%" height="15" fill="rgb(215,96,23)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.7492%" y="453" width="0.0804%" height="15" fill="rgb(233,179,26)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.7492%" y="437" width="0.0804%" height="15" fill="rgb(225,129,33)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="447.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.7492%" y="421" width="0.0804%" height="15" fill="rgb(237,49,13)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.7492%" y="405" width="0.0804%" height="15" fill="rgb(211,3,31)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.7492%" y="389" width="0.0804%" height="15" fill="rgb(216,152,19)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.7492%" y="373" width="0.0804%" height="15" fill="rgb(251,121,35)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7492%" y="357" width="0.0804%" height="15" fill="rgb(210,217,47)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7492%" y="341" width="0.0804%" height="15" fill="rgb(244,116,22)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.7492%" y="325" width="0.0804%" height="15" fill="rgb(228,17,21)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7492%" y="309" width="0.0804%" height="15" fill="rgb(240,149,34)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.7492%" y="293" width="0.0804%" height="15" fill="rgb(208,125,47)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7492%" y="277" width="0.0804%" height="15" fill="rgb(249,186,39)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7492%" y="261" width="0.0804%" height="15" fill="rgb(240,220,33)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.7492%" y="245" width="0.0804%" height="15" fill="rgb(243,110,23)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="255.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.7492%" y="229" width="0.0804%" height="15" fill="rgb(219,163,46)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.7492%" y="213" width="0.0804%" height="15" fill="rgb(216,126,30)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7492%" y="197" width="0.0804%" height="15" fill="rgb(208,139,11)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7492%" y="181" width="0.0804%" height="15" fill="rgb(213,118,36)" fg:x="1216" fg:w="1"/><text x="97.9992%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (1 samples, 0.08%)</title><rect x="97.8296%" y="469" width="0.0804%" height="15" fill="rgb(226,43,17)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8296%" y="453" width="0.0804%" height="15" fill="rgb(254,217,4)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8296%" y="437" width="0.0804%" height="15" fill="rgb(210,134,47)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8296%" y="421" width="0.0804%" height="15" fill="rgb(237,24,49)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8296%" y="405" width="0.0804%" height="15" fill="rgb(251,39,46)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8296%" y="389" width="0.0804%" height="15" fill="rgb(251,220,3)" fg:x="1217" fg:w="1"/><text x="98.0796%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9100%" y="453" width="0.0804%" height="15" fill="rgb(228,105,12)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.9100%" y="437" width="0.0804%" height="15" fill="rgb(215,196,1)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.9100%" y="421" width="0.0804%" height="15" fill="rgb(214,33,39)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.9100%" y="405" width="0.0804%" height="15" fill="rgb(220,19,52)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.9100%" y="389" width="0.0804%" height="15" fill="rgb(221,78,38)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9100%" y="373" width="0.0804%" height="15" fill="rgb(253,30,16)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.9100%" y="357" width="0.0804%" height="15" fill="rgb(242,65,0)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.9100%" y="341" width="0.0804%" height="15" fill="rgb(235,201,12)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.9100%" y="325" width="0.0804%" height="15" fill="rgb(233,161,9)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.9100%" y="309" width="0.0804%" height="15" fill="rgb(241,207,41)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.9100%" y="293" width="0.0804%" height="15" fill="rgb(212,69,46)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9100%" y="277" width="0.0804%" height="15" fill="rgb(239,69,45)" fg:x="1218" fg:w="1"/><text x="98.1600%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9904%" y="421" width="0.0804%" height="15" fill="rgb(242,117,48)" fg:x="1219" fg:w="1"/><text x="98.2404%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="97.9904%" y="437" width="0.1608%" height="15" fill="rgb(228,41,36)" fg:x="1219" fg:w="2"/><text x="98.2404%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.08%)</title><rect x="98.0707%" y="421" width="0.0804%" height="15" fill="rgb(212,3,32)" fg:x="1220" fg:w="1"/><text x="98.3207%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.1511%" y="357" width="0.0804%" height="15" fill="rgb(233,41,49)" fg:x="1221" fg:w="1"/><text x="98.4011%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2315%" y="293" width="0.0804%" height="15" fill="rgb(252,170,49)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.2315%" y="277" width="0.0804%" height="15" fill="rgb(229,53,26)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="98.2315%" y="261" width="0.0804%" height="15" fill="rgb(217,157,12)" fg:x="1222" fg:w="1"/><text x="98.4815%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="98.3119%" y="245" width="0.0804%" height="15" fill="rgb(227,17,9)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="98.3119%" y="229" width="0.0804%" height="15" fill="rgb(218,84,12)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.3119%" y="213" width="0.0804%" height="15" fill="rgb(212,79,24)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3119%" y="197" width="0.0804%" height="15" fill="rgb(217,222,37)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.3119%" y="181" width="0.0804%" height="15" fill="rgb(246,208,8)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.3119%" y="165" width="0.0804%" height="15" fill="rgb(244,133,10)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3119%" y="149" width="0.0804%" height="15" fill="rgb(209,219,41)" fg:x="1223" fg:w="1"/><text x="98.5619%" y="159.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="98.1511%" y="373" width="0.3215%" height="15" fill="rgb(253,175,45)" fg:x="1221" fg:w="4"/><text x="98.4011%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.2315%" y="357" width="0.2412%" height="15" fill="rgb(235,100,37)" fg:x="1222" fg:w="3"/><text x="98.4815%" y="367.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (3 samples, 0.24%)</title><rect x="98.2315%" y="341" width="0.2412%" height="15" fill="rgb(225,87,19)" fg:x="1222" fg:w="3"/><text x="98.4815%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (3 samples, 0.24%)</title><rect x="98.2315%" y="325" width="0.2412%" height="15" fill="rgb(217,152,17)" fg:x="1222" fg:w="3"/><text x="98.4815%" y="335.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="98.2315%" y="309" width="0.2412%" height="15" fill="rgb(235,72,13)" fg:x="1222" fg:w="3"/><text x="98.4815%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="98.3119%" y="293" width="0.1608%" height="15" fill="rgb(233,140,18)" fg:x="1223" fg:w="2"/><text x="98.5619%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="98.3119%" y="277" width="0.1608%" height="15" fill="rgb(207,212,28)" fg:x="1223" fg:w="2"/><text x="98.5619%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="98.3119%" y="261" width="0.1608%" height="15" fill="rgb(220,130,25)" fg:x="1223" fg:w="2"/><text x="98.5619%" y="271.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.3923%" y="245" width="0.0804%" height="15" fill="rgb(205,55,34)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3923%" y="229" width="0.0804%" height="15" fill="rgb(237,54,35)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3923%" y="213" width="0.0804%" height="15" fill="rgb(208,67,23)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3923%" y="197" width="0.0804%" height="15" fill="rgb(206,207,50)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3923%" y="181" width="0.0804%" height="15" fill="rgb(213,211,42)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3923%" y="165" width="0.0804%" height="15" fill="rgb(252,197,50)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3923%" y="149" width="0.0804%" height="15" fill="rgb(251,211,41)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="159.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3923%" y="133" width="0.0804%" height="15" fill="rgb(229,211,5)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3923%" y="117" width="0.0804%" height="15" fill="rgb(239,36,31)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="127.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3923%" y="101" width="0.0804%" height="15" fill="rgb(248,67,31)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3923%" y="85" width="0.0804%" height="15" fill="rgb(249,55,44)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="95.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3923%" y="69" width="0.0804%" height="15" fill="rgb(216,82,12)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="79.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3923%" y="53" width="0.0804%" height="15" fill="rgb(242,174,1)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="63.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3923%" y="37" width="0.0804%" height="15" fill="rgb(208,120,29)" fg:x="1224" fg:w="1"/><text x="98.6423%" y="47.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4727%" y="341" width="0.0804%" height="15" fill="rgb(221,105,43)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4727%" y="325" width="0.0804%" height="15" fill="rgb(234,124,22)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4727%" y="309" width="0.0804%" height="15" fill="rgb(212,23,30)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4727%" y="293" width="0.0804%" height="15" fill="rgb(219,122,53)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4727%" y="277" width="0.0804%" height="15" fill="rgb(248,84,24)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.4727%" y="261" width="0.0804%" height="15" fill="rgb(245,115,18)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.4727%" y="245" width="0.0804%" height="15" fill="rgb(227,176,51)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.4727%" y="229" width="0.0804%" height="15" fill="rgb(229,63,42)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4727%" y="213" width="0.0804%" height="15" fill="rgb(247,202,24)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.4727%" y="197" width="0.0804%" height="15" fill="rgb(244,173,20)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.4727%" y="181" width="0.0804%" height="15" fill="rgb(242,81,47)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.4727%" y="165" width="0.0804%" height="15" fill="rgb(231,185,54)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.4727%" y="149" width="0.0804%" height="15" fill="rgb(243,55,32)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.4727%" y="133" width="0.0804%" height="15" fill="rgb(208,167,19)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4727%" y="117" width="0.0804%" height="15" fill="rgb(231,72,35)" fg:x="1225" fg:w="1"/><text x="98.7227%" y="127.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="98.5531%" y="341" width="0.0804%" height="15" fill="rgb(250,173,51)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="351.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="98.5531%" y="325" width="0.0804%" height="15" fill="rgb(209,5,22)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.5531%" y="309" width="0.0804%" height="15" fill="rgb(250,174,19)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="98.5531%" y="293" width="0.0804%" height="15" fill="rgb(217,3,49)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="303.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.5531%" y="277" width="0.0804%" height="15" fill="rgb(218,225,5)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5531%" y="261" width="0.0804%" height="15" fill="rgb(236,89,11)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5531%" y="245" width="0.0804%" height="15" fill="rgb(206,33,28)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.5531%" y="229" width="0.0804%" height="15" fill="rgb(241,56,42)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.5531%" y="213" width="0.0804%" height="15" fill="rgb(222,44,11)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.5531%" y="197" width="0.0804%" height="15" fill="rgb(234,111,20)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5531%" y="181" width="0.0804%" height="15" fill="rgb(237,77,6)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5531%" y="165" width="0.0804%" height="15" fill="rgb(235,111,23)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.5531%" y="149" width="0.0804%" height="15" fill="rgb(251,135,29)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.5531%" y="133" width="0.0804%" height="15" fill="rgb(217,57,1)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.5531%" y="117" width="0.0804%" height="15" fill="rgb(249,119,31)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.5531%" y="101" width="0.0804%" height="15" fill="rgb(233,164,33)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5531%" y="85" width="0.0804%" height="15" fill="rgb(250,217,43)" fg:x="1226" fg:w="1"/><text x="98.8031%" y="95.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (7 samples, 0.56%)</title><rect x="98.1511%" y="389" width="0.5627%" height="15" fill="rgb(232,154,50)" fg:x="1221" fg:w="7"/><text x="98.4011%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="98.4727%" y="373" width="0.2412%" height="15" fill="rgb(227,190,8)" fg:x="1225" fg:w="3"/><text x="98.7227%" y="383.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.24%)</title><rect x="98.4727%" y="357" width="0.2412%" height="15" fill="rgb(209,217,32)" fg:x="1225" fg:w="3"/><text x="98.7227%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6334%" y="341" width="0.0804%" height="15" fill="rgb(243,203,50)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6334%" y="325" width="0.0804%" height="15" fill="rgb(232,152,27)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.6334%" y="309" width="0.0804%" height="15" fill="rgb(240,34,29)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.6334%" y="293" width="0.0804%" height="15" fill="rgb(215,185,52)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="303.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.6334%" y="277" width="0.0804%" height="15" fill="rgb(240,89,49)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6334%" y="261" width="0.0804%" height="15" fill="rgb(225,12,52)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6334%" y="245" width="0.0804%" height="15" fill="rgb(239,128,45)" fg:x="1227" fg:w="1"/><text x="98.8834%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7138%" y="341" width="0.0804%" height="15" fill="rgb(211,78,47)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7138%" y="325" width="0.0804%" height="15" fill="rgb(232,31,21)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7138%" y="309" width="0.0804%" height="15" fill="rgb(222,168,14)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7138%" y="293" width="0.0804%" height="15" fill="rgb(209,128,24)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7138%" y="277" width="0.0804%" height="15" fill="rgb(249,35,13)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7138%" y="261" width="0.0804%" height="15" fill="rgb(218,7,2)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7138%" y="245" width="0.0804%" height="15" fill="rgb(238,107,27)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7138%" y="229" width="0.0804%" height="15" fill="rgb(217,88,38)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7138%" y="213" width="0.0804%" height="15" fill="rgb(230,207,0)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7138%" y="197" width="0.0804%" height="15" fill="rgb(249,64,54)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.7138%" y="181" width="0.0804%" height="15" fill="rgb(231,7,11)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.7138%" y="165" width="0.0804%" height="15" fill="rgb(205,149,21)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.7138%" y="149" width="0.0804%" height="15" fill="rgb(215,126,34)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.7138%" y="133" width="0.0804%" height="15" fill="rgb(241,132,45)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7138%" y="117" width="0.0804%" height="15" fill="rgb(252,69,32)" fg:x="1228" fg:w="1"/><text x="98.9638%" y="127.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.7942%" y="277" width="0.0804%" height="15" fill="rgb(232,204,19)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7942%" y="261" width="0.0804%" height="15" fill="rgb(249,15,47)" fg:x="1229" fg:w="1"/><text x="99.0442%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.96%)</title><rect x="98.1511%" y="421" width="0.9646%" height="15" fill="rgb(209,227,23)" fg:x="1221" fg:w="12"/><text x="98.4011%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.96%)</title><rect x="98.1511%" y="405" width="0.9646%" height="15" fill="rgb(248,92,24)" fg:x="1221" fg:w="12"/><text x="98.4011%" y="415.50"></text></g><g><title>plugins_core::tools::get_contained_keys (5 samples, 0.40%)</title><rect x="98.7138%" y="389" width="0.4019%" height="15" fill="rgb(247,59,2)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="98.7138%" y="373" width="0.4019%" height="15" fill="rgb(221,30,5)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="383.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.40%)</title><rect x="98.7138%" y="357" width="0.4019%" height="15" fill="rgb(208,108,53)" fg:x="1228" fg:w="5"/><text x="98.9638%" y="367.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (4 samples, 0.32%)</title><rect x="98.7942%" y="341" width="0.3215%" height="15" fill="rgb(211,183,26)" fg:x="1229" fg:w="4"/><text x="99.0442%" y="351.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="98.7942%" y="325" width="0.3215%" height="15" fill="rgb(232,132,4)" fg:x="1229" fg:w="4"/><text x="99.0442%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.7942%" y="309" width="0.3215%" height="15" fill="rgb(253,128,37)" fg:x="1229" fg:w="4"/><text x="99.0442%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.32%)</title><rect x="98.7942%" y="293" width="0.3215%" height="15" fill="rgb(221,58,24)" fg:x="1229" fg:w="4"/><text x="99.0442%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.24%)</title><rect x="98.8746%" y="277" width="0.2412%" height="15" fill="rgb(230,54,45)" fg:x="1230" fg:w="3"/><text x="99.1246%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="98.9550%" y="261" width="0.1608%" height="15" fill="rgb(254,21,18)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="271.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="98.9550%" y="245" width="0.1608%" height="15" fill="rgb(221,108,0)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="98.9550%" y="229" width="0.1608%" height="15" fill="rgb(206,95,1)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.9550%" y="213" width="0.1608%" height="15" fill="rgb(237,52,5)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9550%" y="197" width="0.1608%" height="15" fill="rgb(218,150,34)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.9550%" y="181" width="0.1608%" height="15" fill="rgb(235,194,28)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9550%" y="165" width="0.1608%" height="15" fill="rgb(245,92,18)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="175.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.9550%" y="149" width="0.1608%" height="15" fill="rgb(253,203,53)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9550%" y="133" width="0.1608%" height="15" fill="rgb(249,185,47)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.9550%" y="117" width="0.1608%" height="15" fill="rgb(252,194,52)" fg:x="1231" fg:w="2"/><text x="99.2050%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.0354%" y="101" width="0.0804%" height="15" fill="rgb(210,53,36)" fg:x="1232" fg:w="1"/><text x="99.2854%" y="111.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="99.1961%" y="309" width="0.1608%" height="15" fill="rgb(237,37,25)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1961%" y="293" width="0.1608%" height="15" fill="rgb(242,116,27)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="99.1961%" y="277" width="0.1608%" height="15" fill="rgb(213,185,26)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="99.1961%" y="261" width="0.1608%" height="15" fill="rgb(225,204,8)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="99.1961%" y="245" width="0.1608%" height="15" fill="rgb(254,111,37)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="99.1961%" y="229" width="0.1608%" height="15" fill="rgb(242,35,9)" fg:x="1234" fg:w="2"/><text x="99.4461%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.2765%" y="213" width="0.0804%" height="15" fill="rgb(232,138,49)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="223.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2765%" y="197" width="0.0804%" height="15" fill="rgb(247,56,4)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.2765%" y="181" width="0.0804%" height="15" fill="rgb(226,179,17)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="191.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.2765%" y="165" width="0.0804%" height="15" fill="rgb(216,163,45)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2765%" y="149" width="0.0804%" height="15" fill="rgb(211,157,3)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.2765%" y="133" width="0.0804%" height="15" fill="rgb(234,44,20)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2765%" y="117" width="0.0804%" height="15" fill="rgb(254,138,23)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.2765%" y="101" width="0.0804%" height="15" fill="rgb(206,119,39)" fg:x="1235" fg:w="1"/><text x="99.5265%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="99.1158%" y="325" width="0.3215%" height="15" fill="rgb(231,105,52)" fg:x="1233" fg:w="4"/><text x="99.3658%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.3569%" y="309" width="0.0804%" height="15" fill="rgb(250,20,5)" fg:x="1236" fg:w="1"/><text x="99.6069%" y="319.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.40%)</title><rect x="99.1158%" y="357" width="0.4019%" height="15" fill="rgb(215,198,30)" fg:x="1233" fg:w="5"/><text x="99.3658%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="99.1158%" y="341" width="0.4019%" height="15" fill="rgb(246,142,8)" fg:x="1233" fg:w="5"/><text x="99.3658%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.4373%" y="325" width="0.0804%" height="15" fill="rgb(243,26,38)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4373%" y="309" width="0.0804%" height="15" fill="rgb(205,133,28)" fg:x="1237" fg:w="1"/><text x="99.6873%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5177%" y="309" width="0.0804%" height="15" fill="rgb(212,34,0)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5177%" y="293" width="0.0804%" height="15" fill="rgb(251,226,22)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.5177%" y="277" width="0.0804%" height="15" fill="rgb(252,119,9)" fg:x="1238" fg:w="1"/><text x="99.7677%" y="287.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (259 samples, 20.82%)</title><rect x="78.8585%" y="517" width="20.8199%" height="15" fill="rgb(213,150,50)" fg:x="981" fg:w="259"/><text x="79.1085%" y="527.50">&lt;engine::perform::StandardPerform..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (23 samples, 1.85%)</title><rect x="97.8296%" y="501" width="1.8489%" height="15" fill="rgb(212,24,39)" fg:x="1217" fg:w="23"/><text x="98.0796%" y="511.50">k..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (23 samples, 1.85%)</title><rect x="97.8296%" y="485" width="1.8489%" height="15" fill="rgb(213,46,39)" fg:x="1217" fg:w="23"/><text x="98.0796%" y="495.50">&lt;..</text></g><g><title>plugins_rpc::querying::have_surroundings (22 samples, 1.77%)</title><rect x="97.9100%" y="469" width="1.7685%" height="15" fill="rgb(239,106,12)" fg:x="1218" fg:w="22"/><text x="98.1600%" y="479.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (21 samples, 1.69%)</title><rect x="97.9904%" y="453" width="1.6881%" height="15" fill="rgb(249,229,21)" fg:x="1219" fg:w="21"/><text x="98.2404%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.53%)</title><rect x="98.1511%" y="437" width="1.5273%" height="15" fill="rgb(212,158,3)" fg:x="1221" fg:w="19"/><text x="98.4011%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="99.1158%" y="421" width="0.5627%" height="15" fill="rgb(253,26,48)" fg:x="1233" fg:w="7"/><text x="99.3658%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.56%)</title><rect x="99.1158%" y="405" width="0.5627%" height="15" fill="rgb(238,178,20)" fg:x="1233" fg:w="7"/><text x="99.3658%" y="415.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (7 samples, 0.56%)</title><rect x="99.1158%" y="389" width="0.5627%" height="15" fill="rgb(208,86,15)" fg:x="1233" fg:w="7"/><text x="99.3658%" y="399.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (7 samples, 0.56%)</title><rect x="99.1158%" y="373" width="0.5627%" height="15" fill="rgb(239,42,53)" fg:x="1233" fg:w="7"/><text x="99.3658%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (2 samples, 0.16%)</title><rect x="99.5177%" y="357" width="0.1608%" height="15" fill="rgb(245,226,8)" fg:x="1238" fg:w="2"/><text x="99.7677%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="99.5177%" y="341" width="0.1608%" height="15" fill="rgb(216,176,32)" fg:x="1238" fg:w="2"/><text x="99.7677%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.5177%" y="325" width="0.1608%" height="15" fill="rgb(231,186,21)" fg:x="1238" fg:w="2"/><text x="99.7677%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.5981%" y="309" width="0.0804%" height="15" fill="rgb(205,95,49)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5981%" y="293" width="0.0804%" height="15" fill="rgb(217,145,8)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.5981%" y="277" width="0.0804%" height="15" fill="rgb(239,144,48)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5981%" y="261" width="0.0804%" height="15" fill="rgb(214,189,23)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.5981%" y="245" width="0.0804%" height="15" fill="rgb(229,157,17)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="255.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5981%" y="229" width="0.0804%" height="15" fill="rgb(230,5,48)" fg:x="1239" fg:w="1"/><text x="99.8481%" y="239.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (260 samples, 20.90%)</title><rect x="78.8585%" y="549" width="20.9003%" height="15" fill="rgb(224,156,48)" fg:x="981" fg:w="260"/><text x="79.1085%" y="559.50">&lt;plugins_core::looking::LookingPl..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (260 samples, 20.90%)</title><rect x="78.8585%" y="533" width="20.9003%" height="15" fill="rgb(223,14,29)" fg:x="981" fg:w="260"/><text x="79.1085%" y="543.50">&lt;engine::perform::StandardPerform..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (1 samples, 0.08%)</title><rect x="99.6785%" y="517" width="0.0804%" height="15" fill="rgb(229,96,36)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="99.6785%" y="501" width="0.0804%" height="15" fill="rgb(231,102,53)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="99.6785%" y="485" width="0.0804%" height="15" fill="rgb(210,77,38)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="99.6785%" y="469" width="0.0804%" height="15" fill="rgb(235,131,6)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.6785%" y="453" width="0.0804%" height="15" fill="rgb(252,55,38)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6785%" y="437" width="0.0804%" height="15" fill="rgb(246,38,14)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6785%" y="421" width="0.0804%" height="15" fill="rgb(242,27,5)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6785%" y="405" width="0.0804%" height="15" fill="rgb(228,65,35)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6785%" y="389" width="0.0804%" height="15" fill="rgb(245,93,11)" fg:x="1240" fg:w="1"/><text x="99.9285%" y="399.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (261 samples, 20.98%)</title><rect x="78.8585%" y="613" width="20.9807%" height="15" fill="rgb(213,1,31)" fg:x="981" fg:w="261"/><text x="79.1085%" y="623.50">&lt;kernel::plugins::SessionPlugins ..</text></g><g><title>core::iter::adapters::try_process (261 samples, 20.98%)</title><rect x="78.8585%" y="597" width="20.9807%" height="15" fill="rgb(237,205,14)" fg:x="981" fg:w="261"/><text x="79.1085%" y="607.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (261 samples, 20.98%)</title><rect x="78.8585%" y="581" width="20.9807%" height="15" fill="rgb(232,118,45)" fg:x="981" fg:w="261"/><text x="79.1085%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (261 samples, 20.98%)</title><rect x="78.8585%" y="565" width="20.9807%" height="15" fill="rgb(218,5,6)" fg:x="981" fg:w="261"/><text x="79.1085%" y="575.50">&lt;core::iter::adapters::GenericShu..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="99.7588%" y="549" width="0.0804%" height="15" fill="rgb(251,87,51)" fg:x="1241" fg:w="1"/><text x="100.0088%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7588%" y="533" width="0.0804%" height="15" fill="rgb(207,225,20)" fg:x="1241" fg:w="1"/><text x="100.0088%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8392%" y="469" width="0.0804%" height="15" fill="rgb(222,78,54)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8392%" y="453" width="0.0804%" height="15" fill="rgb(232,85,16)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8392%" y="437" width="0.0804%" height="15" fill="rgb(244,25,33)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.8392%" y="421" width="0.0804%" height="15" fill="rgb(233,24,36)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.8392%" y="405" width="0.0804%" height="15" fill="rgb(253,49,54)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.8392%" y="389" width="0.0804%" height="15" fill="rgb(245,12,22)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.8392%" y="373" width="0.0804%" height="15" fill="rgb(253,141,28)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.8392%" y="357" width="0.0804%" height="15" fill="rgb(225,207,27)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="99.8392%" y="341" width="0.0804%" height="15" fill="rgb(220,84,2)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.8392%" y="325" width="0.0804%" height="15" fill="rgb(224,37,37)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="99.8392%" y="309" width="0.0804%" height="15" fill="rgb(220,143,18)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.08%)</title><rect x="99.8392%" y="293" width="0.0804%" height="15" fill="rgb(210,88,33)" fg:x="1242" fg:w="1"/><text x="100.0892%" y="303.50"></text></g><g><title>all (1,244 samples, 100%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(219,87,51)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="1007.50"></text></g><g><title>simple-bd24e590 (1,244 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(211,7,35)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="991.50">simple-bd24e590</text></g><g><title>_start (1,244 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(232,77,2)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="975.50">_start</text></g><g><title>__libc_start_main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(249,94,25)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="959.50">__libc_start_main</text></g><g><title>main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(215,112,2)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="943.50">main</text></g><g><title>std::rt::lang_start_internal (1,244 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(226,115,48)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(249,196,10)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(237,109,14)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(217,103,53)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(244,137,9)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,244 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(227,201,3)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,244 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(243,94,6)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,244 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(235,118,5)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,244 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(247,10,30)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="799.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,244 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(205,26,28)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="783.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,244 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(206,99,35)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,244 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(238,130,40)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="751.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,244 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(224,126,31)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="735.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,244 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(254,105,17)" fg:x="0" fg:w="1244"/><text x="0.2500%" y="719.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (309 samples, 24.84%)</title><rect x="75.1608%" y="693" width="24.8392%" height="15" fill="rgb(216,87,36)" fg:x="935" fg:w="309"/><text x="75.4108%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (309 samples, 24.84%)</title><rect x="75.1608%" y="677" width="24.8392%" height="15" fill="rgb(240,21,12)" fg:x="935" fg:w="309"/><text x="75.4108%" y="687.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (309 samples, 24.84%)</title><rect x="75.1608%" y="661" width="24.8392%" height="15" fill="rgb(245,192,34)" fg:x="935" fg:w="309"/><text x="75.4108%" y="671.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (263 samples, 21.14%)</title><rect x="78.8585%" y="645" width="21.1415%" height="15" fill="rgb(226,100,49)" fg:x="981" fg:w="263"/><text x="79.1085%" y="655.50">engine::session::Session::evaluat..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (263 samples, 21.14%)</title><rect x="78.8585%" y="629" width="21.1415%" height="15" fill="rgb(245,188,27)" fg:x="981" fg:w="263"/><text x="79.1085%" y="639.50">engine::perform::StandardPerforme..</text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="99.8392%" y="613" width="0.1608%" height="15" fill="rgb(212,170,8)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="99.8392%" y="597" width="0.1608%" height="15" fill="rgb(217,113,29)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="99.8392%" y="581" width="0.1608%" height="15" fill="rgb(237,30,3)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="99.8392%" y="565" width="0.1608%" height="15" fill="rgb(227,19,28)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="99.8392%" y="549" width="0.1608%" height="15" fill="rgb(239,172,45)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="99.8392%" y="533" width="0.1608%" height="15" fill="rgb(254,55,39)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="99.8392%" y="517" width="0.1608%" height="15" fill="rgb(249,208,12)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="99.8392%" y="501" width="0.1608%" height="15" fill="rgb(240,52,13)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="511.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="99.8392%" y="485" width="0.1608%" height="15" fill="rgb(252,149,13)" fg:x="1242" fg:w="2"/><text x="100.0892%" y="495.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="99.9196%" y="469" width="0.0804%" height="15" fill="rgb(232,81,48)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="479.50"></text></g><g><title>core::fmt::getcount (1 samples, 0.08%)</title><rect x="99.9196%" y="453" width="0.0804%" height="15" fill="rgb(222,144,2)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::as_usize (1 samples, 0.08%)</title><rect x="99.9196%" y="437" width="0.0804%" height="15" fill="rgb(216,81,32)" fg:x="1243" fg:w="1"/><text x="100.1696%" y="447.50"></text></g></svg></svg>