<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1255"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0797%" y="693" width="0.0797%" height="15" fill="rgb(226,27,51)" fg:x="1" fg:w="1"/><text x="0.3297%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0797%" y="677" width="0.0797%" height="15" fill="rgb(206,104,42)" fg:x="1" fg:w="1"/><text x="0.3297%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1594%" y="677" width="0.0797%" height="15" fill="rgb(212,225,4)" fg:x="2" fg:w="1"/><text x="0.4094%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (7 samples, 0.56%)</title><rect x="0.0797%" y="725" width="0.5578%" height="15" fill="rgb(233,96,42)" fg:x="1" fg:w="7"/><text x="0.3297%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0797%" y="709" width="0.5578%" height="15" fill="rgb(229,21,32)" fg:x="1" fg:w="7"/><text x="0.3297%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.48%)</title><rect x="0.1594%" y="693" width="0.4781%" height="15" fill="rgb(226,216,24)" fg:x="2" fg:w="6"/><text x="0.4094%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.40%)</title><rect x="0.2390%" y="677" width="0.3984%" height="15" fill="rgb(221,163,17)" fg:x="3" fg:w="5"/><text x="0.4890%" y="687.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.3984%" y="661" width="0.2390%" height="15" fill="rgb(216,216,42)" fg:x="5" fg:w="3"/><text x="0.6484%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.6375%" y="645" width="0.0797%" height="15" fill="rgb(240,118,7)" fg:x="8" fg:w="1"/><text x="0.8875%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7171%" y="613" width="0.0797%" height="15" fill="rgb(221,67,37)" fg:x="9" fg:w="1"/><text x="0.9671%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7968%" y="613" width="0.0797%" height="15" fill="rgb(241,32,44)" fg:x="10" fg:w="1"/><text x="1.0468%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7968%" y="597" width="0.0797%" height="15" fill="rgb(235,204,43)" fg:x="10" fg:w="1"/><text x="1.0468%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.8765%" y="597" width="0.1594%" height="15" fill="rgb(213,116,10)" fg:x="11" fg:w="2"/><text x="1.1265%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="1.0359%" y="597" width="0.0797%" height="15" fill="rgb(239,15,48)" fg:x="13" fg:w="1"/><text x="1.2859%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.0359%" y="581" width="0.0797%" height="15" fill="rgb(207,123,36)" fg:x="13" fg:w="1"/><text x="1.2859%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0359%" y="565" width="0.0797%" height="15" fill="rgb(209,103,30)" fg:x="13" fg:w="1"/><text x="1.2859%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1155%" y="581" width="0.0797%" height="15" fill="rgb(238,100,19)" fg:x="14" fg:w="1"/><text x="1.3655%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1952%" y="581" width="0.0797%" height="15" fill="rgb(244,30,14)" fg:x="15" fg:w="1"/><text x="1.4452%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1952%" y="565" width="0.0797%" height="15" fill="rgb(249,174,6)" fg:x="15" fg:w="1"/><text x="1.4452%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="0.6375%" y="661" width="0.7171%" height="15" fill="rgb(235,213,41)" fg:x="8" fg:w="9"/><text x="0.8875%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (8 samples, 0.64%)</title><rect x="0.7171%" y="645" width="0.6375%" height="15" fill="rgb(213,118,6)" fg:x="9" fg:w="8"/><text x="0.9671%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.64%)</title><rect x="0.7171%" y="629" width="0.6375%" height="15" fill="rgb(235,44,51)" fg:x="9" fg:w="8"/><text x="0.9671%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.8765%" y="613" width="0.4781%" height="15" fill="rgb(217,9,53)" fg:x="11" fg:w="6"/><text x="1.1265%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.1155%" y="597" width="0.2390%" height="15" fill="rgb(237,172,34)" fg:x="14" fg:w="3"/><text x="1.3655%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2749%" y="581" width="0.0797%" height="15" fill="rgb(206,206,11)" fg:x="16" fg:w="1"/><text x="1.5249%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4343%" y="645" width="0.0797%" height="15" fill="rgb(214,149,29)" fg:x="18" fg:w="1"/><text x="1.6843%" y="655.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.5936%" y="629" width="0.2390%" height="15" fill="rgb(208,123,3)" fg:x="20" fg:w="3"/><text x="1.8436%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.8327%" y="629" width="0.1594%" height="15" fill="rgb(229,126,4)" fg:x="23" fg:w="2"/><text x="2.0827%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.8327%" y="613" width="0.1594%" height="15" fill="rgb(222,92,36)" fg:x="23" fg:w="2"/><text x="2.0827%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.9920%" y="613" width="0.0797%" height="15" fill="rgb(216,39,41)" fg:x="25" fg:w="1"/><text x="2.2420%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0717%" y="597" width="0.0797%" height="15" fill="rgb(253,127,28)" fg:x="26" fg:w="1"/><text x="2.3217%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="2.1514%" y="597" width="0.0797%" height="15" fill="rgb(249,152,51)" fg:x="27" fg:w="1"/><text x="2.4014%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.1514%" y="581" width="0.0797%" height="15" fill="rgb(209,123,42)" fg:x="27" fg:w="1"/><text x="2.4014%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.1514%" y="565" width="0.0797%" height="15" fill="rgb(241,118,22)" fg:x="27" fg:w="1"/><text x="2.4014%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2311%" y="581" width="0.0797%" height="15" fill="rgb(208,25,7)" fg:x="28" fg:w="1"/><text x="2.4811%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 2.31%)</title><rect x="0.0797%" y="741" width="2.3108%" height="15" fill="rgb(243,144,39)" fg:x="1" fg:w="29"/><text x="0.3297%" y="751.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (22 samples, 1.75%)</title><rect x="0.6375%" y="725" width="1.7530%" height="15" fill="rgb(250,50,5)" fg:x="8" fg:w="22"/><text x="0.8875%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.75%)</title><rect x="0.6375%" y="709" width="1.7530%" height="15" fill="rgb(207,67,11)" fg:x="8" fg:w="22"/><text x="0.8875%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (22 samples, 1.75%)</title><rect x="0.6375%" y="693" width="1.7530%" height="15" fill="rgb(245,204,40)" fg:x="8" fg:w="22"/><text x="0.8875%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.75%)</title><rect x="0.6375%" y="677" width="1.7530%" height="15" fill="rgb(238,228,24)" fg:x="8" fg:w="22"/><text x="0.8875%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 1.04%)</title><rect x="1.3546%" y="661" width="1.0359%" height="15" fill="rgb(217,116,22)" fg:x="17" fg:w="13"/><text x="1.6046%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.88%)</title><rect x="1.5139%" y="645" width="0.8765%" height="15" fill="rgb(234,98,12)" fg:x="19" fg:w="11"/><text x="1.7639%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="1.9920%" y="629" width="0.3984%" height="15" fill="rgb(242,170,50)" fg:x="25" fg:w="5"/><text x="2.2420%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="2.0717%" y="613" width="0.3187%" height="15" fill="rgb(235,7,5)" fg:x="26" fg:w="4"/><text x="2.3217%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2311%" y="597" width="0.1594%" height="15" fill="rgb(241,114,28)" fg:x="28" fg:w="2"/><text x="2.4811%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.3108%" y="581" width="0.0797%" height="15" fill="rgb(246,112,42)" fg:x="29" fg:w="1"/><text x="2.5608%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.4701%" y="677" width="0.0797%" height="15" fill="rgb(248,228,14)" fg:x="31" fg:w="1"/><text x="2.7201%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.4701%" y="661" width="0.0797%" height="15" fill="rgb(208,133,18)" fg:x="31" fg:w="1"/><text x="2.7201%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.4701%" y="645" width="0.0797%" height="15" fill="rgb(207,35,49)" fg:x="31" fg:w="1"/><text x="2.7201%" y="655.50"></text></g><g><title>&lt;plugins_core::building::actions::BidirectionalDigAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="2.7888%" y="613" width="0.1594%" height="15" fill="rgb(205,68,36)" fg:x="35" fg:w="2"/><text x="3.0388%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.8685%" y="597" width="0.0797%" height="15" fill="rgb(245,62,40)" fg:x="36" fg:w="1"/><text x="3.1185%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.8685%" y="581" width="0.0797%" height="15" fill="rgb(228,27,24)" fg:x="36" fg:w="1"/><text x="3.1185%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.8685%" y="565" width="0.0797%" height="15" fill="rgb(253,19,12)" fg:x="36" fg:w="1"/><text x="3.1185%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.8685%" y="549" width="0.0797%" height="15" fill="rgb(232,28,20)" fg:x="36" fg:w="1"/><text x="3.1185%" y="559.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.9482%" y="613" width="0.0797%" height="15" fill="rgb(218,35,51)" fg:x="37" fg:w="1"/><text x="3.1982%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.9482%" y="597" width="0.0797%" height="15" fill="rgb(212,90,40)" fg:x="37" fg:w="1"/><text x="3.1982%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.9482%" y="581" width="0.0797%" height="15" fill="rgb(220,172,12)" fg:x="37" fg:w="1"/><text x="3.1982%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.9482%" y="565" width="0.0797%" height="15" fill="rgb(226,159,20)" fg:x="37" fg:w="1"/><text x="3.1982%" y="575.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="2.7888%" y="645" width="0.3984%" height="15" fill="rgb(234,205,16)" fg:x="35" fg:w="5"/><text x="3.0388%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="2.7888%" y="629" width="0.3984%" height="15" fill="rgb(207,9,39)" fg:x="35" fg:w="5"/><text x="3.0388%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (2 samples, 0.16%)</title><rect x="3.0279%" y="613" width="0.1594%" height="15" fill="rgb(249,143,15)" fg:x="38" fg:w="2"/><text x="3.2779%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.1076%" y="597" width="0.0797%" height="15" fill="rgb(253,133,29)" fg:x="39" fg:w="1"/><text x="3.3576%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="3.1873%" y="597" width="0.0797%" height="15" fill="rgb(221,187,0)" fg:x="40" fg:w="1"/><text x="3.4373%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="3.1873%" y="581" width="0.0797%" height="15" fill="rgb(205,204,26)" fg:x="40" fg:w="1"/><text x="3.4373%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (3 samples, 0.24%)</title><rect x="3.1873%" y="613" width="0.2390%" height="15" fill="rgb(224,68,54)" fg:x="40" fg:w="3"/><text x="3.4373%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="3.2669%" y="597" width="0.1594%" height="15" fill="rgb(209,67,4)" fg:x="41" fg:w="2"/><text x="3.5169%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="3.2669%" y="581" width="0.1594%" height="15" fill="rgb(228,229,18)" fg:x="41" fg:w="2"/><text x="3.5169%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="3.2669%" y="565" width="0.1594%" height="15" fill="rgb(231,89,13)" fg:x="41" fg:w="2"/><text x="3.5169%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.2669%" y="549" width="0.1594%" height="15" fill="rgb(210,182,18)" fg:x="41" fg:w="2"/><text x="3.5169%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::actions::GiveToAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="3.4263%" y="613" width="0.1594%" height="15" fill="rgb(240,105,2)" fg:x="43" fg:w="2"/><text x="3.6763%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="3.4263%" y="597" width="0.1594%" height="15" fill="rgb(207,170,50)" fg:x="43" fg:w="2"/><text x="3.6763%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::actions::PutInsideAction as replies::DeserializeTagged&gt;::from_tagged_json (1 samples, 0.08%)</title><rect x="3.5857%" y="613" width="0.0797%" height="15" fill="rgb(232,133,24)" fg:x="45" fg:w="1"/><text x="3.8357%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::actions::TakeOutAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.6653%" y="613" width="0.0797%" height="15" fill="rgb(235,166,27)" fg:x="46" fg:w="1"/><text x="3.9153%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="3.6653%" y="597" width="0.0797%" height="15" fill="rgb(209,19,13)" fg:x="46" fg:w="1"/><text x="3.9153%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (8 samples, 0.64%)</title><rect x="3.1873%" y="645" width="0.6375%" height="15" fill="rgb(226,79,39)" fg:x="40" fg:w="8"/><text x="3.4373%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (8 samples, 0.64%)</title><rect x="3.1873%" y="629" width="0.6375%" height="15" fill="rgb(222,163,10)" fg:x="40" fg:w="8"/><text x="3.4373%" y="639.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="3.7450%" y="613" width="0.0797%" height="15" fill="rgb(214,44,19)" fg:x="47" fg:w="1"/><text x="3.9950%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7450%" y="597" width="0.0797%" height="15" fill="rgb(210,217,13)" fg:x="47" fg:w="1"/><text x="3.9950%" y="607.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.8247%" y="645" width="0.0797%" height="15" fill="rgb(237,61,54)" fg:x="48" fg:w="1"/><text x="4.0747%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="3.8247%" y="629" width="0.0797%" height="15" fill="rgb(226,184,24)" fg:x="48" fg:w="1"/><text x="4.0747%" y="639.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="3.8247%" y="613" width="0.0797%" height="15" fill="rgb(223,226,4)" fg:x="48" fg:w="1"/><text x="4.0747%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8247%" y="597" width="0.0797%" height="15" fill="rgb(210,26,41)" fg:x="48" fg:w="1"/><text x="4.0747%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="3.9044%" y="645" width="0.0797%" height="15" fill="rgb(220,221,6)" fg:x="49" fg:w="1"/><text x="4.1544%" y="655.50"></text></g><g><title>kernel::plugins::Schema::empty (1 samples, 0.08%)</title><rect x="3.9044%" y="629" width="0.0797%" height="15" fill="rgb(225,89,49)" fg:x="49" fg:w="1"/><text x="4.1544%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="3.9841%" y="613" width="0.1594%" height="15" fill="rgb(218,70,45)" fg:x="50" fg:w="2"/><text x="4.2341%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (2 samples, 0.16%)</title><rect x="3.9841%" y="597" width="0.1594%" height="15" fill="rgb(238,166,21)" fg:x="50" fg:w="2"/><text x="4.2341%" y="607.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.9841%" y="581" width="0.1594%" height="15" fill="rgb(224,141,44)" fg:x="50" fg:w="2"/><text x="4.2341%" y="591.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="3.9841%" y="645" width="0.2390%" height="15" fill="rgb(230,12,49)" fg:x="50" fg:w="3"/><text x="4.2341%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="3.9841%" y="629" width="0.2390%" height="15" fill="rgb(212,174,12)" fg:x="50" fg:w="3"/><text x="4.2341%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.1434%" y="613" width="0.0797%" height="15" fill="rgb(246,67,9)" fg:x="52" fg:w="1"/><text x="4.3934%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (20 samples, 1.59%)</title><rect x="2.7092%" y="661" width="1.5936%" height="15" fill="rgb(239,35,23)" fg:x="34" fg:w="20"/><text x="2.9592%" y="671.50"></text></g><g><title>kernel::plugins::Plugin::schema (1 samples, 0.08%)</title><rect x="4.2231%" y="645" width="0.0797%" height="15" fill="rgb(211,167,0)" fg:x="53" fg:w="1"/><text x="4.4731%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="4.3028%" y="645" width="0.1594%" height="15" fill="rgb(225,119,45)" fg:x="54" fg:w="2"/><text x="4.5528%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="4.3028%" y="629" width="0.1594%" height="15" fill="rgb(210,162,6)" fg:x="54" fg:w="2"/><text x="4.5528%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="4.3028%" y="613" width="0.1594%" height="15" fill="rgb(208,118,35)" fg:x="54" fg:w="2"/><text x="4.5528%" y="623.50"></text></g><g><title>core::fmt::Formatter::new (2 samples, 0.16%)</title><rect x="4.3028%" y="597" width="0.1594%" height="15" fill="rgb(239,4,53)" fg:x="54" fg:w="2"/><text x="4.5528%" y="607.50"></text></g><g><title>std::ffi::os_str::&lt;impl core::convert::TryFrom&lt;&amp;std::ffi::os_str::OsStr&gt; for &amp;str&gt;::try_from (1 samples, 0.08%)</title><rect x="4.4622%" y="645" width="0.0797%" height="15" fill="rgb(213,130,21)" fg:x="56" fg:w="1"/><text x="4.7122%" y="655.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_str (1 samples, 0.08%)</title><rect x="4.4622%" y="629" width="0.0797%" height="15" fill="rgb(235,148,0)" fg:x="56" fg:w="1"/><text x="4.7122%" y="639.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.08%)</title><rect x="4.4622%" y="613" width="0.0797%" height="15" fill="rgb(244,224,18)" fg:x="56" fg:w="1"/><text x="4.7122%" y="623.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.08%)</title><rect x="4.4622%" y="597" width="0.0797%" height="15" fill="rgb(211,214,4)" fg:x="56" fg:w="1"/><text x="4.7122%" y="607.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="4.5418%" y="597" width="0.0797%" height="15" fill="rgb(206,119,25)" fg:x="57" fg:w="1"/><text x="4.7918%" y="607.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="4.5418%" y="581" width="0.0797%" height="15" fill="rgb(243,93,47)" fg:x="57" fg:w="1"/><text x="4.7918%" y="591.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="4.5418%" y="565" width="0.0797%" height="15" fill="rgb(224,194,6)" fg:x="57" fg:w="1"/><text x="4.7918%" y="575.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.56%)</title><rect x="4.3028%" y="661" width="0.5578%" height="15" fill="rgb(243,229,6)" fg:x="54" fg:w="7"/><text x="4.5528%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (4 samples, 0.32%)</title><rect x="4.5418%" y="645" width="0.3187%" height="15" fill="rgb(207,23,50)" fg:x="57" fg:w="4"/><text x="4.7918%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (4 samples, 0.32%)</title><rect x="4.5418%" y="629" width="0.3187%" height="15" fill="rgb(253,192,32)" fg:x="57" fg:w="4"/><text x="4.7918%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (4 samples, 0.32%)</title><rect x="4.5418%" y="613" width="0.3187%" height="15" fill="rgb(213,21,6)" fg:x="57" fg:w="4"/><text x="4.7918%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="4.6215%" y="597" width="0.2390%" height="15" fill="rgb(243,151,13)" fg:x="58" fg:w="3"/><text x="4.8715%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="4.6215%" y="581" width="0.2390%" height="15" fill="rgb(233,165,41)" fg:x="58" fg:w="3"/><text x="4.8715%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="4.6215%" y="565" width="0.2390%" height="15" fill="rgb(246,176,45)" fg:x="58" fg:w="3"/><text x="4.8715%" y="575.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="4.6215%" y="549" width="0.2390%" height="15" fill="rgb(217,170,52)" fg:x="58" fg:w="3"/><text x="4.8715%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="5.0199%" y="597" width="0.1594%" height="15" fill="rgb(214,203,54)" fg:x="63" fg:w="2"/><text x="5.2699%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="5.0199%" y="581" width="0.1594%" height="15" fill="rgb(248,215,49)" fg:x="63" fg:w="2"/><text x="5.2699%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="5.0199%" y="565" width="0.1594%" height="15" fill="rgb(208,46,10)" fg:x="63" fg:w="2"/><text x="5.2699%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="5.0199%" y="549" width="0.1594%" height="15" fill="rgb(254,5,31)" fg:x="63" fg:w="2"/><text x="5.2699%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="5.0199%" y="533" width="0.1594%" height="15" fill="rgb(222,104,33)" fg:x="63" fg:w="2"/><text x="5.2699%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="5.0199%" y="517" width="0.1594%" height="15" fill="rgb(248,49,16)" fg:x="63" fg:w="2"/><text x="5.2699%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="5.0199%" y="501" width="0.1594%" height="15" fill="rgb(232,198,41)" fg:x="63" fg:w="2"/><text x="5.2699%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="5.0199%" y="485" width="0.1594%" height="15" fill="rgb(214,125,3)" fg:x="63" fg:w="2"/><text x="5.2699%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="5.0199%" y="469" width="0.1594%" height="15" fill="rgb(229,220,28)" fg:x="63" fg:w="2"/><text x="5.2699%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="5.0199%" y="453" width="0.1594%" height="15" fill="rgb(222,64,37)" fg:x="63" fg:w="2"/><text x="5.2699%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="5.0199%" y="437" width="0.1594%" height="15" fill="rgb(249,184,13)" fg:x="63" fg:w="2"/><text x="5.2699%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.0199%" y="421" width="0.1594%" height="15" fill="rgb(252,176,6)" fg:x="63" fg:w="2"/><text x="5.2699%" y="431.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (6 samples, 0.48%)</title><rect x="4.8606%" y="645" width="0.4781%" height="15" fill="rgb(228,153,7)" fg:x="61" fg:w="6"/><text x="5.1106%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.48%)</title><rect x="4.8606%" y="629" width="0.4781%" height="15" fill="rgb(242,193,5)" fg:x="61" fg:w="6"/><text x="5.1106%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="5.0199%" y="613" width="0.3187%" height="15" fill="rgb(232,140,9)" fg:x="63" fg:w="4"/><text x="5.2699%" y="623.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.1793%" y="597" width="0.1594%" height="15" fill="rgb(213,222,16)" fg:x="65" fg:w="2"/><text x="5.4293%" y="607.50"></text></g><g><title>glob::is_dir (6 samples, 0.48%)</title><rect x="5.3386%" y="597" width="0.4781%" height="15" fill="rgb(222,75,50)" fg:x="67" fg:w="6"/><text x="5.5886%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (6 samples, 0.48%)</title><rect x="5.3386%" y="581" width="0.4781%" height="15" fill="rgb(205,180,2)" fg:x="67" fg:w="6"/><text x="5.5886%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (6 samples, 0.48%)</title><rect x="5.3386%" y="565" width="0.4781%" height="15" fill="rgb(216,34,7)" fg:x="67" fg:w="6"/><text x="5.5886%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (6 samples, 0.48%)</title><rect x="5.3386%" y="549" width="0.4781%" height="15" fill="rgb(253,16,32)" fg:x="67" fg:w="6"/><text x="5.5886%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (6 samples, 0.48%)</title><rect x="5.3386%" y="533" width="0.4781%" height="15" fill="rgb(208,97,28)" fg:x="67" fg:w="6"/><text x="5.5886%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (6 samples, 0.48%)</title><rect x="5.3386%" y="517" width="0.4781%" height="15" fill="rgb(225,92,11)" fg:x="67" fg:w="6"/><text x="5.5886%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.48%)</title><rect x="5.3386%" y="501" width="0.4781%" height="15" fill="rgb(243,38,12)" fg:x="67" fg:w="6"/><text x="5.5886%" y="511.50"></text></g><g><title>statx (6 samples, 0.48%)</title><rect x="5.3386%" y="485" width="0.4781%" height="15" fill="rgb(208,139,16)" fg:x="67" fg:w="6"/><text x="5.5886%" y="495.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="5.8167%" y="549" width="0.0797%" height="15" fill="rgb(227,24,9)" fg:x="73" fg:w="1"/><text x="6.0667%" y="559.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="5.8167%" y="533" width="0.0797%" height="15" fill="rgb(206,62,11)" fg:x="73" fg:w="1"/><text x="6.0667%" y="543.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="5.8167%" y="517" width="0.0797%" height="15" fill="rgb(228,134,27)" fg:x="73" fg:w="1"/><text x="6.0667%" y="527.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="5.3386%" y="629" width="0.7171%" height="15" fill="rgb(205,55,33)" fg:x="67" fg:w="9"/><text x="5.5886%" y="639.50"></text></g><g><title>glob::fill_todo (9 samples, 0.72%)</title><rect x="5.3386%" y="613" width="0.7171%" height="15" fill="rgb(243,75,43)" fg:x="67" fg:w="9"/><text x="5.5886%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="5.8167%" y="597" width="0.2390%" height="15" fill="rgb(223,27,42)" fg:x="73" fg:w="3"/><text x="6.0667%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="5.8167%" y="581" width="0.2390%" height="15" fill="rgb(232,189,33)" fg:x="73" fg:w="3"/><text x="6.0667%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="5.8167%" y="565" width="0.2390%" height="15" fill="rgb(210,9,39)" fg:x="73" fg:w="3"/><text x="6.0667%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="5.8964%" y="549" width="0.1594%" height="15" fill="rgb(242,85,26)" fg:x="74" fg:w="2"/><text x="6.1464%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="5.8964%" y="533" width="0.1594%" height="15" fill="rgb(248,44,4)" fg:x="74" fg:w="2"/><text x="6.1464%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="5.8964%" y="517" width="0.1594%" height="15" fill="rgb(250,96,46)" fg:x="74" fg:w="2"/><text x="6.1464%" y="527.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="5.8964%" y="501" width="0.1594%" height="15" fill="rgb(229,116,26)" fg:x="74" fg:w="2"/><text x="6.1464%" y="511.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="6.2151%" y="581" width="0.2390%" height="15" fill="rgb(246,94,34)" fg:x="78" fg:w="3"/><text x="6.4651%" y="591.50"></text></g><g><title>std::path::Components::parse_next_component (2 samples, 0.16%)</title><rect x="6.2948%" y="565" width="0.1594%" height="15" fill="rgb(251,73,21)" fg:x="79" fg:w="2"/><text x="6.5448%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2 samples, 0.16%)</title><rect x="6.2948%" y="549" width="0.1594%" height="15" fill="rgb(254,121,25)" fg:x="79" fg:w="2"/><text x="6.5448%" y="559.50"></text></g><g><title>std::path::Components::parse_next_component::{{closure}} (2 samples, 0.16%)</title><rect x="6.2948%" y="533" width="0.1594%" height="15" fill="rgb(215,161,49)" fg:x="79" fg:w="2"/><text x="6.5448%" y="543.50"></text></g><g><title>std::path::Components::is_sep_byte (2 samples, 0.16%)</title><rect x="6.2948%" y="517" width="0.1594%" height="15" fill="rgb(221,43,13)" fg:x="79" fg:w="2"/><text x="6.5448%" y="527.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="6.1355%" y="597" width="0.3984%" height="15" fill="rgb(249,5,37)" fg:x="77" fg:w="5"/><text x="6.3855%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.08%)</title><rect x="6.4542%" y="581" width="0.0797%" height="15" fill="rgb(226,25,44)" fg:x="81" fg:w="1"/><text x="6.7042%" y="591.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.08%)</title><rect x="6.4542%" y="565" width="0.0797%" height="15" fill="rgb(238,189,16)" fg:x="81" fg:w="1"/><text x="6.7042%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="6.4542%" y="549" width="0.0797%" height="15" fill="rgb(251,186,8)" fg:x="81" fg:w="1"/><text x="6.7042%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="6.4542%" y="533" width="0.0797%" height="15" fill="rgb(254,34,31)" fg:x="81" fg:w="1"/><text x="6.7042%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="6.4542%" y="517" width="0.0797%" height="15" fill="rgb(225,215,27)" fg:x="81" fg:w="1"/><text x="6.7042%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="6.4542%" y="501" width="0.0797%" height="15" fill="rgb(221,192,48)" fg:x="81" fg:w="1"/><text x="6.7042%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.4542%" y="485" width="0.0797%" height="15" fill="rgb(219,137,20)" fg:x="81" fg:w="1"/><text x="6.7042%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="6.4542%" y="469" width="0.0797%" height="15" fill="rgb(219,84,11)" fg:x="81" fg:w="1"/><text x="6.7042%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.4542%" y="453" width="0.0797%" height="15" fill="rgb(224,10,23)" fg:x="81" fg:w="1"/><text x="6.7042%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="6.4542%" y="437" width="0.0797%" height="15" fill="rgb(248,22,39)" fg:x="81" fg:w="1"/><text x="6.7042%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.4542%" y="421" width="0.0797%" height="15" fill="rgb(212,154,20)" fg:x="81" fg:w="1"/><text x="6.7042%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="6.4542%" y="405" width="0.0797%" height="15" fill="rgb(236,199,50)" fg:x="81" fg:w="1"/><text x="6.7042%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="6.4542%" y="389" width="0.0797%" height="15" fill="rgb(211,9,17)" fg:x="81" fg:w="1"/><text x="6.7042%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="6.4542%" y="373" width="0.0797%" height="15" fill="rgb(243,216,36)" fg:x="81" fg:w="1"/><text x="6.7042%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.4542%" y="357" width="0.0797%" height="15" fill="rgb(250,2,10)" fg:x="81" fg:w="1"/><text x="6.7042%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.5339%" y="581" width="0.0797%" height="15" fill="rgb(226,50,48)" fg:x="82" fg:w="1"/><text x="6.7839%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.5339%" y="565" width="0.0797%" height="15" fill="rgb(243,81,16)" fg:x="82" fg:w="1"/><text x="6.7839%" y="575.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (23 samples, 1.83%)</title><rect x="4.8606%" y="661" width="1.8327%" height="15" fill="rgb(250,14,2)" fg:x="61" fg:w="23"/><text x="5.1106%" y="671.50">&lt;..</text></g><g><title>plugins_rune::sources::load_directory_sources (17 samples, 1.35%)</title><rect x="5.3386%" y="645" width="1.3546%" height="15" fill="rgb(233,135,29)" fg:x="67" fg:w="17"/><text x="5.5886%" y="655.50"></text></g><g><title>glob::glob (8 samples, 0.64%)</title><rect x="6.0558%" y="629" width="0.6375%" height="15" fill="rgb(224,64,43)" fg:x="76" fg:w="8"/><text x="6.3058%" y="639.50"></text></g><g><title>glob::glob_with (8 samples, 0.64%)</title><rect x="6.0558%" y="613" width="0.6375%" height="15" fill="rgb(238,84,13)" fg:x="76" fg:w="8"/><text x="6.3058%" y="623.50"></text></g><g><title>glob::Pattern::new (2 samples, 0.16%)</title><rect x="6.5339%" y="597" width="0.1594%" height="15" fill="rgb(253,48,26)" fg:x="82" fg:w="2"/><text x="6.7839%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.6135%" y="581" width="0.0797%" height="15" fill="rgb(205,223,31)" fg:x="83" fg:w="1"/><text x="6.8635%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (1 samples, 0.08%)</title><rect x="6.6932%" y="661" width="0.0797%" height="15" fill="rgb(221,41,32)" fg:x="84" fg:w="1"/><text x="6.9432%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="6.6932%" y="645" width="0.0797%" height="15" fill="rgb(213,158,31)" fg:x="84" fg:w="1"/><text x="6.9432%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (54 samples, 4.30%)</title><rect x="2.5498%" y="677" width="4.3028%" height="15" fill="rgb(245,126,43)" fg:x="32" fg:w="54"/><text x="2.7998%" y="687.50">kerne..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="6.7729%" y="661" width="0.0797%" height="15" fill="rgb(227,7,22)" fg:x="85" fg:w="1"/><text x="7.0229%" y="671.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="6.7729%" y="645" width="0.0797%" height="15" fill="rgb(252,90,44)" fg:x="85" fg:w="1"/><text x="7.0229%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.9323%" y="645" width="0.1594%" height="15" fill="rgb(253,91,0)" fg:x="87" fg:w="2"/><text x="7.1823%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.9323%" y="629" width="0.1594%" height="15" fill="rgb(252,175,49)" fg:x="87" fg:w="2"/><text x="7.1823%" y="639.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.9323%" y="613" width="0.1594%" height="15" fill="rgb(246,150,1)" fg:x="87" fg:w="2"/><text x="7.1823%" y="623.50"></text></g><g><title>engine::session::Session::initialize (60 samples, 4.78%)</title><rect x="2.3904%" y="693" width="4.7809%" height="15" fill="rgb(241,192,25)" fg:x="30" fg:w="60"/><text x="2.6404%" y="703.50">engine..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (4 samples, 0.32%)</title><rect x="6.8526%" y="677" width="0.3187%" height="15" fill="rgb(239,187,11)" fg:x="86" fg:w="4"/><text x="7.1026%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="6.8526%" y="661" width="0.3187%" height="15" fill="rgb(218,202,51)" fg:x="86" fg:w="4"/><text x="7.1026%" y="671.50"></text></g><g><title>kernel::plugins::Plugin::middleware (1 samples, 0.08%)</title><rect x="7.0916%" y="645" width="0.0797%" height="15" fill="rgb(225,176,8)" fg:x="89" fg:w="1"/><text x="7.3416%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (63 samples, 5.02%)</title><rect x="2.3904%" y="741" width="5.0199%" height="15" fill="rgb(219,122,41)" fg:x="30" fg:w="63"/><text x="2.6404%" y="751.50">&lt;engin..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (63 samples, 5.02%)</title><rect x="2.3904%" y="725" width="5.0199%" height="15" fill="rgb(248,140,20)" fg:x="30" fg:w="63"/><text x="2.6404%" y="735.50">engine..</text></g><g><title>engine::session::Session::new (63 samples, 5.02%)</title><rect x="2.3904%" y="709" width="5.0199%" height="15" fill="rgb(245,41,37)" fg:x="30" fg:w="63"/><text x="2.6404%" y="719.50">engine..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (3 samples, 0.24%)</title><rect x="7.1713%" y="693" width="0.2390%" height="15" fill="rgb(235,82,39)" fg:x="90" fg:w="3"/><text x="7.4213%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="7.1713%" y="677" width="0.2390%" height="15" fill="rgb(230,108,42)" fg:x="90" fg:w="3"/><text x="7.4213%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="7.4900%" y="725" width="0.1594%" height="15" fill="rgb(215,150,50)" fg:x="94" fg:w="2"/><text x="7.7400%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="7.4900%" y="709" width="0.1594%" height="15" fill="rgb(233,212,5)" fg:x="94" fg:w="2"/><text x="7.7400%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.4900%" y="693" width="0.1594%" height="15" fill="rgb(245,80,22)" fg:x="94" fg:w="2"/><text x="7.7400%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.5697%" y="677" width="0.0797%" height="15" fill="rgb(238,129,16)" fg:x="95" fg:w="1"/><text x="7.8197%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="7.6494%" y="709" width="0.1594%" height="15" fill="rgb(240,19,0)" fg:x="96" fg:w="2"/><text x="7.8994%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7291%" y="693" width="0.0797%" height="15" fill="rgb(232,42,35)" fg:x="97" fg:w="1"/><text x="7.9791%" y="703.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="7.8088%" y="613" width="0.1594%" height="15" fill="rgb(223,130,24)" fg:x="98" fg:w="2"/><text x="8.0588%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.8088%" y="597" width="0.1594%" height="15" fill="rgb(237,16,22)" fg:x="98" fg:w="2"/><text x="8.0588%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.8088%" y="581" width="0.1594%" height="15" fill="rgb(248,192,20)" fg:x="98" fg:w="2"/><text x="8.0588%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8884%" y="565" width="0.0797%" height="15" fill="rgb(233,167,2)" fg:x="99" fg:w="1"/><text x="8.1384%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.9681%" y="597" width="0.0797%" height="15" fill="rgb(252,71,44)" fg:x="100" fg:w="1"/><text x="8.2181%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="8.0478%" y="597" width="0.1594%" height="15" fill="rgb(238,37,47)" fg:x="101" fg:w="2"/><text x="8.2978%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="8.0478%" y="581" width="0.1594%" height="15" fill="rgb(214,202,54)" fg:x="101" fg:w="2"/><text x="8.2978%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1275%" y="565" width="0.0797%" height="15" fill="rgb(254,165,40)" fg:x="102" fg:w="1"/><text x="8.3775%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1275%" y="549" width="0.0797%" height="15" fill="rgb(246,173,38)" fg:x="102" fg:w="1"/><text x="8.3775%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.4462%" y="549" width="0.0797%" height="15" fill="rgb(215,3,27)" fg:x="106" fg:w="1"/><text x="8.6962%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.5259%" y="517" width="0.0797%" height="15" fill="rgb(239,169,51)" fg:x="107" fg:w="1"/><text x="8.7759%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.5259%" y="501" width="0.0797%" height="15" fill="rgb(212,5,25)" fg:x="107" fg:w="1"/><text x="8.7759%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.5259%" y="485" width="0.0797%" height="15" fill="rgb(243,45,17)" fg:x="107" fg:w="1"/><text x="8.7759%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.5259%" y="469" width="0.0797%" height="15" fill="rgb(242,97,9)" fg:x="107" fg:w="1"/><text x="8.7759%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.5259%" y="549" width="0.1594%" height="15" fill="rgb(228,71,31)" fg:x="107" fg:w="2"/><text x="8.7759%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.5259%" y="533" width="0.1594%" height="15" fill="rgb(252,184,16)" fg:x="107" fg:w="2"/><text x="8.7759%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6056%" y="517" width="0.0797%" height="15" fill="rgb(236,169,46)" fg:x="108" fg:w="1"/><text x="8.8556%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.6056%" y="501" width="0.0797%" height="15" fill="rgb(207,17,47)" fg:x="108" fg:w="1"/><text x="8.8556%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6056%" y="485" width="0.0797%" height="15" fill="rgb(206,201,28)" fg:x="108" fg:w="1"/><text x="8.8556%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.40%)</title><rect x="8.3665%" y="581" width="0.3984%" height="15" fill="rgb(224,184,23)" fg:x="105" fg:w="5"/><text x="8.6165%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="8.3665%" y="565" width="0.3984%" height="15" fill="rgb(208,139,48)" fg:x="105" fg:w="5"/><text x="8.6165%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.6853%" y="549" width="0.0797%" height="15" fill="rgb(208,130,10)" fg:x="109" fg:w="1"/><text x="8.9353%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.6853%" y="533" width="0.0797%" height="15" fill="rgb(211,213,45)" fg:x="109" fg:w="1"/><text x="8.9353%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.7649%" y="581" width="0.0797%" height="15" fill="rgb(235,100,30)" fg:x="110" fg:w="1"/><text x="9.0149%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.7649%" y="565" width="0.0797%" height="15" fill="rgb(206,144,31)" fg:x="110" fg:w="1"/><text x="9.0149%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="8.8446%" y="549" width="0.0797%" height="15" fill="rgb(224,200,26)" fg:x="111" fg:w="1"/><text x="9.0946%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.8446%" y="581" width="0.1594%" height="15" fill="rgb(247,104,53)" fg:x="111" fg:w="2"/><text x="9.0946%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.8446%" y="565" width="0.1594%" height="15" fill="rgb(220,14,17)" fg:x="111" fg:w="2"/><text x="9.0946%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.9243%" y="549" width="0.0797%" height="15" fill="rgb(230,140,40)" fg:x="112" fg:w="1"/><text x="9.1743%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.12%)</title><rect x="7.9681%" y="613" width="1.1155%" height="15" fill="rgb(229,2,41)" fg:x="100" fg:w="14"/><text x="8.2181%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="8.2072%" y="597" width="0.8765%" height="15" fill="rgb(232,89,16)" fg:x="103" fg:w="11"/><text x="8.4572%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0040%" y="581" width="0.0797%" height="15" fill="rgb(247,59,52)" fg:x="113" fg:w="1"/><text x="9.2540%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.0040%" y="565" width="0.0797%" height="15" fill="rgb(226,110,21)" fg:x="113" fg:w="1"/><text x="9.2540%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0040%" y="549" width="0.0797%" height="15" fill="rgb(224,176,43)" fg:x="113" fg:w="1"/><text x="9.2540%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.35%)</title><rect x="7.8088%" y="629" width="1.3546%" height="15" fill="rgb(221,73,6)" fg:x="98" fg:w="17"/><text x="8.0588%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.0837%" y="613" width="0.0797%" height="15" fill="rgb(232,78,19)" fg:x="114" fg:w="1"/><text x="9.3337%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.0837%" y="597" width="0.0797%" height="15" fill="rgb(233,112,48)" fg:x="114" fg:w="1"/><text x="9.3337%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="9.0837%" y="581" width="0.0797%" height="15" fill="rgb(243,131,47)" fg:x="114" fg:w="1"/><text x="9.3337%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.2430%" y="597" width="0.0797%" height="15" fill="rgb(226,51,1)" fg:x="116" fg:w="1"/><text x="9.4930%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2430%" y="581" width="0.0797%" height="15" fill="rgb(247,58,7)" fg:x="116" fg:w="1"/><text x="9.4930%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3227%" y="581" width="0.0797%" height="15" fill="rgb(209,7,32)" fg:x="117" fg:w="1"/><text x="9.5727%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4024%" y="549" width="0.0797%" height="15" fill="rgb(209,39,41)" fg:x="118" fg:w="1"/><text x="9.6524%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.4821%" y="549" width="0.0797%" height="15" fill="rgb(226,182,46)" fg:x="119" fg:w="1"/><text x="9.7321%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4821%" y="533" width="0.0797%" height="15" fill="rgb(230,219,10)" fg:x="119" fg:w="1"/><text x="9.7321%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.5618%" y="533" width="0.0797%" height="15" fill="rgb(227,175,30)" fg:x="120" fg:w="1"/><text x="9.8118%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.5618%" y="517" width="0.0797%" height="15" fill="rgb(217,2,50)" fg:x="120" fg:w="1"/><text x="9.8118%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="9.1633%" y="629" width="0.5578%" height="15" fill="rgb(229,160,0)" fg:x="115" fg:w="7"/><text x="9.4133%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="9.2430%" y="613" width="0.4781%" height="15" fill="rgb(207,78,37)" fg:x="116" fg:w="6"/><text x="9.4930%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="9.3227%" y="597" width="0.3984%" height="15" fill="rgb(225,57,0)" fg:x="117" fg:w="5"/><text x="9.5727%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.4024%" y="581" width="0.3187%" height="15" fill="rgb(232,154,2)" fg:x="118" fg:w="4"/><text x="9.6524%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="9.4024%" y="565" width="0.3187%" height="15" fill="rgb(241,212,25)" fg:x="118" fg:w="4"/><text x="9.6524%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.5618%" y="549" width="0.1594%" height="15" fill="rgb(226,69,20)" fg:x="120" fg:w="2"/><text x="9.8118%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.6414%" y="533" width="0.0797%" height="15" fill="rgb(247,184,54)" fg:x="121" fg:w="1"/><text x="9.8914%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.7211%" y="597" width="0.1594%" height="15" fill="rgb(210,145,0)" fg:x="122" fg:w="2"/><text x="9.9711%" y="607.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPath as core::convert::From&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::from (1 samples, 0.08%)</title><rect x="9.8008%" y="581" width="0.0797%" height="15" fill="rgb(253,82,12)" fg:x="123" fg:w="1"/><text x="10.0508%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="9.7211%" y="613" width="0.2390%" height="15" fill="rgb(245,42,11)" fg:x="122" fg:w="3"/><text x="9.9711%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="9.8805%" y="597" width="0.0797%" height="15" fill="rgb(219,147,32)" fg:x="124" fg:w="1"/><text x="10.1305%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.8805%" y="581" width="0.0797%" height="15" fill="rgb(246,12,7)" fg:x="124" fg:w="1"/><text x="10.1305%" y="591.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.8805%" y="565" width="0.0797%" height="15" fill="rgb(243,50,9)" fg:x="124" fg:w="1"/><text x="10.1305%" y="575.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="9.8805%" y="549" width="0.0797%" height="15" fill="rgb(219,149,6)" fg:x="124" fg:w="1"/><text x="10.1305%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="9.8805%" y="533" width="0.0797%" height="15" fill="rgb(241,51,42)" fg:x="124" fg:w="1"/><text x="10.1305%" y="543.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1195%" y="581" width="0.0797%" height="15" fill="rgb(226,128,27)" fg:x="127" fg:w="1"/><text x="10.3695%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1195%" y="565" width="0.0797%" height="15" fill="rgb(244,144,4)" fg:x="127" fg:w="1"/><text x="10.3695%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.1195%" y="549" width="0.0797%" height="15" fill="rgb(221,4,13)" fg:x="127" fg:w="1"/><text x="10.3695%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1992%" y="581" width="0.0797%" height="15" fill="rgb(208,170,28)" fg:x="128" fg:w="1"/><text x="10.4492%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1992%" y="565" width="0.0797%" height="15" fill="rgb(226,131,13)" fg:x="128" fg:w="1"/><text x="10.4492%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.1992%" y="549" width="0.0797%" height="15" fill="rgb(215,72,41)" fg:x="128" fg:w="1"/><text x="10.4492%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3586%" y="453" width="0.0797%" height="15" fill="rgb(243,108,20)" fg:x="130" fg:w="1"/><text x="10.6086%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="10.3586%" y="533" width="0.1594%" height="15" fill="rgb(230,189,17)" fg:x="130" fg:w="2"/><text x="10.6086%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3586%" y="517" width="0.1594%" height="15" fill="rgb(220,50,17)" fg:x="130" fg:w="2"/><text x="10.6086%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.3586%" y="501" width="0.1594%" height="15" fill="rgb(248,152,48)" fg:x="130" fg:w="2"/><text x="10.6086%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3586%" y="485" width="0.1594%" height="15" fill="rgb(244,91,11)" fg:x="130" fg:w="2"/><text x="10.6086%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="10.3586%" y="469" width="0.1594%" height="15" fill="rgb(220,157,5)" fg:x="130" fg:w="2"/><text x="10.6086%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4382%" y="453" width="0.0797%" height="15" fill="rgb(253,137,8)" fg:x="131" fg:w="1"/><text x="10.6882%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4382%" y="437" width="0.0797%" height="15" fill="rgb(217,137,51)" fg:x="131" fg:w="1"/><text x="10.6882%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="10.3586%" y="565" width="0.2390%" height="15" fill="rgb(218,209,53)" fg:x="130" fg:w="3"/><text x="10.6086%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="10.3586%" y="549" width="0.2390%" height="15" fill="rgb(249,137,25)" fg:x="130" fg:w="3"/><text x="10.6086%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5179%" y="533" width="0.0797%" height="15" fill="rgb(239,155,26)" fg:x="132" fg:w="1"/><text x="10.7679%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="10.5179%" y="517" width="0.0797%" height="15" fill="rgb(227,85,46)" fg:x="132" fg:w="1"/><text x="10.7679%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5179%" y="501" width="0.0797%" height="15" fill="rgb(251,107,43)" fg:x="132" fg:w="1"/><text x="10.7679%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.5179%" y="485" width="0.0797%" height="15" fill="rgb(234,170,33)" fg:x="132" fg:w="1"/><text x="10.7679%" y="495.50"></text></g><g><title>engine::session::Session::flush (38 samples, 3.03%)</title><rect x="7.6494%" y="725" width="3.0279%" height="15" fill="rgb(206,29,35)" fg:x="96" fg:w="38"/><text x="7.8994%" y="735.50">eng..</text></g><g><title>engine::session::state::State::close (36 samples, 2.87%)</title><rect x="7.8088%" y="709" width="2.8685%" height="15" fill="rgb(227,138,25)" fg:x="98" fg:w="36"/><text x="8.0588%" y="719.50">en..</text></g><g><title>engine::session::state::State::flush_entities (36 samples, 2.87%)</title><rect x="7.8088%" y="693" width="2.8685%" height="15" fill="rgb(249,131,35)" fg:x="98" fg:w="36"/><text x="8.0588%" y="703.50">en..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.87%)</title><rect x="7.8088%" y="677" width="2.8685%" height="15" fill="rgb(239,6,40)" fg:x="98" fg:w="36"/><text x="8.0588%" y="687.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.87%)</title><rect x="7.8088%" y="661" width="2.8685%" height="15" fill="rgb(246,136,47)" fg:x="98" fg:w="36"/><text x="8.0588%" y="671.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.87%)</title><rect x="7.8088%" y="645" width="2.8685%" height="15" fill="rgb(253,58,26)" fg:x="98" fg:w="36"/><text x="8.0588%" y="655.50">en..</text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.96%)</title><rect x="9.7211%" y="629" width="0.9562%" height="15" fill="rgb(237,141,10)" fg:x="122" fg:w="12"/><text x="9.9711%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="9.9602%" y="613" width="0.7171%" height="15" fill="rgb(234,156,12)" fg:x="125" fg:w="9"/><text x="10.2102%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="10.0398%" y="597" width="0.6375%" height="15" fill="rgb(243,224,36)" fg:x="126" fg:w="8"/><text x="10.2898%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="10.2789%" y="581" width="0.3984%" height="15" fill="rgb(205,229,51)" fg:x="129" fg:w="5"/><text x="10.5289%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5976%" y="565" width="0.0797%" height="15" fill="rgb(223,189,4)" fg:x="133" fg:w="1"/><text x="10.8476%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6773%" y="645" width="0.0797%" height="15" fill="rgb(249,167,54)" fg:x="134" fg:w="1"/><text x="10.9273%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6773%" y="629" width="0.0797%" height="15" fill="rgb(218,34,28)" fg:x="134" fg:w="1"/><text x="10.9273%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.6773%" y="613" width="0.0797%" height="15" fill="rgb(232,109,42)" fg:x="134" fg:w="1"/><text x="10.9273%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.6773%" y="597" width="0.0797%" height="15" fill="rgb(248,214,46)" fg:x="134" fg:w="1"/><text x="10.9273%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.6773%" y="581" width="0.0797%" height="15" fill="rgb(244,216,40)" fg:x="134" fg:w="1"/><text x="10.9273%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6773%" y="565" width="0.0797%" height="15" fill="rgb(231,226,31)" fg:x="134" fg:w="1"/><text x="10.9273%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6773%" y="549" width="0.0797%" height="15" fill="rgb(238,38,43)" fg:x="134" fg:w="1"/><text x="10.9273%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.6773%" y="533" width="0.0797%" height="15" fill="rgb(208,88,43)" fg:x="134" fg:w="1"/><text x="10.9273%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.6773%" y="517" width="0.0797%" height="15" fill="rgb(205,136,37)" fg:x="134" fg:w="1"/><text x="10.9273%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.6773%" y="501" width="0.0797%" height="15" fill="rgb(237,34,14)" fg:x="134" fg:w="1"/><text x="10.9273%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.6773%" y="485" width="0.0797%" height="15" fill="rgb(236,193,44)" fg:x="134" fg:w="1"/><text x="10.9273%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6773%" y="469" width="0.0797%" height="15" fill="rgb(231,48,10)" fg:x="134" fg:w="1"/><text x="10.9273%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="10.6773%" y="693" width="0.1594%" height="15" fill="rgb(213,141,34)" fg:x="134" fg:w="2"/><text x="10.9273%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.6773%" y="677" width="0.1594%" height="15" fill="rgb(249,130,34)" fg:x="134" fg:w="2"/><text x="10.9273%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.6773%" y="661" width="0.1594%" height="15" fill="rgb(219,42,41)" fg:x="134" fg:w="2"/><text x="10.9273%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7570%" y="645" width="0.0797%" height="15" fill="rgb(224,100,54)" fg:x="135" fg:w="1"/><text x="11.0070%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="10.6773%" y="709" width="0.2390%" height="15" fill="rgb(229,200,27)" fg:x="134" fg:w="3"/><text x="10.9273%" y="719.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="10.8367%" y="693" width="0.0797%" height="15" fill="rgb(217,118,10)" fg:x="136" fg:w="1"/><text x="11.0867%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.8367%" y="677" width="0.0797%" height="15" fill="rgb(206,22,3)" fg:x="136" fg:w="1"/><text x="11.0867%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9163%" y="677" width="0.0797%" height="15" fill="rgb(232,163,46)" fg:x="137" fg:w="1"/><text x="11.1663%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9163%" y="661" width="0.0797%" height="15" fill="rgb(206,95,13)" fg:x="137" fg:w="1"/><text x="11.1663%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9163%" y="645" width="0.0797%" height="15" fill="rgb(253,154,18)" fg:x="137" fg:w="1"/><text x="11.1663%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9163%" y="629" width="0.0797%" height="15" fill="rgb(219,32,23)" fg:x="137" fg:w="1"/><text x="11.1663%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.9163%" y="613" width="0.0797%" height="15" fill="rgb(230,191,45)" fg:x="137" fg:w="1"/><text x="11.1663%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.9163%" y="597" width="0.0797%" height="15" fill="rgb(229,64,36)" fg:x="137" fg:w="1"/><text x="11.1663%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.9163%" y="581" width="0.0797%" height="15" fill="rgb(205,129,25)" fg:x="137" fg:w="1"/><text x="11.1663%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.9163%" y="565" width="0.0797%" height="15" fill="rgb(254,112,7)" fg:x="137" fg:w="1"/><text x="11.1663%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.9163%" y="549" width="0.0797%" height="15" fill="rgb(226,53,48)" fg:x="137" fg:w="1"/><text x="11.1663%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.9163%" y="533" width="0.0797%" height="15" fill="rgb(214,153,38)" fg:x="137" fg:w="1"/><text x="11.1663%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.9163%" y="517" width="0.0797%" height="15" fill="rgb(243,101,7)" fg:x="137" fg:w="1"/><text x="11.1663%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.9163%" y="501" width="0.0797%" height="15" fill="rgb(240,140,22)" fg:x="137" fg:w="1"/><text x="11.1663%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.9163%" y="485" width="0.0797%" height="15" fill="rgb(235,114,2)" fg:x="137" fg:w="1"/><text x="11.1663%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9163%" y="469" width="0.0797%" height="15" fill="rgb(242,59,12)" fg:x="137" fg:w="1"/><text x="11.1663%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="10.9163%" y="693" width="0.1594%" height="15" fill="rgb(252,134,9)" fg:x="137" fg:w="2"/><text x="11.1663%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.9960%" y="677" width="0.0797%" height="15" fill="rgb(236,4,44)" fg:x="138" fg:w="1"/><text x="11.2460%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9960%" y="661" width="0.0797%" height="15" fill="rgb(254,172,41)" fg:x="138" fg:w="1"/><text x="11.2460%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.9960%" y="645" width="0.0797%" height="15" fill="rgb(244,63,20)" fg:x="138" fg:w="1"/><text x="11.2460%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.9960%" y="629" width="0.0797%" height="15" fill="rgb(250,73,31)" fg:x="138" fg:w="1"/><text x="11.2460%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.9960%" y="613" width="0.0797%" height="15" fill="rgb(241,38,36)" fg:x="138" fg:w="1"/><text x="11.2460%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.9960%" y="597" width="0.0797%" height="15" fill="rgb(245,211,2)" fg:x="138" fg:w="1"/><text x="11.2460%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="10.9960%" y="581" width="0.0797%" height="15" fill="rgb(206,120,28)" fg:x="138" fg:w="1"/><text x="11.2460%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.0757%" y="645" width="0.0797%" height="15" fill="rgb(211,59,34)" fg:x="139" fg:w="1"/><text x="11.3257%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0757%" y="629" width="0.0797%" height="15" fill="rgb(233,168,5)" fg:x="139" fg:w="1"/><text x="11.3257%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0757%" y="613" width="0.0797%" height="15" fill="rgb(234,33,13)" fg:x="139" fg:w="1"/><text x="11.3257%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="11.0757%" y="597" width="0.0797%" height="15" fill="rgb(231,150,26)" fg:x="139" fg:w="1"/><text x="11.3257%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0757%" y="581" width="0.0797%" height="15" fill="rgb(217,191,4)" fg:x="139" fg:w="1"/><text x="11.3257%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="11.0757%" y="565" width="0.0797%" height="15" fill="rgb(246,198,38)" fg:x="139" fg:w="1"/><text x="11.3257%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.0757%" y="549" width="0.0797%" height="15" fill="rgb(245,64,37)" fg:x="139" fg:w="1"/><text x="11.3257%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.0757%" y="533" width="0.0797%" height="15" fill="rgb(250,30,36)" fg:x="139" fg:w="1"/><text x="11.3257%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.1554%" y="645" width="0.0797%" height="15" fill="rgb(217,86,53)" fg:x="140" fg:w="1"/><text x="11.4054%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="11.0757%" y="677" width="0.2390%" height="15" fill="rgb(228,157,16)" fg:x="139" fg:w="3"/><text x="11.3257%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (3 samples, 0.24%)</title><rect x="11.0757%" y="661" width="0.2390%" height="15" fill="rgb(217,59,31)" fg:x="139" fg:w="3"/><text x="11.3257%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2351%" y="645" width="0.0797%" height="15" fill="rgb(237,138,41)" fg:x="141" fg:w="1"/><text x="11.4851%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2351%" y="629" width="0.0797%" height="15" fill="rgb(227,91,49)" fg:x="141" fg:w="1"/><text x="11.4851%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2351%" y="613" width="0.0797%" height="15" fill="rgb(247,21,44)" fg:x="141" fg:w="1"/><text x="11.4851%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3147%" y="645" width="0.0797%" height="15" fill="rgb(219,210,51)" fg:x="142" fg:w="1"/><text x="11.5647%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3944%" y="645" width="0.0797%" height="15" fill="rgb(209,140,6)" fg:x="143" fg:w="1"/><text x="11.6444%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="10.9163%" y="709" width="0.6375%" height="15" fill="rgb(221,188,24)" fg:x="137" fg:w="8"/><text x="11.1663%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="11.0757%" y="693" width="0.4781%" height="15" fill="rgb(232,154,20)" fg:x="139" fg:w="6"/><text x="11.3257%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="11.3147%" y="677" width="0.2390%" height="15" fill="rgb(244,137,50)" fg:x="142" fg:w="3"/><text x="11.5647%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="11.3147%" y="661" width="0.2390%" height="15" fill="rgb(225,185,43)" fg:x="142" fg:w="3"/><text x="11.5647%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="11.4741%" y="645" width="0.0797%" height="15" fill="rgb(213,205,38)" fg:x="144" fg:w="1"/><text x="11.7241%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="11.4741%" y="629" width="0.0797%" height="15" fill="rgb(236,73,12)" fg:x="144" fg:w="1"/><text x="11.7241%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.4741%" y="613" width="0.0797%" height="15" fill="rgb(235,219,13)" fg:x="144" fg:w="1"/><text x="11.7241%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4741%" y="597" width="0.0797%" height="15" fill="rgb(218,59,36)" fg:x="144" fg:w="1"/><text x="11.7241%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.4741%" y="581" width="0.0797%" height="15" fill="rgb(205,110,39)" fg:x="144" fg:w="1"/><text x="11.7241%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4741%" y="565" width="0.0797%" height="15" fill="rgb(218,206,42)" fg:x="144" fg:w="1"/><text x="11.7241%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.4741%" y="549" width="0.0797%" height="15" fill="rgb(248,125,24)" fg:x="144" fg:w="1"/><text x="11.7241%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4741%" y="533" width="0.0797%" height="15" fill="rgb(242,28,27)" fg:x="144" fg:w="1"/><text x="11.7241%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.04%)</title><rect x="10.6773%" y="725" width="1.0359%" height="15" fill="rgb(216,228,15)" fg:x="134" fg:w="13"/><text x="10.9273%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.5538%" y="709" width="0.1594%" height="15" fill="rgb(235,116,46)" fg:x="145" fg:w="2"/><text x="11.8038%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6335%" y="693" width="0.0797%" height="15" fill="rgb(224,18,32)" fg:x="146" fg:w="1"/><text x="11.8835%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6335%" y="677" width="0.0797%" height="15" fill="rgb(252,5,12)" fg:x="146" fg:w="1"/><text x="11.8835%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="11.7131%" y="677" width="0.0797%" height="15" fill="rgb(251,36,5)" fg:x="147" fg:w="1"/><text x="11.9631%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.7131%" y="661" width="0.0797%" height="15" fill="rgb(217,53,14)" fg:x="147" fg:w="1"/><text x="11.9631%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="11.7131%" y="725" width="0.1594%" height="15" fill="rgb(215,86,45)" fg:x="147" fg:w="2"/><text x="11.9631%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="11.7131%" y="709" width="0.1594%" height="15" fill="rgb(242,169,11)" fg:x="147" fg:w="2"/><text x="11.9631%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.7131%" y="693" width="0.1594%" height="15" fill="rgb(211,213,45)" fg:x="147" fg:w="2"/><text x="11.9631%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="11.7928%" y="677" width="0.0797%" height="15" fill="rgb(205,88,11)" fg:x="148" fg:w="1"/><text x="12.0428%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.7928%" y="661" width="0.0797%" height="15" fill="rgb(252,69,26)" fg:x="148" fg:w="1"/><text x="12.0428%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="11.8725%" y="693" width="0.0797%" height="15" fill="rgb(246,123,37)" fg:x="149" fg:w="1"/><text x="12.1225%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="11.8725%" y="677" width="0.0797%" height="15" fill="rgb(212,205,5)" fg:x="149" fg:w="1"/><text x="12.1225%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.8725%" y="661" width="0.0797%" height="15" fill="rgb(253,148,0)" fg:x="149" fg:w="1"/><text x="12.1225%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.9522%" y="645" width="0.0797%" height="15" fill="rgb(239,22,4)" fg:x="150" fg:w="1"/><text x="12.2022%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="11.9522%" y="629" width="0.0797%" height="15" fill="rgb(226,26,53)" fg:x="150" fg:w="1"/><text x="12.2022%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9522%" y="613" width="0.0797%" height="15" fill="rgb(225,229,45)" fg:x="150" fg:w="1"/><text x="12.2022%" y="623.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="11.9522%" y="693" width="0.1594%" height="15" fill="rgb(220,60,37)" fg:x="150" fg:w="2"/><text x="12.2022%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="11.9522%" y="677" width="0.1594%" height="15" fill="rgb(217,180,35)" fg:x="150" fg:w="2"/><text x="12.2022%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.9522%" y="661" width="0.1594%" height="15" fill="rgb(229,7,53)" fg:x="150" fg:w="2"/><text x="12.2022%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.0319%" y="645" width="0.0797%" height="15" fill="rgb(254,137,3)" fg:x="151" fg:w="1"/><text x="12.2819%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.0319%" y="629" width="0.0797%" height="15" fill="rgb(215,140,41)" fg:x="151" fg:w="1"/><text x="12.2819%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.0319%" y="613" width="0.0797%" height="15" fill="rgb(250,80,15)" fg:x="151" fg:w="1"/><text x="12.2819%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="12.0319%" y="597" width="0.0797%" height="15" fill="rgb(252,191,6)" fg:x="151" fg:w="1"/><text x="12.2819%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="11.8725%" y="725" width="0.3187%" height="15" fill="rgb(246,217,18)" fg:x="149" fg:w="4"/><text x="12.1225%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="11.8725%" y="709" width="0.3187%" height="15" fill="rgb(223,93,7)" fg:x="149" fg:w="4"/><text x="12.1225%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="12.1116%" y="693" width="0.0797%" height="15" fill="rgb(225,55,52)" fg:x="152" fg:w="1"/><text x="12.3616%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="12.1116%" y="677" width="0.0797%" height="15" fill="rgb(240,31,24)" fg:x="152" fg:w="1"/><text x="12.3616%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1116%" y="661" width="0.0797%" height="15" fill="rgb(205,56,52)" fg:x="152" fg:w="1"/><text x="12.3616%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1116%" y="645" width="0.0797%" height="15" fill="rgb(246,146,12)" fg:x="152" fg:w="1"/><text x="12.3616%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1116%" y="629" width="0.0797%" height="15" fill="rgb(239,84,36)" fg:x="152" fg:w="1"/><text x="12.3616%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1116%" y="613" width="0.0797%" height="15" fill="rgb(207,41,40)" fg:x="152" fg:w="1"/><text x="12.3616%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="12.1912%" y="709" width="0.0797%" height="15" fill="rgb(241,179,25)" fg:x="153" fg:w="1"/><text x="12.4412%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1912%" y="693" width="0.0797%" height="15" fill="rgb(210,0,34)" fg:x="153" fg:w="1"/><text x="12.4412%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.1912%" y="677" width="0.0797%" height="15" fill="rgb(225,217,29)" fg:x="153" fg:w="1"/><text x="12.4412%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.1912%" y="661" width="0.0797%" height="15" fill="rgb(216,191,38)" fg:x="153" fg:w="1"/><text x="12.4412%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.2709%" y="661" width="0.0797%" height="15" fill="rgb(232,140,52)" fg:x="154" fg:w="1"/><text x="12.5209%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.2709%" y="709" width="0.1594%" height="15" fill="rgb(223,158,51)" fg:x="154" fg:w="2"/><text x="12.5209%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.2709%" y="693" width="0.1594%" height="15" fill="rgb(235,29,51)" fg:x="154" fg:w="2"/><text x="12.5209%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="12.2709%" y="677" width="0.1594%" height="15" fill="rgb(215,181,18)" fg:x="154" fg:w="2"/><text x="12.5209%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.3506%" y="661" width="0.0797%" height="15" fill="rgb(227,125,34)" fg:x="155" fg:w="1"/><text x="12.6006%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.4303%" y="629" width="0.0797%" height="15" fill="rgb(230,197,49)" fg:x="156" fg:w="1"/><text x="12.6803%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.4303%" y="613" width="0.0797%" height="15" fill="rgb(239,141,16)" fg:x="156" fg:w="1"/><text x="12.6803%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.4303%" y="597" width="0.0797%" height="15" fill="rgb(225,105,43)" fg:x="156" fg:w="1"/><text x="12.6803%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.4303%" y="581" width="0.0797%" height="15" fill="rgb(214,131,14)" fg:x="156" fg:w="1"/><text x="12.6803%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.4303%" y="565" width="0.0797%" height="15" fill="rgb(229,177,11)" fg:x="156" fg:w="1"/><text x="12.6803%" y="575.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="12.5100%" y="629" width="0.0797%" height="15" fill="rgb(231,180,14)" fg:x="157" fg:w="1"/><text x="12.7600%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.5100%" y="613" width="0.0797%" height="15" fill="rgb(232,88,2)" fg:x="157" fg:w="1"/><text x="12.7600%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5100%" y="597" width="0.0797%" height="15" fill="rgb(205,220,8)" fg:x="157" fg:w="1"/><text x="12.7600%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5100%" y="581" width="0.0797%" height="15" fill="rgb(225,23,53)" fg:x="157" fg:w="1"/><text x="12.7600%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.5100%" y="565" width="0.0797%" height="15" fill="rgb(213,62,29)" fg:x="157" fg:w="1"/><text x="12.7600%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5100%" y="549" width="0.0797%" height="15" fill="rgb(227,75,7)" fg:x="157" fg:w="1"/><text x="12.7600%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.5100%" y="533" width="0.0797%" height="15" fill="rgb(207,105,14)" fg:x="157" fg:w="1"/><text x="12.7600%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.5100%" y="517" width="0.0797%" height="15" fill="rgb(245,62,29)" fg:x="157" fg:w="1"/><text x="12.7600%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.5100%" y="501" width="0.0797%" height="15" fill="rgb(236,202,4)" fg:x="157" fg:w="1"/><text x="12.7600%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.5100%" y="485" width="0.0797%" height="15" fill="rgb(250,67,1)" fg:x="157" fg:w="1"/><text x="12.7600%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5100%" y="469" width="0.0797%" height="15" fill="rgb(253,115,44)" fg:x="157" fg:w="1"/><text x="12.7600%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.5100%" y="453" width="0.0797%" height="15" fill="rgb(251,139,18)" fg:x="157" fg:w="1"/><text x="12.7600%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.5100%" y="437" width="0.0797%" height="15" fill="rgb(218,22,32)" fg:x="157" fg:w="1"/><text x="12.7600%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.5100%" y="421" width="0.0797%" height="15" fill="rgb(243,53,5)" fg:x="157" fg:w="1"/><text x="12.7600%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.5100%" y="405" width="0.0797%" height="15" fill="rgb(227,56,16)" fg:x="157" fg:w="1"/><text x="12.7600%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.5100%" y="389" width="0.0797%" height="15" fill="rgb(245,53,0)" fg:x="157" fg:w="1"/><text x="12.7600%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5100%" y="373" width="0.0797%" height="15" fill="rgb(216,170,35)" fg:x="157" fg:w="1"/><text x="12.7600%" y="383.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="12.4303%" y="709" width="0.2390%" height="15" fill="rgb(211,200,8)" fg:x="156" fg:w="3"/><text x="12.6803%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="12.4303%" y="693" width="0.2390%" height="15" fill="rgb(228,204,44)" fg:x="156" fg:w="3"/><text x="12.6803%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="12.4303%" y="677" width="0.2390%" height="15" fill="rgb(214,121,17)" fg:x="156" fg:w="3"/><text x="12.6803%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="12.4303%" y="661" width="0.2390%" height="15" fill="rgb(233,64,38)" fg:x="156" fg:w="3"/><text x="12.6803%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="12.4303%" y="645" width="0.2390%" height="15" fill="rgb(253,54,19)" fg:x="156" fg:w="3"/><text x="12.6803%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.5896%" y="629" width="0.0797%" height="15" fill="rgb(253,94,18)" fg:x="158" fg:w="1"/><text x="12.8396%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="12.6693%" y="693" width="0.1594%" height="15" fill="rgb(227,57,52)" fg:x="159" fg:w="2"/><text x="12.9193%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7490%" y="677" width="0.0797%" height="15" fill="rgb(230,228,50)" fg:x="160" fg:w="1"/><text x="12.9990%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.7490%" y="661" width="0.0797%" height="15" fill="rgb(217,205,27)" fg:x="160" fg:w="1"/><text x="12.9990%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.7490%" y="645" width="0.0797%" height="15" fill="rgb(252,71,50)" fg:x="160" fg:w="1"/><text x="12.9990%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.7490%" y="629" width="0.0797%" height="15" fill="rgb(209,86,4)" fg:x="160" fg:w="1"/><text x="12.9990%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.7490%" y="613" width="0.0797%" height="15" fill="rgb(229,94,0)" fg:x="160" fg:w="1"/><text x="12.9990%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7490%" y="597" width="0.0797%" height="15" fill="rgb(252,223,21)" fg:x="160" fg:w="1"/><text x="12.9990%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.7490%" y="581" width="0.0797%" height="15" fill="rgb(230,210,4)" fg:x="160" fg:w="1"/><text x="12.9990%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.7490%" y="565" width="0.0797%" height="15" fill="rgb(240,149,38)" fg:x="160" fg:w="1"/><text x="12.9990%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.7490%" y="549" width="0.0797%" height="15" fill="rgb(254,105,20)" fg:x="160" fg:w="1"/><text x="12.9990%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.7490%" y="533" width="0.0797%" height="15" fill="rgb(253,87,46)" fg:x="160" fg:w="1"/><text x="12.9990%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.7490%" y="517" width="0.0797%" height="15" fill="rgb(253,116,33)" fg:x="160" fg:w="1"/><text x="12.9990%" y="527.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="12.7490%" y="501" width="0.0797%" height="15" fill="rgb(229,198,5)" fg:x="160" fg:w="1"/><text x="12.9990%" y="511.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="12.8287%" y="677" width="0.0797%" height="15" fill="rgb(242,38,37)" fg:x="161" fg:w="1"/><text x="13.0787%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="12.8287%" y="661" width="0.0797%" height="15" fill="rgb(242,69,53)" fg:x="161" fg:w="1"/><text x="13.0787%" y="671.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="12.8287%" y="645" width="0.0797%" height="15" fill="rgb(249,80,16)" fg:x="161" fg:w="1"/><text x="13.0787%" y="655.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="12.8287%" y="629" width="0.0797%" height="15" fill="rgb(206,128,11)" fg:x="161" fg:w="1"/><text x="13.0787%" y="639.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="12.8287%" y="613" width="0.0797%" height="15" fill="rgb(212,35,20)" fg:x="161" fg:w="1"/><text x="13.0787%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="12.8287%" y="597" width="0.0797%" height="15" fill="rgb(236,79,13)" fg:x="161" fg:w="1"/><text x="13.0787%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="12.8287%" y="581" width="0.0797%" height="15" fill="rgb(233,123,3)" fg:x="161" fg:w="1"/><text x="13.0787%" y="591.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="12.8287%" y="565" width="0.0797%" height="15" fill="rgb(214,93,52)" fg:x="161" fg:w="1"/><text x="13.0787%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="12.9084%" y="645" width="0.0797%" height="15" fill="rgb(251,37,40)" fg:x="162" fg:w="1"/><text x="13.1584%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="12.9084%" y="629" width="0.0797%" height="15" fill="rgb(227,80,54)" fg:x="162" fg:w="1"/><text x="13.1584%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="12.9084%" y="613" width="0.0797%" height="15" fill="rgb(254,48,11)" fg:x="162" fg:w="1"/><text x="13.1584%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="12.9880%" y="581" width="0.1594%" height="15" fill="rgb(235,193,26)" fg:x="163" fg:w="2"/><text x="13.2380%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="12.9880%" y="565" width="0.1594%" height="15" fill="rgb(229,99,21)" fg:x="163" fg:w="2"/><text x="13.2380%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="12.9880%" y="549" width="0.1594%" height="15" fill="rgb(211,140,41)" fg:x="163" fg:w="2"/><text x="13.2380%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.9880%" y="533" width="0.1594%" height="15" fill="rgb(240,227,30)" fg:x="163" fg:w="2"/><text x="13.2380%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="12.9880%" y="517" width="0.1594%" height="15" fill="rgb(215,224,45)" fg:x="163" fg:w="2"/><text x="13.2380%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.0677%" y="501" width="0.0797%" height="15" fill="rgb(206,123,31)" fg:x="164" fg:w="1"/><text x="13.3177%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.0677%" y="485" width="0.0797%" height="15" fill="rgb(210,138,16)" fg:x="164" fg:w="1"/><text x="13.3177%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.0677%" y="469" width="0.0797%" height="15" fill="rgb(228,57,28)" fg:x="164" fg:w="1"/><text x="13.3177%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.2271%" y="565" width="0.0797%" height="15" fill="rgb(242,170,10)" fg:x="166" fg:w="1"/><text x="13.4771%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.2271%" y="549" width="0.0797%" height="15" fill="rgb(228,214,39)" fg:x="166" fg:w="1"/><text x="13.4771%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.2271%" y="533" width="0.0797%" height="15" fill="rgb(218,179,33)" fg:x="166" fg:w="1"/><text x="13.4771%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.3865%" y="517" width="0.0797%" height="15" fill="rgb(235,193,39)" fg:x="168" fg:w="1"/><text x="13.6365%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.3865%" y="501" width="0.0797%" height="15" fill="rgb(219,221,36)" fg:x="168" fg:w="1"/><text x="13.6365%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.3865%" y="485" width="0.0797%" height="15" fill="rgb(248,218,19)" fg:x="168" fg:w="1"/><text x="13.6365%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="13.3068%" y="549" width="0.2390%" height="15" fill="rgb(205,50,9)" fg:x="167" fg:w="3"/><text x="13.5568%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="13.3865%" y="533" width="0.1594%" height="15" fill="rgb(238,81,28)" fg:x="168" fg:w="2"/><text x="13.6365%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4661%" y="517" width="0.0797%" height="15" fill="rgb(235,110,19)" fg:x="169" fg:w="1"/><text x="13.7161%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.4661%" y="501" width="0.0797%" height="15" fill="rgb(214,7,14)" fg:x="169" fg:w="1"/><text x="13.7161%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4661%" y="485" width="0.0797%" height="15" fill="rgb(211,77,3)" fg:x="169" fg:w="1"/><text x="13.7161%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.4661%" y="469" width="0.0797%" height="15" fill="rgb(229,5,9)" fg:x="169" fg:w="1"/><text x="13.7161%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.5458%" y="549" width="0.0797%" height="15" fill="rgb(225,90,11)" fg:x="170" fg:w="1"/><text x="13.7958%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.5458%" y="533" width="0.0797%" height="15" fill="rgb(242,56,8)" fg:x="170" fg:w="1"/><text x="13.7958%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.5458%" y="517" width="0.0797%" height="15" fill="rgb(249,212,39)" fg:x="170" fg:w="1"/><text x="13.7958%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.5458%" y="501" width="0.0797%" height="15" fill="rgb(236,90,9)" fg:x="170" fg:w="1"/><text x="13.7958%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="13.7052%" y="485" width="0.3187%" height="15" fill="rgb(206,88,35)" fg:x="172" fg:w="4"/><text x="13.9552%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="13.7052%" y="469" width="0.3187%" height="15" fill="rgb(205,126,30)" fg:x="172" fg:w="4"/><text x="13.9552%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="13.7052%" y="453" width="0.3187%" height="15" fill="rgb(230,176,12)" fg:x="172" fg:w="4"/><text x="13.9552%" y="463.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="13.7052%" y="437" width="0.3187%" height="15" fill="rgb(243,19,9)" fg:x="172" fg:w="4"/><text x="13.9552%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.48%)</title><rect x="13.6255%" y="533" width="0.4781%" height="15" fill="rgb(245,171,17)" fg:x="171" fg:w="6"/><text x="13.8755%" y="543.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.48%)</title><rect x="13.6255%" y="517" width="0.4781%" height="15" fill="rgb(227,52,21)" fg:x="171" fg:w="6"/><text x="13.8755%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (6 samples, 0.48%)</title><rect x="13.6255%" y="501" width="0.4781%" height="15" fill="rgb(238,69,14)" fg:x="171" fg:w="6"/><text x="13.8755%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="14.0239%" y="485" width="0.0797%" height="15" fill="rgb(241,156,39)" fg:x="176" fg:w="1"/><text x="14.2739%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="14.4223%" y="469" width="0.3187%" height="15" fill="rgb(212,227,28)" fg:x="181" fg:w="4"/><text x="14.6723%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="14.5020%" y="453" width="0.2390%" height="15" fill="rgb(209,118,27)" fg:x="182" fg:w="3"/><text x="14.7520%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="14.5020%" y="437" width="0.2390%" height="15" fill="rgb(226,102,5)" fg:x="182" fg:w="3"/><text x="14.7520%" y="447.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="14.5020%" y="421" width="0.2390%" height="15" fill="rgb(223,34,3)" fg:x="182" fg:w="3"/><text x="14.7520%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.51%)</title><rect x="13.3068%" y="565" width="1.5139%" height="15" fill="rgb(221,81,38)" fg:x="167" fg:w="19"/><text x="13.5568%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.20%)</title><rect x="13.6255%" y="549" width="1.1952%" height="15" fill="rgb(236,219,28)" fg:x="171" fg:w="15"/><text x="13.8755%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="14.1036%" y="533" width="0.7171%" height="15" fill="rgb(213,200,14)" fg:x="177" fg:w="9"/><text x="14.3536%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (7 samples, 0.56%)</title><rect x="14.2629%" y="517" width="0.5578%" height="15" fill="rgb(240,33,19)" fg:x="179" fg:w="7"/><text x="14.5129%" y="527.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.40%)</title><rect x="14.4223%" y="501" width="0.3984%" height="15" fill="rgb(233,113,27)" fg:x="181" fg:w="5"/><text x="14.6723%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.40%)</title><rect x="14.4223%" y="485" width="0.3984%" height="15" fill="rgb(220,221,18)" fg:x="181" fg:w="5"/><text x="14.6723%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="14.7410%" y="469" width="0.0797%" height="15" fill="rgb(238,92,8)" fg:x="185" fg:w="1"/><text x="14.9910%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (23 samples, 1.83%)</title><rect x="13.1474%" y="581" width="1.8327%" height="15" fill="rgb(222,164,16)" fg:x="165" fg:w="23"/><text x="13.3974%" y="591.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.8207%" y="565" width="0.1594%" height="15" fill="rgb(241,119,3)" fg:x="186" fg:w="2"/><text x="15.0707%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.9004%" y="549" width="0.0797%" height="15" fill="rgb(241,44,8)" fg:x="187" fg:w="1"/><text x="15.1504%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.9004%" y="533" width="0.0797%" height="15" fill="rgb(230,36,40)" fg:x="187" fg:w="1"/><text x="15.1504%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (26 samples, 2.07%)</title><rect x="12.9880%" y="597" width="2.0717%" height="15" fill="rgb(243,16,36)" fg:x="163" fg:w="26"/><text x="13.2380%" y="607.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.9801%" y="581" width="0.0797%" height="15" fill="rgb(231,4,26)" fg:x="188" fg:w="1"/><text x="15.2301%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.9801%" y="565" width="0.0797%" height="15" fill="rgb(240,9,31)" fg:x="188" fg:w="1"/><text x="15.2301%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.9801%" y="549" width="0.0797%" height="15" fill="rgb(207,173,15)" fg:x="188" fg:w="1"/><text x="15.2301%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.0598%" y="597" width="0.0797%" height="15" fill="rgb(224,192,53)" fg:x="189" fg:w="1"/><text x="15.3098%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.0598%" y="581" width="0.0797%" height="15" fill="rgb(223,67,28)" fg:x="189" fg:w="1"/><text x="15.3098%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.0598%" y="565" width="0.0797%" height="15" fill="rgb(211,20,47)" fg:x="189" fg:w="1"/><text x="15.3098%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.0598%" y="549" width="0.0797%" height="15" fill="rgb(240,228,2)" fg:x="189" fg:w="1"/><text x="15.3098%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.0598%" y="533" width="0.0797%" height="15" fill="rgb(248,151,12)" fg:x="189" fg:w="1"/><text x="15.3098%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.0598%" y="517" width="0.0797%" height="15" fill="rgb(244,8,39)" fg:x="189" fg:w="1"/><text x="15.3098%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0598%" y="501" width="0.0797%" height="15" fill="rgb(222,26,8)" fg:x="189" fg:w="1"/><text x="15.3098%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.1394%" y="565" width="0.0797%" height="15" fill="rgb(213,106,44)" fg:x="190" fg:w="1"/><text x="15.3894%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.2191%" y="549" width="0.0797%" height="15" fill="rgb(214,129,20)" fg:x="191" fg:w="1"/><text x="15.4691%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="15.2191%" y="565" width="0.1594%" height="15" fill="rgb(212,32,13)" fg:x="191" fg:w="2"/><text x="15.4691%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2988%" y="549" width="0.0797%" height="15" fill="rgb(208,168,33)" fg:x="192" fg:w="1"/><text x="15.5488%" y="559.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="15.3785%" y="565" width="0.0797%" height="15" fill="rgb(231,207,8)" fg:x="193" fg:w="1"/><text x="15.6285%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="15.3785%" y="549" width="0.0797%" height="15" fill="rgb(235,219,23)" fg:x="193" fg:w="1"/><text x="15.6285%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="15.1394%" y="581" width="0.3984%" height="15" fill="rgb(226,216,26)" fg:x="190" fg:w="5"/><text x="15.3894%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::iter (1 samples, 0.08%)</title><rect x="15.4582%" y="565" width="0.0797%" height="15" fill="rgb(239,137,16)" fg:x="194" fg:w="1"/><text x="15.7082%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="15.6972%" y="517" width="0.1594%" height="15" fill="rgb(207,12,36)" fg:x="197" fg:w="2"/><text x="15.9472%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.6972%" y="501" width="0.1594%" height="15" fill="rgb(210,214,24)" fg:x="197" fg:w="2"/><text x="15.9472%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.7769%" y="485" width="0.0797%" height="15" fill="rgb(206,56,30)" fg:x="198" fg:w="1"/><text x="16.0269%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.7769%" y="469" width="0.0797%" height="15" fill="rgb(228,143,26)" fg:x="198" fg:w="1"/><text x="16.0269%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.7769%" y="453" width="0.0797%" height="15" fill="rgb(216,218,46)" fg:x="198" fg:w="1"/><text x="16.0269%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.7769%" y="437" width="0.0797%" height="15" fill="rgb(206,6,19)" fg:x="198" fg:w="1"/><text x="16.0269%" y="447.50"></text></g><g><title>engine::session::Session::flush (41 samples, 3.27%)</title><rect x="12.6693%" y="709" width="3.2669%" height="15" fill="rgb(239,177,51)" fg:x="159" fg:w="41"/><text x="12.9193%" y="719.50">eng..</text></g><g><title>engine::session::Session::save_changes (39 samples, 3.11%)</title><rect x="12.8287%" y="693" width="3.1076%" height="15" fill="rgb(216,55,25)" fg:x="161" fg:w="39"/><text x="13.0787%" y="703.50">eng..</text></g><g><title>engine::session::state::State::close (38 samples, 3.03%)</title><rect x="12.9084%" y="677" width="3.0279%" height="15" fill="rgb(231,163,29)" fg:x="162" fg:w="38"/><text x="13.1584%" y="687.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (38 samples, 3.03%)</title><rect x="12.9084%" y="661" width="3.0279%" height="15" fill="rgb(232,149,50)" fg:x="162" fg:w="38"/><text x="13.1584%" y="671.50">eng..</text></g><g><title>core::iter::adapters::try_process (37 samples, 2.95%)</title><rect x="12.9880%" y="645" width="2.9482%" height="15" fill="rgb(223,142,48)" fg:x="163" fg:w="37"/><text x="13.2380%" y="655.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 2.95%)</title><rect x="12.9880%" y="629" width="2.9482%" height="15" fill="rgb(245,83,23)" fg:x="163" fg:w="37"/><text x="13.2380%" y="639.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (37 samples, 2.95%)</title><rect x="12.9880%" y="613" width="2.9482%" height="15" fill="rgb(224,63,2)" fg:x="163" fg:w="37"/><text x="13.2380%" y="623.50">en..</text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="15.1394%" y="597" width="0.7968%" height="15" fill="rgb(218,65,53)" fg:x="190" fg:w="10"/><text x="15.3894%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="15.5378%" y="581" width="0.3984%" height="15" fill="rgb(221,84,29)" fg:x="195" fg:w="5"/><text x="15.7878%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="15.5378%" y="565" width="0.3984%" height="15" fill="rgb(234,0,32)" fg:x="195" fg:w="5"/><text x="15.7878%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="15.5378%" y="549" width="0.3984%" height="15" fill="rgb(206,20,16)" fg:x="195" fg:w="5"/><text x="15.7878%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="15.6175%" y="533" width="0.3187%" height="15" fill="rgb(244,172,18)" fg:x="196" fg:w="4"/><text x="15.8675%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="15.8566%" y="517" width="0.0797%" height="15" fill="rgb(254,133,1)" fg:x="199" fg:w="1"/><text x="16.1066%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="16.0159%" y="677" width="0.0797%" height="15" fill="rgb(222,206,41)" fg:x="201" fg:w="1"/><text x="16.2659%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="16.0159%" y="661" width="0.0797%" height="15" fill="rgb(212,3,42)" fg:x="201" fg:w="1"/><text x="16.2659%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="16.0159%" y="645" width="0.0797%" height="15" fill="rgb(241,11,4)" fg:x="201" fg:w="1"/><text x="16.2659%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="16.0159%" y="629" width="0.0797%" height="15" fill="rgb(205,19,26)" fg:x="201" fg:w="1"/><text x="16.2659%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="16.0159%" y="613" width="0.0797%" height="15" fill="rgb(210,179,32)" fg:x="201" fg:w="1"/><text x="16.2659%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.24%)</title><rect x="15.9363%" y="709" width="0.2390%" height="15" fill="rgb(227,116,49)" fg:x="200" fg:w="3"/><text x="16.1863%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="15.9363%" y="693" width="0.2390%" height="15" fill="rgb(211,146,6)" fg:x="200" fg:w="3"/><text x="16.1863%" y="703.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.0956%" y="677" width="0.0797%" height="15" fill="rgb(219,44,39)" fg:x="202" fg:w="1"/><text x="16.3456%" y="687.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0956%" y="661" width="0.0797%" height="15" fill="rgb(234,128,11)" fg:x="202" fg:w="1"/><text x="16.3456%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1753%" y="661" width="0.0797%" height="15" fill="rgb(220,183,53)" fg:x="203" fg:w="1"/><text x="16.4253%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1753%" y="645" width="0.0797%" height="15" fill="rgb(213,219,32)" fg:x="203" fg:w="1"/><text x="16.4253%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1753%" y="629" width="0.0797%" height="15" fill="rgb(232,156,16)" fg:x="203" fg:w="1"/><text x="16.4253%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1753%" y="613" width="0.0797%" height="15" fill="rgb(246,135,34)" fg:x="203" fg:w="1"/><text x="16.4253%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="16.1753%" y="677" width="0.1594%" height="15" fill="rgb(241,99,0)" fg:x="203" fg:w="2"/><text x="16.4253%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.2550%" y="661" width="0.0797%" height="15" fill="rgb(222,103,45)" fg:x="204" fg:w="1"/><text x="16.5050%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2550%" y="645" width="0.0797%" height="15" fill="rgb(212,57,4)" fg:x="204" fg:w="1"/><text x="16.5050%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.2550%" y="629" width="0.0797%" height="15" fill="rgb(215,68,47)" fg:x="204" fg:w="1"/><text x="16.5050%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2550%" y="613" width="0.0797%" height="15" fill="rgb(230,84,2)" fg:x="204" fg:w="1"/><text x="16.5050%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.2550%" y="597" width="0.0797%" height="15" fill="rgb(220,102,14)" fg:x="204" fg:w="1"/><text x="16.5050%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2550%" y="581" width="0.0797%" height="15" fill="rgb(240,10,32)" fg:x="204" fg:w="1"/><text x="16.5050%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.3347%" y="677" width="0.0797%" height="15" fill="rgb(215,47,27)" fg:x="205" fg:w="1"/><text x="16.5847%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="16.1753%" y="693" width="0.3187%" height="15" fill="rgb(233,188,43)" fg:x="203" fg:w="4"/><text x="16.4253%" y="703.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="16.4143%" y="677" width="0.0797%" height="15" fill="rgb(253,190,1)" fg:x="206" fg:w="1"/><text x="16.6643%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="16.4940%" y="677" width="0.0797%" height="15" fill="rgb(206,114,52)" fg:x="207" fg:w="1"/><text x="16.7440%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4940%" y="661" width="0.0797%" height="15" fill="rgb(233,120,37)" fg:x="207" fg:w="1"/><text x="16.7440%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.5737%" y="677" width="0.0797%" height="15" fill="rgb(214,52,39)" fg:x="208" fg:w="1"/><text x="16.8237%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="16.6534%" y="677" width="0.0797%" height="15" fill="rgb(223,80,29)" fg:x="209" fg:w="1"/><text x="16.9034%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="16.6534%" y="661" width="0.0797%" height="15" fill="rgb(230,101,40)" fg:x="209" fg:w="1"/><text x="16.9034%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.6534%" y="645" width="0.0797%" height="15" fill="rgb(219,211,8)" fg:x="209" fg:w="1"/><text x="16.9034%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="16.6534%" y="629" width="0.0797%" height="15" fill="rgb(252,126,28)" fg:x="209" fg:w="1"/><text x="16.9034%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="16.7331%" y="661" width="0.0797%" height="15" fill="rgb(215,56,38)" fg:x="210" fg:w="1"/><text x="16.9831%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.7331%" y="645" width="0.0797%" height="15" fill="rgb(249,55,44)" fg:x="210" fg:w="1"/><text x="16.9831%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7331%" y="629" width="0.0797%" height="15" fill="rgb(220,221,32)" fg:x="210" fg:w="1"/><text x="16.9831%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7331%" y="613" width="0.0797%" height="15" fill="rgb(212,216,41)" fg:x="210" fg:w="1"/><text x="16.9831%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7331%" y="597" width="0.0797%" height="15" fill="rgb(228,213,43)" fg:x="210" fg:w="1"/><text x="16.9831%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.7331%" y="581" width="0.0797%" height="15" fill="rgb(211,31,26)" fg:x="210" fg:w="1"/><text x="16.9831%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8127%" y="629" width="0.0797%" height="15" fill="rgb(229,202,19)" fg:x="211" fg:w="1"/><text x="17.0627%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="16.4940%" y="693" width="0.4781%" height="15" fill="rgb(229,105,46)" fg:x="207" fg:w="6"/><text x="16.7440%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="16.7331%" y="677" width="0.2390%" height="15" fill="rgb(235,108,1)" fg:x="210" fg:w="3"/><text x="16.9831%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="16.8127%" y="661" width="0.1594%" height="15" fill="rgb(245,111,35)" fg:x="211" fg:w="2"/><text x="17.0627%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.8127%" y="645" width="0.1594%" height="15" fill="rgb(219,185,31)" fg:x="211" fg:w="2"/><text x="17.0627%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.8924%" y="629" width="0.0797%" height="15" fill="rgb(214,4,43)" fg:x="212" fg:w="1"/><text x="17.1424%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.8924%" y="613" width="0.0797%" height="15" fill="rgb(235,227,40)" fg:x="212" fg:w="1"/><text x="17.1424%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.8924%" y="597" width="0.0797%" height="15" fill="rgb(230,88,30)" fg:x="212" fg:w="1"/><text x="17.1424%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8924%" y="581" width="0.0797%" height="15" fill="rgb(216,217,1)" fg:x="212" fg:w="1"/><text x="17.1424%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.88%)</title><rect x="16.1753%" y="709" width="0.8765%" height="15" fill="rgb(248,139,50)" fg:x="203" fg:w="11"/><text x="16.4253%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9721%" y="693" width="0.0797%" height="15" fill="rgb(233,1,21)" fg:x="213" fg:w="1"/><text x="17.2221%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.9721%" y="677" width="0.0797%" height="15" fill="rgb(215,183,12)" fg:x="213" fg:w="1"/><text x="17.2221%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9721%" y="661" width="0.0797%" height="15" fill="rgb(229,104,42)" fg:x="213" fg:w="1"/><text x="17.2221%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.0518%" y="645" width="0.0797%" height="15" fill="rgb(243,34,48)" fg:x="214" fg:w="1"/><text x="17.3018%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.0518%" y="629" width="0.0797%" height="15" fill="rgb(239,11,44)" fg:x="214" fg:w="1"/><text x="17.3018%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.0518%" y="613" width="0.0797%" height="15" fill="rgb(231,98,35)" fg:x="214" fg:w="1"/><text x="17.3018%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.0518%" y="597" width="0.0797%" height="15" fill="rgb(233,28,25)" fg:x="214" fg:w="1"/><text x="17.3018%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.0518%" y="581" width="0.0797%" height="15" fill="rgb(234,123,11)" fg:x="214" fg:w="1"/><text x="17.3018%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="17.1315%" y="629" width="0.0797%" height="15" fill="rgb(220,69,3)" fg:x="215" fg:w="1"/><text x="17.3815%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.1315%" y="613" width="0.0797%" height="15" fill="rgb(214,64,36)" fg:x="215" fg:w="1"/><text x="17.3815%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="17.0518%" y="709" width="0.2390%" height="15" fill="rgb(211,138,32)" fg:x="214" fg:w="3"/><text x="17.3018%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="17.0518%" y="693" width="0.2390%" height="15" fill="rgb(213,118,47)" fg:x="214" fg:w="3"/><text x="17.3018%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="17.0518%" y="677" width="0.2390%" height="15" fill="rgb(243,124,49)" fg:x="214" fg:w="3"/><text x="17.3018%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="17.0518%" y="661" width="0.2390%" height="15" fill="rgb(221,30,28)" fg:x="214" fg:w="3"/><text x="17.3018%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="17.1315%" y="645" width="0.1594%" height="15" fill="rgb(246,37,13)" fg:x="215" fg:w="2"/><text x="17.3815%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="17.2112%" y="629" width="0.0797%" height="15" fill="rgb(249,66,14)" fg:x="216" fg:w="1"/><text x="17.4612%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.2112%" y="613" width="0.0797%" height="15" fill="rgb(213,166,5)" fg:x="216" fg:w="1"/><text x="17.4612%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.2112%" y="597" width="0.0797%" height="15" fill="rgb(221,66,24)" fg:x="216" fg:w="1"/><text x="17.4612%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.2908%" y="677" width="0.1594%" height="15" fill="rgb(210,132,17)" fg:x="217" fg:w="2"/><text x="17.5408%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.2908%" y="661" width="0.1594%" height="15" fill="rgb(243,202,5)" fg:x="217" fg:w="2"/><text x="17.5408%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.3705%" y="645" width="0.0797%" height="15" fill="rgb(233,70,48)" fg:x="218" fg:w="1"/><text x="17.6205%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.3705%" y="629" width="0.0797%" height="15" fill="rgb(238,41,26)" fg:x="218" fg:w="1"/><text x="17.6205%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.3705%" y="613" width="0.0797%" height="15" fill="rgb(241,19,31)" fg:x="218" fg:w="1"/><text x="17.6205%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.3705%" y="597" width="0.0797%" height="15" fill="rgb(214,76,10)" fg:x="218" fg:w="1"/><text x="17.6205%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.3705%" y="581" width="0.0797%" height="15" fill="rgb(254,202,22)" fg:x="218" fg:w="1"/><text x="17.6205%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.3705%" y="565" width="0.0797%" height="15" fill="rgb(214,72,24)" fg:x="218" fg:w="1"/><text x="17.6205%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="17.3705%" y="549" width="0.0797%" height="15" fill="rgb(221,92,46)" fg:x="218" fg:w="1"/><text x="17.6205%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.3705%" y="533" width="0.0797%" height="15" fill="rgb(246,13,50)" fg:x="218" fg:w="1"/><text x="17.6205%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="17.2908%" y="693" width="0.3187%" height="15" fill="rgb(240,165,38)" fg:x="217" fg:w="4"/><text x="17.5408%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="17.4502%" y="677" width="0.1594%" height="15" fill="rgb(241,24,51)" fg:x="219" fg:w="2"/><text x="17.7002%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="17.4502%" y="661" width="0.1594%" height="15" fill="rgb(227,51,44)" fg:x="219" fg:w="2"/><text x="17.7002%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="17.5299%" y="645" width="0.0797%" height="15" fill="rgb(231,121,3)" fg:x="220" fg:w="1"/><text x="17.7799%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="17.5299%" y="629" width="0.0797%" height="15" fill="rgb(245,3,41)" fg:x="220" fg:w="1"/><text x="17.7799%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="17.5299%" y="613" width="0.0797%" height="15" fill="rgb(214,13,26)" fg:x="220" fg:w="1"/><text x="17.7799%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.5299%" y="597" width="0.0797%" height="15" fill="rgb(252,75,11)" fg:x="220" fg:w="1"/><text x="17.7799%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.5299%" y="581" width="0.0797%" height="15" fill="rgb(218,226,17)" fg:x="220" fg:w="1"/><text x="17.7799%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6096%" y="661" width="0.0797%" height="15" fill="rgb(248,89,38)" fg:x="221" fg:w="1"/><text x="17.8596%" y="671.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (6 samples, 0.48%)</title><rect x="17.2908%" y="709" width="0.4781%" height="15" fill="rgb(237,73,46)" fg:x="217" fg:w="6"/><text x="17.5408%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="17.6096%" y="693" width="0.1594%" height="15" fill="rgb(242,78,33)" fg:x="221" fg:w="2"/><text x="17.8596%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="17.6096%" y="677" width="0.1594%" height="15" fill="rgb(235,60,3)" fg:x="221" fg:w="2"/><text x="17.8596%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="17.6892%" y="661" width="0.0797%" height="15" fill="rgb(216,172,19)" fg:x="222" fg:w="1"/><text x="17.9392%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6892%" y="645" width="0.0797%" height="15" fill="rgb(227,6,42)" fg:x="222" fg:w="1"/><text x="17.9392%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6892%" y="629" width="0.0797%" height="15" fill="rgb(223,207,42)" fg:x="222" fg:w="1"/><text x="17.9392%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.6892%" y="613" width="0.0797%" height="15" fill="rgb(246,138,30)" fg:x="222" fg:w="1"/><text x="17.9392%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6892%" y="597" width="0.0797%" height="15" fill="rgb(251,199,47)" fg:x="222" fg:w="1"/><text x="17.9392%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (71 samples, 5.66%)</title><rect x="12.1912%" y="725" width="5.6574%" height="15" fill="rgb(228,218,44)" fg:x="153" fg:w="71"/><text x="12.4412%" y="735.50">plugins..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="17.7689%" y="709" width="0.0797%" height="15" fill="rgb(220,68,6)" fg:x="223" fg:w="1"/><text x="18.0189%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="17.7689%" y="693" width="0.0797%" height="15" fill="rgb(240,60,26)" fg:x="223" fg:w="1"/><text x="18.0189%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="17.7689%" y="677" width="0.0797%" height="15" fill="rgb(211,200,19)" fg:x="223" fg:w="1"/><text x="18.0189%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="17.7689%" y="661" width="0.0797%" height="15" fill="rgb(242,145,30)" fg:x="223" fg:w="1"/><text x="18.0189%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="17.7689%" y="645" width="0.0797%" height="15" fill="rgb(225,64,13)" fg:x="223" fg:w="1"/><text x="18.0189%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.7689%" y="629" width="0.0797%" height="15" fill="rgb(218,103,35)" fg:x="223" fg:w="1"/><text x="18.0189%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="17.8486%" y="725" width="0.1594%" height="15" fill="rgb(216,93,46)" fg:x="224" fg:w="2"/><text x="18.0986%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="17.8486%" y="709" width="0.1594%" height="15" fill="rgb(225,159,27)" fg:x="224" fg:w="2"/><text x="18.0986%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="17.9283%" y="693" width="0.0797%" height="15" fill="rgb(225,204,11)" fg:x="225" fg:w="1"/><text x="18.1783%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="17.9283%" y="677" width="0.0797%" height="15" fill="rgb(205,56,4)" fg:x="225" fg:w="1"/><text x="18.1783%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.9283%" y="661" width="0.0797%" height="15" fill="rgb(206,6,35)" fg:x="225" fg:w="1"/><text x="18.1783%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.9283%" y="645" width="0.0797%" height="15" fill="rgb(247,73,52)" fg:x="225" fg:w="1"/><text x="18.1783%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.9283%" y="629" width="0.0797%" height="15" fill="rgb(246,97,4)" fg:x="225" fg:w="1"/><text x="18.1783%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.9283%" y="613" width="0.0797%" height="15" fill="rgb(212,37,15)" fg:x="225" fg:w="1"/><text x="18.1783%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.9283%" y="597" width="0.0797%" height="15" fill="rgb(208,130,40)" fg:x="225" fg:w="1"/><text x="18.1783%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="17.9283%" y="581" width="0.0797%" height="15" fill="rgb(236,55,29)" fg:x="225" fg:w="1"/><text x="18.1783%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="17.9283%" y="565" width="0.0797%" height="15" fill="rgb(209,156,45)" fg:x="225" fg:w="1"/><text x="18.1783%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.9283%" y="549" width="0.0797%" height="15" fill="rgb(249,107,4)" fg:x="225" fg:w="1"/><text x="18.1783%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.9283%" y="533" width="0.0797%" height="15" fill="rgb(227,7,13)" fg:x="225" fg:w="1"/><text x="18.1783%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="17.9283%" y="517" width="0.0797%" height="15" fill="rgb(250,129,14)" fg:x="225" fg:w="1"/><text x="18.1783%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="17.9283%" y="501" width="0.0797%" height="15" fill="rgb(229,92,13)" fg:x="225" fg:w="1"/><text x="18.1783%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="17.9283%" y="485" width="0.0797%" height="15" fill="rgb(245,98,39)" fg:x="225" fg:w="1"/><text x="18.1783%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="17.9283%" y="469" width="0.0797%" height="15" fill="rgb(234,135,48)" fg:x="225" fg:w="1"/><text x="18.1783%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.9283%" y="453" width="0.0797%" height="15" fill="rgb(230,98,28)" fg:x="225" fg:w="1"/><text x="18.1783%" y="463.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="18.0080%" y="677" width="0.0797%" height="15" fill="rgb(223,121,0)" fg:x="226" fg:w="1"/><text x="18.2580%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="18.0080%" y="661" width="0.0797%" height="15" fill="rgb(234,173,33)" fg:x="226" fg:w="1"/><text x="18.2580%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.0080%" y="645" width="0.0797%" height="15" fill="rgb(245,47,8)" fg:x="226" fg:w="1"/><text x="18.2580%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.0080%" y="629" width="0.0797%" height="15" fill="rgb(205,17,20)" fg:x="226" fg:w="1"/><text x="18.2580%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.0080%" y="613" width="0.0797%" height="15" fill="rgb(232,151,16)" fg:x="226" fg:w="1"/><text x="18.2580%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.0080%" y="597" width="0.0797%" height="15" fill="rgb(208,30,32)" fg:x="226" fg:w="1"/><text x="18.2580%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.0080%" y="581" width="0.0797%" height="15" fill="rgb(254,26,3)" fg:x="226" fg:w="1"/><text x="18.2580%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.0080%" y="565" width="0.0797%" height="15" fill="rgb(240,177,30)" fg:x="226" fg:w="1"/><text x="18.2580%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="18.0876%" y="645" width="0.0797%" height="15" fill="rgb(248,76,44)" fg:x="227" fg:w="1"/><text x="18.3376%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="18.0876%" y="629" width="0.0797%" height="15" fill="rgb(241,186,54)" fg:x="227" fg:w="1"/><text x="18.3376%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="18.0876%" y="613" width="0.0797%" height="15" fill="rgb(249,171,29)" fg:x="227" fg:w="1"/><text x="18.3376%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="18.0080%" y="693" width="0.2390%" height="15" fill="rgb(237,151,44)" fg:x="226" fg:w="3"/><text x="18.2580%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="18.0876%" y="677" width="0.1594%" height="15" fill="rgb(228,174,30)" fg:x="227" fg:w="2"/><text x="18.3376%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="18.0876%" y="661" width="0.1594%" height="15" fill="rgb(252,14,37)" fg:x="227" fg:w="2"/><text x="18.3376%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.1673%" y="645" width="0.0797%" height="15" fill="rgb(207,111,40)" fg:x="228" fg:w="1"/><text x="18.4173%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.1673%" y="629" width="0.0797%" height="15" fill="rgb(248,171,54)" fg:x="228" fg:w="1"/><text x="18.4173%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="18.1673%" y="613" width="0.0797%" height="15" fill="rgb(211,127,2)" fg:x="228" fg:w="1"/><text x="18.4173%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.1673%" y="597" width="0.0797%" height="15" fill="rgb(236,87,47)" fg:x="228" fg:w="1"/><text x="18.4173%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.2470%" y="645" width="0.1594%" height="15" fill="rgb(223,190,45)" fg:x="229" fg:w="2"/><text x="18.4970%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="18.2470%" y="629" width="0.1594%" height="15" fill="rgb(215,5,16)" fg:x="229" fg:w="2"/><text x="18.4970%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.48%)</title><rect x="18.0080%" y="725" width="0.4781%" height="15" fill="rgb(252,82,33)" fg:x="226" fg:w="6"/><text x="18.2580%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="18.0080%" y="709" width="0.4781%" height="15" fill="rgb(247,213,44)" fg:x="226" fg:w="6"/><text x="18.2580%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (3 samples, 0.24%)</title><rect x="18.2470%" y="693" width="0.2390%" height="15" fill="rgb(205,196,44)" fg:x="229" fg:w="3"/><text x="18.4970%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="18.2470%" y="677" width="0.2390%" height="15" fill="rgb(237,96,54)" fg:x="229" fg:w="3"/><text x="18.4970%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="18.2470%" y="661" width="0.2390%" height="15" fill="rgb(230,113,34)" fg:x="229" fg:w="3"/><text x="18.4970%" y="671.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="18.4064%" y="645" width="0.0797%" height="15" fill="rgb(221,224,12)" fg:x="231" fg:w="1"/><text x="18.6564%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.4064%" y="629" width="0.0797%" height="15" fill="rgb(219,112,44)" fg:x="231" fg:w="1"/><text x="18.6564%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="18.4861%" y="709" width="0.0797%" height="15" fill="rgb(210,31,13)" fg:x="232" fg:w="1"/><text x="18.7361%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="18.4861%" y="693" width="0.0797%" height="15" fill="rgb(230,25,16)" fg:x="232" fg:w="1"/><text x="18.7361%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.4861%" y="677" width="0.0797%" height="15" fill="rgb(246,108,53)" fg:x="232" fg:w="1"/><text x="18.7361%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4861%" y="661" width="0.0797%" height="15" fill="rgb(241,172,50)" fg:x="232" fg:w="1"/><text x="18.7361%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.4861%" y="645" width="0.0797%" height="15" fill="rgb(235,141,10)" fg:x="232" fg:w="1"/><text x="18.7361%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4861%" y="629" width="0.0797%" height="15" fill="rgb(220,174,43)" fg:x="232" fg:w="1"/><text x="18.7361%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="18.5657%" y="709" width="0.0797%" height="15" fill="rgb(215,181,40)" fg:x="233" fg:w="1"/><text x="18.8157%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="18.5657%" y="693" width="0.0797%" height="15" fill="rgb(230,97,2)" fg:x="233" fg:w="1"/><text x="18.8157%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="18.7251%" y="693" width="0.1594%" height="15" fill="rgb(211,25,27)" fg:x="235" fg:w="2"/><text x="18.9751%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="18.7251%" y="677" width="0.1594%" height="15" fill="rgb(230,87,26)" fg:x="235" fg:w="2"/><text x="18.9751%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.7251%" y="661" width="0.1594%" height="15" fill="rgb(227,160,17)" fg:x="235" fg:w="2"/><text x="18.9751%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.7251%" y="645" width="0.1594%" height="15" fill="rgb(244,85,34)" fg:x="235" fg:w="2"/><text x="18.9751%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="18.7251%" y="629" width="0.1594%" height="15" fill="rgb(207,70,0)" fg:x="235" fg:w="2"/><text x="18.9751%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.7251%" y="613" width="0.1594%" height="15" fill="rgb(223,129,7)" fg:x="235" fg:w="2"/><text x="18.9751%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.7251%" y="597" width="0.1594%" height="15" fill="rgb(246,105,7)" fg:x="235" fg:w="2"/><text x="18.9751%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.7251%" y="581" width="0.1594%" height="15" fill="rgb(215,154,42)" fg:x="235" fg:w="2"/><text x="18.9751%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9641%" y="677" width="0.0797%" height="15" fill="rgb(220,215,30)" fg:x="238" fg:w="1"/><text x="19.2141%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.9641%" y="661" width="0.0797%" height="15" fill="rgb(228,81,51)" fg:x="238" fg:w="1"/><text x="19.2141%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.9641%" y="645" width="0.0797%" height="15" fill="rgb(247,71,54)" fg:x="238" fg:w="1"/><text x="19.2141%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.9641%" y="629" width="0.0797%" height="15" fill="rgb(234,176,34)" fg:x="238" fg:w="1"/><text x="19.2141%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.9641%" y="613" width="0.0797%" height="15" fill="rgb(241,103,54)" fg:x="238" fg:w="1"/><text x="19.2141%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9641%" y="597" width="0.0797%" height="15" fill="rgb(228,22,34)" fg:x="238" fg:w="1"/><text x="19.2141%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.9641%" y="581" width="0.0797%" height="15" fill="rgb(241,179,48)" fg:x="238" fg:w="1"/><text x="19.2141%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.9641%" y="565" width="0.0797%" height="15" fill="rgb(235,167,37)" fg:x="238" fg:w="1"/><text x="19.2141%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.9641%" y="549" width="0.0797%" height="15" fill="rgb(213,109,30)" fg:x="238" fg:w="1"/><text x="19.2141%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.9641%" y="533" width="0.0797%" height="15" fill="rgb(222,172,16)" fg:x="238" fg:w="1"/><text x="19.2141%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.9641%" y="517" width="0.0797%" height="15" fill="rgb(233,192,5)" fg:x="238" fg:w="1"/><text x="19.2141%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.9641%" y="501" width="0.0797%" height="15" fill="rgb(247,189,41)" fg:x="238" fg:w="1"/><text x="19.2141%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="19.0438%" y="677" width="0.0797%" height="15" fill="rgb(218,134,47)" fg:x="239" fg:w="1"/><text x="19.2938%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0438%" y="661" width="0.0797%" height="15" fill="rgb(216,29,3)" fg:x="239" fg:w="1"/><text x="19.2938%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.0438%" y="645" width="0.0797%" height="15" fill="rgb(246,140,12)" fg:x="239" fg:w="1"/><text x="19.2938%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="19.2032%" y="629" width="0.0797%" height="15" fill="rgb(230,136,11)" fg:x="241" fg:w="1"/><text x="19.4532%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.2032%" y="613" width="0.0797%" height="15" fill="rgb(247,22,47)" fg:x="241" fg:w="1"/><text x="19.4532%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.2032%" y="597" width="0.0797%" height="15" fill="rgb(218,84,22)" fg:x="241" fg:w="1"/><text x="19.4532%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.2032%" y="581" width="0.0797%" height="15" fill="rgb(216,87,39)" fg:x="241" fg:w="1"/><text x="19.4532%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.2032%" y="565" width="0.0797%" height="15" fill="rgb(221,178,8)" fg:x="241" fg:w="1"/><text x="19.4532%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.2032%" y="549" width="0.0797%" height="15" fill="rgb(230,42,11)" fg:x="241" fg:w="1"/><text x="19.4532%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.2032%" y="533" width="0.0797%" height="15" fill="rgb(237,229,4)" fg:x="241" fg:w="1"/><text x="19.4532%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.2032%" y="517" width="0.0797%" height="15" fill="rgb(222,31,33)" fg:x="241" fg:w="1"/><text x="19.4532%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="19.2032%" y="661" width="0.1594%" height="15" fill="rgb(210,17,39)" fg:x="241" fg:w="2"/><text x="19.4532%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="19.2032%" y="645" width="0.1594%" height="15" fill="rgb(244,93,20)" fg:x="241" fg:w="2"/><text x="19.4532%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.2829%" y="629" width="0.0797%" height="15" fill="rgb(210,40,47)" fg:x="242" fg:w="1"/><text x="19.5329%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="19.3625%" y="661" width="0.0797%" height="15" fill="rgb(239,211,47)" fg:x="243" fg:w="1"/><text x="19.6125%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.3625%" y="645" width="0.0797%" height="15" fill="rgb(251,223,49)" fg:x="243" fg:w="1"/><text x="19.6125%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="19.3625%" y="629" width="0.0797%" height="15" fill="rgb(221,149,5)" fg:x="243" fg:w="1"/><text x="19.6125%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.4422%" y="629" width="0.0797%" height="15" fill="rgb(219,224,51)" fg:x="244" fg:w="1"/><text x="19.6922%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="19.1235%" y="677" width="0.4781%" height="15" fill="rgb(223,7,8)" fg:x="240" fg:w="6"/><text x="19.3735%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="19.4422%" y="661" width="0.1594%" height="15" fill="rgb(241,217,22)" fg:x="244" fg:w="2"/><text x="19.6922%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="19.4422%" y="645" width="0.1594%" height="15" fill="rgb(248,209,0)" fg:x="244" fg:w="2"/><text x="19.6922%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.5219%" y="629" width="0.0797%" height="15" fill="rgb(217,205,4)" fg:x="245" fg:w="1"/><text x="19.7719%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="19.5219%" y="613" width="0.0797%" height="15" fill="rgb(228,124,39)" fg:x="245" fg:w="1"/><text x="19.7719%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.5219%" y="597" width="0.0797%" height="15" fill="rgb(250,116,42)" fg:x="245" fg:w="1"/><text x="19.7719%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.5219%" y="581" width="0.0797%" height="15" fill="rgb(223,202,9)" fg:x="245" fg:w="1"/><text x="19.7719%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="19.5219%" y="565" width="0.0797%" height="15" fill="rgb(242,222,40)" fg:x="245" fg:w="1"/><text x="19.7719%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="19.5219%" y="549" width="0.0797%" height="15" fill="rgb(229,99,46)" fg:x="245" fg:w="1"/><text x="19.7719%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="19.5219%" y="533" width="0.0797%" height="15" fill="rgb(225,56,46)" fg:x="245" fg:w="1"/><text x="19.7719%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (154 samples, 12.27%)</title><rect x="7.4104%" y="741" width="12.2709%" height="15" fill="rgb(227,94,5)" fg:x="93" fg:w="154"/><text x="7.6604%" y="751.50">&lt;tests::HoldingKey..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (15 samples, 1.20%)</title><rect x="18.4861%" y="725" width="1.1952%" height="15" fill="rgb(205,112,38)" fg:x="232" fg:w="15"/><text x="18.7361%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.04%)</title><rect x="18.6454%" y="709" width="1.0359%" height="15" fill="rgb(231,133,46)" fg:x="234" fg:w="13"/><text x="18.8954%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.80%)</title><rect x="18.8845%" y="693" width="0.7968%" height="15" fill="rgb(217,16,9)" fg:x="237" fg:w="10"/><text x="19.1345%" y="703.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="19.6016%" y="677" width="0.0797%" height="15" fill="rgb(249,173,9)" fg:x="246" fg:w="1"/><text x="19.8516%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="19.6016%" y="661" width="0.0797%" height="15" fill="rgb(205,163,53)" fg:x="246" fg:w="1"/><text x="19.8516%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="19.6813%" y="741" width="0.0797%" height="15" fill="rgb(217,54,41)" fg:x="247" fg:w="1"/><text x="19.9313%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="19.6813%" y="725" width="0.0797%" height="15" fill="rgb(228,216,12)" fg:x="247" fg:w="1"/><text x="19.9313%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.9203%" y="693" width="0.0797%" height="15" fill="rgb(244,228,15)" fg:x="250" fg:w="1"/><text x="20.1703%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0000%" y="661" width="0.0797%" height="15" fill="rgb(221,176,53)" fg:x="251" fg:w="1"/><text x="20.2500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="20.0000%" y="693" width="0.1594%" height="15" fill="rgb(205,94,34)" fg:x="251" fg:w="2"/><text x="20.2500%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="20.0000%" y="677" width="0.1594%" height="15" fill="rgb(213,110,48)" fg:x="251" fg:w="2"/><text x="20.2500%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.0797%" y="661" width="0.0797%" height="15" fill="rgb(236,142,28)" fg:x="252" fg:w="1"/><text x="20.3297%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0797%" y="645" width="0.0797%" height="15" fill="rgb(225,135,29)" fg:x="252" fg:w="1"/><text x="20.3297%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (6 samples, 0.48%)</title><rect x="19.7610%" y="741" width="0.4781%" height="15" fill="rgb(252,45,31)" fg:x="248" fg:w="6"/><text x="20.0110%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="19.8406%" y="725" width="0.3984%" height="15" fill="rgb(211,187,50)" fg:x="249" fg:w="5"/><text x="20.0906%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="19.9203%" y="709" width="0.3187%" height="15" fill="rgb(229,109,7)" fg:x="250" fg:w="4"/><text x="20.1703%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;crossbeam_channel::waker::Entry&gt; (1 samples, 0.08%)</title><rect x="20.1594%" y="693" width="0.0797%" height="15" fill="rgb(251,131,51)" fg:x="253" fg:w="1"/><text x="20.4094%" y="703.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="20.2390%" y="725" width="0.0797%" height="15" fill="rgb(251,180,35)" fg:x="254" fg:w="1"/><text x="20.4890%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="20.2390%" y="709" width="0.0797%" height="15" fill="rgb(211,46,32)" fg:x="254" fg:w="1"/><text x="20.4890%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="20.2390%" y="693" width="0.0797%" height="15" fill="rgb(248,123,17)" fg:x="254" fg:w="1"/><text x="20.4890%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="20.2390%" y="677" width="0.0797%" height="15" fill="rgb(227,141,18)" fg:x="254" fg:w="1"/><text x="20.4890%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="20.2390%" y="661" width="0.0797%" height="15" fill="rgb(216,102,9)" fg:x="254" fg:w="1"/><text x="20.4890%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="20.2390%" y="645" width="0.0797%" height="15" fill="rgb(253,47,13)" fg:x="254" fg:w="1"/><text x="20.4890%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="20.2390%" y="629" width="0.0797%" height="15" fill="rgb(226,93,23)" fg:x="254" fg:w="1"/><text x="20.4890%" y="639.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="20.2390%" y="613" width="0.0797%" height="15" fill="rgb(247,104,17)" fg:x="254" fg:w="1"/><text x="20.4890%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="20.3187%" y="693" width="0.0797%" height="15" fill="rgb(233,203,26)" fg:x="255" fg:w="1"/><text x="20.5687%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.3187%" y="677" width="0.0797%" height="15" fill="rgb(244,98,49)" fg:x="255" fg:w="1"/><text x="20.5687%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.3187%" y="661" width="0.0797%" height="15" fill="rgb(235,134,22)" fg:x="255" fg:w="1"/><text x="20.5687%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.3187%" y="645" width="0.0797%" height="15" fill="rgb(221,70,32)" fg:x="255" fg:w="1"/><text x="20.5687%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="20.3984%" y="661" width="0.1594%" height="15" fill="rgb(238,15,50)" fg:x="256" fg:w="2"/><text x="20.6484%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="20.3984%" y="693" width="0.2390%" height="15" fill="rgb(215,221,48)" fg:x="256" fg:w="3"/><text x="20.6484%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="20.3984%" y="677" width="0.2390%" height="15" fill="rgb(236,73,3)" fg:x="256" fg:w="3"/><text x="20.6484%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5578%" y="661" width="0.0797%" height="15" fill="rgb(250,107,11)" fg:x="258" fg:w="1"/><text x="20.8078%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="20.7171%" y="613" width="0.0797%" height="15" fill="rgb(242,39,14)" fg:x="260" fg:w="1"/><text x="20.9671%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.7171%" y="597" width="0.0797%" height="15" fill="rgb(248,164,37)" fg:x="260" fg:w="1"/><text x="20.9671%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="20.7171%" y="629" width="0.1594%" height="15" fill="rgb(217,60,12)" fg:x="260" fg:w="2"/><text x="20.9671%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.7968%" y="613" width="0.0797%" height="15" fill="rgb(240,125,29)" fg:x="261" fg:w="1"/><text x="21.0468%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.7968%" y="597" width="0.0797%" height="15" fill="rgb(208,207,28)" fg:x="261" fg:w="1"/><text x="21.0468%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.7968%" y="581" width="0.0797%" height="15" fill="rgb(209,159,27)" fg:x="261" fg:w="1"/><text x="21.0468%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="20.8765%" y="613" width="0.1594%" height="15" fill="rgb(251,176,53)" fg:x="262" fg:w="2"/><text x="21.1265%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.8765%" y="597" width="0.1594%" height="15" fill="rgb(211,85,7)" fg:x="262" fg:w="2"/><text x="21.1265%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.9562%" y="581" width="0.0797%" height="15" fill="rgb(216,64,54)" fg:x="263" fg:w="1"/><text x="21.2062%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.9562%" y="565" width="0.0797%" height="15" fill="rgb(217,54,24)" fg:x="263" fg:w="1"/><text x="21.2062%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.9562%" y="549" width="0.0797%" height="15" fill="rgb(208,206,53)" fg:x="263" fg:w="1"/><text x="21.2062%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="21.1155%" y="597" width="0.3187%" height="15" fill="rgb(251,74,39)" fg:x="265" fg:w="4"/><text x="21.3655%" y="607.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="21.1155%" y="581" width="0.3187%" height="15" fill="rgb(226,47,5)" fg:x="265" fg:w="4"/><text x="21.3655%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="21.2749%" y="565" width="0.1594%" height="15" fill="rgb(234,111,33)" fg:x="267" fg:w="2"/><text x="21.5249%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="21.2749%" y="549" width="0.1594%" height="15" fill="rgb(251,14,10)" fg:x="267" fg:w="2"/><text x="21.5249%" y="559.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="21.4343%" y="581" width="0.0797%" height="15" fill="rgb(232,43,0)" fg:x="269" fg:w="1"/><text x="21.6843%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="21.5139%" y="581" width="0.1594%" height="15" fill="rgb(222,68,43)" fg:x="270" fg:w="2"/><text x="21.7639%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="21.5139%" y="565" width="0.1594%" height="15" fill="rgb(217,24,23)" fg:x="270" fg:w="2"/><text x="21.7639%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="21.5139%" y="549" width="0.1594%" height="15" fill="rgb(229,209,14)" fg:x="270" fg:w="2"/><text x="21.7639%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="21.5139%" y="533" width="0.1594%" height="15" fill="rgb(250,149,48)" fg:x="270" fg:w="2"/><text x="21.7639%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="21.5139%" y="517" width="0.1594%" height="15" fill="rgb(210,120,37)" fg:x="270" fg:w="2"/><text x="21.7639%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="21.5139%" y="501" width="0.1594%" height="15" fill="rgb(210,21,8)" fg:x="270" fg:w="2"/><text x="21.7639%" y="511.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="21.5139%" y="485" width="0.1594%" height="15" fill="rgb(243,145,7)" fg:x="270" fg:w="2"/><text x="21.7639%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="21.0359%" y="613" width="0.7171%" height="15" fill="rgb(238,178,32)" fg:x="264" fg:w="9"/><text x="21.2859%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="21.4343%" y="597" width="0.3187%" height="15" fill="rgb(222,4,10)" fg:x="269" fg:w="4"/><text x="21.6843%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="21.6733%" y="581" width="0.0797%" height="15" fill="rgb(239,7,37)" fg:x="272" fg:w="1"/><text x="21.9233%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.6733%" y="565" width="0.0797%" height="15" fill="rgb(215,31,37)" fg:x="272" fg:w="1"/><text x="21.9233%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.6733%" y="549" width="0.0797%" height="15" fill="rgb(224,83,33)" fg:x="272" fg:w="1"/><text x="21.9233%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.12%)</title><rect x="20.7171%" y="645" width="1.1155%" height="15" fill="rgb(239,55,3)" fg:x="260" fg:w="14"/><text x="20.9671%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.96%)</title><rect x="20.8765%" y="629" width="0.9562%" height="15" fill="rgb(247,92,11)" fg:x="262" fg:w="12"/><text x="21.1265%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.7530%" y="613" width="0.0797%" height="15" fill="rgb(239,200,7)" fg:x="273" fg:w="1"/><text x="22.0030%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.7530%" y="597" width="0.0797%" height="15" fill="rgb(227,115,8)" fg:x="273" fg:w="1"/><text x="22.0030%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.7530%" y="581" width="0.0797%" height="15" fill="rgb(215,189,27)" fg:x="273" fg:w="1"/><text x="22.0030%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8327%" y="581" width="0.0797%" height="15" fill="rgb(251,216,39)" fg:x="274" fg:w="1"/><text x="22.0827%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.9124%" y="581" width="0.0797%" height="15" fill="rgb(207,29,47)" fg:x="275" fg:w="1"/><text x="22.1624%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="21.8327%" y="645" width="0.3187%" height="15" fill="rgb(210,71,34)" fg:x="274" fg:w="4"/><text x="22.0827%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="21.8327%" y="629" width="0.3187%" height="15" fill="rgb(253,217,51)" fg:x="274" fg:w="4"/><text x="22.0827%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="21.8327%" y="613" width="0.3187%" height="15" fill="rgb(222,117,46)" fg:x="274" fg:w="4"/><text x="22.0827%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="21.8327%" y="597" width="0.3187%" height="15" fill="rgb(226,132,6)" fg:x="274" fg:w="4"/><text x="22.0827%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="21.9920%" y="581" width="0.1594%" height="15" fill="rgb(254,145,51)" fg:x="276" fg:w="2"/><text x="22.2420%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0717%" y="565" width="0.0797%" height="15" fill="rgb(231,199,27)" fg:x="277" fg:w="1"/><text x="22.3217%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.1514%" y="581" width="0.0797%" height="15" fill="rgb(245,158,14)" fg:x="278" fg:w="1"/><text x="22.4014%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="22.2311%" y="565" width="0.1594%" height="15" fill="rgb(240,113,14)" fg:x="279" fg:w="2"/><text x="22.4811%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.3108%" y="549" width="0.0797%" height="15" fill="rgb(210,20,13)" fg:x="280" fg:w="1"/><text x="22.5608%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.3904%" y="549" width="0.0797%" height="15" fill="rgb(241,144,13)" fg:x="281" fg:w="1"/><text x="22.6404%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.4701%" y="549" width="0.0797%" height="15" fill="rgb(235,43,34)" fg:x="282" fg:w="1"/><text x="22.7201%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="22.5498%" y="549" width="0.0797%" height="15" fill="rgb(208,36,20)" fg:x="283" fg:w="1"/><text x="22.7998%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="22.5498%" y="533" width="0.0797%" height="15" fill="rgb(239,204,10)" fg:x="283" fg:w="1"/><text x="22.7998%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.5498%" y="517" width="0.0797%" height="15" fill="rgb(217,84,43)" fg:x="283" fg:w="1"/><text x="22.7998%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.6295%" y="533" width="0.0797%" height="15" fill="rgb(241,170,50)" fg:x="284" fg:w="1"/><text x="22.8795%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="22.1514%" y="613" width="0.6375%" height="15" fill="rgb(226,205,29)" fg:x="278" fg:w="8"/><text x="22.4014%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.64%)</title><rect x="22.1514%" y="597" width="0.6375%" height="15" fill="rgb(233,113,1)" fg:x="278" fg:w="8"/><text x="22.4014%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="22.2311%" y="581" width="0.5578%" height="15" fill="rgb(253,98,13)" fg:x="279" fg:w="7"/><text x="22.4811%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="22.3904%" y="565" width="0.3984%" height="15" fill="rgb(211,115,12)" fg:x="281" fg:w="5"/><text x="22.6404%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="22.6295%" y="549" width="0.1594%" height="15" fill="rgb(208,12,16)" fg:x="284" fg:w="2"/><text x="22.8795%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="22.7092%" y="533" width="0.0797%" height="15" fill="rgb(237,193,54)" fg:x="285" fg:w="1"/><text x="22.9592%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.7092%" y="517" width="0.0797%" height="15" fill="rgb(243,22,42)" fg:x="285" fg:w="1"/><text x="22.9592%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (11 samples, 0.88%)</title><rect x="22.1514%" y="629" width="0.8765%" height="15" fill="rgb(233,151,36)" fg:x="278" fg:w="11"/><text x="22.4014%" y="639.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="22.7888%" y="613" width="0.2390%" height="15" fill="rgb(237,57,45)" fg:x="286" fg:w="3"/><text x="23.0388%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="22.8685%" y="597" width="0.1594%" height="15" fill="rgb(221,88,17)" fg:x="287" fg:w="2"/><text x="23.1185%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="22.8685%" y="581" width="0.1594%" height="15" fill="rgb(230,79,15)" fg:x="287" fg:w="2"/><text x="23.1185%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.9482%" y="565" width="0.0797%" height="15" fill="rgb(213,57,13)" fg:x="288" fg:w="1"/><text x="23.1982%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.1076%" y="597" width="0.1594%" height="15" fill="rgb(222,116,39)" fg:x="290" fg:w="2"/><text x="23.3576%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="23.2669%" y="597" width="0.0797%" height="15" fill="rgb(245,107,2)" fg:x="292" fg:w="1"/><text x="23.5169%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.2669%" y="581" width="0.0797%" height="15" fill="rgb(238,1,10)" fg:x="292" fg:w="1"/><text x="23.5169%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.2669%" y="565" width="0.0797%" height="15" fill="rgb(249,4,48)" fg:x="292" fg:w="1"/><text x="23.5169%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.6653%" y="549" width="0.0797%" height="15" fill="rgb(223,151,18)" fg:x="297" fg:w="1"/><text x="23.9153%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="23.7450%" y="549" width="0.1594%" height="15" fill="rgb(227,65,43)" fg:x="298" fg:w="2"/><text x="23.9950%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="23.7450%" y="533" width="0.1594%" height="15" fill="rgb(218,40,45)" fg:x="298" fg:w="2"/><text x="23.9950%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="23.8247%" y="517" width="0.0797%" height="15" fill="rgb(252,121,31)" fg:x="299" fg:w="1"/><text x="24.0747%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.9841%" y="517" width="0.1594%" height="15" fill="rgb(219,158,43)" fg:x="301" fg:w="2"/><text x="24.2341%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="24.0637%" y="501" width="0.0797%" height="15" fill="rgb(231,162,42)" fg:x="302" fg:w="1"/><text x="24.3137%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="24.1434%" y="485" width="0.2390%" height="15" fill="rgb(217,179,25)" fg:x="303" fg:w="3"/><text x="24.3934%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.2231%" y="469" width="0.1594%" height="15" fill="rgb(206,212,31)" fg:x="304" fg:w="2"/><text x="24.4731%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (12 samples, 0.96%)</title><rect x="23.5857%" y="581" width="0.9562%" height="15" fill="rgb(235,144,12)" fg:x="296" fg:w="12"/><text x="23.8357%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.96%)</title><rect x="23.5857%" y="565" width="0.9562%" height="15" fill="rgb(213,51,10)" fg:x="296" fg:w="12"/><text x="23.8357%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="23.9044%" y="549" width="0.6375%" height="15" fill="rgb(231,145,14)" fg:x="300" fg:w="8"/><text x="24.1544%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.56%)</title><rect x="23.9841%" y="533" width="0.5578%" height="15" fill="rgb(235,15,28)" fg:x="301" fg:w="7"/><text x="24.2341%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="24.1434%" y="517" width="0.3984%" height="15" fill="rgb(237,206,10)" fg:x="303" fg:w="5"/><text x="24.3934%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="24.1434%" y="501" width="0.3984%" height="15" fill="rgb(236,227,27)" fg:x="303" fg:w="5"/><text x="24.3934%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.3825%" y="485" width="0.1594%" height="15" fill="rgb(246,83,35)" fg:x="306" fg:w="2"/><text x="24.6325%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (21 samples, 1.67%)</title><rect x="23.0279%" y="629" width="1.6733%" height="15" fill="rgb(220,136,24)" fg:x="289" fg:w="21"/><text x="23.2779%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (21 samples, 1.67%)</title><rect x="23.0279%" y="613" width="1.6733%" height="15" fill="rgb(217,3,25)" fg:x="289" fg:w="21"/><text x="23.2779%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (17 samples, 1.35%)</title><rect x="23.3466%" y="597" width="1.3546%" height="15" fill="rgb(239,24,14)" fg:x="293" fg:w="17"/><text x="23.5966%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="24.5418%" y="581" width="0.1594%" height="15" fill="rgb(244,16,53)" fg:x="308" fg:w="2"/><text x="24.7918%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.0199%" y="437" width="0.0797%" height="15" fill="rgb(208,175,44)" fg:x="314" fg:w="1"/><text x="25.2699%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="24.8606%" y="485" width="0.3187%" height="15" fill="rgb(252,18,48)" fg:x="312" fg:w="4"/><text x="25.1106%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="24.9402%" y="469" width="0.2390%" height="15" fill="rgb(234,199,32)" fg:x="313" fg:w="3"/><text x="25.1902%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="25.0199%" y="453" width="0.1594%" height="15" fill="rgb(225,77,54)" fg:x="314" fg:w="2"/><text x="25.2699%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0996%" y="437" width="0.0797%" height="15" fill="rgb(225,42,25)" fg:x="315" fg:w="1"/><text x="25.3496%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2590%" y="437" width="0.0797%" height="15" fill="rgb(242,227,46)" fg:x="317" fg:w="1"/><text x="25.5090%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.2590%" y="421" width="0.0797%" height="15" fill="rgb(246,197,35)" fg:x="317" fg:w="1"/><text x="25.5090%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="25.2590%" y="453" width="0.1594%" height="15" fill="rgb(215,159,26)" fg:x="317" fg:w="2"/><text x="25.5090%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.3386%" y="437" width="0.0797%" height="15" fill="rgb(212,194,50)" fg:x="318" fg:w="1"/><text x="25.5886%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.3386%" y="421" width="0.0797%" height="15" fill="rgb(246,132,1)" fg:x="318" fg:w="1"/><text x="25.5886%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="25.1793%" y="469" width="0.3984%" height="15" fill="rgb(217,71,7)" fg:x="316" fg:w="5"/><text x="25.4293%" y="479.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="25.4183%" y="453" width="0.1594%" height="15" fill="rgb(252,59,32)" fg:x="319" fg:w="2"/><text x="25.6683%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.5777%" y="469" width="0.0797%" height="15" fill="rgb(253,204,25)" fg:x="321" fg:w="1"/><text x="25.8277%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.5777%" y="453" width="0.0797%" height="15" fill="rgb(232,21,16)" fg:x="321" fg:w="1"/><text x="25.8277%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="25.1793%" y="485" width="0.5578%" height="15" fill="rgb(248,90,29)" fg:x="316" fg:w="7"/><text x="25.4293%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6574%" y="469" width="0.0797%" height="15" fill="rgb(249,223,7)" fg:x="322" fg:w="1"/><text x="25.9074%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.6574%" y="453" width="0.0797%" height="15" fill="rgb(231,119,42)" fg:x="322" fg:w="1"/><text x="25.9074%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.96%)</title><rect x="24.8606%" y="501" width="0.9562%" height="15" fill="rgb(215,41,35)" fg:x="312" fg:w="12"/><text x="25.1106%" y="511.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="25.7371%" y="485" width="0.0797%" height="15" fill="rgb(220,44,45)" fg:x="323" fg:w="1"/><text x="25.9871%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (14 samples, 1.12%)</title><rect x="24.7809%" y="533" width="1.1155%" height="15" fill="rgb(253,197,36)" fg:x="311" fg:w="14"/><text x="25.0309%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.04%)</title><rect x="24.8606%" y="517" width="1.0359%" height="15" fill="rgb(245,225,54)" fg:x="312" fg:w="13"/><text x="25.1106%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.8167%" y="501" width="0.0797%" height="15" fill="rgb(239,94,37)" fg:x="324" fg:w="1"/><text x="26.0667%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8167%" y="485" width="0.0797%" height="15" fill="rgb(242,217,10)" fg:x="324" fg:w="1"/><text x="26.0667%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="25.9761%" y="517" width="0.0797%" height="15" fill="rgb(250,193,7)" fg:x="326" fg:w="1"/><text x="26.2261%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="25.8964%" y="533" width="0.2390%" height="15" fill="rgb(230,104,19)" fg:x="325" fg:w="3"/><text x="26.1464%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.0558%" y="517" width="0.0797%" height="15" fill="rgb(230,181,4)" fg:x="327" fg:w="1"/><text x="26.3058%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 1.51%)</title><rect x="24.7012%" y="565" width="1.5139%" height="15" fill="rgb(216,219,49)" fg:x="310" fg:w="19"/><text x="24.9512%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 1.51%)</title><rect x="24.7012%" y="549" width="1.5139%" height="15" fill="rgb(254,144,0)" fg:x="310" fg:w="19"/><text x="24.9512%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.1355%" y="533" width="0.0797%" height="15" fill="rgb(205,209,38)" fg:x="328" fg:w="1"/><text x="26.3855%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.1355%" y="517" width="0.0797%" height="15" fill="rgb(240,21,42)" fg:x="328" fg:w="1"/><text x="26.3855%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="26.2151%" y="565" width="0.2390%" height="15" fill="rgb(241,132,3)" fg:x="329" fg:w="3"/><text x="26.4651%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.2948%" y="549" width="0.1594%" height="15" fill="rgb(225,14,2)" fg:x="330" fg:w="2"/><text x="26.5448%" y="559.50"></text></g><g><title>engine::session::state::State::close (78 samples, 6.22%)</title><rect x="20.3187%" y="725" width="6.2151%" height="15" fill="rgb(210,141,35)" fg:x="255" fg:w="78"/><text x="20.5687%" y="735.50">engine::..</text></g><g><title>engine::session::state::State::flush_entities (78 samples, 6.22%)</title><rect x="20.3187%" y="709" width="6.2151%" height="15" fill="rgb(251,14,44)" fg:x="255" fg:w="78"/><text x="20.5687%" y="719.50">engine::..</text></g><g><title>core::iter::adapters::try_process (74 samples, 5.90%)</title><rect x="20.6375%" y="693" width="5.8964%" height="15" fill="rgb(247,48,18)" fg:x="259" fg:w="74"/><text x="20.8875%" y="703.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (74 samples, 5.90%)</title><rect x="20.6375%" y="677" width="5.8964%" height="15" fill="rgb(225,0,40)" fg:x="259" fg:w="74"/><text x="20.8875%" y="687.50">&lt;alloc:..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (73 samples, 5.82%)</title><rect x="20.7171%" y="661" width="5.8167%" height="15" fill="rgb(221,31,33)" fg:x="260" fg:w="73"/><text x="20.9671%" y="671.50">engine:..</text></g><g><title>kernel::model::any_entity_changes (55 samples, 4.38%)</title><rect x="22.1514%" y="645" width="4.3825%" height="15" fill="rgb(237,42,40)" fg:x="278" fg:w="55"/><text x="22.4014%" y="655.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (23 samples, 1.83%)</title><rect x="24.7012%" y="629" width="1.8327%" height="15" fill="rgb(233,51,29)" fg:x="310" fg:w="23"/><text x="24.9512%" y="639.50">s..</text></g><g><title>serde_json::de::from_trait (23 samples, 1.83%)</title><rect x="24.7012%" y="613" width="1.8327%" height="15" fill="rgb(226,58,20)" fg:x="310" fg:w="23"/><text x="24.9512%" y="623.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (23 samples, 1.83%)</title><rect x="24.7012%" y="597" width="1.8327%" height="15" fill="rgb(208,98,7)" fg:x="310" fg:w="23"/><text x="24.9512%" y="607.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (23 samples, 1.83%)</title><rect x="24.7012%" y="581" width="1.8327%" height="15" fill="rgb(228,143,44)" fg:x="310" fg:w="23"/><text x="24.9512%" y="591.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.4542%" y="565" width="0.0797%" height="15" fill="rgb(246,55,38)" fg:x="332" fg:w="1"/><text x="26.7042%" y="575.50"></text></g><g><title>engine::session::Session::close (81 samples, 6.45%)</title><rect x="20.2390%" y="741" width="6.4542%" height="15" fill="rgb(247,87,16)" fg:x="254" fg:w="81"/><text x="20.4890%" y="751.50">engine::..</text></g><g><title>std::time::Instant::elapsed (2 samples, 0.16%)</title><rect x="26.5339%" y="725" width="0.1594%" height="15" fill="rgb(234,129,42)" fg:x="333" fg:w="2"/><text x="26.7839%" y="735.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.16%)</title><rect x="26.5339%" y="709" width="0.1594%" height="15" fill="rgb(220,82,16)" fg:x="333" fg:w="2"/><text x="26.7839%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.16%)</title><rect x="26.5339%" y="693" width="0.1594%" height="15" fill="rgb(211,88,4)" fg:x="333" fg:w="2"/><text x="26.7839%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="26.5339%" y="677" width="0.1594%" height="15" fill="rgb(248,151,21)" fg:x="333" fg:w="2"/><text x="26.7839%" y="687.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="26.5339%" y="661" width="0.1594%" height="15" fill="rgb(238,163,6)" fg:x="333" fg:w="2"/><text x="26.7839%" y="671.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="26.7729%" y="677" width="0.0797%" height="15" fill="rgb(209,183,11)" fg:x="336" fg:w="1"/><text x="27.0229%" y="687.50"></text></g><g><title>&lt;(A,B,C) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (1 samples, 0.08%)</title><rect x="26.7729%" y="661" width="0.0797%" height="15" fill="rgb(219,37,20)" fg:x="336" fg:w="1"/><text x="27.0229%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="26.7729%" y="645" width="0.0797%" height="15" fill="rgb(210,158,4)" fg:x="336" fg:w="1"/><text x="27.0229%" y="655.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (3 samples, 0.24%)</title><rect x="26.6932%" y="709" width="0.2390%" height="15" fill="rgb(221,167,53)" fg:x="335" fg:w="3"/><text x="26.9432%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="26.6932%" y="693" width="0.2390%" height="15" fill="rgb(237,151,45)" fg:x="335" fg:w="3"/><text x="26.9432%" y="703.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="26.8526%" y="677" width="0.0797%" height="15" fill="rgb(231,39,3)" fg:x="337" fg:w="1"/><text x="27.1026%" y="687.50"></text></g><g><title>&lt;plugins_rune::parser::RegisterActionParser as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="26.8526%" y="661" width="0.0797%" height="15" fill="rgb(212,167,28)" fg:x="337" fg:w="1"/><text x="27.1026%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1 samples, 0.08%)</title><rect x="26.8526%" y="645" width="0.0797%" height="15" fill="rgb(232,178,8)" fg:x="337" fg:w="1"/><text x="27.1026%" y="655.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="27.0120%" y="597" width="0.0797%" height="15" fill="rgb(225,151,20)" fg:x="339" fg:w="1"/><text x="27.2620%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="27.0120%" y="581" width="0.0797%" height="15" fill="rgb(238,3,37)" fg:x="339" fg:w="1"/><text x="27.2620%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="27.0120%" y="565" width="0.0797%" height="15" fill="rgb(251,147,42)" fg:x="339" fg:w="1"/><text x="27.2620%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="27.0120%" y="549" width="0.0797%" height="15" fill="rgb(208,173,10)" fg:x="339" fg:w="1"/><text x="27.2620%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="27.0120%" y="533" width="0.0797%" height="15" fill="rgb(246,225,4)" fg:x="339" fg:w="1"/><text x="27.2620%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="27.0120%" y="517" width="0.0797%" height="15" fill="rgb(248,102,6)" fg:x="339" fg:w="1"/><text x="27.2620%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="27.0120%" y="501" width="0.0797%" height="15" fill="rgb(232,6,21)" fg:x="339" fg:w="1"/><text x="27.2620%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="27.0120%" y="485" width="0.0797%" height="15" fill="rgb(221,179,22)" fg:x="339" fg:w="1"/><text x="27.2620%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.0120%" y="469" width="0.0797%" height="15" fill="rgb(252,50,20)" fg:x="339" fg:w="1"/><text x="27.2620%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.0120%" y="453" width="0.0797%" height="15" fill="rgb(222,56,38)" fg:x="339" fg:w="1"/><text x="27.2620%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="27.0120%" y="437" width="0.0797%" height="15" fill="rgb(206,193,29)" fg:x="339" fg:w="1"/><text x="27.2620%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="27.0120%" y="421" width="0.0797%" height="15" fill="rgb(239,192,45)" fg:x="339" fg:w="1"/><text x="27.2620%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="27.0120%" y="405" width="0.0797%" height="15" fill="rgb(254,18,36)" fg:x="339" fg:w="1"/><text x="27.2620%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="27.0120%" y="389" width="0.0797%" height="15" fill="rgb(221,127,11)" fg:x="339" fg:w="1"/><text x="27.2620%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="27.0120%" y="373" width="0.0797%" height="15" fill="rgb(234,146,35)" fg:x="339" fg:w="1"/><text x="27.2620%" y="383.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="27.0120%" y="693" width="0.1594%" height="15" fill="rgb(254,201,37)" fg:x="339" fg:w="2"/><text x="27.2620%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="27.0120%" y="677" width="0.1594%" height="15" fill="rgb(211,202,23)" fg:x="339" fg:w="2"/><text x="27.2620%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="27.0120%" y="661" width="0.1594%" height="15" fill="rgb(237,91,2)" fg:x="339" fg:w="2"/><text x="27.2620%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="27.0120%" y="645" width="0.1594%" height="15" fill="rgb(226,228,36)" fg:x="339" fg:w="2"/><text x="27.2620%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="27.0120%" y="629" width="0.1594%" height="15" fill="rgb(213,63,50)" fg:x="339" fg:w="2"/><text x="27.2620%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="27.0120%" y="613" width="0.1594%" height="15" fill="rgb(235,194,19)" fg:x="339" fg:w="2"/><text x="27.2620%" y="623.50"></text></g><g><title>core::fmt::builders::debug_struct_new (1 samples, 0.08%)</title><rect x="27.0916%" y="597" width="0.0797%" height="15" fill="rgb(207,204,18)" fg:x="340" fg:w="1"/><text x="27.3416%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="27.0916%" y="581" width="0.0797%" height="15" fill="rgb(248,8,7)" fg:x="340" fg:w="1"/><text x="27.3416%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.0916%" y="565" width="0.0797%" height="15" fill="rgb(223,145,47)" fg:x="340" fg:w="1"/><text x="27.3416%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.0916%" y="549" width="0.0797%" height="15" fill="rgb(228,84,11)" fg:x="340" fg:w="1"/><text x="27.3416%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="27.0916%" y="533" width="0.0797%" height="15" fill="rgb(218,76,45)" fg:x="340" fg:w="1"/><text x="27.3416%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="27.0916%" y="517" width="0.0797%" height="15" fill="rgb(223,80,15)" fg:x="340" fg:w="1"/><text x="27.3416%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="27.0916%" y="501" width="0.0797%" height="15" fill="rgb(219,218,33)" fg:x="340" fg:w="1"/><text x="27.3416%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="27.0916%" y="485" width="0.0797%" height="15" fill="rgb(208,51,11)" fg:x="340" fg:w="1"/><text x="27.3416%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="27.0916%" y="469" width="0.0797%" height="15" fill="rgb(229,165,39)" fg:x="340" fg:w="1"/><text x="27.3416%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="27.0916%" y="453" width="0.0797%" height="15" fill="rgb(241,100,24)" fg:x="340" fg:w="1"/><text x="27.3416%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.0916%" y="437" width="0.0797%" height="15" fill="rgb(228,14,23)" fg:x="340" fg:w="1"/><text x="27.3416%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="27.0916%" y="421" width="0.0797%" height="15" fill="rgb(247,116,52)" fg:x="340" fg:w="1"/><text x="27.3416%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.08%)</title><rect x="27.0916%" y="405" width="0.0797%" height="15" fill="rgb(216,149,33)" fg:x="340" fg:w="1"/><text x="27.3416%" y="415.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="27.1713%" y="693" width="0.0797%" height="15" fill="rgb(238,142,29)" fg:x="341" fg:w="1"/><text x="27.4213%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1713%" y="677" width="0.0797%" height="15" fill="rgb(224,83,40)" fg:x="341" fg:w="1"/><text x="27.4213%" y="687.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.08%)</title><rect x="27.3307%" y="677" width="0.0797%" height="15" fill="rgb(234,165,11)" fg:x="343" fg:w="1"/><text x="27.5807%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="27.3307%" y="661" width="0.0797%" height="15" fill="rgb(215,96,23)" fg:x="343" fg:w="1"/><text x="27.5807%" y="671.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="27.3307%" y="645" width="0.0797%" height="15" fill="rgb(233,179,26)" fg:x="343" fg:w="1"/><text x="27.5807%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (3 samples, 0.24%)</title><rect x="27.4104%" y="677" width="0.2390%" height="15" fill="rgb(225,129,33)" fg:x="344" fg:w="3"/><text x="27.6604%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (3 samples, 0.24%)</title><rect x="27.4104%" y="661" width="0.2390%" height="15" fill="rgb(237,49,13)" fg:x="344" fg:w="3"/><text x="27.6604%" y="671.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (3 samples, 0.24%)</title><rect x="27.4104%" y="645" width="0.2390%" height="15" fill="rgb(211,3,31)" fg:x="344" fg:w="3"/><text x="27.6604%" y="655.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="27.4900%" y="629" width="0.1594%" height="15" fill="rgb(216,152,19)" fg:x="345" fg:w="2"/><text x="27.7400%" y="639.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (1 samples, 0.08%)</title><rect x="27.5697%" y="613" width="0.0797%" height="15" fill="rgb(251,121,35)" fg:x="346" fg:w="1"/><text x="27.8197%" y="623.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (1 samples, 0.08%)</title><rect x="27.5697%" y="597" width="0.0797%" height="15" fill="rgb(210,217,47)" fg:x="346" fg:w="1"/><text x="27.8197%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="27.8884%" y="565" width="0.0797%" height="15" fill="rgb(244,116,22)" fg:x="350" fg:w="1"/><text x="28.1384%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.8884%" y="549" width="0.0797%" height="15" fill="rgb(228,17,21)" fg:x="350" fg:w="1"/><text x="28.1384%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.8884%" y="533" width="0.0797%" height="15" fill="rgb(240,149,34)" fg:x="350" fg:w="1"/><text x="28.1384%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.8884%" y="517" width="0.0797%" height="15" fill="rgb(208,125,47)" fg:x="350" fg:w="1"/><text x="28.1384%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.8884%" y="501" width="0.0797%" height="15" fill="rgb(249,186,39)" fg:x="350" fg:w="1"/><text x="28.1384%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.8884%" y="485" width="0.0797%" height="15" fill="rgb(240,220,33)" fg:x="350" fg:w="1"/><text x="28.1384%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="27.9681%" y="517" width="0.1594%" height="15" fill="rgb(243,110,23)" fg:x="351" fg:w="2"/><text x="28.2181%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.1275%" y="501" width="0.1594%" height="15" fill="rgb(219,163,46)" fg:x="353" fg:w="2"/><text x="28.3775%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.1275%" y="485" width="0.1594%" height="15" fill="rgb(216,126,30)" fg:x="353" fg:w="2"/><text x="28.3775%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.2072%" y="469" width="0.0797%" height="15" fill="rgb(208,139,11)" fg:x="354" fg:w="1"/><text x="28.4572%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.2072%" y="453" width="0.0797%" height="15" fill="rgb(213,118,36)" fg:x="354" fg:w="1"/><text x="28.4572%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.2072%" y="437" width="0.0797%" height="15" fill="rgb(226,43,17)" fg:x="354" fg:w="1"/><text x="28.4572%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="28.2072%" y="421" width="0.0797%" height="15" fill="rgb(254,217,4)" fg:x="354" fg:w="1"/><text x="28.4572%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="28.2072%" y="405" width="0.0797%" height="15" fill="rgb(210,134,47)" fg:x="354" fg:w="1"/><text x="28.4572%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="28.2072%" y="389" width="0.0797%" height="15" fill="rgb(237,24,49)" fg:x="354" fg:w="1"/><text x="28.4572%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.2072%" y="373" width="0.0797%" height="15" fill="rgb(251,39,46)" fg:x="354" fg:w="1"/><text x="28.4572%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="28.2072%" y="357" width="0.0797%" height="15" fill="rgb(251,220,3)" fg:x="354" fg:w="1"/><text x="28.4572%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="28.2072%" y="341" width="0.0797%" height="15" fill="rgb(228,105,12)" fg:x="354" fg:w="1"/><text x="28.4572%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="28.2072%" y="325" width="0.0797%" height="15" fill="rgb(215,196,1)" fg:x="354" fg:w="1"/><text x="28.4572%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="28.2072%" y="309" width="0.0797%" height="15" fill="rgb(214,33,39)" fg:x="354" fg:w="1"/><text x="28.4572%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="28.2072%" y="293" width="0.0797%" height="15" fill="rgb(220,19,52)" fg:x="354" fg:w="1"/><text x="28.4572%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2072%" y="277" width="0.0797%" height="15" fill="rgb(221,78,38)" fg:x="354" fg:w="1"/><text x="28.4572%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="28.2869%" y="501" width="0.0797%" height="15" fill="rgb(253,30,16)" fg:x="355" fg:w="1"/><text x="28.5369%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="28.2869%" y="485" width="0.0797%" height="15" fill="rgb(242,65,0)" fg:x="355" fg:w="1"/><text x="28.5369%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.2869%" y="469" width="0.0797%" height="15" fill="rgb(235,201,12)" fg:x="355" fg:w="1"/><text x="28.5369%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="28.2869%" y="453" width="0.0797%" height="15" fill="rgb(233,161,9)" fg:x="355" fg:w="1"/><text x="28.5369%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.2869%" y="437" width="0.0797%" height="15" fill="rgb(241,207,41)" fg:x="355" fg:w="1"/><text x="28.5369%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.2869%" y="421" width="0.0797%" height="15" fill="rgb(212,69,46)" fg:x="355" fg:w="1"/><text x="28.5369%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="28.4462%" y="405" width="0.1594%" height="15" fill="rgb(239,69,45)" fg:x="357" fg:w="2"/><text x="28.6962%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="28.4462%" y="389" width="0.1594%" height="15" fill="rgb(242,117,48)" fg:x="357" fg:w="2"/><text x="28.6962%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="28.4462%" y="373" width="0.1594%" height="15" fill="rgb(228,41,36)" fg:x="357" fg:w="2"/><text x="28.6962%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="28.4462%" y="357" width="0.1594%" height="15" fill="rgb(212,3,32)" fg:x="357" fg:w="2"/><text x="28.6962%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="28.4462%" y="341" width="0.1594%" height="15" fill="rgb(233,41,49)" fg:x="357" fg:w="2"/><text x="28.6962%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="28.4462%" y="325" width="0.1594%" height="15" fill="rgb(252,170,49)" fg:x="357" fg:w="2"/><text x="28.6962%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.5259%" y="309" width="0.0797%" height="15" fill="rgb(229,53,26)" fg:x="358" fg:w="1"/><text x="28.7759%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.5259%" y="293" width="0.0797%" height="15" fill="rgb(217,157,12)" fg:x="358" fg:w="1"/><text x="28.7759%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="28.5259%" y="277" width="0.0797%" height="15" fill="rgb(227,17,9)" fg:x="358" fg:w="1"/><text x="28.7759%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.5259%" y="261" width="0.0797%" height="15" fill="rgb(218,84,12)" fg:x="358" fg:w="1"/><text x="28.7759%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="28.5259%" y="245" width="0.0797%" height="15" fill="rgb(212,79,24)" fg:x="358" fg:w="1"/><text x="28.7759%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="28.5259%" y="229" width="0.0797%" height="15" fill="rgb(217,222,37)" fg:x="358" fg:w="1"/><text x="28.7759%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="28.6056%" y="405" width="0.2390%" height="15" fill="rgb(246,208,8)" fg:x="359" fg:w="3"/><text x="28.8556%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="28.6853%" y="389" width="0.1594%" height="15" fill="rgb(244,133,10)" fg:x="360" fg:w="2"/><text x="28.9353%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="28.6853%" y="373" width="0.1594%" height="15" fill="rgb(209,219,41)" fg:x="360" fg:w="2"/><text x="28.9353%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="28.6853%" y="357" width="0.1594%" height="15" fill="rgb(253,175,45)" fg:x="360" fg:w="2"/><text x="28.9353%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="28.6853%" y="341" width="0.1594%" height="15" fill="rgb(235,100,37)" fg:x="360" fg:w="2"/><text x="28.9353%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.7649%" y="325" width="0.0797%" height="15" fill="rgb(225,87,19)" fg:x="361" fg:w="1"/><text x="29.0149%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="28.8446%" y="373" width="0.0797%" height="15" fill="rgb(217,152,17)" fg:x="362" fg:w="1"/><text x="29.0946%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (12 samples, 0.96%)</title><rect x="28.3665%" y="501" width="0.9562%" height="15" fill="rgb(235,72,13)" fg:x="356" fg:w="12"/><text x="28.6165%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (12 samples, 0.96%)</title><rect x="28.3665%" y="485" width="0.9562%" height="15" fill="rgb(233,140,18)" fg:x="356" fg:w="12"/><text x="28.6165%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (12 samples, 0.96%)</title><rect x="28.3665%" y="469" width="0.9562%" height="15" fill="rgb(207,212,28)" fg:x="356" fg:w="12"/><text x="28.6165%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (11 samples, 0.88%)</title><rect x="28.4462%" y="453" width="0.8765%" height="15" fill="rgb(220,130,25)" fg:x="357" fg:w="11"/><text x="28.6962%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (11 samples, 0.88%)</title><rect x="28.4462%" y="437" width="0.8765%" height="15" fill="rgb(205,55,34)" fg:x="357" fg:w="11"/><text x="28.6962%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (11 samples, 0.88%)</title><rect x="28.4462%" y="421" width="0.8765%" height="15" fill="rgb(237,54,35)" fg:x="357" fg:w="11"/><text x="28.6962%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="28.8446%" y="405" width="0.4781%" height="15" fill="rgb(208,67,23)" fg:x="362" fg:w="6"/><text x="29.0946%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="28.8446%" y="389" width="0.4781%" height="15" fill="rgb(206,207,50)" fg:x="362" fg:w="6"/><text x="29.0946%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.40%)</title><rect x="28.9243%" y="373" width="0.3984%" height="15" fill="rgb(213,211,42)" fg:x="363" fg:w="5"/><text x="29.1743%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.32%)</title><rect x="29.0040%" y="357" width="0.3187%" height="15" fill="rgb(252,197,50)" fg:x="364" fg:w="4"/><text x="29.2540%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (4 samples, 0.32%)</title><rect x="29.0040%" y="341" width="0.3187%" height="15" fill="rgb(251,211,41)" fg:x="364" fg:w="4"/><text x="29.2540%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.0837%" y="325" width="0.2390%" height="15" fill="rgb(229,211,5)" fg:x="365" fg:w="3"/><text x="29.3337%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="29.0837%" y="309" width="0.2390%" height="15" fill="rgb(239,36,31)" fg:x="365" fg:w="3"/><text x="29.3337%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="29.1633%" y="293" width="0.1594%" height="15" fill="rgb(248,67,31)" fg:x="366" fg:w="2"/><text x="29.4133%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="29.3227%" y="405" width="0.0797%" height="15" fill="rgb(249,55,44)" fg:x="368" fg:w="1"/><text x="29.5727%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="29.3227%" y="389" width="0.0797%" height="15" fill="rgb(216,82,12)" fg:x="368" fg:w="1"/><text x="29.5727%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.3227%" y="373" width="0.0797%" height="15" fill="rgb(242,174,1)" fg:x="368" fg:w="1"/><text x="29.5727%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.3227%" y="357" width="0.0797%" height="15" fill="rgb(208,120,29)" fg:x="368" fg:w="1"/><text x="29.5727%" y="367.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (19 samples, 1.51%)</title><rect x="27.9681%" y="565" width="1.5139%" height="15" fill="rgb(221,105,43)" fg:x="351" fg:w="19"/><text x="28.2181%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (19 samples, 1.51%)</title><rect x="27.9681%" y="549" width="1.5139%" height="15" fill="rgb(234,124,22)" fg:x="351" fg:w="19"/><text x="28.2181%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (19 samples, 1.51%)</title><rect x="27.9681%" y="533" width="1.5139%" height="15" fill="rgb(212,23,30)" fg:x="351" fg:w="19"/><text x="28.2181%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (17 samples, 1.35%)</title><rect x="28.1275%" y="517" width="1.3546%" height="15" fill="rgb(219,122,53)" fg:x="353" fg:w="17"/><text x="28.3775%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="29.3227%" y="501" width="0.1594%" height="15" fill="rgb(248,84,24)" fg:x="368" fg:w="2"/><text x="29.5727%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="29.3227%" y="485" width="0.1594%" height="15" fill="rgb(245,115,18)" fg:x="368" fg:w="2"/><text x="29.5727%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="29.3227%" y="469" width="0.1594%" height="15" fill="rgb(227,176,51)" fg:x="368" fg:w="2"/><text x="29.5727%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="29.3227%" y="453" width="0.1594%" height="15" fill="rgb(229,63,42)" fg:x="368" fg:w="2"/><text x="29.5727%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="29.3227%" y="437" width="0.1594%" height="15" fill="rgb(247,202,24)" fg:x="368" fg:w="2"/><text x="29.5727%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="29.3227%" y="421" width="0.1594%" height="15" fill="rgb(244,173,20)" fg:x="368" fg:w="2"/><text x="29.5727%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.4024%" y="405" width="0.0797%" height="15" fill="rgb(242,81,47)" fg:x="369" fg:w="1"/><text x="29.6524%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.4024%" y="389" width="0.0797%" height="15" fill="rgb(231,185,54)" fg:x="369" fg:w="1"/><text x="29.6524%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.4821%" y="565" width="0.0797%" height="15" fill="rgb(243,55,32)" fg:x="370" fg:w="1"/><text x="29.7321%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (22 samples, 1.75%)</title><rect x="27.8884%" y="581" width="1.7530%" height="15" fill="rgb(208,167,19)" fg:x="350" fg:w="22"/><text x="28.1384%" y="591.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (1 samples, 0.08%)</title><rect x="29.5618%" y="565" width="0.0797%" height="15" fill="rgb(231,72,35)" fg:x="371" fg:w="1"/><text x="29.8118%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="29.5618%" y="549" width="0.0797%" height="15" fill="rgb(250,173,51)" fg:x="371" fg:w="1"/><text x="29.8118%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="29.5618%" y="533" width="0.0797%" height="15" fill="rgb(209,5,22)" fg:x="371" fg:w="1"/><text x="29.8118%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.5618%" y="517" width="0.0797%" height="15" fill="rgb(250,174,19)" fg:x="371" fg:w="1"/><text x="29.8118%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="29.5618%" y="501" width="0.0797%" height="15" fill="rgb(217,3,49)" fg:x="371" fg:w="1"/><text x="29.8118%" y="511.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (23 samples, 1.83%)</title><rect x="27.8884%" y="597" width="1.8327%" height="15" fill="rgb(218,225,5)" fg:x="350" fg:w="23"/><text x="28.1384%" y="607.50">&lt;..</text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="29.6414%" y="581" width="0.0797%" height="15" fill="rgb(236,89,11)" fg:x="372" fg:w="1"/><text x="29.8914%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="29.7211%" y="565" width="0.0797%" height="15" fill="rgb(206,33,28)" fg:x="373" fg:w="1"/><text x="29.9711%" y="575.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="30.1195%" y="341" width="0.0797%" height="15" fill="rgb(241,56,42)" fg:x="378" fg:w="1"/><text x="30.3695%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="30.1195%" y="325" width="0.0797%" height="15" fill="rgb(222,44,11)" fg:x="378" fg:w="1"/><text x="30.3695%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1195%" y="309" width="0.0797%" height="15" fill="rgb(234,111,20)" fg:x="378" fg:w="1"/><text x="30.3695%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (6 samples, 0.48%)</title><rect x="29.9602%" y="421" width="0.4781%" height="15" fill="rgb(237,77,6)" fg:x="376" fg:w="6"/><text x="30.2102%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.40%)</title><rect x="30.0398%" y="405" width="0.3984%" height="15" fill="rgb(235,111,23)" fg:x="377" fg:w="5"/><text x="30.2898%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (5 samples, 0.40%)</title><rect x="30.0398%" y="389" width="0.3984%" height="15" fill="rgb(251,135,29)" fg:x="377" fg:w="5"/><text x="30.2898%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="30.0398%" y="373" width="0.3984%" height="15" fill="rgb(217,57,1)" fg:x="377" fg:w="5"/><text x="30.2898%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="30.1195%" y="357" width="0.3187%" height="15" fill="rgb(249,119,31)" fg:x="378" fg:w="4"/><text x="30.3695%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (3 samples, 0.24%)</title><rect x="30.1992%" y="341" width="0.2390%" height="15" fill="rgb(233,164,33)" fg:x="379" fg:w="3"/><text x="30.4492%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (2 samples, 0.16%)</title><rect x="30.2789%" y="325" width="0.1594%" height="15" fill="rgb(250,217,43)" fg:x="380" fg:w="2"/><text x="30.5289%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.3586%" y="309" width="0.0797%" height="15" fill="rgb(232,154,50)" fg:x="381" fg:w="1"/><text x="30.6086%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3586%" y="293" width="0.0797%" height="15" fill="rgb(227,190,8)" fg:x="381" fg:w="1"/><text x="30.6086%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.5179%" y="373" width="0.0797%" height="15" fill="rgb(209,217,32)" fg:x="383" fg:w="1"/><text x="30.7679%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.5179%" y="357" width="0.0797%" height="15" fill="rgb(243,203,50)" fg:x="383" fg:w="1"/><text x="30.7679%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="30.5179%" y="341" width="0.0797%" height="15" fill="rgb(232,152,27)" fg:x="383" fg:w="1"/><text x="30.7679%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.5179%" y="325" width="0.0797%" height="15" fill="rgb(240,34,29)" fg:x="383" fg:w="1"/><text x="30.7679%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="30.5179%" y="309" width="0.0797%" height="15" fill="rgb(215,185,52)" fg:x="383" fg:w="1"/><text x="30.7679%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="30.5179%" y="293" width="0.0797%" height="15" fill="rgb(240,89,49)" fg:x="383" fg:w="1"/><text x="30.7679%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="30.5179%" y="277" width="0.0797%" height="15" fill="rgb(225,12,52)" fg:x="383" fg:w="1"/><text x="30.7679%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="30.5179%" y="261" width="0.0797%" height="15" fill="rgb(239,128,45)" fg:x="383" fg:w="1"/><text x="30.7679%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.5179%" y="245" width="0.0797%" height="15" fill="rgb(211,78,47)" fg:x="383" fg:w="1"/><text x="30.7679%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="30.5179%" y="229" width="0.0797%" height="15" fill="rgb(232,31,21)" fg:x="383" fg:w="1"/><text x="30.7679%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="30.5179%" y="213" width="0.0797%" height="15" fill="rgb(222,168,14)" fg:x="383" fg:w="1"/><text x="30.7679%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="30.5179%" y="197" width="0.0797%" height="15" fill="rgb(209,128,24)" fg:x="383" fg:w="1"/><text x="30.7679%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="30.5179%" y="181" width="0.0797%" height="15" fill="rgb(249,35,13)" fg:x="383" fg:w="1"/><text x="30.7679%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="30.5179%" y="165" width="0.0797%" height="15" fill="rgb(218,7,2)" fg:x="383" fg:w="1"/><text x="30.7679%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5179%" y="149" width="0.0797%" height="15" fill="rgb(238,107,27)" fg:x="383" fg:w="1"/><text x="30.7679%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="30.5976%" y="373" width="0.0797%" height="15" fill="rgb(217,88,38)" fg:x="384" fg:w="1"/><text x="30.8476%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.5976%" y="357" width="0.0797%" height="15" fill="rgb(230,207,0)" fg:x="384" fg:w="1"/><text x="30.8476%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="30.5179%" y="389" width="0.2390%" height="15" fill="rgb(249,64,54)" fg:x="383" fg:w="3"/><text x="30.7679%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.6773%" y="373" width="0.0797%" height="15" fill="rgb(231,7,11)" fg:x="385" fg:w="1"/><text x="30.9273%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.6773%" y="357" width="0.0797%" height="15" fill="rgb(205,149,21)" fg:x="385" fg:w="1"/><text x="30.9273%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.6773%" y="341" width="0.0797%" height="15" fill="rgb(215,126,34)" fg:x="385" fg:w="1"/><text x="30.9273%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="30.6773%" y="325" width="0.0797%" height="15" fill="rgb(241,132,45)" fg:x="385" fg:w="1"/><text x="30.9273%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="30.6773%" y="309" width="0.0797%" height="15" fill="rgb(252,69,32)" fg:x="385" fg:w="1"/><text x="30.9273%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.9163%" y="357" width="0.0797%" height="15" fill="rgb(232,204,19)" fg:x="388" fg:w="1"/><text x="31.1663%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="30.8367%" y="373" width="0.4781%" height="15" fill="rgb(249,15,47)" fg:x="387" fg:w="6"/><text x="31.0867%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="30.9960%" y="357" width="0.3187%" height="15" fill="rgb(209,227,23)" fg:x="389" fg:w="4"/><text x="31.2460%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="30.9960%" y="341" width="0.3187%" height="15" fill="rgb(248,92,24)" fg:x="389" fg:w="4"/><text x="31.2460%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="30.9960%" y="325" width="0.3187%" height="15" fill="rgb(247,59,2)" fg:x="389" fg:w="4"/><text x="31.2460%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="30.9960%" y="309" width="0.3187%" height="15" fill="rgb(221,30,5)" fg:x="389" fg:w="4"/><text x="31.2460%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="30.9960%" y="293" width="0.3187%" height="15" fill="rgb(208,108,53)" fg:x="389" fg:w="4"/><text x="31.2460%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="30.9960%" y="277" width="0.3187%" height="15" fill="rgb(211,183,26)" fg:x="389" fg:w="4"/><text x="31.2460%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.2351%" y="261" width="0.0797%" height="15" fill="rgb(232,132,4)" fg:x="392" fg:w="1"/><text x="31.4851%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (8 samples, 0.64%)</title><rect x="30.7570%" y="389" width="0.6375%" height="15" fill="rgb(253,128,37)" fg:x="386" fg:w="8"/><text x="31.0070%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="31.3147%" y="373" width="0.0797%" height="15" fill="rgb(221,58,24)" fg:x="393" fg:w="1"/><text x="31.5647%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.3147%" y="357" width="0.0797%" height="15" fill="rgb(230,54,45)" fg:x="393" fg:w="1"/><text x="31.5647%" y="367.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="31.3944%" y="389" width="0.0797%" height="15" fill="rgb(254,21,18)" fg:x="394" fg:w="1"/><text x="31.6444%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="31.3944%" y="373" width="0.0797%" height="15" fill="rgb(221,108,0)" fg:x="394" fg:w="1"/><text x="31.6444%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="31.3944%" y="357" width="0.0797%" height="15" fill="rgb(206,95,1)" fg:x="394" fg:w="1"/><text x="31.6444%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="31.3944%" y="341" width="0.0797%" height="15" fill="rgb(237,52,5)" fg:x="394" fg:w="1"/><text x="31.6444%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="31.3944%" y="325" width="0.0797%" height="15" fill="rgb(218,150,34)" fg:x="394" fg:w="1"/><text x="31.6444%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="31.4741%" y="357" width="0.1594%" height="15" fill="rgb(235,194,28)" fg:x="395" fg:w="2"/><text x="31.7241%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.5538%" y="341" width="0.0797%" height="15" fill="rgb(245,92,18)" fg:x="396" fg:w="1"/><text x="31.8038%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.5538%" y="325" width="0.0797%" height="15" fill="rgb(253,203,53)" fg:x="396" fg:w="1"/><text x="31.8038%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.4741%" y="373" width="0.2390%" height="15" fill="rgb(249,185,47)" fg:x="395" fg:w="3"/><text x="31.7241%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.6335%" y="357" width="0.0797%" height="15" fill="rgb(252,194,52)" fg:x="397" fg:w="1"/><text x="31.8835%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.6335%" y="341" width="0.0797%" height="15" fill="rgb(210,53,36)" fg:x="397" fg:w="1"/><text x="31.8835%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.6335%" y="325" width="0.0797%" height="15" fill="rgb(237,37,25)" fg:x="397" fg:w="1"/><text x="31.8835%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.6335%" y="309" width="0.0797%" height="15" fill="rgb(242,116,27)" fg:x="397" fg:w="1"/><text x="31.8835%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.6335%" y="293" width="0.0797%" height="15" fill="rgb(213,185,26)" fg:x="397" fg:w="1"/><text x="31.8835%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.6335%" y="277" width="0.0797%" height="15" fill="rgb(225,204,8)" fg:x="397" fg:w="1"/><text x="31.8835%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.6335%" y="261" width="0.0797%" height="15" fill="rgb(254,111,37)" fg:x="397" fg:w="1"/><text x="31.8835%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.6335%" y="245" width="0.0797%" height="15" fill="rgb(242,35,9)" fg:x="397" fg:w="1"/><text x="31.8835%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.6335%" y="229" width="0.0797%" height="15" fill="rgb(232,138,49)" fg:x="397" fg:w="1"/><text x="31.8835%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.6335%" y="213" width="0.0797%" height="15" fill="rgb(247,56,4)" fg:x="397" fg:w="1"/><text x="31.8835%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.6335%" y="197" width="0.0797%" height="15" fill="rgb(226,179,17)" fg:x="397" fg:w="1"/><text x="31.8835%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.6335%" y="181" width="0.0797%" height="15" fill="rgb(216,163,45)" fg:x="397" fg:w="1"/><text x="31.8835%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="31.7131%" y="309" width="0.1594%" height="15" fill="rgb(211,157,3)" fg:x="398" fg:w="2"/><text x="31.9631%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.8725%" y="309" width="0.0797%" height="15" fill="rgb(234,44,20)" fg:x="400" fg:w="1"/><text x="32.1225%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (8 samples, 0.64%)</title><rect x="31.4741%" y="389" width="0.6375%" height="15" fill="rgb(254,138,23)" fg:x="395" fg:w="8"/><text x="31.7241%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="31.7131%" y="373" width="0.3984%" height="15" fill="rgb(206,119,39)" fg:x="398" fg:w="5"/><text x="31.9631%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="31.7131%" y="357" width="0.3984%" height="15" fill="rgb(231,105,52)" fg:x="398" fg:w="5"/><text x="31.9631%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="31.7131%" y="341" width="0.3984%" height="15" fill="rgb(250,20,5)" fg:x="398" fg:w="5"/><text x="31.9631%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="31.7131%" y="325" width="0.3984%" height="15" fill="rgb(215,198,30)" fg:x="398" fg:w="5"/><text x="31.9631%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="31.9522%" y="309" width="0.1594%" height="15" fill="rgb(246,142,8)" fg:x="401" fg:w="2"/><text x="32.2022%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="31.9522%" y="293" width="0.1594%" height="15" fill="rgb(243,26,38)" fg:x="401" fg:w="2"/><text x="32.2022%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.0319%" y="277" width="0.0797%" height="15" fill="rgb(205,133,28)" fg:x="402" fg:w="1"/><text x="32.2819%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.1116%" y="357" width="0.0797%" height="15" fill="rgb(212,34,0)" fg:x="403" fg:w="1"/><text x="32.3616%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="32.1116%" y="341" width="0.0797%" height="15" fill="rgb(251,226,22)" fg:x="403" fg:w="1"/><text x="32.3616%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.1912%" y="357" width="0.0797%" height="15" fill="rgb(252,119,9)" fg:x="404" fg:w="1"/><text x="32.4412%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.3506%" y="293" width="0.0797%" height="15" fill="rgb(213,150,50)" fg:x="406" fg:w="1"/><text x="32.6006%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.4303%" y="261" width="0.0797%" height="15" fill="rgb(212,24,39)" fg:x="407" fg:w="1"/><text x="32.6803%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (6 samples, 0.48%)</title><rect x="32.1116%" y="373" width="0.4781%" height="15" fill="rgb(213,46,39)" fg:x="403" fg:w="6"/><text x="32.3616%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="32.2709%" y="357" width="0.3187%" height="15" fill="rgb(239,106,12)" fg:x="405" fg:w="4"/><text x="32.5209%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="32.2709%" y="341" width="0.3187%" height="15" fill="rgb(249,229,21)" fg:x="405" fg:w="4"/><text x="32.5209%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="32.2709%" y="325" width="0.3187%" height="15" fill="rgb(212,158,3)" fg:x="405" fg:w="4"/><text x="32.5209%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="32.2709%" y="309" width="0.3187%" height="15" fill="rgb(253,26,48)" fg:x="405" fg:w="4"/><text x="32.5209%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="32.4303%" y="293" width="0.1594%" height="15" fill="rgb(238,178,20)" fg:x="407" fg:w="2"/><text x="32.6803%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.4303%" y="277" width="0.1594%" height="15" fill="rgb(208,86,15)" fg:x="407" fg:w="2"/><text x="32.6803%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.5100%" y="261" width="0.0797%" height="15" fill="rgb(239,42,53)" fg:x="408" fg:w="1"/><text x="32.7600%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (7 samples, 0.56%)</title><rect x="32.1116%" y="389" width="0.5578%" height="15" fill="rgb(245,226,8)" fg:x="403" fg:w="7"/><text x="32.3616%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="32.5896%" y="373" width="0.0797%" height="15" fill="rgb(216,176,32)" fg:x="409" fg:w="1"/><text x="32.8396%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.5896%" y="357" width="0.0797%" height="15" fill="rgb(231,186,21)" fg:x="409" fg:w="1"/><text x="32.8396%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="32.6693%" y="389" width="0.0797%" height="15" fill="rgb(205,95,49)" fg:x="410" fg:w="1"/><text x="32.9193%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9880%" y="245" width="0.0797%" height="15" fill="rgb(217,145,8)" fg:x="414" fg:w="1"/><text x="33.2380%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.0677%" y="245" width="0.0797%" height="15" fill="rgb(239,144,48)" fg:x="415" fg:w="1"/><text x="33.3177%" y="255.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="33.1474%" y="229" width="0.2390%" height="15" fill="rgb(214,189,23)" fg:x="416" fg:w="3"/><text x="33.3974%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (16 samples, 1.27%)</title><rect x="33.1474%" y="245" width="1.2749%" height="15" fill="rgb(229,157,17)" fg:x="416" fg:w="16"/><text x="33.3974%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="33.3865%" y="229" width="1.0359%" height="15" fill="rgb(230,5,48)" fg:x="419" fg:w="13"/><text x="33.6365%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.5020%" y="213" width="0.0797%" height="15" fill="rgb(224,156,48)" fg:x="433" fg:w="1"/><text x="34.7520%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="34.5020%" y="229" width="0.2390%" height="15" fill="rgb(223,14,29)" fg:x="433" fg:w="3"/><text x="34.7520%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="34.5817%" y="213" width="0.1594%" height="15" fill="rgb(229,96,36)" fg:x="434" fg:w="2"/><text x="34.8317%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="34.4223%" y="245" width="0.3984%" height="15" fill="rgb(231,102,53)" fg:x="432" fg:w="5"/><text x="34.6723%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="34.7410%" y="229" width="0.0797%" height="15" fill="rgb(210,77,38)" fg:x="436" fg:w="1"/><text x="34.9910%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="34.7410%" y="213" width="0.0797%" height="15" fill="rgb(235,131,6)" fg:x="436" fg:w="1"/><text x="34.9910%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="35.0598%" y="181" width="0.0797%" height="15" fill="rgb(252,55,38)" fg:x="440" fg:w="1"/><text x="35.3098%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="35.1394%" y="181" width="0.0797%" height="15" fill="rgb(246,38,14)" fg:x="441" fg:w="1"/><text x="35.3894%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="35.2191%" y="181" width="0.0797%" height="15" fill="rgb(242,27,5)" fg:x="442" fg:w="1"/><text x="35.4691%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.2988%" y="165" width="0.0797%" height="15" fill="rgb(228,65,35)" fg:x="443" fg:w="1"/><text x="35.5488%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.2988%" y="149" width="0.0797%" height="15" fill="rgb(245,93,11)" fg:x="443" fg:w="1"/><text x="35.5488%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.2988%" y="133" width="0.0797%" height="15" fill="rgb(213,1,31)" fg:x="443" fg:w="1"/><text x="35.5488%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (53 samples, 4.22%)</title><rect x="35.2988%" y="181" width="4.2231%" height="15" fill="rgb(237,205,14)" fg:x="443" fg:w="53"/><text x="35.5488%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (52 samples, 4.14%)</title><rect x="35.3785%" y="165" width="4.1434%" height="15" fill="rgb(232,118,45)" fg:x="444" fg:w="52"/><text x="35.6285%" y="175.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (52 samples, 4.14%)</title><rect x="35.3785%" y="149" width="4.1434%" height="15" fill="rgb(218,5,6)" fg:x="444" fg:w="52"/><text x="35.6285%" y="159.50">alloc..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 4.94%)</title><rect x="34.9004%" y="229" width="4.9402%" height="15" fill="rgb(251,87,51)" fg:x="438" fg:w="62"/><text x="35.1504%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.86%)</title><rect x="34.9801%" y="213" width="4.8606%" height="15" fill="rgb(207,225,20)" fg:x="439" fg:w="61"/><text x="35.2301%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.86%)</title><rect x="34.9801%" y="197" width="4.8606%" height="15" fill="rgb(222,78,54)" fg:x="439" fg:w="61"/><text x="35.2301%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="39.5219%" y="181" width="0.3187%" height="15" fill="rgb(232,85,16)" fg:x="496" fg:w="4"/><text x="39.7719%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.7610%" y="165" width="0.0797%" height="15" fill="rgb(244,25,33)" fg:x="499" fg:w="1"/><text x="40.0110%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="39.8406%" y="213" width="0.2390%" height="15" fill="rgb(233,24,36)" fg:x="500" fg:w="3"/><text x="40.0906%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="39.9203%" y="197" width="0.1594%" height="15" fill="rgb(253,49,54)" fg:x="501" fg:w="2"/><text x="40.1703%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.0000%" y="181" width="0.0797%" height="15" fill="rgb(245,12,22)" fg:x="502" fg:w="1"/><text x="40.2500%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="39.8406%" y="229" width="0.3984%" height="15" fill="rgb(253,141,28)" fg:x="500" fg:w="5"/><text x="40.0906%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="40.0797%" y="213" width="0.1594%" height="15" fill="rgb(225,207,27)" fg:x="503" fg:w="2"/><text x="40.3297%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="40.2390%" y="229" width="0.0797%" height="15" fill="rgb(220,84,2)" fg:x="505" fg:w="1"/><text x="40.4890%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (71 samples, 5.66%)</title><rect x="34.8207%" y="245" width="5.6574%" height="15" fill="rgb(224,37,37)" fg:x="437" fg:w="71"/><text x="35.0707%" y="255.50">regex_a..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="40.3187%" y="229" width="0.1594%" height="15" fill="rgb(220,143,18)" fg:x="506" fg:w="2"/><text x="40.5687%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (95 samples, 7.57%)</title><rect x="32.9880%" y="261" width="7.5697%" height="15" fill="rgb(210,88,33)" fg:x="414" fg:w="95"/><text x="33.2380%" y="271.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.4781%" y="245" width="0.0797%" height="15" fill="rgb(219,87,51)" fg:x="508" fg:w="1"/><text x="40.7281%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="40.4781%" y="229" width="0.0797%" height="15" fill="rgb(211,7,35)" fg:x="508" fg:w="1"/><text x="40.7281%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="40.4781%" y="213" width="0.0797%" height="15" fill="rgb(232,77,2)" fg:x="508" fg:w="1"/><text x="40.7281%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="40.7171%" y="213" width="0.1594%" height="15" fill="rgb(249,94,25)" fg:x="511" fg:w="2"/><text x="40.9671%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.7968%" y="197" width="0.0797%" height="15" fill="rgb(215,112,2)" fg:x="512" fg:w="1"/><text x="41.0468%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.7968%" y="181" width="0.0797%" height="15" fill="rgb(226,115,48)" fg:x="512" fg:w="1"/><text x="41.0468%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7968%" y="165" width="0.0797%" height="15" fill="rgb(249,196,10)" fg:x="512" fg:w="1"/><text x="41.0468%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="40.8765%" y="213" width="0.0797%" height="15" fill="rgb(237,109,14)" fg:x="513" fg:w="1"/><text x="41.1265%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="40.8765%" y="197" width="0.0797%" height="15" fill="rgb(217,103,53)" fg:x="513" fg:w="1"/><text x="41.1265%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="40.5578%" y="261" width="0.7171%" height="15" fill="rgb(244,137,9)" fg:x="509" fg:w="9"/><text x="40.8078%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="40.5578%" y="245" width="0.7171%" height="15" fill="rgb(227,201,3)" fg:x="509" fg:w="9"/><text x="40.8078%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="40.6375%" y="229" width="0.6375%" height="15" fill="rgb(243,94,6)" fg:x="510" fg:w="8"/><text x="40.8875%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="40.9562%" y="213" width="0.3187%" height="15" fill="rgb(235,118,5)" fg:x="514" fg:w="4"/><text x="41.2062%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="41.0359%" y="197" width="0.2390%" height="15" fill="rgb(247,10,30)" fg:x="515" fg:w="3"/><text x="41.2859%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="41.0359%" y="181" width="0.2390%" height="15" fill="rgb(205,26,28)" fg:x="515" fg:w="3"/><text x="41.2859%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="41.0359%" y="165" width="0.2390%" height="15" fill="rgb(206,99,35)" fg:x="515" fg:w="3"/><text x="41.2859%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="41.5139%" y="229" width="0.0797%" height="15" fill="rgb(238,130,40)" fg:x="521" fg:w="1"/><text x="41.7639%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="41.5139%" y="213" width="0.0797%" height="15" fill="rgb(224,126,31)" fg:x="521" fg:w="1"/><text x="41.7639%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.5139%" y="197" width="0.0797%" height="15" fill="rgb(254,105,17)" fg:x="521" fg:w="1"/><text x="41.7639%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (111 samples, 8.84%)</title><rect x="32.8287%" y="309" width="8.8446%" height="15" fill="rgb(216,87,36)" fg:x="412" fg:w="111"/><text x="33.0787%" y="319.50">&lt;regex::rege..</text></g><g><title>regex::builders::string::RegexBuilder::build (111 samples, 8.84%)</title><rect x="32.8287%" y="293" width="8.8446%" height="15" fill="rgb(240,21,12)" fg:x="412" fg:w="111"/><text x="33.0787%" y="303.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (111 samples, 8.84%)</title><rect x="32.8287%" y="277" width="8.8446%" height="15" fill="rgb(245,192,34)" fg:x="412" fg:w="111"/><text x="33.0787%" y="287.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="41.2749%" y="261" width="0.3984%" height="15" fill="rgb(226,100,49)" fg:x="518" fg:w="5"/><text x="41.5249%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="41.2749%" y="245" width="0.3984%" height="15" fill="rgb(245,188,27)" fg:x="518" fg:w="5"/><text x="41.5249%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="41.5936%" y="229" width="0.0797%" height="15" fill="rgb(212,170,8)" fg:x="522" fg:w="1"/><text x="41.8436%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.6733%" y="309" width="0.0797%" height="15" fill="rgb(217,113,29)" fg:x="523" fg:w="1"/><text x="41.9233%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.7530%" y="277" width="0.0797%" height="15" fill="rgb(237,30,3)" fg:x="524" fg:w="1"/><text x="42.0030%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="41.7530%" y="261" width="0.0797%" height="15" fill="rgb(227,19,28)" fg:x="524" fg:w="1"/><text x="42.0030%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.7530%" y="245" width="0.0797%" height="15" fill="rgb(239,172,45)" fg:x="524" fg:w="1"/><text x="42.0030%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="41.7530%" y="309" width="0.1594%" height="15" fill="rgb(254,55,39)" fg:x="524" fg:w="2"/><text x="42.0030%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="41.7530%" y="293" width="0.1594%" height="15" fill="rgb(249,208,12)" fg:x="524" fg:w="2"/><text x="42.0030%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="41.8327%" y="277" width="0.0797%" height="15" fill="rgb(240,52,13)" fg:x="525" fg:w="1"/><text x="42.0827%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="41.8327%" y="261" width="0.0797%" height="15" fill="rgb(252,149,13)" fg:x="525" fg:w="1"/><text x="42.0827%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.8327%" y="245" width="0.0797%" height="15" fill="rgb(232,81,48)" fg:x="525" fg:w="1"/><text x="42.0827%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.3108%" y="197" width="0.0797%" height="15" fill="rgb(222,144,2)" fg:x="531" fg:w="1"/><text x="42.5608%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="42.3108%" y="229" width="0.3187%" height="15" fill="rgb(216,81,32)" fg:x="531" fg:w="4"/><text x="42.5608%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="42.3108%" y="213" width="0.3187%" height="15" fill="rgb(244,78,51)" fg:x="531" fg:w="4"/><text x="42.5608%" y="223.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="42.3904%" y="197" width="0.2390%" height="15" fill="rgb(217,66,21)" fg:x="532" fg:w="3"/><text x="42.6404%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.72%)</title><rect x="41.9920%" y="245" width="0.7171%" height="15" fill="rgb(247,101,42)" fg:x="527" fg:w="9"/><text x="42.2420%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="42.6295%" y="229" width="0.0797%" height="15" fill="rgb(227,81,39)" fg:x="535" fg:w="1"/><text x="42.8795%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.80%)</title><rect x="41.9920%" y="261" width="0.7968%" height="15" fill="rgb(220,223,44)" fg:x="527" fg:w="10"/><text x="42.2420%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="42.7092%" y="245" width="0.0797%" height="15" fill="rgb(205,218,2)" fg:x="536" fg:w="1"/><text x="42.9592%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="42.7092%" y="229" width="0.0797%" height="15" fill="rgb(212,207,28)" fg:x="536" fg:w="1"/><text x="42.9592%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.7092%" y="213" width="0.0797%" height="15" fill="rgb(224,12,41)" fg:x="536" fg:w="1"/><text x="42.9592%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.7092%" y="197" width="0.0797%" height="15" fill="rgb(216,118,12)" fg:x="536" fg:w="1"/><text x="42.9592%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (127 samples, 10.12%)</title><rect x="32.8287%" y="325" width="10.1195%" height="15" fill="rgb(252,97,46)" fg:x="412" fg:w="127"/><text x="33.0787%" y="335.50">indefinite::hel..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.04%)</title><rect x="41.9124%" y="309" width="1.0359%" height="15" fill="rgb(244,206,19)" fg:x="526" fg:w="13"/><text x="42.1624%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.04%)</title><rect x="41.9124%" y="293" width="1.0359%" height="15" fill="rgb(231,84,31)" fg:x="526" fg:w="13"/><text x="42.1624%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (12 samples, 0.96%)</title><rect x="41.9920%" y="277" width="0.9562%" height="15" fill="rgb(244,133,0)" fg:x="527" fg:w="12"/><text x="42.2420%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="42.7888%" y="261" width="0.1594%" height="15" fill="rgb(223,15,50)" fg:x="537" fg:w="2"/><text x="43.0388%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="42.9482%" y="277" width="0.0797%" height="15" fill="rgb(250,118,49)" fg:x="539" fg:w="1"/><text x="43.1982%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="43.1076%" y="261" width="0.1594%" height="15" fill="rgb(248,25,38)" fg:x="541" fg:w="2"/><text x="43.3576%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="43.1076%" y="245" width="0.1594%" height="15" fill="rgb(215,70,14)" fg:x="541" fg:w="2"/><text x="43.3576%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="43.1076%" y="229" width="0.1594%" height="15" fill="rgb(215,28,15)" fg:x="541" fg:w="2"/><text x="43.3576%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="43.1076%" y="213" width="0.1594%" height="15" fill="rgb(243,6,28)" fg:x="541" fg:w="2"/><text x="43.3576%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.2669%" y="229" width="0.0797%" height="15" fill="rgb(222,130,1)" fg:x="543" fg:w="1"/><text x="43.5169%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.35%)</title><rect x="43.2669%" y="245" width="1.3546%" height="15" fill="rgb(236,166,44)" fg:x="543" fg:w="17"/><text x="43.5169%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.27%)</title><rect x="43.3466%" y="229" width="1.2749%" height="15" fill="rgb(221,108,14)" fg:x="544" fg:w="16"/><text x="43.5966%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.5418%" y="213" width="0.0797%" height="15" fill="rgb(252,3,45)" fg:x="559" fg:w="1"/><text x="44.7918%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="44.6215%" y="229" width="0.0797%" height="15" fill="rgb(237,68,30)" fg:x="560" fg:w="1"/><text x="44.8715%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="44.6215%" y="213" width="0.0797%" height="15" fill="rgb(211,79,22)" fg:x="560" fg:w="1"/><text x="44.8715%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="44.6215%" y="245" width="0.4781%" height="15" fill="rgb(252,185,21)" fg:x="560" fg:w="6"/><text x="44.8715%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="44.7012%" y="229" width="0.3984%" height="15" fill="rgb(225,189,26)" fg:x="561" fg:w="5"/><text x="44.9512%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="45.4183%" y="213" width="0.1594%" height="15" fill="rgb(241,30,40)" fg:x="570" fg:w="2"/><text x="45.6683%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="45.4183%" y="197" width="0.1594%" height="15" fill="rgb(235,215,44)" fg:x="570" fg:w="2"/><text x="45.6683%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.4980%" y="181" width="0.0797%" height="15" fill="rgb(205,8,29)" fg:x="571" fg:w="1"/><text x="45.7480%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.4980%" y="165" width="0.0797%" height="15" fill="rgb(241,137,42)" fg:x="571" fg:w="1"/><text x="45.7480%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="45.8964%" y="181" width="0.0797%" height="15" fill="rgb(237,155,2)" fg:x="576" fg:w="1"/><text x="46.1464%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.8964%" y="165" width="0.0797%" height="15" fill="rgb(245,29,42)" fg:x="576" fg:w="1"/><text x="46.1464%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.8964%" y="149" width="0.0797%" height="15" fill="rgb(234,101,35)" fg:x="576" fg:w="1"/><text x="46.1464%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.48%)</title><rect x="45.5777%" y="213" width="0.4781%" height="15" fill="rgb(228,64,37)" fg:x="572" fg:w="6"/><text x="45.8277%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="45.7371%" y="197" width="0.3187%" height="15" fill="rgb(217,214,36)" fg:x="574" fg:w="4"/><text x="45.9871%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.9761%" y="181" width="0.0797%" height="15" fill="rgb(243,70,3)" fg:x="577" fg:w="1"/><text x="46.2261%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.9761%" y="165" width="0.0797%" height="15" fill="rgb(253,158,52)" fg:x="577" fg:w="1"/><text x="46.2261%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.9761%" y="149" width="0.0797%" height="15" fill="rgb(234,111,54)" fg:x="577" fg:w="1"/><text x="46.2261%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.20%)</title><rect x="45.0996%" y="245" width="1.1952%" height="15" fill="rgb(217,70,32)" fg:x="566" fg:w="15"/><text x="45.3496%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (14 samples, 1.12%)</title><rect x="45.1793%" y="229" width="1.1155%" height="15" fill="rgb(234,18,33)" fg:x="567" fg:w="14"/><text x="45.4293%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.24%)</title><rect x="46.0558%" y="213" width="0.2390%" height="15" fill="rgb(234,12,49)" fg:x="578" fg:w="3"/><text x="46.3058%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="46.0558%" y="197" width="0.2390%" height="15" fill="rgb(236,10,21)" fg:x="578" fg:w="3"/><text x="46.3058%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="46.0558%" y="181" width="0.2390%" height="15" fill="rgb(248,182,45)" fg:x="578" fg:w="3"/><text x="46.3058%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="46.7729%" y="133" width="0.2390%" height="15" fill="rgb(217,95,36)" fg:x="587" fg:w="3"/><text x="47.0229%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="47.0120%" y="133" width="0.2390%" height="15" fill="rgb(212,110,31)" fg:x="590" fg:w="3"/><text x="47.2620%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="47.2510%" y="133" width="0.0797%" height="15" fill="rgb(206,32,53)" fg:x="593" fg:w="1"/><text x="47.5010%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="47.4900%" y="101" width="0.1594%" height="15" fill="rgb(246,141,37)" fg:x="596" fg:w="2"/><text x="47.7400%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="47.4900%" y="85" width="0.1594%" height="15" fill="rgb(219,16,7)" fg:x="596" fg:w="2"/><text x="47.7400%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="47.4900%" y="69" width="0.1594%" height="15" fill="rgb(230,205,45)" fg:x="596" fg:w="2"/><text x="47.7400%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.80%)</title><rect x="47.3307%" y="133" width="0.7968%" height="15" fill="rgb(231,43,49)" fg:x="594" fg:w="10"/><text x="47.5807%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.72%)</title><rect x="47.4104%" y="117" width="0.7171%" height="15" fill="rgb(212,106,34)" fg:x="595" fg:w="9"/><text x="47.6604%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="47.6494%" y="101" width="0.4781%" height="15" fill="rgb(206,83,17)" fg:x="598" fg:w="6"/><text x="47.8994%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="47.8884%" y="85" width="0.2390%" height="15" fill="rgb(244,154,49)" fg:x="601" fg:w="3"/><text x="48.1384%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="47.8884%" y="69" width="0.2390%" height="15" fill="rgb(244,149,49)" fg:x="601" fg:w="3"/><text x="48.1384%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="47.8884%" y="53" width="0.2390%" height="15" fill="rgb(227,134,18)" fg:x="601" fg:w="3"/><text x="48.1384%" y="63.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="47.8884%" y="37" width="0.2390%" height="15" fill="rgb(237,116,36)" fg:x="601" fg:w="3"/><text x="48.1384%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (49 samples, 3.90%)</title><rect x="48.1275%" y="133" width="3.9044%" height="15" fill="rgb(205,129,40)" fg:x="604" fg:w="49"/><text x="48.3775%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 3.90%)</title><rect x="48.1275%" y="117" width="3.9044%" height="15" fill="rgb(236,178,4)" fg:x="604" fg:w="49"/><text x="48.3775%" y="127.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 3.90%)</title><rect x="48.1275%" y="101" width="3.9044%" height="15" fill="rgb(251,76,53)" fg:x="604" fg:w="49"/><text x="48.3775%" y="111.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="52.0319%" y="133" width="0.2390%" height="15" fill="rgb(242,92,40)" fg:x="653" fg:w="3"/><text x="52.2819%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.1912%" y="117" width="0.0797%" height="15" fill="rgb(209,45,30)" fg:x="655" fg:w="1"/><text x="52.4412%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 6.22%)</title><rect x="46.2948%" y="229" width="6.2151%" height="15" fill="rgb(218,157,36)" fg:x="581" fg:w="78"/><text x="46.5448%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (78 samples, 6.22%)</title><rect x="46.2948%" y="213" width="6.2151%" height="15" fill="rgb(222,186,16)" fg:x="581" fg:w="78"/><text x="46.5448%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (78 samples, 6.22%)</title><rect x="46.2948%" y="197" width="6.2151%" height="15" fill="rgb(254,72,35)" fg:x="581" fg:w="78"/><text x="46.5448%" y="207.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (78 samples, 6.22%)</title><rect x="46.2948%" y="181" width="6.2151%" height="15" fill="rgb(224,25,35)" fg:x="581" fg:w="78"/><text x="46.5448%" y="191.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (78 samples, 6.22%)</title><rect x="46.2948%" y="165" width="6.2151%" height="15" fill="rgb(206,135,52)" fg:x="581" fg:w="78"/><text x="46.5448%" y="175.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (78 samples, 6.22%)</title><rect x="46.2948%" y="149" width="6.2151%" height="15" fill="rgb(229,174,47)" fg:x="581" fg:w="78"/><text x="46.5448%" y="159.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="52.2709%" y="133" width="0.2390%" height="15" fill="rgb(242,184,21)" fg:x="656" fg:w="3"/><text x="52.5209%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.3506%" y="117" width="0.1594%" height="15" fill="rgb(213,22,45)" fg:x="657" fg:w="2"/><text x="52.6006%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.3506%" y="101" width="0.1594%" height="15" fill="rgb(237,81,54)" fg:x="657" fg:w="2"/><text x="52.6006%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="52.3506%" y="85" width="0.1594%" height="15" fill="rgb(248,177,18)" fg:x="657" fg:w="2"/><text x="52.6006%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="52.5896%" y="213" width="0.6375%" height="15" fill="rgb(254,31,16)" fg:x="660" fg:w="8"/><text x="52.8396%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="52.8287%" y="197" width="0.3984%" height="15" fill="rgb(235,20,31)" fg:x="663" fg:w="5"/><text x="53.0787%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="52.8287%" y="181" width="0.3984%" height="15" fill="rgb(240,56,43)" fg:x="663" fg:w="5"/><text x="53.0787%" y="191.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="52.8287%" y="165" width="0.3984%" height="15" fill="rgb(237,197,51)" fg:x="663" fg:w="5"/><text x="53.0787%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="53.2271%" y="213" width="0.3187%" height="15" fill="rgb(241,162,44)" fg:x="668" fg:w="4"/><text x="53.4771%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (92 samples, 7.33%)</title><rect x="46.2948%" y="245" width="7.3307%" height="15" fill="rgb(224,23,20)" fg:x="581" fg:w="92"/><text x="46.5448%" y="255.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.12%)</title><rect x="52.5100%" y="229" width="1.1155%" height="15" fill="rgb(250,109,34)" fg:x="659" fg:w="14"/><text x="52.7600%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="53.5458%" y="213" width="0.0797%" height="15" fill="rgb(214,175,50)" fg:x="672" fg:w="1"/><text x="53.7958%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (132 samples, 10.52%)</title><rect x="43.2669%" y="261" width="10.5179%" height="15" fill="rgb(213,182,5)" fg:x="543" fg:w="132"/><text x="43.5169%" y="271.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="53.6255%" y="245" width="0.1594%" height="15" fill="rgb(209,199,19)" fg:x="673" fg:w="2"/><text x="53.8755%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="53.7849%" y="229" width="0.0797%" height="15" fill="rgb(236,224,42)" fg:x="675" fg:w="1"/><text x="54.0349%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="53.7849%" y="213" width="0.0797%" height="15" fill="rgb(246,226,29)" fg:x="675" fg:w="1"/><text x="54.0349%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.7849%" y="197" width="0.0797%" height="15" fill="rgb(227,223,11)" fg:x="675" fg:w="1"/><text x="54.0349%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="53.7849%" y="261" width="0.1594%" height="15" fill="rgb(219,7,51)" fg:x="675" fg:w="2"/><text x="54.0349%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="53.7849%" y="245" width="0.1594%" height="15" fill="rgb(245,167,10)" fg:x="675" fg:w="2"/><text x="54.0349%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="53.8645%" y="229" width="0.0797%" height="15" fill="rgb(237,224,16)" fg:x="676" fg:w="1"/><text x="54.1145%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.8645%" y="213" width="0.0797%" height="15" fill="rgb(226,132,13)" fg:x="676" fg:w="1"/><text x="54.1145%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.8645%" y="197" width="0.0797%" height="15" fill="rgb(214,140,3)" fg:x="676" fg:w="1"/><text x="54.1145%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="54.0239%" y="229" width="0.0797%" height="15" fill="rgb(221,177,4)" fg:x="678" fg:w="1"/><text x="54.2739%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="54.0239%" y="213" width="0.0797%" height="15" fill="rgb(238,139,3)" fg:x="678" fg:w="1"/><text x="54.2739%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.0239%" y="197" width="0.0797%" height="15" fill="rgb(216,17,39)" fg:x="678" fg:w="1"/><text x="54.2739%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.0239%" y="181" width="0.0797%" height="15" fill="rgb(238,120,9)" fg:x="678" fg:w="1"/><text x="54.2739%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="54.1036%" y="229" width="0.3187%" height="15" fill="rgb(244,92,53)" fg:x="679" fg:w="4"/><text x="54.3536%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (4 samples, 0.32%)</title><rect x="54.1036%" y="213" width="0.3187%" height="15" fill="rgb(224,148,33)" fg:x="679" fg:w="4"/><text x="54.3536%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (145 samples, 11.55%)</title><rect x="42.9482%" y="309" width="11.5538%" height="15" fill="rgb(243,6,36)" fg:x="539" fg:w="145"/><text x="43.1982%" y="319.50">&lt;regex::regex::st..</text></g><g><title>regex::builders::string::RegexBuilder::build (145 samples, 11.55%)</title><rect x="42.9482%" y="293" width="11.5538%" height="15" fill="rgb(230,102,11)" fg:x="539" fg:w="145"/><text x="43.1982%" y="303.50">regex::builders::..</text></g><g><title>regex_automata::meta::regex::Builder::build (144 samples, 11.47%)</title><rect x="43.0279%" y="277" width="11.4741%" height="15" fill="rgb(234,148,36)" fg:x="540" fg:w="144"/><text x="43.2779%" y="287.50">regex_automata::m..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="53.9442%" y="261" width="0.5578%" height="15" fill="rgb(251,153,25)" fg:x="677" fg:w="7"/><text x="54.1942%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="53.9442%" y="245" width="0.5578%" height="15" fill="rgb(215,129,8)" fg:x="677" fg:w="7"/><text x="54.1942%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.4223%" y="229" width="0.0797%" height="15" fill="rgb(224,128,35)" fg:x="683" fg:w="1"/><text x="54.6723%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (1 samples, 0.08%)</title><rect x="54.5020%" y="309" width="0.0797%" height="15" fill="rgb(237,56,52)" fg:x="684" fg:w="1"/><text x="54.7520%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.5817%" y="261" width="0.0797%" height="15" fill="rgb(234,213,19)" fg:x="685" fg:w="1"/><text x="54.8317%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.5817%" y="245" width="0.0797%" height="15" fill="rgb(252,82,23)" fg:x="685" fg:w="1"/><text x="54.8317%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="54.5817%" y="309" width="0.1594%" height="15" fill="rgb(254,201,21)" fg:x="685" fg:w="2"/><text x="54.8317%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="54.5817%" y="293" width="0.1594%" height="15" fill="rgb(250,186,11)" fg:x="685" fg:w="2"/><text x="54.8317%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="54.5817%" y="277" width="0.1594%" height="15" fill="rgb(211,174,5)" fg:x="685" fg:w="2"/><text x="54.8317%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="54.6614%" y="261" width="0.0797%" height="15" fill="rgb(214,121,10)" fg:x="686" fg:w="1"/><text x="54.9114%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.6614%" y="245" width="0.0797%" height="15" fill="rgb(241,66,2)" fg:x="686" fg:w="1"/><text x="54.9114%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.6614%" y="229" width="0.0797%" height="15" fill="rgb(220,167,19)" fg:x="686" fg:w="1"/><text x="54.9114%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="54.9004%" y="261" width="0.0797%" height="15" fill="rgb(231,54,50)" fg:x="689" fg:w="1"/><text x="55.1504%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="54.9004%" y="245" width="0.0797%" height="15" fill="rgb(239,217,53)" fg:x="689" fg:w="1"/><text x="55.1504%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.32%)</title><rect x="54.7410%" y="293" width="0.3187%" height="15" fill="rgb(248,8,0)" fg:x="687" fg:w="4"/><text x="54.9910%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="54.8207%" y="277" width="0.2390%" height="15" fill="rgb(229,118,37)" fg:x="688" fg:w="3"/><text x="55.0707%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="54.9801%" y="261" width="0.0797%" height="15" fill="rgb(253,223,43)" fg:x="690" fg:w="1"/><text x="55.2301%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.9801%" y="245" width="0.0797%" height="15" fill="rgb(211,77,36)" fg:x="690" fg:w="1"/><text x="55.2301%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.9801%" y="229" width="0.0797%" height="15" fill="rgb(219,3,53)" fg:x="690" fg:w="1"/><text x="55.2301%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.9801%" y="213" width="0.0797%" height="15" fill="rgb(244,45,42)" fg:x="690" fg:w="1"/><text x="55.2301%" y="223.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="55.3785%" y="181" width="0.0797%" height="15" fill="rgb(225,95,27)" fg:x="695" fg:w="1"/><text x="55.6285%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="55.2988%" y="213" width="0.2390%" height="15" fill="rgb(207,74,8)" fg:x="694" fg:w="3"/><text x="55.5488%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="55.2988%" y="197" width="0.2390%" height="15" fill="rgb(243,63,36)" fg:x="694" fg:w="3"/><text x="55.5488%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.4582%" y="181" width="0.0797%" height="15" fill="rgb(211,180,12)" fg:x="696" fg:w="1"/><text x="55.7082%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="55.0598%" y="245" width="0.5578%" height="15" fill="rgb(254,166,49)" fg:x="691" fg:w="7"/><text x="55.3098%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="55.0598%" y="229" width="0.5578%" height="15" fill="rgb(205,19,0)" fg:x="691" fg:w="7"/><text x="55.3098%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="55.5378%" y="213" width="0.0797%" height="15" fill="rgb(224,172,32)" fg:x="697" fg:w="1"/><text x="55.7878%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (160 samples, 12.75%)</title><rect x="42.9482%" y="325" width="12.7490%" height="15" fill="rgb(254,136,30)" fg:x="539" fg:w="160"/><text x="43.1982%" y="335.50">indefinite::rules::..</text></g><g><title>regex::regex::string::Regex::is_match_at (12 samples, 0.96%)</title><rect x="54.7410%" y="309" width="0.9562%" height="15" fill="rgb(246,19,35)" fg:x="687" fg:w="12"/><text x="54.9910%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.64%)</title><rect x="55.0598%" y="293" width="0.6375%" height="15" fill="rgb(219,24,36)" fg:x="691" fg:w="8"/><text x="55.3098%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="55.0598%" y="277" width="0.6375%" height="15" fill="rgb(251,55,1)" fg:x="691" fg:w="8"/><text x="55.3098%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="55.0598%" y="261" width="0.6375%" height="15" fill="rgb(218,117,39)" fg:x="691" fg:w="8"/><text x="55.3098%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="55.6175%" y="245" width="0.0797%" height="15" fill="rgb(248,169,11)" fg:x="698" fg:w="1"/><text x="55.8675%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="55.6175%" y="229" width="0.0797%" height="15" fill="rgb(244,40,44)" fg:x="698" fg:w="1"/><text x="55.8675%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.8566%" y="245" width="0.1594%" height="15" fill="rgb(234,62,37)" fg:x="701" fg:w="2"/><text x="56.1066%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="56.0159%" y="245" width="0.2390%" height="15" fill="rgb(207,117,42)" fg:x="703" fg:w="3"/><text x="56.2659%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="56.0956%" y="229" width="0.1594%" height="15" fill="rgb(213,43,2)" fg:x="704" fg:w="2"/><text x="56.3456%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="56.0956%" y="213" width="0.1594%" height="15" fill="rgb(244,202,51)" fg:x="704" fg:w="2"/><text x="56.3456%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="56.0956%" y="197" width="0.1594%" height="15" fill="rgb(253,174,46)" fg:x="704" fg:w="2"/><text x="56.3456%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="56.0956%" y="181" width="0.1594%" height="15" fill="rgb(251,23,1)" fg:x="704" fg:w="2"/><text x="56.3456%" y="191.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="56.2550%" y="245" width="0.0797%" height="15" fill="rgb(253,26,1)" fg:x="706" fg:w="1"/><text x="56.5050%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2550%" y="229" width="0.0797%" height="15" fill="rgb(216,89,31)" fg:x="706" fg:w="1"/><text x="56.5050%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="56.4940%" y="229" width="0.0797%" height="15" fill="rgb(209,109,5)" fg:x="709" fg:w="1"/><text x="56.7440%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="56.6534%" y="197" width="0.0797%" height="15" fill="rgb(229,63,13)" fg:x="711" fg:w="1"/><text x="56.9034%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.6534%" y="181" width="0.0797%" height="15" fill="rgb(238,137,54)" fg:x="711" fg:w="1"/><text x="56.9034%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.6534%" y="165" width="0.0797%" height="15" fill="rgb(228,1,9)" fg:x="711" fg:w="1"/><text x="56.9034%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.6534%" y="149" width="0.0797%" height="15" fill="rgb(249,120,48)" fg:x="711" fg:w="1"/><text x="56.9034%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="56.6534%" y="213" width="0.1594%" height="15" fill="rgb(209,72,36)" fg:x="711" fg:w="2"/><text x="56.9034%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="56.7331%" y="197" width="0.0797%" height="15" fill="rgb(247,98,49)" fg:x="712" fg:w="1"/><text x="56.9831%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="56.7331%" y="181" width="0.0797%" height="15" fill="rgb(233,75,36)" fg:x="712" fg:w="1"/><text x="56.9831%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="56.7331%" y="165" width="0.0797%" height="15" fill="rgb(225,14,24)" fg:x="712" fg:w="1"/><text x="56.9831%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="56.7331%" y="149" width="0.0797%" height="15" fill="rgb(237,193,20)" fg:x="712" fg:w="1"/><text x="56.9831%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.8924%" y="181" width="0.0797%" height="15" fill="rgb(239,122,19)" fg:x="714" fg:w="1"/><text x="57.1424%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.8924%" y="165" width="0.0797%" height="15" fill="rgb(231,220,10)" fg:x="714" fg:w="1"/><text x="57.1424%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.8924%" y="149" width="0.0797%" height="15" fill="rgb(220,66,15)" fg:x="714" fg:w="1"/><text x="57.1424%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::new (9 samples, 0.72%)</title><rect x="56.3347%" y="245" width="0.7171%" height="15" fill="rgb(215,171,52)" fg:x="707" fg:w="9"/><text x="56.5847%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="56.5737%" y="229" width="0.4781%" height="15" fill="rgb(241,169,50)" fg:x="710" fg:w="6"/><text x="56.8237%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="56.8127%" y="213" width="0.2390%" height="15" fill="rgb(236,189,0)" fg:x="713" fg:w="3"/><text x="57.0627%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="56.8924%" y="197" width="0.1594%" height="15" fill="rgb(217,147,20)" fg:x="714" fg:w="2"/><text x="57.1424%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.9721%" y="181" width="0.0797%" height="15" fill="rgb(206,188,39)" fg:x="715" fg:w="1"/><text x="57.2221%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.9721%" y="165" width="0.0797%" height="15" fill="rgb(227,118,25)" fg:x="715" fg:w="1"/><text x="57.2221%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.9721%" y="149" width="0.0797%" height="15" fill="rgb(248,171,40)" fg:x="715" fg:w="1"/><text x="57.2221%" y="159.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="57.0518%" y="197" width="0.1594%" height="15" fill="rgb(251,90,54)" fg:x="716" fg:w="2"/><text x="57.3018%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.1315%" y="181" width="0.0797%" height="15" fill="rgb(234,11,46)" fg:x="717" fg:w="1"/><text x="57.3815%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="57.2112%" y="197" width="0.0797%" height="15" fill="rgb(229,134,13)" fg:x="718" fg:w="1"/><text x="57.4612%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="57.2112%" y="181" width="0.0797%" height="15" fill="rgb(223,129,3)" fg:x="718" fg:w="1"/><text x="57.4612%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="57.2112%" y="165" width="0.0797%" height="15" fill="rgb(221,124,13)" fg:x="718" fg:w="1"/><text x="57.4612%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="57.0518%" y="245" width="0.3187%" height="15" fill="rgb(234,3,18)" fg:x="716" fg:w="4"/><text x="57.3018%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="57.0518%" y="229" width="0.3187%" height="15" fill="rgb(249,199,20)" fg:x="716" fg:w="4"/><text x="57.3018%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="57.0518%" y="213" width="0.3187%" height="15" fill="rgb(224,134,6)" fg:x="716" fg:w="4"/><text x="57.3018%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="57.2908%" y="197" width="0.0797%" height="15" fill="rgb(254,83,26)" fg:x="719" fg:w="1"/><text x="57.5408%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.2908%" y="181" width="0.0797%" height="15" fill="rgb(217,88,9)" fg:x="719" fg:w="1"/><text x="57.5408%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.2908%" y="165" width="0.0797%" height="15" fill="rgb(225,73,2)" fg:x="719" fg:w="1"/><text x="57.5408%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.2908%" y="149" width="0.0797%" height="15" fill="rgb(226,44,39)" fg:x="719" fg:w="1"/><text x="57.5408%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.3705%" y="181" width="0.0797%" height="15" fill="rgb(228,53,17)" fg:x="720" fg:w="1"/><text x="57.6205%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.3705%" y="165" width="0.0797%" height="15" fill="rgb(212,27,27)" fg:x="720" fg:w="1"/><text x="57.6205%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.3705%" y="149" width="0.0797%" height="15" fill="rgb(241,50,6)" fg:x="720" fg:w="1"/><text x="57.6205%" y="159.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="57.3705%" y="197" width="0.1594%" height="15" fill="rgb(225,28,51)" fg:x="720" fg:w="2"/><text x="57.6205%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="57.4502%" y="181" width="0.0797%" height="15" fill="rgb(215,33,16)" fg:x="721" fg:w="1"/><text x="57.7002%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (24 samples, 1.91%)</title><rect x="55.6972%" y="293" width="1.9124%" height="15" fill="rgb(243,40,39)" fg:x="699" fg:w="24"/><text x="55.9472%" y="303.50">&lt;..</text></g><g><title>regex::builders::string::RegexBuilder::build (24 samples, 1.91%)</title><rect x="55.6972%" y="277" width="1.9124%" height="15" fill="rgb(225,11,42)" fg:x="699" fg:w="24"/><text x="55.9472%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.91%)</title><rect x="55.6972%" y="261" width="1.9124%" height="15" fill="rgb(241,220,38)" fg:x="699" fg:w="24"/><text x="55.9472%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="57.3705%" y="245" width="0.2390%" height="15" fill="rgb(244,52,35)" fg:x="720" fg:w="3"/><text x="57.6205%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="57.3705%" y="229" width="0.2390%" height="15" fill="rgb(246,42,46)" fg:x="720" fg:w="3"/><text x="57.6205%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="57.3705%" y="213" width="0.2390%" height="15" fill="rgb(205,184,13)" fg:x="720" fg:w="3"/><text x="57.6205%" y="223.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="57.5299%" y="197" width="0.0797%" height="15" fill="rgb(209,48,36)" fg:x="722" fg:w="1"/><text x="57.7799%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="57.6096%" y="293" width="0.1594%" height="15" fill="rgb(244,34,51)" fg:x="723" fg:w="2"/><text x="57.8596%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="57.6892%" y="277" width="0.0797%" height="15" fill="rgb(221,107,33)" fg:x="724" fg:w="1"/><text x="57.9392%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="57.6892%" y="261" width="0.0797%" height="15" fill="rgb(224,203,12)" fg:x="724" fg:w="1"/><text x="57.9392%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="57.6892%" y="245" width="0.0797%" height="15" fill="rgb(230,215,18)" fg:x="724" fg:w="1"/><text x="57.9392%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.6892%" y="229" width="0.0797%" height="15" fill="rgb(206,185,35)" fg:x="724" fg:w="1"/><text x="57.9392%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.6892%" y="213" width="0.0797%" height="15" fill="rgb(228,140,34)" fg:x="724" fg:w="1"/><text x="57.9392%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6892%" y="197" width="0.0797%" height="15" fill="rgb(208,93,13)" fg:x="724" fg:w="1"/><text x="57.9392%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (343 samples, 27.33%)</title><rect x="30.5179%" y="405" width="27.3307%" height="15" fill="rgb(221,193,39)" fg:x="383" fg:w="343"/><text x="30.7679%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (315 samples, 25.10%)</title><rect x="32.7490%" y="389" width="25.0996%" height="15" fill="rgb(241,132,34)" fg:x="411" fg:w="315"/><text x="32.9990%" y="399.50">plugins_core::looking::model::Unqualifie..</text></g><g><title>indefinite::indefinite (315 samples, 25.10%)</title><rect x="32.7490%" y="373" width="25.0996%" height="15" fill="rgb(221,141,10)" fg:x="411" fg:w="315"/><text x="32.9990%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (314 samples, 25.02%)</title><rect x="32.8287%" y="357" width="25.0199%" height="15" fill="rgb(226,90,31)" fg:x="412" fg:w="314"/><text x="33.0787%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (314 samples, 25.02%)</title><rect x="32.8287%" y="341" width="25.0199%" height="15" fill="rgb(243,75,5)" fg:x="412" fg:w="314"/><text x="33.0787%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (27 samples, 2.15%)</title><rect x="55.6972%" y="325" width="2.1514%" height="15" fill="rgb(227,156,21)" fg:x="699" fg:w="27"/><text x="55.9472%" y="335.50">i..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (27 samples, 2.15%)</title><rect x="55.6972%" y="309" width="2.1514%" height="15" fill="rgb(250,195,8)" fg:x="699" fg:w="27"/><text x="55.9472%" y="319.50">i..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="57.7689%" y="293" width="0.0797%" height="15" fill="rgb(220,134,5)" fg:x="725" fg:w="1"/><text x="58.0189%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="57.7689%" y="277" width="0.0797%" height="15" fill="rgb(246,106,34)" fg:x="725" fg:w="1"/><text x="58.0189%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="57.7689%" y="261" width="0.0797%" height="15" fill="rgb(205,1,4)" fg:x="725" fg:w="1"/><text x="58.0189%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="57.7689%" y="245" width="0.0797%" height="15" fill="rgb(224,151,29)" fg:x="725" fg:w="1"/><text x="58.0189%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="57.8486%" y="325" width="0.0797%" height="15" fill="rgb(251,196,0)" fg:x="726" fg:w="1"/><text x="58.0986%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.8486%" y="309" width="0.0797%" height="15" fill="rgb(212,127,0)" fg:x="726" fg:w="1"/><text x="58.0986%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.8486%" y="293" width="0.0797%" height="15" fill="rgb(236,71,53)" fg:x="726" fg:w="1"/><text x="58.0986%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.8486%" y="277" width="0.0797%" height="15" fill="rgb(227,99,0)" fg:x="726" fg:w="1"/><text x="58.0986%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.8486%" y="261" width="0.0797%" height="15" fill="rgb(239,89,21)" fg:x="726" fg:w="1"/><text x="58.0986%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.8486%" y="245" width="0.0797%" height="15" fill="rgb(243,122,19)" fg:x="726" fg:w="1"/><text x="58.0986%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="57.8486%" y="341" width="0.1594%" height="15" fill="rgb(229,192,45)" fg:x="726" fg:w="2"/><text x="58.0986%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.9283%" y="325" width="0.0797%" height="15" fill="rgb(235,165,35)" fg:x="727" fg:w="1"/><text x="58.1783%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="57.9283%" y="309" width="0.0797%" height="15" fill="rgb(253,202,0)" fg:x="727" fg:w="1"/><text x="58.1783%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="57.9283%" y="293" width="0.0797%" height="15" fill="rgb(235,51,20)" fg:x="727" fg:w="1"/><text x="58.1783%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="57.9283%" y="277" width="0.0797%" height="15" fill="rgb(218,95,46)" fg:x="727" fg:w="1"/><text x="58.1783%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="57.9283%" y="261" width="0.0797%" height="15" fill="rgb(212,81,10)" fg:x="727" fg:w="1"/><text x="58.1783%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.9283%" y="245" width="0.0797%" height="15" fill="rgb(240,59,0)" fg:x="727" fg:w="1"/><text x="58.1783%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="57.9283%" y="229" width="0.0797%" height="15" fill="rgb(212,191,42)" fg:x="727" fg:w="1"/><text x="58.1783%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="57.9283%" y="213" width="0.0797%" height="15" fill="rgb(233,140,3)" fg:x="727" fg:w="1"/><text x="58.1783%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="57.9283%" y="197" width="0.0797%" height="15" fill="rgb(215,69,23)" fg:x="727" fg:w="1"/><text x="58.1783%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="57.9283%" y="181" width="0.0797%" height="15" fill="rgb(240,202,20)" fg:x="727" fg:w="1"/><text x="58.1783%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="57.9283%" y="165" width="0.0797%" height="15" fill="rgb(209,146,50)" fg:x="727" fg:w="1"/><text x="58.1783%" y="175.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="57.9283%" y="149" width="0.0797%" height="15" fill="rgb(253,102,54)" fg:x="727" fg:w="1"/><text x="58.1783%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="57.8486%" y="389" width="0.3187%" height="15" fill="rgb(250,173,47)" fg:x="726" fg:w="4"/><text x="58.0986%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="57.8486%" y="373" width="0.3187%" height="15" fill="rgb(232,142,7)" fg:x="726" fg:w="4"/><text x="58.0986%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="57.8486%" y="357" width="0.3187%" height="15" fill="rgb(230,157,47)" fg:x="726" fg:w="4"/><text x="58.0986%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="58.0080%" y="341" width="0.1594%" height="15" fill="rgb(214,177,35)" fg:x="728" fg:w="2"/><text x="58.2580%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.0876%" y="325" width="0.0797%" height="15" fill="rgb(234,119,46)" fg:x="729" fg:w="1"/><text x="58.3376%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.0876%" y="309" width="0.0797%" height="15" fill="rgb(241,180,50)" fg:x="729" fg:w="1"/><text x="58.3376%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.0876%" y="293" width="0.0797%" height="15" fill="rgb(221,54,25)" fg:x="729" fg:w="1"/><text x="58.3376%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.0876%" y="277" width="0.0797%" height="15" fill="rgb(209,157,44)" fg:x="729" fg:w="1"/><text x="58.3376%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.0876%" y="261" width="0.0797%" height="15" fill="rgb(246,115,41)" fg:x="729" fg:w="1"/><text x="58.3376%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.0876%" y="245" width="0.0797%" height="15" fill="rgb(229,86,1)" fg:x="729" fg:w="1"/><text x="58.3376%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.0876%" y="229" width="0.0797%" height="15" fill="rgb(240,108,53)" fg:x="729" fg:w="1"/><text x="58.3376%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.0876%" y="213" width="0.0797%" height="15" fill="rgb(227,134,2)" fg:x="729" fg:w="1"/><text x="58.3376%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.0876%" y="197" width="0.0797%" height="15" fill="rgb(213,129,25)" fg:x="729" fg:w="1"/><text x="58.3376%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.0876%" y="181" width="0.0797%" height="15" fill="rgb(226,35,21)" fg:x="729" fg:w="1"/><text x="58.3376%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.0876%" y="165" width="0.0797%" height="15" fill="rgb(208,129,26)" fg:x="729" fg:w="1"/><text x="58.3376%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.1673%" y="357" width="0.0797%" height="15" fill="rgb(224,83,6)" fg:x="730" fg:w="1"/><text x="58.4173%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.2470%" y="357" width="0.0797%" height="15" fill="rgb(227,52,39)" fg:x="731" fg:w="1"/><text x="58.4970%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.2470%" y="341" width="0.0797%" height="15" fill="rgb(241,30,17)" fg:x="731" fg:w="1"/><text x="58.4970%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.2470%" y="325" width="0.0797%" height="15" fill="rgb(246,186,42)" fg:x="731" fg:w="1"/><text x="58.4970%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.56%)</title><rect x="57.8486%" y="405" width="0.5578%" height="15" fill="rgb(221,169,15)" fg:x="726" fg:w="7"/><text x="58.0986%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="58.1673%" y="389" width="0.2390%" height="15" fill="rgb(235,108,21)" fg:x="730" fg:w="3"/><text x="58.4173%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="58.1673%" y="373" width="0.2390%" height="15" fill="rgb(219,148,30)" fg:x="730" fg:w="3"/><text x="58.4173%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="58.3267%" y="357" width="0.0797%" height="15" fill="rgb(220,109,5)" fg:x="732" fg:w="1"/><text x="58.5767%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="58.3267%" y="341" width="0.0797%" height="15" fill="rgb(213,203,48)" fg:x="732" fg:w="1"/><text x="58.5767%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="58.3267%" y="325" width="0.0797%" height="15" fill="rgb(244,71,33)" fg:x="732" fg:w="1"/><text x="58.5767%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="58.3267%" y="309" width="0.0797%" height="15" fill="rgb(209,23,2)" fg:x="732" fg:w="1"/><text x="58.5767%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.3267%" y="293" width="0.0797%" height="15" fill="rgb(219,97,7)" fg:x="732" fg:w="1"/><text x="58.5767%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.3267%" y="277" width="0.0797%" height="15" fill="rgb(216,161,23)" fg:x="732" fg:w="1"/><text x="58.5767%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.3267%" y="261" width="0.0797%" height="15" fill="rgb(207,45,42)" fg:x="732" fg:w="1"/><text x="58.5767%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="58.4064%" y="373" width="0.1594%" height="15" fill="rgb(241,61,4)" fg:x="733" fg:w="2"/><text x="58.6564%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="58.4064%" y="357" width="0.1594%" height="15" fill="rgb(236,170,1)" fg:x="733" fg:w="2"/><text x="58.6564%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="58.4064%" y="341" width="0.1594%" height="15" fill="rgb(239,72,5)" fg:x="733" fg:w="2"/><text x="58.6564%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.4064%" y="325" width="0.1594%" height="15" fill="rgb(214,13,50)" fg:x="733" fg:w="2"/><text x="58.6564%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="58.4064%" y="309" width="0.1594%" height="15" fill="rgb(224,88,9)" fg:x="733" fg:w="2"/><text x="58.6564%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="58.4064%" y="293" width="0.1594%" height="15" fill="rgb(238,192,34)" fg:x="733" fg:w="2"/><text x="58.6564%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6454%" y="341" width="0.0797%" height="15" fill="rgb(217,203,50)" fg:x="736" fg:w="1"/><text x="58.8954%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6454%" y="325" width="0.0797%" height="15" fill="rgb(241,123,32)" fg:x="736" fg:w="1"/><text x="58.8954%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.6454%" y="309" width="0.0797%" height="15" fill="rgb(248,151,39)" fg:x="736" fg:w="1"/><text x="58.8954%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="58.6454%" y="357" width="0.1594%" height="15" fill="rgb(208,89,6)" fg:x="736" fg:w="2"/><text x="58.8954%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.7251%" y="341" width="0.0797%" height="15" fill="rgb(254,43,26)" fg:x="737" fg:w="1"/><text x="58.9751%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.7251%" y="325" width="0.0797%" height="15" fill="rgb(216,158,13)" fg:x="737" fg:w="1"/><text x="58.9751%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="58.7251%" y="309" width="0.0797%" height="15" fill="rgb(212,47,37)" fg:x="737" fg:w="1"/><text x="58.9751%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.7251%" y="293" width="0.0797%" height="15" fill="rgb(254,16,10)" fg:x="737" fg:w="1"/><text x="58.9751%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="58.7251%" y="277" width="0.0797%" height="15" fill="rgb(223,228,16)" fg:x="737" fg:w="1"/><text x="58.9751%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="58.7251%" y="261" width="0.0797%" height="15" fill="rgb(249,108,50)" fg:x="737" fg:w="1"/><text x="58.9751%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.7251%" y="245" width="0.0797%" height="15" fill="rgb(208,220,5)" fg:x="737" fg:w="1"/><text x="58.9751%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="58.7251%" y="229" width="0.0797%" height="15" fill="rgb(217,89,48)" fg:x="737" fg:w="1"/><text x="58.9751%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (6 samples, 0.48%)</title><rect x="58.4064%" y="389" width="0.4781%" height="15" fill="rgb(212,113,41)" fg:x="733" fg:w="6"/><text x="58.6564%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="58.5657%" y="373" width="0.3187%" height="15" fill="rgb(231,127,5)" fg:x="735" fg:w="4"/><text x="58.8157%" y="383.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="58.8048%" y="357" width="0.0797%" height="15" fill="rgb(217,141,17)" fg:x="738" fg:w="1"/><text x="59.0548%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.8048%" y="341" width="0.0797%" height="15" fill="rgb(245,125,54)" fg:x="738" fg:w="1"/><text x="59.0548%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="58.8048%" y="325" width="0.0797%" height="15" fill="rgb(248,125,3)" fg:x="738" fg:w="1"/><text x="59.0548%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.8845%" y="309" width="0.0797%" height="15" fill="rgb(236,119,51)" fg:x="739" fg:w="1"/><text x="59.1345%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="58.8845%" y="293" width="0.0797%" height="15" fill="rgb(239,99,8)" fg:x="739" fg:w="1"/><text x="59.1345%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="58.8845%" y="325" width="0.1594%" height="15" fill="rgb(224,228,4)" fg:x="739" fg:w="2"/><text x="59.1345%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.9641%" y="309" width="0.0797%" height="15" fill="rgb(220,131,45)" fg:x="740" fg:w="1"/><text x="59.2141%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="58.9641%" y="293" width="0.0797%" height="15" fill="rgb(215,62,5)" fg:x="740" fg:w="1"/><text x="59.2141%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="58.9641%" y="277" width="0.0797%" height="15" fill="rgb(253,12,24)" fg:x="740" fg:w="1"/><text x="59.2141%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="58.9641%" y="261" width="0.0797%" height="15" fill="rgb(248,120,50)" fg:x="740" fg:w="1"/><text x="59.2141%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="58.9641%" y="245" width="0.0797%" height="15" fill="rgb(245,194,10)" fg:x="740" fg:w="1"/><text x="59.2141%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.9641%" y="229" width="0.0797%" height="15" fill="rgb(241,149,38)" fg:x="740" fg:w="1"/><text x="59.2141%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="58.9641%" y="213" width="0.0797%" height="15" fill="rgb(219,215,7)" fg:x="740" fg:w="1"/><text x="59.2141%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="58.9641%" y="197" width="0.0797%" height="15" fill="rgb(208,120,31)" fg:x="740" fg:w="1"/><text x="59.2141%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="58.9641%" y="181" width="0.0797%" height="15" fill="rgb(244,30,8)" fg:x="740" fg:w="1"/><text x="59.2141%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="58.9641%" y="165" width="0.0797%" height="15" fill="rgb(238,35,44)" fg:x="740" fg:w="1"/><text x="59.2141%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="58.9641%" y="149" width="0.0797%" height="15" fill="rgb(243,218,37)" fg:x="740" fg:w="1"/><text x="59.2141%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.9641%" y="133" width="0.0797%" height="15" fill="rgb(218,169,10)" fg:x="740" fg:w="1"/><text x="59.2141%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0438%" y="309" width="0.0797%" height="15" fill="rgb(221,144,10)" fg:x="741" fg:w="1"/><text x="59.2938%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0438%" y="293" width="0.0797%" height="15" fill="rgb(226,41,38)" fg:x="741" fg:w="1"/><text x="59.2938%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0438%" y="277" width="0.0797%" height="15" fill="rgb(228,3,1)" fg:x="741" fg:w="1"/><text x="59.2938%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="59.0438%" y="325" width="0.1594%" height="15" fill="rgb(209,129,12)" fg:x="741" fg:w="2"/><text x="59.2938%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.1235%" y="309" width="0.0797%" height="15" fill="rgb(213,136,33)" fg:x="742" fg:w="1"/><text x="59.3735%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1235%" y="293" width="0.0797%" height="15" fill="rgb(209,181,29)" fg:x="742" fg:w="1"/><text x="59.3735%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="59.1235%" y="277" width="0.0797%" height="15" fill="rgb(234,173,18)" fg:x="742" fg:w="1"/><text x="59.3735%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.1235%" y="261" width="0.0797%" height="15" fill="rgb(227,73,47)" fg:x="742" fg:w="1"/><text x="59.3735%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.1235%" y="245" width="0.0797%" height="15" fill="rgb(234,9,34)" fg:x="742" fg:w="1"/><text x="59.3735%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.2032%" y="229" width="0.0797%" height="15" fill="rgb(235,172,15)" fg:x="743" fg:w="1"/><text x="59.4532%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.2032%" y="213" width="0.0797%" height="15" fill="rgb(245,61,2)" fg:x="743" fg:w="1"/><text x="59.4532%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.2032%" y="197" width="0.0797%" height="15" fill="rgb(238,39,47)" fg:x="743" fg:w="1"/><text x="59.4532%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.2032%" y="181" width="0.0797%" height="15" fill="rgb(234,37,24)" fg:x="743" fg:w="1"/><text x="59.4532%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="59.2032%" y="165" width="0.0797%" height="15" fill="rgb(248,223,24)" fg:x="743" fg:w="1"/><text x="59.4532%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.2032%" y="149" width="0.0797%" height="15" fill="rgb(223,12,15)" fg:x="743" fg:w="1"/><text x="59.4532%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.2032%" y="133" width="0.0797%" height="15" fill="rgb(249,6,3)" fg:x="743" fg:w="1"/><text x="59.4532%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="59.2829%" y="197" width="0.0797%" height="15" fill="rgb(237,105,33)" fg:x="744" fg:w="1"/><text x="59.5329%" y="207.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="59.2829%" y="181" width="0.0797%" height="15" fill="rgb(252,208,35)" fg:x="744" fg:w="1"/><text x="59.5329%" y="191.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="59.2032%" y="325" width="0.3187%" height="15" fill="rgb(215,181,35)" fg:x="743" fg:w="4"/><text x="59.4532%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="59.2032%" y="309" width="0.3187%" height="15" fill="rgb(246,212,3)" fg:x="743" fg:w="4"/><text x="59.4532%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="59.2032%" y="293" width="0.3187%" height="15" fill="rgb(247,156,24)" fg:x="743" fg:w="4"/><text x="59.4532%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="59.2032%" y="277" width="0.3187%" height="15" fill="rgb(248,9,31)" fg:x="743" fg:w="4"/><text x="59.4532%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="59.2032%" y="261" width="0.3187%" height="15" fill="rgb(234,26,45)" fg:x="743" fg:w="4"/><text x="59.4532%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="59.2032%" y="245" width="0.3187%" height="15" fill="rgb(249,11,32)" fg:x="743" fg:w="4"/><text x="59.4532%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.2829%" y="229" width="0.2390%" height="15" fill="rgb(249,162,33)" fg:x="744" fg:w="3"/><text x="59.5329%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="59.2829%" y="213" width="0.2390%" height="15" fill="rgb(232,4,32)" fg:x="744" fg:w="3"/><text x="59.5329%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="59.3625%" y="197" width="0.1594%" height="15" fill="rgb(212,5,45)" fg:x="745" fg:w="2"/><text x="59.6125%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.3625%" y="181" width="0.1594%" height="15" fill="rgb(227,95,13)" fg:x="745" fg:w="2"/><text x="59.6125%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.3625%" y="165" width="0.1594%" height="15" fill="rgb(223,205,10)" fg:x="745" fg:w="2"/><text x="59.6125%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="59.3625%" y="149" width="0.1594%" height="15" fill="rgb(222,178,8)" fg:x="745" fg:w="2"/><text x="59.6125%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.3625%" y="133" width="0.1594%" height="15" fill="rgb(216,13,22)" fg:x="745" fg:w="2"/><text x="59.6125%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.3625%" y="117" width="0.1594%" height="15" fill="rgb(240,167,12)" fg:x="745" fg:w="2"/><text x="59.6125%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="59.4422%" y="101" width="0.0797%" height="15" fill="rgb(235,68,35)" fg:x="746" fg:w="1"/><text x="59.6922%" y="111.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="59.5219%" y="325" width="0.0797%" height="15" fill="rgb(253,40,27)" fg:x="747" fg:w="1"/><text x="59.7719%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.5219%" y="309" width="0.0797%" height="15" fill="rgb(214,19,28)" fg:x="747" fg:w="1"/><text x="59.7719%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="59.6016%" y="229" width="0.1594%" height="15" fill="rgb(210,167,45)" fg:x="748" fg:w="2"/><text x="59.8516%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="59.6016%" y="213" width="0.1594%" height="15" fill="rgb(232,97,40)" fg:x="748" fg:w="2"/><text x="59.8516%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="59.6016%" y="197" width="0.1594%" height="15" fill="rgb(250,35,23)" fg:x="748" fg:w="2"/><text x="59.8516%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 1.51%)</title><rect x="58.4064%" y="405" width="1.5139%" height="15" fill="rgb(248,47,53)" fg:x="733" fg:w="19"/><text x="58.6564%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (13 samples, 1.04%)</title><rect x="58.8845%" y="389" width="1.0359%" height="15" fill="rgb(226,58,50)" fg:x="739" fg:w="13"/><text x="59.1345%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (13 samples, 1.04%)</title><rect x="58.8845%" y="373" width="1.0359%" height="15" fill="rgb(217,105,26)" fg:x="739" fg:w="13"/><text x="59.1345%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.04%)</title><rect x="58.8845%" y="357" width="1.0359%" height="15" fill="rgb(208,64,1)" fg:x="739" fg:w="13"/><text x="59.1345%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.04%)</title><rect x="58.8845%" y="341" width="1.0359%" height="15" fill="rgb(214,80,1)" fg:x="739" fg:w="13"/><text x="59.1345%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="59.6016%" y="325" width="0.3187%" height="15" fill="rgb(206,175,26)" fg:x="748" fg:w="4"/><text x="59.8516%" y="335.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="59.6016%" y="309" width="0.3187%" height="15" fill="rgb(235,156,37)" fg:x="748" fg:w="4"/><text x="59.8516%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="59.6016%" y="293" width="0.3187%" height="15" fill="rgb(213,100,9)" fg:x="748" fg:w="4"/><text x="59.8516%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="59.6016%" y="277" width="0.3187%" height="15" fill="rgb(241,15,13)" fg:x="748" fg:w="4"/><text x="59.8516%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="59.6016%" y="261" width="0.3187%" height="15" fill="rgb(205,97,43)" fg:x="748" fg:w="4"/><text x="59.8516%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="59.6016%" y="245" width="0.3187%" height="15" fill="rgb(216,106,32)" fg:x="748" fg:w="4"/><text x="59.8516%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="59.7610%" y="229" width="0.1594%" height="15" fill="rgb(226,200,8)" fg:x="750" fg:w="2"/><text x="60.0110%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.8406%" y="213" width="0.0797%" height="15" fill="rgb(244,54,29)" fg:x="751" fg:w="1"/><text x="60.0906%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8406%" y="197" width="0.0797%" height="15" fill="rgb(252,169,12)" fg:x="751" fg:w="1"/><text x="60.0906%" y="207.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (378 samples, 30.12%)</title><rect x="29.8805%" y="437" width="30.1195%" height="15" fill="rgb(231,199,11)" fg:x="375" fg:w="378"/><text x="30.1305%" y="447.50">&lt;plugins_core::looking::actions::LookAction as ke..</text></g><g><title>plugins_core::looking::model::new_area_observation (371 samples, 29.56%)</title><rect x="30.4382%" y="421" width="29.5618%" height="15" fill="rgb(233,191,18)" fg:x="382" fg:w="371"/><text x="30.6882%" y="431.50">plugins_core::looking::model::new_area_observati..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="59.9203%" y="405" width="0.0797%" height="15" fill="rgb(215,83,47)" fg:x="752" fg:w="1"/><text x="60.1703%" y="415.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (380 samples, 30.28%)</title><rect x="29.8008%" y="565" width="30.2789%" height="15" fill="rgb(251,67,19)" fg:x="374" fg:w="380"/><text x="30.0508%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (379 samples, 30.20%)</title><rect x="29.8805%" y="549" width="30.1992%" height="15" fill="rgb(240,7,20)" fg:x="375" fg:w="379"/><text x="30.1305%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plu..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (379 samples, 30.20%)</title><rect x="29.8805%" y="533" width="30.1992%" height="15" fill="rgb(210,150,26)" fg:x="375" fg:w="379"/><text x="30.1305%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (379 samples, 30.20%)</title><rect x="29.8805%" y="517" width="30.1992%" height="15" fill="rgb(228,75,42)" fg:x="375" fg:w="379"/><text x="30.1305%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (379 samples, 30.20%)</title><rect x="29.8805%" y="501" width="30.1992%" height="15" fill="rgb(237,134,48)" fg:x="375" fg:w="379"/><text x="30.1305%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (379 samples, 30.20%)</title><rect x="29.8805%" y="485" width="30.1992%" height="15" fill="rgb(205,80,50)" fg:x="375" fg:w="379"/><text x="30.1305%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.sh..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (379 samples, 30.20%)</title><rect x="29.8805%" y="469" width="30.1992%" height="15" fill="rgb(217,74,48)" fg:x="375" fg:w="379"/><text x="30.1305%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::F..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (379 samples, 30.20%)</title><rect x="29.8805%" y="453" width="30.1992%" height="15" fill="rgb(205,82,50)" fg:x="375" fg:w="379"/><text x="30.1305%" y="463.50">&lt;engine::session::state::State as kernel::actions..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.0000%" y="437" width="0.0797%" height="15" fill="rgb(228,1,33)" fg:x="753" fg:w="1"/><text x="60.2500%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0000%" y="421" width="0.0797%" height="15" fill="rgb(214,50,23)" fg:x="753" fg:w="1"/><text x="60.2500%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="60.3187%" y="501" width="0.0797%" height="15" fill="rgb(210,62,9)" fg:x="757" fg:w="1"/><text x="60.5687%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.3187%" y="485" width="0.0797%" height="15" fill="rgb(210,104,37)" fg:x="757" fg:w="1"/><text x="60.5687%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3187%" y="469" width="0.0797%" height="15" fill="rgb(232,104,43)" fg:x="757" fg:w="1"/><text x="60.5687%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="60.3984%" y="469" width="0.0797%" height="15" fill="rgb(244,52,6)" fg:x="758" fg:w="1"/><text x="60.6484%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3984%" y="453" width="0.0797%" height="15" fill="rgb(211,174,52)" fg:x="758" fg:w="1"/><text x="60.6484%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.4781%" y="437" width="0.0797%" height="15" fill="rgb(229,48,4)" fg:x="759" fg:w="1"/><text x="60.7281%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="60.4781%" y="469" width="0.1594%" height="15" fill="rgb(205,155,16)" fg:x="759" fg:w="2"/><text x="60.7281%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.4781%" y="453" width="0.1594%" height="15" fill="rgb(211,141,53)" fg:x="759" fg:w="2"/><text x="60.7281%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.5578%" y="437" width="0.0797%" height="15" fill="rgb(240,148,11)" fg:x="760" fg:w="1"/><text x="60.8078%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="60.3187%" y="517" width="0.3984%" height="15" fill="rgb(214,45,23)" fg:x="757" fg:w="5"/><text x="60.5687%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="60.3984%" y="501" width="0.3187%" height="15" fill="rgb(248,74,26)" fg:x="758" fg:w="4"/><text x="60.6484%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="60.3984%" y="485" width="0.3187%" height="15" fill="rgb(218,121,16)" fg:x="758" fg:w="4"/><text x="60.6484%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="60.6375%" y="469" width="0.0797%" height="15" fill="rgb(218,10,47)" fg:x="761" fg:w="1"/><text x="60.8875%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="60.6375%" y="453" width="0.0797%" height="15" fill="rgb(227,99,14)" fg:x="761" fg:w="1"/><text x="60.8875%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="60.6375%" y="437" width="0.0797%" height="15" fill="rgb(229,83,46)" fg:x="761" fg:w="1"/><text x="60.8875%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.6375%" y="421" width="0.0797%" height="15" fill="rgb(228,25,1)" fg:x="761" fg:w="1"/><text x="60.8875%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.6375%" y="405" width="0.0797%" height="15" fill="rgb(252,190,15)" fg:x="761" fg:w="1"/><text x="60.8875%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.6375%" y="389" width="0.0797%" height="15" fill="rgb(213,103,51)" fg:x="761" fg:w="1"/><text x="60.8875%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7968%" y="245" width="0.0797%" height="15" fill="rgb(220,38,44)" fg:x="763" fg:w="1"/><text x="61.0468%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.7968%" y="453" width="0.1594%" height="15" fill="rgb(210,45,26)" fg:x="763" fg:w="2"/><text x="61.0468%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="60.7968%" y="437" width="0.1594%" height="15" fill="rgb(205,95,48)" fg:x="763" fg:w="2"/><text x="61.0468%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="60.7968%" y="421" width="0.1594%" height="15" fill="rgb(225,179,37)" fg:x="763" fg:w="2"/><text x="61.0468%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="60.7968%" y="405" width="0.1594%" height="15" fill="rgb(230,209,3)" fg:x="763" fg:w="2"/><text x="61.0468%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="60.7968%" y="389" width="0.1594%" height="15" fill="rgb(248,12,46)" fg:x="763" fg:w="2"/><text x="61.0468%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="60.7968%" y="373" width="0.1594%" height="15" fill="rgb(234,18,0)" fg:x="763" fg:w="2"/><text x="61.0468%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="60.7968%" y="357" width="0.1594%" height="15" fill="rgb(238,197,14)" fg:x="763" fg:w="2"/><text x="61.0468%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="60.7968%" y="341" width="0.1594%" height="15" fill="rgb(251,162,48)" fg:x="763" fg:w="2"/><text x="61.0468%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="60.7968%" y="325" width="0.1594%" height="15" fill="rgb(237,73,42)" fg:x="763" fg:w="2"/><text x="61.0468%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="60.7968%" y="309" width="0.1594%" height="15" fill="rgb(211,108,8)" fg:x="763" fg:w="2"/><text x="61.0468%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="60.7968%" y="293" width="0.1594%" height="15" fill="rgb(213,45,22)" fg:x="763" fg:w="2"/><text x="61.0468%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="60.7968%" y="277" width="0.1594%" height="15" fill="rgb(252,154,5)" fg:x="763" fg:w="2"/><text x="61.0468%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="60.7968%" y="261" width="0.1594%" height="15" fill="rgb(221,79,52)" fg:x="763" fg:w="2"/><text x="61.0468%" y="271.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="60.8765%" y="245" width="0.0797%" height="15" fill="rgb(229,220,36)" fg:x="764" fg:w="1"/><text x="61.1265%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.0359%" y="357" width="0.1594%" height="15" fill="rgb(211,17,16)" fg:x="766" fg:w="2"/><text x="61.2859%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.0359%" y="341" width="0.1594%" height="15" fill="rgb(222,55,31)" fg:x="766" fg:w="2"/><text x="61.2859%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.1155%" y="325" width="0.0797%" height="15" fill="rgb(221,221,31)" fg:x="767" fg:w="1"/><text x="61.3655%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.1952%" y="357" width="0.0797%" height="15" fill="rgb(227,168,26)" fg:x="768" fg:w="1"/><text x="61.4452%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.1952%" y="341" width="0.0797%" height="15" fill="rgb(224,139,9)" fg:x="768" fg:w="1"/><text x="61.4452%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="61.1952%" y="325" width="0.0797%" height="15" fill="rgb(254,172,0)" fg:x="768" fg:w="1"/><text x="61.4452%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.1952%" y="309" width="0.0797%" height="15" fill="rgb(235,203,1)" fg:x="768" fg:w="1"/><text x="61.4452%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="61.0359%" y="405" width="0.3187%" height="15" fill="rgb(216,205,24)" fg:x="766" fg:w="4"/><text x="61.2859%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="61.0359%" y="389" width="0.3187%" height="15" fill="rgb(233,24,6)" fg:x="766" fg:w="4"/><text x="61.2859%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="61.0359%" y="373" width="0.3187%" height="15" fill="rgb(244,110,9)" fg:x="766" fg:w="4"/><text x="61.2859%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2749%" y="357" width="0.0797%" height="15" fill="rgb(239,222,42)" fg:x="769" fg:w="1"/><text x="61.5249%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.2749%" y="341" width="0.0797%" height="15" fill="rgb(218,145,13)" fg:x="769" fg:w="1"/><text x="61.5249%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.2749%" y="325" width="0.0797%" height="15" fill="rgb(207,69,11)" fg:x="769" fg:w="1"/><text x="61.5249%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="61.2749%" y="309" width="0.0797%" height="15" fill="rgb(220,223,22)" fg:x="769" fg:w="1"/><text x="61.5249%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="61.2749%" y="293" width="0.0797%" height="15" fill="rgb(245,102,5)" fg:x="769" fg:w="1"/><text x="61.5249%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2749%" y="277" width="0.0797%" height="15" fill="rgb(211,148,2)" fg:x="769" fg:w="1"/><text x="61.5249%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.2749%" y="261" width="0.0797%" height="15" fill="rgb(241,13,44)" fg:x="769" fg:w="1"/><text x="61.5249%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.3546%" y="373" width="0.0797%" height="15" fill="rgb(219,137,21)" fg:x="770" fg:w="1"/><text x="61.6046%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.56%)</title><rect x="60.9562%" y="453" width="0.5578%" height="15" fill="rgb(242,206,5)" fg:x="765" fg:w="7"/><text x="61.2062%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.56%)</title><rect x="60.9562%" y="437" width="0.5578%" height="15" fill="rgb(217,114,22)" fg:x="765" fg:w="7"/><text x="61.2062%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.56%)</title><rect x="60.9562%" y="421" width="0.5578%" height="15" fill="rgb(253,206,42)" fg:x="765" fg:w="7"/><text x="61.2062%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.3546%" y="405" width="0.1594%" height="15" fill="rgb(236,102,18)" fg:x="770" fg:w="2"/><text x="61.6046%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.3546%" y="389" width="0.1594%" height="15" fill="rgb(208,59,49)" fg:x="770" fg:w="2"/><text x="61.6046%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.4343%" y="373" width="0.0797%" height="15" fill="rgb(215,194,28)" fg:x="771" fg:w="1"/><text x="61.6843%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4343%" y="357" width="0.0797%" height="15" fill="rgb(243,207,11)" fg:x="771" fg:w="1"/><text x="61.6843%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.5936%" y="309" width="0.1594%" height="15" fill="rgb(254,179,35)" fg:x="773" fg:w="2"/><text x="61.8436%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.5936%" y="293" width="0.1594%" height="15" fill="rgb(235,97,3)" fg:x="773" fg:w="2"/><text x="61.8436%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.6733%" y="277" width="0.0797%" height="15" fill="rgb(215,155,33)" fg:x="774" fg:w="1"/><text x="61.9233%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.6733%" y="261" width="0.0797%" height="15" fill="rgb(223,128,12)" fg:x="774" fg:w="1"/><text x="61.9233%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="61.6733%" y="245" width="0.0797%" height="15" fill="rgb(208,157,18)" fg:x="774" fg:w="1"/><text x="61.9233%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="61.7530%" y="261" width="0.0797%" height="15" fill="rgb(249,70,54)" fg:x="775" fg:w="1"/><text x="62.0030%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="61.5139%" y="325" width="0.3984%" height="15" fill="rgb(244,118,24)" fg:x="772" fg:w="5"/><text x="61.7639%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.7530%" y="309" width="0.1594%" height="15" fill="rgb(211,54,0)" fg:x="775" fg:w="2"/><text x="62.0030%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="61.7530%" y="293" width="0.1594%" height="15" fill="rgb(245,137,45)" fg:x="775" fg:w="2"/><text x="62.0030%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="61.7530%" y="277" width="0.1594%" height="15" fill="rgb(232,154,31)" fg:x="775" fg:w="2"/><text x="62.0030%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.8327%" y="261" width="0.0797%" height="15" fill="rgb(253,6,39)" fg:x="776" fg:w="1"/><text x="62.0827%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8327%" y="245" width="0.0797%" height="15" fill="rgb(234,183,24)" fg:x="776" fg:w="1"/><text x="62.0827%" y="255.50"></text></g><g><title>plugins_core::tools::contained_by (22 samples, 1.75%)</title><rect x="60.3187%" y="533" width="1.7530%" height="15" fill="rgb(252,84,40)" fg:x="757" fg:w="22"/><text x="60.5687%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (17 samples, 1.35%)</title><rect x="60.7171%" y="517" width="1.3546%" height="15" fill="rgb(224,65,2)" fg:x="762" fg:w="17"/><text x="60.9671%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.27%)</title><rect x="60.7968%" y="501" width="1.2749%" height="15" fill="rgb(229,38,24)" fg:x="763" fg:w="16"/><text x="61.0468%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.27%)</title><rect x="60.7968%" y="485" width="1.2749%" height="15" fill="rgb(218,131,50)" fg:x="763" fg:w="16"/><text x="61.0468%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.27%)</title><rect x="60.7968%" y="469" width="1.2749%" height="15" fill="rgb(233,106,18)" fg:x="763" fg:w="16"/><text x="61.0468%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="61.5139%" y="453" width="0.5578%" height="15" fill="rgb(220,216,11)" fg:x="772" fg:w="7"/><text x="61.7639%" y="463.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="61.5139%" y="437" width="0.5578%" height="15" fill="rgb(251,100,45)" fg:x="772" fg:w="7"/><text x="61.7639%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="61.5139%" y="421" width="0.5578%" height="15" fill="rgb(235,143,32)" fg:x="772" fg:w="7"/><text x="61.7639%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="61.5139%" y="405" width="0.5578%" height="15" fill="rgb(248,124,34)" fg:x="772" fg:w="7"/><text x="61.7639%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="61.5139%" y="389" width="0.5578%" height="15" fill="rgb(225,221,4)" fg:x="772" fg:w="7"/><text x="61.7639%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="61.5139%" y="373" width="0.5578%" height="15" fill="rgb(242,27,43)" fg:x="772" fg:w="7"/><text x="61.7639%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="61.5139%" y="357" width="0.5578%" height="15" fill="rgb(227,54,8)" fg:x="772" fg:w="7"/><text x="61.7639%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="61.5139%" y="341" width="0.5578%" height="15" fill="rgb(253,139,49)" fg:x="772" fg:w="7"/><text x="61.7639%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.9124%" y="325" width="0.1594%" height="15" fill="rgb(231,26,43)" fg:x="777" fg:w="2"/><text x="62.1624%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="61.9124%" y="309" width="0.1594%" height="15" fill="rgb(207,121,39)" fg:x="777" fg:w="2"/><text x="62.1624%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.9124%" y="293" width="0.1594%" height="15" fill="rgb(223,101,35)" fg:x="777" fg:w="2"/><text x="62.1624%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="62.1514%" y="501" width="0.3187%" height="15" fill="rgb(232,87,23)" fg:x="780" fg:w="4"/><text x="62.4014%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="62.1514%" y="485" width="0.3187%" height="15" fill="rgb(225,180,29)" fg:x="780" fg:w="4"/><text x="62.4014%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="62.1514%" y="469" width="0.3187%" height="15" fill="rgb(225,25,17)" fg:x="780" fg:w="4"/><text x="62.4014%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.3904%" y="453" width="0.0797%" height="15" fill="rgb(223,8,52)" fg:x="783" fg:w="1"/><text x="62.6404%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.3904%" y="437" width="0.0797%" height="15" fill="rgb(246,42,21)" fg:x="783" fg:w="1"/><text x="62.6404%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="62.3904%" y="421" width="0.0797%" height="15" fill="rgb(205,64,43)" fg:x="783" fg:w="1"/><text x="62.6404%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="62.3904%" y="405" width="0.0797%" height="15" fill="rgb(221,160,13)" fg:x="783" fg:w="1"/><text x="62.6404%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="62.3904%" y="389" width="0.0797%" height="15" fill="rgb(239,58,35)" fg:x="783" fg:w="1"/><text x="62.6404%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="62.3904%" y="373" width="0.0797%" height="15" fill="rgb(251,26,40)" fg:x="783" fg:w="1"/><text x="62.6404%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="62.3904%" y="357" width="0.0797%" height="15" fill="rgb(247,0,4)" fg:x="783" fg:w="1"/><text x="62.6404%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.4701%" y="469" width="0.0797%" height="15" fill="rgb(218,130,10)" fg:x="784" fg:w="1"/><text x="62.7201%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.5498%" y="469" width="0.0797%" height="15" fill="rgb(239,32,7)" fg:x="785" fg:w="1"/><text x="62.7998%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.5498%" y="453" width="0.0797%" height="15" fill="rgb(210,192,24)" fg:x="785" fg:w="1"/><text x="62.7998%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="62.5498%" y="437" width="0.0797%" height="15" fill="rgb(226,212,17)" fg:x="785" fg:w="1"/><text x="62.7998%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.5498%" y="421" width="0.0797%" height="15" fill="rgb(219,201,28)" fg:x="785" fg:w="1"/><text x="62.7998%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5498%" y="405" width="0.0797%" height="15" fill="rgb(235,207,41)" fg:x="785" fg:w="1"/><text x="62.7998%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5498%" y="389" width="0.0797%" height="15" fill="rgb(241,95,54)" fg:x="785" fg:w="1"/><text x="62.7998%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5498%" y="373" width="0.0797%" height="15" fill="rgb(248,12,23)" fg:x="785" fg:w="1"/><text x="62.7998%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5498%" y="357" width="0.0797%" height="15" fill="rgb(228,173,4)" fg:x="785" fg:w="1"/><text x="62.7998%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.64%)</title><rect x="62.0717%" y="517" width="0.6375%" height="15" fill="rgb(254,99,5)" fg:x="779" fg:w="8"/><text x="62.3217%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="62.4701%" y="501" width="0.2390%" height="15" fill="rgb(212,184,17)" fg:x="784" fg:w="3"/><text x="62.7201%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="62.4701%" y="485" width="0.2390%" height="15" fill="rgb(252,174,1)" fg:x="784" fg:w="3"/><text x="62.7201%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6295%" y="469" width="0.0797%" height="15" fill="rgb(241,118,51)" fg:x="786" fg:w="1"/><text x="62.8795%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6295%" y="453" width="0.0797%" height="15" fill="rgb(227,94,47)" fg:x="786" fg:w="1"/><text x="62.8795%" y="463.50"></text></g><g><title>plugins_core::tools::occupied_by (9 samples, 0.72%)</title><rect x="62.0717%" y="533" width="0.7171%" height="15" fill="rgb(229,104,2)" fg:x="779" fg:w="9"/><text x="62.3217%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="62.7092%" y="517" width="0.0797%" height="15" fill="rgb(219,28,31)" fg:x="787" fg:w="1"/><text x="62.9592%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Route&gt; (1 samples, 0.08%)</title><rect x="62.7092%" y="501" width="0.0797%" height="15" fill="rgb(233,109,36)" fg:x="787" fg:w="1"/><text x="62.9592%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.7092%" y="485" width="0.0797%" height="15" fill="rgb(246,88,11)" fg:x="787" fg:w="1"/><text x="62.9592%" y="495.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (35 samples, 2.79%)</title><rect x="60.0797%" y="549" width="2.7888%" height="15" fill="rgb(209,212,17)" fg:x="754" fg:w="35"/><text x="60.3297%" y="559.50">pl..</text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="62.7888%" y="533" width="0.0797%" height="15" fill="rgb(243,59,29)" fg:x="788" fg:w="1"/><text x="63.0388%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="62.7888%" y="517" width="0.0797%" height="15" fill="rgb(244,205,48)" fg:x="788" fg:w="1"/><text x="63.0388%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.7888%" y="501" width="0.0797%" height="15" fill="rgb(227,30,6)" fg:x="788" fg:w="1"/><text x="63.0388%" y="511.50"></text></g><g><title>engine::session::Session::captured (452 samples, 36.02%)</title><rect x="26.9323%" y="709" width="36.0159%" height="15" fill="rgb(220,205,48)" fg:x="338" fg:w="452"/><text x="27.1823%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (448 samples, 35.70%)</title><rect x="27.2510%" y="693" width="35.6972%" height="15" fill="rgb(250,94,14)" fg:x="342" fg:w="448"/><text x="27.5010%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (443 samples, 35.30%)</title><rect x="27.6494%" y="677" width="35.2988%" height="15" fill="rgb(216,119,42)" fg:x="347" fg:w="443"/><text x="27.8994%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (441 samples, 35.14%)</title><rect x="27.8088%" y="661" width="35.1394%" height="15" fill="rgb(232,155,0)" fg:x="349" fg:w="441"/><text x="28.0588%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;:..</text></g><g><title>kernel::plugins::mw::apply_middleware (441 samples, 35.14%)</title><rect x="27.8088%" y="645" width="35.1394%" height="15" fill="rgb(212,24,32)" fg:x="349" fg:w="441"/><text x="28.0588%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (440 samples, 35.06%)</title><rect x="27.8884%" y="629" width="35.0598%" height="15" fill="rgb(216,69,20)" fg:x="350" fg:w="440"/><text x="28.1384%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (440 samples, 35.06%)</title><rect x="27.8884%" y="613" width="35.0598%" height="15" fill="rgb(229,73,31)" fg:x="350" fg:w="440"/><text x="28.1384%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (417 samples, 33.23%)</title><rect x="29.7211%" y="597" width="33.2271%" height="15" fill="rgb(224,219,20)" fg:x="373" fg:w="417"/><text x="29.9711%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (417 samples, 33.23%)</title><rect x="29.7211%" y="581" width="33.2271%" height="15" fill="rgb(215,146,41)" fg:x="373" fg:w="417"/><text x="29.9711%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (36 samples, 2.87%)</title><rect x="60.0797%" y="565" width="2.8685%" height="15" fill="rgb(244,71,31)" fg:x="754" fg:w="36"/><text x="60.3297%" y="575.50">pl..</text></g><g><title>plugins_rune::sources::load_sources_from_entity (1 samples, 0.08%)</title><rect x="62.8685%" y="549" width="0.0797%" height="15" fill="rgb(224,24,11)" fg:x="789" fg:w="1"/><text x="63.1185%" y="559.50"></text></g><g><title>plugins_rune::sources::get_script (1 samples, 0.08%)</title><rect x="62.8685%" y="533" width="0.0797%" height="15" fill="rgb(229,76,15)" fg:x="789" fg:w="1"/><text x="63.1185%" y="543.50"></text></g><g><title>&lt;replies::TaggedJson as serde::de::Deserialize&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.8685%" y="517" width="0.0797%" height="15" fill="rgb(209,93,2)" fg:x="789" fg:w="1"/><text x="63.1185%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.9482%" y="661" width="0.1594%" height="15" fill="rgb(216,200,50)" fg:x="790" fg:w="2"/><text x="63.1982%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.9482%" y="645" width="0.1594%" height="15" fill="rgb(211,67,34)" fg:x="790" fg:w="2"/><text x="63.1982%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.9482%" y="629" width="0.1594%" height="15" fill="rgb(225,87,47)" fg:x="790" fg:w="2"/><text x="63.1982%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.9482%" y="613" width="0.1594%" height="15" fill="rgb(217,185,16)" fg:x="790" fg:w="2"/><text x="63.1982%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.9482%" y="597" width="0.1594%" height="15" fill="rgb(205,0,0)" fg:x="790" fg:w="2"/><text x="63.1982%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="62.9482%" y="581" width="0.1594%" height="15" fill="rgb(207,116,45)" fg:x="790" fg:w="2"/><text x="63.1982%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="62.9482%" y="565" width="0.1594%" height="15" fill="rgb(221,156,26)" fg:x="790" fg:w="2"/><text x="63.1982%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="62.9482%" y="549" width="0.1594%" height="15" fill="rgb(213,140,4)" fg:x="790" fg:w="2"/><text x="63.1982%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="62.9482%" y="533" width="0.1594%" height="15" fill="rgb(231,224,15)" fg:x="790" fg:w="2"/><text x="63.1982%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="62.9482%" y="517" width="0.1594%" height="15" fill="rgb(244,76,20)" fg:x="790" fg:w="2"/><text x="63.1982%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="62.9482%" y="501" width="0.1594%" height="15" fill="rgb(238,117,7)" fg:x="790" fg:w="2"/><text x="63.1982%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="62.9482%" y="485" width="0.1594%" height="15" fill="rgb(235,1,10)" fg:x="790" fg:w="2"/><text x="63.1982%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="62.9482%" y="469" width="0.1594%" height="15" fill="rgb(216,165,6)" fg:x="790" fg:w="2"/><text x="63.1982%" y="479.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="62.9482%" y="453" width="0.1594%" height="15" fill="rgb(246,91,35)" fg:x="790" fg:w="2"/><text x="63.1982%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.9482%" y="437" width="0.1594%" height="15" fill="rgb(228,96,24)" fg:x="790" fg:w="2"/><text x="63.1982%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.1873%" y="565" width="0.1594%" height="15" fill="rgb(254,217,53)" fg:x="793" fg:w="2"/><text x="63.4373%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.1873%" y="549" width="0.1594%" height="15" fill="rgb(209,60,0)" fg:x="793" fg:w="2"/><text x="63.4373%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.2669%" y="533" width="0.0797%" height="15" fill="rgb(250,93,26)" fg:x="794" fg:w="1"/><text x="63.5169%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="63.3466%" y="565" width="0.1594%" height="15" fill="rgb(211,9,40)" fg:x="795" fg:w="2"/><text x="63.5966%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="63.3466%" y="549" width="0.1594%" height="15" fill="rgb(242,57,20)" fg:x="795" fg:w="2"/><text x="63.5966%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="63.1873%" y="613" width="0.3984%" height="15" fill="rgb(248,85,48)" fg:x="793" fg:w="5"/><text x="63.4373%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="63.1873%" y="597" width="0.3984%" height="15" fill="rgb(212,117,2)" fg:x="793" fg:w="5"/><text x="63.4373%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="63.1873%" y="581" width="0.3984%" height="15" fill="rgb(243,19,3)" fg:x="793" fg:w="5"/><text x="63.4373%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.5060%" y="565" width="0.0797%" height="15" fill="rgb(232,217,24)" fg:x="797" fg:w="1"/><text x="63.7560%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5060%" y="549" width="0.0797%" height="15" fill="rgb(224,175,40)" fg:x="797" fg:w="1"/><text x="63.7560%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.5060%" y="533" width="0.0797%" height="15" fill="rgb(212,162,32)" fg:x="797" fg:w="1"/><text x="63.7560%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.5060%" y="517" width="0.0797%" height="15" fill="rgb(215,9,4)" fg:x="797" fg:w="1"/><text x="63.7560%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.5060%" y="501" width="0.0797%" height="15" fill="rgb(242,42,7)" fg:x="797" fg:w="1"/><text x="63.7560%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5060%" y="485" width="0.0797%" height="15" fill="rgb(242,184,45)" fg:x="797" fg:w="1"/><text x="63.7560%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.5857%" y="565" width="0.0797%" height="15" fill="rgb(228,111,51)" fg:x="798" fg:w="1"/><text x="63.8357%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="63.1076%" y="661" width="0.6375%" height="15" fill="rgb(236,147,17)" fg:x="792" fg:w="8"/><text x="63.3576%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="63.1076%" y="645" width="0.6375%" height="15" fill="rgb(210,75,22)" fg:x="792" fg:w="8"/><text x="63.3576%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="63.1873%" y="629" width="0.5578%" height="15" fill="rgb(217,159,45)" fg:x="793" fg:w="7"/><text x="63.4373%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.5857%" y="613" width="0.1594%" height="15" fill="rgb(245,165,53)" fg:x="798" fg:w="2"/><text x="63.8357%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.5857%" y="597" width="0.1594%" height="15" fill="rgb(251,190,50)" fg:x="798" fg:w="2"/><text x="63.8357%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.5857%" y="581" width="0.1594%" height="15" fill="rgb(208,203,29)" fg:x="798" fg:w="2"/><text x="63.8357%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.6653%" y="565" width="0.0797%" height="15" fill="rgb(207,209,35)" fg:x="799" fg:w="1"/><text x="63.9153%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="63.6653%" y="549" width="0.0797%" height="15" fill="rgb(230,144,49)" fg:x="799" fg:w="1"/><text x="63.9153%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="63.6653%" y="533" width="0.0797%" height="15" fill="rgb(229,31,6)" fg:x="799" fg:w="1"/><text x="63.9153%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.7450%" y="629" width="0.0797%" height="15" fill="rgb(251,129,24)" fg:x="800" fg:w="1"/><text x="63.9950%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="63.7450%" y="613" width="0.0797%" height="15" fill="rgb(235,105,15)" fg:x="800" fg:w="1"/><text x="63.9950%" y="623.50"></text></g><g><title>engine::session::internal::Added::find_refs (12 samples, 0.96%)</title><rect x="62.9482%" y="693" width="0.9562%" height="15" fill="rgb(216,52,43)" fg:x="790" fg:w="12"/><text x="63.1982%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (12 samples, 0.96%)</title><rect x="62.9482%" y="677" width="0.9562%" height="15" fill="rgb(238,144,41)" fg:x="790" fg:w="12"/><text x="63.1982%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.7450%" y="661" width="0.1594%" height="15" fill="rgb(243,63,9)" fg:x="800" fg:w="2"/><text x="63.9950%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.7450%" y="645" width="0.1594%" height="15" fill="rgb(246,208,1)" fg:x="800" fg:w="2"/><text x="63.9950%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8247%" y="629" width="0.0797%" height="15" fill="rgb(233,182,18)" fg:x="801" fg:w="1"/><text x="64.0747%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9044%" y="677" width="0.0797%" height="15" fill="rgb(242,224,8)" fg:x="802" fg:w="1"/><text x="64.1544%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9044%" y="661" width="0.0797%" height="15" fill="rgb(243,54,37)" fg:x="802" fg:w="1"/><text x="64.1544%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9044%" y="645" width="0.0797%" height="15" fill="rgb(233,192,12)" fg:x="802" fg:w="1"/><text x="64.1544%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9044%" y="629" width="0.0797%" height="15" fill="rgb(251,192,53)" fg:x="802" fg:w="1"/><text x="64.1544%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.9044%" y="613" width="0.0797%" height="15" fill="rgb(246,141,26)" fg:x="802" fg:w="1"/><text x="64.1544%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9044%" y="597" width="0.0797%" height="15" fill="rgb(239,195,19)" fg:x="802" fg:w="1"/><text x="64.1544%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.9044%" y="581" width="0.0797%" height="15" fill="rgb(241,16,39)" fg:x="802" fg:w="1"/><text x="64.1544%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.9044%" y="565" width="0.0797%" height="15" fill="rgb(223,13,53)" fg:x="802" fg:w="1"/><text x="64.1544%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.9044%" y="549" width="0.0797%" height="15" fill="rgb(214,227,0)" fg:x="802" fg:w="1"/><text x="64.1544%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.9044%" y="533" width="0.0797%" height="15" fill="rgb(228,103,26)" fg:x="802" fg:w="1"/><text x="64.1544%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="63.9044%" y="517" width="0.0797%" height="15" fill="rgb(254,177,53)" fg:x="802" fg:w="1"/><text x="64.1544%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.9044%" y="501" width="0.0797%" height="15" fill="rgb(208,201,34)" fg:x="802" fg:w="1"/><text x="64.1544%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="63.9841%" y="677" width="0.0797%" height="15" fill="rgb(212,39,5)" fg:x="803" fg:w="1"/><text x="64.2341%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.9841%" y="661" width="0.0797%" height="15" fill="rgb(246,117,3)" fg:x="803" fg:w="1"/><text x="64.2341%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.9841%" y="645" width="0.0797%" height="15" fill="rgb(244,118,39)" fg:x="803" fg:w="1"/><text x="64.2341%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.9841%" y="629" width="0.0797%" height="15" fill="rgb(241,64,10)" fg:x="803" fg:w="1"/><text x="64.2341%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.9841%" y="613" width="0.0797%" height="15" fill="rgb(229,39,44)" fg:x="803" fg:w="1"/><text x="64.2341%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.9841%" y="597" width="0.0797%" height="15" fill="rgb(230,226,3)" fg:x="803" fg:w="1"/><text x="64.2341%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.9841%" y="581" width="0.0797%" height="15" fill="rgb(222,13,42)" fg:x="803" fg:w="1"/><text x="64.2341%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="64.0637%" y="677" width="0.0797%" height="15" fill="rgb(247,180,54)" fg:x="804" fg:w="1"/><text x="64.3137%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.0637%" y="661" width="0.0797%" height="15" fill="rgb(205,96,16)" fg:x="804" fg:w="1"/><text x="64.3137%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.1434%" y="597" width="0.0797%" height="15" fill="rgb(205,100,21)" fg:x="805" fg:w="1"/><text x="64.3934%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.1434%" y="581" width="0.0797%" height="15" fill="rgb(248,51,4)" fg:x="805" fg:w="1"/><text x="64.3934%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.1434%" y="565" width="0.0797%" height="15" fill="rgb(217,197,30)" fg:x="805" fg:w="1"/><text x="64.3934%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="64.2231%" y="533" width="0.0797%" height="15" fill="rgb(240,179,40)" fg:x="806" fg:w="1"/><text x="64.4731%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="64.2231%" y="517" width="0.0797%" height="15" fill="rgb(212,185,35)" fg:x="806" fg:w="1"/><text x="64.4731%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.2231%" y="501" width="0.0797%" height="15" fill="rgb(251,222,31)" fg:x="806" fg:w="1"/><text x="64.4731%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.2231%" y="485" width="0.0797%" height="15" fill="rgb(208,140,36)" fg:x="806" fg:w="1"/><text x="64.4731%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2231%" y="469" width="0.0797%" height="15" fill="rgb(220,148,1)" fg:x="806" fg:w="1"/><text x="64.4731%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="64.1434%" y="629" width="0.3187%" height="15" fill="rgb(254,4,28)" fg:x="805" fg:w="4"/><text x="64.3934%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="64.1434%" y="613" width="0.3187%" height="15" fill="rgb(222,185,44)" fg:x="805" fg:w="4"/><text x="64.3934%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="64.2231%" y="597" width="0.2390%" height="15" fill="rgb(215,74,39)" fg:x="806" fg:w="3"/><text x="64.4731%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="64.2231%" y="581" width="0.2390%" height="15" fill="rgb(247,86,4)" fg:x="806" fg:w="3"/><text x="64.4731%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.2231%" y="565" width="0.2390%" height="15" fill="rgb(231,105,32)" fg:x="806" fg:w="3"/><text x="64.4731%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.24%)</title><rect x="64.2231%" y="549" width="0.2390%" height="15" fill="rgb(222,65,35)" fg:x="806" fg:w="3"/><text x="64.4731%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.3028%" y="533" width="0.1594%" height="15" fill="rgb(218,145,35)" fg:x="807" fg:w="2"/><text x="64.5528%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.3028%" y="517" width="0.1594%" height="15" fill="rgb(208,7,15)" fg:x="807" fg:w="2"/><text x="64.5528%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="64.3028%" y="501" width="0.1594%" height="15" fill="rgb(209,83,13)" fg:x="807" fg:w="2"/><text x="64.5528%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.3028%" y="485" width="0.1594%" height="15" fill="rgb(218,3,10)" fg:x="807" fg:w="2"/><text x="64.5528%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.3028%" y="469" width="0.1594%" height="15" fill="rgb(211,219,4)" fg:x="807" fg:w="2"/><text x="64.5528%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.3825%" y="453" width="0.0797%" height="15" fill="rgb(228,194,12)" fg:x="808" fg:w="1"/><text x="64.6325%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.3825%" y="437" width="0.0797%" height="15" fill="rgb(210,175,7)" fg:x="808" fg:w="1"/><text x="64.6325%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="64.1434%" y="677" width="0.3984%" height="15" fill="rgb(243,132,6)" fg:x="805" fg:w="5"/><text x="64.3934%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="64.1434%" y="661" width="0.3984%" height="15" fill="rgb(207,72,18)" fg:x="805" fg:w="5"/><text x="64.3934%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="64.1434%" y="645" width="0.3984%" height="15" fill="rgb(236,1,18)" fg:x="805" fg:w="5"/><text x="64.3934%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.4622%" y="629" width="0.0797%" height="15" fill="rgb(227,0,18)" fg:x="809" fg:w="1"/><text x="64.7122%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.4622%" y="613" width="0.0797%" height="15" fill="rgb(247,37,5)" fg:x="809" fg:w="1"/><text x="64.7122%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.8606%" y="533" width="0.0797%" height="15" fill="rgb(237,179,24)" fg:x="814" fg:w="1"/><text x="65.1106%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8606%" y="517" width="0.0797%" height="15" fill="rgb(226,53,20)" fg:x="814" fg:w="1"/><text x="65.1106%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.8606%" y="501" width="0.0797%" height="15" fill="rgb(247,75,7)" fg:x="814" fg:w="1"/><text x="65.1106%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.8606%" y="485" width="0.0797%" height="15" fill="rgb(233,96,12)" fg:x="814" fg:w="1"/><text x="65.1106%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="64.7012%" y="565" width="0.3187%" height="15" fill="rgb(224,125,0)" fg:x="812" fg:w="4"/><text x="64.9512%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="64.7809%" y="549" width="0.2390%" height="15" fill="rgb(224,92,25)" fg:x="813" fg:w="3"/><text x="65.0309%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.9402%" y="533" width="0.0797%" height="15" fill="rgb(224,42,24)" fg:x="815" fg:w="1"/><text x="65.1902%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.9402%" y="517" width="0.0797%" height="15" fill="rgb(234,132,49)" fg:x="815" fg:w="1"/><text x="65.1902%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.9402%" y="501" width="0.0797%" height="15" fill="rgb(248,100,35)" fg:x="815" fg:w="1"/><text x="65.1902%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.9402%" y="485" width="0.0797%" height="15" fill="rgb(239,94,40)" fg:x="815" fg:w="1"/><text x="65.1902%" y="495.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="64.9402%" y="469" width="0.0797%" height="15" fill="rgb(235,139,28)" fg:x="815" fg:w="1"/><text x="65.1902%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (27 samples, 2.15%)</title><rect x="62.9482%" y="709" width="2.1514%" height="15" fill="rgb(217,144,7)" fg:x="790" fg:w="27"/><text x="63.1982%" y="719.50">e..</text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.20%)</title><rect x="63.9044%" y="693" width="1.1952%" height="15" fill="rgb(227,55,4)" fg:x="802" fg:w="15"/><text x="64.1544%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="64.5418%" y="677" width="0.5578%" height="15" fill="rgb(252,82,54)" fg:x="810" fg:w="7"/><text x="64.7918%" y="687.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="64.5418%" y="661" width="0.5578%" height="15" fill="rgb(245,172,4)" fg:x="810" fg:w="7"/><text x="64.7918%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="64.5418%" y="645" width="0.5578%" height="15" fill="rgb(207,26,27)" fg:x="810" fg:w="7"/><text x="64.7918%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="64.5418%" y="629" width="0.5578%" height="15" fill="rgb(252,98,18)" fg:x="810" fg:w="7"/><text x="64.7918%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="64.5418%" y="613" width="0.5578%" height="15" fill="rgb(244,8,26)" fg:x="810" fg:w="7"/><text x="64.7918%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="64.6215%" y="597" width="0.4781%" height="15" fill="rgb(237,173,45)" fg:x="811" fg:w="6"/><text x="64.8715%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="64.7012%" y="581" width="0.3984%" height="15" fill="rgb(208,213,49)" fg:x="812" fg:w="5"/><text x="64.9512%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0199%" y="565" width="0.0797%" height="15" fill="rgb(212,122,37)" fg:x="816" fg:w="1"/><text x="65.2699%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.0996%" y="693" width="0.0797%" height="15" fill="rgb(213,80,17)" fg:x="817" fg:w="1"/><text x="65.3496%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.0996%" y="677" width="0.0797%" height="15" fill="rgb(206,210,43)" fg:x="817" fg:w="1"/><text x="65.3496%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.0996%" y="661" width="0.0797%" height="15" fill="rgb(229,214,3)" fg:x="817" fg:w="1"/><text x="65.3496%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.0996%" y="645" width="0.0797%" height="15" fill="rgb(235,213,29)" fg:x="817" fg:w="1"/><text x="65.3496%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.0996%" y="629" width="0.0797%" height="15" fill="rgb(248,135,26)" fg:x="817" fg:w="1"/><text x="65.3496%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.0996%" y="613" width="0.0797%" height="15" fill="rgb(242,188,12)" fg:x="817" fg:w="1"/><text x="65.3496%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.0996%" y="597" width="0.0797%" height="15" fill="rgb(245,38,12)" fg:x="817" fg:w="1"/><text x="65.3496%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.0996%" y="581" width="0.0797%" height="15" fill="rgb(218,42,13)" fg:x="817" fg:w="1"/><text x="65.3496%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.0996%" y="565" width="0.0797%" height="15" fill="rgb(238,132,49)" fg:x="817" fg:w="1"/><text x="65.3496%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.0996%" y="549" width="0.0797%" height="15" fill="rgb(209,196,19)" fg:x="817" fg:w="1"/><text x="65.3496%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.0996%" y="533" width="0.0797%" height="15" fill="rgb(244,131,22)" fg:x="817" fg:w="1"/><text x="65.3496%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0996%" y="517" width="0.0797%" height="15" fill="rgb(223,18,34)" fg:x="817" fg:w="1"/><text x="65.3496%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="65.0996%" y="709" width="0.1594%" height="15" fill="rgb(252,124,54)" fg:x="817" fg:w="2"/><text x="65.3496%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="65.1793%" y="693" width="0.0797%" height="15" fill="rgb(229,106,42)" fg:x="818" fg:w="1"/><text x="65.4293%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.1793%" y="677" width="0.0797%" height="15" fill="rgb(221,129,1)" fg:x="818" fg:w="1"/><text x="65.4293%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.1793%" y="661" width="0.0797%" height="15" fill="rgb(229,74,15)" fg:x="818" fg:w="1"/><text x="65.4293%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.1793%" y="645" width="0.0797%" height="15" fill="rgb(210,206,50)" fg:x="818" fg:w="1"/><text x="65.4293%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.1793%" y="629" width="0.0797%" height="15" fill="rgb(251,114,31)" fg:x="818" fg:w="1"/><text x="65.4293%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.1793%" y="613" width="0.0797%" height="15" fill="rgb(215,225,28)" fg:x="818" fg:w="1"/><text x="65.4293%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.1793%" y="597" width="0.0797%" height="15" fill="rgb(237,109,14)" fg:x="818" fg:w="1"/><text x="65.4293%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1793%" y="581" width="0.0797%" height="15" fill="rgb(230,13,37)" fg:x="818" fg:w="1"/><text x="65.4293%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.2590%" y="645" width="0.0797%" height="15" fill="rgb(231,40,28)" fg:x="819" fg:w="1"/><text x="65.5090%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.2590%" y="629" width="0.0797%" height="15" fill="rgb(231,202,18)" fg:x="819" fg:w="1"/><text x="65.5090%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.2590%" y="613" width="0.0797%" height="15" fill="rgb(225,33,18)" fg:x="819" fg:w="1"/><text x="65.5090%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.2590%" y="597" width="0.0797%" height="15" fill="rgb(223,64,47)" fg:x="819" fg:w="1"/><text x="65.5090%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2590%" y="581" width="0.0797%" height="15" fill="rgb(234,114,13)" fg:x="819" fg:w="1"/><text x="65.5090%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="65.2590%" y="661" width="0.1594%" height="15" fill="rgb(248,56,40)" fg:x="819" fg:w="2"/><text x="65.5090%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.3386%" y="645" width="0.0797%" height="15" fill="rgb(221,194,21)" fg:x="820" fg:w="1"/><text x="65.5886%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.3386%" y="629" width="0.0797%" height="15" fill="rgb(242,108,46)" fg:x="820" fg:w="1"/><text x="65.5886%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.3386%" y="613" width="0.0797%" height="15" fill="rgb(220,106,10)" fg:x="820" fg:w="1"/><text x="65.5886%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.3386%" y="597" width="0.0797%" height="15" fill="rgb(211,88,4)" fg:x="820" fg:w="1"/><text x="65.5886%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.3386%" y="581" width="0.0797%" height="15" fill="rgb(214,95,34)" fg:x="820" fg:w="1"/><text x="65.5886%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.3386%" y="565" width="0.0797%" height="15" fill="rgb(250,160,33)" fg:x="820" fg:w="1"/><text x="65.5886%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.3386%" y="549" width="0.0797%" height="15" fill="rgb(225,29,10)" fg:x="820" fg:w="1"/><text x="65.5886%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.3386%" y="533" width="0.0797%" height="15" fill="rgb(224,28,30)" fg:x="820" fg:w="1"/><text x="65.5886%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.3386%" y="517" width="0.0797%" height="15" fill="rgb(231,77,4)" fg:x="820" fg:w="1"/><text x="65.5886%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.3386%" y="501" width="0.0797%" height="15" fill="rgb(209,63,21)" fg:x="820" fg:w="1"/><text x="65.5886%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.3386%" y="485" width="0.0797%" height="15" fill="rgb(226,22,11)" fg:x="820" fg:w="1"/><text x="65.5886%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3386%" y="469" width="0.0797%" height="15" fill="rgb(216,82,30)" fg:x="820" fg:w="1"/><text x="65.5886%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4183%" y="645" width="0.0797%" height="15" fill="rgb(246,227,38)" fg:x="821" fg:w="1"/><text x="65.6683%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="65.4183%" y="661" width="0.1594%" height="15" fill="rgb(251,203,53)" fg:x="821" fg:w="2"/><text x="65.6683%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.4980%" y="645" width="0.0797%" height="15" fill="rgb(254,101,1)" fg:x="822" fg:w="1"/><text x="65.7480%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4980%" y="629" width="0.0797%" height="15" fill="rgb(241,180,5)" fg:x="822" fg:w="1"/><text x="65.7480%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.4980%" y="613" width="0.0797%" height="15" fill="rgb(218,168,4)" fg:x="822" fg:w="1"/><text x="65.7480%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.4980%" y="597" width="0.0797%" height="15" fill="rgb(224,223,32)" fg:x="822" fg:w="1"/><text x="65.7480%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.4980%" y="581" width="0.0797%" height="15" fill="rgb(236,106,22)" fg:x="822" fg:w="1"/><text x="65.7480%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="65.7371%" y="613" width="0.0797%" height="15" fill="rgb(206,121,5)" fg:x="825" fg:w="1"/><text x="65.9871%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.8167%" y="613" width="0.0797%" height="15" fill="rgb(233,87,28)" fg:x="826" fg:w="1"/><text x="66.0667%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.8167%" y="597" width="0.0797%" height="15" fill="rgb(236,137,17)" fg:x="826" fg:w="1"/><text x="66.0667%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="65.5777%" y="661" width="0.3984%" height="15" fill="rgb(209,183,38)" fg:x="823" fg:w="5"/><text x="65.8277%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="65.5777%" y="645" width="0.3984%" height="15" fill="rgb(206,162,44)" fg:x="823" fg:w="5"/><text x="65.8277%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="65.5777%" y="629" width="0.3984%" height="15" fill="rgb(237,70,39)" fg:x="823" fg:w="5"/><text x="65.8277%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.8964%" y="613" width="0.0797%" height="15" fill="rgb(212,176,5)" fg:x="827" fg:w="1"/><text x="66.1464%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.8964%" y="597" width="0.0797%" height="15" fill="rgb(232,95,16)" fg:x="827" fg:w="1"/><text x="66.1464%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.8964%" y="581" width="0.0797%" height="15" fill="rgb(219,115,35)" fg:x="827" fg:w="1"/><text x="66.1464%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.8964%" y="565" width="0.0797%" height="15" fill="rgb(251,67,27)" fg:x="827" fg:w="1"/><text x="66.1464%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.8964%" y="549" width="0.0797%" height="15" fill="rgb(222,95,40)" fg:x="827" fg:w="1"/><text x="66.1464%" y="559.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="65.8964%" y="533" width="0.0797%" height="15" fill="rgb(250,35,16)" fg:x="827" fg:w="1"/><text x="66.1464%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="65.8964%" y="517" width="0.0797%" height="15" fill="rgb(224,86,44)" fg:x="827" fg:w="1"/><text x="66.1464%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.80%)</title><rect x="65.2590%" y="693" width="0.7968%" height="15" fill="rgb(237,53,53)" fg:x="819" fg:w="10"/><text x="65.5090%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.80%)</title><rect x="65.2590%" y="677" width="0.7968%" height="15" fill="rgb(208,171,33)" fg:x="819" fg:w="10"/><text x="65.5090%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="65.9761%" y="661" width="0.0797%" height="15" fill="rgb(222,64,27)" fg:x="828" fg:w="1"/><text x="66.2261%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="65.9761%" y="645" width="0.0797%" height="15" fill="rgb(221,121,35)" fg:x="828" fg:w="1"/><text x="66.2261%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.9761%" y="629" width="0.0797%" height="15" fill="rgb(228,137,42)" fg:x="828" fg:w="1"/><text x="66.2261%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.9761%" y="613" width="0.0797%" height="15" fill="rgb(227,54,21)" fg:x="828" fg:w="1"/><text x="66.2261%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.9761%" y="597" width="0.0797%" height="15" fill="rgb(240,168,33)" fg:x="828" fg:w="1"/><text x="66.2261%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.9761%" y="581" width="0.0797%" height="15" fill="rgb(243,159,6)" fg:x="828" fg:w="1"/><text x="66.2261%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.9761%" y="565" width="0.0797%" height="15" fill="rgb(205,211,41)" fg:x="828" fg:w="1"/><text x="66.2261%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9761%" y="549" width="0.0797%" height="15" fill="rgb(253,30,1)" fg:x="828" fg:w="1"/><text x="66.2261%" y="559.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (495 samples, 39.44%)</title><rect x="26.6932%" y="741" width="39.4422%" height="15" fill="rgb(226,80,18)" fg:x="335" fg:w="495"/><text x="26.9432%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (495 samples, 39.44%)</title><rect x="26.6932%" y="725" width="39.4422%" height="15" fill="rgb(253,156,46)" fg:x="335" fg:w="495"/><text x="26.9432%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (11 samples, 0.88%)</title><rect x="65.2590%" y="709" width="0.8765%" height="15" fill="rgb(248,87,27)" fg:x="819" fg:w="11"/><text x="65.5090%" y="719.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="66.0558%" y="693" width="0.0797%" height="15" fill="rgb(227,122,2)" fg:x="829" fg:w="1"/><text x="66.3058%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (832 samples, 66.29%)</title><rect x="0.0000%" y="789" width="66.2948%" height="15" fill="rgb(229,94,39)" fg:x="0" fg:w="832"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (832 samples, 66.29%)</title><rect x="0.0000%" y="773" width="66.2948%" height="15" fill="rgb(225,173,31)" fg:x="0" fg:w="832"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (832 samples, 66.29%)</title><rect x="0.0000%" y="757" width="66.2948%" height="15" fill="rgb(239,176,30)" fg:x="0" fg:w="832"/><text x="0.2500%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (2 samples, 0.16%)</title><rect x="66.1355%" y="741" width="0.1594%" height="15" fill="rgb(212,104,21)" fg:x="830" fg:w="2"/><text x="66.3855%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.2151%" y="725" width="0.0797%" height="15" fill="rgb(240,209,40)" fg:x="831" fg:w="1"/><text x="66.4651%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.2151%" y="709" width="0.0797%" height="15" fill="rgb(234,195,5)" fg:x="831" fg:w="1"/><text x="66.4651%" y="719.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.2151%" y="693" width="0.0797%" height="15" fill="rgb(238,213,1)" fg:x="831" fg:w="1"/><text x="66.4651%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3745%" y="693" width="0.0797%" height="15" fill="rgb(235,182,54)" fg:x="833" fg:w="1"/><text x="66.6245%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="66.4542%" y="693" width="0.1594%" height="15" fill="rgb(229,50,46)" fg:x="834" fg:w="2"/><text x="66.7042%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="66.4542%" y="677" width="0.1594%" height="15" fill="rgb(219,145,13)" fg:x="834" fg:w="2"/><text x="66.7042%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="66.4542%" y="661" width="0.1594%" height="15" fill="rgb(220,226,10)" fg:x="834" fg:w="2"/><text x="66.7042%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5339%" y="645" width="0.0797%" height="15" fill="rgb(248,47,30)" fg:x="835" fg:w="1"/><text x="66.7839%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="66.3745%" y="725" width="0.3187%" height="15" fill="rgb(231,209,44)" fg:x="833" fg:w="4"/><text x="66.6245%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="66.3745%" y="709" width="0.3187%" height="15" fill="rgb(209,80,30)" fg:x="833" fg:w="4"/><text x="66.6245%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rune::RunePlugin&gt; (1 samples, 0.08%)</title><rect x="66.6135%" y="693" width="0.0797%" height="15" fill="rgb(232,9,14)" fg:x="836" fg:w="1"/><text x="66.8635%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.8526%" y="613" width="0.0797%" height="15" fill="rgb(243,91,43)" fg:x="839" fg:w="1"/><text x="67.1026%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.9323%" y="597" width="0.0797%" height="15" fill="rgb(231,90,52)" fg:x="840" fg:w="1"/><text x="67.1823%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.9323%" y="581" width="0.0797%" height="15" fill="rgb(253,192,44)" fg:x="840" fg:w="1"/><text x="67.1823%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="66.7729%" y="661" width="0.3187%" height="15" fill="rgb(241,66,31)" fg:x="838" fg:w="4"/><text x="67.0229%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (4 samples, 0.32%)</title><rect x="66.7729%" y="645" width="0.3187%" height="15" fill="rgb(235,81,37)" fg:x="838" fg:w="4"/><text x="67.0229%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="66.7729%" y="629" width="0.3187%" height="15" fill="rgb(223,221,9)" fg:x="838" fg:w="4"/><text x="67.0229%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="66.9323%" y="613" width="0.1594%" height="15" fill="rgb(242,180,7)" fg:x="840" fg:w="2"/><text x="67.1823%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="67.0120%" y="597" width="0.0797%" height="15" fill="rgb(243,78,19)" fg:x="841" fg:w="1"/><text x="67.2620%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.0120%" y="581" width="0.0797%" height="15" fill="rgb(233,23,17)" fg:x="841" fg:w="1"/><text x="67.2620%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0120%" y="565" width="0.0797%" height="15" fill="rgb(252,122,45)" fg:x="841" fg:w="1"/><text x="67.2620%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0916%" y="629" width="0.0797%" height="15" fill="rgb(247,108,20)" fg:x="842" fg:w="1"/><text x="67.3416%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.2510%" y="613" width="0.0797%" height="15" fill="rgb(235,84,21)" fg:x="844" fg:w="1"/><text x="67.5010%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2510%" y="597" width="0.0797%" height="15" fill="rgb(247,129,10)" fg:x="844" fg:w="1"/><text x="67.5010%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.3307%" y="597" width="0.0797%" height="15" fill="rgb(208,173,14)" fg:x="845" fg:w="1"/><text x="67.5807%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.12%)</title><rect x="66.3745%" y="741" width="1.1155%" height="15" fill="rgb(236,31,38)" fg:x="833" fg:w="14"/><text x="66.6245%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (10 samples, 0.80%)</title><rect x="66.6932%" y="725" width="0.7968%" height="15" fill="rgb(232,65,17)" fg:x="837" fg:w="10"/><text x="66.9432%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="66.7729%" y="709" width="0.7171%" height="15" fill="rgb(224,45,49)" fg:x="838" fg:w="9"/><text x="67.0229%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (9 samples, 0.72%)</title><rect x="66.7729%" y="693" width="0.7171%" height="15" fill="rgb(225,2,53)" fg:x="838" fg:w="9"/><text x="67.0229%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.72%)</title><rect x="66.7729%" y="677" width="0.7171%" height="15" fill="rgb(248,210,53)" fg:x="838" fg:w="9"/><text x="67.0229%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="67.0916%" y="661" width="0.3984%" height="15" fill="rgb(211,1,30)" fg:x="842" fg:w="5"/><text x="67.3416%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="67.0916%" y="645" width="0.3984%" height="15" fill="rgb(224,96,15)" fg:x="842" fg:w="5"/><text x="67.3416%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="67.1713%" y="629" width="0.3187%" height="15" fill="rgb(252,45,11)" fg:x="843" fg:w="4"/><text x="67.4213%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.3307%" y="613" width="0.1594%" height="15" fill="rgb(220,125,38)" fg:x="845" fg:w="2"/><text x="67.5807%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="67.4104%" y="597" width="0.0797%" height="15" fill="rgb(243,161,33)" fg:x="846" fg:w="1"/><text x="67.6604%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.4104%" y="581" width="0.0797%" height="15" fill="rgb(248,197,34)" fg:x="846" fg:w="1"/><text x="67.6604%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4104%" y="565" width="0.0797%" height="15" fill="rgb(228,165,23)" fg:x="846" fg:w="1"/><text x="67.6604%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4104%" y="549" width="0.0797%" height="15" fill="rgb(236,94,38)" fg:x="846" fg:w="1"/><text x="67.6604%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5697%" y="613" width="0.0797%" height="15" fill="rgb(220,13,23)" fg:x="848" fg:w="1"/><text x="67.8197%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.6494%" y="613" width="0.0797%" height="15" fill="rgb(234,26,39)" fg:x="849" fg:w="1"/><text x="67.8994%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.6494%" y="597" width="0.0797%" height="15" fill="rgb(205,117,44)" fg:x="849" fg:w="1"/><text x="67.8994%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.6494%" y="581" width="0.0797%" height="15" fill="rgb(250,42,2)" fg:x="849" fg:w="1"/><text x="67.8994%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (3 samples, 0.24%)</title><rect x="67.5697%" y="645" width="0.2390%" height="15" fill="rgb(223,83,14)" fg:x="848" fg:w="3"/><text x="67.8197%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (3 samples, 0.24%)</title><rect x="67.5697%" y="629" width="0.2390%" height="15" fill="rgb(241,147,50)" fg:x="848" fg:w="3"/><text x="67.8197%" y="639.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="67.7291%" y="613" width="0.0797%" height="15" fill="rgb(218,90,6)" fg:x="850" fg:w="1"/><text x="67.9791%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.8088%" y="645" width="0.0797%" height="15" fill="rgb(210,191,5)" fg:x="851" fg:w="1"/><text x="68.0588%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.8088%" y="629" width="0.0797%" height="15" fill="rgb(225,139,19)" fg:x="851" fg:w="1"/><text x="68.0588%" y="639.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="67.8088%" y="613" width="0.0797%" height="15" fill="rgb(210,1,33)" fg:x="851" fg:w="1"/><text x="68.0588%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="67.8088%" y="597" width="0.0797%" height="15" fill="rgb(213,50,3)" fg:x="851" fg:w="1"/><text x="68.0588%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="67.8884%" y="645" width="0.0797%" height="15" fill="rgb(234,227,4)" fg:x="852" fg:w="1"/><text x="68.1384%" y="655.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="67.8884%" y="629" width="0.0797%" height="15" fill="rgb(246,63,5)" fg:x="852" fg:w="1"/><text x="68.1384%" y="639.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="67.8884%" y="613" width="0.0797%" height="15" fill="rgb(245,136,27)" fg:x="852" fg:w="1"/><text x="68.1384%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="67.8884%" y="597" width="0.0797%" height="15" fill="rgb(247,199,27)" fg:x="852" fg:w="1"/><text x="68.1384%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.8884%" y="581" width="0.0797%" height="15" fill="rgb(252,158,49)" fg:x="852" fg:w="1"/><text x="68.1384%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (6 samples, 0.48%)</title><rect x="67.5697%" y="661" width="0.4781%" height="15" fill="rgb(254,73,1)" fg:x="848" fg:w="6"/><text x="67.8197%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9681%" y="645" width="0.0797%" height="15" fill="rgb(248,93,19)" fg:x="853" fg:w="1"/><text x="68.2181%" y="655.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="68.2072%" y="645" width="0.0797%" height="15" fill="rgb(206,67,5)" fg:x="856" fg:w="1"/><text x="68.4572%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.40%)</title><rect x="68.0478%" y="661" width="0.3984%" height="15" fill="rgb(209,210,4)" fg:x="854" fg:w="5"/><text x="68.2978%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="68.2869%" y="645" width="0.1594%" height="15" fill="rgb(214,185,36)" fg:x="857" fg:w="2"/><text x="68.5369%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="68.2869%" y="629" width="0.1594%" height="15" fill="rgb(233,191,26)" fg:x="857" fg:w="2"/><text x="68.5369%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="68.2869%" y="613" width="0.1594%" height="15" fill="rgb(248,94,17)" fg:x="857" fg:w="2"/><text x="68.5369%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="68.2869%" y="597" width="0.1594%" height="15" fill="rgb(250,64,4)" fg:x="857" fg:w="2"/><text x="68.5369%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="68.2869%" y="581" width="0.1594%" height="15" fill="rgb(218,41,53)" fg:x="857" fg:w="2"/><text x="68.5369%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="68.2869%" y="565" width="0.1594%" height="15" fill="rgb(251,176,28)" fg:x="857" fg:w="2"/><text x="68.5369%" y="575.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="68.2869%" y="549" width="0.1594%" height="15" fill="rgb(247,22,9)" fg:x="857" fg:w="2"/><text x="68.5369%" y="559.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (1 samples, 0.08%)</title><rect x="68.4462%" y="645" width="0.0797%" height="15" fill="rgb(218,201,14)" fg:x="859" fg:w="1"/><text x="68.6962%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.4462%" y="629" width="0.0797%" height="15" fill="rgb(218,94,10)" fg:x="859" fg:w="1"/><text x="68.6962%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.4462%" y="613" width="0.0797%" height="15" fill="rgb(222,183,52)" fg:x="859" fg:w="1"/><text x="68.6962%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4462%" y="597" width="0.0797%" height="15" fill="rgb(242,140,25)" fg:x="859" fg:w="1"/><text x="68.6962%" y="607.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="68.5259%" y="629" width="0.2390%" height="15" fill="rgb(235,197,38)" fg:x="860" fg:w="3"/><text x="68.7759%" y="639.50"></text></g><g><title>glob::fill_todo (3 samples, 0.24%)</title><rect x="68.5259%" y="613" width="0.2390%" height="15" fill="rgb(237,136,15)" fg:x="860" fg:w="3"/><text x="68.7759%" y="623.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="68.5259%" y="597" width="0.2390%" height="15" fill="rgb(223,44,49)" fg:x="860" fg:w="3"/><text x="68.7759%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="68.5259%" y="581" width="0.2390%" height="15" fill="rgb(227,71,15)" fg:x="860" fg:w="3"/><text x="68.7759%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="68.5259%" y="565" width="0.2390%" height="15" fill="rgb(225,153,20)" fg:x="860" fg:w="3"/><text x="68.7759%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="68.5259%" y="549" width="0.2390%" height="15" fill="rgb(210,190,26)" fg:x="860" fg:w="3"/><text x="68.7759%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="68.5259%" y="533" width="0.2390%" height="15" fill="rgb(223,147,5)" fg:x="860" fg:w="3"/><text x="68.7759%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="68.5259%" y="517" width="0.2390%" height="15" fill="rgb(207,14,23)" fg:x="860" fg:w="3"/><text x="68.7759%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="68.5259%" y="501" width="0.2390%" height="15" fill="rgb(211,195,53)" fg:x="860" fg:w="3"/><text x="68.7759%" y="511.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="68.5259%" y="485" width="0.2390%" height="15" fill="rgb(237,75,46)" fg:x="860" fg:w="3"/><text x="68.7759%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="68.7649%" y="597" width="0.0797%" height="15" fill="rgb(254,55,14)" fg:x="863" fg:w="1"/><text x="69.0149%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="68.4462%" y="661" width="0.4781%" height="15" fill="rgb(230,185,30)" fg:x="859" fg:w="6"/><text x="68.6962%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (5 samples, 0.40%)</title><rect x="68.5259%" y="645" width="0.3984%" height="15" fill="rgb(220,14,11)" fg:x="860" fg:w="5"/><text x="68.7759%" y="655.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="68.7649%" y="629" width="0.1594%" height="15" fill="rgb(215,169,44)" fg:x="863" fg:w="2"/><text x="69.0149%" y="639.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="68.7649%" y="613" width="0.1594%" height="15" fill="rgb(253,203,20)" fg:x="863" fg:w="2"/><text x="69.0149%" y="623.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="68.8446%" y="597" width="0.0797%" height="15" fill="rgb(229,225,17)" fg:x="864" fg:w="1"/><text x="69.0946%" y="607.50"></text></g><g><title>engine::session::Session::initialize (20 samples, 1.59%)</title><rect x="67.5697%" y="693" width="1.5936%" height="15" fill="rgb(236,76,26)" fg:x="848" fg:w="20"/><text x="67.8197%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (20 samples, 1.59%)</title><rect x="67.5697%" y="677" width="1.5936%" height="15" fill="rgb(234,15,30)" fg:x="848" fg:w="20"/><text x="67.8197%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 0.24%)</title><rect x="68.9243%" y="661" width="0.2390%" height="15" fill="rgb(211,113,48)" fg:x="865" fg:w="3"/><text x="69.1743%" y="671.50"></text></g><g><title>clock_gettime (3 samples, 0.24%)</title><rect x="68.9243%" y="645" width="0.2390%" height="15" fill="rgb(221,31,36)" fg:x="865" fg:w="3"/><text x="69.1743%" y="655.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (22 samples, 1.75%)</title><rect x="67.4900%" y="741" width="1.7530%" height="15" fill="rgb(215,118,52)" fg:x="847" fg:w="22"/><text x="67.7400%" y="751.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (22 samples, 1.75%)</title><rect x="67.4900%" y="725" width="1.7530%" height="15" fill="rgb(241,151,27)" fg:x="847" fg:w="22"/><text x="67.7400%" y="735.50"></text></g><g><title>engine::session::Session::new (22 samples, 1.75%)</title><rect x="67.4900%" y="709" width="1.7530%" height="15" fill="rgb(253,51,3)" fg:x="847" fg:w="22"/><text x="67.7400%" y="719.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="69.1633%" y="693" width="0.0797%" height="15" fill="rgb(216,201,24)" fg:x="868" fg:w="1"/><text x="69.4133%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.1633%" y="677" width="0.0797%" height="15" fill="rgb(231,107,4)" fg:x="868" fg:w="1"/><text x="69.4133%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.2430%" y="725" width="0.0797%" height="15" fill="rgb(243,97,54)" fg:x="869" fg:w="1"/><text x="69.4930%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.2430%" y="709" width="0.0797%" height="15" fill="rgb(221,32,51)" fg:x="869" fg:w="1"/><text x="69.4930%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3227%" y="693" width="0.0797%" height="15" fill="rgb(218,171,35)" fg:x="870" fg:w="1"/><text x="69.5727%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.3227%" y="677" width="0.0797%" height="15" fill="rgb(214,20,53)" fg:x="870" fg:w="1"/><text x="69.5727%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.3227%" y="661" width="0.0797%" height="15" fill="rgb(239,9,52)" fg:x="870" fg:w="1"/><text x="69.5727%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.3227%" y="645" width="0.0797%" height="15" fill="rgb(215,114,45)" fg:x="870" fg:w="1"/><text x="69.5727%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.3227%" y="629" width="0.0797%" height="15" fill="rgb(208,118,9)" fg:x="870" fg:w="1"/><text x="69.5727%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3227%" y="613" width="0.0797%" height="15" fill="rgb(235,7,39)" fg:x="870" fg:w="1"/><text x="69.5727%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.3227%" y="597" width="0.0797%" height="15" fill="rgb(243,225,15)" fg:x="870" fg:w="1"/><text x="69.5727%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.3227%" y="581" width="0.0797%" height="15" fill="rgb(225,216,18)" fg:x="870" fg:w="1"/><text x="69.5727%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.3227%" y="565" width="0.0797%" height="15" fill="rgb(233,36,38)" fg:x="870" fg:w="1"/><text x="69.5727%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.3227%" y="549" width="0.0797%" height="15" fill="rgb(239,88,23)" fg:x="870" fg:w="1"/><text x="69.5727%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.3227%" y="533" width="0.0797%" height="15" fill="rgb(219,181,35)" fg:x="870" fg:w="1"/><text x="69.5727%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.3227%" y="517" width="0.0797%" height="15" fill="rgb(215,18,46)" fg:x="870" fg:w="1"/><text x="69.5727%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="69.3227%" y="709" width="0.1594%" height="15" fill="rgb(241,38,11)" fg:x="870" fg:w="2"/><text x="69.5727%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4024%" y="693" width="0.0797%" height="15" fill="rgb(248,169,45)" fg:x="871" fg:w="1"/><text x="69.6524%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.4821%" y="597" width="0.0797%" height="15" fill="rgb(239,50,49)" fg:x="872" fg:w="1"/><text x="69.7321%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.4821%" y="581" width="0.0797%" height="15" fill="rgb(231,96,31)" fg:x="872" fg:w="1"/><text x="69.7321%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="69.4821%" y="613" width="0.1594%" height="15" fill="rgb(224,193,37)" fg:x="872" fg:w="2"/><text x="69.7321%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.5618%" y="597" width="0.0797%" height="15" fill="rgb(227,153,50)" fg:x="873" fg:w="1"/><text x="69.8118%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.5618%" y="581" width="0.0797%" height="15" fill="rgb(249,228,3)" fg:x="873" fg:w="1"/><text x="69.8118%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.5618%" y="565" width="0.0797%" height="15" fill="rgb(219,164,43)" fg:x="873" fg:w="1"/><text x="69.8118%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.6414%" y="597" width="0.0797%" height="15" fill="rgb(216,45,41)" fg:x="874" fg:w="1"/><text x="69.8914%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6414%" y="581" width="0.0797%" height="15" fill="rgb(210,226,51)" fg:x="874" fg:w="1"/><text x="69.8914%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.7211%" y="565" width="0.0797%" height="15" fill="rgb(209,117,49)" fg:x="875" fg:w="1"/><text x="69.9711%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.7211%" y="549" width="0.0797%" height="15" fill="rgb(206,196,24)" fg:x="875" fg:w="1"/><text x="69.9711%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="69.7211%" y="581" width="0.1594%" height="15" fill="rgb(253,218,3)" fg:x="875" fg:w="2"/><text x="69.9711%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.8008%" y="565" width="0.0797%" height="15" fill="rgb(252,166,2)" fg:x="876" fg:w="1"/><text x="70.0508%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="69.7211%" y="597" width="0.2390%" height="15" fill="rgb(236,218,26)" fg:x="875" fg:w="3"/><text x="69.9711%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.8805%" y="581" width="0.0797%" height="15" fill="rgb(254,84,19)" fg:x="877" fg:w="1"/><text x="70.1305%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.8805%" y="565" width="0.0797%" height="15" fill="rgb(219,137,29)" fg:x="877" fg:w="1"/><text x="70.1305%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="69.4821%" y="629" width="0.7171%" height="15" fill="rgb(227,47,52)" fg:x="872" fg:w="9"/><text x="69.7321%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="69.6414%" y="613" width="0.5578%" height="15" fill="rgb(229,167,24)" fg:x="874" fg:w="7"/><text x="69.8914%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="69.9602%" y="597" width="0.2390%" height="15" fill="rgb(233,164,1)" fg:x="878" fg:w="3"/><text x="70.2102%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="69.9602%" y="581" width="0.2390%" height="15" fill="rgb(218,88,48)" fg:x="878" fg:w="3"/><text x="70.2102%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="69.9602%" y="565" width="0.2390%" height="15" fill="rgb(226,214,24)" fg:x="878" fg:w="3"/><text x="70.2102%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="70.0398%" y="549" width="0.1594%" height="15" fill="rgb(233,29,12)" fg:x="879" fg:w="2"/><text x="70.2898%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="70.0398%" y="533" width="0.1594%" height="15" fill="rgb(219,120,34)" fg:x="879" fg:w="2"/><text x="70.2898%" y="543.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="70.0398%" y="517" width="0.1594%" height="15" fill="rgb(226,78,44)" fg:x="879" fg:w="2"/><text x="70.2898%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.1992%" y="629" width="0.0797%" height="15" fill="rgb(240,15,48)" fg:x="881" fg:w="1"/><text x="70.4492%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.1992%" y="613" width="0.0797%" height="15" fill="rgb(253,176,7)" fg:x="881" fg:w="1"/><text x="70.4492%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.1992%" y="597" width="0.0797%" height="15" fill="rgb(206,166,28)" fg:x="881" fg:w="1"/><text x="70.4492%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.1992%" y="581" width="0.0797%" height="15" fill="rgb(241,53,51)" fg:x="881" fg:w="1"/><text x="70.4492%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2789%" y="533" width="0.0797%" height="15" fill="rgb(249,112,30)" fg:x="882" fg:w="1"/><text x="70.5289%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2789%" y="517" width="0.0797%" height="15" fill="rgb(217,85,30)" fg:x="882" fg:w="1"/><text x="70.5289%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.3586%" y="533" width="0.0797%" height="15" fill="rgb(233,49,7)" fg:x="883" fg:w="1"/><text x="70.6086%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3586%" y="517" width="0.0797%" height="15" fill="rgb(234,109,9)" fg:x="883" fg:w="1"/><text x="70.6086%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.3586%" y="501" width="0.0797%" height="15" fill="rgb(253,95,22)" fg:x="883" fg:w="1"/><text x="70.6086%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3586%" y="485" width="0.0797%" height="15" fill="rgb(233,176,25)" fg:x="883" fg:w="1"/><text x="70.6086%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.3586%" y="469" width="0.0797%" height="15" fill="rgb(236,33,39)" fg:x="883" fg:w="1"/><text x="70.6086%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3586%" y="453" width="0.0797%" height="15" fill="rgb(223,226,42)" fg:x="883" fg:w="1"/><text x="70.6086%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.3586%" y="437" width="0.0797%" height="15" fill="rgb(216,99,33)" fg:x="883" fg:w="1"/><text x="70.6086%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.3586%" y="421" width="0.0797%" height="15" fill="rgb(235,84,23)" fg:x="883" fg:w="1"/><text x="70.6086%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.4382%" y="517" width="0.0797%" height="15" fill="rgb(232,2,27)" fg:x="884" fg:w="1"/><text x="70.6882%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5179%" y="501" width="0.0797%" height="15" fill="rgb(241,23,22)" fg:x="885" fg:w="1"/><text x="70.7679%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="70.2789%" y="549" width="0.4781%" height="15" fill="rgb(211,73,27)" fg:x="882" fg:w="6"/><text x="70.5289%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="70.4382%" y="533" width="0.3187%" height="15" fill="rgb(235,109,49)" fg:x="884" fg:w="4"/><text x="70.6882%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="70.5179%" y="517" width="0.2390%" height="15" fill="rgb(230,99,29)" fg:x="885" fg:w="3"/><text x="70.7679%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="70.5976%" y="501" width="0.1594%" height="15" fill="rgb(245,199,7)" fg:x="886" fg:w="2"/><text x="70.8476%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="70.5976%" y="485" width="0.1594%" height="15" fill="rgb(217,179,10)" fg:x="886" fg:w="2"/><text x="70.8476%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.6773%" y="469" width="0.0797%" height="15" fill="rgb(254,99,47)" fg:x="887" fg:w="1"/><text x="70.9273%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="70.6773%" y="453" width="0.0797%" height="15" fill="rgb(251,121,7)" fg:x="887" fg:w="1"/><text x="70.9273%" y="463.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.51%)</title><rect x="69.3227%" y="725" width="1.5139%" height="15" fill="rgb(250,177,26)" fg:x="870" fg:w="19"/><text x="69.5727%" y="735.50"></text></g><g><title>engine::session::state::State::close (17 samples, 1.35%)</title><rect x="69.4821%" y="709" width="1.3546%" height="15" fill="rgb(232,88,15)" fg:x="872" fg:w="17"/><text x="69.7321%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (17 samples, 1.35%)</title><rect x="69.4821%" y="693" width="1.3546%" height="15" fill="rgb(251,54,54)" fg:x="872" fg:w="17"/><text x="69.7321%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.35%)</title><rect x="69.4821%" y="677" width="1.3546%" height="15" fill="rgb(208,177,15)" fg:x="872" fg:w="17"/><text x="69.7321%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.35%)</title><rect x="69.4821%" y="661" width="1.3546%" height="15" fill="rgb(205,97,32)" fg:x="872" fg:w="17"/><text x="69.7321%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (17 samples, 1.35%)</title><rect x="69.4821%" y="645" width="1.3546%" height="15" fill="rgb(217,192,13)" fg:x="872" fg:w="17"/><text x="69.7321%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="70.2789%" y="629" width="0.5578%" height="15" fill="rgb(215,163,41)" fg:x="882" fg:w="7"/><text x="70.5289%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="70.2789%" y="613" width="0.5578%" height="15" fill="rgb(246,83,29)" fg:x="882" fg:w="7"/><text x="70.5289%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="70.2789%" y="597" width="0.5578%" height="15" fill="rgb(219,2,45)" fg:x="882" fg:w="7"/><text x="70.5289%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="70.2789%" y="581" width="0.5578%" height="15" fill="rgb(242,215,33)" fg:x="882" fg:w="7"/><text x="70.5289%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="70.2789%" y="565" width="0.5578%" height="15" fill="rgb(217,1,6)" fg:x="882" fg:w="7"/><text x="70.5289%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.7570%" y="549" width="0.0797%" height="15" fill="rgb(207,85,52)" fg:x="888" fg:w="1"/><text x="71.0070%" y="559.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="70.8367%" y="725" width="0.0797%" height="15" fill="rgb(231,171,19)" fg:x="889" fg:w="1"/><text x="71.0867%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="70.8367%" y="709" width="0.0797%" height="15" fill="rgb(207,128,4)" fg:x="889" fg:w="1"/><text x="71.0867%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8367%" y="693" width="0.0797%" height="15" fill="rgb(219,208,4)" fg:x="889" fg:w="1"/><text x="71.0867%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.8367%" y="677" width="0.0797%" height="15" fill="rgb(235,161,42)" fg:x="889" fg:w="1"/><text x="71.0867%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.8367%" y="661" width="0.0797%" height="15" fill="rgb(247,218,18)" fg:x="889" fg:w="1"/><text x="71.0867%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="70.8367%" y="645" width="0.0797%" height="15" fill="rgb(232,114,51)" fg:x="889" fg:w="1"/><text x="71.0867%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.9163%" y="709" width="0.0797%" height="15" fill="rgb(222,95,3)" fg:x="890" fg:w="1"/><text x="71.1663%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.9163%" y="693" width="0.0797%" height="15" fill="rgb(240,65,29)" fg:x="890" fg:w="1"/><text x="71.1663%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9163%" y="677" width="0.0797%" height="15" fill="rgb(249,209,20)" fg:x="890" fg:w="1"/><text x="71.1663%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.9163%" y="661" width="0.0797%" height="15" fill="rgb(241,48,37)" fg:x="890" fg:w="1"/><text x="71.1663%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9163%" y="645" width="0.0797%" height="15" fill="rgb(230,140,42)" fg:x="890" fg:w="1"/><text x="71.1663%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="70.9163%" y="725" width="0.1594%" height="15" fill="rgb(230,176,45)" fg:x="890" fg:w="2"/><text x="71.1663%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.9960%" y="709" width="0.0797%" height="15" fill="rgb(245,112,21)" fg:x="891" fg:w="1"/><text x="71.2460%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.9960%" y="693" width="0.0797%" height="15" fill="rgb(207,183,35)" fg:x="891" fg:w="1"/><text x="71.2460%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="70.9960%" y="677" width="0.0797%" height="15" fill="rgb(227,44,33)" fg:x="891" fg:w="1"/><text x="71.2460%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.9960%" y="661" width="0.0797%" height="15" fill="rgb(246,120,21)" fg:x="891" fg:w="1"/><text x="71.2460%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.9960%" y="645" width="0.0797%" height="15" fill="rgb(235,57,52)" fg:x="891" fg:w="1"/><text x="71.2460%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="70.9960%" y="629" width="0.0797%" height="15" fill="rgb(238,84,10)" fg:x="891" fg:w="1"/><text x="71.2460%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="71.0757%" y="725" width="0.0797%" height="15" fill="rgb(251,200,32)" fg:x="892" fg:w="1"/><text x="71.3257%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="71.0757%" y="709" width="0.0797%" height="15" fill="rgb(247,159,13)" fg:x="892" fg:w="1"/><text x="71.3257%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.0757%" y="693" width="0.0797%" height="15" fill="rgb(238,64,4)" fg:x="892" fg:w="1"/><text x="71.3257%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0757%" y="677" width="0.0797%" height="15" fill="rgb(221,131,51)" fg:x="892" fg:w="1"/><text x="71.3257%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="71.0757%" y="661" width="0.0797%" height="15" fill="rgb(242,5,29)" fg:x="892" fg:w="1"/><text x="71.3257%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="71.1554%" y="693" width="0.0797%" height="15" fill="rgb(214,130,32)" fg:x="893" fg:w="1"/><text x="71.4054%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="71.1554%" y="677" width="0.0797%" height="15" fill="rgb(244,210,16)" fg:x="893" fg:w="1"/><text x="71.4054%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.1554%" y="661" width="0.0797%" height="15" fill="rgb(234,48,26)" fg:x="893" fg:w="1"/><text x="71.4054%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.1554%" y="645" width="0.0797%" height="15" fill="rgb(231,82,38)" fg:x="893" fg:w="1"/><text x="71.4054%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1554%" y="629" width="0.0797%" height="15" fill="rgb(254,128,41)" fg:x="893" fg:w="1"/><text x="71.4054%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1554%" y="613" width="0.0797%" height="15" fill="rgb(212,73,49)" fg:x="893" fg:w="1"/><text x="71.4054%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.1554%" y="597" width="0.0797%" height="15" fill="rgb(205,62,54)" fg:x="893" fg:w="1"/><text x="71.4054%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2351%" y="613" width="0.0797%" height="15" fill="rgb(228,0,8)" fg:x="894" fg:w="1"/><text x="71.4851%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2351%" y="597" width="0.0797%" height="15" fill="rgb(251,28,17)" fg:x="894" fg:w="1"/><text x="71.4851%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.2351%" y="581" width="0.0797%" height="15" fill="rgb(238,105,27)" fg:x="894" fg:w="1"/><text x="71.4851%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2351%" y="565" width="0.0797%" height="15" fill="rgb(237,216,33)" fg:x="894" fg:w="1"/><text x="71.4851%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.2351%" y="549" width="0.0797%" height="15" fill="rgb(229,228,25)" fg:x="894" fg:w="1"/><text x="71.4851%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.2351%" y="533" width="0.0797%" height="15" fill="rgb(233,75,23)" fg:x="894" fg:w="1"/><text x="71.4851%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.2351%" y="517" width="0.0797%" height="15" fill="rgb(231,207,16)" fg:x="894" fg:w="1"/><text x="71.4851%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.2351%" y="501" width="0.0797%" height="15" fill="rgb(231,191,45)" fg:x="894" fg:w="1"/><text x="71.4851%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="71.2351%" y="485" width="0.0797%" height="15" fill="rgb(224,133,17)" fg:x="894" fg:w="1"/><text x="71.4851%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="71.2351%" y="469" width="0.0797%" height="15" fill="rgb(209,178,27)" fg:x="894" fg:w="1"/><text x="71.4851%" y="479.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="71.2351%" y="693" width="0.1594%" height="15" fill="rgb(218,37,11)" fg:x="894" fg:w="2"/><text x="71.4851%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="71.2351%" y="677" width="0.1594%" height="15" fill="rgb(251,226,25)" fg:x="894" fg:w="2"/><text x="71.4851%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="71.2351%" y="661" width="0.1594%" height="15" fill="rgb(209,222,27)" fg:x="894" fg:w="2"/><text x="71.4851%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.2351%" y="645" width="0.1594%" height="15" fill="rgb(238,22,21)" fg:x="894" fg:w="2"/><text x="71.4851%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="71.2351%" y="629" width="0.1594%" height="15" fill="rgb(233,161,25)" fg:x="894" fg:w="2"/><text x="71.4851%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3147%" y="613" width="0.0797%" height="15" fill="rgb(226,122,53)" fg:x="895" fg:w="1"/><text x="71.5647%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="71.1554%" y="725" width="0.3187%" height="15" fill="rgb(220,123,17)" fg:x="893" fg:w="4"/><text x="71.4054%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="71.1554%" y="709" width="0.3187%" height="15" fill="rgb(230,224,35)" fg:x="893" fg:w="4"/><text x="71.4054%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="71.3944%" y="693" width="0.0797%" height="15" fill="rgb(246,83,8)" fg:x="896" fg:w="1"/><text x="71.6444%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3944%" y="677" width="0.0797%" height="15" fill="rgb(230,214,17)" fg:x="896" fg:w="1"/><text x="71.6444%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.4741%" y="709" width="0.0797%" height="15" fill="rgb(222,97,18)" fg:x="897" fg:w="1"/><text x="71.7241%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4741%" y="693" width="0.0797%" height="15" fill="rgb(206,79,1)" fg:x="897" fg:w="1"/><text x="71.7241%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.4741%" y="677" width="0.0797%" height="15" fill="rgb(214,121,34)" fg:x="897" fg:w="1"/><text x="71.7241%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4741%" y="661" width="0.0797%" height="15" fill="rgb(249,199,46)" fg:x="897" fg:w="1"/><text x="71.7241%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4741%" y="645" width="0.0797%" height="15" fill="rgb(214,222,46)" fg:x="897" fg:w="1"/><text x="71.7241%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="71.5538%" y="709" width="0.0797%" height="15" fill="rgb(248,168,30)" fg:x="898" fg:w="1"/><text x="71.8038%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="71.5538%" y="693" width="0.0797%" height="15" fill="rgb(226,14,28)" fg:x="898" fg:w="1"/><text x="71.8038%" y="703.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="71.5538%" y="677" width="0.0797%" height="15" fill="rgb(253,123,1)" fg:x="898" fg:w="1"/><text x="71.8038%" y="687.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="71.6335%" y="709" width="0.0797%" height="15" fill="rgb(225,24,42)" fg:x="899" fg:w="1"/><text x="71.8835%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="71.6335%" y="693" width="0.0797%" height="15" fill="rgb(216,161,37)" fg:x="899" fg:w="1"/><text x="71.8835%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="71.6335%" y="677" width="0.0797%" height="15" fill="rgb(251,164,26)" fg:x="899" fg:w="1"/><text x="71.8835%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="71.6335%" y="661" width="0.0797%" height="15" fill="rgb(219,177,3)" fg:x="899" fg:w="1"/><text x="71.8835%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="71.6335%" y="645" width="0.0797%" height="15" fill="rgb(222,65,0)" fg:x="899" fg:w="1"/><text x="71.8835%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.6335%" y="629" width="0.0797%" height="15" fill="rgb(223,69,54)" fg:x="899" fg:w="1"/><text x="71.8835%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="71.6335%" y="613" width="0.0797%" height="15" fill="rgb(235,30,27)" fg:x="899" fg:w="1"/><text x="71.8835%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6335%" y="597" width="0.0797%" height="15" fill="rgb(220,183,50)" fg:x="899" fg:w="1"/><text x="71.8835%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6335%" y="581" width="0.0797%" height="15" fill="rgb(248,198,15)" fg:x="899" fg:w="1"/><text x="71.8835%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.6335%" y="565" width="0.0797%" height="15" fill="rgb(222,211,4)" fg:x="899" fg:w="1"/><text x="71.8835%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6335%" y="549" width="0.0797%" height="15" fill="rgb(214,102,34)" fg:x="899" fg:w="1"/><text x="71.8835%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.6335%" y="533" width="0.0797%" height="15" fill="rgb(245,92,5)" fg:x="899" fg:w="1"/><text x="71.8835%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.6335%" y="517" width="0.0797%" height="15" fill="rgb(252,72,51)" fg:x="899" fg:w="1"/><text x="71.8835%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="71.7131%" y="693" width="0.0797%" height="15" fill="rgb(252,208,19)" fg:x="900" fg:w="1"/><text x="71.9631%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.9522%" y="565" width="0.0797%" height="15" fill="rgb(211,69,7)" fg:x="903" fg:w="1"/><text x="72.2022%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.9522%" y="549" width="0.0797%" height="15" fill="rgb(211,27,16)" fg:x="903" fg:w="1"/><text x="72.2022%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (7 samples, 0.56%)</title><rect x="72.1116%" y="517" width="0.5578%" height="15" fill="rgb(219,216,14)" fg:x="905" fg:w="7"/><text x="72.3616%" y="527.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.48%)</title><rect x="72.1912%" y="501" width="0.4781%" height="15" fill="rgb(219,71,8)" fg:x="906" fg:w="6"/><text x="72.4412%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="72.4303%" y="485" width="0.2390%" height="15" fill="rgb(223,170,53)" fg:x="909" fg:w="3"/><text x="72.6803%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="72.4303%" y="469" width="0.2390%" height="15" fill="rgb(246,21,26)" fg:x="909" fg:w="3"/><text x="72.6803%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="72.5100%" y="453" width="0.1594%" height="15" fill="rgb(248,20,46)" fg:x="910" fg:w="2"/><text x="72.7600%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="72.5100%" y="437" width="0.1594%" height="15" fill="rgb(252,94,11)" fg:x="910" fg:w="2"/><text x="72.7600%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.5896%" y="421" width="0.0797%" height="15" fill="rgb(236,163,8)" fg:x="911" fg:w="1"/><text x="72.8396%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="72.1116%" y="533" width="0.6375%" height="15" fill="rgb(217,221,45)" fg:x="905" fg:w="8"/><text x="72.3616%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.6693%" y="517" width="0.0797%" height="15" fill="rgb(238,38,17)" fg:x="912" fg:w="1"/><text x="72.9193%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="71.9522%" y="597" width="0.8765%" height="15" fill="rgb(242,210,23)" fg:x="903" fg:w="11"/><text x="72.2022%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.88%)</title><rect x="71.9522%" y="581" width="0.8765%" height="15" fill="rgb(250,86,53)" fg:x="903" fg:w="11"/><text x="72.2022%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="72.0319%" y="565" width="0.7968%" height="15" fill="rgb(223,168,25)" fg:x="904" fg:w="10"/><text x="72.2819%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="72.1116%" y="549" width="0.7171%" height="15" fill="rgb(251,189,4)" fg:x="905" fg:w="9"/><text x="72.3616%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.7490%" y="533" width="0.0797%" height="15" fill="rgb(245,19,28)" fg:x="913" fg:w="1"/><text x="72.9990%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.7490%" y="517" width="0.0797%" height="15" fill="rgb(207,10,34)" fg:x="913" fg:w="1"/><text x="72.9990%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.7490%" y="501" width="0.0797%" height="15" fill="rgb(235,153,31)" fg:x="913" fg:w="1"/><text x="72.9990%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.9084%" y="533" width="0.0797%" height="15" fill="rgb(228,72,37)" fg:x="915" fg:w="1"/><text x="73.1584%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9084%" y="517" width="0.0797%" height="15" fill="rgb(215,15,16)" fg:x="915" fg:w="1"/><text x="73.1584%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.8287%" y="597" width="0.2390%" height="15" fill="rgb(250,119,29)" fg:x="914" fg:w="3"/><text x="73.0787%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="72.8287%" y="581" width="0.2390%" height="15" fill="rgb(214,59,1)" fg:x="914" fg:w="3"/><text x="73.0787%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.8287%" y="565" width="0.2390%" height="15" fill="rgb(223,109,25)" fg:x="914" fg:w="3"/><text x="73.0787%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.9084%" y="549" width="0.1594%" height="15" fill="rgb(230,198,22)" fg:x="915" fg:w="2"/><text x="73.1584%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.9880%" y="533" width="0.0797%" height="15" fill="rgb(245,184,46)" fg:x="916" fg:w="1"/><text x="73.2380%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.9880%" y="517" width="0.0797%" height="15" fill="rgb(253,73,16)" fg:x="916" fg:w="1"/><text x="73.2380%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.9880%" y="501" width="0.0797%" height="15" fill="rgb(206,94,45)" fg:x="916" fg:w="1"/><text x="73.2380%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9880%" y="485" width="0.0797%" height="15" fill="rgb(236,83,27)" fg:x="916" fg:w="1"/><text x="73.2380%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="73.0677%" y="565" width="0.1594%" height="15" fill="rgb(220,196,8)" fg:x="917" fg:w="2"/><text x="73.3177%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1474%" y="549" width="0.0797%" height="15" fill="rgb(254,185,14)" fg:x="918" fg:w="1"/><text x="73.3974%" y="559.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="73.2271%" y="565" width="0.0797%" height="15" fill="rgb(226,50,22)" fg:x="919" fg:w="1"/><text x="73.4771%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.2271%" y="549" width="0.0797%" height="15" fill="rgb(253,147,0)" fg:x="919" fg:w="1"/><text x="73.4771%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.2271%" y="533" width="0.0797%" height="15" fill="rgb(252,46,33)" fg:x="919" fg:w="1"/><text x="73.4771%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="73.2271%" y="517" width="0.0797%" height="15" fill="rgb(242,22,54)" fg:x="919" fg:w="1"/><text x="73.4771%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.2271%" y="501" width="0.0797%" height="15" fill="rgb(223,178,32)" fg:x="919" fg:w="1"/><text x="73.4771%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="73.0677%" y="581" width="0.3187%" height="15" fill="rgb(214,106,53)" fg:x="917" fg:w="4"/><text x="73.3177%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="73.3068%" y="565" width="0.0797%" height="15" fill="rgb(232,65,50)" fg:x="920" fg:w="1"/><text x="73.5568%" y="575.50"></text></g><g><title>treediff::tools::record::mk (1 samples, 0.08%)</title><rect x="73.3068%" y="549" width="0.0797%" height="15" fill="rgb(231,110,28)" fg:x="920" fg:w="1"/><text x="73.5568%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="73.3865%" y="565" width="0.0797%" height="15" fill="rgb(216,71,40)" fg:x="921" fg:w="1"/><text x="73.6365%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5458%" y="549" width="0.0797%" height="15" fill="rgb(229,89,53)" fg:x="923" fg:w="1"/><text x="73.7958%" y="559.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.07%)</title><rect x="71.7131%" y="709" width="2.0717%" height="15" fill="rgb(210,124,14)" fg:x="900" fg:w="26"/><text x="71.9631%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (25 samples, 1.99%)</title><rect x="71.7928%" y="693" width="1.9920%" height="15" fill="rgb(236,213,6)" fg:x="901" fg:w="25"/><text x="72.0428%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (25 samples, 1.99%)</title><rect x="71.7928%" y="677" width="1.9920%" height="15" fill="rgb(228,41,5)" fg:x="901" fg:w="25"/><text x="72.0428%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (25 samples, 1.99%)</title><rect x="71.7928%" y="661" width="1.9920%" height="15" fill="rgb(221,167,25)" fg:x="901" fg:w="25"/><text x="72.0428%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (25 samples, 1.99%)</title><rect x="71.7928%" y="645" width="1.9920%" height="15" fill="rgb(228,144,37)" fg:x="901" fg:w="25"/><text x="72.0428%" y="655.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 1.99%)</title><rect x="71.7928%" y="629" width="1.9920%" height="15" fill="rgb(227,189,38)" fg:x="901" fg:w="25"/><text x="72.0428%" y="639.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (25 samples, 1.99%)</title><rect x="71.7928%" y="613" width="1.9920%" height="15" fill="rgb(218,8,2)" fg:x="901" fg:w="25"/><text x="72.0428%" y="623.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="73.0677%" y="597" width="0.7171%" height="15" fill="rgb(209,61,28)" fg:x="917" fg:w="9"/><text x="73.3177%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.40%)</title><rect x="73.3865%" y="581" width="0.3984%" height="15" fill="rgb(233,140,39)" fg:x="921" fg:w="5"/><text x="73.6365%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="73.4661%" y="565" width="0.3187%" height="15" fill="rgb(251,66,48)" fg:x="922" fg:w="4"/><text x="73.7161%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="73.6255%" y="549" width="0.1594%" height="15" fill="rgb(210,44,45)" fg:x="924" fg:w="2"/><text x="73.8755%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="73.6255%" y="533" width="0.1594%" height="15" fill="rgb(214,136,46)" fg:x="924" fg:w="2"/><text x="73.8755%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="73.6255%" y="517" width="0.1594%" height="15" fill="rgb(207,130,50)" fg:x="924" fg:w="2"/><text x="73.8755%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.6255%" y="501" width="0.1594%" height="15" fill="rgb(228,102,49)" fg:x="924" fg:w="2"/><text x="73.8755%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.7052%" y="485" width="0.0797%" height="15" fill="rgb(253,55,1)" fg:x="925" fg:w="1"/><text x="73.9552%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7849%" y="661" width="0.0797%" height="15" fill="rgb(238,222,9)" fg:x="926" fg:w="1"/><text x="74.0349%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="73.7849%" y="677" width="0.1594%" height="15" fill="rgb(246,99,6)" fg:x="926" fg:w="2"/><text x="74.0349%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8645%" y="661" width="0.0797%" height="15" fill="rgb(219,110,26)" fg:x="927" fg:w="1"/><text x="74.1145%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8645%" y="645" width="0.0797%" height="15" fill="rgb(239,160,33)" fg:x="927" fg:w="1"/><text x="74.1145%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.8645%" y="629" width="0.0797%" height="15" fill="rgb(220,202,23)" fg:x="927" fg:w="1"/><text x="74.1145%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8645%" y="613" width="0.0797%" height="15" fill="rgb(208,80,26)" fg:x="927" fg:w="1"/><text x="74.1145%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.8645%" y="597" width="0.0797%" height="15" fill="rgb(243,85,7)" fg:x="927" fg:w="1"/><text x="74.1145%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="73.9442%" y="661" width="0.0797%" height="15" fill="rgb(228,77,47)" fg:x="928" fg:w="1"/><text x="74.1942%" y="671.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.9442%" y="645" width="0.0797%" height="15" fill="rgb(212,226,8)" fg:x="928" fg:w="1"/><text x="74.1942%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9442%" y="629" width="0.0797%" height="15" fill="rgb(241,120,54)" fg:x="928" fg:w="1"/><text x="74.1942%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9442%" y="613" width="0.0797%" height="15" fill="rgb(226,80,16)" fg:x="928" fg:w="1"/><text x="74.1942%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="73.9442%" y="677" width="0.1594%" height="15" fill="rgb(240,76,13)" fg:x="928" fg:w="2"/><text x="74.1942%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.0239%" y="661" width="0.0797%" height="15" fill="rgb(252,74,8)" fg:x="929" fg:w="1"/><text x="74.2739%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="74.0239%" y="645" width="0.0797%" height="15" fill="rgb(244,155,2)" fg:x="929" fg:w="1"/><text x="74.2739%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0239%" y="629" width="0.0797%" height="15" fill="rgb(215,81,35)" fg:x="929" fg:w="1"/><text x="74.2739%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0239%" y="613" width="0.0797%" height="15" fill="rgb(206,55,2)" fg:x="929" fg:w="1"/><text x="74.2739%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="73.7849%" y="709" width="0.4781%" height="15" fill="rgb(231,2,34)" fg:x="926" fg:w="6"/><text x="74.0349%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="73.7849%" y="693" width="0.4781%" height="15" fill="rgb(242,176,48)" fg:x="926" fg:w="6"/><text x="74.0349%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="74.1036%" y="677" width="0.1594%" height="15" fill="rgb(249,31,36)" fg:x="930" fg:w="2"/><text x="74.3536%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="74.1036%" y="661" width="0.1594%" height="15" fill="rgb(205,18,17)" fg:x="930" fg:w="2"/><text x="74.3536%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.1036%" y="645" width="0.1594%" height="15" fill="rgb(254,130,5)" fg:x="930" fg:w="2"/><text x="74.3536%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="74.1036%" y="629" width="0.1594%" height="15" fill="rgb(229,42,45)" fg:x="930" fg:w="2"/><text x="74.3536%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="74.1036%" y="613" width="0.1594%" height="15" fill="rgb(245,95,25)" fg:x="930" fg:w="2"/><text x="74.3536%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.1036%" y="597" width="0.1594%" height="15" fill="rgb(249,193,38)" fg:x="930" fg:w="2"/><text x="74.3536%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.1036%" y="581" width="0.1594%" height="15" fill="rgb(241,140,43)" fg:x="930" fg:w="2"/><text x="74.3536%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.1833%" y="565" width="0.0797%" height="15" fill="rgb(245,78,48)" fg:x="931" fg:w="1"/><text x="74.4333%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1833%" y="549" width="0.0797%" height="15" fill="rgb(214,92,39)" fg:x="931" fg:w="1"/><text x="74.4333%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.1833%" y="533" width="0.0797%" height="15" fill="rgb(211,189,14)" fg:x="931" fg:w="1"/><text x="74.4333%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1833%" y="517" width="0.0797%" height="15" fill="rgb(218,7,24)" fg:x="931" fg:w="1"/><text x="74.4333%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1833%" y="501" width="0.0797%" height="15" fill="rgb(224,200,49)" fg:x="931" fg:w="1"/><text x="74.4333%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="74.2629%" y="709" width="0.1594%" height="15" fill="rgb(218,210,14)" fg:x="932" fg:w="2"/><text x="74.5129%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="74.2629%" y="693" width="0.1594%" height="15" fill="rgb(234,142,31)" fg:x="932" fg:w="2"/><text x="74.5129%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="74.3426%" y="677" width="0.0797%" height="15" fill="rgb(227,165,2)" fg:x="933" fg:w="1"/><text x="74.5926%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="74.3426%" y="661" width="0.0797%" height="15" fill="rgb(232,44,46)" fg:x="933" fg:w="1"/><text x="74.5926%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.3426%" y="645" width="0.0797%" height="15" fill="rgb(236,149,47)" fg:x="933" fg:w="1"/><text x="74.5926%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.3426%" y="629" width="0.0797%" height="15" fill="rgb(227,45,31)" fg:x="933" fg:w="1"/><text x="74.5926%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3426%" y="613" width="0.0797%" height="15" fill="rgb(240,176,51)" fg:x="933" fg:w="1"/><text x="74.5926%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3426%" y="597" width="0.0797%" height="15" fill="rgb(249,146,41)" fg:x="933" fg:w="1"/><text x="74.5926%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.3426%" y="581" width="0.0797%" height="15" fill="rgb(213,208,4)" fg:x="933" fg:w="1"/><text x="74.5926%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.4223%" y="693" width="0.0797%" height="15" fill="rgb(245,84,36)" fg:x="934" fg:w="1"/><text x="74.6723%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.4223%" y="677" width="0.0797%" height="15" fill="rgb(254,84,18)" fg:x="934" fg:w="1"/><text x="74.6723%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.4223%" y="661" width="0.0797%" height="15" fill="rgb(225,38,54)" fg:x="934" fg:w="1"/><text x="74.6723%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="74.4223%" y="645" width="0.0797%" height="15" fill="rgb(246,50,30)" fg:x="934" fg:w="1"/><text x="74.6723%" y="655.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.4223%" y="629" width="0.0797%" height="15" fill="rgb(246,148,9)" fg:x="934" fg:w="1"/><text x="74.6723%" y="639.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.4223%" y="613" width="0.0797%" height="15" fill="rgb(223,75,4)" fg:x="934" fg:w="1"/><text x="74.6723%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="74.4223%" y="709" width="0.1594%" height="15" fill="rgb(239,148,41)" fg:x="934" fg:w="2"/><text x="74.6723%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.5020%" y="693" width="0.0797%" height="15" fill="rgb(205,195,3)" fg:x="935" fg:w="1"/><text x="74.7520%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5020%" y="677" width="0.0797%" height="15" fill="rgb(254,161,1)" fg:x="935" fg:w="1"/><text x="74.7520%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.5020%" y="661" width="0.0797%" height="15" fill="rgb(211,229,8)" fg:x="935" fg:w="1"/><text x="74.7520%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5020%" y="645" width="0.0797%" height="15" fill="rgb(220,97,9)" fg:x="935" fg:w="1"/><text x="74.7520%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5020%" y="629" width="0.0797%" height="15" fill="rgb(240,218,8)" fg:x="935" fg:w="1"/><text x="74.7520%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.5020%" y="613" width="0.0797%" height="15" fill="rgb(250,44,0)" fg:x="935" fg:w="1"/><text x="74.7520%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5020%" y="597" width="0.0797%" height="15" fill="rgb(236,41,53)" fg:x="935" fg:w="1"/><text x="74.7520%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.5817%" y="661" width="0.0797%" height="15" fill="rgb(218,227,13)" fg:x="936" fg:w="1"/><text x="74.8317%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.5817%" y="645" width="0.0797%" height="15" fill="rgb(217,94,32)" fg:x="936" fg:w="1"/><text x="74.8317%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.5817%" y="629" width="0.0797%" height="15" fill="rgb(213,217,12)" fg:x="936" fg:w="1"/><text x="74.8317%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5817%" y="613" width="0.0797%" height="15" fill="rgb(229,13,46)" fg:x="936" fg:w="1"/><text x="74.8317%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.5817%" y="597" width="0.0797%" height="15" fill="rgb(243,139,5)" fg:x="936" fg:w="1"/><text x="74.8317%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.5817%" y="581" width="0.0797%" height="15" fill="rgb(249,38,45)" fg:x="936" fg:w="1"/><text x="74.8317%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.5817%" y="565" width="0.0797%" height="15" fill="rgb(216,70,11)" fg:x="936" fg:w="1"/><text x="74.8317%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.5817%" y="549" width="0.0797%" height="15" fill="rgb(253,101,25)" fg:x="936" fg:w="1"/><text x="74.8317%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5817%" y="533" width="0.0797%" height="15" fill="rgb(207,197,30)" fg:x="936" fg:w="1"/><text x="74.8317%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (41 samples, 3.27%)</title><rect x="71.4741%" y="725" width="3.2669%" height="15" fill="rgb(238,87,13)" fg:x="897" fg:w="41"/><text x="71.7241%" y="735.50">plu..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="74.5817%" y="709" width="0.1594%" height="15" fill="rgb(215,155,8)" fg:x="936" fg:w="2"/><text x="74.8317%" y="719.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="74.5817%" y="693" width="0.1594%" height="15" fill="rgb(239,166,38)" fg:x="936" fg:w="2"/><text x="74.8317%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="74.5817%" y="677" width="0.1594%" height="15" fill="rgb(240,194,35)" fg:x="936" fg:w="2"/><text x="74.8317%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="74.6614%" y="661" width="0.0797%" height="15" fill="rgb(219,10,44)" fg:x="937" fg:w="1"/><text x="74.9114%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="74.6614%" y="645" width="0.0797%" height="15" fill="rgb(251,220,35)" fg:x="937" fg:w="1"/><text x="74.9114%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6614%" y="629" width="0.0797%" height="15" fill="rgb(218,117,13)" fg:x="937" fg:w="1"/><text x="74.9114%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6614%" y="613" width="0.0797%" height="15" fill="rgb(221,213,40)" fg:x="937" fg:w="1"/><text x="74.9114%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.6614%" y="597" width="0.0797%" height="15" fill="rgb(251,224,35)" fg:x="937" fg:w="1"/><text x="74.9114%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6614%" y="581" width="0.0797%" height="15" fill="rgb(241,33,39)" fg:x="937" fg:w="1"/><text x="74.9114%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6614%" y="565" width="0.0797%" height="15" fill="rgb(222,74,17)" fg:x="937" fg:w="1"/><text x="74.9114%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6614%" y="549" width="0.0797%" height="15" fill="rgb(225,103,0)" fg:x="937" fg:w="1"/><text x="74.9114%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6614%" y="533" width="0.0797%" height="15" fill="rgb(240,0,12)" fg:x="937" fg:w="1"/><text x="74.9114%" y="543.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="74.7410%" y="693" width="0.0797%" height="15" fill="rgb(233,213,37)" fg:x="938" fg:w="1"/><text x="74.9910%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.8207%" y="613" width="0.0797%" height="15" fill="rgb(225,84,52)" fg:x="939" fg:w="1"/><text x="75.0707%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.8207%" y="597" width="0.0797%" height="15" fill="rgb(247,160,51)" fg:x="939" fg:w="1"/><text x="75.0707%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8207%" y="581" width="0.0797%" height="15" fill="rgb(244,60,51)" fg:x="939" fg:w="1"/><text x="75.0707%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.8207%" y="565" width="0.0797%" height="15" fill="rgb(233,114,7)" fg:x="939" fg:w="1"/><text x="75.0707%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.8207%" y="549" width="0.0797%" height="15" fill="rgb(246,136,16)" fg:x="939" fg:w="1"/><text x="75.0707%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.8207%" y="533" width="0.0797%" height="15" fill="rgb(243,114,45)" fg:x="939" fg:w="1"/><text x="75.0707%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="74.8207%" y="693" width="0.1594%" height="15" fill="rgb(247,183,43)" fg:x="939" fg:w="2"/><text x="75.0707%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="74.8207%" y="677" width="0.1594%" height="15" fill="rgb(251,210,42)" fg:x="939" fg:w="2"/><text x="75.0707%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="74.8207%" y="661" width="0.1594%" height="15" fill="rgb(221,88,35)" fg:x="939" fg:w="2"/><text x="75.0707%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="74.8207%" y="645" width="0.1594%" height="15" fill="rgb(242,21,20)" fg:x="939" fg:w="2"/><text x="75.0707%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="74.8207%" y="629" width="0.1594%" height="15" fill="rgb(233,226,36)" fg:x="939" fg:w="2"/><text x="75.0707%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9004%" y="613" width="0.0797%" height="15" fill="rgb(243,189,34)" fg:x="940" fg:w="1"/><text x="75.1504%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9004%" y="597" width="0.0797%" height="15" fill="rgb(207,145,50)" fg:x="940" fg:w="1"/><text x="75.1504%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="74.7410%" y="725" width="0.3187%" height="15" fill="rgb(242,1,50)" fg:x="938" fg:w="4"/><text x="74.9910%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="74.7410%" y="709" width="0.3187%" height="15" fill="rgb(231,65,32)" fg:x="938" fg:w="4"/><text x="74.9910%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="74.9801%" y="693" width="0.0797%" height="15" fill="rgb(208,68,49)" fg:x="941" fg:w="1"/><text x="75.2301%" y="703.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="74.9801%" y="677" width="0.0797%" height="15" fill="rgb(253,54,49)" fg:x="941" fg:w="1"/><text x="75.2301%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="75.0598%" y="709" width="0.0797%" height="15" fill="rgb(245,186,24)" fg:x="942" fg:w="1"/><text x="75.3098%" y="719.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0598%" y="693" width="0.0797%" height="15" fill="rgb(209,2,41)" fg:x="942" fg:w="1"/><text x="75.3098%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="75.1394%" y="709" width="0.0797%" height="15" fill="rgb(242,208,54)" fg:x="943" fg:w="1"/><text x="75.3894%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2191%" y="677" width="0.0797%" height="15" fill="rgb(225,9,51)" fg:x="944" fg:w="1"/><text x="75.4691%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.2191%" y="661" width="0.0797%" height="15" fill="rgb(207,207,25)" fg:x="944" fg:w="1"/><text x="75.4691%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.2191%" y="645" width="0.0797%" height="15" fill="rgb(253,96,18)" fg:x="944" fg:w="1"/><text x="75.4691%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.2191%" y="629" width="0.0797%" height="15" fill="rgb(252,215,20)" fg:x="944" fg:w="1"/><text x="75.4691%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.2191%" y="613" width="0.0797%" height="15" fill="rgb(245,227,26)" fg:x="944" fg:w="1"/><text x="75.4691%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2191%" y="597" width="0.0797%" height="15" fill="rgb(241,208,0)" fg:x="944" fg:w="1"/><text x="75.4691%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.2191%" y="581" width="0.0797%" height="15" fill="rgb(224,130,10)" fg:x="944" fg:w="1"/><text x="75.4691%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.2191%" y="565" width="0.0797%" height="15" fill="rgb(237,29,0)" fg:x="944" fg:w="1"/><text x="75.4691%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.2191%" y="549" width="0.0797%" height="15" fill="rgb(219,27,41)" fg:x="944" fg:w="1"/><text x="75.4691%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.2191%" y="533" width="0.0797%" height="15" fill="rgb(245,101,19)" fg:x="944" fg:w="1"/><text x="75.4691%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.2191%" y="517" width="0.0797%" height="15" fill="rgb(243,44,37)" fg:x="944" fg:w="1"/><text x="75.4691%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (78 samples, 6.22%)</title><rect x="69.2430%" y="741" width="6.2151%" height="15" fill="rgb(228,213,43)" fg:x="869" fg:w="78"/><text x="69.4930%" y="751.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="75.0598%" y="725" width="0.3984%" height="15" fill="rgb(219,163,21)" fg:x="942" fg:w="5"/><text x="75.3098%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="75.2191%" y="709" width="0.2390%" height="15" fill="rgb(234,86,24)" fg:x="944" fg:w="3"/><text x="75.4691%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="75.2191%" y="693" width="0.2390%" height="15" fill="rgb(225,10,24)" fg:x="944" fg:w="3"/><text x="75.4691%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="75.2988%" y="677" width="0.1594%" height="15" fill="rgb(218,109,7)" fg:x="945" fg:w="2"/><text x="75.5488%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="75.2988%" y="661" width="0.1594%" height="15" fill="rgb(210,20,26)" fg:x="945" fg:w="2"/><text x="75.5488%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="75.2988%" y="645" width="0.1594%" height="15" fill="rgb(216,18,1)" fg:x="945" fg:w="2"/><text x="75.5488%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="75.2988%" y="629" width="0.1594%" height="15" fill="rgb(206,163,23)" fg:x="945" fg:w="2"/><text x="75.5488%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="75.2988%" y="613" width="0.1594%" height="15" fill="rgb(229,150,31)" fg:x="945" fg:w="2"/><text x="75.5488%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.2988%" y="597" width="0.1594%" height="15" fill="rgb(231,10,5)" fg:x="945" fg:w="2"/><text x="75.5488%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.2988%" y="581" width="0.1594%" height="15" fill="rgb(250,40,50)" fg:x="945" fg:w="2"/><text x="75.5488%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.2988%" y="565" width="0.1594%" height="15" fill="rgb(217,119,7)" fg:x="945" fg:w="2"/><text x="75.5488%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.2988%" y="549" width="0.1594%" height="15" fill="rgb(245,214,40)" fg:x="945" fg:w="2"/><text x="75.5488%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3785%" y="533" width="0.0797%" height="15" fill="rgb(216,187,1)" fg:x="946" fg:w="1"/><text x="75.6285%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="75.4582%" y="725" width="0.0797%" height="15" fill="rgb(237,146,21)" fg:x="947" fg:w="1"/><text x="75.7082%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="75.4582%" y="709" width="0.0797%" height="15" fill="rgb(210,174,47)" fg:x="947" fg:w="1"/><text x="75.7082%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.4582%" y="693" width="0.0797%" height="15" fill="rgb(218,111,39)" fg:x="947" fg:w="1"/><text x="75.7082%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.4582%" y="677" width="0.0797%" height="15" fill="rgb(224,95,19)" fg:x="947" fg:w="1"/><text x="75.7082%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="75.4582%" y="661" width="0.0797%" height="15" fill="rgb(234,15,38)" fg:x="947" fg:w="1"/><text x="75.7082%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="75.4582%" y="645" width="0.0797%" height="15" fill="rgb(246,56,12)" fg:x="947" fg:w="1"/><text x="75.7082%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="75.4582%" y="629" width="0.0797%" height="15" fill="rgb(247,16,17)" fg:x="947" fg:w="1"/><text x="75.7082%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.4582%" y="613" width="0.0797%" height="15" fill="rgb(215,151,11)" fg:x="947" fg:w="1"/><text x="75.7082%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.4582%" y="597" width="0.0797%" height="15" fill="rgb(225,16,24)" fg:x="947" fg:w="1"/><text x="75.7082%" y="607.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="75.4582%" y="581" width="0.0797%" height="15" fill="rgb(217,117,5)" fg:x="947" fg:w="1"/><text x="75.7082%" y="591.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="75.5378%" y="725" width="0.0797%" height="15" fill="rgb(246,187,53)" fg:x="948" fg:w="1"/><text x="75.7878%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="75.6175%" y="629" width="0.1594%" height="15" fill="rgb(241,71,40)" fg:x="949" fg:w="2"/><text x="75.8675%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.6175%" y="613" width="0.1594%" height="15" fill="rgb(231,67,39)" fg:x="949" fg:w="2"/><text x="75.8675%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="75.6175%" y="597" width="0.1594%" height="15" fill="rgb(222,120,24)" fg:x="949" fg:w="2"/><text x="75.8675%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="75.6175%" y="581" width="0.1594%" height="15" fill="rgb(248,3,3)" fg:x="949" fg:w="2"/><text x="75.8675%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.6972%" y="565" width="0.0797%" height="15" fill="rgb(228,218,5)" fg:x="950" fg:w="1"/><text x="75.9472%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.7769%" y="613" width="0.1594%" height="15" fill="rgb(212,202,43)" fg:x="951" fg:w="2"/><text x="76.0269%" y="623.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="75.7769%" y="597" width="0.1594%" height="15" fill="rgb(235,183,2)" fg:x="951" fg:w="2"/><text x="76.0269%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.8566%" y="581" width="0.0797%" height="15" fill="rgb(230,165,10)" fg:x="952" fg:w="1"/><text x="76.1066%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.8566%" y="565" width="0.0797%" height="15" fill="rgb(219,54,40)" fg:x="952" fg:w="1"/><text x="76.1066%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.8566%" y="549" width="0.0797%" height="15" fill="rgb(244,73,9)" fg:x="952" fg:w="1"/><text x="76.1066%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.8566%" y="533" width="0.0797%" height="15" fill="rgb(212,32,45)" fg:x="952" fg:w="1"/><text x="76.1066%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.8566%" y="517" width="0.0797%" height="15" fill="rgb(205,58,31)" fg:x="952" fg:w="1"/><text x="76.1066%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.0159%" y="597" width="0.0797%" height="15" fill="rgb(250,120,43)" fg:x="954" fg:w="1"/><text x="76.2659%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="75.6175%" y="645" width="0.6375%" height="15" fill="rgb(235,13,10)" fg:x="949" fg:w="8"/><text x="75.8675%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="75.7769%" y="629" width="0.4781%" height="15" fill="rgb(232,219,31)" fg:x="951" fg:w="6"/><text x="76.0269%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="75.9363%" y="613" width="0.3187%" height="15" fill="rgb(218,157,51)" fg:x="953" fg:w="4"/><text x="76.1863%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.0956%" y="597" width="0.1594%" height="15" fill="rgb(211,91,52)" fg:x="955" fg:w="2"/><text x="76.3456%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.1753%" y="581" width="0.0797%" height="15" fill="rgb(240,173,1)" fg:x="956" fg:w="1"/><text x="76.4253%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.1753%" y="565" width="0.0797%" height="15" fill="rgb(248,20,47)" fg:x="956" fg:w="1"/><text x="76.4253%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.1753%" y="549" width="0.0797%" height="15" fill="rgb(217,221,40)" fg:x="956" fg:w="1"/><text x="76.4253%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.1753%" y="533" width="0.0797%" height="15" fill="rgb(226,149,51)" fg:x="956" fg:w="1"/><text x="76.4253%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.1753%" y="517" width="0.0797%" height="15" fill="rgb(252,193,7)" fg:x="956" fg:w="1"/><text x="76.4253%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.1753%" y="501" width="0.0797%" height="15" fill="rgb(205,123,0)" fg:x="956" fg:w="1"/><text x="76.4253%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.1753%" y="485" width="0.0797%" height="15" fill="rgb(233,173,25)" fg:x="956" fg:w="1"/><text x="76.4253%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2550%" y="645" width="0.0797%" height="15" fill="rgb(216,63,32)" fg:x="957" fg:w="1"/><text x="76.5050%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2550%" y="629" width="0.0797%" height="15" fill="rgb(209,56,45)" fg:x="957" fg:w="1"/><text x="76.5050%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2550%" y="613" width="0.0797%" height="15" fill="rgb(226,111,49)" fg:x="957" fg:w="1"/><text x="76.5050%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2550%" y="597" width="0.0797%" height="15" fill="rgb(244,181,21)" fg:x="957" fg:w="1"/><text x="76.5050%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4143%" y="597" width="0.0797%" height="15" fill="rgb(222,126,15)" fg:x="959" fg:w="1"/><text x="76.6643%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.4940%" y="581" width="0.0797%" height="15" fill="rgb(222,95,17)" fg:x="960" fg:w="1"/><text x="76.7440%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="76.5737%" y="581" width="0.1594%" height="15" fill="rgb(254,46,5)" fg:x="961" fg:w="2"/><text x="76.8237%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="76.4143%" y="613" width="0.3984%" height="15" fill="rgb(236,216,35)" fg:x="959" fg:w="5"/><text x="76.6643%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="76.4940%" y="597" width="0.3187%" height="15" fill="rgb(217,187,26)" fg:x="960" fg:w="4"/><text x="76.7440%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.7331%" y="581" width="0.0797%" height="15" fill="rgb(207,192,25)" fg:x="963" fg:w="1"/><text x="76.9831%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.7331%" y="565" width="0.0797%" height="15" fill="rgb(253,135,27)" fg:x="963" fg:w="1"/><text x="76.9831%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.7331%" y="549" width="0.0797%" height="15" fill="rgb(211,122,29)" fg:x="963" fg:w="1"/><text x="76.9831%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.7331%" y="533" width="0.0797%" height="15" fill="rgb(233,162,40)" fg:x="963" fg:w="1"/><text x="76.9831%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="76.4143%" y="629" width="0.4781%" height="15" fill="rgb(222,184,47)" fg:x="959" fg:w="6"/><text x="76.6643%" y="639.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="76.8127%" y="613" width="0.0797%" height="15" fill="rgb(249,99,23)" fg:x="964" fg:w="1"/><text x="77.0627%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.8127%" y="597" width="0.0797%" height="15" fill="rgb(214,60,12)" fg:x="964" fg:w="1"/><text x="77.0627%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.8127%" y="581" width="0.0797%" height="15" fill="rgb(250,229,36)" fg:x="964" fg:w="1"/><text x="77.0627%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.8924%" y="597" width="0.0797%" height="15" fill="rgb(232,195,10)" fg:x="965" fg:w="1"/><text x="77.1424%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9721%" y="597" width="0.0797%" height="15" fill="rgb(205,213,31)" fg:x="966" fg:w="1"/><text x="77.2221%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.9721%" y="581" width="0.0797%" height="15" fill="rgb(237,43,8)" fg:x="966" fg:w="1"/><text x="77.2221%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9721%" y="565" width="0.0797%" height="15" fill="rgb(216,208,3)" fg:x="966" fg:w="1"/><text x="77.2221%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.2908%" y="549" width="0.0797%" height="15" fill="rgb(228,179,44)" fg:x="970" fg:w="1"/><text x="77.5408%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2908%" y="533" width="0.0797%" height="15" fill="rgb(230,192,27)" fg:x="970" fg:w="1"/><text x="77.5408%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.2908%" y="517" width="0.0797%" height="15" fill="rgb(251,30,38)" fg:x="970" fg:w="1"/><text x="77.5408%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2908%" y="501" width="0.0797%" height="15" fill="rgb(246,55,52)" fg:x="970" fg:w="1"/><text x="77.5408%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="77.2112%" y="581" width="0.3187%" height="15" fill="rgb(249,79,26)" fg:x="969" fg:w="4"/><text x="77.4612%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="77.2908%" y="565" width="0.2390%" height="15" fill="rgb(220,202,16)" fg:x="970" fg:w="3"/><text x="77.5408%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="77.3705%" y="549" width="0.1594%" height="15" fill="rgb(250,170,23)" fg:x="971" fg:w="2"/><text x="77.6205%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.3705%" y="533" width="0.1594%" height="15" fill="rgb(230,7,37)" fg:x="971" fg:w="2"/><text x="77.6205%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="77.3705%" y="517" width="0.1594%" height="15" fill="rgb(213,71,1)" fg:x="971" fg:w="2"/><text x="77.6205%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="77.3705%" y="501" width="0.1594%" height="15" fill="rgb(227,87,39)" fg:x="971" fg:w="2"/><text x="77.6205%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.4502%" y="485" width="0.0797%" height="15" fill="rgb(210,41,29)" fg:x="972" fg:w="1"/><text x="77.7002%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4502%" y="469" width="0.0797%" height="15" fill="rgb(206,191,31)" fg:x="972" fg:w="1"/><text x="77.7002%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.72%)</title><rect x="76.8924%" y="629" width="0.7171%" height="15" fill="rgb(247,75,54)" fg:x="965" fg:w="9"/><text x="77.1424%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.72%)</title><rect x="76.8924%" y="613" width="0.7171%" height="15" fill="rgb(208,54,50)" fg:x="965" fg:w="9"/><text x="77.1424%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="77.0518%" y="597" width="0.5578%" height="15" fill="rgb(214,90,37)" fg:x="967" fg:w="7"/><text x="77.3018%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5299%" y="581" width="0.0797%" height="15" fill="rgb(220,132,6)" fg:x="973" fg:w="1"/><text x="77.7799%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="77.6096%" y="437" width="0.0797%" height="15" fill="rgb(213,167,7)" fg:x="974" fg:w="1"/><text x="77.8596%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.6096%" y="533" width="0.1594%" height="15" fill="rgb(243,36,27)" fg:x="974" fg:w="2"/><text x="77.8596%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.6096%" y="517" width="0.1594%" height="15" fill="rgb(235,147,12)" fg:x="974" fg:w="2"/><text x="77.8596%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.6096%" y="501" width="0.1594%" height="15" fill="rgb(212,198,44)" fg:x="974" fg:w="2"/><text x="77.8596%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.6096%" y="485" width="0.1594%" height="15" fill="rgb(218,68,50)" fg:x="974" fg:w="2"/><text x="77.8596%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.6096%" y="469" width="0.1594%" height="15" fill="rgb(224,79,48)" fg:x="974" fg:w="2"/><text x="77.8596%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.6096%" y="453" width="0.1594%" height="15" fill="rgb(213,191,50)" fg:x="974" fg:w="2"/><text x="77.8596%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.6892%" y="437" width="0.0797%" height="15" fill="rgb(254,146,10)" fg:x="975" fg:w="1"/><text x="77.9392%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.6892%" y="421" width="0.0797%" height="15" fill="rgb(215,175,11)" fg:x="975" fg:w="1"/><text x="77.9392%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6892%" y="405" width="0.0797%" height="15" fill="rgb(207,49,7)" fg:x="975" fg:w="1"/><text x="77.9392%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="77.6096%" y="565" width="0.2390%" height="15" fill="rgb(234,144,29)" fg:x="974" fg:w="3"/><text x="77.8596%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="77.6096%" y="549" width="0.2390%" height="15" fill="rgb(213,222,48)" fg:x="974" fg:w="3"/><text x="77.8596%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.7689%" y="533" width="0.0797%" height="15" fill="rgb(222,8,6)" fg:x="976" fg:w="1"/><text x="78.0189%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7689%" y="517" width="0.0797%" height="15" fill="rgb(221,114,49)" fg:x="976" fg:w="1"/><text x="78.0189%" y="527.50"></text></g><g><title>engine::session::Session::close (31 samples, 2.47%)</title><rect x="75.4582%" y="741" width="2.4701%" height="15" fill="rgb(250,140,42)" fg:x="947" fg:w="31"/><text x="75.7082%" y="751.50">en..</text></g><g><title>engine::session::state::State::close (29 samples, 2.31%)</title><rect x="75.6175%" y="725" width="2.3108%" height="15" fill="rgb(250,150,27)" fg:x="949" fg:w="29"/><text x="75.8675%" y="735.50">e..</text></g><g><title>engine::session::state::State::flush_entities (29 samples, 2.31%)</title><rect x="75.6175%" y="709" width="2.3108%" height="15" fill="rgb(252,159,3)" fg:x="949" fg:w="29"/><text x="75.8675%" y="719.50">e..</text></g><g><title>core::iter::adapters::try_process (29 samples, 2.31%)</title><rect x="75.6175%" y="693" width="2.3108%" height="15" fill="rgb(241,182,3)" fg:x="949" fg:w="29"/><text x="75.8675%" y="703.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 2.31%)</title><rect x="75.6175%" y="677" width="2.3108%" height="15" fill="rgb(236,3,9)" fg:x="949" fg:w="29"/><text x="75.8675%" y="687.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (29 samples, 2.31%)</title><rect x="75.6175%" y="661" width="2.3108%" height="15" fill="rgb(223,227,51)" fg:x="949" fg:w="29"/><text x="75.8675%" y="671.50">e..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.59%)</title><rect x="76.3347%" y="645" width="1.5936%" height="15" fill="rgb(232,133,30)" fg:x="958" fg:w="20"/><text x="76.5847%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="77.6096%" y="629" width="0.3187%" height="15" fill="rgb(209,93,27)" fg:x="974" fg:w="4"/><text x="77.8596%" y="639.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="77.6096%" y="613" width="0.3187%" height="15" fill="rgb(208,108,34)" fg:x="974" fg:w="4"/><text x="77.8596%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="77.6096%" y="597" width="0.3187%" height="15" fill="rgb(215,189,13)" fg:x="974" fg:w="4"/><text x="77.8596%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="77.6096%" y="581" width="0.3187%" height="15" fill="rgb(206,88,23)" fg:x="974" fg:w="4"/><text x="77.8596%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.8486%" y="565" width="0.0797%" height="15" fill="rgb(240,173,0)" fg:x="977" fg:w="1"/><text x="78.0986%" y="575.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="77.9283%" y="549" width="0.0797%" height="15" fill="rgb(223,106,52)" fg:x="978" fg:w="1"/><text x="78.1783%" y="559.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="77.9283%" y="533" width="0.0797%" height="15" fill="rgb(206,130,16)" fg:x="978" fg:w="1"/><text x="78.1783%" y="543.50"></text></g><g><title>core::fmt::builders::DebugTuple::field (1 samples, 0.08%)</title><rect x="77.9283%" y="517" width="0.0797%" height="15" fill="rgb(220,54,25)" fg:x="978" fg:w="1"/><text x="78.1783%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="77.9283%" y="501" width="0.0797%" height="15" fill="rgb(210,4,38)" fg:x="978" fg:w="1"/><text x="78.1783%" y="511.50"></text></g><g><title>core::fmt::builders::DebugTuple::field::{{closure}} (1 samples, 0.08%)</title><rect x="77.9283%" y="485" width="0.0797%" height="15" fill="rgb(238,94,39)" fg:x="978" fg:w="1"/><text x="78.1783%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.9283%" y="469" width="0.0797%" height="15" fill="rgb(234,124,34)" fg:x="978" fg:w="1"/><text x="78.1783%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.9283%" y="453" width="0.0797%" height="15" fill="rgb(221,91,40)" fg:x="978" fg:w="1"/><text x="78.1783%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="77.9283%" y="437" width="0.0797%" height="15" fill="rgb(246,53,28)" fg:x="978" fg:w="1"/><text x="78.1783%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="77.9283%" y="421" width="0.0797%" height="15" fill="rgb(229,109,7)" fg:x="978" fg:w="1"/><text x="78.1783%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="77.9283%" y="405" width="0.0797%" height="15" fill="rgb(249,117,8)" fg:x="978" fg:w="1"/><text x="78.1783%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="77.9283%" y="389" width="0.0797%" height="15" fill="rgb(210,181,1)" fg:x="978" fg:w="1"/><text x="78.1783%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.9283%" y="373" width="0.0797%" height="15" fill="rgb(211,66,1)" fg:x="978" fg:w="1"/><text x="78.1783%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="77.9283%" y="357" width="0.0797%" height="15" fill="rgb(221,90,14)" fg:x="978" fg:w="1"/><text x="78.1783%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.9283%" y="341" width="0.0797%" height="15" fill="rgb(219,222,44)" fg:x="978" fg:w="1"/><text x="78.1783%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="77.9283%" y="325" width="0.0797%" height="15" fill="rgb(246,34,33)" fg:x="978" fg:w="1"/><text x="78.1783%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.9283%" y="309" width="0.0797%" height="15" fill="rgb(227,135,41)" fg:x="978" fg:w="1"/><text x="78.1783%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="77.9283%" y="293" width="0.0797%" height="15" fill="rgb(226,15,14)" fg:x="978" fg:w="1"/><text x="78.1783%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="77.9283%" y="277" width="0.0797%" height="15" fill="rgb(236,148,47)" fg:x="978" fg:w="1"/><text x="78.1783%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="77.9283%" y="261" width="0.0797%" height="15" fill="rgb(233,162,52)" fg:x="978" fg:w="1"/><text x="78.1783%" y="271.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="78.0080%" y="485" width="0.0797%" height="15" fill="rgb(244,35,28)" fg:x="979" fg:w="1"/><text x="78.2580%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="78.0080%" y="469" width="0.0797%" height="15" fill="rgb(205,121,10)" fg:x="979" fg:w="1"/><text x="78.2580%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="77.9283%" y="693" width="0.2390%" height="15" fill="rgb(250,58,18)" fg:x="978" fg:w="3"/><text x="78.1783%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="77.9283%" y="677" width="0.2390%" height="15" fill="rgb(216,37,13)" fg:x="978" fg:w="3"/><text x="78.1783%" y="687.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="77.9283%" y="661" width="0.2390%" height="15" fill="rgb(221,215,42)" fg:x="978" fg:w="3"/><text x="78.1783%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="77.9283%" y="645" width="0.2390%" height="15" fill="rgb(217,214,19)" fg:x="978" fg:w="3"/><text x="78.1783%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (3 samples, 0.24%)</title><rect x="77.9283%" y="629" width="0.2390%" height="15" fill="rgb(233,139,13)" fg:x="978" fg:w="3"/><text x="78.1783%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (3 samples, 0.24%)</title><rect x="77.9283%" y="613" width="0.2390%" height="15" fill="rgb(247,168,23)" fg:x="978" fg:w="3"/><text x="78.1783%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (3 samples, 0.24%)</title><rect x="77.9283%" y="597" width="0.2390%" height="15" fill="rgb(207,202,1)" fg:x="978" fg:w="3"/><text x="78.1783%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (3 samples, 0.24%)</title><rect x="77.9283%" y="581" width="0.2390%" height="15" fill="rgb(220,155,48)" fg:x="978" fg:w="3"/><text x="78.1783%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (3 samples, 0.24%)</title><rect x="77.9283%" y="565" width="0.2390%" height="15" fill="rgb(250,43,26)" fg:x="978" fg:w="3"/><text x="78.1783%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="78.0080%" y="549" width="0.1594%" height="15" fill="rgb(212,190,23)" fg:x="979" fg:w="2"/><text x="78.2580%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="78.0080%" y="533" width="0.1594%" height="15" fill="rgb(216,39,24)" fg:x="979" fg:w="2"/><text x="78.2580%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (2 samples, 0.16%)</title><rect x="78.0080%" y="517" width="0.1594%" height="15" fill="rgb(252,113,16)" fg:x="979" fg:w="2"/><text x="78.2580%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (2 samples, 0.16%)</title><rect x="78.0080%" y="501" width="0.1594%" height="15" fill="rgb(208,113,19)" fg:x="979" fg:w="2"/><text x="78.2580%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="78.0876%" y="485" width="0.0797%" height="15" fill="rgb(234,107,25)" fg:x="980" fg:w="1"/><text x="78.3376%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.0876%" y="469" width="0.0797%" height="15" fill="rgb(234,217,51)" fg:x="980" fg:w="1"/><text x="78.3376%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.0876%" y="453" width="0.0797%" height="15" fill="rgb(251,29,42)" fg:x="980" fg:w="1"/><text x="78.3376%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="78.0876%" y="437" width="0.0797%" height="15" fill="rgb(221,62,51)" fg:x="980" fg:w="1"/><text x="78.3376%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="78.0876%" y="421" width="0.0797%" height="15" fill="rgb(240,192,43)" fg:x="980" fg:w="1"/><text x="78.3376%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="78.0876%" y="405" width="0.0797%" height="15" fill="rgb(224,157,47)" fg:x="980" fg:w="1"/><text x="78.3376%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="78.0876%" y="389" width="0.0797%" height="15" fill="rgb(226,84,45)" fg:x="980" fg:w="1"/><text x="78.3376%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="78.0876%" y="373" width="0.0797%" height="15" fill="rgb(208,207,23)" fg:x="980" fg:w="1"/><text x="78.3376%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.1673%" y="677" width="0.0797%" height="15" fill="rgb(253,34,51)" fg:x="981" fg:w="1"/><text x="78.4173%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.1673%" y="661" width="0.0797%" height="15" fill="rgb(227,26,34)" fg:x="981" fg:w="1"/><text x="78.4173%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.1673%" y="645" width="0.0797%" height="15" fill="rgb(245,75,19)" fg:x="981" fg:w="1"/><text x="78.4173%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2470%" y="501" width="0.0797%" height="15" fill="rgb(250,191,31)" fg:x="982" fg:w="1"/><text x="78.4970%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2470%" y="485" width="0.0797%" height="15" fill="rgb(224,11,50)" fg:x="982" fg:w="1"/><text x="78.4970%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2470%" y="469" width="0.0797%" height="15" fill="rgb(231,171,7)" fg:x="982" fg:w="1"/><text x="78.4970%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.2470%" y="453" width="0.0797%" height="15" fill="rgb(252,214,10)" fg:x="982" fg:w="1"/><text x="78.4970%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2470%" y="437" width="0.0797%" height="15" fill="rgb(249,45,46)" fg:x="982" fg:w="1"/><text x="78.4970%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2470%" y="421" width="0.0797%" height="15" fill="rgb(240,173,7)" fg:x="982" fg:w="1"/><text x="78.4970%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.2470%" y="405" width="0.0797%" height="15" fill="rgb(235,214,13)" fg:x="982" fg:w="1"/><text x="78.4970%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.2470%" y="389" width="0.0797%" height="15" fill="rgb(245,156,8)" fg:x="982" fg:w="1"/><text x="78.4970%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.2470%" y="373" width="0.0797%" height="15" fill="rgb(235,46,12)" fg:x="982" fg:w="1"/><text x="78.4970%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.2470%" y="357" width="0.0797%" height="15" fill="rgb(221,81,14)" fg:x="982" fg:w="1"/><text x="78.4970%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.2470%" y="341" width="0.0797%" height="15" fill="rgb(238,207,9)" fg:x="982" fg:w="1"/><text x="78.4970%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.2470%" y="325" width="0.0797%" height="15" fill="rgb(224,129,35)" fg:x="982" fg:w="1"/><text x="78.4970%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.2470%" y="309" width="0.0797%" height="15" fill="rgb(243,218,34)" fg:x="982" fg:w="1"/><text x="78.4970%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.2470%" y="293" width="0.0797%" height="15" fill="rgb(220,166,13)" fg:x="982" fg:w="1"/><text x="78.4970%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.2470%" y="277" width="0.0797%" height="15" fill="rgb(227,167,49)" fg:x="982" fg:w="1"/><text x="78.4970%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.2470%" y="261" width="0.0797%" height="15" fill="rgb(234,142,12)" fg:x="982" fg:w="1"/><text x="78.4970%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.2470%" y="245" width="0.0797%" height="15" fill="rgb(207,100,48)" fg:x="982" fg:w="1"/><text x="78.4970%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.2470%" y="229" width="0.0797%" height="15" fill="rgb(210,25,14)" fg:x="982" fg:w="1"/><text x="78.4970%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.2470%" y="213" width="0.0797%" height="15" fill="rgb(246,116,27)" fg:x="982" fg:w="1"/><text x="78.4970%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="78.3267%" y="501" width="0.1594%" height="15" fill="rgb(214,193,42)" fg:x="983" fg:w="2"/><text x="78.5767%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.3267%" y="485" width="0.1594%" height="15" fill="rgb(214,122,8)" fg:x="983" fg:w="2"/><text x="78.5767%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.3267%" y="469" width="0.1594%" height="15" fill="rgb(244,173,18)" fg:x="983" fg:w="2"/><text x="78.5767%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="78.3267%" y="453" width="0.1594%" height="15" fill="rgb(232,68,19)" fg:x="983" fg:w="2"/><text x="78.5767%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.3267%" y="437" width="0.1594%" height="15" fill="rgb(236,224,1)" fg:x="983" fg:w="2"/><text x="78.5767%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="78.3267%" y="421" width="0.1594%" height="15" fill="rgb(240,11,8)" fg:x="983" fg:w="2"/><text x="78.5767%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.3267%" y="405" width="0.1594%" height="15" fill="rgb(244,159,20)" fg:x="983" fg:w="2"/><text x="78.5767%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.3267%" y="389" width="0.1594%" height="15" fill="rgb(240,223,54)" fg:x="983" fg:w="2"/><text x="78.5767%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="78.3267%" y="373" width="0.1594%" height="15" fill="rgb(237,146,5)" fg:x="983" fg:w="2"/><text x="78.5767%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="78.3267%" y="357" width="0.1594%" height="15" fill="rgb(218,221,32)" fg:x="983" fg:w="2"/><text x="78.5767%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="78.3267%" y="341" width="0.1594%" height="15" fill="rgb(244,96,26)" fg:x="983" fg:w="2"/><text x="78.5767%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.3267%" y="325" width="0.1594%" height="15" fill="rgb(245,184,37)" fg:x="983" fg:w="2"/><text x="78.5767%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.3267%" y="309" width="0.1594%" height="15" fill="rgb(248,91,47)" fg:x="983" fg:w="2"/><text x="78.5767%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="78.3267%" y="293" width="0.1594%" height="15" fill="rgb(243,199,8)" fg:x="983" fg:w="2"/><text x="78.5767%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.3267%" y="277" width="0.1594%" height="15" fill="rgb(249,12,15)" fg:x="983" fg:w="2"/><text x="78.5767%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.4064%" y="261" width="0.0797%" height="15" fill="rgb(245,97,12)" fg:x="984" fg:w="1"/><text x="78.6564%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="78.4064%" y="245" width="0.0797%" height="15" fill="rgb(244,61,1)" fg:x="984" fg:w="1"/><text x="78.6564%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.4064%" y="229" width="0.0797%" height="15" fill="rgb(222,194,10)" fg:x="984" fg:w="1"/><text x="78.6564%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.4064%" y="213" width="0.0797%" height="15" fill="rgb(226,178,8)" fg:x="984" fg:w="1"/><text x="78.6564%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.4064%" y="197" width="0.0797%" height="15" fill="rgb(241,32,34)" fg:x="984" fg:w="1"/><text x="78.6564%" y="207.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="78.2470%" y="565" width="0.3984%" height="15" fill="rgb(254,26,6)" fg:x="982" fg:w="5"/><text x="78.4970%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="78.2470%" y="549" width="0.3984%" height="15" fill="rgb(249,71,11)" fg:x="982" fg:w="5"/><text x="78.4970%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="78.2470%" y="533" width="0.3984%" height="15" fill="rgb(232,170,27)" fg:x="982" fg:w="5"/><text x="78.4970%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="78.2470%" y="517" width="0.3984%" height="15" fill="rgb(214,223,17)" fg:x="982" fg:w="5"/><text x="78.4970%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="78.4861%" y="501" width="0.1594%" height="15" fill="rgb(250,18,15)" fg:x="985" fg:w="2"/><text x="78.7361%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="78.4861%" y="485" width="0.1594%" height="15" fill="rgb(212,153,51)" fg:x="985" fg:w="2"/><text x="78.7361%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.4861%" y="469" width="0.1594%" height="15" fill="rgb(219,194,12)" fg:x="985" fg:w="2"/><text x="78.7361%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.4861%" y="453" width="0.1594%" height="15" fill="rgb(212,58,17)" fg:x="985" fg:w="2"/><text x="78.7361%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.4861%" y="437" width="0.1594%" height="15" fill="rgb(254,5,10)" fg:x="985" fg:w="2"/><text x="78.7361%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.4861%" y="421" width="0.1594%" height="15" fill="rgb(246,91,7)" fg:x="985" fg:w="2"/><text x="78.7361%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="78.4861%" y="405" width="0.1594%" height="15" fill="rgb(218,108,49)" fg:x="985" fg:w="2"/><text x="78.7361%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5657%" y="389" width="0.0797%" height="15" fill="rgb(238,123,20)" fg:x="986" fg:w="1"/><text x="78.8157%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.48%)</title><rect x="78.2470%" y="597" width="0.4781%" height="15" fill="rgb(231,69,23)" fg:x="982" fg:w="6"/><text x="78.4970%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (6 samples, 0.48%)</title><rect x="78.2470%" y="581" width="0.4781%" height="15" fill="rgb(230,209,3)" fg:x="982" fg:w="6"/><text x="78.4970%" y="591.50"></text></g><g><title>plugins_core::finding::DefaultFinder::find_top_container (1 samples, 0.08%)</title><rect x="78.6454%" y="565" width="0.0797%" height="15" fill="rgb(231,19,0)" fg:x="987" fg:w="1"/><text x="78.8954%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.6454%" y="549" width="0.0797%" height="15" fill="rgb(226,192,25)" fg:x="987" fg:w="1"/><text x="78.8954%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="78.6454%" y="533" width="0.0797%" height="15" fill="rgb(223,175,53)" fg:x="987" fg:w="1"/><text x="78.8954%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9641%" y="309" width="0.0797%" height="15" fill="rgb(248,35,51)" fg:x="991" fg:w="1"/><text x="79.2141%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="78.8845%" y="341" width="0.2390%" height="15" fill="rgb(230,37,26)" fg:x="990" fg:w="3"/><text x="79.1345%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="78.9641%" y="325" width="0.1594%" height="15" fill="rgb(206,120,22)" fg:x="991" fg:w="2"/><text x="79.2141%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0438%" y="309" width="0.0797%" height="15" fill="rgb(207,165,28)" fg:x="992" fg:w="1"/><text x="79.2938%" y="319.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (4 samples, 0.32%)</title><rect x="78.8845%" y="421" width="0.3187%" height="15" fill="rgb(226,23,46)" fg:x="990" fg:w="4"/><text x="79.1345%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (4 samples, 0.32%)</title><rect x="78.8845%" y="405" width="0.3187%" height="15" fill="rgb(208,130,44)" fg:x="990" fg:w="4"/><text x="79.1345%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="78.8845%" y="389" width="0.3187%" height="15" fill="rgb(231,67,8)" fg:x="990" fg:w="4"/><text x="79.1345%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="78.8845%" y="373" width="0.3187%" height="15" fill="rgb(205,183,22)" fg:x="990" fg:w="4"/><text x="79.1345%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="78.8845%" y="357" width="0.3187%" height="15" fill="rgb(224,47,9)" fg:x="990" fg:w="4"/><text x="79.1345%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1235%" y="341" width="0.0797%" height="15" fill="rgb(250,183,49)" fg:x="993" fg:w="1"/><text x="79.3735%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::end (1 samples, 0.08%)</title><rect x="79.1235%" y="325" width="0.0797%" height="15" fill="rgb(220,151,39)" fg:x="993" fg:w="1"/><text x="79.3735%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.2032%" y="389" width="0.0797%" height="15" fill="rgb(220,118,20)" fg:x="994" fg:w="1"/><text x="79.4532%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2032%" y="373" width="0.0797%" height="15" fill="rgb(231,65,51)" fg:x="994" fg:w="1"/><text x="79.4532%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2032%" y="357" width="0.0797%" height="15" fill="rgb(253,125,37)" fg:x="994" fg:w="1"/><text x="79.4532%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2032%" y="341" width="0.0797%" height="15" fill="rgb(232,102,6)" fg:x="994" fg:w="1"/><text x="79.4532%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2032%" y="325" width="0.0797%" height="15" fill="rgb(251,105,13)" fg:x="994" fg:w="1"/><text x="79.4532%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2032%" y="309" width="0.0797%" height="15" fill="rgb(222,179,29)" fg:x="994" fg:w="1"/><text x="79.4532%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2032%" y="293" width="0.0797%" height="15" fill="rgb(229,180,53)" fg:x="994" fg:w="1"/><text x="79.4532%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="79.2032%" y="277" width="0.0797%" height="15" fill="rgb(238,104,13)" fg:x="994" fg:w="1"/><text x="79.4532%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.2032%" y="261" width="0.0797%" height="15" fill="rgb(210,130,5)" fg:x="994" fg:w="1"/><text x="79.4532%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.2829%" y="229" width="0.0797%" height="15" fill="rgb(233,87,49)" fg:x="995" fg:w="1"/><text x="79.5329%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.2829%" y="213" width="0.0797%" height="15" fill="rgb(243,34,9)" fg:x="995" fg:w="1"/><text x="79.5329%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.2829%" y="197" width="0.0797%" height="15" fill="rgb(235,225,10)" fg:x="995" fg:w="1"/><text x="79.5329%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.2829%" y="181" width="0.0797%" height="15" fill="rgb(212,0,30)" fg:x="995" fg:w="1"/><text x="79.5329%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.2829%" y="165" width="0.0797%" height="15" fill="rgb(211,177,0)" fg:x="995" fg:w="1"/><text x="79.5329%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.2829%" y="149" width="0.0797%" height="15" fill="rgb(225,220,11)" fg:x="995" fg:w="1"/><text x="79.5329%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2829%" y="133" width="0.0797%" height="15" fill="rgb(215,10,13)" fg:x="995" fg:w="1"/><text x="79.5329%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.2829%" y="357" width="0.1594%" height="15" fill="rgb(240,177,14)" fg:x="995" fg:w="2"/><text x="79.5329%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.2829%" y="341" width="0.1594%" height="15" fill="rgb(243,7,39)" fg:x="995" fg:w="2"/><text x="79.5329%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.2829%" y="325" width="0.1594%" height="15" fill="rgb(212,99,0)" fg:x="995" fg:w="2"/><text x="79.5329%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="79.2829%" y="309" width="0.1594%" height="15" fill="rgb(225,162,48)" fg:x="995" fg:w="2"/><text x="79.5329%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="79.2829%" y="293" width="0.1594%" height="15" fill="rgb(246,16,25)" fg:x="995" fg:w="2"/><text x="79.5329%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="79.2829%" y="277" width="0.1594%" height="15" fill="rgb(220,150,2)" fg:x="995" fg:w="2"/><text x="79.5329%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="79.2829%" y="261" width="0.1594%" height="15" fill="rgb(237,113,11)" fg:x="995" fg:w="2"/><text x="79.5329%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="79.2829%" y="245" width="0.1594%" height="15" fill="rgb(236,70,20)" fg:x="995" fg:w="2"/><text x="79.5329%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.3625%" y="229" width="0.0797%" height="15" fill="rgb(234,94,7)" fg:x="996" fg:w="1"/><text x="79.6125%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.3625%" y="213" width="0.0797%" height="15" fill="rgb(250,221,0)" fg:x="996" fg:w="1"/><text x="79.6125%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="79.2829%" y="373" width="0.2390%" height="15" fill="rgb(245,149,46)" fg:x="995" fg:w="3"/><text x="79.5329%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.4422%" y="357" width="0.0797%" height="15" fill="rgb(215,37,27)" fg:x="997" fg:w="1"/><text x="79.6922%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.4422%" y="341" width="0.0797%" height="15" fill="rgb(232,65,3)" fg:x="997" fg:w="1"/><text x="79.6922%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.4422%" y="325" width="0.0797%" height="15" fill="rgb(214,2,16)" fg:x="997" fg:w="1"/><text x="79.6922%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.4422%" y="309" width="0.0797%" height="15" fill="rgb(227,131,50)" fg:x="997" fg:w="1"/><text x="79.6922%" y="319.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="79.2829%" y="389" width="0.3187%" height="15" fill="rgb(247,131,45)" fg:x="995" fg:w="4"/><text x="79.5329%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="79.5219%" y="373" width="0.0797%" height="15" fill="rgb(215,97,47)" fg:x="998" fg:w="1"/><text x="79.7719%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="79.6016%" y="357" width="0.2390%" height="15" fill="rgb(233,143,12)" fg:x="999" fg:w="3"/><text x="79.8516%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="79.6016%" y="341" width="0.2390%" height="15" fill="rgb(222,57,17)" fg:x="999" fg:w="3"/><text x="79.8516%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="79.6016%" y="325" width="0.2390%" height="15" fill="rgb(214,119,38)" fg:x="999" fg:w="3"/><text x="79.8516%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="79.6016%" y="309" width="0.2390%" height="15" fill="rgb(217,28,47)" fg:x="999" fg:w="3"/><text x="79.8516%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="79.6016%" y="293" width="0.2390%" height="15" fill="rgb(231,14,52)" fg:x="999" fg:w="3"/><text x="79.8516%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="79.6016%" y="277" width="0.2390%" height="15" fill="rgb(220,158,18)" fg:x="999" fg:w="3"/><text x="79.8516%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="79.6016%" y="261" width="0.2390%" height="15" fill="rgb(222,143,46)" fg:x="999" fg:w="3"/><text x="79.8516%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="79.6016%" y="245" width="0.2390%" height="15" fill="rgb(227,165,5)" fg:x="999" fg:w="3"/><text x="79.8516%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="79.6016%" y="229" width="0.2390%" height="15" fill="rgb(216,222,49)" fg:x="999" fg:w="3"/><text x="79.8516%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="79.6016%" y="213" width="0.2390%" height="15" fill="rgb(238,73,39)" fg:x="999" fg:w="3"/><text x="79.8516%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="79.6016%" y="197" width="0.2390%" height="15" fill="rgb(252,115,9)" fg:x="999" fg:w="3"/><text x="79.8516%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="79.6016%" y="181" width="0.2390%" height="15" fill="rgb(238,202,4)" fg:x="999" fg:w="3"/><text x="79.8516%" y="191.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="79.6016%" y="165" width="0.2390%" height="15" fill="rgb(252,153,44)" fg:x="999" fg:w="3"/><text x="79.8516%" y="175.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="79.6016%" y="149" width="0.2390%" height="15" fill="rgb(235,128,27)" fg:x="999" fg:w="3"/><text x="79.8516%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="79.6016%" y="373" width="0.3187%" height="15" fill="rgb(221,121,47)" fg:x="999" fg:w="4"/><text x="79.8516%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8406%" y="357" width="0.0797%" height="15" fill="rgb(247,211,47)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8406%" y="341" width="0.0797%" height="15" fill="rgb(252,47,49)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.8406%" y="325" width="0.0797%" height="15" fill="rgb(219,119,53)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.8406%" y="309" width="0.0797%" height="15" fill="rgb(243,165,53)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.8406%" y="293" width="0.0797%" height="15" fill="rgb(230,12,35)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8406%" y="277" width="0.0797%" height="15" fill="rgb(239,57,49)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8406%" y="261" width="0.0797%" height="15" fill="rgb(231,154,7)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.8406%" y="245" width="0.0797%" height="15" fill="rgb(248,81,34)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.8406%" y="229" width="0.0797%" height="15" fill="rgb(247,9,5)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.8406%" y="213" width="0.0797%" height="15" fill="rgb(228,172,27)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.8406%" y="197" width="0.0797%" height="15" fill="rgb(230,57,44)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8406%" y="181" width="0.0797%" height="15" fill="rgb(249,35,22)" fg:x="1002" fg:w="1"/><text x="80.0906%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.40%)</title><rect x="79.6016%" y="389" width="0.3984%" height="15" fill="rgb(250,137,27)" fg:x="999" fg:w="5"/><text x="79.8516%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.9203%" y="373" width="0.0797%" height="15" fill="rgb(251,57,31)" fg:x="1003" fg:w="1"/><text x="80.1703%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9203%" y="357" width="0.0797%" height="15" fill="rgb(238,60,0)" fg:x="1003" fg:w="1"/><text x="80.1703%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.9203%" y="341" width="0.0797%" height="15" fill="rgb(242,185,39)" fg:x="1003" fg:w="1"/><text x="80.1703%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9203%" y="325" width="0.0797%" height="15" fill="rgb(240,63,43)" fg:x="1003" fg:w="1"/><text x="80.1703%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.9203%" y="309" width="0.0797%" height="15" fill="rgb(236,155,6)" fg:x="1003" fg:w="1"/><text x="80.1703%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9203%" y="293" width="0.0797%" height="15" fill="rgb(215,11,29)" fg:x="1003" fg:w="1"/><text x="80.1703%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.0000%" y="357" width="0.0797%" height="15" fill="rgb(228,180,48)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.0000%" y="341" width="0.0797%" height="15" fill="rgb(241,102,12)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.0000%" y="325" width="0.0797%" height="15" fill="rgb(246,213,4)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.0000%" y="309" width="0.0797%" height="15" fill="rgb(218,134,35)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.0000%" y="293" width="0.0797%" height="15" fill="rgb(251,117,35)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.0000%" y="277" width="0.0797%" height="15" fill="rgb(206,156,45)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.0000%" y="261" width="0.0797%" height="15" fill="rgb(218,52,27)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.0000%" y="245" width="0.0797%" height="15" fill="rgb(238,83,36)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.0000%" y="229" width="0.0797%" height="15" fill="rgb(218,53,43)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.0000%" y="213" width="0.0797%" height="15" fill="rgb(239,54,39)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.0000%" y="197" width="0.0797%" height="15" fill="rgb(212,198,13)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.0000%" y="181" width="0.0797%" height="15" fill="rgb(234,54,46)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.0000%" y="165" width="0.0797%" height="15" fill="rgb(217,120,7)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.0000%" y="149" width="0.0797%" height="15" fill="rgb(246,39,15)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0000%" y="133" width="0.0797%" height="15" fill="rgb(242,143,31)" fg:x="1004" fg:w="1"/><text x="80.2500%" y="143.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="80.0000%" y="389" width="0.2390%" height="15" fill="rgb(252,60,24)" fg:x="1004" fg:w="3"/><text x="80.2500%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="80.0000%" y="373" width="0.2390%" height="15" fill="rgb(249,220,7)" fg:x="1004" fg:w="3"/><text x="80.2500%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.0797%" y="357" width="0.1594%" height="15" fill="rgb(236,67,13)" fg:x="1005" fg:w="2"/><text x="80.3297%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.0797%" y="341" width="0.1594%" height="15" fill="rgb(210,62,39)" fg:x="1005" fg:w="2"/><text x="80.3297%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="80.0797%" y="325" width="0.1594%" height="15" fill="rgb(219,122,53)" fg:x="1005" fg:w="2"/><text x="80.3297%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1594%" y="309" width="0.0797%" height="15" fill="rgb(218,87,25)" fg:x="1006" fg:w="1"/><text x="80.4094%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.1594%" y="293" width="0.0797%" height="15" fill="rgb(234,179,48)" fg:x="1006" fg:w="1"/><text x="80.4094%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1594%" y="277" width="0.0797%" height="15" fill="rgb(248,90,0)" fg:x="1006" fg:w="1"/><text x="80.4094%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="80.2390%" y="341" width="0.0797%" height="15" fill="rgb(207,228,37)" fg:x="1007" fg:w="1"/><text x="80.4890%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="80.2390%" y="325" width="0.0797%" height="15" fill="rgb(235,214,15)" fg:x="1007" fg:w="1"/><text x="80.4890%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.2390%" y="309" width="0.0797%" height="15" fill="rgb(210,144,39)" fg:x="1007" fg:w="1"/><text x="80.4890%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.2390%" y="293" width="0.0797%" height="15" fill="rgb(222,67,41)" fg:x="1007" fg:w="1"/><text x="80.4890%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.3984%" y="309" width="0.0797%" height="15" fill="rgb(205,35,37)" fg:x="1009" fg:w="1"/><text x="80.6484%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.3984%" y="293" width="0.0797%" height="15" fill="rgb(216,125,40)" fg:x="1009" fg:w="1"/><text x="80.6484%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.3984%" y="277" width="0.0797%" height="15" fill="rgb(228,227,20)" fg:x="1009" fg:w="1"/><text x="80.6484%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.4781%" y="309" width="0.0797%" height="15" fill="rgb(242,173,45)" fg:x="1010" fg:w="1"/><text x="80.7281%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.5578%" y="261" width="0.0797%" height="15" fill="rgb(215,79,24)" fg:x="1011" fg:w="1"/><text x="80.8078%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.5578%" y="245" width="0.0797%" height="15" fill="rgb(238,164,38)" fg:x="1011" fg:w="1"/><text x="80.8078%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7171%" y="245" width="0.0797%" height="15" fill="rgb(245,196,38)" fg:x="1013" fg:w="1"/><text x="80.9671%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.80%)</title><rect x="80.7968%" y="245" width="0.7968%" height="15" fill="rgb(231,217,29)" fg:x="1014" fg:w="10"/><text x="81.0468%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.72%)</title><rect x="80.8765%" y="229" width="0.7171%" height="15" fill="rgb(245,6,4)" fg:x="1015" fg:w="9"/><text x="81.1265%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="81.5936%" y="245" width="0.2390%" height="15" fill="rgb(214,76,49)" fg:x="1024" fg:w="3"/><text x="81.8436%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="81.6733%" y="229" width="0.1594%" height="15" fill="rgb(205,96,12)" fg:x="1025" fg:w="2"/><text x="81.9233%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.7530%" y="213" width="0.0797%" height="15" fill="rgb(243,131,4)" fg:x="1026" fg:w="1"/><text x="82.0030%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.8327%" y="181" width="0.0797%" height="15" fill="rgb(214,114,4)" fg:x="1027" fg:w="1"/><text x="82.0827%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="81.9124%" y="181" width="0.0797%" height="15" fill="rgb(234,215,15)" fg:x="1028" fg:w="1"/><text x="82.1624%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="81.9920%" y="181" width="0.0797%" height="15" fill="rgb(250,216,45)" fg:x="1029" fg:w="1"/><text x="82.2420%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.9920%" y="165" width="0.0797%" height="15" fill="rgb(236,128,4)" fg:x="1029" fg:w="1"/><text x="82.2420%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.0717%" y="181" width="0.0797%" height="15" fill="rgb(234,50,33)" fg:x="1030" fg:w="1"/><text x="82.3217%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="82.0717%" y="165" width="0.0797%" height="15" fill="rgb(253,131,37)" fg:x="1030" fg:w="1"/><text x="82.3217%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="82.0717%" y="149" width="0.0797%" height="15" fill="rgb(218,55,27)" fg:x="1030" fg:w="1"/><text x="82.3217%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="82.0717%" y="133" width="0.0797%" height="15" fill="rgb(241,220,28)" fg:x="1030" fg:w="1"/><text x="82.3217%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.0717%" y="117" width="0.0797%" height="15" fill="rgb(241,90,48)" fg:x="1030" fg:w="1"/><text x="82.3217%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.0717%" y="101" width="0.0797%" height="15" fill="rgb(216,43,37)" fg:x="1030" fg:w="1"/><text x="82.3217%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.0717%" y="85" width="0.0797%" height="15" fill="rgb(207,173,9)" fg:x="1030" fg:w="1"/><text x="82.3217%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.1514%" y="149" width="0.0797%" height="15" fill="rgb(240,126,30)" fg:x="1031" fg:w="1"/><text x="82.4014%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 3.43%)</title><rect x="81.8327%" y="229" width="3.4263%" height="15" fill="rgb(228,178,53)" fg:x="1027" fg:w="43"/><text x="82.0827%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (43 samples, 3.43%)</title><rect x="81.8327%" y="213" width="3.4263%" height="15" fill="rgb(217,33,4)" fg:x="1027" fg:w="43"/><text x="82.0827%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (43 samples, 3.43%)</title><rect x="81.8327%" y="197" width="3.4263%" height="15" fill="rgb(206,124,34)" fg:x="1027" fg:w="43"/><text x="82.0827%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.11%)</title><rect x="82.1514%" y="181" width="3.1076%" height="15" fill="rgb(208,122,53)" fg:x="1031" fg:w="39"/><text x="82.4014%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.11%)</title><rect x="82.1514%" y="165" width="3.1076%" height="15" fill="rgb(215,202,26)" fg:x="1031" fg:w="39"/><text x="82.4014%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 3.03%)</title><rect x="82.2311%" y="149" width="3.0279%" height="15" fill="rgb(232,198,31)" fg:x="1032" fg:w="38"/><text x="82.4811%" y="159.50">all..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3386%" y="213" width="0.0797%" height="15" fill="rgb(222,23,35)" fg:x="1071" fg:w="1"/><text x="85.5886%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.4183%" y="213" width="0.0797%" height="15" fill="rgb(242,27,53)" fg:x="1072" fg:w="1"/><text x="85.6683%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="85.4980%" y="213" width="0.0797%" height="15" fill="rgb(210,216,42)" fg:x="1073" fg:w="1"/><text x="85.7480%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="85.2590%" y="229" width="0.3984%" height="15" fill="rgb(234,39,38)" fg:x="1070" fg:w="5"/><text x="85.5090%" y="239.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="85.5777%" y="213" width="0.0797%" height="15" fill="rgb(235,126,54)" fg:x="1074" fg:w="1"/><text x="85.8277%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.5777%" y="197" width="0.0797%" height="15" fill="rgb(235,150,33)" fg:x="1074" fg:w="1"/><text x="85.8277%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (64 samples, 5.10%)</title><rect x="80.6375%" y="261" width="5.0996%" height="15" fill="rgb(249,49,53)" fg:x="1012" fg:w="64"/><text x="80.8875%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (49 samples, 3.90%)</title><rect x="81.8327%" y="245" width="3.9044%" height="15" fill="rgb(238,60,50)" fg:x="1027" fg:w="49"/><text x="82.0827%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="85.6574%" y="229" width="0.0797%" height="15" fill="rgb(210,5,2)" fg:x="1075" fg:w="1"/><text x="85.9074%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="85.6574%" y="213" width="0.0797%" height="15" fill="rgb(214,207,24)" fg:x="1075" fg:w="1"/><text x="85.9074%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.6574%" y="197" width="0.0797%" height="15" fill="rgb(228,173,2)" fg:x="1075" fg:w="1"/><text x="85.9074%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.6574%" y="181" width="0.0797%" height="15" fill="rgb(244,26,8)" fg:x="1075" fg:w="1"/><text x="85.9074%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.8167%" y="229" width="0.0797%" height="15" fill="rgb(249,153,35)" fg:x="1077" fg:w="1"/><text x="86.0667%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.8167%" y="213" width="0.0797%" height="15" fill="rgb(221,215,40)" fg:x="1077" fg:w="1"/><text x="86.0667%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8167%" y="197" width="0.0797%" height="15" fill="rgb(238,106,35)" fg:x="1077" fg:w="1"/><text x="86.0667%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="85.8964%" y="229" width="0.3187%" height="15" fill="rgb(207,195,21)" fg:x="1078" fg:w="4"/><text x="86.1464%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="85.8964%" y="213" width="0.3187%" height="15" fill="rgb(205,43,29)" fg:x="1078" fg:w="4"/><text x="86.1464%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="85.8964%" y="197" width="0.3187%" height="15" fill="rgb(236,35,21)" fg:x="1078" fg:w="4"/><text x="86.1464%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="85.8964%" y="181" width="0.3187%" height="15" fill="rgb(244,74,8)" fg:x="1078" fg:w="4"/><text x="86.1464%" y="191.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="85.8964%" y="165" width="0.3187%" height="15" fill="rgb(241,229,7)" fg:x="1078" fg:w="4"/><text x="86.1464%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="85.7371%" y="261" width="0.6375%" height="15" fill="rgb(212,223,25)" fg:x="1076" fg:w="8"/><text x="85.9871%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="85.7371%" y="245" width="0.6375%" height="15" fill="rgb(234,58,53)" fg:x="1076" fg:w="8"/><text x="85.9871%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.2151%" y="229" width="0.1594%" height="15" fill="rgb(244,36,1)" fg:x="1082" fg:w="2"/><text x="86.4651%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="86.4542%" y="229" width="0.0797%" height="15" fill="rgb(222,40,54)" fg:x="1085" fg:w="1"/><text x="86.7042%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (76 samples, 6.06%)</title><rect x="80.5578%" y="309" width="6.0558%" height="15" fill="rgb(210,207,39)" fg:x="1011" fg:w="76"/><text x="80.8078%" y="319.50">&lt;regex::..</text></g><g><title>regex::builders::string::RegexBuilder::build (76 samples, 6.06%)</title><rect x="80.5578%" y="293" width="6.0558%" height="15" fill="rgb(234,52,14)" fg:x="1011" fg:w="76"/><text x="80.8078%" y="303.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (76 samples, 6.06%)</title><rect x="80.5578%" y="277" width="6.0558%" height="15" fill="rgb(239,108,46)" fg:x="1011" fg:w="76"/><text x="80.8078%" y="287.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="86.3745%" y="261" width="0.2390%" height="15" fill="rgb(252,223,5)" fg:x="1084" fg:w="3"/><text x="86.6245%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="86.3745%" y="245" width="0.2390%" height="15" fill="rgb(227,181,11)" fg:x="1084" fg:w="3"/><text x="86.6245%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="86.5339%" y="229" width="0.0797%" height="15" fill="rgb(248,126,40)" fg:x="1086" fg:w="1"/><text x="86.7839%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="86.5339%" y="213" width="0.0797%" height="15" fill="rgb(243,1,18)" fg:x="1086" fg:w="1"/><text x="86.7839%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.6135%" y="277" width="0.0797%" height="15" fill="rgb(214,145,23)" fg:x="1087" fg:w="1"/><text x="86.8635%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="86.6135%" y="261" width="0.0797%" height="15" fill="rgb(241,218,11)" fg:x="1087" fg:w="1"/><text x="86.8635%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.6135%" y="245" width="0.0797%" height="15" fill="rgb(214,219,24)" fg:x="1087" fg:w="1"/><text x="86.8635%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.6135%" y="229" width="0.0797%" height="15" fill="rgb(235,32,7)" fg:x="1087" fg:w="1"/><text x="86.8635%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.6932%" y="245" width="0.0797%" height="15" fill="rgb(227,121,28)" fg:x="1088" fg:w="1"/><text x="86.9432%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="86.6135%" y="309" width="0.3187%" height="15" fill="rgb(216,129,49)" fg:x="1087" fg:w="4"/><text x="86.8635%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="86.6135%" y="293" width="0.3187%" height="15" fill="rgb(207,194,50)" fg:x="1087" fg:w="4"/><text x="86.8635%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="86.6932%" y="277" width="0.2390%" height="15" fill="rgb(207,4,18)" fg:x="1088" fg:w="3"/><text x="86.9432%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="86.6932%" y="261" width="0.2390%" height="15" fill="rgb(213,50,30)" fg:x="1088" fg:w="3"/><text x="86.9432%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="86.7729%" y="245" width="0.1594%" height="15" fill="rgb(208,77,22)" fg:x="1089" fg:w="2"/><text x="87.0229%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.4104%" y="229" width="0.0797%" height="15" fill="rgb(244,204,34)" fg:x="1097" fg:w="1"/><text x="87.6604%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4104%" y="213" width="0.0797%" height="15" fill="rgb(230,20,17)" fg:x="1097" fg:w="1"/><text x="87.6604%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.4104%" y="197" width="0.0797%" height="15" fill="rgb(237,83,15)" fg:x="1097" fg:w="1"/><text x="87.6604%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="87.1713%" y="261" width="0.5578%" height="15" fill="rgb(221,109,25)" fg:x="1094" fg:w="7"/><text x="87.4213%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="87.2510%" y="245" width="0.4781%" height="15" fill="rgb(205,194,52)" fg:x="1095" fg:w="6"/><text x="87.5010%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="87.4900%" y="229" width="0.2390%" height="15" fill="rgb(244,173,54)" fg:x="1098" fg:w="3"/><text x="87.7400%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (93 samples, 7.41%)</title><rect x="80.3984%" y="325" width="7.4104%" height="15" fill="rgb(227,181,18)" fg:x="1009" fg:w="93"/><text x="80.6484%" y="335.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="86.9323%" y="309" width="0.8765%" height="15" fill="rgb(238,36,30)" fg:x="1091" fg:w="11"/><text x="87.1823%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.64%)</title><rect x="87.1713%" y="293" width="0.6375%" height="15" fill="rgb(254,85,0)" fg:x="1094" fg:w="8"/><text x="87.4213%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.64%)</title><rect x="87.1713%" y="277" width="0.6375%" height="15" fill="rgb(247,63,33)" fg:x="1094" fg:w="8"/><text x="87.4213%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="87.7291%" y="261" width="0.0797%" height="15" fill="rgb(220,7,54)" fg:x="1101" fg:w="1"/><text x="87.9791%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.7291%" y="245" width="0.0797%" height="15" fill="rgb(238,227,21)" fg:x="1101" fg:w="1"/><text x="87.9791%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.8088%" y="261" width="0.0797%" height="15" fill="rgb(237,29,31)" fg:x="1102" fg:w="1"/><text x="88.0588%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.8088%" y="245" width="0.0797%" height="15" fill="rgb(211,21,50)" fg:x="1102" fg:w="1"/><text x="88.0588%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.8088%" y="229" width="0.0797%" height="15" fill="rgb(239,119,2)" fg:x="1102" fg:w="1"/><text x="88.0588%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.8884%" y="229" width="0.0797%" height="15" fill="rgb(250,2,39)" fg:x="1103" fg:w="1"/><text x="88.1384%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.8884%" y="213" width="0.0797%" height="15" fill="rgb(244,46,53)" fg:x="1103" fg:w="1"/><text x="88.1384%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8884%" y="197" width="0.0797%" height="15" fill="rgb(209,21,19)" fg:x="1103" fg:w="1"/><text x="88.1384%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="87.8884%" y="261" width="0.1594%" height="15" fill="rgb(236,145,4)" fg:x="1103" fg:w="2"/><text x="88.1384%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="87.8884%" y="245" width="0.1594%" height="15" fill="rgb(220,133,36)" fg:x="1103" fg:w="2"/><text x="88.1384%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="87.9681%" y="229" width="0.0797%" height="15" fill="rgb(244,18,3)" fg:x="1104" fg:w="1"/><text x="88.2181%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.9681%" y="213" width="0.0797%" height="15" fill="rgb(232,171,48)" fg:x="1104" fg:w="1"/><text x="88.2181%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.9681%" y="197" width="0.0797%" height="15" fill="rgb(223,223,53)" fg:x="1104" fg:w="1"/><text x="88.2181%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.9681%" y="181" width="0.0797%" height="15" fill="rgb(246,92,13)" fg:x="1104" fg:w="1"/><text x="88.2181%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.9681%" y="165" width="0.0797%" height="15" fill="rgb(229,171,10)" fg:x="1104" fg:w="1"/><text x="88.2181%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.9681%" y="149" width="0.0797%" height="15" fill="rgb(213,131,26)" fg:x="1104" fg:w="1"/><text x="88.2181%" y="159.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="88.0478%" y="261" width="0.0797%" height="15" fill="rgb(242,87,54)" fg:x="1105" fg:w="1"/><text x="88.2978%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.0478%" y="245" width="0.0797%" height="15" fill="rgb(237,21,35)" fg:x="1105" fg:w="1"/><text x="88.2978%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.0478%" y="229" width="0.0797%" height="15" fill="rgb(253,13,47)" fg:x="1105" fg:w="1"/><text x="88.2978%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="88.2869%" y="245" width="0.5578%" height="15" fill="rgb(215,122,49)" fg:x="1108" fg:w="7"/><text x="88.5369%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="88.2869%" y="229" width="0.5578%" height="15" fill="rgb(209,179,30)" fg:x="1108" fg:w="7"/><text x="88.5369%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="88.8446%" y="245" width="0.1594%" height="15" fill="rgb(235,100,24)" fg:x="1115" fg:w="2"/><text x="89.0946%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="88.8446%" y="229" width="0.1594%" height="15" fill="rgb(209,67,24)" fg:x="1115" fg:w="2"/><text x="89.0946%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="89.1633%" y="213" width="0.1594%" height="15" fill="rgb(206,74,32)" fg:x="1119" fg:w="2"/><text x="89.4133%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="89.1633%" y="197" width="0.1594%" height="15" fill="rgb(212,45,25)" fg:x="1119" fg:w="2"/><text x="89.4133%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.1633%" y="181" width="0.1594%" height="15" fill="rgb(239,26,3)" fg:x="1119" fg:w="2"/><text x="89.4133%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.1633%" y="165" width="0.1594%" height="15" fill="rgb(218,36,15)" fg:x="1119" fg:w="2"/><text x="89.4133%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="89.5618%" y="181" width="0.2390%" height="15" fill="rgb(206,108,24)" fg:x="1124" fg:w="3"/><text x="89.8118%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="89.5618%" y="165" width="0.2390%" height="15" fill="rgb(234,204,42)" fg:x="1124" fg:w="3"/><text x="89.8118%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.6414%" y="149" width="0.1594%" height="15" fill="rgb(229,2,11)" fg:x="1125" fg:w="2"/><text x="89.8914%" y="159.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.56%)</title><rect x="89.3227%" y="213" width="0.5578%" height="15" fill="rgb(221,20,48)" fg:x="1121" fg:w="7"/><text x="89.5727%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.48%)</title><rect x="89.4024%" y="197" width="0.4781%" height="15" fill="rgb(244,164,10)" fg:x="1122" fg:w="6"/><text x="89.6524%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.8008%" y="181" width="0.0797%" height="15" fill="rgb(243,229,2)" fg:x="1127" fg:w="1"/><text x="90.0508%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8008%" y="165" width="0.0797%" height="15" fill="rgb(232,131,37)" fg:x="1127" fg:w="1"/><text x="90.0508%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.8008%" y="149" width="0.0797%" height="15" fill="rgb(217,156,11)" fg:x="1127" fg:w="1"/><text x="90.0508%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.48%)</title><rect x="89.8805%" y="197" width="0.4781%" height="15" fill="rgb(239,99,48)" fg:x="1128" fg:w="6"/><text x="90.1305%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="89.9602%" y="181" width="0.3984%" height="15" fill="rgb(231,209,9)" fg:x="1129" fg:w="5"/><text x="90.2102%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (18 samples, 1.43%)</title><rect x="89.0040%" y="245" width="1.4343%" height="15" fill="rgb(254,97,27)" fg:x="1117" fg:w="18"/><text x="89.2540%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (18 samples, 1.43%)</title><rect x="89.0040%" y="229" width="1.4343%" height="15" fill="rgb(223,151,38)" fg:x="1117" fg:w="18"/><text x="89.2540%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (7 samples, 0.56%)</title><rect x="89.8805%" y="213" width="0.5578%" height="15" fill="rgb(219,206,35)" fg:x="1128" fg:w="7"/><text x="90.1305%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="90.3586%" y="197" width="0.0797%" height="15" fill="rgb(216,130,31)" fg:x="1134" fg:w="1"/><text x="90.6086%" y="207.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="90.5976%" y="133" width="0.2390%" height="15" fill="rgb(251,97,34)" fg:x="1137" fg:w="3"/><text x="90.8476%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="90.8367%" y="133" width="0.2390%" height="15" fill="rgb(246,159,47)" fg:x="1140" fg:w="3"/><text x="91.0867%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.9163%" y="117" width="0.1594%" height="15" fill="rgb(232,87,10)" fg:x="1141" fg:w="2"/><text x="91.1663%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.9163%" y="101" width="0.1594%" height="15" fill="rgb(249,1,37)" fg:x="1141" fg:w="2"/><text x="91.1663%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="90.9163%" y="85" width="0.1594%" height="15" fill="rgb(239,135,14)" fg:x="1141" fg:w="2"/><text x="91.1663%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="91.0757%" y="133" width="0.2390%" height="15" fill="rgb(253,116,46)" fg:x="1143" fg:w="3"/><text x="91.3257%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.2351%" y="117" width="0.0797%" height="15" fill="rgb(222,217,37)" fg:x="1145" fg:w="1"/><text x="91.4851%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.2351%" y="101" width="0.0797%" height="15" fill="rgb(252,96,8)" fg:x="1145" fg:w="1"/><text x="91.4851%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.2351%" y="85" width="0.0797%" height="15" fill="rgb(254,103,41)" fg:x="1145" fg:w="1"/><text x="91.4851%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.3147%" y="101" width="0.0797%" height="15" fill="rgb(218,213,19)" fg:x="1146" fg:w="1"/><text x="91.5647%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.3944%" y="101" width="0.1594%" height="15" fill="rgb(253,95,21)" fg:x="1147" fg:w="2"/><text x="91.6444%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.4741%" y="85" width="0.0797%" height="15" fill="rgb(229,26,28)" fg:x="1148" fg:w="1"/><text x="91.7241%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.4741%" y="69" width="0.0797%" height="15" fill="rgb(230,129,16)" fg:x="1148" fg:w="1"/><text x="91.7241%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.48%)</title><rect x="91.3147%" y="133" width="0.4781%" height="15" fill="rgb(236,126,17)" fg:x="1146" fg:w="6"/><text x="91.5647%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.48%)</title><rect x="91.3147%" y="117" width="0.4781%" height="15" fill="rgb(209,33,33)" fg:x="1146" fg:w="6"/><text x="91.5647%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="91.5538%" y="101" width="0.2390%" height="15" fill="rgb(227,85,29)" fg:x="1149" fg:w="3"/><text x="91.8038%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.7131%" y="85" width="0.0797%" height="15" fill="rgb(241,53,46)" fg:x="1151" fg:w="1"/><text x="91.9631%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.7131%" y="69" width="0.0797%" height="15" fill="rgb(228,167,53)" fg:x="1151" fg:w="1"/><text x="91.9631%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.7131%" y="53" width="0.0797%" height="15" fill="rgb(238,195,45)" fg:x="1151" fg:w="1"/><text x="91.9631%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.7131%" y="37" width="0.0797%" height="15" fill="rgb(252,124,45)" fg:x="1151" fg:w="1"/><text x="91.9631%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (33 samples, 2.63%)</title><rect x="91.7928%" y="133" width="2.6295%" height="15" fill="rgb(251,38,35)" fg:x="1152" fg:w="33"/><text x="92.0428%" y="143.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (33 samples, 2.63%)</title><rect x="91.7928%" y="117" width="2.6295%" height="15" fill="rgb(227,33,2)" fg:x="1152" fg:w="33"/><text x="92.0428%" y="127.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (33 samples, 2.63%)</title><rect x="91.7928%" y="101" width="2.6295%" height="15" fill="rgb(223,157,46)" fg:x="1152" fg:w="33"/><text x="92.0428%" y="111.50">al..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (2 samples, 0.16%)</title><rect x="94.4223%" y="133" width="0.1594%" height="15" fill="rgb(222,78,41)" fg:x="1185" fg:w="2"/><text x="94.6723%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.22%)</title><rect x="90.4382%" y="229" width="4.2231%" height="15" fill="rgb(248,176,11)" fg:x="1135" fg:w="53"/><text x="90.6882%" y="239.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.22%)</title><rect x="90.4382%" y="213" width="4.2231%" height="15" fill="rgb(241,221,18)" fg:x="1135" fg:w="53"/><text x="90.6882%" y="223.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.22%)</title><rect x="90.4382%" y="197" width="4.2231%" height="15" fill="rgb(218,85,22)" fg:x="1135" fg:w="53"/><text x="90.6882%" y="207.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.22%)</title><rect x="90.4382%" y="181" width="4.2231%" height="15" fill="rgb(222,223,7)" fg:x="1135" fg:w="53"/><text x="90.6882%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (53 samples, 4.22%)</title><rect x="90.4382%" y="165" width="4.2231%" height="15" fill="rgb(254,59,39)" fg:x="1135" fg:w="53"/><text x="90.6882%" y="175.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.22%)</title><rect x="90.4382%" y="149" width="4.2231%" height="15" fill="rgb(247,100,27)" fg:x="1135" fg:w="53"/><text x="90.6882%" y="159.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="94.5817%" y="133" width="0.0797%" height="15" fill="rgb(237,207,10)" fg:x="1187" fg:w="1"/><text x="94.8317%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.5817%" y="117" width="0.0797%" height="15" fill="rgb(220,121,28)" fg:x="1187" fg:w="1"/><text x="94.8317%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.5817%" y="101" width="0.0797%" height="15" fill="rgb(213,223,20)" fg:x="1187" fg:w="1"/><text x="94.8317%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.5817%" y="85" width="0.0797%" height="15" fill="rgb(205,121,27)" fg:x="1187" fg:w="1"/><text x="94.8317%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7410%" y="213" width="0.0797%" height="15" fill="rgb(253,24,53)" fg:x="1189" fg:w="1"/><text x="94.9910%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="94.8207%" y="213" width="0.0797%" height="15" fill="rgb(224,224,47)" fg:x="1190" fg:w="1"/><text x="95.0707%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.8207%" y="197" width="0.0797%" height="15" fill="rgb(250,125,36)" fg:x="1190" fg:w="1"/><text x="95.0707%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.8207%" y="181" width="0.0797%" height="15" fill="rgb(240,144,38)" fg:x="1190" fg:w="1"/><text x="95.0707%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (87 samples, 6.93%)</title><rect x="88.1275%" y="261" width="6.9323%" height="15" fill="rgb(250,15,50)" fg:x="1106" fg:w="87"/><text x="88.3775%" y="271.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (58 samples, 4.62%)</title><rect x="90.4382%" y="245" width="4.6215%" height="15" fill="rgb(210,24,26)" fg:x="1135" fg:w="58"/><text x="90.6882%" y="255.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="94.6614%" y="229" width="0.3984%" height="15" fill="rgb(234,53,53)" fg:x="1188" fg:w="5"/><text x="94.9114%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="94.9004%" y="213" width="0.1594%" height="15" fill="rgb(208,108,28)" fg:x="1191" fg:w="2"/><text x="95.1504%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.0598%" y="229" width="0.0797%" height="15" fill="rgb(227,143,7)" fg:x="1193" fg:w="1"/><text x="95.3098%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0598%" y="213" width="0.0797%" height="15" fill="rgb(238,189,38)" fg:x="1193" fg:w="1"/><text x="95.3098%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.0598%" y="197" width="0.0797%" height="15" fill="rgb(222,69,15)" fg:x="1193" fg:w="1"/><text x="95.3098%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1394%" y="197" width="0.0797%" height="15" fill="rgb(213,169,7)" fg:x="1194" fg:w="1"/><text x="95.3894%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1394%" y="181" width="0.0797%" height="15" fill="rgb(251,219,4)" fg:x="1194" fg:w="1"/><text x="95.3894%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1394%" y="165" width="0.0797%" height="15" fill="rgb(241,55,40)" fg:x="1194" fg:w="1"/><text x="95.3894%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="95.0598%" y="261" width="0.2390%" height="15" fill="rgb(243,57,30)" fg:x="1193" fg:w="3"/><text x="95.3098%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="95.0598%" y="245" width="0.2390%" height="15" fill="rgb(234,50,30)" fg:x="1193" fg:w="3"/><text x="95.3098%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.1394%" y="229" width="0.1594%" height="15" fill="rgb(239,23,42)" fg:x="1194" fg:w="2"/><text x="95.3894%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="95.1394%" y="213" width="0.1594%" height="15" fill="rgb(217,38,19)" fg:x="1194" fg:w="2"/><text x="95.3894%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="95.2191%" y="197" width="0.0797%" height="15" fill="rgb(215,179,16)" fg:x="1195" fg:w="1"/><text x="95.4691%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (96 samples, 7.65%)</title><rect x="87.8088%" y="309" width="7.6494%" height="15" fill="rgb(254,21,37)" fg:x="1102" fg:w="96"/><text x="88.0588%" y="319.50">&lt;regex::re..</text></g><g><title>regex::builders::string::RegexBuilder::build (96 samples, 7.65%)</title><rect x="87.8088%" y="293" width="7.6494%" height="15" fill="rgb(219,207,48)" fg:x="1102" fg:w="96"/><text x="88.0588%" y="303.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (96 samples, 7.65%)</title><rect x="87.8088%" y="277" width="7.6494%" height="15" fill="rgb(227,225,41)" fg:x="1102" fg:w="96"/><text x="88.0588%" y="287.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="95.2988%" y="261" width="0.1594%" height="15" fill="rgb(223,130,1)" fg:x="1196" fg:w="2"/><text x="95.5488%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="95.2988%" y="245" width="0.1594%" height="15" fill="rgb(249,54,42)" fg:x="1196" fg:w="2"/><text x="95.5488%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="95.2988%" y="229" width="0.1594%" height="15" fill="rgb(248,69,25)" fg:x="1196" fg:w="2"/><text x="95.5488%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.3785%" y="213" width="0.0797%" height="15" fill="rgb(234,21,32)" fg:x="1197" fg:w="1"/><text x="95.6285%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.3785%" y="197" width="0.0797%" height="15" fill="rgb(252,136,6)" fg:x="1197" fg:w="1"/><text x="95.6285%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.4582%" y="309" width="0.0797%" height="15" fill="rgb(245,87,12)" fg:x="1198" fg:w="1"/><text x="95.7082%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.4582%" y="293" width="0.0797%" height="15" fill="rgb(208,12,15)" fg:x="1198" fg:w="1"/><text x="95.7082%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.4582%" y="277" width="0.0797%" height="15" fill="rgb(250,98,2)" fg:x="1198" fg:w="1"/><text x="95.7082%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="95.4582%" y="261" width="0.0797%" height="15" fill="rgb(205,213,15)" fg:x="1198" fg:w="1"/><text x="95.7082%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="95.5378%" y="245" width="0.3187%" height="15" fill="rgb(248,192,44)" fg:x="1199" fg:w="4"/><text x="95.7878%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="95.5378%" y="229" width="0.3187%" height="15" fill="rgb(221,89,17)" fg:x="1199" fg:w="4"/><text x="95.7878%" y="239.50"></text></g><g><title>indefinite::rules::number::Number::check (102 samples, 8.13%)</title><rect x="87.8088%" y="325" width="8.1275%" height="15" fill="rgb(209,55,3)" fg:x="1102" fg:w="102"/><text x="88.0588%" y="335.50">indefinite:..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.40%)</title><rect x="95.5378%" y="309" width="0.3984%" height="15" fill="rgb(247,23,45)" fg:x="1199" fg:w="5"/><text x="95.7878%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.5378%" y="293" width="0.3984%" height="15" fill="rgb(235,152,23)" fg:x="1199" fg:w="5"/><text x="95.7878%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.5378%" y="277" width="0.3984%" height="15" fill="rgb(244,63,13)" fg:x="1199" fg:w="5"/><text x="95.7878%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.5378%" y="261" width="0.3984%" height="15" fill="rgb(227,30,37)" fg:x="1199" fg:w="5"/><text x="95.7878%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="95.8566%" y="245" width="0.0797%" height="15" fill="rgb(224,49,42)" fg:x="1203" fg:w="1"/><text x="96.1066%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="96.0159%" y="245" width="0.0797%" height="15" fill="rgb(218,129,5)" fg:x="1205" fg:w="1"/><text x="96.2659%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.0956%" y="229" width="0.0797%" height="15" fill="rgb(240,199,54)" fg:x="1206" fg:w="1"/><text x="96.3456%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.2550%" y="197" width="0.0797%" height="15" fill="rgb(234,31,13)" fg:x="1208" fg:w="1"/><text x="96.5050%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.40%)</title><rect x="96.0956%" y="245" width="0.3984%" height="15" fill="rgb(219,73,54)" fg:x="1206" fg:w="5"/><text x="96.3456%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="96.1753%" y="229" width="0.3187%" height="15" fill="rgb(251,162,10)" fg:x="1207" fg:w="4"/><text x="96.4253%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.2550%" y="213" width="0.2390%" height="15" fill="rgb(240,138,47)" fg:x="1208" fg:w="3"/><text x="96.5050%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.3347%" y="197" width="0.1594%" height="15" fill="rgb(216,138,26)" fg:x="1209" fg:w="2"/><text x="96.5847%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="96.4940%" y="245" width="0.0797%" height="15" fill="rgb(243,17,35)" fg:x="1211" fg:w="1"/><text x="96.7440%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="96.4940%" y="229" width="0.0797%" height="15" fill="rgb(241,60,18)" fg:x="1211" fg:w="1"/><text x="96.7440%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.4940%" y="213" width="0.0797%" height="15" fill="rgb(234,2,44)" fg:x="1211" fg:w="1"/><text x="96.7440%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (9 samples, 0.72%)</title><rect x="95.9363%" y="293" width="0.7171%" height="15" fill="rgb(225,225,33)" fg:x="1204" fg:w="9"/><text x="96.1863%" y="303.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (9 samples, 0.72%)</title><rect x="95.9363%" y="277" width="0.7171%" height="15" fill="rgb(234,50,31)" fg:x="1204" fg:w="9"/><text x="96.1863%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9 samples, 0.72%)</title><rect x="95.9363%" y="261" width="0.7171%" height="15" fill="rgb(249,6,25)" fg:x="1204" fg:w="9"/><text x="96.1863%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.5737%" y="245" width="0.0797%" height="15" fill="rgb(241,5,17)" fg:x="1212" fg:w="1"/><text x="96.8237%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.5737%" y="229" width="0.0797%" height="15" fill="rgb(207,116,10)" fg:x="1212" fg:w="1"/><text x="96.8237%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5737%" y="213" width="0.0797%" height="15" fill="rgb(222,128,18)" fg:x="1212" fg:w="1"/><text x="96.8237%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5737%" y="197" width="0.0797%" height="15" fill="rgb(229,109,25)" fg:x="1212" fg:w="1"/><text x="96.8237%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (221 samples, 17.61%)</title><rect x="79.2032%" y="405" width="17.6096%" height="15" fill="rgb(222,102,25)" fg:x="994" fg:w="221"/><text x="79.4532%" y="415.50">&lt;&amp;kernel::model::EntityPtr ..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (208 samples, 16.57%)</title><rect x="80.2390%" y="389" width="16.5737%" height="15" fill="rgb(239,211,5)" fg:x="1007" fg:w="208"/><text x="80.4890%" y="399.50">plugins_core::looking::mod..</text></g><g><title>indefinite::indefinite (208 samples, 16.57%)</title><rect x="80.2390%" y="373" width="16.5737%" height="15" fill="rgb(223,136,26)" fg:x="1007" fg:w="208"/><text x="80.4890%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (208 samples, 16.57%)</title><rect x="80.2390%" y="357" width="16.5737%" height="15" fill="rgb(227,30,15)" fg:x="1007" fg:w="208"/><text x="80.4890%" y="367.50">indefinite::methods::indef..</text></g><g><title>indefinite::methods::apply_rules (207 samples, 16.49%)</title><rect x="80.3187%" y="341" width="16.4940%" height="15" fill="rgb(247,76,4)" fg:x="1008" fg:w="207"/><text x="80.5687%" y="351.50">indefinite::methods::appl..</text></g><g><title>indefinite::rules::other::Other::run (11 samples, 0.88%)</title><rect x="95.9363%" y="325" width="0.8765%" height="15" fill="rgb(245,38,48)" fg:x="1204" fg:w="11"/><text x="96.1863%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (11 samples, 0.88%)</title><rect x="95.9363%" y="309" width="0.8765%" height="15" fill="rgb(210,220,14)" fg:x="1204" fg:w="11"/><text x="96.1863%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="96.6534%" y="293" width="0.1594%" height="15" fill="rgb(224,60,51)" fg:x="1213" fg:w="2"/><text x="96.9034%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="96.6534%" y="277" width="0.1594%" height="15" fill="rgb(212,133,49)" fg:x="1213" fg:w="2"/><text x="96.9034%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="96.6534%" y="261" width="0.1594%" height="15" fill="rgb(231,39,22)" fg:x="1213" fg:w="2"/><text x="96.9034%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="96.6534%" y="245" width="0.1594%" height="15" fill="rgb(236,173,22)" fg:x="1213" fg:w="2"/><text x="96.9034%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.6534%" y="229" width="0.1594%" height="15" fill="rgb(210,70,0)" fg:x="1213" fg:w="2"/><text x="96.9034%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.7331%" y="213" width="0.0797%" height="15" fill="rgb(215,170,11)" fg:x="1214" fg:w="1"/><text x="96.9831%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7331%" y="197" width="0.0797%" height="15" fill="rgb(220,154,28)" fg:x="1214" fg:w="1"/><text x="96.9831%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.7331%" y="181" width="0.0797%" height="15" fill="rgb(240,160,41)" fg:x="1214" fg:w="1"/><text x="96.9831%" y="191.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="96.8127%" y="405" width="0.0797%" height="15" fill="rgb(243,215,41)" fg:x="1215" fg:w="1"/><text x="97.0627%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="96.8127%" y="389" width="0.0797%" height="15" fill="rgb(214,208,31)" fg:x="1215" fg:w="1"/><text x="97.0627%" y="399.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (1 samples, 0.08%)</title><rect x="96.8924%" y="389" width="0.0797%" height="15" fill="rgb(247,57,22)" fg:x="1216" fg:w="1"/><text x="97.1424%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="96.8924%" y="373" width="0.0797%" height="15" fill="rgb(228,73,52)" fg:x="1216" fg:w="1"/><text x="97.1424%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.8924%" y="357" width="0.0797%" height="15" fill="rgb(252,60,9)" fg:x="1216" fg:w="1"/><text x="97.1424%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="96.9721%" y="325" width="0.0797%" height="15" fill="rgb(233,9,51)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.9721%" y="309" width="0.0797%" height="15" fill="rgb(223,67,14)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9721%" y="293" width="0.0797%" height="15" fill="rgb(222,86,2)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.9721%" y="277" width="0.0797%" height="15" fill="rgb(243,58,54)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9721%" y="261" width="0.0797%" height="15" fill="rgb(210,200,39)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.9721%" y="245" width="0.0797%" height="15" fill="rgb(238,135,9)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.9721%" y="229" width="0.0797%" height="15" fill="rgb(232,179,7)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.9721%" y="213" width="0.0797%" height="15" fill="rgb(245,65,41)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="96.9721%" y="197" width="0.0797%" height="15" fill="rgb(227,43,8)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.9721%" y="181" width="0.0797%" height="15" fill="rgb(235,91,14)" fg:x="1217" fg:w="1"/><text x="97.2221%" y="191.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (230 samples, 18.33%)</title><rect x="78.8048%" y="565" width="18.3267%" height="15" fill="rgb(235,219,31)" fg:x="989" fg:w="230"/><text x="79.0548%" y="575.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (230 samples, 18.33%)</title><rect x="78.8048%" y="549" width="18.3267%" height="15" fill="rgb(227,121,25)" fg:x="989" fg:w="230"/><text x="79.0548%" y="559.50">&lt;plugins_dynlib::DynamicMiddl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (230 samples, 18.33%)</title><rect x="78.8048%" y="533" width="18.3267%" height="15" fill="rgb(254,129,24)" fg:x="989" fg:w="230"/><text x="79.0548%" y="543.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (230 samples, 18.33%)</title><rect x="78.8048%" y="517" width="18.3267%" height="15" fill="rgb(226,144,49)" fg:x="989" fg:w="230"/><text x="79.0548%" y="527.50">core::ops::function::FnOnce::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (230 samples, 18.33%)</title><rect x="78.8048%" y="501" width="18.3267%" height="15" fill="rgb(214,187,32)" fg:x="989" fg:w="230"/><text x="79.0548%" y="511.50">kernel::plugins::mw::Middlewa..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (230 samples, 18.33%)</title><rect x="78.8048%" y="485" width="18.3267%" height="15" fill="rgb(243,129,46)" fg:x="989" fg:w="230"/><text x="79.0548%" y="495.50">core::ops::function::FnOnce::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (230 samples, 18.33%)</title><rect x="78.8048%" y="469" width="18.3267%" height="15" fill="rgb(221,185,35)" fg:x="989" fg:w="230"/><text x="79.0548%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as co..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (230 samples, 18.33%)</title><rect x="78.8048%" y="453" width="18.3267%" height="15" fill="rgb(205,0,32)" fg:x="989" fg:w="230"/><text x="79.0548%" y="463.50">&lt;engine::session::state::Stat..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (230 samples, 18.33%)</title><rect x="78.8048%" y="437" width="18.3267%" height="15" fill="rgb(229,179,12)" fg:x="989" fg:w="230"/><text x="79.0548%" y="447.50">&lt;plugins_core::looking::actio..</text></g><g><title>plugins_core::looking::model::new_area_observation (225 samples, 17.93%)</title><rect x="79.2032%" y="421" width="17.9283%" height="15" fill="rgb(252,107,19)" fg:x="994" fg:w="225"/><text x="79.4532%" y="431.50">plugins_core::looking::model..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="96.8924%" y="405" width="0.2390%" height="15" fill="rgb(220,95,27)" fg:x="1216" fg:w="3"/><text x="97.1424%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="96.9721%" y="389" width="0.1594%" height="15" fill="rgb(240,113,40)" fg:x="1217" fg:w="2"/><text x="97.2221%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="96.9721%" y="373" width="0.1594%" height="15" fill="rgb(208,4,43)" fg:x="1217" fg:w="2"/><text x="97.2221%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="96.9721%" y="357" width="0.1594%" height="15" fill="rgb(247,189,30)" fg:x="1217" fg:w="2"/><text x="97.2221%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="96.9721%" y="341" width="0.1594%" height="15" fill="rgb(231,157,17)" fg:x="1217" fg:w="2"/><text x="97.2221%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.0518%" y="325" width="0.0797%" height="15" fill="rgb(224,139,6)" fg:x="1218" fg:w="1"/><text x="97.3018%" y="335.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.0518%" y="309" width="0.0797%" height="15" fill="rgb(223,83,16)" fg:x="1218" fg:w="1"/><text x="97.3018%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.0518%" y="293" width="0.0797%" height="15" fill="rgb(232,211,20)" fg:x="1218" fg:w="1"/><text x="97.3018%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.0518%" y="277" width="0.0797%" height="15" fill="rgb(225,203,35)" fg:x="1218" fg:w="1"/><text x="97.3018%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.0518%" y="261" width="0.0797%" height="15" fill="rgb(215,211,44)" fg:x="1218" fg:w="1"/><text x="97.3018%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.0518%" y="245" width="0.0797%" height="15" fill="rgb(248,213,26)" fg:x="1218" fg:w="1"/><text x="97.3018%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.0518%" y="229" width="0.0797%" height="15" fill="rgb(214,23,52)" fg:x="1218" fg:w="1"/><text x="97.3018%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="97.0518%" y="213" width="0.0797%" height="15" fill="rgb(225,173,50)" fg:x="1218" fg:w="1"/><text x="97.3018%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2908%" y="533" width="0.0797%" height="15" fill="rgb(206,150,22)" fg:x="1221" fg:w="1"/><text x="97.5408%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.3705%" y="533" width="0.0797%" height="15" fill="rgb(239,64,23)" fg:x="1222" fg:w="1"/><text x="97.6205%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.5299%" y="517" width="0.0797%" height="15" fill="rgb(242,50,38)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5299%" y="501" width="0.0797%" height="15" fill="rgb(217,91,15)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5299%" y="485" width="0.0797%" height="15" fill="rgb(230,172,6)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5299%" y="469" width="0.0797%" height="15" fill="rgb(221,98,26)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5299%" y="453" width="0.0797%" height="15" fill="rgb(227,210,45)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5299%" y="437" width="0.0797%" height="15" fill="rgb(206,8,30)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.5299%" y="421" width="0.0797%" height="15" fill="rgb(241,219,17)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.5299%" y="405" width="0.0797%" height="15" fill="rgb(247,121,29)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.5299%" y="389" width="0.0797%" height="15" fill="rgb(219,169,49)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5299%" y="373" width="0.0797%" height="15" fill="rgb(253,49,49)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.5299%" y="357" width="0.0797%" height="15" fill="rgb(217,178,3)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.5299%" y="341" width="0.0797%" height="15" fill="rgb(234,73,37)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.5299%" y="325" width="0.0797%" height="15" fill="rgb(250,98,22)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.5299%" y="309" width="0.0797%" height="15" fill="rgb(220,108,37)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.5299%" y="293" width="0.0797%" height="15" fill="rgb(225,168,10)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5299%" y="277" width="0.0797%" height="15" fill="rgb(247,215,21)" fg:x="1224" fg:w="1"/><text x="97.7799%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6096%" y="453" width="0.0797%" height="15" fill="rgb(253,189,31)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6096%" y="437" width="0.0797%" height="15" fill="rgb(241,54,22)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6096%" y="421" width="0.0797%" height="15" fill="rgb(211,87,4)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6096%" y="405" width="0.0797%" height="15" fill="rgb(245,112,24)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6096%" y="389" width="0.0797%" height="15" fill="rgb(235,190,41)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6096%" y="373" width="0.0797%" height="15" fill="rgb(214,89,8)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6096%" y="357" width="0.0797%" height="15" fill="rgb(249,155,35)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.6096%" y="341" width="0.0797%" height="15" fill="rgb(249,88,26)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.6096%" y="325" width="0.0797%" height="15" fill="rgb(232,56,8)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.6096%" y="309" width="0.0797%" height="15" fill="rgb(240,95,3)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6096%" y="293" width="0.0797%" height="15" fill="rgb(222,44,28)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6096%" y="277" width="0.0797%" height="15" fill="rgb(234,16,30)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.6096%" y="261" width="0.0797%" height="15" fill="rgb(223,26,17)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.6096%" y="245" width="0.0797%" height="15" fill="rgb(239,187,47)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.6096%" y="229" width="0.0797%" height="15" fill="rgb(247,102,50)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.6096%" y="213" width="0.0797%" height="15" fill="rgb(231,216,22)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6096%" y="197" width="0.0797%" height="15" fill="rgb(216,201,26)" fg:x="1225" fg:w="1"/><text x="97.8596%" y="207.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.6892%" y="453" width="0.0797%" height="15" fill="rgb(214,186,23)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6892%" y="437" width="0.0797%" height="15" fill="rgb(235,184,4)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6892%" y="421" width="0.0797%" height="15" fill="rgb(244,46,17)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.6892%" y="405" width="0.0797%" height="15" fill="rgb(248,74,46)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6892%" y="389" width="0.0797%" height="15" fill="rgb(243,79,5)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.6892%" y="373" width="0.0797%" height="15" fill="rgb(213,148,1)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6892%" y="357" width="0.0797%" height="15" fill="rgb(221,30,0)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6892%" y="341" width="0.0797%" height="15" fill="rgb(207,85,29)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6892%" y="325" width="0.0797%" height="15" fill="rgb(239,31,46)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6892%" y="309" width="0.0797%" height="15" fill="rgb(219,6,1)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6892%" y="293" width="0.0797%" height="15" fill="rgb(229,90,29)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6892%" y="277" width="0.0797%" height="15" fill="rgb(242,201,42)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6892%" y="261" width="0.0797%" height="15" fill="rgb(243,80,54)" fg:x="1226" fg:w="1"/><text x="97.9392%" y="271.50"></text></g><g><title>plugins_core::tools::contained_by (5 samples, 0.40%)</title><rect x="97.4502%" y="533" width="0.3984%" height="15" fill="rgb(223,166,15)" fg:x="1223" fg:w="5"/><text x="97.7002%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.24%)</title><rect x="97.6096%" y="517" width="0.2390%" height="15" fill="rgb(238,78,27)" fg:x="1225" fg:w="3"/><text x="97.8596%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.24%)</title><rect x="97.6096%" y="501" width="0.2390%" height="15" fill="rgb(235,28,43)" fg:x="1225" fg:w="3"/><text x="97.8596%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="97.6096%" y="485" width="0.2390%" height="15" fill="rgb(240,210,28)" fg:x="1225" fg:w="3"/><text x="97.8596%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="97.6096%" y="469" width="0.2390%" height="15" fill="rgb(253,6,46)" fg:x="1225" fg:w="3"/><text x="97.8596%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.7689%" y="453" width="0.0797%" height="15" fill="rgb(250,159,47)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.7689%" y="437" width="0.0797%" height="15" fill="rgb(216,139,2)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7689%" y="421" width="0.0797%" height="15" fill="rgb(221,124,44)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7689%" y="405" width="0.0797%" height="15" fill="rgb(205,37,22)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7689%" y="389" width="0.0797%" height="15" fill="rgb(250,55,8)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7689%" y="373" width="0.0797%" height="15" fill="rgb(215,83,48)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7689%" y="357" width="0.0797%" height="15" fill="rgb(253,2,32)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7689%" y="341" width="0.0797%" height="15" fill="rgb(236,67,28)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7689%" y="325" width="0.0797%" height="15" fill="rgb(252,55,15)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.7689%" y="309" width="0.0797%" height="15" fill="rgb(243,173,17)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7689%" y="293" width="0.0797%" height="15" fill="rgb(215,212,13)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.7689%" y="277" width="0.0797%" height="15" fill="rgb(253,176,6)" fg:x="1227" fg:w="1"/><text x="98.0189%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::EnumDeserializer as serde::de::EnumAccess&gt;::variant_seed (1 samples, 0.08%)</title><rect x="97.8486%" y="405" width="0.0797%" height="15" fill="rgb(236,105,26)" fg:x="1228" fg:w="1"/><text x="98.0986%" y="415.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="97.8486%" y="533" width="0.1594%" height="15" fill="rgb(239,226,32)" fg:x="1228" fg:w="2"/><text x="98.0986%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="97.8486%" y="517" width="0.1594%" height="15" fill="rgb(236,104,51)" fg:x="1228" fg:w="2"/><text x="98.0986%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8486%" y="501" width="0.1594%" height="15" fill="rgb(220,172,33)" fg:x="1228" fg:w="2"/><text x="98.0986%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8486%" y="485" width="0.1594%" height="15" fill="rgb(224,182,25)" fg:x="1228" fg:w="2"/><text x="98.0986%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="97.8486%" y="469" width="0.1594%" height="15" fill="rgb(236,184,24)" fg:x="1228" fg:w="2"/><text x="98.0986%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="97.8486%" y="453" width="0.1594%" height="15" fill="rgb(241,221,14)" fg:x="1228" fg:w="2"/><text x="98.0986%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="97.8486%" y="437" width="0.1594%" height="15" fill="rgb(227,146,5)" fg:x="1228" fg:w="2"/><text x="98.0986%" y="447.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.8486%" y="421" width="0.1594%" height="15" fill="rgb(214,15,23)" fg:x="1228" fg:w="2"/><text x="98.0986%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="97.9283%" y="405" width="0.0797%" height="15" fill="rgb(233,157,31)" fg:x="1229" fg:w="1"/><text x="98.1783%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9283%" y="389" width="0.0797%" height="15" fill="rgb(211,27,52)" fg:x="1229" fg:w="1"/><text x="98.1783%" y="399.50"></text></g><g><title>engine::session::Session::captured (253 samples, 20.16%)</title><rect x="77.9283%" y="709" width="20.1594%" height="15" fill="rgb(212,223,15)" fg:x="978" fg:w="253"/><text x="78.1783%" y="719.50">engine::session::Session::captur..</text></g><g><title>engine::session::logs::capture (250 samples, 19.92%)</title><rect x="78.1673%" y="693" width="19.9203%" height="15" fill="rgb(254,211,0)" fg:x="981" fg:w="250"/><text x="78.4173%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (249 samples, 19.84%)</title><rect x="78.2470%" y="677" width="19.8406%" height="15" fill="rgb(205,43,38)" fg:x="982" fg:w="249"/><text x="78.4970%" y="687.50">tracing_core::dispatcher::with_..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (249 samples, 19.84%)</title><rect x="78.2470%" y="661" width="19.8406%" height="15" fill="rgb(242,206,46)" fg:x="982" fg:w="249"/><text x="78.4970%" y="671.50">&lt;engine::session::Session as ke..</text></g><g><title>kernel::plugins::mw::apply_middleware (249 samples, 19.84%)</title><rect x="78.2470%" y="645" width="19.8406%" height="15" fill="rgb(220,221,12)" fg:x="982" fg:w="249"/><text x="78.4970%" y="655.50">kernel::plugins::mw::apply_midd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (249 samples, 19.84%)</title><rect x="78.2470%" y="629" width="19.8406%" height="15" fill="rgb(217,156,35)" fg:x="982" fg:w="249"/><text x="78.4970%" y="639.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (249 samples, 19.84%)</title><rect x="78.2470%" y="613" width="19.8406%" height="15" fill="rgb(207,181,49)" fg:x="982" fg:w="249"/><text x="78.4970%" y="623.50">&lt;engine::session::ExpandSurroun..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (243 samples, 19.36%)</title><rect x="78.7251%" y="597" width="19.3625%" height="15" fill="rgb(235,103,47)" fg:x="988" fg:w="243"/><text x="78.9751%" y="607.50">kernel::plugins::mw::Middlewar..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (242 samples, 19.28%)</title><rect x="78.8048%" y="581" width="19.2829%" height="15" fill="rgb(222,63,28)" fg:x="989" fg:w="242"/><text x="79.0548%" y="591.50">&lt;plugins_rune::RuneMiddleware ..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (12 samples, 0.96%)</title><rect x="97.1315%" y="565" width="0.9562%" height="15" fill="rgb(244,137,21)" fg:x="1219" fg:w="12"/><text x="97.3815%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (11 samples, 0.88%)</title><rect x="97.2112%" y="549" width="0.8765%" height="15" fill="rgb(228,35,27)" fg:x="1220" fg:w="11"/><text x="97.4612%" y="559.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="98.0080%" y="533" width="0.0797%" height="15" fill="rgb(226,191,41)" fg:x="1230" fg:w="1"/><text x="98.2580%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.0080%" y="517" width="0.0797%" height="15" fill="rgb(210,154,3)" fg:x="1230" fg:w="1"/><text x="98.2580%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0080%" y="501" width="0.0797%" height="15" fill="rgb(216,60,49)" fg:x="1230" fg:w="1"/><text x="98.2580%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0876%" y="629" width="0.0797%" height="15" fill="rgb(226,17,20)" fg:x="1231" fg:w="1"/><text x="98.3376%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.0876%" y="661" width="0.1594%" height="15" fill="rgb(206,115,35)" fg:x="1231" fg:w="2"/><text x="98.3376%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.0876%" y="645" width="0.1594%" height="15" fill="rgb(227,88,1)" fg:x="1231" fg:w="2"/><text x="98.3376%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.1673%" y="629" width="0.0797%" height="15" fill="rgb(230,222,24)" fg:x="1232" fg:w="1"/><text x="98.4173%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2470%" y="613" width="0.0797%" height="15" fill="rgb(214,124,32)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2470%" y="597" width="0.0797%" height="15" fill="rgb(240,41,36)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2470%" y="581" width="0.0797%" height="15" fill="rgb(221,17,52)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2470%" y="565" width="0.0797%" height="15" fill="rgb(252,70,16)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2470%" y="549" width="0.0797%" height="15" fill="rgb(250,177,4)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2470%" y="533" width="0.0797%" height="15" fill="rgb(240,188,47)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2470%" y="517" width="0.0797%" height="15" fill="rgb(215,92,12)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2470%" y="501" width="0.0797%" height="15" fill="rgb(242,110,29)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2470%" y="485" width="0.0797%" height="15" fill="rgb(208,211,26)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.2470%" y="469" width="0.0797%" height="15" fill="rgb(244,147,6)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.2470%" y="453" width="0.0797%" height="15" fill="rgb(211,130,42)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.2470%" y="437" width="0.0797%" height="15" fill="rgb(220,63,1)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.2470%" y="421" width="0.0797%" height="15" fill="rgb(241,212,30)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.2470%" y="405" width="0.0797%" height="15" fill="rgb(233,153,17)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2470%" y="389" width="0.0797%" height="15" fill="rgb(236,3,10)" fg:x="1233" fg:w="1"/><text x="98.4970%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.4064%" y="565" width="0.0797%" height="15" fill="rgb(232,41,21)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.4064%" y="549" width="0.0797%" height="15" fill="rgb(206,63,51)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.4064%" y="533" width="0.0797%" height="15" fill="rgb(250,214,3)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.4064%" y="517" width="0.0797%" height="15" fill="rgb(254,89,27)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.4064%" y="501" width="0.0797%" height="15" fill="rgb(249,41,14)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.4064%" y="485" width="0.0797%" height="15" fill="rgb(221,196,51)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4064%" y="469" width="0.0797%" height="15" fill="rgb(214,116,26)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4064%" y="453" width="0.0797%" height="15" fill="rgb(236,67,7)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.4064%" y="437" width="0.0797%" height="15" fill="rgb(253,179,32)" fg:x="1235" fg:w="1"/><text x="98.6564%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.3267%" y="613" width="0.2390%" height="15" fill="rgb(218,33,15)" fg:x="1234" fg:w="3"/><text x="98.5767%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.3267%" y="597" width="0.2390%" height="15" fill="rgb(217,202,41)" fg:x="1234" fg:w="3"/><text x="98.5767%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.4064%" y="581" width="0.1594%" height="15" fill="rgb(234,133,5)" fg:x="1235" fg:w="2"/><text x="98.6564%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4861%" y="565" width="0.0797%" height="15" fill="rgb(240,47,40)" fg:x="1236" fg:w="1"/><text x="98.7361%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4861%" y="549" width="0.0797%" height="15" fill="rgb(234,166,26)" fg:x="1236" fg:w="1"/><text x="98.7361%" y="559.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.56%)</title><rect x="98.0876%" y="693" width="0.5578%" height="15" fill="rgb(244,125,51)" fg:x="1231" fg:w="7"/><text x="98.3376%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.56%)</title><rect x="98.0876%" y="677" width="0.5578%" height="15" fill="rgb(229,171,11)" fg:x="1231" fg:w="7"/><text x="98.3376%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.2470%" y="661" width="0.3984%" height="15" fill="rgb(224,38,45)" fg:x="1233" fg:w="5"/><text x="98.4970%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="98.2470%" y="645" width="0.3984%" height="15" fill="rgb(237,27,7)" fg:x="1233" fg:w="5"/><text x="98.4970%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.2470%" y="629" width="0.3984%" height="15" fill="rgb(216,52,7)" fg:x="1233" fg:w="5"/><text x="98.4970%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.5657%" y="613" width="0.0797%" height="15" fill="rgb(243,11,11)" fg:x="1237" fg:w="1"/><text x="98.8157%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.5657%" y="597" width="0.0797%" height="15" fill="rgb(253,167,20)" fg:x="1237" fg:w="1"/><text x="98.8157%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.5657%" y="581" width="0.0797%" height="15" fill="rgb(215,207,5)" fg:x="1237" fg:w="1"/><text x="98.8157%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.8048%" y="629" width="0.0797%" height="15" fill="rgb(252,127,31)" fg:x="1240" fg:w="1"/><text x="99.0548%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="98.6454%" y="677" width="0.3187%" height="15" fill="rgb(209,106,27)" fg:x="1238" fg:w="4"/><text x="98.8954%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="98.6454%" y="661" width="0.3187%" height="15" fill="rgb(214,220,18)" fg:x="1238" fg:w="4"/><text x="98.8954%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="98.6454%" y="645" width="0.3187%" height="15" fill="rgb(237,89,12)" fg:x="1238" fg:w="4"/><text x="98.8954%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.8845%" y="629" width="0.0797%" height="15" fill="rgb(209,167,36)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8845%" y="613" width="0.0797%" height="15" fill="rgb(243,45,22)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.8845%" y="597" width="0.0797%" height="15" fill="rgb(239,2,46)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8845%" y="581" width="0.0797%" height="15" fill="rgb(241,101,0)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8845%" y="565" width="0.0797%" height="15" fill="rgb(244,34,31)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.8845%" y="549" width="0.0797%" height="15" fill="rgb(248,23,22)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8845%" y="533" width="0.0797%" height="15" fill="rgb(218,27,48)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.8845%" y="517" width="0.0797%" height="15" fill="rgb(232,78,1)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.8845%" y="501" width="0.0797%" height="15" fill="rgb(233,169,12)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.8845%" y="485" width="0.0797%" height="15" fill="rgb(225,222,54)" fg:x="1241" fg:w="1"/><text x="99.1345%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.96%)</title><rect x="98.0876%" y="709" width="0.9562%" height="15" fill="rgb(245,126,29)" fg:x="1231" fg:w="12"/><text x="98.3376%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="98.6454%" y="693" width="0.3984%" height="15" fill="rgb(241,63,48)" fg:x="1238" fg:w="5"/><text x="98.8954%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.9641%" y="677" width="0.0797%" height="15" fill="rgb(235,126,38)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.9641%" y="661" width="0.0797%" height="15" fill="rgb(232,96,49)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9641%" y="645" width="0.0797%" height="15" fill="rgb(211,146,40)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9641%" y="629" width="0.0797%" height="15" fill="rgb(247,93,44)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9641%" y="613" width="0.0797%" height="15" fill="rgb(251,41,49)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9641%" y="597" width="0.0797%" height="15" fill="rgb(218,155,12)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9641%" y="581" width="0.0797%" height="15" fill="rgb(221,161,30)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9641%" y="565" width="0.0797%" height="15" fill="rgb(221,179,11)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9641%" y="549" width="0.0797%" height="15" fill="rgb(224,170,48)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9641%" y="533" width="0.0797%" height="15" fill="rgb(223,117,5)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9641%" y="517" width="0.0797%" height="15" fill="rgb(209,52,20)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9641%" y="501" width="0.0797%" height="15" fill="rgb(209,19,41)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.9641%" y="485" width="0.0797%" height="15" fill="rgb(210,177,12)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9641%" y="469" width="0.0797%" height="15" fill="rgb(211,159,37)" fg:x="1242" fg:w="1"/><text x="99.2141%" y="479.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="99.0438%" y="709" width="0.0797%" height="15" fill="rgb(209,20,2)" fg:x="1243" fg:w="1"/><text x="99.2938%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2032%" y="661" width="0.0797%" height="15" fill="rgb(244,3,46)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2032%" y="645" width="0.0797%" height="15" fill="rgb(220,94,38)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2032%" y="629" width="0.0797%" height="15" fill="rgb(253,14,31)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2032%" y="613" width="0.0797%" height="15" fill="rgb(234,176,13)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2032%" y="597" width="0.0797%" height="15" fill="rgb(218,62,25)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2032%" y="581" width="0.0797%" height="15" fill="rgb(216,124,40)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2032%" y="565" width="0.0797%" height="15" fill="rgb(228,170,12)" fg:x="1245" fg:w="1"/><text x="99.4532%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2829%" y="645" width="0.0797%" height="15" fill="rgb(231,226,5)" fg:x="1246" fg:w="1"/><text x="99.5329%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2829%" y="629" width="0.0797%" height="15" fill="rgb(237,122,22)" fg:x="1246" fg:w="1"/><text x="99.5329%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="99.2829%" y="661" width="0.2390%" height="15" fill="rgb(209,185,25)" fg:x="1246" fg:w="3"/><text x="99.5329%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.3625%" y="645" width="0.1594%" height="15" fill="rgb(228,200,32)" fg:x="1247" fg:w="2"/><text x="99.6125%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.3625%" y="629" width="0.1594%" height="15" fill="rgb(217,140,10)" fg:x="1247" fg:w="2"/><text x="99.6125%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.4422%" y="613" width="0.0797%" height="15" fill="rgb(253,17,24)" fg:x="1248" fg:w="1"/><text x="99.6922%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4422%" y="597" width="0.0797%" height="15" fill="rgb(212,61,6)" fg:x="1248" fg:w="1"/><text x="99.6922%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4422%" y="581" width="0.0797%" height="15" fill="rgb(205,14,25)" fg:x="1248" fg:w="1"/><text x="99.6922%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4422%" y="565" width="0.0797%" height="15" fill="rgb(232,69,41)" fg:x="1248" fg:w="1"/><text x="99.6922%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.4422%" y="549" width="0.0797%" height="15" fill="rgb(241,106,47)" fg:x="1248" fg:w="1"/><text x="99.6922%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="99.5219%" y="613" width="0.0797%" height="15" fill="rgb(210,213,53)" fg:x="1249" fg:w="1"/><text x="99.7719%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6016%" y="613" width="0.0797%" height="15" fill="rgb(253,175,27)" fg:x="1250" fg:w="1"/><text x="99.8516%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6016%" y="597" width="0.0797%" height="15" fill="rgb(211,171,24)" fg:x="1250" fg:w="1"/><text x="99.8516%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.5219%" y="661" width="0.2390%" height="15" fill="rgb(229,80,7)" fg:x="1249" fg:w="3"/><text x="99.7719%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.5219%" y="645" width="0.2390%" height="15" fill="rgb(212,46,39)" fg:x="1249" fg:w="3"/><text x="99.7719%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.5219%" y="629" width="0.2390%" height="15" fill="rgb(240,80,45)" fg:x="1249" fg:w="3"/><text x="99.7719%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.6813%" y="613" width="0.0797%" height="15" fill="rgb(253,177,40)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6813%" y="597" width="0.0797%" height="15" fill="rgb(249,200,15)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6813%" y="581" width="0.0797%" height="15" fill="rgb(217,78,26)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6813%" y="565" width="0.0797%" height="15" fill="rgb(254,151,32)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.6813%" y="549" width="0.0797%" height="15" fill="rgb(226,165,27)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6813%" y="533" width="0.0797%" height="15" fill="rgb(250,206,4)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6813%" y="517" width="0.0797%" height="15" fill="rgb(231,229,27)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6813%" y="501" width="0.0797%" height="15" fill="rgb(239,217,8)" fg:x="1251" fg:w="1"/><text x="99.9313%" y="511.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (275 samples, 21.91%)</title><rect x="77.9283%" y="741" width="21.9124%" height="15" fill="rgb(225,204,27)" fg:x="978" fg:w="275"/><text x="78.1783%" y="751.50">engine::session::Session::evaluate_..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (275 samples, 21.91%)</title><rect x="77.9283%" y="725" width="21.9124%" height="15" fill="rgb(230,56,32)" fg:x="978" fg:w="275"/><text x="78.1783%" y="735.50">engine::session::Session::evaluate_..</text></g><g><title>kernel::model::EntityPtrResolver::world (9 samples, 0.72%)</title><rect x="99.1235%" y="709" width="0.7171%" height="15" fill="rgb(222,56,27)" fg:x="1244" fg:w="9"/><text x="99.3735%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.72%)</title><rect x="99.1235%" y="693" width="0.7171%" height="15" fill="rgb(253,108,27)" fg:x="1244" fg:w="9"/><text x="99.3735%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.72%)</title><rect x="99.1235%" y="677" width="0.7171%" height="15" fill="rgb(212,87,36)" fg:x="1244" fg:w="9"/><text x="99.3735%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.7610%" y="661" width="0.0797%" height="15" fill="rgb(247,82,36)" fg:x="1252" fg:w="1"/><text x="100.0110%" y="671.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.7610%" y="645" width="0.0797%" height="15" fill="rgb(222,143,9)" fg:x="1252" fg:w="1"/><text x="100.0110%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7610%" y="629" width="0.0797%" height="15" fill="rgb(238,162,48)" fg:x="1252" fg:w="1"/><text x="100.0110%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7610%" y="613" width="0.0797%" height="15" fill="rgb(221,59,43)" fg:x="1252" fg:w="1"/><text x="100.0110%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7610%" y="597" width="0.0797%" height="15" fill="rgb(205,166,41)" fg:x="1252" fg:w="1"/><text x="100.0110%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7610%" y="581" width="0.0797%" height="15" fill="rgb(241,186,40)" fg:x="1252" fg:w="1"/><text x="100.0110%" y="591.50"></text></g><g><title>all (1,255 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(216,119,35)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-9e370512 (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(208,68,38)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1087.50">simple-9e370512</text></g><g><title>_start (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(217,113,1)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(242,153,3)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(229,76,35)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,255 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(229,125,34)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,255 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(238,179,36)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,255 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(244,183,19)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,255 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(216,85,49)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,255 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(208,161,47)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,255 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(233,210,18)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,255 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(205,104,42)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,255 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(248,90,43)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,255 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(206,198,11)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,255 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(239,165,27)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,255 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(246,44,32)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,255 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(252,65,42)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,255 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(246,197,18)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,255 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(216,192,4)" fg:x="0" fg:w="1255"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (423 samples, 33.71%)</title><rect x="66.2948%" y="789" width="33.7052%" height="15" fill="rgb(208,117,10)" fg:x="832" fg:w="423"/><text x="66.5448%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::rout..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (423 samples, 33.71%)</title><rect x="66.2948%" y="773" width="33.7052%" height="15" fill="rgb(240,61,47)" fg:x="832" fg:w="423"/><text x="66.5448%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (423 samples, 33.71%)</title><rect x="66.2948%" y="757" width="33.7052%" height="15" fill="rgb(228,178,21)" fg:x="832" fg:w="423"/><text x="66.5448%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (2 samples, 0.16%)</title><rect x="99.8406%" y="741" width="0.1594%" height="15" fill="rgb(219,96,54)" fg:x="1253" fg:w="2"/><text x="100.0906%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="99.8406%" y="725" width="0.1594%" height="15" fill="rgb(250,177,24)" fg:x="1253" fg:w="2"/><text x="100.0906%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="99.8406%" y="709" width="0.1594%" height="15" fill="rgb(242,154,46)" fg:x="1253" fg:w="2"/><text x="100.0906%" y="719.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="99.8406%" y="693" width="0.1594%" height="15" fill="rgb(226,176,29)" fg:x="1253" fg:w="2"/><text x="100.0906%" y="703.50"></text></g></svg></svg>