<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1190" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1173.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1173.00"> </text><svg id="frames" x="10" width="1180" total_samples="1249"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0000%" y="773" width="0.0801%" height="15" fill="rgb(218,60,48)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="757" width="0.0801%" height="15" fill="rgb(221,11,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;kernel::model::entity::ScopeValue&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0801%" y="693" width="0.0801%" height="15" fill="rgb(220,148,13)" fg:x="1" fg:w="1"/><text x="0.3301%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0801%" y="677" width="0.0801%" height="15" fill="rgb(210,16,3)" fg:x="1" fg:w="1"/><text x="0.3301%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0801%" y="661" width="0.0801%" height="15" fill="rgb(236,80,2)" fg:x="1" fg:w="1"/><text x="0.3301%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0801%" y="645" width="0.0801%" height="15" fill="rgb(239,129,19)" fg:x="1" fg:w="1"/><text x="0.3301%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.1601%" y="661" width="0.1601%" height="15" fill="rgb(220,106,35)" fg:x="2" fg:w="2"/><text x="0.4101%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2402%" y="645" width="0.0801%" height="15" fill="rgb(252,139,45)" fg:x="3" fg:w="1"/><text x="0.4902%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3203%" y="645" width="0.0801%" height="15" fill="rgb(229,8,36)" fg:x="4" fg:w="1"/><text x="0.5703%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4003%" y="613" width="0.0801%" height="15" fill="rgb(230,126,33)" fg:x="5" fg:w="1"/><text x="0.6503%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0000%" y="789" width="0.5604%" height="15" fill="rgb(239,140,21)" fg:x="0" fg:w="7"/><text x="0.2500%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (6 samples, 0.48%)</title><rect x="0.0801%" y="773" width="0.4804%" height="15" fill="rgb(254,104,9)" fg:x="1" fg:w="6"/><text x="0.3301%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0801%" y="757" width="0.4804%" height="15" fill="rgb(239,52,14)" fg:x="1" fg:w="6"/><text x="0.3301%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (6 samples, 0.48%)</title><rect x="0.0801%" y="741" width="0.4804%" height="15" fill="rgb(208,227,44)" fg:x="1" fg:w="6"/><text x="0.3301%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0801%" y="725" width="0.4804%" height="15" fill="rgb(246,18,19)" fg:x="1" fg:w="6"/><text x="0.3301%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0801%" y="709" width="0.4804%" height="15" fill="rgb(235,228,25)" fg:x="1" fg:w="6"/><text x="0.3301%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.1601%" y="693" width="0.4003%" height="15" fill="rgb(240,156,20)" fg:x="2" fg:w="5"/><text x="0.4101%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="0.1601%" y="677" width="0.4003%" height="15" fill="rgb(224,8,20)" fg:x="2" fg:w="5"/><text x="0.4101%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.3203%" y="661" width="0.2402%" height="15" fill="rgb(214,12,52)" fg:x="4" fg:w="3"/><text x="0.5703%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.4003%" y="645" width="0.1601%" height="15" fill="rgb(211,220,47)" fg:x="5" fg:w="2"/><text x="0.6503%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.4003%" y="629" width="0.1601%" height="15" fill="rgb(250,173,5)" fg:x="5" fg:w="2"/><text x="0.6503%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.4804%" y="613" width="0.0801%" height="15" fill="rgb(250,125,52)" fg:x="6" fg:w="1"/><text x="0.7304%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4804%" y="597" width="0.0801%" height="15" fill="rgb(209,133,18)" fg:x="6" fg:w="1"/><text x="0.7304%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4804%" y="581" width="0.0801%" height="15" fill="rgb(216,173,22)" fg:x="6" fg:w="1"/><text x="0.7304%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.5604%" y="709" width="0.0801%" height="15" fill="rgb(205,3,22)" fg:x="7" fg:w="1"/><text x="0.8104%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="0.5604%" y="693" width="0.0801%" height="15" fill="rgb(248,22,20)" fg:x="7" fg:w="1"/><text x="0.8104%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="0.5604%" y="677" width="0.0801%" height="15" fill="rgb(233,6,29)" fg:x="7" fg:w="1"/><text x="0.8104%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="0.5604%" y="661" width="0.0801%" height="15" fill="rgb(240,22,54)" fg:x="7" fg:w="1"/><text x="0.8104%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="0.5604%" y="645" width="0.0801%" height="15" fill="rgb(231,133,32)" fg:x="7" fg:w="1"/><text x="0.8104%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.5604%" y="629" width="0.0801%" height="15" fill="rgb(248,193,4)" fg:x="7" fg:w="1"/><text x="0.8104%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5604%" y="613" width="0.0801%" height="15" fill="rgb(211,178,46)" fg:x="7" fg:w="1"/><text x="0.8104%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.5604%" y="597" width="0.0801%" height="15" fill="rgb(224,5,42)" fg:x="7" fg:w="1"/><text x="0.8104%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5604%" y="581" width="0.0801%" height="15" fill="rgb(239,176,25)" fg:x="7" fg:w="1"/><text x="0.8104%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5604%" y="565" width="0.0801%" height="15" fill="rgb(245,187,50)" fg:x="7" fg:w="1"/><text x="0.8104%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5604%" y="549" width="0.0801%" height="15" fill="rgb(248,24,15)" fg:x="7" fg:w="1"/><text x="0.8104%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.5604%" y="533" width="0.0801%" height="15" fill="rgb(205,166,13)" fg:x="7" fg:w="1"/><text x="0.8104%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.5604%" y="517" width="0.0801%" height="15" fill="rgb(208,114,23)" fg:x="7" fg:w="1"/><text x="0.8104%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5604%" y="501" width="0.0801%" height="15" fill="rgb(239,127,18)" fg:x="7" fg:w="1"/><text x="0.8104%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="0.6405%" y="709" width="0.0801%" height="15" fill="rgb(219,154,28)" fg:x="8" fg:w="1"/><text x="0.8905%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="0.6405%" y="693" width="0.0801%" height="15" fill="rgb(225,157,23)" fg:x="8" fg:w="1"/><text x="0.8905%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="0.6405%" y="677" width="0.0801%" height="15" fill="rgb(219,8,6)" fg:x="8" fg:w="1"/><text x="0.8905%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.6405%" y="661" width="0.0801%" height="15" fill="rgb(212,47,6)" fg:x="8" fg:w="1"/><text x="0.8905%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6405%" y="645" width="0.0801%" height="15" fill="rgb(224,190,4)" fg:x="8" fg:w="1"/><text x="0.8905%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6405%" y="629" width="0.0801%" height="15" fill="rgb(239,183,29)" fg:x="8" fg:w="1"/><text x="0.8905%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="0.6405%" y="613" width="0.0801%" height="15" fill="rgb(213,57,7)" fg:x="8" fg:w="1"/><text x="0.8905%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.6405%" y="597" width="0.0801%" height="15" fill="rgb(216,148,1)" fg:x="8" fg:w="1"/><text x="0.8905%" y="607.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="0.7206%" y="693" width="0.0801%" height="15" fill="rgb(236,182,29)" fg:x="9" fg:w="1"/><text x="0.9706%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="0.7206%" y="677" width="0.0801%" height="15" fill="rgb(244,120,48)" fg:x="9" fg:w="1"/><text x="0.9706%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.7206%" y="661" width="0.0801%" height="15" fill="rgb(206,71,34)" fg:x="9" fg:w="1"/><text x="0.9706%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7206%" y="645" width="0.0801%" height="15" fill="rgb(242,32,6)" fg:x="9" fg:w="1"/><text x="0.9706%" y="655.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7206%" y="629" width="0.0801%" height="15" fill="rgb(241,35,3)" fg:x="9" fg:w="1"/><text x="0.9706%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.7206%" y="613" width="0.0801%" height="15" fill="rgb(222,62,19)" fg:x="9" fg:w="1"/><text x="0.9706%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.7206%" y="597" width="0.0801%" height="15" fill="rgb(223,110,41)" fg:x="9" fg:w="1"/><text x="0.9706%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="0.7206%" y="581" width="0.0801%" height="15" fill="rgb(208,224,4)" fg:x="9" fg:w="1"/><text x="0.9706%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.7206%" y="565" width="0.0801%" height="15" fill="rgb(241,137,19)" fg:x="9" fg:w="1"/><text x="0.9706%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="0.7206%" y="549" width="0.0801%" height="15" fill="rgb(244,24,17)" fg:x="9" fg:w="1"/><text x="0.9706%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="0.7206%" y="533" width="0.0801%" height="15" fill="rgb(245,178,49)" fg:x="9" fg:w="1"/><text x="0.9706%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="0.7206%" y="517" width="0.0801%" height="15" fill="rgb(219,160,38)" fg:x="9" fg:w="1"/><text x="0.9706%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7206%" y="501" width="0.0801%" height="15" fill="rgb(228,137,14)" fg:x="9" fg:w="1"/><text x="0.9706%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="0.8807%" y="597" width="0.0801%" height="15" fill="rgb(237,134,11)" fg:x="11" fg:w="1"/><text x="1.1307%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.48%)</title><rect x="0.5604%" y="757" width="0.4804%" height="15" fill="rgb(211,126,44)" fg:x="7" fg:w="6"/><text x="0.8104%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="0.5604%" y="741" width="0.4804%" height="15" fill="rgb(226,171,33)" fg:x="7" fg:w="6"/><text x="0.8104%" y="751.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="0.5604%" y="725" width="0.4804%" height="15" fill="rgb(253,99,13)" fg:x="7" fg:w="6"/><text x="0.8104%" y="735.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="0.7206%" y="709" width="0.3203%" height="15" fill="rgb(244,48,7)" fg:x="9" fg:w="4"/><text x="0.9706%" y="719.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="0.8006%" y="693" width="0.2402%" height="15" fill="rgb(244,217,54)" fg:x="10" fg:w="3"/><text x="1.0506%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="0.8006%" y="677" width="0.2402%" height="15" fill="rgb(224,15,18)" fg:x="10" fg:w="3"/><text x="1.0506%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="0.8006%" y="661" width="0.2402%" height="15" fill="rgb(244,99,12)" fg:x="10" fg:w="3"/><text x="1.0506%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.8807%" y="645" width="0.1601%" height="15" fill="rgb(233,226,8)" fg:x="11" fg:w="2"/><text x="1.1307%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.8807%" y="629" width="0.1601%" height="15" fill="rgb(229,211,3)" fg:x="11" fg:w="2"/><text x="1.1307%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="0.8807%" y="613" width="0.1601%" height="15" fill="rgb(216,140,21)" fg:x="11" fg:w="2"/><text x="1.1307%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.9608%" y="597" width="0.0801%" height="15" fill="rgb(234,122,30)" fg:x="12" fg:w="1"/><text x="1.2108%" y="607.50"></text></g><g><title>&lt;alloc::ffi::c_str::NulError as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="1.0408%" y="709" width="0.0801%" height="15" fill="rgb(236,25,46)" fg:x="13" fg:w="1"/><text x="1.2908%" y="719.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="1.1209%" y="709" width="0.0801%" height="15" fill="rgb(217,52,54)" fg:x="14" fg:w="1"/><text x="1.3709%" y="719.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="1.1209%" y="693" width="0.0801%" height="15" fill="rgb(222,29,26)" fg:x="14" fg:w="1"/><text x="1.3709%" y="703.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.80%)</title><rect x="0.5604%" y="789" width="0.8006%" height="15" fill="rgb(216,177,29)" fg:x="7" fg:w="10"/><text x="0.8104%" y="799.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.80%)</title><rect x="0.5604%" y="773" width="0.8006%" height="15" fill="rgb(247,136,51)" fg:x="7" fg:w="10"/><text x="0.8104%" y="783.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="1.0408%" y="757" width="0.3203%" height="15" fill="rgb(231,47,47)" fg:x="13" fg:w="4"/><text x="1.2908%" y="767.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="1.0408%" y="741" width="0.3203%" height="15" fill="rgb(211,192,36)" fg:x="13" fg:w="4"/><text x="1.2908%" y="751.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="1.0408%" y="725" width="0.3203%" height="15" fill="rgb(229,156,32)" fg:x="13" fg:w="4"/><text x="1.2908%" y="735.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="1.2010%" y="709" width="0.1601%" height="15" fill="rgb(248,213,20)" fg:x="15" fg:w="2"/><text x="1.4510%" y="719.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="1.2010%" y="693" width="0.1601%" height="15" fill="rgb(217,64,7)" fg:x="15" fg:w="2"/><text x="1.4510%" y="703.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.2010%" y="677" width="0.1601%" height="15" fill="rgb(232,142,8)" fg:x="15" fg:w="2"/><text x="1.4510%" y="687.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="1.2810%" y="661" width="0.0801%" height="15" fill="rgb(224,92,44)" fg:x="16" fg:w="1"/><text x="1.5310%" y="671.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="1.2810%" y="645" width="0.0801%" height="15" fill="rgb(214,169,17)" fg:x="16" fg:w="1"/><text x="1.5310%" y="655.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="1.3611%" y="741" width="0.0801%" height="15" fill="rgb(210,59,37)" fg:x="17" fg:w="1"/><text x="1.6111%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="1.3611%" y="725" width="0.0801%" height="15" fill="rgb(214,116,48)" fg:x="17" fg:w="1"/><text x="1.6111%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="1.3611%" y="709" width="0.0801%" height="15" fill="rgb(244,191,6)" fg:x="17" fg:w="1"/><text x="1.6111%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.3611%" y="693" width="0.0801%" height="15" fill="rgb(241,50,52)" fg:x="17" fg:w="1"/><text x="1.6111%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.3611%" y="677" width="0.0801%" height="15" fill="rgb(236,75,39)" fg:x="17" fg:w="1"/><text x="1.6111%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.4412%" y="693" width="0.0801%" height="15" fill="rgb(236,99,0)" fg:x="18" fg:w="1"/><text x="1.6912%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.4412%" y="677" width="0.0801%" height="15" fill="rgb(207,202,15)" fg:x="18" fg:w="1"/><text x="1.6912%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.5212%" y="661" width="0.0801%" height="15" fill="rgb(233,207,14)" fg:x="19" fg:w="1"/><text x="1.7712%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.5212%" y="645" width="0.0801%" height="15" fill="rgb(226,27,51)" fg:x="19" fg:w="1"/><text x="1.7712%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.5212%" y="629" width="0.0801%" height="15" fill="rgb(206,104,42)" fg:x="19" fg:w="1"/><text x="1.7712%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="1.4412%" y="709" width="0.2402%" height="15" fill="rgb(212,225,4)" fg:x="18" fg:w="3"/><text x="1.6912%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.5212%" y="693" width="0.1601%" height="15" fill="rgb(233,96,42)" fg:x="19" fg:w="2"/><text x="1.7712%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="1.5212%" y="677" width="0.1601%" height="15" fill="rgb(229,21,32)" fg:x="19" fg:w="2"/><text x="1.7712%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6013%" y="661" width="0.0801%" height="15" fill="rgb(226,216,24)" fg:x="20" fg:w="1"/><text x="1.8513%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6013%" y="645" width="0.0801%" height="15" fill="rgb(221,163,17)" fg:x="20" fg:w="1"/><text x="1.8513%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6013%" y="629" width="0.0801%" height="15" fill="rgb(216,216,42)" fg:x="20" fg:w="1"/><text x="1.8513%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.6013%" y="613" width="0.0801%" height="15" fill="rgb(240,118,7)" fg:x="20" fg:w="1"/><text x="1.8513%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.6013%" y="597" width="0.0801%" height="15" fill="rgb(221,67,37)" fg:x="20" fg:w="1"/><text x="1.8513%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.6813%" y="677" width="0.1601%" height="15" fill="rgb(241,32,44)" fg:x="21" fg:w="2"/><text x="1.9313%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="1.8415%" y="629" width="0.0801%" height="15" fill="rgb(235,204,43)" fg:x="23" fg:w="1"/><text x="2.0915%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.6813%" y="709" width="0.3203%" height="15" fill="rgb(213,116,10)" fg:x="21" fg:w="4"/><text x="1.9313%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="1.6813%" y="693" width="0.3203%" height="15" fill="rgb(239,15,48)" fg:x="21" fg:w="4"/><text x="1.9313%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.8415%" y="677" width="0.1601%" height="15" fill="rgb(207,123,36)" fg:x="23" fg:w="2"/><text x="2.0915%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.8415%" y="661" width="0.1601%" height="15" fill="rgb(209,103,30)" fg:x="23" fg:w="2"/><text x="2.0915%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.8415%" y="645" width="0.1601%" height="15" fill="rgb(238,100,19)" fg:x="23" fg:w="2"/><text x="2.0915%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.9215%" y="629" width="0.0801%" height="15" fill="rgb(244,30,14)" fg:x="24" fg:w="1"/><text x="2.1715%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.9215%" y="613" width="0.0801%" height="15" fill="rgb(249,174,6)" fg:x="24" fg:w="1"/><text x="2.1715%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0016%" y="661" width="0.0801%" height="15" fill="rgb(235,213,41)" fg:x="25" fg:w="1"/><text x="2.2516%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0016%" y="645" width="0.0801%" height="15" fill="rgb(213,118,6)" fg:x="25" fg:w="1"/><text x="2.2516%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0817%" y="645" width="0.0801%" height="15" fill="rgb(235,44,51)" fg:x="26" fg:w="1"/><text x="2.3317%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.0817%" y="629" width="0.0801%" height="15" fill="rgb(217,9,53)" fg:x="26" fg:w="1"/><text x="2.3317%" y="639.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="2.0817%" y="613" width="0.0801%" height="15" fill="rgb(237,172,34)" fg:x="26" fg:w="1"/><text x="2.3317%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.1617%" y="613" width="0.0801%" height="15" fill="rgb(206,206,11)" fg:x="27" fg:w="1"/><text x="2.4117%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.1617%" y="597" width="0.0801%" height="15" fill="rgb(214,149,29)" fg:x="27" fg:w="1"/><text x="2.4117%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1617%" y="581" width="0.0801%" height="15" fill="rgb(208,123,3)" fg:x="27" fg:w="1"/><text x="2.4117%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.2418%" y="581" width="0.0801%" height="15" fill="rgb(229,126,4)" fg:x="28" fg:w="1"/><text x="2.4918%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.2418%" y="565" width="0.0801%" height="15" fill="rgb(222,92,36)" fg:x="28" fg:w="1"/><text x="2.4918%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="2.2418%" y="613" width="0.1601%" height="15" fill="rgb(216,39,41)" fg:x="28" fg:w="2"/><text x="2.4918%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="2.2418%" y="597" width="0.1601%" height="15" fill="rgb(253,127,28)" fg:x="28" fg:w="2"/><text x="2.4918%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3219%" y="581" width="0.0801%" height="15" fill="rgb(249,152,51)" fg:x="29" fg:w="1"/><text x="2.5719%" y="591.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.12%)</title><rect x="1.3611%" y="773" width="1.1209%" height="15" fill="rgb(209,123,42)" fg:x="17" fg:w="14"/><text x="1.6111%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (14 samples, 1.12%)</title><rect x="1.3611%" y="757" width="1.1209%" height="15" fill="rgb(241,118,22)" fg:x="17" fg:w="14"/><text x="1.6111%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (13 samples, 1.04%)</title><rect x="1.4412%" y="741" width="1.0408%" height="15" fill="rgb(208,25,7)" fg:x="18" fg:w="13"/><text x="1.6912%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (13 samples, 1.04%)</title><rect x="1.4412%" y="725" width="1.0408%" height="15" fill="rgb(243,144,39)" fg:x="18" fg:w="13"/><text x="1.6912%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="2.0016%" y="709" width="0.4804%" height="15" fill="rgb(250,50,5)" fg:x="25" fg:w="6"/><text x="2.2516%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="2.0016%" y="693" width="0.4804%" height="15" fill="rgb(207,67,11)" fg:x="25" fg:w="6"/><text x="2.2516%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="2.0016%" y="677" width="0.4804%" height="15" fill="rgb(245,204,40)" fg:x="25" fg:w="6"/><text x="2.2516%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="2.0817%" y="661" width="0.4003%" height="15" fill="rgb(238,228,24)" fg:x="26" fg:w="5"/><text x="2.3317%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="2.1617%" y="645" width="0.3203%" height="15" fill="rgb(217,116,22)" fg:x="27" fg:w="4"/><text x="2.4117%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="2.1617%" y="629" width="0.3203%" height="15" fill="rgb(234,98,12)" fg:x="27" fg:w="4"/><text x="2.4117%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4019%" y="613" width="0.0801%" height="15" fill="rgb(242,170,50)" fg:x="30" fg:w="1"/><text x="2.6519%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4019%" y="597" width="0.0801%" height="15" fill="rgb(235,7,5)" fg:x="30" fg:w="1"/><text x="2.6519%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4019%" y="581" width="0.0801%" height="15" fill="rgb(241,114,28)" fg:x="30" fg:w="1"/><text x="2.6519%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4019%" y="565" width="0.0801%" height="15" fill="rgb(246,112,42)" fg:x="30" fg:w="1"/><text x="2.6519%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4019%" y="549" width="0.0801%" height="15" fill="rgb(248,228,14)" fg:x="30" fg:w="1"/><text x="2.6519%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4019%" y="533" width="0.0801%" height="15" fill="rgb(208,133,18)" fg:x="30" fg:w="1"/><text x="2.6519%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4019%" y="517" width="0.0801%" height="15" fill="rgb(207,35,49)" fg:x="30" fg:w="1"/><text x="2.6519%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="2.4820%" y="757" width="0.0801%" height="15" fill="rgb(205,68,36)" fg:x="31" fg:w="1"/><text x="2.7320%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="2.4820%" y="741" width="0.0801%" height="15" fill="rgb(245,62,40)" fg:x="31" fg:w="1"/><text x="2.7320%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="2.4820%" y="725" width="0.0801%" height="15" fill="rgb(228,27,24)" fg:x="31" fg:w="1"/><text x="2.7320%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="2.4820%" y="709" width="0.0801%" height="15" fill="rgb(253,19,12)" fg:x="31" fg:w="1"/><text x="2.7320%" y="719.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="2.4820%" y="693" width="0.0801%" height="15" fill="rgb(232,28,20)" fg:x="31" fg:w="1"/><text x="2.7320%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="2.4820%" y="677" width="0.0801%" height="15" fill="rgb(218,35,51)" fg:x="31" fg:w="1"/><text x="2.7320%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.4820%" y="661" width="0.0801%" height="15" fill="rgb(212,90,40)" fg:x="31" fg:w="1"/><text x="2.7320%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.4820%" y="645" width="0.0801%" height="15" fill="rgb(220,172,12)" fg:x="31" fg:w="1"/><text x="2.7320%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.4820%" y="629" width="0.0801%" height="15" fill="rgb(226,159,20)" fg:x="31" fg:w="1"/><text x="2.7320%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.4820%" y="613" width="0.0801%" height="15" fill="rgb(234,205,16)" fg:x="31" fg:w="1"/><text x="2.7320%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.4820%" y="597" width="0.0801%" height="15" fill="rgb(207,9,39)" fg:x="31" fg:w="1"/><text x="2.7320%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (3 samples, 0.24%)</title><rect x="2.5620%" y="741" width="0.2402%" height="15" fill="rgb(249,143,15)" fg:x="32" fg:w="3"/><text x="2.8120%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="2.6421%" y="725" width="0.1601%" height="15" fill="rgb(253,133,29)" fg:x="33" fg:w="2"/><text x="2.8921%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.6421%" y="709" width="0.1601%" height="15" fill="rgb(221,187,0)" fg:x="33" fg:w="2"/><text x="2.8921%" y="719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7222%" y="693" width="0.0801%" height="15" fill="rgb(205,204,26)" fg:x="34" fg:w="1"/><text x="2.9722%" y="703.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7222%" y="677" width="0.0801%" height="15" fill="rgb(224,68,54)" fg:x="34" fg:w="1"/><text x="2.9722%" y="687.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="2.8022%" y="677" width="0.0801%" height="15" fill="rgb(209,67,4)" fg:x="35" fg:w="1"/><text x="3.0522%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.8022%" y="661" width="0.0801%" height="15" fill="rgb(228,229,18)" fg:x="35" fg:w="1"/><text x="3.0522%" y="671.50"></text></g><g><title>plugins_core::build::Build::holding (6 samples, 0.48%)</title><rect x="2.4820%" y="773" width="0.4804%" height="15" fill="rgb(231,89,13)" fg:x="31" fg:w="6"/><text x="2.7320%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="2.5620%" y="757" width="0.4003%" height="15" fill="rgb(210,182,18)" fg:x="32" fg:w="5"/><text x="2.8120%" y="767.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="2.8022%" y="741" width="0.1601%" height="15" fill="rgb(240,105,2)" fg:x="35" fg:w="2"/><text x="3.0522%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="2.8022%" y="725" width="0.1601%" height="15" fill="rgb(207,170,50)" fg:x="35" fg:w="2"/><text x="3.0522%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="2.8022%" y="709" width="0.1601%" height="15" fill="rgb(232,133,24)" fg:x="35" fg:w="2"/><text x="3.0522%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="2.8022%" y="693" width="0.1601%" height="15" fill="rgb(235,166,27)" fg:x="35" fg:w="2"/><text x="3.0522%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="2.8823%" y="677" width="0.0801%" height="15" fill="rgb(209,19,13)" fg:x="36" fg:w="1"/><text x="3.1323%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.8823%" y="661" width="0.0801%" height="15" fill="rgb(226,79,39)" fg:x="36" fg:w="1"/><text x="3.1323%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8823%" y="645" width="0.0801%" height="15" fill="rgb(222,163,10)" fg:x="36" fg:w="1"/><text x="3.1323%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8823%" y="629" width="0.0801%" height="15" fill="rgb(214,44,19)" fg:x="36" fg:w="1"/><text x="3.1323%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8823%" y="613" width="0.0801%" height="15" fill="rgb(210,217,13)" fg:x="36" fg:w="1"/><text x="3.1323%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8823%" y="597" width="0.0801%" height="15" fill="rgb(237,61,54)" fg:x="36" fg:w="1"/><text x="3.1323%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="2.8823%" y="581" width="0.0801%" height="15" fill="rgb(226,184,24)" fg:x="36" fg:w="1"/><text x="3.1323%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8823%" y="565" width="0.0801%" height="15" fill="rgb(223,226,4)" fg:x="36" fg:w="1"/><text x="3.1323%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.8823%" y="549" width="0.0801%" height="15" fill="rgb(210,26,41)" fg:x="36" fg:w="1"/><text x="3.1323%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.8823%" y="533" width="0.0801%" height="15" fill="rgb(220,221,6)" fg:x="36" fg:w="1"/><text x="3.1323%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.8823%" y="517" width="0.0801%" height="15" fill="rgb(225,89,49)" fg:x="36" fg:w="1"/><text x="3.1323%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.8823%" y="501" width="0.0801%" height="15" fill="rgb(218,70,45)" fg:x="36" fg:w="1"/><text x="3.1323%" y="511.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="2.9624%" y="693" width="0.0801%" height="15" fill="rgb(238,166,21)" fg:x="37" fg:w="1"/><text x="3.2124%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="2.9624%" y="677" width="0.0801%" height="15" fill="rgb(224,141,44)" fg:x="37" fg:w="1"/><text x="3.2124%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.9624%" y="661" width="0.0801%" height="15" fill="rgb(230,12,49)" fg:x="37" fg:w="1"/><text x="3.2124%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.9624%" y="645" width="0.0801%" height="15" fill="rgb(212,174,12)" fg:x="37" fg:w="1"/><text x="3.2124%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="2.9624%" y="629" width="0.0801%" height="15" fill="rgb(246,67,9)" fg:x="37" fg:w="1"/><text x="3.2124%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.9624%" y="613" width="0.0801%" height="15" fill="rgb(239,35,23)" fg:x="37" fg:w="1"/><text x="3.2124%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="2.9624%" y="597" width="0.0801%" height="15" fill="rgb(211,167,0)" fg:x="37" fg:w="1"/><text x="3.2124%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="2.9624%" y="581" width="0.0801%" height="15" fill="rgb(225,119,45)" fg:x="37" fg:w="1"/><text x="3.2124%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="2.9624%" y="773" width="0.2402%" height="15" fill="rgb(210,162,6)" fg:x="37" fg:w="3"/><text x="3.2124%" y="783.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="2.9624%" y="757" width="0.2402%" height="15" fill="rgb(208,118,35)" fg:x="37" fg:w="3"/><text x="3.2124%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="2.9624%" y="741" width="0.2402%" height="15" fill="rgb(239,4,53)" fg:x="37" fg:w="3"/><text x="3.2124%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="2.9624%" y="725" width="0.2402%" height="15" fill="rgb(213,130,21)" fg:x="37" fg:w="3"/><text x="3.2124%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="2.9624%" y="709" width="0.2402%" height="15" fill="rgb(235,148,0)" fg:x="37" fg:w="3"/><text x="3.2124%" y="719.50"></text></g><g><title>kernel::model::scopes::save_props (2 samples, 0.16%)</title><rect x="3.0424%" y="693" width="0.1601%" height="15" fill="rgb(244,224,18)" fg:x="38" fg:w="2"/><text x="3.2924%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (2 samples, 0.16%)</title><rect x="3.0424%" y="677" width="0.1601%" height="15" fill="rgb(211,214,4)" fg:x="38" fg:w="2"/><text x="3.2924%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.0424%" y="661" width="0.1601%" height="15" fill="rgb(206,119,25)" fg:x="38" fg:w="2"/><text x="3.2924%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.0424%" y="645" width="0.1601%" height="15" fill="rgb(243,93,47)" fg:x="38" fg:w="2"/><text x="3.2924%" y="655.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="3.0424%" y="629" width="0.1601%" height="15" fill="rgb(224,194,6)" fg:x="38" fg:w="2"/><text x="3.2924%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2026%" y="645" width="0.0801%" height="15" fill="rgb(243,229,6)" fg:x="40" fg:w="1"/><text x="3.4526%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2026%" y="629" width="0.0801%" height="15" fill="rgb(207,23,50)" fg:x="40" fg:w="1"/><text x="3.4526%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2026%" y="613" width="0.0801%" height="15" fill="rgb(253,192,32)" fg:x="40" fg:w="1"/><text x="3.4526%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.2026%" y="757" width="0.1601%" height="15" fill="rgb(213,21,6)" fg:x="40" fg:w="2"/><text x="3.4526%" y="767.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.2026%" y="741" width="0.1601%" height="15" fill="rgb(243,151,13)" fg:x="40" fg:w="2"/><text x="3.4526%" y="751.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.2026%" y="725" width="0.1601%" height="15" fill="rgb(233,165,41)" fg:x="40" fg:w="2"/><text x="3.4526%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.2026%" y="709" width="0.1601%" height="15" fill="rgb(246,176,45)" fg:x="40" fg:w="2"/><text x="3.4526%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="3.2026%" y="693" width="0.1601%" height="15" fill="rgb(217,170,52)" fg:x="40" fg:w="2"/><text x="3.4526%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="3.2026%" y="677" width="0.1601%" height="15" fill="rgb(214,203,54)" fg:x="40" fg:w="2"/><text x="3.4526%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.2026%" y="661" width="0.1601%" height="15" fill="rgb(248,215,49)" fg:x="40" fg:w="2"/><text x="3.4526%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.2826%" y="645" width="0.0801%" height="15" fill="rgb(208,46,10)" fg:x="41" fg:w="1"/><text x="3.5326%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2826%" y="629" width="0.0801%" height="15" fill="rgb(254,5,31)" fg:x="41" fg:w="1"/><text x="3.5326%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2826%" y="613" width="0.0801%" height="15" fill="rgb(222,104,33)" fg:x="41" fg:w="1"/><text x="3.5326%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.2826%" y="597" width="0.0801%" height="15" fill="rgb(248,49,16)" fg:x="41" fg:w="1"/><text x="3.5326%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.3627%" y="709" width="0.0801%" height="15" fill="rgb(232,198,41)" fg:x="42" fg:w="1"/><text x="3.6127%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.3627%" y="693" width="0.0801%" height="15" fill="rgb(214,125,3)" fg:x="42" fg:w="1"/><text x="3.6127%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.3627%" y="677" width="0.0801%" height="15" fill="rgb(229,220,28)" fg:x="42" fg:w="1"/><text x="3.6127%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.3627%" y="661" width="0.0801%" height="15" fill="rgb(222,64,37)" fg:x="42" fg:w="1"/><text x="3.6127%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.3627%" y="645" width="0.0801%" height="15" fill="rgb(249,184,13)" fg:x="42" fg:w="1"/><text x="3.6127%" y="655.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="3.3627%" y="629" width="0.0801%" height="15" fill="rgb(252,176,6)" fg:x="42" fg:w="1"/><text x="3.6127%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="3.3627%" y="613" width="0.0801%" height="15" fill="rgb(228,153,7)" fg:x="42" fg:w="1"/><text x="3.6127%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3627%" y="597" width="0.0801%" height="15" fill="rgb(242,193,5)" fg:x="42" fg:w="1"/><text x="3.6127%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.3627%" y="581" width="0.0801%" height="15" fill="rgb(232,140,9)" fg:x="42" fg:w="1"/><text x="3.6127%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="565" width="0.0801%" height="15" fill="rgb(213,222,16)" fg:x="42" fg:w="1"/><text x="3.6127%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="549" width="0.0801%" height="15" fill="rgb(222,75,50)" fg:x="42" fg:w="1"/><text x="3.6127%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="533" width="0.0801%" height="15" fill="rgb(205,180,2)" fg:x="42" fg:w="1"/><text x="3.6127%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="517" width="0.0801%" height="15" fill="rgb(216,34,7)" fg:x="42" fg:w="1"/><text x="3.6127%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.3627%" y="501" width="0.0801%" height="15" fill="rgb(253,16,32)" fg:x="42" fg:w="1"/><text x="3.6127%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.4428%" y="597" width="0.0801%" height="15" fill="rgb(208,97,28)" fg:x="43" fg:w="1"/><text x="3.6928%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4428%" y="581" width="0.0801%" height="15" fill="rgb(225,92,11)" fg:x="43" fg:w="1"/><text x="3.6928%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4428%" y="565" width="0.0801%" height="15" fill="rgb(243,38,12)" fg:x="43" fg:w="1"/><text x="3.6928%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.4428%" y="549" width="0.0801%" height="15" fill="rgb(208,139,16)" fg:x="43" fg:w="1"/><text x="3.6928%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="3.3627%" y="757" width="0.2402%" height="15" fill="rgb(227,24,9)" fg:x="42" fg:w="3"/><text x="3.6127%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="3.3627%" y="741" width="0.2402%" height="15" fill="rgb(206,62,11)" fg:x="42" fg:w="3"/><text x="3.6127%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="3.3627%" y="725" width="0.2402%" height="15" fill="rgb(228,134,27)" fg:x="42" fg:w="3"/><text x="3.6127%" y="735.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="3.4428%" y="709" width="0.1601%" height="15" fill="rgb(205,55,33)" fg:x="43" fg:w="2"/><text x="3.6928%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="3.4428%" y="693" width="0.1601%" height="15" fill="rgb(243,75,43)" fg:x="43" fg:w="2"/><text x="3.6928%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.4428%" y="677" width="0.1601%" height="15" fill="rgb(223,27,42)" fg:x="43" fg:w="2"/><text x="3.6928%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.4428%" y="661" width="0.1601%" height="15" fill="rgb(232,189,33)" fg:x="43" fg:w="2"/><text x="3.6928%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="3.4428%" y="645" width="0.1601%" height="15" fill="rgb(210,9,39)" fg:x="43" fg:w="2"/><text x="3.6928%" y="655.50"></text></g><g><title>kernel::model::scopes::save_props (2 samples, 0.16%)</title><rect x="3.4428%" y="629" width="0.1601%" height="15" fill="rgb(242,85,26)" fg:x="43" fg:w="2"/><text x="3.6928%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (2 samples, 0.16%)</title><rect x="3.4428%" y="613" width="0.1601%" height="15" fill="rgb(248,44,4)" fg:x="43" fg:w="2"/><text x="3.6928%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5228%" y="597" width="0.0801%" height="15" fill="rgb(250,96,46)" fg:x="44" fg:w="1"/><text x="3.7728%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5228%" y="581" width="0.0801%" height="15" fill="rgb(229,116,26)" fg:x="44" fg:w="1"/><text x="3.7728%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5228%" y="565" width="0.0801%" height="15" fill="rgb(246,94,34)" fg:x="44" fg:w="1"/><text x="3.7728%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5228%" y="549" width="0.0801%" height="15" fill="rgb(251,73,21)" fg:x="44" fg:w="1"/><text x="3.7728%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5228%" y="533" width="0.0801%" height="15" fill="rgb(254,121,25)" fg:x="44" fg:w="1"/><text x="3.7728%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5228%" y="517" width="0.0801%" height="15" fill="rgb(215,161,49)" fg:x="44" fg:w="1"/><text x="3.7728%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5228%" y="501" width="0.0801%" height="15" fill="rgb(221,43,13)" fg:x="44" fg:w="1"/><text x="3.7728%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.6029%" y="725" width="0.0801%" height="15" fill="rgb(249,5,37)" fg:x="45" fg:w="1"/><text x="3.8529%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.6029%" y="709" width="0.0801%" height="15" fill="rgb(226,25,44)" fg:x="45" fg:w="1"/><text x="3.8529%" y="719.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.6829%" y="725" width="0.0801%" height="15" fill="rgb(238,189,16)" fg:x="46" fg:w="1"/><text x="3.9329%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="3.6829%" y="709" width="0.0801%" height="15" fill="rgb(251,186,8)" fg:x="46" fg:w="1"/><text x="3.9329%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="3.6829%" y="693" width="0.0801%" height="15" fill="rgb(254,34,31)" fg:x="46" fg:w="1"/><text x="3.9329%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6829%" y="677" width="0.0801%" height="15" fill="rgb(225,215,27)" fg:x="46" fg:w="1"/><text x="3.9329%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.6829%" y="661" width="0.0801%" height="15" fill="rgb(221,192,48)" fg:x="46" fg:w="1"/><text x="3.9329%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.6829%" y="645" width="0.0801%" height="15" fill="rgb(219,137,20)" fg:x="46" fg:w="1"/><text x="3.9329%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.6829%" y="629" width="0.0801%" height="15" fill="rgb(219,84,11)" fg:x="46" fg:w="1"/><text x="3.9329%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.6829%" y="613" width="0.0801%" height="15" fill="rgb(224,10,23)" fg:x="46" fg:w="1"/><text x="3.9329%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.6829%" y="597" width="0.0801%" height="15" fill="rgb(248,22,39)" fg:x="46" fg:w="1"/><text x="3.9329%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.6829%" y="581" width="0.0801%" height="15" fill="rgb(212,154,20)" fg:x="46" fg:w="1"/><text x="3.9329%" y="591.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.7630%" y="725" width="0.0801%" height="15" fill="rgb(236,199,50)" fg:x="47" fg:w="1"/><text x="4.0130%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="3.7630%" y="709" width="0.0801%" height="15" fill="rgb(211,9,17)" fg:x="47" fg:w="1"/><text x="4.0130%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.9231%" y="677" width="0.0801%" height="15" fill="rgb(243,216,36)" fg:x="49" fg:w="1"/><text x="4.1731%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.9231%" y="661" width="0.0801%" height="15" fill="rgb(250,2,10)" fg:x="49" fg:w="1"/><text x="4.1731%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.9231%" y="645" width="0.0801%" height="15" fill="rgb(226,50,48)" fg:x="49" fg:w="1"/><text x="4.1731%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.0833%" y="661" width="0.0801%" height="15" fill="rgb(243,81,16)" fg:x="51" fg:w="1"/><text x="4.3333%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.0833%" y="645" width="0.0801%" height="15" fill="rgb(250,14,2)" fg:x="51" fg:w="1"/><text x="4.3333%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.0833%" y="629" width="0.0801%" height="15" fill="rgb(233,135,29)" fg:x="51" fg:w="1"/><text x="4.3333%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0833%" y="613" width="0.0801%" height="15" fill="rgb(224,64,43)" fg:x="51" fg:w="1"/><text x="4.3333%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.0833%" y="597" width="0.0801%" height="15" fill="rgb(238,84,13)" fg:x="51" fg:w="1"/><text x="4.3333%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0833%" y="581" width="0.0801%" height="15" fill="rgb(253,48,26)" fg:x="51" fg:w="1"/><text x="4.3333%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.0833%" y="565" width="0.0801%" height="15" fill="rgb(205,223,31)" fg:x="51" fg:w="1"/><text x="4.3333%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="4.3235%" y="645" width="0.1601%" height="15" fill="rgb(221,41,32)" fg:x="54" fg:w="2"/><text x="4.5735%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.3235%" y="629" width="0.1601%" height="15" fill="rgb(213,158,31)" fg:x="54" fg:w="2"/><text x="4.5735%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4035%" y="613" width="0.0801%" height="15" fill="rgb(245,126,43)" fg:x="55" fg:w="1"/><text x="4.6535%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4035%" y="597" width="0.0801%" height="15" fill="rgb(227,7,22)" fg:x="55" fg:w="1"/><text x="4.6535%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4836%" y="645" width="0.0801%" height="15" fill="rgb(252,90,44)" fg:x="56" fg:w="1"/><text x="4.7336%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4836%" y="629" width="0.0801%" height="15" fill="rgb(253,91,0)" fg:x="56" fg:w="1"/><text x="4.7336%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="4.1633%" y="661" width="0.4804%" height="15" fill="rgb(252,175,49)" fg:x="52" fg:w="6"/><text x="4.4133%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.5637%" y="645" width="0.0801%" height="15" fill="rgb(246,150,1)" fg:x="57" fg:w="1"/><text x="4.8137%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.5637%" y="629" width="0.0801%" height="15" fill="rgb(241,192,25)" fg:x="57" fg:w="1"/><text x="4.8137%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="3.9231%" y="693" width="0.8807%" height="15" fill="rgb(239,187,11)" fg:x="49" fg:w="11"/><text x="4.1731%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="4.0032%" y="677" width="0.8006%" height="15" fill="rgb(218,202,51)" fg:x="50" fg:w="10"/><text x="4.2532%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="4.6437%" y="661" width="0.1601%" height="15" fill="rgb(225,176,8)" fg:x="58" fg:w="2"/><text x="4.8937%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.7238%" y="645" width="0.0801%" height="15" fill="rgb(219,122,41)" fg:x="59" fg:w="1"/><text x="4.9738%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.7238%" y="629" width="0.0801%" height="15" fill="rgb(248,140,20)" fg:x="59" fg:w="1"/><text x="4.9738%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.8038%" y="645" width="0.0801%" height="15" fill="rgb(245,41,37)" fg:x="60" fg:w="1"/><text x="5.0538%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8839%" y="613" width="0.0801%" height="15" fill="rgb(235,82,39)" fg:x="61" fg:w="1"/><text x="5.1339%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.8038%" y="693" width="0.2402%" height="15" fill="rgb(230,108,42)" fg:x="60" fg:w="3"/><text x="5.0538%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="4.8038%" y="677" width="0.2402%" height="15" fill="rgb(215,150,50)" fg:x="60" fg:w="3"/><text x="5.0538%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="4.8038%" y="661" width="0.2402%" height="15" fill="rgb(233,212,5)" fg:x="60" fg:w="3"/><text x="5.0538%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.8839%" y="645" width="0.1601%" height="15" fill="rgb(245,80,22)" fg:x="61" fg:w="2"/><text x="5.1339%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="4.8839%" y="629" width="0.1601%" height="15" fill="rgb(238,129,16)" fg:x="61" fg:w="2"/><text x="5.1339%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.9640%" y="613" width="0.0801%" height="15" fill="rgb(240,19,0)" fg:x="62" fg:w="1"/><text x="5.2140%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.0440%" y="645" width="0.0801%" height="15" fill="rgb(232,42,35)" fg:x="63" fg:w="1"/><text x="5.2940%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.0440%" y="629" width="0.0801%" height="15" fill="rgb(223,130,24)" fg:x="63" fg:w="1"/><text x="5.2940%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="5.0440%" y="613" width="0.0801%" height="15" fill="rgb(237,16,22)" fg:x="63" fg:w="1"/><text x="5.2940%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2842%" y="597" width="0.0801%" height="15" fill="rgb(248,192,20)" fg:x="66" fg:w="1"/><text x="5.5342%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3643%" y="565" width="0.0801%" height="15" fill="rgb(233,167,2)" fg:x="67" fg:w="1"/><text x="5.6143%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.3643%" y="549" width="0.0801%" height="15" fill="rgb(252,71,44)" fg:x="67" fg:w="1"/><text x="5.6143%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="5.6045%" y="485" width="0.0801%" height="15" fill="rgb(238,37,47)" fg:x="70" fg:w="1"/><text x="5.8545%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.6045%" y="469" width="0.0801%" height="15" fill="rgb(214,202,54)" fg:x="70" fg:w="1"/><text x="5.8545%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="5.2842%" y="613" width="0.4804%" height="15" fill="rgb(254,165,40)" fg:x="66" fg:w="6"/><text x="5.5342%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="5.3643%" y="597" width="0.4003%" height="15" fill="rgb(246,173,38)" fg:x="67" fg:w="5"/><text x="5.6143%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="5.3643%" y="581" width="0.4003%" height="15" fill="rgb(215,3,27)" fg:x="67" fg:w="5"/><text x="5.6143%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="5.4444%" y="565" width="0.3203%" height="15" fill="rgb(239,169,51)" fg:x="68" fg:w="4"/><text x="5.6944%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="5.4444%" y="549" width="0.3203%" height="15" fill="rgb(212,5,25)" fg:x="68" fg:w="4"/><text x="5.6944%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="5.4444%" y="533" width="0.3203%" height="15" fill="rgb(243,45,17)" fg:x="68" fg:w="4"/><text x="5.6944%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="5.5244%" y="517" width="0.2402%" height="15" fill="rgb(242,97,9)" fg:x="69" fg:w="3"/><text x="5.7744%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="5.5244%" y="501" width="0.2402%" height="15" fill="rgb(228,71,31)" fg:x="69" fg:w="3"/><text x="5.7744%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="5.6845%" y="485" width="0.0801%" height="15" fill="rgb(252,184,16)" fg:x="71" fg:w="1"/><text x="5.9345%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="5.6845%" y="469" width="0.0801%" height="15" fill="rgb(236,169,46)" fg:x="71" fg:w="1"/><text x="5.9345%" y="479.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (25 samples, 2.00%)</title><rect x="3.8431%" y="725" width="2.0016%" height="15" fill="rgb(207,17,47)" fg:x="48" fg:w="25"/><text x="4.0931%" y="735.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (25 samples, 2.00%)</title><rect x="3.8431%" y="709" width="2.0016%" height="15" fill="rgb(206,201,28)" fg:x="48" fg:w="25"/><text x="4.0931%" y="719.50">e..</text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.80%)</title><rect x="5.0440%" y="693" width="0.8006%" height="15" fill="rgb(224,184,23)" fg:x="63" fg:w="10"/><text x="5.2940%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (10 samples, 0.80%)</title><rect x="5.0440%" y="677" width="0.8006%" height="15" fill="rgb(208,139,48)" fg:x="63" fg:w="10"/><text x="5.2940%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.80%)</title><rect x="5.0440%" y="661" width="0.8006%" height="15" fill="rgb(208,130,10)" fg:x="63" fg:w="10"/><text x="5.2940%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.72%)</title><rect x="5.1241%" y="645" width="0.7206%" height="15" fill="rgb(211,213,45)" fg:x="64" fg:w="9"/><text x="5.3741%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="5.2842%" y="629" width="0.5604%" height="15" fill="rgb(235,100,30)" fg:x="66" fg:w="7"/><text x="5.5342%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.7646%" y="613" width="0.0801%" height="15" fill="rgb(206,144,31)" fg:x="72" fg:w="1"/><text x="6.0146%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7646%" y="597" width="0.0801%" height="15" fill="rgb(224,200,26)" fg:x="72" fg:w="1"/><text x="6.0146%" y="607.50"></text></g><g><title>engine::session::Session::flush (29 samples, 2.32%)</title><rect x="3.6029%" y="757" width="2.3219%" height="15" fill="rgb(247,104,53)" fg:x="45" fg:w="29"/><text x="3.8529%" y="767.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (29 samples, 2.32%)</title><rect x="3.6029%" y="741" width="2.3219%" height="15" fill="rgb(220,14,17)" fg:x="45" fg:w="29"/><text x="3.8529%" y="751.50">e..</text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="5.8447%" y="725" width="0.0801%" height="15" fill="rgb(230,140,40)" fg:x="73" fg:w="1"/><text x="6.0947%" y="735.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="5.8447%" y="709" width="0.0801%" height="15" fill="rgb(229,2,41)" fg:x="73" fg:w="1"/><text x="6.0947%" y="719.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="5.8447%" y="693" width="0.0801%" height="15" fill="rgb(232,89,16)" fg:x="73" fg:w="1"/><text x="6.0947%" y="703.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="5.8447%" y="677" width="0.0801%" height="15" fill="rgb(247,59,52)" fg:x="73" fg:w="1"/><text x="6.0947%" y="687.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="5.8447%" y="661" width="0.0801%" height="15" fill="rgb(226,110,21)" fg:x="73" fg:w="1"/><text x="6.0947%" y="671.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="5.8447%" y="645" width="0.0801%" height="15" fill="rgb(224,176,43)" fg:x="73" fg:w="1"/><text x="6.0947%" y="655.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="5.8447%" y="629" width="0.0801%" height="15" fill="rgb(221,73,6)" fg:x="73" fg:w="1"/><text x="6.0947%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="5.9247%" y="741" width="0.0801%" height="15" fill="rgb(232,78,19)" fg:x="74" fg:w="1"/><text x="6.1747%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.9247%" y="725" width="0.0801%" height="15" fill="rgb(233,112,48)" fg:x="74" fg:w="1"/><text x="6.1747%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.9247%" y="709" width="0.0801%" height="15" fill="rgb(243,131,47)" fg:x="74" fg:w="1"/><text x="6.1747%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.9247%" y="693" width="0.0801%" height="15" fill="rgb(226,51,1)" fg:x="74" fg:w="1"/><text x="6.1747%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="5.9247%" y="677" width="0.0801%" height="15" fill="rgb(247,58,7)" fg:x="74" fg:w="1"/><text x="6.1747%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.9247%" y="661" width="0.0801%" height="15" fill="rgb(209,7,32)" fg:x="74" fg:w="1"/><text x="6.1747%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9247%" y="645" width="0.0801%" height="15" fill="rgb(209,39,41)" fg:x="74" fg:w="1"/><text x="6.1747%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9247%" y="629" width="0.0801%" height="15" fill="rgb(226,182,46)" fg:x="74" fg:w="1"/><text x="6.1747%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9247%" y="613" width="0.0801%" height="15" fill="rgb(230,219,10)" fg:x="74" fg:w="1"/><text x="6.1747%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.9247%" y="597" width="0.0801%" height="15" fill="rgb(227,175,30)" fg:x="74" fg:w="1"/><text x="6.1747%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9247%" y="581" width="0.0801%" height="15" fill="rgb(217,2,50)" fg:x="74" fg:w="1"/><text x="6.1747%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.9247%" y="565" width="0.0801%" height="15" fill="rgb(229,160,0)" fg:x="74" fg:w="1"/><text x="6.1747%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.9247%" y="549" width="0.0801%" height="15" fill="rgb(207,78,37)" fg:x="74" fg:w="1"/><text x="6.1747%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.9247%" y="533" width="0.0801%" height="15" fill="rgb(225,57,0)" fg:x="74" fg:w="1"/><text x="6.1747%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.9247%" y="517" width="0.0801%" height="15" fill="rgb(232,154,2)" fg:x="74" fg:w="1"/><text x="6.1747%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9247%" y="501" width="0.0801%" height="15" fill="rgb(241,212,25)" fg:x="74" fg:w="1"/><text x="6.1747%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.9247%" y="485" width="0.0801%" height="15" fill="rgb(226,69,20)" fg:x="74" fg:w="1"/><text x="6.1747%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.9247%" y="469" width="0.0801%" height="15" fill="rgb(247,184,54)" fg:x="74" fg:w="1"/><text x="6.1747%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.9247%" y="453" width="0.0801%" height="15" fill="rgb(210,145,0)" fg:x="74" fg:w="1"/><text x="6.1747%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.9247%" y="437" width="0.0801%" height="15" fill="rgb(253,82,12)" fg:x="74" fg:w="1"/><text x="6.1747%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.9247%" y="421" width="0.0801%" height="15" fill="rgb(245,42,11)" fg:x="74" fg:w="1"/><text x="6.1747%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.9247%" y="405" width="0.0801%" height="15" fill="rgb(219,147,32)" fg:x="74" fg:w="1"/><text x="6.1747%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (2 samples, 0.16%)</title><rect x="6.0048%" y="725" width="0.1601%" height="15" fill="rgb(246,12,7)" fg:x="75" fg:w="2"/><text x="6.2548%" y="735.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="6.0048%" y="709" width="0.1601%" height="15" fill="rgb(243,50,9)" fg:x="75" fg:w="2"/><text x="6.2548%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="6.0048%" y="693" width="0.1601%" height="15" fill="rgb(219,149,6)" fg:x="75" fg:w="2"/><text x="6.2548%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.0849%" y="677" width="0.0801%" height="15" fill="rgb(241,51,42)" fg:x="76" fg:w="1"/><text x="6.3349%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="6.0849%" y="661" width="0.0801%" height="15" fill="rgb(226,128,27)" fg:x="76" fg:w="1"/><text x="6.3349%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="6.0849%" y="645" width="0.0801%" height="15" fill="rgb(244,144,4)" fg:x="76" fg:w="1"/><text x="6.3349%" y="655.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="6.0849%" y="629" width="0.0801%" height="15" fill="rgb(221,4,13)" fg:x="76" fg:w="1"/><text x="6.3349%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.1649%" y="677" width="0.0801%" height="15" fill="rgb(208,170,28)" fg:x="77" fg:w="1"/><text x="6.4149%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="6.1649%" y="693" width="0.2402%" height="15" fill="rgb(226,131,13)" fg:x="77" fg:w="3"/><text x="6.4149%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="6.2450%" y="677" width="0.1601%" height="15" fill="rgb(215,72,41)" fg:x="78" fg:w="2"/><text x="6.4950%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="6.2450%" y="661" width="0.1601%" height="15" fill="rgb(243,108,20)" fg:x="78" fg:w="2"/><text x="6.4950%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="6.2450%" y="645" width="0.1601%" height="15" fill="rgb(230,189,17)" fg:x="78" fg:w="2"/><text x="6.4950%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="6.2450%" y="629" width="0.1601%" height="15" fill="rgb(220,50,17)" fg:x="78" fg:w="2"/><text x="6.4950%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3251%" y="613" width="0.0801%" height="15" fill="rgb(248,152,48)" fg:x="79" fg:w="1"/><text x="6.5751%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3251%" y="597" width="0.0801%" height="15" fill="rgb(244,91,11)" fg:x="79" fg:w="1"/><text x="6.5751%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.3251%" y="581" width="0.0801%" height="15" fill="rgb(220,157,5)" fg:x="79" fg:w="1"/><text x="6.5751%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3251%" y="565" width="0.0801%" height="15" fill="rgb(253,137,8)" fg:x="79" fg:w="1"/><text x="6.5751%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.3251%" y="549" width="0.0801%" height="15" fill="rgb(217,137,51)" fg:x="79" fg:w="1"/><text x="6.5751%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.3251%" y="533" width="0.0801%" height="15" fill="rgb(218,209,53)" fg:x="79" fg:w="1"/><text x="6.5751%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.3251%" y="517" width="0.0801%" height="15" fill="rgb(249,137,25)" fg:x="79" fg:w="1"/><text x="6.5751%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="6.1649%" y="725" width="0.3203%" height="15" fill="rgb(239,155,26)" fg:x="77" fg:w="4"/><text x="6.4149%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="6.1649%" y="709" width="0.3203%" height="15" fill="rgb(227,85,46)" fg:x="77" fg:w="4"/><text x="6.4149%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.4051%" y="693" width="0.0801%" height="15" fill="rgb(251,107,43)" fg:x="80" fg:w="1"/><text x="6.6551%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.4051%" y="677" width="0.0801%" height="15" fill="rgb(234,170,33)" fg:x="80" fg:w="1"/><text x="6.6551%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.4051%" y="661" width="0.0801%" height="15" fill="rgb(206,29,35)" fg:x="80" fg:w="1"/><text x="6.6551%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.4051%" y="645" width="0.0801%" height="15" fill="rgb(227,138,25)" fg:x="80" fg:w="1"/><text x="6.6551%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.4051%" y="629" width="0.0801%" height="15" fill="rgb(249,131,35)" fg:x="80" fg:w="1"/><text x="6.6551%" y="639.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.64%)</title><rect x="5.9247%" y="757" width="0.6405%" height="15" fill="rgb(239,6,40)" fg:x="74" fg:w="8"/><text x="6.1747%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="6.0048%" y="741" width="0.5604%" height="15" fill="rgb(246,136,47)" fg:x="75" fg:w="7"/><text x="6.2548%" y="751.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="6.4852%" y="725" width="0.0801%" height="15" fill="rgb(253,58,26)" fg:x="81" fg:w="1"/><text x="6.7352%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.4852%" y="709" width="0.0801%" height="15" fill="rgb(237,141,10)" fg:x="81" fg:w="1"/><text x="6.7352%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.4852%" y="693" width="0.0801%" height="15" fill="rgb(234,156,12)" fg:x="81" fg:w="1"/><text x="6.7352%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.4852%" y="677" width="0.0801%" height="15" fill="rgb(243,224,36)" fg:x="81" fg:w="1"/><text x="6.7352%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.4852%" y="661" width="0.0801%" height="15" fill="rgb(205,229,51)" fg:x="81" fg:w="1"/><text x="6.7352%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.4852%" y="645" width="0.0801%" height="15" fill="rgb(223,189,4)" fg:x="81" fg:w="1"/><text x="6.7352%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4852%" y="629" width="0.0801%" height="15" fill="rgb(249,167,54)" fg:x="81" fg:w="1"/><text x="6.7352%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.4852%" y="613" width="0.0801%" height="15" fill="rgb(218,34,28)" fg:x="81" fg:w="1"/><text x="6.7352%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4852%" y="597" width="0.0801%" height="15" fill="rgb(232,109,42)" fg:x="81" fg:w="1"/><text x="6.7352%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.4852%" y="581" width="0.0801%" height="15" fill="rgb(248,214,46)" fg:x="81" fg:w="1"/><text x="6.7352%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4852%" y="565" width="0.0801%" height="15" fill="rgb(244,216,40)" fg:x="81" fg:w="1"/><text x="6.7352%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5653%" y="629" width="0.0801%" height="15" fill="rgb(231,226,31)" fg:x="82" fg:w="1"/><text x="6.8153%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5653%" y="613" width="0.0801%" height="15" fill="rgb(238,38,43)" fg:x="82" fg:w="1"/><text x="6.8153%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5653%" y="597" width="0.0801%" height="15" fill="rgb(208,88,43)" fg:x="82" fg:w="1"/><text x="6.8153%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.5653%" y="581" width="0.0801%" height="15" fill="rgb(205,136,37)" fg:x="82" fg:w="1"/><text x="6.8153%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5653%" y="565" width="0.0801%" height="15" fill="rgb(237,34,14)" fg:x="82" fg:w="1"/><text x="6.8153%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="6.5653%" y="645" width="0.1601%" height="15" fill="rgb(236,193,44)" fg:x="82" fg:w="2"/><text x="6.8153%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.6453%" y="629" width="0.0801%" height="15" fill="rgb(231,48,10)" fg:x="83" fg:w="1"/><text x="6.8953%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.6453%" y="613" width="0.0801%" height="15" fill="rgb(213,141,34)" fg:x="83" fg:w="1"/><text x="6.8953%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6453%" y="597" width="0.0801%" height="15" fill="rgb(249,130,34)" fg:x="83" fg:w="1"/><text x="6.8953%" y="607.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="6.5653%" y="757" width="0.2402%" height="15" fill="rgb(219,42,41)" fg:x="82" fg:w="3"/><text x="6.8153%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="6.5653%" y="741" width="0.2402%" height="15" fill="rgb(224,100,54)" fg:x="82" fg:w="3"/><text x="6.8153%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="6.5653%" y="725" width="0.2402%" height="15" fill="rgb(229,200,27)" fg:x="82" fg:w="3"/><text x="6.8153%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="6.5653%" y="709" width="0.2402%" height="15" fill="rgb(217,118,10)" fg:x="82" fg:w="3"/><text x="6.8153%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="6.5653%" y="693" width="0.2402%" height="15" fill="rgb(206,22,3)" fg:x="82" fg:w="3"/><text x="6.8153%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="6.5653%" y="677" width="0.2402%" height="15" fill="rgb(232,163,46)" fg:x="82" fg:w="3"/><text x="6.8153%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="6.5653%" y="661" width="0.2402%" height="15" fill="rgb(206,95,13)" fg:x="82" fg:w="3"/><text x="6.8153%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7254%" y="645" width="0.0801%" height="15" fill="rgb(253,154,18)" fg:x="84" fg:w="1"/><text x="6.9754%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7254%" y="629" width="0.0801%" height="15" fill="rgb(219,32,23)" fg:x="84" fg:w="1"/><text x="6.9754%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="6.7254%" y="613" width="0.0801%" height="15" fill="rgb(230,191,45)" fg:x="84" fg:w="1"/><text x="6.9754%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7254%" y="597" width="0.0801%" height="15" fill="rgb(229,64,36)" fg:x="84" fg:w="1"/><text x="6.9754%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.7254%" y="581" width="0.0801%" height="15" fill="rgb(205,129,25)" fg:x="84" fg:w="1"/><text x="6.9754%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.7254%" y="565" width="0.0801%" height="15" fill="rgb(254,112,7)" fg:x="84" fg:w="1"/><text x="6.9754%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="6.7254%" y="549" width="0.0801%" height="15" fill="rgb(226,53,48)" fg:x="84" fg:w="1"/><text x="6.9754%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.7254%" y="533" width="0.0801%" height="15" fill="rgb(214,153,38)" fg:x="84" fg:w="1"/><text x="6.9754%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.7254%" y="517" width="0.0801%" height="15" fill="rgb(243,101,7)" fg:x="84" fg:w="1"/><text x="6.9754%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="6.8054%" y="693" width="0.0801%" height="15" fill="rgb(240,140,22)" fg:x="85" fg:w="1"/><text x="7.0554%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.8054%" y="677" width="0.0801%" height="15" fill="rgb(235,114,2)" fg:x="85" fg:w="1"/><text x="7.0554%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.8054%" y="661" width="0.0801%" height="15" fill="rgb(242,59,12)" fg:x="85" fg:w="1"/><text x="7.0554%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.8054%" y="645" width="0.0801%" height="15" fill="rgb(252,134,9)" fg:x="85" fg:w="1"/><text x="7.0554%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8054%" y="629" width="0.0801%" height="15" fill="rgb(236,4,44)" fg:x="85" fg:w="1"/><text x="7.0554%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8054%" y="613" width="0.0801%" height="15" fill="rgb(254,172,41)" fg:x="85" fg:w="1"/><text x="7.0554%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8054%" y="597" width="0.0801%" height="15" fill="rgb(244,63,20)" fg:x="85" fg:w="1"/><text x="7.0554%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8054%" y="581" width="0.0801%" height="15" fill="rgb(250,73,31)" fg:x="85" fg:w="1"/><text x="7.0554%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.8054%" y="565" width="0.0801%" height="15" fill="rgb(241,38,36)" fg:x="85" fg:w="1"/><text x="7.0554%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="6.8054%" y="741" width="0.1601%" height="15" fill="rgb(245,211,2)" fg:x="85" fg:w="2"/><text x="7.0554%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="6.8054%" y="725" width="0.1601%" height="15" fill="rgb(206,120,28)" fg:x="85" fg:w="2"/><text x="7.0554%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="6.8054%" y="709" width="0.1601%" height="15" fill="rgb(211,59,34)" fg:x="85" fg:w="2"/><text x="7.0554%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="6.8855%" y="693" width="0.0801%" height="15" fill="rgb(233,168,5)" fg:x="86" fg:w="1"/><text x="7.1355%" y="703.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="6.8855%" y="677" width="0.0801%" height="15" fill="rgb(234,33,13)" fg:x="86" fg:w="1"/><text x="7.1355%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="6.8855%" y="661" width="0.0801%" height="15" fill="rgb(231,150,26)" fg:x="86" fg:w="1"/><text x="7.1355%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="6.8855%" y="645" width="0.0801%" height="15" fill="rgb(217,191,4)" fg:x="86" fg:w="1"/><text x="7.1355%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.8855%" y="629" width="0.0801%" height="15" fill="rgb(246,198,38)" fg:x="86" fg:w="1"/><text x="7.1355%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.8855%" y="613" width="0.0801%" height="15" fill="rgb(245,64,37)" fg:x="86" fg:w="1"/><text x="7.1355%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="6.9656%" y="725" width="0.0801%" height="15" fill="rgb(250,30,36)" fg:x="87" fg:w="1"/><text x="7.2156%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="6.9656%" y="709" width="0.0801%" height="15" fill="rgb(217,86,53)" fg:x="87" fg:w="1"/><text x="7.2156%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="6.9656%" y="693" width="0.0801%" height="15" fill="rgb(228,157,16)" fg:x="87" fg:w="1"/><text x="7.2156%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="6.9656%" y="677" width="0.0801%" height="15" fill="rgb(217,59,31)" fg:x="87" fg:w="1"/><text x="7.2156%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="6.9656%" y="661" width="0.0801%" height="15" fill="rgb(237,138,41)" fg:x="87" fg:w="1"/><text x="7.2156%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="6.9656%" y="645" width="0.0801%" height="15" fill="rgb(227,91,49)" fg:x="87" fg:w="1"/><text x="7.2156%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9656%" y="629" width="0.0801%" height="15" fill="rgb(247,21,44)" fg:x="87" fg:w="1"/><text x="7.2156%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9656%" y="613" width="0.0801%" height="15" fill="rgb(219,210,51)" fg:x="87" fg:w="1"/><text x="7.2156%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9656%" y="597" width="0.0801%" height="15" fill="rgb(209,140,6)" fg:x="87" fg:w="1"/><text x="7.2156%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="6.9656%" y="581" width="0.0801%" height="15" fill="rgb(221,188,24)" fg:x="87" fg:w="1"/><text x="7.2156%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.0456%" y="565" width="0.0801%" height="15" fill="rgb(232,154,20)" fg:x="88" fg:w="1"/><text x="7.2956%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.0456%" y="549" width="0.0801%" height="15" fill="rgb(244,137,50)" fg:x="88" fg:w="1"/><text x="7.2956%" y="559.50"></text></g><g><title>plugins_core::build::Build::occupying (5 samples, 0.40%)</title><rect x="6.8054%" y="757" width="0.4003%" height="15" fill="rgb(225,185,43)" fg:x="85" fg:w="5"/><text x="7.0554%" y="767.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="6.9656%" y="741" width="0.2402%" height="15" fill="rgb(213,205,38)" fg:x="87" fg:w="3"/><text x="7.2156%" y="751.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="7.0456%" y="725" width="0.1601%" height="15" fill="rgb(236,73,12)" fg:x="88" fg:w="2"/><text x="7.2956%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="7.0456%" y="709" width="0.1601%" height="15" fill="rgb(235,219,13)" fg:x="88" fg:w="2"/><text x="7.2956%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="7.0456%" y="693" width="0.1601%" height="15" fill="rgb(218,59,36)" fg:x="88" fg:w="2"/><text x="7.2956%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.0456%" y="677" width="0.1601%" height="15" fill="rgb(205,110,39)" fg:x="88" fg:w="2"/><text x="7.2956%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="7.0456%" y="661" width="0.1601%" height="15" fill="rgb(218,206,42)" fg:x="88" fg:w="2"/><text x="7.2956%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="7.0456%" y="645" width="0.1601%" height="15" fill="rgb(248,125,24)" fg:x="88" fg:w="2"/><text x="7.2956%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (2 samples, 0.16%)</title><rect x="7.0456%" y="629" width="0.1601%" height="15" fill="rgb(242,28,27)" fg:x="88" fg:w="2"/><text x="7.2956%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.0456%" y="613" width="0.1601%" height="15" fill="rgb(216,228,15)" fg:x="88" fg:w="2"/><text x="7.2956%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="7.0456%" y="597" width="0.1601%" height="15" fill="rgb(235,116,46)" fg:x="88" fg:w="2"/><text x="7.2956%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="7.0456%" y="581" width="0.1601%" height="15" fill="rgb(224,18,32)" fg:x="88" fg:w="2"/><text x="7.2956%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.1257%" y="565" width="0.0801%" height="15" fill="rgb(252,5,12)" fg:x="89" fg:w="1"/><text x="7.3757%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.1257%" y="549" width="0.0801%" height="15" fill="rgb(251,36,5)" fg:x="89" fg:w="1"/><text x="7.3757%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1257%" y="533" width="0.0801%" height="15" fill="rgb(217,53,14)" fg:x="89" fg:w="1"/><text x="7.3757%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (51 samples, 4.08%)</title><rect x="3.2026%" y="773" width="4.0833%" height="15" fill="rgb(215,86,45)" fg:x="40" fg:w="51"/><text x="3.4526%" y="783.50">plug..</text></g><g><title>plugins_core::build::Build::with_username (1 samples, 0.08%)</title><rect x="7.2058%" y="757" width="0.0801%" height="15" fill="rgb(242,169,11)" fg:x="90" fg:w="1"/><text x="7.4558%" y="767.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="7.2058%" y="741" width="0.0801%" height="15" fill="rgb(211,213,45)" fg:x="90" fg:w="1"/><text x="7.4558%" y="751.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="7.2058%" y="725" width="0.0801%" height="15" fill="rgb(205,88,11)" fg:x="90" fg:w="1"/><text x="7.4558%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="7.2058%" y="709" width="0.0801%" height="15" fill="rgb(252,69,26)" fg:x="90" fg:w="1"/><text x="7.4558%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="7.2058%" y="693" width="0.0801%" height="15" fill="rgb(246,123,37)" fg:x="90" fg:w="1"/><text x="7.4558%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.2058%" y="677" width="0.0801%" height="15" fill="rgb(212,205,5)" fg:x="90" fg:w="1"/><text x="7.4558%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.2058%" y="661" width="0.0801%" height="15" fill="rgb(253,148,0)" fg:x="90" fg:w="1"/><text x="7.4558%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2858%" y="693" width="0.0801%" height="15" fill="rgb(239,22,4)" fg:x="91" fg:w="1"/><text x="7.5358%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2858%" y="677" width="0.0801%" height="15" fill="rgb(226,26,53)" fg:x="91" fg:w="1"/><text x="7.5358%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.2858%" y="661" width="0.0801%" height="15" fill="rgb(225,229,45)" fg:x="91" fg:w="1"/><text x="7.5358%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.2858%" y="645" width="0.0801%" height="15" fill="rgb(220,60,37)" fg:x="91" fg:w="1"/><text x="7.5358%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.2858%" y="629" width="0.0801%" height="15" fill="rgb(217,180,35)" fg:x="91" fg:w="1"/><text x="7.5358%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.2858%" y="613" width="0.0801%" height="15" fill="rgb(229,7,53)" fg:x="91" fg:w="1"/><text x="7.5358%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.2858%" y="597" width="0.0801%" height="15" fill="rgb(254,137,3)" fg:x="91" fg:w="1"/><text x="7.5358%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.2858%" y="581" width="0.0801%" height="15" fill="rgb(215,140,41)" fg:x="91" fg:w="1"/><text x="7.5358%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.2858%" y="565" width="0.0801%" height="15" fill="rgb(250,80,15)" fg:x="91" fg:w="1"/><text x="7.5358%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.2858%" y="549" width="0.0801%" height="15" fill="rgb(252,191,6)" fg:x="91" fg:w="1"/><text x="7.5358%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.2858%" y="533" width="0.0801%" height="15" fill="rgb(246,217,18)" fg:x="91" fg:w="1"/><text x="7.5358%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2858%" y="517" width="0.0801%" height="15" fill="rgb(223,93,7)" fg:x="91" fg:w="1"/><text x="7.5358%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="7.2858%" y="725" width="0.1601%" height="15" fill="rgb(225,55,52)" fg:x="91" fg:w="2"/><text x="7.5358%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="7.2858%" y="709" width="0.1601%" height="15" fill="rgb(240,31,24)" fg:x="91" fg:w="2"/><text x="7.5358%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="7.3659%" y="693" width="0.0801%" height="15" fill="rgb(205,56,52)" fg:x="92" fg:w="1"/><text x="7.6159%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="7.3659%" y="677" width="0.0801%" height="15" fill="rgb(246,146,12)" fg:x="92" fg:w="1"/><text x="7.6159%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.3659%" y="661" width="0.0801%" height="15" fill="rgb(239,84,36)" fg:x="92" fg:w="1"/><text x="7.6159%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.3659%" y="645" width="0.0801%" height="15" fill="rgb(207,41,40)" fg:x="92" fg:w="1"/><text x="7.6159%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="7.3659%" y="629" width="0.0801%" height="15" fill="rgb(241,179,25)" fg:x="92" fg:w="1"/><text x="7.6159%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.3659%" y="613" width="0.0801%" height="15" fill="rgb(210,0,34)" fg:x="92" fg:w="1"/><text x="7.6159%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.3659%" y="597" width="0.0801%" height="15" fill="rgb(225,217,29)" fg:x="92" fg:w="1"/><text x="7.6159%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.3659%" y="581" width="0.0801%" height="15" fill="rgb(216,191,38)" fg:x="92" fg:w="1"/><text x="7.6159%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.3659%" y="565" width="0.0801%" height="15" fill="rgb(232,140,52)" fg:x="92" fg:w="1"/><text x="7.6159%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.3659%" y="549" width="0.0801%" height="15" fill="rgb(223,158,51)" fg:x="92" fg:w="1"/><text x="7.6159%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.3659%" y="533" width="0.0801%" height="15" fill="rgb(235,29,51)" fg:x="92" fg:w="1"/><text x="7.6159%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.3659%" y="517" width="0.0801%" height="15" fill="rgb(215,181,18)" fg:x="92" fg:w="1"/><text x="7.6159%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.3659%" y="501" width="0.0801%" height="15" fill="rgb(227,125,34)" fg:x="92" fg:w="1"/><text x="7.6159%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.3659%" y="485" width="0.0801%" height="15" fill="rgb(230,197,49)" fg:x="92" fg:w="1"/><text x="7.6159%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.3659%" y="469" width="0.0801%" height="15" fill="rgb(239,141,16)" fg:x="92" fg:w="1"/><text x="7.6159%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.3659%" y="453" width="0.0801%" height="15" fill="rgb(225,105,43)" fg:x="92" fg:w="1"/><text x="7.6159%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="7.3659%" y="437" width="0.0801%" height="15" fill="rgb(214,131,14)" fg:x="92" fg:w="1"/><text x="7.6159%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.3659%" y="421" width="0.0801%" height="15" fill="rgb(229,177,11)" fg:x="92" fg:w="1"/><text x="7.6159%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="7.3659%" y="405" width="0.0801%" height="15" fill="rgb(231,180,14)" fg:x="92" fg:w="1"/><text x="7.6159%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.4460%" y="709" width="0.0801%" height="15" fill="rgb(232,88,2)" fg:x="93" fg:w="1"/><text x="7.6960%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.4460%" y="693" width="0.0801%" height="15" fill="rgb(205,220,8)" fg:x="93" fg:w="1"/><text x="7.6960%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.4460%" y="677" width="0.0801%" height="15" fill="rgb(225,23,53)" fg:x="93" fg:w="1"/><text x="7.6960%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.4460%" y="661" width="0.0801%" height="15" fill="rgb(213,62,29)" fg:x="93" fg:w="1"/><text x="7.6960%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.4460%" y="645" width="0.0801%" height="15" fill="rgb(227,75,7)" fg:x="93" fg:w="1"/><text x="7.6960%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.4460%" y="629" width="0.0801%" height="15" fill="rgb(207,105,14)" fg:x="93" fg:w="1"/><text x="7.6960%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="7.4460%" y="613" width="0.0801%" height="15" fill="rgb(245,62,29)" fg:x="93" fg:w="1"/><text x="7.6960%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="7.4460%" y="597" width="0.0801%" height="15" fill="rgb(236,202,4)" fg:x="93" fg:w="1"/><text x="7.6960%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (78 samples, 6.24%)</title><rect x="1.3611%" y="789" width="6.2450%" height="15" fill="rgb(250,67,1)" fg:x="17" fg:w="78"/><text x="1.6111%" y="799.50">&lt;tests::..</text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.32%)</title><rect x="7.2858%" y="773" width="0.3203%" height="15" fill="rgb(253,115,44)" fg:x="91" fg:w="4"/><text x="7.5358%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="7.2858%" y="757" width="0.3203%" height="15" fill="rgb(251,139,18)" fg:x="91" fg:w="4"/><text x="7.5358%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="7.2858%" y="741" width="0.3203%" height="15" fill="rgb(218,22,32)" fg:x="91" fg:w="4"/><text x="7.5358%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.4460%" y="725" width="0.1601%" height="15" fill="rgb(243,53,5)" fg:x="93" fg:w="2"/><text x="7.6960%" y="735.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="7.5260%" y="709" width="0.0801%" height="15" fill="rgb(227,56,16)" fg:x="94" fg:w="1"/><text x="7.7760%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="7.6061%" y="757" width="0.0801%" height="15" fill="rgb(245,53,0)" fg:x="95" fg:w="1"/><text x="7.8561%" y="767.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6861%" y="709" width="0.0801%" height="15" fill="rgb(216,170,35)" fg:x="96" fg:w="1"/><text x="7.9361%" y="719.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="7.6861%" y="757" width="0.1601%" height="15" fill="rgb(211,200,8)" fg:x="96" fg:w="2"/><text x="7.9361%" y="767.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="7.6861%" y="741" width="0.1601%" height="15" fill="rgb(228,204,44)" fg:x="96" fg:w="2"/><text x="7.9361%" y="751.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="7.6861%" y="725" width="0.1601%" height="15" fill="rgb(214,121,17)" fg:x="96" fg:w="2"/><text x="7.9361%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.7662%" y="709" width="0.0801%" height="15" fill="rgb(233,64,38)" fg:x="97" fg:w="1"/><text x="8.0162%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.7662%" y="693" width="0.0801%" height="15" fill="rgb(253,54,19)" fg:x="97" fg:w="1"/><text x="8.0162%" y="703.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.7662%" y="677" width="0.0801%" height="15" fill="rgb(253,94,18)" fg:x="97" fg:w="1"/><text x="8.0162%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="7.8463%" y="693" width="0.1601%" height="15" fill="rgb(227,57,52)" fg:x="98" fg:w="2"/><text x="8.0963%" y="703.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="7.8463%" y="677" width="0.1601%" height="15" fill="rgb(230,228,50)" fg:x="98" fg:w="2"/><text x="8.0963%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="7.8463%" y="661" width="0.1601%" height="15" fill="rgb(217,205,27)" fg:x="98" fg:w="2"/><text x="8.0963%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="7.8463%" y="645" width="0.1601%" height="15" fill="rgb(252,71,50)" fg:x="98" fg:w="2"/><text x="8.0963%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.9263%" y="629" width="0.0801%" height="15" fill="rgb(209,86,4)" fg:x="99" fg:w="1"/><text x="8.1763%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.9263%" y="613" width="0.0801%" height="15" fill="rgb(229,94,0)" fg:x="99" fg:w="1"/><text x="8.1763%" y="623.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="7.9263%" y="597" width="0.0801%" height="15" fill="rgb(252,223,21)" fg:x="99" fg:w="1"/><text x="8.1763%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0064%" y="661" width="0.0801%" height="15" fill="rgb(230,210,4)" fg:x="100" fg:w="1"/><text x="8.2564%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="7.8463%" y="709" width="0.3203%" height="15" fill="rgb(240,149,38)" fg:x="98" fg:w="4"/><text x="8.0963%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0064%" y="693" width="0.1601%" height="15" fill="rgb(254,105,20)" fg:x="100" fg:w="2"/><text x="8.2564%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="8.0064%" y="677" width="0.1601%" height="15" fill="rgb(253,87,46)" fg:x="100" fg:w="2"/><text x="8.2564%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0865%" y="661" width="0.0801%" height="15" fill="rgb(253,116,33)" fg:x="101" fg:w="1"/><text x="8.3365%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0865%" y="645" width="0.0801%" height="15" fill="rgb(229,198,5)" fg:x="101" fg:w="1"/><text x="8.3365%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="8.0865%" y="629" width="0.0801%" height="15" fill="rgb(242,38,37)" fg:x="101" fg:w="1"/><text x="8.3365%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="7.8463%" y="725" width="0.4003%" height="15" fill="rgb(242,69,53)" fg:x="98" fg:w="5"/><text x="8.0963%" y="735.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="8.1665%" y="709" width="0.0801%" height="15" fill="rgb(249,80,16)" fg:x="102" fg:w="1"/><text x="8.4165%" y="719.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="8.1665%" y="693" width="0.0801%" height="15" fill="rgb(206,128,11)" fg:x="102" fg:w="1"/><text x="8.4165%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="8.1665%" y="677" width="0.0801%" height="15" fill="rgb(212,35,20)" fg:x="102" fg:w="1"/><text x="8.4165%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2466%" y="661" width="0.0801%" height="15" fill="rgb(236,79,13)" fg:x="103" fg:w="1"/><text x="8.4966%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2466%" y="725" width="0.1601%" height="15" fill="rgb(233,123,3)" fg:x="103" fg:w="2"/><text x="8.4966%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="8.2466%" y="709" width="0.1601%" height="15" fill="rgb(214,93,52)" fg:x="103" fg:w="2"/><text x="8.4966%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2466%" y="693" width="0.1601%" height="15" fill="rgb(251,37,40)" fg:x="103" fg:w="2"/><text x="8.4966%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.2466%" y="677" width="0.1601%" height="15" fill="rgb(227,80,54)" fg:x="103" fg:w="2"/><text x="8.4966%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.3267%" y="661" width="0.0801%" height="15" fill="rgb(254,48,11)" fg:x="104" fg:w="1"/><text x="8.5767%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.3267%" y="645" width="0.0801%" height="15" fill="rgb(235,193,26)" fg:x="104" fg:w="1"/><text x="8.5767%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4067%" y="661" width="0.0801%" height="15" fill="rgb(229,99,21)" fg:x="105" fg:w="1"/><text x="8.6567%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.4868%" y="661" width="0.0801%" height="15" fill="rgb(211,140,41)" fg:x="106" fg:w="1"/><text x="8.7368%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4868%" y="645" width="0.0801%" height="15" fill="rgb(240,227,30)" fg:x="106" fg:w="1"/><text x="8.7368%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5669%" y="645" width="0.0801%" height="15" fill="rgb(215,224,45)" fg:x="107" fg:w="1"/><text x="8.8169%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6469%" y="613" width="0.0801%" height="15" fill="rgb(206,123,31)" fg:x="108" fg:w="1"/><text x="8.8969%" y="623.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="8.4067%" y="709" width="0.4003%" height="15" fill="rgb(210,138,16)" fg:x="105" fg:w="5"/><text x="8.6567%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="8.4067%" y="693" width="0.4003%" height="15" fill="rgb(228,57,28)" fg:x="105" fg:w="5"/><text x="8.6567%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="8.4067%" y="677" width="0.4003%" height="15" fill="rgb(242,170,10)" fg:x="105" fg:w="5"/><text x="8.6567%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="8.5669%" y="661" width="0.2402%" height="15" fill="rgb(228,214,39)" fg:x="107" fg:w="3"/><text x="8.8169%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.6469%" y="645" width="0.1601%" height="15" fill="rgb(218,179,33)" fg:x="108" fg:w="2"/><text x="8.8969%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="8.6469%" y="629" width="0.1601%" height="15" fill="rgb(235,193,39)" fg:x="108" fg:w="2"/><text x="8.8969%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7270%" y="613" width="0.0801%" height="15" fill="rgb(219,221,36)" fg:x="109" fg:w="1"/><text x="8.9770%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7270%" y="597" width="0.0801%" height="15" fill="rgb(248,218,19)" fg:x="109" fg:w="1"/><text x="8.9770%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.7270%" y="581" width="0.0801%" height="15" fill="rgb(205,50,9)" fg:x="109" fg:w="1"/><text x="8.9770%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.7270%" y="565" width="0.0801%" height="15" fill="rgb(238,81,28)" fg:x="109" fg:w="1"/><text x="8.9770%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.7270%" y="549" width="0.0801%" height="15" fill="rgb(235,110,19)" fg:x="109" fg:w="1"/><text x="8.9770%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8871%" y="677" width="0.0801%" height="15" fill="rgb(214,7,14)" fg:x="111" fg:w="1"/><text x="9.1371%" y="687.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.8871%" y="661" width="0.0801%" height="15" fill="rgb(211,77,3)" fg:x="111" fg:w="1"/><text x="9.1371%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9672%" y="629" width="0.0801%" height="15" fill="rgb(229,5,9)" fg:x="112" fg:w="1"/><text x="9.2172%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.9672%" y="613" width="0.0801%" height="15" fill="rgb(225,90,11)" fg:x="112" fg:w="1"/><text x="9.2172%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9672%" y="597" width="0.0801%" height="15" fill="rgb(242,56,8)" fg:x="112" fg:w="1"/><text x="9.2172%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.0472%" y="629" width="0.0801%" height="15" fill="rgb(249,212,39)" fg:x="113" fg:w="1"/><text x="9.2972%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.0472%" y="613" width="0.0801%" height="15" fill="rgb(236,90,9)" fg:x="113" fg:w="1"/><text x="9.2972%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.0472%" y="597" width="0.0801%" height="15" fill="rgb(206,88,35)" fg:x="113" fg:w="1"/><text x="9.2972%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0472%" y="581" width="0.0801%" height="15" fill="rgb(205,126,30)" fg:x="113" fg:w="1"/><text x="9.2972%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.0472%" y="565" width="0.0801%" height="15" fill="rgb(230,176,12)" fg:x="113" fg:w="1"/><text x="9.2972%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2074%" y="533" width="0.0801%" height="15" fill="rgb(243,19,9)" fg:x="115" fg:w="1"/><text x="9.4574%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="8.9672%" y="645" width="0.4003%" height="15" fill="rgb(245,171,17)" fg:x="112" fg:w="5"/><text x="9.2172%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.1273%" y="629" width="0.2402%" height="15" fill="rgb(227,52,21)" fg:x="114" fg:w="3"/><text x="9.3773%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="9.1273%" y="613" width="0.2402%" height="15" fill="rgb(238,69,14)" fg:x="114" fg:w="3"/><text x="9.3773%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.1273%" y="597" width="0.2402%" height="15" fill="rgb(241,156,39)" fg:x="114" fg:w="3"/><text x="9.3773%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="9.1273%" y="581" width="0.2402%" height="15" fill="rgb(212,227,28)" fg:x="114" fg:w="3"/><text x="9.3773%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="9.1273%" y="565" width="0.2402%" height="15" fill="rgb(209,118,27)" fg:x="114" fg:w="3"/><text x="9.3773%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="9.2074%" y="549" width="0.1601%" height="15" fill="rgb(226,102,5)" fg:x="115" fg:w="2"/><text x="9.4574%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.2874%" y="533" width="0.0801%" height="15" fill="rgb(223,34,3)" fg:x="116" fg:w="1"/><text x="9.5374%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.2874%" y="517" width="0.0801%" height="15" fill="rgb(221,81,38)" fg:x="116" fg:w="1"/><text x="9.5374%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2874%" y="501" width="0.0801%" height="15" fill="rgb(236,219,28)" fg:x="116" fg:w="1"/><text x="9.5374%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2874%" y="485" width="0.0801%" height="15" fill="rgb(213,200,14)" fg:x="116" fg:w="1"/><text x="9.5374%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2874%" y="469" width="0.0801%" height="15" fill="rgb(240,33,19)" fg:x="116" fg:w="1"/><text x="9.5374%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="8.8070%" y="709" width="0.6405%" height="15" fill="rgb(233,113,27)" fg:x="110" fg:w="8"/><text x="9.0570%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="8.8070%" y="693" width="0.6405%" height="15" fill="rgb(220,221,18)" fg:x="110" fg:w="8"/><text x="9.0570%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="8.9672%" y="677" width="0.4804%" height="15" fill="rgb(238,92,8)" fg:x="112" fg:w="6"/><text x="9.2172%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="8.9672%" y="661" width="0.4804%" height="15" fill="rgb(222,164,16)" fg:x="112" fg:w="6"/><text x="9.2172%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.3675%" y="645" width="0.0801%" height="15" fill="rgb(241,119,3)" fg:x="117" fg:w="1"/><text x="9.6175%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3675%" y="629" width="0.0801%" height="15" fill="rgb(241,44,8)" fg:x="117" fg:w="1"/><text x="9.6175%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.4476%" y="565" width="0.0801%" height="15" fill="rgb(230,36,40)" fg:x="118" fg:w="1"/><text x="9.6976%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.4476%" y="549" width="0.0801%" height="15" fill="rgb(243,16,36)" fg:x="118" fg:w="1"/><text x="9.6976%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4476%" y="533" width="0.0801%" height="15" fill="rgb(231,4,26)" fg:x="118" fg:w="1"/><text x="9.6976%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.5276%" y="549" width="0.0801%" height="15" fill="rgb(240,9,31)" fg:x="119" fg:w="1"/><text x="9.7776%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.5276%" y="533" width="0.0801%" height="15" fill="rgb(207,173,15)" fg:x="119" fg:w="1"/><text x="9.7776%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="9.5276%" y="517" width="0.0801%" height="15" fill="rgb(224,192,53)" fg:x="119" fg:w="1"/><text x="9.7776%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="9.5276%" y="501" width="0.0801%" height="15" fill="rgb(223,67,28)" fg:x="119" fg:w="1"/><text x="9.7776%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.5276%" y="485" width="0.0801%" height="15" fill="rgb(211,20,47)" fg:x="119" fg:w="1"/><text x="9.7776%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="9.4476%" y="581" width="0.2402%" height="15" fill="rgb(240,228,2)" fg:x="118" fg:w="3"/><text x="9.6976%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="9.5276%" y="565" width="0.1601%" height="15" fill="rgb(248,151,12)" fg:x="119" fg:w="2"/><text x="9.7776%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6077%" y="549" width="0.0801%" height="15" fill="rgb(244,8,39)" fg:x="120" fg:w="1"/><text x="9.8577%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6077%" y="533" width="0.0801%" height="15" fill="rgb(222,26,8)" fg:x="120" fg:w="1"/><text x="9.8577%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6077%" y="517" width="0.0801%" height="15" fill="rgb(213,106,44)" fg:x="120" fg:w="1"/><text x="9.8577%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="9.4476%" y="613" width="0.3203%" height="15" fill="rgb(214,129,20)" fg:x="118" fg:w="4"/><text x="9.6976%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="9.4476%" y="597" width="0.3203%" height="15" fill="rgb(212,32,13)" fg:x="118" fg:w="4"/><text x="9.6976%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6878%" y="581" width="0.0801%" height="15" fill="rgb(208,168,33)" fg:x="121" fg:w="1"/><text x="9.9378%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.6878%" y="565" width="0.0801%" height="15" fill="rgb(231,207,8)" fg:x="121" fg:w="1"/><text x="9.9378%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.6878%" y="549" width="0.0801%" height="15" fill="rgb(235,219,23)" fg:x="121" fg:w="1"/><text x="9.9378%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="9.4476%" y="645" width="0.4003%" height="15" fill="rgb(226,216,26)" fg:x="118" fg:w="5"/><text x="9.6976%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="9.4476%" y="629" width="0.4003%" height="15" fill="rgb(239,137,16)" fg:x="118" fg:w="5"/><text x="9.6976%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7678%" y="613" width="0.0801%" height="15" fill="rgb(207,12,36)" fg:x="122" fg:w="1"/><text x="10.0178%" y="623.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7678%" y="597" width="0.0801%" height="15" fill="rgb(210,214,24)" fg:x="122" fg:w="1"/><text x="10.0178%" y="607.50"></text></g><g><title>engine::session::Session::close (30 samples, 2.40%)</title><rect x="7.6061%" y="789" width="2.4019%" height="15" fill="rgb(206,56,30)" fg:x="95" fg:w="30"/><text x="7.8561%" y="799.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (30 samples, 2.40%)</title><rect x="7.6061%" y="773" width="2.4019%" height="15" fill="rgb(228,143,26)" fg:x="95" fg:w="30"/><text x="7.8561%" y="783.50">en..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (27 samples, 2.16%)</title><rect x="7.8463%" y="757" width="2.1617%" height="15" fill="rgb(216,218,46)" fg:x="98" fg:w="27"/><text x="8.0963%" y="767.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (27 samples, 2.16%)</title><rect x="7.8463%" y="741" width="2.1617%" height="15" fill="rgb(206,6,19)" fg:x="98" fg:w="27"/><text x="8.0963%" y="751.50">e..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.60%)</title><rect x="8.4067%" y="725" width="1.6013%" height="15" fill="rgb(239,177,51)" fg:x="105" fg:w="20"/><text x="8.6567%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="9.4476%" y="709" width="0.5604%" height="15" fill="rgb(216,55,25)" fg:x="118" fg:w="7"/><text x="9.6976%" y="719.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="9.4476%" y="693" width="0.5604%" height="15" fill="rgb(231,163,29)" fg:x="118" fg:w="7"/><text x="9.6976%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="9.4476%" y="677" width="0.5604%" height="15" fill="rgb(232,149,50)" fg:x="118" fg:w="7"/><text x="9.6976%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="9.4476%" y="661" width="0.5604%" height="15" fill="rgb(223,142,48)" fg:x="118" fg:w="7"/><text x="9.6976%" y="671.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="9.8479%" y="645" width="0.1601%" height="15" fill="rgb(245,83,23)" fg:x="123" fg:w="2"/><text x="10.0979%" y="655.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="9.9279%" y="629" width="0.0801%" height="15" fill="rgb(224,63,2)" fg:x="124" fg:w="1"/><text x="10.1779%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.0080%" y="741" width="0.0801%" height="15" fill="rgb(218,65,53)" fg:x="125" fg:w="1"/><text x="10.2580%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.0080%" y="725" width="0.0801%" height="15" fill="rgb(221,84,29)" fg:x="125" fg:w="1"/><text x="10.2580%" y="735.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="10.3283%" y="581" width="0.0801%" height="15" fill="rgb(234,0,32)" fg:x="129" fg:w="1"/><text x="10.5783%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4884%" y="501" width="0.0801%" height="15" fill="rgb(206,20,16)" fg:x="131" fg:w="1"/><text x="10.7384%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4884%" y="485" width="0.0801%" height="15" fill="rgb(244,172,18)" fg:x="131" fg:w="1"/><text x="10.7384%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4884%" y="469" width="0.0801%" height="15" fill="rgb(254,133,1)" fg:x="131" fg:w="1"/><text x="10.7384%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4884%" y="453" width="0.0801%" height="15" fill="rgb(222,206,41)" fg:x="131" fg:w="1"/><text x="10.7384%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.4884%" y="437" width="0.0801%" height="15" fill="rgb(212,3,42)" fg:x="131" fg:w="1"/><text x="10.7384%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.4884%" y="421" width="0.0801%" height="15" fill="rgb(241,11,4)" fg:x="131" fg:w="1"/><text x="10.7384%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.4884%" y="405" width="0.0801%" height="15" fill="rgb(205,19,26)" fg:x="131" fg:w="1"/><text x="10.7384%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4884%" y="389" width="0.0801%" height="15" fill="rgb(210,179,32)" fg:x="131" fg:w="1"/><text x="10.7384%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4884%" y="373" width="0.0801%" height="15" fill="rgb(227,116,49)" fg:x="131" fg:w="1"/><text x="10.7384%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.4884%" y="357" width="0.0801%" height="15" fill="rgb(211,146,6)" fg:x="131" fg:w="1"/><text x="10.7384%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.4884%" y="341" width="0.0801%" height="15" fill="rgb(219,44,39)" fg:x="131" fg:w="1"/><text x="10.7384%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.4884%" y="325" width="0.0801%" height="15" fill="rgb(234,128,11)" fg:x="131" fg:w="1"/><text x="10.7384%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.4884%" y="309" width="0.0801%" height="15" fill="rgb(220,183,53)" fg:x="131" fg:w="1"/><text x="10.7384%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4884%" y="293" width="0.0801%" height="15" fill="rgb(213,219,32)" fg:x="131" fg:w="1"/><text x="10.7384%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.4884%" y="533" width="0.1601%" height="15" fill="rgb(232,156,16)" fg:x="131" fg:w="2"/><text x="10.7384%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.4884%" y="517" width="0.1601%" height="15" fill="rgb(246,135,34)" fg:x="131" fg:w="2"/><text x="10.7384%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.5685%" y="501" width="0.0801%" height="15" fill="rgb(241,99,0)" fg:x="132" fg:w="1"/><text x="10.8185%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.5685%" y="485" width="0.0801%" height="15" fill="rgb(222,103,45)" fg:x="132" fg:w="1"/><text x="10.8185%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.5685%" y="469" width="0.0801%" height="15" fill="rgb(212,57,4)" fg:x="132" fg:w="1"/><text x="10.8185%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.5685%" y="453" width="0.0801%" height="15" fill="rgb(215,68,47)" fg:x="132" fg:w="1"/><text x="10.8185%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.5685%" y="437" width="0.0801%" height="15" fill="rgb(230,84,2)" fg:x="132" fg:w="1"/><text x="10.8185%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="10.5685%" y="421" width="0.0801%" height="15" fill="rgb(220,102,14)" fg:x="132" fg:w="1"/><text x="10.8185%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="10.5685%" y="405" width="0.0801%" height="15" fill="rgb(240,10,32)" fg:x="132" fg:w="1"/><text x="10.8185%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6485%" y="469" width="0.0801%" height="15" fill="rgb(215,47,27)" fg:x="133" fg:w="1"/><text x="10.8985%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6485%" y="453" width="0.0801%" height="15" fill="rgb(233,188,43)" fg:x="133" fg:w="1"/><text x="10.8985%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6485%" y="437" width="0.0801%" height="15" fill="rgb(253,190,1)" fg:x="133" fg:w="1"/><text x="10.8985%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.6485%" y="421" width="0.0801%" height="15" fill="rgb(206,114,52)" fg:x="133" fg:w="1"/><text x="10.8985%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.6485%" y="405" width="0.0801%" height="15" fill="rgb(233,120,37)" fg:x="133" fg:w="1"/><text x="10.8985%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.6485%" y="389" width="0.0801%" height="15" fill="rgb(214,52,39)" fg:x="133" fg:w="1"/><text x="10.8985%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="10.6485%" y="373" width="0.0801%" height="15" fill="rgb(223,80,29)" fg:x="133" fg:w="1"/><text x="10.8985%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="10.6485%" y="357" width="0.0801%" height="15" fill="rgb(230,101,40)" fg:x="133" fg:w="1"/><text x="10.8985%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="10.4884%" y="549" width="0.3203%" height="15" fill="rgb(219,211,8)" fg:x="131" fg:w="4"/><text x="10.7384%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="10.6485%" y="533" width="0.1601%" height="15" fill="rgb(252,126,28)" fg:x="133" fg:w="2"/><text x="10.8985%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.6485%" y="517" width="0.1601%" height="15" fill="rgb(215,56,38)" fg:x="133" fg:w="2"/><text x="10.8985%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.6485%" y="501" width="0.1601%" height="15" fill="rgb(249,55,44)" fg:x="133" fg:w="2"/><text x="10.8985%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="10.6485%" y="485" width="0.1601%" height="15" fill="rgb(220,221,32)" fg:x="133" fg:w="2"/><text x="10.8985%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.7286%" y="469" width="0.0801%" height="15" fill="rgb(212,216,41)" fg:x="134" fg:w="1"/><text x="10.9786%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::desc (8 samples, 0.64%)</title><rect x="10.3283%" y="597" width="0.6405%" height="15" fill="rgb(228,213,43)" fg:x="129" fg:w="8"/><text x="10.5783%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (7 samples, 0.56%)</title><rect x="10.4083%" y="581" width="0.5604%" height="15" fill="rgb(211,31,26)" fg:x="130" fg:w="7"/><text x="10.6583%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (7 samples, 0.56%)</title><rect x="10.4083%" y="565" width="0.5604%" height="15" fill="rgb(229,202,19)" fg:x="130" fg:w="7"/><text x="10.6583%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.8086%" y="549" width="0.1601%" height="15" fill="rgb(229,105,46)" fg:x="135" fg:w="2"/><text x="11.0586%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.8086%" y="533" width="0.1601%" height="15" fill="rgb(235,108,1)" fg:x="135" fg:w="2"/><text x="11.0586%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="10.8086%" y="517" width="0.1601%" height="15" fill="rgb(245,111,35)" fg:x="135" fg:w="2"/><text x="11.0586%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="10.8086%" y="501" width="0.1601%" height="15" fill="rgb(219,185,31)" fg:x="135" fg:w="2"/><text x="11.0586%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="10.8086%" y="485" width="0.1601%" height="15" fill="rgb(214,4,43)" fg:x="135" fg:w="2"/><text x="11.0586%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8887%" y="469" width="0.0801%" height="15" fill="rgb(235,227,40)" fg:x="136" fg:w="1"/><text x="11.1387%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.8887%" y="453" width="0.0801%" height="15" fill="rgb(230,88,30)" fg:x="136" fg:w="1"/><text x="11.1387%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8887%" y="437" width="0.0801%" height="15" fill="rgb(216,217,1)" fg:x="136" fg:w="1"/><text x="11.1387%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0488%" y="581" width="0.0801%" height="15" fill="rgb(248,139,50)" fg:x="138" fg:w="1"/><text x="11.2988%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.0488%" y="565" width="0.0801%" height="15" fill="rgb(233,1,21)" fg:x="138" fg:w="1"/><text x="11.2988%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.0488%" y="549" width="0.0801%" height="15" fill="rgb(215,183,12)" fg:x="138" fg:w="1"/><text x="11.2988%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.0488%" y="533" width="0.0801%" height="15" fill="rgb(229,104,42)" fg:x="138" fg:w="1"/><text x="11.2988%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.0488%" y="517" width="0.0801%" height="15" fill="rgb(243,34,48)" fg:x="138" fg:w="1"/><text x="11.2988%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="11.0488%" y="501" width="0.0801%" height="15" fill="rgb(239,11,44)" fg:x="138" fg:w="1"/><text x="11.2988%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="11.0488%" y="485" width="0.0801%" height="15" fill="rgb(231,98,35)" fg:x="138" fg:w="1"/><text x="11.2988%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.2090%" y="501" width="0.0801%" height="15" fill="rgb(233,28,25)" fg:x="140" fg:w="1"/><text x="11.4590%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.2090%" y="485" width="0.0801%" height="15" fill="rgb(234,123,11)" fg:x="140" fg:w="1"/><text x="11.4590%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.2090%" y="469" width="0.0801%" height="15" fill="rgb(220,69,3)" fg:x="140" fg:w="1"/><text x="11.4590%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.2090%" y="453" width="0.0801%" height="15" fill="rgb(214,64,36)" fg:x="140" fg:w="1"/><text x="11.4590%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.2090%" y="437" width="0.0801%" height="15" fill="rgb(211,138,32)" fg:x="140" fg:w="1"/><text x="11.4590%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.2090%" y="421" width="0.0801%" height="15" fill="rgb(213,118,47)" fg:x="140" fg:w="1"/><text x="11.4590%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.2090%" y="405" width="0.0801%" height="15" fill="rgb(243,124,49)" fg:x="140" fg:w="1"/><text x="11.4590%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.2090%" y="389" width="0.0801%" height="15" fill="rgb(221,30,28)" fg:x="140" fg:w="1"/><text x="11.4590%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.2090%" y="373" width="0.0801%" height="15" fill="rgb(246,37,13)" fg:x="140" fg:w="1"/><text x="11.4590%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.2090%" y="357" width="0.0801%" height="15" fill="rgb(249,66,14)" fg:x="140" fg:w="1"/><text x="11.4590%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.2090%" y="341" width="0.0801%" height="15" fill="rgb(213,166,5)" fg:x="140" fg:w="1"/><text x="11.4590%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.2090%" y="533" width="0.1601%" height="15" fill="rgb(221,66,24)" fg:x="140" fg:w="2"/><text x="11.4590%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="11.2090%" y="517" width="0.1601%" height="15" fill="rgb(210,132,17)" fg:x="140" fg:w="2"/><text x="11.4590%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.2890%" y="501" width="0.0801%" height="15" fill="rgb(243,202,5)" fg:x="141" fg:w="1"/><text x="11.5390%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="11.2090%" y="549" width="0.2402%" height="15" fill="rgb(233,70,48)" fg:x="140" fg:w="3"/><text x="11.4590%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.3691%" y="533" width="0.0801%" height="15" fill="rgb(238,41,26)" fg:x="142" fg:w="1"/><text x="11.6191%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.3691%" y="517" width="0.0801%" height="15" fill="rgb(241,19,31)" fg:x="142" fg:w="1"/><text x="11.6191%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.3691%" y="501" width="0.0801%" height="15" fill="rgb(214,76,10)" fg:x="142" fg:w="1"/><text x="11.6191%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::Acls&gt; (1 samples, 0.08%)</title><rect x="11.4492%" y="549" width="0.0801%" height="15" fill="rgb(254,202,22)" fg:x="143" fg:w="1"/><text x="11.6992%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (9 samples, 0.72%)</title><rect x="10.9688%" y="597" width="0.7206%" height="15" fill="rgb(214,72,24)" fg:x="137" fg:w="9"/><text x="11.2188%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (7 samples, 0.56%)</title><rect x="11.1289%" y="581" width="0.5604%" height="15" fill="rgb(221,92,46)" fg:x="139" fg:w="7"/><text x="11.3789%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (7 samples, 0.56%)</title><rect x="11.1289%" y="565" width="0.5604%" height="15" fill="rgb(246,13,50)" fg:x="139" fg:w="7"/><text x="11.3789%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.5292%" y="549" width="0.1601%" height="15" fill="rgb(240,165,38)" fg:x="144" fg:w="2"/><text x="11.7792%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.5292%" y="533" width="0.1601%" height="15" fill="rgb(241,24,51)" fg:x="144" fg:w="2"/><text x="11.7792%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.5292%" y="517" width="0.1601%" height="15" fill="rgb(227,51,44)" fg:x="144" fg:w="2"/><text x="11.7792%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.5292%" y="501" width="0.1601%" height="15" fill="rgb(231,121,3)" fg:x="144" fg:w="2"/><text x="11.7792%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="11.5292%" y="485" width="0.1601%" height="15" fill="rgb(245,3,41)" fg:x="144" fg:w="2"/><text x="11.7792%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.5292%" y="469" width="0.1601%" height="15" fill="rgb(214,13,26)" fg:x="144" fg:w="2"/><text x="11.7792%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.5292%" y="453" width="0.1601%" height="15" fill="rgb(252,75,11)" fg:x="144" fg:w="2"/><text x="11.7792%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.5292%" y="437" width="0.1601%" height="15" fill="rgb(218,226,17)" fg:x="144" fg:w="2"/><text x="11.7792%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="11.5292%" y="421" width="0.1601%" height="15" fill="rgb(248,89,38)" fg:x="144" fg:w="2"/><text x="11.7792%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="11.5292%" y="405" width="0.1601%" height="15" fill="rgb(237,73,46)" fg:x="144" fg:w="2"/><text x="11.7792%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.6093%" y="389" width="0.0801%" height="15" fill="rgb(242,78,33)" fg:x="145" fg:w="1"/><text x="11.8593%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6093%" y="373" width="0.0801%" height="15" fill="rgb(235,60,3)" fg:x="145" fg:w="1"/><text x="11.8593%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="11.7694%" y="565" width="0.1601%" height="15" fill="rgb(216,172,19)" fg:x="147" fg:w="2"/><text x="12.0194%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="11.7694%" y="549" width="0.1601%" height="15" fill="rgb(227,6,42)" fg:x="147" fg:w="2"/><text x="12.0194%" y="559.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="11.7694%" y="533" width="0.1601%" height="15" fill="rgb(223,207,42)" fg:x="147" fg:w="2"/><text x="12.0194%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="11.7694%" y="517" width="0.1601%" height="15" fill="rgb(246,138,30)" fg:x="147" fg:w="2"/><text x="12.0194%" y="527.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="11.8495%" y="501" width="0.0801%" height="15" fill="rgb(251,199,47)" fg:x="148" fg:w="1"/><text x="12.0995%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="11.8495%" y="485" width="0.0801%" height="15" fill="rgb(228,218,44)" fg:x="148" fg:w="1"/><text x="12.0995%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8495%" y="469" width="0.0801%" height="15" fill="rgb(220,68,6)" fg:x="148" fg:w="1"/><text x="12.0995%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.8495%" y="453" width="0.0801%" height="15" fill="rgb(240,60,26)" fg:x="148" fg:w="1"/><text x="12.0995%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.8495%" y="437" width="0.0801%" height="15" fill="rgb(211,200,19)" fg:x="148" fg:w="1"/><text x="12.0995%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.8495%" y="421" width="0.0801%" height="15" fill="rgb(242,145,30)" fg:x="148" fg:w="1"/><text x="12.0995%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.8495%" y="405" width="0.0801%" height="15" fill="rgb(225,64,13)" fg:x="148" fg:w="1"/><text x="12.0995%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.8495%" y="389" width="0.0801%" height="15" fill="rgb(218,103,35)" fg:x="148" fg:w="1"/><text x="12.0995%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.8495%" y="373" width="0.0801%" height="15" fill="rgb(216,93,46)" fg:x="148" fg:w="1"/><text x="12.0995%" y="383.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="11.6894%" y="597" width="0.3203%" height="15" fill="rgb(225,159,27)" fg:x="146" fg:w="4"/><text x="11.9394%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (4 samples, 0.32%)</title><rect x="11.6894%" y="581" width="0.3203%" height="15" fill="rgb(225,204,11)" fg:x="146" fg:w="4"/><text x="11.9394%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.9295%" y="565" width="0.0801%" height="15" fill="rgb(205,56,4)" fg:x="149" fg:w="1"/><text x="12.1795%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="11.9295%" y="549" width="0.0801%" height="15" fill="rgb(206,6,35)" fg:x="149" fg:w="1"/><text x="12.1795%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0897%" y="549" width="0.0801%" height="15" fill="rgb(247,73,52)" fg:x="151" fg:w="1"/><text x="12.3397%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="12.1697%" y="549" width="0.1601%" height="15" fill="rgb(246,97,4)" fg:x="152" fg:w="2"/><text x="12.4197%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="12.1697%" y="533" width="0.1601%" height="15" fill="rgb(212,37,15)" fg:x="152" fg:w="2"/><text x="12.4197%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="12.1697%" y="517" width="0.1601%" height="15" fill="rgb(208,130,40)" fg:x="152" fg:w="2"/><text x="12.4197%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="12.1697%" y="501" width="0.1601%" height="15" fill="rgb(236,55,29)" fg:x="152" fg:w="2"/><text x="12.4197%" y="511.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="12.3299%" y="533" width="0.0801%" height="15" fill="rgb(209,156,45)" fg:x="154" fg:w="1"/><text x="12.5799%" y="543.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="12.3299%" y="517" width="0.0801%" height="15" fill="rgb(249,107,4)" fg:x="154" fg:w="1"/><text x="12.5799%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="12.5701%" y="421" width="0.1601%" height="15" fill="rgb(227,7,13)" fg:x="157" fg:w="2"/><text x="12.8201%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="12.5701%" y="405" width="0.1601%" height="15" fill="rgb(250,129,14)" fg:x="157" fg:w="2"/><text x="12.8201%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="12.5701%" y="389" width="0.1601%" height="15" fill="rgb(229,92,13)" fg:x="157" fg:w="2"/><text x="12.8201%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="12.5701%" y="437" width="0.2402%" height="15" fill="rgb(245,98,39)" fg:x="157" fg:w="3"/><text x="12.8201%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="12.7302%" y="421" width="0.0801%" height="15" fill="rgb(234,135,48)" fg:x="159" fg:w="1"/><text x="12.9802%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="12.8903%" y="421" width="0.0801%" height="15" fill="rgb(230,98,28)" fg:x="161" fg:w="1"/><text x="13.1403%" y="431.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (7 samples, 0.56%)</title><rect x="12.4900%" y="453" width="0.5604%" height="15" fill="rgb(223,121,0)" fg:x="156" fg:w="7"/><text x="12.7400%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="12.8102%" y="437" width="0.2402%" height="15" fill="rgb(234,173,33)" fg:x="160" fg:w="3"/><text x="13.0602%" y="447.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="12.9704%" y="421" width="0.0801%" height="15" fill="rgb(245,47,8)" fg:x="162" fg:w="1"/><text x="13.2204%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="13.0504%" y="437" width="0.0801%" height="15" fill="rgb(205,17,20)" fg:x="163" fg:w="1"/><text x="13.3004%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.0504%" y="421" width="0.0801%" height="15" fill="rgb(232,151,16)" fg:x="163" fg:w="1"/><text x="13.3004%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.0504%" y="405" width="0.0801%" height="15" fill="rgb(208,30,32)" fg:x="163" fg:w="1"/><text x="13.3004%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.0504%" y="389" width="0.0801%" height="15" fill="rgb(254,26,3)" fg:x="163" fg:w="1"/><text x="13.3004%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="12.4900%" y="517" width="0.7206%" height="15" fill="rgb(240,177,30)" fg:x="156" fg:w="9"/><text x="12.7400%" y="527.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.72%)</title><rect x="12.4900%" y="501" width="0.7206%" height="15" fill="rgb(248,76,44)" fg:x="156" fg:w="9"/><text x="12.7400%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (9 samples, 0.72%)</title><rect x="12.4900%" y="485" width="0.7206%" height="15" fill="rgb(241,186,54)" fg:x="156" fg:w="9"/><text x="12.7400%" y="495.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (9 samples, 0.72%)</title><rect x="12.4900%" y="469" width="0.7206%" height="15" fill="rgb(249,171,29)" fg:x="156" fg:w="9"/><text x="12.7400%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="13.0504%" y="453" width="0.1601%" height="15" fill="rgb(237,151,44)" fg:x="163" fg:w="2"/><text x="13.3004%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="13.1305%" y="437" width="0.0801%" height="15" fill="rgb(228,174,30)" fg:x="164" fg:w="1"/><text x="13.3805%" y="447.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="13.1305%" y="421" width="0.0801%" height="15" fill="rgb(252,14,37)" fg:x="164" fg:w="1"/><text x="13.3805%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="13.2106%" y="485" width="0.0801%" height="15" fill="rgb(207,111,40)" fg:x="165" fg:w="1"/><text x="13.4606%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="13.2106%" y="501" width="0.1601%" height="15" fill="rgb(248,171,54)" fg:x="165" fg:w="2"/><text x="13.4606%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.2906%" y="485" width="0.0801%" height="15" fill="rgb(211,127,2)" fg:x="166" fg:w="1"/><text x="13.5406%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.3707%" y="469" width="0.0801%" height="15" fill="rgb(236,87,47)" fg:x="167" fg:w="1"/><text x="13.6207%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="13.4508%" y="469" width="0.1601%" height="15" fill="rgb(223,190,45)" fg:x="168" fg:w="2"/><text x="13.7008%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="13.4508%" y="453" width="0.1601%" height="15" fill="rgb(215,5,16)" fg:x="168" fg:w="2"/><text x="13.7008%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="13.5308%" y="437" width="0.0801%" height="15" fill="rgb(252,82,33)" fg:x="169" fg:w="1"/><text x="13.7808%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0112%" y="453" width="0.0801%" height="15" fill="rgb(247,213,44)" fg:x="175" fg:w="1"/><text x="14.2612%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.0913%" y="453" width="0.1601%" height="15" fill="rgb(205,196,44)" fg:x="176" fg:w="2"/><text x="14.3413%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (24 samples, 1.92%)</title><rect x="14.2514%" y="453" width="1.9215%" height="15" fill="rgb(237,96,54)" fg:x="178" fg:w="24"/><text x="14.5014%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (24 samples, 1.92%)</title><rect x="14.2514%" y="437" width="1.9215%" height="15" fill="rgb(230,113,34)" fg:x="178" fg:w="24"/><text x="14.5014%" y="447.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.0929%" y="421" width="0.0801%" height="15" fill="rgb(221,224,12)" fg:x="201" fg:w="1"/><text x="16.3429%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="16.1729%" y="453" width="0.5604%" height="15" fill="rgb(219,112,44)" fg:x="202" fg:w="7"/><text x="16.4229%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="16.1729%" y="437" width="0.5604%" height="15" fill="rgb(210,31,13)" fg:x="202" fg:w="7"/><text x="16.4229%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="16.8935%" y="421" width="0.0801%" height="15" fill="rgb(230,25,16)" fg:x="211" fg:w="1"/><text x="17.1435%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="16.9736%" y="405" width="0.0801%" height="15" fill="rgb(246,108,53)" fg:x="212" fg:w="1"/><text x="17.2236%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.9736%" y="389" width="0.0801%" height="15" fill="rgb(241,172,50)" fg:x="212" fg:w="1"/><text x="17.2236%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.9736%" y="373" width="0.0801%" height="15" fill="rgb(235,141,10)" fg:x="212" fg:w="1"/><text x="17.2236%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9736%" y="357" width="0.0801%" height="15" fill="rgb(220,174,43)" fg:x="212" fg:w="1"/><text x="17.2236%" y="367.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="17.2938%" y="389" width="0.3203%" height="15" fill="rgb(215,181,40)" fg:x="216" fg:w="4"/><text x="17.5438%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.6141%" y="389" width="0.0801%" height="15" fill="rgb(230,97,2)" fg:x="220" fg:w="1"/><text x="17.8641%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="17.6942%" y="389" width="0.0801%" height="15" fill="rgb(211,25,27)" fg:x="221" fg:w="1"/><text x="17.9442%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.6942%" y="373" width="0.0801%" height="15" fill="rgb(230,87,26)" fg:x="221" fg:w="1"/><text x="17.9442%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.6942%" y="357" width="0.0801%" height="15" fill="rgb(227,160,17)" fg:x="221" fg:w="1"/><text x="17.9442%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.6942%" y="341" width="0.0801%" height="15" fill="rgb(244,85,34)" fg:x="221" fg:w="1"/><text x="17.9442%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="17.7742%" y="389" width="0.1601%" height="15" fill="rgb(207,70,0)" fg:x="222" fg:w="2"/><text x="18.0242%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="17.7742%" y="373" width="0.1601%" height="15" fill="rgb(223,129,7)" fg:x="222" fg:w="2"/><text x="18.0242%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.8543%" y="357" width="0.0801%" height="15" fill="rgb(246,105,7)" fg:x="223" fg:w="1"/><text x="18.1043%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.8543%" y="341" width="0.0801%" height="15" fill="rgb(215,154,42)" fg:x="223" fg:w="1"/><text x="18.1043%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8543%" y="325" width="0.0801%" height="15" fill="rgb(220,215,30)" fg:x="223" fg:w="1"/><text x="18.1043%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="17.9343%" y="373" width="0.0801%" height="15" fill="rgb(228,81,51)" fg:x="224" fg:w="1"/><text x="18.1843%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.9343%" y="357" width="0.0801%" height="15" fill="rgb(247,71,54)" fg:x="224" fg:w="1"/><text x="18.1843%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.9343%" y="341" width="0.0801%" height="15" fill="rgb(234,176,34)" fg:x="224" fg:w="1"/><text x="18.1843%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.9343%" y="325" width="0.0801%" height="15" fill="rgb(241,103,54)" fg:x="224" fg:w="1"/><text x="18.1843%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0144%" y="357" width="0.0801%" height="15" fill="rgb(228,22,34)" fg:x="225" fg:w="1"/><text x="18.2644%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (72 samples, 5.76%)</title><rect x="17.9343%" y="389" width="5.7646%" height="15" fill="rgb(241,179,48)" fg:x="224" fg:w="72"/><text x="18.1843%" y="399.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (71 samples, 5.68%)</title><rect x="18.0144%" y="373" width="5.6845%" height="15" fill="rgb(235,167,37)" fg:x="225" fg:w="71"/><text x="18.2644%" y="383.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (70 samples, 5.60%)</title><rect x="18.0945%" y="357" width="5.6045%" height="15" fill="rgb(213,109,30)" fg:x="226" fg:w="70"/><text x="18.3445%" y="367.50">alloc::..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8591%" y="373" width="0.0801%" height="15" fill="rgb(222,172,16)" fg:x="298" fg:w="1"/><text x="24.1091%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="23.6990%" y="389" width="0.3203%" height="15" fill="rgb(233,192,5)" fg:x="296" fg:w="4"/><text x="23.9490%" y="399.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="23.9392%" y="373" width="0.0801%" height="15" fill="rgb(247,189,41)" fg:x="299" fg:w="1"/><text x="24.1892%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="23.9392%" y="357" width="0.0801%" height="15" fill="rgb(218,134,47)" fg:x="299" fg:w="1"/><text x="24.1892%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 7.21%)</title><rect x="16.8935%" y="437" width="7.2058%" height="15" fill="rgb(216,29,3)" fg:x="211" fg:w="90"/><text x="17.1435%" y="447.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (89 samples, 7.13%)</title><rect x="16.9736%" y="421" width="7.1257%" height="15" fill="rgb(246,140,12)" fg:x="212" fg:w="89"/><text x="17.2236%" y="431.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (88 samples, 7.05%)</title><rect x="17.0536%" y="405" width="7.0456%" height="15" fill="rgb(230,136,11)" fg:x="213" fg:w="88"/><text x="17.3036%" y="415.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="24.0192%" y="389" width="0.0801%" height="15" fill="rgb(247,22,47)" fg:x="300" fg:w="1"/><text x="24.2692%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.0192%" y="373" width="0.0801%" height="15" fill="rgb(218,84,22)" fg:x="300" fg:w="1"/><text x="24.2692%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.0192%" y="357" width="0.0801%" height="15" fill="rgb(216,87,39)" fg:x="300" fg:w="1"/><text x="24.2692%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.0192%" y="341" width="0.0801%" height="15" fill="rgb(221,178,8)" fg:x="300" fg:w="1"/><text x="24.2692%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.1793%" y="421" width="0.0801%" height="15" fill="rgb(230,42,11)" fg:x="302" fg:w="1"/><text x="24.4293%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="24.2594%" y="421" width="0.0801%" height="15" fill="rgb(237,229,4)" fg:x="303" fg:w="1"/><text x="24.5094%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.2594%" y="405" width="0.0801%" height="15" fill="rgb(222,31,33)" fg:x="303" fg:w="1"/><text x="24.5094%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.2594%" y="389" width="0.0801%" height="15" fill="rgb(210,17,39)" fg:x="303" fg:w="1"/><text x="24.5094%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="24.3395%" y="421" width="0.3203%" height="15" fill="rgb(244,93,20)" fg:x="304" fg:w="4"/><text x="24.5895%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="24.5797%" y="405" width="0.0801%" height="15" fill="rgb(210,40,47)" fg:x="307" fg:w="1"/><text x="24.8297%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="24.5797%" y="389" width="0.0801%" height="15" fill="rgb(239,211,47)" fg:x="307" fg:w="1"/><text x="24.8297%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="24.5797%" y="373" width="0.0801%" height="15" fill="rgb(251,223,49)" fg:x="307" fg:w="1"/><text x="24.8297%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.1401%" y="373" width="0.0801%" height="15" fill="rgb(221,149,5)" fg:x="314" fg:w="1"/><text x="25.3901%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.64%)</title><rect x="24.6597%" y="421" width="0.6405%" height="15" fill="rgb(219,224,51)" fg:x="308" fg:w="8"/><text x="24.9097%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="25.0600%" y="405" width="0.2402%" height="15" fill="rgb(223,7,8)" fg:x="313" fg:w="3"/><text x="25.3100%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="25.0600%" y="389" width="0.2402%" height="15" fill="rgb(241,217,22)" fg:x="313" fg:w="3"/><text x="25.3100%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.2202%" y="373" width="0.0801%" height="15" fill="rgb(248,209,0)" fg:x="315" fg:w="1"/><text x="25.4702%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (16 samples, 1.28%)</title><rect x="24.0993%" y="437" width="1.2810%" height="15" fill="rgb(217,205,4)" fg:x="301" fg:w="16"/><text x="24.3493%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="25.3002%" y="421" width="0.0801%" height="15" fill="rgb(228,124,39)" fg:x="316" fg:w="1"/><text x="25.5502%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="25.3803%" y="421" width="0.0801%" height="15" fill="rgb(250,116,42)" fg:x="317" fg:w="1"/><text x="25.6303%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.3803%" y="405" width="0.0801%" height="15" fill="rgb(223,202,9)" fg:x="317" fg:w="1"/><text x="25.6303%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="25.3803%" y="437" width="0.2402%" height="15" fill="rgb(242,222,40)" fg:x="317" fg:w="3"/><text x="25.6303%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="25.4604%" y="421" width="0.1601%" height="15" fill="rgb(229,99,46)" fg:x="318" fg:w="2"/><text x="25.7104%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::ClassBytesIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.5404%" y="405" width="0.0801%" height="15" fill="rgb(225,56,46)" fg:x="319" fg:w="1"/><text x="25.7904%" y="415.50"></text></g><g><title>regex_automata::meta::strategy::new (152 samples, 12.17%)</title><rect x="13.6109%" y="469" width="12.1697%" height="15" fill="rgb(227,94,5)" fg:x="170" fg:w="152"/><text x="13.8609%" y="479.50">regex_automata::me..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (113 samples, 9.05%)</title><rect x="16.7334%" y="453" width="9.0472%" height="15" fill="rgb(205,112,38)" fg:x="209" fg:w="113"/><text x="16.9834%" y="463.50">regex_automat..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="25.6205%" y="437" width="0.1601%" height="15" fill="rgb(231,133,46)" fg:x="320" fg:w="2"/><text x="25.8705%" y="447.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="25.7006%" y="421" width="0.0801%" height="15" fill="rgb(217,16,9)" fg:x="321" fg:w="1"/><text x="25.9506%" y="431.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="25.8607%" y="421" width="0.1601%" height="15" fill="rgb(249,173,9)" fg:x="323" fg:w="2"/><text x="26.1107%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="25.8607%" y="405" width="0.1601%" height="15" fill="rgb(205,163,53)" fg:x="323" fg:w="2"/><text x="26.1107%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="25.8607%" y="389" width="0.1601%" height="15" fill="rgb(217,54,41)" fg:x="323" fg:w="2"/><text x="26.1107%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.9408%" y="373" width="0.0801%" height="15" fill="rgb(228,216,12)" fg:x="324" fg:w="1"/><text x="26.1908%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="26.0208%" y="421" width="0.0801%" height="15" fill="rgb(244,228,15)" fg:x="325" fg:w="1"/><text x="26.2708%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="26.1009%" y="405" width="0.3203%" height="15" fill="rgb(221,176,53)" fg:x="326" fg:w="4"/><text x="26.3509%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="26.1009%" y="389" width="0.3203%" height="15" fill="rgb(205,94,34)" fg:x="326" fg:w="4"/><text x="26.3509%" y="399.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="26.1009%" y="373" width="0.3203%" height="15" fill="rgb(213,110,48)" fg:x="326" fg:w="4"/><text x="26.3509%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.64%)</title><rect x="25.8607%" y="437" width="0.6405%" height="15" fill="rgb(236,142,28)" fg:x="323" fg:w="8"/><text x="26.1107%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="26.1009%" y="421" width="0.4003%" height="15" fill="rgb(225,135,29)" fg:x="326" fg:w="5"/><text x="26.3509%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="26.4211%" y="405" width="0.0801%" height="15" fill="rgb(252,45,31)" fg:x="330" fg:w="1"/><text x="26.6711%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="26.4211%" y="389" width="0.0801%" height="15" fill="rgb(211,187,50)" fg:x="330" fg:w="1"/><text x="26.6711%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.88%)</title><rect x="25.7806%" y="469" width="0.8807%" height="15" fill="rgb(229,109,7)" fg:x="322" fg:w="11"/><text x="26.0306%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.88%)</title><rect x="25.7806%" y="453" width="0.8807%" height="15" fill="rgb(251,131,51)" fg:x="322" fg:w="11"/><text x="26.0306%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="26.5012%" y="437" width="0.1601%" height="15" fill="rgb(251,180,35)" fg:x="331" fg:w="2"/><text x="26.7512%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="26.6613%" y="421" width="0.1601%" height="15" fill="rgb(211,46,32)" fg:x="333" fg:w="2"/><text x="26.9113%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="26.6613%" y="437" width="0.2402%" height="15" fill="rgb(248,123,17)" fg:x="333" fg:w="3"/><text x="26.9113%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="26.8215%" y="421" width="0.0801%" height="15" fill="rgb(227,141,18)" fg:x="335" fg:w="1"/><text x="27.0715%" y="431.50"></text></g><g><title>regex_syntax::unicode::perl_space (1 samples, 0.08%)</title><rect x="26.8215%" y="405" width="0.0801%" height="15" fill="rgb(216,102,9)" fg:x="335" fg:w="1"/><text x="27.0715%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (170 samples, 13.61%)</title><rect x="13.3707%" y="485" width="13.6109%" height="15" fill="rgb(253,47,13)" fg:x="167" fg:w="170"/><text x="13.6207%" y="495.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="26.6613%" y="469" width="0.3203%" height="15" fill="rgb(226,93,23)" fg:x="333" fg:w="4"/><text x="26.9113%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="26.6613%" y="453" width="0.3203%" height="15" fill="rgb(247,104,17)" fg:x="333" fg:w="4"/><text x="26.9113%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="26.9015%" y="437" width="0.0801%" height="15" fill="rgb(233,203,26)" fg:x="336" fg:w="1"/><text x="27.1515%" y="447.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (173 samples, 13.85%)</title><rect x="13.2106%" y="517" width="13.8511%" height="15" fill="rgb(244,98,49)" fg:x="165" fg:w="173"/><text x="13.4606%" y="527.50">&lt;regex::regex::string..</text></g><g><title>regex::builders::Builder::build_one_string (171 samples, 13.69%)</title><rect x="13.3707%" y="501" width="13.6910%" height="15" fill="rgb(235,134,22)" fg:x="167" fg:w="171"/><text x="13.6207%" y="511.50">regex::builders::Buil..</text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="26.9816%" y="485" width="0.0801%" height="15" fill="rgb(221,70,32)" fg:x="337" fg:w="1"/><text x="27.2316%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.0616%" y="485" width="0.0801%" height="15" fill="rgb(238,15,50)" fg:x="338" fg:w="1"/><text x="27.3116%" y="495.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.1417%" y="485" width="0.0801%" height="15" fill="rgb(215,221,48)" fg:x="339" fg:w="1"/><text x="27.3917%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.1417%" y="469" width="0.0801%" height="15" fill="rgb(236,73,3)" fg:x="339" fg:w="1"/><text x="27.3917%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.2218%" y="469" width="0.0801%" height="15" fill="rgb(250,107,11)" fg:x="340" fg:w="1"/><text x="27.4718%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="27.3018%" y="469" width="0.0801%" height="15" fill="rgb(242,39,14)" fg:x="341" fg:w="1"/><text x="27.5518%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="27.0616%" y="517" width="0.4003%" height="15" fill="rgb(248,164,37)" fg:x="338" fg:w="5"/><text x="27.3116%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="27.0616%" y="501" width="0.4003%" height="15" fill="rgb(217,60,12)" fg:x="338" fg:w="5"/><text x="27.3116%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="27.2218%" y="485" width="0.2402%" height="15" fill="rgb(240,125,29)" fg:x="340" fg:w="3"/><text x="27.4718%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="27.3819%" y="469" width="0.0801%" height="15" fill="rgb(208,207,28)" fg:x="342" fg:w="1"/><text x="27.6319%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.9424%" y="405" width="0.0801%" height="15" fill="rgb(209,159,27)" fg:x="349" fg:w="1"/><text x="28.1924%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="27.9424%" y="437" width="0.2402%" height="15" fill="rgb(251,176,53)" fg:x="349" fg:w="3"/><text x="28.1924%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="27.9424%" y="421" width="0.2402%" height="15" fill="rgb(211,85,7)" fg:x="349" fg:w="3"/><text x="28.1924%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="28.0224%" y="405" width="0.1601%" height="15" fill="rgb(216,64,54)" fg:x="350" fg:w="2"/><text x="28.2724%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.1825%" y="437" width="0.0801%" height="15" fill="rgb(217,54,24)" fg:x="352" fg:w="1"/><text x="28.4325%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.96%)</title><rect x="27.5420%" y="453" width="0.9608%" height="15" fill="rgb(208,206,53)" fg:x="344" fg:w="12"/><text x="27.7920%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="28.2626%" y="437" width="0.2402%" height="15" fill="rgb(251,74,39)" fg:x="353" fg:w="3"/><text x="28.5126%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (14 samples, 1.12%)</title><rect x="27.4620%" y="469" width="1.1209%" height="15" fill="rgb(226,47,5)" fg:x="343" fg:w="14"/><text x="27.7120%" y="479.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="28.5028%" y="453" width="0.0801%" height="15" fill="rgb(234,111,33)" fg:x="356" fg:w="1"/><text x="28.7528%" y="463.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (203 samples, 16.25%)</title><rect x="12.4099%" y="533" width="16.2530%" height="15" fill="rgb(251,14,10)" fg:x="155" fg:w="203"/><text x="12.6599%" y="543.50">indefinite::helper::Helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.20%)</title><rect x="27.4620%" y="517" width="1.2010%" height="15" fill="rgb(232,43,0)" fg:x="343" fg:w="15"/><text x="27.7120%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.20%)</title><rect x="27.4620%" y="501" width="1.2010%" height="15" fill="rgb(222,68,43)" fg:x="343" fg:w="15"/><text x="27.7120%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.20%)</title><rect x="27.4620%" y="485" width="1.2010%" height="15" fill="rgb(217,24,23)" fg:x="343" fg:w="15"/><text x="27.7120%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="28.5829%" y="469" width="0.0801%" height="15" fill="rgb(229,209,14)" fg:x="357" fg:w="1"/><text x="28.8329%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="28.5829%" y="453" width="0.0801%" height="15" fill="rgb(250,149,48)" fg:x="357" fg:w="1"/><text x="28.8329%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.5829%" y="437" width="0.0801%" height="15" fill="rgb(210,120,37)" fg:x="357" fg:w="1"/><text x="28.8329%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.5829%" y="421" width="0.0801%" height="15" fill="rgb(210,21,8)" fg:x="357" fg:w="1"/><text x="28.8329%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.5829%" y="405" width="0.0801%" height="15" fill="rgb(243,145,7)" fg:x="357" fg:w="1"/><text x="28.8329%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.6629%" y="501" width="0.0801%" height="15" fill="rgb(238,178,32)" fg:x="358" fg:w="1"/><text x="28.9129%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="28.7430%" y="437" width="0.1601%" height="15" fill="rgb(222,4,10)" fg:x="359" fg:w="2"/><text x="28.9930%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="28.7430%" y="469" width="0.2402%" height="15" fill="rgb(239,7,37)" fg:x="359" fg:w="3"/><text x="28.9930%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="28.7430%" y="453" width="0.2402%" height="15" fill="rgb(215,31,37)" fg:x="359" fg:w="3"/><text x="28.9930%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="28.9031%" y="437" width="0.0801%" height="15" fill="rgb(224,83,33)" fg:x="361" fg:w="1"/><text x="29.1531%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.0633%" y="437" width="0.0801%" height="15" fill="rgb(239,55,3)" fg:x="363" fg:w="1"/><text x="29.3133%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.0633%" y="421" width="0.0801%" height="15" fill="rgb(247,92,11)" fg:x="363" fg:w="1"/><text x="29.3133%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.0633%" y="405" width="0.0801%" height="15" fill="rgb(239,200,7)" fg:x="363" fg:w="1"/><text x="29.3133%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="29.0633%" y="389" width="0.0801%" height="15" fill="rgb(227,115,8)" fg:x="363" fg:w="1"/><text x="29.3133%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="28.9832%" y="469" width="0.2402%" height="15" fill="rgb(215,189,27)" fg:x="362" fg:w="3"/><text x="29.2332%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="28.9832%" y="453" width="0.2402%" height="15" fill="rgb(251,216,39)" fg:x="362" fg:w="3"/><text x="29.2332%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="29.1433%" y="437" width="0.0801%" height="15" fill="rgb(207,29,47)" fg:x="364" fg:w="1"/><text x="29.3933%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.1433%" y="421" width="0.0801%" height="15" fill="rgb(210,71,34)" fg:x="364" fg:w="1"/><text x="29.3933%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="29.1433%" y="405" width="0.0801%" height="15" fill="rgb(253,217,51)" fg:x="364" fg:w="1"/><text x="29.3933%" y="415.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.1433%" y="389" width="0.0801%" height="15" fill="rgb(222,117,46)" fg:x="364" fg:w="1"/><text x="29.3933%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.5436%" y="437" width="0.0801%" height="15" fill="rgb(226,132,6)" fg:x="369" fg:w="1"/><text x="29.7936%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (32 samples, 2.56%)</title><rect x="29.3835%" y="453" width="2.5620%" height="15" fill="rgb(254,145,51)" fg:x="367" fg:w="32"/><text x="29.6335%" y="463.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (29 samples, 2.32%)</title><rect x="29.6237%" y="437" width="2.3219%" height="15" fill="rgb(231,199,27)" fg:x="370" fg:w="29"/><text x="29.8737%" y="447.50">c..</text></g><g><title>__libc_free (6 samples, 0.48%)</title><rect x="31.4652%" y="421" width="0.4804%" height="15" fill="rgb(245,158,14)" fg:x="393" fg:w="6"/><text x="31.7152%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="31.9456%" y="453" width="0.4804%" height="15" fill="rgb(240,113,14)" fg:x="399" fg:w="6"/><text x="32.1956%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="32.1057%" y="437" width="0.3203%" height="15" fill="rgb(210,20,13)" fg:x="401" fg:w="4"/><text x="32.3557%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="32.3459%" y="421" width="0.0801%" height="15" fill="rgb(241,144,13)" fg:x="404" fg:w="1"/><text x="32.5959%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.3459%" y="405" width="0.0801%" height="15" fill="rgb(235,43,34)" fg:x="404" fg:w="1"/><text x="32.5959%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.3459%" y="389" width="0.0801%" height="15" fill="rgb(208,36,20)" fg:x="404" fg:w="1"/><text x="32.5959%" y="399.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (12 samples, 0.96%)</title><rect x="32.8263%" y="421" width="0.9608%" height="15" fill="rgb(239,204,10)" fg:x="410" fg:w="12"/><text x="33.0763%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (8 samples, 0.64%)</title><rect x="33.1465%" y="405" width="0.6405%" height="15" fill="rgb(217,84,43)" fg:x="414" fg:w="8"/><text x="33.3965%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="33.3867%" y="389" width="0.4003%" height="15" fill="rgb(241,170,50)" fg:x="417" fg:w="5"/><text x="33.6367%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="33.3867%" y="373" width="0.4003%" height="15" fill="rgb(226,205,29)" fg:x="417" fg:w="5"/><text x="33.6367%" y="383.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="33.3867%" y="357" width="0.4003%" height="15" fill="rgb(233,113,1)" fg:x="417" fg:w="5"/><text x="33.6367%" y="367.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (27 samples, 2.16%)</title><rect x="32.4259%" y="453" width="2.1617%" height="15" fill="rgb(253,98,13)" fg:x="405" fg:w="27"/><text x="32.6759%" y="463.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (27 samples, 2.16%)</title><rect x="32.4259%" y="437" width="2.1617%" height="15" fill="rgb(211,115,12)" fg:x="405" fg:w="27"/><text x="32.6759%" y="447.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.80%)</title><rect x="33.7870%" y="421" width="0.8006%" height="15" fill="rgb(208,12,16)" fg:x="422" fg:w="10"/><text x="34.0370%" y="431.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (10 samples, 0.80%)</title><rect x="33.7870%" y="405" width="0.8006%" height="15" fill="rgb(237,193,54)" fg:x="422" fg:w="10"/><text x="34.0370%" y="415.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.64%)</title><rect x="33.9472%" y="389" width="0.6405%" height="15" fill="rgb(243,22,42)" fg:x="424" fg:w="8"/><text x="34.1972%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="34.5877%" y="453" width="0.1601%" height="15" fill="rgb(233,151,36)" fg:x="432" fg:w="2"/><text x="34.8377%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="34.6677%" y="437" width="0.0801%" height="15" fill="rgb(237,57,45)" fg:x="433" fg:w="1"/><text x="34.9177%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="34.8279%" y="373" width="0.0801%" height="15" fill="rgb(221,88,17)" fg:x="435" fg:w="1"/><text x="35.0779%" y="383.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="36.1890%" y="341" width="0.3203%" height="15" fill="rgb(230,79,15)" fg:x="452" fg:w="4"/><text x="36.4390%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.5092%" y="341" width="0.1601%" height="15" fill="rgb(213,57,13)" fg:x="456" fg:w="2"/><text x="36.7592%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.48%)</title><rect x="36.6693%" y="341" width="0.4804%" height="15" fill="rgb(222,116,39)" fg:x="458" fg:w="6"/><text x="36.9193%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="36.9896%" y="325" width="0.1601%" height="15" fill="rgb(245,107,2)" fg:x="462" fg:w="2"/><text x="37.2396%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="36.9896%" y="309" width="0.1601%" height="15" fill="rgb(238,1,10)" fg:x="462" fg:w="2"/><text x="37.2396%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.9896%" y="293" width="0.1601%" height="15" fill="rgb(249,4,48)" fg:x="462" fg:w="2"/><text x="37.2396%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (7 samples, 0.56%)</title><rect x="37.1497%" y="341" width="0.5604%" height="15" fill="rgb(223,151,18)" fg:x="464" fg:w="7"/><text x="37.3997%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="37.4700%" y="325" width="0.2402%" height="15" fill="rgb(227,65,43)" fg:x="468" fg:w="3"/><text x="37.7200%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.5500%" y="309" width="0.1601%" height="15" fill="rgb(218,40,45)" fg:x="469" fg:w="2"/><text x="37.8000%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="37.5500%" y="293" width="0.1601%" height="15" fill="rgb(252,121,31)" fg:x="469" fg:w="2"/><text x="37.8000%" y="303.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="38.3507%" y="277" width="0.3203%" height="15" fill="rgb(219,158,43)" fg:x="479" fg:w="4"/><text x="38.6007%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="38.1906%" y="309" width="0.5604%" height="15" fill="rgb(231,162,42)" fg:x="477" fg:w="7"/><text x="38.4406%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="38.2706%" y="293" width="0.4804%" height="15" fill="rgb(217,179,25)" fg:x="478" fg:w="6"/><text x="38.5206%" y="303.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="38.6709%" y="277" width="0.0801%" height="15" fill="rgb(206,212,31)" fg:x="483" fg:w="1"/><text x="38.9209%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="38.6709%" y="261" width="0.0801%" height="15" fill="rgb(235,144,12)" fg:x="483" fg:w="1"/><text x="38.9209%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="38.9912%" y="293" width="0.1601%" height="15" fill="rgb(213,51,10)" fg:x="487" fg:w="2"/><text x="39.2412%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (21 samples, 1.68%)</title><rect x="37.7102%" y="341" width="1.6813%" height="15" fill="rgb(231,145,14)" fg:x="471" fg:w="21"/><text x="37.9602%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.52%)</title><rect x="37.8703%" y="325" width="1.5212%" height="15" fill="rgb(235,15,28)" fg:x="473" fg:w="19"/><text x="38.1203%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.64%)</title><rect x="38.7510%" y="309" width="0.6405%" height="15" fill="rgb(237,206,10)" fg:x="484" fg:w="8"/><text x="39.0010%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="39.1513%" y="293" width="0.2402%" height="15" fill="rgb(236,227,27)" fg:x="489" fg:w="3"/><text x="39.4013%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.3114%" y="277" width="0.0801%" height="15" fill="rgb(246,83,35)" fg:x="491" fg:w="1"/><text x="39.5614%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.3114%" y="261" width="0.0801%" height="15" fill="rgb(220,136,24)" fg:x="491" fg:w="1"/><text x="39.5614%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.3114%" y="245" width="0.0801%" height="15" fill="rgb(217,3,25)" fg:x="491" fg:w="1"/><text x="39.5614%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="39.3915%" y="341" width="0.0801%" height="15" fill="rgb(239,24,14)" fg:x="492" fg:w="1"/><text x="39.6415%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="39.3915%" y="325" width="0.0801%" height="15" fill="rgb(244,16,53)" fg:x="492" fg:w="1"/><text x="39.6415%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="39.3915%" y="309" width="0.0801%" height="15" fill="rgb(208,175,44)" fg:x="492" fg:w="1"/><text x="39.6415%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4716%" y="309" width="0.0801%" height="15" fill="rgb(252,18,48)" fg:x="493" fg:w="1"/><text x="39.7216%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (77 samples, 6.16%)</title><rect x="39.4716%" y="341" width="6.1649%" height="15" fill="rgb(234,199,32)" fg:x="493" fg:w="77"/><text x="39.7216%" y="351.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (77 samples, 6.16%)</title><rect x="39.4716%" y="325" width="6.1649%" height="15" fill="rgb(225,77,54)" fg:x="493" fg:w="77"/><text x="39.7216%" y="335.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (76 samples, 6.08%)</title><rect x="39.5516%" y="309" width="6.0849%" height="15" fill="rgb(225,42,25)" fg:x="494" fg:w="76"/><text x="39.8016%" y="319.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (7 samples, 0.56%)</title><rect x="45.6365%" y="341" width="0.5604%" height="15" fill="rgb(242,227,46)" fg:x="570" fg:w="7"/><text x="45.8865%" y="351.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="45.8767%" y="325" width="0.3203%" height="15" fill="rgb(246,197,35)" fg:x="573" fg:w="4"/><text x="46.1267%" y="335.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="46.1970%" y="341" width="0.0801%" height="15" fill="rgb(215,159,26)" fg:x="577" fg:w="1"/><text x="46.4470%" y="351.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="46.8375%" y="293" width="0.2402%" height="15" fill="rgb(212,194,50)" fg:x="585" fg:w="3"/><text x="47.0875%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 12.41%)</title><rect x="34.7478%" y="437" width="12.4099%" height="15" fill="rgb(246,132,1)" fg:x="434" fg:w="155"/><text x="34.9978%" y="447.50">&lt;core::iter::adapte..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (154 samples, 12.33%)</title><rect x="34.8279%" y="421" width="12.3299%" height="15" fill="rgb(217,71,7)" fg:x="435" fg:w="154"/><text x="35.0779%" y="431.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (154 samples, 12.33%)</title><rect x="34.8279%" y="405" width="12.3299%" height="15" fill="rgb(252,59,32)" fg:x="435" fg:w="154"/><text x="35.0779%" y="415.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (154 samples, 12.33%)</title><rect x="34.8279%" y="389" width="12.3299%" height="15" fill="rgb(253,204,25)" fg:x="435" fg:w="154"/><text x="35.0779%" y="399.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (153 samples, 12.25%)</title><rect x="34.9079%" y="373" width="12.2498%" height="15" fill="rgb(232,21,16)" fg:x="436" fg:w="153"/><text x="35.1579%" y="383.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (153 samples, 12.25%)</title><rect x="34.9079%" y="357" width="12.2498%" height="15" fill="rgb(248,90,29)" fg:x="436" fg:w="153"/><text x="35.1579%" y="367.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (11 samples, 0.88%)</title><rect x="46.2770%" y="341" width="0.8807%" height="15" fill="rgb(249,223,7)" fg:x="578" fg:w="11"/><text x="46.5270%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.56%)</title><rect x="46.5973%" y="325" width="0.5604%" height="15" fill="rgb(231,119,42)" fg:x="582" fg:w="7"/><text x="46.8473%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.56%)</title><rect x="46.5973%" y="309" width="0.5604%" height="15" fill="rgb(215,41,35)" fg:x="582" fg:w="7"/><text x="46.8473%" y="319.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="47.0777%" y="293" width="0.0801%" height="15" fill="rgb(220,44,45)" fg:x="588" fg:w="1"/><text x="47.3277%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="47.4780%" y="421" width="0.1601%" height="15" fill="rgb(253,197,36)" fg:x="593" fg:w="2"/><text x="47.7280%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (9 samples, 0.72%)</title><rect x="47.6381%" y="421" width="0.7206%" height="15" fill="rgb(245,225,54)" fg:x="595" fg:w="9"/><text x="47.8881%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="47.9584%" y="405" width="0.4003%" height="15" fill="rgb(239,94,37)" fg:x="599" fg:w="5"/><text x="48.2084%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="47.9584%" y="389" width="0.4003%" height="15" fill="rgb(242,217,10)" fg:x="599" fg:w="5"/><text x="48.2084%" y="399.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="47.9584%" y="373" width="0.4003%" height="15" fill="rgb(250,193,7)" fg:x="599" fg:w="5"/><text x="48.2084%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="48.3587%" y="421" width="0.5604%" height="15" fill="rgb(230,104,19)" fg:x="604" fg:w="7"/><text x="48.6087%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.8391%" y="405" width="0.0801%" height="15" fill="rgb(230,181,4)" fg:x="610" fg:w="1"/><text x="49.0891%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="48.9191%" y="421" width="0.1601%" height="15" fill="rgb(216,219,49)" fg:x="611" fg:w="2"/><text x="49.1691%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="49.0793%" y="405" width="0.1601%" height="15" fill="rgb(254,144,0)" fg:x="613" fg:w="2"/><text x="49.3293%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="49.0793%" y="389" width="0.1601%" height="15" fill="rgb(205,209,38)" fg:x="613" fg:w="2"/><text x="49.3293%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.1593%" y="373" width="0.0801%" height="15" fill="rgb(240,21,42)" fg:x="614" fg:w="1"/><text x="49.4093%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (251 samples, 20.10%)</title><rect x="29.2234%" y="469" width="20.0961%" height="15" fill="rgb(241,132,3)" fg:x="365" fg:w="251"/><text x="29.4734%" y="479.50">regex_automata::meta::strategy::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (182 samples, 14.57%)</title><rect x="34.7478%" y="453" width="14.5717%" height="15" fill="rgb(225,14,2)" fg:x="434" fg:w="182"/><text x="34.9978%" y="463.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (27 samples, 2.16%)</title><rect x="47.1577%" y="437" width="2.1617%" height="15" fill="rgb(210,141,35)" fg:x="589" fg:w="27"/><text x="47.4077%" y="447.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (3 samples, 0.24%)</title><rect x="49.0793%" y="421" width="0.2402%" height="15" fill="rgb(251,14,44)" fg:x="613" fg:w="3"/><text x="49.3293%" y="431.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="49.2394%" y="405" width="0.0801%" height="15" fill="rgb(247,48,18)" fg:x="615" fg:w="1"/><text x="49.4894%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.2394%" y="389" width="0.0801%" height="15" fill="rgb(225,0,40)" fg:x="615" fg:w="1"/><text x="49.4894%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.2394%" y="373" width="0.0801%" height="15" fill="rgb(221,31,33)" fg:x="615" fg:w="1"/><text x="49.4894%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="49.3195%" y="437" width="0.0801%" height="15" fill="rgb(237,42,40)" fg:x="616" fg:w="1"/><text x="49.5695%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="49.3195%" y="421" width="0.0801%" height="15" fill="rgb(233,51,29)" fg:x="616" fg:w="1"/><text x="49.5695%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.3195%" y="405" width="0.0801%" height="15" fill="rgb(226,58,20)" fg:x="616" fg:w="1"/><text x="49.5695%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.3195%" y="389" width="0.0801%" height="15" fill="rgb(208,98,7)" fg:x="616" fg:w="1"/><text x="49.5695%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.3195%" y="373" width="0.0801%" height="15" fill="rgb(228,143,44)" fg:x="616" fg:w="1"/><text x="49.5695%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="49.3995%" y="437" width="0.0801%" height="15" fill="rgb(246,55,38)" fg:x="617" fg:w="1"/><text x="49.6495%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.24%)</title><rect x="49.4796%" y="437" width="0.2402%" height="15" fill="rgb(247,87,16)" fg:x="618" fg:w="3"/><text x="49.7296%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (3 samples, 0.24%)</title><rect x="49.4796%" y="421" width="0.2402%" height="15" fill="rgb(234,129,42)" fg:x="618" fg:w="3"/><text x="49.7296%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="49.3195%" y="469" width="0.4804%" height="15" fill="rgb(220,82,16)" fg:x="616" fg:w="6"/><text x="49.5695%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="49.3195%" y="453" width="0.4804%" height="15" fill="rgb(211,88,4)" fg:x="616" fg:w="6"/><text x="49.5695%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="49.7198%" y="437" width="0.0801%" height="15" fill="rgb(248,151,21)" fg:x="621" fg:w="1"/><text x="49.9698%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.9600%" y="421" width="0.0801%" height="15" fill="rgb(238,163,6)" fg:x="624" fg:w="1"/><text x="50.2100%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.9600%" y="405" width="0.0801%" height="15" fill="rgb(209,183,11)" fg:x="624" fg:w="1"/><text x="50.2100%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.9600%" y="389" width="0.0801%" height="15" fill="rgb(219,37,20)" fg:x="624" fg:w="1"/><text x="50.2100%" y="399.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="50.0400%" y="421" width="0.4804%" height="15" fill="rgb(210,158,4)" fg:x="625" fg:w="6"/><text x="50.2900%" y="431.50"></text></g><g><title>core::slice::sort::merge_sort (4 samples, 0.32%)</title><rect x="50.2002%" y="405" width="0.3203%" height="15" fill="rgb(221,167,53)" fg:x="627" fg:w="4"/><text x="50.4502%" y="415.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (276 samples, 22.10%)</title><rect x="28.6629%" y="517" width="22.0977%" height="15" fill="rgb(237,151,45)" fg:x="358" fg:w="276"/><text x="28.9129%" y="527.50">&lt;regex::regex::string::Regex as cor..</text></g><g><title>regex::builders::Builder::build_one_string (275 samples, 22.02%)</title><rect x="28.7430%" y="501" width="22.0176%" height="15" fill="rgb(231,39,3)" fg:x="359" fg:w="275"/><text x="28.9930%" y="511.50">regex::builders::Builder::build_one..</text></g><g><title>regex_automata::meta::regex::Builder::build (275 samples, 22.02%)</title><rect x="28.7430%" y="485" width="22.0176%" height="15" fill="rgb(212,167,28)" fg:x="359" fg:w="275"/><text x="28.9930%" y="495.50">regex_automata::meta::regex::Builde..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.96%)</title><rect x="49.7998%" y="469" width="0.9608%" height="15" fill="rgb(232,178,8)" fg:x="622" fg:w="12"/><text x="50.0498%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (12 samples, 0.96%)</title><rect x="49.7998%" y="453" width="0.9608%" height="15" fill="rgb(225,151,20)" fg:x="622" fg:w="12"/><text x="50.0498%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (10 samples, 0.80%)</title><rect x="49.9600%" y="437" width="0.8006%" height="15" fill="rgb(238,3,37)" fg:x="624" fg:w="10"/><text x="50.2100%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (3 samples, 0.24%)</title><rect x="50.5204%" y="421" width="0.2402%" height="15" fill="rgb(251,147,42)" fg:x="631" fg:w="3"/><text x="50.7704%" y="431.50"></text></g><g><title>regex_syntax::unicode::perl_digit (3 samples, 0.24%)</title><rect x="50.5204%" y="405" width="0.2402%" height="15" fill="rgb(208,173,10)" fg:x="631" fg:w="3"/><text x="50.7704%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="50.6005%" y="389" width="0.1601%" height="15" fill="rgb(246,225,4)" fg:x="632" fg:w="2"/><text x="50.8505%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="50.8407%" y="501" width="0.1601%" height="15" fill="rgb(248,102,6)" fg:x="635" fg:w="2"/><text x="51.0907%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="50.8407%" y="485" width="0.1601%" height="15" fill="rgb(232,6,21)" fg:x="635" fg:w="2"/><text x="51.0907%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="50.8407%" y="469" width="0.1601%" height="15" fill="rgb(221,179,22)" fg:x="635" fg:w="2"/><text x="51.0907%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="50.9207%" y="453" width="0.0801%" height="15" fill="rgb(252,50,20)" fg:x="636" fg:w="1"/><text x="51.1707%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="51.0809%" y="437" width="0.0801%" height="15" fill="rgb(222,56,38)" fg:x="638" fg:w="1"/><text x="51.3309%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.6413%" y="389" width="0.0801%" height="15" fill="rgb(206,193,29)" fg:x="645" fg:w="1"/><text x="51.8913%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="51.6413%" y="421" width="0.4003%" height="15" fill="rgb(239,192,45)" fg:x="645" fg:w="5"/><text x="51.8913%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="51.6413%" y="405" width="0.4003%" height="15" fill="rgb(254,18,36)" fg:x="645" fg:w="5"/><text x="51.8913%" y="415.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="51.7214%" y="389" width="0.3203%" height="15" fill="rgb(221,127,11)" fg:x="646" fg:w="4"/><text x="51.9714%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.32%)</title><rect x="52.0416%" y="421" width="0.3203%" height="15" fill="rgb(234,146,35)" fg:x="650" fg:w="4"/><text x="52.2916%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="52.2018%" y="405" width="0.1601%" height="15" fill="rgb(254,201,37)" fg:x="652" fg:w="2"/><text x="52.4518%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="52.2018%" y="389" width="0.1601%" height="15" fill="rgb(211,202,23)" fg:x="652" fg:w="2"/><text x="52.4518%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (26 samples, 2.08%)</title><rect x="51.1609%" y="437" width="2.0817%" height="15" fill="rgb(237,91,2)" fg:x="639" fg:w="26"/><text x="51.4109%" y="447.50">r..</text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (11 samples, 0.88%)</title><rect x="52.3619%" y="421" width="0.8807%" height="15" fill="rgb(226,228,36)" fg:x="654" fg:w="11"/><text x="52.6119%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (28 samples, 2.24%)</title><rect x="51.0809%" y="453" width="2.2418%" height="15" fill="rgb(213,63,50)" fg:x="638" fg:w="28"/><text x="51.3309%" y="463.50">r..</text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="53.2426%" y="437" width="0.0801%" height="15" fill="rgb(235,194,19)" fg:x="665" fg:w="1"/><text x="53.4926%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.2426%" y="421" width="0.0801%" height="15" fill="rgb(207,204,18)" fg:x="665" fg:w="1"/><text x="53.4926%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.2426%" y="405" width="0.0801%" height="15" fill="rgb(248,8,7)" fg:x="665" fg:w="1"/><text x="53.4926%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.2426%" y="389" width="0.0801%" height="15" fill="rgb(223,145,47)" fg:x="665" fg:w="1"/><text x="53.4926%" y="399.50"></text></g><g><title>indefinite::rules::number::Number::check (309 samples, 24.74%)</title><rect x="28.6629%" y="533" width="24.7398%" height="15" fill="rgb(228,84,11)" fg:x="358" fg:w="309"/><text x="28.9129%" y="543.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (33 samples, 2.64%)</title><rect x="50.7606%" y="517" width="2.6421%" height="15" fill="rgb(218,76,45)" fg:x="634" fg:w="33"/><text x="51.0106%" y="527.50">re..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (30 samples, 2.40%)</title><rect x="51.0008%" y="501" width="2.4019%" height="15" fill="rgb(223,80,15)" fg:x="637" fg:w="30"/><text x="51.2508%" y="511.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (29 samples, 2.32%)</title><rect x="51.0809%" y="485" width="2.3219%" height="15" fill="rgb(219,218,33)" fg:x="638" fg:w="29"/><text x="51.3309%" y="495.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (29 samples, 2.32%)</title><rect x="51.0809%" y="469" width="2.3219%" height="15" fill="rgb(208,51,11)" fg:x="638" fg:w="29"/><text x="51.3309%" y="479.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="53.3227%" y="453" width="0.0801%" height="15" fill="rgb(229,165,39)" fg:x="666" fg:w="1"/><text x="53.5727%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="53.3227%" y="437" width="0.0801%" height="15" fill="rgb(241,100,24)" fg:x="666" fg:w="1"/><text x="53.5727%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.3227%" y="421" width="0.0801%" height="15" fill="rgb(228,14,23)" fg:x="666" fg:w="1"/><text x="53.5727%" y="431.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="53.4027%" y="517" width="0.0801%" height="15" fill="rgb(247,116,52)" fg:x="667" fg:w="1"/><text x="53.6527%" y="527.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="53.4027%" y="501" width="0.0801%" height="15" fill="rgb(216,149,33)" fg:x="667" fg:w="1"/><text x="53.6527%" y="511.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="53.4027%" y="485" width="0.0801%" height="15" fill="rgb(238,142,29)" fg:x="667" fg:w="1"/><text x="53.6527%" y="495.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="53.4027%" y="469" width="0.0801%" height="15" fill="rgb(224,83,40)" fg:x="667" fg:w="1"/><text x="53.6527%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.4828%" y="485" width="0.0801%" height="15" fill="rgb(234,165,11)" fg:x="668" fg:w="1"/><text x="53.7328%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.4828%" y="469" width="0.0801%" height="15" fill="rgb(215,96,23)" fg:x="668" fg:w="1"/><text x="53.7328%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4828%" y="453" width="0.0801%" height="15" fill="rgb(233,179,26)" fg:x="668" fg:w="1"/><text x="53.7328%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="53.5629%" y="453" width="0.1601%" height="15" fill="rgb(225,129,33)" fg:x="669" fg:w="2"/><text x="53.8129%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="53.5629%" y="437" width="0.1601%" height="15" fill="rgb(237,49,13)" fg:x="669" fg:w="2"/><text x="53.8129%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.6429%" y="421" width="0.0801%" height="15" fill="rgb(211,3,31)" fg:x="670" fg:w="1"/><text x="53.8929%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.7230%" y="453" width="0.0801%" height="15" fill="rgb(216,152,19)" fg:x="671" fg:w="1"/><text x="53.9730%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.9632%" y="421" width="0.0801%" height="15" fill="rgb(251,121,35)" fg:x="674" fg:w="1"/><text x="54.2132%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.9632%" y="405" width="0.0801%" height="15" fill="rgb(210,217,47)" fg:x="674" fg:w="1"/><text x="54.2132%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.9632%" y="389" width="0.0801%" height="15" fill="rgb(244,116,22)" fg:x="674" fg:w="1"/><text x="54.2132%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.9632%" y="373" width="0.0801%" height="15" fill="rgb(228,17,21)" fg:x="674" fg:w="1"/><text x="54.2132%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="53.8030%" y="453" width="0.3203%" height="15" fill="rgb(240,149,34)" fg:x="672" fg:w="4"/><text x="54.0530%" y="463.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="53.8030%" y="437" width="0.3203%" height="15" fill="rgb(208,125,47)" fg:x="672" fg:w="4"/><text x="54.0530%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="54.0432%" y="421" width="0.0801%" height="15" fill="rgb(249,186,39)" fg:x="675" fg:w="1"/><text x="54.2932%" y="431.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.0432%" y="405" width="0.0801%" height="15" fill="rgb(240,220,33)" fg:x="675" fg:w="1"/><text x="54.2932%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="54.0432%" y="389" width="0.0801%" height="15" fill="rgb(243,110,23)" fg:x="675" fg:w="1"/><text x="54.2932%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.0432%" y="373" width="0.0801%" height="15" fill="rgb(219,163,46)" fg:x="675" fg:w="1"/><text x="54.2932%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.0432%" y="357" width="0.0801%" height="15" fill="rgb(216,126,30)" fg:x="675" fg:w="1"/><text x="54.2932%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.0432%" y="341" width="0.0801%" height="15" fill="rgb(208,139,11)" fg:x="675" fg:w="1"/><text x="54.2932%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="54.2034%" y="437" width="0.1601%" height="15" fill="rgb(213,118,36)" fg:x="677" fg:w="2"/><text x="54.4534%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.72%)</title><rect x="54.3635%" y="437" width="0.7206%" height="15" fill="rgb(226,43,17)" fg:x="679" fg:w="9"/><text x="54.6135%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="54.4436%" y="421" width="0.6405%" height="15" fill="rgb(254,217,4)" fg:x="680" fg:w="8"/><text x="54.6936%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="55.1641%" y="405" width="0.1601%" height="15" fill="rgb(210,134,47)" fg:x="689" fg:w="2"/><text x="55.4141%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="55.2442%" y="389" width="0.0801%" height="15" fill="rgb(237,24,49)" fg:x="690" fg:w="1"/><text x="55.4942%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.2442%" y="373" width="0.0801%" height="15" fill="rgb(251,39,46)" fg:x="690" fg:w="1"/><text x="55.4942%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="55.2442%" y="357" width="0.0801%" height="15" fill="rgb(251,220,3)" fg:x="690" fg:w="1"/><text x="55.4942%" y="367.50"></text></g><g><title>regex_automata::meta::strategy::new (18 samples, 1.44%)</title><rect x="54.1233%" y="453" width="1.4412%" height="15" fill="rgb(228,105,12)" fg:x="676" fg:w="18"/><text x="54.3733%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="55.0841%" y="437" width="0.4804%" height="15" fill="rgb(215,196,1)" fg:x="688" fg:w="6"/><text x="55.3341%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="55.0841%" y="421" width="0.4804%" height="15" fill="rgb(214,33,39)" fg:x="688" fg:w="6"/><text x="55.3341%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="55.3243%" y="405" width="0.2402%" height="15" fill="rgb(220,19,52)" fg:x="691" fg:w="3"/><text x="55.5743%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.4844%" y="389" width="0.0801%" height="15" fill="rgb(221,78,38)" fg:x="693" fg:w="1"/><text x="55.7344%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="55.5645%" y="405" width="0.1601%" height="15" fill="rgb(253,30,16)" fg:x="694" fg:w="2"/><text x="55.8145%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="55.5645%" y="389" width="0.1601%" height="15" fill="rgb(242,65,0)" fg:x="694" fg:w="2"/><text x="55.8145%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="55.6445%" y="373" width="0.0801%" height="15" fill="rgb(235,201,12)" fg:x="695" fg:w="1"/><text x="55.8945%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="55.6445%" y="357" width="0.0801%" height="15" fill="rgb(233,161,9)" fg:x="695" fg:w="1"/><text x="55.8945%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.8046%" y="389" width="0.1601%" height="15" fill="rgb(241,207,41)" fg:x="697" fg:w="2"/><text x="56.0546%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.8046%" y="373" width="0.1601%" height="15" fill="rgb(212,69,46)" fg:x="697" fg:w="2"/><text x="56.0546%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.8046%" y="357" width="0.1601%" height="15" fill="rgb(239,69,45)" fg:x="697" fg:w="2"/><text x="56.0546%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="55.5645%" y="421" width="0.5604%" height="15" fill="rgb(242,117,48)" fg:x="694" fg:w="7"/><text x="55.8145%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="55.7246%" y="405" width="0.4003%" height="15" fill="rgb(228,41,36)" fg:x="696" fg:w="5"/><text x="55.9746%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (2 samples, 0.16%)</title><rect x="55.9648%" y="389" width="0.1601%" height="15" fill="rgb(212,3,32)" fg:x="699" fg:w="2"/><text x="56.2148%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.64%)</title><rect x="55.5645%" y="453" width="0.6405%" height="15" fill="rgb(233,41,49)" fg:x="694" fg:w="8"/><text x="55.8145%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.64%)</title><rect x="55.5645%" y="437" width="0.6405%" height="15" fill="rgb(252,170,49)" fg:x="694" fg:w="8"/><text x="55.8145%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="56.1249%" y="421" width="0.0801%" height="15" fill="rgb(229,53,26)" fg:x="701" fg:w="1"/><text x="56.3749%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.4452%" y="405" width="0.0801%" height="15" fill="rgb(217,157,12)" fg:x="705" fg:w="1"/><text x="56.6952%" y="415.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="56.5252%" y="405" width="0.0801%" height="15" fill="rgb(227,17,9)" fg:x="706" fg:w="1"/><text x="56.7752%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.5252%" y="389" width="0.0801%" height="15" fill="rgb(218,84,12)" fg:x="706" fg:w="1"/><text x="56.7752%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.5252%" y="373" width="0.0801%" height="15" fill="rgb(212,79,24)" fg:x="706" fg:w="1"/><text x="56.7752%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.5252%" y="357" width="0.0801%" height="15" fill="rgb(217,222,37)" fg:x="706" fg:w="1"/><text x="56.7752%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.40%)</title><rect x="56.2850%" y="421" width="0.4003%" height="15" fill="rgb(246,208,8)" fg:x="703" fg:w="5"/><text x="56.5350%" y="431.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="56.6053%" y="405" width="0.0801%" height="15" fill="rgb(244,133,10)" fg:x="707" fg:w="1"/><text x="56.8553%" y="415.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="56.6853%" y="405" width="0.0801%" height="15" fill="rgb(209,219,41)" fg:x="708" fg:w="1"/><text x="56.9353%" y="415.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (42 samples, 3.36%)</title><rect x="53.4828%" y="501" width="3.3627%" height="15" fill="rgb(253,175,45)" fg:x="668" fg:w="42"/><text x="53.7328%" y="511.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (41 samples, 3.28%)</title><rect x="53.5629%" y="485" width="3.2826%" height="15" fill="rgb(235,100,37)" fg:x="669" fg:w="41"/><text x="53.8129%" y="495.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (41 samples, 3.28%)</title><rect x="53.5629%" y="469" width="3.2826%" height="15" fill="rgb(225,87,19)" fg:x="669" fg:w="41"/><text x="53.8129%" y="479.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.64%)</title><rect x="56.2050%" y="453" width="0.6405%" height="15" fill="rgb(217,152,17)" fg:x="702" fg:w="8"/><text x="56.4550%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.64%)</title><rect x="56.2050%" y="437" width="0.6405%" height="15" fill="rgb(235,72,13)" fg:x="702" fg:w="8"/><text x="56.4550%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="56.6853%" y="421" width="0.1601%" height="15" fill="rgb(233,140,18)" fg:x="708" fg:w="2"/><text x="56.9353%" y="431.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="56.7654%" y="405" width="0.0801%" height="15" fill="rgb(207,212,28)" fg:x="709" fg:w="1"/><text x="57.0154%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.7654%" y="389" width="0.0801%" height="15" fill="rgb(220,130,25)" fg:x="709" fg:w="1"/><text x="57.0154%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="56.8455%" y="501" width="0.0801%" height="15" fill="rgb(205,55,34)" fg:x="710" fg:w="1"/><text x="57.0955%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="56.8455%" y="485" width="0.0801%" height="15" fill="rgb(237,54,35)" fg:x="710" fg:w="1"/><text x="57.0955%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="56.8455%" y="469" width="0.0801%" height="15" fill="rgb(208,67,23)" fg:x="710" fg:w="1"/><text x="57.0955%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="56.8455%" y="453" width="0.0801%" height="15" fill="rgb(206,207,50)" fg:x="710" fg:w="1"/><text x="57.0955%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="57.0857%" y="453" width="0.0801%" height="15" fill="rgb(213,211,42)" fg:x="713" fg:w="1"/><text x="57.3357%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="57.0857%" y="469" width="0.1601%" height="15" fill="rgb(252,197,50)" fg:x="713" fg:w="2"/><text x="57.3357%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="57.1657%" y="453" width="0.0801%" height="15" fill="rgb(251,211,41)" fg:x="714" fg:w="1"/><text x="57.4157%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="57.1657%" y="437" width="0.0801%" height="15" fill="rgb(229,211,5)" fg:x="714" fg:w="1"/><text x="57.4157%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.1657%" y="421" width="0.0801%" height="15" fill="rgb(239,36,31)" fg:x="714" fg:w="1"/><text x="57.4157%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="56.9255%" y="501" width="0.4003%" height="15" fill="rgb(248,67,31)" fg:x="711" fg:w="5"/><text x="57.1755%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="57.0056%" y="485" width="0.3203%" height="15" fill="rgb(249,55,44)" fg:x="712" fg:w="4"/><text x="57.2556%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="57.2458%" y="469" width="0.0801%" height="15" fill="rgb(216,82,12)" fg:x="715" fg:w="1"/><text x="57.4958%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="57.2458%" y="453" width="0.0801%" height="15" fill="rgb(242,174,1)" fg:x="715" fg:w="1"/><text x="57.4958%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="57.2458%" y="437" width="0.0801%" height="15" fill="rgb(208,120,29)" fg:x="715" fg:w="1"/><text x="57.4958%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="57.6461%" y="389" width="0.1601%" height="15" fill="rgb(221,105,43)" fg:x="720" fg:w="2"/><text x="57.8961%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="57.6461%" y="421" width="0.2402%" height="15" fill="rgb(234,124,22)" fg:x="720" fg:w="3"/><text x="57.8961%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="57.6461%" y="405" width="0.2402%" height="15" fill="rgb(212,23,30)" fg:x="720" fg:w="3"/><text x="57.8961%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.8062%" y="389" width="0.0801%" height="15" fill="rgb(219,122,53)" fg:x="722" fg:w="1"/><text x="58.0562%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="57.4860%" y="437" width="0.4804%" height="15" fill="rgb(248,84,24)" fg:x="718" fg:w="6"/><text x="57.7360%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="57.8863%" y="421" width="0.0801%" height="15" fill="rgb(245,115,18)" fg:x="723" fg:w="1"/><text x="58.1363%" y="431.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (59 samples, 4.72%)</title><rect x="53.4828%" y="517" width="4.7238%" height="15" fill="rgb(227,176,51)" fg:x="668" fg:w="59"/><text x="53.7328%" y="527.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="57.3259%" y="501" width="0.8807%" height="15" fill="rgb(229,63,42)" fg:x="716" fg:w="11"/><text x="57.5759%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="57.3259%" y="485" width="0.8807%" height="15" fill="rgb(247,202,24)" fg:x="716" fg:w="11"/><text x="57.5759%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="57.3259%" y="469" width="0.8807%" height="15" fill="rgb(244,173,20)" fg:x="716" fg:w="11"/><text x="57.5759%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.72%)</title><rect x="57.4860%" y="453" width="0.7206%" height="15" fill="rgb(242,81,47)" fg:x="718" fg:w="9"/><text x="57.7360%" y="463.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="57.9664%" y="437" width="0.2402%" height="15" fill="rgb(231,185,54)" fg:x="724" fg:w="3"/><text x="58.2164%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="57.9664%" y="421" width="0.2402%" height="15" fill="rgb(243,55,32)" fg:x="724" fg:w="3"/><text x="58.2164%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="57.9664%" y="405" width="0.2402%" height="15" fill="rgb(208,167,19)" fg:x="724" fg:w="3"/><text x="58.2164%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="58.0464%" y="389" width="0.1601%" height="15" fill="rgb(231,72,35)" fg:x="725" fg:w="2"/><text x="58.2964%" y="399.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (601 samples, 48.12%)</title><rect x="10.3283%" y="613" width="48.1185%" height="15" fill="rgb(250,173,51)" fg:x="129" fg:w="601"/><text x="10.5783%" y="623.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies:..</text></g><g><title>plugins_core::looking::model::qualify_name (580 samples, 46.44%)</title><rect x="12.0096%" y="597" width="46.4371%" height="15" fill="rgb(209,5,22)" fg:x="150" fg:w="580"/><text x="12.2596%" y="607.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (579 samples, 46.36%)</title><rect x="12.0897%" y="581" width="46.3571%" height="15" fill="rgb(250,174,19)" fg:x="151" fg:w="579"/><text x="12.3397%" y="591.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (579 samples, 46.36%)</title><rect x="12.0897%" y="565" width="46.3571%" height="15" fill="rgb(217,3,49)" fg:x="151" fg:w="579"/><text x="12.3397%" y="575.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (576 samples, 46.12%)</title><rect x="12.3299%" y="549" width="46.1169%" height="15" fill="rgb(218,225,5)" fg:x="154" fg:w="576"/><text x="12.5799%" y="559.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (63 samples, 5.04%)</title><rect x="53.4027%" y="533" width="5.0440%" height="15" fill="rgb(236,89,11)" fg:x="667" fg:w="63"/><text x="53.6527%" y="543.50">indefi..</text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.24%)</title><rect x="58.2066%" y="517" width="0.2402%" height="15" fill="rgb(206,33,28)" fg:x="727" fg:w="3"/><text x="58.4566%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="58.4468%" y="613" width="0.0801%" height="15" fill="rgb(241,56,42)" fg:x="730" fg:w="1"/><text x="58.6968%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="58.4468%" y="597" width="0.0801%" height="15" fill="rgb(222,44,11)" fg:x="730" fg:w="1"/><text x="58.6968%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="58.4468%" y="581" width="0.0801%" height="15" fill="rgb(234,111,20)" fg:x="730" fg:w="1"/><text x="58.6968%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="58.4468%" y="565" width="0.0801%" height="15" fill="rgb(237,77,6)" fg:x="730" fg:w="1"/><text x="58.6968%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="58.4468%" y="549" width="0.0801%" height="15" fill="rgb(235,111,23)" fg:x="730" fg:w="1"/><text x="58.6968%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="58.4468%" y="533" width="0.0801%" height="15" fill="rgb(251,135,29)" fg:x="730" fg:w="1"/><text x="58.6968%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="58.4468%" y="517" width="0.0801%" height="15" fill="rgb(217,57,1)" fg:x="730" fg:w="1"/><text x="58.6968%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="58.4468%" y="501" width="0.0801%" height="15" fill="rgb(249,119,31)" fg:x="730" fg:w="1"/><text x="58.6968%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="58.4468%" y="485" width="0.0801%" height="15" fill="rgb(233,164,33)" fg:x="730" fg:w="1"/><text x="58.6968%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="58.4468%" y="469" width="0.0801%" height="15" fill="rgb(250,217,43)" fg:x="730" fg:w="1"/><text x="58.6968%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="58.4468%" y="453" width="0.0801%" height="15" fill="rgb(232,154,50)" fg:x="730" fg:w="1"/><text x="58.6968%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="58.4468%" y="437" width="0.0801%" height="15" fill="rgb(227,190,8)" fg:x="730" fg:w="1"/><text x="58.6968%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="58.4468%" y="421" width="0.0801%" height="15" fill="rgb(209,217,32)" fg:x="730" fg:w="1"/><text x="58.6968%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="58.4468%" y="405" width="0.0801%" height="15" fill="rgb(243,203,50)" fg:x="730" fg:w="1"/><text x="58.6968%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="58.4468%" y="389" width="0.0801%" height="15" fill="rgb(232,152,27)" fg:x="730" fg:w="1"/><text x="58.6968%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="58.4468%" y="373" width="0.0801%" height="15" fill="rgb(240,34,29)" fg:x="730" fg:w="1"/><text x="58.6968%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="58.4468%" y="357" width="0.0801%" height="15" fill="rgb(215,185,52)" fg:x="730" fg:w="1"/><text x="58.6968%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="58.4468%" y="341" width="0.0801%" height="15" fill="rgb(240,89,49)" fg:x="730" fg:w="1"/><text x="58.6968%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.4468%" y="325" width="0.0801%" height="15" fill="rgb(225,12,52)" fg:x="730" fg:w="1"/><text x="58.6968%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="58.4468%" y="309" width="0.0801%" height="15" fill="rgb(239,128,45)" fg:x="730" fg:w="1"/><text x="58.6968%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.4468%" y="293" width="0.0801%" height="15" fill="rgb(211,78,47)" fg:x="730" fg:w="1"/><text x="58.6968%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="58.5268%" y="613" width="0.0801%" height="15" fill="rgb(232,31,21)" fg:x="731" fg:w="1"/><text x="58.7768%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="58.5268%" y="597" width="0.0801%" height="15" fill="rgb(222,168,14)" fg:x="731" fg:w="1"/><text x="58.7768%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.5268%" y="581" width="0.0801%" height="15" fill="rgb(209,128,24)" fg:x="731" fg:w="1"/><text x="58.7768%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (6 samples, 0.48%)</title><rect x="58.6069%" y="581" width="0.4804%" height="15" fill="rgb(249,35,13)" fg:x="732" fg:w="6"/><text x="58.8569%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6 samples, 0.48%)</title><rect x="58.6069%" y="565" width="0.4804%" height="15" fill="rgb(218,7,2)" fg:x="732" fg:w="6"/><text x="58.8569%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="58.7670%" y="549" width="0.3203%" height="15" fill="rgb(238,107,27)" fg:x="734" fg:w="4"/><text x="59.0170%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.0072%" y="533" width="0.0801%" height="15" fill="rgb(217,88,38)" fg:x="737" fg:w="1"/><text x="59.2572%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.0072%" y="517" width="0.0801%" height="15" fill="rgb(230,207,0)" fg:x="737" fg:w="1"/><text x="59.2572%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.0072%" y="501" width="0.0801%" height="15" fill="rgb(249,64,54)" fg:x="737" fg:w="1"/><text x="59.2572%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.0072%" y="485" width="0.0801%" height="15" fill="rgb(231,7,11)" fg:x="737" fg:w="1"/><text x="59.2572%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.0072%" y="469" width="0.0801%" height="15" fill="rgb(205,149,21)" fg:x="737" fg:w="1"/><text x="59.2572%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.0072%" y="453" width="0.0801%" height="15" fill="rgb(215,126,34)" fg:x="737" fg:w="1"/><text x="59.2572%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.0072%" y="437" width="0.0801%" height="15" fill="rgb(241,132,45)" fg:x="737" fg:w="1"/><text x="59.2572%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.0072%" y="421" width="0.0801%" height="15" fill="rgb(252,69,32)" fg:x="737" fg:w="1"/><text x="59.2572%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.0072%" y="405" width="0.0801%" height="15" fill="rgb(232,204,19)" fg:x="737" fg:w="1"/><text x="59.2572%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.0072%" y="389" width="0.0801%" height="15" fill="rgb(249,15,47)" fg:x="737" fg:w="1"/><text x="59.2572%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.0072%" y="373" width="0.0801%" height="15" fill="rgb(209,227,23)" fg:x="737" fg:w="1"/><text x="59.2572%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.0072%" y="357" width="0.0801%" height="15" fill="rgb(248,92,24)" fg:x="737" fg:w="1"/><text x="59.2572%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.0072%" y="341" width="0.0801%" height="15" fill="rgb(247,59,2)" fg:x="737" fg:w="1"/><text x="59.2572%" y="351.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (610 samples, 48.84%)</title><rect x="10.3283%" y="645" width="48.8391%" height="15" fill="rgb(221,30,5)" fg:x="129" fg:w="610"/><text x="10.5783%" y="655.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (610 samples, 48.84%)</title><rect x="10.3283%" y="629" width="48.8391%" height="15" fill="rgb(208,108,53)" fg:x="129" fg:w="610"/><text x="10.5783%" y="639.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.56%)</title><rect x="58.6069%" y="613" width="0.5604%" height="15" fill="rgb(211,183,26)" fg:x="732" fg:w="7"/><text x="58.8569%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (7 samples, 0.56%)</title><rect x="58.6069%" y="597" width="0.5604%" height="15" fill="rgb(232,132,4)" fg:x="732" fg:w="7"/><text x="58.8569%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.0873%" y="581" width="0.0801%" height="15" fill="rgb(253,128,37)" fg:x="738" fg:w="1"/><text x="59.3373%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.0873%" y="565" width="0.0801%" height="15" fill="rgb(221,58,24)" fg:x="738" fg:w="1"/><text x="59.3373%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.0873%" y="549" width="0.0801%" height="15" fill="rgb(230,54,45)" fg:x="738" fg:w="1"/><text x="59.3373%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.1673%" y="645" width="0.0801%" height="15" fill="rgb(254,21,18)" fg:x="739" fg:w="1"/><text x="59.4173%" y="655.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="59.2474%" y="405" width="0.0801%" height="15" fill="rgb(221,108,0)" fg:x="740" fg:w="1"/><text x="59.4974%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.2474%" y="389" width="0.0801%" height="15" fill="rgb(206,95,1)" fg:x="740" fg:w="1"/><text x="59.4974%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="59.3275%" y="405" width="0.0801%" height="15" fill="rgb(237,52,5)" fg:x="741" fg:w="1"/><text x="59.5775%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.3275%" y="389" width="0.0801%" height="15" fill="rgb(218,150,34)" fg:x="741" fg:w="1"/><text x="59.5775%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="59.3275%" y="373" width="0.0801%" height="15" fill="rgb(235,194,28)" fg:x="741" fg:w="1"/><text x="59.5775%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="59.3275%" y="357" width="0.0801%" height="15" fill="rgb(245,92,18)" fg:x="741" fg:w="1"/><text x="59.5775%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.3275%" y="341" width="0.0801%" height="15" fill="rgb(253,203,53)" fg:x="741" fg:w="1"/><text x="59.5775%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="59.2474%" y="581" width="0.2402%" height="15" fill="rgb(249,185,47)" fg:x="740" fg:w="3"/><text x="59.4974%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="59.2474%" y="565" width="0.2402%" height="15" fill="rgb(252,194,52)" fg:x="740" fg:w="3"/><text x="59.4974%" y="575.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="59.2474%" y="549" width="0.2402%" height="15" fill="rgb(210,53,36)" fg:x="740" fg:w="3"/><text x="59.4974%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="59.2474%" y="533" width="0.2402%" height="15" fill="rgb(237,37,25)" fg:x="740" fg:w="3"/><text x="59.4974%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="59.2474%" y="517" width="0.2402%" height="15" fill="rgb(242,116,27)" fg:x="740" fg:w="3"/><text x="59.4974%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="59.2474%" y="501" width="0.2402%" height="15" fill="rgb(213,185,26)" fg:x="740" fg:w="3"/><text x="59.4974%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="59.2474%" y="485" width="0.2402%" height="15" fill="rgb(225,204,8)" fg:x="740" fg:w="3"/><text x="59.4974%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.2474%" y="469" width="0.2402%" height="15" fill="rgb(254,111,37)" fg:x="740" fg:w="3"/><text x="59.4974%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="59.2474%" y="453" width="0.2402%" height="15" fill="rgb(242,35,9)" fg:x="740" fg:w="3"/><text x="59.4974%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="59.2474%" y="437" width="0.2402%" height="15" fill="rgb(232,138,49)" fg:x="740" fg:w="3"/><text x="59.4974%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="59.2474%" y="421" width="0.2402%" height="15" fill="rgb(247,56,4)" fg:x="740" fg:w="3"/><text x="59.4974%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.4075%" y="405" width="0.0801%" height="15" fill="rgb(226,179,17)" fg:x="742" fg:w="1"/><text x="59.6575%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.4075%" y="389" width="0.0801%" height="15" fill="rgb(216,163,45)" fg:x="742" fg:w="1"/><text x="59.6575%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="59.4075%" y="373" width="0.0801%" height="15" fill="rgb(211,157,3)" fg:x="742" fg:w="1"/><text x="59.6575%" y="383.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="59.4075%" y="357" width="0.0801%" height="15" fill="rgb(234,44,20)" fg:x="742" fg:w="1"/><text x="59.6575%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="59.4075%" y="341" width="0.0801%" height="15" fill="rgb(254,138,23)" fg:x="742" fg:w="1"/><text x="59.6575%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.4075%" y="325" width="0.0801%" height="15" fill="rgb(206,119,39)" fg:x="742" fg:w="1"/><text x="59.6575%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="59.4075%" y="309" width="0.0801%" height="15" fill="rgb(231,105,52)" fg:x="742" fg:w="1"/><text x="59.6575%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4075%" y="293" width="0.0801%" height="15" fill="rgb(250,20,5)" fg:x="742" fg:w="1"/><text x="59.6575%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.4876%" y="581" width="0.0801%" height="15" fill="rgb(215,198,30)" fg:x="743" fg:w="1"/><text x="59.7376%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.4876%" y="565" width="0.0801%" height="15" fill="rgb(246,142,8)" fg:x="743" fg:w="1"/><text x="59.7376%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.4876%" y="549" width="0.0801%" height="15" fill="rgb(243,26,38)" fg:x="743" fg:w="1"/><text x="59.7376%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.4876%" y="533" width="0.0801%" height="15" fill="rgb(205,133,28)" fg:x="743" fg:w="1"/><text x="59.7376%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.4876%" y="517" width="0.0801%" height="15" fill="rgb(212,34,0)" fg:x="743" fg:w="1"/><text x="59.7376%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.4876%" y="501" width="0.0801%" height="15" fill="rgb(251,226,22)" fg:x="743" fg:w="1"/><text x="59.7376%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.4876%" y="485" width="0.0801%" height="15" fill="rgb(252,119,9)" fg:x="743" fg:w="1"/><text x="59.7376%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.4876%" y="469" width="0.0801%" height="15" fill="rgb(213,150,50)" fg:x="743" fg:w="1"/><text x="59.7376%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="59.4876%" y="453" width="0.0801%" height="15" fill="rgb(212,24,39)" fg:x="743" fg:w="1"/><text x="59.7376%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="59.4876%" y="437" width="0.0801%" height="15" fill="rgb(213,46,39)" fg:x="743" fg:w="1"/><text x="59.7376%" y="447.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="59.5677%" y="581" width="0.0801%" height="15" fill="rgb(239,106,12)" fg:x="744" fg:w="1"/><text x="59.8177%" y="591.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (6 samples, 0.48%)</title><rect x="59.2474%" y="629" width="0.4804%" height="15" fill="rgb(249,229,21)" fg:x="740" fg:w="6"/><text x="59.4974%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (6 samples, 0.48%)</title><rect x="59.2474%" y="613" width="0.4804%" height="15" fill="rgb(212,158,3)" fg:x="740" fg:w="6"/><text x="59.4974%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (6 samples, 0.48%)</title><rect x="59.2474%" y="597" width="0.4804%" height="15" fill="rgb(253,26,48)" fg:x="740" fg:w="6"/><text x="59.4974%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.6477%" y="581" width="0.0801%" height="15" fill="rgb(238,178,20)" fg:x="745" fg:w="1"/><text x="59.8977%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.6477%" y="565" width="0.0801%" height="15" fill="rgb(208,86,15)" fg:x="745" fg:w="1"/><text x="59.8977%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="59.7278%" y="597" width="0.0801%" height="15" fill="rgb(239,42,53)" fg:x="746" fg:w="1"/><text x="59.9778%" y="607.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="59.7278%" y="581" width="0.0801%" height="15" fill="rgb(245,226,8)" fg:x="746" fg:w="1"/><text x="59.9778%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.7278%" y="565" width="0.0801%" height="15" fill="rgb(216,176,32)" fg:x="746" fg:w="1"/><text x="59.9778%" y="575.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (8 samples, 0.64%)</title><rect x="59.2474%" y="645" width="0.6405%" height="15" fill="rgb(231,186,21)" fg:x="740" fg:w="8"/><text x="59.4974%" y="655.50"></text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="59.7278%" y="629" width="0.1601%" height="15" fill="rgb(205,95,49)" fg:x="746" fg:w="2"/><text x="59.9778%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="59.7278%" y="613" width="0.1601%" height="15" fill="rgb(217,145,8)" fg:x="746" fg:w="2"/><text x="59.9778%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="59.8078%" y="597" width="0.0801%" height="15" fill="rgb(239,144,48)" fg:x="747" fg:w="1"/><text x="60.0578%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="59.8078%" y="581" width="0.0801%" height="15" fill="rgb(214,189,23)" fg:x="747" fg:w="1"/><text x="60.0578%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="59.8078%" y="565" width="0.0801%" height="15" fill="rgb(229,157,17)" fg:x="747" fg:w="1"/><text x="60.0578%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="59.8078%" y="549" width="0.0801%" height="15" fill="rgb(230,5,48)" fg:x="747" fg:w="1"/><text x="60.0578%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="59.8078%" y="533" width="0.0801%" height="15" fill="rgb(224,156,48)" fg:x="747" fg:w="1"/><text x="60.0578%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="59.8078%" y="517" width="0.0801%" height="15" fill="rgb(223,14,29)" fg:x="747" fg:w="1"/><text x="60.0578%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="59.8078%" y="501" width="0.0801%" height="15" fill="rgb(229,96,36)" fg:x="747" fg:w="1"/><text x="60.0578%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="59.8078%" y="485" width="0.0801%" height="15" fill="rgb(231,102,53)" fg:x="747" fg:w="1"/><text x="60.0578%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="59.8078%" y="469" width="0.0801%" height="15" fill="rgb(210,77,38)" fg:x="747" fg:w="1"/><text x="60.0578%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="59.8078%" y="453" width="0.0801%" height="15" fill="rgb(235,131,6)" fg:x="747" fg:w="1"/><text x="60.0578%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="59.8078%" y="437" width="0.0801%" height="15" fill="rgb(252,55,38)" fg:x="747" fg:w="1"/><text x="60.0578%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="59.8078%" y="421" width="0.0801%" height="15" fill="rgb(246,38,14)" fg:x="747" fg:w="1"/><text x="60.0578%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.8078%" y="405" width="0.0801%" height="15" fill="rgb(242,27,5)" fg:x="747" fg:w="1"/><text x="60.0578%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="59.8078%" y="389" width="0.0801%" height="15" fill="rgb(228,65,35)" fg:x="747" fg:w="1"/><text x="60.0578%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="59.8078%" y="373" width="0.0801%" height="15" fill="rgb(245,93,11)" fg:x="747" fg:w="1"/><text x="60.0578%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="59.8078%" y="357" width="0.0801%" height="15" fill="rgb(213,1,31)" fg:x="747" fg:w="1"/><text x="60.0578%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.8078%" y="341" width="0.0801%" height="15" fill="rgb(237,205,14)" fg:x="747" fg:w="1"/><text x="60.0578%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="59.8078%" y="325" width="0.0801%" height="15" fill="rgb(232,118,45)" fg:x="747" fg:w="1"/><text x="60.0578%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.0480%" y="533" width="0.0801%" height="15" fill="rgb(218,5,6)" fg:x="750" fg:w="1"/><text x="60.2980%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.0480%" y="517" width="0.0801%" height="15" fill="rgb(251,87,51)" fg:x="750" fg:w="1"/><text x="60.2980%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0480%" y="501" width="0.0801%" height="15" fill="rgb(207,225,20)" fg:x="750" fg:w="1"/><text x="60.2980%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.0480%" y="565" width="0.1601%" height="15" fill="rgb(222,78,54)" fg:x="750" fg:w="2"/><text x="60.2980%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="60.0480%" y="549" width="0.1601%" height="15" fill="rgb(232,85,16)" fg:x="750" fg:w="2"/><text x="60.2980%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.1281%" y="533" width="0.0801%" height="15" fill="rgb(244,25,33)" fg:x="751" fg:w="1"/><text x="60.3781%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="59.9680%" y="581" width="0.3203%" height="15" fill="rgb(233,24,36)" fg:x="749" fg:w="4"/><text x="60.2180%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2082%" y="565" width="0.0801%" height="15" fill="rgb(253,49,54)" fg:x="752" fg:w="1"/><text x="60.4582%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (6 samples, 0.48%)</title><rect x="59.8879%" y="613" width="0.4804%" height="15" fill="rgb(245,12,22)" fg:x="748" fg:w="6"/><text x="60.1379%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="59.9680%" y="597" width="0.4003%" height="15" fill="rgb(253,141,28)" fg:x="749" fg:w="5"/><text x="60.2180%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2882%" y="581" width="0.0801%" height="15" fill="rgb(225,207,27)" fg:x="753" fg:w="1"/><text x="60.5382%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5284%" y="565" width="0.0801%" height="15" fill="rgb(220,84,2)" fg:x="756" fg:w="1"/><text x="60.7784%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="60.5284%" y="581" width="0.1601%" height="15" fill="rgb(224,37,37)" fg:x="756" fg:w="2"/><text x="60.7784%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.08%)</title><rect x="60.6085%" y="565" width="0.0801%" height="15" fill="rgb(220,143,18)" fg:x="757" fg:w="1"/><text x="60.8585%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="60.6886%" y="581" width="0.0801%" height="15" fill="rgb(210,88,33)" fg:x="758" fg:w="1"/><text x="60.9386%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="60.6886%" y="565" width="0.0801%" height="15" fill="rgb(219,87,51)" fg:x="758" fg:w="1"/><text x="60.9386%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.6886%" y="549" width="0.0801%" height="15" fill="rgb(211,7,35)" fg:x="758" fg:w="1"/><text x="60.9386%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="60.7686%" y="517" width="0.0801%" height="15" fill="rgb(232,77,2)" fg:x="759" fg:w="1"/><text x="61.0186%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="60.7686%" y="501" width="0.0801%" height="15" fill="rgb(249,94,25)" fg:x="759" fg:w="1"/><text x="61.0186%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="60.7686%" y="485" width="0.0801%" height="15" fill="rgb(215,112,2)" fg:x="759" fg:w="1"/><text x="61.0186%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="60.7686%" y="469" width="0.0801%" height="15" fill="rgb(226,115,48)" fg:x="759" fg:w="1"/><text x="61.0186%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="60.7686%" y="453" width="0.0801%" height="15" fill="rgb(249,196,10)" fg:x="759" fg:w="1"/><text x="61.0186%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="60.7686%" y="437" width="0.0801%" height="15" fill="rgb(237,109,14)" fg:x="759" fg:w="1"/><text x="61.0186%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="60.7686%" y="421" width="0.0801%" height="15" fill="rgb(217,103,53)" fg:x="759" fg:w="1"/><text x="61.0186%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.7686%" y="405" width="0.0801%" height="15" fill="rgb(244,137,9)" fg:x="759" fg:w="1"/><text x="61.0186%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.7686%" y="389" width="0.0801%" height="15" fill="rgb(227,201,3)" fg:x="759" fg:w="1"/><text x="61.0186%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="60.7686%" y="373" width="0.0801%" height="15" fill="rgb(243,94,6)" fg:x="759" fg:w="1"/><text x="61.0186%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="60.7686%" y="357" width="0.0801%" height="15" fill="rgb(235,118,5)" fg:x="759" fg:w="1"/><text x="61.0186%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="60.7686%" y="341" width="0.0801%" height="15" fill="rgb(247,10,30)" fg:x="759" fg:w="1"/><text x="61.0186%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="60.7686%" y="325" width="0.0801%" height="15" fill="rgb(205,26,28)" fg:x="759" fg:w="1"/><text x="61.0186%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="60.7686%" y="309" width="0.0801%" height="15" fill="rgb(206,99,35)" fg:x="759" fg:w="1"/><text x="61.0186%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="60.8487%" y="501" width="0.0801%" height="15" fill="rgb(238,130,40)" fg:x="760" fg:w="1"/><text x="61.0987%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.8487%" y="485" width="0.0801%" height="15" fill="rgb(224,126,31)" fg:x="760" fg:w="1"/><text x="61.0987%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="60.9287%" y="405" width="0.0801%" height="15" fill="rgb(254,105,17)" fg:x="761" fg:w="1"/><text x="61.1787%" y="415.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="60.9287%" y="389" width="0.0801%" height="15" fill="rgb(216,87,36)" fg:x="761" fg:w="1"/><text x="61.1787%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="60.9287%" y="373" width="0.0801%" height="15" fill="rgb(240,21,12)" fg:x="761" fg:w="1"/><text x="61.1787%" y="383.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="60.9287%" y="357" width="0.0801%" height="15" fill="rgb(245,192,34)" fg:x="761" fg:w="1"/><text x="61.1787%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="60.9287%" y="341" width="0.0801%" height="15" fill="rgb(226,100,49)" fg:x="761" fg:w="1"/><text x="61.1787%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.9287%" y="325" width="0.0801%" height="15" fill="rgb(245,188,27)" fg:x="761" fg:w="1"/><text x="61.1787%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9287%" y="309" width="0.0801%" height="15" fill="rgb(212,170,8)" fg:x="761" fg:w="1"/><text x="61.1787%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="60.9287%" y="293" width="0.0801%" height="15" fill="rgb(217,113,29)" fg:x="761" fg:w="1"/><text x="61.1787%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9287%" y="277" width="0.0801%" height="15" fill="rgb(237,30,3)" fg:x="761" fg:w="1"/><text x="61.1787%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="60.9287%" y="261" width="0.0801%" height="15" fill="rgb(227,19,28)" fg:x="761" fg:w="1"/><text x="61.1787%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.9287%" y="245" width="0.0801%" height="15" fill="rgb(239,172,45)" fg:x="761" fg:w="1"/><text x="61.1787%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.9287%" y="229" width="0.0801%" height="15" fill="rgb(254,55,39)" fg:x="761" fg:w="1"/><text x="61.1787%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.9287%" y="213" width="0.0801%" height="15" fill="rgb(249,208,12)" fg:x="761" fg:w="1"/><text x="61.1787%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="60.9287%" y="197" width="0.0801%" height="15" fill="rgb(240,52,13)" fg:x="761" fg:w="1"/><text x="61.1787%" y="207.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="61.0088%" y="389" width="0.0801%" height="15" fill="rgb(252,149,13)" fg:x="762" fg:w="1"/><text x="61.2588%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="61.0088%" y="373" width="0.0801%" height="15" fill="rgb(232,81,48)" fg:x="762" fg:w="1"/><text x="61.2588%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.0088%" y="357" width="0.0801%" height="15" fill="rgb(222,144,2)" fg:x="762" fg:w="1"/><text x="61.2588%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0088%" y="341" width="0.0801%" height="15" fill="rgb(216,81,32)" fg:x="762" fg:w="1"/><text x="61.2588%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.0088%" y="325" width="0.0801%" height="15" fill="rgb(244,78,51)" fg:x="762" fg:w="1"/><text x="61.2588%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0088%" y="309" width="0.0801%" height="15" fill="rgb(217,66,21)" fg:x="762" fg:w="1"/><text x="61.2588%" y="319.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.0088%" y="293" width="0.0801%" height="15" fill="rgb(247,101,42)" fg:x="762" fg:w="1"/><text x="61.2588%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0088%" y="277" width="0.0801%" height="15" fill="rgb(227,81,39)" fg:x="762" fg:w="1"/><text x="61.2588%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0088%" y="261" width="0.0801%" height="15" fill="rgb(220,223,44)" fg:x="762" fg:w="1"/><text x="61.2588%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.0088%" y="245" width="0.0801%" height="15" fill="rgb(205,218,2)" fg:x="762" fg:w="1"/><text x="61.2588%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0088%" y="229" width="0.0801%" height="15" fill="rgb(212,207,28)" fg:x="762" fg:w="1"/><text x="61.2588%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0088%" y="213" width="0.0801%" height="15" fill="rgb(224,12,41)" fg:x="762" fg:w="1"/><text x="61.2588%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.0088%" y="197" width="0.0801%" height="15" fill="rgb(216,118,12)" fg:x="762" fg:w="1"/><text x="61.2588%" y="207.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0088%" y="181" width="0.0801%" height="15" fill="rgb(252,97,46)" fg:x="762" fg:w="1"/><text x="61.2588%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0088%" y="165" width="0.0801%" height="15" fill="rgb(244,206,19)" fg:x="762" fg:w="1"/><text x="61.2588%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.0088%" y="149" width="0.0801%" height="15" fill="rgb(231,84,31)" fg:x="762" fg:w="1"/><text x="61.2588%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0088%" y="133" width="0.0801%" height="15" fill="rgb(244,133,0)" fg:x="762" fg:w="1"/><text x="61.2588%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0088%" y="117" width="0.0801%" height="15" fill="rgb(223,15,50)" fg:x="762" fg:w="1"/><text x="61.2588%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="61.0088%" y="101" width="0.0801%" height="15" fill="rgb(250,118,49)" fg:x="762" fg:w="1"/><text x="61.2588%" y="111.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.0088%" y="85" width="0.0801%" height="15" fill="rgb(248,25,38)" fg:x="762" fg:w="1"/><text x="61.2588%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0088%" y="69" width="0.0801%" height="15" fill="rgb(215,70,14)" fg:x="762" fg:w="1"/><text x="61.2588%" y="79.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="61.0088%" y="53" width="0.0801%" height="15" fill="rgb(215,28,15)" fg:x="762" fg:w="1"/><text x="61.2588%" y="63.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.0088%" y="37" width="0.0801%" height="15" fill="rgb(243,6,28)" fg:x="762" fg:w="1"/><text x="61.2588%" y="47.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="60.9287%" y="453" width="0.2402%" height="15" fill="rgb(222,130,1)" fg:x="761" fg:w="3"/><text x="61.1787%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="60.9287%" y="437" width="0.2402%" height="15" fill="rgb(236,166,44)" fg:x="761" fg:w="3"/><text x="61.1787%" y="447.50"></text></g><g><title>engine::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="60.9287%" y="421" width="0.2402%" height="15" fill="rgb(221,108,14)" fg:x="761" fg:w="3"/><text x="61.1787%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="61.0088%" y="405" width="0.1601%" height="15" fill="rgb(252,3,45)" fg:x="762" fg:w="2"/><text x="61.2588%" y="415.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="61.0889%" y="389" width="0.0801%" height="15" fill="rgb(237,68,30)" fg:x="763" fg:w="1"/><text x="61.3389%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.0889%" y="373" width="0.0801%" height="15" fill="rgb(211,79,22)" fg:x="763" fg:w="1"/><text x="61.3389%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0889%" y="357" width="0.0801%" height="15" fill="rgb(252,185,21)" fg:x="763" fg:w="1"/><text x="61.3389%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.0889%" y="341" width="0.0801%" height="15" fill="rgb(225,189,26)" fg:x="763" fg:w="1"/><text x="61.3389%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0889%" y="325" width="0.0801%" height="15" fill="rgb(241,30,40)" fg:x="763" fg:w="1"/><text x="61.3389%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="61.0889%" y="309" width="0.0801%" height="15" fill="rgb(235,215,44)" fg:x="763" fg:w="1"/><text x="61.3389%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="61.0889%" y="293" width="0.0801%" height="15" fill="rgb(205,8,29)" fg:x="763" fg:w="1"/><text x="61.3389%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.0889%" y="277" width="0.0801%" height="15" fill="rgb(241,137,42)" fg:x="763" fg:w="1"/><text x="61.3389%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.0889%" y="261" width="0.0801%" height="15" fill="rgb(237,155,2)" fg:x="763" fg:w="1"/><text x="61.3389%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.1689%" y="453" width="0.0801%" height="15" fill="rgb(245,29,42)" fg:x="764" fg:w="1"/><text x="61.4189%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.1689%" y="437" width="0.0801%" height="15" fill="rgb(234,101,35)" fg:x="764" fg:w="1"/><text x="61.4189%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.1689%" y="421" width="0.0801%" height="15" fill="rgb(228,64,37)" fg:x="764" fg:w="1"/><text x="61.4189%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6 samples, 0.48%)</title><rect x="60.8487%" y="517" width="0.4804%" height="15" fill="rgb(217,214,36)" fg:x="760" fg:w="6"/><text x="61.0987%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (5 samples, 0.40%)</title><rect x="60.9287%" y="501" width="0.4003%" height="15" fill="rgb(243,70,3)" fg:x="761" fg:w="5"/><text x="61.1787%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (5 samples, 0.40%)</title><rect x="60.9287%" y="485" width="0.4003%" height="15" fill="rgb(253,158,52)" fg:x="761" fg:w="5"/><text x="61.1787%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (5 samples, 0.40%)</title><rect x="60.9287%" y="469" width="0.4003%" height="15" fill="rgb(234,111,54)" fg:x="761" fg:w="5"/><text x="61.1787%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.2490%" y="453" width="0.0801%" height="15" fill="rgb(217,70,32)" fg:x="765" fg:w="1"/><text x="61.4990%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2490%" y="437" width="0.0801%" height="15" fill="rgb(234,18,33)" fg:x="765" fg:w="1"/><text x="61.4990%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.2490%" y="421" width="0.0801%" height="15" fill="rgb(234,12,49)" fg:x="765" fg:w="1"/><text x="61.4990%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.2490%" y="405" width="0.0801%" height="15" fill="rgb(236,10,21)" fg:x="765" fg:w="1"/><text x="61.4990%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.3291%" y="485" width="0.0801%" height="15" fill="rgb(248,182,45)" fg:x="766" fg:w="1"/><text x="61.5791%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.3291%" y="469" width="0.0801%" height="15" fill="rgb(217,95,36)" fg:x="766" fg:w="1"/><text x="61.5791%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.3291%" y="453" width="0.0801%" height="15" fill="rgb(212,110,31)" fg:x="766" fg:w="1"/><text x="61.5791%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="61.4091%" y="485" width="0.0801%" height="15" fill="rgb(206,32,53)" fg:x="767" fg:w="1"/><text x="61.6591%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="61.4091%" y="469" width="0.0801%" height="15" fill="rgb(246,141,37)" fg:x="767" fg:w="1"/><text x="61.6591%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="61.4892%" y="453" width="0.0801%" height="15" fill="rgb(219,16,7)" fg:x="768" fg:w="1"/><text x="61.7392%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.4892%" y="437" width="0.0801%" height="15" fill="rgb(230,205,45)" fg:x="768" fg:w="1"/><text x="61.7392%" y="447.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (11 samples, 0.88%)</title><rect x="60.7686%" y="533" width="0.8807%" height="15" fill="rgb(231,43,49)" fg:x="759" fg:w="11"/><text x="61.0186%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="61.3291%" y="517" width="0.3203%" height="15" fill="rgb(212,106,34)" fg:x="766" fg:w="4"/><text x="61.5791%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (4 samples, 0.32%)</title><rect x="61.3291%" y="501" width="0.3203%" height="15" fill="rgb(206,83,17)" fg:x="766" fg:w="4"/><text x="61.5791%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="61.4892%" y="485" width="0.1601%" height="15" fill="rgb(244,154,49)" fg:x="768" fg:w="2"/><text x="61.7392%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="61.4892%" y="469" width="0.1601%" height="15" fill="rgb(244,149,49)" fg:x="768" fg:w="2"/><text x="61.7392%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="61.5693%" y="453" width="0.0801%" height="15" fill="rgb(227,134,18)" fg:x="769" fg:w="1"/><text x="61.8193%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="61.5693%" y="437" width="0.0801%" height="15" fill="rgb(237,116,36)" fg:x="769" fg:w="1"/><text x="61.8193%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="61.5693%" y="421" width="0.0801%" height="15" fill="rgb(205,129,40)" fg:x="769" fg:w="1"/><text x="61.8193%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.5693%" y="405" width="0.0801%" height="15" fill="rgb(236,178,4)" fg:x="769" fg:w="1"/><text x="61.8193%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.5693%" y="389" width="0.0801%" height="15" fill="rgb(251,76,53)" fg:x="769" fg:w="1"/><text x="61.8193%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="61.6493%" y="517" width="0.0801%" height="15" fill="rgb(242,92,40)" fg:x="770" fg:w="1"/><text x="61.8993%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="61.6493%" y="501" width="0.0801%" height="15" fill="rgb(209,45,30)" fg:x="770" fg:w="1"/><text x="61.8993%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.6493%" y="485" width="0.0801%" height="15" fill="rgb(218,157,36)" fg:x="770" fg:w="1"/><text x="61.8993%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.7294%" y="453" width="0.0801%" height="15" fill="rgb(222,186,16)" fg:x="771" fg:w="1"/><text x="61.9794%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.7294%" y="437" width="0.0801%" height="15" fill="rgb(254,72,35)" fg:x="771" fg:w="1"/><text x="61.9794%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.7294%" y="421" width="0.0801%" height="15" fill="rgb(224,25,35)" fg:x="771" fg:w="1"/><text x="61.9794%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.7294%" y="405" width="0.0801%" height="15" fill="rgb(206,135,52)" fg:x="771" fg:w="1"/><text x="61.9794%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.7294%" y="389" width="0.0801%" height="15" fill="rgb(229,174,47)" fg:x="771" fg:w="1"/><text x="61.9794%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.7294%" y="373" width="0.0801%" height="15" fill="rgb(242,184,21)" fg:x="771" fg:w="1"/><text x="61.9794%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.7294%" y="357" width="0.0801%" height="15" fill="rgb(213,22,45)" fg:x="771" fg:w="1"/><text x="61.9794%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.7294%" y="341" width="0.0801%" height="15" fill="rgb(237,81,54)" fg:x="771" fg:w="1"/><text x="61.9794%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.7294%" y="325" width="0.0801%" height="15" fill="rgb(248,177,18)" fg:x="771" fg:w="1"/><text x="61.9794%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.7294%" y="309" width="0.0801%" height="15" fill="rgb(254,31,16)" fg:x="771" fg:w="1"/><text x="61.9794%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.7294%" y="293" width="0.0801%" height="15" fill="rgb(235,20,31)" fg:x="771" fg:w="1"/><text x="61.9794%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.7294%" y="277" width="0.0801%" height="15" fill="rgb(240,56,43)" fg:x="771" fg:w="1"/><text x="61.9794%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.8094%" y="341" width="0.0801%" height="15" fill="rgb(237,197,51)" fg:x="772" fg:w="1"/><text x="62.0594%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.8094%" y="325" width="0.0801%" height="15" fill="rgb(241,162,44)" fg:x="772" fg:w="1"/><text x="62.0594%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.8094%" y="309" width="0.0801%" height="15" fill="rgb(224,23,20)" fg:x="772" fg:w="1"/><text x="62.0594%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.8094%" y="293" width="0.0801%" height="15" fill="rgb(250,109,34)" fg:x="772" fg:w="1"/><text x="62.0594%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.8094%" y="277" width="0.0801%" height="15" fill="rgb(214,175,50)" fg:x="772" fg:w="1"/><text x="62.0594%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.8094%" y="261" width="0.0801%" height="15" fill="rgb(213,182,5)" fg:x="772" fg:w="1"/><text x="62.0594%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.8094%" y="245" width="0.0801%" height="15" fill="rgb(209,199,19)" fg:x="772" fg:w="1"/><text x="62.0594%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="61.7294%" y="485" width="0.2402%" height="15" fill="rgb(236,224,42)" fg:x="771" fg:w="3"/><text x="61.9794%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="61.7294%" y="469" width="0.2402%" height="15" fill="rgb(246,226,29)" fg:x="771" fg:w="3"/><text x="61.9794%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.8094%" y="453" width="0.1601%" height="15" fill="rgb(227,223,11)" fg:x="772" fg:w="2"/><text x="62.0594%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.8094%" y="437" width="0.1601%" height="15" fill="rgb(219,7,51)" fg:x="772" fg:w="2"/><text x="62.0594%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.8094%" y="421" width="0.1601%" height="15" fill="rgb(245,167,10)" fg:x="772" fg:w="2"/><text x="62.0594%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="61.8094%" y="405" width="0.1601%" height="15" fill="rgb(237,224,16)" fg:x="772" fg:w="2"/><text x="62.0594%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="61.8094%" y="389" width="0.1601%" height="15" fill="rgb(226,132,13)" fg:x="772" fg:w="2"/><text x="62.0594%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="61.8094%" y="373" width="0.1601%" height="15" fill="rgb(214,140,3)" fg:x="772" fg:w="2"/><text x="62.0594%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="61.8094%" y="357" width="0.1601%" height="15" fill="rgb(221,177,4)" fg:x="772" fg:w="2"/><text x="62.0594%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="61.8895%" y="341" width="0.0801%" height="15" fill="rgb(238,139,3)" fg:x="773" fg:w="1"/><text x="62.1395%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="61.8895%" y="325" width="0.0801%" height="15" fill="rgb(216,17,39)" fg:x="773" fg:w="1"/><text x="62.1395%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="62.1297%" y="389" width="0.2402%" height="15" fill="rgb(238,120,9)" fg:x="776" fg:w="3"/><text x="62.3797%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="62.2098%" y="373" width="0.1601%" height="15" fill="rgb(244,92,53)" fg:x="777" fg:w="2"/><text x="62.4598%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="62.2098%" y="357" width="0.1601%" height="15" fill="rgb(224,148,33)" fg:x="777" fg:w="2"/><text x="62.4598%" y="367.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="62.2098%" y="341" width="0.1601%" height="15" fill="rgb(243,6,36)" fg:x="777" fg:w="2"/><text x="62.4598%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="62.2098%" y="325" width="0.1601%" height="15" fill="rgb(230,102,11)" fg:x="777" fg:w="2"/><text x="62.4598%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.2098%" y="309" width="0.1601%" height="15" fill="rgb(234,148,36)" fg:x="777" fg:w="2"/><text x="62.4598%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.2098%" y="293" width="0.1601%" height="15" fill="rgb(251,153,25)" fg:x="777" fg:w="2"/><text x="62.4598%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.2098%" y="277" width="0.1601%" height="15" fill="rgb(215,129,8)" fg:x="777" fg:w="2"/><text x="62.4598%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.2098%" y="261" width="0.1601%" height="15" fill="rgb(224,128,35)" fg:x="777" fg:w="2"/><text x="62.4598%" y="271.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.2098%" y="245" width="0.1601%" height="15" fill="rgb(237,56,52)" fg:x="777" fg:w="2"/><text x="62.4598%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.2098%" y="229" width="0.1601%" height="15" fill="rgb(234,213,19)" fg:x="777" fg:w="2"/><text x="62.4598%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2898%" y="213" width="0.0801%" height="15" fill="rgb(252,82,23)" fg:x="778" fg:w="1"/><text x="62.5398%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2898%" y="197" width="0.0801%" height="15" fill="rgb(254,201,21)" fg:x="778" fg:w="1"/><text x="62.5398%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.2898%" y="181" width="0.0801%" height="15" fill="rgb(250,186,11)" fg:x="778" fg:w="1"/><text x="62.5398%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.2898%" y="165" width="0.0801%" height="15" fill="rgb(211,174,5)" fg:x="778" fg:w="1"/><text x="62.5398%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.2898%" y="149" width="0.0801%" height="15" fill="rgb(214,121,10)" fg:x="778" fg:w="1"/><text x="62.5398%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.2898%" y="133" width="0.0801%" height="15" fill="rgb(241,66,2)" fg:x="778" fg:w="1"/><text x="62.5398%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.3699%" y="341" width="0.0801%" height="15" fill="rgb(220,167,19)" fg:x="779" fg:w="1"/><text x="62.6199%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.3699%" y="325" width="0.0801%" height="15" fill="rgb(231,54,50)" fg:x="779" fg:w="1"/><text x="62.6199%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.3699%" y="309" width="0.0801%" height="15" fill="rgb(239,217,53)" fg:x="779" fg:w="1"/><text x="62.6199%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.3699%" y="293" width="0.0801%" height="15" fill="rgb(248,8,0)" fg:x="779" fg:w="1"/><text x="62.6199%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.3699%" y="277" width="0.0801%" height="15" fill="rgb(229,118,37)" fg:x="779" fg:w="1"/><text x="62.6199%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.3699%" y="261" width="0.0801%" height="15" fill="rgb(253,223,43)" fg:x="779" fg:w="1"/><text x="62.6199%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3699%" y="245" width="0.0801%" height="15" fill="rgb(211,77,36)" fg:x="779" fg:w="1"/><text x="62.6199%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="62.3699%" y="389" width="0.2402%" height="15" fill="rgb(219,3,53)" fg:x="779" fg:w="3"/><text x="62.6199%" y="399.50"></text></g><g><title>kernel::model::scopes::load_props (3 samples, 0.24%)</title><rect x="62.3699%" y="373" width="0.2402%" height="15" fill="rgb(244,45,42)" fg:x="779" fg:w="3"/><text x="62.6199%" y="383.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (3 samples, 0.24%)</title><rect x="62.3699%" y="357" width="0.2402%" height="15" fill="rgb(225,95,27)" fg:x="779" fg:w="3"/><text x="62.6199%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.4500%" y="341" width="0.1601%" height="15" fill="rgb(207,74,8)" fg:x="780" fg:w="2"/><text x="62.7000%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.4500%" y="325" width="0.1601%" height="15" fill="rgb(243,63,36)" fg:x="780" fg:w="2"/><text x="62.7000%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.4500%" y="309" width="0.1601%" height="15" fill="rgb(211,180,12)" fg:x="780" fg:w="2"/><text x="62.7000%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.4500%" y="293" width="0.1601%" height="15" fill="rgb(254,166,49)" fg:x="780" fg:w="2"/><text x="62.7000%" y="303.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.4500%" y="277" width="0.1601%" height="15" fill="rgb(205,19,0)" fg:x="780" fg:w="2"/><text x="62.7000%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.4500%" y="261" width="0.1601%" height="15" fill="rgb(224,172,32)" fg:x="780" fg:w="2"/><text x="62.7000%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.4500%" y="245" width="0.1601%" height="15" fill="rgb(254,136,30)" fg:x="780" fg:w="2"/><text x="62.7000%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.4500%" y="229" width="0.1601%" height="15" fill="rgb(246,19,35)" fg:x="780" fg:w="2"/><text x="62.7000%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.5300%" y="213" width="0.0801%" height="15" fill="rgb(219,24,36)" fg:x="781" fg:w="1"/><text x="62.7800%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.5300%" y="197" width="0.0801%" height="15" fill="rgb(251,55,1)" fg:x="781" fg:w="1"/><text x="62.7800%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.5300%" y="181" width="0.0801%" height="15" fill="rgb(218,117,39)" fg:x="781" fg:w="1"/><text x="62.7800%" y="191.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.5300%" y="165" width="0.0801%" height="15" fill="rgb(248,169,11)" fg:x="781" fg:w="1"/><text x="62.7800%" y="175.50"></text></g><g><title>serde_json::value::de::SeqDeserializer::new (1 samples, 0.08%)</title><rect x="62.5300%" y="149" width="0.0801%" height="15" fill="rgb(244,40,44)" fg:x="781" fg:w="1"/><text x="62.7800%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.6101%" y="309" width="0.0801%" height="15" fill="rgb(234,62,37)" fg:x="782" fg:w="1"/><text x="62.8601%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.6101%" y="293" width="0.0801%" height="15" fill="rgb(207,117,42)" fg:x="782" fg:w="1"/><text x="62.8601%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="62.6101%" y="373" width="0.1601%" height="15" fill="rgb(213,43,2)" fg:x="782" fg:w="2"/><text x="62.8601%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="62.6101%" y="357" width="0.1601%" height="15" fill="rgb(244,202,51)" fg:x="782" fg:w="2"/><text x="62.8601%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.6101%" y="341" width="0.1601%" height="15" fill="rgb(253,174,46)" fg:x="782" fg:w="2"/><text x="62.8601%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.6101%" y="325" width="0.1601%" height="15" fill="rgb(251,23,1)" fg:x="782" fg:w="2"/><text x="62.8601%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.6902%" y="309" width="0.0801%" height="15" fill="rgb(253,26,1)" fg:x="783" fg:w="1"/><text x="62.9402%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6902%" y="293" width="0.0801%" height="15" fill="rgb(216,89,31)" fg:x="783" fg:w="1"/><text x="62.9402%" y="303.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.6902%" y="277" width="0.0801%" height="15" fill="rgb(209,109,5)" fg:x="783" fg:w="1"/><text x="62.9402%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.6902%" y="261" width="0.0801%" height="15" fill="rgb(229,63,13)" fg:x="783" fg:w="1"/><text x="62.9402%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.6902%" y="245" width="0.0801%" height="15" fill="rgb(238,137,54)" fg:x="783" fg:w="1"/><text x="62.9402%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.6902%" y="229" width="0.0801%" height="15" fill="rgb(228,1,9)" fg:x="783" fg:w="1"/><text x="62.9402%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.6902%" y="213" width="0.0801%" height="15" fill="rgb(249,120,48)" fg:x="783" fg:w="1"/><text x="62.9402%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.8503%" y="261" width="0.0801%" height="15" fill="rgb(209,72,36)" fg:x="785" fg:w="1"/><text x="63.1003%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8503%" y="245" width="0.0801%" height="15" fill="rgb(247,98,49)" fg:x="785" fg:w="1"/><text x="63.1003%" y="255.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (13 samples, 1.04%)</title><rect x="61.9696%" y="485" width="1.0408%" height="15" fill="rgb(233,75,36)" fg:x="774" fg:w="13"/><text x="62.2196%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="61.9696%" y="469" width="1.0408%" height="15" fill="rgb(225,14,24)" fg:x="774" fg:w="13"/><text x="62.2196%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.04%)</title><rect x="61.9696%" y="453" width="1.0408%" height="15" fill="rgb(237,193,20)" fg:x="774" fg:w="13"/><text x="62.2196%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (12 samples, 0.96%)</title><rect x="62.0496%" y="437" width="0.9608%" height="15" fill="rgb(239,122,19)" fg:x="775" fg:w="12"/><text x="62.2996%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (12 samples, 0.96%)</title><rect x="62.0496%" y="421" width="0.9608%" height="15" fill="rgb(231,220,10)" fg:x="775" fg:w="12"/><text x="62.2996%" y="431.50"></text></g><g><title>engine::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="62.0496%" y="405" width="0.9608%" height="15" fill="rgb(220,66,15)" fg:x="775" fg:w="12"/><text x="62.2996%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="62.6101%" y="389" width="0.4003%" height="15" fill="rgb(215,171,52)" fg:x="782" fg:w="5"/><text x="62.8601%" y="399.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="62.7702%" y="373" width="0.2402%" height="15" fill="rgb(241,169,50)" fg:x="784" fg:w="3"/><text x="63.0202%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.7702%" y="357" width="0.2402%" height="15" fill="rgb(236,189,0)" fg:x="784" fg:w="3"/><text x="63.0202%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.7702%" y="341" width="0.2402%" height="15" fill="rgb(217,147,20)" fg:x="784" fg:w="3"/><text x="63.0202%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="62.7702%" y="325" width="0.2402%" height="15" fill="rgb(206,188,39)" fg:x="784" fg:w="3"/><text x="63.0202%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.7702%" y="309" width="0.2402%" height="15" fill="rgb(227,118,25)" fg:x="784" fg:w="3"/><text x="63.0202%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.8503%" y="293" width="0.1601%" height="15" fill="rgb(248,171,40)" fg:x="785" fg:w="2"/><text x="63.1003%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.8503%" y="277" width="0.1601%" height="15" fill="rgb(251,90,54)" fg:x="785" fg:w="2"/><text x="63.1003%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.9303%" y="261" width="0.0801%" height="15" fill="rgb(234,11,46)" fg:x="786" fg:w="1"/><text x="63.1803%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.9303%" y="245" width="0.0801%" height="15" fill="rgb(229,134,13)" fg:x="786" fg:w="1"/><text x="63.1803%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.9303%" y="229" width="0.0801%" height="15" fill="rgb(223,129,3)" fg:x="786" fg:w="1"/><text x="63.1803%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="62.9303%" y="213" width="0.0801%" height="15" fill="rgb(221,124,13)" fg:x="786" fg:w="1"/><text x="63.1803%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 2.40%)</title><rect x="60.7686%" y="565" width="2.4019%" height="15" fill="rgb(234,3,18)" fg:x="759" fg:w="30"/><text x="61.0186%" y="575.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 2.40%)</title><rect x="60.7686%" y="549" width="2.4019%" height="15" fill="rgb(249,199,20)" fg:x="759" fg:w="30"/><text x="61.0186%" y="559.50">&lt;c..</text></g><g><title>plugins_core::tools::get_contained_keys (19 samples, 1.52%)</title><rect x="61.6493%" y="533" width="1.5212%" height="15" fill="rgb(224,134,6)" fg:x="770" fg:w="19"/><text x="61.8993%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (18 samples, 1.44%)</title><rect x="61.7294%" y="517" width="1.4412%" height="15" fill="rgb(254,83,26)" fg:x="771" fg:w="18"/><text x="61.9794%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (18 samples, 1.44%)</title><rect x="61.7294%" y="501" width="1.4412%" height="15" fill="rgb(217,88,9)" fg:x="771" fg:w="18"/><text x="61.9794%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.0104%" y="485" width="0.1601%" height="15" fill="rgb(225,73,2)" fg:x="787" fg:w="2"/><text x="63.2604%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.0104%" y="469" width="0.1601%" height="15" fill="rgb(226,44,39)" fg:x="787" fg:w="2"/><text x="63.2604%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="63.0104%" y="453" width="0.1601%" height="15" fill="rgb(228,53,17)" fg:x="787" fg:w="2"/><text x="63.2604%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="63.0104%" y="437" width="0.1601%" height="15" fill="rgb(212,27,27)" fg:x="787" fg:w="2"/><text x="63.2604%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="63.0104%" y="421" width="0.1601%" height="15" fill="rgb(241,50,6)" fg:x="787" fg:w="2"/><text x="63.2604%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="63.0104%" y="405" width="0.1601%" height="15" fill="rgb(225,28,51)" fg:x="787" fg:w="2"/><text x="63.2604%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.0104%" y="389" width="0.1601%" height="15" fill="rgb(215,33,16)" fg:x="787" fg:w="2"/><text x="63.2604%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.0905%" y="373" width="0.0801%" height="15" fill="rgb(243,40,39)" fg:x="788" fg:w="1"/><text x="63.3405%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.0905%" y="357" width="0.0801%" height="15" fill="rgb(225,11,42)" fg:x="788" fg:w="1"/><text x="63.3405%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2506%" y="533" width="0.0801%" height="15" fill="rgb(241,220,38)" fg:x="790" fg:w="1"/><text x="63.5006%" y="543.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="64.2114%" y="165" width="0.0801%" height="15" fill="rgb(244,52,35)" fg:x="802" fg:w="1"/><text x="64.4614%" y="175.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="64.2114%" y="213" width="0.1601%" height="15" fill="rgb(246,42,46)" fg:x="802" fg:w="2"/><text x="64.4614%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="64.2114%" y="197" width="0.1601%" height="15" fill="rgb(205,184,13)" fg:x="802" fg:w="2"/><text x="64.4614%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="64.2114%" y="181" width="0.1601%" height="15" fill="rgb(209,48,36)" fg:x="802" fg:w="2"/><text x="64.4614%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.2914%" y="165" width="0.0801%" height="15" fill="rgb(244,34,51)" fg:x="803" fg:w="1"/><text x="64.5414%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.2914%" y="149" width="0.0801%" height="15" fill="rgb(221,107,33)" fg:x="803" fg:w="1"/><text x="64.5414%" y="159.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.56%)</title><rect x="63.8911%" y="261" width="0.5604%" height="15" fill="rgb(224,203,12)" fg:x="798" fg:w="7"/><text x="64.1411%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="63.8911%" y="245" width="0.5604%" height="15" fill="rgb(230,215,18)" fg:x="798" fg:w="7"/><text x="64.1411%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="64.0512%" y="229" width="0.4003%" height="15" fill="rgb(206,185,35)" fg:x="800" fg:w="5"/><text x="64.3012%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.3715%" y="213" width="0.0801%" height="15" fill="rgb(228,140,34)" fg:x="804" fg:w="1"/><text x="64.6215%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.3715%" y="197" width="0.0801%" height="15" fill="rgb(208,93,13)" fg:x="804" fg:w="1"/><text x="64.6215%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="64.3715%" y="181" width="0.0801%" height="15" fill="rgb(221,193,39)" fg:x="804" fg:w="1"/><text x="64.6215%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="63.8911%" y="325" width="0.6405%" height="15" fill="rgb(241,132,34)" fg:x="798" fg:w="8"/><text x="64.1411%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (8 samples, 0.64%)</title><rect x="63.8911%" y="309" width="0.6405%" height="15" fill="rgb(221,141,10)" fg:x="798" fg:w="8"/><text x="64.1411%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="63.8911%" y="293" width="0.6405%" height="15" fill="rgb(226,90,31)" fg:x="798" fg:w="8"/><text x="64.1411%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.64%)</title><rect x="63.8911%" y="277" width="0.6405%" height="15" fill="rgb(243,75,5)" fg:x="798" fg:w="8"/><text x="64.1411%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.4516%" y="261" width="0.0801%" height="15" fill="rgb(227,156,21)" fg:x="805" fg:w="1"/><text x="64.7016%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4516%" y="245" width="0.0801%" height="15" fill="rgb(250,195,8)" fg:x="805" fg:w="1"/><text x="64.7016%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.72%)</title><rect x="63.8911%" y="341" width="0.7206%" height="15" fill="rgb(220,134,5)" fg:x="798" fg:w="9"/><text x="64.1411%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="64.5316%" y="325" width="0.0801%" height="15" fill="rgb(246,106,34)" fg:x="806" fg:w="1"/><text x="64.7816%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (11 samples, 0.88%)</title><rect x="63.8110%" y="357" width="0.8807%" height="15" fill="rgb(205,1,4)" fg:x="797" fg:w="11"/><text x="64.0610%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.6117%" y="341" width="0.0801%" height="15" fill="rgb(224,151,29)" fg:x="807" fg:w="1"/><text x="64.8617%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="64.6117%" y="325" width="0.0801%" height="15" fill="rgb(251,196,0)" fg:x="807" fg:w="1"/><text x="64.8617%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="64.6117%" y="309" width="0.0801%" height="15" fill="rgb(212,127,0)" fg:x="807" fg:w="1"/><text x="64.8617%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="64.6117%" y="293" width="0.0801%" height="15" fill="rgb(236,71,53)" fg:x="807" fg:w="1"/><text x="64.8617%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="64.6117%" y="277" width="0.0801%" height="15" fill="rgb(227,99,0)" fg:x="807" fg:w="1"/><text x="64.8617%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6117%" y="261" width="0.0801%" height="15" fill="rgb(239,89,21)" fg:x="807" fg:w="1"/><text x="64.8617%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="64.6117%" y="245" width="0.0801%" height="15" fill="rgb(243,122,19)" fg:x="807" fg:w="1"/><text x="64.8617%" y="255.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (16 samples, 1.28%)</title><rect x="63.4908%" y="501" width="1.2810%" height="15" fill="rgb(229,192,45)" fg:x="793" fg:w="16"/><text x="63.7408%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 1.28%)</title><rect x="63.4908%" y="485" width="1.2810%" height="15" fill="rgb(235,165,35)" fg:x="793" fg:w="16"/><text x="63.7408%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 1.28%)</title><rect x="63.4908%" y="469" width="1.2810%" height="15" fill="rgb(253,202,0)" fg:x="793" fg:w="16"/><text x="63.7408%" y="479.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (16 samples, 1.28%)</title><rect x="63.4908%" y="453" width="1.2810%" height="15" fill="rgb(235,51,20)" fg:x="793" fg:w="16"/><text x="63.7408%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="63.5709%" y="437" width="1.2010%" height="15" fill="rgb(218,95,46)" fg:x="794" fg:w="15"/><text x="63.8209%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 1.20%)</title><rect x="63.5709%" y="421" width="1.2010%" height="15" fill="rgb(212,81,10)" fg:x="794" fg:w="15"/><text x="63.8209%" y="431.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.04%)</title><rect x="63.7310%" y="405" width="1.0408%" height="15" fill="rgb(240,59,0)" fg:x="796" fg:w="13"/><text x="63.9810%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.04%)</title><rect x="63.7310%" y="389" width="1.0408%" height="15" fill="rgb(212,191,42)" fg:x="796" fg:w="13"/><text x="63.9810%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.04%)</title><rect x="63.7310%" y="373" width="1.0408%" height="15" fill="rgb(233,140,3)" fg:x="796" fg:w="13"/><text x="63.9810%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6918%" y="357" width="0.0801%" height="15" fill="rgb(215,69,23)" fg:x="808" fg:w="1"/><text x="64.9418%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.6918%" y="341" width="0.0801%" height="15" fill="rgb(240,202,20)" fg:x="808" fg:w="1"/><text x="64.9418%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8519%" y="453" width="0.0801%" height="15" fill="rgb(209,146,50)" fg:x="810" fg:w="1"/><text x="65.1019%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.8519%" y="437" width="0.0801%" height="15" fill="rgb(253,102,54)" fg:x="810" fg:w="1"/><text x="65.1019%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="64.8519%" y="421" width="0.0801%" height="15" fill="rgb(250,173,47)" fg:x="810" fg:w="1"/><text x="65.1019%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="64.9319%" y="453" width="0.0801%" height="15" fill="rgb(232,142,7)" fg:x="811" fg:w="1"/><text x="65.1819%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="64.9319%" y="437" width="0.0801%" height="15" fill="rgb(230,157,47)" fg:x="811" fg:w="1"/><text x="65.1819%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="65.0120%" y="453" width="0.0801%" height="15" fill="rgb(214,177,35)" fg:x="812" fg:w="1"/><text x="65.2620%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0921%" y="437" width="0.0801%" height="15" fill="rgb(234,119,46)" fg:x="813" fg:w="1"/><text x="65.3421%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.0921%" y="421" width="0.0801%" height="15" fill="rgb(241,180,50)" fg:x="813" fg:w="1"/><text x="65.3421%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0921%" y="405" width="0.0801%" height="15" fill="rgb(221,54,25)" fg:x="813" fg:w="1"/><text x="65.3421%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2522%" y="373" width="0.0801%" height="15" fill="rgb(209,157,44)" fg:x="815" fg:w="1"/><text x="65.5022%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="65.1721%" y="405" width="0.2402%" height="15" fill="rgb(246,115,41)" fg:x="814" fg:w="3"/><text x="65.4221%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="65.1721%" y="389" width="0.2402%" height="15" fill="rgb(229,86,1)" fg:x="814" fg:w="3"/><text x="65.4221%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="65.3323%" y="373" width="0.0801%" height="15" fill="rgb(240,108,53)" fg:x="816" fg:w="1"/><text x="65.5823%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.4123%" y="389" width="0.0801%" height="15" fill="rgb(227,134,2)" fg:x="817" fg:w="1"/><text x="65.6623%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="65.5725%" y="357" width="0.0801%" height="15" fill="rgb(213,129,25)" fg:x="819" fg:w="1"/><text x="65.8225%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="65.7326%" y="325" width="0.0801%" height="15" fill="rgb(226,35,21)" fg:x="821" fg:w="1"/><text x="65.9826%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.7326%" y="309" width="0.0801%" height="15" fill="rgb(208,129,26)" fg:x="821" fg:w="1"/><text x="65.9826%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.7326%" y="293" width="0.0801%" height="15" fill="rgb(224,83,6)" fg:x="821" fg:w="1"/><text x="65.9826%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7326%" y="277" width="0.0801%" height="15" fill="rgb(227,52,39)" fg:x="821" fg:w="1"/><text x="65.9826%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (65 samples, 5.20%)</title><rect x="60.7686%" y="581" width="5.2042%" height="15" fill="rgb(241,30,17)" fg:x="759" fg:w="65"/><text x="61.0186%" y="591.50">core::..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (35 samples, 2.80%)</title><rect x="63.1705%" y="565" width="2.8022%" height="15" fill="rgb(246,186,42)" fg:x="789" fg:w="35"/><text x="63.4205%" y="575.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 2.72%)</title><rect x="63.2506%" y="549" width="2.7222%" height="15" fill="rgb(221,169,15)" fg:x="790" fg:w="34"/><text x="63.5006%" y="559.50">&lt;c..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (33 samples, 2.64%)</title><rect x="63.3307%" y="533" width="2.6421%" height="15" fill="rgb(235,108,21)" fg:x="791" fg:w="33"/><text x="63.5807%" y="543.50">pl..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (32 samples, 2.56%)</title><rect x="63.4107%" y="517" width="2.5620%" height="15" fill="rgb(219,148,30)" fg:x="792" fg:w="32"/><text x="63.6607%" y="527.50">&lt;r..</text></g><g><title>kernel::model::EntityPtr::to_json_value (15 samples, 1.20%)</title><rect x="64.7718%" y="501" width="1.2010%" height="15" fill="rgb(220,109,5)" fg:x="809" fg:w="15"/><text x="65.0218%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (15 samples, 1.20%)</title><rect x="64.7718%" y="485" width="1.2010%" height="15" fill="rgb(213,203,48)" fg:x="809" fg:w="15"/><text x="65.0218%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.12%)</title><rect x="64.8519%" y="469" width="1.1209%" height="15" fill="rgb(244,71,33)" fg:x="810" fg:w="14"/><text x="65.1019%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.88%)</title><rect x="65.0921%" y="453" width="0.8807%" height="15" fill="rgb(209,23,2)" fg:x="813" fg:w="11"/><text x="65.3421%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.80%)</title><rect x="65.1721%" y="437" width="0.8006%" height="15" fill="rgb(219,97,7)" fg:x="814" fg:w="10"/><text x="65.4221%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.80%)</title><rect x="65.1721%" y="421" width="0.8006%" height="15" fill="rgb(216,161,23)" fg:x="814" fg:w="10"/><text x="65.4221%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="65.4123%" y="405" width="0.5604%" height="15" fill="rgb(207,45,42)" fg:x="817" fg:w="7"/><text x="65.6623%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="65.4924%" y="389" width="0.4804%" height="15" fill="rgb(241,61,4)" fg:x="818" fg:w="6"/><text x="65.7424%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="65.5725%" y="373" width="0.4003%" height="15" fill="rgb(236,170,1)" fg:x="819" fg:w="5"/><text x="65.8225%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="65.6525%" y="357" width="0.3203%" height="15" fill="rgb(239,72,5)" fg:x="820" fg:w="4"/><text x="65.9025%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="65.6525%" y="341" width="0.3203%" height="15" fill="rgb(214,13,50)" fg:x="820" fg:w="4"/><text x="65.9025%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.8127%" y="325" width="0.1601%" height="15" fill="rgb(224,88,9)" fg:x="822" fg:w="2"/><text x="66.0627%" y="335.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (70 samples, 5.60%)</title><rect x="60.4484%" y="597" width="5.6045%" height="15" fill="rgb(238,192,34)" fg:x="755" fg:w="70"/><text x="60.6984%" y="607.50">&lt;plugin..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="65.9728%" y="581" width="0.0801%" height="15" fill="rgb(217,203,50)" fg:x="824" fg:w="1"/><text x="66.2228%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.9728%" y="565" width="0.0801%" height="15" fill="rgb(241,123,32)" fg:x="824" fg:w="1"/><text x="66.2228%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="65.9728%" y="549" width="0.0801%" height="15" fill="rgb(248,151,39)" fg:x="824" fg:w="1"/><text x="66.2228%" y="559.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (697 samples, 55.80%)</title><rect x="10.3283%" y="661" width="55.8046%" height="15" fill="rgb(208,89,6)" fg:x="129" fg:w="697"/><text x="10.5783%" y="671.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (78 samples, 6.24%)</title><rect x="59.8879%" y="645" width="6.2450%" height="15" fill="rgb(254,43,26)" fg:x="748" fg:w="78"/><text x="60.1379%" y="655.50">kernel::..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (78 samples, 6.24%)</title><rect x="59.8879%" y="629" width="6.2450%" height="15" fill="rgb(216,158,13)" fg:x="748" fg:w="78"/><text x="60.1379%" y="639.50">&lt;plugins..</text></g><g><title>plugins_rpc::querying::have_surroundings (72 samples, 5.76%)</title><rect x="60.3683%" y="613" width="5.7646%" height="15" fill="rgb(212,47,37)" fg:x="754" fg:w="72"/><text x="60.6183%" y="623.50">plugins..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0528%" y="597" width="0.0801%" height="15" fill="rgb(254,16,10)" fg:x="825" fg:w="1"/><text x="66.3028%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2130%" y="517" width="0.0801%" height="15" fill="rgb(223,228,16)" fg:x="827" fg:w="1"/><text x="66.4630%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.2130%" y="501" width="0.0801%" height="15" fill="rgb(249,108,50)" fg:x="827" fg:w="1"/><text x="66.4630%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.2130%" y="485" width="0.0801%" height="15" fill="rgb(208,220,5)" fg:x="827" fg:w="1"/><text x="66.4630%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.2130%" y="469" width="0.0801%" height="15" fill="rgb(217,89,48)" fg:x="827" fg:w="1"/><text x="66.4630%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.2130%" y="453" width="0.0801%" height="15" fill="rgb(212,113,41)" fg:x="827" fg:w="1"/><text x="66.4630%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2130%" y="437" width="0.0801%" height="15" fill="rgb(231,127,5)" fg:x="827" fg:w="1"/><text x="66.4630%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2130%" y="421" width="0.0801%" height="15" fill="rgb(217,141,17)" fg:x="827" fg:w="1"/><text x="66.4630%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.2130%" y="405" width="0.0801%" height="15" fill="rgb(245,125,54)" fg:x="827" fg:w="1"/><text x="66.4630%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.2130%" y="389" width="0.0801%" height="15" fill="rgb(248,125,3)" fg:x="827" fg:w="1"/><text x="66.4630%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.2130%" y="373" width="0.0801%" height="15" fill="rgb(236,119,51)" fg:x="827" fg:w="1"/><text x="66.4630%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2130%" y="357" width="0.0801%" height="15" fill="rgb(239,99,8)" fg:x="827" fg:w="1"/><text x="66.4630%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.2130%" y="341" width="0.0801%" height="15" fill="rgb(224,228,4)" fg:x="827" fg:w="1"/><text x="66.4630%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.2130%" y="325" width="0.0801%" height="15" fill="rgb(220,131,45)" fg:x="827" fg:w="1"/><text x="66.4630%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.2130%" y="309" width="0.0801%" height="15" fill="rgb(215,62,5)" fg:x="827" fg:w="1"/><text x="66.4630%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.2130%" y="293" width="0.0801%" height="15" fill="rgb(253,12,24)" fg:x="827" fg:w="1"/><text x="66.4630%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.2130%" y="277" width="0.0801%" height="15" fill="rgb(248,120,50)" fg:x="827" fg:w="1"/><text x="66.4630%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.2130%" y="261" width="0.0801%" height="15" fill="rgb(245,194,10)" fg:x="827" fg:w="1"/><text x="66.4630%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="66.1329%" y="565" width="0.2402%" height="15" fill="rgb(241,149,38)" fg:x="826" fg:w="3"/><text x="66.3829%" y="575.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="66.2130%" y="549" width="0.1601%" height="15" fill="rgb(219,215,7)" fg:x="827" fg:w="2"/><text x="66.4630%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="66.2130%" y="533" width="0.1601%" height="15" fill="rgb(208,120,31)" fg:x="827" fg:w="2"/><text x="66.4630%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.2930%" y="517" width="0.0801%" height="15" fill="rgb(244,30,8)" fg:x="828" fg:w="1"/><text x="66.5430%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.2930%" y="501" width="0.0801%" height="15" fill="rgb(238,35,44)" fg:x="828" fg:w="1"/><text x="66.5430%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.2930%" y="485" width="0.0801%" height="15" fill="rgb(243,218,37)" fg:x="828" fg:w="1"/><text x="66.5430%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.2930%" y="469" width="0.0801%" height="15" fill="rgb(218,169,10)" fg:x="828" fg:w="1"/><text x="66.5430%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.2930%" y="453" width="0.0801%" height="15" fill="rgb(221,144,10)" fg:x="828" fg:w="1"/><text x="66.5430%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2930%" y="437" width="0.0801%" height="15" fill="rgb(226,41,38)" fg:x="828" fg:w="1"/><text x="66.5430%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (4 samples, 0.32%)</title><rect x="66.1329%" y="597" width="0.3203%" height="15" fill="rgb(228,3,1)" fg:x="826" fg:w="4"/><text x="66.3829%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="66.1329%" y="581" width="0.3203%" height="15" fill="rgb(209,129,12)" fg:x="826" fg:w="4"/><text x="66.3829%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="66.3731%" y="565" width="0.0801%" height="15" fill="rgb(213,136,33)" fg:x="829" fg:w="1"/><text x="66.6231%" y="575.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="66.3731%" y="549" width="0.0801%" height="15" fill="rgb(209,181,29)" fg:x="829" fg:w="1"/><text x="66.6231%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="66.3731%" y="533" width="0.0801%" height="15" fill="rgb(234,173,18)" fg:x="829" fg:w="1"/><text x="66.6231%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.3731%" y="517" width="0.0801%" height="15" fill="rgb(227,73,47)" fg:x="829" fg:w="1"/><text x="66.6231%" y="527.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="66.4532%" y="597" width="0.0801%" height="15" fill="rgb(234,9,34)" fg:x="830" fg:w="1"/><text x="66.7032%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.5332%" y="517" width="0.0801%" height="15" fill="rgb(235,172,15)" fg:x="831" fg:w="1"/><text x="66.7832%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.6133%" y="373" width="0.0801%" height="15" fill="rgb(245,61,2)" fg:x="832" fg:w="1"/><text x="66.8633%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.6133%" y="357" width="0.0801%" height="15" fill="rgb(238,39,47)" fg:x="832" fg:w="1"/><text x="66.8633%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.6133%" y="341" width="0.0801%" height="15" fill="rgb(234,37,24)" fg:x="832" fg:w="1"/><text x="66.8633%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.6133%" y="405" width="0.1601%" height="15" fill="rgb(248,223,24)" fg:x="832" fg:w="2"/><text x="66.8633%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.6133%" y="389" width="0.1601%" height="15" fill="rgb(223,12,15)" fg:x="832" fg:w="2"/><text x="66.8633%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="66.6934%" y="373" width="0.0801%" height="15" fill="rgb(249,6,3)" fg:x="833" fg:w="1"/><text x="66.9434%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.6934%" y="357" width="0.0801%" height="15" fill="rgb(237,105,33)" fg:x="833" fg:w="1"/><text x="66.9434%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.6934%" y="341" width="0.0801%" height="15" fill="rgb(252,208,35)" fg:x="833" fg:w="1"/><text x="66.9434%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.6934%" y="325" width="0.0801%" height="15" fill="rgb(215,181,35)" fg:x="833" fg:w="1"/><text x="66.9434%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.6934%" y="309" width="0.0801%" height="15" fill="rgb(246,212,3)" fg:x="833" fg:w="1"/><text x="66.9434%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="66.6934%" y="293" width="0.0801%" height="15" fill="rgb(247,156,24)" fg:x="833" fg:w="1"/><text x="66.9434%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="66.6133%" y="469" width="0.2402%" height="15" fill="rgb(248,9,31)" fg:x="832" fg:w="3"/><text x="66.8633%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="66.6133%" y="453" width="0.2402%" height="15" fill="rgb(234,26,45)" fg:x="832" fg:w="3"/><text x="66.8633%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="66.6133%" y="437" width="0.2402%" height="15" fill="rgb(249,11,32)" fg:x="832" fg:w="3"/><text x="66.8633%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="66.6133%" y="421" width="0.2402%" height="15" fill="rgb(249,162,33)" fg:x="832" fg:w="3"/><text x="66.8633%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="66.7734%" y="405" width="0.0801%" height="15" fill="rgb(232,4,32)" fg:x="834" fg:w="1"/><text x="67.0234%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.7734%" y="389" width="0.0801%" height="15" fill="rgb(212,5,45)" fg:x="834" fg:w="1"/><text x="67.0234%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (5 samples, 0.40%)</title><rect x="66.5332%" y="581" width="0.4003%" height="15" fill="rgb(227,95,13)" fg:x="831" fg:w="5"/><text x="66.7832%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (5 samples, 0.40%)</title><rect x="66.5332%" y="565" width="0.4003%" height="15" fill="rgb(223,205,10)" fg:x="831" fg:w="5"/><text x="66.7832%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="66.5332%" y="549" width="0.4003%" height="15" fill="rgb(222,178,8)" fg:x="831" fg:w="5"/><text x="66.7832%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="66.5332%" y="533" width="0.4003%" height="15" fill="rgb(216,13,22)" fg:x="831" fg:w="5"/><text x="66.7832%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (4 samples, 0.32%)</title><rect x="66.6133%" y="517" width="0.3203%" height="15" fill="rgb(240,167,12)" fg:x="832" fg:w="4"/><text x="66.8633%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="66.6133%" y="501" width="0.3203%" height="15" fill="rgb(235,68,35)" fg:x="832" fg:w="4"/><text x="66.8633%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="66.6133%" y="485" width="0.3203%" height="15" fill="rgb(253,40,27)" fg:x="832" fg:w="4"/><text x="66.8633%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8535%" y="469" width="0.0801%" height="15" fill="rgb(214,19,28)" fg:x="835" fg:w="1"/><text x="67.1035%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8535%" y="453" width="0.0801%" height="15" fill="rgb(210,167,45)" fg:x="835" fg:w="1"/><text x="67.1035%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.8535%" y="437" width="0.0801%" height="15" fill="rgb(232,97,40)" fg:x="835" fg:w="1"/><text x="67.1035%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8535%" y="421" width="0.0801%" height="15" fill="rgb(250,35,23)" fg:x="835" fg:w="1"/><text x="67.1035%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8535%" y="405" width="0.0801%" height="15" fill="rgb(248,47,53)" fg:x="835" fg:w="1"/><text x="67.1035%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.9335%" y="437" width="0.0801%" height="15" fill="rgb(226,58,50)" fg:x="836" fg:w="1"/><text x="67.1835%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.9335%" y="421" width="0.0801%" height="15" fill="rgb(217,105,26)" fg:x="836" fg:w="1"/><text x="67.1835%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (12 samples, 0.96%)</title><rect x="66.1329%" y="645" width="0.9608%" height="15" fill="rgb(208,64,1)" fg:x="826" fg:w="12"/><text x="66.3829%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (12 samples, 0.96%)</title><rect x="66.1329%" y="629" width="0.9608%" height="15" fill="rgb(214,80,1)" fg:x="826" fg:w="12"/><text x="66.3829%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (12 samples, 0.96%)</title><rect x="66.1329%" y="613" width="0.9608%" height="15" fill="rgb(206,175,26)" fg:x="826" fg:w="12"/><text x="66.3829%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.56%)</title><rect x="66.5332%" y="597" width="0.5604%" height="15" fill="rgb(235,156,37)" fg:x="831" fg:w="7"/><text x="66.7832%" y="607.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="66.9335%" y="581" width="0.1601%" height="15" fill="rgb(213,100,9)" fg:x="836" fg:w="2"/><text x="67.1835%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="66.9335%" y="565" width="0.1601%" height="15" fill="rgb(241,15,13)" fg:x="836" fg:w="2"/><text x="67.1835%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.9335%" y="549" width="0.1601%" height="15" fill="rgb(205,97,43)" fg:x="836" fg:w="2"/><text x="67.1835%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="66.9335%" y="533" width="0.1601%" height="15" fill="rgb(216,106,32)" fg:x="836" fg:w="2"/><text x="67.1835%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.9335%" y="517" width="0.1601%" height="15" fill="rgb(226,200,8)" fg:x="836" fg:w="2"/><text x="67.1835%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="66.9335%" y="501" width="0.1601%" height="15" fill="rgb(244,54,29)" fg:x="836" fg:w="2"/><text x="67.1835%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.9335%" y="485" width="0.1601%" height="15" fill="rgb(252,169,12)" fg:x="836" fg:w="2"/><text x="67.1835%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="66.9335%" y="469" width="0.1601%" height="15" fill="rgb(231,199,11)" fg:x="836" fg:w="2"/><text x="67.1835%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.9335%" y="453" width="0.1601%" height="15" fill="rgb(233,191,18)" fg:x="836" fg:w="2"/><text x="67.1835%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.0136%" y="437" width="0.0801%" height="15" fill="rgb(215,83,47)" fg:x="837" fg:w="1"/><text x="67.2636%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.0136%" y="421" width="0.0801%" height="15" fill="rgb(251,67,19)" fg:x="837" fg:w="1"/><text x="67.2636%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.0136%" y="405" width="0.0801%" height="15" fill="rgb(240,7,20)" fg:x="837" fg:w="1"/><text x="67.2636%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.0136%" y="389" width="0.0801%" height="15" fill="rgb(210,150,26)" fg:x="837" fg:w="1"/><text x="67.2636%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.0136%" y="373" width="0.0801%" height="15" fill="rgb(228,75,42)" fg:x="837" fg:w="1"/><text x="67.2636%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.0136%" y="357" width="0.0801%" height="15" fill="rgb(237,134,48)" fg:x="837" fg:w="1"/><text x="67.2636%" y="367.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (712 samples, 57.01%)</title><rect x="10.1681%" y="693" width="57.0056%" height="15" fill="rgb(205,80,50)" fg:x="127" fg:w="712"/><text x="10.4181%" y="703.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (710 samples, 56.85%)</title><rect x="10.3283%" y="677" width="56.8455%" height="15" fill="rgb(217,74,48)" fg:x="129" fg:w="710"/><text x="10.5783%" y="687.50">&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (13 samples, 1.04%)</title><rect x="66.1329%" y="661" width="1.0408%" height="15" fill="rgb(205,82,50)" fg:x="826" fg:w="13"/><text x="66.3829%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.0937%" y="645" width="0.0801%" height="15" fill="rgb(228,1,33)" fg:x="838" fg:w="1"/><text x="67.3437%" y="655.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (716 samples, 57.33%)</title><rect x="10.0080%" y="757" width="57.3259%" height="15" fill="rgb(214,50,23)" fg:x="125" fg:w="716"/><text x="10.2580%" y="767.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (715 samples, 57.25%)</title><rect x="10.0881%" y="741" width="57.2458%" height="15" fill="rgb(210,62,9)" fg:x="126" fg:w="715"/><text x="10.3381%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (715 samples, 57.25%)</title><rect x="10.0881%" y="725" width="57.2458%" height="15" fill="rgb(210,104,37)" fg:x="126" fg:w="715"/><text x="10.3381%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (714 samples, 57.17%)</title><rect x="10.1681%" y="709" width="57.1657%" height="15" fill="rgb(232,104,43)" fg:x="127" fg:w="714"/><text x="10.4181%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Evaluator&gt;::evaluate (2 samples, 0.16%)</title><rect x="67.1737%" y="693" width="0.1601%" height="15" fill="rgb(244,52,6)" fg:x="839" fg:w="2"/><text x="67.4237%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (842 samples, 67.41%)</title><rect x="0.0000%" y="837" width="67.4139%" height="15" fill="rgb(211,174,52)" fg:x="0" fg:w="842"/><text x="0.2500%" y="847.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (842 samples, 67.41%)</title><rect x="0.0000%" y="821" width="67.4139%" height="15" fill="rgb(229,48,4)" fg:x="0" fg:w="842"/><text x="0.2500%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (842 samples, 67.41%)</title><rect x="0.0000%" y="805" width="67.4139%" height="15" fill="rgb(205,155,16)" fg:x="0" fg:w="842"/><text x="0.2500%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (717 samples, 57.41%)</title><rect x="10.0080%" y="789" width="57.4059%" height="15" fill="rgb(211,141,53)" fg:x="125" fg:w="717"/><text x="10.2580%" y="799.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (717 samples, 57.41%)</title><rect x="10.0080%" y="773" width="57.4059%" height="15" fill="rgb(240,148,11)" fg:x="125" fg:w="717"/><text x="10.2580%" y="783.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="67.3339%" y="757" width="0.0801%" height="15" fill="rgb(214,45,23)" fg:x="841" fg:w="1"/><text x="67.5839%" y="767.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="67.3339%" y="741" width="0.0801%" height="15" fill="rgb(248,74,26)" fg:x="841" fg:w="1"/><text x="67.5839%" y="751.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="67.3339%" y="725" width="0.0801%" height="15" fill="rgb(218,121,16)" fg:x="841" fg:w="1"/><text x="67.5839%" y="735.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="67.3339%" y="709" width="0.0801%" height="15" fill="rgb(218,10,47)" fg:x="841" fg:w="1"/><text x="67.5839%" y="719.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="67.3339%" y="693" width="0.0801%" height="15" fill="rgb(227,99,14)" fg:x="841" fg:w="1"/><text x="67.5839%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;kernel::model::entity::ScopeValue&gt;&gt; (1 samples, 0.08%)</title><rect x="67.4139%" y="693" width="0.0801%" height="15" fill="rgb(229,83,46)" fg:x="842" fg:w="1"/><text x="67.6639%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4139%" y="677" width="0.0801%" height="15" fill="rgb(228,25,1)" fg:x="842" fg:w="1"/><text x="67.6639%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.4139%" y="661" width="0.0801%" height="15" fill="rgb(252,190,15)" fg:x="842" fg:w="1"/><text x="67.6639%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4139%" y="645" width="0.0801%" height="15" fill="rgb(213,103,51)" fg:x="842" fg:w="1"/><text x="67.6639%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4139%" y="629" width="0.0801%" height="15" fill="rgb(220,38,44)" fg:x="842" fg:w="1"/><text x="67.6639%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.4139%" y="789" width="0.1601%" height="15" fill="rgb(210,45,26)" fg:x="842" fg:w="2"/><text x="67.6639%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (2 samples, 0.16%)</title><rect x="67.4139%" y="773" width="0.1601%" height="15" fill="rgb(205,95,48)" fg:x="842" fg:w="2"/><text x="67.6639%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.4139%" y="757" width="0.1601%" height="15" fill="rgb(225,179,37)" fg:x="842" fg:w="2"/><text x="67.6639%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (2 samples, 0.16%)</title><rect x="67.4139%" y="741" width="0.1601%" height="15" fill="rgb(230,209,3)" fg:x="842" fg:w="2"/><text x="67.6639%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.4139%" y="725" width="0.1601%" height="15" fill="rgb(248,12,46)" fg:x="842" fg:w="2"/><text x="67.6639%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.4139%" y="709" width="0.1601%" height="15" fill="rgb(234,18,0)" fg:x="842" fg:w="2"/><text x="67.6639%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.4940%" y="693" width="0.0801%" height="15" fill="rgb(238,197,14)" fg:x="843" fg:w="1"/><text x="67.7440%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.4940%" y="677" width="0.0801%" height="15" fill="rgb(251,162,48)" fg:x="843" fg:w="1"/><text x="67.7440%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4940%" y="661" width="0.0801%" height="15" fill="rgb(237,73,42)" fg:x="843" fg:w="1"/><text x="67.7440%" y="671.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="67.6541%" y="709" width="0.1601%" height="15" fill="rgb(211,108,8)" fg:x="845" fg:w="2"/><text x="67.9041%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="67.6541%" y="693" width="0.1601%" height="15" fill="rgb(213,45,22)" fg:x="845" fg:w="2"/><text x="67.9041%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="67.7342%" y="677" width="0.0801%" height="15" fill="rgb(252,154,5)" fg:x="846" fg:w="1"/><text x="67.9842%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="67.7342%" y="661" width="0.0801%" height="15" fill="rgb(221,79,52)" fg:x="846" fg:w="1"/><text x="67.9842%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="67.7342%" y="645" width="0.0801%" height="15" fill="rgb(229,220,36)" fg:x="846" fg:w="1"/><text x="67.9842%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7342%" y="629" width="0.0801%" height="15" fill="rgb(211,17,16)" fg:x="846" fg:w="1"/><text x="67.9842%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7342%" y="613" width="0.0801%" height="15" fill="rgb(222,55,31)" fg:x="846" fg:w="1"/><text x="67.9842%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7342%" y="597" width="0.0801%" height="15" fill="rgb(221,221,31)" fg:x="846" fg:w="1"/><text x="67.9842%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7342%" y="581" width="0.0801%" height="15" fill="rgb(227,168,26)" fg:x="846" fg:w="1"/><text x="67.9842%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.7342%" y="565" width="0.0801%" height="15" fill="rgb(224,139,9)" fg:x="846" fg:w="1"/><text x="67.9842%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7342%" y="549" width="0.0801%" height="15" fill="rgb(254,172,0)" fg:x="846" fg:w="1"/><text x="67.9842%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.7342%" y="533" width="0.0801%" height="15" fill="rgb(235,203,1)" fg:x="846" fg:w="1"/><text x="67.9842%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.7342%" y="517" width="0.0801%" height="15" fill="rgb(216,205,24)" fg:x="846" fg:w="1"/><text x="67.9842%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7342%" y="501" width="0.0801%" height="15" fill="rgb(233,24,6)" fg:x="846" fg:w="1"/><text x="67.9842%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.8143%" y="629" width="0.0801%" height="15" fill="rgb(244,110,9)" fg:x="847" fg:w="1"/><text x="68.0643%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8143%" y="613" width="0.0801%" height="15" fill="rgb(239,222,42)" fg:x="847" fg:w="1"/><text x="68.0643%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.8143%" y="597" width="0.0801%" height="15" fill="rgb(218,145,13)" fg:x="847" fg:w="1"/><text x="68.0643%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.8143%" y="581" width="0.0801%" height="15" fill="rgb(207,69,11)" fg:x="847" fg:w="1"/><text x="68.0643%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.8143%" y="565" width="0.0801%" height="15" fill="rgb(220,223,22)" fg:x="847" fg:w="1"/><text x="68.0643%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="67.8143%" y="549" width="0.0801%" height="15" fill="rgb(245,102,5)" fg:x="847" fg:w="1"/><text x="68.0643%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.32%)</title><rect x="67.6541%" y="757" width="0.3203%" height="15" fill="rgb(211,148,2)" fg:x="845" fg:w="4"/><text x="67.9041%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="67.6541%" y="741" width="0.3203%" height="15" fill="rgb(241,13,44)" fg:x="845" fg:w="4"/><text x="67.9041%" y="751.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="67.6541%" y="725" width="0.3203%" height="15" fill="rgb(219,137,21)" fg:x="845" fg:w="4"/><text x="67.9041%" y="735.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="67.8143%" y="709" width="0.1601%" height="15" fill="rgb(242,206,5)" fg:x="847" fg:w="2"/><text x="68.0643%" y="719.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="67.8143%" y="693" width="0.1601%" height="15" fill="rgb(217,114,22)" fg:x="847" fg:w="2"/><text x="68.0643%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="67.8143%" y="677" width="0.1601%" height="15" fill="rgb(253,206,42)" fg:x="847" fg:w="2"/><text x="68.0643%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.8143%" y="661" width="0.1601%" height="15" fill="rgb(236,102,18)" fg:x="847" fg:w="2"/><text x="68.0643%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.8143%" y="645" width="0.1601%" height="15" fill="rgb(208,59,49)" fg:x="847" fg:w="2"/><text x="68.0643%" y="655.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="67.8943%" y="629" width="0.0801%" height="15" fill="rgb(215,194,28)" fg:x="848" fg:w="1"/><text x="68.1443%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (7 samples, 0.56%)</title><rect x="67.5741%" y="789" width="0.5604%" height="15" fill="rgb(243,207,11)" fg:x="844" fg:w="7"/><text x="67.8241%" y="799.50"></text></g><g><title>engine::session::Session::new (7 samples, 0.56%)</title><rect x="67.5741%" y="773" width="0.5604%" height="15" fill="rgb(254,179,35)" fg:x="844" fg:w="7"/><text x="67.8241%" y="783.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (2 samples, 0.16%)</title><rect x="67.9744%" y="757" width="0.1601%" height="15" fill="rgb(235,97,3)" fg:x="849" fg:w="2"/><text x="68.2244%" y="767.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="67.9744%" y="741" width="0.1601%" height="15" fill="rgb(215,155,33)" fg:x="849" fg:w="2"/><text x="68.2244%" y="751.50"></text></g><g><title>libloading::os::unix::Library::open (2 samples, 0.16%)</title><rect x="67.9744%" y="725" width="0.1601%" height="15" fill="rgb(223,128,12)" fg:x="849" fg:w="2"/><text x="68.2244%" y="735.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="67.9744%" y="709" width="0.1601%" height="15" fill="rgb(208,157,18)" fg:x="849" fg:w="2"/><text x="68.2244%" y="719.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="67.9744%" y="693" width="0.1601%" height="15" fill="rgb(249,70,54)" fg:x="849" fg:w="2"/><text x="68.2244%" y="703.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="67.9744%" y="677" width="0.1601%" height="15" fill="rgb(244,118,24)" fg:x="849" fg:w="2"/><text x="68.2244%" y="687.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="67.9744%" y="661" width="0.1601%" height="15" fill="rgb(211,54,0)" fg:x="849" fg:w="2"/><text x="68.2244%" y="671.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="67.9744%" y="645" width="0.1601%" height="15" fill="rgb(245,137,45)" fg:x="849" fg:w="2"/><text x="68.2244%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="68.1345%" y="741" width="0.0801%" height="15" fill="rgb(232,154,31)" fg:x="851" fg:w="1"/><text x="68.3845%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1345%" y="725" width="0.0801%" height="15" fill="rgb(253,6,39)" fg:x="851" fg:w="1"/><text x="68.3845%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1345%" y="709" width="0.0801%" height="15" fill="rgb(234,183,24)" fg:x="851" fg:w="1"/><text x="68.3845%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1345%" y="693" width="0.0801%" height="15" fill="rgb(252,84,40)" fg:x="851" fg:w="1"/><text x="68.3845%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1345%" y="677" width="0.0801%" height="15" fill="rgb(224,65,2)" fg:x="851" fg:w="1"/><text x="68.3845%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1345%" y="661" width="0.0801%" height="15" fill="rgb(229,38,24)" fg:x="851" fg:w="1"/><text x="68.3845%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1345%" y="645" width="0.0801%" height="15" fill="rgb(218,131,50)" fg:x="851" fg:w="1"/><text x="68.3845%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1345%" y="629" width="0.0801%" height="15" fill="rgb(233,106,18)" fg:x="851" fg:w="1"/><text x="68.3845%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1345%" y="613" width="0.0801%" height="15" fill="rgb(220,216,11)" fg:x="851" fg:w="1"/><text x="68.3845%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1345%" y="597" width="0.0801%" height="15" fill="rgb(251,100,45)" fg:x="851" fg:w="1"/><text x="68.3845%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1345%" y="581" width="0.0801%" height="15" fill="rgb(235,143,32)" fg:x="851" fg:w="1"/><text x="68.3845%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1345%" y="565" width="0.0801%" height="15" fill="rgb(248,124,34)" fg:x="851" fg:w="1"/><text x="68.3845%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1345%" y="549" width="0.0801%" height="15" fill="rgb(225,221,4)" fg:x="851" fg:w="1"/><text x="68.3845%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2146%" y="661" width="0.0801%" height="15" fill="rgb(242,27,43)" fg:x="852" fg:w="1"/><text x="68.4646%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2146%" y="645" width="0.0801%" height="15" fill="rgb(227,54,8)" fg:x="852" fg:w="1"/><text x="68.4646%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.2146%" y="629" width="0.0801%" height="15" fill="rgb(253,139,49)" fg:x="852" fg:w="1"/><text x="68.4646%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.2146%" y="613" width="0.0801%" height="15" fill="rgb(231,26,43)" fg:x="852" fg:w="1"/><text x="68.4646%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.2146%" y="597" width="0.0801%" height="15" fill="rgb(207,121,39)" fg:x="852" fg:w="1"/><text x="68.4646%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.2146%" y="581" width="0.0801%" height="15" fill="rgb(223,101,35)" fg:x="852" fg:w="1"/><text x="68.4646%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.2146%" y="565" width="0.0801%" height="15" fill="rgb(232,87,23)" fg:x="852" fg:w="1"/><text x="68.4646%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="68.2146%" y="709" width="0.2402%" height="15" fill="rgb(225,180,29)" fg:x="852" fg:w="3"/><text x="68.4646%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.2146%" y="693" width="0.2402%" height="15" fill="rgb(225,25,17)" fg:x="852" fg:w="3"/><text x="68.4646%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.2146%" y="677" width="0.2402%" height="15" fill="rgb(223,8,52)" fg:x="852" fg:w="3"/><text x="68.4646%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="68.2946%" y="661" width="0.1601%" height="15" fill="rgb(246,42,21)" fg:x="853" fg:w="2"/><text x="68.5446%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.3747%" y="645" width="0.0801%" height="15" fill="rgb(205,64,43)" fg:x="854" fg:w="1"/><text x="68.6247%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.3747%" y="629" width="0.0801%" height="15" fill="rgb(221,160,13)" fg:x="854" fg:w="1"/><text x="68.6247%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="68.4548%" y="661" width="0.0801%" height="15" fill="rgb(239,58,35)" fg:x="855" fg:w="1"/><text x="68.7048%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.4548%" y="645" width="0.0801%" height="15" fill="rgb(251,26,40)" fg:x="855" fg:w="1"/><text x="68.7048%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.5348%" y="597" width="0.0801%" height="15" fill="rgb(247,0,4)" fg:x="856" fg:w="1"/><text x="68.7848%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="68.5348%" y="581" width="0.0801%" height="15" fill="rgb(218,130,10)" fg:x="856" fg:w="1"/><text x="68.7848%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="68.5348%" y="565" width="0.0801%" height="15" fill="rgb(239,32,7)" fg:x="856" fg:w="1"/><text x="68.7848%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5348%" y="549" width="0.0801%" height="15" fill="rgb(210,192,24)" fg:x="856" fg:w="1"/><text x="68.7848%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5348%" y="533" width="0.0801%" height="15" fill="rgb(226,212,17)" fg:x="856" fg:w="1"/><text x="68.7848%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5348%" y="517" width="0.0801%" height="15" fill="rgb(219,201,28)" fg:x="856" fg:w="1"/><text x="68.7848%" y="527.50"></text></g><g><title>engine::session::Session::flush (7 samples, 0.56%)</title><rect x="68.1345%" y="773" width="0.5604%" height="15" fill="rgb(235,207,41)" fg:x="851" fg:w="7"/><text x="68.3845%" y="783.50"></text></g><g><title>engine::session::Session::save_entity_changes (7 samples, 0.56%)</title><rect x="68.1345%" y="757" width="0.5604%" height="15" fill="rgb(241,95,54)" fg:x="851" fg:w="7"/><text x="68.3845%" y="767.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.48%)</title><rect x="68.2146%" y="741" width="0.4804%" height="15" fill="rgb(248,12,23)" fg:x="852" fg:w="6"/><text x="68.4646%" y="751.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (6 samples, 0.48%)</title><rect x="68.2146%" y="725" width="0.4804%" height="15" fill="rgb(228,173,4)" fg:x="852" fg:w="6"/><text x="68.4646%" y="735.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="68.4548%" y="709" width="0.2402%" height="15" fill="rgb(254,99,5)" fg:x="855" fg:w="3"/><text x="68.7048%" y="719.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="68.4548%" y="693" width="0.2402%" height="15" fill="rgb(212,184,17)" fg:x="855" fg:w="3"/><text x="68.7048%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="68.4548%" y="677" width="0.2402%" height="15" fill="rgb(252,174,1)" fg:x="855" fg:w="3"/><text x="68.7048%" y="687.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="68.5348%" y="661" width="0.1601%" height="15" fill="rgb(241,118,51)" fg:x="856" fg:w="2"/><text x="68.7848%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="68.5348%" y="645" width="0.1601%" height="15" fill="rgb(227,94,47)" fg:x="856" fg:w="2"/><text x="68.7848%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.5348%" y="629" width="0.1601%" height="15" fill="rgb(229,104,2)" fg:x="856" fg:w="2"/><text x="68.7848%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.5348%" y="613" width="0.1601%" height="15" fill="rgb(219,28,31)" fg:x="856" fg:w="2"/><text x="68.7848%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6149%" y="597" width="0.0801%" height="15" fill="rgb(233,109,36)" fg:x="857" fg:w="1"/><text x="68.8649%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="68.6950%" y="741" width="0.0801%" height="15" fill="rgb(246,88,11)" fg:x="858" fg:w="1"/><text x="68.9450%" y="751.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="68.6950%" y="725" width="0.0801%" height="15" fill="rgb(209,212,17)" fg:x="858" fg:w="1"/><text x="68.9450%" y="735.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="68.6950%" y="709" width="0.0801%" height="15" fill="rgb(243,59,29)" fg:x="858" fg:w="1"/><text x="68.9450%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6950%" y="693" width="0.0801%" height="15" fill="rgb(244,205,48)" fg:x="858" fg:w="1"/><text x="68.9450%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.7750%" y="709" width="0.0801%" height="15" fill="rgb(227,30,6)" fg:x="859" fg:w="1"/><text x="69.0250%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="68.7750%" y="693" width="0.0801%" height="15" fill="rgb(220,205,48)" fg:x="859" fg:w="1"/><text x="69.0250%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="68.7750%" y="677" width="0.0801%" height="15" fill="rgb(250,94,14)" fg:x="859" fg:w="1"/><text x="69.0250%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7750%" y="661" width="0.0801%" height="15" fill="rgb(216,119,42)" fg:x="859" fg:w="1"/><text x="69.0250%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7750%" y="645" width="0.0801%" height="15" fill="rgb(232,155,0)" fg:x="859" fg:w="1"/><text x="69.0250%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7750%" y="629" width="0.0801%" height="15" fill="rgb(212,24,32)" fg:x="859" fg:w="1"/><text x="69.0250%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7750%" y="613" width="0.0801%" height="15" fill="rgb(216,69,20)" fg:x="859" fg:w="1"/><text x="69.0250%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7750%" y="597" width="0.0801%" height="15" fill="rgb(229,73,31)" fg:x="859" fg:w="1"/><text x="69.0250%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7750%" y="581" width="0.0801%" height="15" fill="rgb(224,219,20)" fg:x="859" fg:w="1"/><text x="69.0250%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.7750%" y="565" width="0.0801%" height="15" fill="rgb(215,146,41)" fg:x="859" fg:w="1"/><text x="69.0250%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7750%" y="549" width="0.0801%" height="15" fill="rgb(244,71,31)" fg:x="859" fg:w="1"/><text x="69.0250%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.7750%" y="533" width="0.0801%" height="15" fill="rgb(224,24,11)" fg:x="859" fg:w="1"/><text x="69.0250%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.7750%" y="517" width="0.0801%" height="15" fill="rgb(229,76,15)" fg:x="859" fg:w="1"/><text x="69.0250%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.7750%" y="501" width="0.0801%" height="15" fill="rgb(209,93,2)" fg:x="859" fg:w="1"/><text x="69.0250%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.7750%" y="485" width="0.0801%" height="15" fill="rgb(216,200,50)" fg:x="859" fg:w="1"/><text x="69.0250%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.7750%" y="469" width="0.0801%" height="15" fill="rgb(211,67,34)" fg:x="859" fg:w="1"/><text x="69.0250%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.7750%" y="453" width="0.0801%" height="15" fill="rgb(225,87,47)" fg:x="859" fg:w="1"/><text x="69.0250%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.7750%" y="437" width="0.0801%" height="15" fill="rgb(217,185,16)" fg:x="859" fg:w="1"/><text x="69.0250%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.7750%" y="421" width="0.0801%" height="15" fill="rgb(205,0,0)" fg:x="859" fg:w="1"/><text x="69.0250%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.7750%" y="405" width="0.0801%" height="15" fill="rgb(207,116,45)" fg:x="859" fg:w="1"/><text x="69.0250%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.7750%" y="389" width="0.0801%" height="15" fill="rgb(221,156,26)" fg:x="859" fg:w="1"/><text x="69.0250%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.7750%" y="373" width="0.0801%" height="15" fill="rgb(213,140,4)" fg:x="859" fg:w="1"/><text x="69.0250%" y="383.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="68.6950%" y="773" width="0.2402%" height="15" fill="rgb(231,224,15)" fg:x="858" fg:w="3"/><text x="68.9450%" y="783.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="68.6950%" y="757" width="0.2402%" height="15" fill="rgb(244,76,20)" fg:x="858" fg:w="3"/><text x="68.9450%" y="767.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="68.7750%" y="741" width="0.1601%" height="15" fill="rgb(238,117,7)" fg:x="859" fg:w="2"/><text x="69.0250%" y="751.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="68.7750%" y="725" width="0.1601%" height="15" fill="rgb(235,1,10)" fg:x="859" fg:w="2"/><text x="69.0250%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.8551%" y="709" width="0.0801%" height="15" fill="rgb(216,165,6)" fg:x="860" fg:w="1"/><text x="69.1051%" y="719.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="68.8551%" y="693" width="0.0801%" height="15" fill="rgb(246,91,35)" fg:x="860" fg:w="1"/><text x="69.1051%" y="703.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="68.8551%" y="677" width="0.0801%" height="15" fill="rgb(228,96,24)" fg:x="860" fg:w="1"/><text x="69.1051%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8551%" y="661" width="0.0801%" height="15" fill="rgb(254,217,53)" fg:x="860" fg:w="1"/><text x="69.1051%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8551%" y="645" width="0.0801%" height="15" fill="rgb(209,60,0)" fg:x="860" fg:w="1"/><text x="69.1051%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8551%" y="629" width="0.0801%" height="15" fill="rgb(250,93,26)" fg:x="860" fg:w="1"/><text x="69.1051%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8551%" y="613" width="0.0801%" height="15" fill="rgb(211,9,40)" fg:x="860" fg:w="1"/><text x="69.1051%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.8551%" y="597" width="0.0801%" height="15" fill="rgb(242,57,20)" fg:x="860" fg:w="1"/><text x="69.1051%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8551%" y="581" width="0.0801%" height="15" fill="rgb(248,85,48)" fg:x="860" fg:w="1"/><text x="69.1051%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8551%" y="565" width="0.0801%" height="15" fill="rgb(212,117,2)" fg:x="860" fg:w="1"/><text x="69.1051%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="68.8551%" y="549" width="0.0801%" height="15" fill="rgb(243,19,3)" fg:x="860" fg:w="1"/><text x="69.1051%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="68.9351%" y="709" width="0.0801%" height="15" fill="rgb(232,217,24)" fg:x="861" fg:w="1"/><text x="69.1851%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.9351%" y="693" width="0.0801%" height="15" fill="rgb(224,175,40)" fg:x="861" fg:w="1"/><text x="69.1851%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9351%" y="677" width="0.0801%" height="15" fill="rgb(212,162,32)" fg:x="861" fg:w="1"/><text x="69.1851%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.9351%" y="661" width="0.0801%" height="15" fill="rgb(215,9,4)" fg:x="861" fg:w="1"/><text x="69.1851%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.9351%" y="645" width="0.0801%" height="15" fill="rgb(242,42,7)" fg:x="861" fg:w="1"/><text x="69.1851%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.9351%" y="629" width="0.0801%" height="15" fill="rgb(242,184,45)" fg:x="861" fg:w="1"/><text x="69.1851%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.9351%" y="613" width="0.0801%" height="15" fill="rgb(228,111,51)" fg:x="861" fg:w="1"/><text x="69.1851%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9351%" y="597" width="0.0801%" height="15" fill="rgb(236,147,17)" fg:x="861" fg:w="1"/><text x="69.1851%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.9351%" y="581" width="0.0801%" height="15" fill="rgb(210,75,22)" fg:x="861" fg:w="1"/><text x="69.1851%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.9351%" y="565" width="0.0801%" height="15" fill="rgb(217,159,45)" fg:x="861" fg:w="1"/><text x="69.1851%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.9351%" y="549" width="0.0801%" height="15" fill="rgb(245,165,53)" fg:x="861" fg:w="1"/><text x="69.1851%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.9351%" y="533" width="0.0801%" height="15" fill="rgb(251,190,50)" fg:x="861" fg:w="1"/><text x="69.1851%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.9351%" y="517" width="0.0801%" height="15" fill="rgb(208,203,29)" fg:x="861" fg:w="1"/><text x="69.1851%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.9351%" y="501" width="0.0801%" height="15" fill="rgb(207,209,35)" fg:x="861" fg:w="1"/><text x="69.1851%" y="511.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="69.0152%" y="709" width="0.0801%" height="15" fill="rgb(230,144,49)" fg:x="862" fg:w="1"/><text x="69.2652%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="69.0152%" y="693" width="0.0801%" height="15" fill="rgb(229,31,6)" fg:x="862" fg:w="1"/><text x="69.2652%" y="703.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="69.0152%" y="677" width="0.0801%" height="15" fill="rgb(251,129,24)" fg:x="862" fg:w="1"/><text x="69.2652%" y="687.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="69.0152%" y="661" width="0.0801%" height="15" fill="rgb(235,105,15)" fg:x="862" fg:w="1"/><text x="69.2652%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.0152%" y="645" width="0.0801%" height="15" fill="rgb(216,52,43)" fg:x="862" fg:w="1"/><text x="69.2652%" y="655.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="69.0152%" y="629" width="0.0801%" height="15" fill="rgb(238,144,41)" fg:x="862" fg:w="1"/><text x="69.2652%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="69.0152%" y="613" width="0.0801%" height="15" fill="rgb(243,63,9)" fg:x="862" fg:w="1"/><text x="69.2652%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="69.0152%" y="597" width="0.0801%" height="15" fill="rgb(246,208,1)" fg:x="862" fg:w="1"/><text x="69.2652%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.0152%" y="581" width="0.0801%" height="15" fill="rgb(233,182,18)" fg:x="862" fg:w="1"/><text x="69.2652%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.0152%" y="565" width="0.0801%" height="15" fill="rgb(242,224,8)" fg:x="862" fg:w="1"/><text x="69.2652%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.0152%" y="549" width="0.0801%" height="15" fill="rgb(243,54,37)" fg:x="862" fg:w="1"/><text x="69.2652%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.0152%" y="533" width="0.0801%" height="15" fill="rgb(233,192,12)" fg:x="862" fg:w="1"/><text x="69.2652%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="68.9351%" y="757" width="0.2402%" height="15" fill="rgb(251,192,53)" fg:x="861" fg:w="3"/><text x="69.1851%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="68.9351%" y="741" width="0.2402%" height="15" fill="rgb(246,141,26)" fg:x="861" fg:w="3"/><text x="69.1851%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="68.9351%" y="725" width="0.2402%" height="15" fill="rgb(239,195,19)" fg:x="861" fg:w="3"/><text x="69.1851%" y="735.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="69.0953%" y="709" width="0.0801%" height="15" fill="rgb(241,16,39)" fg:x="863" fg:w="1"/><text x="69.3453%" y="719.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="69.0953%" y="693" width="0.0801%" height="15" fill="rgb(223,13,53)" fg:x="863" fg:w="1"/><text x="69.3453%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="69.0953%" y="677" width="0.0801%" height="15" fill="rgb(214,227,0)" fg:x="863" fg:w="1"/><text x="69.3453%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.0953%" y="661" width="0.0801%" height="15" fill="rgb(228,103,26)" fg:x="863" fg:w="1"/><text x="69.3453%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.0953%" y="645" width="0.0801%" height="15" fill="rgb(254,177,53)" fg:x="863" fg:w="1"/><text x="69.3453%" y="655.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="69.0953%" y="629" width="0.0801%" height="15" fill="rgb(208,201,34)" fg:x="863" fg:w="1"/><text x="69.3453%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="69.0953%" y="613" width="0.0801%" height="15" fill="rgb(212,39,5)" fg:x="863" fg:w="1"/><text x="69.3453%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0953%" y="597" width="0.0801%" height="15" fill="rgb(246,117,3)" fg:x="863" fg:w="1"/><text x="69.3453%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0953%" y="581" width="0.0801%" height="15" fill="rgb(244,118,39)" fg:x="863" fg:w="1"/><text x="69.3453%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0953%" y="565" width="0.0801%" height="15" fill="rgb(241,64,10)" fg:x="863" fg:w="1"/><text x="69.3453%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0953%" y="549" width="0.0801%" height="15" fill="rgb(229,39,44)" fg:x="863" fg:w="1"/><text x="69.3453%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0953%" y="533" width="0.0801%" height="15" fill="rgb(230,226,3)" fg:x="863" fg:w="1"/><text x="69.3453%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0953%" y="517" width="0.0801%" height="15" fill="rgb(222,13,42)" fg:x="863" fg:w="1"/><text x="69.3453%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0953%" y="501" width="0.0801%" height="15" fill="rgb(247,180,54)" fg:x="863" fg:w="1"/><text x="69.3453%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="69.1753%" y="709" width="0.0801%" height="15" fill="rgb(205,96,16)" fg:x="864" fg:w="1"/><text x="69.4253%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.1753%" y="693" width="0.0801%" height="15" fill="rgb(205,100,21)" fg:x="864" fg:w="1"/><text x="69.4253%" y="703.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.1753%" y="677" width="0.0801%" height="15" fill="rgb(248,51,4)" fg:x="864" fg:w="1"/><text x="69.4253%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="69.3355%" y="677" width="0.2402%" height="15" fill="rgb(217,197,30)" fg:x="866" fg:w="3"/><text x="69.5855%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.4155%" y="661" width="0.1601%" height="15" fill="rgb(240,179,40)" fg:x="867" fg:w="2"/><text x="69.6655%" y="671.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.4155%" y="645" width="0.1601%" height="15" fill="rgb(212,185,35)" fg:x="867" fg:w="2"/><text x="69.6655%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.4956%" y="629" width="0.0801%" height="15" fill="rgb(251,222,31)" fg:x="868" fg:w="1"/><text x="69.7456%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.4956%" y="613" width="0.0801%" height="15" fill="rgb(208,140,36)" fg:x="868" fg:w="1"/><text x="69.7456%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.4956%" y="597" width="0.0801%" height="15" fill="rgb(220,148,1)" fg:x="868" fg:w="1"/><text x="69.7456%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.4956%" y="581" width="0.0801%" height="15" fill="rgb(254,4,28)" fg:x="868" fg:w="1"/><text x="69.7456%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.4956%" y="565" width="0.0801%" height="15" fill="rgb(222,185,44)" fg:x="868" fg:w="1"/><text x="69.7456%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6557%" y="661" width="0.0801%" height="15" fill="rgb(215,74,39)" fg:x="870" fg:w="1"/><text x="69.9057%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6557%" y="645" width="0.0801%" height="15" fill="rgb(247,86,4)" fg:x="870" fg:w="1"/><text x="69.9057%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6557%" y="629" width="0.0801%" height="15" fill="rgb(231,105,32)" fg:x="870" fg:w="1"/><text x="69.9057%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6557%" y="613" width="0.0801%" height="15" fill="rgb(222,65,35)" fg:x="870" fg:w="1"/><text x="69.9057%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.6557%" y="597" width="0.0801%" height="15" fill="rgb(218,145,35)" fg:x="870" fg:w="1"/><text x="69.9057%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.6557%" y="581" width="0.0801%" height="15" fill="rgb(208,7,15)" fg:x="870" fg:w="1"/><text x="69.9057%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="69.3355%" y="693" width="0.5604%" height="15" fill="rgb(209,83,13)" fg:x="866" fg:w="7"/><text x="69.5855%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="69.5757%" y="677" width="0.3203%" height="15" fill="rgb(218,3,10)" fg:x="869" fg:w="4"/><text x="69.8257%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.7358%" y="661" width="0.1601%" height="15" fill="rgb(211,219,4)" fg:x="871" fg:w="2"/><text x="69.9858%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="69.7358%" y="645" width="0.1601%" height="15" fill="rgb(228,194,12)" fg:x="871" fg:w="2"/><text x="69.9858%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.8159%" y="629" width="0.0801%" height="15" fill="rgb(210,175,7)" fg:x="872" fg:w="1"/><text x="70.0659%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.8159%" y="613" width="0.0801%" height="15" fill="rgb(243,132,6)" fg:x="872" fg:w="1"/><text x="70.0659%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.8159%" y="597" width="0.0801%" height="15" fill="rgb(207,72,18)" fg:x="872" fg:w="1"/><text x="70.0659%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="69.8159%" y="581" width="0.0801%" height="15" fill="rgb(236,1,18)" fg:x="872" fg:w="1"/><text x="70.0659%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8959%" y="693" width="0.0801%" height="15" fill="rgb(227,0,18)" fg:x="873" fg:w="1"/><text x="70.1459%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.8959%" y="677" width="0.0801%" height="15" fill="rgb(247,37,5)" fg:x="873" fg:w="1"/><text x="70.1459%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8959%" y="661" width="0.0801%" height="15" fill="rgb(237,179,24)" fg:x="873" fg:w="1"/><text x="70.1459%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8959%" y="645" width="0.0801%" height="15" fill="rgb(226,53,20)" fg:x="873" fg:w="1"/><text x="70.1459%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.8959%" y="629" width="0.0801%" height="15" fill="rgb(247,75,7)" fg:x="873" fg:w="1"/><text x="70.1459%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.8959%" y="613" width="0.0801%" height="15" fill="rgb(233,96,12)" fg:x="873" fg:w="1"/><text x="70.1459%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.8959%" y="597" width="0.0801%" height="15" fill="rgb(224,125,0)" fg:x="873" fg:w="1"/><text x="70.1459%" y="607.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.88%)</title><rect x="69.1753%" y="757" width="0.8807%" height="15" fill="rgb(224,92,25)" fg:x="864" fg:w="11"/><text x="69.4253%" y="767.50"></text></g><g><title>engine::session::Session::save_entity_changes (11 samples, 0.88%)</title><rect x="69.1753%" y="741" width="0.8807%" height="15" fill="rgb(224,42,24)" fg:x="864" fg:w="11"/><text x="69.4253%" y="751.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (11 samples, 0.88%)</title><rect x="69.1753%" y="725" width="0.8807%" height="15" fill="rgb(234,132,49)" fg:x="864" fg:w="11"/><text x="69.4253%" y="735.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (10 samples, 0.80%)</title><rect x="69.2554%" y="709" width="0.8006%" height="15" fill="rgb(248,100,35)" fg:x="865" fg:w="10"/><text x="69.5054%" y="719.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="69.9760%" y="693" width="0.0801%" height="15" fill="rgb(239,94,40)" fg:x="874" fg:w="1"/><text x="70.2260%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="69.9760%" y="677" width="0.0801%" height="15" fill="rgb(235,139,28)" fg:x="874" fg:w="1"/><text x="70.2260%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.9760%" y="661" width="0.0801%" height="15" fill="rgb(217,144,7)" fg:x="874" fg:w="1"/><text x="70.2260%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="69.9760%" y="645" width="0.0801%" height="15" fill="rgb(227,55,4)" fg:x="874" fg:w="1"/><text x="70.2260%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.9760%" y="629" width="0.0801%" height="15" fill="rgb(252,82,54)" fg:x="874" fg:w="1"/><text x="70.2260%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.9760%" y="613" width="0.0801%" height="15" fill="rgb(245,172,4)" fg:x="874" fg:w="1"/><text x="70.2260%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.0560%" y="693" width="0.0801%" height="15" fill="rgb(207,26,27)" fg:x="875" fg:w="1"/><text x="70.3060%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.0560%" y="677" width="0.0801%" height="15" fill="rgb(252,98,18)" fg:x="875" fg:w="1"/><text x="70.3060%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.0560%" y="661" width="0.0801%" height="15" fill="rgb(244,8,26)" fg:x="875" fg:w="1"/><text x="70.3060%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0560%" y="645" width="0.0801%" height="15" fill="rgb(237,173,45)" fg:x="875" fg:w="1"/><text x="70.3060%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0560%" y="629" width="0.0801%" height="15" fill="rgb(208,213,49)" fg:x="875" fg:w="1"/><text x="70.3060%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0560%" y="613" width="0.0801%" height="15" fill="rgb(212,122,37)" fg:x="875" fg:w="1"/><text x="70.3060%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0560%" y="597" width="0.0801%" height="15" fill="rgb(213,80,17)" fg:x="875" fg:w="1"/><text x="70.3060%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.0560%" y="581" width="0.0801%" height="15" fill="rgb(206,210,43)" fg:x="875" fg:w="1"/><text x="70.3060%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0560%" y="565" width="0.0801%" height="15" fill="rgb(229,214,3)" fg:x="875" fg:w="1"/><text x="70.3060%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="70.0560%" y="741" width="0.1601%" height="15" fill="rgb(235,213,29)" fg:x="875" fg:w="2"/><text x="70.3060%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="70.0560%" y="725" width="0.1601%" height="15" fill="rgb(248,135,26)" fg:x="875" fg:w="2"/><text x="70.3060%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="70.0560%" y="709" width="0.1601%" height="15" fill="rgb(242,188,12)" fg:x="875" fg:w="2"/><text x="70.3060%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.1361%" y="693" width="0.0801%" height="15" fill="rgb(245,38,12)" fg:x="876" fg:w="1"/><text x="70.3861%" y="703.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="70.1361%" y="677" width="0.0801%" height="15" fill="rgb(218,42,13)" fg:x="876" fg:w="1"/><text x="70.3861%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="70.1361%" y="661" width="0.0801%" height="15" fill="rgb(238,132,49)" fg:x="876" fg:w="1"/><text x="70.3861%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1361%" y="645" width="0.0801%" height="15" fill="rgb(209,196,19)" fg:x="876" fg:w="1"/><text x="70.3861%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1361%" y="629" width="0.0801%" height="15" fill="rgb(244,131,22)" fg:x="876" fg:w="1"/><text x="70.3861%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1361%" y="613" width="0.0801%" height="15" fill="rgb(223,18,34)" fg:x="876" fg:w="1"/><text x="70.3861%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1361%" y="597" width="0.0801%" height="15" fill="rgb(252,124,54)" fg:x="876" fg:w="1"/><text x="70.3861%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1361%" y="581" width="0.0801%" height="15" fill="rgb(229,106,42)" fg:x="876" fg:w="1"/><text x="70.3861%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="70.0560%" y="757" width="0.3203%" height="15" fill="rgb(221,129,1)" fg:x="875" fg:w="4"/><text x="70.3060%" y="767.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="70.2162%" y="741" width="0.1601%" height="15" fill="rgb(229,74,15)" fg:x="877" fg:w="2"/><text x="70.4662%" y="751.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="70.2162%" y="725" width="0.1601%" height="15" fill="rgb(210,206,50)" fg:x="877" fg:w="2"/><text x="70.4662%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="70.2162%" y="709" width="0.1601%" height="15" fill="rgb(251,114,31)" fg:x="877" fg:w="2"/><text x="70.4662%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.2962%" y="693" width="0.0801%" height="15" fill="rgb(215,225,28)" fg:x="878" fg:w="1"/><text x="70.5462%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.2962%" y="677" width="0.0801%" height="15" fill="rgb(237,109,14)" fg:x="878" fg:w="1"/><text x="70.5462%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.2962%" y="661" width="0.0801%" height="15" fill="rgb(230,13,37)" fg:x="878" fg:w="1"/><text x="70.5462%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2962%" y="645" width="0.0801%" height="15" fill="rgb(231,40,28)" fg:x="878" fg:w="1"/><text x="70.5462%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2962%" y="629" width="0.0801%" height="15" fill="rgb(231,202,18)" fg:x="878" fg:w="1"/><text x="70.5462%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2962%" y="613" width="0.0801%" height="15" fill="rgb(225,33,18)" fg:x="878" fg:w="1"/><text x="70.5462%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="70.3763%" y="725" width="0.0801%" height="15" fill="rgb(223,64,47)" fg:x="879" fg:w="1"/><text x="70.6263%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.3763%" y="709" width="0.0801%" height="15" fill="rgb(234,114,13)" fg:x="879" fg:w="1"/><text x="70.6263%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.3763%" y="693" width="0.0801%" height="15" fill="rgb(248,56,40)" fg:x="879" fg:w="1"/><text x="70.6263%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="70.4564%" y="725" width="0.0801%" height="15" fill="rgb(221,194,21)" fg:x="880" fg:w="1"/><text x="70.7064%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="70.4564%" y="709" width="0.0801%" height="15" fill="rgb(242,108,46)" fg:x="880" fg:w="1"/><text x="70.7064%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.4564%" y="693" width="0.0801%" height="15" fill="rgb(220,106,10)" fg:x="880" fg:w="1"/><text x="70.7064%" y="703.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.4564%" y="677" width="0.0801%" height="15" fill="rgb(211,88,4)" fg:x="880" fg:w="1"/><text x="70.7064%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.4564%" y="661" width="0.0801%" height="15" fill="rgb(214,95,34)" fg:x="880" fg:w="1"/><text x="70.7064%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4564%" y="645" width="0.0801%" height="15" fill="rgb(250,160,33)" fg:x="880" fg:w="1"/><text x="70.7064%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.4564%" y="629" width="0.0801%" height="15" fill="rgb(225,29,10)" fg:x="880" fg:w="1"/><text x="70.7064%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4564%" y="613" width="0.0801%" height="15" fill="rgb(224,28,30)" fg:x="880" fg:w="1"/><text x="70.7064%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4564%" y="597" width="0.0801%" height="15" fill="rgb(231,77,4)" fg:x="880" fg:w="1"/><text x="70.7064%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4564%" y="581" width="0.0801%" height="15" fill="rgb(209,63,21)" fg:x="880" fg:w="1"/><text x="70.7064%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4564%" y="565" width="0.0801%" height="15" fill="rgb(226,22,11)" fg:x="880" fg:w="1"/><text x="70.7064%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.5364%" y="629" width="0.0801%" height="15" fill="rgb(216,82,30)" fg:x="881" fg:w="1"/><text x="70.7864%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5364%" y="613" width="0.0801%" height="15" fill="rgb(246,227,38)" fg:x="881" fg:w="1"/><text x="70.7864%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5364%" y="597" width="0.0801%" height="15" fill="rgb(251,203,53)" fg:x="881" fg:w="1"/><text x="70.7864%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5364%" y="581" width="0.0801%" height="15" fill="rgb(254,101,1)" fg:x="881" fg:w="1"/><text x="70.7864%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.5364%" y="565" width="0.0801%" height="15" fill="rgb(241,180,5)" fg:x="881" fg:w="1"/><text x="70.7864%" y="575.50"></text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="70.3763%" y="757" width="0.3203%" height="15" fill="rgb(218,168,4)" fg:x="879" fg:w="4"/><text x="70.6263%" y="767.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="70.3763%" y="741" width="0.3203%" height="15" fill="rgb(224,223,32)" fg:x="879" fg:w="4"/><text x="70.6263%" y="751.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="70.5364%" y="725" width="0.1601%" height="15" fill="rgb(236,106,22)" fg:x="881" fg:w="2"/><text x="70.7864%" y="735.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="70.5364%" y="709" width="0.1601%" height="15" fill="rgb(206,121,5)" fg:x="881" fg:w="2"/><text x="70.7864%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="70.5364%" y="693" width="0.1601%" height="15" fill="rgb(233,87,28)" fg:x="881" fg:w="2"/><text x="70.7864%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="70.5364%" y="677" width="0.1601%" height="15" fill="rgb(236,137,17)" fg:x="881" fg:w="2"/><text x="70.7864%" y="687.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="70.5364%" y="661" width="0.1601%" height="15" fill="rgb(209,183,38)" fg:x="881" fg:w="2"/><text x="70.7864%" y="671.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="70.5364%" y="645" width="0.1601%" height="15" fill="rgb(206,162,44)" fg:x="881" fg:w="2"/><text x="70.7864%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="70.6165%" y="629" width="0.0801%" height="15" fill="rgb(237,70,39)" fg:x="882" fg:w="1"/><text x="70.8665%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.6165%" y="613" width="0.0801%" height="15" fill="rgb(212,176,5)" fg:x="882" fg:w="1"/><text x="70.8665%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.6165%" y="597" width="0.0801%" height="15" fill="rgb(232,95,16)" fg:x="882" fg:w="1"/><text x="70.8665%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6165%" y="581" width="0.0801%" height="15" fill="rgb(219,115,35)" fg:x="882" fg:w="1"/><text x="70.8665%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.6966%" y="741" width="0.0801%" height="15" fill="rgb(251,67,27)" fg:x="883" fg:w="1"/><text x="70.9466%" y="751.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.6966%" y="725" width="0.0801%" height="15" fill="rgb(222,95,40)" fg:x="883" fg:w="1"/><text x="70.9466%" y="735.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.6966%" y="709" width="0.0801%" height="15" fill="rgb(250,35,16)" fg:x="883" fg:w="1"/><text x="70.9466%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.6966%" y="693" width="0.0801%" height="15" fill="rgb(224,86,44)" fg:x="883" fg:w="1"/><text x="70.9466%" y="703.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="70.6966%" y="677" width="0.0801%" height="15" fill="rgb(237,53,53)" fg:x="883" fg:w="1"/><text x="70.9466%" y="687.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="70.6966%" y="661" width="0.0801%" height="15" fill="rgb(208,171,33)" fg:x="883" fg:w="1"/><text x="70.9466%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="70.6966%" y="645" width="0.0801%" height="15" fill="rgb(222,64,27)" fg:x="883" fg:w="1"/><text x="70.9466%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.6966%" y="629" width="0.0801%" height="15" fill="rgb(221,121,35)" fg:x="883" fg:w="1"/><text x="70.9466%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.6966%" y="613" width="0.0801%" height="15" fill="rgb(228,137,42)" fg:x="883" fg:w="1"/><text x="70.9466%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (24 samples, 1.92%)</title><rect x="68.9351%" y="773" width="1.9215%" height="15" fill="rgb(227,54,21)" fg:x="861" fg:w="24"/><text x="69.1851%" y="783.50">p..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="70.6966%" y="757" width="0.1601%" height="15" fill="rgb(240,168,33)" fg:x="883" fg:w="2"/><text x="70.9466%" y="767.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="70.7766%" y="741" width="0.0801%" height="15" fill="rgb(243,159,6)" fg:x="884" fg:w="1"/><text x="71.0266%" y="751.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="70.7766%" y="725" width="0.0801%" height="15" fill="rgb(205,211,41)" fg:x="884" fg:w="1"/><text x="71.0266%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="70.7766%" y="709" width="0.0801%" height="15" fill="rgb(253,30,1)" fg:x="884" fg:w="1"/><text x="71.0266%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.7766%" y="693" width="0.0801%" height="15" fill="rgb(226,80,18)" fg:x="884" fg:w="1"/><text x="71.0266%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="70.7766%" y="677" width="0.0801%" height="15" fill="rgb(253,156,46)" fg:x="884" fg:w="1"/><text x="71.0266%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.8567%" y="741" width="0.0801%" height="15" fill="rgb(248,87,27)" fg:x="885" fg:w="1"/><text x="71.1067%" y="751.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="70.9367%" y="709" width="0.0801%" height="15" fill="rgb(227,122,2)" fg:x="886" fg:w="1"/><text x="71.1867%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="70.9367%" y="693" width="0.0801%" height="15" fill="rgb(229,94,39)" fg:x="886" fg:w="1"/><text x="71.1867%" y="703.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (37 samples, 2.96%)</title><rect x="68.1345%" y="789" width="2.9624%" height="15" fill="rgb(225,173,31)" fg:x="851" fg:w="37"/><text x="68.3845%" y="799.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="70.8567%" y="773" width="0.2402%" height="15" fill="rgb(239,176,30)" fg:x="885" fg:w="3"/><text x="71.1067%" y="783.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="70.8567%" y="757" width="0.2402%" height="15" fill="rgb(212,104,21)" fg:x="885" fg:w="3"/><text x="71.1067%" y="767.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="70.9367%" y="741" width="0.1601%" height="15" fill="rgb(240,209,40)" fg:x="886" fg:w="2"/><text x="71.1867%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="70.9367%" y="725" width="0.1601%" height="15" fill="rgb(234,195,5)" fg:x="886" fg:w="2"/><text x="71.1867%" y="735.50"></text></g><g><title>kernel::model::scopes::save_props (1 samples, 0.08%)</title><rect x="71.0168%" y="709" width="0.0801%" height="15" fill="rgb(238,213,1)" fg:x="887" fg:w="1"/><text x="71.2668%" y="719.50"></text></g><g><title>kernel::model::entity::Entity::replace_scope (1 samples, 0.08%)</title><rect x="71.0168%" y="693" width="0.0801%" height="15" fill="rgb(235,182,54)" fg:x="887" fg:w="1"/><text x="71.2668%" y="703.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0168%" y="677" width="0.0801%" height="15" fill="rgb(229,50,46)" fg:x="887" fg:w="1"/><text x="71.2668%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.0168%" y="661" width="0.0801%" height="15" fill="rgb(219,145,13)" fg:x="887" fg:w="1"/><text x="71.2668%" y="671.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0168%" y="645" width="0.0801%" height="15" fill="rgb(220,226,10)" fg:x="887" fg:w="1"/><text x="71.2668%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.0168%" y="629" width="0.0801%" height="15" fill="rgb(248,47,30)" fg:x="887" fg:w="1"/><text x="71.2668%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="71.0168%" y="613" width="0.0801%" height="15" fill="rgb(231,209,44)" fg:x="887" fg:w="1"/><text x="71.2668%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::ser::Serialize for kernel::model::scopes::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="71.0168%" y="597" width="0.0801%" height="15" fill="rgb(209,80,30)" fg:x="887" fg:w="1"/><text x="71.2668%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.0168%" y="581" width="0.0801%" height="15" fill="rgb(232,9,14)" fg:x="887" fg:w="1"/><text x="71.2668%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="71.0969%" y="757" width="0.0801%" height="15" fill="rgb(243,91,43)" fg:x="888" fg:w="1"/><text x="71.3469%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0969%" y="741" width="0.0801%" height="15" fill="rgb(231,90,52)" fg:x="888" fg:w="1"/><text x="71.3469%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.0969%" y="725" width="0.0801%" height="15" fill="rgb(253,192,44)" fg:x="888" fg:w="1"/><text x="71.3469%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.0969%" y="709" width="0.0801%" height="15" fill="rgb(241,66,31)" fg:x="888" fg:w="1"/><text x="71.3469%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.0969%" y="693" width="0.0801%" height="15" fill="rgb(235,81,37)" fg:x="888" fg:w="1"/><text x="71.3469%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.0969%" y="677" width="0.0801%" height="15" fill="rgb(223,221,9)" fg:x="888" fg:w="1"/><text x="71.3469%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0969%" y="661" width="0.0801%" height="15" fill="rgb(242,180,7)" fg:x="888" fg:w="1"/><text x="71.3469%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.0969%" y="645" width="0.0801%" height="15" fill="rgb(243,78,19)" fg:x="888" fg:w="1"/><text x="71.3469%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.0969%" y="629" width="0.0801%" height="15" fill="rgb(233,23,17)" fg:x="888" fg:w="1"/><text x="71.3469%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.0969%" y="613" width="0.0801%" height="15" fill="rgb(252,122,45)" fg:x="888" fg:w="1"/><text x="71.3469%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.0969%" y="597" width="0.0801%" height="15" fill="rgb(247,108,20)" fg:x="888" fg:w="1"/><text x="71.3469%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.0969%" y="581" width="0.0801%" height="15" fill="rgb(235,84,21)" fg:x="888" fg:w="1"/><text x="71.3469%" y="591.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="71.0969%" y="565" width="0.0801%" height="15" fill="rgb(247,129,10)" fg:x="888" fg:w="1"/><text x="71.3469%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.2570%" y="709" width="0.0801%" height="15" fill="rgb(208,173,14)" fg:x="890" fg:w="1"/><text x="71.5070%" y="719.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.2570%" y="693" width="0.0801%" height="15" fill="rgb(236,31,38)" fg:x="890" fg:w="1"/><text x="71.5070%" y="703.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.2570%" y="677" width="0.0801%" height="15" fill="rgb(232,65,17)" fg:x="890" fg:w="1"/><text x="71.5070%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.3371%" y="693" width="0.0801%" height="15" fill="rgb(224,45,49)" fg:x="891" fg:w="1"/><text x="71.5871%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.3371%" y="677" width="0.0801%" height="15" fill="rgb(225,2,53)" fg:x="891" fg:w="1"/><text x="71.5871%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.3371%" y="661" width="0.0801%" height="15" fill="rgb(248,210,53)" fg:x="891" fg:w="1"/><text x="71.5871%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.4171%" y="629" width="0.0801%" height="15" fill="rgb(211,1,30)" fg:x="892" fg:w="1"/><text x="71.6671%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="71.2570%" y="725" width="0.3203%" height="15" fill="rgb(224,96,15)" fg:x="890" fg:w="4"/><text x="71.5070%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="71.3371%" y="709" width="0.2402%" height="15" fill="rgb(252,45,11)" fg:x="891" fg:w="3"/><text x="71.5871%" y="719.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.4171%" y="693" width="0.1601%" height="15" fill="rgb(220,125,38)" fg:x="892" fg:w="2"/><text x="71.6671%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.4171%" y="677" width="0.1601%" height="15" fill="rgb(243,161,33)" fg:x="892" fg:w="2"/><text x="71.6671%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.4171%" y="661" width="0.1601%" height="15" fill="rgb(248,197,34)" fg:x="892" fg:w="2"/><text x="71.6671%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.4171%" y="645" width="0.1601%" height="15" fill="rgb(228,165,23)" fg:x="892" fg:w="2"/><text x="71.6671%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.4972%" y="629" width="0.0801%" height="15" fill="rgb(236,94,38)" fg:x="893" fg:w="1"/><text x="71.7472%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5773%" y="725" width="0.0801%" height="15" fill="rgb(220,13,23)" fg:x="894" fg:w="1"/><text x="71.8273%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.5773%" y="709" width="0.0801%" height="15" fill="rgb(234,26,39)" fg:x="894" fg:w="1"/><text x="71.8273%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5773%" y="693" width="0.0801%" height="15" fill="rgb(205,117,44)" fg:x="894" fg:w="1"/><text x="71.8273%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5773%" y="677" width="0.0801%" height="15" fill="rgb(250,42,2)" fg:x="894" fg:w="1"/><text x="71.8273%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5773%" y="661" width="0.0801%" height="15" fill="rgb(223,83,14)" fg:x="894" fg:w="1"/><text x="71.8273%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="693" width="0.0801%" height="15" fill="rgb(241,147,50)" fg:x="896" fg:w="1"/><text x="71.9874%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="677" width="0.0801%" height="15" fill="rgb(218,90,6)" fg:x="896" fg:w="1"/><text x="71.9874%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="661" width="0.0801%" height="15" fill="rgb(210,191,5)" fg:x="896" fg:w="1"/><text x="71.9874%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="645" width="0.0801%" height="15" fill="rgb(225,139,19)" fg:x="896" fg:w="1"/><text x="71.9874%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="629" width="0.0801%" height="15" fill="rgb(210,1,33)" fg:x="896" fg:w="1"/><text x="71.9874%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="613" width="0.0801%" height="15" fill="rgb(213,50,3)" fg:x="896" fg:w="1"/><text x="71.9874%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="597" width="0.0801%" height="15" fill="rgb(234,227,4)" fg:x="896" fg:w="1"/><text x="71.9874%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7374%" y="581" width="0.0801%" height="15" fill="rgb(246,63,5)" fg:x="896" fg:w="1"/><text x="71.9874%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="71.7374%" y="709" width="0.2402%" height="15" fill="rgb(245,136,27)" fg:x="896" fg:w="3"/><text x="71.9874%" y="719.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="71.8175%" y="693" width="0.1601%" height="15" fill="rgb(247,199,27)" fg:x="897" fg:w="2"/><text x="72.0675%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="71.8175%" y="677" width="0.1601%" height="15" fill="rgb(252,158,49)" fg:x="897" fg:w="2"/><text x="72.0675%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="71.8175%" y="661" width="0.1601%" height="15" fill="rgb(254,73,1)" fg:x="897" fg:w="2"/><text x="72.0675%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="71.8975%" y="645" width="0.0801%" height="15" fill="rgb(248,93,19)" fg:x="898" fg:w="1"/><text x="72.1475%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="71.8975%" y="629" width="0.0801%" height="15" fill="rgb(206,67,5)" fg:x="898" fg:w="1"/><text x="72.1475%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9776%" y="677" width="0.0801%" height="15" fill="rgb(209,210,4)" fg:x="899" fg:w="1"/><text x="72.2276%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.1377%" y="597" width="0.0801%" height="15" fill="rgb(214,185,36)" fg:x="901" fg:w="1"/><text x="72.3877%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="71.9776%" y="709" width="0.3203%" height="15" fill="rgb(233,191,26)" fg:x="899" fg:w="4"/><text x="72.2276%" y="719.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="71.9776%" y="693" width="0.3203%" height="15" fill="rgb(248,94,17)" fg:x="899" fg:w="4"/><text x="72.2276%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="72.0576%" y="677" width="0.2402%" height="15" fill="rgb(250,64,4)" fg:x="900" fg:w="3"/><text x="72.3076%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="72.0576%" y="661" width="0.2402%" height="15" fill="rgb(218,41,53)" fg:x="900" fg:w="3"/><text x="72.3076%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.0576%" y="645" width="0.2402%" height="15" fill="rgb(251,176,28)" fg:x="900" fg:w="3"/><text x="72.3076%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.0576%" y="629" width="0.2402%" height="15" fill="rgb(247,22,9)" fg:x="900" fg:w="3"/><text x="72.3076%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.1377%" y="613" width="0.1601%" height="15" fill="rgb(218,201,14)" fg:x="901" fg:w="2"/><text x="72.3877%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2178%" y="597" width="0.0801%" height="15" fill="rgb(218,94,10)" fg:x="902" fg:w="1"/><text x="72.4678%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.2178%" y="581" width="0.0801%" height="15" fill="rgb(222,183,52)" fg:x="902" fg:w="1"/><text x="72.4678%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.2178%" y="565" width="0.0801%" height="15" fill="rgb(242,140,25)" fg:x="902" fg:w="1"/><text x="72.4678%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.2178%" y="549" width="0.0801%" height="15" fill="rgb(235,197,38)" fg:x="902" fg:w="1"/><text x="72.4678%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2178%" y="533" width="0.0801%" height="15" fill="rgb(237,136,15)" fg:x="902" fg:w="1"/><text x="72.4678%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2178%" y="517" width="0.0801%" height="15" fill="rgb(223,44,49)" fg:x="902" fg:w="1"/><text x="72.4678%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2178%" y="501" width="0.0801%" height="15" fill="rgb(227,71,15)" fg:x="902" fg:w="1"/><text x="72.4678%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.3779%" y="565" width="0.1601%" height="15" fill="rgb(225,153,20)" fg:x="904" fg:w="2"/><text x="72.6279%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.3779%" y="549" width="0.1601%" height="15" fill="rgb(210,190,26)" fg:x="904" fg:w="2"/><text x="72.6279%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="72.3779%" y="533" width="0.1601%" height="15" fill="rgb(223,147,5)" fg:x="904" fg:w="2"/><text x="72.6279%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.4580%" y="517" width="0.0801%" height="15" fill="rgb(207,14,23)" fg:x="905" fg:w="1"/><text x="72.7080%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.2978%" y="613" width="0.4003%" height="15" fill="rgb(211,195,53)" fg:x="903" fg:w="5"/><text x="72.5478%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="72.2978%" y="597" width="0.4003%" height="15" fill="rgb(237,75,46)" fg:x="903" fg:w="5"/><text x="72.5478%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.2978%" y="581" width="0.4003%" height="15" fill="rgb(254,55,14)" fg:x="903" fg:w="5"/><text x="72.5478%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.5380%" y="565" width="0.1601%" height="15" fill="rgb(230,185,30)" fg:x="906" fg:w="2"/><text x="72.7880%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6181%" y="549" width="0.0801%" height="15" fill="rgb(220,14,11)" fg:x="907" fg:w="1"/><text x="72.8681%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6181%" y="533" width="0.0801%" height="15" fill="rgb(215,169,44)" fg:x="907" fg:w="1"/><text x="72.8681%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6181%" y="517" width="0.0801%" height="15" fill="rgb(253,203,20)" fg:x="907" fg:w="1"/><text x="72.8681%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6181%" y="501" width="0.0801%" height="15" fill="rgb(229,225,17)" fg:x="907" fg:w="1"/><text x="72.8681%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6181%" y="485" width="0.0801%" height="15" fill="rgb(236,76,26)" fg:x="907" fg:w="1"/><text x="72.8681%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6181%" y="469" width="0.0801%" height="15" fill="rgb(234,15,30)" fg:x="907" fg:w="1"/><text x="72.8681%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6181%" y="453" width="0.0801%" height="15" fill="rgb(211,113,48)" fg:x="907" fg:w="1"/><text x="72.8681%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6181%" y="437" width="0.0801%" height="15" fill="rgb(221,31,36)" fg:x="907" fg:w="1"/><text x="72.8681%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6181%" y="421" width="0.0801%" height="15" fill="rgb(215,118,52)" fg:x="907" fg:w="1"/><text x="72.8681%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="72.2978%" y="645" width="0.4804%" height="15" fill="rgb(241,151,27)" fg:x="903" fg:w="6"/><text x="72.5478%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="72.2978%" y="629" width="0.4804%" height="15" fill="rgb(253,51,3)" fg:x="903" fg:w="6"/><text x="72.5478%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.6982%" y="613" width="0.0801%" height="15" fill="rgb(216,201,24)" fg:x="908" fg:w="1"/><text x="72.9482%" y="623.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (21 samples, 1.68%)</title><rect x="71.1769%" y="757" width="1.6813%" height="15" fill="rgb(231,107,4)" fg:x="889" fg:w="21"/><text x="71.4269%" y="767.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (21 samples, 1.68%)</title><rect x="71.1769%" y="741" width="1.6813%" height="15" fill="rgb(243,97,54)" fg:x="889" fg:w="21"/><text x="71.4269%" y="751.50"></text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.20%)</title><rect x="71.6573%" y="725" width="1.2010%" height="15" fill="rgb(221,32,51)" fg:x="895" fg:w="15"/><text x="71.9073%" y="735.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.56%)</title><rect x="72.2978%" y="709" width="0.5604%" height="15" fill="rgb(218,171,35)" fg:x="903" fg:w="7"/><text x="72.5478%" y="719.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.56%)</title><rect x="72.2978%" y="693" width="0.5604%" height="15" fill="rgb(214,20,53)" fg:x="903" fg:w="7"/><text x="72.5478%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="72.2978%" y="677" width="0.5604%" height="15" fill="rgb(239,9,52)" fg:x="903" fg:w="7"/><text x="72.5478%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="72.2978%" y="661" width="0.5604%" height="15" fill="rgb(215,114,45)" fg:x="903" fg:w="7"/><text x="72.5478%" y="671.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.7782%" y="645" width="0.0801%" height="15" fill="rgb(208,118,9)" fg:x="909" fg:w="1"/><text x="73.0282%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7782%" y="629" width="0.0801%" height="15" fill="rgb(235,7,39)" fg:x="909" fg:w="1"/><text x="73.0282%" y="639.50"></text></g><g><title>engine::session::Session::close (23 samples, 1.84%)</title><rect x="71.0969%" y="789" width="1.8415%" height="15" fill="rgb(243,225,15)" fg:x="888" fg:w="23"/><text x="71.3469%" y="799.50">e..</text></g><g><title>engine::session::Session::save_entity_changes (23 samples, 1.84%)</title><rect x="71.0969%" y="773" width="1.8415%" height="15" fill="rgb(225,216,18)" fg:x="888" fg:w="23"/><text x="71.3469%" y="783.50">e..</text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="72.8583%" y="757" width="0.0801%" height="15" fill="rgb(233,36,38)" fg:x="910" fg:w="1"/><text x="73.1083%" y="767.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="72.8583%" y="741" width="0.0801%" height="15" fill="rgb(239,88,23)" fg:x="910" fg:w="1"/><text x="73.1083%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="72.8583%" y="725" width="0.0801%" height="15" fill="rgb(219,181,35)" fg:x="910" fg:w="1"/><text x="73.1083%" y="735.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="72.8583%" y="709" width="0.0801%" height="15" fill="rgb(215,18,46)" fg:x="910" fg:w="1"/><text x="73.1083%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.8583%" y="693" width="0.0801%" height="15" fill="rgb(241,38,11)" fg:x="910" fg:w="1"/><text x="73.1083%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.9384%" y="533" width="0.1601%" height="15" fill="rgb(248,169,45)" fg:x="911" fg:w="2"/><text x="73.1884%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.9384%" y="517" width="0.1601%" height="15" fill="rgb(239,50,49)" fg:x="911" fg:w="2"/><text x="73.1884%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0184%" y="501" width="0.0801%" height="15" fill="rgb(231,96,31)" fg:x="912" fg:w="1"/><text x="73.2684%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0184%" y="485" width="0.0801%" height="15" fill="rgb(224,193,37)" fg:x="912" fg:w="1"/><text x="73.2684%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0184%" y="469" width="0.0801%" height="15" fill="rgb(227,153,50)" fg:x="912" fg:w="1"/><text x="73.2684%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="72.9384%" y="549" width="0.2402%" height="15" fill="rgb(249,228,3)" fg:x="911" fg:w="3"/><text x="73.1884%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.0985%" y="533" width="0.0801%" height="15" fill="rgb(219,164,43)" fg:x="913" fg:w="1"/><text x="73.3485%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.0985%" y="517" width="0.0801%" height="15" fill="rgb(216,45,41)" fg:x="913" fg:w="1"/><text x="73.3485%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0985%" y="501" width="0.0801%" height="15" fill="rgb(210,226,51)" fg:x="913" fg:w="1"/><text x="73.3485%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2586%" y="421" width="0.0801%" height="15" fill="rgb(209,117,49)" fg:x="915" fg:w="1"/><text x="73.5086%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2586%" y="405" width="0.0801%" height="15" fill="rgb(206,196,24)" fg:x="915" fg:w="1"/><text x="73.5086%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::desc (6 samples, 0.48%)</title><rect x="72.9384%" y="597" width="0.4804%" height="15" fill="rgb(253,218,3)" fg:x="911" fg:w="6"/><text x="73.1884%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (6 samples, 0.48%)</title><rect x="72.9384%" y="581" width="0.4804%" height="15" fill="rgb(252,166,2)" fg:x="911" fg:w="6"/><text x="73.1884%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (6 samples, 0.48%)</title><rect x="72.9384%" y="565" width="0.4804%" height="15" fill="rgb(236,218,26)" fg:x="911" fg:w="6"/><text x="73.1884%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.1785%" y="549" width="0.2402%" height="15" fill="rgb(254,84,19)" fg:x="914" fg:w="3"/><text x="73.4285%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.1785%" y="533" width="0.2402%" height="15" fill="rgb(219,137,29)" fg:x="914" fg:w="3"/><text x="73.4285%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="73.1785%" y="517" width="0.2402%" height="15" fill="rgb(227,47,52)" fg:x="914" fg:w="3"/><text x="73.4285%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.1785%" y="501" width="0.2402%" height="15" fill="rgb(229,167,24)" fg:x="914" fg:w="3"/><text x="73.4285%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (3 samples, 0.24%)</title><rect x="73.1785%" y="485" width="0.2402%" height="15" fill="rgb(233,164,1)" fg:x="914" fg:w="3"/><text x="73.4285%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.2586%" y="469" width="0.1601%" height="15" fill="rgb(218,88,48)" fg:x="915" fg:w="2"/><text x="73.5086%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.2586%" y="453" width="0.1601%" height="15" fill="rgb(226,214,24)" fg:x="915" fg:w="2"/><text x="73.5086%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.2586%" y="437" width="0.1601%" height="15" fill="rgb(233,29,12)" fg:x="915" fg:w="2"/><text x="73.5086%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.3387%" y="421" width="0.0801%" height="15" fill="rgb(219,120,34)" fg:x="916" fg:w="1"/><text x="73.5887%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3387%" y="405" width="0.0801%" height="15" fill="rgb(226,78,44)" fg:x="916" fg:w="1"/><text x="73.5887%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.3387%" y="389" width="0.0801%" height="15" fill="rgb(240,15,48)" fg:x="916" fg:w="1"/><text x="73.5887%" y="399.50"></text></g><g><title>kernel::model::scopes::Props::property_named (1 samples, 0.08%)</title><rect x="73.4187%" y="581" width="0.0801%" height="15" fill="rgb(253,176,7)" fg:x="917" fg:w="1"/><text x="73.6687%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4988%" y="533" width="0.0801%" height="15" fill="rgb(206,166,28)" fg:x="918" fg:w="1"/><text x="73.7488%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4988%" y="517" width="0.0801%" height="15" fill="rgb(241,53,51)" fg:x="918" fg:w="1"/><text x="73.7488%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4988%" y="501" width="0.0801%" height="15" fill="rgb(249,112,30)" fg:x="918" fg:w="1"/><text x="73.7488%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.4988%" y="549" width="0.1601%" height="15" fill="rgb(217,85,30)" fg:x="918" fg:w="2"/><text x="73.7488%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5789%" y="533" width="0.0801%" height="15" fill="rgb(233,49,7)" fg:x="919" fg:w="1"/><text x="73.8289%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5789%" y="517" width="0.0801%" height="15" fill="rgb(234,109,9)" fg:x="919" fg:w="1"/><text x="73.8289%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5789%" y="501" width="0.0801%" height="15" fill="rgb(253,95,22)" fg:x="919" fg:w="1"/><text x="73.8289%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5789%" y="485" width="0.0801%" height="15" fill="rgb(233,176,25)" fg:x="919" fg:w="1"/><text x="73.8289%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.6589%" y="549" width="0.0801%" height="15" fill="rgb(236,33,39)" fg:x="920" fg:w="1"/><text x="73.9089%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::ScopeValue&gt; (1 samples, 0.08%)</title><rect x="73.7390%" y="549" width="0.0801%" height="15" fill="rgb(223,226,42)" fg:x="921" fg:w="1"/><text x="73.9890%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.7390%" y="533" width="0.0801%" height="15" fill="rgb(216,99,33)" fg:x="921" fg:w="1"/><text x="73.9890%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.7390%" y="517" width="0.0801%" height="15" fill="rgb(235,84,23)" fg:x="921" fg:w="1"/><text x="73.9890%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.7390%" y="501" width="0.0801%" height="15" fill="rgb(232,2,27)" fg:x="921" fg:w="1"/><text x="73.9890%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.7390%" y="485" width="0.0801%" height="15" fill="rgb(241,23,22)" fg:x="921" fg:w="1"/><text x="73.9890%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.7390%" y="469" width="0.0801%" height="15" fill="rgb(211,73,27)" fg:x="921" fg:w="1"/><text x="73.9890%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.8191%" y="517" width="0.0801%" height="15" fill="rgb(235,109,49)" fg:x="922" fg:w="1"/><text x="74.0691%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (7 samples, 0.56%)</title><rect x="73.4187%" y="597" width="0.5604%" height="15" fill="rgb(230,99,29)" fg:x="917" fg:w="7"/><text x="73.6687%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (6 samples, 0.48%)</title><rect x="73.4988%" y="581" width="0.4804%" height="15" fill="rgb(245,199,7)" fg:x="918" fg:w="6"/><text x="73.7488%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (6 samples, 0.48%)</title><rect x="73.4988%" y="565" width="0.4804%" height="15" fill="rgb(217,179,10)" fg:x="918" fg:w="6"/><text x="73.7488%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.8191%" y="549" width="0.1601%" height="15" fill="rgb(254,99,47)" fg:x="922" fg:w="2"/><text x="74.0691%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.8191%" y="533" width="0.1601%" height="15" fill="rgb(251,121,7)" fg:x="922" fg:w="2"/><text x="74.0691%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8991%" y="517" width="0.0801%" height="15" fill="rgb(250,177,26)" fg:x="923" fg:w="1"/><text x="74.1491%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8991%" y="501" width="0.0801%" height="15" fill="rgb(232,88,15)" fg:x="923" fg:w="1"/><text x="74.1491%" y="511.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.8991%" y="485" width="0.0801%" height="15" fill="rgb(251,54,54)" fg:x="923" fg:w="1"/><text x="74.1491%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8991%" y="469" width="0.0801%" height="15" fill="rgb(208,177,15)" fg:x="923" fg:w="1"/><text x="74.1491%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8991%" y="453" width="0.0801%" height="15" fill="rgb(205,97,32)" fg:x="923" fg:w="1"/><text x="74.1491%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8991%" y="437" width="0.0801%" height="15" fill="rgb(217,192,13)" fg:x="923" fg:w="1"/><text x="74.1491%" y="447.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="73.9792%" y="533" width="0.0801%" height="15" fill="rgb(215,163,41)" fg:x="924" fg:w="1"/><text x="74.2292%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1 samples, 0.08%)</title><rect x="73.9792%" y="517" width="0.0801%" height="15" fill="rgb(246,83,29)" fg:x="924" fg:w="1"/><text x="74.2292%" y="527.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_uppercase (1 samples, 0.08%)</title><rect x="73.9792%" y="501" width="0.0801%" height="15" fill="rgb(219,2,45)" fg:x="924" fg:w="1"/><text x="74.2292%" y="511.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_lowercase (1 samples, 0.08%)</title><rect x="73.9792%" y="485" width="0.0801%" height="15" fill="rgb(242,215,33)" fg:x="924" fg:w="1"/><text x="74.2292%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.32%)</title><rect x="74.1393%" y="437" width="0.3203%" height="15" fill="rgb(217,1,6)" fg:x="926" fg:w="4"/><text x="74.3893%" y="447.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="74.2194%" y="421" width="0.2402%" height="15" fill="rgb(207,85,52)" fg:x="927" fg:w="3"/><text x="74.4694%" y="431.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (2 samples, 0.16%)</title><rect x="74.2994%" y="405" width="0.1601%" height="15" fill="rgb(231,171,19)" fg:x="928" fg:w="2"/><text x="74.5494%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.48%)</title><rect x="74.1393%" y="501" width="0.4804%" height="15" fill="rgb(207,128,4)" fg:x="926" fg:w="6"/><text x="74.3893%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.48%)</title><rect x="74.1393%" y="485" width="0.4804%" height="15" fill="rgb(219,208,4)" fg:x="926" fg:w="6"/><text x="74.3893%" y="495.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.48%)</title><rect x="74.1393%" y="469" width="0.4804%" height="15" fill="rgb(235,161,42)" fg:x="926" fg:w="6"/><text x="74.3893%" y="479.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.48%)</title><rect x="74.1393%" y="453" width="0.4804%" height="15" fill="rgb(247,218,18)" fg:x="926" fg:w="6"/><text x="74.3893%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="74.4596%" y="437" width="0.1601%" height="15" fill="rgb(232,114,51)" fg:x="930" fg:w="2"/><text x="74.7096%" y="447.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="74.5396%" y="421" width="0.0801%" height="15" fill="rgb(222,95,3)" fg:x="931" fg:w="1"/><text x="74.7896%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="74.1393%" y="517" width="0.5604%" height="15" fill="rgb(240,65,29)" fg:x="926" fg:w="7"/><text x="74.3893%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6197%" y="501" width="0.0801%" height="15" fill="rgb(249,209,20)" fg:x="932" fg:w="1"/><text x="74.8697%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.6998%" y="469" width="0.0801%" height="15" fill="rgb(241,48,37)" fg:x="933" fg:w="1"/><text x="74.9498%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6998%" y="453" width="0.0801%" height="15" fill="rgb(230,140,42)" fg:x="933" fg:w="1"/><text x="74.9498%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="74.7798%" y="469" width="0.0801%" height="15" fill="rgb(230,176,45)" fg:x="934" fg:w="1"/><text x="75.0298%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.7798%" y="453" width="0.0801%" height="15" fill="rgb(245,112,21)" fg:x="934" fg:w="1"/><text x="75.0298%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.9400%" y="453" width="0.0801%" height="15" fill="rgb(207,183,35)" fg:x="936" fg:w="1"/><text x="75.1900%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.0200%" y="453" width="0.0801%" height="15" fill="rgb(227,44,33)" fg:x="937" fg:w="1"/><text x="75.2700%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (6 samples, 0.48%)</title><rect x="75.1001%" y="453" width="0.4804%" height="15" fill="rgb(246,120,21)" fg:x="938" fg:w="6"/><text x="75.3501%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (6 samples, 0.48%)</title><rect x="75.1001%" y="437" width="0.4804%" height="15" fill="rgb(235,57,52)" fg:x="938" fg:w="6"/><text x="75.3501%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5004%" y="421" width="0.0801%" height="15" fill="rgb(238,84,10)" fg:x="943" fg:w="1"/><text x="75.7504%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="75.5805%" y="437" width="0.2402%" height="15" fill="rgb(251,200,32)" fg:x="944" fg:w="3"/><text x="75.8305%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="75.7406%" y="421" width="0.0801%" height="15" fill="rgb(247,159,13)" fg:x="946" fg:w="1"/><text x="75.9906%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.7406%" y="405" width="0.0801%" height="15" fill="rgb(238,64,4)" fg:x="946" fg:w="1"/><text x="75.9906%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="75.5805%" y="453" width="0.3203%" height="15" fill="rgb(221,131,51)" fg:x="944" fg:w="4"/><text x="75.8305%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="75.8207%" y="437" width="0.0801%" height="15" fill="rgb(242,5,29)" fg:x="947" fg:w="1"/><text x="76.0707%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="75.8207%" y="421" width="0.0801%" height="15" fill="rgb(214,130,32)" fg:x="947" fg:w="1"/><text x="76.0707%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="75.8207%" y="405" width="0.0801%" height="15" fill="rgb(244,210,16)" fg:x="947" fg:w="1"/><text x="76.0707%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.8207%" y="389" width="0.0801%" height="15" fill="rgb(234,48,26)" fg:x="947" fg:w="1"/><text x="76.0707%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.8207%" y="373" width="0.0801%" height="15" fill="rgb(231,82,38)" fg:x="947" fg:w="1"/><text x="76.0707%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.8207%" y="357" width="0.0801%" height="15" fill="rgb(254,128,41)" fg:x="947" fg:w="1"/><text x="76.0707%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="76.0608%" y="389" width="0.0801%" height="15" fill="rgb(212,73,49)" fg:x="950" fg:w="1"/><text x="76.3108%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="76.1409%" y="389" width="0.0801%" height="15" fill="rgb(205,62,54)" fg:x="951" fg:w="1"/><text x="76.3909%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.2210%" y="357" width="0.0801%" height="15" fill="rgb(228,0,8)" fg:x="952" fg:w="1"/><text x="76.4710%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.2210%" y="341" width="0.0801%" height="15" fill="rgb(251,28,17)" fg:x="952" fg:w="1"/><text x="76.4710%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.2210%" y="325" width="0.0801%" height="15" fill="rgb(238,105,27)" fg:x="952" fg:w="1"/><text x="76.4710%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3010%" y="341" width="0.0801%" height="15" fill="rgb(237,216,33)" fg:x="953" fg:w="1"/><text x="76.5510%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="76.2210%" y="389" width="0.3203%" height="15" fill="rgb(229,228,25)" fg:x="952" fg:w="4"/><text x="76.4710%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="76.2210%" y="373" width="0.3203%" height="15" fill="rgb(233,75,23)" fg:x="952" fg:w="4"/><text x="76.4710%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="76.3010%" y="357" width="0.2402%" height="15" fill="rgb(231,207,16)" fg:x="953" fg:w="3"/><text x="76.5510%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="76.3811%" y="341" width="0.1601%" height="15" fill="rgb(231,191,45)" fg:x="954" fg:w="2"/><text x="76.6311%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="76.3811%" y="325" width="0.1601%" height="15" fill="rgb(224,133,17)" fg:x="954" fg:w="2"/><text x="76.6311%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="76.3811%" y="309" width="0.1601%" height="15" fill="rgb(209,178,27)" fg:x="954" fg:w="2"/><text x="76.6311%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (39 samples, 3.12%)</title><rect x="76.5412%" y="389" width="3.1225%" height="15" fill="rgb(218,37,11)" fg:x="956" fg:w="39"/><text x="76.7912%" y="399.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (39 samples, 3.12%)</title><rect x="76.5412%" y="373" width="3.1225%" height="15" fill="rgb(251,226,25)" fg:x="956" fg:w="39"/><text x="76.7912%" y="383.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (39 samples, 3.12%)</title><rect x="76.5412%" y="357" width="3.1225%" height="15" fill="rgb(209,222,27)" fg:x="956" fg:w="39"/><text x="76.7912%" y="367.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="79.6637%" y="389" width="0.0801%" height="15" fill="rgb(238,22,21)" fg:x="995" fg:w="1"/><text x="79.9137%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 3.92%)</title><rect x="75.9007%" y="437" width="3.9231%" height="15" fill="rgb(233,161,25)" fg:x="948" fg:w="49"/><text x="76.1507%" y="447.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49 samples, 3.92%)</title><rect x="75.9007%" y="421" width="3.9231%" height="15" fill="rgb(226,122,53)" fg:x="948" fg:w="49"/><text x="76.1507%" y="431.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49 samples, 3.92%)</title><rect x="75.9007%" y="405" width="3.9231%" height="15" fill="rgb(220,123,17)" fg:x="948" fg:w="49"/><text x="76.1507%" y="415.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="79.7438%" y="389" width="0.0801%" height="15" fill="rgb(230,224,35)" fg:x="996" fg:w="1"/><text x="79.9938%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.8239%" y="437" width="0.0801%" height="15" fill="rgb(246,83,8)" fg:x="997" fg:w="1"/><text x="80.0739%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.0641%" y="421" width="0.0801%" height="15" fill="rgb(230,214,17)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.0641%" y="405" width="0.0801%" height="15" fill="rgb(222,97,18)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="80.0641%" y="389" width="0.0801%" height="15" fill="rgb(206,79,1)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="80.0641%" y="373" width="0.0801%" height="15" fill="rgb(214,121,34)" fg:x="1000" fg:w="1"/><text x="80.3141%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="80.1441%" y="421" width="0.2402%" height="15" fill="rgb(249,199,46)" fg:x="1001" fg:w="3"/><text x="80.3941%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="80.3843%" y="421" width="0.5604%" height="15" fill="rgb(214,222,46)" fg:x="1004" fg:w="7"/><text x="80.6343%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.12%)</title><rect x="79.9039%" y="437" width="1.1209%" height="15" fill="rgb(248,168,30)" fg:x="998" fg:w="14"/><text x="80.1539%" y="447.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="80.9448%" y="421" width="0.0801%" height="15" fill="rgb(226,14,28)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="431.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="80.9448%" y="405" width="0.0801%" height="15" fill="rgb(253,123,1)" fg:x="1011" fg:w="1"/><text x="81.1948%" y="415.50"></text></g><g><title>regex_automata::meta::strategy::new (78 samples, 6.24%)</title><rect x="74.8599%" y="469" width="6.2450%" height="15" fill="rgb(225,24,42)" fg:x="935" fg:w="78"/><text x="75.1099%" y="479.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (65 samples, 5.20%)</title><rect x="75.9007%" y="453" width="5.2042%" height="15" fill="rgb(216,161,37)" fg:x="948" fg:w="65"/><text x="76.1507%" y="463.50">regex_..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="81.0248%" y="437" width="0.0801%" height="15" fill="rgb(251,164,26)" fg:x="1012" fg:w="1"/><text x="81.2748%" y="447.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="81.0248%" y="421" width="0.0801%" height="15" fill="rgb(219,177,3)" fg:x="1012" fg:w="1"/><text x="81.2748%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.0248%" y="405" width="0.0801%" height="15" fill="rgb(222,65,0)" fg:x="1012" fg:w="1"/><text x="81.2748%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.0248%" y="389" width="0.0801%" height="15" fill="rgb(223,69,54)" fg:x="1012" fg:w="1"/><text x="81.2748%" y="399.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="81.1049%" y="405" width="0.0801%" height="15" fill="rgb(235,30,27)" fg:x="1013" fg:w="1"/><text x="81.3549%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="81.1049%" y="421" width="0.1601%" height="15" fill="rgb(220,183,50)" fg:x="1013" fg:w="2"/><text x="81.3549%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="81.1849%" y="405" width="0.0801%" height="15" fill="rgb(248,198,15)" fg:x="1014" fg:w="1"/><text x="81.4349%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="81.1849%" y="389" width="0.0801%" height="15" fill="rgb(222,211,4)" fg:x="1014" fg:w="1"/><text x="81.4349%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="81.2650%" y="405" width="0.3203%" height="15" fill="rgb(214,102,34)" fg:x="1015" fg:w="4"/><text x="81.5150%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="81.2650%" y="389" width="0.3203%" height="15" fill="rgb(245,92,5)" fg:x="1015" fg:w="4"/><text x="81.5150%" y="399.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="81.2650%" y="373" width="0.3203%" height="15" fill="rgb(252,72,51)" fg:x="1015" fg:w="4"/><text x="81.5150%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="81.1049%" y="469" width="0.5604%" height="15" fill="rgb(252,208,19)" fg:x="1013" fg:w="7"/><text x="81.3549%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="81.1049%" y="453" width="0.5604%" height="15" fill="rgb(211,69,7)" fg:x="1013" fg:w="7"/><text x="81.3549%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.56%)</title><rect x="81.1049%" y="437" width="0.5604%" height="15" fill="rgb(211,27,16)" fg:x="1013" fg:w="7"/><text x="81.3549%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="81.2650%" y="421" width="0.4003%" height="15" fill="rgb(219,216,14)" fg:x="1015" fg:w="5"/><text x="81.5150%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="81.5853%" y="405" width="0.0801%" height="15" fill="rgb(219,71,8)" fg:x="1019" fg:w="1"/><text x="81.8353%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (89 samples, 7.13%)</title><rect x="74.6998%" y="485" width="7.1257%" height="15" fill="rgb(223,170,53)" fg:x="933" fg:w="89"/><text x="74.9498%" y="495.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="81.6653%" y="469" width="0.1601%" height="15" fill="rgb(246,21,26)" fg:x="1020" fg:w="2"/><text x="81.9153%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="81.6653%" y="453" width="0.1601%" height="15" fill="rgb(248,20,46)" fg:x="1020" fg:w="2"/><text x="81.9153%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="81.6653%" y="437" width="0.1601%" height="15" fill="rgb(252,94,11)" fg:x="1020" fg:w="2"/><text x="81.9153%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="81.6653%" y="421" width="0.1601%" height="15" fill="rgb(236,163,8)" fg:x="1020" fg:w="2"/><text x="81.9153%" y="431.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (90 samples, 7.21%)</title><rect x="74.6998%" y="517" width="7.2058%" height="15" fill="rgb(217,221,45)" fg:x="933" fg:w="90"/><text x="74.9498%" y="527.50">&lt;regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (90 samples, 7.21%)</title><rect x="74.6998%" y="501" width="7.2058%" height="15" fill="rgb(238,38,17)" fg:x="933" fg:w="90"/><text x="74.9498%" y="511.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="81.8255%" y="485" width="0.0801%" height="15" fill="rgb(242,210,23)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="495.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::unicode (1 samples, 0.08%)</title><rect x="81.8255%" y="469" width="0.0801%" height="15" fill="rgb(250,86,53)" fg:x="1022" fg:w="1"/><text x="82.0755%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="81.9055%" y="485" width="0.1601%" height="15" fill="rgb(223,168,25)" fg:x="1023" fg:w="2"/><text x="82.1555%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="81.9055%" y="469" width="0.1601%" height="15" fill="rgb(251,189,4)" fg:x="1023" fg:w="2"/><text x="82.1555%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="81.9055%" y="453" width="0.1601%" height="15" fill="rgb(245,19,28)" fg:x="1023" fg:w="2"/><text x="82.1555%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.9856%" y="437" width="0.0801%" height="15" fill="rgb(207,10,34)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.9856%" y="421" width="0.0801%" height="15" fill="rgb(235,153,31)" fg:x="1024" fg:w="1"/><text x="82.2356%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.0657%" y="469" width="0.0801%" height="15" fill="rgb(228,72,37)" fg:x="1025" fg:w="1"/><text x="82.3157%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.0657%" y="453" width="0.0801%" height="15" fill="rgb(215,15,16)" fg:x="1025" fg:w="1"/><text x="82.3157%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="82.1457%" y="469" width="0.0801%" height="15" fill="rgb(250,119,29)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.1457%" y="453" width="0.0801%" height="15" fill="rgb(214,59,1)" fg:x="1026" fg:w="1"/><text x="82.3957%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="81.9055%" y="517" width="0.4003%" height="15" fill="rgb(223,109,25)" fg:x="1023" fg:w="5"/><text x="82.1555%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="81.9055%" y="501" width="0.4003%" height="15" fill="rgb(230,198,22)" fg:x="1023" fg:w="5"/><text x="82.1555%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="82.0657%" y="485" width="0.2402%" height="15" fill="rgb(245,184,46)" fg:x="1025" fg:w="3"/><text x="82.3157%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="82.2258%" y="469" width="0.0801%" height="15" fill="rgb(253,73,16)" fg:x="1027" fg:w="1"/><text x="82.4758%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.2258%" y="453" width="0.0801%" height="15" fill="rgb(206,94,45)" fg:x="1027" fg:w="1"/><text x="82.4758%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.4660%" y="453" width="0.0801%" height="15" fill="rgb(236,83,27)" fg:x="1030" fg:w="1"/><text x="82.7160%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="82.4660%" y="437" width="0.0801%" height="15" fill="rgb(220,196,8)" fg:x="1030" fg:w="1"/><text x="82.7160%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="82.5460%" y="453" width="0.4003%" height="15" fill="rgb(254,185,14)" fg:x="1031" fg:w="5"/><text x="82.7960%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="82.8663%" y="437" width="0.0801%" height="15" fill="rgb(226,50,22)" fg:x="1035" fg:w="1"/><text x="83.1163%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.64%)</title><rect x="82.4660%" y="469" width="0.6405%" height="15" fill="rgb(253,147,0)" fg:x="1030" fg:w="8"/><text x="82.7160%" y="479.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="82.9464%" y="453" width="0.1601%" height="15" fill="rgb(252,46,33)" fg:x="1036" fg:w="2"/><text x="83.1964%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="82.9464%" y="437" width="0.1601%" height="15" fill="rgb(242,22,54)" fg:x="1036" fg:w="2"/><text x="83.1964%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.9464%" y="421" width="0.1601%" height="15" fill="rgb(223,178,32)" fg:x="1036" fg:w="2"/><text x="83.1964%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="82.9464%" y="405" width="0.1601%" height="15" fill="rgb(214,106,53)" fg:x="1036" fg:w="2"/><text x="83.1964%" y="415.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (114 samples, 9.13%)</title><rect x="74.0592%" y="533" width="9.1273%" height="15" fill="rgb(232,65,50)" fg:x="925" fg:w="114"/><text x="74.3092%" y="543.50">indefinite::h..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="82.3058%" y="517" width="0.8807%" height="15" fill="rgb(231,110,28)" fg:x="1028" fg:w="11"/><text x="82.5558%" y="527.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="82.3058%" y="501" width="0.8807%" height="15" fill="rgb(216,71,40)" fg:x="1028" fg:w="11"/><text x="82.5558%" y="511.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="82.3058%" y="485" width="0.8807%" height="15" fill="rgb(229,89,53)" fg:x="1028" fg:w="11"/><text x="82.5558%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="83.1065%" y="469" width="0.0801%" height="15" fill="rgb(210,124,14)" fg:x="1038" fg:w="1"/><text x="83.3565%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.2666%" y="469" width="0.0801%" height="15" fill="rgb(236,213,6)" fg:x="1040" fg:w="1"/><text x="83.5166%" y="479.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.2666%" y="453" width="0.0801%" height="15" fill="rgb(228,41,5)" fg:x="1040" fg:w="1"/><text x="83.5166%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="83.2666%" y="437" width="0.0801%" height="15" fill="rgb(221,167,25)" fg:x="1040" fg:w="1"/><text x="83.5166%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="83.3467%" y="437" width="0.0801%" height="15" fill="rgb(228,144,37)" fg:x="1041" fg:w="1"/><text x="83.5967%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="83.3467%" y="469" width="0.2402%" height="15" fill="rgb(227,189,38)" fg:x="1041" fg:w="3"/><text x="83.5967%" y="479.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="83.3467%" y="453" width="0.2402%" height="15" fill="rgb(218,8,2)" fg:x="1041" fg:w="3"/><text x="83.5967%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="83.4267%" y="437" width="0.1601%" height="15" fill="rgb(209,61,28)" fg:x="1042" fg:w="2"/><text x="83.6767%" y="447.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="83.4267%" y="421" width="0.1601%" height="15" fill="rgb(233,140,39)" fg:x="1042" fg:w="2"/><text x="83.6767%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="83.4267%" y="405" width="0.1601%" height="15" fill="rgb(251,66,48)" fg:x="1042" fg:w="2"/><text x="83.6767%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.6669%" y="453" width="0.0801%" height="15" fill="rgb(210,44,45)" fg:x="1045" fg:w="1"/><text x="83.9169%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7470%" y="453" width="0.0801%" height="15" fill="rgb(214,136,46)" fg:x="1046" fg:w="1"/><text x="83.9970%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.12%)</title><rect x="83.8271%" y="453" width="1.1209%" height="15" fill="rgb(207,130,50)" fg:x="1047" fg:w="14"/><text x="84.0771%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.04%)</title><rect x="83.9071%" y="437" width="1.0408%" height="15" fill="rgb(228,102,49)" fg:x="1048" fg:w="13"/><text x="84.1571%" y="447.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="84.7878%" y="421" width="0.1601%" height="15" fill="rgb(253,55,1)" fg:x="1059" fg:w="2"/><text x="85.0378%" y="431.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="84.9480%" y="453" width="0.2402%" height="15" fill="rgb(238,222,9)" fg:x="1061" fg:w="3"/><text x="85.1980%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="85.0280%" y="437" width="0.1601%" height="15" fill="rgb(246,99,6)" fg:x="1062" fg:w="2"/><text x="85.2780%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="85.0280%" y="421" width="0.1601%" height="15" fill="rgb(219,110,26)" fg:x="1062" fg:w="2"/><text x="85.2780%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.1081%" y="405" width="0.0801%" height="15" fill="rgb(239,160,33)" fg:x="1063" fg:w="1"/><text x="85.3581%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.1081%" y="389" width="0.0801%" height="15" fill="rgb(220,202,23)" fg:x="1063" fg:w="1"/><text x="85.3581%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="85.8287%" y="389" width="0.3203%" height="15" fill="rgb(208,80,26)" fg:x="1072" fg:w="4"/><text x="86.0787%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="85.8287%" y="373" width="0.3203%" height="15" fill="rgb(243,85,7)" fg:x="1072" fg:w="4"/><text x="86.0787%" y="383.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="85.8287%" y="357" width="0.3203%" height="15" fill="rgb(228,77,47)" fg:x="1072" fg:w="4"/><text x="86.0787%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (11 samples, 0.88%)</title><rect x="85.3483%" y="421" width="0.8807%" height="15" fill="rgb(212,226,8)" fg:x="1066" fg:w="11"/><text x="85.5983%" y="431.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (9 samples, 0.72%)</title><rect x="85.5084%" y="405" width="0.7206%" height="15" fill="rgb(241,120,54)" fg:x="1068" fg:w="9"/><text x="85.7584%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.1489%" y="389" width="0.0801%" height="15" fill="rgb(226,80,16)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.1489%" y="373" width="0.0801%" height="15" fill="rgb(240,76,13)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.1489%" y="357" width="0.0801%" height="15" fill="rgb(252,74,8)" fg:x="1076" fg:w="1"/><text x="86.3989%" y="367.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.24%)</title><rect x="86.3090%" y="405" width="0.2402%" height="15" fill="rgb(244,155,2)" fg:x="1078" fg:w="3"/><text x="86.5590%" y="415.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="86.3891%" y="389" width="0.1601%" height="15" fill="rgb(215,81,35)" fg:x="1079" fg:w="2"/><text x="86.6391%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (18 samples, 1.44%)</title><rect x="85.1882%" y="453" width="1.4412%" height="15" fill="rgb(206,55,2)" fg:x="1064" fg:w="18"/><text x="85.4382%" y="463.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (18 samples, 1.44%)</title><rect x="85.1882%" y="437" width="1.4412%" height="15" fill="rgb(231,2,34)" fg:x="1064" fg:w="18"/><text x="85.4382%" y="447.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="86.2290%" y="421" width="0.4003%" height="15" fill="rgb(242,176,48)" fg:x="1077" fg:w="5"/><text x="86.4790%" y="431.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="86.5492%" y="405" width="0.0801%" height="15" fill="rgb(249,31,36)" fg:x="1081" fg:w="1"/><text x="86.7992%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="86.6293%" y="453" width="0.0801%" height="15" fill="rgb(205,18,17)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="86.6293%" y="437" width="0.0801%" height="15" fill="rgb(254,130,5)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="86.6293%" y="421" width="0.0801%" height="15" fill="rgb(229,42,45)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="86.6293%" y="405" width="0.0801%" height="15" fill="rgb(245,95,25)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.6293%" y="389" width="0.0801%" height="15" fill="rgb(249,193,38)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.6293%" y="373" width="0.0801%" height="15" fill="rgb(241,140,43)" fg:x="1082" fg:w="1"/><text x="86.8793%" y="383.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="87.4299%" y="341" width="0.3203%" height="15" fill="rgb(245,78,48)" fg:x="1092" fg:w="4"/><text x="87.6799%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="87.7502%" y="341" width="0.1601%" height="15" fill="rgb(214,92,39)" fg:x="1096" fg:w="2"/><text x="88.0002%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.8303%" y="325" width="0.0801%" height="15" fill="rgb(211,189,14)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8303%" y="309" width="0.0801%" height="15" fill="rgb(218,7,24)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.8303%" y="293" width="0.0801%" height="15" fill="rgb(224,200,49)" fg:x="1097" fg:w="1"/><text x="88.0803%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="87.9103%" y="341" width="0.1601%" height="15" fill="rgb(218,210,14)" fg:x="1098" fg:w="2"/><text x="88.1603%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="88.3106%" y="277" width="0.1601%" height="15" fill="rgb(234,142,31)" fg:x="1103" fg:w="2"/><text x="88.5606%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="88.3106%" y="309" width="0.2402%" height="15" fill="rgb(227,165,2)" fg:x="1103" fg:w="3"/><text x="88.5606%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="88.3106%" y="293" width="0.2402%" height="15" fill="rgb(232,44,46)" fg:x="1103" fg:w="3"/><text x="88.5606%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.4708%" y="277" width="0.0801%" height="15" fill="rgb(236,149,47)" fg:x="1105" fg:w="1"/><text x="88.7208%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.96%)</title><rect x="88.0705%" y="341" width="0.9608%" height="15" fill="rgb(227,45,31)" fg:x="1100" fg:w="12"/><text x="88.3205%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (12 samples, 0.96%)</title><rect x="88.0705%" y="325" width="0.9608%" height="15" fill="rgb(240,176,51)" fg:x="1100" fg:w="12"/><text x="88.3205%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.48%)</title><rect x="88.5508%" y="309" width="0.4804%" height="15" fill="rgb(249,146,41)" fg:x="1106" fg:w="6"/><text x="88.8008%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="88.8711%" y="293" width="0.1601%" height="15" fill="rgb(213,208,4)" fg:x="1110" fg:w="2"/><text x="89.1211%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 2.32%)</title><rect x="89.0312%" y="341" width="2.3219%" height="15" fill="rgb(245,84,36)" fg:x="1112" fg:w="29"/><text x="89.2812%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 2.32%)</title><rect x="89.0312%" y="325" width="2.3219%" height="15" fill="rgb(254,84,18)" fg:x="1112" fg:w="29"/><text x="89.2812%" y="335.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 2.32%)</title><rect x="89.0312%" y="309" width="2.3219%" height="15" fill="rgb(225,38,54)" fg:x="1112" fg:w="29"/><text x="89.2812%" y="319.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="91.3531%" y="341" width="0.1601%" height="15" fill="rgb(246,50,30)" fg:x="1141" fg:w="2"/><text x="91.6031%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 4.88%)</title><rect x="86.7094%" y="437" width="4.8839%" height="15" fill="rgb(246,148,9)" fg:x="1083" fg:w="61"/><text x="86.9594%" y="447.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.88%)</title><rect x="86.7094%" y="421" width="4.8839%" height="15" fill="rgb(223,75,4)" fg:x="1083" fg:w="61"/><text x="86.9594%" y="431.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.88%)</title><rect x="86.7094%" y="405" width="4.8839%" height="15" fill="rgb(239,148,41)" fg:x="1083" fg:w="61"/><text x="86.9594%" y="415.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.88%)</title><rect x="86.7094%" y="389" width="4.8839%" height="15" fill="rgb(205,195,3)" fg:x="1083" fg:w="61"/><text x="86.9594%" y="399.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (61 samples, 4.88%)</title><rect x="86.7094%" y="373" width="4.8839%" height="15" fill="rgb(254,161,1)" fg:x="1083" fg:w="61"/><text x="86.9594%" y="383.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.88%)</title><rect x="86.7094%" y="357" width="4.8839%" height="15" fill="rgb(211,229,8)" fg:x="1083" fg:w="61"/><text x="86.9594%" y="367.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="91.5132%" y="341" width="0.0801%" height="15" fill="rgb(220,97,9)" fg:x="1143" fg:w="1"/><text x="91.7632%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.6733%" y="421" width="0.0801%" height="15" fill="rgb(240,218,8)" fg:x="1145" fg:w="1"/><text x="91.9233%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="91.7534%" y="421" width="0.2402%" height="15" fill="rgb(250,44,0)" fg:x="1146" fg:w="3"/><text x="92.0034%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.9135%" y="405" width="0.0801%" height="15" fill="rgb(236,41,53)" fg:x="1148" fg:w="1"/><text x="92.1635%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9135%" y="389" width="0.0801%" height="15" fill="rgb(218,227,13)" fg:x="1148" fg:w="1"/><text x="92.1635%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.9135%" y="373" width="0.0801%" height="15" fill="rgb(217,94,32)" fg:x="1148" fg:w="1"/><text x="92.1635%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="91.9936%" y="421" width="0.2402%" height="15" fill="rgb(213,217,12)" fg:x="1149" fg:w="3"/><text x="92.2436%" y="431.50"></text></g><g><title>regex_automata::meta::strategy::new (109 samples, 8.73%)</title><rect x="83.5869%" y="469" width="8.7270%" height="15" fill="rgb(229,13,46)" fg:x="1044" fg:w="109"/><text x="83.8369%" y="479.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (70 samples, 5.60%)</title><rect x="86.7094%" y="453" width="5.6045%" height="15" fill="rgb(243,139,5)" fg:x="1083" fg:w="70"/><text x="86.9594%" y="463.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="91.5933%" y="437" width="0.7206%" height="15" fill="rgb(249,38,45)" fg:x="1144" fg:w="9"/><text x="91.8433%" y="447.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="92.2338%" y="421" width="0.0801%" height="15" fill="rgb(216,70,11)" fg:x="1152" fg:w="1"/><text x="92.4838%" y="431.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="92.2338%" y="405" width="0.0801%" height="15" fill="rgb(253,101,25)" fg:x="1152" fg:w="1"/><text x="92.4838%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="92.3139%" y="421" width="0.0801%" height="15" fill="rgb(207,197,30)" fg:x="1153" fg:w="1"/><text x="92.5639%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="92.3139%" y="405" width="0.0801%" height="15" fill="rgb(238,87,13)" fg:x="1153" fg:w="1"/><text x="92.5639%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="92.3139%" y="437" width="0.1601%" height="15" fill="rgb(215,155,8)" fg:x="1153" fg:w="2"/><text x="92.5639%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="92.3939%" y="421" width="0.0801%" height="15" fill="rgb(239,166,38)" fg:x="1154" fg:w="1"/><text x="92.6439%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.3939%" y="405" width="0.0801%" height="15" fill="rgb(240,194,35)" fg:x="1154" fg:w="1"/><text x="92.6439%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.3939%" y="389" width="0.0801%" height="15" fill="rgb(219,10,44)" fg:x="1154" fg:w="1"/><text x="92.6439%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.3939%" y="373" width="0.0801%" height="15" fill="rgb(251,220,35)" fg:x="1154" fg:w="1"/><text x="92.6439%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="92.4740%" y="421" width="0.0801%" height="15" fill="rgb(218,117,13)" fg:x="1155" fg:w="1"/><text x="92.7240%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="92.3139%" y="469" width="0.3203%" height="15" fill="rgb(221,213,40)" fg:x="1153" fg:w="4"/><text x="92.5639%" y="479.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="92.3139%" y="453" width="0.3203%" height="15" fill="rgb(251,224,35)" fg:x="1153" fg:w="4"/><text x="92.5639%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="92.4740%" y="437" width="0.1601%" height="15" fill="rgb(241,33,39)" fg:x="1155" fg:w="2"/><text x="92.7240%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.5540%" y="421" width="0.0801%" height="15" fill="rgb(222,74,17)" fg:x="1156" fg:w="1"/><text x="92.8040%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="92.6341%" y="437" width="0.0801%" height="15" fill="rgb(225,103,0)" fg:x="1157" fg:w="1"/><text x="92.8841%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="92.6341%" y="421" width="0.0801%" height="15" fill="rgb(240,0,12)" fg:x="1157" fg:w="1"/><text x="92.8841%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="92.7142%" y="437" width="0.0801%" height="15" fill="rgb(233,213,37)" fg:x="1158" fg:w="1"/><text x="92.9642%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="92.7942%" y="437" width="0.0801%" height="15" fill="rgb(225,84,52)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="447.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="92.7942%" y="421" width="0.0801%" height="15" fill="rgb(247,160,51)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.7942%" y="405" width="0.0801%" height="15" fill="rgb(244,60,51)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7942%" y="389" width="0.0801%" height="15" fill="rgb(233,114,7)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.7942%" y="373" width="0.0801%" height="15" fill="rgb(246,136,16)" fg:x="1159" fg:w="1"/><text x="93.0442%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.8743%" y="437" width="0.0801%" height="15" fill="rgb(243,114,45)" fg:x="1160" fg:w="1"/><text x="93.1243%" y="447.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (123 samples, 9.85%)</title><rect x="83.1865%" y="517" width="9.8479%" height="15" fill="rgb(247,183,43)" fg:x="1039" fg:w="123"/><text x="83.4365%" y="527.50">&lt;regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (123 samples, 9.85%)</title><rect x="83.1865%" y="501" width="9.8479%" height="15" fill="rgb(251,210,42)" fg:x="1039" fg:w="123"/><text x="83.4365%" y="511.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (123 samples, 9.85%)</title><rect x="83.1865%" y="485" width="9.8479%" height="15" fill="rgb(221,88,35)" fg:x="1039" fg:w="123"/><text x="83.4365%" y="495.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="92.6341%" y="469" width="0.4003%" height="15" fill="rgb(242,21,20)" fg:x="1157" fg:w="5"/><text x="92.8841%" y="479.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="92.6341%" y="453" width="0.4003%" height="15" fill="rgb(233,226,36)" fg:x="1157" fg:w="5"/><text x="92.8841%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.9544%" y="437" width="0.0801%" height="15" fill="rgb(243,189,34)" fg:x="1161" fg:w="1"/><text x="93.2044%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.9544%" y="421" width="0.0801%" height="15" fill="rgb(207,145,50)" fg:x="1161" fg:w="1"/><text x="93.2044%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.9544%" y="405" width="0.0801%" height="15" fill="rgb(242,1,50)" fg:x="1161" fg:w="1"/><text x="93.2044%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.0344%" y="469" width="0.0801%" height="15" fill="rgb(231,65,32)" fg:x="1162" fg:w="1"/><text x="93.2844%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.0344%" y="453" width="0.0801%" height="15" fill="rgb(208,68,49)" fg:x="1162" fg:w="1"/><text x="93.2844%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="93.0344%" y="485" width="0.1601%" height="15" fill="rgb(253,54,49)" fg:x="1162" fg:w="2"/><text x="93.2844%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="93.1145%" y="469" width="0.0801%" height="15" fill="rgb(245,186,24)" fg:x="1163" fg:w="1"/><text x="93.3645%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.1145%" y="453" width="0.0801%" height="15" fill="rgb(209,2,41)" fg:x="1163" fg:w="1"/><text x="93.3645%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.1145%" y="437" width="0.0801%" height="15" fill="rgb(242,208,54)" fg:x="1163" fg:w="1"/><text x="93.3645%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="93.0344%" y="517" width="0.2402%" height="15" fill="rgb(225,9,51)" fg:x="1162" fg:w="3"/><text x="93.2844%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="93.0344%" y="501" width="0.2402%" height="15" fill="rgb(207,207,25)" fg:x="1162" fg:w="3"/><text x="93.2844%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="93.1946%" y="485" width="0.0801%" height="15" fill="rgb(253,96,18)" fg:x="1164" fg:w="1"/><text x="93.4446%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="93.1946%" y="469" width="0.0801%" height="15" fill="rgb(252,215,20)" fg:x="1164" fg:w="1"/><text x="93.4446%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.1946%" y="453" width="0.0801%" height="15" fill="rgb(245,227,26)" fg:x="1164" fg:w="1"/><text x="93.4446%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.1946%" y="437" width="0.0801%" height="15" fill="rgb(241,208,0)" fg:x="1164" fg:w="1"/><text x="93.4446%" y="447.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="93.2746%" y="501" width="0.0801%" height="15" fill="rgb(224,130,10)" fg:x="1165" fg:w="1"/><text x="93.5246%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="93.2746%" y="485" width="0.0801%" height="15" fill="rgb(237,29,0)" fg:x="1165" fg:w="1"/><text x="93.5246%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::search_finish (1 samples, 0.08%)</title><rect x="93.2746%" y="469" width="0.0801%" height="15" fill="rgb(219,27,41)" fg:x="1165" fg:w="1"/><text x="93.5246%" y="479.50"></text></g><g><title>indefinite::rules::number::Number::check (132 samples, 10.57%)</title><rect x="83.1865%" y="533" width="10.5685%" height="15" fill="rgb(245,101,19)" fg:x="1039" fg:w="132"/><text x="83.4365%" y="543.50">indefinite::rul..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="93.2746%" y="517" width="0.4804%" height="15" fill="rgb(243,44,37)" fg:x="1165" fg:w="6"/><text x="93.5246%" y="527.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="93.3547%" y="501" width="0.4003%" height="15" fill="rgb(228,213,43)" fg:x="1166" fg:w="5"/><text x="93.6047%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="93.3547%" y="485" width="0.4003%" height="15" fill="rgb(219,163,21)" fg:x="1166" fg:w="5"/><text x="93.6047%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="93.3547%" y="469" width="0.4003%" height="15" fill="rgb(234,86,24)" fg:x="1166" fg:w="5"/><text x="93.6047%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="93.3547%" y="453" width="0.4003%" height="15" fill="rgb(225,10,24)" fg:x="1166" fg:w="5"/><text x="93.6047%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="93.3547%" y="437" width="0.4003%" height="15" fill="rgb(218,109,7)" fg:x="1166" fg:w="5"/><text x="93.6047%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="93.4347%" y="421" width="0.3203%" height="15" fill="rgb(210,20,26)" fg:x="1167" fg:w="4"/><text x="93.6847%" y="431.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="93.7550%" y="517" width="0.0801%" height="15" fill="rgb(216,18,1)" fg:x="1171" fg:w="1"/><text x="94.0050%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9151%" y="453" width="0.0801%" height="15" fill="rgb(206,163,23)" fg:x="1173" fg:w="1"/><text x="94.1651%" y="463.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9151%" y="437" width="0.0801%" height="15" fill="rgb(229,150,31)" fg:x="1173" fg:w="1"/><text x="94.1651%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.9952%" y="437" width="0.0801%" height="15" fill="rgb(231,10,5)" fg:x="1174" fg:w="1"/><text x="94.2452%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="94.0753%" y="437" width="0.0801%" height="15" fill="rgb(250,40,50)" fg:x="1175" fg:w="1"/><text x="94.3253%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="94.1553%" y="437" width="0.0801%" height="15" fill="rgb(217,119,7)" fg:x="1176" fg:w="1"/><text x="94.4053%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="94.2354%" y="437" width="0.2402%" height="15" fill="rgb(245,214,40)" fg:x="1177" fg:w="3"/><text x="94.4854%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="94.2354%" y="421" width="0.2402%" height="15" fill="rgb(216,187,1)" fg:x="1177" fg:w="3"/><text x="94.4854%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.4756%" y="421" width="0.0801%" height="15" fill="rgb(237,146,21)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="94.4756%" y="405" width="0.0801%" height="15" fill="rgb(210,174,47)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.4756%" y="389" width="0.0801%" height="15" fill="rgb(218,111,39)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.4756%" y="373" width="0.0801%" height="15" fill="rgb(224,95,19)" fg:x="1180" fg:w="1"/><text x="94.7256%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.5556%" y="405" width="0.0801%" height="15" fill="rgb(234,15,38)" fg:x="1181" fg:w="1"/><text x="94.8056%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.5556%" y="389" width="0.0801%" height="15" fill="rgb(246,56,12)" fg:x="1181" fg:w="1"/><text x="94.8056%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.5556%" y="373" width="0.0801%" height="15" fill="rgb(247,16,17)" fg:x="1181" fg:w="1"/><text x="94.8056%" y="383.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.88%)</title><rect x="93.9952%" y="453" width="0.8807%" height="15" fill="rgb(215,151,11)" fg:x="1174" fg:w="11"/><text x="94.2452%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.40%)</title><rect x="94.4756%" y="437" width="0.4003%" height="15" fill="rgb(225,16,24)" fg:x="1180" fg:w="5"/><text x="94.7256%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="94.5556%" y="421" width="0.3203%" height="15" fill="rgb(217,117,5)" fg:x="1181" fg:w="4"/><text x="94.8056%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="94.6357%" y="405" width="0.2402%" height="15" fill="rgb(246,187,53)" fg:x="1182" fg:w="3"/><text x="94.8857%" y="415.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="94.9560%" y="405" width="0.1601%" height="15" fill="rgb(241,71,40)" fg:x="1186" fg:w="2"/><text x="95.2060%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.9560%" y="389" width="0.1601%" height="15" fill="rgb(231,67,39)" fg:x="1186" fg:w="2"/><text x="95.2060%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.9560%" y="373" width="0.1601%" height="15" fill="rgb(222,120,24)" fg:x="1186" fg:w="2"/><text x="95.2060%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.1161%" y="405" width="0.0801%" height="15" fill="rgb(248,3,3)" fg:x="1188" fg:w="1"/><text x="95.3661%" y="415.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="94.8759%" y="421" width="0.4804%" height="15" fill="rgb(228,218,5)" fg:x="1185" fg:w="6"/><text x="95.1259%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="95.1962%" y="405" width="0.1601%" height="15" fill="rgb(212,202,43)" fg:x="1189" fg:w="2"/><text x="95.4462%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.1962%" y="389" width="0.1601%" height="15" fill="rgb(235,183,2)" fg:x="1189" fg:w="2"/><text x="95.4462%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.1962%" y="373" width="0.1601%" height="15" fill="rgb(230,165,10)" fg:x="1189" fg:w="2"/><text x="95.4462%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.1962%" y="357" width="0.1601%" height="15" fill="rgb(219,54,40)" fg:x="1189" fg:w="2"/><text x="95.4462%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="94.8759%" y="453" width="0.5604%" height="15" fill="rgb(244,73,9)" fg:x="1185" fg:w="7"/><text x="95.1259%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="94.8759%" y="437" width="0.5604%" height="15" fill="rgb(212,32,45)" fg:x="1185" fg:w="7"/><text x="95.1259%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.3563%" y="421" width="0.0801%" height="15" fill="rgb(205,58,31)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3563%" y="405" width="0.0801%" height="15" fill="rgb(250,120,43)" fg:x="1191" fg:w="1"/><text x="95.6063%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5164%" y="389" width="0.0801%" height="15" fill="rgb(235,13,10)" fg:x="1193" fg:w="1"/><text x="95.7664%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5164%" y="373" width="0.0801%" height="15" fill="rgb(232,219,31)" fg:x="1193" fg:w="1"/><text x="95.7664%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.5164%" y="357" width="0.0801%" height="15" fill="rgb(218,157,51)" fg:x="1193" fg:w="1"/><text x="95.7664%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="95.4363%" y="421" width="0.2402%" height="15" fill="rgb(211,91,52)" fg:x="1192" fg:w="3"/><text x="95.6863%" y="431.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="95.4363%" y="405" width="0.2402%" height="15" fill="rgb(240,173,1)" fg:x="1192" fg:w="3"/><text x="95.6863%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="95.5965%" y="389" width="0.0801%" height="15" fill="rgb(248,20,47)" fg:x="1194" fg:w="1"/><text x="95.8465%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (23 samples, 1.84%)</title><rect x="93.9151%" y="469" width="1.8415%" height="15" fill="rgb(217,221,40)" fg:x="1173" fg:w="23"/><text x="94.1651%" y="479.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="95.4363%" y="453" width="0.3203%" height="15" fill="rgb(226,149,51)" fg:x="1192" fg:w="4"/><text x="95.6863%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="95.4363%" y="437" width="0.3203%" height="15" fill="rgb(252,193,7)" fg:x="1192" fg:w="4"/><text x="95.6863%" y="447.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.6765%" y="421" width="0.0801%" height="15" fill="rgb(205,123,0)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="431.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="95.6765%" y="405" width="0.0801%" height="15" fill="rgb(233,173,25)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="415.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="95.6765%" y="389" width="0.0801%" height="15" fill="rgb(216,63,32)" fg:x="1195" fg:w="1"/><text x="95.9265%" y="399.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (25 samples, 2.00%)</title><rect x="93.8351%" y="501" width="2.0016%" height="15" fill="rgb(209,56,45)" fg:x="1172" fg:w="25"/><text x="94.0851%" y="511.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (25 samples, 2.00%)</title><rect x="93.8351%" y="485" width="2.0016%" height="15" fill="rgb(226,111,49)" fg:x="1172" fg:w="25"/><text x="94.0851%" y="495.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="95.7566%" y="469" width="0.0801%" height="15" fill="rgb(244,181,21)" fg:x="1196" fg:w="1"/><text x="96.0066%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.8367%" y="469" width="0.0801%" height="15" fill="rgb(222,126,15)" fg:x="1197" fg:w="1"/><text x="96.0867%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.8367%" y="453" width="0.0801%" height="15" fill="rgb(222,95,17)" fg:x="1197" fg:w="1"/><text x="96.0867%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.8367%" y="437" width="0.0801%" height="15" fill="rgb(254,46,5)" fg:x="1197" fg:w="1"/><text x="96.0867%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.8367%" y="421" width="0.0801%" height="15" fill="rgb(236,216,35)" fg:x="1197" fg:w="1"/><text x="96.0867%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="95.8367%" y="501" width="0.1601%" height="15" fill="rgb(217,187,26)" fg:x="1197" fg:w="2"/><text x="96.0867%" y="511.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="95.8367%" y="485" width="0.1601%" height="15" fill="rgb(207,192,25)" fg:x="1197" fg:w="2"/><text x="96.0867%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.9167%" y="469" width="0.0801%" height="15" fill="rgb(253,135,27)" fg:x="1198" fg:w="1"/><text x="96.1667%" y="479.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.9968%" y="453" width="0.0801%" height="15" fill="rgb(211,122,29)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.9968%" y="437" width="0.0801%" height="15" fill="rgb(233,162,40)" fg:x="1199" fg:w="1"/><text x="96.2468%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="95.9968%" y="501" width="0.1601%" height="15" fill="rgb(222,184,47)" fg:x="1199" fg:w="2"/><text x="96.2468%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="95.9968%" y="485" width="0.1601%" height="15" fill="rgb(249,99,23)" fg:x="1199" fg:w="2"/><text x="96.2468%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="95.9968%" y="469" width="0.1601%" height="15" fill="rgb(214,60,12)" fg:x="1199" fg:w="2"/><text x="96.2468%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="96.0769%" y="453" width="0.0801%" height="15" fill="rgb(250,229,36)" fg:x="1200" fg:w="1"/><text x="96.3269%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="96.1569%" y="437" width="0.3203%" height="15" fill="rgb(232,195,10)" fg:x="1201" fg:w="4"/><text x="96.4069%" y="447.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.3971%" y="421" width="0.0801%" height="15" fill="rgb(205,213,31)" fg:x="1204" fg:w="1"/><text x="96.6471%" y="431.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (34 samples, 2.72%)</title><rect x="93.8351%" y="517" width="2.7222%" height="15" fill="rgb(237,43,8)" fg:x="1172" fg:w="34"/><text x="94.0851%" y="527.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="96.1569%" y="501" width="0.4003%" height="15" fill="rgb(216,208,3)" fg:x="1201" fg:w="5"/><text x="96.4069%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="96.1569%" y="485" width="0.4003%" height="15" fill="rgb(228,179,44)" fg:x="1201" fg:w="5"/><text x="96.4069%" y="495.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="96.1569%" y="469" width="0.4003%" height="15" fill="rgb(230,192,27)" fg:x="1201" fg:w="5"/><text x="96.4069%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="96.1569%" y="453" width="0.4003%" height="15" fill="rgb(251,30,38)" fg:x="1201" fg:w="5"/><text x="96.4069%" y="463.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="96.4772%" y="437" width="0.0801%" height="15" fill="rgb(246,55,52)" fg:x="1205" fg:w="1"/><text x="96.7272%" y="447.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (297 samples, 23.78%)</title><rect x="72.9384%" y="613" width="23.7790%" height="15" fill="rgb(249,79,26)" fg:x="911" fg:w="297"/><text x="73.1884%" y="623.50">&lt;&amp;kernel::model::entry::Entry as plugi..</text></g><g><title>plugins_core::looking::model::qualify_name (284 samples, 22.74%)</title><rect x="73.9792%" y="597" width="22.7382%" height="15" fill="rgb(220,202,16)" fg:x="924" fg:w="284"/><text x="74.2292%" y="607.50">plugins_core::looking::model::qualif..</text></g><g><title>indefinite::indefinite (284 samples, 22.74%)</title><rect x="73.9792%" y="581" width="22.7382%" height="15" fill="rgb(250,170,23)" fg:x="924" fg:w="284"/><text x="74.2292%" y="591.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (284 samples, 22.74%)</title><rect x="73.9792%" y="565" width="22.7382%" height="15" fill="rgb(230,7,37)" fg:x="924" fg:w="284"/><text x="74.2292%" y="575.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (284 samples, 22.74%)</title><rect x="73.9792%" y="549" width="22.7382%" height="15" fill="rgb(213,71,1)" fg:x="924" fg:w="284"/><text x="74.2292%" y="559.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (37 samples, 2.96%)</title><rect x="93.7550%" y="533" width="2.9624%" height="15" fill="rgb(227,87,39)" fg:x="1171" fg:w="37"/><text x="94.0050%" y="543.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="96.5572%" y="517" width="0.1601%" height="15" fill="rgb(210,41,29)" fg:x="1206" fg:w="2"/><text x="96.8072%" y="527.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (298 samples, 23.86%)</title><rect x="72.9384%" y="645" width="23.8591%" height="15" fill="rgb(206,191,31)" fg:x="911" fg:w="298"/><text x="73.1884%" y="655.50">&lt;plugins_core::looking::actions::LookA..</text></g><g><title>plugins_core::looking::model::new_area_observation (298 samples, 23.86%)</title><rect x="72.9384%" y="629" width="23.8591%" height="15" fill="rgb(247,75,54)" fg:x="911" fg:w="298"/><text x="73.1884%" y="639.50">plugins_core::looking::model::new_area..</text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="96.7174%" y="613" width="0.0801%" height="15" fill="rgb(208,54,50)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="96.7174%" y="597" width="0.0801%" height="15" fill="rgb(214,90,37)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.7174%" y="581" width="0.0801%" height="15" fill="rgb(220,132,6)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.7174%" y="565" width="0.0801%" height="15" fill="rgb(213,167,7)" fg:x="1208" fg:w="1"/><text x="96.9674%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="96.8775%" y="533" width="0.0801%" height="15" fill="rgb(243,36,27)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="96.8775%" y="517" width="0.0801%" height="15" fill="rgb(235,147,12)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.8775%" y="501" width="0.0801%" height="15" fill="rgb(212,198,44)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.8775%" y="485" width="0.0801%" height="15" fill="rgb(218,68,50)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.8775%" y="469" width="0.0801%" height="15" fill="rgb(224,79,48)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.8775%" y="453" width="0.0801%" height="15" fill="rgb(213,191,50)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.8775%" y="437" width="0.0801%" height="15" fill="rgb(254,146,10)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.8775%" y="421" width="0.0801%" height="15" fill="rgb(215,175,11)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.8775%" y="405" width="0.0801%" height="15" fill="rgb(207,49,7)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.8775%" y="389" width="0.0801%" height="15" fill="rgb(234,144,29)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.8775%" y="373" width="0.0801%" height="15" fill="rgb(213,222,48)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.8775%" y="357" width="0.0801%" height="15" fill="rgb(222,8,6)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.8775%" y="341" width="0.0801%" height="15" fill="rgb(221,114,49)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.8775%" y="325" width="0.0801%" height="15" fill="rgb(250,140,42)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8775%" y="309" width="0.0801%" height="15" fill="rgb(250,150,27)" fg:x="1210" fg:w="1"/><text x="97.1275%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="96.8775%" y="581" width="0.1601%" height="15" fill="rgb(252,159,3)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="96.8775%" y="565" width="0.1601%" height="15" fill="rgb(241,182,3)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="575.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="96.8775%" y="549" width="0.1601%" height="15" fill="rgb(236,3,9)" fg:x="1210" fg:w="2"/><text x="97.1275%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="96.9576%" y="533" width="0.0801%" height="15" fill="rgb(223,227,51)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="96.9576%" y="517" width="0.0801%" height="15" fill="rgb(232,133,30)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="96.9576%" y="501" width="0.0801%" height="15" fill="rgb(209,93,27)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.9576%" y="485" width="0.0801%" height="15" fill="rgb(208,108,34)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9576%" y="469" width="0.0801%" height="15" fill="rgb(215,189,13)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.9576%" y="453" width="0.0801%" height="15" fill="rgb(206,88,23)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9576%" y="437" width="0.0801%" height="15" fill="rgb(240,173,0)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.9576%" y="421" width="0.0801%" height="15" fill="rgb(223,106,52)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.9576%" y="405" width="0.0801%" height="15" fill="rgb(206,130,16)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.9576%" y="389" width="0.0801%" height="15" fill="rgb(220,54,25)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="96.9576%" y="373" width="0.0801%" height="15" fill="rgb(210,4,38)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.9576%" y="357" width="0.0801%" height="15" fill="rgb(238,94,39)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.9576%" y="341" width="0.0801%" height="15" fill="rgb(234,124,34)" fg:x="1211" fg:w="1"/><text x="97.2076%" y="351.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (4 samples, 0.32%)</title><rect x="96.7974%" y="629" width="0.3203%" height="15" fill="rgb(221,91,40)" fg:x="1209" fg:w="4"/><text x="97.0474%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="96.7974%" y="613" width="0.3203%" height="15" fill="rgb(246,53,28)" fg:x="1209" fg:w="4"/><text x="97.0474%" y="623.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (4 samples, 0.32%)</title><rect x="96.7974%" y="597" width="0.3203%" height="15" fill="rgb(229,109,7)" fg:x="1209" fg:w="4"/><text x="97.0474%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0376%" y="581" width="0.0801%" height="15" fill="rgb(249,117,8)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0376%" y="565" width="0.0801%" height="15" fill="rgb(210,181,1)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.0376%" y="549" width="0.0801%" height="15" fill="rgb(211,66,1)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0376%" y="533" width="0.0801%" height="15" fill="rgb(221,90,14)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0376%" y="517" width="0.0801%" height="15" fill="rgb(219,222,44)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.0376%" y="501" width="0.0801%" height="15" fill="rgb(246,34,33)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.0376%" y="485" width="0.0801%" height="15" fill="rgb(227,135,41)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.0376%" y="469" width="0.0801%" height="15" fill="rgb(226,15,14)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0376%" y="453" width="0.0801%" height="15" fill="rgb(236,148,47)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.0376%" y="437" width="0.0801%" height="15" fill="rgb(233,162,52)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.0376%" y="421" width="0.0801%" height="15" fill="rgb(244,35,28)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.0376%" y="405" width="0.0801%" height="15" fill="rgb(205,121,10)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.0376%" y="389" width="0.0801%" height="15" fill="rgb(250,58,18)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.0376%" y="373" width="0.0801%" height="15" fill="rgb(216,37,13)" fg:x="1212" fg:w="1"/><text x="97.2876%" y="383.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (5 samples, 0.40%)</title><rect x="96.7974%" y="645" width="0.4003%" height="15" fill="rgb(221,215,42)" fg:x="1209" fg:w="5"/><text x="97.0474%" y="655.50"></text></g><g><title>engine::session::Session::world (1 samples, 0.08%)</title><rect x="97.1177%" y="629" width="0.0801%" height="15" fill="rgb(217,214,19)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.1177%" y="613" width="0.0801%" height="15" fill="rgb(233,139,13)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="97.1177%" y="597" width="0.0801%" height="15" fill="rgb(247,168,23)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="97.1177%" y="581" width="0.0801%" height="15" fill="rgb(207,202,1)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.1177%" y="565" width="0.0801%" height="15" fill="rgb(220,155,48)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.1177%" y="549" width="0.0801%" height="15" fill="rgb(250,43,26)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.1177%" y="533" width="0.0801%" height="15" fill="rgb(212,190,23)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="97.1177%" y="517" width="0.0801%" height="15" fill="rgb(216,39,24)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="97.1177%" y="501" width="0.0801%" height="15" fill="rgb(252,113,16)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.1177%" y="485" width="0.0801%" height="15" fill="rgb(208,113,19)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.1177%" y="469" width="0.0801%" height="15" fill="rgb(234,107,25)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="479.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="97.1177%" y="453" width="0.0801%" height="15" fill="rgb(234,217,51)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="97.1177%" y="437" width="0.0801%" height="15" fill="rgb(251,29,42)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.1177%" y="421" width="0.0801%" height="15" fill="rgb(221,62,51)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.1177%" y="405" width="0.0801%" height="15" fill="rgb(240,192,43)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="415.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="97.1177%" y="389" width="0.0801%" height="15" fill="rgb(224,157,47)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="399.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="97.1177%" y="373" width="0.0801%" height="15" fill="rgb(226,84,45)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.1177%" y="357" width="0.0801%" height="15" fill="rgb(208,207,23)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.1177%" y="341" width="0.0801%" height="15" fill="rgb(253,34,51)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="97.1177%" y="325" width="0.0801%" height="15" fill="rgb(227,26,34)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="97.1177%" y="309" width="0.0801%" height="15" fill="rgb(245,75,19)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.1177%" y="293" width="0.0801%" height="15" fill="rgb(250,191,31)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="97.1177%" y="277" width="0.0801%" height="15" fill="rgb(224,11,50)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.1177%" y="261" width="0.0801%" height="15" fill="rgb(231,171,7)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.1177%" y="245" width="0.0801%" height="15" fill="rgb(252,214,10)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.1177%" y="229" width="0.0801%" height="15" fill="rgb(249,45,46)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="97.1177%" y="213" width="0.0801%" height="15" fill="rgb(240,173,7)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1177%" y="197" width="0.0801%" height="15" fill="rgb(235,214,13)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="97.1177%" y="181" width="0.0801%" height="15" fill="rgb(245,156,8)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="97.1177%" y="165" width="0.0801%" height="15" fill="rgb(235,46,12)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="175.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="97.1177%" y="149" width="0.0801%" height="15" fill="rgb(221,81,14)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.1177%" y="133" width="0.0801%" height="15" fill="rgb(238,207,9)" fg:x="1213" fg:w="1"/><text x="97.3677%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.1978%" y="581" width="0.1601%" height="15" fill="rgb(224,129,35)" fg:x="1214" fg:w="2"/><text x="97.4478%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="97.2778%" y="565" width="0.0801%" height="15" fill="rgb(243,218,34)" fg:x="1215" fg:w="1"/><text x="97.5278%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (3 samples, 0.24%)</title><rect x="97.1978%" y="613" width="0.2402%" height="15" fill="rgb(220,166,13)" fg:x="1214" fg:w="3"/><text x="97.4478%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="97.1978%" y="597" width="0.2402%" height="15" fill="rgb(227,167,49)" fg:x="1214" fg:w="3"/><text x="97.4478%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.3579%" y="581" width="0.0801%" height="15" fill="rgb(234,142,12)" fg:x="1216" fg:w="1"/><text x="97.6079%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="97.4380%" y="581" width="0.1601%" height="15" fill="rgb(207,100,48)" fg:x="1217" fg:w="2"/><text x="97.6880%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="97.4380%" y="565" width="0.1601%" height="15" fill="rgb(210,25,14)" fg:x="1217" fg:w="2"/><text x="97.6880%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.5981%" y="517" width="0.0801%" height="15" fill="rgb(246,116,27)" fg:x="1219" fg:w="1"/><text x="97.8481%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6781%" y="325" width="0.0801%" height="15" fill="rgb(214,193,42)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="309" width="0.0801%" height="15" fill="rgb(214,122,8)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="293" width="0.0801%" height="15" fill="rgb(244,173,18)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="277" width="0.0801%" height="15" fill="rgb(232,68,19)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6781%" y="261" width="0.0801%" height="15" fill="rgb(236,224,1)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6781%" y="245" width="0.0801%" height="15" fill="rgb(240,11,8)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6781%" y="229" width="0.0801%" height="15" fill="rgb(244,159,20)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.6781%" y="213" width="0.0801%" height="15" fill="rgb(240,223,54)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.6781%" y="197" width="0.0801%" height="15" fill="rgb(237,146,5)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.6781%" y="181" width="0.0801%" height="15" fill="rgb(218,221,32)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6781%" y="165" width="0.0801%" height="15" fill="rgb(244,96,26)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.6781%" y="149" width="0.0801%" height="15" fill="rgb(245,184,37)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.6781%" y="133" width="0.0801%" height="15" fill="rgb(248,91,47)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.6781%" y="117" width="0.0801%" height="15" fill="rgb(243,199,8)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.6781%" y="101" width="0.0801%" height="15" fill="rgb(249,12,15)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.6781%" y="85" width="0.0801%" height="15" fill="rgb(245,97,12)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6781%" y="69" width="0.0801%" height="15" fill="rgb(244,61,1)" fg:x="1220" fg:w="1"/><text x="97.9281%" y="79.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="97.6781%" y="517" width="0.1601%" height="15" fill="rgb(222,194,10)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (2 samples, 0.16%)</title><rect x="97.6781%" y="501" width="0.1601%" height="15" fill="rgb(226,178,8)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (2 samples, 0.16%)</title><rect x="97.6781%" y="485" width="0.1601%" height="15" fill="rgb(241,32,34)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="97.6781%" y="469" width="0.1601%" height="15" fill="rgb(254,26,6)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="97.6781%" y="453" width="0.1601%" height="15" fill="rgb(249,71,11)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="97.6781%" y="437" width="0.1601%" height="15" fill="rgb(232,170,27)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="447.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="97.6781%" y="421" width="0.1601%" height="15" fill="rgb(214,223,17)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="97.6781%" y="405" width="0.1601%" height="15" fill="rgb(250,18,15)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="415.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="97.6781%" y="389" width="0.1601%" height="15" fill="rgb(212,153,51)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="97.6781%" y="373" width="0.1601%" height="15" fill="rgb(219,194,12)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="383.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="97.6781%" y="357" width="0.1601%" height="15" fill="rgb(212,58,17)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="97.6781%" y="341" width="0.1601%" height="15" fill="rgb(254,5,10)" fg:x="1220" fg:w="2"/><text x="97.9281%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7582%" y="325" width="0.0801%" height="15" fill="rgb(246,91,7)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7582%" y="309" width="0.0801%" height="15" fill="rgb(218,108,49)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7582%" y="293" width="0.0801%" height="15" fill="rgb(238,123,20)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7582%" y="277" width="0.0801%" height="15" fill="rgb(231,69,23)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.7582%" y="261" width="0.0801%" height="15" fill="rgb(230,209,3)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7582%" y="245" width="0.0801%" height="15" fill="rgb(231,19,0)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7582%" y="229" width="0.0801%" height="15" fill="rgb(226,192,25)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7582%" y="213" width="0.0801%" height="15" fill="rgb(223,175,53)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.7582%" y="197" width="0.0801%" height="15" fill="rgb(248,35,51)" fg:x="1221" fg:w="1"/><text x="98.0082%" y="207.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (5 samples, 0.40%)</title><rect x="97.5981%" y="533" width="0.4003%" height="15" fill="rgb(230,37,26)" fg:x="1219" fg:w="5"/><text x="97.8481%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="97.8383%" y="517" width="0.1601%" height="15" fill="rgb(206,120,22)" fg:x="1222" fg:w="2"/><text x="98.0883%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="97.8383%" y="501" width="0.1601%" height="15" fill="rgb(207,165,28)" fg:x="1222" fg:w="2"/><text x="98.0883%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9183%" y="485" width="0.0801%" height="15" fill="rgb(226,23,46)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9183%" y="469" width="0.0801%" height="15" fill="rgb(208,130,44)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.9183%" y="453" width="0.0801%" height="15" fill="rgb(231,67,8)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9183%" y="437" width="0.0801%" height="15" fill="rgb(205,183,22)" fg:x="1223" fg:w="1"/><text x="98.1683%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="97.9984%" y="389" width="0.0801%" height="15" fill="rgb(224,47,9)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="97.9984%" y="373" width="0.0801%" height="15" fill="rgb(250,183,49)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.9984%" y="357" width="0.0801%" height="15" fill="rgb(220,151,39)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="367.50"></text></g><g><title>kernel::model::scopes::load_props (1 samples, 0.08%)</title><rect x="97.9984%" y="341" width="0.0801%" height="15" fill="rgb(220,118,20)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (1 samples, 0.08%)</title><rect x="97.9984%" y="325" width="0.0801%" height="15" fill="rgb(231,65,51)" fg:x="1224" fg:w="1"/><text x="98.2484%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="98.0785%" y="373" width="0.0801%" height="15" fill="rgb(253,125,37)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="383.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="98.0785%" y="357" width="0.0801%" height="15" fill="rgb(232,102,6)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0785%" y="341" width="0.0801%" height="15" fill="rgb(251,105,13)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0785%" y="325" width="0.0801%" height="15" fill="rgb(222,179,29)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.0785%" y="309" width="0.0801%" height="15" fill="rgb(229,180,53)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0785%" y="293" width="0.0801%" height="15" fill="rgb(238,104,13)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.0785%" y="277" width="0.0801%" height="15" fill="rgb(210,130,5)" fg:x="1225" fg:w="1"/><text x="98.3285%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="97.5981%" y="565" width="0.8006%" height="15" fill="rgb(233,87,49)" fg:x="1219" fg:w="10"/><text x="97.8481%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.80%)</title><rect x="97.5981%" y="549" width="0.8006%" height="15" fill="rgb(243,34,9)" fg:x="1219" fg:w="10"/><text x="97.8481%" y="559.50"></text></g><g><title>plugins_core::tools::get_contained_keys (5 samples, 0.40%)</title><rect x="97.9984%" y="533" width="0.4003%" height="15" fill="rgb(235,225,10)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="97.9984%" y="517" width="0.4003%" height="15" fill="rgb(212,0,30)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (5 samples, 0.40%)</title><rect x="97.9984%" y="501" width="0.4003%" height="15" fill="rgb(211,177,0)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (5 samples, 0.40%)</title><rect x="97.9984%" y="485" width="0.4003%" height="15" fill="rgb(225,220,11)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="97.9984%" y="469" width="0.4003%" height="15" fill="rgb(215,10,13)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.40%)</title><rect x="97.9984%" y="453" width="0.4003%" height="15" fill="rgb(240,177,14)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (5 samples, 0.40%)</title><rect x="97.9984%" y="437" width="0.4003%" height="15" fill="rgb(243,7,39)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="97.9984%" y="421" width="0.4003%" height="15" fill="rgb(212,99,0)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="431.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="97.9984%" y="405" width="0.4003%" height="15" fill="rgb(225,162,48)" fg:x="1224" fg:w="5"/><text x="98.2484%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="98.0785%" y="389" width="0.3203%" height="15" fill="rgb(246,16,25)" fg:x="1225" fg:w="4"/><text x="98.3285%" y="399.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="98.1585%" y="373" width="0.2402%" height="15" fill="rgb(220,150,2)" fg:x="1226" fg:w="3"/><text x="98.4085%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.2386%" y="357" width="0.1601%" height="15" fill="rgb(237,113,11)" fg:x="1227" fg:w="2"/><text x="98.4886%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2386%" y="341" width="0.1601%" height="15" fill="rgb(236,70,20)" fg:x="1227" fg:w="2"/><text x="98.4886%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.2386%" y="325" width="0.1601%" height="15" fill="rgb(234,94,7)" fg:x="1227" fg:w="2"/><text x="98.4886%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2386%" y="309" width="0.1601%" height="15" fill="rgb(250,221,0)" fg:x="1227" fg:w="2"/><text x="98.4886%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3187%" y="293" width="0.0801%" height="15" fill="rgb(245,149,46)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="277" width="0.0801%" height="15" fill="rgb(215,37,27)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.3187%" y="261" width="0.0801%" height="15" fill="rgb(232,65,3)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.3187%" y="245" width="0.0801%" height="15" fill="rgb(214,2,16)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3187%" y="229" width="0.0801%" height="15" fill="rgb(227,131,50)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3187%" y="213" width="0.0801%" height="15" fill="rgb(247,131,45)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3187%" y="197" width="0.0801%" height="15" fill="rgb(215,97,47)" fg:x="1228" fg:w="1"/><text x="98.5687%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3987%" y="341" width="0.0801%" height="15" fill="rgb(233,143,12)" fg:x="1229" fg:w="1"/><text x="98.6487%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.3987%" y="517" width="0.1601%" height="15" fill="rgb(222,57,17)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="98.3987%" y="501" width="0.1601%" height="15" fill="rgb(214,119,38)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="98.3987%" y="485" width="0.1601%" height="15" fill="rgb(217,28,47)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="98.3987%" y="469" width="0.1601%" height="15" fill="rgb(231,14,52)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="98.3987%" y="453" width="0.1601%" height="15" fill="rgb(220,158,18)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="98.3987%" y="437" width="0.1601%" height="15" fill="rgb(222,143,46)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="98.3987%" y="421" width="0.1601%" height="15" fill="rgb(227,165,5)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="98.3987%" y="405" width="0.1601%" height="15" fill="rgb(216,222,49)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="98.3987%" y="389" width="0.1601%" height="15" fill="rgb(238,73,39)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="98.3987%" y="373" width="0.1601%" height="15" fill="rgb(252,115,9)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="98.3987%" y="357" width="0.1601%" height="15" fill="rgb(238,202,4)" fg:x="1229" fg:w="2"/><text x="98.6487%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.4788%" y="341" width="0.0801%" height="15" fill="rgb(252,153,44)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="98.4788%" y="325" width="0.0801%" height="15" fill="rgb(235,128,27)" fg:x="1230" fg:w="1"/><text x="98.7288%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.9592%" y="229" width="0.0801%" height="15" fill="rgb(221,121,47)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9592%" y="213" width="0.0801%" height="15" fill="rgb(247,211,47)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.9592%" y="197" width="0.0801%" height="15" fill="rgb(252,47,49)" fg:x="1236" fg:w="1"/><text x="99.2092%" y="207.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.9592%" y="309" width="0.1601%" height="15" fill="rgb(219,119,53)" fg:x="1236" fg:w="2"/><text x="99.2092%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.9592%" y="293" width="0.1601%" height="15" fill="rgb(243,165,53)" fg:x="1236" fg:w="2"/><text x="99.2092%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.9592%" y="277" width="0.1601%" height="15" fill="rgb(230,12,35)" fg:x="1236" fg:w="2"/><text x="99.2092%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.9592%" y="261" width="0.1601%" height="15" fill="rgb(239,57,49)" fg:x="1236" fg:w="2"/><text x="99.2092%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.9592%" y="245" width="0.1601%" height="15" fill="rgb(231,154,7)" fg:x="1236" fg:w="2"/><text x="99.2092%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.0392%" y="229" width="0.0801%" height="15" fill="rgb(248,81,34)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0392%" y="213" width="0.0801%" height="15" fill="rgb(247,9,5)" fg:x="1237" fg:w="1"/><text x="99.2892%" y="223.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.48%)</title><rect x="98.7190%" y="405" width="0.4804%" height="15" fill="rgb(228,172,27)" fg:x="1233" fg:w="6"/><text x="98.9690%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.7990%" y="389" width="0.4003%" height="15" fill="rgb(230,57,44)" fg:x="1234" fg:w="5"/><text x="99.0490%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="98.7990%" y="373" width="0.4003%" height="15" fill="rgb(249,35,22)" fg:x="1234" fg:w="5"/><text x="99.0490%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="98.8791%" y="357" width="0.3203%" height="15" fill="rgb(250,137,27)" fg:x="1235" fg:w="4"/><text x="99.1291%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.8791%" y="341" width="0.3203%" height="15" fill="rgb(251,57,31)" fg:x="1235" fg:w="4"/><text x="99.1291%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="98.8791%" y="325" width="0.3203%" height="15" fill="rgb(238,60,0)" fg:x="1235" fg:w="4"/><text x="99.1291%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.1193%" y="309" width="0.0801%" height="15" fill="rgb(242,185,39)" fg:x="1238" fg:w="1"/><text x="99.3693%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.1994%" y="405" width="0.0801%" height="15" fill="rgb(240,63,43)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1994%" y="389" width="0.0801%" height="15" fill="rgb(236,155,6)" fg:x="1239" fg:w="1"/><text x="99.4494%" y="399.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.80%)</title><rect x="98.5588%" y="501" width="0.8006%" height="15" fill="rgb(215,11,29)" fg:x="1231" fg:w="10"/><text x="98.8088%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="98.5588%" y="485" width="0.8006%" height="15" fill="rgb(228,180,48)" fg:x="1231" fg:w="10"/><text x="98.8088%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="98.5588%" y="469" width="0.8006%" height="15" fill="rgb(241,102,12)" fg:x="1231" fg:w="10"/><text x="98.8088%" y="479.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.80%)</title><rect x="98.5588%" y="453" width="0.8006%" height="15" fill="rgb(246,213,4)" fg:x="1231" fg:w="10"/><text x="98.8088%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (10 samples, 0.80%)</title><rect x="98.5588%" y="437" width="0.8006%" height="15" fill="rgb(218,134,35)" fg:x="1231" fg:w="10"/><text x="98.8088%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.80%)</title><rect x="98.5588%" y="421" width="0.8006%" height="15" fill="rgb(251,117,35)" fg:x="1231" fg:w="10"/><text x="98.8088%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2794%" y="405" width="0.0801%" height="15" fill="rgb(206,156,45)" fg:x="1240" fg:w="1"/><text x="99.5294%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.3595%" y="421" width="0.0801%" height="15" fill="rgb(218,52,27)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.3595%" y="405" width="0.0801%" height="15" fill="rgb(238,83,36)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.3595%" y="389" width="0.0801%" height="15" fill="rgb(218,53,43)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.3595%" y="373" width="0.0801%" height="15" fill="rgb(239,54,39)" fg:x="1241" fg:w="1"/><text x="99.6095%" y="383.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (12 samples, 0.96%)</title><rect x="98.5588%" y="517" width="0.9608%" height="15" fill="rgb(212,198,13)" fg:x="1231" fg:w="12"/><text x="98.8088%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (2 samples, 0.16%)</title><rect x="99.3595%" y="501" width="0.1601%" height="15" fill="rgb(234,54,46)" fg:x="1241" fg:w="2"/><text x="99.6095%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="99.3595%" y="485" width="0.1601%" height="15" fill="rgb(217,120,7)" fg:x="1241" fg:w="2"/><text x="99.6095%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.3595%" y="469" width="0.1601%" height="15" fill="rgb(246,39,15)" fg:x="1241" fg:w="2"/><text x="99.6095%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.3595%" y="453" width="0.1601%" height="15" fill="rgb(242,143,31)" fg:x="1241" fg:w="2"/><text x="99.6095%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="99.3595%" y="437" width="0.1601%" height="15" fill="rgb(252,60,24)" fg:x="1241" fg:w="2"/><text x="99.6095%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="99.4396%" y="421" width="0.0801%" height="15" fill="rgb(249,220,7)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4396%" y="405" width="0.0801%" height="15" fill="rgb(236,67,13)" fg:x="1242" fg:w="1"/><text x="99.6896%" y="415.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (333 samples, 26.66%)</title><rect x="72.9384%" y="661" width="26.6613%" height="15" fill="rgb(210,62,39)" fg:x="911" fg:w="333"/><text x="73.1884%" y="671.50">&lt;engine::perform::StandardPerformer as kern..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (30 samples, 2.40%)</title><rect x="97.1978%" y="645" width="2.4019%" height="15" fill="rgb(219,122,53)" fg:x="1214" fg:w="30"/><text x="97.4478%" y="655.50">ke..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (30 samples, 2.40%)</title><rect x="97.1978%" y="629" width="2.4019%" height="15" fill="rgb(218,87,25)" fg:x="1214" fg:w="30"/><text x="97.4478%" y="639.50">&lt;p..</text></g><g><title>plugins_rpc::querying::have_surroundings (27 samples, 2.16%)</title><rect x="97.4380%" y="613" width="2.1617%" height="15" fill="rgb(234,179,48)" fg:x="1217" fg:w="27"/><text x="97.6880%" y="623.50">p..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (27 samples, 2.16%)</title><rect x="97.4380%" y="597" width="2.1617%" height="15" fill="rgb(248,90,0)" fg:x="1217" fg:w="27"/><text x="97.6880%" y="607.50">&lt;..</text></g><g><title>core::iter::adapters::try_process (25 samples, 2.00%)</title><rect x="97.5981%" y="581" width="2.0016%" height="15" fill="rgb(207,228,37)" fg:x="1219" fg:w="25"/><text x="97.8481%" y="591.50">c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (15 samples, 1.20%)</title><rect x="98.3987%" y="565" width="1.2010%" height="15" fill="rgb(235,214,15)" fg:x="1229" fg:w="15"/><text x="98.6487%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 1.20%)</title><rect x="98.3987%" y="549" width="1.2010%" height="15" fill="rgb(210,144,39)" fg:x="1229" fg:w="15"/><text x="98.6487%" y="559.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (15 samples, 1.20%)</title><rect x="98.3987%" y="533" width="1.2010%" height="15" fill="rgb(222,67,41)" fg:x="1229" fg:w="15"/><text x="98.6487%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="99.5196%" y="517" width="0.0801%" height="15" fill="rgb(205,35,37)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="99.5196%" y="501" width="0.0801%" height="15" fill="rgb(216,125,40)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5196%" y="485" width="0.0801%" height="15" fill="rgb(228,227,20)" fg:x="1243" fg:w="1"/><text x="99.7696%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5997%" y="501" width="0.0801%" height="15" fill="rgb(242,173,45)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5997%" y="485" width="0.0801%" height="15" fill="rgb(215,79,24)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5997%" y="469" width="0.0801%" height="15" fill="rgb(238,164,38)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5997%" y="453" width="0.0801%" height="15" fill="rgb(245,196,38)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5997%" y="437" width="0.0801%" height="15" fill="rgb(231,217,29)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5997%" y="421" width="0.0801%" height="15" fill="rgb(245,6,4)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5997%" y="405" width="0.0801%" height="15" fill="rgb(214,76,49)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5997%" y="389" width="0.0801%" height="15" fill="rgb(205,96,12)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5997%" y="373" width="0.0801%" height="15" fill="rgb(243,131,4)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.5997%" y="357" width="0.0801%" height="15" fill="rgb(214,114,4)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.5997%" y="341" width="0.0801%" height="15" fill="rgb(234,215,15)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.5997%" y="325" width="0.0801%" height="15" fill="rgb(250,216,45)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.5997%" y="309" width="0.0801%" height="15" fill="rgb(236,128,4)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5997%" y="293" width="0.0801%" height="15" fill="rgb(234,50,33)" fg:x="1244" fg:w="1"/><text x="99.8497%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.5997%" y="597" width="0.1601%" height="15" fill="rgb(253,131,37)" fg:x="1244" fg:w="2"/><text x="99.8497%" y="607.50"></text></g><g><title>kernel::model::scopes::load_props (2 samples, 0.16%)</title><rect x="99.5997%" y="581" width="0.1601%" height="15" fill="rgb(218,55,27)" fg:x="1244" fg:w="2"/><text x="99.8497%" y="591.50"></text></g><g><title>kernel::model::entity::Entity::load_scope (2 samples, 0.16%)</title><rect x="99.5997%" y="565" width="0.1601%" height="15" fill="rgb(241,220,28)" fg:x="1244" fg:w="2"/><text x="99.8497%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.5997%" y="549" width="0.1601%" height="15" fill="rgb(241,90,48)" fg:x="1244" fg:w="2"/><text x="99.8497%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.5997%" y="533" width="0.1601%" height="15" fill="rgb(216,43,37)" fg:x="1244" fg:w="2"/><text x="99.8497%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.5997%" y="517" width="0.1601%" height="15" fill="rgb(207,173,9)" fg:x="1244" fg:w="2"/><text x="99.8497%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6797%" y="501" width="0.0801%" height="15" fill="rgb(240,126,30)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.6797%" y="485" width="0.0801%" height="15" fill="rgb(228,178,53)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.6797%" y="469" width="0.0801%" height="15" fill="rgb(217,33,4)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.6797%" y="453" width="0.0801%" height="15" fill="rgb(206,124,34)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.6797%" y="437" width="0.0801%" height="15" fill="rgb(208,122,53)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6797%" y="421" width="0.0801%" height="15" fill="rgb(215,202,26)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6797%" y="405" width="0.0801%" height="15" fill="rgb(232,198,31)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.6797%" y="389" width="0.0801%" height="15" fill="rgb(222,23,35)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.6797%" y="373" width="0.0801%" height="15" fill="rgb(242,27,53)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.6797%" y="357" width="0.0801%" height="15" fill="rgb(210,216,42)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.6797%" y="341" width="0.0801%" height="15" fill="rgb(234,39,38)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6797%" y="325" width="0.0801%" height="15" fill="rgb(235,126,54)" fg:x="1245" fg:w="1"/><text x="99.9297%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="99.7598%" y="581" width="0.0801%" height="15" fill="rgb(235,150,33)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="99.7598%" y="565" width="0.0801%" height="15" fill="rgb(249,49,53)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7598%" y="549" width="0.0801%" height="15" fill="rgb(238,60,50)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7598%" y="533" width="0.0801%" height="15" fill="rgb(210,5,2)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="543.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7598%" y="517" width="0.0801%" height="15" fill="rgb(214,207,24)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7598%" y="501" width="0.0801%" height="15" fill="rgb(228,173,2)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7598%" y="485" width="0.0801%" height="15" fill="rgb(244,26,8)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7598%" y="469" width="0.0801%" height="15" fill="rgb(249,153,35)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7598%" y="453" width="0.0801%" height="15" fill="rgb(221,215,40)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.7598%" y="437" width="0.0801%" height="15" fill="rgb(238,106,35)" fg:x="1246" fg:w="1"/><text x="100.0098%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="99.5997%" y="629" width="0.3203%" height="15" fill="rgb(207,195,21)" fg:x="1244" fg:w="4"/><text x="99.8497%" y="639.50"></text></g><g><title>engine::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="99.5997%" y="613" width="0.3203%" height="15" fill="rgb(205,43,29)" fg:x="1244" fg:w="4"/><text x="99.8497%" y="623.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="99.7598%" y="597" width="0.1601%" height="15" fill="rgb(236,35,21)" fg:x="1246" fg:w="2"/><text x="100.0098%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8399%" y="581" width="0.0801%" height="15" fill="rgb(244,74,8)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8399%" y="565" width="0.0801%" height="15" fill="rgb(241,229,7)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8399%" y="549" width="0.0801%" height="15" fill="rgb(212,223,25)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8399%" y="533" width="0.0801%" height="15" fill="rgb(234,58,53)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8399%" y="517" width="0.0801%" height="15" fill="rgb(244,36,1)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8399%" y="501" width="0.0801%" height="15" fill="rgb(222,40,54)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.8399%" y="485" width="0.0801%" height="15" fill="rgb(210,207,39)" fg:x="1247" fg:w="1"/><text x="100.0899%" y="495.50"></text></g><g><title>all (1,249 samples, 100%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(234,52,14)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1151.50"></text></g><g><title>simple-5e588292 (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(239,108,46)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1135.50">simple-5e588292</text></g><g><title>_start (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(252,223,5)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1119.50">_start</text></g><g><title>__libc_start_main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(227,181,11)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1103.50">__libc_start_main</text></g><g><title>main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(248,126,40)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1087.50">main</text></g><g><title>std::rt::lang_start_internal (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(243,1,18)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1071.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(214,145,23)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(241,218,11)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(214,219,24)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1023.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(235,32,7)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="1007.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,249 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(227,121,28)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,249 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(216,129,49)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,249 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(207,194,50)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="959.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,249 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(207,4,18)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="943.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,249 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(213,50,30)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="927.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,249 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(208,77,22)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="911.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,249 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(244,204,34)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="895.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,249 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(230,20,17)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="879.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,249 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(237,83,15)" fg:x="0" fg:w="1249"/><text x="0.2500%" y="863.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (407 samples, 32.59%)</title><rect x="67.4139%" y="837" width="32.5861%" height="15" fill="rgb(221,109,25)" fg:x="842" fg:w="407"/><text x="67.6639%" y="847.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::ro..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (407 samples, 32.59%)</title><rect x="67.4139%" y="821" width="32.5861%" height="15" fill="rgb(205,194,52)" fg:x="842" fg:w="407"/><text x="67.6639%" y="831.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (407 samples, 32.59%)</title><rect x="67.4139%" y="805" width="32.5861%" height="15" fill="rgb(244,173,54)" fg:x="842" fg:w="407"/><text x="67.6639%" y="815.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (338 samples, 27.06%)</title><rect x="72.9384%" y="789" width="27.0616%" height="15" fill="rgb(227,181,18)" fg:x="911" fg:w="338"/><text x="73.1884%" y="799.50">engine::session::Session::evaluate_and_perf..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (338 samples, 27.06%)</title><rect x="72.9384%" y="773" width="27.0616%" height="15" fill="rgb(238,36,30)" fg:x="911" fg:w="338"/><text x="73.1884%" y="783.50">engine::perform::StandardPerformer::evaluat..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (338 samples, 27.06%)</title><rect x="72.9384%" y="757" width="27.0616%" height="15" fill="rgb(254,85,0)" fg:x="911" fg:w="338"/><text x="73.1884%" y="767.50">&lt;kernel::plugins::SessionPlugins as kernel:..</text></g><g><title>core::iter::adapters::try_process (338 samples, 27.06%)</title><rect x="72.9384%" y="741" width="27.0616%" height="15" fill="rgb(247,63,33)" fg:x="911" fg:w="338"/><text x="73.1884%" y="751.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (338 samples, 27.06%)</title><rect x="72.9384%" y="725" width="27.0616%" height="15" fill="rgb(220,7,54)" fg:x="911" fg:w="338"/><text x="73.1884%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_fro..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (338 samples, 27.06%)</title><rect x="72.9384%" y="709" width="27.0616%" height="15" fill="rgb(238,227,21)" fg:x="911" fg:w="338"/><text x="73.1884%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as cor..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (338 samples, 27.06%)</title><rect x="72.9384%" y="693" width="27.0616%" height="15" fill="rgb(237,29,31)" fg:x="911" fg:w="338"/><text x="73.1884%" y="703.50">&lt;plugins_core::looking::LookingPlugin as ke..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::scopes::Performer&gt;::perform (338 samples, 27.06%)</title><rect x="72.9384%" y="677" width="27.0616%" height="15" fill="rgb(211,21,50)" fg:x="911" fg:w="338"/><text x="73.1884%" y="687.50">&lt;engine::perform::StandardPerformer as kern..</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (5 samples, 0.40%)</title><rect x="99.5997%" y="661" width="0.4003%" height="15" fill="rgb(239,119,2)" fg:x="1244" fg:w="5"/><text x="99.8497%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.40%)</title><rect x="99.5997%" y="645" width="0.4003%" height="15" fill="rgb(250,2,39)" fg:x="1244" fg:w="5"/><text x="99.8497%" y="655.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.9199%" y="629" width="0.0801%" height="15" fill="rgb(244,46,53)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="639.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.9199%" y="613" width="0.0801%" height="15" fill="rgb(209,21,19)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="623.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="99.9199%" y="597" width="0.0801%" height="15" fill="rgb(236,145,4)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="99.9199%" y="581" width="0.0801%" height="15" fill="rgb(220,133,36)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="99.9199%" y="565" width="0.0801%" height="15" fill="rgb(244,18,3)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.9199%" y="549" width="0.0801%" height="15" fill="rgb(232,171,48)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="99.9199%" y="533" width="0.0801%" height="15" fill="rgb(223,223,53)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.9199%" y="517" width="0.0801%" height="15" fill="rgb(246,92,13)" fg:x="1248" fg:w="1"/><text x="100.1699%" y="527.50"></text></g></svg></svg>