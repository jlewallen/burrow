<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="1289"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0776%" y="437" width="0.0776%" height="15" fill="rgb(253,43,49)" fg:x="1" fg:w="1"/><text x="0.3276%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0776%" y="421" width="0.0776%" height="15" fill="rgb(219,54,36)" fg:x="1" fg:w="1"/><text x="0.3276%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0776%" y="405" width="0.0776%" height="15" fill="rgb(227,133,34)" fg:x="1" fg:w="1"/><text x="0.3276%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1552%" y="437" width="0.0776%" height="15" fill="rgb(247,227,15)" fg:x="2" fg:w="1"/><text x="0.4052%" y="447.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="0.0776%" y="581" width="0.2327%" height="15" fill="rgb(229,96,14)" fg:x="1" fg:w="3"/><text x="0.3276%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (3 samples, 0.23%)</title><rect x="0.0776%" y="565" width="0.2327%" height="15" fill="rgb(220,79,17)" fg:x="1" fg:w="3"/><text x="0.3276%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="0.0776%" y="549" width="0.2327%" height="15" fill="rgb(205,131,53)" fg:x="1" fg:w="3"/><text x="0.3276%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.23%)</title><rect x="0.0776%" y="533" width="0.2327%" height="15" fill="rgb(209,50,29)" fg:x="1" fg:w="3"/><text x="0.3276%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="0.0776%" y="517" width="0.2327%" height="15" fill="rgb(245,86,46)" fg:x="1" fg:w="3"/><text x="0.3276%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.23%)</title><rect x="0.0776%" y="501" width="0.2327%" height="15" fill="rgb(235,66,46)" fg:x="1" fg:w="3"/><text x="0.3276%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="0.0776%" y="485" width="0.2327%" height="15" fill="rgb(232,148,31)" fg:x="1" fg:w="3"/><text x="0.3276%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.23%)</title><rect x="0.0776%" y="469" width="0.2327%" height="15" fill="rgb(217,149,8)" fg:x="1" fg:w="3"/><text x="0.3276%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="0.0776%" y="453" width="0.2327%" height="15" fill="rgb(209,183,11)" fg:x="1" fg:w="3"/><text x="0.3276%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2327%" y="437" width="0.0776%" height="15" fill="rgb(208,55,20)" fg:x="3" fg:w="1"/><text x="0.4827%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="0.3103%" y="389" width="0.0776%" height="15" fill="rgb(218,39,14)" fg:x="4" fg:w="1"/><text x="0.5603%" y="399.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="0.3103%" y="501" width="0.1552%" height="15" fill="rgb(216,169,33)" fg:x="4" fg:w="2"/><text x="0.5603%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="0.3103%" y="485" width="0.1552%" height="15" fill="rgb(233,80,24)" fg:x="4" fg:w="2"/><text x="0.5603%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="0.3103%" y="469" width="0.1552%" height="15" fill="rgb(213,179,31)" fg:x="4" fg:w="2"/><text x="0.5603%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.3103%" y="453" width="0.1552%" height="15" fill="rgb(209,19,5)" fg:x="4" fg:w="2"/><text x="0.5603%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="0.3103%" y="437" width="0.1552%" height="15" fill="rgb(219,18,35)" fg:x="4" fg:w="2"/><text x="0.5603%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="0.3103%" y="421" width="0.1552%" height="15" fill="rgb(209,169,16)" fg:x="4" fg:w="2"/><text x="0.5603%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.3103%" y="405" width="0.1552%" height="15" fill="rgb(245,90,51)" fg:x="4" fg:w="2"/><text x="0.5603%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.3879%" y="389" width="0.0776%" height="15" fill="rgb(220,99,45)" fg:x="5" fg:w="1"/><text x="0.6379%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.3879%" y="373" width="0.0776%" height="15" fill="rgb(249,89,25)" fg:x="5" fg:w="1"/><text x="0.6379%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.3879%" y="357" width="0.0776%" height="15" fill="rgb(239,193,0)" fg:x="5" fg:w="1"/><text x="0.6379%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.3879%" y="341" width="0.0776%" height="15" fill="rgb(231,126,1)" fg:x="5" fg:w="1"/><text x="0.6379%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.4655%" y="421" width="0.0776%" height="15" fill="rgb(243,166,3)" fg:x="6" fg:w="1"/><text x="0.7155%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="0.4655%" y="405" width="0.0776%" height="15" fill="rgb(223,22,34)" fg:x="6" fg:w="1"/><text x="0.7155%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="0.4655%" y="389" width="0.0776%" height="15" fill="rgb(251,52,51)" fg:x="6" fg:w="1"/><text x="0.7155%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.31%)</title><rect x="0.3103%" y="533" width="0.3103%" height="15" fill="rgb(221,165,28)" fg:x="4" fg:w="4"/><text x="0.5603%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.31%)</title><rect x="0.3103%" y="517" width="0.3103%" height="15" fill="rgb(218,121,47)" fg:x="4" fg:w="4"/><text x="0.5603%" y="527.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="0.4655%" y="501" width="0.1552%" height="15" fill="rgb(209,120,9)" fg:x="6" fg:w="2"/><text x="0.7155%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.4655%" y="485" width="0.1552%" height="15" fill="rgb(236,68,12)" fg:x="6" fg:w="2"/><text x="0.7155%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.4655%" y="469" width="0.1552%" height="15" fill="rgb(225,194,26)" fg:x="6" fg:w="2"/><text x="0.7155%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="0.4655%" y="453" width="0.1552%" height="15" fill="rgb(231,84,39)" fg:x="6" fg:w="2"/><text x="0.7155%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="0.4655%" y="437" width="0.1552%" height="15" fill="rgb(210,11,45)" fg:x="6" fg:w="2"/><text x="0.7155%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5431%" y="421" width="0.0776%" height="15" fill="rgb(224,54,52)" fg:x="7" fg:w="1"/><text x="0.7931%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5431%" y="405" width="0.0776%" height="15" fill="rgb(238,102,14)" fg:x="7" fg:w="1"/><text x="0.7931%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5431%" y="389" width="0.0776%" height="15" fill="rgb(243,160,52)" fg:x="7" fg:w="1"/><text x="0.7931%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.5431%" y="373" width="0.0776%" height="15" fill="rgb(216,114,19)" fg:x="7" fg:w="1"/><text x="0.7931%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.5431%" y="357" width="0.0776%" height="15" fill="rgb(244,166,37)" fg:x="7" fg:w="1"/><text x="0.7931%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.39%)</title><rect x="0.3103%" y="549" width="0.3879%" height="15" fill="rgb(246,29,44)" fg:x="4" fg:w="5"/><text x="0.5603%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="0.6206%" y="533" width="0.0776%" height="15" fill="rgb(215,56,53)" fg:x="8" fg:w="1"/><text x="0.8706%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="0.6206%" y="517" width="0.0776%" height="15" fill="rgb(217,60,2)" fg:x="8" fg:w="1"/><text x="0.8706%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="0.6206%" y="501" width="0.0776%" height="15" fill="rgb(207,26,24)" fg:x="8" fg:w="1"/><text x="0.8706%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.6206%" y="485" width="0.0776%" height="15" fill="rgb(252,210,15)" fg:x="8" fg:w="1"/><text x="0.8706%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="0.6206%" y="469" width="0.0776%" height="15" fill="rgb(253,209,26)" fg:x="8" fg:w="1"/><text x="0.8706%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="0.6206%" y="453" width="0.0776%" height="15" fill="rgb(238,170,14)" fg:x="8" fg:w="1"/><text x="0.8706%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="0.6206%" y="437" width="0.0776%" height="15" fill="rgb(216,178,15)" fg:x="8" fg:w="1"/><text x="0.8706%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="0.6206%" y="421" width="0.0776%" height="15" fill="rgb(250,197,2)" fg:x="8" fg:w="1"/><text x="0.8706%" y="431.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="0.6982%" y="549" width="0.0776%" height="15" fill="rgb(212,70,42)" fg:x="9" fg:w="1"/><text x="0.9482%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="0.6982%" y="533" width="0.0776%" height="15" fill="rgb(227,213,9)" fg:x="9" fg:w="1"/><text x="0.9482%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="0.6982%" y="517" width="0.0776%" height="15" fill="rgb(245,99,25)" fg:x="9" fg:w="1"/><text x="0.9482%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="0.6982%" y="501" width="0.0776%" height="15" fill="rgb(250,82,29)" fg:x="9" fg:w="1"/><text x="0.9482%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="0.6982%" y="485" width="0.0776%" height="15" fill="rgb(241,226,54)" fg:x="9" fg:w="1"/><text x="0.9482%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="0.6982%" y="469" width="0.0776%" height="15" fill="rgb(221,99,41)" fg:x="9" fg:w="1"/><text x="0.9482%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::hooks (1 samples, 0.08%)</title><rect x="0.7758%" y="549" width="0.0776%" height="15" fill="rgb(213,90,21)" fg:x="10" fg:w="1"/><text x="1.0258%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.39%)</title><rect x="0.8534%" y="533" width="0.3879%" height="15" fill="rgb(205,208,24)" fg:x="11" fg:w="5"/><text x="1.1034%" y="543.50"></text></g><g><title>libloading::os::unix::Library::open (5 samples, 0.39%)</title><rect x="0.8534%" y="517" width="0.3879%" height="15" fill="rgb(246,31,12)" fg:x="11" fg:w="5"/><text x="1.1034%" y="527.50"></text></g><g><title>dlopen (5 samples, 0.39%)</title><rect x="0.8534%" y="501" width="0.3879%" height="15" fill="rgb(213,154,6)" fg:x="11" fg:w="5"/><text x="1.1034%" y="511.50"></text></g><g><title>_dl_catch_error (5 samples, 0.39%)</title><rect x="0.8534%" y="485" width="0.3879%" height="15" fill="rgb(222,163,29)" fg:x="11" fg:w="5"/><text x="1.1034%" y="495.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.39%)</title><rect x="0.8534%" y="469" width="0.3879%" height="15" fill="rgb(227,201,8)" fg:x="11" fg:w="5"/><text x="1.1034%" y="479.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="0.9310%" y="453" width="0.3103%" height="15" fill="rgb(233,9,32)" fg:x="12" fg:w="4"/><text x="1.1810%" y="463.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.31%)</title><rect x="0.9310%" y="437" width="0.3103%" height="15" fill="rgb(217,54,24)" fg:x="12" fg:w="4"/><text x="1.1810%" y="447.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (13 samples, 1.01%)</title><rect x="0.3103%" y="581" width="1.0085%" height="15" fill="rgb(235,192,0)" fg:x="4" fg:w="13"/><text x="0.5603%" y="591.50"></text></g><g><title>engine::session::Session::new (13 samples, 1.01%)</title><rect x="0.3103%" y="565" width="1.0085%" height="15" fill="rgb(235,45,9)" fg:x="4" fg:w="13"/><text x="0.5603%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.47%)</title><rect x="0.8534%" y="549" width="0.4655%" height="15" fill="rgb(246,42,40)" fg:x="11" fg:w="6"/><text x="1.1034%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="1.2413%" y="533" width="0.0776%" height="15" fill="rgb(248,111,24)" fg:x="16" fg:w="1"/><text x="1.4913%" y="543.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="1.2413%" y="517" width="0.0776%" height="15" fill="rgb(249,65,22)" fg:x="16" fg:w="1"/><text x="1.4913%" y="527.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.3189%" y="565" width="0.0776%" height="15" fill="rgb(238,111,51)" fg:x="17" fg:w="1"/><text x="1.5689%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.3189%" y="549" width="0.0776%" height="15" fill="rgb(250,118,22)" fg:x="17" fg:w="1"/><text x="1.5689%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.3189%" y="533" width="0.0776%" height="15" fill="rgb(234,84,26)" fg:x="17" fg:w="1"/><text x="1.5689%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.3189%" y="517" width="0.0776%" height="15" fill="rgb(243,172,12)" fg:x="17" fg:w="1"/><text x="1.5689%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.3189%" y="501" width="0.0776%" height="15" fill="rgb(236,150,49)" fg:x="17" fg:w="1"/><text x="1.5689%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.3189%" y="485" width="0.0776%" height="15" fill="rgb(225,197,26)" fg:x="17" fg:w="1"/><text x="1.5689%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.3189%" y="469" width="0.0776%" height="15" fill="rgb(214,17,42)" fg:x="17" fg:w="1"/><text x="1.5689%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.3189%" y="453" width="0.0776%" height="15" fill="rgb(224,165,40)" fg:x="17" fg:w="1"/><text x="1.5689%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.3189%" y="437" width="0.0776%" height="15" fill="rgb(246,100,4)" fg:x="17" fg:w="1"/><text x="1.5689%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.3189%" y="421" width="0.0776%" height="15" fill="rgb(222,103,0)" fg:x="17" fg:w="1"/><text x="1.5689%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.3189%" y="405" width="0.0776%" height="15" fill="rgb(227,189,26)" fg:x="17" fg:w="1"/><text x="1.5689%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.3189%" y="389" width="0.0776%" height="15" fill="rgb(214,202,17)" fg:x="17" fg:w="1"/><text x="1.5689%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.3189%" y="373" width="0.0776%" height="15" fill="rgb(229,111,3)" fg:x="17" fg:w="1"/><text x="1.5689%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="1.4740%" y="485" width="0.1552%" height="15" fill="rgb(229,172,15)" fg:x="19" fg:w="2"/><text x="1.7240%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="1.4740%" y="469" width="0.1552%" height="15" fill="rgb(230,224,35)" fg:x="19" fg:w="2"/><text x="1.7240%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.4740%" y="453" width="0.1552%" height="15" fill="rgb(251,141,6)" fg:x="19" fg:w="2"/><text x="1.7240%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.5516%" y="437" width="0.0776%" height="15" fill="rgb(225,208,6)" fg:x="20" fg:w="1"/><text x="1.8016%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.5516%" y="421" width="0.0776%" height="15" fill="rgb(246,181,16)" fg:x="20" fg:w="1"/><text x="1.8016%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="1.5516%" y="405" width="0.0776%" height="15" fill="rgb(227,129,36)" fg:x="20" fg:w="1"/><text x="1.8016%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="1.5516%" y="389" width="0.0776%" height="15" fill="rgb(248,117,24)" fg:x="20" fg:w="1"/><text x="1.8016%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="1.5516%" y="373" width="0.0776%" height="15" fill="rgb(214,185,35)" fg:x="20" fg:w="1"/><text x="1.8016%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.6292%" y="469" width="0.0776%" height="15" fill="rgb(236,150,34)" fg:x="21" fg:w="1"/><text x="1.8792%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7067%" y="437" width="0.0776%" height="15" fill="rgb(243,228,27)" fg:x="22" fg:w="1"/><text x="1.9567%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.7843%" y="437" width="0.0776%" height="15" fill="rgb(245,77,44)" fg:x="23" fg:w="1"/><text x="2.0343%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.7843%" y="421" width="0.0776%" height="15" fill="rgb(235,214,42)" fg:x="23" fg:w="1"/><text x="2.0343%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.7843%" y="405" width="0.0776%" height="15" fill="rgb(221,74,3)" fg:x="23" fg:w="1"/><text x="2.0343%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.23%)</title><rect x="1.7067%" y="453" width="0.2327%" height="15" fill="rgb(206,121,29)" fg:x="22" fg:w="3"/><text x="1.9567%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.8619%" y="437" width="0.0776%" height="15" fill="rgb(249,131,53)" fg:x="24" fg:w="1"/><text x="2.1119%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.8619%" y="421" width="0.0776%" height="15" fill="rgb(236,170,29)" fg:x="24" fg:w="1"/><text x="2.1119%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.54%)</title><rect x="1.4740%" y="501" width="0.5431%" height="15" fill="rgb(247,96,15)" fg:x="19" fg:w="7"/><text x="1.7240%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="1.6292%" y="485" width="0.3879%" height="15" fill="rgb(211,210,7)" fg:x="21" fg:w="5"/><text x="1.8792%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="1.7067%" y="469" width="0.3103%" height="15" fill="rgb(240,88,50)" fg:x="22" fg:w="4"/><text x="1.9567%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9395%" y="453" width="0.0776%" height="15" fill="rgb(209,229,26)" fg:x="25" fg:w="1"/><text x="2.1895%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="1.9395%" y="437" width="0.0776%" height="15" fill="rgb(210,68,23)" fg:x="25" fg:w="1"/><text x="2.1895%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="1.9395%" y="421" width="0.0776%" height="15" fill="rgb(229,180,13)" fg:x="25" fg:w="1"/><text x="2.1895%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.0171%" y="501" width="0.1552%" height="15" fill="rgb(236,53,44)" fg:x="26" fg:w="2"/><text x="2.2671%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="2.0171%" y="485" width="0.1552%" height="15" fill="rgb(244,214,29)" fg:x="26" fg:w="2"/><text x="2.2671%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.0946%" y="469" width="0.0776%" height="15" fill="rgb(220,75,29)" fg:x="27" fg:w="1"/><text x="2.3446%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.1722%" y="453" width="0.0776%" height="15" fill="rgb(214,183,37)" fg:x="28" fg:w="1"/><text x="2.4222%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.2498%" y="389" width="0.0776%" height="15" fill="rgb(239,117,29)" fg:x="29" fg:w="1"/><text x="2.4998%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.2498%" y="373" width="0.0776%" height="15" fill="rgb(237,171,35)" fg:x="29" fg:w="1"/><text x="2.4998%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.2498%" y="357" width="0.0776%" height="15" fill="rgb(229,178,53)" fg:x="29" fg:w="1"/><text x="2.4998%" y="367.50"></text></g><g><title>kernel::compare::any_entity_changes (3 samples, 0.23%)</title><rect x="2.1722%" y="501" width="0.2327%" height="15" fill="rgb(210,102,19)" fg:x="28" fg:w="3"/><text x="2.4222%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.23%)</title><rect x="2.1722%" y="485" width="0.2327%" height="15" fill="rgb(235,127,22)" fg:x="28" fg:w="3"/><text x="2.4222%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="2.1722%" y="469" width="0.2327%" height="15" fill="rgb(244,31,31)" fg:x="28" fg:w="3"/><text x="2.4222%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="2.2498%" y="453" width="0.1552%" height="15" fill="rgb(231,43,21)" fg:x="29" fg:w="2"/><text x="2.4998%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="2.2498%" y="437" width="0.1552%" height="15" fill="rgb(217,131,35)" fg:x="29" fg:w="2"/><text x="2.4998%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="2.2498%" y="421" width="0.1552%" height="15" fill="rgb(221,149,4)" fg:x="29" fg:w="2"/><text x="2.4998%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="2.2498%" y="405" width="0.1552%" height="15" fill="rgb(232,170,28)" fg:x="29" fg:w="2"/><text x="2.4998%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.3274%" y="389" width="0.0776%" height="15" fill="rgb(238,56,10)" fg:x="30" fg:w="1"/><text x="2.5774%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3274%" y="373" width="0.0776%" height="15" fill="rgb(235,196,14)" fg:x="30" fg:w="1"/><text x="2.5774%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.3274%" y="357" width="0.0776%" height="15" fill="rgb(216,45,48)" fg:x="30" fg:w="1"/><text x="2.5774%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3274%" y="341" width="0.0776%" height="15" fill="rgb(238,213,17)" fg:x="30" fg:w="1"/><text x="2.5774%" y="351.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.09%)</title><rect x="1.3964%" y="565" width="1.0861%" height="15" fill="rgb(212,13,2)" fg:x="18" fg:w="14"/><text x="1.6464%" y="575.50"></text></g><g><title>engine::session::Session::save_entity_changes (14 samples, 1.09%)</title><rect x="1.3964%" y="549" width="1.0861%" height="15" fill="rgb(240,114,20)" fg:x="18" fg:w="14"/><text x="1.6464%" y="559.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (13 samples, 1.01%)</title><rect x="1.4740%" y="533" width="1.0085%" height="15" fill="rgb(228,41,40)" fg:x="19" fg:w="13"/><text x="1.7240%" y="543.50"></text></g><g><title>engine::session::Session::check_for_changes (13 samples, 1.01%)</title><rect x="1.4740%" y="517" width="1.0085%" height="15" fill="rgb(244,132,35)" fg:x="19" fg:w="13"/><text x="1.7240%" y="527.50"></text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="2.4050%" y="501" width="0.0776%" height="15" fill="rgb(253,189,4)" fg:x="31" fg:w="1"/><text x="2.6550%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4050%" y="485" width="0.0776%" height="15" fill="rgb(224,37,19)" fg:x="31" fg:w="1"/><text x="2.6550%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4050%" y="469" width="0.0776%" height="15" fill="rgb(235,223,18)" fg:x="31" fg:w="1"/><text x="2.6550%" y="479.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="2.4825%" y="565" width="0.0776%" height="15" fill="rgb(235,163,25)" fg:x="32" fg:w="1"/><text x="2.7325%" y="575.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="2.4825%" y="549" width="0.0776%" height="15" fill="rgb(217,145,28)" fg:x="32" fg:w="1"/><text x="2.7325%" y="559.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="2.4825%" y="533" width="0.0776%" height="15" fill="rgb(223,223,32)" fg:x="32" fg:w="1"/><text x="2.7325%" y="543.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="2.4825%" y="517" width="0.0776%" height="15" fill="rgb(227,189,39)" fg:x="32" fg:w="1"/><text x="2.7325%" y="527.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4825%" y="501" width="0.0776%" height="15" fill="rgb(248,10,22)" fg:x="32" fg:w="1"/><text x="2.7325%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.4825%" y="485" width="0.0776%" height="15" fill="rgb(248,46,39)" fg:x="32" fg:w="1"/><text x="2.7325%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4825%" y="469" width="0.0776%" height="15" fill="rgb(248,113,48)" fg:x="32" fg:w="1"/><text x="2.7325%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.4825%" y="453" width="0.0776%" height="15" fill="rgb(245,16,25)" fg:x="32" fg:w="1"/><text x="2.7325%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.4825%" y="437" width="0.0776%" height="15" fill="rgb(249,152,16)" fg:x="32" fg:w="1"/><text x="2.7325%" y="447.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="2.5601%" y="565" width="0.1552%" height="15" fill="rgb(250,16,1)" fg:x="33" fg:w="2"/><text x="2.8101%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="2.5601%" y="549" width="0.1552%" height="15" fill="rgb(249,138,3)" fg:x="33" fg:w="2"/><text x="2.8101%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="2.5601%" y="533" width="0.1552%" height="15" fill="rgb(227,71,41)" fg:x="33" fg:w="2"/><text x="2.8101%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="2.5601%" y="517" width="0.1552%" height="15" fill="rgb(209,184,23)" fg:x="33" fg:w="2"/><text x="2.8101%" y="527.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.6377%" y="501" width="0.0776%" height="15" fill="rgb(223,215,31)" fg:x="34" fg:w="1"/><text x="2.8877%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.6377%" y="485" width="0.0776%" height="15" fill="rgb(210,146,28)" fg:x="34" fg:w="1"/><text x="2.8877%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.6377%" y="469" width="0.0776%" height="15" fill="rgb(209,183,41)" fg:x="34" fg:w="1"/><text x="2.8877%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.6377%" y="453" width="0.0776%" height="15" fill="rgb(209,224,45)" fg:x="34" fg:w="1"/><text x="2.8877%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="2.6377%" y="437" width="0.0776%" height="15" fill="rgb(224,209,51)" fg:x="34" fg:w="1"/><text x="2.8877%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.6377%" y="421" width="0.0776%" height="15" fill="rgb(223,17,39)" fg:x="34" fg:w="1"/><text x="2.8877%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.6377%" y="405" width="0.0776%" height="15" fill="rgb(234,204,37)" fg:x="34" fg:w="1"/><text x="2.8877%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.6377%" y="389" width="0.0776%" height="15" fill="rgb(236,120,5)" fg:x="34" fg:w="1"/><text x="2.8877%" y="399.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="2.6377%" y="373" width="0.0776%" height="15" fill="rgb(248,97,27)" fg:x="34" fg:w="1"/><text x="2.8877%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="2.6377%" y="357" width="0.0776%" height="15" fill="rgb(240,66,17)" fg:x="34" fg:w="1"/><text x="2.8877%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.6377%" y="341" width="0.0776%" height="15" fill="rgb(210,79,3)" fg:x="34" fg:w="1"/><text x="2.8877%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.6377%" y="325" width="0.0776%" height="15" fill="rgb(214,176,27)" fg:x="34" fg:w="1"/><text x="2.8877%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.6377%" y="309" width="0.0776%" height="15" fill="rgb(235,185,3)" fg:x="34" fg:w="1"/><text x="2.8877%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.6377%" y="293" width="0.0776%" height="15" fill="rgb(227,24,12)" fg:x="34" fg:w="1"/><text x="2.8877%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="2.6377%" y="277" width="0.0776%" height="15" fill="rgb(252,169,48)" fg:x="34" fg:w="1"/><text x="2.8877%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.6377%" y="261" width="0.0776%" height="15" fill="rgb(212,65,1)" fg:x="34" fg:w="1"/><text x="2.8877%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.6377%" y="245" width="0.0776%" height="15" fill="rgb(242,39,24)" fg:x="34" fg:w="1"/><text x="2.8877%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.6377%" y="229" width="0.0776%" height="15" fill="rgb(249,32,23)" fg:x="34" fg:w="1"/><text x="2.8877%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.6377%" y="213" width="0.0776%" height="15" fill="rgb(251,195,23)" fg:x="34" fg:w="1"/><text x="2.8877%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.6377%" y="197" width="0.0776%" height="15" fill="rgb(236,174,8)" fg:x="34" fg:w="1"/><text x="2.8877%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.6377%" y="181" width="0.0776%" height="15" fill="rgb(220,197,8)" fg:x="34" fg:w="1"/><text x="2.8877%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="2.6377%" y="165" width="0.0776%" height="15" fill="rgb(240,108,37)" fg:x="34" fg:w="1"/><text x="2.8877%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.6377%" y="149" width="0.0776%" height="15" fill="rgb(232,176,24)" fg:x="34" fg:w="1"/><text x="2.8877%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="2.6377%" y="133" width="0.0776%" height="15" fill="rgb(243,35,29)" fg:x="34" fg:w="1"/><text x="2.8877%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="2.6377%" y="117" width="0.0776%" height="15" fill="rgb(210,37,18)" fg:x="34" fg:w="1"/><text x="2.8877%" y="127.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="2.6377%" y="101" width="0.0776%" height="15" fill="rgb(224,184,40)" fg:x="34" fg:w="1"/><text x="2.8877%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.6377%" y="85" width="0.0776%" height="15" fill="rgb(236,39,29)" fg:x="34" fg:w="1"/><text x="2.8877%" y="95.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="2.7153%" y="469" width="0.0776%" height="15" fill="rgb(232,48,39)" fg:x="35" fg:w="1"/><text x="2.9653%" y="479.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="2.7153%" y="453" width="0.0776%" height="15" fill="rgb(236,34,42)" fg:x="35" fg:w="1"/><text x="2.9653%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.7153%" y="437" width="0.0776%" height="15" fill="rgb(243,106,37)" fg:x="35" fg:w="1"/><text x="2.9653%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.7153%" y="421" width="0.0776%" height="15" fill="rgb(218,96,6)" fg:x="35" fg:w="1"/><text x="2.9653%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.7153%" y="405" width="0.0776%" height="15" fill="rgb(235,130,12)" fg:x="35" fg:w="1"/><text x="2.9653%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.7153%" y="389" width="0.0776%" height="15" fill="rgb(231,95,0)" fg:x="35" fg:w="1"/><text x="2.9653%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.7153%" y="373" width="0.0776%" height="15" fill="rgb(228,12,23)" fg:x="35" fg:w="1"/><text x="2.9653%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.7153%" y="357" width="0.0776%" height="15" fill="rgb(216,12,1)" fg:x="35" fg:w="1"/><text x="2.9653%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.7153%" y="341" width="0.0776%" height="15" fill="rgb(219,59,3)" fg:x="35" fg:w="1"/><text x="2.9653%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.7153%" y="325" width="0.0776%" height="15" fill="rgb(215,208,46)" fg:x="35" fg:w="1"/><text x="2.9653%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.7153%" y="309" width="0.0776%" height="15" fill="rgb(254,224,29)" fg:x="35" fg:w="1"/><text x="2.9653%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.7153%" y="293" width="0.0776%" height="15" fill="rgb(232,14,29)" fg:x="35" fg:w="1"/><text x="2.9653%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.7153%" y="277" width="0.0776%" height="15" fill="rgb(208,45,52)" fg:x="35" fg:w="1"/><text x="2.9653%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.7153%" y="261" width="0.0776%" height="15" fill="rgb(234,191,28)" fg:x="35" fg:w="1"/><text x="2.9653%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="2.7153%" y="549" width="0.1552%" height="15" fill="rgb(244,67,43)" fg:x="35" fg:w="2"/><text x="2.9653%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="2.7153%" y="533" width="0.1552%" height="15" fill="rgb(236,189,24)" fg:x="35" fg:w="2"/><text x="2.9653%" y="543.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="2.7153%" y="517" width="0.1552%" height="15" fill="rgb(239,214,33)" fg:x="35" fg:w="2"/><text x="2.9653%" y="527.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="2.7153%" y="501" width="0.1552%" height="15" fill="rgb(226,176,41)" fg:x="35" fg:w="2"/><text x="2.9653%" y="511.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="2.7153%" y="485" width="0.1552%" height="15" fill="rgb(248,47,8)" fg:x="35" fg:w="2"/><text x="2.9653%" y="495.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="2.7929%" y="469" width="0.0776%" height="15" fill="rgb(218,81,44)" fg:x="36" fg:w="1"/><text x="3.0429%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="2.8704%" y="485" width="0.0776%" height="15" fill="rgb(213,98,6)" fg:x="37" fg:w="1"/><text x="3.1204%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="2.8704%" y="517" width="0.1552%" height="15" fill="rgb(222,85,22)" fg:x="37" fg:w="2"/><text x="3.1204%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="2.8704%" y="501" width="0.1552%" height="15" fill="rgb(239,46,39)" fg:x="37" fg:w="2"/><text x="3.1204%" y="511.50"></text></g><g><title>engine::session::Session::save_entity (1 samples, 0.08%)</title><rect x="2.9480%" y="485" width="0.0776%" height="15" fill="rgb(237,12,29)" fg:x="38" fg:w="1"/><text x="3.1980%" y="495.50"></text></g><g><title>engine::identifiers::model::set_gid (1 samples, 0.08%)</title><rect x="3.0256%" y="517" width="0.0776%" height="15" fill="rgb(214,77,8)" fg:x="39" fg:w="1"/><text x="3.2756%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.1032%" y="469" width="0.0776%" height="15" fill="rgb(217,168,37)" fg:x="40" fg:w="1"/><text x="3.3532%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.1032%" y="453" width="0.0776%" height="15" fill="rgb(221,217,23)" fg:x="40" fg:w="1"/><text x="3.3532%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.1032%" y="437" width="0.0776%" height="15" fill="rgb(243,229,36)" fg:x="40" fg:w="1"/><text x="3.3532%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.1032%" y="421" width="0.0776%" height="15" fill="rgb(251,163,40)" fg:x="40" fg:w="1"/><text x="3.3532%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.1032%" y="405" width="0.0776%" height="15" fill="rgb(237,222,12)" fg:x="40" fg:w="1"/><text x="3.3532%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.1032%" y="389" width="0.0776%" height="15" fill="rgb(248,132,6)" fg:x="40" fg:w="1"/><text x="3.3532%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.1032%" y="373" width="0.0776%" height="15" fill="rgb(227,167,50)" fg:x="40" fg:w="1"/><text x="3.3532%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.1808%" y="453" width="0.1552%" height="15" fill="rgb(242,84,37)" fg:x="41" fg:w="2"/><text x="3.4308%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.1808%" y="437" width="0.1552%" height="15" fill="rgb(212,4,50)" fg:x="41" fg:w="2"/><text x="3.4308%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.2583%" y="421" width="0.0776%" height="15" fill="rgb(230,228,32)" fg:x="42" fg:w="1"/><text x="3.5083%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.2583%" y="405" width="0.0776%" height="15" fill="rgb(248,217,23)" fg:x="42" fg:w="1"/><text x="3.5083%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.3359%" y="437" width="0.0776%" height="15" fill="rgb(238,197,32)" fg:x="43" fg:w="1"/><text x="3.5859%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3359%" y="421" width="0.0776%" height="15" fill="rgb(236,106,1)" fg:x="43" fg:w="1"/><text x="3.5859%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3359%" y="405" width="0.0776%" height="15" fill="rgb(219,228,13)" fg:x="43" fg:w="1"/><text x="3.5859%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.3359%" y="389" width="0.0776%" height="15" fill="rgb(238,30,35)" fg:x="43" fg:w="1"/><text x="3.5859%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.4135%" y="421" width="0.0776%" height="15" fill="rgb(236,70,23)" fg:x="44" fg:w="1"/><text x="3.6635%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.4135%" y="437" width="0.1552%" height="15" fill="rgb(249,104,48)" fg:x="44" fg:w="2"/><text x="3.6635%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.4911%" y="421" width="0.0776%" height="15" fill="rgb(254,117,50)" fg:x="45" fg:w="1"/><text x="3.7411%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.4911%" y="405" width="0.0776%" height="15" fill="rgb(223,152,4)" fg:x="45" fg:w="1"/><text x="3.7411%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.4911%" y="389" width="0.0776%" height="15" fill="rgb(245,6,2)" fg:x="45" fg:w="1"/><text x="3.7411%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.31%)</title><rect x="3.3359%" y="453" width="0.3103%" height="15" fill="rgb(249,150,24)" fg:x="43" fg:w="4"/><text x="3.5859%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.5687%" y="437" width="0.0776%" height="15" fill="rgb(228,185,42)" fg:x="46" fg:w="1"/><text x="3.8187%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.5687%" y="421" width="0.0776%" height="15" fill="rgb(226,39,33)" fg:x="46" fg:w="1"/><text x="3.8187%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.62%)</title><rect x="3.1032%" y="485" width="0.6206%" height="15" fill="rgb(221,166,19)" fg:x="40" fg:w="8"/><text x="3.3532%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.54%)</title><rect x="3.1808%" y="469" width="0.5431%" height="15" fill="rgb(209,109,2)" fg:x="41" fg:w="7"/><text x="3.4308%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6462%" y="453" width="0.0776%" height="15" fill="rgb(252,216,26)" fg:x="47" fg:w="1"/><text x="3.8962%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6462%" y="437" width="0.0776%" height="15" fill="rgb(227,173,36)" fg:x="47" fg:w="1"/><text x="3.8962%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.6462%" y="421" width="0.0776%" height="15" fill="rgb(209,90,7)" fg:x="47" fg:w="1"/><text x="3.8962%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.6462%" y="405" width="0.0776%" height="15" fill="rgb(250,194,11)" fg:x="47" fg:w="1"/><text x="3.8962%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.6462%" y="389" width="0.0776%" height="15" fill="rgb(220,72,50)" fg:x="47" fg:w="1"/><text x="3.8962%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.6462%" y="373" width="0.0776%" height="15" fill="rgb(222,106,48)" fg:x="47" fg:w="1"/><text x="3.8962%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.7238%" y="469" width="0.0776%" height="15" fill="rgb(216,220,45)" fg:x="48" fg:w="1"/><text x="3.9738%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8790%" y="437" width="0.0776%" height="15" fill="rgb(234,112,18)" fg:x="50" fg:w="1"/><text x="4.1290%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9566%" y="437" width="0.0776%" height="15" fill="rgb(206,179,9)" fg:x="51" fg:w="1"/><text x="4.2066%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.9566%" y="421" width="0.0776%" height="15" fill="rgb(215,115,40)" fg:x="51" fg:w="1"/><text x="4.2066%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.9566%" y="405" width="0.0776%" height="15" fill="rgb(222,69,34)" fg:x="51" fg:w="1"/><text x="4.2066%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="3.9566%" y="389" width="0.0776%" height="15" fill="rgb(209,161,10)" fg:x="51" fg:w="1"/><text x="4.2066%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="4.0341%" y="437" width="0.0776%" height="15" fill="rgb(217,6,38)" fg:x="52" fg:w="1"/><text x="4.2841%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.0341%" y="421" width="0.0776%" height="15" fill="rgb(229,229,48)" fg:x="52" fg:w="1"/><text x="4.2841%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="4.0341%" y="405" width="0.0776%" height="15" fill="rgb(225,21,28)" fg:x="52" fg:w="1"/><text x="4.2841%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="4.0341%" y="389" width="0.0776%" height="15" fill="rgb(206,33,13)" fg:x="52" fg:w="1"/><text x="4.2841%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="4.0341%" y="373" width="0.0776%" height="15" fill="rgb(242,178,17)" fg:x="52" fg:w="1"/><text x="4.2841%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="4.0341%" y="357" width="0.0776%" height="15" fill="rgb(220,162,5)" fg:x="52" fg:w="1"/><text x="4.2841%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="4.1117%" y="405" width="0.0776%" height="15" fill="rgb(210,33,43)" fg:x="53" fg:w="1"/><text x="4.3617%" y="415.50"></text></g><g><title>engine::session::Session::flush (18 samples, 1.40%)</title><rect x="2.8704%" y="549" width="1.3964%" height="15" fill="rgb(216,116,54)" fg:x="37" fg:w="18"/><text x="3.1204%" y="559.50"></text></g><g><title>engine::session::Session::save_entity_changes (18 samples, 1.40%)</title><rect x="2.8704%" y="533" width="1.3964%" height="15" fill="rgb(249,92,24)" fg:x="37" fg:w="18"/><text x="3.1204%" y="543.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (15 samples, 1.16%)</title><rect x="3.1032%" y="517" width="1.1637%" height="15" fill="rgb(231,189,14)" fg:x="40" fg:w="15"/><text x="3.3532%" y="527.50"></text></g><g><title>engine::session::Session::check_for_changes (15 samples, 1.16%)</title><rect x="3.1032%" y="501" width="1.1637%" height="15" fill="rgb(230,8,41)" fg:x="40" fg:w="15"/><text x="3.3532%" y="511.50"></text></g><g><title>kernel::compare::any_entity_changes (7 samples, 0.54%)</title><rect x="3.7238%" y="485" width="0.5431%" height="15" fill="rgb(249,7,27)" fg:x="48" fg:w="7"/><text x="3.9738%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (6 samples, 0.47%)</title><rect x="3.8014%" y="469" width="0.4655%" height="15" fill="rgb(232,86,5)" fg:x="49" fg:w="6"/><text x="4.0514%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.47%)</title><rect x="3.8014%" y="453" width="0.4655%" height="15" fill="rgb(224,175,18)" fg:x="49" fg:w="6"/><text x="4.0514%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="4.1117%" y="437" width="0.1552%" height="15" fill="rgb(220,129,12)" fg:x="53" fg:w="2"/><text x="4.3617%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="4.1117%" y="421" width="0.1552%" height="15" fill="rgb(210,19,36)" fg:x="53" fg:w="2"/><text x="4.3617%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.1893%" y="405" width="0.0776%" height="15" fill="rgb(219,96,14)" fg:x="54" fg:w="1"/><text x="4.4393%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.2669%" y="533" width="0.1552%" height="15" fill="rgb(249,106,1)" fg:x="55" fg:w="2"/><text x="4.5169%" y="543.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="4.2669%" y="517" width="0.1552%" height="15" fill="rgb(249,155,20)" fg:x="55" fg:w="2"/><text x="4.5169%" y="527.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="4.2669%" y="501" width="0.1552%" height="15" fill="rgb(244,168,9)" fg:x="55" fg:w="2"/><text x="4.5169%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.2669%" y="485" width="0.1552%" height="15" fill="rgb(216,23,50)" fg:x="55" fg:w="2"/><text x="4.5169%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.2669%" y="469" width="0.1552%" height="15" fill="rgb(224,219,20)" fg:x="55" fg:w="2"/><text x="4.5169%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="4.2669%" y="453" width="0.1552%" height="15" fill="rgb(222,156,15)" fg:x="55" fg:w="2"/><text x="4.5169%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.2669%" y="437" width="0.1552%" height="15" fill="rgb(231,97,17)" fg:x="55" fg:w="2"/><text x="4.5169%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="4.4220%" y="517" width="0.0776%" height="15" fill="rgb(218,70,48)" fg:x="57" fg:w="1"/><text x="4.6720%" y="527.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4220%" y="501" width="0.0776%" height="15" fill="rgb(212,196,52)" fg:x="57" fg:w="1"/><text x="4.6720%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4220%" y="485" width="0.0776%" height="15" fill="rgb(243,203,18)" fg:x="57" fg:w="1"/><text x="4.6720%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4220%" y="469" width="0.0776%" height="15" fill="rgb(252,125,41)" fg:x="57" fg:w="1"/><text x="4.6720%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.4220%" y="453" width="0.0776%" height="15" fill="rgb(223,180,33)" fg:x="57" fg:w="1"/><text x="4.6720%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.4220%" y="437" width="0.0776%" height="15" fill="rgb(254,159,46)" fg:x="57" fg:w="1"/><text x="4.6720%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.4220%" y="421" width="0.0776%" height="15" fill="rgb(254,38,10)" fg:x="57" fg:w="1"/><text x="4.6720%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4220%" y="405" width="0.0776%" height="15" fill="rgb(208,217,32)" fg:x="57" fg:w="1"/><text x="4.6720%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4220%" y="389" width="0.0776%" height="15" fill="rgb(221,120,13)" fg:x="57" fg:w="1"/><text x="4.6720%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.4220%" y="373" width="0.0776%" height="15" fill="rgb(246,54,52)" fg:x="57" fg:w="1"/><text x="4.6720%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.4220%" y="357" width="0.0776%" height="15" fill="rgb(242,34,25)" fg:x="57" fg:w="1"/><text x="4.6720%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.4220%" y="341" width="0.0776%" height="15" fill="rgb(247,209,9)" fg:x="57" fg:w="1"/><text x="4.6720%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.4220%" y="325" width="0.0776%" height="15" fill="rgb(228,71,26)" fg:x="57" fg:w="1"/><text x="4.6720%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4220%" y="309" width="0.0776%" height="15" fill="rgb(222,145,49)" fg:x="57" fg:w="1"/><text x="4.6720%" y="319.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.31%)</title><rect x="4.2669%" y="549" width="0.3103%" height="15" fill="rgb(218,121,17)" fg:x="55" fg:w="4"/><text x="4.5169%" y="559.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="4.4220%" y="533" width="0.1552%" height="15" fill="rgb(244,50,7)" fg:x="57" fg:w="2"/><text x="4.6720%" y="543.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="4.4996%" y="517" width="0.0776%" height="15" fill="rgb(246,229,37)" fg:x="58" fg:w="1"/><text x="4.7496%" y="527.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="4.4996%" y="501" width="0.0776%" height="15" fill="rgb(225,18,5)" fg:x="58" fg:w="1"/><text x="4.7496%" y="511.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4996%" y="485" width="0.0776%" height="15" fill="rgb(213,204,8)" fg:x="58" fg:w="1"/><text x="4.7496%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.4996%" y="469" width="0.0776%" height="15" fill="rgb(238,103,6)" fg:x="58" fg:w="1"/><text x="4.7496%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="4.4996%" y="453" width="0.0776%" height="15" fill="rgb(222,25,35)" fg:x="58" fg:w="1"/><text x="4.7496%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.4996%" y="437" width="0.0776%" height="15" fill="rgb(213,203,35)" fg:x="58" fg:w="1"/><text x="4.7496%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.4996%" y="421" width="0.0776%" height="15" fill="rgb(221,79,53)" fg:x="58" fg:w="1"/><text x="4.7496%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.4996%" y="405" width="0.0776%" height="15" fill="rgb(243,200,35)" fg:x="58" fg:w="1"/><text x="4.7496%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4996%" y="389" width="0.0776%" height="15" fill="rgb(248,60,25)" fg:x="58" fg:w="1"/><text x="4.7496%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::moving::model::Occupying&gt;&gt; (1 samples, 0.08%)</title><rect x="4.5772%" y="517" width="0.0776%" height="15" fill="rgb(227,53,46)" fg:x="59" fg:w="1"/><text x="4.8272%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="4.6548%" y="485" width="0.0776%" height="15" fill="rgb(216,120,32)" fg:x="60" fg:w="1"/><text x="4.9048%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.6548%" y="469" width="0.0776%" height="15" fill="rgb(220,134,1)" fg:x="60" fg:w="1"/><text x="4.9048%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.6548%" y="453" width="0.0776%" height="15" fill="rgb(237,168,5)" fg:x="60" fg:w="1"/><text x="4.9048%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="4.6548%" y="437" width="0.0776%" height="15" fill="rgb(231,100,33)" fg:x="60" fg:w="1"/><text x="4.9048%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6548%" y="421" width="0.0776%" height="15" fill="rgb(236,177,47)" fg:x="60" fg:w="1"/><text x="4.9048%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (27 samples, 2.09%)</title><rect x="2.7153%" y="565" width="2.0946%" height="15" fill="rgb(235,7,49)" fg:x="35" fg:w="27"/><text x="2.9653%" y="575.50">p..</text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.23%)</title><rect x="4.5772%" y="549" width="0.2327%" height="15" fill="rgb(232,119,22)" fg:x="59" fg:w="3"/><text x="4.8272%" y="559.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.23%)</title><rect x="4.5772%" y="533" width="0.2327%" height="15" fill="rgb(254,73,53)" fg:x="59" fg:w="3"/><text x="4.8272%" y="543.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="4.6548%" y="517" width="0.1552%" height="15" fill="rgb(251,35,20)" fg:x="60" fg:w="2"/><text x="4.9048%" y="527.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="4.6548%" y="501" width="0.1552%" height="15" fill="rgb(241,119,20)" fg:x="60" fg:w="2"/><text x="4.9048%" y="511.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7324%" y="485" width="0.0776%" height="15" fill="rgb(207,102,14)" fg:x="61" fg:w="1"/><text x="4.9824%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.7324%" y="469" width="0.0776%" height="15" fill="rgb(248,201,50)" fg:x="61" fg:w="1"/><text x="4.9824%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="4.7324%" y="453" width="0.0776%" height="15" fill="rgb(222,185,44)" fg:x="61" fg:w="1"/><text x="4.9824%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.7324%" y="437" width="0.0776%" height="15" fill="rgb(218,107,18)" fg:x="61" fg:w="1"/><text x="4.9824%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (46 samples, 3.57%)</title><rect x="1.3189%" y="581" width="3.5687%" height="15" fill="rgb(237,177,39)" fg:x="17" fg:w="46"/><text x="1.5689%" y="591.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="4.8099%" y="565" width="0.0776%" height="15" fill="rgb(246,69,6)" fg:x="62" fg:w="1"/><text x="5.0599%" y="575.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="4.8099%" y="549" width="0.0776%" height="15" fill="rgb(234,208,37)" fg:x="62" fg:w="1"/><text x="5.0599%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.8099%" y="533" width="0.0776%" height="15" fill="rgb(225,4,6)" fg:x="62" fg:w="1"/><text x="5.0599%" y="543.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.8099%" y="517" width="0.0776%" height="15" fill="rgb(233,45,0)" fg:x="62" fg:w="1"/><text x="5.0599%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8099%" y="501" width="0.0776%" height="15" fill="rgb(226,136,5)" fg:x="62" fg:w="1"/><text x="5.0599%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8099%" y="485" width="0.0776%" height="15" fill="rgb(211,91,47)" fg:x="62" fg:w="1"/><text x="5.0599%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.8099%" y="469" width="0.0776%" height="15" fill="rgb(242,88,51)" fg:x="62" fg:w="1"/><text x="5.0599%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.8099%" y="453" width="0.0776%" height="15" fill="rgb(230,91,28)" fg:x="62" fg:w="1"/><text x="5.0599%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.8099%" y="437" width="0.0776%" height="15" fill="rgb(254,186,29)" fg:x="62" fg:w="1"/><text x="5.0599%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.8099%" y="421" width="0.0776%" height="15" fill="rgb(238,6,4)" fg:x="62" fg:w="1"/><text x="5.0599%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8099%" y="405" width="0.0776%" height="15" fill="rgb(221,151,16)" fg:x="62" fg:w="1"/><text x="5.0599%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.8099%" y="389" width="0.0776%" height="15" fill="rgb(251,143,52)" fg:x="62" fg:w="1"/><text x="5.0599%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.8099%" y="373" width="0.0776%" height="15" fill="rgb(206,90,15)" fg:x="62" fg:w="1"/><text x="5.0599%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.8099%" y="357" width="0.0776%" height="15" fill="rgb(218,35,8)" fg:x="62" fg:w="1"/><text x="5.0599%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.8099%" y="341" width="0.0776%" height="15" fill="rgb(239,215,6)" fg:x="62" fg:w="1"/><text x="5.0599%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.8099%" y="325" width="0.0776%" height="15" fill="rgb(245,116,39)" fg:x="62" fg:w="1"/><text x="5.0599%" y="335.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="4.8875%" y="549" width="0.1552%" height="15" fill="rgb(242,65,28)" fg:x="63" fg:w="2"/><text x="5.1375%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9651%" y="533" width="0.0776%" height="15" fill="rgb(252,132,53)" fg:x="64" fg:w="1"/><text x="5.2151%" y="543.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="5.0427%" y="549" width="0.0776%" height="15" fill="rgb(224,159,50)" fg:x="65" fg:w="1"/><text x="5.2927%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="5.0427%" y="533" width="0.0776%" height="15" fill="rgb(224,93,4)" fg:x="65" fg:w="1"/><text x="5.2927%" y="543.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="5.0427%" y="517" width="0.0776%" height="15" fill="rgb(208,81,34)" fg:x="65" fg:w="1"/><text x="5.2927%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.0427%" y="501" width="0.0776%" height="15" fill="rgb(233,92,54)" fg:x="65" fg:w="1"/><text x="5.2927%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="5.0427%" y="485" width="0.0776%" height="15" fill="rgb(237,21,14)" fg:x="65" fg:w="1"/><text x="5.2927%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="5.0427%" y="469" width="0.0776%" height="15" fill="rgb(249,128,51)" fg:x="65" fg:w="1"/><text x="5.2927%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.1978%" y="485" width="0.0776%" height="15" fill="rgb(223,129,24)" fg:x="67" fg:w="1"/><text x="5.4478%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.2754%" y="485" width="0.1552%" height="15" fill="rgb(231,168,25)" fg:x="68" fg:w="2"/><text x="5.5254%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3530%" y="469" width="0.0776%" height="15" fill="rgb(224,39,20)" fg:x="69" fg:w="1"/><text x="5.6030%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3530%" y="453" width="0.0776%" height="15" fill="rgb(225,152,53)" fg:x="69" fg:w="1"/><text x="5.6030%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.3530%" y="437" width="0.0776%" height="15" fill="rgb(252,17,24)" fg:x="69" fg:w="1"/><text x="5.6030%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3530%" y="421" width="0.0776%" height="15" fill="rgb(250,114,30)" fg:x="69" fg:w="1"/><text x="5.6030%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3530%" y="405" width="0.0776%" height="15" fill="rgb(229,5,4)" fg:x="69" fg:w="1"/><text x="5.6030%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3530%" y="389" width="0.0776%" height="15" fill="rgb(225,176,49)" fg:x="69" fg:w="1"/><text x="5.6030%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.39%)</title><rect x="5.1202%" y="517" width="0.3879%" height="15" fill="rgb(224,221,49)" fg:x="66" fg:w="5"/><text x="5.3702%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.39%)</title><rect x="5.1202%" y="501" width="0.3879%" height="15" fill="rgb(253,169,27)" fg:x="66" fg:w="5"/><text x="5.3702%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.4306%" y="485" width="0.0776%" height="15" fill="rgb(211,206,16)" fg:x="70" fg:w="1"/><text x="5.6806%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.4306%" y="469" width="0.0776%" height="15" fill="rgb(244,87,35)" fg:x="70" fg:w="1"/><text x="5.6806%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.4306%" y="453" width="0.0776%" height="15" fill="rgb(246,28,10)" fg:x="70" fg:w="1"/><text x="5.6806%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.5857%" y="485" width="0.0776%" height="15" fill="rgb(229,12,44)" fg:x="72" fg:w="1"/><text x="5.8357%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.6633%" y="469" width="0.0776%" height="15" fill="rgb(210,145,37)" fg:x="73" fg:w="1"/><text x="5.9133%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="5.5081%" y="517" width="0.3103%" height="15" fill="rgb(227,112,52)" fg:x="71" fg:w="4"/><text x="5.7581%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.23%)</title><rect x="5.5857%" y="501" width="0.2327%" height="15" fill="rgb(238,155,34)" fg:x="72" fg:w="3"/><text x="5.8357%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.6633%" y="485" width="0.1552%" height="15" fill="rgb(239,226,36)" fg:x="73" fg:w="2"/><text x="5.9133%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.7409%" y="469" width="0.0776%" height="15" fill="rgb(230,16,23)" fg:x="74" fg:w="1"/><text x="5.9909%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.7409%" y="453" width="0.0776%" height="15" fill="rgb(236,171,36)" fg:x="74" fg:w="1"/><text x="5.9909%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.7409%" y="437" width="0.0776%" height="15" fill="rgb(221,22,14)" fg:x="74" fg:w="1"/><text x="5.9909%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.7409%" y="421" width="0.0776%" height="15" fill="rgb(242,43,11)" fg:x="74" fg:w="1"/><text x="5.9909%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.7409%" y="405" width="0.0776%" height="15" fill="rgb(232,69,23)" fg:x="74" fg:w="1"/><text x="5.9909%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.8185%" y="469" width="0.0776%" height="15" fill="rgb(216,180,54)" fg:x="75" fg:w="1"/><text x="6.0685%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8960%" y="437" width="0.0776%" height="15" fill="rgb(216,5,24)" fg:x="76" fg:w="1"/><text x="6.1460%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9736%" y="421" width="0.0776%" height="15" fill="rgb(225,89,9)" fg:x="77" fg:w="1"/><text x="6.2236%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.31%)</title><rect x="5.8185%" y="501" width="0.3103%" height="15" fill="rgb(243,75,33)" fg:x="75" fg:w="4"/><text x="6.0685%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.31%)</title><rect x="5.8185%" y="485" width="0.3103%" height="15" fill="rgb(247,141,45)" fg:x="75" fg:w="4"/><text x="6.0685%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="5.8960%" y="469" width="0.2327%" height="15" fill="rgb(232,177,36)" fg:x="76" fg:w="3"/><text x="6.1460%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.23%)</title><rect x="5.8960%" y="453" width="0.2327%" height="15" fill="rgb(219,125,36)" fg:x="76" fg:w="3"/><text x="6.1460%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="5.9736%" y="437" width="0.1552%" height="15" fill="rgb(227,94,9)" fg:x="77" fg:w="2"/><text x="6.2236%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.0512%" y="421" width="0.0776%" height="15" fill="rgb(240,34,52)" fg:x="78" fg:w="1"/><text x="6.3012%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2839%" y="469" width="0.0776%" height="15" fill="rgb(216,45,12)" fg:x="81" fg:w="1"/><text x="6.5339%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.2839%" y="453" width="0.0776%" height="15" fill="rgb(246,21,19)" fg:x="81" fg:w="1"/><text x="6.5339%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3615%" y="469" width="0.0776%" height="15" fill="rgb(213,98,42)" fg:x="82" fg:w="1"/><text x="6.6115%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.3615%" y="453" width="0.0776%" height="15" fill="rgb(250,136,47)" fg:x="82" fg:w="1"/><text x="6.6115%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3615%" y="437" width="0.0776%" height="15" fill="rgb(251,124,27)" fg:x="82" fg:w="1"/><text x="6.6115%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5167%" y="421" width="0.0776%" height="15" fill="rgb(229,180,14)" fg:x="84" fg:w="1"/><text x="6.7667%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5167%" y="405" width="0.0776%" height="15" fill="rgb(245,216,25)" fg:x="84" fg:w="1"/><text x="6.7667%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5167%" y="389" width="0.0776%" height="15" fill="rgb(251,43,5)" fg:x="84" fg:w="1"/><text x="6.7667%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.5943%" y="405" width="0.0776%" height="15" fill="rgb(250,128,24)" fg:x="85" fg:w="1"/><text x="6.8443%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5943%" y="389" width="0.0776%" height="15" fill="rgb(217,117,27)" fg:x="85" fg:w="1"/><text x="6.8443%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5943%" y="373" width="0.0776%" height="15" fill="rgb(245,147,4)" fg:x="85" fg:w="1"/><text x="6.8443%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.31%)</title><rect x="6.4391%" y="469" width="0.3103%" height="15" fill="rgb(242,201,35)" fg:x="83" fg:w="4"/><text x="6.6891%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.31%)</title><rect x="6.4391%" y="453" width="0.3103%" height="15" fill="rgb(218,181,1)" fg:x="83" fg:w="4"/><text x="6.6891%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.23%)</title><rect x="6.5167%" y="437" width="0.2327%" height="15" fill="rgb(222,6,29)" fg:x="84" fg:w="3"/><text x="6.7667%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="6.5943%" y="421" width="0.1552%" height="15" fill="rgb(208,186,3)" fg:x="85" fg:w="2"/><text x="6.8443%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.6718%" y="405" width="0.0776%" height="15" fill="rgb(216,36,26)" fg:x="86" fg:w="1"/><text x="6.9218%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.6718%" y="389" width="0.0776%" height="15" fill="rgb(248,201,23)" fg:x="86" fg:w="1"/><text x="6.9218%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.8270%" y="421" width="0.0776%" height="15" fill="rgb(251,170,31)" fg:x="88" fg:w="1"/><text x="7.0770%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (11 samples, 0.85%)</title><rect x="6.1288%" y="501" width="0.8534%" height="15" fill="rgb(207,110,25)" fg:x="79" fg:w="11"/><text x="6.3788%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.78%)</title><rect x="6.2064%" y="485" width="0.7758%" height="15" fill="rgb(250,54,15)" fg:x="80" fg:w="10"/><text x="6.4564%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.23%)</title><rect x="6.7494%" y="469" width="0.2327%" height="15" fill="rgb(227,68,33)" fg:x="87" fg:w="3"/><text x="6.9994%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.23%)</title><rect x="6.7494%" y="453" width="0.2327%" height="15" fill="rgb(238,34,41)" fg:x="87" fg:w="3"/><text x="6.9994%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.8270%" y="437" width="0.1552%" height="15" fill="rgb(220,11,15)" fg:x="88" fg:w="2"/><text x="7.0770%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.9046%" y="421" width="0.0776%" height="15" fill="rgb(246,111,35)" fg:x="89" fg:w="1"/><text x="7.1546%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9046%" y="405" width="0.0776%" height="15" fill="rgb(209,88,53)" fg:x="89" fg:w="1"/><text x="7.1546%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.9046%" y="389" width="0.0776%" height="15" fill="rgb(231,185,47)" fg:x="89" fg:w="1"/><text x="7.1546%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.9046%" y="373" width="0.0776%" height="15" fill="rgb(233,154,1)" fg:x="89" fg:w="1"/><text x="7.1546%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9046%" y="357" width="0.0776%" height="15" fill="rgb(225,15,46)" fg:x="89" fg:w="1"/><text x="7.1546%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="7.0597%" y="357" width="0.0776%" height="15" fill="rgb(211,135,41)" fg:x="91" fg:w="1"/><text x="7.3097%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="7.0597%" y="341" width="0.0776%" height="15" fill="rgb(208,54,0)" fg:x="91" fg:w="1"/><text x="7.3097%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.31%)</title><rect x="7.0597%" y="373" width="0.3103%" height="15" fill="rgb(244,136,14)" fg:x="91" fg:w="4"/><text x="7.3097%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="7.1373%" y="357" width="0.2327%" height="15" fill="rgb(241,56,14)" fg:x="92" fg:w="3"/><text x="7.3873%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.2149%" y="341" width="0.1552%" height="15" fill="rgb(205,80,24)" fg:x="93" fg:w="2"/><text x="7.4649%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2925%" y="325" width="0.0776%" height="15" fill="rgb(220,57,4)" fg:x="94" fg:w="1"/><text x="7.5425%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2925%" y="309" width="0.0776%" height="15" fill="rgb(226,193,50)" fg:x="94" fg:w="1"/><text x="7.5425%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="6.9822%" y="405" width="0.4655%" height="15" fill="rgb(231,168,22)" fg:x="90" fg:w="6"/><text x="7.2322%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="6.9822%" y="389" width="0.4655%" height="15" fill="rgb(254,215,14)" fg:x="90" fg:w="6"/><text x="7.2322%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3701%" y="373" width="0.0776%" height="15" fill="rgb(211,115,16)" fg:x="95" fg:w="1"/><text x="7.6201%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.3701%" y="357" width="0.0776%" height="15" fill="rgb(236,210,16)" fg:x="95" fg:w="1"/><text x="7.6201%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="7.4476%" y="405" width="0.1552%" height="15" fill="rgb(221,94,12)" fg:x="96" fg:w="2"/><text x="7.6976%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="7.5252%" y="389" width="0.0776%" height="15" fill="rgb(235,218,49)" fg:x="97" fg:w="1"/><text x="7.7752%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.70%)</title><rect x="6.9822%" y="437" width="0.6982%" height="15" fill="rgb(217,114,14)" fg:x="90" fg:w="9"/><text x="7.2322%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.70%)</title><rect x="6.9822%" y="421" width="0.6982%" height="15" fill="rgb(216,145,22)" fg:x="90" fg:w="9"/><text x="7.2322%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6028%" y="405" width="0.0776%" height="15" fill="rgb(217,112,39)" fg:x="98" fg:w="1"/><text x="7.8528%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6028%" y="389" width="0.0776%" height="15" fill="rgb(225,85,32)" fg:x="98" fg:w="1"/><text x="7.8528%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.78%)</title><rect x="6.9822%" y="501" width="0.7758%" height="15" fill="rgb(245,209,47)" fg:x="90" fg:w="10"/><text x="7.2322%" y="511.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.78%)</title><rect x="6.9822%" y="485" width="0.7758%" height="15" fill="rgb(218,220,15)" fg:x="90" fg:w="10"/><text x="7.2322%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.78%)</title><rect x="6.9822%" y="469" width="0.7758%" height="15" fill="rgb(222,202,31)" fg:x="90" fg:w="10"/><text x="7.2322%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.78%)</title><rect x="6.9822%" y="453" width="0.7758%" height="15" fill="rgb(243,203,4)" fg:x="90" fg:w="10"/><text x="7.2322%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.6804%" y="437" width="0.0776%" height="15" fill="rgb(237,92,17)" fg:x="99" fg:w="1"/><text x="7.9304%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="7.7580%" y="485" width="0.0776%" height="15" fill="rgb(231,119,7)" fg:x="100" fg:w="1"/><text x="8.0080%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="7.7580%" y="469" width="0.0776%" height="15" fill="rgb(237,82,41)" fg:x="100" fg:w="1"/><text x="8.0080%" y="479.50"></text></g><g><title>kernel::compare::any_entity_changes (27 samples, 2.09%)</title><rect x="5.8185%" y="517" width="2.0946%" height="15" fill="rgb(226,81,48)" fg:x="75" fg:w="27"/><text x="6.0685%" y="527.50">k..</text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="7.7580%" y="501" width="0.1552%" height="15" fill="rgb(234,70,51)" fg:x="100" fg:w="2"/><text x="8.0080%" y="511.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="7.8355%" y="485" width="0.0776%" height="15" fill="rgb(251,86,4)" fg:x="101" fg:w="1"/><text x="8.0855%" y="495.50"></text></g><g><title>engine::session::Session::close (40 samples, 3.10%)</title><rect x="4.8875%" y="581" width="3.1032%" height="15" fill="rgb(244,144,28)" fg:x="63" fg:w="40"/><text x="5.1375%" y="591.50">eng..</text></g><g><title>engine::session::Session::save_entity_changes (40 samples, 3.10%)</title><rect x="4.8875%" y="565" width="3.1032%" height="15" fill="rgb(232,161,39)" fg:x="63" fg:w="40"/><text x="5.1375%" y="575.50">eng..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (37 samples, 2.87%)</title><rect x="5.1202%" y="549" width="2.8704%" height="15" fill="rgb(247,34,51)" fg:x="66" fg:w="37"/><text x="5.3702%" y="559.50">en..</text></g><g><title>engine::session::Session::check_for_changes (37 samples, 2.87%)</title><rect x="5.1202%" y="533" width="2.8704%" height="15" fill="rgb(225,132,2)" fg:x="66" fg:w="37"/><text x="5.3702%" y="543.50">en..</text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="7.9131%" y="517" width="0.0776%" height="15" fill="rgb(209,159,44)" fg:x="102" fg:w="1"/><text x="8.1631%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.9131%" y="501" width="0.0776%" height="15" fill="rgb(251,214,1)" fg:x="102" fg:w="1"/><text x="8.1631%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="7.9131%" y="485" width="0.0776%" height="15" fill="rgb(247,84,47)" fg:x="102" fg:w="1"/><text x="8.1631%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="7.9131%" y="469" width="0.0776%" height="15" fill="rgb(240,111,43)" fg:x="102" fg:w="1"/><text x="8.1631%" y="479.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="7.9907%" y="533" width="0.0776%" height="15" fill="rgb(215,214,35)" fg:x="103" fg:w="1"/><text x="8.2407%" y="543.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.9907%" y="517" width="0.0776%" height="15" fill="rgb(248,207,23)" fg:x="103" fg:w="1"/><text x="8.2407%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.9907%" y="501" width="0.0776%" height="15" fill="rgb(214,186,4)" fg:x="103" fg:w="1"/><text x="8.2407%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::desc (1 samples, 0.08%)</title><rect x="8.3010%" y="501" width="0.0776%" height="15" fill="rgb(220,133,22)" fg:x="107" fg:w="1"/><text x="8.5510%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::name (4 samples, 0.31%)</title><rect x="8.3786%" y="501" width="0.3103%" height="15" fill="rgb(239,134,19)" fg:x="108" fg:w="4"/><text x="8.6286%" y="511.50"></text></g><g><title>kernel::model::Props::property_named (2 samples, 0.16%)</title><rect x="8.5337%" y="485" width="0.1552%" height="15" fill="rgb(250,140,9)" fg:x="110" fg:w="2"/><text x="8.7837%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.6113%" y="469" width="0.0776%" height="15" fill="rgb(225,59,14)" fg:x="111" fg:w="1"/><text x="8.8613%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="8.6889%" y="501" width="0.0776%" height="15" fill="rgb(214,152,51)" fg:x="112" fg:w="1"/><text x="8.9389%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="8.6889%" y="485" width="0.0776%" height="15" fill="rgb(251,227,43)" fg:x="112" fg:w="1"/><text x="8.9389%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="8.6889%" y="469" width="0.0776%" height="15" fill="rgb(241,96,17)" fg:x="112" fg:w="1"/><text x="8.9389%" y="479.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="8.6889%" y="453" width="0.0776%" height="15" fill="rgb(234,198,43)" fg:x="112" fg:w="1"/><text x="8.9389%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.8441%" y="453" width="0.0776%" height="15" fill="rgb(220,108,29)" fg:x="114" fg:w="1"/><text x="9.0941%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="8.9216%" y="453" width="0.1552%" height="15" fill="rgb(226,163,33)" fg:x="115" fg:w="2"/><text x="9.1716%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="8.9216%" y="437" width="0.1552%" height="15" fill="rgb(205,194,45)" fg:x="115" fg:w="2"/><text x="9.1716%" y="447.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="8.9216%" y="421" width="0.1552%" height="15" fill="rgb(206,143,44)" fg:x="115" fg:w="2"/><text x="9.1716%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.9216%" y="405" width="0.1552%" height="15" fill="rgb(236,136,36)" fg:x="115" fg:w="2"/><text x="9.1716%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="8.9216%" y="389" width="0.1552%" height="15" fill="rgb(249,172,42)" fg:x="115" fg:w="2"/><text x="9.1716%" y="399.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="8.9216%" y="373" width="0.1552%" height="15" fill="rgb(216,139,23)" fg:x="115" fg:w="2"/><text x="9.1716%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="8.9216%" y="357" width="0.1552%" height="15" fill="rgb(207,166,20)" fg:x="115" fg:w="2"/><text x="9.1716%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="8.9216%" y="341" width="0.1552%" height="15" fill="rgb(210,209,22)" fg:x="115" fg:w="2"/><text x="9.1716%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="8.9216%" y="325" width="0.1552%" height="15" fill="rgb(232,118,20)" fg:x="115" fg:w="2"/><text x="9.1716%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="8.9216%" y="309" width="0.1552%" height="15" fill="rgb(238,113,42)" fg:x="115" fg:w="2"/><text x="9.1716%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="9.0768%" y="437" width="0.0776%" height="15" fill="rgb(231,42,5)" fg:x="117" fg:w="1"/><text x="9.3268%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2320%" y="325" width="0.0776%" height="15" fill="rgb(243,166,24)" fg:x="119" fg:w="1"/><text x="9.4820%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="9.3095%" y="325" width="0.0776%" height="15" fill="rgb(237,226,12)" fg:x="120" fg:w="1"/><text x="9.5595%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="9.3871%" y="325" width="0.1552%" height="15" fill="rgb(229,133,24)" fg:x="121" fg:w="2"/><text x="9.6371%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (6 samples, 0.47%)</title><rect x="9.1544%" y="341" width="0.4655%" height="15" fill="rgb(238,33,43)" fg:x="118" fg:w="6"/><text x="9.4044%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="9.5423%" y="325" width="0.0776%" height="15" fill="rgb(227,59,38)" fg:x="123" fg:w="1"/><text x="9.7923%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="9.5423%" y="309" width="0.0776%" height="15" fill="rgb(230,97,0)" fg:x="123" fg:w="1"/><text x="9.7923%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (8 samples, 0.62%)</title><rect x="9.1544%" y="357" width="0.6206%" height="15" fill="rgb(250,173,50)" fg:x="118" fg:w="8"/><text x="9.4044%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="9.6199%" y="341" width="0.1552%" height="15" fill="rgb(240,15,50)" fg:x="124" fg:w="2"/><text x="9.8699%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="9.6199%" y="325" width="0.1552%" height="15" fill="rgb(221,93,22)" fg:x="124" fg:w="2"/><text x="9.8699%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="9.6974%" y="309" width="0.0776%" height="15" fill="rgb(245,180,53)" fg:x="125" fg:w="1"/><text x="9.9474%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="9.7750%" y="341" width="0.0776%" height="15" fill="rgb(231,88,51)" fg:x="126" fg:w="1"/><text x="10.0250%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="9.7750%" y="325" width="0.0776%" height="15" fill="rgb(240,58,21)" fg:x="126" fg:w="1"/><text x="10.0250%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="9.7750%" y="309" width="0.0776%" height="15" fill="rgb(237,21,10)" fg:x="126" fg:w="1"/><text x="10.0250%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.78%)</title><rect x="9.1544%" y="421" width="0.7758%" height="15" fill="rgb(218,43,11)" fg:x="118" fg:w="10"/><text x="9.4044%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.78%)</title><rect x="9.1544%" y="405" width="0.7758%" height="15" fill="rgb(218,221,29)" fg:x="118" fg:w="10"/><text x="9.4044%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (10 samples, 0.78%)</title><rect x="9.1544%" y="389" width="0.7758%" height="15" fill="rgb(214,118,42)" fg:x="118" fg:w="10"/><text x="9.4044%" y="399.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (10 samples, 0.78%)</title><rect x="9.1544%" y="373" width="0.7758%" height="15" fill="rgb(251,200,26)" fg:x="118" fg:w="10"/><text x="9.4044%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="9.7750%" y="357" width="0.1552%" height="15" fill="rgb(237,101,39)" fg:x="126" fg:w="2"/><text x="10.0250%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="9.8526%" y="341" width="0.0776%" height="15" fill="rgb(251,117,11)" fg:x="127" fg:w="1"/><text x="10.1026%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="9.9302%" y="373" width="0.0776%" height="15" fill="rgb(216,223,23)" fg:x="128" fg:w="1"/><text x="10.1802%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.9302%" y="357" width="0.0776%" height="15" fill="rgb(251,54,12)" fg:x="128" fg:w="1"/><text x="10.1802%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="9.9302%" y="389" width="0.1552%" height="15" fill="rgb(254,176,54)" fg:x="128" fg:w="2"/><text x="10.1802%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="10.0078%" y="373" width="0.0776%" height="15" fill="rgb(210,32,8)" fg:x="129" fg:w="1"/><text x="10.2578%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="10.0078%" y="357" width="0.0776%" height="15" fill="rgb(235,52,38)" fg:x="129" fg:w="1"/><text x="10.2578%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="10.0853%" y="373" width="0.0776%" height="15" fill="rgb(231,4,44)" fg:x="130" fg:w="1"/><text x="10.3353%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.0853%" y="357" width="0.0776%" height="15" fill="rgb(249,2,32)" fg:x="130" fg:w="1"/><text x="10.3353%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.31%)</title><rect x="9.9302%" y="421" width="0.3103%" height="15" fill="rgb(224,65,26)" fg:x="128" fg:w="4"/><text x="10.1802%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.31%)</title><rect x="9.9302%" y="405" width="0.3103%" height="15" fill="rgb(250,73,40)" fg:x="128" fg:w="4"/><text x="10.1802%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="10.0853%" y="389" width="0.1552%" height="15" fill="rgb(253,177,16)" fg:x="130" fg:w="2"/><text x="10.3353%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="10.1629%" y="373" width="0.0776%" height="15" fill="rgb(217,32,34)" fg:x="131" fg:w="1"/><text x="10.4129%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.1629%" y="357" width="0.0776%" height="15" fill="rgb(212,7,10)" fg:x="131" fg:w="1"/><text x="10.4129%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="10.5508%" y="341" width="0.0776%" height="15" fill="rgb(245,89,8)" fg:x="136" fg:w="1"/><text x="10.8008%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="10.5508%" y="373" width="0.1552%" height="15" fill="rgb(237,16,53)" fg:x="136" fg:w="2"/><text x="10.8008%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="10.5508%" y="357" width="0.1552%" height="15" fill="rgb(250,204,30)" fg:x="136" fg:w="2"/><text x="10.8008%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6284%" y="341" width="0.0776%" height="15" fill="rgb(208,77,27)" fg:x="137" fg:w="1"/><text x="10.8784%" y="351.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="10.7060%" y="373" width="0.0776%" height="15" fill="rgb(250,204,28)" fg:x="138" fg:w="1"/><text x="10.9560%" y="383.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="10.7060%" y="357" width="0.0776%" height="15" fill="rgb(244,63,21)" fg:x="138" fg:w="1"/><text x="10.9560%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.1715%" y="357" width="0.0776%" height="15" fill="rgb(236,85,44)" fg:x="144" fg:w="1"/><text x="11.4215%" y="367.50"></text></g><g><title>__libc_free (4 samples, 0.31%)</title><rect x="11.3266%" y="341" width="0.3103%" height="15" fill="rgb(215,98,4)" fg:x="146" fg:w="4"/><text x="11.5766%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (29 samples, 2.25%)</title><rect x="11.6369%" y="341" width="2.2498%" height="15" fill="rgb(235,38,11)" fg:x="150" fg:w="29"/><text x="11.8869%" y="351.50">c..</text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="13.7316%" y="325" width="0.1552%" height="15" fill="rgb(254,186,25)" fg:x="177" fg:w="2"/><text x="13.9816%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (35 samples, 2.72%)</title><rect x="11.2490%" y="357" width="2.7153%" height="15" fill="rgb(225,55,31)" fg:x="145" fg:w="35"/><text x="11.4990%" y="367.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="13.8867%" y="341" width="0.0776%" height="15" fill="rgb(211,15,21)" fg:x="179" fg:w="1"/><text x="14.1367%" y="351.50"></text></g><g><title>regex_automata::meta::reverse_inner::extract (1 samples, 0.08%)</title><rect x="13.9643%" y="357" width="0.0776%" height="15" fill="rgb(215,187,41)" fg:x="180" fg:w="1"/><text x="14.2143%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.62%)</title><rect x="14.2746%" y="341" width="0.6206%" height="15" fill="rgb(248,69,32)" fg:x="184" fg:w="8"/><text x="14.5246%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="14.8177%" y="325" width="0.0776%" height="15" fill="rgb(252,102,52)" fg:x="191" fg:w="1"/><text x="15.0677%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (12 samples, 0.93%)</title><rect x="14.0419%" y="357" width="0.9310%" height="15" fill="rgb(253,140,32)" fg:x="181" fg:w="12"/><text x="14.2919%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="14.8953%" y="341" width="0.0776%" height="15" fill="rgb(216,56,42)" fg:x="192" fg:w="1"/><text x="15.1453%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="14.8953%" y="325" width="0.0776%" height="15" fill="rgb(216,184,14)" fg:x="192" fg:w="1"/><text x="15.1453%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.39%)</title><rect x="15.1280%" y="293" width="0.3879%" height="15" fill="rgb(237,187,27)" fg:x="195" fg:w="5"/><text x="15.3780%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="15.1280%" y="277" width="0.3879%" height="15" fill="rgb(219,65,3)" fg:x="195" fg:w="5"/><text x="15.3780%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="15.2056%" y="261" width="0.3103%" height="15" fill="rgb(245,83,25)" fg:x="196" fg:w="4"/><text x="15.4556%" y="271.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="15.2056%" y="245" width="0.3103%" height="15" fill="rgb(214,205,45)" fg:x="196" fg:w="4"/><text x="15.4556%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.31%)</title><rect x="15.5159%" y="293" width="0.3103%" height="15" fill="rgb(241,20,18)" fg:x="200" fg:w="4"/><text x="15.7659%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="15.6711%" y="277" width="0.1552%" height="15" fill="rgb(232,163,23)" fg:x="202" fg:w="2"/><text x="15.9211%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="15.6711%" y="261" width="0.1552%" height="15" fill="rgb(214,5,46)" fg:x="202" fg:w="2"/><text x="15.9211%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.7486%" y="245" width="0.0776%" height="15" fill="rgb(229,78,17)" fg:x="203" fg:w="1"/><text x="15.9986%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.7486%" y="229" width="0.0776%" height="15" fill="rgb(248,89,10)" fg:x="203" fg:w="1"/><text x="15.9986%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="15.8262%" y="277" width="0.1552%" height="15" fill="rgb(248,54,15)" fg:x="204" fg:w="2"/><text x="16.0762%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (3 samples, 0.23%)</title><rect x="15.8262%" y="293" width="0.2327%" height="15" fill="rgb(223,116,6)" fg:x="204" fg:w="3"/><text x="16.0762%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="15.9814%" y="277" width="0.0776%" height="15" fill="rgb(205,125,38)" fg:x="206" fg:w="1"/><text x="16.2314%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="15.9814%" y="261" width="0.0776%" height="15" fill="rgb(251,78,38)" fg:x="206" fg:w="1"/><text x="16.2314%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9814%" y="245" width="0.0776%" height="15" fill="rgb(253,78,28)" fg:x="206" fg:w="1"/><text x="16.2314%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0590%" y="261" width="0.0776%" height="15" fill="rgb(209,120,3)" fg:x="207" fg:w="1"/><text x="16.3090%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (145 samples, 11.25%)</title><rect x="16.0590%" y="293" width="11.2490%" height="15" fill="rgb(238,229,9)" fg:x="207" fg:w="145"/><text x="16.3090%" y="303.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (145 samples, 11.25%)</title><rect x="16.0590%" y="277" width="11.2490%" height="15" fill="rgb(253,159,18)" fg:x="207" fg:w="145"/><text x="16.3090%" y="287.50">regex_automata::n..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (144 samples, 11.17%)</title><rect x="16.1365%" y="261" width="11.1715%" height="15" fill="rgb(244,42,34)" fg:x="208" fg:w="144"/><text x="16.3865%" y="271.50">alloc::vec::Vec&lt;..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (8 samples, 0.62%)</title><rect x="27.3080%" y="293" width="0.6206%" height="15" fill="rgb(224,8,7)" fg:x="352" fg:w="8"/><text x="27.5580%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8510%" y="277" width="0.0776%" height="15" fill="rgb(210,201,45)" fg:x="359" fg:w="1"/><text x="28.1010%" y="287.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="27.9286%" y="293" width="0.0776%" height="15" fill="rgb(252,185,21)" fg:x="360" fg:w="1"/><text x="28.1786%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (169 samples, 13.11%)</title><rect x="14.9728%" y="341" width="13.1109%" height="15" fill="rgb(223,131,1)" fg:x="193" fg:w="169"/><text x="15.2228%" y="351.50">&lt;core::iter::adapter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (169 samples, 13.11%)</title><rect x="14.9728%" y="325" width="13.1109%" height="15" fill="rgb(245,141,16)" fg:x="193" fg:w="169"/><text x="15.2228%" y="335.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (169 samples, 13.11%)</title><rect x="14.9728%" y="309" width="13.1109%" height="15" fill="rgb(229,55,45)" fg:x="193" fg:w="169"/><text x="15.2228%" y="319.50">regex_automata::nfa:..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="28.0062%" y="293" width="0.0776%" height="15" fill="rgb(208,92,15)" fg:x="361" fg:w="1"/><text x="28.2562%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.0062%" y="277" width="0.0776%" height="15" fill="rgb(234,185,47)" fg:x="361" fg:w="1"/><text x="28.2562%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.0062%" y="261" width="0.0776%" height="15" fill="rgb(253,104,50)" fg:x="361" fg:w="1"/><text x="28.2562%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.0062%" y="245" width="0.0776%" height="15" fill="rgb(205,70,7)" fg:x="361" fg:w="1"/><text x="28.2562%" y="255.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="28.1614%" y="325" width="0.1552%" height="15" fill="rgb(240,178,43)" fg:x="363" fg:w="2"/><text x="28.4114%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="28.3165%" y="325" width="0.3103%" height="15" fill="rgb(214,112,2)" fg:x="365" fg:w="4"/><text x="28.5665%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="28.4717%" y="309" width="0.1552%" height="15" fill="rgb(206,46,17)" fg:x="367" fg:w="2"/><text x="28.7217%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.4717%" y="293" width="0.1552%" height="15" fill="rgb(225,220,16)" fg:x="367" fg:w="2"/><text x="28.7217%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="28.4717%" y="277" width="0.1552%" height="15" fill="rgb(238,65,40)" fg:x="367" fg:w="2"/><text x="28.7217%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.7820%" y="309" width="0.0776%" height="15" fill="rgb(230,151,21)" fg:x="371" fg:w="1"/><text x="29.0320%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="28.6268%" y="325" width="0.3103%" height="15" fill="rgb(218,58,49)" fg:x="369" fg:w="4"/><text x="28.8768%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.8596%" y="309" width="0.0776%" height="15" fill="rgb(219,179,14)" fg:x="372" fg:w="1"/><text x="29.1096%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.8596%" y="293" width="0.0776%" height="15" fill="rgb(223,72,1)" fg:x="372" fg:w="1"/><text x="29.1096%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8596%" y="277" width="0.0776%" height="15" fill="rgb(238,126,10)" fg:x="372" fg:w="1"/><text x="29.1096%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.9372%" y="309" width="0.1552%" height="15" fill="rgb(224,206,38)" fg:x="373" fg:w="2"/><text x="29.1872%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.0923%" y="293" width="0.0776%" height="15" fill="rgb(212,201,54)" fg:x="375" fg:w="1"/><text x="29.3423%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.16%)</title><rect x="28.0838%" y="341" width="1.1637%" height="15" fill="rgb(218,154,48)" fg:x="362" fg:w="15"/><text x="28.3338%" y="351.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (4 samples, 0.31%)</title><rect x="28.9372%" y="325" width="0.3103%" height="15" fill="rgb(232,93,24)" fg:x="373" fg:w="4"/><text x="29.1872%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="29.0923%" y="309" width="0.1552%" height="15" fill="rgb(245,30,21)" fg:x="375" fg:w="2"/><text x="29.3423%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.1699%" y="293" width="0.0776%" height="15" fill="rgb(242,148,29)" fg:x="376" fg:w="1"/><text x="29.4199%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.1699%" y="277" width="0.0776%" height="15" fill="rgb(244,153,54)" fg:x="376" fg:w="1"/><text x="29.4199%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1699%" y="261" width="0.0776%" height="15" fill="rgb(252,87,22)" fg:x="376" fg:w="1"/><text x="29.4199%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (185 samples, 14.35%)</title><rect x="14.9728%" y="357" width="14.3522%" height="15" fill="rgb(210,51,29)" fg:x="193" fg:w="185"/><text x="15.2228%" y="367.50">regex_automata::nfa::t..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="29.2475%" y="341" width="0.0776%" height="15" fill="rgb(242,136,47)" fg:x="377" fg:w="1"/><text x="29.4975%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="29.2475%" y="325" width="0.0776%" height="15" fill="rgb(238,68,4)" fg:x="377" fg:w="1"/><text x="29.4975%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (240 samples, 18.62%)</title><rect x="10.7836%" y="373" width="18.6191%" height="15" fill="rgb(242,161,30)" fg:x="139" fg:w="240"/><text x="11.0336%" y="383.50">regex_automata::meta::strateg..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="29.3251%" y="357" width="0.0776%" height="15" fill="rgb(218,58,44)" fg:x="378" fg:w="1"/><text x="29.5751%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.23%)</title><rect x="29.4802%" y="325" width="0.2327%" height="15" fill="rgb(252,125,32)" fg:x="380" fg:w="3"/><text x="29.7302%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek_space (1 samples, 0.08%)</title><rect x="29.6354%" y="309" width="0.0776%" height="15" fill="rgb(219,178,0)" fg:x="382" fg:w="1"/><text x="29.8854%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (11 samples, 0.85%)</title><rect x="29.4026%" y="341" width="0.8534%" height="15" fill="rgb(213,152,7)" fg:x="379" fg:w="11"/><text x="29.6526%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.54%)</title><rect x="29.7130%" y="325" width="0.5431%" height="15" fill="rgb(249,109,34)" fg:x="383" fg:w="7"/><text x="29.9630%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.47%)</title><rect x="29.7905%" y="309" width="0.4655%" height="15" fill="rgb(232,96,21)" fg:x="384" fg:w="6"/><text x="30.0405%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.47%)</title><rect x="29.7905%" y="293" width="0.4655%" height="15" fill="rgb(228,27,39)" fg:x="384" fg:w="6"/><text x="30.0405%" y="303.50"></text></g><g><title>__libc_malloc (6 samples, 0.47%)</title><rect x="29.7905%" y="277" width="0.4655%" height="15" fill="rgb(211,182,52)" fg:x="384" fg:w="6"/><text x="30.0405%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.93%)</title><rect x="29.4026%" y="373" width="0.9310%" height="15" fill="rgb(234,178,38)" fg:x="379" fg:w="12"/><text x="29.6526%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.93%)</title><rect x="29.4026%" y="357" width="0.9310%" height="15" fill="rgb(221,111,3)" fg:x="379" fg:w="12"/><text x="29.6526%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="30.2560%" y="341" width="0.0776%" height="15" fill="rgb(228,175,21)" fg:x="390" fg:w="1"/><text x="30.5060%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.23%)</title><rect x="30.3336%" y="325" width="0.2327%" height="15" fill="rgb(228,174,43)" fg:x="391" fg:w="3"/><text x="30.5836%" y="335.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (3 samples, 0.23%)</title><rect x="30.3336%" y="309" width="0.2327%" height="15" fill="rgb(211,191,0)" fg:x="391" fg:w="3"/><text x="30.5836%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (262 samples, 20.33%)</title><rect x="10.3181%" y="389" width="20.3258%" height="15" fill="rgb(253,117,3)" fg:x="133" fg:w="262"/><text x="10.5681%" y="399.50">regex_automata::meta::regex::Bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.31%)</title><rect x="30.3336%" y="373" width="0.3103%" height="15" fill="rgb(241,127,19)" fg:x="391" fg:w="4"/><text x="30.5836%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.31%)</title><rect x="30.3336%" y="357" width="0.3103%" height="15" fill="rgb(218,103,12)" fg:x="391" fg:w="4"/><text x="30.5836%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.31%)</title><rect x="30.3336%" y="341" width="0.3103%" height="15" fill="rgb(236,214,43)" fg:x="391" fg:w="4"/><text x="30.5836%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="30.5663%" y="325" width="0.0776%" height="15" fill="rgb(244,144,19)" fg:x="394" fg:w="1"/><text x="30.8163%" y="335.50"></text></g><g><title>regex::regex::string::Regex::new (264 samples, 20.48%)</title><rect x="10.2405%" y="421" width="20.4810%" height="15" fill="rgb(246,188,10)" fg:x="132" fg:w="264"/><text x="10.4905%" y="431.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (263 samples, 20.40%)</title><rect x="10.3181%" y="405" width="20.4034%" height="15" fill="rgb(212,193,33)" fg:x="133" fg:w="263"/><text x="10.5681%" y="415.50">regex::builders::Builder::build_..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="30.6439%" y="389" width="0.0776%" height="15" fill="rgb(241,51,29)" fg:x="395" fg:w="1"/><text x="30.8939%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.8766%" y="357" width="0.0776%" height="15" fill="rgb(211,58,19)" fg:x="398" fg:w="1"/><text x="31.1266%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.4197%" y="341" width="0.0776%" height="15" fill="rgb(229,111,26)" fg:x="405" fg:w="1"/><text x="31.6697%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.4197%" y="325" width="0.0776%" height="15" fill="rgb(213,115,40)" fg:x="405" fg:w="1"/><text x="31.6697%" y="335.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (290 samples, 22.50%)</title><rect x="9.1544%" y="437" width="22.4981%" height="15" fill="rgb(209,56,44)" fg:x="118" fg:w="290"/><text x="9.4044%" y="447.50">indefinite::helper::Helper::get_firs..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (12 samples, 0.93%)</title><rect x="30.7215%" y="421" width="0.9310%" height="15" fill="rgb(230,108,32)" fg:x="396" fg:w="12"/><text x="30.9715%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.85%)</title><rect x="30.7991%" y="405" width="0.8534%" height="15" fill="rgb(216,165,31)" fg:x="397" fg:w="11"/><text x="31.0491%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.85%)</title><rect x="30.7991%" y="389" width="0.8534%" height="15" fill="rgb(218,122,21)" fg:x="397" fg:w="11"/><text x="31.0491%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.78%)</title><rect x="30.8766%" y="373" width="0.7758%" height="15" fill="rgb(223,224,47)" fg:x="398" fg:w="10"/><text x="31.1266%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.70%)</title><rect x="30.9542%" y="357" width="0.6982%" height="15" fill="rgb(238,102,44)" fg:x="399" fg:w="9"/><text x="31.2042%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="31.4973%" y="341" width="0.1552%" height="15" fill="rgb(236,46,40)" fg:x="406" fg:w="2"/><text x="31.7473%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.7300%" y="389" width="0.0776%" height="15" fill="rgb(247,202,50)" fg:x="409" fg:w="1"/><text x="31.9800%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.8076%" y="373" width="0.0776%" height="15" fill="rgb(209,99,20)" fg:x="410" fg:w="1"/><text x="32.0576%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.23%)</title><rect x="31.8076%" y="389" width="0.2327%" height="15" fill="rgb(252,27,34)" fg:x="410" fg:w="3"/><text x="32.0576%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="31.8852%" y="373" width="0.1552%" height="15" fill="rgb(215,206,23)" fg:x="411" fg:w="2"/><text x="32.1352%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="31.8852%" y="357" width="0.1552%" height="15" fill="rgb(212,135,36)" fg:x="411" fg:w="2"/><text x="32.1352%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.8852%" y="341" width="0.1552%" height="15" fill="rgb(240,189,1)" fg:x="411" fg:w="2"/><text x="32.1352%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="31.8852%" y="325" width="0.1552%" height="15" fill="rgb(242,56,20)" fg:x="411" fg:w="2"/><text x="32.1352%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.54%)</title><rect x="31.6524%" y="421" width="0.5431%" height="15" fill="rgb(247,132,33)" fg:x="408" fg:w="7"/><text x="31.9024%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.47%)</title><rect x="31.7300%" y="405" width="0.4655%" height="15" fill="rgb(208,149,11)" fg:x="409" fg:w="6"/><text x="31.9800%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="32.0403%" y="389" width="0.1552%" height="15" fill="rgb(211,33,11)" fg:x="413" fg:w="2"/><text x="32.2903%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="32.1179%" y="373" width="0.0776%" height="15" fill="rgb(221,29,38)" fg:x="414" fg:w="1"/><text x="32.3679%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.1179%" y="357" width="0.0776%" height="15" fill="rgb(206,182,49)" fg:x="414" fg:w="1"/><text x="32.3679%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="32.2731%" y="373" width="0.0776%" height="15" fill="rgb(216,140,1)" fg:x="416" fg:w="1"/><text x="32.5231%" y="383.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="32.2731%" y="357" width="0.0776%" height="15" fill="rgb(232,57,40)" fg:x="416" fg:w="1"/><text x="32.5231%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3507%" y="357" width="0.0776%" height="15" fill="rgb(224,186,18)" fg:x="417" fg:w="1"/><text x="32.6007%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.31%)</title><rect x="32.1955%" y="405" width="0.3103%" height="15" fill="rgb(215,121,11)" fg:x="415" fg:w="4"/><text x="32.4455%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.31%)</title><rect x="32.1955%" y="389" width="0.3103%" height="15" fill="rgb(245,147,10)" fg:x="415" fg:w="4"/><text x="32.4455%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="32.3507%" y="373" width="0.1552%" height="15" fill="rgb(238,153,13)" fg:x="417" fg:w="2"/><text x="32.6007%" y="383.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="32.4282%" y="357" width="0.0776%" height="15" fill="rgb(233,108,0)" fg:x="418" fg:w="1"/><text x="32.6782%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.5834%" y="341" width="0.0776%" height="15" fill="rgb(212,157,17)" fg:x="420" fg:w="1"/><text x="32.8334%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.5834%" y="325" width="0.0776%" height="15" fill="rgb(225,213,38)" fg:x="420" fg:w="1"/><text x="32.8334%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="33.2040%" y="325" width="0.1552%" height="15" fill="rgb(248,16,11)" fg:x="428" fg:w="2"/><text x="33.4540%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.2040%" y="309" width="0.1552%" height="15" fill="rgb(241,33,4)" fg:x="428" fg:w="2"/><text x="33.4540%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.2816%" y="293" width="0.0776%" height="15" fill="rgb(222,26,43)" fg:x="429" fg:w="1"/><text x="33.5316%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.3592%" y="325" width="0.0776%" height="15" fill="rgb(243,29,36)" fg:x="430" fg:w="1"/><text x="33.6092%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="33.3592%" y="309" width="0.0776%" height="15" fill="rgb(241,9,27)" fg:x="430" fg:w="1"/><text x="33.6092%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (6 samples, 0.47%)</title><rect x="33.4368%" y="325" width="0.4655%" height="15" fill="rgb(205,117,26)" fg:x="431" fg:w="6"/><text x="33.6868%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (19 samples, 1.47%)</title><rect x="32.5834%" y="357" width="1.4740%" height="15" fill="rgb(209,80,39)" fg:x="420" fg:w="19"/><text x="32.8334%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (18 samples, 1.40%)</title><rect x="32.6610%" y="341" width="1.3964%" height="15" fill="rgb(239,155,6)" fg:x="421" fg:w="18"/><text x="32.9110%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="33.9022%" y="325" width="0.1552%" height="15" fill="rgb(212,104,12)" fg:x="437" fg:w="2"/><text x="34.1522%" y="335.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (26 samples, 2.02%)</title><rect x="32.1955%" y="421" width="2.0171%" height="15" fill="rgb(234,204,3)" fg:x="415" fg:w="26"/><text x="32.4455%" y="431.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (22 samples, 1.71%)</title><rect x="32.5058%" y="405" width="1.7067%" height="15" fill="rgb(251,218,7)" fg:x="419" fg:w="22"/><text x="32.7558%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.63%)</title><rect x="32.5834%" y="389" width="1.6292%" height="15" fill="rgb(221,81,32)" fg:x="420" fg:w="21"/><text x="32.8334%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.63%)</title><rect x="32.5834%" y="373" width="1.6292%" height="15" fill="rgb(214,152,26)" fg:x="420" fg:w="21"/><text x="32.8334%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="34.0574%" y="357" width="0.1552%" height="15" fill="rgb(223,22,3)" fg:x="439" fg:w="2"/><text x="34.3074%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="34.1350%" y="341" width="0.0776%" height="15" fill="rgb(207,174,7)" fg:x="440" fg:w="1"/><text x="34.3850%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.1350%" y="325" width="0.0776%" height="15" fill="rgb(224,19,52)" fg:x="440" fg:w="1"/><text x="34.3850%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.1350%" y="309" width="0.0776%" height="15" fill="rgb(228,24,14)" fg:x="440" fg:w="1"/><text x="34.3850%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.1350%" y="293" width="0.0776%" height="15" fill="rgb(230,153,43)" fg:x="440" fg:w="1"/><text x="34.3850%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.2126%" y="389" width="0.0776%" height="15" fill="rgb(231,106,12)" fg:x="441" fg:w="1"/><text x="34.4626%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.3677%" y="341" width="0.0776%" height="15" fill="rgb(215,92,2)" fg:x="443" fg:w="1"/><text x="34.6177%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.3677%" y="325" width="0.0776%" height="15" fill="rgb(249,143,25)" fg:x="443" fg:w="1"/><text x="34.6177%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="34.3677%" y="373" width="0.1552%" height="15" fill="rgb(252,7,35)" fg:x="443" fg:w="2"/><text x="34.6177%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="34.3677%" y="357" width="0.1552%" height="15" fill="rgb(216,69,40)" fg:x="443" fg:w="2"/><text x="34.6177%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="34.4453%" y="341" width="0.0776%" height="15" fill="rgb(240,36,33)" fg:x="444" fg:w="1"/><text x="34.6953%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.6780%" y="341" width="0.0776%" height="15" fill="rgb(231,128,14)" fg:x="447" fg:w="1"/><text x="34.9280%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.6780%" y="325" width="0.0776%" height="15" fill="rgb(245,143,14)" fg:x="447" fg:w="1"/><text x="34.9280%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.6780%" y="309" width="0.0776%" height="15" fill="rgb(222,130,28)" fg:x="447" fg:w="1"/><text x="34.9280%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.6780%" y="293" width="0.0776%" height="15" fill="rgb(212,10,48)" fg:x="447" fg:w="1"/><text x="34.9280%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.31%)</title><rect x="34.5229%" y="373" width="0.3103%" height="15" fill="rgb(254,118,45)" fg:x="445" fg:w="4"/><text x="34.7729%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.31%)</title><rect x="34.5229%" y="357" width="0.3103%" height="15" fill="rgb(228,6,45)" fg:x="445" fg:w="4"/><text x="34.7729%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="34.7556%" y="341" width="0.0776%" height="15" fill="rgb(241,18,35)" fg:x="448" fg:w="1"/><text x="35.0056%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="34.7556%" y="325" width="0.0776%" height="15" fill="rgb(227,214,53)" fg:x="448" fg:w="1"/><text x="35.0056%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.7556%" y="309" width="0.0776%" height="15" fill="rgb(224,107,51)" fg:x="448" fg:w="1"/><text x="35.0056%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.7556%" y="293" width="0.0776%" height="15" fill="rgb(248,60,28)" fg:x="448" fg:w="1"/><text x="35.0056%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.7556%" y="277" width="0.0776%" height="15" fill="rgb(249,101,23)" fg:x="448" fg:w="1"/><text x="35.0056%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="34.7556%" y="261" width="0.0776%" height="15" fill="rgb(228,51,19)" fg:x="448" fg:w="1"/><text x="35.0056%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="34.8332%" y="373" width="0.0776%" height="15" fill="rgb(213,20,6)" fg:x="449" fg:w="1"/><text x="35.0832%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.8332%" y="357" width="0.0776%" height="15" fill="rgb(212,124,10)" fg:x="449" fg:w="1"/><text x="35.0832%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.2211%" y="357" width="0.0776%" height="15" fill="rgb(248,3,40)" fg:x="454" fg:w="1"/><text x="35.4711%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.3763%" y="341" width="0.0776%" height="15" fill="rgb(223,178,23)" fg:x="456" fg:w="1"/><text x="35.6263%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (30 samples, 2.33%)</title><rect x="35.2987%" y="357" width="2.3274%" height="15" fill="rgb(240,132,45)" fg:x="455" fg:w="30"/><text x="35.5487%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (28 samples, 2.17%)</title><rect x="35.4538%" y="341" width="2.1722%" height="15" fill="rgb(245,164,36)" fg:x="457" fg:w="28"/><text x="35.7038%" y="351.50">c..</text></g><g><title>__libc_free (5 samples, 0.39%)</title><rect x="37.2382%" y="325" width="0.3879%" height="15" fill="rgb(231,188,53)" fg:x="480" fg:w="5"/><text x="37.4882%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.54%)</title><rect x="37.6261%" y="357" width="0.5431%" height="15" fill="rgb(237,198,39)" fg:x="485" fg:w="7"/><text x="37.8761%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.31%)</title><rect x="37.8588%" y="341" width="0.3103%" height="15" fill="rgb(223,120,35)" fg:x="488" fg:w="4"/><text x="38.1088%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.4794%" y="325" width="0.0776%" height="15" fill="rgb(253,107,49)" fg:x="496" fg:w="1"/><text x="38.7294%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.23%)</title><rect x="38.5570%" y="325" width="0.2327%" height="15" fill="rgb(216,44,31)" fg:x="497" fg:w="3"/><text x="38.8070%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="38.6346%" y="309" width="0.1552%" height="15" fill="rgb(253,87,21)" fg:x="498" fg:w="2"/><text x="38.8846%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.6346%" y="293" width="0.1552%" height="15" fill="rgb(226,18,2)" fg:x="498" fg:w="2"/><text x="38.8846%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="38.6346%" y="277" width="0.1552%" height="15" fill="rgb(216,8,46)" fg:x="498" fg:w="2"/><text x="38.8846%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.54%)</title><rect x="38.7898%" y="325" width="0.5431%" height="15" fill="rgb(226,140,39)" fg:x="500" fg:w="7"/><text x="39.0398%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.47%)</title><rect x="38.8673%" y="309" width="0.4655%" height="15" fill="rgb(221,194,54)" fg:x="501" fg:w="6"/><text x="39.1173%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.31%)</title><rect x="39.0225%" y="293" width="0.3103%" height="15" fill="rgb(213,92,11)" fg:x="503" fg:w="4"/><text x="39.2725%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="39.0225%" y="277" width="0.3103%" height="15" fill="rgb(229,162,46)" fg:x="503" fg:w="4"/><text x="39.2725%" y="287.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="39.0225%" y="261" width="0.3103%" height="15" fill="rgb(214,111,36)" fg:x="503" fg:w="4"/><text x="39.2725%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (21 samples, 1.63%)</title><rect x="38.1691%" y="357" width="1.6292%" height="15" fill="rgb(207,6,21)" fg:x="492" fg:w="21"/><text x="38.4191%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (20 samples, 1.55%)</title><rect x="38.2467%" y="341" width="1.5516%" height="15" fill="rgb(213,127,38)" fg:x="493" fg:w="20"/><text x="38.4967%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.47%)</title><rect x="39.3328%" y="325" width="0.4655%" height="15" fill="rgb(238,118,32)" fg:x="507" fg:w="6"/><text x="39.5828%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.47%)</title><rect x="39.3328%" y="309" width="0.4655%" height="15" fill="rgb(240,139,39)" fg:x="507" fg:w="6"/><text x="39.5828%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.39%)</title><rect x="39.4104%" y="293" width="0.3879%" height="15" fill="rgb(235,10,37)" fg:x="508" fg:w="5"/><text x="39.6604%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.9535%" y="325" width="0.0776%" height="15" fill="rgb(249,171,38)" fg:x="515" fg:w="1"/><text x="40.2035%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="40.0310%" y="309" width="0.1552%" height="15" fill="rgb(242,144,32)" fg:x="516" fg:w="2"/><text x="40.2810%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="40.0310%" y="293" width="0.1552%" height="15" fill="rgb(217,117,21)" fg:x="516" fg:w="2"/><text x="40.2810%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.0310%" y="277" width="0.1552%" height="15" fill="rgb(249,87,1)" fg:x="516" fg:w="2"/><text x="40.2810%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.0310%" y="261" width="0.1552%" height="15" fill="rgb(248,196,48)" fg:x="516" fg:w="2"/><text x="40.2810%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="41.7378%" y="245" width="0.0776%" height="15" fill="rgb(251,206,33)" fg:x="538" fg:w="1"/><text x="41.9878%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.23%)</title><rect x="41.8154%" y="245" width="0.2327%" height="15" fill="rgb(232,141,28)" fg:x="539" fg:w="3"/><text x="42.0654%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.0481%" y="245" width="0.0776%" height="15" fill="rgb(209,167,14)" fg:x="542" fg:w="1"/><text x="42.2981%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.47%)</title><rect x="42.1257%" y="245" width="0.4655%" height="15" fill="rgb(225,11,50)" fg:x="543" fg:w="6"/><text x="42.3757%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="42.2033%" y="229" width="0.3879%" height="15" fill="rgb(209,50,20)" fg:x="544" fg:w="5"/><text x="42.4533%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.39%)</title><rect x="42.2033%" y="213" width="0.3879%" height="15" fill="rgb(212,17,46)" fg:x="544" fg:w="5"/><text x="42.4533%" y="223.50"></text></g><g><title>realloc (5 samples, 0.39%)</title><rect x="42.2033%" y="197" width="0.3879%" height="15" fill="rgb(216,101,39)" fg:x="544" fg:w="5"/><text x="42.4533%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="42.5912%" y="245" width="0.0776%" height="15" fill="rgb(212,228,48)" fg:x="549" fg:w="1"/><text x="42.8412%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.5912%" y="229" width="0.0776%" height="15" fill="rgb(250,6,50)" fg:x="549" fg:w="1"/><text x="42.8412%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.5912%" y="213" width="0.0776%" height="15" fill="rgb(250,160,48)" fg:x="549" fg:w="1"/><text x="42.8412%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.5912%" y="197" width="0.0776%" height="15" fill="rgb(244,216,33)" fg:x="549" fg:w="1"/><text x="42.8412%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="43.4445%" y="213" width="0.0776%" height="15" fill="rgb(207,157,5)" fg:x="560" fg:w="1"/><text x="43.6945%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.5221%" y="181" width="0.0776%" height="15" fill="rgb(228,199,8)" fg:x="561" fg:w="1"/><text x="43.7721%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.5221%" y="213" width="0.1552%" height="15" fill="rgb(227,80,20)" fg:x="561" fg:w="2"/><text x="43.7721%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.5221%" y="197" width="0.1552%" height="15" fill="rgb(222,9,33)" fg:x="561" fg:w="2"/><text x="43.7721%" y="207.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="43.5997%" y="181" width="0.0776%" height="15" fill="rgb(239,44,28)" fg:x="562" fg:w="1"/><text x="43.8497%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="43.5997%" y="165" width="0.0776%" height="15" fill="rgb(249,187,43)" fg:x="562" fg:w="1"/><text x="43.8497%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.9876%" y="197" width="0.1552%" height="15" fill="rgb(216,141,28)" fg:x="567" fg:w="2"/><text x="44.2376%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (22 samples, 1.71%)</title><rect x="42.6687%" y="245" width="1.7067%" height="15" fill="rgb(230,154,53)" fg:x="550" fg:w="22"/><text x="42.9187%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (18 samples, 1.40%)</title><rect x="42.9791%" y="229" width="1.3964%" height="15" fill="rgb(227,82,4)" fg:x="554" fg:w="18"/><text x="43.2291%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.70%)</title><rect x="43.6773%" y="213" width="0.6982%" height="15" fill="rgb(220,107,16)" fg:x="563" fg:w="9"/><text x="43.9273%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.23%)</title><rect x="44.1427%" y="197" width="0.2327%" height="15" fill="rgb(207,187,2)" fg:x="569" fg:w="3"/><text x="44.3927%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="44.2203%" y="181" width="0.1552%" height="15" fill="rgb(210,162,52)" fg:x="570" fg:w="2"/><text x="44.4703%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="44.2203%" y="165" width="0.1552%" height="15" fill="rgb(217,216,49)" fg:x="570" fg:w="2"/><text x="44.4703%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.2979%" y="149" width="0.0776%" height="15" fill="rgb(218,146,49)" fg:x="571" fg:w="1"/><text x="44.5479%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.4531%" y="229" width="0.0776%" height="15" fill="rgb(216,55,40)" fg:x="573" fg:w="1"/><text x="44.7031%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.4531%" y="213" width="0.0776%" height="15" fill="rgb(208,196,21)" fg:x="573" fg:w="1"/><text x="44.7031%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.4531%" y="197" width="0.0776%" height="15" fill="rgb(242,117,42)" fg:x="573" fg:w="1"/><text x="44.7031%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.5306%" y="229" width="0.0776%" height="15" fill="rgb(210,11,23)" fg:x="574" fg:w="1"/><text x="44.7806%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (164 samples, 12.72%)</title><rect x="44.3755%" y="245" width="12.7230%" height="15" fill="rgb(217,110,2)" fg:x="572" fg:w="164"/><text x="44.6255%" y="255.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (161 samples, 12.49%)</title><rect x="44.6082%" y="229" width="12.4903%" height="15" fill="rgb(229,77,54)" fg:x="575" fg:w="161"/><text x="44.8582%" y="239.50">regex_automata::nfa..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (159 samples, 12.34%)</title><rect x="44.7634%" y="213" width="12.3351%" height="15" fill="rgb(218,53,16)" fg:x="577" fg:w="159"/><text x="45.0134%" y="223.50">alloc::vec::Vec&lt;T,..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.31%)</title><rect x="57.0985%" y="245" width="0.3103%" height="15" fill="rgb(215,38,13)" fg:x="736" fg:w="4"/><text x="57.3485%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.3313%" y="229" width="0.0776%" height="15" fill="rgb(235,42,18)" fg:x="739" fg:w="1"/><text x="57.5813%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="57.4088%" y="245" width="0.0776%" height="15" fill="rgb(219,66,54)" fg:x="740" fg:w="1"/><text x="57.6588%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (235 samples, 18.23%)</title><rect x="39.8759%" y="341" width="18.2312%" height="15" fill="rgb(222,205,4)" fg:x="514" fg:w="235"/><text x="40.1259%" y="351.50">&lt;core::iter::adapters::map::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (233 samples, 18.08%)</title><rect x="40.0310%" y="325" width="18.0760%" height="15" fill="rgb(227,213,46)" fg:x="516" fg:w="233"/><text x="40.2810%" y="335.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (231 samples, 17.92%)</title><rect x="40.1862%" y="309" width="17.9209%" height="15" fill="rgb(250,145,42)" fg:x="518" fg:w="231"/><text x="40.4362%" y="319.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (231 samples, 17.92%)</title><rect x="40.1862%" y="293" width="17.9209%" height="15" fill="rgb(219,15,2)" fg:x="518" fg:w="231"/><text x="40.4362%" y="303.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (231 samples, 17.92%)</title><rect x="40.1862%" y="277" width="17.9209%" height="15" fill="rgb(231,181,52)" fg:x="518" fg:w="231"/><text x="40.4362%" y="287.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (231 samples, 17.92%)</title><rect x="40.1862%" y="261" width="17.9209%" height="15" fill="rgb(235,1,42)" fg:x="518" fg:w="231"/><text x="40.4362%" y="271.50">regex_automata::nfa::thompso..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (8 samples, 0.62%)</title><rect x="57.4864%" y="245" width="0.6206%" height="15" fill="rgb(249,88,27)" fg:x="741" fg:w="8"/><text x="57.7364%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.47%)</title><rect x="57.6416%" y="229" width="0.4655%" height="15" fill="rgb(235,145,16)" fg:x="743" fg:w="6"/><text x="57.8916%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="57.9519%" y="213" width="0.1552%" height="15" fill="rgb(237,114,19)" fg:x="747" fg:w="2"/><text x="58.2019%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.4174%" y="325" width="0.0776%" height="15" fill="rgb(238,51,50)" fg:x="753" fg:w="1"/><text x="58.6674%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.4950%" y="325" width="0.0776%" height="15" fill="rgb(205,194,25)" fg:x="754" fg:w="1"/><text x="58.7450%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.5725%" y="325" width="0.0776%" height="15" fill="rgb(215,203,17)" fg:x="755" fg:w="1"/><text x="58.8225%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.5725%" y="309" width="0.0776%" height="15" fill="rgb(233,112,49)" fg:x="755" fg:w="1"/><text x="58.8225%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.5725%" y="293" width="0.0776%" height="15" fill="rgb(241,130,26)" fg:x="755" fg:w="1"/><text x="58.8225%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.6501%" y="325" width="0.0776%" height="15" fill="rgb(252,223,19)" fg:x="756" fg:w="1"/><text x="58.9001%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.6501%" y="309" width="0.0776%" height="15" fill="rgb(211,95,25)" fg:x="756" fg:w="1"/><text x="58.9001%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6501%" y="293" width="0.0776%" height="15" fill="rgb(251,182,27)" fg:x="756" fg:w="1"/><text x="58.9001%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.39%)</title><rect x="59.2708%" y="309" width="0.3879%" height="15" fill="rgb(238,24,4)" fg:x="764" fg:w="5"/><text x="59.5208%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.31%)</title><rect x="59.3483%" y="293" width="0.3103%" height="15" fill="rgb(224,220,25)" fg:x="765" fg:w="4"/><text x="59.5983%" y="303.50"></text></g><g><title>realloc (4 samples, 0.31%)</title><rect x="59.3483%" y="277" width="0.3103%" height="15" fill="rgb(239,133,26)" fg:x="765" fg:w="4"/><text x="59.5983%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (13 samples, 1.01%)</title><rect x="58.7277%" y="325" width="1.0085%" height="15" fill="rgb(211,94,48)" fg:x="757" fg:w="13"/><text x="58.9777%" y="335.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="59.6587%" y="309" width="0.0776%" height="15" fill="rgb(239,87,6)" fg:x="769" fg:w="1"/><text x="59.9087%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.47%)</title><rect x="59.7362%" y="325" width="0.4655%" height="15" fill="rgb(227,62,0)" fg:x="770" fg:w="6"/><text x="59.9862%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.1241%" y="309" width="0.0776%" height="15" fill="rgb(211,226,4)" fg:x="775" fg:w="1"/><text x="60.3741%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1241%" y="293" width="0.0776%" height="15" fill="rgb(253,38,52)" fg:x="775" fg:w="1"/><text x="60.3741%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.1241%" y="277" width="0.0776%" height="15" fill="rgb(229,126,40)" fg:x="775" fg:w="1"/><text x="60.3741%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (3 samples, 0.23%)</title><rect x="60.2017%" y="325" width="0.2327%" height="15" fill="rgb(229,165,44)" fg:x="776" fg:w="3"/><text x="60.4517%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.4344%" y="309" width="0.0776%" height="15" fill="rgb(247,95,47)" fg:x="779" fg:w="1"/><text x="60.6844%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.4344%" y="293" width="0.0776%" height="15" fill="rgb(216,140,30)" fg:x="779" fg:w="1"/><text x="60.6844%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (331 samples, 25.68%)</title><rect x="34.9108%" y="373" width="25.6788%" height="15" fill="rgb(246,214,8)" fg:x="450" fg:w="331"/><text x="35.1608%" y="383.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (268 samples, 20.79%)</title><rect x="39.7983%" y="357" width="20.7913%" height="15" fill="rgb(227,224,15)" fg:x="513" fg:w="268"/><text x="40.0483%" y="367.50">regex_automata::nfa::thompson::co..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (32 samples, 2.48%)</title><rect x="58.1071%" y="341" width="2.4825%" height="15" fill="rgb(233,175,4)" fg:x="749" fg:w="32"/><text x="58.3571%" y="351.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="60.4344%" y="325" width="0.1552%" height="15" fill="rgb(221,66,45)" fg:x="779" fg:w="2"/><text x="60.6844%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="60.5120%" y="309" width="0.0776%" height="15" fill="rgb(221,178,18)" fg:x="780" fg:w="1"/><text x="60.7620%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="60.7448%" y="341" width="0.0776%" height="15" fill="rgb(213,81,29)" fg:x="783" fg:w="1"/><text x="60.9948%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="60.7448%" y="325" width="0.0776%" height="15" fill="rgb(220,89,49)" fg:x="783" fg:w="1"/><text x="60.9948%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="60.8223%" y="341" width="0.0776%" height="15" fill="rgb(227,60,33)" fg:x="784" fg:w="1"/><text x="61.0723%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.8223%" y="325" width="0.0776%" height="15" fill="rgb(205,113,12)" fg:x="784" fg:w="1"/><text x="61.0723%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (3 samples, 0.23%)</title><rect x="60.8999%" y="341" width="0.2327%" height="15" fill="rgb(211,32,1)" fg:x="785" fg:w="3"/><text x="61.1499%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="60.9775%" y="325" width="0.1552%" height="15" fill="rgb(246,2,12)" fg:x="786" fg:w="2"/><text x="61.2275%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (2 samples, 0.16%)</title><rect x="61.1327%" y="341" width="0.1552%" height="15" fill="rgb(243,37,27)" fg:x="788" fg:w="2"/><text x="61.3827%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="61.1327%" y="325" width="0.1552%" height="15" fill="rgb(248,211,31)" fg:x="788" fg:w="2"/><text x="61.3827%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.1327%" y="309" width="0.1552%" height="15" fill="rgb(242,146,47)" fg:x="788" fg:w="2"/><text x="61.3827%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.1327%" y="293" width="0.1552%" height="15" fill="rgb(206,70,20)" fg:x="788" fg:w="2"/><text x="61.3827%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.93%)</title><rect x="60.5896%" y="373" width="0.9310%" height="15" fill="rgb(215,10,51)" fg:x="781" fg:w="12"/><text x="60.8396%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.93%)</title><rect x="60.5896%" y="357" width="0.9310%" height="15" fill="rgb(243,178,53)" fg:x="781" fg:w="12"/><text x="60.8396%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.23%)</title><rect x="61.2878%" y="341" width="0.2327%" height="15" fill="rgb(233,221,20)" fg:x="790" fg:w="3"/><text x="61.5378%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.4430%" y="325" width="0.0776%" height="15" fill="rgb(218,95,35)" fg:x="792" fg:w="1"/><text x="61.6930%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="61.5206%" y="325" width="0.1552%" height="15" fill="rgb(229,13,5)" fg:x="793" fg:w="2"/><text x="61.7706%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="61.5206%" y="309" width="0.1552%" height="15" fill="rgb(252,164,30)" fg:x="793" fg:w="2"/><text x="61.7706%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.5206%" y="293" width="0.1552%" height="15" fill="rgb(232,68,36)" fg:x="793" fg:w="2"/><text x="61.7706%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="61.5206%" y="277" width="0.1552%" height="15" fill="rgb(219,59,54)" fg:x="793" fg:w="2"/><text x="61.7706%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="61.6757%" y="325" width="0.0776%" height="15" fill="rgb(250,92,33)" fg:x="795" fg:w="1"/><text x="61.9257%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.31%)</title><rect x="61.5206%" y="341" width="0.3103%" height="15" fill="rgb(229,162,54)" fg:x="793" fg:w="4"/><text x="61.7706%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="61.7533%" y="325" width="0.0776%" height="15" fill="rgb(244,114,52)" fg:x="796" fg:w="1"/><text x="62.0033%" y="335.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="61.7533%" y="309" width="0.0776%" height="15" fill="rgb(212,211,43)" fg:x="796" fg:w="1"/><text x="62.0033%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="61.7533%" y="293" width="0.0776%" height="15" fill="rgb(226,147,8)" fg:x="796" fg:w="1"/><text x="62.0033%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.9860%" y="293" width="0.0776%" height="15" fill="rgb(226,23,13)" fg:x="799" fg:w="1"/><text x="62.2360%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.31%)</title><rect x="61.8309%" y="341" width="0.3103%" height="15" fill="rgb(240,63,4)" fg:x="797" fg:w="4"/><text x="62.0809%" y="351.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="61.9860%" y="325" width="0.1552%" height="15" fill="rgb(221,1,32)" fg:x="799" fg:w="2"/><text x="62.2360%" y="335.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (2 samples, 0.16%)</title><rect x="61.9860%" y="309" width="0.1552%" height="15" fill="rgb(242,117,10)" fg:x="799" fg:w="2"/><text x="62.2360%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="62.0636%" y="293" width="0.0776%" height="15" fill="rgb(249,172,44)" fg:x="800" fg:w="1"/><text x="62.3136%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (361 samples, 28.01%)</title><rect x="34.2901%" y="389" width="28.0062%" height="15" fill="rgb(244,46,45)" fg:x="442" fg:w="361"/><text x="34.5401%" y="399.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.78%)</title><rect x="61.5206%" y="373" width="0.7758%" height="15" fill="rgb(206,43,17)" fg:x="793" fg:w="10"/><text x="61.7706%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.78%)</title><rect x="61.5206%" y="357" width="0.7758%" height="15" fill="rgb(239,218,39)" fg:x="793" fg:w="10"/><text x="61.7706%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="62.1412%" y="341" width="0.1552%" height="15" fill="rgb(208,169,54)" fg:x="801" fg:w="2"/><text x="62.3912%" y="351.50"></text></g><g><title>indefinite::rules::number::Number::check (396 samples, 30.72%)</title><rect x="31.6524%" y="437" width="30.7215%" height="15" fill="rgb(247,25,42)" fg:x="408" fg:w="396"/><text x="31.9024%" y="447.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (363 samples, 28.16%)</title><rect x="34.2126%" y="421" width="28.1614%" height="15" fill="rgb(226,23,31)" fg:x="441" fg:w="363"/><text x="34.4626%" y="431.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (363 samples, 28.16%)</title><rect x="34.2126%" y="405" width="28.1614%" height="15" fill="rgb(247,16,28)" fg:x="441" fg:w="363"/><text x="34.4626%" y="415.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="62.2964%" y="389" width="0.0776%" height="15" fill="rgb(231,147,38)" fg:x="803" fg:w="1"/><text x="62.5464%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.4515%" y="357" width="0.0776%" height="15" fill="rgb(253,81,48)" fg:x="805" fg:w="1"/><text x="62.7015%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.4515%" y="341" width="0.0776%" height="15" fill="rgb(249,222,43)" fg:x="805" fg:w="1"/><text x="62.7015%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.4515%" y="325" width="0.0776%" height="15" fill="rgb(221,3,27)" fg:x="805" fg:w="1"/><text x="62.7015%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.23%)</title><rect x="62.3739%" y="405" width="0.2327%" height="15" fill="rgb(228,180,5)" fg:x="804" fg:w="3"/><text x="62.6239%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.23%)</title><rect x="62.3739%" y="389" width="0.2327%" height="15" fill="rgb(227,131,42)" fg:x="804" fg:w="3"/><text x="62.6239%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.23%)</title><rect x="62.3739%" y="373" width="0.2327%" height="15" fill="rgb(212,3,39)" fg:x="804" fg:w="3"/><text x="62.6239%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="62.5291%" y="357" width="0.0776%" height="15" fill="rgb(226,45,5)" fg:x="806" fg:w="1"/><text x="62.7791%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="62.6067%" y="373" width="0.0776%" height="15" fill="rgb(215,167,45)" fg:x="807" fg:w="1"/><text x="62.8567%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="62.6843%" y="357" width="0.0776%" height="15" fill="rgb(250,218,53)" fg:x="808" fg:w="1"/><text x="62.9343%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.6843%" y="341" width="0.0776%" height="15" fill="rgb(207,140,0)" fg:x="808" fg:w="1"/><text x="62.9343%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.23%)</title><rect x="62.6067%" y="405" width="0.2327%" height="15" fill="rgb(238,133,51)" fg:x="807" fg:w="3"/><text x="62.8567%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.23%)</title><rect x="62.6067%" y="389" width="0.2327%" height="15" fill="rgb(218,203,53)" fg:x="807" fg:w="3"/><text x="62.8567%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="62.6843%" y="373" width="0.1552%" height="15" fill="rgb(226,184,25)" fg:x="808" fg:w="2"/><text x="62.9343%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="62.7618%" y="357" width="0.0776%" height="15" fill="rgb(231,121,21)" fg:x="809" fg:w="1"/><text x="63.0118%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.7618%" y="341" width="0.0776%" height="15" fill="rgb(251,14,34)" fg:x="809" fg:w="1"/><text x="63.0118%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.9170%" y="357" width="0.0776%" height="15" fill="rgb(249,193,11)" fg:x="811" fg:w="1"/><text x="63.1670%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.9170%" y="341" width="0.0776%" height="15" fill="rgb(220,172,37)" fg:x="811" fg:w="1"/><text x="63.1670%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="62.9170%" y="325" width="0.0776%" height="15" fill="rgb(231,229,43)" fg:x="811" fg:w="1"/><text x="63.1670%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.9170%" y="309" width="0.0776%" height="15" fill="rgb(250,161,5)" fg:x="811" fg:w="1"/><text x="63.1670%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.9170%" y="293" width="0.0776%" height="15" fill="rgb(218,225,18)" fg:x="811" fg:w="1"/><text x="63.1670%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9946%" y="357" width="0.0776%" height="15" fill="rgb(245,45,42)" fg:x="812" fg:w="1"/><text x="63.2446%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.0721%" y="357" width="0.0776%" height="15" fill="rgb(211,115,1)" fg:x="813" fg:w="1"/><text x="63.3221%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.0721%" y="341" width="0.0776%" height="15" fill="rgb(248,133,52)" fg:x="813" fg:w="1"/><text x="63.3221%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="63.0721%" y="325" width="0.0776%" height="15" fill="rgb(238,100,21)" fg:x="813" fg:w="1"/><text x="63.3221%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="63.0721%" y="309" width="0.0776%" height="15" fill="rgb(247,144,11)" fg:x="813" fg:w="1"/><text x="63.3221%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="63.1497%" y="357" width="0.1552%" height="15" fill="rgb(206,164,16)" fg:x="814" fg:w="2"/><text x="63.3997%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.1497%" y="341" width="0.1552%" height="15" fill="rgb(222,34,3)" fg:x="814" fg:w="2"/><text x="63.3997%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="63.2273%" y="325" width="0.0776%" height="15" fill="rgb(248,82,4)" fg:x="815" fg:w="1"/><text x="63.4773%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.2273%" y="309" width="0.0776%" height="15" fill="rgb(228,81,46)" fg:x="815" fg:w="1"/><text x="63.4773%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.2273%" y="293" width="0.0776%" height="15" fill="rgb(227,67,47)" fg:x="815" fg:w="1"/><text x="63.4773%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.3049%" y="341" width="0.0776%" height="15" fill="rgb(215,93,53)" fg:x="816" fg:w="1"/><text x="63.5549%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="63.3825%" y="341" width="0.1552%" height="15" fill="rgb(248,194,39)" fg:x="817" fg:w="2"/><text x="63.6325%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.4600%" y="325" width="0.0776%" height="15" fill="rgb(215,5,19)" fg:x="818" fg:w="1"/><text x="63.7100%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.7704%" y="325" width="0.0776%" height="15" fill="rgb(226,215,51)" fg:x="822" fg:w="1"/><text x="64.0204%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.0807%" y="309" width="0.0776%" height="15" fill="rgb(225,56,26)" fg:x="826" fg:w="1"/><text x="64.3307%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.70%)</title><rect x="63.5376%" y="341" width="0.6982%" height="15" fill="rgb(222,75,29)" fg:x="819" fg:w="9"/><text x="63.7876%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.39%)</title><rect x="63.8479%" y="325" width="0.3879%" height="15" fill="rgb(236,139,6)" fg:x="823" fg:w="5"/><text x="64.0979%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="64.1583%" y="309" width="0.0776%" height="15" fill="rgb(223,137,36)" fg:x="827" fg:w="1"/><text x="64.4083%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.1583%" y="293" width="0.0776%" height="15" fill="rgb(226,99,2)" fg:x="827" fg:w="1"/><text x="64.4083%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="64.2358%" y="341" width="0.0776%" height="15" fill="rgb(206,133,23)" fg:x="828" fg:w="1"/><text x="64.4858%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="64.3910%" y="325" width="0.1552%" height="15" fill="rgb(243,173,15)" fg:x="830" fg:w="2"/><text x="64.6410%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="64.3910%" y="309" width="0.1552%" height="15" fill="rgb(228,69,28)" fg:x="830" fg:w="2"/><text x="64.6410%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="64.3910%" y="293" width="0.1552%" height="15" fill="rgb(212,51,22)" fg:x="830" fg:w="2"/><text x="64.6410%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="64.3910%" y="277" width="0.1552%" height="15" fill="rgb(227,113,0)" fg:x="830" fg:w="2"/><text x="64.6410%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="64.4686%" y="261" width="0.0776%" height="15" fill="rgb(252,84,27)" fg:x="831" fg:w="1"/><text x="64.7186%" y="271.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="64.6237%" y="309" width="0.0776%" height="15" fill="rgb(223,145,39)" fg:x="833" fg:w="1"/><text x="64.8737%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.7013%" y="309" width="0.0776%" height="15" fill="rgb(239,219,30)" fg:x="834" fg:w="1"/><text x="64.9513%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.7789%" y="309" width="0.0776%" height="15" fill="rgb(224,196,39)" fg:x="835" fg:w="1"/><text x="65.0289%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="64.8565%" y="309" width="0.0776%" height="15" fill="rgb(205,35,43)" fg:x="836" fg:w="1"/><text x="65.1065%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (27 samples, 2.09%)</title><rect x="63.3049%" y="357" width="2.0946%" height="15" fill="rgb(228,201,21)" fg:x="816" fg:w="27"/><text x="63.5549%" y="367.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.09%)</title><rect x="64.3134%" y="341" width="1.0861%" height="15" fill="rgb(237,118,16)" fg:x="829" fg:w="14"/><text x="64.5634%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.85%)</title><rect x="64.5462%" y="325" width="0.8534%" height="15" fill="rgb(241,17,19)" fg:x="832" fg:w="11"/><text x="64.7962%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.47%)</title><rect x="64.9341%" y="309" width="0.4655%" height="15" fill="rgb(214,10,25)" fg:x="837" fg:w="6"/><text x="65.1841%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.3220%" y="293" width="0.0776%" height="15" fill="rgb(238,37,29)" fg:x="842" fg:w="1"/><text x="65.5720%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.3220%" y="277" width="0.0776%" height="15" fill="rgb(253,83,25)" fg:x="842" fg:w="1"/><text x="65.5720%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.3220%" y="261" width="0.0776%" height="15" fill="rgb(234,192,12)" fg:x="842" fg:w="1"/><text x="65.5720%" y="271.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="65.5547%" y="309" width="0.0776%" height="15" fill="rgb(241,216,45)" fg:x="845" fg:w="1"/><text x="65.8047%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.5547%" y="293" width="0.0776%" height="15" fill="rgb(242,22,33)" fg:x="845" fg:w="1"/><text x="65.8047%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.5547%" y="277" width="0.0776%" height="15" fill="rgb(231,105,49)" fg:x="845" fg:w="1"/><text x="65.8047%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.5547%" y="261" width="0.0776%" height="15" fill="rgb(218,204,15)" fg:x="845" fg:w="1"/><text x="65.8047%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="65.6323%" y="309" width="0.1552%" height="15" fill="rgb(235,138,41)" fg:x="846" fg:w="2"/><text x="65.8823%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="65.6323%" y="293" width="0.1552%" height="15" fill="rgb(246,0,9)" fg:x="846" fg:w="2"/><text x="65.8823%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="65.7099%" y="277" width="0.0776%" height="15" fill="rgb(210,74,4)" fg:x="847" fg:w="1"/><text x="65.9599%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.7099%" y="261" width="0.0776%" height="15" fill="rgb(250,60,41)" fg:x="847" fg:w="1"/><text x="65.9599%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.39%)</title><rect x="65.4771%" y="325" width="0.3879%" height="15" fill="rgb(220,115,12)" fg:x="844" fg:w="5"/><text x="65.7271%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="65.7874%" y="309" width="0.0776%" height="15" fill="rgb(237,100,13)" fg:x="848" fg:w="1"/><text x="66.0374%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.7874%" y="293" width="0.0776%" height="15" fill="rgb(213,55,26)" fg:x="848" fg:w="1"/><text x="66.0374%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7874%" y="277" width="0.0776%" height="15" fill="rgb(216,17,4)" fg:x="848" fg:w="1"/><text x="66.0374%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.7874%" y="261" width="0.0776%" height="15" fill="rgb(220,153,47)" fg:x="848" fg:w="1"/><text x="66.0374%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.54%)</title><rect x="65.3995%" y="357" width="0.5431%" height="15" fill="rgb(215,131,9)" fg:x="843" fg:w="7"/><text x="65.6495%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.54%)</title><rect x="65.3995%" y="341" width="0.5431%" height="15" fill="rgb(233,46,42)" fg:x="843" fg:w="7"/><text x="65.6495%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.8650%" y="325" width="0.0776%" height="15" fill="rgb(226,86,7)" fg:x="849" fg:w="1"/><text x="66.1150%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="66.0978%" y="309" width="0.0776%" height="15" fill="rgb(239,226,21)" fg:x="852" fg:w="1"/><text x="66.3478%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (44 samples, 3.41%)</title><rect x="62.8394%" y="405" width="3.4135%" height="15" fill="rgb(244,137,22)" fg:x="810" fg:w="44"/><text x="63.0894%" y="415.50">reg..</text></g><g><title>regex::builders::Builder::build_one_string (44 samples, 3.41%)</title><rect x="62.8394%" y="389" width="3.4135%" height="15" fill="rgb(211,139,35)" fg:x="810" fg:w="44"/><text x="63.0894%" y="399.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (44 samples, 3.41%)</title><rect x="62.8394%" y="373" width="3.4135%" height="15" fill="rgb(214,62,50)" fg:x="810" fg:w="44"/><text x="63.0894%" y="383.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.31%)</title><rect x="65.9426%" y="357" width="0.3103%" height="15" fill="rgb(212,113,44)" fg:x="850" fg:w="4"/><text x="66.1926%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.31%)</title><rect x="65.9426%" y="341" width="0.3103%" height="15" fill="rgb(226,150,43)" fg:x="850" fg:w="4"/><text x="66.1926%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.31%)</title><rect x="65.9426%" y="325" width="0.3103%" height="15" fill="rgb(250,71,37)" fg:x="850" fg:w="4"/><text x="66.1926%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="66.1753%" y="309" width="0.0776%" height="15" fill="rgb(219,76,19)" fg:x="853" fg:w="1"/><text x="66.4253%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.3305%" y="341" width="0.0776%" height="15" fill="rgb(250,39,11)" fg:x="855" fg:w="1"/><text x="66.5805%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.3305%" y="325" width="0.0776%" height="15" fill="rgb(230,64,31)" fg:x="855" fg:w="1"/><text x="66.5805%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.3305%" y="309" width="0.0776%" height="15" fill="rgb(208,222,23)" fg:x="855" fg:w="1"/><text x="66.5805%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="66.8735%" y="325" width="0.1552%" height="15" fill="rgb(227,125,18)" fg:x="862" fg:w="2"/><text x="67.1235%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="66.8735%" y="309" width="0.1552%" height="15" fill="rgb(234,210,9)" fg:x="862" fg:w="2"/><text x="67.1235%" y="319.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="66.8735%" y="293" width="0.1552%" height="15" fill="rgb(217,127,24)" fg:x="862" fg:w="2"/><text x="67.1235%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.70%)</title><rect x="66.4081%" y="341" width="0.6982%" height="15" fill="rgb(239,141,48)" fg:x="856" fg:w="9"/><text x="66.6581%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0287%" y="325" width="0.0776%" height="15" fill="rgb(227,109,8)" fg:x="864" fg:w="1"/><text x="67.2787%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0287%" y="309" width="0.0776%" height="15" fill="rgb(235,184,23)" fg:x="864" fg:w="1"/><text x="67.2787%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.01%)</title><rect x="66.2529%" y="357" width="1.0085%" height="15" fill="rgb(227,226,48)" fg:x="854" fg:w="13"/><text x="66.5029%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="67.1063%" y="341" width="0.1552%" height="15" fill="rgb(206,150,11)" fg:x="865" fg:w="2"/><text x="67.3563%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.1839%" y="325" width="0.0776%" height="15" fill="rgb(254,2,33)" fg:x="866" fg:w="1"/><text x="67.4339%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.1839%" y="309" width="0.0776%" height="15" fill="rgb(243,160,20)" fg:x="866" fg:w="1"/><text x="67.4339%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1839%" y="293" width="0.0776%" height="15" fill="rgb(218,208,30)" fg:x="866" fg:w="1"/><text x="67.4339%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (65 samples, 5.04%)</title><rect x="62.3739%" y="421" width="5.0427%" height="15" fill="rgb(224,120,49)" fg:x="804" fg:w="65"/><text x="62.6239%" y="431.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (15 samples, 1.16%)</title><rect x="66.2529%" y="405" width="1.1637%" height="15" fill="rgb(246,12,2)" fg:x="854" fg:w="15"/><text x="66.5029%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.16%)</title><rect x="66.2529%" y="389" width="1.1637%" height="15" fill="rgb(236,117,3)" fg:x="854" fg:w="15"/><text x="66.5029%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.16%)</title><rect x="66.2529%" y="373" width="1.1637%" height="15" fill="rgb(216,128,52)" fg:x="854" fg:w="15"/><text x="66.5029%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="67.2614%" y="357" width="0.1552%" height="15" fill="rgb(246,145,19)" fg:x="867" fg:w="2"/><text x="67.5114%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="67.2614%" y="341" width="0.1552%" height="15" fill="rgb(222,11,46)" fg:x="867" fg:w="2"/><text x="67.5114%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="67.2614%" y="325" width="0.1552%" height="15" fill="rgb(245,82,36)" fg:x="867" fg:w="2"/><text x="67.5114%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="67.2614%" y="309" width="0.1552%" height="15" fill="rgb(250,73,51)" fg:x="867" fg:w="2"/><text x="67.5114%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="67.2614%" y="293" width="0.1552%" height="15" fill="rgb(221,189,23)" fg:x="867" fg:w="2"/><text x="67.5114%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (764 samples, 59.27%)</title><rect x="8.2234%" y="517" width="59.2708%" height="15" fill="rgb(210,33,7)" fg:x="106" fg:w="764"/><text x="8.4734%" y="527.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::..</text></g><g><title>plugins_core::looking::model::qualify_name (757 samples, 58.73%)</title><rect x="8.7665%" y="501" width="58.7277%" height="15" fill="rgb(210,107,22)" fg:x="113" fg:w="757"/><text x="9.0165%" y="511.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (756 samples, 58.65%)</title><rect x="8.8441%" y="485" width="58.6501%" height="15" fill="rgb(222,116,37)" fg:x="114" fg:w="756"/><text x="9.0941%" y="495.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (756 samples, 58.65%)</title><rect x="8.8441%" y="469" width="58.6501%" height="15" fill="rgb(254,17,48)" fg:x="114" fg:w="756"/><text x="9.0941%" y="479.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (753 samples, 58.42%)</title><rect x="9.0768%" y="453" width="58.4174%" height="15" fill="rgb(224,36,32)" fg:x="117" fg:w="753"/><text x="9.3268%" y="463.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (66 samples, 5.12%)</title><rect x="62.3739%" y="437" width="5.1202%" height="15" fill="rgb(232,90,46)" fg:x="804" fg:w="66"/><text x="62.6239%" y="447.50">indefi..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="67.4166%" y="421" width="0.0776%" height="15" fill="rgb(241,66,40)" fg:x="869" fg:w="1"/><text x="67.6666%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="67.4942%" y="517" width="0.0776%" height="15" fill="rgb(249,184,29)" fg:x="870" fg:w="1"/><text x="67.7442%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.4942%" y="501" width="0.0776%" height="15" fill="rgb(231,181,1)" fg:x="870" fg:w="1"/><text x="67.7442%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4942%" y="485" width="0.0776%" height="15" fill="rgb(224,94,2)" fg:x="870" fg:w="1"/><text x="67.7442%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6493%" y="469" width="0.0776%" height="15" fill="rgb(229,170,15)" fg:x="872" fg:w="1"/><text x="67.8993%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.6493%" y="453" width="0.0776%" height="15" fill="rgb(240,127,35)" fg:x="872" fg:w="1"/><text x="67.8993%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.6493%" y="437" width="0.0776%" height="15" fill="rgb(248,196,34)" fg:x="872" fg:w="1"/><text x="67.8993%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.6493%" y="421" width="0.0776%" height="15" fill="rgb(236,137,7)" fg:x="872" fg:w="1"/><text x="67.8993%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.6493%" y="405" width="0.0776%" height="15" fill="rgb(235,127,16)" fg:x="872" fg:w="1"/><text x="67.8993%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="67.6493%" y="389" width="0.0776%" height="15" fill="rgb(250,192,54)" fg:x="872" fg:w="1"/><text x="67.8993%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="67.6493%" y="373" width="0.0776%" height="15" fill="rgb(218,98,20)" fg:x="872" fg:w="1"/><text x="67.8993%" y="383.50"></text></g><g><title>kernel::model::EntityRef::into_entry (4 samples, 0.31%)</title><rect x="67.5718%" y="517" width="0.3103%" height="15" fill="rgb(230,176,47)" fg:x="871" fg:w="4"/><text x="67.8218%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (4 samples, 0.31%)</title><rect x="67.5718%" y="501" width="0.3103%" height="15" fill="rgb(244,2,33)" fg:x="871" fg:w="4"/><text x="67.8218%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.23%)</title><rect x="67.6493%" y="485" width="0.2327%" height="15" fill="rgb(231,100,17)" fg:x="872" fg:w="3"/><text x="67.8993%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="67.7269%" y="469" width="0.1552%" height="15" fill="rgb(245,23,12)" fg:x="873" fg:w="2"/><text x="67.9769%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="67.7269%" y="453" width="0.1552%" height="15" fill="rgb(249,55,22)" fg:x="873" fg:w="2"/><text x="67.9769%" y="463.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="67.7269%" y="437" width="0.1552%" height="15" fill="rgb(207,134,9)" fg:x="873" fg:w="2"/><text x="67.9769%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="67.7269%" y="421" width="0.1552%" height="15" fill="rgb(218,134,0)" fg:x="873" fg:w="2"/><text x="67.9769%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="67.7269%" y="405" width="0.1552%" height="15" fill="rgb(213,212,33)" fg:x="873" fg:w="2"/><text x="67.9769%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="67.7269%" y="389" width="0.1552%" height="15" fill="rgb(252,106,18)" fg:x="873" fg:w="2"/><text x="67.9769%" y="399.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="67.7269%" y="373" width="0.1552%" height="15" fill="rgb(208,126,42)" fg:x="873" fg:w="2"/><text x="67.9769%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.8045%" y="357" width="0.0776%" height="15" fill="rgb(246,175,29)" fg:x="874" fg:w="1"/><text x="68.0545%" y="367.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="67.8045%" y="341" width="0.0776%" height="15" fill="rgb(215,13,50)" fg:x="874" fg:w="1"/><text x="68.0545%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="67.8045%" y="325" width="0.0776%" height="15" fill="rgb(216,172,15)" fg:x="874" fg:w="1"/><text x="68.0545%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.8045%" y="309" width="0.0776%" height="15" fill="rgb(212,103,13)" fg:x="874" fg:w="1"/><text x="68.0545%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.8045%" y="293" width="0.0776%" height="15" fill="rgb(231,171,36)" fg:x="874" fg:w="1"/><text x="68.0545%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9597%" y="485" width="0.0776%" height="15" fill="rgb(250,123,20)" fg:x="876" fg:w="1"/><text x="68.2097%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.9597%" y="469" width="0.0776%" height="15" fill="rgb(212,53,50)" fg:x="876" fg:w="1"/><text x="68.2097%" y="479.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="68.0372%" y="485" width="0.0776%" height="15" fill="rgb(243,54,12)" fg:x="877" fg:w="1"/><text x="68.2872%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.0372%" y="469" width="0.0776%" height="15" fill="rgb(234,101,34)" fg:x="877" fg:w="1"/><text x="68.2872%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="68.0372%" y="453" width="0.0776%" height="15" fill="rgb(254,67,22)" fg:x="877" fg:w="1"/><text x="68.2872%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="68.0372%" y="437" width="0.0776%" height="15" fill="rgb(250,35,47)" fg:x="877" fg:w="1"/><text x="68.2872%" y="447.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="68.0372%" y="421" width="0.0776%" height="15" fill="rgb(226,126,38)" fg:x="877" fg:w="1"/><text x="68.2872%" y="431.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="68.0372%" y="405" width="0.0776%" height="15" fill="rgb(216,138,53)" fg:x="877" fg:w="1"/><text x="68.2872%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.1924%" y="453" width="0.0776%" height="15" fill="rgb(246,199,43)" fg:x="879" fg:w="1"/><text x="68.4424%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.1924%" y="437" width="0.0776%" height="15" fill="rgb(232,125,11)" fg:x="879" fg:w="1"/><text x="68.4424%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="68.2700%" y="421" width="0.1552%" height="15" fill="rgb(218,219,45)" fg:x="880" fg:w="2"/><text x="68.5200%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.2700%" y="405" width="0.1552%" height="15" fill="rgb(216,102,54)" fg:x="880" fg:w="2"/><text x="68.5200%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.2700%" y="389" width="0.1552%" height="15" fill="rgb(250,228,7)" fg:x="880" fg:w="2"/><text x="68.5200%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.3476%" y="373" width="0.0776%" height="15" fill="rgb(226,125,25)" fg:x="881" fg:w="1"/><text x="68.5976%" y="383.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (780 samples, 60.51%)</title><rect x="7.9907%" y="549" width="60.5120%" height="15" fill="rgb(224,165,27)" fg:x="103" fg:w="780"/><text x="8.2407%" y="559.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (779 samples, 60.43%)</title><rect x="8.0683%" y="533" width="60.4344%" height="15" fill="rgb(233,86,3)" fg:x="104" fg:w="779"/><text x="8.3183%" y="543.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.62%)</title><rect x="67.8821%" y="517" width="0.6206%" height="15" fill="rgb(228,116,20)" fg:x="875" fg:w="8"/><text x="68.1321%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (8 samples, 0.62%)</title><rect x="67.8821%" y="501" width="0.6206%" height="15" fill="rgb(209,192,17)" fg:x="875" fg:w="8"/><text x="68.1321%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="68.1148%" y="485" width="0.3879%" height="15" fill="rgb(224,88,34)" fg:x="878" fg:w="5"/><text x="68.3648%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="68.1148%" y="469" width="0.3879%" height="15" fill="rgb(233,38,6)" fg:x="878" fg:w="5"/><text x="68.3648%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.23%)</title><rect x="68.2700%" y="453" width="0.2327%" height="15" fill="rgb(212,59,30)" fg:x="880" fg:w="3"/><text x="68.5200%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.23%)</title><rect x="68.2700%" y="437" width="0.2327%" height="15" fill="rgb(213,80,3)" fg:x="880" fg:w="3"/><text x="68.5200%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4251%" y="421" width="0.0776%" height="15" fill="rgb(251,178,7)" fg:x="882" fg:w="1"/><text x="68.6751%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="68.5027%" y="549" width="0.1552%" height="15" fill="rgb(213,154,26)" fg:x="883" fg:w="2"/><text x="68.7527%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="68.5027%" y="533" width="0.1552%" height="15" fill="rgb(238,165,49)" fg:x="883" fg:w="2"/><text x="68.7527%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="68.5027%" y="517" width="0.1552%" height="15" fill="rgb(248,91,46)" fg:x="883" fg:w="2"/><text x="68.7527%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="68.5027%" y="501" width="0.1552%" height="15" fill="rgb(244,21,52)" fg:x="883" fg:w="2"/><text x="68.7527%" y="511.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="68.5027%" y="485" width="0.1552%" height="15" fill="rgb(247,122,20)" fg:x="883" fg:w="2"/><text x="68.7527%" y="495.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="68.5027%" y="469" width="0.1552%" height="15" fill="rgb(218,27,9)" fg:x="883" fg:w="2"/><text x="68.7527%" y="479.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="68.5803%" y="453" width="0.0776%" height="15" fill="rgb(246,7,6)" fg:x="884" fg:w="1"/><text x="68.8303%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.5803%" y="437" width="0.0776%" height="15" fill="rgb(227,135,54)" fg:x="884" fg:w="1"/><text x="68.8303%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.5803%" y="421" width="0.0776%" height="15" fill="rgb(247,14,11)" fg:x="884" fg:w="1"/><text x="68.8303%" y="431.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="68.5803%" y="405" width="0.0776%" height="15" fill="rgb(206,149,34)" fg:x="884" fg:w="1"/><text x="68.8303%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.5803%" y="389" width="0.0776%" height="15" fill="rgb(227,228,4)" fg:x="884" fg:w="1"/><text x="68.8303%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="68.6579%" y="309" width="0.0776%" height="15" fill="rgb(238,218,28)" fg:x="885" fg:w="1"/><text x="68.9079%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.6579%" y="373" width="0.1552%" height="15" fill="rgb(252,86,40)" fg:x="885" fg:w="2"/><text x="68.9079%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.6579%" y="357" width="0.1552%" height="15" fill="rgb(251,225,11)" fg:x="885" fg:w="2"/><text x="68.9079%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.6579%" y="341" width="0.1552%" height="15" fill="rgb(206,46,49)" fg:x="885" fg:w="2"/><text x="68.9079%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.6579%" y="325" width="0.1552%" height="15" fill="rgb(245,128,24)" fg:x="885" fg:w="2"/><text x="68.9079%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7355%" y="309" width="0.0776%" height="15" fill="rgb(219,177,34)" fg:x="886" fg:w="1"/><text x="68.9855%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.7355%" y="293" width="0.0776%" height="15" fill="rgb(218,60,48)" fg:x="886" fg:w="1"/><text x="68.9855%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="68.7355%" y="277" width="0.0776%" height="15" fill="rgb(221,11,5)" fg:x="886" fg:w="1"/><text x="68.9855%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.23%)</title><rect x="68.6579%" y="485" width="0.2327%" height="15" fill="rgb(220,148,13)" fg:x="885" fg:w="3"/><text x="68.9079%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.23%)</title><rect x="68.6579%" y="469" width="0.2327%" height="15" fill="rgb(210,16,3)" fg:x="885" fg:w="3"/><text x="68.9079%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.23%)</title><rect x="68.6579%" y="453" width="0.2327%" height="15" fill="rgb(236,80,2)" fg:x="885" fg:w="3"/><text x="68.9079%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="68.6579%" y="437" width="0.2327%" height="15" fill="rgb(239,129,19)" fg:x="885" fg:w="3"/><text x="68.9079%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.23%)</title><rect x="68.6579%" y="421" width="0.2327%" height="15" fill="rgb(220,106,35)" fg:x="885" fg:w="3"/><text x="68.9079%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.23%)</title><rect x="68.6579%" y="405" width="0.2327%" height="15" fill="rgb(252,139,45)" fg:x="885" fg:w="3"/><text x="68.9079%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (3 samples, 0.23%)</title><rect x="68.6579%" y="389" width="0.2327%" height="15" fill="rgb(229,8,36)" fg:x="885" fg:w="3"/><text x="68.9079%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.8130%" y="373" width="0.0776%" height="15" fill="rgb(230,126,33)" fg:x="887" fg:w="1"/><text x="69.0630%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.8130%" y="357" width="0.0776%" height="15" fill="rgb(239,140,21)" fg:x="887" fg:w="1"/><text x="69.0630%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.8130%" y="341" width="0.0776%" height="15" fill="rgb(254,104,9)" fg:x="887" fg:w="1"/><text x="69.0630%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.8130%" y="325" width="0.0776%" height="15" fill="rgb(239,52,14)" fg:x="887" fg:w="1"/><text x="69.0630%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.8906%" y="437" width="0.0776%" height="15" fill="rgb(208,227,44)" fg:x="888" fg:w="1"/><text x="69.1406%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9682%" y="373" width="0.0776%" height="15" fill="rgb(246,18,19)" fg:x="889" fg:w="1"/><text x="69.2182%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9682%" y="357" width="0.0776%" height="15" fill="rgb(235,228,25)" fg:x="889" fg:w="1"/><text x="69.2182%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.47%)</title><rect x="68.6579%" y="533" width="0.4655%" height="15" fill="rgb(240,156,20)" fg:x="885" fg:w="6"/><text x="68.9079%" y="543.50"></text></g><g><title>engine::internal::Entities::prepare_entity (6 samples, 0.47%)</title><rect x="68.6579%" y="517" width="0.4655%" height="15" fill="rgb(224,8,20)" fg:x="885" fg:w="6"/><text x="68.9079%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (6 samples, 0.47%)</title><rect x="68.6579%" y="501" width="0.4655%" height="15" fill="rgb(214,12,52)" fg:x="885" fg:w="6"/><text x="68.9079%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.23%)</title><rect x="68.8906%" y="485" width="0.2327%" height="15" fill="rgb(211,220,47)" fg:x="888" fg:w="3"/><text x="69.1406%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="68.8906%" y="469" width="0.2327%" height="15" fill="rgb(250,173,5)" fg:x="888" fg:w="3"/><text x="69.1406%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="68.8906%" y="453" width="0.2327%" height="15" fill="rgb(250,125,52)" fg:x="888" fg:w="3"/><text x="69.1406%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.9682%" y="437" width="0.1552%" height="15" fill="rgb(209,133,18)" fg:x="889" fg:w="2"/><text x="69.2182%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9682%" y="421" width="0.1552%" height="15" fill="rgb(216,173,22)" fg:x="889" fg:w="2"/><text x="69.2182%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.9682%" y="405" width="0.1552%" height="15" fill="rgb(205,3,22)" fg:x="889" fg:w="2"/><text x="69.2182%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9682%" y="389" width="0.1552%" height="15" fill="rgb(248,22,20)" fg:x="889" fg:w="2"/><text x="69.2182%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0458%" y="373" width="0.0776%" height="15" fill="rgb(233,6,29)" fg:x="890" fg:w="1"/><text x="69.2958%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0458%" y="357" width="0.0776%" height="15" fill="rgb(240,22,54)" fg:x="890" fg:w="1"/><text x="69.2958%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0458%" y="341" width="0.0776%" height="15" fill="rgb(231,133,32)" fg:x="890" fg:w="1"/><text x="69.2958%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0458%" y="325" width="0.0776%" height="15" fill="rgb(248,193,4)" fg:x="890" fg:w="1"/><text x="69.2958%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0458%" y="309" width="0.0776%" height="15" fill="rgb(211,178,46)" fg:x="890" fg:w="1"/><text x="69.2958%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0458%" y="293" width="0.0776%" height="15" fill="rgb(224,5,42)" fg:x="890" fg:w="1"/><text x="69.2958%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0458%" y="277" width="0.0776%" height="15" fill="rgb(239,176,25)" fg:x="890" fg:w="1"/><text x="69.2958%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1234%" y="533" width="0.0776%" height="15" fill="rgb(245,187,50)" fg:x="891" fg:w="1"/><text x="69.3734%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="69.2009%" y="437" width="0.0776%" height="15" fill="rgb(248,24,15)" fg:x="892" fg:w="1"/><text x="69.4509%" y="447.50"></text></g><g><title>&lt;kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="69.2785%" y="357" width="0.0776%" height="15" fill="rgb(205,166,13)" fg:x="893" fg:w="1"/><text x="69.5285%" y="367.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="69.2785%" y="421" width="0.1552%" height="15" fill="rgb(208,114,23)" fg:x="893" fg:w="2"/><text x="69.5285%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="69.2785%" y="405" width="0.1552%" height="15" fill="rgb(239,127,18)" fg:x="893" fg:w="2"/><text x="69.5285%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.2785%" y="389" width="0.1552%" height="15" fill="rgb(219,154,28)" fg:x="893" fg:w="2"/><text x="69.5285%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2785%" y="373" width="0.1552%" height="15" fill="rgb(225,157,23)" fg:x="893" fg:w="2"/><text x="69.5285%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3561%" y="357" width="0.0776%" height="15" fill="rgb(219,8,6)" fg:x="894" fg:w="1"/><text x="69.6061%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3561%" y="341" width="0.0776%" height="15" fill="rgb(212,47,6)" fg:x="894" fg:w="1"/><text x="69.6061%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3561%" y="325" width="0.0776%" height="15" fill="rgb(224,190,4)" fg:x="894" fg:w="1"/><text x="69.6061%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3561%" y="309" width="0.0776%" height="15" fill="rgb(239,183,29)" fg:x="894" fg:w="1"/><text x="69.6061%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3561%" y="293" width="0.0776%" height="15" fill="rgb(213,57,7)" fg:x="894" fg:w="1"/><text x="69.6061%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.3561%" y="277" width="0.0776%" height="15" fill="rgb(216,148,1)" fg:x="894" fg:w="1"/><text x="69.6061%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.5112%" y="245" width="0.0776%" height="15" fill="rgb(236,182,29)" fg:x="896" fg:w="1"/><text x="69.7612%" y="255.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.5112%" y="229" width="0.0776%" height="15" fill="rgb(244,120,48)" fg:x="896" fg:w="1"/><text x="69.7612%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.47%)</title><rect x="69.2009%" y="469" width="0.4655%" height="15" fill="rgb(206,71,34)" fg:x="892" fg:w="6"/><text x="69.4509%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (6 samples, 0.47%)</title><rect x="69.2009%" y="453" width="0.4655%" height="15" fill="rgb(242,32,6)" fg:x="892" fg:w="6"/><text x="69.4509%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.39%)</title><rect x="69.2785%" y="437" width="0.3879%" height="15" fill="rgb(241,35,3)" fg:x="893" fg:w="5"/><text x="69.5285%" y="447.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.23%)</title><rect x="69.4337%" y="421" width="0.2327%" height="15" fill="rgb(222,62,19)" fg:x="895" fg:w="3"/><text x="69.6837%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="69.4337%" y="405" width="0.2327%" height="15" fill="rgb(223,110,41)" fg:x="895" fg:w="3"/><text x="69.6837%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="69.4337%" y="389" width="0.2327%" height="15" fill="rgb(208,224,4)" fg:x="895" fg:w="3"/><text x="69.6837%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="69.4337%" y="373" width="0.2327%" height="15" fill="rgb(241,137,19)" fg:x="895" fg:w="3"/><text x="69.6837%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="69.4337%" y="357" width="0.2327%" height="15" fill="rgb(244,24,17)" fg:x="895" fg:w="3"/><text x="69.6837%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="69.4337%" y="341" width="0.2327%" height="15" fill="rgb(245,178,49)" fg:x="895" fg:w="3"/><text x="69.6837%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="69.4337%" y="325" width="0.2327%" height="15" fill="rgb(219,160,38)" fg:x="895" fg:w="3"/><text x="69.6837%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.5112%" y="309" width="0.1552%" height="15" fill="rgb(228,137,14)" fg:x="896" fg:w="2"/><text x="69.7612%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.5112%" y="293" width="0.1552%" height="15" fill="rgb(237,134,11)" fg:x="896" fg:w="2"/><text x="69.7612%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.5112%" y="277" width="0.1552%" height="15" fill="rgb(211,126,44)" fg:x="896" fg:w="2"/><text x="69.7612%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.5112%" y="261" width="0.1552%" height="15" fill="rgb(226,171,33)" fg:x="896" fg:w="2"/><text x="69.7612%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5888%" y="245" width="0.0776%" height="15" fill="rgb(253,99,13)" fg:x="897" fg:w="1"/><text x="69.8388%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5888%" y="229" width="0.0776%" height="15" fill="rgb(244,48,7)" fg:x="897" fg:w="1"/><text x="69.8388%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="69.6664%" y="469" width="0.0776%" height="15" fill="rgb(244,217,54)" fg:x="898" fg:w="1"/><text x="69.9164%" y="479.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (8 samples, 0.62%)</title><rect x="69.2009%" y="533" width="0.6206%" height="15" fill="rgb(224,15,18)" fg:x="892" fg:w="8"/><text x="69.4509%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (8 samples, 0.62%)</title><rect x="69.2009%" y="517" width="0.6206%" height="15" fill="rgb(244,99,12)" fg:x="892" fg:w="8"/><text x="69.4509%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.62%)</title><rect x="69.2009%" y="501" width="0.6206%" height="15" fill="rgb(233,226,8)" fg:x="892" fg:w="8"/><text x="69.4509%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (8 samples, 0.62%)</title><rect x="69.2009%" y="485" width="0.6206%" height="15" fill="rgb(229,211,3)" fg:x="892" fg:w="8"/><text x="69.4509%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.7440%" y="469" width="0.0776%" height="15" fill="rgb(216,140,21)" fg:x="899" fg:w="1"/><text x="69.9940%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7440%" y="453" width="0.0776%" height="15" fill="rgb(234,122,30)" fg:x="899" fg:w="1"/><text x="69.9940%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.7440%" y="437" width="0.0776%" height="15" fill="rgb(236,25,46)" fg:x="899" fg:w="1"/><text x="69.9940%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7440%" y="421" width="0.0776%" height="15" fill="rgb(217,52,54)" fg:x="899" fg:w="1"/><text x="69.9940%" y="431.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (17 samples, 1.32%)</title><rect x="68.6579%" y="549" width="1.3189%" height="15" fill="rgb(222,29,26)" fg:x="885" fg:w="17"/><text x="68.9079%" y="559.50"></text></g><g><title>engine::users::model::username_to_key (2 samples, 0.16%)</title><rect x="69.8216%" y="533" width="0.1552%" height="15" fill="rgb(216,177,29)" fg:x="900" fg:w="2"/><text x="70.0716%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="69.8991%" y="517" width="0.0776%" height="15" fill="rgb(247,136,51)" fg:x="901" fg:w="1"/><text x="70.1491%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="69.8991%" y="501" width="0.0776%" height="15" fill="rgb(231,47,47)" fg:x="901" fg:w="1"/><text x="70.1491%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8991%" y="485" width="0.0776%" height="15" fill="rgb(211,192,36)" fg:x="901" fg:w="1"/><text x="70.1491%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8991%" y="469" width="0.0776%" height="15" fill="rgb(229,156,32)" fg:x="901" fg:w="1"/><text x="70.1491%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.8991%" y="453" width="0.0776%" height="15" fill="rgb(248,213,20)" fg:x="901" fg:w="1"/><text x="70.1491%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.9767%" y="485" width="0.1552%" height="15" fill="rgb(217,64,7)" fg:x="902" fg:w="2"/><text x="70.2267%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.9767%" y="469" width="0.1552%" height="15" fill="rgb(232,142,8)" fg:x="902" fg:w="2"/><text x="70.2267%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0543%" y="453" width="0.0776%" height="15" fill="rgb(224,92,44)" fg:x="903" fg:w="1"/><text x="70.3043%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="70.1319%" y="485" width="0.1552%" height="15" fill="rgb(214,169,17)" fg:x="904" fg:w="2"/><text x="70.3819%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynMessage&gt; (5 samples, 0.39%)</title><rect x="69.9767%" y="517" width="0.3879%" height="15" fill="rgb(210,59,37)" fg:x="902" fg:w="5"/><text x="70.2267%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.39%)</title><rect x="69.9767%" y="501" width="0.3879%" height="15" fill="rgb(214,116,48)" fg:x="902" fg:w="5"/><text x="70.2267%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="70.2870%" y="485" width="0.0776%" height="15" fill="rgb(244,191,6)" fg:x="906" fg:w="1"/><text x="70.5370%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.3646%" y="485" width="0.0776%" height="15" fill="rgb(241,50,52)" fg:x="907" fg:w="1"/><text x="70.6146%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3646%" y="469" width="0.0776%" height="15" fill="rgb(236,75,39)" fg:x="907" fg:w="1"/><text x="70.6146%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4422%" y="485" width="0.0776%" height="15" fill="rgb(236,99,0)" fg:x="908" fg:w="1"/><text x="70.6922%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5198%" y="453" width="0.0776%" height="15" fill="rgb(207,202,15)" fg:x="909" fg:w="1"/><text x="70.7698%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.5198%" y="485" width="0.1552%" height="15" fill="rgb(233,207,14)" fg:x="909" fg:w="2"/><text x="70.7698%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="70.5198%" y="469" width="0.1552%" height="15" fill="rgb(226,27,51)" fg:x="909" fg:w="2"/><text x="70.7698%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="70.5974%" y="453" width="0.0776%" height="15" fill="rgb(206,104,42)" fg:x="910" fg:w="1"/><text x="70.8474%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="70.5974%" y="437" width="0.0776%" height="15" fill="rgb(212,225,4)" fg:x="910" fg:w="1"/><text x="70.8474%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5974%" y="421" width="0.0776%" height="15" fill="rgb(233,96,42)" fg:x="910" fg:w="1"/><text x="70.8474%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.6749%" y="405" width="0.0776%" height="15" fill="rgb(229,21,32)" fg:x="911" fg:w="1"/><text x="70.9249%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.6749%" y="389" width="0.0776%" height="15" fill="rgb(226,216,24)" fg:x="911" fg:w="1"/><text x="70.9249%" y="399.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="70.6749%" y="373" width="0.0776%" height="15" fill="rgb(221,163,17)" fg:x="911" fg:w="1"/><text x="70.9249%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="70.6749%" y="357" width="0.0776%" height="15" fill="rgb(216,216,42)" fg:x="911" fg:w="1"/><text x="70.9249%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8301%" y="341" width="0.0776%" height="15" fill="rgb(240,118,7)" fg:x="913" fg:w="1"/><text x="71.0801%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8301%" y="325" width="0.0776%" height="15" fill="rgb(221,67,37)" fg:x="913" fg:w="1"/><text x="71.0801%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8301%" y="309" width="0.0776%" height="15" fill="rgb(241,32,44)" fg:x="913" fg:w="1"/><text x="71.0801%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.8301%" y="293" width="0.0776%" height="15" fill="rgb(235,204,43)" fg:x="913" fg:w="1"/><text x="71.0801%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.8301%" y="277" width="0.0776%" height="15" fill="rgb(213,116,10)" fg:x="913" fg:w="1"/><text x="71.0801%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.8301%" y="261" width="0.0776%" height="15" fill="rgb(239,15,48)" fg:x="913" fg:w="1"/><text x="71.0801%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.8301%" y="245" width="0.0776%" height="15" fill="rgb(207,123,36)" fg:x="913" fg:w="1"/><text x="71.0801%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.8301%" y="229" width="0.0776%" height="15" fill="rgb(209,103,30)" fg:x="913" fg:w="1"/><text x="71.0801%" y="239.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="70.9077%" y="293" width="0.1552%" height="15" fill="rgb(238,100,19)" fg:x="914" fg:w="2"/><text x="71.1577%" y="303.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="70.9077%" y="277" width="0.1552%" height="15" fill="rgb(244,30,14)" fg:x="914" fg:w="2"/><text x="71.1577%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.9077%" y="261" width="0.1552%" height="15" fill="rgb(249,174,6)" fg:x="914" fg:w="2"/><text x="71.1577%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.9077%" y="245" width="0.1552%" height="15" fill="rgb(235,213,41)" fg:x="914" fg:w="2"/><text x="71.1577%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.9077%" y="229" width="0.1552%" height="15" fill="rgb(213,118,6)" fg:x="914" fg:w="2"/><text x="71.1577%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.9077%" y="213" width="0.1552%" height="15" fill="rgb(235,44,51)" fg:x="914" fg:w="2"/><text x="71.1577%" y="223.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.9853%" y="197" width="0.0776%" height="15" fill="rgb(217,9,53)" fg:x="915" fg:w="1"/><text x="71.2353%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.9853%" y="181" width="0.0776%" height="15" fill="rgb(237,172,34)" fg:x="915" fg:w="1"/><text x="71.2353%" y="191.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.47%)</title><rect x="70.6749%" y="421" width="0.4655%" height="15" fill="rgb(206,206,11)" fg:x="911" fg:w="6"/><text x="70.9249%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="70.7525%" y="405" width="0.3879%" height="15" fill="rgb(214,149,29)" fg:x="912" fg:w="5"/><text x="71.0025%" y="415.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (5 samples, 0.39%)</title><rect x="70.7525%" y="389" width="0.3879%" height="15" fill="rgb(208,123,3)" fg:x="912" fg:w="5"/><text x="71.0025%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (5 samples, 0.39%)</title><rect x="70.7525%" y="373" width="0.3879%" height="15" fill="rgb(229,126,4)" fg:x="912" fg:w="5"/><text x="71.0025%" y="383.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.39%)</title><rect x="70.7525%" y="357" width="0.3879%" height="15" fill="rgb(222,92,36)" fg:x="912" fg:w="5"/><text x="71.0025%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.23%)</title><rect x="70.9077%" y="341" width="0.2327%" height="15" fill="rgb(216,39,41)" fg:x="914" fg:w="3"/><text x="71.1577%" y="351.50"></text></g><g><title>engine::internal::Entities::prepare_entity (3 samples, 0.23%)</title><rect x="70.9077%" y="325" width="0.2327%" height="15" fill="rgb(253,127,28)" fg:x="914" fg:w="3"/><text x="71.1577%" y="335.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.23%)</title><rect x="70.9077%" y="309" width="0.2327%" height="15" fill="rgb(249,152,51)" fg:x="914" fg:w="3"/><text x="71.1577%" y="319.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="71.0628%" y="293" width="0.0776%" height="15" fill="rgb(209,123,42)" fg:x="916" fg:w="1"/><text x="71.3128%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0628%" y="277" width="0.0776%" height="15" fill="rgb(241,118,22)" fg:x="916" fg:w="1"/><text x="71.3128%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0628%" y="261" width="0.0776%" height="15" fill="rgb(208,25,7)" fg:x="916" fg:w="1"/><text x="71.3128%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0628%" y="245" width="0.0776%" height="15" fill="rgb(243,144,39)" fg:x="916" fg:w="1"/><text x="71.3128%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0628%" y="229" width="0.0776%" height="15" fill="rgb(250,50,5)" fg:x="916" fg:w="1"/><text x="71.3128%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0628%" y="213" width="0.0776%" height="15" fill="rgb(207,67,11)" fg:x="916" fg:w="1"/><text x="71.3128%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0628%" y="197" width="0.0776%" height="15" fill="rgb(245,204,40)" fg:x="916" fg:w="1"/><text x="71.3128%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0628%" y="181" width="0.0776%" height="15" fill="rgb(238,228,24)" fg:x="916" fg:w="1"/><text x="71.3128%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0628%" y="165" width="0.0776%" height="15" fill="rgb(217,116,22)" fg:x="916" fg:w="1"/><text x="71.3128%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.0628%" y="149" width="0.0776%" height="15" fill="rgb(234,98,12)" fg:x="916" fg:w="1"/><text x="71.3128%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.0628%" y="133" width="0.0776%" height="15" fill="rgb(242,170,50)" fg:x="916" fg:w="1"/><text x="71.3128%" y="143.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="71.1404%" y="389" width="0.0776%" height="15" fill="rgb(235,7,5)" fg:x="917" fg:w="1"/><text x="71.3904%" y="399.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (9 samples, 0.70%)</title><rect x="70.6749%" y="437" width="0.6982%" height="15" fill="rgb(241,114,28)" fg:x="911" fg:w="9"/><text x="70.9249%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.23%)</title><rect x="71.1404%" y="421" width="0.2327%" height="15" fill="rgb(246,112,42)" fg:x="917" fg:w="3"/><text x="71.3904%" y="431.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.23%)</title><rect x="71.1404%" y="405" width="0.2327%" height="15" fill="rgb(248,228,14)" fg:x="917" fg:w="3"/><text x="71.3904%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.2180%" y="389" width="0.1552%" height="15" fill="rgb(208,133,18)" fg:x="918" fg:w="2"/><text x="71.4680%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.2180%" y="373" width="0.1552%" height="15" fill="rgb(207,35,49)" fg:x="918" fg:w="2"/><text x="71.4680%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="71.2180%" y="357" width="0.1552%" height="15" fill="rgb(205,68,36)" fg:x="918" fg:w="2"/><text x="71.4680%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.2956%" y="341" width="0.0776%" height="15" fill="rgb(245,62,40)" fg:x="919" fg:w="1"/><text x="71.5456%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.2956%" y="325" width="0.0776%" height="15" fill="rgb(228,27,24)" fg:x="919" fg:w="1"/><text x="71.5456%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.2956%" y="309" width="0.0776%" height="15" fill="rgb(253,19,12)" fg:x="919" fg:w="1"/><text x="71.5456%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.2956%" y="293" width="0.0776%" height="15" fill="rgb(232,28,20)" fg:x="919" fg:w="1"/><text x="71.5456%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.3732%" y="389" width="0.1552%" height="15" fill="rgb(218,35,51)" fg:x="920" fg:w="2"/><text x="71.6232%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.3732%" y="373" width="0.1552%" height="15" fill="rgb(212,90,40)" fg:x="920" fg:w="2"/><text x="71.6232%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.3732%" y="357" width="0.1552%" height="15" fill="rgb(220,172,12)" fg:x="920" fg:w="2"/><text x="71.6232%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.3732%" y="341" width="0.1552%" height="15" fill="rgb(226,159,20)" fg:x="920" fg:w="2"/><text x="71.6232%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.3732%" y="325" width="0.1552%" height="15" fill="rgb(234,205,16)" fg:x="920" fg:w="2"/><text x="71.6232%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="71.3732%" y="309" width="0.1552%" height="15" fill="rgb(207,9,39)" fg:x="920" fg:w="2"/><text x="71.6232%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="71.3732%" y="293" width="0.1552%" height="15" fill="rgb(249,143,15)" fg:x="920" fg:w="2"/><text x="71.6232%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="71.3732%" y="277" width="0.1552%" height="15" fill="rgb(253,133,29)" fg:x="920" fg:w="2"/><text x="71.6232%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="71.3732%" y="261" width="0.1552%" height="15" fill="rgb(221,187,0)" fg:x="920" fg:w="2"/><text x="71.6232%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="71.3732%" y="245" width="0.1552%" height="15" fill="rgb(205,204,26)" fg:x="920" fg:w="2"/><text x="71.6232%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="71.3732%" y="229" width="0.1552%" height="15" fill="rgb(224,68,54)" fg:x="920" fg:w="2"/><text x="71.6232%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="71.3732%" y="213" width="0.1552%" height="15" fill="rgb(209,67,4)" fg:x="920" fg:w="2"/><text x="71.6232%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="71.3732%" y="197" width="0.1552%" height="15" fill="rgb(228,229,18)" fg:x="920" fg:w="2"/><text x="71.6232%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="71.3732%" y="181" width="0.1552%" height="15" fill="rgb(231,89,13)" fg:x="920" fg:w="2"/><text x="71.6232%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="71.3732%" y="165" width="0.1552%" height="15" fill="rgb(210,182,18)" fg:x="920" fg:w="2"/><text x="71.6232%" y="175.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.5283%" y="309" width="0.0776%" height="15" fill="rgb(240,105,2)" fg:x="922" fg:w="1"/><text x="71.7783%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5283%" y="293" width="0.0776%" height="15" fill="rgb(207,170,50)" fg:x="922" fg:w="1"/><text x="71.7783%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5283%" y="277" width="0.0776%" height="15" fill="rgb(232,133,24)" fg:x="922" fg:w="1"/><text x="71.7783%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.5283%" y="261" width="0.0776%" height="15" fill="rgb(235,166,27)" fg:x="922" fg:w="1"/><text x="71.7783%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.5283%" y="245" width="0.0776%" height="15" fill="rgb(209,19,13)" fg:x="922" fg:w="1"/><text x="71.7783%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.5283%" y="229" width="0.0776%" height="15" fill="rgb(226,79,39)" fg:x="922" fg:w="1"/><text x="71.7783%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.5283%" y="213" width="0.0776%" height="15" fill="rgb(222,163,10)" fg:x="922" fg:w="1"/><text x="71.7783%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.5283%" y="197" width="0.0776%" height="15" fill="rgb(214,44,19)" fg:x="922" fg:w="1"/><text x="71.7783%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.5283%" y="181" width="0.0776%" height="15" fill="rgb(210,217,13)" fg:x="922" fg:w="1"/><text x="71.7783%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.5283%" y="165" width="0.0776%" height="15" fill="rgb(237,61,54)" fg:x="922" fg:w="1"/><text x="71.7783%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.5283%" y="149" width="0.0776%" height="15" fill="rgb(226,184,24)" fg:x="922" fg:w="1"/><text x="71.7783%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.5283%" y="133" width="0.0776%" height="15" fill="rgb(223,226,4)" fg:x="922" fg:w="1"/><text x="71.7783%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5283%" y="117" width="0.0776%" height="15" fill="rgb(210,26,41)" fg:x="922" fg:w="1"/><text x="71.7783%" y="127.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="71.6059%" y="293" width="0.0776%" height="15" fill="rgb(220,221,6)" fg:x="923" fg:w="1"/><text x="71.8559%" y="303.50"></text></g><g><title>engine::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="71.6835%" y="293" width="0.1552%" height="15" fill="rgb(225,89,49)" fg:x="924" fg:w="2"/><text x="71.9335%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="71.6835%" y="277" width="0.1552%" height="15" fill="rgb(218,70,45)" fg:x="924" fg:w="2"/><text x="71.9335%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.7611%" y="261" width="0.0776%" height="15" fill="rgb(238,166,21)" fg:x="925" fg:w="1"/><text x="72.0111%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="71.7611%" y="245" width="0.0776%" height="15" fill="rgb(224,141,44)" fg:x="925" fg:w="1"/><text x="72.0111%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7611%" y="229" width="0.0776%" height="15" fill="rgb(230,12,49)" fg:x="925" fg:w="1"/><text x="72.0111%" y="239.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="71.8386%" y="293" width="0.0776%" height="15" fill="rgb(212,174,12)" fg:x="926" fg:w="1"/><text x="72.0886%" y="303.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8386%" y="277" width="0.0776%" height="15" fill="rgb(246,67,9)" fg:x="926" fg:w="1"/><text x="72.0886%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8386%" y="261" width="0.0776%" height="15" fill="rgb(239,35,23)" fg:x="926" fg:w="1"/><text x="72.0886%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.0714%" y="165" width="0.0776%" height="15" fill="rgb(211,167,0)" fg:x="929" fg:w="1"/><text x="72.3214%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.0714%" y="149" width="0.0776%" height="15" fill="rgb(225,119,45)" fg:x="929" fg:w="1"/><text x="72.3214%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.0714%" y="133" width="0.0776%" height="15" fill="rgb(210,162,6)" fg:x="929" fg:w="1"/><text x="72.3214%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.0714%" y="117" width="0.0776%" height="15" fill="rgb(208,118,35)" fg:x="929" fg:w="1"/><text x="72.3214%" y="127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0714%" y="101" width="0.0776%" height="15" fill="rgb(239,4,53)" fg:x="929" fg:w="1"/><text x="72.3214%" y="111.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0714%" y="85" width="0.0776%" height="15" fill="rgb(213,130,21)" fg:x="929" fg:w="1"/><text x="72.3214%" y="95.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="72.0714%" y="213" width="0.1552%" height="15" fill="rgb(235,148,0)" fg:x="929" fg:w="2"/><text x="72.3214%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.0714%" y="197" width="0.1552%" height="15" fill="rgb(244,224,18)" fg:x="929" fg:w="2"/><text x="72.3214%" y="207.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.0714%" y="181" width="0.1552%" height="15" fill="rgb(211,214,4)" fg:x="929" fg:w="2"/><text x="72.3214%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1490%" y="165" width="0.0776%" height="15" fill="rgb(206,119,25)" fg:x="930" fg:w="1"/><text x="72.3990%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.1490%" y="149" width="0.0776%" height="15" fill="rgb(243,93,47)" fg:x="930" fg:w="1"/><text x="72.3990%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1490%" y="133" width="0.0776%" height="15" fill="rgb(224,194,6)" fg:x="930" fg:w="1"/><text x="72.3990%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.1490%" y="117" width="0.0776%" height="15" fill="rgb(243,229,6)" fg:x="930" fg:w="1"/><text x="72.3990%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.1490%" y="101" width="0.0776%" height="15" fill="rgb(207,23,50)" fg:x="930" fg:w="1"/><text x="72.3990%" y="111.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1490%" y="85" width="0.0776%" height="15" fill="rgb(253,192,32)" fg:x="930" fg:w="1"/><text x="72.3990%" y="95.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (5 samples, 0.39%)</title><rect x="71.9162%" y="277" width="0.3879%" height="15" fill="rgb(213,21,6)" fg:x="927" fg:w="5"/><text x="72.1662%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (5 samples, 0.39%)</title><rect x="71.9162%" y="261" width="0.3879%" height="15" fill="rgb(243,151,13)" fg:x="927" fg:w="5"/><text x="72.1662%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.39%)</title><rect x="71.9162%" y="245" width="0.3879%" height="15" fill="rgb(233,165,41)" fg:x="927" fg:w="5"/><text x="72.1662%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.39%)</title><rect x="71.9162%" y="229" width="0.3879%" height="15" fill="rgb(246,176,45)" fg:x="927" fg:w="5"/><text x="72.1662%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.2265%" y="213" width="0.0776%" height="15" fill="rgb(217,170,52)" fg:x="931" fg:w="1"/><text x="72.4765%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2265%" y="197" width="0.0776%" height="15" fill="rgb(214,203,54)" fg:x="931" fg:w="1"/><text x="72.4765%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.2265%" y="181" width="0.0776%" height="15" fill="rgb(248,215,49)" fg:x="931" fg:w="1"/><text x="72.4765%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2265%" y="165" width="0.0776%" height="15" fill="rgb(208,46,10)" fg:x="931" fg:w="1"/><text x="72.4765%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3041%" y="229" width="0.0776%" height="15" fill="rgb(254,5,31)" fg:x="932" fg:w="1"/><text x="72.5541%" y="239.50"></text></g><g><title>plugins_core::tools::get_contained_keys (15 samples, 1.16%)</title><rect x="71.3732%" y="437" width="1.1637%" height="15" fill="rgb(222,104,33)" fg:x="920" fg:w="15"/><text x="71.6232%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (15 samples, 1.16%)</title><rect x="71.3732%" y="421" width="1.1637%" height="15" fill="rgb(248,49,16)" fg:x="920" fg:w="15"/><text x="71.6232%" y="431.50"></text></g><g><title>kernel::model::Entity::load_scope (15 samples, 1.16%)</title><rect x="71.3732%" y="405" width="1.1637%" height="15" fill="rgb(232,198,41)" fg:x="920" fg:w="15"/><text x="71.6232%" y="415.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (13 samples, 1.01%)</title><rect x="71.5283%" y="389" width="1.0085%" height="15" fill="rgb(214,125,3)" fg:x="922" fg:w="13"/><text x="71.7783%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.01%)</title><rect x="71.5283%" y="373" width="1.0085%" height="15" fill="rgb(229,220,28)" fg:x="922" fg:w="13"/><text x="71.7783%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.01%)</title><rect x="71.5283%" y="357" width="1.0085%" height="15" fill="rgb(222,64,37)" fg:x="922" fg:w="13"/><text x="71.7783%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.01%)</title><rect x="71.5283%" y="341" width="1.0085%" height="15" fill="rgb(249,184,13)" fg:x="922" fg:w="13"/><text x="71.7783%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (13 samples, 1.01%)</title><rect x="71.5283%" y="325" width="1.0085%" height="15" fill="rgb(252,176,6)" fg:x="922" fg:w="13"/><text x="71.7783%" y="335.50"></text></g><g><title>engine::internal::Entities::prepare_entity (12 samples, 0.93%)</title><rect x="71.6059%" y="309" width="0.9310%" height="15" fill="rgb(228,153,7)" fg:x="923" fg:w="12"/><text x="71.8559%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity (8 samples, 0.62%)</title><rect x="71.9162%" y="293" width="0.6206%" height="15" fill="rgb(242,193,5)" fg:x="927" fg:w="8"/><text x="72.1662%" y="303.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.23%)</title><rect x="72.3041%" y="277" width="0.2327%" height="15" fill="rgb(232,140,9)" fg:x="932" fg:w="3"/><text x="72.5541%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.23%)</title><rect x="72.3041%" y="261" width="0.2327%" height="15" fill="rgb(213,222,16)" fg:x="932" fg:w="3"/><text x="72.5541%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="72.3041%" y="245" width="0.2327%" height="15" fill="rgb(222,75,50)" fg:x="932" fg:w="3"/><text x="72.5541%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="72.3817%" y="229" width="0.1552%" height="15" fill="rgb(205,180,2)" fg:x="933" fg:w="2"/><text x="72.6317%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.4593%" y="213" width="0.0776%" height="15" fill="rgb(216,34,7)" fg:x="934" fg:w="1"/><text x="72.7093%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.4593%" y="197" width="0.0776%" height="15" fill="rgb(253,16,32)" fg:x="934" fg:w="1"/><text x="72.7093%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.4593%" y="181" width="0.0776%" height="15" fill="rgb(208,97,28)" fg:x="934" fg:w="1"/><text x="72.7093%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="72.4593%" y="165" width="0.0776%" height="15" fill="rgb(225,92,11)" fg:x="934" fg:w="1"/><text x="72.7093%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.4593%" y="149" width="0.0776%" height="15" fill="rgb(243,38,12)" fg:x="934" fg:w="1"/><text x="72.7093%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4593%" y="133" width="0.0776%" height="15" fill="rgb(208,139,16)" fg:x="934" fg:w="1"/><text x="72.7093%" y="143.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4593%" y="117" width="0.0776%" height="15" fill="rgb(227,24,9)" fg:x="934" fg:w="1"/><text x="72.7093%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26 samples, 2.02%)</title><rect x="70.6749%" y="469" width="2.0171%" height="15" fill="rgb(206,62,11)" fg:x="911" fg:w="26"/><text x="70.9249%" y="479.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26 samples, 2.02%)</title><rect x="70.6749%" y="453" width="2.0171%" height="15" fill="rgb(228,134,27)" fg:x="911" fg:w="26"/><text x="70.9249%" y="463.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="72.5369%" y="437" width="0.1552%" height="15" fill="rgb(205,55,33)" fg:x="935" fg:w="2"/><text x="72.7869%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="72.5369%" y="421" width="0.1552%" height="15" fill="rgb(243,75,43)" fg:x="935" fg:w="2"/><text x="72.7869%" y="431.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="72.5369%" y="405" width="0.1552%" height="15" fill="rgb(223,27,42)" fg:x="935" fg:w="2"/><text x="72.7869%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6144%" y="389" width="0.0776%" height="15" fill="rgb(232,189,33)" fg:x="936" fg:w="1"/><text x="72.8644%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6144%" y="373" width="0.0776%" height="15" fill="rgb(210,9,39)" fg:x="936" fg:w="1"/><text x="72.8644%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6144%" y="357" width="0.0776%" height="15" fill="rgb(242,85,26)" fg:x="936" fg:w="1"/><text x="72.8644%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6144%" y="341" width="0.0776%" height="15" fill="rgb(248,44,4)" fg:x="936" fg:w="1"/><text x="72.8644%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.7696%" y="277" width="0.0776%" height="15" fill="rgb(250,96,46)" fg:x="938" fg:w="1"/><text x="73.0196%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.7696%" y="261" width="0.0776%" height="15" fill="rgb(229,116,26)" fg:x="938" fg:w="1"/><text x="73.0196%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="72.7696%" y="245" width="0.0776%" height="15" fill="rgb(246,94,34)" fg:x="938" fg:w="1"/><text x="73.0196%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="72.7696%" y="229" width="0.0776%" height="15" fill="rgb(251,73,21)" fg:x="938" fg:w="1"/><text x="73.0196%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="72.7696%" y="213" width="0.0776%" height="15" fill="rgb(254,121,25)" fg:x="938" fg:w="1"/><text x="73.0196%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="72.7696%" y="197" width="0.0776%" height="15" fill="rgb(215,161,49)" fg:x="938" fg:w="1"/><text x="73.0196%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="72.7696%" y="181" width="0.0776%" height="15" fill="rgb(221,43,13)" fg:x="938" fg:w="1"/><text x="73.0196%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="72.7696%" y="165" width="0.0776%" height="15" fill="rgb(249,5,37)" fg:x="938" fg:w="1"/><text x="73.0196%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.7696%" y="149" width="0.0776%" height="15" fill="rgb(226,25,44)" fg:x="938" fg:w="1"/><text x="73.0196%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="72.7696%" y="133" width="0.0776%" height="15" fill="rgb(238,189,16)" fg:x="938" fg:w="1"/><text x="73.0196%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.7696%" y="117" width="0.0776%" height="15" fill="rgb(251,186,8)" fg:x="938" fg:w="1"/><text x="73.0196%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7696%" y="101" width="0.0776%" height="15" fill="rgb(254,34,31)" fg:x="938" fg:w="1"/><text x="73.0196%" y="111.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (3 samples, 0.23%)</title><rect x="72.7696%" y="421" width="0.2327%" height="15" fill="rgb(225,215,27)" fg:x="938" fg:w="3"/><text x="73.0196%" y="431.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.23%)</title><rect x="72.7696%" y="405" width="0.2327%" height="15" fill="rgb(221,192,48)" fg:x="938" fg:w="3"/><text x="73.0196%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.23%)</title><rect x="72.7696%" y="389" width="0.2327%" height="15" fill="rgb(219,137,20)" fg:x="938" fg:w="3"/><text x="73.0196%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.23%)</title><rect x="72.7696%" y="373" width="0.2327%" height="15" fill="rgb(219,84,11)" fg:x="938" fg:w="3"/><text x="73.0196%" y="383.50"></text></g><g><title>core::fmt::write (3 samples, 0.23%)</title><rect x="72.7696%" y="357" width="0.2327%" height="15" fill="rgb(224,10,23)" fg:x="938" fg:w="3"/><text x="73.0196%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.23%)</title><rect x="72.7696%" y="341" width="0.2327%" height="15" fill="rgb(248,22,39)" fg:x="938" fg:w="3"/><text x="73.0196%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (3 samples, 0.23%)</title><rect x="72.7696%" y="325" width="0.2327%" height="15" fill="rgb(212,154,20)" fg:x="938" fg:w="3"/><text x="73.0196%" y="335.50"></text></g><g><title>core::fmt::Formatter::write_fmt (3 samples, 0.23%)</title><rect x="72.7696%" y="309" width="0.2327%" height="15" fill="rgb(236,199,50)" fg:x="938" fg:w="3"/><text x="73.0196%" y="319.50"></text></g><g><title>core::fmt::write (3 samples, 0.23%)</title><rect x="72.7696%" y="293" width="0.2327%" height="15" fill="rgb(211,9,17)" fg:x="938" fg:w="3"/><text x="73.0196%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="72.8472%" y="277" width="0.1552%" height="15" fill="rgb(243,216,36)" fg:x="939" fg:w="2"/><text x="73.0972%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="72.8472%" y="261" width="0.1552%" height="15" fill="rgb(250,2,10)" fg:x="939" fg:w="2"/><text x="73.0972%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="72.8472%" y="245" width="0.1552%" height="15" fill="rgb(226,50,48)" fg:x="939" fg:w="2"/><text x="73.0972%" y="255.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="72.8472%" y="229" width="0.1552%" height="15" fill="rgb(243,81,16)" fg:x="939" fg:w="2"/><text x="73.0972%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="72.8472%" y="213" width="0.1552%" height="15" fill="rgb(250,14,2)" fg:x="939" fg:w="2"/><text x="73.0972%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="72.8472%" y="197" width="0.1552%" height="15" fill="rgb(233,135,29)" fg:x="939" fg:w="2"/><text x="73.0972%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="72.8472%" y="181" width="0.1552%" height="15" fill="rgb(224,64,43)" fg:x="939" fg:w="2"/><text x="73.0972%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="72.8472%" y="165" width="0.1552%" height="15" fill="rgb(238,84,13)" fg:x="939" fg:w="2"/><text x="73.0972%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="72.8472%" y="149" width="0.1552%" height="15" fill="rgb(253,48,26)" fg:x="939" fg:w="2"/><text x="73.0972%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="72.8472%" y="133" width="0.1552%" height="15" fill="rgb(205,223,31)" fg:x="939" fg:w="2"/><text x="73.0972%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="72.8472%" y="117" width="0.1552%" height="15" fill="rgb(221,41,32)" fg:x="939" fg:w="2"/><text x="73.0972%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="72.8472%" y="101" width="0.1552%" height="15" fill="rgb(213,158,31)" fg:x="939" fg:w="2"/><text x="73.0972%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.16%)</title><rect x="72.8472%" y="85" width="0.1552%" height="15" fill="rgb(245,126,43)" fg:x="939" fg:w="2"/><text x="73.0972%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.16%)</title><rect x="72.8472%" y="69" width="0.1552%" height="15" fill="rgb(227,7,22)" fg:x="939" fg:w="2"/><text x="73.0972%" y="79.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.16%)</title><rect x="72.8472%" y="53" width="0.1552%" height="15" fill="rgb(252,90,44)" fg:x="939" fg:w="2"/><text x="73.0972%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="72.8472%" y="37" width="0.1552%" height="15" fill="rgb(253,91,0)" fg:x="939" fg:w="2"/><text x="73.0972%" y="47.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="73.5454%" y="213" width="0.1552%" height="15" fill="rgb(252,175,49)" fg:x="948" fg:w="2"/><text x="73.7954%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="73.5454%" y="197" width="0.1552%" height="15" fill="rgb(246,150,1)" fg:x="948" fg:w="2"/><text x="73.7954%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="73.5454%" y="181" width="0.1552%" height="15" fill="rgb(241,192,25)" fg:x="948" fg:w="2"/><text x="73.7954%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.5454%" y="165" width="0.1552%" height="15" fill="rgb(239,187,11)" fg:x="948" fg:w="2"/><text x="73.7954%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.7005%" y="213" width="0.0776%" height="15" fill="rgb(218,202,51)" fg:x="950" fg:w="1"/><text x="73.9505%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="73.3902%" y="245" width="0.4655%" height="15" fill="rgb(225,176,8)" fg:x="946" fg:w="6"/><text x="73.6402%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.47%)</title><rect x="73.3902%" y="229" width="0.4655%" height="15" fill="rgb(219,122,41)" fg:x="946" fg:w="6"/><text x="73.6402%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.7781%" y="213" width="0.0776%" height="15" fill="rgb(248,140,20)" fg:x="951" fg:w="1"/><text x="74.0281%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.7781%" y="197" width="0.0776%" height="15" fill="rgb(245,41,37)" fg:x="951" fg:w="1"/><text x="74.0281%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.8557%" y="229" width="0.0776%" height="15" fill="rgb(235,82,39)" fg:x="952" fg:w="1"/><text x="74.1057%" y="239.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="73.8557%" y="213" width="0.0776%" height="15" fill="rgb(230,108,42)" fg:x="952" fg:w="1"/><text x="74.1057%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="73.8557%" y="197" width="0.0776%" height="15" fill="rgb(215,150,50)" fg:x="952" fg:w="1"/><text x="74.1057%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="73.8557%" y="181" width="0.0776%" height="15" fill="rgb(233,212,5)" fg:x="952" fg:w="1"/><text x="74.1057%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8557%" y="165" width="0.0776%" height="15" fill="rgb(245,80,22)" fg:x="952" fg:w="1"/><text x="74.1057%" y="175.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (10 samples, 0.78%)</title><rect x="73.2351%" y="261" width="0.7758%" height="15" fill="rgb(238,129,16)" fg:x="944" fg:w="10"/><text x="73.4851%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="73.8557%" y="245" width="0.1552%" height="15" fill="rgb(240,19,0)" fg:x="952" fg:w="2"/><text x="74.1057%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="73.9333%" y="229" width="0.0776%" height="15" fill="rgb(232,42,35)" fg:x="953" fg:w="1"/><text x="74.1833%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="73.9333%" y="213" width="0.0776%" height="15" fill="rgb(223,130,24)" fg:x="953" fg:w="1"/><text x="74.1833%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.93%)</title><rect x="73.1575%" y="277" width="0.9310%" height="15" fill="rgb(237,16,22)" fg:x="943" fg:w="12"/><text x="73.4075%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.0109%" y="261" width="0.0776%" height="15" fill="rgb(248,192,20)" fg:x="954" fg:w="1"/><text x="74.2609%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.0109%" y="245" width="0.0776%" height="15" fill="rgb(233,167,2)" fg:x="954" fg:w="1"/><text x="74.2609%" y="255.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (13 samples, 1.01%)</title><rect x="73.1575%" y="309" width="1.0085%" height="15" fill="rgb(252,71,44)" fg:x="943" fg:w="13"/><text x="73.4075%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.01%)</title><rect x="73.1575%" y="293" width="1.0085%" height="15" fill="rgb(238,37,47)" fg:x="943" fg:w="13"/><text x="73.4075%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.0884%" y="277" width="0.0776%" height="15" fill="rgb(214,202,54)" fg:x="955" fg:w="1"/><text x="74.3384%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0884%" y="261" width="0.0776%" height="15" fill="rgb(254,165,40)" fg:x="955" fg:w="1"/><text x="74.3384%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 1.16%)</title><rect x="73.0799%" y="325" width="1.1637%" height="15" fill="rgb(246,173,38)" fg:x="942" fg:w="15"/><text x="73.3299%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1660%" y="309" width="0.0776%" height="15" fill="rgb(215,3,27)" fg:x="956" fg:w="1"/><text x="74.4160%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.1660%" y="293" width="0.0776%" height="15" fill="rgb(239,169,51)" fg:x="956" fg:w="1"/><text x="74.4160%" y="303.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (20 samples, 1.55%)</title><rect x="73.0799%" y="357" width="1.5516%" height="15" fill="rgb(212,5,25)" fg:x="942" fg:w="20"/><text x="73.3299%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 1.55%)</title><rect x="73.0799%" y="341" width="1.5516%" height="15" fill="rgb(243,45,17)" fg:x="942" fg:w="20"/><text x="73.3299%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.39%)</title><rect x="74.2436%" y="325" width="0.3879%" height="15" fill="rgb(242,97,9)" fg:x="957" fg:w="5"/><text x="74.4936%" y="335.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="74.3988%" y="309" width="0.2327%" height="15" fill="rgb(228,71,31)" fg:x="959" fg:w="3"/><text x="74.6488%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 1.71%)</title><rect x="73.0023%" y="373" width="1.7067%" height="15" fill="rgb(252,184,16)" fg:x="941" fg:w="22"/><text x="73.2523%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.6315%" y="357" width="0.0776%" height="15" fill="rgb(236,169,46)" fg:x="962" fg:w="1"/><text x="74.8815%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.6315%" y="341" width="0.0776%" height="15" fill="rgb(207,17,47)" fg:x="962" fg:w="1"/><text x="74.8815%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.6315%" y="325" width="0.0776%" height="15" fill="rgb(206,201,28)" fg:x="962" fg:w="1"/><text x="74.8815%" y="335.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (25 samples, 1.94%)</title><rect x="73.0023%" y="405" width="1.9395%" height="15" fill="rgb(224,184,23)" fg:x="941" fg:w="25"/><text x="73.2523%" y="415.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (25 samples, 1.94%)</title><rect x="73.0023%" y="389" width="1.9395%" height="15" fill="rgb(208,139,48)" fg:x="941" fg:w="25"/><text x="73.2523%" y="399.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.23%)</title><rect x="74.7091%" y="373" width="0.2327%" height="15" fill="rgb(208,130,10)" fg:x="963" fg:w="3"/><text x="74.9591%" y="383.50"></text></g><g><title>__libc_malloc (3 samples, 0.23%)</title><rect x="74.7091%" y="357" width="0.2327%" height="15" fill="rgb(211,213,45)" fg:x="963" fg:w="3"/><text x="74.9591%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.9418%" y="357" width="0.0776%" height="15" fill="rgb(235,100,30)" fg:x="966" fg:w="1"/><text x="75.1918%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0194%" y="357" width="0.0776%" height="15" fill="rgb(206,144,31)" fg:x="967" fg:w="1"/><text x="75.2694%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0970%" y="357" width="0.0776%" height="15" fill="rgb(224,200,26)" fg:x="968" fg:w="1"/><text x="75.3470%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="75.1746%" y="357" width="0.0776%" height="15" fill="rgb(247,104,53)" fg:x="969" fg:w="1"/><text x="75.4246%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2521%" y="325" width="0.0776%" height="15" fill="rgb(220,14,17)" fg:x="970" fg:w="1"/><text x="75.5021%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3297%" y="309" width="0.0776%" height="15" fill="rgb(230,140,40)" fg:x="971" fg:w="1"/><text x="75.5797%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3297%" y="293" width="0.0776%" height="15" fill="rgb(229,2,41)" fg:x="971" fg:w="1"/><text x="75.5797%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4073%" y="293" width="0.0776%" height="15" fill="rgb(232,89,16)" fg:x="972" fg:w="1"/><text x="75.6573%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4073%" y="277" width="0.0776%" height="15" fill="rgb(247,59,52)" fg:x="972" fg:w="1"/><text x="75.6573%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4073%" y="261" width="0.0776%" height="15" fill="rgb(226,110,21)" fg:x="972" fg:w="1"/><text x="75.6573%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4073%" y="245" width="0.0776%" height="15" fill="rgb(224,176,43)" fg:x="972" fg:w="1"/><text x="75.6573%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4073%" y="229" width="0.0776%" height="15" fill="rgb(221,73,6)" fg:x="972" fg:w="1"/><text x="75.6573%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4073%" y="213" width="0.0776%" height="15" fill="rgb(232,78,19)" fg:x="972" fg:w="1"/><text x="75.6573%" y="223.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (5 samples, 0.39%)</title><rect x="75.2521%" y="357" width="0.3879%" height="15" fill="rgb(233,112,48)" fg:x="970" fg:w="5"/><text x="75.5021%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="75.2521%" y="341" width="0.3879%" height="15" fill="rgb(243,131,47)" fg:x="970" fg:w="5"/><text x="75.5021%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.31%)</title><rect x="75.3297%" y="325" width="0.3103%" height="15" fill="rgb(226,51,1)" fg:x="971" fg:w="4"/><text x="75.5797%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.23%)</title><rect x="75.4073%" y="309" width="0.2327%" height="15" fill="rgb(247,58,7)" fg:x="972" fg:w="3"/><text x="75.6573%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.4849%" y="293" width="0.1552%" height="15" fill="rgb(209,7,32)" fg:x="973" fg:w="2"/><text x="75.7349%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6400%" y="309" width="0.0776%" height="15" fill="rgb(209,39,41)" fg:x="975" fg:w="1"/><text x="75.8900%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.6400%" y="293" width="0.0776%" height="15" fill="rgb(226,182,46)" fg:x="975" fg:w="1"/><text x="75.8900%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6400%" y="277" width="0.0776%" height="15" fill="rgb(230,219,10)" fg:x="975" fg:w="1"/><text x="75.8900%" y="287.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="75.7176%" y="309" width="0.1552%" height="15" fill="rgb(227,175,30)" fg:x="976" fg:w="2"/><text x="75.9676%" y="319.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="75.7176%" y="293" width="0.1552%" height="15" fill="rgb(217,2,50)" fg:x="976" fg:w="2"/><text x="75.9676%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="75.9503%" y="293" width="0.1552%" height="15" fill="rgb(229,160,0)" fg:x="979" fg:w="2"/><text x="76.2003%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0279%" y="277" width="0.0776%" height="15" fill="rgb(207,78,37)" fg:x="980" fg:w="1"/><text x="76.2779%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (71 samples, 5.51%)</title><rect x="70.6749%" y="485" width="5.5081%" height="15" fill="rgb(225,57,0)" fg:x="911" fg:w="71"/><text x="70.9249%" y="495.50">core::i..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (45 samples, 3.49%)</title><rect x="72.6920%" y="469" width="3.4911%" height="15" fill="rgb(232,154,2)" fg:x="937" fg:w="45"/><text x="72.9420%" y="479.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (45 samples, 3.49%)</title><rect x="72.6920%" y="453" width="3.4911%" height="15" fill="rgb(241,212,25)" fg:x="937" fg:w="45"/><text x="72.9420%" y="463.50">&lt;co..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (45 samples, 3.49%)</title><rect x="72.6920%" y="437" width="3.4911%" height="15" fill="rgb(226,69,20)" fg:x="937" fg:w="45"/><text x="72.9420%" y="447.50">plu..</text></g><g><title>&lt;plugins_rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (41 samples, 3.18%)</title><rect x="73.0023%" y="421" width="3.1808%" height="15" fill="rgb(247,184,54)" fg:x="941" fg:w="41"/><text x="73.2523%" y="431.50">&lt;pl..</text></g><g><title>kernel::model::EntityPtr::to_json_value (16 samples, 1.24%)</title><rect x="74.9418%" y="405" width="1.2413%" height="15" fill="rgb(210,145,0)" fg:x="966" fg:w="16"/><text x="75.1918%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (16 samples, 1.24%)</title><rect x="74.9418%" y="389" width="1.2413%" height="15" fill="rgb(253,82,12)" fg:x="966" fg:w="16"/><text x="75.1918%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.24%)</title><rect x="74.9418%" y="373" width="1.2413%" height="15" fill="rgb(245,42,11)" fg:x="966" fg:w="16"/><text x="75.1918%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.54%)</title><rect x="75.6400%" y="357" width="0.5431%" height="15" fill="rgb(219,147,32)" fg:x="975" fg:w="7"/><text x="75.8900%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (7 samples, 0.54%)</title><rect x="75.6400%" y="341" width="0.5431%" height="15" fill="rgb(246,12,7)" fg:x="975" fg:w="7"/><text x="75.8900%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.54%)</title><rect x="75.6400%" y="325" width="0.5431%" height="15" fill="rgb(243,50,9)" fg:x="975" fg:w="7"/><text x="75.8900%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.31%)</title><rect x="75.8728%" y="309" width="0.3103%" height="15" fill="rgb(219,149,6)" fg:x="978" fg:w="4"/><text x="76.1228%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1055%" y="293" width="0.0776%" height="15" fill="rgb(241,51,42)" fg:x="981" fg:w="1"/><text x="76.3555%" y="303.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (76 samples, 5.90%)</title><rect x="70.3646%" y="501" width="5.8960%" height="15" fill="rgb(226,128,27)" fg:x="907" fg:w="76"/><text x="70.6146%" y="511.50">&lt;plugin..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1831%" y="485" width="0.0776%" height="15" fill="rgb(244,144,4)" fg:x="982" fg:w="1"/><text x="76.4331%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="76.1831%" y="469" width="0.0776%" height="15" fill="rgb(221,4,13)" fg:x="982" fg:w="1"/><text x="76.4331%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (984 samples, 76.34%)</title><rect x="0.0000%" y="629" width="76.3382%" height="15" fill="rgb(208,170,28)" fg:x="0" fg:w="984"/><text x="0.2500%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (984 samples, 76.34%)</title><rect x="0.0000%" y="613" width="76.3382%" height="15" fill="rgb(226,131,13)" fg:x="0" fg:w="984"/><text x="0.2500%" y="623.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (984 samples, 76.34%)</title><rect x="0.0000%" y="597" width="76.3382%" height="15" fill="rgb(215,72,41)" fg:x="0" fg:w="984"/><text x="0.2500%" y="607.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (881 samples, 68.35%)</title><rect x="7.9907%" y="581" width="68.3476%" height="15" fill="rgb(243,108,20)" fg:x="103" fg:w="881"/><text x="8.2407%" y="591.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (881 samples, 68.35%)</title><rect x="7.9907%" y="565" width="68.3476%" height="15" fill="rgb(230,189,17)" fg:x="103" fg:w="881"/><text x="8.2407%" y="575.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (82 samples, 6.36%)</title><rect x="69.9767%" y="549" width="6.3615%" height="15" fill="rgb(220,50,17)" fg:x="902" fg:w="82"/><text x="70.2267%" y="559.50">kernel::..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (82 samples, 6.36%)</title><rect x="69.9767%" y="533" width="6.3615%" height="15" fill="rgb(248,152,48)" fg:x="902" fg:w="82"/><text x="70.2267%" y="543.50">&lt;plugins..</text></g><g><title>plugins_rpc::querying::have_surroundings (77 samples, 5.97%)</title><rect x="70.3646%" y="517" width="5.9736%" height="15" fill="rgb(244,91,11)" fg:x="907" fg:w="77"/><text x="70.6146%" y="527.50">plugins_..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.2607%" y="501" width="0.0776%" height="15" fill="rgb(220,157,5)" fg:x="983" fg:w="1"/><text x="76.5107%" y="511.50"></text></g><g><title>plugins_rpc_proto::&lt;impl core::convert::Into&lt;plugins_rpc_proto::EntityKey&gt; for kernel::model::EntityKey&gt;::into (1 samples, 0.08%)</title><rect x="76.2607%" y="485" width="0.0776%" height="15" fill="rgb(253,137,8)" fg:x="983" fg:w="1"/><text x="76.5107%" y="495.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;kernel::model::EntityKey&gt; for alloc::string::String&gt;::from (1 samples, 0.08%)</title><rect x="76.2607%" y="469" width="0.0776%" height="15" fill="rgb(217,137,51)" fg:x="983" fg:w="1"/><text x="76.5107%" y="479.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.08%)</title><rect x="76.2607%" y="453" width="0.0776%" height="15" fill="rgb(218,209,53)" fg:x="983" fg:w="1"/><text x="76.5107%" y="463.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.3382%" y="581" width="0.0776%" height="15" fill="rgb(249,137,25)" fg:x="984" fg:w="1"/><text x="76.5882%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (1 samples, 0.08%)</title><rect x="76.3382%" y="565" width="0.0776%" height="15" fill="rgb(239,155,26)" fg:x="984" fg:w="1"/><text x="76.5882%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.3382%" y="549" width="0.0776%" height="15" fill="rgb(227,85,46)" fg:x="984" fg:w="1"/><text x="76.5882%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="76.3382%" y="533" width="0.0776%" height="15" fill="rgb(251,107,43)" fg:x="984" fg:w="1"/><text x="76.5882%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.3382%" y="517" width="0.0776%" height="15" fill="rgb(234,170,33)" fg:x="984" fg:w="1"/><text x="76.5882%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.3382%" y="501" width="0.0776%" height="15" fill="rgb(206,29,35)" fg:x="984" fg:w="1"/><text x="76.5882%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.4158%" y="437" width="0.0776%" height="15" fill="rgb(227,138,25)" fg:x="985" fg:w="1"/><text x="76.6658%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="76.4158%" y="549" width="0.1552%" height="15" fill="rgb(249,131,35)" fg:x="985" fg:w="2"/><text x="76.6658%" y="559.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="76.4158%" y="533" width="0.1552%" height="15" fill="rgb(239,6,40)" fg:x="985" fg:w="2"/><text x="76.6658%" y="543.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="76.4158%" y="517" width="0.1552%" height="15" fill="rgb(246,136,47)" fg:x="985" fg:w="2"/><text x="76.6658%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="76.4158%" y="501" width="0.1552%" height="15" fill="rgb(253,58,26)" fg:x="985" fg:w="2"/><text x="76.6658%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="76.4158%" y="485" width="0.1552%" height="15" fill="rgb(237,141,10)" fg:x="985" fg:w="2"/><text x="76.6658%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="76.4158%" y="469" width="0.1552%" height="15" fill="rgb(234,156,12)" fg:x="985" fg:w="2"/><text x="76.6658%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="76.4158%" y="453" width="0.1552%" height="15" fill="rgb(243,224,36)" fg:x="985" fg:w="2"/><text x="76.6658%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.4934%" y="437" width="0.0776%" height="15" fill="rgb(205,229,51)" fg:x="986" fg:w="1"/><text x="76.7434%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4934%" y="421" width="0.0776%" height="15" fill="rgb(223,189,4)" fg:x="986" fg:w="1"/><text x="76.7434%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="76.4934%" y="405" width="0.0776%" height="15" fill="rgb(249,167,54)" fg:x="986" fg:w="1"/><text x="76.7434%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4934%" y="389" width="0.0776%" height="15" fill="rgb(218,34,28)" fg:x="986" fg:w="1"/><text x="76.7434%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.4934%" y="373" width="0.0776%" height="15" fill="rgb(232,109,42)" fg:x="986" fg:w="1"/><text x="76.7434%" y="383.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (5 samples, 0.39%)</title><rect x="76.4158%" y="581" width="0.3879%" height="15" fill="rgb(248,214,46)" fg:x="985" fg:w="5"/><text x="76.6658%" y="591.50"></text></g><g><title>engine::session::Session::new (5 samples, 0.39%)</title><rect x="76.4158%" y="565" width="0.3879%" height="15" fill="rgb(244,216,40)" fg:x="985" fg:w="5"/><text x="76.6658%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (3 samples, 0.23%)</title><rect x="76.5710%" y="549" width="0.2327%" height="15" fill="rgb(231,226,31)" fg:x="987" fg:w="3"/><text x="76.8210%" y="559.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (3 samples, 0.23%)</title><rect x="76.5710%" y="533" width="0.2327%" height="15" fill="rgb(238,38,43)" fg:x="987" fg:w="3"/><text x="76.8210%" y="543.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.23%)</title><rect x="76.5710%" y="517" width="0.2327%" height="15" fill="rgb(208,88,43)" fg:x="987" fg:w="3"/><text x="76.8210%" y="527.50"></text></g><g><title>dlopen (3 samples, 0.23%)</title><rect x="76.5710%" y="501" width="0.2327%" height="15" fill="rgb(205,136,37)" fg:x="987" fg:w="3"/><text x="76.8210%" y="511.50"></text></g><g><title>_dl_catch_error (3 samples, 0.23%)</title><rect x="76.5710%" y="485" width="0.2327%" height="15" fill="rgb(237,34,14)" fg:x="987" fg:w="3"/><text x="76.8210%" y="495.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.23%)</title><rect x="76.5710%" y="469" width="0.2327%" height="15" fill="rgb(236,193,44)" fg:x="987" fg:w="3"/><text x="76.8210%" y="479.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.23%)</title><rect x="76.5710%" y="453" width="0.2327%" height="15" fill="rgb(231,48,10)" fg:x="987" fg:w="3"/><text x="76.8210%" y="463.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.23%)</title><rect x="76.5710%" y="437" width="0.2327%" height="15" fill="rgb(213,141,34)" fg:x="987" fg:w="3"/><text x="76.8210%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7261%" y="421" width="0.0776%" height="15" fill="rgb(249,130,34)" fg:x="989" fg:w="1"/><text x="76.9761%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="76.8037%" y="453" width="0.0776%" height="15" fill="rgb(219,42,41)" fg:x="990" fg:w="1"/><text x="77.0537%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8037%" y="437" width="0.0776%" height="15" fill="rgb(224,100,54)" fg:x="990" fg:w="1"/><text x="77.0537%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8037%" y="421" width="0.0776%" height="15" fill="rgb(229,200,27)" fg:x="990" fg:w="1"/><text x="77.0537%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.8037%" y="405" width="0.0776%" height="15" fill="rgb(217,118,10)" fg:x="990" fg:w="1"/><text x="77.0537%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.8037%" y="389" width="0.0776%" height="15" fill="rgb(206,22,3)" fg:x="990" fg:w="1"/><text x="77.0537%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.8037%" y="373" width="0.0776%" height="15" fill="rgb(232,163,46)" fg:x="990" fg:w="1"/><text x="77.0537%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="76.8037%" y="501" width="0.1552%" height="15" fill="rgb(206,95,13)" fg:x="990" fg:w="2"/><text x="77.0537%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.8037%" y="485" width="0.1552%" height="15" fill="rgb(253,154,18)" fg:x="990" fg:w="2"/><text x="77.0537%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.8037%" y="469" width="0.1552%" height="15" fill="rgb(219,32,23)" fg:x="990" fg:w="2"/><text x="77.0537%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.8813%" y="453" width="0.0776%" height="15" fill="rgb(230,191,45)" fg:x="991" fg:w="1"/><text x="77.1313%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9589%" y="501" width="0.0776%" height="15" fill="rgb(229,64,36)" fg:x="992" fg:w="1"/><text x="77.2089%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.9589%" y="485" width="0.0776%" height="15" fill="rgb(205,129,25)" fg:x="992" fg:w="1"/><text x="77.2089%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9589%" y="469" width="0.0776%" height="15" fill="rgb(254,112,7)" fg:x="992" fg:w="1"/><text x="77.2089%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9589%" y="453" width="0.0776%" height="15" fill="rgb(226,53,48)" fg:x="992" fg:w="1"/><text x="77.2089%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.9589%" y="437" width="0.0776%" height="15" fill="rgb(214,153,38)" fg:x="992" fg:w="1"/><text x="77.2089%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9589%" y="421" width="0.0776%" height="15" fill="rgb(243,101,7)" fg:x="992" fg:w="1"/><text x="77.2089%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.0365%" y="389" width="0.0776%" height="15" fill="rgb(240,140,22)" fg:x="993" fg:w="1"/><text x="77.2865%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.0365%" y="373" width="0.0776%" height="15" fill="rgb(235,114,2)" fg:x="993" fg:w="1"/><text x="77.2865%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.0365%" y="357" width="0.0776%" height="15" fill="rgb(242,59,12)" fg:x="993" fg:w="1"/><text x="77.2865%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="77.0365%" y="453" width="0.1552%" height="15" fill="rgb(252,134,9)" fg:x="993" fg:w="2"/><text x="77.2865%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="77.0365%" y="437" width="0.1552%" height="15" fill="rgb(236,4,44)" fg:x="993" fg:w="2"/><text x="77.2865%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="77.0365%" y="421" width="0.1552%" height="15" fill="rgb(254,172,41)" fg:x="993" fg:w="2"/><text x="77.2865%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="77.0365%" y="405" width="0.1552%" height="15" fill="rgb(244,63,20)" fg:x="993" fg:w="2"/><text x="77.2865%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.1140%" y="389" width="0.0776%" height="15" fill="rgb(250,73,31)" fg:x="994" fg:w="1"/><text x="77.3640%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="77.1140%" y="373" width="0.0776%" height="15" fill="rgb(241,38,36)" fg:x="994" fg:w="1"/><text x="77.3640%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.1140%" y="357" width="0.0776%" height="15" fill="rgb(245,211,2)" fg:x="994" fg:w="1"/><text x="77.3640%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1140%" y="341" width="0.0776%" height="15" fill="rgb(206,120,28)" fg:x="994" fg:w="1"/><text x="77.3640%" y="351.50"></text></g><g><title>engine::session::Session::flush (6 samples, 0.47%)</title><rect x="76.8037%" y="565" width="0.4655%" height="15" fill="rgb(211,59,34)" fg:x="990" fg:w="6"/><text x="77.0537%" y="575.50"></text></g><g><title>engine::session::Session::save_entity_changes (6 samples, 0.47%)</title><rect x="76.8037%" y="549" width="0.4655%" height="15" fill="rgb(233,168,5)" fg:x="990" fg:w="6"/><text x="77.0537%" y="559.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (6 samples, 0.47%)</title><rect x="76.8037%" y="533" width="0.4655%" height="15" fill="rgb(234,33,13)" fg:x="990" fg:w="6"/><text x="77.0537%" y="543.50"></text></g><g><title>engine::session::Session::check_for_changes (6 samples, 0.47%)</title><rect x="76.8037%" y="517" width="0.4655%" height="15" fill="rgb(231,150,26)" fg:x="990" fg:w="6"/><text x="77.0537%" y="527.50"></text></g><g><title>kernel::compare::any_entity_changes (3 samples, 0.23%)</title><rect x="77.0365%" y="501" width="0.2327%" height="15" fill="rgb(217,191,4)" fg:x="993" fg:w="3"/><text x="77.2865%" y="511.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (3 samples, 0.23%)</title><rect x="77.0365%" y="485" width="0.2327%" height="15" fill="rgb(246,198,38)" fg:x="993" fg:w="3"/><text x="77.2865%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.23%)</title><rect x="77.0365%" y="469" width="0.2327%" height="15" fill="rgb(245,64,37)" fg:x="993" fg:w="3"/><text x="77.2865%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.1916%" y="453" width="0.0776%" height="15" fill="rgb(250,30,36)" fg:x="995" fg:w="1"/><text x="77.4416%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1916%" y="437" width="0.0776%" height="15" fill="rgb(217,86,53)" fg:x="995" fg:w="1"/><text x="77.4416%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.1916%" y="421" width="0.0776%" height="15" fill="rgb(228,157,16)" fg:x="995" fg:w="1"/><text x="77.4416%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1916%" y="405" width="0.0776%" height="15" fill="rgb(217,59,31)" fg:x="995" fg:w="1"/><text x="77.4416%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="77.2692%" y="549" width="0.0776%" height="15" fill="rgb(237,138,41)" fg:x="996" fg:w="1"/><text x="77.5192%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.2692%" y="533" width="0.0776%" height="15" fill="rgb(227,91,49)" fg:x="996" fg:w="1"/><text x="77.5192%" y="543.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="77.2692%" y="517" width="0.0776%" height="15" fill="rgb(247,21,44)" fg:x="996" fg:w="1"/><text x="77.5192%" y="527.50"></text></g><g><title>plugins_core::build::Build::leads_to (1 samples, 0.08%)</title><rect x="77.2692%" y="501" width="0.0776%" height="15" fill="rgb(219,210,51)" fg:x="996" fg:w="1"/><text x="77.5192%" y="511.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="77.2692%" y="485" width="0.0776%" height="15" fill="rgb(209,140,6)" fg:x="996" fg:w="1"/><text x="77.5192%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;plugins_core::moving::model::Exit&gt;&gt; (1 samples, 0.08%)</title><rect x="77.2692%" y="469" width="0.0776%" height="15" fill="rgb(221,188,24)" fg:x="996" fg:w="1"/><text x="77.5192%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="77.2692%" y="453" width="0.0776%" height="15" fill="rgb(232,154,20)" fg:x="996" fg:w="1"/><text x="77.5192%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.2692%" y="437" width="0.0776%" height="15" fill="rgb(244,137,50)" fg:x="996" fg:w="1"/><text x="77.5192%" y="447.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="77.3468%" y="517" width="0.0776%" height="15" fill="rgb(225,185,43)" fg:x="997" fg:w="1"/><text x="77.5968%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3468%" y="501" width="0.0776%" height="15" fill="rgb(213,205,38)" fg:x="997" fg:w="1"/><text x="77.5968%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3468%" y="485" width="0.0776%" height="15" fill="rgb(236,73,12)" fg:x="997" fg:w="1"/><text x="77.5968%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="77.3468%" y="469" width="0.0776%" height="15" fill="rgb(235,219,13)" fg:x="997" fg:w="1"/><text x="77.5968%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.4244%" y="517" width="0.0776%" height="15" fill="rgb(218,59,36)" fg:x="998" fg:w="1"/><text x="77.6744%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.4244%" y="501" width="0.0776%" height="15" fill="rgb(205,110,39)" fg:x="998" fg:w="1"/><text x="77.6744%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="77.4244%" y="485" width="0.0776%" height="15" fill="rgb(218,206,42)" fg:x="998" fg:w="1"/><text x="77.6744%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.5019%" y="469" width="0.0776%" height="15" fill="rgb(248,125,24)" fg:x="999" fg:w="1"/><text x="77.7519%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.5019%" y="453" width="0.0776%" height="15" fill="rgb(242,28,27)" fg:x="999" fg:w="1"/><text x="77.7519%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5019%" y="437" width="0.0776%" height="15" fill="rgb(216,228,15)" fg:x="999" fg:w="1"/><text x="77.7519%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.5019%" y="421" width="0.0776%" height="15" fill="rgb(235,116,46)" fg:x="999" fg:w="1"/><text x="77.7519%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="77.5019%" y="485" width="0.1552%" height="15" fill="rgb(224,18,32)" fg:x="999" fg:w="2"/><text x="77.7519%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5795%" y="469" width="0.0776%" height="15" fill="rgb(252,5,12)" fg:x="1000" fg:w="1"/><text x="77.8295%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.5795%" y="453" width="0.0776%" height="15" fill="rgb(251,36,5)" fg:x="1000" fg:w="1"/><text x="77.8295%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.5795%" y="437" width="0.0776%" height="15" fill="rgb(217,53,14)" fg:x="1000" fg:w="1"/><text x="77.8295%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6571%" y="437" width="0.0776%" height="15" fill="rgb(215,86,45)" fg:x="1001" fg:w="1"/><text x="77.9071%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.7347%" y="437" width="0.0776%" height="15" fill="rgb(242,169,11)" fg:x="1002" fg:w="1"/><text x="77.9847%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.7347%" y="421" width="0.0776%" height="15" fill="rgb(211,213,45)" fg:x="1002" fg:w="1"/><text x="77.9847%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="77.7347%" y="405" width="0.0776%" height="15" fill="rgb(205,88,11)" fg:x="1002" fg:w="1"/><text x="77.9847%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8123%" y="437" width="0.0776%" height="15" fill="rgb(252,69,26)" fg:x="1003" fg:w="1"/><text x="78.0623%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.8123%" y="421" width="0.0776%" height="15" fill="rgb(246,123,37)" fg:x="1003" fg:w="1"/><text x="78.0623%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="77.8123%" y="405" width="0.0776%" height="15" fill="rgb(212,205,5)" fg:x="1003" fg:w="1"/><text x="78.0623%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8123%" y="389" width="0.0776%" height="15" fill="rgb(253,148,0)" fg:x="1003" fg:w="1"/><text x="78.0623%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8123%" y="373" width="0.0776%" height="15" fill="rgb(239,22,4)" fg:x="1003" fg:w="1"/><text x="78.0623%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8123%" y="357" width="0.0776%" height="15" fill="rgb(226,26,53)" fg:x="1003" fg:w="1"/><text x="78.0623%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8898%" y="421" width="0.0776%" height="15" fill="rgb(225,229,45)" fg:x="1004" fg:w="1"/><text x="78.1398%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8898%" y="405" width="0.0776%" height="15" fill="rgb(220,60,37)" fg:x="1004" fg:w="1"/><text x="78.1398%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.8898%" y="389" width="0.0776%" height="15" fill="rgb(217,180,35)" fg:x="1004" fg:w="1"/><text x="78.1398%" y="399.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (16 samples, 1.24%)</title><rect x="76.8037%" y="581" width="1.2413%" height="15" fill="rgb(229,7,53)" fg:x="990" fg:w="16"/><text x="77.0537%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (10 samples, 0.78%)</title><rect x="77.2692%" y="565" width="0.7758%" height="15" fill="rgb(254,137,3)" fg:x="996" fg:w="10"/><text x="77.5192%" y="575.50"></text></g><g><title>engine::session::Session::flush (9 samples, 0.70%)</title><rect x="77.3468%" y="549" width="0.6982%" height="15" fill="rgb(215,140,41)" fg:x="997" fg:w="9"/><text x="77.5968%" y="559.50"></text></g><g><title>engine::session::Session::save_entity_changes (9 samples, 0.70%)</title><rect x="77.3468%" y="533" width="0.6982%" height="15" fill="rgb(250,80,15)" fg:x="997" fg:w="9"/><text x="77.5968%" y="543.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (7 samples, 0.54%)</title><rect x="77.5019%" y="517" width="0.5431%" height="15" fill="rgb(252,191,6)" fg:x="999" fg:w="7"/><text x="77.7519%" y="527.50"></text></g><g><title>engine::session::Session::check_for_changes (7 samples, 0.54%)</title><rect x="77.5019%" y="501" width="0.5431%" height="15" fill="rgb(246,217,18)" fg:x="999" fg:w="7"/><text x="77.7519%" y="511.50"></text></g><g><title>kernel::compare::any_entity_changes (5 samples, 0.39%)</title><rect x="77.6571%" y="485" width="0.3879%" height="15" fill="rgb(223,93,7)" fg:x="1001" fg:w="5"/><text x="77.9071%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (5 samples, 0.39%)</title><rect x="77.6571%" y="469" width="0.3879%" height="15" fill="rgb(225,55,52)" fg:x="1001" fg:w="5"/><text x="77.9071%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.39%)</title><rect x="77.6571%" y="453" width="0.3879%" height="15" fill="rgb(240,31,24)" fg:x="1001" fg:w="5"/><text x="77.9071%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="77.8898%" y="437" width="0.1552%" height="15" fill="rgb(205,56,52)" fg:x="1004" fg:w="2"/><text x="78.1398%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9674%" y="421" width="0.0776%" height="15" fill="rgb(246,146,12)" fg:x="1005" fg:w="1"/><text x="78.2174%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="77.9674%" y="405" width="0.0776%" height="15" fill="rgb(239,84,36)" fg:x="1005" fg:w="1"/><text x="78.2174%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.9674%" y="389" width="0.0776%" height="15" fill="rgb(207,41,40)" fg:x="1005" fg:w="1"/><text x="78.2174%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9674%" y="373" width="0.0776%" height="15" fill="rgb(241,179,25)" fg:x="1005" fg:w="1"/><text x="78.2174%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="77.9674%" y="357" width="0.0776%" height="15" fill="rgb(210,0,34)" fg:x="1005" fg:w="1"/><text x="78.2174%" y="367.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.0450%" y="501" width="0.0776%" height="15" fill="rgb(225,217,29)" fg:x="1006" fg:w="1"/><text x="78.2950%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.0450%" y="485" width="0.0776%" height="15" fill="rgb(216,191,38)" fg:x="1006" fg:w="1"/><text x="78.2950%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.0450%" y="469" width="0.0776%" height="15" fill="rgb(232,140,52)" fg:x="1006" fg:w="1"/><text x="78.2950%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.0450%" y="453" width="0.0776%" height="15" fill="rgb(223,158,51)" fg:x="1006" fg:w="1"/><text x="78.2950%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="78.0450%" y="437" width="0.0776%" height="15" fill="rgb(235,29,51)" fg:x="1006" fg:w="1"/><text x="78.2950%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="78.0450%" y="517" width="0.1552%" height="15" fill="rgb(215,181,18)" fg:x="1006" fg:w="2"/><text x="78.2950%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1226%" y="501" width="0.0776%" height="15" fill="rgb(227,125,34)" fg:x="1007" fg:w="1"/><text x="78.3726%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1226%" y="485" width="0.0776%" height="15" fill="rgb(230,197,49)" fg:x="1007" fg:w="1"/><text x="78.3726%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.1226%" y="469" width="0.0776%" height="15" fill="rgb(239,141,16)" fg:x="1007" fg:w="1"/><text x="78.3726%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.1226%" y="453" width="0.0776%" height="15" fill="rgb(225,105,43)" fg:x="1007" fg:w="1"/><text x="78.3726%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.1226%" y="437" width="0.0776%" height="15" fill="rgb(214,131,14)" fg:x="1007" fg:w="1"/><text x="78.3726%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.2002%" y="437" width="0.0776%" height="15" fill="rgb(229,177,11)" fg:x="1008" fg:w="1"/><text x="78.4502%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2002%" y="421" width="0.0776%" height="15" fill="rgb(231,180,14)" fg:x="1008" fg:w="1"/><text x="78.4502%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.2002%" y="501" width="0.1552%" height="15" fill="rgb(232,88,2)" fg:x="1008" fg:w="2"/><text x="78.4502%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="78.2002%" y="485" width="0.1552%" height="15" fill="rgb(205,220,8)" fg:x="1008" fg:w="2"/><text x="78.4502%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.2002%" y="469" width="0.1552%" height="15" fill="rgb(225,23,53)" fg:x="1008" fg:w="2"/><text x="78.4502%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.2002%" y="453" width="0.1552%" height="15" fill="rgb(213,62,29)" fg:x="1008" fg:w="2"/><text x="78.4502%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.2777%" y="437" width="0.0776%" height="15" fill="rgb(227,75,7)" fg:x="1009" fg:w="1"/><text x="78.5277%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.2777%" y="421" width="0.0776%" height="15" fill="rgb(207,105,14)" fg:x="1009" fg:w="1"/><text x="78.5277%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3553%" y="501" width="0.0776%" height="15" fill="rgb(245,62,29)" fg:x="1010" fg:w="1"/><text x="78.6053%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.3553%" y="485" width="0.0776%" height="15" fill="rgb(236,202,4)" fg:x="1010" fg:w="1"/><text x="78.6053%" y="495.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3553%" y="469" width="0.0776%" height="15" fill="rgb(250,67,1)" fg:x="1010" fg:w="1"/><text x="78.6053%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.3553%" y="453" width="0.0776%" height="15" fill="rgb(253,115,44)" fg:x="1010" fg:w="1"/><text x="78.6053%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3553%" y="437" width="0.0776%" height="15" fill="rgb(251,139,18)" fg:x="1010" fg:w="1"/><text x="78.6053%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.5105%" y="341" width="0.0776%" height="15" fill="rgb(218,22,32)" fg:x="1012" fg:w="1"/><text x="78.7605%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.5105%" y="325" width="0.0776%" height="15" fill="rgb(243,53,5)" fg:x="1012" fg:w="1"/><text x="78.7605%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5105%" y="309" width="0.0776%" height="15" fill="rgb(227,56,16)" fg:x="1012" fg:w="1"/><text x="78.7605%" y="319.50"></text></g><g><title>engine::session::Session::close (8 samples, 0.62%)</title><rect x="78.0450%" y="581" width="0.6206%" height="15" fill="rgb(245,53,0)" fg:x="1006" fg:w="8"/><text x="78.2950%" y="591.50"></text></g><g><title>engine::session::Session::save_entity_changes (8 samples, 0.62%)</title><rect x="78.0450%" y="565" width="0.6206%" height="15" fill="rgb(216,170,35)" fg:x="1006" fg:w="8"/><text x="78.2950%" y="575.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (8 samples, 0.62%)</title><rect x="78.0450%" y="549" width="0.6206%" height="15" fill="rgb(211,200,8)" fg:x="1006" fg:w="8"/><text x="78.2950%" y="559.50"></text></g><g><title>engine::session::Session::check_for_changes (8 samples, 0.62%)</title><rect x="78.0450%" y="533" width="0.6206%" height="15" fill="rgb(228,204,44)" fg:x="1006" fg:w="8"/><text x="78.2950%" y="543.50"></text></g><g><title>kernel::compare::any_entity_changes (6 samples, 0.47%)</title><rect x="78.2002%" y="517" width="0.4655%" height="15" fill="rgb(214,121,17)" fg:x="1008" fg:w="6"/><text x="78.4502%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.23%)</title><rect x="78.4329%" y="501" width="0.2327%" height="15" fill="rgb(233,64,38)" fg:x="1011" fg:w="3"/><text x="78.6829%" y="511.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.23%)</title><rect x="78.4329%" y="485" width="0.2327%" height="15" fill="rgb(253,54,19)" fg:x="1011" fg:w="3"/><text x="78.6829%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="78.4329%" y="469" width="0.2327%" height="15" fill="rgb(253,94,18)" fg:x="1011" fg:w="3"/><text x="78.6829%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="78.4329%" y="453" width="0.2327%" height="15" fill="rgb(227,57,52)" fg:x="1011" fg:w="3"/><text x="78.6829%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="78.4329%" y="437" width="0.2327%" height="15" fill="rgb(230,228,50)" fg:x="1011" fg:w="3"/><text x="78.6829%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.23%)</title><rect x="78.4329%" y="421" width="0.2327%" height="15" fill="rgb(217,205,27)" fg:x="1011" fg:w="3"/><text x="78.6829%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.23%)</title><rect x="78.4329%" y="405" width="0.2327%" height="15" fill="rgb(252,71,50)" fg:x="1011" fg:w="3"/><text x="78.6829%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.5105%" y="389" width="0.1552%" height="15" fill="rgb(209,86,4)" fg:x="1012" fg:w="2"/><text x="78.7605%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.5105%" y="373" width="0.1552%" height="15" fill="rgb(229,94,0)" fg:x="1012" fg:w="2"/><text x="78.7605%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.5105%" y="357" width="0.1552%" height="15" fill="rgb(252,223,21)" fg:x="1012" fg:w="2"/><text x="78.7605%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.5881%" y="341" width="0.0776%" height="15" fill="rgb(230,210,4)" fg:x="1013" fg:w="1"/><text x="78.8381%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.5881%" y="325" width="0.0776%" height="15" fill="rgb(240,149,38)" fg:x="1013" fg:w="1"/><text x="78.8381%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::name (1 samples, 0.08%)</title><rect x="78.6656%" y="501" width="0.0776%" height="15" fill="rgb(254,105,20)" fg:x="1014" fg:w="1"/><text x="78.9156%" y="511.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="78.6656%" y="485" width="0.0776%" height="15" fill="rgb(253,87,46)" fg:x="1014" fg:w="1"/><text x="78.9156%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="78.7432%" y="501" width="0.0776%" height="15" fill="rgb(253,116,33)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="78.7432%" y="485" width="0.0776%" height="15" fill="rgb(229,198,5)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="495.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="78.7432%" y="469" width="0.0776%" height="15" fill="rgb(242,38,37)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="78.7432%" y="453" width="0.0776%" height="15" fill="rgb(242,69,53)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="463.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="78.7432%" y="437" width="0.0776%" height="15" fill="rgb(249,80,16)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="78.7432%" y="421" width="0.0776%" height="15" fill="rgb(206,128,11)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="431.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="78.7432%" y="405" width="0.0776%" height="15" fill="rgb(212,35,20)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="78.7432%" y="389" width="0.0776%" height="15" fill="rgb(236,79,13)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="78.7432%" y="373" width="0.0776%" height="15" fill="rgb(233,123,3)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="78.7432%" y="357" width="0.0776%" height="15" fill="rgb(214,93,52)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="78.7432%" y="341" width="0.0776%" height="15" fill="rgb(251,37,40)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="78.7432%" y="325" width="0.0776%" height="15" fill="rgb(227,80,54)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="335.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="78.7432%" y="309" width="0.0776%" height="15" fill="rgb(254,48,11)" fg:x="1015" fg:w="1"/><text x="78.9932%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="78.8208%" y="437" width="0.0776%" height="15" fill="rgb(235,193,26)" fg:x="1016" fg:w="1"/><text x="79.0708%" y="447.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="78.8208%" y="421" width="0.0776%" height="15" fill="rgb(229,99,21)" fg:x="1016" fg:w="1"/><text x="79.0708%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="78.8984%" y="421" width="0.0776%" height="15" fill="rgb(211,140,41)" fg:x="1017" fg:w="1"/><text x="79.1484%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.8984%" y="405" width="0.0776%" height="15" fill="rgb(240,227,30)" fg:x="1017" fg:w="1"/><text x="79.1484%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="78.8984%" y="389" width="0.0776%" height="15" fill="rgb(215,224,45)" fg:x="1017" fg:w="1"/><text x="79.1484%" y="399.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="78.8984%" y="373" width="0.0776%" height="15" fill="rgb(206,123,31)" fg:x="1017" fg:w="1"/><text x="79.1484%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="78.8984%" y="357" width="0.0776%" height="15" fill="rgb(210,138,16)" fg:x="1017" fg:w="1"/><text x="79.1484%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="78.8984%" y="341" width="0.0776%" height="15" fill="rgb(228,57,28)" fg:x="1017" fg:w="1"/><text x="79.1484%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.8984%" y="325" width="0.0776%" height="15" fill="rgb(242,170,10)" fg:x="1017" fg:w="1"/><text x="79.1484%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="78.9760%" y="421" width="0.0776%" height="15" fill="rgb(228,214,39)" fg:x="1018" fg:w="1"/><text x="79.2260%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="78.9760%" y="405" width="0.0776%" height="15" fill="rgb(218,179,33)" fg:x="1018" fg:w="1"/><text x="79.2260%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="78.9760%" y="389" width="0.0776%" height="15" fill="rgb(235,193,39)" fg:x="1018" fg:w="1"/><text x="79.2260%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9760%" y="373" width="0.0776%" height="15" fill="rgb(219,221,36)" fg:x="1018" fg:w="1"/><text x="79.2260%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.2863%" y="357" width="0.0776%" height="15" fill="rgb(248,218,19)" fg:x="1022" fg:w="1"/><text x="79.5363%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.93%)</title><rect x="79.3638%" y="357" width="0.9310%" height="15" fill="rgb(205,50,9)" fg:x="1023" fg:w="12"/><text x="79.6138%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.78%)</title><rect x="79.5190%" y="341" width="0.7758%" height="15" fill="rgb(238,81,28)" fg:x="1025" fg:w="10"/><text x="79.7690%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2172%" y="325" width="0.0776%" height="15" fill="rgb(235,110,19)" fg:x="1034" fg:w="1"/><text x="80.4672%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.31%)</title><rect x="80.2948%" y="357" width="0.3103%" height="15" fill="rgb(214,7,14)" fg:x="1035" fg:w="4"/><text x="80.5448%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.23%)</title><rect x="80.3724%" y="341" width="0.2327%" height="15" fill="rgb(211,77,3)" fg:x="1036" fg:w="3"/><text x="80.6224%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="80.5275%" y="325" width="0.0776%" height="15" fill="rgb(229,5,9)" fg:x="1038" fg:w="1"/><text x="80.7775%" y="335.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="80.5275%" y="309" width="0.0776%" height="15" fill="rgb(225,90,11)" fg:x="1038" fg:w="1"/><text x="80.7775%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="80.5275%" y="293" width="0.0776%" height="15" fill="rgb(242,56,8)" fg:x="1038" fg:w="1"/><text x="80.7775%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7603%" y="293" width="0.0776%" height="15" fill="rgb(249,212,39)" fg:x="1041" fg:w="1"/><text x="81.0103%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="80.8379%" y="293" width="0.1552%" height="15" fill="rgb(236,90,9)" fg:x="1042" fg:w="2"/><text x="81.0879%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="80.9154%" y="277" width="0.0776%" height="15" fill="rgb(206,88,35)" fg:x="1043" fg:w="1"/><text x="81.1654%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.9154%" y="261" width="0.0776%" height="15" fill="rgb(205,126,30)" fg:x="1043" fg:w="1"/><text x="81.1654%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.9154%" y="245" width="0.0776%" height="15" fill="rgb(230,176,12)" fg:x="1043" fg:w="1"/><text x="81.1654%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="80.9930%" y="293" width="0.1552%" height="15" fill="rgb(243,19,9)" fg:x="1044" fg:w="2"/><text x="81.2430%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="80.9930%" y="277" width="0.1552%" height="15" fill="rgb(245,171,17)" fg:x="1044" fg:w="2"/><text x="81.2430%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="80.9930%" y="261" width="0.1552%" height="15" fill="rgb(227,52,21)" fg:x="1044" fg:w="2"/><text x="81.2430%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="80.9930%" y="245" width="0.1552%" height="15" fill="rgb(238,69,14)" fg:x="1044" fg:w="2"/><text x="81.2430%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.0706%" y="229" width="0.0776%" height="15" fill="rgb(241,156,39)" fg:x="1045" fg:w="1"/><text x="81.3206%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.0706%" y="213" width="0.0776%" height="15" fill="rgb(212,227,28)" fg:x="1045" fg:w="1"/><text x="81.3206%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.0706%" y="197" width="0.0776%" height="15" fill="rgb(209,118,27)" fg:x="1045" fg:w="1"/><text x="81.3206%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="81.1482%" y="277" width="0.0776%" height="15" fill="rgb(226,102,5)" fg:x="1046" fg:w="1"/><text x="81.3982%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="81.1482%" y="293" width="0.1552%" height="15" fill="rgb(223,34,3)" fg:x="1046" fg:w="2"/><text x="81.3982%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="81.2258%" y="277" width="0.0776%" height="15" fill="rgb(221,81,38)" fg:x="1047" fg:w="1"/><text x="81.4758%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="81.2258%" y="261" width="0.0776%" height="15" fill="rgb(236,219,28)" fg:x="1047" fg:w="1"/><text x="81.4758%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.2258%" y="245" width="0.0776%" height="15" fill="rgb(213,200,14)" fg:x="1047" fg:w="1"/><text x="81.4758%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (40 samples, 3.10%)</title><rect x="81.3033%" y="293" width="3.1032%" height="15" fill="rgb(240,33,19)" fg:x="1048" fg:w="40"/><text x="81.5533%" y="303.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (40 samples, 3.10%)</title><rect x="81.3033%" y="277" width="3.1032%" height="15" fill="rgb(233,113,27)" fg:x="1048" fg:w="40"/><text x="81.5533%" y="287.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (40 samples, 3.10%)</title><rect x="81.3033%" y="261" width="3.1032%" height="15" fill="rgb(220,221,18)" fg:x="1048" fg:w="40"/><text x="81.5533%" y="271.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 4.11%)</title><rect x="80.6051%" y="341" width="4.1117%" height="15" fill="rgb(238,92,8)" fg:x="1039" fg:w="53"/><text x="80.8551%" y="351.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (53 samples, 4.11%)</title><rect x="80.6051%" y="325" width="4.1117%" height="15" fill="rgb(222,164,16)" fg:x="1039" fg:w="53"/><text x="80.8551%" y="335.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.11%)</title><rect x="80.6051%" y="309" width="4.1117%" height="15" fill="rgb(241,119,3)" fg:x="1039" fg:w="53"/><text x="80.8551%" y="319.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.31%)</title><rect x="84.4065%" y="293" width="0.3103%" height="15" fill="rgb(241,44,8)" fg:x="1088" fg:w="4"/><text x="84.6565%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="84.8720%" y="325" width="0.1552%" height="15" fill="rgb(230,36,40)" fg:x="1094" fg:w="2"/><text x="85.1220%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.9496%" y="309" width="0.0776%" height="15" fill="rgb(243,16,36)" fg:x="1095" fg:w="1"/><text x="85.1996%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.9496%" y="293" width="0.0776%" height="15" fill="rgb(231,4,26)" fg:x="1095" fg:w="1"/><text x="85.1996%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.9496%" y="277" width="0.0776%" height="15" fill="rgb(240,9,31)" fg:x="1095" fg:w="1"/><text x="85.1996%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (60 samples, 4.65%)</title><rect x="80.6051%" y="357" width="4.6548%" height="15" fill="rgb(207,173,15)" fg:x="1039" fg:w="60"/><text x="80.8551%" y="367.50">regex..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.54%)</title><rect x="84.7168%" y="341" width="0.5431%" height="15" fill="rgb(224,192,53)" fg:x="1092" fg:w="7"/><text x="84.9668%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.23%)</title><rect x="85.0272%" y="325" width="0.2327%" height="15" fill="rgb(223,67,28)" fg:x="1096" fg:w="3"/><text x="85.2772%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.1823%" y="309" width="0.0776%" height="15" fill="rgb(211,20,47)" fg:x="1098" fg:w="1"/><text x="85.4323%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.1823%" y="293" width="0.0776%" height="15" fill="rgb(240,228,2)" fg:x="1098" fg:w="1"/><text x="85.4323%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1823%" y="277" width="0.0776%" height="15" fill="rgb(248,151,12)" fg:x="1098" fg:w="1"/><text x="85.4323%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (81 samples, 6.28%)</title><rect x="79.0535%" y="373" width="6.2839%" height="15" fill="rgb(244,8,39)" fg:x="1019" fg:w="81"/><text x="79.3035%" y="383.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="85.2599%" y="357" width="0.0776%" height="15" fill="rgb(222,26,8)" fg:x="1099" fg:w="1"/><text x="85.5099%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="85.4151%" y="325" width="0.0776%" height="15" fill="rgb(213,106,44)" fg:x="1101" fg:w="1"/><text x="85.6651%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="85.4151%" y="309" width="0.0776%" height="15" fill="rgb(214,129,20)" fg:x="1101" fg:w="1"/><text x="85.6651%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="85.4151%" y="293" width="0.0776%" height="15" fill="rgb(212,32,13)" fg:x="1101" fg:w="1"/><text x="85.6651%" y="303.50"></text></g><g><title>regex::regex::string::Regex::new (84 samples, 6.52%)</title><rect x="79.0535%" y="421" width="6.5167%" height="15" fill="rgb(208,168,33)" fg:x="1019" fg:w="84"/><text x="79.3035%" y="431.50">regex::re..</text></g><g><title>regex::builders::Builder::build_one_string (84 samples, 6.52%)</title><rect x="79.0535%" y="405" width="6.5167%" height="15" fill="rgb(231,207,8)" fg:x="1019" fg:w="84"/><text x="79.3035%" y="415.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (84 samples, 6.52%)</title><rect x="79.0535%" y="389" width="6.5167%" height="15" fill="rgb(235,219,23)" fg:x="1019" fg:w="84"/><text x="79.3035%" y="399.50">regex_aut..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.23%)</title><rect x="85.3375%" y="373" width="0.2327%" height="15" fill="rgb(226,216,26)" fg:x="1100" fg:w="3"/><text x="85.5875%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.23%)</title><rect x="85.3375%" y="357" width="0.2327%" height="15" fill="rgb(239,137,16)" fg:x="1100" fg:w="3"/><text x="85.5875%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="85.4151%" y="341" width="0.1552%" height="15" fill="rgb(207,12,36)" fg:x="1101" fg:w="2"/><text x="85.6651%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="85.4926%" y="325" width="0.0776%" height="15" fill="rgb(210,214,24)" fg:x="1102" fg:w="1"/><text x="85.7426%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.4926%" y="309" width="0.0776%" height="15" fill="rgb(206,56,30)" fg:x="1102" fg:w="1"/><text x="85.7426%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.4926%" y="293" width="0.0776%" height="15" fill="rgb(228,143,26)" fg:x="1102" fg:w="1"/><text x="85.7426%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4926%" y="277" width="0.0776%" height="15" fill="rgb(216,218,46)" fg:x="1102" fg:w="1"/><text x="85.7426%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.8029%" y="341" width="0.0776%" height="15" fill="rgb(206,6,19)" fg:x="1106" fg:w="1"/><text x="86.0529%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.8029%" y="325" width="0.0776%" height="15" fill="rgb(239,177,51)" fg:x="1106" fg:w="1"/><text x="86.0529%" y="335.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="85.8029%" y="309" width="0.0776%" height="15" fill="rgb(216,55,25)" fg:x="1106" fg:w="1"/><text x="86.0529%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.47%)</title><rect x="85.5702%" y="357" width="0.4655%" height="15" fill="rgb(231,163,29)" fg:x="1103" fg:w="6"/><text x="85.8202%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="85.8805%" y="341" width="0.1552%" height="15" fill="rgb(232,149,50)" fg:x="1107" fg:w="2"/><text x="86.1305%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.54%)</title><rect x="85.5702%" y="373" width="0.5431%" height="15" fill="rgb(223,142,48)" fg:x="1103" fg:w="7"/><text x="85.8202%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="86.0357%" y="357" width="0.0776%" height="15" fill="rgb(245,83,23)" fg:x="1109" fg:w="1"/><text x="86.2857%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.0357%" y="341" width="0.0776%" height="15" fill="rgb(224,63,2)" fg:x="1109" fg:w="1"/><text x="86.2857%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (94 samples, 7.29%)</title><rect x="78.8984%" y="437" width="7.2925%" height="15" fill="rgb(218,65,53)" fg:x="1017" fg:w="94"/><text x="79.1484%" y="447.50">indefinite..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.62%)</title><rect x="85.5702%" y="421" width="0.6206%" height="15" fill="rgb(221,84,29)" fg:x="1103" fg:w="8"/><text x="85.8202%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.62%)</title><rect x="85.5702%" y="405" width="0.6206%" height="15" fill="rgb(234,0,32)" fg:x="1103" fg:w="8"/><text x="85.8202%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.62%)</title><rect x="85.5702%" y="389" width="0.6206%" height="15" fill="rgb(206,20,16)" fg:x="1103" fg:w="8"/><text x="85.8202%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="86.1133%" y="373" width="0.0776%" height="15" fill="rgb(244,172,18)" fg:x="1110" fg:w="1"/><text x="86.3633%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="86.1133%" y="357" width="0.0776%" height="15" fill="rgb(254,133,1)" fg:x="1110" fg:w="1"/><text x="86.3633%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.1908%" y="389" width="0.0776%" height="15" fill="rgb(222,206,41)" fg:x="1111" fg:w="1"/><text x="86.4408%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="86.2684%" y="373" width="0.0776%" height="15" fill="rgb(212,3,42)" fg:x="1112" fg:w="1"/><text x="86.5184%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.2684%" y="357" width="0.0776%" height="15" fill="rgb(241,11,4)" fg:x="1112" fg:w="1"/><text x="86.5184%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.23%)</title><rect x="86.1908%" y="421" width="0.2327%" height="15" fill="rgb(205,19,26)" fg:x="1111" fg:w="3"/><text x="86.4408%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.23%)</title><rect x="86.1908%" y="405" width="0.2327%" height="15" fill="rgb(210,179,32)" fg:x="1111" fg:w="3"/><text x="86.4408%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="86.2684%" y="389" width="0.1552%" height="15" fill="rgb(227,116,49)" fg:x="1112" fg:w="2"/><text x="86.5184%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="86.3460%" y="373" width="0.0776%" height="15" fill="rgb(211,146,6)" fg:x="1113" fg:w="1"/><text x="86.5960%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3460%" y="357" width="0.0776%" height="15" fill="rgb(219,44,39)" fg:x="1113" fg:w="1"/><text x="86.5960%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.8115%" y="325" width="0.0776%" height="15" fill="rgb(234,128,11)" fg:x="1119" fg:w="1"/><text x="87.0615%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.8115%" y="309" width="0.0776%" height="15" fill="rgb(220,183,53)" fg:x="1119" fg:w="1"/><text x="87.0615%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.8115%" y="293" width="0.0776%" height="15" fill="rgb(213,219,32)" fg:x="1119" fg:w="1"/><text x="87.0615%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.8891%" y="325" width="0.0776%" height="15" fill="rgb(232,156,16)" fg:x="1120" fg:w="1"/><text x="87.1391%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.54%)</title><rect x="86.5012%" y="357" width="0.5431%" height="15" fill="rgb(246,135,34)" fg:x="1115" fg:w="7"/><text x="86.7512%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.54%)</title><rect x="86.5012%" y="341" width="0.5431%" height="15" fill="rgb(241,99,0)" fg:x="1115" fg:w="7"/><text x="86.7512%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="86.9666%" y="325" width="0.0776%" height="15" fill="rgb(222,103,45)" fg:x="1121" fg:w="1"/><text x="87.2166%" y="335.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (10 samples, 0.78%)</title><rect x="86.4236%" y="421" width="0.7758%" height="15" fill="rgb(212,57,4)" fg:x="1114" fg:w="10"/><text x="86.6736%" y="431.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.78%)</title><rect x="86.4236%" y="405" width="0.7758%" height="15" fill="rgb(215,68,47)" fg:x="1114" fg:w="10"/><text x="86.6736%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.70%)</title><rect x="86.5012%" y="389" width="0.6982%" height="15" fill="rgb(230,84,2)" fg:x="1115" fg:w="9"/><text x="86.7512%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.70%)</title><rect x="86.5012%" y="373" width="0.6982%" height="15" fill="rgb(220,102,14)" fg:x="1115" fg:w="9"/><text x="86.7512%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="87.0442%" y="357" width="0.1552%" height="15" fill="rgb(240,10,32)" fg:x="1122" fg:w="2"/><text x="87.2942%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="87.0442%" y="341" width="0.1552%" height="15" fill="rgb(215,47,27)" fg:x="1122" fg:w="2"/><text x="87.2942%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.1218%" y="325" width="0.0776%" height="15" fill="rgb(233,188,43)" fg:x="1123" fg:w="1"/><text x="87.3718%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.1218%" y="309" width="0.0776%" height="15" fill="rgb(253,190,1)" fg:x="1123" fg:w="1"/><text x="87.3718%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1218%" y="293" width="0.0776%" height="15" fill="rgb(206,114,52)" fg:x="1123" fg:w="1"/><text x="87.3718%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="87.1994%" y="405" width="0.0776%" height="15" fill="rgb(233,120,37)" fg:x="1124" fg:w="1"/><text x="87.4494%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="87.1994%" y="389" width="0.0776%" height="15" fill="rgb(214,52,39)" fg:x="1124" fg:w="1"/><text x="87.4494%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="87.2770%" y="373" width="0.0776%" height="15" fill="rgb(223,80,29)" fg:x="1125" fg:w="1"/><text x="87.5270%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.2770%" y="357" width="0.0776%" height="15" fill="rgb(230,101,40)" fg:x="1125" fg:w="1"/><text x="87.5270%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.93%)</title><rect x="87.3545%" y="357" width="0.9310%" height="15" fill="rgb(219,211,8)" fg:x="1126" fg:w="12"/><text x="87.6045%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.85%)</title><rect x="87.4321%" y="341" width="0.8534%" height="15" fill="rgb(252,126,28)" fg:x="1127" fg:w="11"/><text x="87.6821%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.23%)</title><rect x="88.0528%" y="325" width="0.2327%" height="15" fill="rgb(215,56,38)" fg:x="1135" fg:w="3"/><text x="88.3028%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="88.2855%" y="357" width="0.0776%" height="15" fill="rgb(249,55,44)" fg:x="1138" fg:w="1"/><text x="88.5355%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.2855%" y="341" width="0.0776%" height="15" fill="rgb(220,221,32)" fg:x="1138" fg:w="1"/><text x="88.5355%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.23%)</title><rect x="88.5958%" y="293" width="0.2327%" height="15" fill="rgb(212,216,41)" fg:x="1142" fg:w="3"/><text x="88.8458%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="88.5958%" y="277" width="0.2327%" height="15" fill="rgb(228,213,43)" fg:x="1142" fg:w="3"/><text x="88.8458%" y="287.50"></text></g><g><title>realloc (3 samples, 0.23%)</title><rect x="88.5958%" y="261" width="0.2327%" height="15" fill="rgb(211,31,26)" fg:x="1142" fg:w="3"/><text x="88.8458%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.54%)</title><rect x="88.3631%" y="325" width="0.5431%" height="15" fill="rgb(229,202,19)" fg:x="1139" fg:w="7"/><text x="88.6131%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.47%)</title><rect x="88.4407%" y="309" width="0.4655%" height="15" fill="rgb(229,105,46)" fg:x="1140" fg:w="6"/><text x="88.6907%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.8285%" y="293" width="0.0776%" height="15" fill="rgb(235,108,1)" fg:x="1145" fg:w="1"/><text x="89.0785%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.8285%" y="277" width="0.0776%" height="15" fill="rgb(245,111,35)" fg:x="1145" fg:w="1"/><text x="89.0785%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.8285%" y="261" width="0.0776%" height="15" fill="rgb(219,185,31)" fg:x="1145" fg:w="1"/><text x="89.0785%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.70%)</title><rect x="88.3631%" y="357" width="0.6982%" height="15" fill="rgb(214,4,43)" fg:x="1139" fg:w="9"/><text x="88.6131%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.70%)</title><rect x="88.3631%" y="341" width="0.6982%" height="15" fill="rgb(235,227,40)" fg:x="1139" fg:w="9"/><text x="88.6131%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="88.9061%" y="325" width="0.1552%" height="15" fill="rgb(230,88,30)" fg:x="1146" fg:w="2"/><text x="89.1561%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="88.9061%" y="309" width="0.1552%" height="15" fill="rgb(216,217,1)" fg:x="1146" fg:w="2"/><text x="89.1561%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="88.9061%" y="293" width="0.1552%" height="15" fill="rgb(248,139,50)" fg:x="1146" fg:w="2"/><text x="89.1561%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="89.0613%" y="357" width="0.0776%" height="15" fill="rgb(233,1,21)" fg:x="1148" fg:w="1"/><text x="89.3113%" y="367.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.31%)</title><rect x="89.7595%" y="245" width="0.3103%" height="15" fill="rgb(215,183,12)" fg:x="1157" fg:w="4"/><text x="90.0095%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="90.0698%" y="245" width="0.1552%" height="15" fill="rgb(229,104,42)" fg:x="1161" fg:w="2"/><text x="90.3198%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.2250%" y="245" width="0.0776%" height="15" fill="rgb(243,34,48)" fg:x="1163" fg:w="1"/><text x="90.4750%" y="255.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="90.3026%" y="181" width="0.0776%" height="15" fill="rgb(239,11,44)" fg:x="1164" fg:w="1"/><text x="90.5526%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.3026%" y="213" width="0.1552%" height="15" fill="rgb(231,98,35)" fg:x="1164" fg:w="2"/><text x="90.5526%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.3026%" y="197" width="0.1552%" height="15" fill="rgb(233,28,25)" fg:x="1164" fg:w="2"/><text x="90.5526%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.3801%" y="181" width="0.0776%" height="15" fill="rgb(234,123,11)" fg:x="1165" fg:w="1"/><text x="90.6301%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="90.6905%" y="197" width="0.1552%" height="15" fill="rgb(220,69,3)" fg:x="1169" fg:w="2"/><text x="90.9405%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="90.6905%" y="181" width="0.1552%" height="15" fill="rgb(214,64,36)" fg:x="1169" fg:w="2"/><text x="90.9405%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="90.6905%" y="165" width="0.1552%" height="15" fill="rgb(211,138,32)" fg:x="1169" fg:w="2"/><text x="90.9405%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="90.6905%" y="149" width="0.1552%" height="15" fill="rgb(213,118,47)" fg:x="1169" fg:w="2"/><text x="90.9405%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.62%)</title><rect x="90.3026%" y="245" width="0.6206%" height="15" fill="rgb(243,124,49)" fg:x="1164" fg:w="8"/><text x="90.5526%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.62%)</title><rect x="90.3026%" y="229" width="0.6206%" height="15" fill="rgb(221,30,28)" fg:x="1164" fg:w="8"/><text x="90.5526%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 0.47%)</title><rect x="90.4577%" y="213" width="0.4655%" height="15" fill="rgb(246,37,13)" fg:x="1166" fg:w="6"/><text x="90.7077%" y="223.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="90.8456%" y="197" width="0.0776%" height="15" fill="rgb(249,66,14)" fg:x="1171" fg:w="1"/><text x="91.0956%" y="207.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="90.8456%" y="181" width="0.0776%" height="15" fill="rgb(213,166,5)" fg:x="1171" fg:w="1"/><text x="91.0956%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="90.9232%" y="245" width="0.0776%" height="15" fill="rgb(221,66,24)" fg:x="1172" fg:w="1"/><text x="91.1732%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="90.9232%" y="229" width="0.0776%" height="15" fill="rgb(210,132,17)" fg:x="1172" fg:w="1"/><text x="91.1732%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (49 samples, 3.80%)</title><rect x="91.0008%" y="245" width="3.8014%" height="15" fill="rgb(243,202,5)" fg:x="1173" fg:w="49"/><text x="91.2508%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (49 samples, 3.80%)</title><rect x="91.0008%" y="229" width="3.8014%" height="15" fill="rgb(233,70,48)" fg:x="1173" fg:w="49"/><text x="91.2508%" y="239.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (49 samples, 3.80%)</title><rect x="91.0008%" y="213" width="3.8014%" height="15" fill="rgb(238,41,26)" fg:x="1173" fg:w="49"/><text x="91.2508%" y="223.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.8022%" y="245" width="0.0776%" height="15" fill="rgb(241,19,31)" fg:x="1222" fg:w="1"/><text x="95.0522%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 5.90%)</title><rect x="89.1389%" y="341" width="5.8960%" height="15" fill="rgb(214,76,10)" fg:x="1149" fg:w="76"/><text x="89.3889%" y="351.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (76 samples, 5.90%)</title><rect x="89.1389%" y="325" width="5.8960%" height="15" fill="rgb(254,202,22)" fg:x="1149" fg:w="76"/><text x="89.3889%" y="335.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (76 samples, 5.90%)</title><rect x="89.1389%" y="309" width="5.8960%" height="15" fill="rgb(214,72,24)" fg:x="1149" fg:w="76"/><text x="89.3889%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (76 samples, 5.90%)</title><rect x="89.1389%" y="293" width="5.8960%" height="15" fill="rgb(221,92,46)" fg:x="1149" fg:w="76"/><text x="89.3889%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (76 samples, 5.90%)</title><rect x="89.1389%" y="277" width="5.8960%" height="15" fill="rgb(246,13,50)" fg:x="1149" fg:w="76"/><text x="89.3889%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (76 samples, 5.90%)</title><rect x="89.1389%" y="261" width="5.8960%" height="15" fill="rgb(240,165,38)" fg:x="1149" fg:w="76"/><text x="89.3889%" y="271.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="94.8798%" y="245" width="0.1552%" height="15" fill="rgb(241,24,51)" fg:x="1223" fg:w="2"/><text x="95.1298%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.8798%" y="229" width="0.1552%" height="15" fill="rgb(227,51,44)" fg:x="1223" fg:w="2"/><text x="95.1298%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.9573%" y="213" width="0.0776%" height="15" fill="rgb(231,121,3)" fg:x="1224" fg:w="1"/><text x="95.2073%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.9573%" y="197" width="0.0776%" height="15" fill="rgb(245,3,41)" fg:x="1224" fg:w="1"/><text x="95.2073%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.0349%" y="325" width="0.0776%" height="15" fill="rgb(214,13,26)" fg:x="1225" fg:w="1"/><text x="95.2849%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.31%)</title><rect x="95.1125%" y="325" width="0.3103%" height="15" fill="rgb(252,75,11)" fg:x="1226" fg:w="4"/><text x="95.3625%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.23%)</title><rect x="95.1901%" y="309" width="0.2327%" height="15" fill="rgb(218,226,17)" fg:x="1227" fg:w="3"/><text x="95.4401%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.23%)</title><rect x="95.1901%" y="293" width="0.2327%" height="15" fill="rgb(248,89,38)" fg:x="1227" fg:w="3"/><text x="95.4401%" y="303.50"></text></g><g><title>realloc (3 samples, 0.23%)</title><rect x="95.1901%" y="277" width="0.2327%" height="15" fill="rgb(237,73,46)" fg:x="1227" fg:w="3"/><text x="95.4401%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.6555%" y="309" width="0.0776%" height="15" fill="rgb(242,78,33)" fg:x="1233" fg:w="1"/><text x="95.9055%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.6555%" y="293" width="0.0776%" height="15" fill="rgb(235,60,3)" fg:x="1233" fg:w="1"/><text x="95.9055%" y="303.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="95.6555%" y="277" width="0.0776%" height="15" fill="rgb(216,172,19)" fg:x="1233" fg:w="1"/><text x="95.9055%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="95.6555%" y="261" width="0.0776%" height="15" fill="rgb(227,6,42)" fg:x="1233" fg:w="1"/><text x="95.9055%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.39%)</title><rect x="95.4228%" y="325" width="0.3879%" height="15" fill="rgb(223,207,42)" fg:x="1230" fg:w="5"/><text x="95.6728%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.7331%" y="309" width="0.0776%" height="15" fill="rgb(246,138,30)" fg:x="1234" fg:w="1"/><text x="95.9831%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.7331%" y="293" width="0.0776%" height="15" fill="rgb(251,199,47)" fg:x="1234" fg:w="1"/><text x="95.9831%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7331%" y="277" width="0.0776%" height="15" fill="rgb(228,218,44)" fg:x="1234" fg:w="1"/><text x="95.9831%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (87 samples, 6.75%)</title><rect x="89.1389%" y="357" width="6.7494%" height="15" fill="rgb(220,68,6)" fg:x="1149" fg:w="87"/><text x="89.3889%" y="367.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.85%)</title><rect x="95.0349%" y="341" width="0.8534%" height="15" fill="rgb(240,60,26)" fg:x="1225" fg:w="11"/><text x="95.2849%" y="351.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="95.8107%" y="325" width="0.0776%" height="15" fill="rgb(211,200,19)" fg:x="1235" fg:w="1"/><text x="96.0607%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.8107%" y="309" width="0.0776%" height="15" fill="rgb(242,145,30)" fg:x="1235" fg:w="1"/><text x="96.0607%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (111 samples, 8.61%)</title><rect x="87.3545%" y="373" width="8.6113%" height="15" fill="rgb(225,64,13)" fg:x="1126" fg:w="111"/><text x="87.6045%" y="383.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="95.8883%" y="357" width="0.0776%" height="15" fill="rgb(218,103,35)" fg:x="1236" fg:w="1"/><text x="96.1383%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="95.8883%" y="341" width="0.0776%" height="15" fill="rgb(216,93,46)" fg:x="1236" fg:w="1"/><text x="96.1383%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.9659%" y="373" width="0.0776%" height="15" fill="rgb(225,159,27)" fg:x="1237" fg:w="1"/><text x="96.2159%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.9659%" y="357" width="0.0776%" height="15" fill="rgb(225,204,11)" fg:x="1237" fg:w="1"/><text x="96.2159%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="95.9659%" y="341" width="0.0776%" height="15" fill="rgb(205,56,4)" fg:x="1237" fg:w="1"/><text x="96.2159%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="95.9659%" y="325" width="0.0776%" height="15" fill="rgb(206,6,35)" fg:x="1237" fg:w="1"/><text x="96.2159%" y="335.50"></text></g><g><title>indefinite::rules::number::Number::check (128 samples, 9.93%)</title><rect x="86.1908%" y="437" width="9.9302%" height="15" fill="rgb(247,73,52)" fg:x="1111" fg:w="128"/><text x="86.4408%" y="447.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::new (115 samples, 8.92%)</title><rect x="87.1994%" y="421" width="8.9216%" height="15" fill="rgb(246,97,4)" fg:x="1124" fg:w="115"/><text x="87.4494%" y="431.50">regex::regex:..</text></g><g><title>regex::builders::Builder::build_one_string (114 samples, 8.84%)</title><rect x="87.2770%" y="405" width="8.8441%" height="15" fill="rgb(212,37,15)" fg:x="1125" fg:w="114"/><text x="87.5270%" y="415.50">regex::build..</text></g><g><title>regex_automata::meta::regex::Builder::build (114 samples, 8.84%)</title><rect x="87.2770%" y="389" width="8.8441%" height="15" fill="rgb(208,130,40)" fg:x="1125" fg:w="114"/><text x="87.5270%" y="399.50">regex_automa..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="96.0434%" y="373" width="0.0776%" height="15" fill="rgb(236,55,29)" fg:x="1238" fg:w="1"/><text x="96.2934%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="96.0434%" y="357" width="0.0776%" height="15" fill="rgb(209,156,45)" fg:x="1238" fg:w="1"/><text x="96.2934%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="96.1210%" y="405" width="0.1552%" height="15" fill="rgb(249,107,4)" fg:x="1239" fg:w="2"/><text x="96.3710%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="96.1210%" y="389" width="0.1552%" height="15" fill="rgb(227,7,13)" fg:x="1239" fg:w="2"/><text x="96.3710%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="96.1986%" y="373" width="0.0776%" height="15" fill="rgb(250,129,14)" fg:x="1240" fg:w="1"/><text x="96.4486%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.1986%" y="357" width="0.0776%" height="15" fill="rgb(229,92,13)" fg:x="1240" fg:w="1"/><text x="96.4486%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1986%" y="341" width="0.0776%" height="15" fill="rgb(245,98,39)" fg:x="1240" fg:w="1"/><text x="96.4486%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.1986%" y="325" width="0.0776%" height="15" fill="rgb(234,135,48)" fg:x="1240" fg:w="1"/><text x="96.4486%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="96.2762%" y="405" width="0.0776%" height="15" fill="rgb(230,98,28)" fg:x="1241" fg:w="1"/><text x="96.5262%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="96.2762%" y="389" width="0.0776%" height="15" fill="rgb(223,121,0)" fg:x="1241" fg:w="1"/><text x="96.5262%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.2762%" y="373" width="0.0776%" height="15" fill="rgb(234,173,33)" fg:x="1241" fg:w="1"/><text x="96.5262%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="96.2762%" y="357" width="0.0776%" height="15" fill="rgb(245,47,8)" fg:x="1241" fg:w="1"/><text x="96.5262%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.2762%" y="341" width="0.0776%" height="15" fill="rgb(205,17,20)" fg:x="1241" fg:w="1"/><text x="96.5262%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.2762%" y="325" width="0.0776%" height="15" fill="rgb(232,151,16)" fg:x="1241" fg:w="1"/><text x="96.5262%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.3538%" y="357" width="0.0776%" height="15" fill="rgb(208,30,32)" fg:x="1242" fg:w="1"/><text x="96.6038%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3538%" y="341" width="0.0776%" height="15" fill="rgb(254,26,3)" fg:x="1242" fg:w="1"/><text x="96.6038%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.3538%" y="325" width="0.0776%" height="15" fill="rgb(240,177,30)" fg:x="1242" fg:w="1"/><text x="96.6038%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3538%" y="309" width="0.0776%" height="15" fill="rgb(248,76,44)" fg:x="1242" fg:w="1"/><text x="96.6038%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5089%" y="341" width="0.0776%" height="15" fill="rgb(241,186,54)" fg:x="1244" fg:w="1"/><text x="96.7589%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="96.5865%" y="309" width="0.0776%" height="15" fill="rgb(249,171,29)" fg:x="1245" fg:w="1"/><text x="96.8365%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.54%)</title><rect x="96.4313%" y="357" width="0.5431%" height="15" fill="rgb(237,151,44)" fg:x="1243" fg:w="7"/><text x="96.6813%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.39%)</title><rect x="96.5865%" y="341" width="0.3879%" height="15" fill="rgb(228,174,30)" fg:x="1245" fg:w="5"/><text x="96.8365%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.39%)</title><rect x="96.5865%" y="325" width="0.3879%" height="15" fill="rgb(252,14,37)" fg:x="1245" fg:w="5"/><text x="96.8365%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.31%)</title><rect x="96.6641%" y="309" width="0.3103%" height="15" fill="rgb(207,111,40)" fg:x="1246" fg:w="4"/><text x="96.9141%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="97.0520%" y="325" width="0.1552%" height="15" fill="rgb(248,171,54)" fg:x="1251" fg:w="2"/><text x="97.3020%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="97.0520%" y="309" width="0.1552%" height="15" fill="rgb(211,127,2)" fg:x="1251" fg:w="2"/><text x="97.3020%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="97.0520%" y="293" width="0.1552%" height="15" fill="rgb(236,87,47)" fg:x="1251" fg:w="2"/><text x="97.3020%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="97.0520%" y="277" width="0.1552%" height="15" fill="rgb(223,190,45)" fg:x="1251" fg:w="2"/><text x="97.3020%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="97.0520%" y="261" width="0.1552%" height="15" fill="rgb(215,5,16)" fg:x="1251" fg:w="2"/><text x="97.3020%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (13 samples, 1.01%)</title><rect x="96.3538%" y="405" width="1.0085%" height="15" fill="rgb(252,82,33)" fg:x="1242" fg:w="13"/><text x="96.6038%" y="415.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.01%)</title><rect x="96.3538%" y="389" width="1.0085%" height="15" fill="rgb(247,213,44)" fg:x="1242" fg:w="13"/><text x="96.6038%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.01%)</title><rect x="96.3538%" y="373" width="1.0085%" height="15" fill="rgb(205,196,44)" fg:x="1242" fg:w="13"/><text x="96.6038%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.39%)</title><rect x="96.9744%" y="357" width="0.3879%" height="15" fill="rgb(237,96,54)" fg:x="1250" fg:w="5"/><text x="97.2244%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.39%)</title><rect x="96.9744%" y="341" width="0.3879%" height="15" fill="rgb(230,113,34)" fg:x="1250" fg:w="5"/><text x="97.2244%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.2071%" y="325" width="0.1552%" height="15" fill="rgb(221,224,12)" fg:x="1253" fg:w="2"/><text x="97.4571%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.3623%" y="341" width="0.0776%" height="15" fill="rgb(219,112,44)" fg:x="1255" fg:w="1"/><text x="97.6123%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.3623%" y="325" width="0.0776%" height="15" fill="rgb(210,31,13)" fg:x="1255" fg:w="1"/><text x="97.6123%" y="335.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (18 samples, 1.40%)</title><rect x="96.1210%" y="421" width="1.3964%" height="15" fill="rgb(230,25,16)" fg:x="1239" fg:w="18"/><text x="96.3710%" y="431.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="97.3623%" y="405" width="0.1552%" height="15" fill="rgb(246,108,53)" fg:x="1255" fg:w="2"/><text x="97.6123%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="97.3623%" y="389" width="0.1552%" height="15" fill="rgb(241,172,50)" fg:x="1255" fg:w="2"/><text x="97.6123%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="97.3623%" y="373" width="0.1552%" height="15" fill="rgb(235,141,10)" fg:x="1255" fg:w="2"/><text x="97.6123%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="97.3623%" y="357" width="0.1552%" height="15" fill="rgb(220,174,43)" fg:x="1255" fg:w="2"/><text x="97.6123%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.4399%" y="341" width="0.0776%" height="15" fill="rgb(215,181,40)" fg:x="1256" fg:w="1"/><text x="97.6899%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.4399%" y="325" width="0.0776%" height="15" fill="rgb(230,97,2)" fg:x="1256" fg:w="1"/><text x="97.6899%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.4399%" y="309" width="0.0776%" height="15" fill="rgb(211,25,27)" fg:x="1256" fg:w="1"/><text x="97.6899%" y="319.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="97.4399%" y="293" width="0.0776%" height="15" fill="rgb(230,87,26)" fg:x="1256" fg:w="1"/><text x="97.6899%" y="303.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.4399%" y="277" width="0.0776%" height="15" fill="rgb(227,160,17)" fg:x="1256" fg:w="1"/><text x="97.6899%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (246 samples, 19.08%)</title><rect x="78.6656%" y="517" width="19.0846%" height="15" fill="rgb(244,85,34)" fg:x="1014" fg:w="246"/><text x="78.9156%" y="527.50">&lt;&amp;kernel::model::entry::Entry ..</text></g><g><title>plugins_core::looking::model::qualify_name (244 samples, 18.93%)</title><rect x="78.8208%" y="501" width="18.9294%" height="15" fill="rgb(207,70,0)" fg:x="1016" fg:w="244"/><text x="79.0708%" y="511.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (244 samples, 18.93%)</title><rect x="78.8208%" y="485" width="18.9294%" height="15" fill="rgb(223,129,7)" fg:x="1016" fg:w="244"/><text x="79.0708%" y="495.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (244 samples, 18.93%)</title><rect x="78.8208%" y="469" width="18.9294%" height="15" fill="rgb(246,105,7)" fg:x="1016" fg:w="244"/><text x="79.0708%" y="479.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (244 samples, 18.93%)</title><rect x="78.8208%" y="453" width="18.9294%" height="15" fill="rgb(215,154,42)" fg:x="1016" fg:w="244"/><text x="79.0708%" y="463.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::other::Other::run (21 samples, 1.63%)</title><rect x="96.1210%" y="437" width="1.6292%" height="15" fill="rgb(220,215,30)" fg:x="1239" fg:w="21"/><text x="96.3710%" y="447.50"></text></g><g><title>indefinite::irregular::Irregular::check (3 samples, 0.23%)</title><rect x="97.5175%" y="421" width="0.2327%" height="15" fill="rgb(228,81,51)" fg:x="1257" fg:w="3"/><text x="97.7675%" y="431.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="97.7502%" y="485" width="0.0776%" height="15" fill="rgb(247,71,54)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="97.7502%" y="469" width="0.0776%" height="15" fill="rgb(234,176,34)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.7502%" y="453" width="0.0776%" height="15" fill="rgb(241,103,54)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="97.7502%" y="437" width="0.0776%" height="15" fill="rgb(228,22,34)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.7502%" y="421" width="0.0776%" height="15" fill="rgb(241,179,48)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="431.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.7502%" y="405" width="0.0776%" height="15" fill="rgb(235,167,37)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="415.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="97.7502%" y="389" width="0.0776%" height="15" fill="rgb(213,109,30)" fg:x="1260" fg:w="1"/><text x="98.0002%" y="399.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (248 samples, 19.24%)</title><rect x="78.6656%" y="549" width="19.2397%" height="15" fill="rgb(222,172,16)" fg:x="1014" fg:w="248"/><text x="78.9156%" y="559.50">&lt;plugins_core::looking::action..</text></g><g><title>plugins_core::looking::model::new_area_observation (248 samples, 19.24%)</title><rect x="78.6656%" y="533" width="19.2397%" height="15" fill="rgb(233,192,5)" fg:x="1014" fg:w="248"/><text x="78.9156%" y="543.50">plugins_core::looking::model::..</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="97.7502%" y="517" width="0.1552%" height="15" fill="rgb(247,189,41)" fg:x="1260" fg:w="2"/><text x="98.0002%" y="527.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="97.7502%" y="501" width="0.1552%" height="15" fill="rgb(218,134,47)" fg:x="1260" fg:w="2"/><text x="98.0002%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8278%" y="485" width="0.0776%" height="15" fill="rgb(216,29,3)" fg:x="1261" fg:w="1"/><text x="98.0778%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8278%" y="469" width="0.0776%" height="15" fill="rgb(246,140,12)" fg:x="1261" fg:w="1"/><text x="98.0778%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.8278%" y="453" width="0.0776%" height="15" fill="rgb(230,136,11)" fg:x="1261" fg:w="1"/><text x="98.0778%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.8278%" y="437" width="0.0776%" height="15" fill="rgb(247,22,47)" fg:x="1261" fg:w="1"/><text x="98.0778%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.8278%" y="421" width="0.0776%" height="15" fill="rgb(218,84,22)" fg:x="1261" fg:w="1"/><text x="98.0778%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8278%" y="405" width="0.0776%" height="15" fill="rgb(216,87,39)" fg:x="1261" fg:w="1"/><text x="98.0778%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8278%" y="389" width="0.0776%" height="15" fill="rgb(221,178,8)" fg:x="1261" fg:w="1"/><text x="98.0778%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8278%" y="373" width="0.0776%" height="15" fill="rgb(230,42,11)" fg:x="1261" fg:w="1"/><text x="98.0778%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.9054%" y="421" width="0.0776%" height="15" fill="rgb(237,229,4)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9054%" y="405" width="0.0776%" height="15" fill="rgb(222,31,33)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.9054%" y="389" width="0.0776%" height="15" fill="rgb(210,17,39)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9054%" y="373" width="0.0776%" height="15" fill="rgb(244,93,20)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9054%" y="357" width="0.0776%" height="15" fill="rgb(210,40,47)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.9054%" y="341" width="0.0776%" height="15" fill="rgb(239,211,47)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9054%" y="325" width="0.0776%" height="15" fill="rgb(251,223,49)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9054%" y="309" width="0.0776%" height="15" fill="rgb(221,149,5)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9054%" y="293" width="0.0776%" height="15" fill="rgb(219,224,51)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.9054%" y="277" width="0.0776%" height="15" fill="rgb(223,7,8)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9054%" y="261" width="0.0776%" height="15" fill="rgb(241,217,22)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9054%" y="245" width="0.0776%" height="15" fill="rgb(248,209,0)" fg:x="1262" fg:w="1"/><text x="98.1554%" y="255.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="97.9054%" y="533" width="0.1552%" height="15" fill="rgb(217,205,4)" fg:x="1262" fg:w="2"/><text x="98.1554%" y="543.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="97.9054%" y="517" width="0.1552%" height="15" fill="rgb(228,124,39)" fg:x="1262" fg:w="2"/><text x="98.1554%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="97.9054%" y="501" width="0.1552%" height="15" fill="rgb(250,116,42)" fg:x="1262" fg:w="2"/><text x="98.1554%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="97.9054%" y="485" width="0.1552%" height="15" fill="rgb(223,202,9)" fg:x="1262" fg:w="2"/><text x="98.1554%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="97.9054%" y="469" width="0.1552%" height="15" fill="rgb(242,222,40)" fg:x="1262" fg:w="2"/><text x="98.1554%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.9054%" y="453" width="0.1552%" height="15" fill="rgb(229,99,46)" fg:x="1262" fg:w="2"/><text x="98.1554%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.9054%" y="437" width="0.1552%" height="15" fill="rgb(225,56,46)" fg:x="1262" fg:w="2"/><text x="98.1554%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9829%" y="421" width="0.0776%" height="15" fill="rgb(227,94,5)" fg:x="1263" fg:w="1"/><text x="98.2329%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9829%" y="405" width="0.0776%" height="15" fill="rgb(205,112,38)" fg:x="1263" fg:w="1"/><text x="98.2329%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.9829%" y="389" width="0.0776%" height="15" fill="rgb(231,133,46)" fg:x="1263" fg:w="1"/><text x="98.2329%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9829%" y="373" width="0.0776%" height="15" fill="rgb(217,16,9)" fg:x="1263" fg:w="1"/><text x="98.2329%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.9829%" y="357" width="0.0776%" height="15" fill="rgb(249,173,9)" fg:x="1263" fg:w="1"/><text x="98.2329%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.9829%" y="341" width="0.0776%" height="15" fill="rgb(205,163,53)" fg:x="1263" fg:w="1"/><text x="98.2329%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="98.0605%" y="533" width="0.0776%" height="15" fill="rgb(217,54,41)" fg:x="1264" fg:w="1"/><text x="98.3105%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="98.0605%" y="517" width="0.0776%" height="15" fill="rgb(228,216,12)" fg:x="1264" fg:w="1"/><text x="98.3105%" y="527.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (4 samples, 0.31%)</title><rect x="97.9054%" y="549" width="0.3103%" height="15" fill="rgb(244,228,15)" fg:x="1262" fg:w="4"/><text x="98.1554%" y="559.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (1 samples, 0.08%)</title><rect x="98.1381%" y="533" width="0.0776%" height="15" fill="rgb(221,176,53)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (1 samples, 0.08%)</title><rect x="98.1381%" y="517" width="0.0776%" height="15" fill="rgb(205,94,34)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="98.1381%" y="501" width="0.0776%" height="15" fill="rgb(213,110,48)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.1381%" y="485" width="0.0776%" height="15" fill="rgb(236,142,28)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="98.1381%" y="469" width="0.0776%" height="15" fill="rgb(225,135,29)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="479.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="98.1381%" y="453" width="0.0776%" height="15" fill="rgb(252,45,31)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="98.1381%" y="437" width="0.0776%" height="15" fill="rgb(211,187,50)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="447.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="98.1381%" y="421" width="0.0776%" height="15" fill="rgb(229,109,7)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="431.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="98.1381%" y="405" width="0.0776%" height="15" fill="rgb(251,131,51)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1381%" y="389" width="0.0776%" height="15" fill="rgb(251,180,35)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1381%" y="373" width="0.0776%" height="15" fill="rgb(211,46,32)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.1381%" y="357" width="0.0776%" height="15" fill="rgb(248,123,17)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1381%" y="341" width="0.0776%" height="15" fill="rgb(227,141,18)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.1381%" y="325" width="0.0776%" height="15" fill="rgb(216,102,9)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1381%" y="309" width="0.0776%" height="15" fill="rgb(253,47,13)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1381%" y="293" width="0.0776%" height="15" fill="rgb(226,93,23)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1381%" y="277" width="0.0776%" height="15" fill="rgb(247,104,17)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.1381%" y="261" width="0.0776%" height="15" fill="rgb(233,203,26)" fg:x="1265" fg:w="1"/><text x="98.3881%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynMessage&gt; (2 samples, 0.16%)</title><rect x="98.2157%" y="517" width="0.1552%" height="15" fill="rgb(244,98,49)" fg:x="1266" fg:w="2"/><text x="98.4657%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="98.2157%" y="501" width="0.1552%" height="15" fill="rgb(235,134,22)" fg:x="1266" fg:w="2"/><text x="98.4657%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2933%" y="485" width="0.0776%" height="15" fill="rgb(221,70,32)" fg:x="1267" fg:w="1"/><text x="98.5433%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="98.3708%" y="485" width="0.0776%" height="15" fill="rgb(238,15,50)" fg:x="1268" fg:w="1"/><text x="98.6208%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.3708%" y="469" width="0.0776%" height="15" fill="rgb(215,221,48)" fg:x="1268" fg:w="1"/><text x="98.6208%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.3708%" y="453" width="0.0776%" height="15" fill="rgb(236,73,3)" fg:x="1268" fg:w="1"/><text x="98.6208%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.7587%" y="293" width="0.0776%" height="15" fill="rgb(250,107,11)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="303.50"></text></g><g><title>kernel::model::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="98.7587%" y="277" width="0.0776%" height="15" fill="rgb(242,39,14)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7587%" y="261" width="0.0776%" height="15" fill="rgb(248,164,37)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7587%" y="245" width="0.0776%" height="15" fill="rgb(217,60,12)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.7587%" y="229" width="0.0776%" height="15" fill="rgb(240,125,29)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.7587%" y="213" width="0.0776%" height="15" fill="rgb(208,207,28)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.7587%" y="197" width="0.0776%" height="15" fill="rgb(209,159,27)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7587%" y="181" width="0.0776%" height="15" fill="rgb(251,176,53)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.7587%" y="165" width="0.0776%" height="15" fill="rgb(211,85,7)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.7587%" y="149" width="0.0776%" height="15" fill="rgb(216,64,54)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.7587%" y="133" width="0.0776%" height="15" fill="rgb(217,54,24)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.7587%" y="117" width="0.0776%" height="15" fill="rgb(208,206,53)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.7587%" y="101" width="0.0776%" height="15" fill="rgb(251,74,39)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7587%" y="85" width="0.0776%" height="15" fill="rgb(226,47,5)" fg:x="1273" fg:w="1"/><text x="99.0087%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.8363%" y="293" width="0.0776%" height="15" fill="rgb(234,111,33)" fg:x="1274" fg:w="1"/><text x="99.0863%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.9139%" y="197" width="0.0776%" height="15" fill="rgb(251,14,10)" fg:x="1275" fg:w="1"/><text x="99.1639%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9915%" y="197" width="0.0776%" height="15" fill="rgb(232,43,0)" fg:x="1276" fg:w="1"/><text x="99.2415%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9915%" y="181" width="0.0776%" height="15" fill="rgb(222,68,43)" fg:x="1276" fg:w="1"/><text x="99.2415%" y="191.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (8 samples, 0.62%)</title><rect x="98.6036%" y="389" width="0.6206%" height="15" fill="rgb(217,24,23)" fg:x="1271" fg:w="8"/><text x="98.8536%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.54%)</title><rect x="98.6811%" y="373" width="0.5431%" height="15" fill="rgb(229,209,14)" fg:x="1272" fg:w="7"/><text x="98.9311%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.54%)</title><rect x="98.6811%" y="357" width="0.5431%" height="15" fill="rgb(250,149,48)" fg:x="1272" fg:w="7"/><text x="98.9311%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.54%)</title><rect x="98.6811%" y="341" width="0.5431%" height="15" fill="rgb(210,120,37)" fg:x="1272" fg:w="7"/><text x="98.9311%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.54%)</title><rect x="98.6811%" y="325" width="0.5431%" height="15" fill="rgb(210,21,8)" fg:x="1272" fg:w="7"/><text x="98.9311%" y="335.50"></text></g><g><title>engine::internal::Entities::prepare_entity (7 samples, 0.54%)</title><rect x="98.6811%" y="309" width="0.5431%" height="15" fill="rgb(243,145,7)" fg:x="1272" fg:w="7"/><text x="98.9311%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.31%)</title><rect x="98.9139%" y="293" width="0.3103%" height="15" fill="rgb(238,178,32)" fg:x="1275" fg:w="4"/><text x="99.1639%" y="303.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.31%)</title><rect x="98.9139%" y="277" width="0.3103%" height="15" fill="rgb(222,4,10)" fg:x="1275" fg:w="4"/><text x="99.1639%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="98.9139%" y="261" width="0.3103%" height="15" fill="rgb(239,7,37)" fg:x="1275" fg:w="4"/><text x="99.1639%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="98.9139%" y="245" width="0.3103%" height="15" fill="rgb(215,31,37)" fg:x="1275" fg:w="4"/><text x="99.1639%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.31%)</title><rect x="98.9139%" y="229" width="0.3103%" height="15" fill="rgb(224,83,33)" fg:x="1275" fg:w="4"/><text x="99.1639%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.31%)</title><rect x="98.9139%" y="213" width="0.3103%" height="15" fill="rgb(239,55,3)" fg:x="1275" fg:w="4"/><text x="99.1639%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.0690%" y="197" width="0.1552%" height="15" fill="rgb(247,92,11)" fg:x="1277" fg:w="2"/><text x="99.3190%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1466%" y="181" width="0.0776%" height="15" fill="rgb(239,200,7)" fg:x="1278" fg:w="1"/><text x="99.3966%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.1466%" y="165" width="0.0776%" height="15" fill="rgb(227,115,8)" fg:x="1278" fg:w="1"/><text x="99.3966%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1466%" y="149" width="0.0776%" height="15" fill="rgb(215,189,27)" fg:x="1278" fg:w="1"/><text x="99.3966%" y="159.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.1466%" y="133" width="0.0776%" height="15" fill="rgb(251,216,39)" fg:x="1278" fg:w="1"/><text x="99.3966%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.78%)</title><rect x="98.5260%" y="469" width="0.7758%" height="15" fill="rgb(207,29,47)" fg:x="1270" fg:w="10"/><text x="98.7760%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.78%)</title><rect x="98.5260%" y="453" width="0.7758%" height="15" fill="rgb(210,71,34)" fg:x="1270" fg:w="10"/><text x="98.7760%" y="463.50"></text></g><g><title>plugins_core::tools::get_contained_keys (9 samples, 0.70%)</title><rect x="98.6036%" y="437" width="0.6982%" height="15" fill="rgb(253,217,51)" fg:x="1271" fg:w="9"/><text x="98.8536%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope (9 samples, 0.70%)</title><rect x="98.6036%" y="421" width="0.6982%" height="15" fill="rgb(222,117,46)" fg:x="1271" fg:w="9"/><text x="98.8536%" y="431.50"></text></g><g><title>kernel::model::Entity::load_scope (9 samples, 0.70%)</title><rect x="98.6036%" y="405" width="0.6982%" height="15" fill="rgb(226,132,6)" fg:x="1271" fg:w="9"/><text x="98.8536%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2242%" y="389" width="0.0776%" height="15" fill="rgb(254,145,51)" fg:x="1279" fg:w="1"/><text x="99.4742%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.2242%" y="373" width="0.0776%" height="15" fill="rgb(231,199,27)" fg:x="1279" fg:w="1"/><text x="99.4742%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.4569%" y="229" width="0.0776%" height="15" fill="rgb(245,158,14)" fg:x="1282" fg:w="1"/><text x="99.7069%" y="239.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.4569%" y="213" width="0.0776%" height="15" fill="rgb(240,113,14)" fg:x="1282" fg:w="1"/><text x="99.7069%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.23%)</title><rect x="99.3794%" y="245" width="0.2327%" height="15" fill="rgb(210,20,13)" fg:x="1281" fg:w="3"/><text x="99.6294%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.5345%" y="229" width="0.0776%" height="15" fill="rgb(241,144,13)" fg:x="1283" fg:w="1"/><text x="99.7845%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5345%" y="213" width="0.0776%" height="15" fill="rgb(235,43,34)" fg:x="1283" fg:w="1"/><text x="99.7845%" y="223.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.31%)</title><rect x="99.3794%" y="309" width="0.3103%" height="15" fill="rgb(208,36,20)" fg:x="1281" fg:w="4"/><text x="99.6294%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.31%)</title><rect x="99.3794%" y="293" width="0.3103%" height="15" fill="rgb(239,204,10)" fg:x="1281" fg:w="4"/><text x="99.6294%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.31%)</title><rect x="99.3794%" y="277" width="0.3103%" height="15" fill="rgb(217,84,43)" fg:x="1281" fg:w="4"/><text x="99.6294%" y="287.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.31%)</title><rect x="99.3794%" y="261" width="0.3103%" height="15" fill="rgb(241,170,50)" fg:x="1281" fg:w="4"/><text x="99.6294%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.6121%" y="245" width="0.0776%" height="15" fill="rgb(226,205,29)" fg:x="1284" fg:w="1"/><text x="99.8621%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6121%" y="229" width="0.0776%" height="15" fill="rgb(233,113,1)" fg:x="1284" fg:w="1"/><text x="99.8621%" y="239.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.47%)</title><rect x="99.3018%" y="357" width="0.4655%" height="15" fill="rgb(253,98,13)" fg:x="1280" fg:w="6"/><text x="99.5518%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.39%)</title><rect x="99.3794%" y="341" width="0.3879%" height="15" fill="rgb(211,115,12)" fg:x="1281" fg:w="5"/><text x="99.6294%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.39%)</title><rect x="99.3794%" y="325" width="0.3879%" height="15" fill="rgb(208,12,16)" fg:x="1281" fg:w="5"/><text x="99.6294%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.6897%" y="309" width="0.0776%" height="15" fill="rgb(237,193,54)" fg:x="1285" fg:w="1"/><text x="99.9397%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.6897%" y="293" width="0.0776%" height="15" fill="rgb(243,22,42)" fg:x="1285" fg:w="1"/><text x="99.9397%" y="303.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.54%)</title><rect x="99.3018%" y="405" width="0.5431%" height="15" fill="rgb(233,151,36)" fg:x="1280" fg:w="7"/><text x="99.5518%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.54%)</title><rect x="99.3018%" y="389" width="0.5431%" height="15" fill="rgb(237,57,45)" fg:x="1280" fg:w="7"/><text x="99.5518%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.54%)</title><rect x="99.3018%" y="373" width="0.5431%" height="15" fill="rgb(221,88,17)" fg:x="1280" fg:w="7"/><text x="99.5518%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7673%" y="357" width="0.0776%" height="15" fill="rgb(230,79,15)" fg:x="1286" fg:w="1"/><text x="100.0173%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.7673%" y="341" width="0.0776%" height="15" fill="rgb(213,57,13)" fg:x="1286" fg:w="1"/><text x="100.0173%" y="351.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="99.8448%" y="357" width="0.0776%" height="15" fill="rgb(222,116,39)" fg:x="1287" fg:w="1"/><text x="100.0948%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="99.8448%" y="341" width="0.0776%" height="15" fill="rgb(245,107,2)" fg:x="1287" fg:w="1"/><text x="100.0948%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.8448%" y="325" width="0.0776%" height="15" fill="rgb(238,1,10)" fg:x="1287" fg:w="1"/><text x="100.0948%" y="335.50"></text></g><g><title>all (1,289 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(249,4,48)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="943.50"></text></g><g><title>simple-255e00ed (1,289 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(223,151,18)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="927.50">simple-255e00ed</text></g><g><title>_start (1,289 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(227,65,43)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="911.50">_start</text></g><g><title>__libc_start_main (1,289 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(218,40,45)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="895.50">__libc_start_main</text></g><g><title>main (1,289 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(252,121,31)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="879.50">main</text></g><g><title>std::rt::lang_start_internal (1,289 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(219,158,43)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="863.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,289 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(231,162,42)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="847.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,289 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(217,179,25)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,289 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(206,212,31)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="815.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,289 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(235,144,12)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="799.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,289 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(213,51,10)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,289 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(231,145,14)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,289 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(235,15,28)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="751.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,289 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(237,206,10)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="735.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,289 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(236,227,27)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="719.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,289 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(246,83,35)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="703.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,289 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(220,136,24)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="687.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,289 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(217,3,25)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="671.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,289 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(239,24,14)" fg:x="0" fg:w="1289"/><text x="0.2500%" y="655.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (305 samples, 23.66%)</title><rect x="76.3382%" y="629" width="23.6618%" height="15" fill="rgb(244,16,53)" fg:x="984" fg:w="305"/><text x="76.5882%" y="639.50">&lt;criterion::routine::Function&lt;M,F,T&gt; a..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (305 samples, 23.66%)</title><rect x="76.3382%" y="613" width="23.6618%" height="15" fill="rgb(208,175,44)" fg:x="984" fg:w="305"/><text x="76.5882%" y="623.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (305 samples, 23.66%)</title><rect x="76.3382%" y="597" width="23.6618%" height="15" fill="rgb(252,18,48)" fg:x="984" fg:w="305"/><text x="76.5882%" y="607.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (275 samples, 21.33%)</title><rect x="78.6656%" y="581" width="21.3344%" height="15" fill="rgb(234,199,32)" fg:x="1014" fg:w="275"/><text x="78.9156%" y="591.50">engine::session::Session::evaluate..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (275 samples, 21.33%)</title><rect x="78.6656%" y="565" width="21.3344%" height="15" fill="rgb(225,77,54)" fg:x="1014" fg:w="275"/><text x="78.9156%" y="575.50">engine::perform::StandardPerformer..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (23 samples, 1.78%)</title><rect x="98.2157%" y="549" width="1.7843%" height="15" fill="rgb(225,42,25)" fg:x="1266" fg:w="23"/><text x="98.4657%" y="559.50">k..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (23 samples, 1.78%)</title><rect x="98.2157%" y="533" width="1.7843%" height="15" fill="rgb(242,227,46)" fg:x="1266" fg:w="23"/><text x="98.4657%" y="543.50">&lt;..</text></g><g><title>plugins_rpc::querying::have_surroundings (21 samples, 1.63%)</title><rect x="98.3708%" y="517" width="1.6292%" height="15" fill="rgb(246,197,35)" fg:x="1268" fg:w="21"/><text x="98.6208%" y="527.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (21 samples, 1.63%)</title><rect x="98.3708%" y="501" width="1.6292%" height="15" fill="rgb(215,159,26)" fg:x="1268" fg:w="21"/><text x="98.6208%" y="511.50"></text></g><g><title>core::iter::adapters::try_process (20 samples, 1.55%)</title><rect x="98.4484%" y="485" width="1.5516%" height="15" fill="rgb(212,194,50)" fg:x="1269" fg:w="20"/><text x="98.6984%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (9 samples, 0.70%)</title><rect x="99.3018%" y="469" width="0.6982%" height="15" fill="rgb(246,132,1)" fg:x="1280" fg:w="9"/><text x="99.5518%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.70%)</title><rect x="99.3018%" y="453" width="0.6982%" height="15" fill="rgb(217,71,7)" fg:x="1280" fg:w="9"/><text x="99.5518%" y="463.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (9 samples, 0.70%)</title><rect x="99.3018%" y="437" width="0.6982%" height="15" fill="rgb(252,59,32)" fg:x="1280" fg:w="9"/><text x="99.5518%" y="447.50"></text></g><g><title>&lt;plugins_rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (9 samples, 0.70%)</title><rect x="99.3018%" y="421" width="0.6982%" height="15" fill="rgb(253,204,25)" fg:x="1280" fg:w="9"/><text x="99.5518%" y="431.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (2 samples, 0.16%)</title><rect x="99.8448%" y="405" width="0.1552%" height="15" fill="rgb(232,21,16)" fg:x="1287" fg:w="2"/><text x="100.0948%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="99.8448%" y="389" width="0.1552%" height="15" fill="rgb(248,90,29)" fg:x="1287" fg:w="2"/><text x="100.0948%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.8448%" y="373" width="0.1552%" height="15" fill="rgb(249,223,7)" fg:x="1287" fg:w="2"/><text x="100.0948%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="99.9224%" y="357" width="0.0776%" height="15" fill="rgb(231,119,42)" fg:x="1288" fg:w="1"/><text x="100.1724%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="99.9224%" y="341" width="0.0776%" height="15" fill="rgb(215,41,35)" fg:x="1288" fg:w="1"/><text x="100.1724%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.9224%" y="325" width="0.0776%" height="15" fill="rgb(220,44,45)" fg:x="1288" fg:w="1"/><text x="100.1724%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9224%" y="309" width="0.0776%" height="15" fill="rgb(253,197,36)" fg:x="1288" fg:w="1"/><text x="100.1724%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9224%" y="293" width="0.0776%" height="15" fill="rgb(245,225,54)" fg:x="1288" fg:w="1"/><text x="100.1724%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9224%" y="277" width="0.0776%" height="15" fill="rgb(239,94,37)" fg:x="1288" fg:w="1"/><text x="100.1724%" y="287.50"></text></g></svg></svg>