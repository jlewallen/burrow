<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="1234"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="693" width="0.0810%" height="15" fill="rgb(235,82,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1621%" y="629" width="0.0810%" height="15" fill="rgb(230,108,42)" fg:x="2" fg:w="1"/><text x="0.4121%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="0.0810%" y="693" width="0.2431%" height="15" fill="rgb(215,150,50)" fg:x="1" fg:w="3"/><text x="0.3310%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="0.0810%" y="677" width="0.2431%" height="15" fill="rgb(233,212,5)" fg:x="1" fg:w="3"/><text x="0.3310%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.1621%" y="661" width="0.1621%" height="15" fill="rgb(245,80,22)" fg:x="2" fg:w="2"/><text x="0.4121%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="0.1621%" y="645" width="0.1621%" height="15" fill="rgb(238,129,16)" fg:x="2" fg:w="2"/><text x="0.4121%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="0.2431%" y="629" width="0.0810%" height="15" fill="rgb(240,19,0)" fg:x="3" fg:w="1"/><text x="0.4931%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::plugins::ArgumentType&gt; (1 samples, 0.08%)</title><rect x="0.2431%" y="613" width="0.0810%" height="15" fill="rgb(232,42,35)" fg:x="3" fg:w="1"/><text x="0.4931%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4052%" y="581" width="0.0810%" height="15" fill="rgb(223,130,24)" fg:x="5" fg:w="1"/><text x="0.6552%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="0.4862%" y="581" width="0.2431%" height="15" fill="rgb(237,16,22)" fg:x="6" fg:w="3"/><text x="0.7362%" y="591.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.4862%" y="565" width="0.2431%" height="15" fill="rgb(248,192,20)" fg:x="6" fg:w="3"/><text x="0.7362%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.7293%" y="565" width="0.0810%" height="15" fill="rgb(233,167,2)" fg:x="9" fg:w="1"/><text x="0.9793%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.7293%" y="549" width="0.0810%" height="15" fill="rgb(252,71,44)" fg:x="9" fg:w="1"/><text x="0.9793%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7293%" y="533" width="0.0810%" height="15" fill="rgb(238,37,47)" fg:x="9" fg:w="1"/><text x="0.9793%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.8104%" y="565" width="0.0810%" height="15" fill="rgb(214,202,54)" fg:x="10" fg:w="1"/><text x="1.0604%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="0.4052%" y="629" width="0.5673%" height="15" fill="rgb(254,165,40)" fg:x="5" fg:w="7"/><text x="0.6552%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (7 samples, 0.57%)</title><rect x="0.4052%" y="613" width="0.5673%" height="15" fill="rgb(246,173,38)" fg:x="5" fg:w="7"/><text x="0.6552%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="0.4052%" y="597" width="0.5673%" height="15" fill="rgb(215,3,27)" fg:x="5" fg:w="7"/><text x="0.6552%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.7293%" y="581" width="0.2431%" height="15" fill="rgb(239,169,51)" fg:x="9" fg:w="3"/><text x="0.9793%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.8914%" y="565" width="0.0810%" height="15" fill="rgb(212,5,25)" fg:x="11" fg:w="1"/><text x="1.1414%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8914%" y="549" width="0.0810%" height="15" fill="rgb(243,45,17)" fg:x="11" fg:w="1"/><text x="1.1414%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9724%" y="613" width="0.0810%" height="15" fill="rgb(242,97,9)" fg:x="12" fg:w="1"/><text x="1.2224%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0535%" y="597" width="0.0810%" height="15" fill="rgb(228,71,31)" fg:x="13" fg:w="1"/><text x="1.3035%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1345%" y="597" width="0.0810%" height="15" fill="rgb(252,184,16)" fg:x="14" fg:w="1"/><text x="1.3845%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2156%" y="581" width="0.0810%" height="15" fill="rgb(236,169,46)" fg:x="15" fg:w="1"/><text x="1.4656%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.2966%" y="581" width="0.0810%" height="15" fill="rgb(207,17,47)" fg:x="16" fg:w="1"/><text x="1.5466%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2966%" y="565" width="0.0810%" height="15" fill="rgb(206,201,28)" fg:x="16" fg:w="1"/><text x="1.5466%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.3776%" y="565" width="0.0810%" height="15" fill="rgb(224,184,23)" fg:x="17" fg:w="1"/><text x="1.6276%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="1.3776%" y="549" width="0.0810%" height="15" fill="rgb(208,139,48)" fg:x="17" fg:w="1"/><text x="1.6276%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3776%" y="533" width="0.0810%" height="15" fill="rgb(208,130,10)" fg:x="17" fg:w="1"/><text x="1.6276%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4587%" y="565" width="0.0810%" height="15" fill="rgb(211,213,45)" fg:x="18" fg:w="1"/><text x="1.7087%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.62%)</title><rect x="0.0000%" y="709" width="1.6207%" height="15" fill="rgb(235,100,30)" fg:x="0" fg:w="20"/><text x="0.2500%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (16 samples, 1.30%)</title><rect x="0.3241%" y="693" width="1.2966%" height="15" fill="rgb(206,144,31)" fg:x="4" fg:w="16"/><text x="0.5741%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.30%)</title><rect x="0.3241%" y="677" width="1.2966%" height="15" fill="rgb(224,200,26)" fg:x="4" fg:w="16"/><text x="0.5741%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (16 samples, 1.30%)</title><rect x="0.3241%" y="661" width="1.2966%" height="15" fill="rgb(247,104,53)" fg:x="4" fg:w="16"/><text x="0.5741%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.30%)</title><rect x="0.3241%" y="645" width="1.2966%" height="15" fill="rgb(220,14,17)" fg:x="4" fg:w="16"/><text x="0.5741%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.65%)</title><rect x="0.9724%" y="629" width="0.6483%" height="15" fill="rgb(230,140,40)" fg:x="12" fg:w="8"/><text x="1.2224%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="1.0535%" y="613" width="0.5673%" height="15" fill="rgb(229,2,41)" fg:x="13" fg:w="7"/><text x="1.3035%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="1.2156%" y="597" width="0.4052%" height="15" fill="rgb(232,89,16)" fg:x="15" fg:w="5"/><text x="1.4656%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.3776%" y="581" width="0.2431%" height="15" fill="rgb(247,59,52)" fg:x="17" fg:w="3"/><text x="1.6276%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5397%" y="565" width="0.0810%" height="15" fill="rgb(226,110,21)" fg:x="19" fg:w="1"/><text x="1.7897%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5397%" y="549" width="0.0810%" height="15" fill="rgb(224,176,43)" fg:x="19" fg:w="1"/><text x="1.7897%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8639%" y="581" width="0.0810%" height="15" fill="rgb(221,73,6)" fg:x="23" fg:w="1"/><text x="2.1139%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="1.9449%" y="581" width="0.0810%" height="15" fill="rgb(232,78,19)" fg:x="24" fg:w="1"/><text x="2.1949%" y="591.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="1.8639%" y="613" width="0.3241%" height="15" fill="rgb(233,112,48)" fg:x="23" fg:w="4"/><text x="2.1139%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="1.8639%" y="597" width="0.3241%" height="15" fill="rgb(243,131,47)" fg:x="23" fg:w="4"/><text x="2.1139%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::new (2 samples, 0.16%)</title><rect x="2.0259%" y="581" width="0.1621%" height="15" fill="rgb(226,51,1)" fg:x="25" fg:w="2"/><text x="2.2759%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="2.0259%" y="565" width="0.1621%" height="15" fill="rgb(247,58,7)" fg:x="25" fg:w="2"/><text x="2.2759%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.1880%" y="581" width="0.0810%" height="15" fill="rgb(209,7,32)" fg:x="27" fg:w="1"/><text x="2.4380%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.1880%" y="565" width="0.0810%" height="15" fill="rgb(209,39,41)" fg:x="27" fg:w="1"/><text x="2.4380%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.1880%" y="549" width="0.0810%" height="15" fill="rgb(226,182,46)" fg:x="27" fg:w="1"/><text x="2.4380%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.1880%" y="533" width="0.0810%" height="15" fill="rgb(230,219,10)" fg:x="27" fg:w="1"/><text x="2.4380%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.1880%" y="517" width="0.0810%" height="15" fill="rgb(227,175,30)" fg:x="27" fg:w="1"/><text x="2.4380%" y="527.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="2.1880%" y="613" width="0.1621%" height="15" fill="rgb(217,2,50)" fg:x="27" fg:w="2"/><text x="2.4380%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="2.1880%" y="597" width="0.1621%" height="15" fill="rgb(229,160,0)" fg:x="27" fg:w="2"/><text x="2.4380%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2690%" y="581" width="0.0810%" height="15" fill="rgb(207,78,37)" fg:x="28" fg:w="1"/><text x="2.5190%" y="591.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.3501%" y="613" width="0.0810%" height="15" fill="rgb(225,57,0)" fg:x="29" fg:w="1"/><text x="2.6001%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.3501%" y="597" width="0.0810%" height="15" fill="rgb(232,154,2)" fg:x="29" fg:w="1"/><text x="2.6001%" y="607.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.3501%" y="581" width="0.0810%" height="15" fill="rgb(241,212,25)" fg:x="29" fg:w="1"/><text x="2.6001%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.3501%" y="565" width="0.0810%" height="15" fill="rgb(226,69,20)" fg:x="29" fg:w="1"/><text x="2.6001%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.3501%" y="549" width="0.0810%" height="15" fill="rgb(247,184,54)" fg:x="29" fg:w="1"/><text x="2.6001%" y="559.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.4311%" y="613" width="0.0810%" height="15" fill="rgb(210,145,0)" fg:x="30" fg:w="1"/><text x="2.6811%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.4311%" y="597" width="0.0810%" height="15" fill="rgb(253,82,12)" fg:x="30" fg:w="1"/><text x="2.6811%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.4311%" y="581" width="0.0810%" height="15" fill="rgb(245,42,11)" fg:x="30" fg:w="1"/><text x="2.6811%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="2.4311%" y="565" width="0.0810%" height="15" fill="rgb(219,147,32)" fg:x="30" fg:w="1"/><text x="2.6811%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.4311%" y="549" width="0.0810%" height="15" fill="rgb(246,12,7)" fg:x="30" fg:w="1"/><text x="2.6811%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (10 samples, 0.81%)</title><rect x="1.7828%" y="629" width="0.8104%" height="15" fill="rgb(243,50,9)" fg:x="22" fg:w="10"/><text x="2.0328%" y="639.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="2.5122%" y="613" width="0.0810%" height="15" fill="rgb(219,149,6)" fg:x="31" fg:w="1"/><text x="2.7622%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="2.5122%" y="597" width="0.0810%" height="15" fill="rgb(241,51,42)" fg:x="31" fg:w="1"/><text x="2.7622%" y="607.50"></text></g><g><title>&lt;plugins_rune::actions::RuneAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="2.5122%" y="581" width="0.0810%" height="15" fill="rgb(226,128,27)" fg:x="31" fg:w="1"/><text x="2.7622%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="2.6742%" y="373" width="0.0810%" height="15" fill="rgb(244,144,4)" fg:x="33" fg:w="1"/><text x="2.9242%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="2.6742%" y="357" width="0.0810%" height="15" fill="rgb(221,4,13)" fg:x="33" fg:w="1"/><text x="2.9242%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="2.6742%" y="341" width="0.0810%" height="15" fill="rgb(208,170,28)" fg:x="33" fg:w="1"/><text x="2.9242%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.6742%" y="325" width="0.0810%" height="15" fill="rgb(226,131,13)" fg:x="33" fg:w="1"/><text x="2.9242%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="2.6742%" y="613" width="0.1621%" height="15" fill="rgb(215,72,41)" fg:x="33" fg:w="2"/><text x="2.9242%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="2.6742%" y="597" width="0.1621%" height="15" fill="rgb(243,108,20)" fg:x="33" fg:w="2"/><text x="2.9242%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="2.6742%" y="581" width="0.1621%" height="15" fill="rgb(230,189,17)" fg:x="33" fg:w="2"/><text x="2.9242%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="2.6742%" y="565" width="0.1621%" height="15" fill="rgb(220,50,17)" fg:x="33" fg:w="2"/><text x="2.9242%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.6742%" y="549" width="0.1621%" height="15" fill="rgb(248,152,48)" fg:x="33" fg:w="2"/><text x="2.9242%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.6742%" y="533" width="0.1621%" height="15" fill="rgb(244,91,11)" fg:x="33" fg:w="2"/><text x="2.9242%" y="543.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="2.6742%" y="517" width="0.1621%" height="15" fill="rgb(220,157,5)" fg:x="33" fg:w="2"/><text x="2.9242%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="2.6742%" y="501" width="0.1621%" height="15" fill="rgb(253,137,8)" fg:x="33" fg:w="2"/><text x="2.9242%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="2.6742%" y="485" width="0.1621%" height="15" fill="rgb(217,137,51)" fg:x="33" fg:w="2"/><text x="2.9242%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="2.6742%" y="469" width="0.1621%" height="15" fill="rgb(218,209,53)" fg:x="33" fg:w="2"/><text x="2.9242%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="2.6742%" y="453" width="0.1621%" height="15" fill="rgb(249,137,25)" fg:x="33" fg:w="2"/><text x="2.9242%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="2.6742%" y="437" width="0.1621%" height="15" fill="rgb(239,155,26)" fg:x="33" fg:w="2"/><text x="2.9242%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.6742%" y="421" width="0.1621%" height="15" fill="rgb(227,85,46)" fg:x="33" fg:w="2"/><text x="2.9242%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="2.6742%" y="405" width="0.1621%" height="15" fill="rgb(251,107,43)" fg:x="33" fg:w="2"/><text x="2.9242%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.6742%" y="389" width="0.1621%" height="15" fill="rgb(234,170,33)" fg:x="33" fg:w="2"/><text x="2.9242%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="2.7553%" y="373" width="0.0810%" height="15" fill="rgb(206,29,35)" fg:x="34" fg:w="1"/><text x="3.0053%" y="383.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="2.8363%" y="565" width="0.0810%" height="15" fill="rgb(227,138,25)" fg:x="35" fg:w="1"/><text x="3.0863%" y="575.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="2.8363%" y="549" width="0.0810%" height="15" fill="rgb(249,131,35)" fg:x="35" fg:w="1"/><text x="3.0863%" y="559.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.08%)</title><rect x="2.8363%" y="533" width="0.0810%" height="15" fill="rgb(239,6,40)" fg:x="35" fg:w="1"/><text x="3.0863%" y="543.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.41%)</title><rect x="2.5932%" y="629" width="0.4052%" height="15" fill="rgb(246,136,47)" fg:x="32" fg:w="5"/><text x="2.8432%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="2.8363%" y="613" width="0.1621%" height="15" fill="rgb(253,58,26)" fg:x="35" fg:w="2"/><text x="3.0863%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="2.8363%" y="597" width="0.1621%" height="15" fill="rgb(237,141,10)" fg:x="35" fg:w="2"/><text x="3.0863%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="2.8363%" y="581" width="0.1621%" height="15" fill="rgb(234,156,12)" fg:x="35" fg:w="2"/><text x="3.0863%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="2.9173%" y="565" width="0.0810%" height="15" fill="rgb(243,224,36)" fg:x="36" fg:w="1"/><text x="3.1673%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="2.9173%" y="549" width="0.0810%" height="15" fill="rgb(205,229,51)" fg:x="36" fg:w="1"/><text x="3.1673%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="2.9173%" y="533" width="0.0810%" height="15" fill="rgb(223,189,4)" fg:x="36" fg:w="1"/><text x="3.1673%" y="543.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="2.9173%" y="517" width="0.0810%" height="15" fill="rgb(249,167,54)" fg:x="36" fg:w="1"/><text x="3.1673%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.9984%" y="613" width="0.0810%" height="15" fill="rgb(218,34,28)" fg:x="37" fg:w="1"/><text x="3.2484%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.0794%" y="581" width="0.0810%" height="15" fill="rgb(232,109,42)" fg:x="38" fg:w="1"/><text x="3.3294%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.0794%" y="565" width="0.0810%" height="15" fill="rgb(248,214,46)" fg:x="38" fg:w="1"/><text x="3.3294%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.0794%" y="549" width="0.0810%" height="15" fill="rgb(244,216,40)" fg:x="38" fg:w="1"/><text x="3.3294%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.0794%" y="533" width="0.0810%" height="15" fill="rgb(231,226,31)" fg:x="38" fg:w="1"/><text x="3.3294%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.0794%" y="517" width="0.0810%" height="15" fill="rgb(238,38,43)" fg:x="38" fg:w="1"/><text x="3.3294%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.0794%" y="501" width="0.0810%" height="15" fill="rgb(208,88,43)" fg:x="38" fg:w="1"/><text x="3.3294%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.0794%" y="485" width="0.0810%" height="15" fill="rgb(205,136,37)" fg:x="38" fg:w="1"/><text x="3.3294%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.0794%" y="469" width="0.0810%" height="15" fill="rgb(237,34,14)" fg:x="38" fg:w="1"/><text x="3.3294%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.0794%" y="453" width="0.0810%" height="15" fill="rgb(236,193,44)" fg:x="38" fg:w="1"/><text x="3.3294%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.0794%" y="437" width="0.0810%" height="15" fill="rgb(231,48,10)" fg:x="38" fg:w="1"/><text x="3.3294%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.0794%" y="421" width="0.0810%" height="15" fill="rgb(213,141,34)" fg:x="38" fg:w="1"/><text x="3.3294%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.0794%" y="405" width="0.0810%" height="15" fill="rgb(249,130,34)" fg:x="38" fg:w="1"/><text x="3.3294%" y="415.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (5 samples, 0.41%)</title><rect x="3.0794%" y="613" width="0.4052%" height="15" fill="rgb(219,42,41)" fg:x="38" fg:w="5"/><text x="3.3294%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.41%)</title><rect x="3.0794%" y="597" width="0.4052%" height="15" fill="rgb(224,100,54)" fg:x="38" fg:w="5"/><text x="3.3294%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="3.1605%" y="581" width="0.3241%" height="15" fill="rgb(229,200,27)" fg:x="39" fg:w="4"/><text x="3.4105%" y="591.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="3.2415%" y="565" width="0.2431%" height="15" fill="rgb(217,118,10)" fg:x="40" fg:w="3"/><text x="3.4915%" y="575.50"></text></g><g><title>glob::is_dir (6 samples, 0.49%)</title><rect x="3.6467%" y="565" width="0.4862%" height="15" fill="rgb(206,22,3)" fg:x="45" fg:w="6"/><text x="3.8967%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (6 samples, 0.49%)</title><rect x="3.6467%" y="549" width="0.4862%" height="15" fill="rgb(232,163,46)" fg:x="45" fg:w="6"/><text x="3.8967%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (6 samples, 0.49%)</title><rect x="3.6467%" y="533" width="0.4862%" height="15" fill="rgb(206,95,13)" fg:x="45" fg:w="6"/><text x="3.8967%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (6 samples, 0.49%)</title><rect x="3.6467%" y="517" width="0.4862%" height="15" fill="rgb(253,154,18)" fg:x="45" fg:w="6"/><text x="3.8967%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (6 samples, 0.49%)</title><rect x="3.6467%" y="501" width="0.4862%" height="15" fill="rgb(219,32,23)" fg:x="45" fg:w="6"/><text x="3.8967%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (6 samples, 0.49%)</title><rect x="3.6467%" y="485" width="0.4862%" height="15" fill="rgb(230,191,45)" fg:x="45" fg:w="6"/><text x="3.8967%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (6 samples, 0.49%)</title><rect x="3.6467%" y="469" width="0.4862%" height="15" fill="rgb(229,64,36)" fg:x="45" fg:w="6"/><text x="3.8967%" y="479.50"></text></g><g><title>statx (5 samples, 0.41%)</title><rect x="3.7277%" y="453" width="0.4052%" height="15" fill="rgb(205,129,25)" fg:x="46" fg:w="5"/><text x="3.9777%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="3.6467%" y="597" width="0.5673%" height="15" fill="rgb(254,112,7)" fg:x="45" fg:w="7"/><text x="3.8967%" y="607.50"></text></g><g><title>glob::fill_todo (7 samples, 0.57%)</title><rect x="3.6467%" y="581" width="0.5673%" height="15" fill="rgb(226,53,48)" fg:x="45" fg:w="7"/><text x="3.8967%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="4.1329%" y="565" width="0.0810%" height="15" fill="rgb(214,153,38)" fg:x="51" fg:w="1"/><text x="4.3829%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="4.1329%" y="549" width="0.0810%" height="15" fill="rgb(243,101,7)" fg:x="51" fg:w="1"/><text x="4.3829%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="4.1329%" y="533" width="0.0810%" height="15" fill="rgb(240,140,22)" fg:x="51" fg:w="1"/><text x="4.3829%" y="543.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="4.1329%" y="517" width="0.0810%" height="15" fill="rgb(235,114,2)" fg:x="51" fg:w="1"/><text x="4.3829%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;glob::Paths&gt; (1 samples, 0.08%)</title><rect x="4.2139%" y="597" width="0.0810%" height="15" fill="rgb(242,59,12)" fg:x="52" fg:w="1"/><text x="4.4639%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.2139%" y="581" width="0.0810%" height="15" fill="rgb(252,134,9)" fg:x="52" fg:w="1"/><text x="4.4639%" y="591.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.2950%" y="565" width="0.1621%" height="15" fill="rgb(236,4,44)" fg:x="53" fg:w="2"/><text x="4.5450%" y="575.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.3760%" y="549" width="0.0810%" height="15" fill="rgb(254,172,41)" fg:x="54" fg:w="1"/><text x="4.6260%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.4571%" y="549" width="0.1621%" height="15" fill="rgb(244,63,20)" fg:x="55" fg:w="2"/><text x="4.7071%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.5381%" y="533" width="0.0810%" height="15" fill="rgb(250,73,31)" fg:x="56" fg:w="1"/><text x="4.7881%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.5381%" y="517" width="0.0810%" height="15" fill="rgb(241,38,36)" fg:x="56" fg:w="1"/><text x="4.7881%" y="527.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (21 samples, 1.70%)</title><rect x="2.9984%" y="629" width="1.7018%" height="15" fill="rgb(245,211,2)" fg:x="37" fg:w="21"/><text x="3.2484%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (15 samples, 1.22%)</title><rect x="3.4846%" y="613" width="1.2156%" height="15" fill="rgb(206,120,28)" fg:x="43" fg:w="15"/><text x="3.7346%" y="623.50"></text></g><g><title>glob::glob (5 samples, 0.41%)</title><rect x="4.2950%" y="597" width="0.4052%" height="15" fill="rgb(211,59,34)" fg:x="53" fg:w="5"/><text x="4.5450%" y="607.50"></text></g><g><title>glob::glob_with (5 samples, 0.41%)</title><rect x="4.2950%" y="581" width="0.4052%" height="15" fill="rgb(233,168,5)" fg:x="53" fg:w="5"/><text x="4.5450%" y="591.50"></text></g><g><title>glob::Pattern::new (3 samples, 0.24%)</title><rect x="4.4571%" y="565" width="0.2431%" height="15" fill="rgb(234,33,13)" fg:x="55" fg:w="3"/><text x="4.7071%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="4.6191%" y="549" width="0.0810%" height="15" fill="rgb(231,150,26)" fg:x="57" fg:w="1"/><text x="4.8691%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.6191%" y="533" width="0.0810%" height="15" fill="rgb(217,191,4)" fg:x="57" fg:w="1"/><text x="4.8691%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6191%" y="517" width="0.0810%" height="15" fill="rgb(246,198,38)" fg:x="57" fg:w="1"/><text x="4.8691%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.7002%" y="629" width="0.0810%" height="15" fill="rgb(245,64,37)" fg:x="58" fg:w="1"/><text x="4.9502%" y="639.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (39 samples, 3.16%)</title><rect x="1.7018%" y="645" width="3.1605%" height="15" fill="rgb(250,30,36)" fg:x="21" fg:w="39"/><text x="1.9518%" y="655.50">ker..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="4.7812%" y="629" width="0.0810%" height="15" fill="rgb(217,86,53)" fg:x="59" fg:w="1"/><text x="5.0312%" y="639.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="4.7812%" y="613" width="0.0810%" height="15" fill="rgb(228,157,16)" fg:x="59" fg:w="1"/><text x="5.0312%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.8622%" y="613" width="0.0810%" height="15" fill="rgb(217,59,31)" fg:x="60" fg:w="1"/><text x="5.1122%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.8622%" y="597" width="0.0810%" height="15" fill="rgb(237,138,41)" fg:x="60" fg:w="1"/><text x="5.1122%" y="607.50"></text></g><g><title>engine::session::Session::initialize (42 samples, 3.40%)</title><rect x="1.6207%" y="661" width="3.4036%" height="15" fill="rgb(227,91,49)" fg:x="20" fg:w="42"/><text x="1.8707%" y="671.50">eng..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="4.8622%" y="645" width="0.1621%" height="15" fill="rgb(247,21,44)" fg:x="60" fg:w="2"/><text x="5.1122%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.8622%" y="629" width="0.1621%" height="15" fill="rgb(219,210,51)" fg:x="60" fg:w="2"/><text x="5.1122%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::middleware (1 samples, 0.08%)</title><rect x="4.9433%" y="613" width="0.0810%" height="15" fill="rgb(209,140,6)" fg:x="61" fg:w="1"/><text x="5.1933%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (44 samples, 3.57%)</title><rect x="1.6207%" y="709" width="3.5656%" height="15" fill="rgb(221,188,24)" fg:x="20" fg:w="44"/><text x="1.8707%" y="719.50">&lt;eng..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (44 samples, 3.57%)</title><rect x="1.6207%" y="693" width="3.5656%" height="15" fill="rgb(232,154,20)" fg:x="20" fg:w="44"/><text x="1.8707%" y="703.50">engi..</text></g><g><title>engine::session::Session::new (44 samples, 3.57%)</title><rect x="1.6207%" y="677" width="3.5656%" height="15" fill="rgb(244,137,50)" fg:x="20" fg:w="44"/><text x="1.8707%" y="687.50">engi..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="5.0243%" y="661" width="0.1621%" height="15" fill="rgb(225,185,43)" fg:x="62" fg:w="2"/><text x="5.2743%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.0243%" y="645" width="0.1621%" height="15" fill="rgb(213,205,38)" fg:x="62" fg:w="2"/><text x="5.2743%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="5.0243%" y="629" width="0.1621%" height="15" fill="rgb(236,73,12)" fg:x="62" fg:w="2"/><text x="5.2743%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="5.0243%" y="613" width="0.1621%" height="15" fill="rgb(235,219,13)" fg:x="62" fg:w="2"/><text x="5.2743%" y="623.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="5.0243%" y="597" width="0.1621%" height="15" fill="rgb(218,59,36)" fg:x="62" fg:w="2"/><text x="5.2743%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="5.2674%" y="677" width="0.0810%" height="15" fill="rgb(205,110,39)" fg:x="65" fg:w="1"/><text x="5.5174%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="5.2674%" y="661" width="0.0810%" height="15" fill="rgb(218,206,42)" fg:x="65" fg:w="1"/><text x="5.5174%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.3485%" y="645" width="0.0810%" height="15" fill="rgb(248,125,24)" fg:x="66" fg:w="1"/><text x="5.5985%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.3485%" y="629" width="0.0810%" height="15" fill="rgb(242,28,27)" fg:x="66" fg:w="1"/><text x="5.5985%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="5.3485%" y="613" width="0.0810%" height="15" fill="rgb(216,228,15)" fg:x="66" fg:w="1"/><text x="5.5985%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3485%" y="597" width="0.0810%" height="15" fill="rgb(235,116,46)" fg:x="66" fg:w="1"/><text x="5.5985%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3485%" y="581" width="0.0810%" height="15" fill="rgb(224,18,32)" fg:x="66" fg:w="1"/><text x="5.5985%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.3485%" y="565" width="0.0810%" height="15" fill="rgb(252,5,12)" fg:x="66" fg:w="1"/><text x="5.5985%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.3485%" y="549" width="0.0810%" height="15" fill="rgb(251,36,5)" fg:x="66" fg:w="1"/><text x="5.5985%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.3485%" y="533" width="0.0810%" height="15" fill="rgb(217,53,14)" fg:x="66" fg:w="1"/><text x="5.5985%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3485%" y="517" width="0.0810%" height="15" fill="rgb(215,86,45)" fg:x="66" fg:w="1"/><text x="5.5985%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3485%" y="501" width="0.0810%" height="15" fill="rgb(242,169,11)" fg:x="66" fg:w="1"/><text x="5.5985%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.3485%" y="485" width="0.0810%" height="15" fill="rgb(211,213,45)" fg:x="66" fg:w="1"/><text x="5.5985%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.3485%" y="469" width="0.0810%" height="15" fill="rgb(205,88,11)" fg:x="66" fg:w="1"/><text x="5.5985%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.3485%" y="453" width="0.0810%" height="15" fill="rgb(252,69,26)" fg:x="66" fg:w="1"/><text x="5.5985%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.3485%" y="437" width="0.0810%" height="15" fill="rgb(246,123,37)" fg:x="66" fg:w="1"/><text x="5.5985%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3485%" y="421" width="0.0810%" height="15" fill="rgb(212,205,5)" fg:x="66" fg:w="1"/><text x="5.5985%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.5105%" y="517" width="0.0810%" height="15" fill="rgb(253,148,0)" fg:x="68" fg:w="1"/><text x="5.7605%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5105%" y="501" width="0.0810%" height="15" fill="rgb(239,22,4)" fg:x="68" fg:w="1"/><text x="5.7605%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5105%" y="485" width="0.0810%" height="15" fill="rgb(226,26,53)" fg:x="68" fg:w="1"/><text x="5.7605%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5105%" y="469" width="0.0810%" height="15" fill="rgb(225,229,45)" fg:x="68" fg:w="1"/><text x="5.7605%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5105%" y="453" width="0.0810%" height="15" fill="rgb(220,60,37)" fg:x="68" fg:w="1"/><text x="5.7605%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5105%" y="437" width="0.0810%" height="15" fill="rgb(217,180,35)" fg:x="68" fg:w="1"/><text x="5.7605%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.5105%" y="421" width="0.0810%" height="15" fill="rgb(229,7,53)" fg:x="68" fg:w="1"/><text x="5.7605%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.5105%" y="549" width="0.1621%" height="15" fill="rgb(254,137,3)" fg:x="68" fg:w="2"/><text x="5.7605%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.5105%" y="533" width="0.1621%" height="15" fill="rgb(215,140,41)" fg:x="68" fg:w="2"/><text x="5.7605%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.5916%" y="517" width="0.0810%" height="15" fill="rgb(250,80,15)" fg:x="69" fg:w="1"/><text x="5.8416%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.5916%" y="501" width="0.0810%" height="15" fill="rgb(252,191,6)" fg:x="69" fg:w="1"/><text x="5.8416%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="5.6726%" y="549" width="0.2431%" height="15" fill="rgb(246,217,18)" fg:x="70" fg:w="3"/><text x="5.9226%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.7536%" y="533" width="0.1621%" height="15" fill="rgb(223,93,7)" fg:x="71" fg:w="2"/><text x="6.0036%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8347%" y="517" width="0.0810%" height="15" fill="rgb(225,55,52)" fg:x="72" fg:w="1"/><text x="6.0847%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.9157%" y="533" width="0.0810%" height="15" fill="rgb(240,31,24)" fg:x="73" fg:w="1"/><text x="6.1657%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.9157%" y="517" width="0.0810%" height="15" fill="rgb(205,56,52)" fg:x="73" fg:w="1"/><text x="6.1657%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.9968%" y="533" width="0.1621%" height="15" fill="rgb(246,146,12)" fg:x="74" fg:w="2"/><text x="6.2468%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.0778%" y="517" width="0.0810%" height="15" fill="rgb(239,84,36)" fg:x="75" fg:w="1"/><text x="6.3278%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.9157%" y="549" width="0.3241%" height="15" fill="rgb(207,41,40)" fg:x="73" fg:w="4"/><text x="6.1657%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1588%" y="533" width="0.0810%" height="15" fill="rgb(241,179,25)" fg:x="76" fg:w="1"/><text x="6.4088%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="5.5105%" y="565" width="0.8104%" height="15" fill="rgb(210,0,34)" fg:x="68" fg:w="10"/><text x="5.7605%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2399%" y="549" width="0.0810%" height="15" fill="rgb(225,217,29)" fg:x="77" fg:w="1"/><text x="6.4899%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.97%)</title><rect x="5.4295%" y="597" width="0.9724%" height="15" fill="rgb(216,191,38)" fg:x="67" fg:w="12"/><text x="5.6795%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="5.4295%" y="581" width="0.9724%" height="15" fill="rgb(232,140,52)" fg:x="67" fg:w="12"/><text x="5.6795%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3209%" y="565" width="0.0810%" height="15" fill="rgb(223,158,51)" fg:x="78" fg:w="1"/><text x="6.5709%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.4019%" y="565" width="0.0810%" height="15" fill="rgb(235,29,51)" fg:x="79" fg:w="1"/><text x="6.6519%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4830%" y="549" width="0.0810%" height="15" fill="rgb(215,181,18)" fg:x="80" fg:w="1"/><text x="6.7330%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.5640%" y="549" width="0.0810%" height="15" fill="rgb(227,125,34)" fg:x="81" fg:w="1"/><text x="6.8140%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8071%" y="533" width="0.0810%" height="15" fill="rgb(230,197,49)" fg:x="84" fg:w="1"/><text x="7.0571%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8882%" y="533" width="0.0810%" height="15" fill="rgb(239,141,16)" fg:x="85" fg:w="1"/><text x="7.1382%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8882%" y="517" width="0.0810%" height="15" fill="rgb(225,105,43)" fg:x="85" fg:w="1"/><text x="7.1382%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="6.4019%" y="597" width="0.6483%" height="15" fill="rgb(214,131,14)" fg:x="79" fg:w="8"/><text x="6.6519%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.65%)</title><rect x="6.4019%" y="581" width="0.6483%" height="15" fill="rgb(229,177,11)" fg:x="79" fg:w="8"/><text x="6.6519%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="6.4830%" y="565" width="0.5673%" height="15" fill="rgb(231,180,14)" fg:x="80" fg:w="7"/><text x="6.7330%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="6.6451%" y="549" width="0.4052%" height="15" fill="rgb(232,88,2)" fg:x="82" fg:w="5"/><text x="6.8951%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.9692%" y="533" width="0.0810%" height="15" fill="rgb(205,220,8)" fg:x="86" fg:w="1"/><text x="7.2192%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="6.9692%" y="517" width="0.0810%" height="15" fill="rgb(225,23,53)" fg:x="86" fg:w="1"/><text x="7.2192%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.9692%" y="501" width="0.0810%" height="15" fill="rgb(213,62,29)" fg:x="86" fg:w="1"/><text x="7.2192%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.1313%" y="533" width="0.0810%" height="15" fill="rgb(227,75,7)" fg:x="88" fg:w="1"/><text x="7.3813%" y="543.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="7.1313%" y="565" width="0.1621%" height="15" fill="rgb(207,105,14)" fg:x="88" fg:w="2"/><text x="7.3813%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="7.1313%" y="549" width="0.1621%" height="15" fill="rgb(245,62,29)" fg:x="88" fg:w="2"/><text x="7.3813%" y="559.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="7.2123%" y="533" width="0.0810%" height="15" fill="rgb(236,202,4)" fg:x="89" fg:w="1"/><text x="7.4623%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="7.0502%" y="581" width="0.3241%" height="15" fill="rgb(250,67,1)" fg:x="87" fg:w="4"/><text x="7.3002%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="7.2934%" y="565" width="0.0810%" height="15" fill="rgb(253,115,44)" fg:x="90" fg:w="1"/><text x="7.5434%" y="575.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="7.2934%" y="549" width="0.0810%" height="15" fill="rgb(251,139,18)" fg:x="90" fg:w="1"/><text x="7.5434%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2934%" y="533" width="0.0810%" height="15" fill="rgb(218,22,32)" fg:x="90" fg:w="1"/><text x="7.5434%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.3744%" y="549" width="0.1621%" height="15" fill="rgb(243,53,5)" fg:x="91" fg:w="2"/><text x="7.6244%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="7.5365%" y="533" width="0.0810%" height="15" fill="rgb(227,56,16)" fg:x="93" fg:w="1"/><text x="7.7865%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="7.5365%" y="549" width="0.1621%" height="15" fill="rgb(245,53,0)" fg:x="93" fg:w="2"/><text x="7.7865%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6175%" y="533" width="0.0810%" height="15" fill="rgb(216,170,35)" fg:x="94" fg:w="1"/><text x="7.8675%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6985%" y="549" width="0.0810%" height="15" fill="rgb(211,200,8)" fg:x="95" fg:w="1"/><text x="7.9485%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6985%" y="533" width="0.0810%" height="15" fill="rgb(228,204,44)" fg:x="95" fg:w="1"/><text x="7.9485%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6985%" y="517" width="0.0810%" height="15" fill="rgb(214,121,17)" fg:x="95" fg:w="1"/><text x="7.9485%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.7796%" y="437" width="0.0810%" height="15" fill="rgb(233,64,38)" fg:x="96" fg:w="1"/><text x="8.0296%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7796%" y="421" width="0.0810%" height="15" fill="rgb(253,54,19)" fg:x="96" fg:w="1"/><text x="8.0296%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="7.7796%" y="501" width="0.1621%" height="15" fill="rgb(253,94,18)" fg:x="96" fg:w="2"/><text x="8.0296%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.7796%" y="485" width="0.1621%" height="15" fill="rgb(227,57,52)" fg:x="96" fg:w="2"/><text x="8.0296%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="7.7796%" y="469" width="0.1621%" height="15" fill="rgb(230,228,50)" fg:x="96" fg:w="2"/><text x="8.0296%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="7.7796%" y="453" width="0.1621%" height="15" fill="rgb(217,205,27)" fg:x="96" fg:w="2"/><text x="8.0296%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8606%" y="437" width="0.0810%" height="15" fill="rgb(252,71,50)" fg:x="97" fg:w="1"/><text x="8.1106%" y="447.50"></text></g><g><title>engine::session::Session::flush (35 samples, 2.84%)</title><rect x="5.1864%" y="693" width="2.8363%" height="15" fill="rgb(209,86,4)" fg:x="64" fg:w="35"/><text x="5.4364%" y="703.50">en..</text></g><g><title>engine::session::state::State::close (33 samples, 2.67%)</title><rect x="5.3485%" y="677" width="2.6742%" height="15" fill="rgb(229,94,0)" fg:x="66" fg:w="33"/><text x="5.5985%" y="687.50">en..</text></g><g><title>engine::session::state::State::flush_entities (33 samples, 2.67%)</title><rect x="5.3485%" y="661" width="2.6742%" height="15" fill="rgb(252,223,21)" fg:x="66" fg:w="33"/><text x="5.5985%" y="671.50">en..</text></g><g><title>core::iter::adapters::try_process (32 samples, 2.59%)</title><rect x="5.4295%" y="645" width="2.5932%" height="15" fill="rgb(230,210,4)" fg:x="67" fg:w="32"/><text x="5.6795%" y="655.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 2.59%)</title><rect x="5.4295%" y="629" width="2.5932%" height="15" fill="rgb(240,149,38)" fg:x="67" fg:w="32"/><text x="5.6795%" y="639.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (32 samples, 2.59%)</title><rect x="5.4295%" y="613" width="2.5932%" height="15" fill="rgb(254,105,20)" fg:x="67" fg:w="32"/><text x="5.6795%" y="623.50">en..</text></g><g><title>kernel::model::any_entity_changes (12 samples, 0.97%)</title><rect x="7.0502%" y="597" width="0.9724%" height="15" fill="rgb(253,87,46)" fg:x="87" fg:w="12"/><text x="7.3002%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="7.3744%" y="581" width="0.6483%" height="15" fill="rgb(253,116,33)" fg:x="91" fg:w="8"/><text x="7.6244%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="7.3744%" y="565" width="0.6483%" height="15" fill="rgb(229,198,5)" fg:x="91" fg:w="8"/><text x="7.6244%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="7.7796%" y="549" width="0.2431%" height="15" fill="rgb(242,38,37)" fg:x="96" fg:w="3"/><text x="8.0296%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="7.7796%" y="533" width="0.2431%" height="15" fill="rgb(242,69,53)" fg:x="96" fg:w="3"/><text x="8.0296%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="7.7796%" y="517" width="0.2431%" height="15" fill="rgb(249,80,16)" fg:x="96" fg:w="3"/><text x="8.0296%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.9417%" y="501" width="0.0810%" height="15" fill="rgb(206,128,11)" fg:x="98" fg:w="1"/><text x="8.1917%" y="511.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="8.0227%" y="693" width="0.1621%" height="15" fill="rgb(212,35,20)" fg:x="99" fg:w="2"/><text x="8.2727%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="8.0227%" y="677" width="0.1621%" height="15" fill="rgb(236,79,13)" fg:x="99" fg:w="2"/><text x="8.2727%" y="687.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="8.0227%" y="661" width="0.1621%" height="15" fill="rgb(233,123,3)" fg:x="99" fg:w="2"/><text x="8.2727%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1037%" y="645" width="0.0810%" height="15" fill="rgb(214,93,52)" fg:x="100" fg:w="1"/><text x="8.3537%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1037%" y="629" width="0.0810%" height="15" fill="rgb(251,37,40)" fg:x="100" fg:w="1"/><text x="8.3537%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.1037%" y="613" width="0.0810%" height="15" fill="rgb(227,80,54)" fg:x="100" fg:w="1"/><text x="8.3537%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1037%" y="597" width="0.0810%" height="15" fill="rgb(254,48,11)" fg:x="100" fg:w="1"/><text x="8.3537%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.1037%" y="581" width="0.0810%" height="15" fill="rgb(235,193,26)" fg:x="100" fg:w="1"/><text x="8.3537%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.1037%" y="565" width="0.0810%" height="15" fill="rgb(229,99,21)" fg:x="100" fg:w="1"/><text x="8.3537%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.1848%" y="613" width="0.0810%" height="15" fill="rgb(211,140,41)" fg:x="101" fg:w="1"/><text x="8.4348%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.1848%" y="645" width="0.1621%" height="15" fill="rgb(240,227,30)" fg:x="101" fg:w="2"/><text x="8.4348%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.1848%" y="629" width="0.1621%" height="15" fill="rgb(215,224,45)" fg:x="101" fg:w="2"/><text x="8.4348%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2658%" y="613" width="0.0810%" height="15" fill="rgb(206,123,31)" fg:x="102" fg:w="1"/><text x="8.5158%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="8.1848%" y="677" width="0.2431%" height="15" fill="rgb(210,138,16)" fg:x="101" fg:w="3"/><text x="8.4348%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="8.1848%" y="661" width="0.2431%" height="15" fill="rgb(228,57,28)" fg:x="101" fg:w="3"/><text x="8.4348%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3468%" y="645" width="0.0810%" height="15" fill="rgb(242,170,10)" fg:x="103" fg:w="1"/><text x="8.5968%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3468%" y="629" width="0.0810%" height="15" fill="rgb(228,214,39)" fg:x="103" fg:w="1"/><text x="8.5968%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.3468%" y="613" width="0.0810%" height="15" fill="rgb(218,179,33)" fg:x="103" fg:w="1"/><text x="8.5968%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3468%" y="597" width="0.0810%" height="15" fill="rgb(235,193,39)" fg:x="103" fg:w="1"/><text x="8.5968%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.3468%" y="581" width="0.0810%" height="15" fill="rgb(219,221,36)" fg:x="103" fg:w="1"/><text x="8.5968%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.3468%" y="565" width="0.0810%" height="15" fill="rgb(248,218,19)" fg:x="103" fg:w="1"/><text x="8.5968%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.4279%" y="677" width="0.0810%" height="15" fill="rgb(205,50,9)" fg:x="104" fg:w="1"/><text x="8.6779%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.4279%" y="661" width="0.0810%" height="15" fill="rgb(238,81,28)" fg:x="104" fg:w="1"/><text x="8.6779%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.4279%" y="645" width="0.0810%" height="15" fill="rgb(235,110,19)" fg:x="104" fg:w="1"/><text x="8.6779%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.4279%" y="629" width="0.0810%" height="15" fill="rgb(214,7,14)" fg:x="104" fg:w="1"/><text x="8.6779%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.4279%" y="613" width="0.0810%" height="15" fill="rgb(211,77,3)" fg:x="104" fg:w="1"/><text x="8.6779%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.4279%" y="597" width="0.0810%" height="15" fill="rgb(229,5,9)" fg:x="104" fg:w="1"/><text x="8.6779%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.4279%" y="581" width="0.0810%" height="15" fill="rgb(225,90,11)" fg:x="104" fg:w="1"/><text x="8.6779%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.4279%" y="565" width="0.0810%" height="15" fill="rgb(242,56,8)" fg:x="104" fg:w="1"/><text x="8.6779%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.4279%" y="549" width="0.0810%" height="15" fill="rgb(249,212,39)" fg:x="104" fg:w="1"/><text x="8.6779%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.4279%" y="533" width="0.0810%" height="15" fill="rgb(236,90,9)" fg:x="104" fg:w="1"/><text x="8.6779%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.4279%" y="517" width="0.0810%" height="15" fill="rgb(206,88,35)" fg:x="104" fg:w="1"/><text x="8.6779%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.4279%" y="501" width="0.0810%" height="15" fill="rgb(205,126,30)" fg:x="104" fg:w="1"/><text x="8.6779%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5089%" y="645" width="0.0810%" height="15" fill="rgb(230,176,12)" fg:x="105" fg:w="1"/><text x="8.7589%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5089%" y="629" width="0.0810%" height="15" fill="rgb(243,19,9)" fg:x="105" fg:w="1"/><text x="8.7589%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5089%" y="613" width="0.0810%" height="15" fill="rgb(245,171,17)" fg:x="105" fg:w="1"/><text x="8.7589%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5089%" y="597" width="0.0810%" height="15" fill="rgb(227,52,21)" fg:x="105" fg:w="1"/><text x="8.7589%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.5089%" y="581" width="0.0810%" height="15" fill="rgb(238,69,14)" fg:x="105" fg:w="1"/><text x="8.7589%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.5089%" y="565" width="0.0810%" height="15" fill="rgb(241,156,39)" fg:x="105" fg:w="1"/><text x="8.7589%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.5089%" y="549" width="0.0810%" height="15" fill="rgb(212,227,28)" fg:x="105" fg:w="1"/><text x="8.7589%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5089%" y="533" width="0.0810%" height="15" fill="rgb(209,118,27)" fg:x="105" fg:w="1"/><text x="8.7589%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.5089%" y="517" width="0.0810%" height="15" fill="rgb(226,102,5)" fg:x="105" fg:w="1"/><text x="8.7589%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.5089%" y="501" width="0.0810%" height="15" fill="rgb(223,34,3)" fg:x="105" fg:w="1"/><text x="8.7589%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.5089%" y="485" width="0.0810%" height="15" fill="rgb(221,81,38)" fg:x="105" fg:w="1"/><text x="8.7589%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.5089%" y="469" width="0.0810%" height="15" fill="rgb(236,219,28)" fg:x="105" fg:w="1"/><text x="8.7589%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.5089%" y="453" width="0.0810%" height="15" fill="rgb(213,200,14)" fg:x="105" fg:w="1"/><text x="8.7589%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="8.5089%" y="437" width="0.0810%" height="15" fill="rgb(240,33,19)" fg:x="105" fg:w="1"/><text x="8.7589%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="8.5089%" y="421" width="0.0810%" height="15" fill="rgb(233,113,27)" fg:x="105" fg:w="1"/><text x="8.7589%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="8.5089%" y="661" width="0.1621%" height="15" fill="rgb(220,221,18)" fg:x="105" fg:w="2"/><text x="8.7589%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="8.5900%" y="645" width="0.0810%" height="15" fill="rgb(238,92,8)" fg:x="106" fg:w="1"/><text x="8.8400%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5900%" y="629" width="0.0810%" height="15" fill="rgb(222,164,16)" fg:x="106" fg:w="1"/><text x="8.8400%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="8.6710%" y="613" width="0.0810%" height="15" fill="rgb(241,119,3)" fg:x="107" fg:w="1"/><text x="8.9210%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6710%" y="597" width="0.0810%" height="15" fill="rgb(241,44,8)" fg:x="107" fg:w="1"/><text x="8.9210%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6710%" y="581" width="0.0810%" height="15" fill="rgb(230,36,40)" fg:x="107" fg:w="1"/><text x="8.9210%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.6710%" y="565" width="0.0810%" height="15" fill="rgb(243,16,36)" fg:x="107" fg:w="1"/><text x="8.9210%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6710%" y="549" width="0.0810%" height="15" fill="rgb(231,4,26)" fg:x="107" fg:w="1"/><text x="8.9210%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6710%" y="533" width="0.0810%" height="15" fill="rgb(240,9,31)" fg:x="107" fg:w="1"/><text x="8.9210%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.6710%" y="517" width="0.0810%" height="15" fill="rgb(207,173,15)" fg:x="107" fg:w="1"/><text x="8.9210%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.6710%" y="501" width="0.0810%" height="15" fill="rgb(224,192,53)" fg:x="107" fg:w="1"/><text x="8.9210%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.6710%" y="485" width="0.0810%" height="15" fill="rgb(223,67,28)" fg:x="107" fg:w="1"/><text x="8.9210%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.6710%" y="469" width="0.0810%" height="15" fill="rgb(211,20,47)" fg:x="107" fg:w="1"/><text x="8.9210%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.6710%" y="453" width="0.0810%" height="15" fill="rgb(240,228,2)" fg:x="107" fg:w="1"/><text x="8.9210%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.6710%" y="437" width="0.0810%" height="15" fill="rgb(248,151,12)" fg:x="107" fg:w="1"/><text x="8.9210%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.6710%" y="421" width="0.0810%" height="15" fill="rgb(244,8,39)" fg:x="107" fg:w="1"/><text x="8.9210%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.6710%" y="405" width="0.0810%" height="15" fill="rgb(222,26,8)" fg:x="107" fg:w="1"/><text x="8.9210%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.6710%" y="389" width="0.0810%" height="15" fill="rgb(213,106,44)" fg:x="107" fg:w="1"/><text x="8.9210%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6710%" y="373" width="0.0810%" height="15" fill="rgb(214,129,20)" fg:x="107" fg:w="1"/><text x="8.9210%" y="383.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.7520%" y="613" width="0.0810%" height="15" fill="rgb(212,32,13)" fg:x="108" fg:w="1"/><text x="9.0020%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.8331%" y="565" width="0.0810%" height="15" fill="rgb(208,168,33)" fg:x="109" fg:w="1"/><text x="9.0831%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (10 samples, 0.81%)</title><rect x="8.1848%" y="693" width="0.8104%" height="15" fill="rgb(231,207,8)" fg:x="101" fg:w="10"/><text x="8.4348%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="8.5089%" y="677" width="0.4862%" height="15" fill="rgb(235,219,23)" fg:x="105" fg:w="6"/><text x="8.7589%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="8.6710%" y="661" width="0.3241%" height="15" fill="rgb(226,216,26)" fg:x="107" fg:w="4"/><text x="8.9210%" y="671.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="8.6710%" y="645" width="0.3241%" height="15" fill="rgb(239,137,16)" fg:x="107" fg:w="4"/><text x="8.9210%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="8.6710%" y="629" width="0.3241%" height="15" fill="rgb(207,12,36)" fg:x="107" fg:w="4"/><text x="8.9210%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="8.8331%" y="613" width="0.1621%" height="15" fill="rgb(210,214,24)" fg:x="109" fg:w="2"/><text x="9.0831%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="8.8331%" y="597" width="0.1621%" height="15" fill="rgb(206,56,30)" fg:x="109" fg:w="2"/><text x="9.0831%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="8.8331%" y="581" width="0.1621%" height="15" fill="rgb(228,143,26)" fg:x="109" fg:w="2"/><text x="9.0831%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9141%" y="565" width="0.0810%" height="15" fill="rgb(216,218,46)" fg:x="110" fg:w="1"/><text x="9.1641%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="8.9951%" y="661" width="0.1621%" height="15" fill="rgb(206,6,19)" fg:x="111" fg:w="2"/><text x="9.2451%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="9.0762%" y="645" width="0.0810%" height="15" fill="rgb(239,177,51)" fg:x="112" fg:w="1"/><text x="9.3262%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="9.0762%" y="629" width="0.0810%" height="15" fill="rgb(216,55,25)" fg:x="112" fg:w="1"/><text x="9.3262%" y="639.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="9.0762%" y="613" width="0.0810%" height="15" fill="rgb(231,163,29)" fg:x="112" fg:w="1"/><text x="9.3262%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.0762%" y="597" width="0.0810%" height="15" fill="rgb(232,149,50)" fg:x="112" fg:w="1"/><text x="9.3262%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.0762%" y="581" width="0.0810%" height="15" fill="rgb(223,142,48)" fg:x="112" fg:w="1"/><text x="9.3262%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.0762%" y="565" width="0.0810%" height="15" fill="rgb(245,83,23)" fg:x="112" fg:w="1"/><text x="9.3262%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0762%" y="549" width="0.0810%" height="15" fill="rgb(224,63,2)" fg:x="112" fg:w="1"/><text x="9.3262%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.0762%" y="533" width="0.0810%" height="15" fill="rgb(218,65,53)" fg:x="112" fg:w="1"/><text x="9.3262%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.0762%" y="517" width="0.0810%" height="15" fill="rgb(221,84,29)" fg:x="112" fg:w="1"/><text x="9.3262%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.0762%" y="501" width="0.0810%" height="15" fill="rgb(234,0,32)" fg:x="112" fg:w="1"/><text x="9.3262%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.0762%" y="485" width="0.0810%" height="15" fill="rgb(206,20,16)" fg:x="112" fg:w="1"/><text x="9.3262%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.0762%" y="469" width="0.0810%" height="15" fill="rgb(244,172,18)" fg:x="112" fg:w="1"/><text x="9.3262%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.0762%" y="453" width="0.0810%" height="15" fill="rgb(254,133,1)" fg:x="112" fg:w="1"/><text x="9.3262%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.0762%" y="437" width="0.0810%" height="15" fill="rgb(222,206,41)" fg:x="112" fg:w="1"/><text x="9.3262%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.24%)</title><rect x="8.9951%" y="693" width="0.2431%" height="15" fill="rgb(212,3,42)" fg:x="111" fg:w="3"/><text x="9.2451%" y="703.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.24%)</title><rect x="8.9951%" y="677" width="0.2431%" height="15" fill="rgb(241,11,4)" fg:x="111" fg:w="3"/><text x="9.2451%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="9.1572%" y="661" width="0.0810%" height="15" fill="rgb(205,19,26)" fg:x="113" fg:w="1"/><text x="9.4072%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="9.1572%" y="645" width="0.0810%" height="15" fill="rgb(210,179,32)" fg:x="113" fg:w="1"/><text x="9.4072%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="9.1572%" y="629" width="0.0810%" height="15" fill="rgb(227,116,49)" fg:x="113" fg:w="1"/><text x="9.4072%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2382%" y="581" width="0.0810%" height="15" fill="rgb(211,146,6)" fg:x="114" fg:w="1"/><text x="9.4882%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2382%" y="565" width="0.0810%" height="15" fill="rgb(219,44,39)" fg:x="114" fg:w="1"/><text x="9.4882%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2382%" y="549" width="0.0810%" height="15" fill="rgb(234,128,11)" fg:x="114" fg:w="1"/><text x="9.4882%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="9.2382%" y="693" width="0.1621%" height="15" fill="rgb(220,183,53)" fg:x="114" fg:w="2"/><text x="9.4882%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="9.2382%" y="677" width="0.1621%" height="15" fill="rgb(213,219,32)" fg:x="114" fg:w="2"/><text x="9.4882%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="9.2382%" y="661" width="0.1621%" height="15" fill="rgb(232,156,16)" fg:x="114" fg:w="2"/><text x="9.4882%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="9.2382%" y="645" width="0.1621%" height="15" fill="rgb(246,135,34)" fg:x="114" fg:w="2"/><text x="9.4882%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="9.2382%" y="629" width="0.1621%" height="15" fill="rgb(241,99,0)" fg:x="114" fg:w="2"/><text x="9.4882%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.2382%" y="613" width="0.1621%" height="15" fill="rgb(222,103,45)" fg:x="114" fg:w="2"/><text x="9.4882%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="9.2382%" y="597" width="0.1621%" height="15" fill="rgb(212,57,4)" fg:x="114" fg:w="2"/><text x="9.4882%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3193%" y="581" width="0.0810%" height="15" fill="rgb(215,68,47)" fg:x="115" fg:w="1"/><text x="9.5693%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3193%" y="565" width="0.0810%" height="15" fill="rgb(230,84,2)" fg:x="115" fg:w="1"/><text x="9.5693%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.3193%" y="549" width="0.0810%" height="15" fill="rgb(220,102,14)" fg:x="115" fg:w="1"/><text x="9.5693%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.3193%" y="533" width="0.0810%" height="15" fill="rgb(240,10,32)" fg:x="115" fg:w="1"/><text x="9.5693%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.3193%" y="517" width="0.0810%" height="15" fill="rgb(215,47,27)" fg:x="115" fg:w="1"/><text x="9.5693%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.3193%" y="501" width="0.0810%" height="15" fill="rgb(233,188,43)" fg:x="115" fg:w="1"/><text x="9.5693%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.3193%" y="485" width="0.0810%" height="15" fill="rgb(253,190,1)" fg:x="115" fg:w="1"/><text x="9.5693%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.3193%" y="469" width="0.0810%" height="15" fill="rgb(206,114,52)" fg:x="115" fg:w="1"/><text x="9.5693%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.3193%" y="453" width="0.0810%" height="15" fill="rgb(233,120,37)" fg:x="115" fg:w="1"/><text x="9.5693%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.3193%" y="437" width="0.0810%" height="15" fill="rgb(214,52,39)" fg:x="115" fg:w="1"/><text x="9.5693%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.3193%" y="421" width="0.0810%" height="15" fill="rgb(223,80,29)" fg:x="115" fg:w="1"/><text x="9.5693%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.3193%" y="405" width="0.0810%" height="15" fill="rgb(230,101,40)" fg:x="115" fg:w="1"/><text x="9.5693%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.3193%" y="389" width="0.0810%" height="15" fill="rgb(219,211,8)" fg:x="115" fg:w="1"/><text x="9.5693%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="9.4003%" y="677" width="0.0810%" height="15" fill="rgb(252,126,28)" fg:x="116" fg:w="1"/><text x="9.6503%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="9.4003%" y="661" width="0.0810%" height="15" fill="rgb(215,56,38)" fg:x="116" fg:w="1"/><text x="9.6503%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4003%" y="645" width="0.0810%" height="15" fill="rgb(249,55,44)" fg:x="116" fg:w="1"/><text x="9.6503%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="9.4814%" y="677" width="0.0810%" height="15" fill="rgb(220,221,32)" fg:x="117" fg:w="1"/><text x="9.7314%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.4814%" y="661" width="0.0810%" height="15" fill="rgb(212,216,41)" fg:x="117" fg:w="1"/><text x="9.7314%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="9.4814%" y="645" width="0.0810%" height="15" fill="rgb(228,213,43)" fg:x="117" fg:w="1"/><text x="9.7314%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="9.4814%" y="629" width="0.0810%" height="15" fill="rgb(211,31,26)" fg:x="117" fg:w="1"/><text x="9.7314%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="9.5624%" y="677" width="0.0810%" height="15" fill="rgb(229,202,19)" fg:x="118" fg:w="1"/><text x="9.8124%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6434%" y="613" width="0.0810%" height="15" fill="rgb(229,105,46)" fg:x="119" fg:w="1"/><text x="9.8934%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="9.6434%" y="661" width="0.1621%" height="15" fill="rgb(235,108,1)" fg:x="119" fg:w="2"/><text x="9.8934%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.6434%" y="645" width="0.1621%" height="15" fill="rgb(245,111,35)" fg:x="119" fg:w="2"/><text x="9.8934%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="9.6434%" y="629" width="0.1621%" height="15" fill="rgb(219,185,31)" fg:x="119" fg:w="2"/><text x="9.8934%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7245%" y="613" width="0.0810%" height="15" fill="rgb(214,4,43)" fg:x="120" fg:w="1"/><text x="9.9745%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.8055%" y="613" width="0.1621%" height="15" fill="rgb(235,227,40)" fg:x="121" fg:w="2"/><text x="10.0555%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="9.8055%" y="597" width="0.1621%" height="15" fill="rgb(230,88,30)" fg:x="121" fg:w="2"/><text x="10.0555%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (2 samples, 0.16%)</title><rect x="9.8055%" y="581" width="0.1621%" height="15" fill="rgb(216,217,1)" fg:x="121" fg:w="2"/><text x="10.0555%" y="591.50"></text></g><g><title>kernel::model::base::EntityKey::new (2 samples, 0.16%)</title><rect x="9.8055%" y="565" width="0.1621%" height="15" fill="rgb(248,139,50)" fg:x="121" fg:w="2"/><text x="10.0555%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8865%" y="549" width="0.0810%" height="15" fill="rgb(233,1,21)" fg:x="122" fg:w="1"/><text x="10.1365%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.0486%" y="533" width="0.0810%" height="15" fill="rgb(215,183,12)" fg:x="124" fg:w="1"/><text x="10.2986%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.0486%" y="517" width="0.0810%" height="15" fill="rgb(229,104,42)" fg:x="124" fg:w="1"/><text x="10.2986%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.0486%" y="549" width="0.1621%" height="15" fill="rgb(243,34,48)" fg:x="124" fg:w="2"/><text x="10.2986%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.1297%" y="533" width="0.0810%" height="15" fill="rgb(239,11,44)" fg:x="125" fg:w="1"/><text x="10.3797%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.1297%" y="517" width="0.0810%" height="15" fill="rgb(231,98,35)" fg:x="125" fg:w="1"/><text x="10.3797%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.1297%" y="501" width="0.0810%" height="15" fill="rgb(233,28,25)" fg:x="125" fg:w="1"/><text x="10.3797%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.2917%" y="517" width="0.0810%" height="15" fill="rgb(234,123,11)" fg:x="127" fg:w="1"/><text x="10.5417%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="10.3728%" y="501" width="0.3241%" height="15" fill="rgb(220,69,3)" fg:x="128" fg:w="4"/><text x="10.6228%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="10.3728%" y="485" width="0.3241%" height="15" fill="rgb(214,64,36)" fg:x="128" fg:w="4"/><text x="10.6228%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="10.4538%" y="469" width="0.2431%" height="15" fill="rgb(211,138,32)" fg:x="129" fg:w="3"/><text x="10.7038%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.5348%" y="453" width="0.1621%" height="15" fill="rgb(213,118,47)" fg:x="130" fg:w="2"/><text x="10.7848%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="10.5348%" y="437" width="0.1621%" height="15" fill="rgb(243,124,49)" fg:x="130" fg:w="2"/><text x="10.7848%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="10.5348%" y="421" width="0.1621%" height="15" fill="rgb(221,30,28)" fg:x="130" fg:w="2"/><text x="10.7848%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="10.5348%" y="405" width="0.1621%" height="15" fill="rgb(246,37,13)" fg:x="130" fg:w="2"/><text x="10.7848%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="10.2917%" y="533" width="0.7293%" height="15" fill="rgb(249,66,14)" fg:x="127" fg:w="9"/><text x="10.5417%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="10.3728%" y="517" width="0.6483%" height="15" fill="rgb(213,166,5)" fg:x="128" fg:w="8"/><text x="10.6228%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="10.6969%" y="501" width="0.3241%" height="15" fill="rgb(221,66,24)" fg:x="132" fg:w="4"/><text x="10.9469%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="10.6969%" y="485" width="0.3241%" height="15" fill="rgb(210,132,17)" fg:x="132" fg:w="4"/><text x="10.9469%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="10.7780%" y="469" width="0.2431%" height="15" fill="rgb(243,202,5)" fg:x="133" fg:w="3"/><text x="11.0280%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.8590%" y="453" width="0.1621%" height="15" fill="rgb(233,70,48)" fg:x="134" fg:w="2"/><text x="11.1090%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.8590%" y="437" width="0.1621%" height="15" fill="rgb(238,41,26)" fg:x="134" fg:w="2"/><text x="11.1090%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="10.8590%" y="421" width="0.1621%" height="15" fill="rgb(241,19,31)" fg:x="134" fg:w="2"/><text x="11.1090%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="10.8590%" y="405" width="0.1621%" height="15" fill="rgb(214,76,10)" fg:x="134" fg:w="2"/><text x="11.1090%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="10.8590%" y="389" width="0.1621%" height="15" fill="rgb(254,202,22)" fg:x="134" fg:w="2"/><text x="11.1090%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.30%)</title><rect x="9.9676%" y="565" width="1.2966%" height="15" fill="rgb(214,72,24)" fg:x="123" fg:w="16"/><text x="10.2176%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.05%)</title><rect x="10.2107%" y="549" width="1.0535%" height="15" fill="rgb(221,92,46)" fg:x="126" fg:w="13"/><text x="10.4607%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="11.0211%" y="533" width="0.2431%" height="15" fill="rgb(246,13,50)" fg:x="136" fg:w="3"/><text x="11.2711%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="11.0211%" y="517" width="0.2431%" height="15" fill="rgb(240,165,38)" fg:x="136" fg:w="3"/><text x="11.2711%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.1021%" y="501" width="0.1621%" height="15" fill="rgb(241,24,51)" fg:x="137" fg:w="2"/><text x="11.3521%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.2642%" y="533" width="0.0810%" height="15" fill="rgb(227,51,44)" fg:x="139" fg:w="1"/><text x="11.5142%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.2642%" y="565" width="0.1621%" height="15" fill="rgb(231,121,3)" fg:x="139" fg:w="2"/><text x="11.5142%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="11.2642%" y="549" width="0.1621%" height="15" fill="rgb(245,3,41)" fg:x="139" fg:w="2"/><text x="11.5142%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.3452%" y="533" width="0.0810%" height="15" fill="rgb(214,13,26)" fg:x="140" fg:w="1"/><text x="11.5952%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.3452%" y="517" width="0.0810%" height="15" fill="rgb(252,75,11)" fg:x="140" fg:w="1"/><text x="11.5952%" y="527.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="11.4263%" y="533" width="0.0810%" height="15" fill="rgb(218,226,17)" fg:x="141" fg:w="1"/><text x="11.6763%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.4263%" y="517" width="0.0810%" height="15" fill="rgb(248,89,38)" fg:x="141" fg:w="1"/><text x="11.6763%" y="527.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.4263%" y="501" width="0.0810%" height="15" fill="rgb(237,73,46)" fg:x="141" fg:w="1"/><text x="11.6763%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.4263%" y="485" width="0.0810%" height="15" fill="rgb(242,78,33)" fg:x="141" fg:w="1"/><text x="11.6763%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="11.4263%" y="549" width="0.1621%" height="15" fill="rgb(235,60,3)" fg:x="141" fg:w="2"/><text x="11.6763%" y="559.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="11.5073%" y="533" width="0.0810%" height="15" fill="rgb(216,172,19)" fg:x="142" fg:w="1"/><text x="11.7573%" y="543.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="11.5073%" y="517" width="0.0810%" height="15" fill="rgb(227,6,42)" fg:x="142" fg:w="1"/><text x="11.7573%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.6694%" y="517" width="0.1621%" height="15" fill="rgb(223,207,42)" fg:x="144" fg:w="2"/><text x="11.9194%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.8314%" y="517" width="0.0810%" height="15" fill="rgb(246,138,30)" fg:x="146" fg:w="1"/><text x="12.0814%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.8314%" y="501" width="0.0810%" height="15" fill="rgb(251,199,47)" fg:x="146" fg:w="1"/><text x="12.0814%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.9125%" y="517" width="0.0810%" height="15" fill="rgb(228,218,44)" fg:x="147" fg:w="1"/><text x="12.1625%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.9125%" y="501" width="0.0810%" height="15" fill="rgb(220,68,6)" fg:x="147" fg:w="1"/><text x="12.1625%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.9125%" y="485" width="0.0810%" height="15" fill="rgb(240,60,26)" fg:x="147" fg:w="1"/><text x="12.1625%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.9125%" y="469" width="0.0810%" height="15" fill="rgb(211,200,19)" fg:x="147" fg:w="1"/><text x="12.1625%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.9935%" y="485" width="0.0810%" height="15" fill="rgb(242,145,30)" fg:x="148" fg:w="1"/><text x="12.2435%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0746%" y="469" width="0.0810%" height="15" fill="rgb(225,64,13)" fg:x="149" fg:w="1"/><text x="12.3246%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="12.0746%" y="485" width="0.1621%" height="15" fill="rgb(218,103,35)" fg:x="149" fg:w="2"/><text x="12.3246%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1556%" y="469" width="0.0810%" height="15" fill="rgb(216,93,46)" fg:x="150" fg:w="1"/><text x="12.4056%" y="479.50"></text></g><g><title>engine::session::Session::save_changes (31 samples, 2.51%)</title><rect x="9.8055%" y="661" width="2.5122%" height="15" fill="rgb(225,159,27)" fg:x="121" fg:w="31"/><text x="10.0555%" y="671.50">en..</text></g><g><title>engine::session::state::State::close (31 samples, 2.51%)</title><rect x="9.8055%" y="645" width="2.5122%" height="15" fill="rgb(225,204,11)" fg:x="121" fg:w="31"/><text x="10.0555%" y="655.50">en..</text></g><g><title>engine::session::state::State::flush_entities (31 samples, 2.51%)</title><rect x="9.8055%" y="629" width="2.5122%" height="15" fill="rgb(205,56,4)" fg:x="121" fg:w="31"/><text x="10.0555%" y="639.50">en..</text></g><g><title>core::iter::adapters::try_process (29 samples, 2.35%)</title><rect x="9.9676%" y="613" width="2.3501%" height="15" fill="rgb(206,6,35)" fg:x="123" fg:w="29"/><text x="10.2176%" y="623.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 2.35%)</title><rect x="9.9676%" y="597" width="2.3501%" height="15" fill="rgb(247,73,52)" fg:x="123" fg:w="29"/><text x="10.2176%" y="607.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (29 samples, 2.35%)</title><rect x="9.9676%" y="581" width="2.3501%" height="15" fill="rgb(246,97,4)" fg:x="123" fg:w="29"/><text x="10.2176%" y="591.50">e..</text></g><g><title>kernel::model::any_entity_changes (11 samples, 0.89%)</title><rect x="11.4263%" y="565" width="0.8914%" height="15" fill="rgb(212,37,15)" fg:x="141" fg:w="11"/><text x="11.6763%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="11.5883%" y="549" width="0.7293%" height="15" fill="rgb(208,130,40)" fg:x="143" fg:w="9"/><text x="11.8383%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.73%)</title><rect x="11.5883%" y="533" width="0.7293%" height="15" fill="rgb(236,55,29)" fg:x="143" fg:w="9"/><text x="11.8383%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="11.9935%" y="517" width="0.3241%" height="15" fill="rgb(209,156,45)" fg:x="148" fg:w="4"/><text x="12.2435%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="11.9935%" y="501" width="0.3241%" height="15" fill="rgb(249,107,4)" fg:x="148" fg:w="4"/><text x="12.2435%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.2366%" y="485" width="0.0810%" height="15" fill="rgb(227,7,13)" fg:x="151" fg:w="1"/><text x="12.4866%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2366%" y="469" width="0.0810%" height="15" fill="rgb(250,129,14)" fg:x="151" fg:w="1"/><text x="12.4866%" y="479.50"></text></g><g><title>engine::session::Session::flush (34 samples, 2.76%)</title><rect x="9.6434%" y="677" width="2.7553%" height="15" fill="rgb(229,92,13)" fg:x="119" fg:w="34"/><text x="9.8934%" y="687.50">en..</text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="12.3177%" y="661" width="0.0810%" height="15" fill="rgb(245,98,39)" fg:x="152" fg:w="1"/><text x="12.5677%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="12.3987%" y="677" width="0.0810%" height="15" fill="rgb(234,135,48)" fg:x="153" fg:w="1"/><text x="12.6487%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="12.3987%" y="661" width="0.0810%" height="15" fill="rgb(230,98,28)" fg:x="153" fg:w="1"/><text x="12.6487%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="12.3987%" y="645" width="0.0810%" height="15" fill="rgb(223,121,0)" fg:x="153" fg:w="1"/><text x="12.6487%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.3987%" y="629" width="0.0810%" height="15" fill="rgb(234,173,33)" fg:x="153" fg:w="1"/><text x="12.6487%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="12.4797%" y="661" width="0.0810%" height="15" fill="rgb(245,47,8)" fg:x="154" fg:w="1"/><text x="12.7297%" y="671.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="12.4797%" y="645" width="0.0810%" height="15" fill="rgb(205,17,20)" fg:x="154" fg:w="1"/><text x="12.7297%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.4797%" y="629" width="0.0810%" height="15" fill="rgb(232,151,16)" fg:x="154" fg:w="1"/><text x="12.7297%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.4797%" y="613" width="0.0810%" height="15" fill="rgb(208,30,32)" fg:x="154" fg:w="1"/><text x="12.7297%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.4797%" y="597" width="0.0810%" height="15" fill="rgb(254,26,3)" fg:x="154" fg:w="1"/><text x="12.7297%" y="607.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="12.5608%" y="645" width="0.0810%" height="15" fill="rgb(240,177,30)" fg:x="155" fg:w="1"/><text x="12.8108%" y="655.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="12.5608%" y="661" width="0.1621%" height="15" fill="rgb(248,76,44)" fg:x="155" fg:w="2"/><text x="12.8108%" y="671.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.6418%" y="645" width="0.0810%" height="15" fill="rgb(241,186,54)" fg:x="156" fg:w="1"/><text x="12.8918%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.6418%" y="629" width="0.0810%" height="15" fill="rgb(249,171,29)" fg:x="156" fg:w="1"/><text x="12.8918%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.6418%" y="613" width="0.0810%" height="15" fill="rgb(237,151,44)" fg:x="156" fg:w="1"/><text x="12.8918%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (4 samples, 0.32%)</title><rect x="12.4797%" y="677" width="0.3241%" height="15" fill="rgb(228,174,30)" fg:x="154" fg:w="4"/><text x="12.7297%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="12.7229%" y="661" width="0.0810%" height="15" fill="rgb(252,14,37)" fg:x="157" fg:w="1"/><text x="12.9729%" y="671.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="12.7229%" y="645" width="0.0810%" height="15" fill="rgb(207,111,40)" fg:x="157" fg:w="1"/><text x="12.9729%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.8039%" y="661" width="0.0810%" height="15" fill="rgb(248,171,54)" fg:x="158" fg:w="1"/><text x="13.0539%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.8039%" y="645" width="0.0810%" height="15" fill="rgb(211,127,2)" fg:x="158" fg:w="1"/><text x="13.0539%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8039%" y="629" width="0.0810%" height="15" fill="rgb(236,87,47)" fg:x="158" fg:w="1"/><text x="13.0539%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8039%" y="613" width="0.0810%" height="15" fill="rgb(223,190,45)" fg:x="158" fg:w="1"/><text x="13.0539%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8039%" y="597" width="0.0810%" height="15" fill="rgb(215,5,16)" fg:x="158" fg:w="1"/><text x="13.0539%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.8849%" y="645" width="0.0810%" height="15" fill="rgb(252,82,33)" fg:x="159" fg:w="1"/><text x="13.1349%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8849%" y="629" width="0.0810%" height="15" fill="rgb(247,213,44)" fg:x="159" fg:w="1"/><text x="13.1349%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8849%" y="613" width="0.0810%" height="15" fill="rgb(205,196,44)" fg:x="159" fg:w="1"/><text x="13.1349%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.8849%" y="597" width="0.0810%" height="15" fill="rgb(237,96,54)" fg:x="159" fg:w="1"/><text x="13.1349%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8849%" y="581" width="0.0810%" height="15" fill="rgb(230,113,34)" fg:x="159" fg:w="1"/><text x="13.1349%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.8849%" y="565" width="0.0810%" height="15" fill="rgb(221,224,12)" fg:x="159" fg:w="1"/><text x="13.1349%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.8849%" y="549" width="0.0810%" height="15" fill="rgb(219,112,44)" fg:x="159" fg:w="1"/><text x="13.1349%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.8849%" y="533" width="0.0810%" height="15" fill="rgb(210,31,13)" fg:x="159" fg:w="1"/><text x="13.1349%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.8849%" y="517" width="0.0810%" height="15" fill="rgb(230,25,16)" fg:x="159" fg:w="1"/><text x="13.1349%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8849%" y="501" width="0.0810%" height="15" fill="rgb(246,108,53)" fg:x="159" fg:w="1"/><text x="13.1349%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.8849%" y="485" width="0.0810%" height="15" fill="rgb(241,172,50)" fg:x="159" fg:w="1"/><text x="13.1349%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.8849%" y="469" width="0.0810%" height="15" fill="rgb(235,141,10)" fg:x="159" fg:w="1"/><text x="13.1349%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.8849%" y="453" width="0.0810%" height="15" fill="rgb(220,174,43)" fg:x="159" fg:w="1"/><text x="13.1349%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.8849%" y="437" width="0.0810%" height="15" fill="rgb(215,181,40)" fg:x="159" fg:w="1"/><text x="13.1349%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.8849%" y="421" width="0.0810%" height="15" fill="rgb(230,97,2)" fg:x="159" fg:w="1"/><text x="13.1349%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.8849%" y="405" width="0.0810%" height="15" fill="rgb(211,25,27)" fg:x="159" fg:w="1"/><text x="13.1349%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9660%" y="581" width="0.0810%" height="15" fill="rgb(230,87,26)" fg:x="160" fg:w="1"/><text x="13.2160%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="12.9660%" y="645" width="0.1621%" height="15" fill="rgb(227,160,17)" fg:x="160" fg:w="2"/><text x="13.2160%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="12.9660%" y="629" width="0.1621%" height="15" fill="rgb(244,85,34)" fg:x="160" fg:w="2"/><text x="13.2160%" y="639.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="12.9660%" y="613" width="0.1621%" height="15" fill="rgb(207,70,0)" fg:x="160" fg:w="2"/><text x="13.2160%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.9660%" y="597" width="0.1621%" height="15" fill="rgb(223,129,7)" fg:x="160" fg:w="2"/><text x="13.2160%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0470%" y="581" width="0.0810%" height="15" fill="rgb(246,105,7)" fg:x="161" fg:w="1"/><text x="13.2970%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.0470%" y="565" width="0.0810%" height="15" fill="rgb(215,154,42)" fg:x="161" fg:w="1"/><text x="13.2970%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.0470%" y="549" width="0.0810%" height="15" fill="rgb(220,215,30)" fg:x="161" fg:w="1"/><text x="13.2970%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="13.0470%" y="533" width="0.0810%" height="15" fill="rgb(228,81,51)" fg:x="161" fg:w="1"/><text x="13.2970%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.1280%" y="581" width="0.1621%" height="15" fill="rgb(247,71,54)" fg:x="162" fg:w="2"/><text x="13.3780%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.1280%" y="565" width="0.1621%" height="15" fill="rgb(234,176,34)" fg:x="162" fg:w="2"/><text x="13.3780%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.1280%" y="549" width="0.1621%" height="15" fill="rgb(241,103,54)" fg:x="162" fg:w="2"/><text x="13.3780%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2091%" y="533" width="0.0810%" height="15" fill="rgb(228,22,34)" fg:x="163" fg:w="1"/><text x="13.4591%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.2091%" y="517" width="0.0810%" height="15" fill="rgb(241,179,48)" fg:x="163" fg:w="1"/><text x="13.4591%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.2091%" y="501" width="0.0810%" height="15" fill="rgb(235,167,37)" fg:x="163" fg:w="1"/><text x="13.4591%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.2091%" y="485" width="0.0810%" height="15" fill="rgb(213,109,30)" fg:x="163" fg:w="1"/><text x="13.4591%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.2091%" y="469" width="0.0810%" height="15" fill="rgb(222,172,16)" fg:x="163" fg:w="1"/><text x="13.4591%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2091%" y="453" width="0.0810%" height="15" fill="rgb(233,192,5)" fg:x="163" fg:w="1"/><text x="13.4591%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.2091%" y="437" width="0.0810%" height="15" fill="rgb(247,189,41)" fg:x="163" fg:w="1"/><text x="13.4591%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.2091%" y="421" width="0.0810%" height="15" fill="rgb(218,134,47)" fg:x="163" fg:w="1"/><text x="13.4591%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.2091%" y="405" width="0.0810%" height="15" fill="rgb(216,29,3)" fg:x="163" fg:w="1"/><text x="13.4591%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.2091%" y="389" width="0.0810%" height="15" fill="rgb(246,140,12)" fg:x="163" fg:w="1"/><text x="13.4591%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.2091%" y="373" width="0.0810%" height="15" fill="rgb(230,136,11)" fg:x="163" fg:w="1"/><text x="13.4591%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2091%" y="357" width="0.0810%" height="15" fill="rgb(247,22,47)" fg:x="163" fg:w="1"/><text x="13.4591%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.2901%" y="549" width="0.0810%" height="15" fill="rgb(218,84,22)" fg:x="164" fg:w="1"/><text x="13.5401%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="13.1280%" y="597" width="0.3241%" height="15" fill="rgb(216,87,39)" fg:x="162" fg:w="4"/><text x="13.3780%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="13.2901%" y="581" width="0.1621%" height="15" fill="rgb(221,178,8)" fg:x="164" fg:w="2"/><text x="13.5401%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="13.2901%" y="565" width="0.1621%" height="15" fill="rgb(230,42,11)" fg:x="164" fg:w="2"/><text x="13.5401%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.3712%" y="549" width="0.0810%" height="15" fill="rgb(237,229,4)" fg:x="165" fg:w="1"/><text x="13.6212%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3712%" y="533" width="0.0810%" height="15" fill="rgb(222,31,33)" fg:x="165" fg:w="1"/><text x="13.6212%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.3712%" y="517" width="0.0810%" height="15" fill="rgb(210,17,39)" fg:x="165" fg:w="1"/><text x="13.6212%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.3712%" y="501" width="0.0810%" height="15" fill="rgb(244,93,20)" fg:x="165" fg:w="1"/><text x="13.6212%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.3712%" y="485" width="0.0810%" height="15" fill="rgb(210,40,47)" fg:x="165" fg:w="1"/><text x="13.6212%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.41%)</title><rect x="13.1280%" y="629" width="0.4052%" height="15" fill="rgb(239,211,47)" fg:x="162" fg:w="5"/><text x="13.3780%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (5 samples, 0.41%)</title><rect x="13.1280%" y="613" width="0.4052%" height="15" fill="rgb(251,223,49)" fg:x="162" fg:w="5"/><text x="13.3780%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4522%" y="597" width="0.0810%" height="15" fill="rgb(221,149,5)" fg:x="166" fg:w="1"/><text x="13.7022%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4522%" y="581" width="0.0810%" height="15" fill="rgb(219,224,51)" fg:x="166" fg:w="1"/><text x="13.7022%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4522%" y="565" width="0.0810%" height="15" fill="rgb(223,7,8)" fg:x="166" fg:w="1"/><text x="13.7022%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4522%" y="549" width="0.0810%" height="15" fill="rgb(241,217,22)" fg:x="166" fg:w="1"/><text x="13.7022%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="13.5332%" y="629" width="0.0810%" height="15" fill="rgb(248,209,0)" fg:x="167" fg:w="1"/><text x="13.7832%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5332%" y="613" width="0.0810%" height="15" fill="rgb(217,205,4)" fg:x="167" fg:w="1"/><text x="13.7832%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.5332%" y="597" width="0.0810%" height="15" fill="rgb(228,124,39)" fg:x="167" fg:w="1"/><text x="13.7832%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.5332%" y="581" width="0.0810%" height="15" fill="rgb(250,116,42)" fg:x="167" fg:w="1"/><text x="13.7832%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.89%)</title><rect x="12.8039%" y="677" width="0.8914%" height="15" fill="rgb(223,202,9)" fg:x="158" fg:w="11"/><text x="13.0539%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.81%)</title><rect x="12.8849%" y="661" width="0.8104%" height="15" fill="rgb(242,222,40)" fg:x="159" fg:w="10"/><text x="13.1349%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.57%)</title><rect x="13.1280%" y="645" width="0.5673%" height="15" fill="rgb(229,99,46)" fg:x="162" fg:w="7"/><text x="13.3780%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6143%" y="629" width="0.0810%" height="15" fill="rgb(225,56,46)" fg:x="168" fg:w="1"/><text x="13.8643%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.6143%" y="613" width="0.0810%" height="15" fill="rgb(227,94,5)" fg:x="168" fg:w="1"/><text x="13.8643%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.6143%" y="597" width="0.0810%" height="15" fill="rgb(205,112,38)" fg:x="168" fg:w="1"/><text x="13.8643%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6143%" y="581" width="0.0810%" height="15" fill="rgb(231,133,46)" fg:x="168" fg:w="1"/><text x="13.8643%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="13.6953%" y="645" width="0.0810%" height="15" fill="rgb(217,16,9)" fg:x="169" fg:w="1"/><text x="13.9453%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="13.6953%" y="629" width="0.0810%" height="15" fill="rgb(249,173,9)" fg:x="169" fg:w="1"/><text x="13.9453%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.6953%" y="613" width="0.0810%" height="15" fill="rgb(205,163,53)" fg:x="169" fg:w="1"/><text x="13.9453%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.6953%" y="597" width="0.0810%" height="15" fill="rgb(217,54,41)" fg:x="169" fg:w="1"/><text x="13.9453%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.6953%" y="581" width="0.0810%" height="15" fill="rgb(228,216,12)" fg:x="169" fg:w="1"/><text x="13.9453%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6953%" y="565" width="0.0810%" height="15" fill="rgb(244,228,15)" fg:x="169" fg:w="1"/><text x="13.9453%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.6953%" y="549" width="0.0810%" height="15" fill="rgb(221,176,53)" fg:x="169" fg:w="1"/><text x="13.9453%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6953%" y="533" width="0.0810%" height="15" fill="rgb(205,94,34)" fg:x="169" fg:w="1"/><text x="13.9453%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="13.7763%" y="629" width="0.0810%" height="15" fill="rgb(213,110,48)" fg:x="170" fg:w="1"/><text x="14.0263%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7763%" y="613" width="0.0810%" height="15" fill="rgb(236,142,28)" fg:x="170" fg:w="1"/><text x="14.0263%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="13.7763%" y="597" width="0.0810%" height="15" fill="rgb(225,135,29)" fg:x="170" fg:w="1"/><text x="14.0263%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8574%" y="629" width="0.0810%" height="15" fill="rgb(252,45,31)" fg:x="171" fg:w="1"/><text x="14.1074%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.8574%" y="613" width="0.0810%" height="15" fill="rgb(211,187,50)" fg:x="171" fg:w="1"/><text x="14.1074%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.8574%" y="597" width="0.0810%" height="15" fill="rgb(229,109,7)" fg:x="171" fg:w="1"/><text x="14.1074%" y="607.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8574%" y="581" width="0.0810%" height="15" fill="rgb(251,131,51)" fg:x="171" fg:w="1"/><text x="14.1074%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.8574%" y="565" width="0.0810%" height="15" fill="rgb(251,180,35)" fg:x="171" fg:w="1"/><text x="14.1074%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8574%" y="549" width="0.0810%" height="15" fill="rgb(211,46,32)" fg:x="171" fg:w="1"/><text x="14.1074%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8574%" y="533" width="0.0810%" height="15" fill="rgb(248,123,17)" fg:x="171" fg:w="1"/><text x="14.1074%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="13.6953%" y="677" width="0.3241%" height="15" fill="rgb(227,141,18)" fg:x="169" fg:w="4"/><text x="13.9453%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="13.6953%" y="661" width="0.3241%" height="15" fill="rgb(216,102,9)" fg:x="169" fg:w="4"/><text x="13.9453%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="13.7763%" y="645" width="0.2431%" height="15" fill="rgb(253,47,13)" fg:x="170" fg:w="3"/><text x="14.0263%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="13.9384%" y="629" width="0.0810%" height="15" fill="rgb(226,93,23)" fg:x="172" fg:w="1"/><text x="14.1884%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.9384%" y="613" width="0.0810%" height="15" fill="rgb(247,104,17)" fg:x="172" fg:w="1"/><text x="14.1884%" y="623.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="13.9384%" y="597" width="0.0810%" height="15" fill="rgb(233,203,26)" fg:x="172" fg:w="1"/><text x="14.1884%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.9384%" y="581" width="0.0810%" height="15" fill="rgb(244,98,49)" fg:x="172" fg:w="1"/><text x="14.1884%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.9384%" y="565" width="0.0810%" height="15" fill="rgb(235,134,22)" fg:x="172" fg:w="1"/><text x="14.1884%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.9384%" y="549" width="0.0810%" height="15" fill="rgb(221,70,32)" fg:x="172" fg:w="1"/><text x="14.1884%" y="559.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="14.0194%" y="661" width="0.1621%" height="15" fill="rgb(238,15,50)" fg:x="173" fg:w="2"/><text x="14.2694%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.0194%" y="645" width="0.1621%" height="15" fill="rgb(215,221,48)" fg:x="173" fg:w="2"/><text x="14.2694%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0194%" y="629" width="0.1621%" height="15" fill="rgb(236,73,3)" fg:x="173" fg:w="2"/><text x="14.2694%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.0194%" y="613" width="0.1621%" height="15" fill="rgb(250,107,11)" fg:x="173" fg:w="2"/><text x="14.2694%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.0194%" y="597" width="0.1621%" height="15" fill="rgb(242,39,14)" fg:x="173" fg:w="2"/><text x="14.2694%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.1005%" y="581" width="0.0810%" height="15" fill="rgb(248,164,37)" fg:x="174" fg:w="1"/><text x="14.3505%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1005%" y="565" width="0.0810%" height="15" fill="rgb(217,60,12)" fg:x="174" fg:w="1"/><text x="14.3505%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.1815%" y="629" width="0.0810%" height="15" fill="rgb(240,125,29)" fg:x="175" fg:w="1"/><text x="14.4315%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (4 samples, 0.32%)</title><rect x="14.0194%" y="677" width="0.3241%" height="15" fill="rgb(208,207,28)" fg:x="173" fg:w="4"/><text x="14.2694%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.1815%" y="661" width="0.1621%" height="15" fill="rgb(209,159,27)" fg:x="175" fg:w="2"/><text x="14.4315%" y="671.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="14.1815%" y="645" width="0.1621%" height="15" fill="rgb(251,176,53)" fg:x="175" fg:w="2"/><text x="14.4315%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.2626%" y="629" width="0.0810%" height="15" fill="rgb(211,85,7)" fg:x="176" fg:w="1"/><text x="14.5126%" y="639.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Route&gt;::serialize (1 samples, 0.08%)</title><rect x="14.2626%" y="613" width="0.0810%" height="15" fill="rgb(216,64,54)" fg:x="176" fg:w="1"/><text x="14.5126%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.3436%" y="661" width="0.0810%" height="15" fill="rgb(217,54,24)" fg:x="177" fg:w="1"/><text x="14.5936%" y="671.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="14.3436%" y="645" width="0.0810%" height="15" fill="rgb(208,206,53)" fg:x="177" fg:w="1"/><text x="14.5936%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.3436%" y="629" width="0.0810%" height="15" fill="rgb(251,74,39)" fg:x="177" fg:w="1"/><text x="14.5936%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.3436%" y="613" width="0.0810%" height="15" fill="rgb(226,47,5)" fg:x="177" fg:w="1"/><text x="14.5936%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="14.3436%" y="597" width="0.0810%" height="15" fill="rgb(234,111,33)" fg:x="177" fg:w="1"/><text x="14.5936%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="14.3436%" y="677" width="0.2431%" height="15" fill="rgb(251,14,10)" fg:x="177" fg:w="3"/><text x="14.5936%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="14.4246%" y="661" width="0.1621%" height="15" fill="rgb(232,43,0)" fg:x="178" fg:w="2"/><text x="14.6746%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="14.4246%" y="645" width="0.1621%" height="15" fill="rgb(222,68,43)" fg:x="178" fg:w="2"/><text x="14.6746%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="14.4246%" y="629" width="0.1621%" height="15" fill="rgb(217,24,23)" fg:x="178" fg:w="2"/><text x="14.6746%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="14.5057%" y="613" width="0.0810%" height="15" fill="rgb(229,209,14)" fg:x="179" fg:w="1"/><text x="14.7557%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.5057%" y="597" width="0.0810%" height="15" fill="rgb(250,149,48)" fg:x="179" fg:w="1"/><text x="14.7557%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5057%" y="581" width="0.0810%" height="15" fill="rgb(210,120,37)" fg:x="179" fg:w="1"/><text x="14.7557%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5057%" y="565" width="0.0810%" height="15" fill="rgb(210,21,8)" fg:x="179" fg:w="1"/><text x="14.7557%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="14.5057%" y="549" width="0.0810%" height="15" fill="rgb(243,145,7)" fg:x="179" fg:w="1"/><text x="14.7557%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5057%" y="533" width="0.0810%" height="15" fill="rgb(238,178,32)" fg:x="179" fg:w="1"/><text x="14.7557%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5057%" y="517" width="0.0810%" height="15" fill="rgb(222,4,10)" fg:x="179" fg:w="1"/><text x="14.7557%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5057%" y="501" width="0.0810%" height="15" fill="rgb(239,7,37)" fg:x="179" fg:w="1"/><text x="14.7557%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.5057%" y="485" width="0.0810%" height="15" fill="rgb(215,31,37)" fg:x="179" fg:w="1"/><text x="14.7557%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (65 samples, 5.27%)</title><rect x="9.4003%" y="693" width="5.2674%" height="15" fill="rgb(224,83,33)" fg:x="116" fg:w="65"/><text x="9.6503%" y="703.50">plugin..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="14.5867%" y="677" width="0.0810%" height="15" fill="rgb(239,55,3)" fg:x="180" fg:w="1"/><text x="14.8367%" y="687.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.5867%" y="661" width="0.0810%" height="15" fill="rgb(247,92,11)" fg:x="180" fg:w="1"/><text x="14.8367%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="14.6677%" y="693" width="0.0810%" height="15" fill="rgb(239,200,7)" fg:x="181" fg:w="1"/><text x="14.9177%" y="703.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="14.6677%" y="677" width="0.0810%" height="15" fill="rgb(227,115,8)" fg:x="181" fg:w="1"/><text x="14.9177%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="14.6677%" y="661" width="0.0810%" height="15" fill="rgb(215,189,27)" fg:x="181" fg:w="1"/><text x="14.9177%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="14.6677%" y="645" width="0.0810%" height="15" fill="rgb(251,216,39)" fg:x="181" fg:w="1"/><text x="14.9177%" y="655.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="14.6677%" y="629" width="0.0810%" height="15" fill="rgb(207,29,47)" fg:x="181" fg:w="1"/><text x="14.9177%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="14.7488%" y="661" width="0.0810%" height="15" fill="rgb(210,71,34)" fg:x="182" fg:w="1"/><text x="14.9988%" y="671.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="14.7488%" y="645" width="0.0810%" height="15" fill="rgb(253,217,51)" fg:x="182" fg:w="1"/><text x="14.9988%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7488%" y="629" width="0.0810%" height="15" fill="rgb(222,117,46)" fg:x="182" fg:w="1"/><text x="14.9988%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="14.7488%" y="613" width="0.0810%" height="15" fill="rgb(226,132,6)" fg:x="182" fg:w="1"/><text x="14.9988%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7488%" y="597" width="0.0810%" height="15" fill="rgb(254,145,51)" fg:x="182" fg:w="1"/><text x="14.9988%" y="607.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="14.8298%" y="645" width="0.1621%" height="15" fill="rgb(231,199,27)" fg:x="183" fg:w="2"/><text x="15.0798%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.9109%" y="629" width="0.0810%" height="15" fill="rgb(245,158,14)" fg:x="184" fg:w="1"/><text x="15.1609%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.9919%" y="629" width="0.0810%" height="15" fill="rgb(240,113,14)" fg:x="185" fg:w="1"/><text x="15.2419%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.9919%" y="613" width="0.0810%" height="15" fill="rgb(210,20,13)" fg:x="185" fg:w="1"/><text x="15.2419%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.9919%" y="597" width="0.0810%" height="15" fill="rgb(241,144,13)" fg:x="185" fg:w="1"/><text x="15.2419%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.9919%" y="581" width="0.0810%" height="15" fill="rgb(235,43,34)" fg:x="185" fg:w="1"/><text x="15.2419%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="15.0729%" y="629" width="0.0810%" height="15" fill="rgb(208,36,20)" fg:x="186" fg:w="1"/><text x="15.3229%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.0729%" y="613" width="0.0810%" height="15" fill="rgb(239,204,10)" fg:x="186" fg:w="1"/><text x="15.3229%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::new (1 samples, 0.08%)</title><rect x="15.0729%" y="597" width="0.0810%" height="15" fill="rgb(217,84,43)" fg:x="186" fg:w="1"/><text x="15.3229%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.1540%" y="581" width="0.0810%" height="15" fill="rgb(241,170,50)" fg:x="187" fg:w="1"/><text x="15.4040%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.1540%" y="565" width="0.0810%" height="15" fill="rgb(226,205,29)" fg:x="187" fg:w="1"/><text x="15.4040%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.1540%" y="549" width="0.0810%" height="15" fill="rgb(233,113,1)" fg:x="187" fg:w="1"/><text x="15.4040%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.1540%" y="533" width="0.0810%" height="15" fill="rgb(253,98,13)" fg:x="187" fg:w="1"/><text x="15.4040%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="15.1540%" y="613" width="0.1621%" height="15" fill="rgb(211,115,12)" fg:x="187" fg:w="2"/><text x="15.4040%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="15.1540%" y="597" width="0.1621%" height="15" fill="rgb(208,12,16)" fg:x="187" fg:w="2"/><text x="15.4040%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="15.2350%" y="581" width="0.0810%" height="15" fill="rgb(237,193,54)" fg:x="188" fg:w="1"/><text x="15.4850%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.2350%" y="565" width="0.0810%" height="15" fill="rgb(243,22,42)" fg:x="188" fg:w="1"/><text x="15.4850%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.2350%" y="549" width="0.0810%" height="15" fill="rgb(233,151,36)" fg:x="188" fg:w="1"/><text x="15.4850%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.57%)</title><rect x="14.8298%" y="661" width="0.5673%" height="15" fill="rgb(237,57,45)" fg:x="183" fg:w="7"/><text x="15.0798%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="14.9919%" y="645" width="0.4052%" height="15" fill="rgb(221,88,17)" fg:x="185" fg:w="5"/><text x="15.2419%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="15.1540%" y="629" width="0.2431%" height="15" fill="rgb(230,79,15)" fg:x="187" fg:w="3"/><text x="15.4040%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.3160%" y="613" width="0.0810%" height="15" fill="rgb(213,57,13)" fg:x="189" fg:w="1"/><text x="15.5660%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.3160%" y="597" width="0.0810%" height="15" fill="rgb(222,116,39)" fg:x="189" fg:w="1"/><text x="15.5660%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.3160%" y="581" width="0.0810%" height="15" fill="rgb(245,107,2)" fg:x="189" fg:w="1"/><text x="15.5660%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (11 samples, 0.89%)</title><rect x="14.7488%" y="693" width="0.8914%" height="15" fill="rgb(238,1,10)" fg:x="182" fg:w="11"/><text x="14.9988%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (11 samples, 0.89%)</title><rect x="14.7488%" y="677" width="0.8914%" height="15" fill="rgb(249,4,48)" fg:x="182" fg:w="11"/><text x="14.9988%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (3 samples, 0.24%)</title><rect x="15.3971%" y="661" width="0.2431%" height="15" fill="rgb(223,151,18)" fg:x="190" fg:w="3"/><text x="15.6471%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="15.4781%" y="645" width="0.1621%" height="15" fill="rgb(227,65,43)" fg:x="191" fg:w="2"/><text x="15.7281%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="15.4781%" y="629" width="0.1621%" height="15" fill="rgb(218,40,45)" fg:x="191" fg:w="2"/><text x="15.7281%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_struct (2 samples, 0.16%)</title><rect x="15.4781%" y="613" width="0.1621%" height="15" fill="rgb(252,121,31)" fg:x="191" fg:w="2"/><text x="15.7281%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6402%" y="645" width="0.0810%" height="15" fill="rgb(219,158,43)" fg:x="193" fg:w="1"/><text x="15.8902%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="15.6402%" y="677" width="0.1621%" height="15" fill="rgb(231,162,42)" fg:x="193" fg:w="2"/><text x="15.8902%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="15.6402%" y="661" width="0.1621%" height="15" fill="rgb(217,179,25)" fg:x="193" fg:w="2"/><text x="15.8902%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.7212%" y="645" width="0.0810%" height="15" fill="rgb(206,212,31)" fg:x="194" fg:w="1"/><text x="15.9712%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.7212%" y="629" width="0.0810%" height="15" fill="rgb(235,144,12)" fg:x="194" fg:w="1"/><text x="15.9712%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="15.8023%" y="677" width="0.1621%" height="15" fill="rgb(213,51,10)" fg:x="195" fg:w="2"/><text x="16.0523%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="15.8833%" y="661" width="0.0810%" height="15" fill="rgb(231,145,14)" fg:x="196" fg:w="1"/><text x="16.1333%" y="671.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="15.8833%" y="645" width="0.0810%" height="15" fill="rgb(235,15,28)" fg:x="196" fg:w="1"/><text x="16.1333%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8833%" y="629" width="0.0810%" height="15" fill="rgb(237,206,10)" fg:x="196" fg:w="1"/><text x="16.1333%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.8833%" y="613" width="0.0810%" height="15" fill="rgb(236,227,27)" fg:x="196" fg:w="1"/><text x="16.1333%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.9643%" y="629" width="0.0810%" height="15" fill="rgb(246,83,35)" fg:x="197" fg:w="1"/><text x="16.2143%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.9643%" y="613" width="0.0810%" height="15" fill="rgb(220,136,24)" fg:x="197" fg:w="1"/><text x="16.2143%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.9643%" y="597" width="0.0810%" height="15" fill="rgb(217,3,25)" fg:x="197" fg:w="1"/><text x="16.2143%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.9643%" y="581" width="0.0810%" height="15" fill="rgb(239,24,14)" fg:x="197" fg:w="1"/><text x="16.2143%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.9643%" y="565" width="0.0810%" height="15" fill="rgb(244,16,53)" fg:x="197" fg:w="1"/><text x="16.2143%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.9643%" y="549" width="0.0810%" height="15" fill="rgb(208,175,44)" fg:x="197" fg:w="1"/><text x="16.2143%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.9643%" y="533" width="0.0810%" height="15" fill="rgb(252,18,48)" fg:x="197" fg:w="1"/><text x="16.2143%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.9643%" y="517" width="0.0810%" height="15" fill="rgb(234,199,32)" fg:x="197" fg:w="1"/><text x="16.2143%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.9643%" y="501" width="0.0810%" height="15" fill="rgb(225,77,54)" fg:x="197" fg:w="1"/><text x="16.2143%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.9643%" y="485" width="0.0810%" height="15" fill="rgb(225,42,25)" fg:x="197" fg:w="1"/><text x="16.2143%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.9643%" y="469" width="0.0810%" height="15" fill="rgb(242,227,46)" fg:x="197" fg:w="1"/><text x="16.2143%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.9643%" y="453" width="0.0810%" height="15" fill="rgb(246,197,35)" fg:x="197" fg:w="1"/><text x="16.2143%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9643%" y="437" width="0.0810%" height="15" fill="rgb(215,159,26)" fg:x="197" fg:w="1"/><text x="16.2143%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="15.9643%" y="645" width="0.1621%" height="15" fill="rgb(212,194,50)" fg:x="197" fg:w="2"/><text x="16.2143%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.0454%" y="629" width="0.0810%" height="15" fill="rgb(246,132,1)" fg:x="198" fg:w="1"/><text x="16.2954%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0454%" y="613" width="0.0810%" height="15" fill="rgb(217,71,7)" fg:x="198" fg:w="1"/><text x="16.2954%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.0454%" y="597" width="0.0810%" height="15" fill="rgb(252,59,32)" fg:x="198" fg:w="1"/><text x="16.2954%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.0454%" y="581" width="0.0810%" height="15" fill="rgb(253,204,25)" fg:x="198" fg:w="1"/><text x="16.2954%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.0454%" y="565" width="0.0810%" height="15" fill="rgb(232,21,16)" fg:x="198" fg:w="1"/><text x="16.2954%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="16.1264%" y="629" width="0.0810%" height="15" fill="rgb(248,90,29)" fg:x="199" fg:w="1"/><text x="16.3764%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="16.1264%" y="613" width="0.0810%" height="15" fill="rgb(249,223,7)" fg:x="199" fg:w="1"/><text x="16.3764%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="16.1264%" y="597" width="0.0810%" height="15" fill="rgb(231,119,42)" fg:x="199" fg:w="1"/><text x="16.3764%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1264%" y="581" width="0.0810%" height="15" fill="rgb(215,41,35)" fg:x="199" fg:w="1"/><text x="16.3764%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1264%" y="565" width="0.0810%" height="15" fill="rgb(220,44,45)" fg:x="199" fg:w="1"/><text x="16.3764%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1264%" y="549" width="0.0810%" height="15" fill="rgb(253,197,36)" fg:x="199" fg:w="1"/><text x="16.3764%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.2075%" y="597" width="0.0810%" height="15" fill="rgb(245,225,54)" fg:x="200" fg:w="1"/><text x="16.4575%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="16.2885%" y="597" width="0.1621%" height="15" fill="rgb(239,94,37)" fg:x="201" fg:w="2"/><text x="16.5385%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="16.2885%" y="581" width="0.1621%" height="15" fill="rgb(242,217,10)" fg:x="201" fg:w="2"/><text x="16.5385%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.2885%" y="565" width="0.1621%" height="15" fill="rgb(250,193,7)" fg:x="201" fg:w="2"/><text x="16.5385%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="16.1264%" y="645" width="0.4052%" height="15" fill="rgb(230,104,19)" fg:x="199" fg:w="5"/><text x="16.3764%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="16.2075%" y="629" width="0.3241%" height="15" fill="rgb(230,181,4)" fg:x="200" fg:w="4"/><text x="16.4575%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="16.2075%" y="613" width="0.3241%" height="15" fill="rgb(216,219,49)" fg:x="200" fg:w="4"/><text x="16.4575%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.4506%" y="597" width="0.0810%" height="15" fill="rgb(254,144,0)" fg:x="203" fg:w="1"/><text x="16.7006%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="16.4506%" y="581" width="0.0810%" height="15" fill="rgb(205,209,38)" fg:x="203" fg:w="1"/><text x="16.7006%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.4506%" y="565" width="0.0810%" height="15" fill="rgb(240,21,42)" fg:x="203" fg:w="1"/><text x="16.7006%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4506%" y="549" width="0.0810%" height="15" fill="rgb(241,132,3)" fg:x="203" fg:w="1"/><text x="16.7006%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.4506%" y="533" width="0.0810%" height="15" fill="rgb(225,14,2)" fg:x="203" fg:w="1"/><text x="16.7006%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4506%" y="517" width="0.0810%" height="15" fill="rgb(210,141,35)" fg:x="203" fg:w="1"/><text x="16.7006%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.4506%" y="501" width="0.0810%" height="15" fill="rgb(251,14,44)" fg:x="203" fg:w="1"/><text x="16.7006%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.4506%" y="485" width="0.0810%" height="15" fill="rgb(247,48,18)" fg:x="203" fg:w="1"/><text x="16.7006%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.4506%" y="469" width="0.0810%" height="15" fill="rgb(225,0,40)" fg:x="203" fg:w="1"/><text x="16.7006%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4506%" y="453" width="0.0810%" height="15" fill="rgb(221,31,33)" fg:x="203" fg:w="1"/><text x="16.7006%" y="463.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (141 samples, 11.43%)</title><rect x="5.1864%" y="709" width="11.4263%" height="15" fill="rgb(237,42,40)" fg:x="64" fg:w="141"/><text x="5.4364%" y="719.50">&lt;tests::HoldingKe..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (12 samples, 0.97%)</title><rect x="15.6402%" y="693" width="0.9724%" height="15" fill="rgb(233,51,29)" fg:x="193" fg:w="12"/><text x="15.8902%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.65%)</title><rect x="15.9643%" y="677" width="0.6483%" height="15" fill="rgb(226,58,20)" fg:x="197" fg:w="8"/><text x="16.2143%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.65%)</title><rect x="15.9643%" y="661" width="0.6483%" height="15" fill="rgb(208,98,7)" fg:x="197" fg:w="8"/><text x="16.2143%" y="671.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="16.5316%" y="645" width="0.0810%" height="15" fill="rgb(228,143,44)" fg:x="204" fg:w="1"/><text x="16.7816%" y="655.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="16.5316%" y="629" width="0.0810%" height="15" fill="rgb(246,55,38)" fg:x="204" fg:w="1"/><text x="16.7816%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="16.6126%" y="709" width="0.0810%" height="15" fill="rgb(247,87,16)" fg:x="205" fg:w="1"/><text x="16.8626%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="16.6126%" y="693" width="0.0810%" height="15" fill="rgb(234,129,42)" fg:x="205" fg:w="1"/><text x="16.8626%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.6126%" y="677" width="0.0810%" height="15" fill="rgb(220,82,16)" fg:x="205" fg:w="1"/><text x="16.8626%" y="687.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.6126%" y="661" width="0.0810%" height="15" fill="rgb(211,88,4)" fg:x="205" fg:w="1"/><text x="16.8626%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="16.6937%" y="693" width="0.0810%" height="15" fill="rgb(248,151,21)" fg:x="206" fg:w="1"/><text x="16.9437%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6937%" y="677" width="0.0810%" height="15" fill="rgb(238,163,6)" fg:x="206" fg:w="1"/><text x="16.9437%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.6937%" y="661" width="0.0810%" height="15" fill="rgb(209,183,11)" fg:x="206" fg:w="1"/><text x="16.9437%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.6937%" y="645" width="0.0810%" height="15" fill="rgb(219,37,20)" fg:x="206" fg:w="1"/><text x="16.9437%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.6937%" y="629" width="0.0810%" height="15" fill="rgb(210,158,4)" fg:x="206" fg:w="1"/><text x="16.9437%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.6937%" y="613" width="0.0810%" height="15" fill="rgb(221,167,53)" fg:x="206" fg:w="1"/><text x="16.9437%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6937%" y="597" width="0.0810%" height="15" fill="rgb(237,151,45)" fg:x="206" fg:w="1"/><text x="16.9437%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.6937%" y="581" width="0.0810%" height="15" fill="rgb(231,39,3)" fg:x="206" fg:w="1"/><text x="16.9437%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.6937%" y="565" width="0.0810%" height="15" fill="rgb(212,167,28)" fg:x="206" fg:w="1"/><text x="16.9437%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.6937%" y="549" width="0.0810%" height="15" fill="rgb(232,178,8)" fg:x="206" fg:w="1"/><text x="16.9437%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.6937%" y="533" width="0.0810%" height="15" fill="rgb(225,151,20)" fg:x="206" fg:w="1"/><text x="16.9437%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.6937%" y="517" width="0.0810%" height="15" fill="rgb(238,3,37)" fg:x="206" fg:w="1"/><text x="16.9437%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6937%" y="501" width="0.0810%" height="15" fill="rgb(251,147,42)" fg:x="206" fg:w="1"/><text x="16.9437%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="16.7747%" y="581" width="0.0810%" height="15" fill="rgb(208,173,10)" fg:x="207" fg:w="1"/><text x="17.0247%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="16.7747%" y="565" width="0.0810%" height="15" fill="rgb(246,225,4)" fg:x="207" fg:w="1"/><text x="17.0247%" y="575.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="16.7747%" y="549" width="0.0810%" height="15" fill="rgb(248,102,6)" fg:x="207" fg:w="1"/><text x="17.0247%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="16.7747%" y="533" width="0.0810%" height="15" fill="rgb(232,6,21)" fg:x="207" fg:w="1"/><text x="17.0247%" y="543.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="16.7747%" y="517" width="0.0810%" height="15" fill="rgb(221,179,22)" fg:x="207" fg:w="1"/><text x="17.0247%" y="527.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="16.7747%" y="501" width="0.0810%" height="15" fill="rgb(252,50,20)" fg:x="207" fg:w="1"/><text x="17.0247%" y="511.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.08%)</title><rect x="16.7747%" y="485" width="0.0810%" height="15" fill="rgb(222,56,38)" fg:x="207" fg:w="1"/><text x="17.0247%" y="495.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.08%)</title><rect x="16.7747%" y="469" width="0.0810%" height="15" fill="rgb(206,193,29)" fg:x="207" fg:w="1"/><text x="17.0247%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="16.7747%" y="453" width="0.0810%" height="15" fill="rgb(239,192,45)" fg:x="207" fg:w="1"/><text x="17.0247%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="16.7747%" y="437" width="0.0810%" height="15" fill="rgb(254,18,36)" fg:x="207" fg:w="1"/><text x="17.0247%" y="447.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="16.7747%" y="421" width="0.0810%" height="15" fill="rgb(221,127,11)" fg:x="207" fg:w="1"/><text x="17.0247%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.7747%" y="405" width="0.0810%" height="15" fill="rgb(234,146,35)" fg:x="207" fg:w="1"/><text x="17.0247%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.7747%" y="389" width="0.0810%" height="15" fill="rgb(254,201,37)" fg:x="207" fg:w="1"/><text x="17.0247%" y="399.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="16.7747%" y="693" width="0.1621%" height="15" fill="rgb(211,202,23)" fg:x="207" fg:w="2"/><text x="17.0247%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="16.7747%" y="677" width="0.1621%" height="15" fill="rgb(237,91,2)" fg:x="207" fg:w="2"/><text x="17.0247%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="16.7747%" y="661" width="0.1621%" height="15" fill="rgb(226,228,36)" fg:x="207" fg:w="2"/><text x="17.0247%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="16.7747%" y="645" width="0.1621%" height="15" fill="rgb(213,63,50)" fg:x="207" fg:w="2"/><text x="17.0247%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="16.7747%" y="629" width="0.1621%" height="15" fill="rgb(235,194,19)" fg:x="207" fg:w="2"/><text x="17.0247%" y="639.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="16.7747%" y="613" width="0.1621%" height="15" fill="rgb(207,204,18)" fg:x="207" fg:w="2"/><text x="17.0247%" y="623.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="16.7747%" y="597" width="0.1621%" height="15" fill="rgb(248,8,7)" fg:x="207" fg:w="2"/><text x="17.0247%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="16.8558%" y="581" width="0.0810%" height="15" fill="rgb(223,145,47)" fg:x="208" fg:w="1"/><text x="17.1058%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="16.8558%" y="565" width="0.0810%" height="15" fill="rgb(228,84,11)" fg:x="208" fg:w="1"/><text x="17.1058%" y="575.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="16.9368%" y="693" width="0.0810%" height="15" fill="rgb(218,76,45)" fg:x="209" fg:w="1"/><text x="17.1868%" y="703.50"></text></g><g><title>kernel::session::SetSession&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="16.9368%" y="677" width="0.0810%" height="15" fill="rgb(223,80,15)" fg:x="209" fg:w="1"/><text x="17.1868%" y="687.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="17.0178%" y="693" width="0.0810%" height="15" fill="rgb(219,218,33)" fg:x="210" fg:w="1"/><text x="17.2678%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="17.0178%" y="677" width="0.0810%" height="15" fill="rgb(208,51,11)" fg:x="210" fg:w="1"/><text x="17.2678%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="17.0178%" y="661" width="0.0810%" height="15" fill="rgb(229,165,39)" fg:x="210" fg:w="1"/><text x="17.2678%" y="671.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="17.0178%" y="645" width="0.0810%" height="15" fill="rgb(241,100,24)" fg:x="210" fg:w="1"/><text x="17.2678%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="17.0178%" y="629" width="0.0810%" height="15" fill="rgb(228,14,23)" fg:x="210" fg:w="1"/><text x="17.2678%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="17.0178%" y="613" width="0.0810%" height="15" fill="rgb(247,116,52)" fg:x="210" fg:w="1"/><text x="17.2678%" y="623.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="17.0178%" y="597" width="0.0810%" height="15" fill="rgb(216,149,33)" fg:x="210" fg:w="1"/><text x="17.2678%" y="607.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="17.0178%" y="581" width="0.0810%" height="15" fill="rgb(238,142,29)" fg:x="210" fg:w="1"/><text x="17.2678%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.0989%" y="661" width="0.0810%" height="15" fill="rgb(224,83,40)" fg:x="211" fg:w="1"/><text x="17.3489%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.0989%" y="645" width="0.0810%" height="15" fill="rgb(234,165,11)" fg:x="211" fg:w="1"/><text x="17.3489%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.0989%" y="629" width="0.0810%" height="15" fill="rgb(215,96,23)" fg:x="211" fg:w="1"/><text x="17.3489%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.0989%" y="613" width="0.0810%" height="15" fill="rgb(233,179,26)" fg:x="211" fg:w="1"/><text x="17.3489%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.0989%" y="597" width="0.0810%" height="15" fill="rgb(225,129,33)" fg:x="211" fg:w="1"/><text x="17.3489%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.0989%" y="581" width="0.0810%" height="15" fill="rgb(237,49,13)" fg:x="211" fg:w="1"/><text x="17.3489%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="17.0989%" y="565" width="0.0810%" height="15" fill="rgb(211,3,31)" fg:x="211" fg:w="1"/><text x="17.3489%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="17.0989%" y="549" width="0.0810%" height="15" fill="rgb(216,152,19)" fg:x="211" fg:w="1"/><text x="17.3489%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.1799%" y="661" width="0.0810%" height="15" fill="rgb(251,121,35)" fg:x="212" fg:w="1"/><text x="17.4299%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="17.2609%" y="661" width="0.0810%" height="15" fill="rgb(210,217,47)" fg:x="213" fg:w="1"/><text x="17.5109%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="17.2609%" y="645" width="0.0810%" height="15" fill="rgb(244,116,22)" fg:x="213" fg:w="1"/><text x="17.5109%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="17.2609%" y="629" width="0.0810%" height="15" fill="rgb(228,17,21)" fg:x="213" fg:w="1"/><text x="17.5109%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.2609%" y="613" width="0.0810%" height="15" fill="rgb(240,149,34)" fg:x="213" fg:w="1"/><text x="17.5109%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.2609%" y="597" width="0.0810%" height="15" fill="rgb(208,125,47)" fg:x="213" fg:w="1"/><text x="17.5109%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.2609%" y="581" width="0.0810%" height="15" fill="rgb(249,186,39)" fg:x="213" fg:w="1"/><text x="17.5109%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.2609%" y="565" width="0.0810%" height="15" fill="rgb(240,220,33)" fg:x="213" fg:w="1"/><text x="17.5109%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.2609%" y="549" width="0.0810%" height="15" fill="rgb(243,110,23)" fg:x="213" fg:w="1"/><text x="17.5109%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.2609%" y="533" width="0.0810%" height="15" fill="rgb(219,163,46)" fg:x="213" fg:w="1"/><text x="17.5109%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.2609%" y="517" width="0.0810%" height="15" fill="rgb(216,126,30)" fg:x="213" fg:w="1"/><text x="17.5109%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.2609%" y="501" width="0.0810%" height="15" fill="rgb(208,139,11)" fg:x="213" fg:w="1"/><text x="17.5109%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.2609%" y="485" width="0.0810%" height="15" fill="rgb(213,118,36)" fg:x="213" fg:w="1"/><text x="17.5109%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.2609%" y="469" width="0.0810%" height="15" fill="rgb(226,43,17)" fg:x="213" fg:w="1"/><text x="17.5109%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.2609%" y="453" width="0.0810%" height="15" fill="rgb(254,217,4)" fg:x="213" fg:w="1"/><text x="17.5109%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2609%" y="437" width="0.0810%" height="15" fill="rgb(210,134,47)" fg:x="213" fg:w="1"/><text x="17.5109%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="17.5041%" y="613" width="0.0810%" height="15" fill="rgb(237,24,49)" fg:x="216" fg:w="1"/><text x="17.7541%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="17.5041%" y="597" width="0.0810%" height="15" fill="rgb(251,39,46)" fg:x="216" fg:w="1"/><text x="17.7541%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.5041%" y="581" width="0.0810%" height="15" fill="rgb(251,220,3)" fg:x="216" fg:w="1"/><text x="17.7541%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.5041%" y="565" width="0.0810%" height="15" fill="rgb(228,105,12)" fg:x="216" fg:w="1"/><text x="17.7541%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.5041%" y="549" width="0.0810%" height="15" fill="rgb(215,196,1)" fg:x="216" fg:w="1"/><text x="17.7541%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.5041%" y="533" width="0.0810%" height="15" fill="rgb(214,33,39)" fg:x="216" fg:w="1"/><text x="17.7541%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.5041%" y="517" width="0.0810%" height="15" fill="rgb(220,19,52)" fg:x="216" fg:w="1"/><text x="17.7541%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5041%" y="501" width="0.0810%" height="15" fill="rgb(221,78,38)" fg:x="216" fg:w="1"/><text x="17.7541%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="17.5851%" y="581" width="0.1621%" height="15" fill="rgb(253,30,16)" fg:x="217" fg:w="2"/><text x="17.8351%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="17.5851%" y="565" width="0.1621%" height="15" fill="rgb(242,65,0)" fg:x="217" fg:w="2"/><text x="17.8351%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.6661%" y="549" width="0.0810%" height="15" fill="rgb(235,201,12)" fg:x="218" fg:w="1"/><text x="17.9161%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="17.5851%" y="597" width="0.2431%" height="15" fill="rgb(233,161,9)" fg:x="217" fg:w="3"/><text x="17.8351%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.7472%" y="581" width="0.0810%" height="15" fill="rgb(241,207,41)" fg:x="219" fg:w="1"/><text x="17.9972%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.8282%" y="581" width="0.0810%" height="15" fill="rgb(212,69,46)" fg:x="220" fg:w="1"/><text x="18.0782%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="17.9092%" y="581" width="0.3241%" height="15" fill="rgb(239,69,45)" fg:x="221" fg:w="4"/><text x="18.1592%" y="591.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="17.9092%" y="565" width="0.3241%" height="15" fill="rgb(242,117,48)" fg:x="221" fg:w="4"/><text x="18.1592%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.0713%" y="549" width="0.1621%" height="15" fill="rgb(228,41,36)" fg:x="223" fg:w="2"/><text x="18.3213%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="18.0713%" y="533" width="0.1621%" height="15" fill="rgb(212,3,32)" fg:x="223" fg:w="2"/><text x="18.3213%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.1524%" y="517" width="0.0810%" height="15" fill="rgb(233,41,49)" fg:x="224" fg:w="1"/><text x="18.4024%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.1524%" y="501" width="0.0810%" height="15" fill="rgb(252,170,49)" fg:x="224" fg:w="1"/><text x="18.4024%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.1524%" y="485" width="0.0810%" height="15" fill="rgb(229,53,26)" fg:x="224" fg:w="1"/><text x="18.4024%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.2334%" y="565" width="0.0810%" height="15" fill="rgb(217,157,12)" fg:x="225" fg:w="1"/><text x="18.4834%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.2334%" y="549" width="0.0810%" height="15" fill="rgb(227,17,9)" fg:x="225" fg:w="1"/><text x="18.4834%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.2334%" y="533" width="0.0810%" height="15" fill="rgb(218,84,12)" fg:x="225" fg:w="1"/><text x="18.4834%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.2334%" y="517" width="0.0810%" height="15" fill="rgb(212,79,24)" fg:x="225" fg:w="1"/><text x="18.4834%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.3144%" y="565" width="0.0810%" height="15" fill="rgb(217,222,37)" fg:x="226" fg:w="1"/><text x="18.5644%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.3144%" y="549" width="0.0810%" height="15" fill="rgb(246,208,8)" fg:x="226" fg:w="1"/><text x="18.5644%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.3144%" y="533" width="0.0810%" height="15" fill="rgb(244,133,10)" fg:x="226" fg:w="1"/><text x="18.5644%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.3144%" y="517" width="0.0810%" height="15" fill="rgb(209,219,41)" fg:x="226" fg:w="1"/><text x="18.5644%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.3955%" y="549" width="0.0810%" height="15" fill="rgb(253,175,45)" fg:x="227" fg:w="1"/><text x="18.6455%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.3955%" y="533" width="0.0810%" height="15" fill="rgb(235,100,37)" fg:x="227" fg:w="1"/><text x="18.6455%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="18.4765%" y="533" width="0.1621%" height="15" fill="rgb(225,87,19)" fg:x="228" fg:w="2"/><text x="18.7265%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.4765%" y="517" width="0.1621%" height="15" fill="rgb(217,152,17)" fg:x="228" fg:w="2"/><text x="18.7265%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.5575%" y="501" width="0.0810%" height="15" fill="rgb(235,72,13)" fg:x="229" fg:w="1"/><text x="18.8075%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.5575%" y="485" width="0.0810%" height="15" fill="rgb(233,140,18)" fg:x="229" fg:w="1"/><text x="18.8075%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="18.3955%" y="565" width="0.3241%" height="15" fill="rgb(207,212,28)" fg:x="227" fg:w="4"/><text x="18.6455%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="18.4765%" y="549" width="0.2431%" height="15" fill="rgb(220,130,25)" fg:x="228" fg:w="3"/><text x="18.7265%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6386%" y="533" width="0.0810%" height="15" fill="rgb(205,55,34)" fg:x="230" fg:w="1"/><text x="18.8886%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.6386%" y="517" width="0.0810%" height="15" fill="rgb(237,54,35)" fg:x="230" fg:w="1"/><text x="18.8886%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="18.2334%" y="581" width="0.5673%" height="15" fill="rgb(208,67,23)" fg:x="225" fg:w="7"/><text x="18.4834%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.7196%" y="565" width="0.0810%" height="15" fill="rgb(206,207,50)" fg:x="231" fg:w="1"/><text x="18.9696%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.30%)</title><rect x="17.5851%" y="613" width="1.2966%" height="15" fill="rgb(213,211,42)" fg:x="217" fg:w="16"/><text x="17.8351%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.05%)</title><rect x="17.8282%" y="597" width="1.0535%" height="15" fill="rgb(252,197,50)" fg:x="220" fg:w="13"/><text x="18.0782%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.8006%" y="581" width="0.0810%" height="15" fill="rgb(251,211,41)" fg:x="232" fg:w="1"/><text x="19.0506%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::compare::Modified&gt; (1 samples, 0.08%)</title><rect x="18.8817%" y="613" width="0.0810%" height="15" fill="rgb(229,211,5)" fg:x="233" fg:w="1"/><text x="19.1317%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="18.9627%" y="565" width="0.1621%" height="15" fill="rgb(239,36,31)" fg:x="234" fg:w="2"/><text x="19.2127%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="18.9627%" y="549" width="0.1621%" height="15" fill="rgb(248,67,31)" fg:x="234" fg:w="2"/><text x="19.2127%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.1248%" y="549" width="0.0810%" height="15" fill="rgb(249,55,44)" fg:x="236" fg:w="1"/><text x="19.3748%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2058%" y="533" width="0.0810%" height="15" fill="rgb(216,82,12)" fg:x="237" fg:w="1"/><text x="19.4558%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2869%" y="517" width="0.0810%" height="15" fill="rgb(242,174,1)" fg:x="238" fg:w="1"/><text x="19.5369%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="18.9627%" y="613" width="0.4862%" height="15" fill="rgb(208,120,29)" fg:x="234" fg:w="6"/><text x="19.2127%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="18.9627%" y="597" width="0.4862%" height="15" fill="rgb(221,105,43)" fg:x="234" fg:w="6"/><text x="19.2127%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="18.9627%" y="581" width="0.4862%" height="15" fill="rgb(234,124,22)" fg:x="234" fg:w="6"/><text x="19.2127%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="19.1248%" y="565" width="0.3241%" height="15" fill="rgb(212,23,30)" fg:x="236" fg:w="4"/><text x="19.3748%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="19.2058%" y="549" width="0.2431%" height="15" fill="rgb(219,122,53)" fg:x="237" fg:w="3"/><text x="19.4558%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="19.2869%" y="533" width="0.1621%" height="15" fill="rgb(248,84,24)" fg:x="238" fg:w="2"/><text x="19.5369%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.3679%" y="517" width="0.0810%" height="15" fill="rgb(245,115,18)" fg:x="239" fg:w="1"/><text x="19.6179%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.3679%" y="501" width="0.0810%" height="15" fill="rgb(227,176,51)" fg:x="239" fg:w="1"/><text x="19.6179%" y="511.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="19.5300%" y="533" width="0.2431%" height="15" fill="rgb(229,63,42)" fg:x="241" fg:w="3"/><text x="19.7800%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.7731%" y="533" width="0.0810%" height="15" fill="rgb(247,202,24)" fg:x="244" fg:w="1"/><text x="20.0231%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.8541%" y="517" width="0.0810%" height="15" fill="rgb(244,173,20)" fg:x="245" fg:w="1"/><text x="20.1041%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.8541%" y="501" width="0.0810%" height="15" fill="rgb(242,81,47)" fg:x="245" fg:w="1"/><text x="20.1041%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.9352%" y="501" width="0.0810%" height="15" fill="rgb(231,185,54)" fg:x="246" fg:w="1"/><text x="20.1852%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="20.0162%" y="485" width="0.1621%" height="15" fill="rgb(243,55,32)" fg:x="247" fg:w="2"/><text x="20.2662%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="20.0162%" y="469" width="0.1621%" height="15" fill="rgb(208,167,19)" fg:x="247" fg:w="2"/><text x="20.2662%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="19.5300%" y="581" width="0.7293%" height="15" fill="rgb(231,72,35)" fg:x="241" fg:w="9"/><text x="19.7800%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.73%)</title><rect x="19.5300%" y="565" width="0.7293%" height="15" fill="rgb(250,173,51)" fg:x="241" fg:w="9"/><text x="19.7800%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="19.5300%" y="549" width="0.7293%" height="15" fill="rgb(209,5,22)" fg:x="241" fg:w="9"/><text x="19.7800%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="19.8541%" y="533" width="0.4052%" height="15" fill="rgb(250,174,19)" fg:x="245" fg:w="5"/><text x="20.1041%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="19.9352%" y="517" width="0.3241%" height="15" fill="rgb(217,3,49)" fg:x="246" fg:w="4"/><text x="20.1852%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="20.0162%" y="501" width="0.2431%" height="15" fill="rgb(218,225,5)" fg:x="247" fg:w="3"/><text x="20.2662%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.1783%" y="485" width="0.0810%" height="15" fill="rgb(236,89,11)" fg:x="249" fg:w="1"/><text x="20.4283%" y="495.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="20.2593%" y="549" width="0.1621%" height="15" fill="rgb(206,33,28)" fg:x="250" fg:w="2"/><text x="20.5093%" y="559.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.16%)</title><rect x="20.2593%" y="533" width="0.1621%" height="15" fill="rgb(241,56,42)" fg:x="250" fg:w="2"/><text x="20.5093%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="20.2593%" y="517" width="0.1621%" height="15" fill="rgb(222,44,11)" fg:x="250" fg:w="2"/><text x="20.5093%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3404%" y="501" width="0.0810%" height="15" fill="rgb(234,111,20)" fg:x="251" fg:w="1"/><text x="20.5904%" y="511.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (3 samples, 0.24%)</title><rect x="20.2593%" y="581" width="0.2431%" height="15" fill="rgb(237,77,6)" fg:x="250" fg:w="3"/><text x="20.5093%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="20.2593%" y="565" width="0.2431%" height="15" fill="rgb(235,111,23)" fg:x="250" fg:w="3"/><text x="20.5093%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4214%" y="549" width="0.0810%" height="15" fill="rgb(251,135,29)" fg:x="252" fg:w="1"/><text x="20.6714%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="20.5024%" y="549" width="0.0810%" height="15" fill="rgb(217,57,1)" fg:x="253" fg:w="1"/><text x="20.7524%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (14 samples, 1.13%)</title><rect x="19.5300%" y="597" width="1.1345%" height="15" fill="rgb(249,119,31)" fg:x="241" fg:w="14"/><text x="19.7800%" y="607.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="20.5024%" y="581" width="0.1621%" height="15" fill="rgb(233,164,33)" fg:x="253" fg:w="2"/><text x="20.7524%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="20.5024%" y="565" width="0.1621%" height="15" fill="rgb(250,217,43)" fg:x="253" fg:w="2"/><text x="20.7524%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="20.5835%" y="549" width="0.0810%" height="15" fill="rgb(232,154,50)" fg:x="254" fg:w="1"/><text x="20.8335%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="20.6645%" y="565" width="0.4052%" height="15" fill="rgb(227,190,8)" fg:x="255" fg:w="5"/><text x="20.9145%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="20.9887%" y="549" width="0.0810%" height="15" fill="rgb(209,217,32)" fg:x="259" fg:w="1"/><text x="21.2387%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="21.0697%" y="565" width="0.0810%" height="15" fill="rgb(243,203,50)" fg:x="260" fg:w="1"/><text x="21.3197%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.0697%" y="549" width="0.0810%" height="15" fill="rgb(232,152,27)" fg:x="260" fg:w="1"/><text x="21.3197%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.0697%" y="533" width="0.0810%" height="15" fill="rgb(240,34,29)" fg:x="260" fg:w="1"/><text x="21.3197%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="21.1507%" y="565" width="0.0810%" height="15" fill="rgb(215,185,52)" fg:x="261" fg:w="1"/><text x="21.4007%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.1507%" y="549" width="0.0810%" height="15" fill="rgb(240,89,49)" fg:x="261" fg:w="1"/><text x="21.4007%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (2 samples, 0.16%)</title><rect x="21.2318%" y="501" width="0.1621%" height="15" fill="rgb(225,12,52)" fg:x="262" fg:w="2"/><text x="21.4818%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="21.6370%" y="453" width="0.0810%" height="15" fill="rgb(239,128,45)" fg:x="267" fg:w="1"/><text x="21.8870%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.6370%" y="437" width="0.0810%" height="15" fill="rgb(211,78,47)" fg:x="267" fg:w="1"/><text x="21.8870%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.6370%" y="421" width="0.0810%" height="15" fill="rgb(232,31,21)" fg:x="267" fg:w="1"/><text x="21.8870%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (7 samples, 0.57%)</title><rect x="21.2318%" y="517" width="0.5673%" height="15" fill="rgb(222,168,14)" fg:x="262" fg:w="7"/><text x="21.4818%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="21.3938%" y="501" width="0.4052%" height="15" fill="rgb(209,128,24)" fg:x="264" fg:w="5"/><text x="21.6438%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="21.4749%" y="485" width="0.3241%" height="15" fill="rgb(249,35,13)" fg:x="265" fg:w="4"/><text x="21.7249%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="21.5559%" y="469" width="0.2431%" height="15" fill="rgb(218,7,2)" fg:x="266" fg:w="3"/><text x="21.8059%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.7180%" y="453" width="0.0810%" height="15" fill="rgb(238,107,27)" fg:x="268" fg:w="1"/><text x="21.9680%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.8801%" y="485" width="0.0810%" height="15" fill="rgb(217,88,38)" fg:x="270" fg:w="1"/><text x="22.1301%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.8801%" y="469" width="0.0810%" height="15" fill="rgb(230,207,0)" fg:x="270" fg:w="1"/><text x="22.1301%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="21.9611%" y="485" width="0.0810%" height="15" fill="rgb(249,64,54)" fg:x="271" fg:w="1"/><text x="22.2111%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="21.8801%" y="501" width="0.3241%" height="15" fill="rgb(231,7,11)" fg:x="270" fg:w="4"/><text x="22.1301%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="22.0421%" y="485" width="0.1621%" height="15" fill="rgb(205,149,21)" fg:x="272" fg:w="2"/><text x="22.2921%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="22.0421%" y="469" width="0.1621%" height="15" fill="rgb(215,126,34)" fg:x="272" fg:w="2"/><text x="22.2921%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="22.1232%" y="453" width="0.0810%" height="15" fill="rgb(241,132,45)" fg:x="273" fg:w="1"/><text x="22.3732%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.1232%" y="437" width="0.0810%" height="15" fill="rgb(252,69,32)" fg:x="273" fg:w="1"/><text x="22.3732%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (14 samples, 1.13%)</title><rect x="21.2318%" y="533" width="1.1345%" height="15" fill="rgb(232,204,19)" fg:x="262" fg:w="14"/><text x="21.4818%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="21.7990%" y="517" width="0.5673%" height="15" fill="rgb(249,15,47)" fg:x="269" fg:w="7"/><text x="22.0490%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="22.2042%" y="501" width="0.1621%" height="15" fill="rgb(209,227,23)" fg:x="274" fg:w="2"/><text x="22.4542%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (22 samples, 1.78%)</title><rect x="20.6645%" y="597" width="1.7828%" height="15" fill="rgb(248,92,24)" fg:x="255" fg:w="22"/><text x="20.9145%" y="607.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (22 samples, 1.78%)</title><rect x="20.6645%" y="581" width="1.7828%" height="15" fill="rgb(247,59,2)" fg:x="255" fg:w="22"/><text x="20.9145%" y="591.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.22%)</title><rect x="21.2318%" y="565" width="1.2156%" height="15" fill="rgb(221,30,5)" fg:x="262" fg:w="15"/><text x="21.4818%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (15 samples, 1.22%)</title><rect x="21.2318%" y="549" width="1.2156%" height="15" fill="rgb(208,108,53)" fg:x="262" fg:w="15"/><text x="21.4818%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="22.3663%" y="533" width="0.0810%" height="15" fill="rgb(211,183,26)" fg:x="276" fg:w="1"/><text x="22.6163%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="22.9335%" y="421" width="0.0810%" height="15" fill="rgb(232,132,4)" fg:x="283" fg:w="1"/><text x="23.1835%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.9335%" y="405" width="0.0810%" height="15" fill="rgb(253,128,37)" fg:x="283" fg:w="1"/><text x="23.1835%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="22.9335%" y="453" width="0.1621%" height="15" fill="rgb(221,58,24)" fg:x="283" fg:w="2"/><text x="23.1835%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="22.9335%" y="437" width="0.1621%" height="15" fill="rgb(230,54,45)" fg:x="283" fg:w="2"/><text x="23.1835%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.0146%" y="421" width="0.0810%" height="15" fill="rgb(254,21,18)" fg:x="284" fg:w="1"/><text x="23.2646%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.0146%" y="405" width="0.0810%" height="15" fill="rgb(221,108,0)" fg:x="284" fg:w="1"/><text x="23.2646%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.1767%" y="421" width="0.0810%" height="15" fill="rgb(206,95,1)" fg:x="286" fg:w="1"/><text x="23.4267%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="23.1767%" y="405" width="0.0810%" height="15" fill="rgb(237,52,5)" fg:x="286" fg:w="1"/><text x="23.4267%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.1767%" y="389" width="0.0810%" height="15" fill="rgb(218,150,34)" fg:x="286" fg:w="1"/><text x="23.4267%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="23.1767%" y="437" width="0.1621%" height="15" fill="rgb(235,194,28)" fg:x="286" fg:w="2"/><text x="23.4267%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.2577%" y="421" width="0.0810%" height="15" fill="rgb(245,92,18)" fg:x="287" fg:w="1"/><text x="23.5077%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="22.9335%" y="469" width="0.5673%" height="15" fill="rgb(253,203,53)" fg:x="283" fg:w="7"/><text x="23.1835%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="23.0956%" y="453" width="0.4052%" height="15" fill="rgb(249,185,47)" fg:x="285" fg:w="5"/><text x="23.3456%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="23.3387%" y="437" width="0.1621%" height="15" fill="rgb(252,194,52)" fg:x="288" fg:w="2"/><text x="23.5887%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.4198%" y="421" width="0.0810%" height="15" fill="rgb(210,53,36)" fg:x="289" fg:w="1"/><text x="23.6698%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.05%)</title><rect x="22.5284%" y="501" width="1.0535%" height="15" fill="rgb(237,37,25)" fg:x="278" fg:w="13"/><text x="22.7784%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.97%)</title><rect x="22.6094%" y="485" width="0.9724%" height="15" fill="rgb(242,116,27)" fg:x="279" fg:w="12"/><text x="22.8594%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.5008%" y="469" width="0.0810%" height="15" fill="rgb(213,185,26)" fg:x="290" fg:w="1"/><text x="23.7508%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.5008%" y="453" width="0.0810%" height="15" fill="rgb(225,204,8)" fg:x="290" fg:w="1"/><text x="23.7508%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5008%" y="437" width="0.0810%" height="15" fill="rgb(254,111,37)" fg:x="290" fg:w="1"/><text x="23.7508%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="23.5818%" y="485" width="0.1621%" height="15" fill="rgb(242,35,9)" fg:x="291" fg:w="2"/><text x="23.8318%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.46%)</title><rect x="22.4473%" y="533" width="1.4587%" height="15" fill="rgb(232,138,49)" fg:x="277" fg:w="18"/><text x="22.6973%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.38%)</title><rect x="22.5284%" y="517" width="1.3776%" height="15" fill="rgb(247,56,4)" fg:x="278" fg:w="17"/><text x="22.7784%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.32%)</title><rect x="23.5818%" y="501" width="0.3241%" height="15" fill="rgb(226,179,17)" fg:x="291" fg:w="4"/><text x="23.8318%" y="511.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.7439%" y="485" width="0.1621%" height="15" fill="rgb(216,163,45)" fg:x="293" fg:w="2"/><text x="23.9939%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="23.9060%" y="533" width="0.1621%" height="15" fill="rgb(211,157,3)" fg:x="295" fg:w="2"/><text x="24.1560%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.9060%" y="517" width="0.1621%" height="15" fill="rgb(234,44,20)" fg:x="295" fg:w="2"/><text x="24.1560%" y="527.50"></text></g><g><title>engine::session::state::State::close (87 samples, 7.05%)</title><rect x="17.0989%" y="693" width="7.0502%" height="15" fill="rgb(254,138,23)" fg:x="211" fg:w="87"/><text x="17.3489%" y="703.50">engine::s..</text></g><g><title>engine::session::state::State::flush_entities (87 samples, 7.05%)</title><rect x="17.0989%" y="677" width="7.0502%" height="15" fill="rgb(206,119,39)" fg:x="211" fg:w="87"/><text x="17.3489%" y="687.50">engine::s..</text></g><g><title>core::iter::adapters::try_process (84 samples, 6.81%)</title><rect x="17.3420%" y="661" width="6.8071%" height="15" fill="rgb(231,105,52)" fg:x="214" fg:w="84"/><text x="17.5920%" y="671.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (84 samples, 6.81%)</title><rect x="17.3420%" y="645" width="6.8071%" height="15" fill="rgb(250,20,5)" fg:x="214" fg:w="84"/><text x="17.5920%" y="655.50">&lt;alloc::v..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (84 samples, 6.81%)</title><rect x="17.3420%" y="629" width="6.8071%" height="15" fill="rgb(215,198,30)" fg:x="214" fg:w="84"/><text x="17.5920%" y="639.50">engine::s..</text></g><g><title>kernel::model::any_entity_changes (58 samples, 4.70%)</title><rect x="19.4489%" y="613" width="4.7002%" height="15" fill="rgb(246,142,8)" fg:x="240" fg:w="58"/><text x="19.6989%" y="623.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (21 samples, 1.70%)</title><rect x="22.4473%" y="597" width="1.7018%" height="15" fill="rgb(243,26,38)" fg:x="277" fg:w="21"/><text x="22.6973%" y="607.50"></text></g><g><title>serde_json::de::from_trait (21 samples, 1.70%)</title><rect x="22.4473%" y="581" width="1.7018%" height="15" fill="rgb(205,133,28)" fg:x="277" fg:w="21"/><text x="22.6973%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21 samples, 1.70%)</title><rect x="22.4473%" y="565" width="1.7018%" height="15" fill="rgb(212,34,0)" fg:x="277" fg:w="21"/><text x="22.6973%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 1.70%)</title><rect x="22.4473%" y="549" width="1.7018%" height="15" fill="rgb(251,226,22)" fg:x="277" fg:w="21"/><text x="22.6973%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0681%" y="533" width="0.0810%" height="15" fill="rgb(252,119,9)" fg:x="297" fg:w="1"/><text x="24.3181%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0681%" y="517" width="0.0810%" height="15" fill="rgb(213,150,50)" fg:x="297" fg:w="1"/><text x="24.3181%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="24.0681%" y="501" width="0.0810%" height="15" fill="rgb(212,24,39)" fg:x="297" fg:w="1"/><text x="24.3181%" y="511.50"></text></g><g><title>engine::session::Session::close (93 samples, 7.54%)</title><rect x="16.6937%" y="709" width="7.5365%" height="15" fill="rgb(213,46,39)" fg:x="206" fg:w="93"/><text x="16.9437%" y="719.50">engine::se..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="24.1491%" y="693" width="0.0810%" height="15" fill="rgb(239,106,12)" fg:x="298" fg:w="1"/><text x="24.3991%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="24.3112%" y="661" width="0.0810%" height="15" fill="rgb(249,229,21)" fg:x="300" fg:w="1"/><text x="24.5612%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="24.3112%" y="645" width="0.0810%" height="15" fill="rgb(212,158,3)" fg:x="300" fg:w="1"/><text x="24.5612%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="24.3112%" y="629" width="0.0810%" height="15" fill="rgb(253,26,48)" fg:x="300" fg:w="1"/><text x="24.5612%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="24.3112%" y="613" width="0.0810%" height="15" fill="rgb(238,178,20)" fg:x="300" fg:w="1"/><text x="24.5612%" y="623.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="24.3112%" y="597" width="0.0810%" height="15" fill="rgb(208,86,15)" fg:x="300" fg:w="1"/><text x="24.5612%" y="607.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="24.3112%" y="581" width="0.0810%" height="15" fill="rgb(239,42,53)" fg:x="300" fg:w="1"/><text x="24.5612%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="24.3112%" y="565" width="0.0810%" height="15" fill="rgb(245,226,8)" fg:x="300" fg:w="1"/><text x="24.5612%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="24.3112%" y="549" width="0.0810%" height="15" fill="rgb(216,176,32)" fg:x="300" fg:w="1"/><text x="24.5612%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="24.3112%" y="533" width="0.0810%" height="15" fill="rgb(231,186,21)" fg:x="300" fg:w="1"/><text x="24.5612%" y="543.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="24.3112%" y="517" width="0.0810%" height="15" fill="rgb(205,95,49)" fg:x="300" fg:w="1"/><text x="24.5612%" y="527.50"></text></g><g><title>core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.08%)</title><rect x="24.3112%" y="501" width="0.0810%" height="15" fill="rgb(217,145,8)" fg:x="300" fg:w="1"/><text x="24.5612%" y="511.50"></text></g><g><title>core::fmt::builders::debug_tuple_new (1 samples, 0.08%)</title><rect x="24.3112%" y="485" width="0.0810%" height="15" fill="rgb(239,144,48)" fg:x="300" fg:w="1"/><text x="24.5612%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="24.3112%" y="469" width="0.0810%" height="15" fill="rgb(214,189,23)" fg:x="300" fg:w="1"/><text x="24.5612%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.3112%" y="453" width="0.0810%" height="15" fill="rgb(229,157,17)" fg:x="300" fg:w="1"/><text x="24.5612%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.3112%" y="437" width="0.0810%" height="15" fill="rgb(230,5,48)" fg:x="300" fg:w="1"/><text x="24.5612%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="24.3112%" y="421" width="0.0810%" height="15" fill="rgb(224,156,48)" fg:x="300" fg:w="1"/><text x="24.5612%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="24.3112%" y="405" width="0.0810%" height="15" fill="rgb(223,14,29)" fg:x="300" fg:w="1"/><text x="24.5612%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="24.3112%" y="389" width="0.0810%" height="15" fill="rgb(229,96,36)" fg:x="300" fg:w="1"/><text x="24.5612%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="24.3112%" y="373" width="0.0810%" height="15" fill="rgb(231,102,53)" fg:x="300" fg:w="1"/><text x="24.5612%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="24.3112%" y="357" width="0.0810%" height="15" fill="rgb(210,77,38)" fg:x="300" fg:w="1"/><text x="24.5612%" y="367.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (4 samples, 0.32%)</title><rect x="24.4733%" y="645" width="0.3241%" height="15" fill="rgb(235,131,6)" fg:x="302" fg:w="4"/><text x="24.7233%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (4 samples, 0.32%)</title><rect x="24.4733%" y="629" width="0.3241%" height="15" fill="rgb(252,55,38)" fg:x="302" fg:w="4"/><text x="24.7233%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (4 samples, 0.32%)</title><rect x="24.4733%" y="613" width="0.3241%" height="15" fill="rgb(246,38,14)" fg:x="302" fg:w="4"/><text x="24.7233%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (4 samples, 0.32%)</title><rect x="24.4733%" y="597" width="0.3241%" height="15" fill="rgb(242,27,5)" fg:x="302" fg:w="4"/><text x="24.7233%" y="607.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.16%)</title><rect x="24.7974%" y="645" width="0.1621%" height="15" fill="rgb(228,65,35)" fg:x="306" fg:w="2"/><text x="25.0474%" y="655.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::downgrade (1 samples, 0.08%)</title><rect x="24.8784%" y="629" width="0.0810%" height="15" fill="rgb(245,93,11)" fg:x="307" fg:w="1"/><text x="25.1284%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.9595%" y="549" width="0.0810%" height="15" fill="rgb(213,1,31)" fg:x="308" fg:w="1"/><text x="25.2095%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="25.0405%" y="533" width="0.0810%" height="15" fill="rgb(237,205,14)" fg:x="309" fg:w="1"/><text x="25.2905%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.0405%" y="517" width="0.0810%" height="15" fill="rgb(232,118,45)" fg:x="309" fg:w="1"/><text x="25.2905%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.0405%" y="501" width="0.0810%" height="15" fill="rgb(218,5,6)" fg:x="309" fg:w="1"/><text x="25.2905%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="25.0405%" y="485" width="0.0810%" height="15" fill="rgb(251,87,51)" fg:x="309" fg:w="1"/><text x="25.2905%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.0405%" y="469" width="0.0810%" height="15" fill="rgb(207,225,20)" fg:x="309" fg:w="1"/><text x="25.2905%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.0405%" y="453" width="0.0810%" height="15" fill="rgb(222,78,54)" fg:x="309" fg:w="1"/><text x="25.2905%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.2026%" y="469" width="0.0810%" height="15" fill="rgb(232,85,16)" fg:x="311" fg:w="1"/><text x="25.4526%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.2026%" y="453" width="0.0810%" height="15" fill="rgb(244,25,33)" fg:x="311" fg:w="1"/><text x="25.4526%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.2026%" y="437" width="0.0810%" height="15" fill="rgb(233,24,36)" fg:x="311" fg:w="1"/><text x="25.4526%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.2026%" y="421" width="0.0810%" height="15" fill="rgb(253,49,54)" fg:x="311" fg:w="1"/><text x="25.4526%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.2026%" y="405" width="0.0810%" height="15" fill="rgb(245,12,22)" fg:x="311" fg:w="1"/><text x="25.4526%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.2026%" y="389" width="0.0810%" height="15" fill="rgb(253,141,28)" fg:x="311" fg:w="1"/><text x="25.4526%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.2026%" y="373" width="0.0810%" height="15" fill="rgb(225,207,27)" fg:x="311" fg:w="1"/><text x="25.4526%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.2026%" y="357" width="0.0810%" height="15" fill="rgb(220,84,2)" fg:x="311" fg:w="1"/><text x="25.4526%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.2026%" y="341" width="0.0810%" height="15" fill="rgb(224,37,37)" fg:x="311" fg:w="1"/><text x="25.4526%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.2026%" y="325" width="0.0810%" height="15" fill="rgb(220,143,18)" fg:x="311" fg:w="1"/><text x="25.4526%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.2026%" y="309" width="0.0810%" height="15" fill="rgb(210,88,33)" fg:x="311" fg:w="1"/><text x="25.4526%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.2026%" y="293" width="0.0810%" height="15" fill="rgb(219,87,51)" fg:x="311" fg:w="1"/><text x="25.4526%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.2026%" y="277" width="0.0810%" height="15" fill="rgb(211,7,35)" fg:x="311" fg:w="1"/><text x="25.4526%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.2026%" y="261" width="0.0810%" height="15" fill="rgb(232,77,2)" fg:x="311" fg:w="1"/><text x="25.4526%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.2026%" y="245" width="0.0810%" height="15" fill="rgb(249,94,25)" fg:x="311" fg:w="1"/><text x="25.4526%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2836%" y="373" width="0.0810%" height="15" fill="rgb(215,112,2)" fg:x="312" fg:w="1"/><text x="25.5336%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.2836%" y="357" width="0.0810%" height="15" fill="rgb(226,115,48)" fg:x="312" fg:w="1"/><text x="25.5336%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="25.2836%" y="341" width="0.0810%" height="15" fill="rgb(249,196,10)" fg:x="312" fg:w="1"/><text x="25.5336%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2836%" y="325" width="0.0810%" height="15" fill="rgb(237,109,14)" fg:x="312" fg:w="1"/><text x="25.5336%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2836%" y="309" width="0.0810%" height="15" fill="rgb(217,103,53)" fg:x="312" fg:w="1"/><text x="25.5336%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.2836%" y="293" width="0.0810%" height="15" fill="rgb(244,137,9)" fg:x="312" fg:w="1"/><text x="25.5336%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2836%" y="277" width="0.0810%" height="15" fill="rgb(227,201,3)" fg:x="312" fg:w="1"/><text x="25.5336%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.2836%" y="261" width="0.0810%" height="15" fill="rgb(243,94,6)" fg:x="312" fg:w="1"/><text x="25.5336%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="25.2836%" y="245" width="0.0810%" height="15" fill="rgb(235,118,5)" fg:x="312" fg:w="1"/><text x="25.5336%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.2836%" y="229" width="0.0810%" height="15" fill="rgb(247,10,30)" fg:x="312" fg:w="1"/><text x="25.5336%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.2836%" y="213" width="0.0810%" height="15" fill="rgb(205,26,28)" fg:x="312" fg:w="1"/><text x="25.5336%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="25.2836%" y="197" width="0.0810%" height="15" fill="rgb(206,99,35)" fg:x="312" fg:w="1"/><text x="25.5336%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="25.3647%" y="373" width="0.0810%" height="15" fill="rgb(238,130,40)" fg:x="313" fg:w="1"/><text x="25.6147%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="25.3647%" y="357" width="0.0810%" height="15" fill="rgb(224,126,31)" fg:x="313" fg:w="1"/><text x="25.6147%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="25.3647%" y="341" width="0.0810%" height="15" fill="rgb(254,105,17)" fg:x="313" fg:w="1"/><text x="25.6147%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="25.3647%" y="325" width="0.0810%" height="15" fill="rgb(216,87,36)" fg:x="313" fg:w="1"/><text x="25.6147%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="25.3647%" y="309" width="0.0810%" height="15" fill="rgb(240,21,12)" fg:x="313" fg:w="1"/><text x="25.6147%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.3647%" y="293" width="0.0810%" height="15" fill="rgb(245,192,34)" fg:x="313" fg:w="1"/><text x="25.6147%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.5267%" y="341" width="0.0810%" height="15" fill="rgb(226,100,49)" fg:x="315" fg:w="1"/><text x="25.7767%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="25.2836%" y="469" width="0.4052%" height="15" fill="rgb(245,188,27)" fg:x="312" fg:w="5"/><text x="25.5336%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="25.2836%" y="453" width="0.4052%" height="15" fill="rgb(212,170,8)" fg:x="312" fg:w="5"/><text x="25.5336%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="25.2836%" y="437" width="0.4052%" height="15" fill="rgb(217,113,29)" fg:x="312" fg:w="5"/><text x="25.5336%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.41%)</title><rect x="25.2836%" y="421" width="0.4052%" height="15" fill="rgb(237,30,3)" fg:x="312" fg:w="5"/><text x="25.5336%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="25.2836%" y="405" width="0.4052%" height="15" fill="rgb(227,19,28)" fg:x="312" fg:w="5"/><text x="25.5336%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="25.2836%" y="389" width="0.4052%" height="15" fill="rgb(239,172,45)" fg:x="312" fg:w="5"/><text x="25.5336%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="25.4457%" y="373" width="0.2431%" height="15" fill="rgb(254,55,39)" fg:x="314" fg:w="3"/><text x="25.6957%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="25.5267%" y="357" width="0.1621%" height="15" fill="rgb(249,208,12)" fg:x="315" fg:w="2"/><text x="25.7767%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="25.6078%" y="341" width="0.0810%" height="15" fill="rgb(240,52,13)" fg:x="316" fg:w="1"/><text x="25.8578%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="25.6078%" y="325" width="0.0810%" height="15" fill="rgb(252,149,13)" fg:x="316" fg:w="1"/><text x="25.8578%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="25.6078%" y="309" width="0.0810%" height="15" fill="rgb(232,81,48)" fg:x="316" fg:w="1"/><text x="25.8578%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.6078%" y="293" width="0.0810%" height="15" fill="rgb(222,144,2)" fg:x="316" fg:w="1"/><text x="25.8578%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.6078%" y="277" width="0.0810%" height="15" fill="rgb(216,81,32)" fg:x="316" fg:w="1"/><text x="25.8578%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="25.6078%" y="261" width="0.0810%" height="15" fill="rgb(244,78,51)" fg:x="316" fg:w="1"/><text x="25.8578%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.6078%" y="245" width="0.0810%" height="15" fill="rgb(217,66,21)" fg:x="316" fg:w="1"/><text x="25.8578%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.6078%" y="229" width="0.0810%" height="15" fill="rgb(247,101,42)" fg:x="316" fg:w="1"/><text x="25.8578%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="25.6078%" y="213" width="0.0810%" height="15" fill="rgb(227,81,39)" fg:x="316" fg:w="1"/><text x="25.8578%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="25.6078%" y="197" width="0.0810%" height="15" fill="rgb(220,223,44)" fg:x="316" fg:w="1"/><text x="25.8578%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.6078%" y="181" width="0.0810%" height="15" fill="rgb(205,218,2)" fg:x="316" fg:w="1"/><text x="25.8578%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.6078%" y="165" width="0.0810%" height="15" fill="rgb(212,207,28)" fg:x="316" fg:w="1"/><text x="25.8578%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.6888%" y="341" width="0.0810%" height="15" fill="rgb(224,12,41)" fg:x="317" fg:w="1"/><text x="25.9388%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.6888%" y="373" width="0.1621%" height="15" fill="rgb(216,118,12)" fg:x="317" fg:w="2"/><text x="25.9388%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="25.6888%" y="357" width="0.1621%" height="15" fill="rgb(252,97,46)" fg:x="317" fg:w="2"/><text x="25.9388%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.7699%" y="341" width="0.0810%" height="15" fill="rgb(244,206,19)" fg:x="318" fg:w="1"/><text x="26.0199%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (12 samples, 0.97%)</title><rect x="24.9595%" y="565" width="0.9724%" height="15" fill="rgb(231,84,31)" fg:x="308" fg:w="12"/><text x="25.2095%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (11 samples, 0.89%)</title><rect x="25.0405%" y="549" width="0.8914%" height="15" fill="rgb(244,133,0)" fg:x="309" fg:w="11"/><text x="25.2905%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.81%)</title><rect x="25.1216%" y="533" width="0.8104%" height="15" fill="rgb(223,15,50)" fg:x="310" fg:w="10"/><text x="25.3716%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.81%)</title><rect x="25.1216%" y="517" width="0.8104%" height="15" fill="rgb(250,118,49)" fg:x="310" fg:w="10"/><text x="25.3716%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.73%)</title><rect x="25.2026%" y="501" width="0.7293%" height="15" fill="rgb(248,25,38)" fg:x="311" fg:w="9"/><text x="25.4526%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="25.2026%" y="485" width="0.7293%" height="15" fill="rgb(215,70,14)" fg:x="311" fg:w="9"/><text x="25.4526%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="25.6888%" y="469" width="0.2431%" height="15" fill="rgb(215,28,15)" fg:x="317" fg:w="3"/><text x="25.9388%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="25.6888%" y="453" width="0.2431%" height="15" fill="rgb(243,6,28)" fg:x="317" fg:w="3"/><text x="25.9388%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="25.6888%" y="437" width="0.2431%" height="15" fill="rgb(222,130,1)" fg:x="317" fg:w="3"/><text x="25.9388%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="25.6888%" y="421" width="0.2431%" height="15" fill="rgb(236,166,44)" fg:x="317" fg:w="3"/><text x="25.9388%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="25.6888%" y="405" width="0.2431%" height="15" fill="rgb(221,108,14)" fg:x="317" fg:w="3"/><text x="25.9388%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="25.6888%" y="389" width="0.2431%" height="15" fill="rgb(252,3,45)" fg:x="317" fg:w="3"/><text x="25.9388%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.8509%" y="373" width="0.0810%" height="15" fill="rgb(237,68,30)" fg:x="319" fg:w="1"/><text x="26.1009%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.8509%" y="357" width="0.0810%" height="15" fill="rgb(211,79,22)" fg:x="319" fg:w="1"/><text x="26.1009%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.0130%" y="405" width="0.0810%" height="15" fill="rgb(252,185,21)" fg:x="321" fg:w="1"/><text x="26.2630%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="26.1750%" y="309" width="0.0810%" height="15" fill="rgb(225,189,26)" fg:x="323" fg:w="1"/><text x="26.4250%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (3 samples, 0.24%)</title><rect x="26.0940%" y="325" width="0.2431%" height="15" fill="rgb(241,30,40)" fg:x="322" fg:w="3"/><text x="26.3440%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.2561%" y="309" width="0.0810%" height="15" fill="rgb(235,215,44)" fg:x="324" fg:w="1"/><text x="26.5061%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.2561%" y="293" width="0.0810%" height="15" fill="rgb(205,8,29)" fg:x="324" fg:w="1"/><text x="26.5061%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.2561%" y="277" width="0.0810%" height="15" fill="rgb(241,137,42)" fg:x="324" fg:w="1"/><text x="26.5061%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="26.2561%" y="261" width="0.0810%" height="15" fill="rgb(237,155,2)" fg:x="324" fg:w="1"/><text x="26.5061%" y="271.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="26.4182%" y="309" width="0.0810%" height="15" fill="rgb(245,29,42)" fg:x="326" fg:w="1"/><text x="26.6682%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.4182%" y="293" width="0.0810%" height="15" fill="rgb(234,101,35)" fg:x="326" fg:w="1"/><text x="26.6682%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.4182%" y="277" width="0.0810%" height="15" fill="rgb(228,64,37)" fg:x="326" fg:w="1"/><text x="26.6682%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.4182%" y="261" width="0.0810%" height="15" fill="rgb(217,214,36)" fg:x="326" fg:w="1"/><text x="26.6682%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="26.4182%" y="245" width="0.0810%" height="15" fill="rgb(243,70,3)" fg:x="326" fg:w="1"/><text x="26.6682%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.4992%" y="277" width="0.0810%" height="15" fill="rgb(253,158,52)" fg:x="327" fg:w="1"/><text x="26.7492%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (7 samples, 0.57%)</title><rect x="26.0940%" y="357" width="0.5673%" height="15" fill="rgb(234,111,54)" fg:x="322" fg:w="7"/><text x="26.3440%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="26.0940%" y="341" width="0.5673%" height="15" fill="rgb(217,70,32)" fg:x="322" fg:w="7"/><text x="26.3440%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="26.3371%" y="325" width="0.3241%" height="15" fill="rgb(234,18,33)" fg:x="325" fg:w="4"/><text x="26.5871%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="26.4992%" y="309" width="0.1621%" height="15" fill="rgb(234,12,49)" fg:x="327" fg:w="2"/><text x="26.7492%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (2 samples, 0.16%)</title><rect x="26.4992%" y="293" width="0.1621%" height="15" fill="rgb(236,10,21)" fg:x="327" fg:w="2"/><text x="26.7492%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="26.5802%" y="277" width="0.0810%" height="15" fill="rgb(248,182,45)" fg:x="328" fg:w="1"/><text x="26.8302%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="26.5802%" y="261" width="0.0810%" height="15" fill="rgb(217,95,36)" fg:x="328" fg:w="1"/><text x="26.8302%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5802%" y="245" width="0.0810%" height="15" fill="rgb(212,110,31)" fg:x="328" fg:w="1"/><text x="26.8302%" y="255.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (8 samples, 0.65%)</title><rect x="26.0940%" y="389" width="0.6483%" height="15" fill="rgb(206,32,53)" fg:x="322" fg:w="8"/><text x="26.3440%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (8 samples, 0.65%)</title><rect x="26.0940%" y="373" width="0.6483%" height="15" fill="rgb(246,141,37)" fg:x="322" fg:w="8"/><text x="26.3440%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="26.6613%" y="357" width="0.0810%" height="15" fill="rgb(219,16,7)" fg:x="329" fg:w="1"/><text x="26.9113%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.6613%" y="341" width="0.0810%" height="15" fill="rgb(230,205,45)" fg:x="329" fg:w="1"/><text x="26.9113%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.6613%" y="325" width="0.0810%" height="15" fill="rgb(231,43,49)" fg:x="329" fg:w="1"/><text x="26.9113%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="26.9044%" y="357" width="0.1621%" height="15" fill="rgb(212,106,34)" fg:x="332" fg:w="2"/><text x="27.1544%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="26.9044%" y="341" width="0.1621%" height="15" fill="rgb(206,83,17)" fg:x="332" fg:w="2"/><text x="27.1544%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="27.2285%" y="325" width="0.2431%" height="15" fill="rgb(244,154,49)" fg:x="336" fg:w="3"/><text x="27.4785%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.3096%" y="309" width="0.1621%" height="15" fill="rgb(244,149,49)" fg:x="337" fg:w="2"/><text x="27.5596%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.3096%" y="293" width="0.1621%" height="15" fill="rgb(227,134,18)" fg:x="337" fg:w="2"/><text x="27.5596%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.3906%" y="277" width="0.0810%" height="15" fill="rgb(237,116,36)" fg:x="338" fg:w="1"/><text x="27.6406%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.3906%" y="261" width="0.0810%" height="15" fill="rgb(205,129,40)" fg:x="338" fg:w="1"/><text x="27.6406%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.3906%" y="245" width="0.0810%" height="15" fill="rgb(236,178,4)" fg:x="338" fg:w="1"/><text x="27.6406%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.3906%" y="229" width="0.0810%" height="15" fill="rgb(251,76,53)" fg:x="338" fg:w="1"/><text x="27.6406%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.3906%" y="213" width="0.0810%" height="15" fill="rgb(242,92,40)" fg:x="338" fg:w="1"/><text x="27.6406%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.3906%" y="197" width="0.0810%" height="15" fill="rgb(209,45,30)" fg:x="338" fg:w="1"/><text x="27.6406%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.3906%" y="181" width="0.0810%" height="15" fill="rgb(218,157,36)" fg:x="338" fg:w="1"/><text x="27.6406%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.3906%" y="165" width="0.0810%" height="15" fill="rgb(222,186,16)" fg:x="338" fg:w="1"/><text x="27.6406%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="27.3906%" y="149" width="0.0810%" height="15" fill="rgb(254,72,35)" fg:x="338" fg:w="1"/><text x="27.6406%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="27.3906%" y="133" width="0.0810%" height="15" fill="rgb(224,25,35)" fg:x="338" fg:w="1"/><text x="27.6406%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="27.3906%" y="117" width="0.0810%" height="15" fill="rgb(206,135,52)" fg:x="338" fg:w="1"/><text x="27.6406%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.3906%" y="101" width="0.0810%" height="15" fill="rgb(229,174,47)" fg:x="338" fg:w="1"/><text x="27.6406%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.4716%" y="325" width="0.0810%" height="15" fill="rgb(242,184,21)" fg:x="339" fg:w="1"/><text x="27.7216%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (8 samples, 0.65%)</title><rect x="27.2285%" y="341" width="0.6483%" height="15" fill="rgb(213,22,45)" fg:x="336" fg:w="8"/><text x="27.4785%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="27.5527%" y="325" width="0.3241%" height="15" fill="rgb(237,81,54)" fg:x="340" fg:w="4"/><text x="27.8027%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="27.5527%" y="309" width="0.3241%" height="15" fill="rgb(248,177,18)" fg:x="340" fg:w="4"/><text x="27.8027%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="27.6337%" y="293" width="0.2431%" height="15" fill="rgb(254,31,16)" fg:x="341" fg:w="3"/><text x="27.8837%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="27.6337%" y="277" width="0.2431%" height="15" fill="rgb(235,20,31)" fg:x="341" fg:w="3"/><text x="27.8837%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.7958%" y="261" width="0.0810%" height="15" fill="rgb(240,56,43)" fg:x="343" fg:w="1"/><text x="28.0458%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.7958%" y="245" width="0.0810%" height="15" fill="rgb(237,197,51)" fg:x="343" fg:w="1"/><text x="28.0458%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (11 samples, 0.89%)</title><rect x="27.0665%" y="357" width="0.8914%" height="15" fill="rgb(241,162,44)" fg:x="334" fg:w="11"/><text x="27.3165%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="27.8768%" y="341" width="0.0810%" height="15" fill="rgb(224,23,20)" fg:x="344" fg:w="1"/><text x="28.1268%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.8768%" y="325" width="0.0810%" height="15" fill="rgb(250,109,34)" fg:x="344" fg:w="1"/><text x="28.1268%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.0389%" y="341" width="0.0810%" height="15" fill="rgb(214,175,50)" fg:x="346" fg:w="1"/><text x="28.2889%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.0389%" y="325" width="0.0810%" height="15" fill="rgb(213,182,5)" fg:x="346" fg:w="1"/><text x="28.2889%" y="335.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (2 samples, 0.16%)</title><rect x="28.1199%" y="341" width="0.1621%" height="15" fill="rgb(209,199,19)" fg:x="347" fg:w="2"/><text x="28.3699%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (7 samples, 0.57%)</title><rect x="27.9579%" y="357" width="0.5673%" height="15" fill="rgb(236,224,42)" fg:x="345" fg:w="7"/><text x="28.2079%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="28.2820%" y="341" width="0.2431%" height="15" fill="rgb(246,226,29)" fg:x="349" fg:w="3"/><text x="28.5320%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="28.2820%" y="325" width="0.2431%" height="15" fill="rgb(227,223,11)" fg:x="349" fg:w="3"/><text x="28.5320%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="28.3630%" y="309" width="0.1621%" height="15" fill="rgb(219,7,51)" fg:x="350" fg:w="2"/><text x="28.6130%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.3630%" y="293" width="0.1621%" height="15" fill="rgb(245,167,10)" fg:x="350" fg:w="2"/><text x="28.6130%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.4441%" y="277" width="0.0810%" height="15" fill="rgb(237,224,16)" fg:x="351" fg:w="1"/><text x="28.6941%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.4441%" y="261" width="0.0810%" height="15" fill="rgb(226,132,13)" fg:x="351" fg:w="1"/><text x="28.6941%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="28.4441%" y="245" width="0.0810%" height="15" fill="rgb(214,140,3)" fg:x="351" fg:w="1"/><text x="28.6941%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.5251%" y="357" width="0.0810%" height="15" fill="rgb(221,177,4)" fg:x="352" fg:w="1"/><text x="28.7751%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.6062%" y="325" width="0.0810%" height="15" fill="rgb(238,139,3)" fg:x="353" fg:w="1"/><text x="28.8562%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.6872%" y="325" width="0.1621%" height="15" fill="rgb(216,17,39)" fg:x="354" fg:w="2"/><text x="28.9372%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.8493%" y="325" width="0.0810%" height="15" fill="rgb(238,120,9)" fg:x="356" fg:w="1"/><text x="29.0993%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="28.8493%" y="309" width="0.0810%" height="15" fill="rgb(244,92,53)" fg:x="356" fg:w="1"/><text x="29.0993%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.1734%" y="261" width="0.0810%" height="15" fill="rgb(224,148,33)" fg:x="360" fg:w="1"/><text x="29.4234%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.1734%" y="245" width="0.0810%" height="15" fill="rgb(243,6,36)" fg:x="360" fg:w="1"/><text x="29.4234%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.2545%" y="261" width="0.0810%" height="15" fill="rgb(230,102,11)" fg:x="361" fg:w="1"/><text x="29.5045%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.2545%" y="245" width="0.0810%" height="15" fill="rgb(234,148,36)" fg:x="361" fg:w="1"/><text x="29.5045%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::gid (10 samples, 0.81%)</title><rect x="28.6062%" y="357" width="0.8104%" height="15" fill="rgb(251,153,25)" fg:x="353" fg:w="10"/><text x="28.8562%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (10 samples, 0.81%)</title><rect x="28.6062%" y="341" width="0.8104%" height="15" fill="rgb(215,129,8)" fg:x="353" fg:w="10"/><text x="28.8562%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="28.9303%" y="325" width="0.4862%" height="15" fill="rgb(224,128,35)" fg:x="357" fg:w="6"/><text x="29.1803%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="29.0113%" y="309" width="0.4052%" height="15" fill="rgb(237,56,52)" fg:x="358" fg:w="5"/><text x="29.2613%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="29.1734%" y="293" width="0.2431%" height="15" fill="rgb(234,213,19)" fg:x="360" fg:w="3"/><text x="29.4234%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="29.1734%" y="277" width="0.2431%" height="15" fill="rgb(252,82,23)" fg:x="360" fg:w="3"/><text x="29.4234%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.3355%" y="261" width="0.0810%" height="15" fill="rgb(254,201,21)" fg:x="362" fg:w="1"/><text x="29.5855%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.3355%" y="245" width="0.0810%" height="15" fill="rgb(250,186,11)" fg:x="362" fg:w="1"/><text x="29.5855%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.3355%" y="229" width="0.0810%" height="15" fill="rgb(211,174,5)" fg:x="362" fg:w="1"/><text x="29.5855%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.3355%" y="213" width="0.0810%" height="15" fill="rgb(214,121,10)" fg:x="362" fg:w="1"/><text x="29.5855%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="29.4165%" y="293" width="0.0810%" height="15" fill="rgb(241,66,2)" fg:x="363" fg:w="1"/><text x="29.6665%" y="303.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.4165%" y="277" width="0.0810%" height="15" fill="rgb(220,167,19)" fg:x="363" fg:w="1"/><text x="29.6665%" y="287.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.08%)</title><rect x="29.4165%" y="261" width="0.0810%" height="15" fill="rgb(231,54,50)" fg:x="363" fg:w="1"/><text x="29.6665%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.4165%" y="245" width="0.0810%" height="15" fill="rgb(239,217,53)" fg:x="363" fg:w="1"/><text x="29.6665%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="29.4976%" y="277" width="0.1621%" height="15" fill="rgb(248,8,0)" fg:x="364" fg:w="2"/><text x="29.7476%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.5786%" y="261" width="0.0810%" height="15" fill="rgb(229,118,37)" fg:x="365" fg:w="1"/><text x="29.8286%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="29.5786%" y="245" width="0.0810%" height="15" fill="rgb(253,223,43)" fg:x="365" fg:w="1"/><text x="29.8286%" y="255.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="29.5786%" y="229" width="0.0810%" height="15" fill="rgb(211,77,36)" fg:x="365" fg:w="1"/><text x="29.8286%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="29.5786%" y="213" width="0.0810%" height="15" fill="rgb(219,3,53)" fg:x="365" fg:w="1"/><text x="29.8286%" y="223.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="29.5786%" y="197" width="0.0810%" height="15" fill="rgb(244,45,42)" fg:x="365" fg:w="1"/><text x="29.8286%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.7407%" y="229" width="0.0810%" height="15" fill="rgb(225,95,27)" fg:x="367" fg:w="1"/><text x="29.9907%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8217%" y="229" width="0.0810%" height="15" fill="rgb(207,74,8)" fg:x="368" fg:w="1"/><text x="30.0717%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="29.9028%" y="197" width="0.0810%" height="15" fill="rgb(243,63,36)" fg:x="369" fg:w="1"/><text x="30.1528%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="29.9028%" y="229" width="0.1621%" height="15" fill="rgb(211,180,12)" fg:x="369" fg:w="2"/><text x="30.1528%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="29.9028%" y="213" width="0.1621%" height="15" fill="rgb(254,166,49)" fg:x="369" fg:w="2"/><text x="30.1528%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="29.9838%" y="197" width="0.0810%" height="15" fill="rgb(205,19,0)" fg:x="370" fg:w="1"/><text x="30.2338%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.0648%" y="213" width="0.0810%" height="15" fill="rgb(224,172,32)" fg:x="371" fg:w="1"/><text x="30.3148%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1459%" y="213" width="0.0810%" height="15" fill="rgb(254,136,30)" fg:x="372" fg:w="1"/><text x="30.3959%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (11 samples, 0.89%)</title><rect x="30.2269%" y="213" width="0.8914%" height="15" fill="rgb(246,19,35)" fg:x="373" fg:w="11"/><text x="30.4769%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.81%)</title><rect x="30.3079%" y="197" width="0.8104%" height="15" fill="rgb(219,24,36)" fg:x="374" fg:w="10"/><text x="30.5579%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="31.1994%" y="197" width="0.0810%" height="15" fill="rgb(251,55,1)" fg:x="385" fg:w="1"/><text x="31.4494%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="31.1183%" y="213" width="0.4862%" height="15" fill="rgb(218,117,39)" fg:x="384" fg:w="6"/><text x="31.3683%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="31.2804%" y="197" width="0.3241%" height="15" fill="rgb(248,169,11)" fg:x="386" fg:w="4"/><text x="31.5304%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="31.4425%" y="181" width="0.1621%" height="15" fill="rgb(244,40,44)" fg:x="388" fg:w="2"/><text x="31.6925%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="31.6045%" y="213" width="0.0810%" height="15" fill="rgb(234,62,37)" fg:x="390" fg:w="1"/><text x="31.8545%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="32.0908%" y="149" width="0.0810%" height="15" fill="rgb(207,117,42)" fg:x="396" fg:w="1"/><text x="32.3408%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.2528%" y="117" width="0.0810%" height="15" fill="rgb(213,43,2)" fg:x="398" fg:w="1"/><text x="32.5028%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.2528%" y="101" width="0.0810%" height="15" fill="rgb(244,202,51)" fg:x="398" fg:w="1"/><text x="32.5028%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.2528%" y="85" width="0.0810%" height="15" fill="rgb(253,174,46)" fg:x="398" fg:w="1"/><text x="32.5028%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="32.1718%" y="149" width="0.3241%" height="15" fill="rgb(251,23,1)" fg:x="397" fg:w="4"/><text x="32.4218%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="32.2528%" y="133" width="0.2431%" height="15" fill="rgb(253,26,1)" fg:x="398" fg:w="3"/><text x="32.5028%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="32.3339%" y="117" width="0.1621%" height="15" fill="rgb(216,89,31)" fg:x="399" fg:w="2"/><text x="32.5839%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.4149%" y="101" width="0.0810%" height="15" fill="rgb(209,109,5)" fg:x="400" fg:w="1"/><text x="32.6649%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="32.4959%" y="149" width="0.0810%" height="15" fill="rgb(229,63,13)" fg:x="401" fg:w="1"/><text x="32.7459%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="32.4959%" y="133" width="0.0810%" height="15" fill="rgb(238,137,54)" fg:x="401" fg:w="1"/><text x="32.7459%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="32.5770%" y="133" width="0.0810%" height="15" fill="rgb(228,1,9)" fg:x="402" fg:w="1"/><text x="32.8270%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.5770%" y="117" width="0.0810%" height="15" fill="rgb(249,120,48)" fg:x="402" fg:w="1"/><text x="32.8270%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.5770%" y="101" width="0.0810%" height="15" fill="rgb(209,72,36)" fg:x="402" fg:w="1"/><text x="32.8270%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.5770%" y="85" width="0.0810%" height="15" fill="rgb(247,98,49)" fg:x="402" fg:w="1"/><text x="32.8270%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.6580%" y="117" width="0.0810%" height="15" fill="rgb(233,75,36)" fg:x="403" fg:w="1"/><text x="32.9080%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (72 samples, 5.83%)</title><rect x="32.5770%" y="149" width="5.8347%" height="15" fill="rgb(225,14,24)" fg:x="402" fg:w="72"/><text x="32.8270%" y="159.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (71 samples, 5.75%)</title><rect x="32.6580%" y="133" width="5.7536%" height="15" fill="rgb(237,193,20)" fg:x="403" fg:w="71"/><text x="32.9080%" y="143.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (70 samples, 5.67%)</title><rect x="32.7391%" y="117" width="5.6726%" height="15" fill="rgb(239,122,19)" fg:x="404" fg:w="70"/><text x="32.9891%" y="127.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="38.4117%" y="149" width="0.0810%" height="15" fill="rgb(231,220,10)" fg:x="474" fg:w="1"/><text x="38.6617%" y="159.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="38.4927%" y="149" width="0.0810%" height="15" fill="rgb(220,66,15)" fg:x="475" fg:w="1"/><text x="38.7427%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 7.13%)</title><rect x="31.6856%" y="197" width="7.1313%" height="15" fill="rgb(215,171,52)" fg:x="391" fg:w="88"/><text x="31.9356%" y="207.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (88 samples, 7.13%)</title><rect x="31.6856%" y="181" width="7.1313%" height="15" fill="rgb(241,169,50)" fg:x="391" fg:w="88"/><text x="31.9356%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (88 samples, 7.13%)</title><rect x="31.6856%" y="165" width="7.1313%" height="15" fill="rgb(236,189,0)" fg:x="391" fg:w="88"/><text x="31.9356%" y="175.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.24%)</title><rect x="38.5737%" y="149" width="0.2431%" height="15" fill="rgb(217,147,20)" fg:x="476" fg:w="3"/><text x="38.8237%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="38.6548%" y="133" width="0.1621%" height="15" fill="rgb(206,188,39)" fg:x="477" fg:w="2"/><text x="38.9048%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="38.6548%" y="117" width="0.1621%" height="15" fill="rgb(227,118,25)" fg:x="477" fg:w="2"/><text x="38.9048%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.7358%" y="101" width="0.0810%" height="15" fill="rgb(248,171,40)" fg:x="478" fg:w="1"/><text x="38.9858%" y="111.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.8169%" y="197" width="0.0810%" height="15" fill="rgb(251,90,54)" fg:x="479" fg:w="1"/><text x="39.0669%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="39.0600%" y="181" width="0.1621%" height="15" fill="rgb(234,11,46)" fg:x="482" fg:w="2"/><text x="39.3100%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="38.8979%" y="197" width="0.6483%" height="15" fill="rgb(229,134,13)" fg:x="480" fg:w="8"/><text x="39.1479%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="39.2220%" y="181" width="0.3241%" height="15" fill="rgb(223,129,3)" fg:x="484" fg:w="4"/><text x="39.4720%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.4652%" y="165" width="0.0810%" height="15" fill="rgb(221,124,13)" fg:x="487" fg:w="1"/><text x="39.7152%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.4652%" y="149" width="0.0810%" height="15" fill="rgb(234,3,18)" fg:x="487" fg:w="1"/><text x="39.7152%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4652%" y="133" width="0.0810%" height="15" fill="rgb(249,199,20)" fg:x="487" fg:w="1"/><text x="39.7152%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="39.5462%" y="181" width="0.0810%" height="15" fill="rgb(224,134,6)" fg:x="488" fg:w="1"/><text x="39.7962%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="39.6272%" y="181" width="0.0810%" height="15" fill="rgb(254,83,26)" fg:x="489" fg:w="1"/><text x="39.8772%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (100 samples, 8.10%)</title><rect x="31.6856%" y="213" width="8.1037%" height="15" fill="rgb(217,88,9)" fg:x="391" fg:w="100"/><text x="31.9356%" y="223.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="39.5462%" y="197" width="0.2431%" height="15" fill="rgb(225,73,2)" fg:x="488" fg:w="3"/><text x="39.7962%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="39.7083%" y="181" width="0.0810%" height="15" fill="rgb(226,44,39)" fg:x="490" fg:w="1"/><text x="39.9583%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (122 samples, 9.89%)</title><rect x="30.0648%" y="229" width="9.8865%" height="15" fill="rgb(228,53,17)" fg:x="371" fg:w="122"/><text x="30.3148%" y="239.50">regex_automata..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="39.7893%" y="213" width="0.1621%" height="15" fill="rgb(212,27,27)" fg:x="491" fg:w="2"/><text x="40.0393%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="39.9514%" y="197" width="0.4052%" height="15" fill="rgb(241,50,6)" fg:x="493" fg:w="5"/><text x="40.2014%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="40.1945%" y="181" width="0.1621%" height="15" fill="rgb(225,28,51)" fg:x="496" fg:w="2"/><text x="40.4445%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="40.2755%" y="165" width="0.0810%" height="15" fill="rgb(215,33,16)" fg:x="497" fg:w="1"/><text x="40.5255%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="39.9514%" y="229" width="0.4862%" height="15" fill="rgb(243,40,39)" fg:x="493" fg:w="6"/><text x="40.2014%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="39.9514%" y="213" width="0.4862%" height="15" fill="rgb(225,11,42)" fg:x="493" fg:w="6"/><text x="40.2014%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="40.3566%" y="197" width="0.0810%" height="15" fill="rgb(241,220,38)" fg:x="498" fg:w="1"/><text x="40.6066%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (134 samples, 10.86%)</title><rect x="29.6596%" y="277" width="10.8590%" height="15" fill="rgb(244,52,35)" fg:x="366" fg:w="134"/><text x="29.9096%" y="287.50">&lt;regex::regex::s..</text></g><g><title>regex::builders::string::RegexBuilder::build (134 samples, 10.86%)</title><rect x="29.6596%" y="261" width="10.8590%" height="15" fill="rgb(246,42,46)" fg:x="366" fg:w="134"/><text x="29.9096%" y="271.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::build (133 samples, 10.78%)</title><rect x="29.7407%" y="245" width="10.7780%" height="15" fill="rgb(205,184,13)" fg:x="367" fg:w="133"/><text x="29.9907%" y="255.50">regex_automata::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="40.4376%" y="229" width="0.0810%" height="15" fill="rgb(209,48,36)" fg:x="499" fg:w="1"/><text x="40.6876%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="40.4376%" y="213" width="0.0810%" height="15" fill="rgb(244,34,51)" fg:x="499" fg:w="1"/><text x="40.6876%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.5186%" y="245" width="0.0810%" height="15" fill="rgb(221,107,33)" fg:x="500" fg:w="1"/><text x="40.7686%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.5997%" y="229" width="0.0810%" height="15" fill="rgb(224,203,12)" fg:x="501" fg:w="1"/><text x="40.8497%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.5997%" y="213" width="0.0810%" height="15" fill="rgb(230,215,18)" fg:x="501" fg:w="1"/><text x="40.8497%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="40.5997%" y="245" width="0.1621%" height="15" fill="rgb(206,185,35)" fg:x="501" fg:w="2"/><text x="40.8497%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="40.6807%" y="229" width="0.0810%" height="15" fill="rgb(228,140,34)" fg:x="502" fg:w="1"/><text x="40.9307%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="40.6807%" y="213" width="0.0810%" height="15" fill="rgb(208,93,13)" fg:x="502" fg:w="1"/><text x="40.9307%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.6807%" y="197" width="0.0810%" height="15" fill="rgb(221,193,39)" fg:x="502" fg:w="1"/><text x="40.9307%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.7618%" y="229" width="0.0810%" height="15" fill="rgb(241,132,34)" fg:x="503" fg:w="1"/><text x="41.0118%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="40.5186%" y="277" width="0.4052%" height="15" fill="rgb(221,141,10)" fg:x="500" fg:w="5"/><text x="40.7686%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="40.5186%" y="261" width="0.4052%" height="15" fill="rgb(226,90,31)" fg:x="500" fg:w="5"/><text x="40.7686%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="40.7618%" y="245" width="0.1621%" height="15" fill="rgb(243,75,5)" fg:x="503" fg:w="2"/><text x="41.0118%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="40.8428%" y="229" width="0.0810%" height="15" fill="rgb(227,156,21)" fg:x="504" fg:w="1"/><text x="41.0928%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.8428%" y="213" width="0.0810%" height="15" fill="rgb(250,195,8)" fg:x="504" fg:w="1"/><text x="41.0928%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.2480%" y="197" width="0.0810%" height="15" fill="rgb(220,134,5)" fg:x="509" fg:w="1"/><text x="41.4980%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.2480%" y="181" width="0.0810%" height="15" fill="rgb(246,106,34)" fg:x="509" fg:w="1"/><text x="41.4980%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="41.2480%" y="165" width="0.0810%" height="15" fill="rgb(205,1,4)" fg:x="509" fg:w="1"/><text x="41.4980%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="40.9238%" y="213" width="0.4862%" height="15" fill="rgb(224,151,29)" fg:x="505" fg:w="6"/><text x="41.1738%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="41.3290%" y="197" width="0.0810%" height="15" fill="rgb(251,196,0)" fg:x="510" fg:w="1"/><text x="41.5790%" y="207.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (148 samples, 11.99%)</title><rect x="29.4976%" y="293" width="11.9935%" height="15" fill="rgb(212,127,0)" fg:x="364" fg:w="148"/><text x="29.7476%" y="303.50">indefinite::helper..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="40.9238%" y="277" width="0.5673%" height="15" fill="rgb(236,71,53)" fg:x="505" fg:w="7"/><text x="41.1738%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="40.9238%" y="261" width="0.5673%" height="15" fill="rgb(227,99,0)" fg:x="505" fg:w="7"/><text x="41.1738%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="40.9238%" y="245" width="0.5673%" height="15" fill="rgb(239,89,21)" fg:x="505" fg:w="7"/><text x="41.1738%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="40.9238%" y="229" width="0.5673%" height="15" fill="rgb(243,122,19)" fg:x="505" fg:w="7"/><text x="41.1738%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="41.4100%" y="213" width="0.0810%" height="15" fill="rgb(229,192,45)" fg:x="511" fg:w="1"/><text x="41.6600%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.4100%" y="197" width="0.0810%" height="15" fill="rgb(235,165,35)" fg:x="511" fg:w="1"/><text x="41.6600%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="41.4911%" y="197" width="0.0810%" height="15" fill="rgb(253,202,0)" fg:x="512" fg:w="1"/><text x="41.7411%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.4911%" y="229" width="0.1621%" height="15" fill="rgb(235,51,20)" fg:x="512" fg:w="2"/><text x="41.7411%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="41.4911%" y="213" width="0.1621%" height="15" fill="rgb(218,95,46)" fg:x="512" fg:w="2"/><text x="41.7411%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.5721%" y="197" width="0.0810%" height="15" fill="rgb(212,81,10)" fg:x="513" fg:w="1"/><text x="41.8221%" y="207.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="41.6532%" y="229" width="0.2431%" height="15" fill="rgb(240,59,0)" fg:x="514" fg:w="3"/><text x="41.9032%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (3 samples, 0.24%)</title><rect x="41.8963%" y="229" width="0.2431%" height="15" fill="rgb(212,191,42)" fg:x="517" fg:w="3"/><text x="42.1463%" y="239.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="41.8963%" y="213" width="0.2431%" height="15" fill="rgb(233,140,3)" fg:x="517" fg:w="3"/><text x="42.1463%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (19 samples, 1.54%)</title><rect x="42.3015%" y="213" width="1.5397%" height="15" fill="rgb(215,69,23)" fg:x="522" fg:w="19"/><text x="42.5515%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (19 samples, 1.54%)</title><rect x="42.3015%" y="197" width="1.5397%" height="15" fill="rgb(240,202,20)" fg:x="522" fg:w="19"/><text x="42.5515%" y="207.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="43.5981%" y="181" width="0.2431%" height="15" fill="rgb(209,146,50)" fg:x="538" fg:w="3"/><text x="43.8481%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="43.8412%" y="213" width="0.1621%" height="15" fill="rgb(253,102,54)" fg:x="541" fg:w="2"/><text x="44.0912%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="43.8412%" y="197" width="0.1621%" height="15" fill="rgb(250,173,47)" fg:x="541" fg:w="2"/><text x="44.0912%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="44.2464%" y="181" width="0.0810%" height="15" fill="rgb(232,142,7)" fg:x="546" fg:w="1"/><text x="44.4964%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="44.2464%" y="165" width="0.0810%" height="15" fill="rgb(230,157,47)" fg:x="546" fg:w="1"/><text x="44.4964%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="44.2464%" y="149" width="0.0810%" height="15" fill="rgb(214,177,35)" fg:x="546" fg:w="1"/><text x="44.4964%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="44.2464%" y="133" width="0.0810%" height="15" fill="rgb(234,119,46)" fg:x="546" fg:w="1"/><text x="44.4964%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.57%)</title><rect x="44.3274%" y="181" width="0.5673%" height="15" fill="rgb(241,180,50)" fg:x="547" fg:w="7"/><text x="44.5774%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.49%)</title><rect x="44.4084%" y="165" width="0.4862%" height="15" fill="rgb(221,54,25)" fg:x="548" fg:w="6"/><text x="44.6584%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.49%)</title><rect x="44.4084%" y="149" width="0.4862%" height="15" fill="rgb(209,157,44)" fg:x="548" fg:w="6"/><text x="44.6584%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="44.4084%" y="133" width="0.4862%" height="15" fill="rgb(246,115,41)" fg:x="548" fg:w="6"/><text x="44.6584%" y="143.50"></text></g><g><title>realloc (6 samples, 0.49%)</title><rect x="44.4084%" y="117" width="0.4862%" height="15" fill="rgb(229,86,1)" fg:x="548" fg:w="6"/><text x="44.6584%" y="127.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="44.8947%" y="181" width="0.0810%" height="15" fill="rgb(240,108,53)" fg:x="554" fg:w="1"/><text x="45.1447%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="44.8947%" y="165" width="0.0810%" height="15" fill="rgb(227,134,2)" fg:x="554" fg:w="1"/><text x="45.1447%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="44.8947%" y="149" width="0.0810%" height="15" fill="rgb(213,129,25)" fg:x="554" fg:w="1"/><text x="45.1447%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (13 samples, 1.05%)</title><rect x="44.0032%" y="213" width="1.0535%" height="15" fill="rgb(226,35,21)" fg:x="543" fg:w="13"/><text x="44.2532%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (12 samples, 0.97%)</title><rect x="44.0843%" y="197" width="0.9724%" height="15" fill="rgb(208,129,26)" fg:x="544" fg:w="12"/><text x="44.3343%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="44.9757%" y="181" width="0.0810%" height="15" fill="rgb(224,83,6)" fg:x="555" fg:w="1"/><text x="45.2257%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="45.0567%" y="213" width="0.0810%" height="15" fill="rgb(227,52,39)" fg:x="556" fg:w="1"/><text x="45.3067%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="45.0567%" y="197" width="0.0810%" height="15" fill="rgb(241,30,17)" fg:x="556" fg:w="1"/><text x="45.3067%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="45.0567%" y="181" width="0.0810%" height="15" fill="rgb(246,186,42)" fg:x="556" fg:w="1"/><text x="45.3067%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="45.2188%" y="117" width="0.0810%" height="15" fill="rgb(221,169,15)" fg:x="558" fg:w="1"/><text x="45.4688%" y="127.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="45.7050%" y="101" width="0.1621%" height="15" fill="rgb(235,108,21)" fg:x="564" fg:w="2"/><text x="45.9550%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.8671%" y="101" width="0.0810%" height="15" fill="rgb(219,148,30)" fg:x="566" fg:w="1"/><text x="46.1171%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="45.9481%" y="101" width="0.0810%" height="15" fill="rgb(220,109,5)" fg:x="567" fg:w="1"/><text x="46.1981%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (5 samples, 0.41%)</title><rect x="46.0292%" y="101" width="0.4052%" height="15" fill="rgb(213,203,48)" fg:x="568" fg:w="5"/><text x="46.2792%" y="111.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="46.7585%" y="37" width="0.2431%" height="15" fill="rgb(244,71,33)" fg:x="577" fg:w="3"/><text x="47.0085%" y="47.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="47.0016%" y="37" width="0.0810%" height="15" fill="rgb(209,23,2)" fg:x="580" fg:w="1"/><text x="47.2516%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="46.7585%" y="69" width="0.4052%" height="15" fill="rgb(219,97,7)" fg:x="577" fg:w="5"/><text x="47.0085%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="46.7585%" y="53" width="0.4052%" height="15" fill="rgb(216,161,23)" fg:x="577" fg:w="5"/><text x="47.0085%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.0827%" y="37" width="0.0810%" height="15" fill="rgb(207,45,42)" fg:x="581" fg:w="1"/><text x="47.3327%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (11 samples, 0.89%)</title><rect x="46.4344%" y="101" width="0.8914%" height="15" fill="rgb(241,61,4)" fg:x="573" fg:w="11"/><text x="46.6844%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.73%)</title><rect x="46.5964%" y="85" width="0.7293%" height="15" fill="rgb(236,170,1)" fg:x="575" fg:w="9"/><text x="46.8464%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="47.1637%" y="69" width="0.1621%" height="15" fill="rgb(239,72,5)" fg:x="582" fg:w="2"/><text x="47.4137%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (53 samples, 4.29%)</title><rect x="47.3258%" y="101" width="4.2950%" height="15" fill="rgb(214,13,50)" fg:x="584" fg:w="53"/><text x="47.5758%" y="111.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (53 samples, 4.29%)</title><rect x="47.3258%" y="85" width="4.2950%" height="15" fill="rgb(224,88,9)" fg:x="584" fg:w="53"/><text x="47.5758%" y="95.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (53 samples, 4.29%)</title><rect x="47.3258%" y="69" width="4.2950%" height="15" fill="rgb(238,192,34)" fg:x="584" fg:w="53"/><text x="47.5758%" y="79.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="51.6207%" y="101" width="0.0810%" height="15" fill="rgb(217,203,50)" fg:x="637" fg:w="1"/><text x="51.8707%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.6207%" y="85" width="0.0810%" height="15" fill="rgb(241,123,32)" fg:x="637" fg:w="1"/><text x="51.8707%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 7.21%)</title><rect x="45.1378%" y="197" width="7.2123%" height="15" fill="rgb(248,151,39)" fg:x="557" fg:w="89"/><text x="45.3878%" y="207.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (89 samples, 7.21%)</title><rect x="45.1378%" y="181" width="7.2123%" height="15" fill="rgb(208,89,6)" fg:x="557" fg:w="89"/><text x="45.3878%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (88 samples, 7.13%)</title><rect x="45.2188%" y="165" width="7.1313%" height="15" fill="rgb(254,43,26)" fg:x="558" fg:w="88"/><text x="45.4688%" y="175.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (88 samples, 7.13%)</title><rect x="45.2188%" y="149" width="7.1313%" height="15" fill="rgb(216,158,13)" fg:x="558" fg:w="88"/><text x="45.4688%" y="159.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (88 samples, 7.13%)</title><rect x="45.2188%" y="133" width="7.1313%" height="15" fill="rgb(212,47,37)" fg:x="558" fg:w="88"/><text x="45.4688%" y="143.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (87 samples, 7.05%)</title><rect x="45.2998%" y="117" width="7.0502%" height="15" fill="rgb(254,16,10)" fg:x="559" fg:w="87"/><text x="45.5498%" y="127.50">regex_aut..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (8 samples, 0.65%)</title><rect x="51.7018%" y="101" width="0.6483%" height="15" fill="rgb(223,228,16)" fg:x="638" fg:w="8"/><text x="51.9518%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="52.0259%" y="85" width="0.3241%" height="15" fill="rgb(249,108,50)" fg:x="642" fg:w="4"/><text x="52.2759%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="52.1070%" y="69" width="0.2431%" height="15" fill="rgb(208,220,5)" fg:x="643" fg:w="3"/><text x="52.3570%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="52.3501%" y="181" width="0.1621%" height="15" fill="rgb(217,89,48)" fg:x="646" fg:w="2"/><text x="52.6001%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.5122%" y="181" width="0.1621%" height="15" fill="rgb(212,113,41)" fg:x="648" fg:w="2"/><text x="52.7622%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.5932%" y="165" width="0.0810%" height="15" fill="rgb(231,127,5)" fg:x="649" fg:w="1"/><text x="52.8432%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="52.6742%" y="181" width="0.2431%" height="15" fill="rgb(217,141,17)" fg:x="650" fg:w="3"/><text x="52.9242%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="52.8363%" y="165" width="0.0810%" height="15" fill="rgb(245,125,54)" fg:x="652" fg:w="1"/><text x="53.0863%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.8363%" y="149" width="0.0810%" height="15" fill="rgb(248,125,3)" fg:x="652" fg:w="1"/><text x="53.0863%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.8363%" y="133" width="0.0810%" height="15" fill="rgb(236,119,51)" fg:x="652" fg:w="1"/><text x="53.0863%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.73%)</title><rect x="52.9173%" y="181" width="0.7293%" height="15" fill="rgb(239,99,8)" fg:x="653" fg:w="9"/><text x="53.1673%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (106 samples, 8.59%)</title><rect x="45.1378%" y="213" width="8.5900%" height="15" fill="rgb(224,228,4)" fg:x="557" fg:w="106"/><text x="45.3878%" y="223.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (17 samples, 1.38%)</title><rect x="52.3501%" y="197" width="1.3776%" height="15" fill="rgb(220,131,45)" fg:x="646" fg:w="17"/><text x="52.6001%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="53.6467%" y="181" width="0.0810%" height="15" fill="rgb(215,62,5)" fg:x="662" fg:w="1"/><text x="53.8967%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (144 samples, 11.67%)</title><rect x="42.1394%" y="229" width="11.6694%" height="15" fill="rgb(253,12,24)" fg:x="520" fg:w="144"/><text x="42.3894%" y="239.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="53.7277%" y="213" width="0.0810%" height="15" fill="rgb(248,120,50)" fg:x="663" fg:w="1"/><text x="53.9777%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="53.7277%" y="197" width="0.0810%" height="15" fill="rgb(245,194,10)" fg:x="663" fg:w="1"/><text x="53.9777%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.7277%" y="181" width="0.0810%" height="15" fill="rgb(241,149,38)" fg:x="663" fg:w="1"/><text x="53.9777%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="53.8088%" y="197" width="0.0810%" height="15" fill="rgb(219,215,7)" fg:x="664" fg:w="1"/><text x="54.0588%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="53.8898%" y="197" width="0.0810%" height="15" fill="rgb(208,120,31)" fg:x="665" fg:w="1"/><text x="54.1398%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="53.8088%" y="229" width="0.2431%" height="15" fill="rgb(244,30,8)" fg:x="664" fg:w="3"/><text x="54.0588%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="53.8088%" y="213" width="0.2431%" height="15" fill="rgb(238,35,44)" fg:x="664" fg:w="3"/><text x="54.0588%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="53.9708%" y="197" width="0.0810%" height="15" fill="rgb(243,218,37)" fg:x="666" fg:w="1"/><text x="54.2208%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="54.0519%" y="181" width="0.3241%" height="15" fill="rgb(218,169,10)" fg:x="667" fg:w="4"/><text x="54.3019%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="54.2950%" y="165" width="0.0810%" height="15" fill="rgb(221,144,10)" fg:x="670" fg:w="1"/><text x="54.5450%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 0.41%)</title><rect x="54.0519%" y="197" width="0.4052%" height="15" fill="rgb(226,41,38)" fg:x="667" fg:w="5"/><text x="54.3019%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="54.3760%" y="181" width="0.0810%" height="15" fill="rgb(228,3,1)" fg:x="671" fg:w="1"/><text x="54.6260%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (161 samples, 13.05%)</title><rect x="41.4911%" y="245" width="13.0470%" height="15" fill="rgb(209,129,12)" fg:x="512" fg:w="161"/><text x="41.7411%" y="255.50">regex_automata::meta..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.49%)</title><rect x="54.0519%" y="229" width="0.4862%" height="15" fill="rgb(213,136,33)" fg:x="667" fg:w="6"/><text x="54.3019%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.49%)</title><rect x="54.0519%" y="213" width="0.4862%" height="15" fill="rgb(209,181,29)" fg:x="667" fg:w="6"/><text x="54.3019%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="54.4571%" y="197" width="0.0810%" height="15" fill="rgb(234,173,18)" fg:x="672" fg:w="1"/><text x="54.7071%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="54.5381%" y="245" width="0.0810%" height="15" fill="rgb(227,73,47)" fg:x="673" fg:w="1"/><text x="54.7881%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (163 samples, 13.21%)</title><rect x="41.4911%" y="277" width="13.2091%" height="15" fill="rgb(234,9,34)" fg:x="512" fg:w="163"/><text x="41.7411%" y="287.50">&lt;regex::regex::strin..</text></g><g><title>regex::builders::string::RegexBuilder::build (163 samples, 13.21%)</title><rect x="41.4911%" y="261" width="13.2091%" height="15" fill="rgb(235,172,15)" fg:x="512" fg:w="163"/><text x="41.7411%" y="271.50">regex::builders::str..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="54.6191%" y="245" width="0.0810%" height="15" fill="rgb(245,61,2)" fg:x="674" fg:w="1"/><text x="54.8691%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.6191%" y="229" width="0.0810%" height="15" fill="rgb(238,39,47)" fg:x="674" fg:w="1"/><text x="54.8691%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.7002%" y="261" width="0.0810%" height="15" fill="rgb(234,37,24)" fg:x="675" fg:w="1"/><text x="54.9502%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="54.7812%" y="229" width="0.0810%" height="15" fill="rgb(248,223,24)" fg:x="676" fg:w="1"/><text x="55.0312%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (1 samples, 0.08%)</title><rect x="54.7812%" y="213" width="0.0810%" height="15" fill="rgb(223,12,15)" fg:x="676" fg:w="1"/><text x="55.0312%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.7812%" y="197" width="0.0810%" height="15" fill="rgb(249,6,3)" fg:x="676" fg:w="1"/><text x="55.0312%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="54.7812%" y="245" width="0.1621%" height="15" fill="rgb(237,105,33)" fg:x="676" fg:w="2"/><text x="55.0312%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="54.8622%" y="229" width="0.0810%" height="15" fill="rgb(252,208,35)" fg:x="677" fg:w="1"/><text x="55.1122%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.8622%" y="213" width="0.0810%" height="15" fill="rgb(215,181,35)" fg:x="677" fg:w="1"/><text x="55.1122%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.8622%" y="197" width="0.0810%" height="15" fill="rgb(246,212,3)" fg:x="677" fg:w="1"/><text x="55.1122%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.8622%" y="181" width="0.0810%" height="15" fill="rgb(247,156,24)" fg:x="677" fg:w="1"/><text x="55.1122%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="54.7002%" y="277" width="0.4052%" height="15" fill="rgb(248,9,31)" fg:x="675" fg:w="5"/><text x="54.9502%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="54.7812%" y="261" width="0.3241%" height="15" fill="rgb(234,26,45)" fg:x="676" fg:w="4"/><text x="55.0312%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="54.9433%" y="245" width="0.1621%" height="15" fill="rgb(249,11,32)" fg:x="678" fg:w="2"/><text x="55.1933%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="54.9433%" y="229" width="0.1621%" height="15" fill="rgb(249,162,33)" fg:x="678" fg:w="2"/><text x="55.1933%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="55.1053%" y="261" width="0.0810%" height="15" fill="rgb(232,4,32)" fg:x="680" fg:w="1"/><text x="55.3553%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="55.1053%" y="245" width="0.0810%" height="15" fill="rgb(212,5,45)" fg:x="680" fg:w="1"/><text x="55.3553%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="55.1053%" y="229" width="0.0810%" height="15" fill="rgb(227,95,13)" fg:x="680" fg:w="1"/><text x="55.3553%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="55.1053%" y="213" width="0.0810%" height="15" fill="rgb(223,205,10)" fg:x="680" fg:w="1"/><text x="55.3553%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="55.1053%" y="197" width="0.0810%" height="15" fill="rgb(222,178,8)" fg:x="680" fg:w="1"/><text x="55.3553%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.49%)</title><rect x="55.7536%" y="181" width="0.4862%" height="15" fill="rgb(216,13,22)" fg:x="688" fg:w="6"/><text x="56.0036%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.49%)</title><rect x="55.7536%" y="165" width="0.4862%" height="15" fill="rgb(240,167,12)" fg:x="688" fg:w="6"/><text x="56.0036%" y="175.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="55.9157%" y="149" width="0.3241%" height="15" fill="rgb(235,68,35)" fg:x="690" fg:w="4"/><text x="56.1657%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="56.2399%" y="181" width="0.0810%" height="15" fill="rgb(253,40,27)" fg:x="694" fg:w="1"/><text x="56.4899%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (185 samples, 14.99%)</title><rect x="41.4911%" y="293" width="14.9919%" height="15" fill="rgb(214,19,28)" fg:x="512" fg:w="185"/><text x="41.7411%" y="303.50">indefinite::rules::numb..</text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.38%)</title><rect x="55.1053%" y="277" width="1.3776%" height="15" fill="rgb(210,167,45)" fg:x="680" fg:w="17"/><text x="55.3553%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.30%)</title><rect x="55.1864%" y="261" width="1.2966%" height="15" fill="rgb(232,97,40)" fg:x="681" fg:w="16"/><text x="55.4364%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (15 samples, 1.22%)</title><rect x="55.2674%" y="245" width="1.2156%" height="15" fill="rgb(250,35,23)" fg:x="682" fg:w="15"/><text x="55.5174%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (15 samples, 1.22%)</title><rect x="55.2674%" y="229" width="1.2156%" height="15" fill="rgb(248,47,53)" fg:x="682" fg:w="15"/><text x="55.5174%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.22%)</title><rect x="55.2674%" y="213" width="1.2156%" height="15" fill="rgb(226,58,50)" fg:x="682" fg:w="15"/><text x="55.5174%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.22%)</title><rect x="55.2674%" y="197" width="1.2156%" height="15" fill="rgb(217,105,26)" fg:x="682" fg:w="15"/><text x="55.5174%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="56.3209%" y="181" width="0.1621%" height="15" fill="rgb(208,64,1)" fg:x="695" fg:w="2"/><text x="56.5709%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.7261%" y="213" width="0.0810%" height="15" fill="rgb(214,80,1)" fg:x="700" fg:w="1"/><text x="56.9761%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.7261%" y="197" width="0.0810%" height="15" fill="rgb(206,175,26)" fg:x="700" fg:w="1"/><text x="56.9761%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.7261%" y="181" width="0.0810%" height="15" fill="rgb(235,156,37)" fg:x="700" fg:w="1"/><text x="56.9761%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="56.8071%" y="213" width="0.0810%" height="15" fill="rgb(213,100,9)" fg:x="701" fg:w="1"/><text x="57.0571%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.8071%" y="197" width="0.0810%" height="15" fill="rgb(241,15,13)" fg:x="701" fg:w="1"/><text x="57.0571%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.8071%" y="181" width="0.0810%" height="15" fill="rgb(205,97,43)" fg:x="701" fg:w="1"/><text x="57.0571%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.8071%" y="165" width="0.0810%" height="15" fill="rgb(216,106,32)" fg:x="701" fg:w="1"/><text x="57.0571%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.8071%" y="149" width="0.0810%" height="15" fill="rgb(226,200,8)" fg:x="701" fg:w="1"/><text x="57.0571%" y="159.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.8071%" y="133" width="0.0810%" height="15" fill="rgb(244,54,29)" fg:x="701" fg:w="1"/><text x="57.0571%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.9692%" y="197" width="0.0810%" height="15" fill="rgb(252,169,12)" fg:x="703" fg:w="1"/><text x="57.2192%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="57.0502%" y="197" width="0.4052%" height="15" fill="rgb(231,199,11)" fg:x="704" fg:w="5"/><text x="57.3002%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="57.1313%" y="181" width="0.3241%" height="15" fill="rgb(233,191,18)" fg:x="705" fg:w="4"/><text x="57.3813%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.65%)</title><rect x="56.8882%" y="213" width="0.6483%" height="15" fill="rgb(215,83,47)" fg:x="702" fg:w="8"/><text x="57.1382%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.08%)</title><rect x="57.4554%" y="197" width="0.0810%" height="15" fill="rgb(251,67,19)" fg:x="709" fg:w="1"/><text x="57.7054%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.08%)</title><rect x="57.4554%" y="181" width="0.0810%" height="15" fill="rgb(240,7,20)" fg:x="709" fg:w="1"/><text x="57.7054%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="57.4554%" y="165" width="0.0810%" height="15" fill="rgb(210,150,26)" fg:x="709" fg:w="1"/><text x="57.7054%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.5365%" y="181" width="0.0810%" height="15" fill="rgb(228,75,42)" fg:x="710" fg:w="1"/><text x="57.7865%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="57.6985%" y="165" width="0.1621%" height="15" fill="rgb(237,134,48)" fg:x="712" fg:w="2"/><text x="57.9485%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="57.6985%" y="149" width="0.1621%" height="15" fill="rgb(205,80,50)" fg:x="712" fg:w="2"/><text x="57.9485%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.7796%" y="133" width="0.0810%" height="15" fill="rgb(217,74,48)" fg:x="713" fg:w="1"/><text x="58.0296%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.7796%" y="117" width="0.0810%" height="15" fill="rgb(205,82,50)" fg:x="713" fg:w="1"/><text x="58.0296%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="57.8606%" y="165" width="0.0810%" height="15" fill="rgb(228,1,33)" fg:x="714" fg:w="1"/><text x="58.1106%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="57.8606%" y="149" width="0.0810%" height="15" fill="rgb(214,50,23)" fg:x="714" fg:w="1"/><text x="58.1106%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.49%)</title><rect x="57.5365%" y="213" width="0.4862%" height="15" fill="rgb(210,62,9)" fg:x="710" fg:w="6"/><text x="57.7865%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.49%)</title><rect x="57.5365%" y="197" width="0.4862%" height="15" fill="rgb(210,104,37)" fg:x="710" fg:w="6"/><text x="57.7865%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="57.6175%" y="181" width="0.4052%" height="15" fill="rgb(232,104,43)" fg:x="711" fg:w="5"/><text x="57.8675%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="57.9417%" y="165" width="0.0810%" height="15" fill="rgb(244,52,6)" fg:x="715" fg:w="1"/><text x="58.1917%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.9417%" y="149" width="0.0810%" height="15" fill="rgb(211,174,52)" fg:x="715" fg:w="1"/><text x="58.1917%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.9417%" y="133" width="0.0810%" height="15" fill="rgb(229,48,4)" fg:x="715" fg:w="1"/><text x="58.1917%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.9417%" y="117" width="0.0810%" height="15" fill="rgb(205,155,16)" fg:x="715" fg:w="1"/><text x="58.1917%" y="127.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (20 samples, 1.62%)</title><rect x="56.4830%" y="261" width="1.6207%" height="15" fill="rgb(211,141,53)" fg:x="697" fg:w="20"/><text x="56.7330%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (20 samples, 1.62%)</title><rect x="56.4830%" y="245" width="1.6207%" height="15" fill="rgb(240,148,11)" fg:x="697" fg:w="20"/><text x="56.7330%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (20 samples, 1.62%)</title><rect x="56.4830%" y="229" width="1.6207%" height="15" fill="rgb(214,45,23)" fg:x="697" fg:w="20"/><text x="56.7330%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="58.0227%" y="213" width="0.0810%" height="15" fill="rgb(248,74,26)" fg:x="716" fg:w="1"/><text x="58.2727%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="58.0227%" y="197" width="0.0810%" height="15" fill="rgb(218,121,16)" fg:x="716" fg:w="1"/><text x="58.2727%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="58.0227%" y="181" width="0.0810%" height="15" fill="rgb(218,10,47)" fg:x="716" fg:w="1"/><text x="58.2727%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="58.1037%" y="261" width="0.0810%" height="15" fill="rgb(227,99,14)" fg:x="717" fg:w="1"/><text x="58.3537%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="58.1037%" y="245" width="0.0810%" height="15" fill="rgb(229,83,46)" fg:x="717" fg:w="1"/><text x="58.3537%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="58.1037%" y="229" width="0.0810%" height="15" fill="rgb(228,25,1)" fg:x="717" fg:w="1"/><text x="58.3537%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="58.1037%" y="213" width="0.0810%" height="15" fill="rgb(252,190,15)" fg:x="717" fg:w="1"/><text x="58.3537%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.1037%" y="197" width="0.0810%" height="15" fill="rgb(213,103,51)" fg:x="717" fg:w="1"/><text x="58.3537%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.1037%" y="181" width="0.0810%" height="15" fill="rgb(220,38,44)" fg:x="717" fg:w="1"/><text x="58.3537%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1037%" y="165" width="0.0810%" height="15" fill="rgb(210,45,26)" fg:x="717" fg:w="1"/><text x="58.3537%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.1848%" y="229" width="0.0810%" height="15" fill="rgb(205,95,48)" fg:x="718" fg:w="1"/><text x="58.4348%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="58.2658%" y="229" width="0.0810%" height="15" fill="rgb(225,179,37)" fg:x="719" fg:w="1"/><text x="58.5158%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="58.1848%" y="261" width="0.3241%" height="15" fill="rgb(230,209,3)" fg:x="718" fg:w="4"/><text x="58.4348%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="58.1848%" y="245" width="0.3241%" height="15" fill="rgb(248,12,46)" fg:x="718" fg:w="4"/><text x="58.4348%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="58.3468%" y="229" width="0.1621%" height="15" fill="rgb(234,18,0)" fg:x="720" fg:w="2"/><text x="58.5968%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="58.3468%" y="213" width="0.1621%" height="15" fill="rgb(238,197,14)" fg:x="720" fg:w="2"/><text x="58.5968%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.4279%" y="197" width="0.0810%" height="15" fill="rgb(251,162,48)" fg:x="721" fg:w="1"/><text x="58.6779%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="58.5089%" y="197" width="0.0810%" height="15" fill="rgb(237,73,42)" fg:x="722" fg:w="1"/><text x="58.7589%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="58.5089%" y="181" width="0.0810%" height="15" fill="rgb(211,108,8)" fg:x="722" fg:w="1"/><text x="58.7589%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="58.5900%" y="197" width="0.2431%" height="15" fill="rgb(213,45,22)" fg:x="723" fg:w="3"/><text x="58.8400%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.41%)</title><rect x="58.5089%" y="213" width="0.4052%" height="15" fill="rgb(252,154,5)" fg:x="722" fg:w="5"/><text x="58.7589%" y="223.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="58.8331%" y="197" width="0.0810%" height="15" fill="rgb(221,79,52)" fg:x="726" fg:w="1"/><text x="59.0831%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (31 samples, 2.51%)</title><rect x="56.4830%" y="277" width="2.5122%" height="15" fill="rgb(229,220,36)" fg:x="697" fg:w="31"/><text x="56.7330%" y="287.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="58.5089%" y="261" width="0.4862%" height="15" fill="rgb(211,17,16)" fg:x="722" fg:w="6"/><text x="58.7589%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="58.5089%" y="245" width="0.4862%" height="15" fill="rgb(222,55,31)" fg:x="722" fg:w="6"/><text x="58.7589%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="58.5089%" y="229" width="0.4862%" height="15" fill="rgb(221,221,31)" fg:x="722" fg:w="6"/><text x="58.7589%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="58.9141%" y="213" width="0.0810%" height="15" fill="rgb(227,168,26)" fg:x="727" fg:w="1"/><text x="59.1641%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="58.9141%" y="197" width="0.0810%" height="15" fill="rgb(224,139,9)" fg:x="727" fg:w="1"/><text x="59.1641%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.9141%" y="181" width="0.0810%" height="15" fill="rgb(254,172,0)" fg:x="727" fg:w="1"/><text x="59.1641%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (398 samples, 32.25%)</title><rect x="26.8233%" y="373" width="32.2528%" height="15" fill="rgb(235,203,1)" fg:x="331" fg:w="398"/><text x="27.0733%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking:..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (366 samples, 29.66%)</title><rect x="29.4165%" y="357" width="29.6596%" height="15" fill="rgb(216,205,24)" fg:x="363" fg:w="366"/><text x="29.6665%" y="367.50">plugins_core::looking::model::Unqualified::quali..</text></g><g><title>indefinite::indefinite (366 samples, 29.66%)</title><rect x="29.4165%" y="341" width="29.6596%" height="15" fill="rgb(233,24,6)" fg:x="363" fg:w="366"/><text x="29.6665%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (366 samples, 29.66%)</title><rect x="29.4165%" y="325" width="29.6596%" height="15" fill="rgb(244,110,9)" fg:x="363" fg:w="366"/><text x="29.6665%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (366 samples, 29.66%)</title><rect x="29.4165%" y="309" width="29.6596%" height="15" fill="rgb(239,222,42)" fg:x="363" fg:w="366"/><text x="29.6665%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (32 samples, 2.59%)</title><rect x="56.4830%" y="293" width="2.5932%" height="15" fill="rgb(218,145,13)" fg:x="697" fg:w="32"/><text x="56.7330%" y="303.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="58.9951%" y="277" width="0.0810%" height="15" fill="rgb(207,69,11)" fg:x="728" fg:w="1"/><text x="59.2451%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.0762%" y="325" width="0.0810%" height="15" fill="rgb(220,223,22)" fg:x="729" fg:w="1"/><text x="59.3262%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.0762%" y="309" width="0.0810%" height="15" fill="rgb(245,102,5)" fg:x="729" fg:w="1"/><text x="59.3262%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="59.0762%" y="373" width="0.1621%" height="15" fill="rgb(211,148,2)" fg:x="729" fg:w="2"/><text x="59.3262%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.0762%" y="357" width="0.1621%" height="15" fill="rgb(241,13,44)" fg:x="729" fg:w="2"/><text x="59.3262%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.0762%" y="341" width="0.1621%" height="15" fill="rgb(219,137,21)" fg:x="729" fg:w="2"/><text x="59.3262%" y="351.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="59.1572%" y="325" width="0.0810%" height="15" fill="rgb(242,206,5)" fg:x="730" fg:w="1"/><text x="59.4072%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="59.2382%" y="373" width="0.0810%" height="15" fill="rgb(217,114,22)" fg:x="731" fg:w="1"/><text x="59.4882%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="59.3193%" y="341" width="0.0810%" height="15" fill="rgb(253,206,42)" fg:x="732" fg:w="1"/><text x="59.5693%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="59.3193%" y="325" width="0.0810%" height="15" fill="rgb(236,102,18)" fg:x="732" fg:w="1"/><text x="59.5693%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="59.4003%" y="341" width="0.0810%" height="15" fill="rgb(208,59,49)" fg:x="733" fg:w="1"/><text x="59.6503%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="59.4814%" y="341" width="0.0810%" height="15" fill="rgb(215,194,28)" fg:x="734" fg:w="1"/><text x="59.7314%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.4814%" y="325" width="0.0810%" height="15" fill="rgb(243,207,11)" fg:x="734" fg:w="1"/><text x="59.7314%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.4814%" y="309" width="0.0810%" height="15" fill="rgb(254,179,35)" fg:x="734" fg:w="1"/><text x="59.7314%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="59.5624%" y="245" width="0.0810%" height="15" fill="rgb(235,97,3)" fg:x="735" fg:w="1"/><text x="59.8124%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="59.5624%" y="325" width="0.1621%" height="15" fill="rgb(215,155,33)" fg:x="735" fg:w="2"/><text x="59.8124%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="59.5624%" y="309" width="0.1621%" height="15" fill="rgb(223,128,12)" fg:x="735" fg:w="2"/><text x="59.8124%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.5624%" y="293" width="0.1621%" height="15" fill="rgb(208,157,18)" fg:x="735" fg:w="2"/><text x="59.8124%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="59.5624%" y="277" width="0.1621%" height="15" fill="rgb(249,70,54)" fg:x="735" fg:w="2"/><text x="59.8124%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="59.5624%" y="261" width="0.1621%" height="15" fill="rgb(244,118,24)" fg:x="735" fg:w="2"/><text x="59.8124%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="59.6434%" y="245" width="0.0810%" height="15" fill="rgb(211,54,0)" fg:x="736" fg:w="1"/><text x="59.8934%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="59.6434%" y="229" width="0.0810%" height="15" fill="rgb(245,137,45)" fg:x="736" fg:w="1"/><text x="59.8934%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (6 samples, 0.49%)</title><rect x="59.3193%" y="357" width="0.4862%" height="15" fill="rgb(232,154,31)" fg:x="732" fg:w="6"/><text x="59.5693%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="59.5624%" y="341" width="0.2431%" height="15" fill="rgb(253,6,39)" fg:x="735" fg:w="3"/><text x="59.8124%" y="351.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="59.7245%" y="325" width="0.0810%" height="15" fill="rgb(234,183,24)" fg:x="737" fg:w="1"/><text x="59.9745%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="59.7245%" y="309" width="0.0810%" height="15" fill="rgb(252,84,40)" fg:x="737" fg:w="1"/><text x="59.9745%" y="319.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="59.8055%" y="309" width="0.0810%" height="15" fill="rgb(224,65,2)" fg:x="738" fg:w="1"/><text x="60.0555%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="59.8865%" y="261" width="0.0810%" height="15" fill="rgb(229,38,24)" fg:x="739" fg:w="1"/><text x="60.1365%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.8865%" y="245" width="0.0810%" height="15" fill="rgb(218,131,50)" fg:x="739" fg:w="1"/><text x="60.1365%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.8865%" y="229" width="0.0810%" height="15" fill="rgb(233,106,18)" fg:x="739" fg:w="1"/><text x="60.1365%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="59.8865%" y="213" width="0.0810%" height="15" fill="rgb(220,216,11)" fg:x="739" fg:w="1"/><text x="60.1365%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="59.8865%" y="197" width="0.0810%" height="15" fill="rgb(251,100,45)" fg:x="739" fg:w="1"/><text x="60.1365%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="59.8865%" y="181" width="0.0810%" height="15" fill="rgb(235,143,32)" fg:x="739" fg:w="1"/><text x="60.1365%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.8865%" y="165" width="0.0810%" height="15" fill="rgb(248,124,34)" fg:x="739" fg:w="1"/><text x="60.1365%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="59.8865%" y="149" width="0.0810%" height="15" fill="rgb(225,221,4)" fg:x="739" fg:w="1"/><text x="60.1365%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="59.8865%" y="133" width="0.0810%" height="15" fill="rgb(242,27,43)" fg:x="739" fg:w="1"/><text x="60.1365%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="59.8865%" y="117" width="0.0810%" height="15" fill="rgb(227,54,8)" fg:x="739" fg:w="1"/><text x="60.1365%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="59.8865%" y="101" width="0.0810%" height="15" fill="rgb(253,139,49)" fg:x="739" fg:w="1"/><text x="60.1365%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="59.8865%" y="85" width="0.0810%" height="15" fill="rgb(231,26,43)" fg:x="739" fg:w="1"/><text x="60.1365%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8865%" y="69" width="0.0810%" height="15" fill="rgb(207,121,39)" fg:x="739" fg:w="1"/><text x="60.1365%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="59.9676%" y="261" width="0.0810%" height="15" fill="rgb(223,101,35)" fg:x="740" fg:w="1"/><text x="60.2176%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="59.8865%" y="293" width="0.2431%" height="15" fill="rgb(232,87,23)" fg:x="739" fg:w="3"/><text x="60.1365%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="59.8865%" y="277" width="0.2431%" height="15" fill="rgb(225,180,29)" fg:x="739" fg:w="3"/><text x="60.1365%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.0486%" y="261" width="0.0810%" height="15" fill="rgb(225,25,17)" fg:x="741" fg:w="1"/><text x="60.2986%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.1297%" y="293" width="0.0810%" height="15" fill="rgb(223,8,52)" fg:x="742" fg:w="1"/><text x="60.3797%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2107%" y="197" width="0.0810%" height="15" fill="rgb(246,42,21)" fg:x="743" fg:w="1"/><text x="60.4607%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2107%" y="181" width="0.0810%" height="15" fill="rgb(205,64,43)" fg:x="743" fg:w="1"/><text x="60.4607%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2107%" y="165" width="0.0810%" height="15" fill="rgb(221,160,13)" fg:x="743" fg:w="1"/><text x="60.4607%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2107%" y="149" width="0.0810%" height="15" fill="rgb(239,58,35)" fg:x="743" fg:w="1"/><text x="60.4607%" y="159.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="60.2107%" y="133" width="0.0810%" height="15" fill="rgb(251,26,40)" fg:x="743" fg:w="1"/><text x="60.4607%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2107%" y="117" width="0.0810%" height="15" fill="rgb(247,0,4)" fg:x="743" fg:w="1"/><text x="60.4607%" y="127.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.2107%" y="101" width="0.0810%" height="15" fill="rgb(218,130,10)" fg:x="743" fg:w="1"/><text x="60.4607%" y="111.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="60.2107%" y="85" width="0.0810%" height="15" fill="rgb(239,32,7)" fg:x="743" fg:w="1"/><text x="60.4607%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.2107%" y="69" width="0.0810%" height="15" fill="rgb(210,192,24)" fg:x="743" fg:w="1"/><text x="60.4607%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.2107%" y="53" width="0.0810%" height="15" fill="rgb(226,212,17)" fg:x="743" fg:w="1"/><text x="60.4607%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.2917%" y="197" width="0.0810%" height="15" fill="rgb(219,201,28)" fg:x="744" fg:w="1"/><text x="60.5417%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="60.2917%" y="181" width="0.0810%" height="15" fill="rgb(235,207,41)" fg:x="744" fg:w="1"/><text x="60.5417%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="60.2917%" y="165" width="0.0810%" height="15" fill="rgb(241,95,54)" fg:x="744" fg:w="1"/><text x="60.5417%" y="175.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="60.3728%" y="101" width="0.0810%" height="15" fill="rgb(248,12,23)" fg:x="745" fg:w="1"/><text x="60.6228%" y="111.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="60.2107%" y="293" width="0.3241%" height="15" fill="rgb(228,173,4)" fg:x="743" fg:w="4"/><text x="60.4607%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="60.2107%" y="277" width="0.3241%" height="15" fill="rgb(254,99,5)" fg:x="743" fg:w="4"/><text x="60.4607%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="60.2107%" y="261" width="0.3241%" height="15" fill="rgb(212,184,17)" fg:x="743" fg:w="4"/><text x="60.4607%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="60.2107%" y="245" width="0.3241%" height="15" fill="rgb(252,174,1)" fg:x="743" fg:w="4"/><text x="60.4607%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="60.2107%" y="229" width="0.3241%" height="15" fill="rgb(241,118,51)" fg:x="743" fg:w="4"/><text x="60.4607%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="60.2107%" y="213" width="0.3241%" height="15" fill="rgb(227,94,47)" fg:x="743" fg:w="4"/><text x="60.4607%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.3728%" y="197" width="0.1621%" height="15" fill="rgb(229,104,2)" fg:x="745" fg:w="2"/><text x="60.6228%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.3728%" y="181" width="0.1621%" height="15" fill="rgb(219,28,31)" fg:x="745" fg:w="2"/><text x="60.6228%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="60.3728%" y="165" width="0.1621%" height="15" fill="rgb(233,109,36)" fg:x="745" fg:w="2"/><text x="60.6228%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="60.3728%" y="149" width="0.1621%" height="15" fill="rgb(246,88,11)" fg:x="745" fg:w="2"/><text x="60.6228%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.3728%" y="133" width="0.1621%" height="15" fill="rgb(209,212,17)" fg:x="745" fg:w="2"/><text x="60.6228%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="60.3728%" y="117" width="0.1621%" height="15" fill="rgb(243,59,29)" fg:x="745" fg:w="2"/><text x="60.6228%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="60.4538%" y="101" width="0.0810%" height="15" fill="rgb(244,205,48)" fg:x="746" fg:w="1"/><text x="60.7038%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.4538%" y="85" width="0.0810%" height="15" fill="rgb(227,30,6)" fg:x="746" fg:w="1"/><text x="60.7038%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.5348%" y="229" width="0.0810%" height="15" fill="rgb(220,205,48)" fg:x="747" fg:w="1"/><text x="60.7848%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.5348%" y="213" width="0.0810%" height="15" fill="rgb(250,94,14)" fg:x="747" fg:w="1"/><text x="60.7848%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.5348%" y="197" width="0.0810%" height="15" fill="rgb(216,119,42)" fg:x="747" fg:w="1"/><text x="60.7848%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.5348%" y="181" width="0.0810%" height="15" fill="rgb(232,155,0)" fg:x="747" fg:w="1"/><text x="60.7848%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.5348%" y="165" width="0.0810%" height="15" fill="rgb(212,24,32)" fg:x="747" fg:w="1"/><text x="60.7848%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.5348%" y="149" width="0.0810%" height="15" fill="rgb(216,69,20)" fg:x="747" fg:w="1"/><text x="60.7848%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="60.5348%" y="133" width="0.0810%" height="15" fill="rgb(229,73,31)" fg:x="747" fg:w="1"/><text x="60.7848%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="60.5348%" y="117" width="0.0810%" height="15" fill="rgb(224,219,20)" fg:x="747" fg:w="1"/><text x="60.7848%" y="127.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.81%)</title><rect x="59.8865%" y="309" width="0.8104%" height="15" fill="rgb(215,146,41)" fg:x="739" fg:w="10"/><text x="60.1365%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="60.5348%" y="293" width="0.1621%" height="15" fill="rgb(244,71,31)" fg:x="747" fg:w="2"/><text x="60.7848%" y="303.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="60.5348%" y="277" width="0.1621%" height="15" fill="rgb(224,24,11)" fg:x="747" fg:w="2"/><text x="60.7848%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="60.5348%" y="261" width="0.1621%" height="15" fill="rgb(229,76,15)" fg:x="747" fg:w="2"/><text x="60.7848%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="60.5348%" y="245" width="0.1621%" height="15" fill="rgb(209,93,2)" fg:x="747" fg:w="2"/><text x="60.7848%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.6159%" y="229" width="0.0810%" height="15" fill="rgb(216,200,50)" fg:x="748" fg:w="1"/><text x="60.8659%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.6159%" y="213" width="0.0810%" height="15" fill="rgb(211,67,34)" fg:x="748" fg:w="1"/><text x="60.8659%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.46%)</title><rect x="59.3193%" y="373" width="1.4587%" height="15" fill="rgb(225,87,47)" fg:x="732" fg:w="18"/><text x="59.5693%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.97%)</title><rect x="59.8055%" y="357" width="0.9724%" height="15" fill="rgb(217,185,16)" fg:x="738" fg:w="12"/><text x="60.0555%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.97%)</title><rect x="59.8055%" y="341" width="0.9724%" height="15" fill="rgb(205,0,0)" fg:x="738" fg:w="12"/><text x="60.0555%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.97%)</title><rect x="59.8055%" y="325" width="0.9724%" height="15" fill="rgb(207,116,45)" fg:x="738" fg:w="12"/><text x="60.0555%" y="335.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="60.6969%" y="309" width="0.0810%" height="15" fill="rgb(221,156,26)" fg:x="749" fg:w="1"/><text x="60.9469%" y="319.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (429 samples, 34.76%)</title><rect x="26.0940%" y="405" width="34.7650%" height="15" fill="rgb(213,140,4)" fg:x="322" fg:w="429"/><text x="26.3440%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel::a..</text></g><g><title>plugins_core::looking::model::new_area_observation (421 samples, 34.12%)</title><rect x="26.7423%" y="389" width="34.1167%" height="15" fill="rgb(231,224,15)" fg:x="330" fg:w="421"/><text x="26.9923%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="60.7780%" y="373" width="0.0810%" height="15" fill="rgb(244,76,20)" fg:x="750" fg:w="1"/><text x="61.0280%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="60.7780%" y="357" width="0.0810%" height="15" fill="rgb(238,117,7)" fg:x="750" fg:w="1"/><text x="61.0280%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.7780%" y="341" width="0.0810%" height="15" fill="rgb(235,1,10)" fg:x="750" fg:w="1"/><text x="61.0280%" y="351.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (432 samples, 35.01%)</title><rect x="25.9319%" y="533" width="35.0081%" height="15" fill="rgb(216,165,6)" fg:x="320" fg:w="432"/><text x="26.1819%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (432 samples, 35.01%)</title><rect x="25.9319%" y="517" width="35.0081%" height="15" fill="rgb(246,91,35)" fg:x="320" fg:w="432"/><text x="26.1819%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (432 samples, 35.01%)</title><rect x="25.9319%" y="501" width="35.0081%" height="15" fill="rgb(228,96,24)" fg:x="320" fg:w="432"/><text x="26.1819%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (431 samples, 34.93%)</title><rect x="26.0130%" y="485" width="34.9271%" height="15" fill="rgb(254,217,53)" fg:x="321" fg:w="431"/><text x="26.2630%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (431 samples, 34.93%)</title><rect x="26.0130%" y="469" width="34.9271%" height="15" fill="rgb(209,60,0)" fg:x="321" fg:w="431"/><text x="26.2630%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (431 samples, 34.93%)</title><rect x="26.0130%" y="453" width="34.9271%" height="15" fill="rgb(250,93,26)" fg:x="321" fg:w="431"/><text x="26.2630%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (431 samples, 34.93%)</title><rect x="26.0130%" y="437" width="34.9271%" height="15" fill="rgb(211,9,40)" fg:x="321" fg:w="431"/><text x="26.2630%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Ar..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (431 samples, 34.93%)</title><rect x="26.0130%" y="421" width="34.9271%" height="15" fill="rgb(242,57,20)" fg:x="321" fg:w="431"/><text x="26.2630%" y="431.50">&lt;engine::session::state::State as kernel::actions::Perfor..</text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="60.8590%" y="405" width="0.0810%" height="15" fill="rgb(248,85,48)" fg:x="751" fg:w="1"/><text x="61.1090%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8590%" y="389" width="0.0810%" height="15" fill="rgb(212,117,2)" fg:x="751" fg:w="1"/><text x="61.1090%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="60.8590%" y="373" width="0.0810%" height="15" fill="rgb(243,19,3)" fg:x="751" fg:w="1"/><text x="61.1090%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="60.8590%" y="357" width="0.0810%" height="15" fill="rgb(232,217,24)" fg:x="751" fg:w="1"/><text x="61.1090%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="60.8590%" y="341" width="0.0810%" height="15" fill="rgb(224,175,40)" fg:x="751" fg:w="1"/><text x="61.1090%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="60.8590%" y="325" width="0.0810%" height="15" fill="rgb(212,162,32)" fg:x="751" fg:w="1"/><text x="61.1090%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8590%" y="309" width="0.0810%" height="15" fill="rgb(215,9,4)" fg:x="751" fg:w="1"/><text x="61.1090%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="60.8590%" y="293" width="0.0810%" height="15" fill="rgb(242,42,7)" fg:x="751" fg:w="1"/><text x="61.1090%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="60.8590%" y="277" width="0.0810%" height="15" fill="rgb(242,184,45)" fg:x="751" fg:w="1"/><text x="61.1090%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="60.8590%" y="261" width="0.0810%" height="15" fill="rgb(228,111,51)" fg:x="751" fg:w="1"/><text x="61.1090%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="60.8590%" y="245" width="0.0810%" height="15" fill="rgb(236,147,17)" fg:x="751" fg:w="1"/><text x="61.1090%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="60.8590%" y="229" width="0.0810%" height="15" fill="rgb(210,75,22)" fg:x="751" fg:w="1"/><text x="61.1090%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="60.8590%" y="213" width="0.0810%" height="15" fill="rgb(217,159,45)" fg:x="751" fg:w="1"/><text x="61.1090%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="60.8590%" y="197" width="0.0810%" height="15" fill="rgb(245,165,53)" fg:x="751" fg:w="1"/><text x="61.1090%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="61.0211%" y="469" width="0.1621%" height="15" fill="rgb(251,190,50)" fg:x="753" fg:w="2"/><text x="61.2711%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="61.1831%" y="437" width="0.0810%" height="15" fill="rgb(208,203,29)" fg:x="755" fg:w="1"/><text x="61.4331%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.1831%" y="421" width="0.0810%" height="15" fill="rgb(207,209,35)" fg:x="755" fg:w="1"/><text x="61.4331%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.1831%" y="405" width="0.0810%" height="15" fill="rgb(230,144,49)" fg:x="755" fg:w="1"/><text x="61.4331%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.3452%" y="405" width="0.0810%" height="15" fill="rgb(229,31,6)" fg:x="757" fg:w="1"/><text x="61.5952%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="61.0211%" y="485" width="0.4862%" height="15" fill="rgb(251,129,24)" fg:x="753" fg:w="6"/><text x="61.2711%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="61.1831%" y="469" width="0.3241%" height="15" fill="rgb(235,105,15)" fg:x="755" fg:w="4"/><text x="61.4331%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="61.1831%" y="453" width="0.3241%" height="15" fill="rgb(216,52,43)" fg:x="755" fg:w="4"/><text x="61.4331%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="61.2642%" y="437" width="0.2431%" height="15" fill="rgb(238,144,41)" fg:x="756" fg:w="3"/><text x="61.5142%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="61.2642%" y="421" width="0.2431%" height="15" fill="rgb(243,63,9)" fg:x="756" fg:w="3"/><text x="61.5142%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="61.4263%" y="405" width="0.0810%" height="15" fill="rgb(246,208,1)" fg:x="758" fg:w="1"/><text x="61.6763%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.4263%" y="389" width="0.0810%" height="15" fill="rgb(233,182,18)" fg:x="758" fg:w="1"/><text x="61.6763%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.4263%" y="373" width="0.0810%" height="15" fill="rgb(242,224,8)" fg:x="758" fg:w="1"/><text x="61.6763%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.5883%" y="405" width="0.0810%" height="15" fill="rgb(243,54,37)" fg:x="760" fg:w="1"/><text x="61.8383%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.5883%" y="389" width="0.0810%" height="15" fill="rgb(233,192,12)" fg:x="760" fg:w="1"/><text x="61.8383%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.5883%" y="373" width="0.0810%" height="15" fill="rgb(251,192,53)" fg:x="760" fg:w="1"/><text x="61.8383%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.5883%" y="357" width="0.0810%" height="15" fill="rgb(246,141,26)" fg:x="760" fg:w="1"/><text x="61.8383%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.5883%" y="341" width="0.0810%" height="15" fill="rgb(239,195,19)" fg:x="760" fg:w="1"/><text x="61.8383%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.5883%" y="325" width="0.0810%" height="15" fill="rgb(241,16,39)" fg:x="760" fg:w="1"/><text x="61.8383%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="61.5883%" y="309" width="0.0810%" height="15" fill="rgb(223,13,53)" fg:x="760" fg:w="1"/><text x="61.8383%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="61.5883%" y="293" width="0.0810%" height="15" fill="rgb(214,227,0)" fg:x="760" fg:w="1"/><text x="61.8383%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.6694%" y="405" width="0.0810%" height="15" fill="rgb(228,103,26)" fg:x="761" fg:w="1"/><text x="61.9194%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.6694%" y="389" width="0.0810%" height="15" fill="rgb(254,177,53)" fg:x="761" fg:w="1"/><text x="61.9194%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.6694%" y="373" width="0.0810%" height="15" fill="rgb(208,201,34)" fg:x="761" fg:w="1"/><text x="61.9194%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="61.6694%" y="357" width="0.0810%" height="15" fill="rgb(212,39,5)" fg:x="761" fg:w="1"/><text x="61.9194%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="61.6694%" y="341" width="0.0810%" height="15" fill="rgb(246,117,3)" fg:x="761" fg:w="1"/><text x="61.9194%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="61.6694%" y="325" width="0.0810%" height="15" fill="rgb(244,118,39)" fg:x="761" fg:w="1"/><text x="61.9194%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.6694%" y="309" width="0.0810%" height="15" fill="rgb(241,64,10)" fg:x="761" fg:w="1"/><text x="61.9194%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.6694%" y="293" width="0.0810%" height="15" fill="rgb(229,39,44)" fg:x="761" fg:w="1"/><text x="61.9194%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="61.6694%" y="277" width="0.0810%" height="15" fill="rgb(230,226,3)" fg:x="761" fg:w="1"/><text x="61.9194%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="61.6694%" y="261" width="0.0810%" height="15" fill="rgb(222,13,42)" fg:x="761" fg:w="1"/><text x="61.9194%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="61.6694%" y="245" width="0.0810%" height="15" fill="rgb(247,180,54)" fg:x="761" fg:w="1"/><text x="61.9194%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="61.6694%" y="229" width="0.0810%" height="15" fill="rgb(205,96,16)" fg:x="761" fg:w="1"/><text x="61.9194%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.6694%" y="213" width="0.0810%" height="15" fill="rgb(205,100,21)" fg:x="761" fg:w="1"/><text x="61.9194%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.8314%" y="341" width="0.0810%" height="15" fill="rgb(248,51,4)" fg:x="763" fg:w="1"/><text x="62.0814%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.41%)</title><rect x="61.5883%" y="421" width="0.4052%" height="15" fill="rgb(217,197,30)" fg:x="760" fg:w="5"/><text x="61.8383%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="61.7504%" y="405" width="0.2431%" height="15" fill="rgb(240,179,40)" fg:x="762" fg:w="3"/><text x="62.0004%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.7504%" y="389" width="0.2431%" height="15" fill="rgb(212,185,35)" fg:x="762" fg:w="3"/><text x="62.0004%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="61.7504%" y="373" width="0.2431%" height="15" fill="rgb(251,222,31)" fg:x="762" fg:w="3"/><text x="62.0004%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="61.7504%" y="357" width="0.2431%" height="15" fill="rgb(208,140,36)" fg:x="762" fg:w="3"/><text x="62.0004%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="61.9125%" y="341" width="0.0810%" height="15" fill="rgb(220,148,1)" fg:x="764" fg:w="1"/><text x="62.1625%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.9125%" y="325" width="0.0810%" height="15" fill="rgb(254,4,28)" fg:x="764" fg:w="1"/><text x="62.1625%" y="335.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="61.9935%" y="421" width="0.0810%" height="15" fill="rgb(222,185,44)" fg:x="765" fg:w="1"/><text x="62.2435%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="61.9935%" y="405" width="0.0810%" height="15" fill="rgb(215,74,39)" fg:x="765" fg:w="1"/><text x="62.2435%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="61.9935%" y="389" width="0.0810%" height="15" fill="rgb(247,86,4)" fg:x="765" fg:w="1"/><text x="62.2435%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9935%" y="373" width="0.0810%" height="15" fill="rgb(231,105,32)" fg:x="765" fg:w="1"/><text x="62.2435%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="62.0746%" y="325" width="0.2431%" height="15" fill="rgb(222,65,35)" fg:x="766" fg:w="3"/><text x="62.3246%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.0746%" y="309" width="0.2431%" height="15" fill="rgb(218,145,35)" fg:x="766" fg:w="3"/><text x="62.3246%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="62.0746%" y="293" width="0.2431%" height="15" fill="rgb(208,7,15)" fg:x="766" fg:w="3"/><text x="62.3246%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="62.0746%" y="277" width="0.2431%" height="15" fill="rgb(209,83,13)" fg:x="766" fg:w="3"/><text x="62.3246%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="62.1556%" y="261" width="0.1621%" height="15" fill="rgb(218,3,10)" fg:x="767" fg:w="2"/><text x="62.4056%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.1556%" y="245" width="0.1621%" height="15" fill="rgb(211,219,4)" fg:x="767" fg:w="2"/><text x="62.4056%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="62.2366%" y="229" width="0.0810%" height="15" fill="rgb(228,194,12)" fg:x="768" fg:w="1"/><text x="62.4866%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="62.3177%" y="325" width="0.0810%" height="15" fill="rgb(210,175,7)" fg:x="769" fg:w="1"/><text x="62.5677%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="62.3177%" y="309" width="0.0810%" height="15" fill="rgb(243,132,6)" fg:x="769" fg:w="1"/><text x="62.5677%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.3177%" y="293" width="0.0810%" height="15" fill="rgb(207,72,18)" fg:x="769" fg:w="1"/><text x="62.5677%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="62.0746%" y="421" width="0.4862%" height="15" fill="rgb(236,1,18)" fg:x="766" fg:w="6"/><text x="62.3246%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="62.0746%" y="405" width="0.4862%" height="15" fill="rgb(227,0,18)" fg:x="766" fg:w="6"/><text x="62.3246%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="62.0746%" y="389" width="0.4862%" height="15" fill="rgb(247,37,5)" fg:x="766" fg:w="6"/><text x="62.3246%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="62.0746%" y="373" width="0.4862%" height="15" fill="rgb(237,179,24)" fg:x="766" fg:w="6"/><text x="62.3246%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="62.0746%" y="357" width="0.4862%" height="15" fill="rgb(226,53,20)" fg:x="766" fg:w="6"/><text x="62.3246%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.49%)</title><rect x="62.0746%" y="341" width="0.4862%" height="15" fill="rgb(247,75,7)" fg:x="766" fg:w="6"/><text x="62.3246%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.3987%" y="325" width="0.1621%" height="15" fill="rgb(233,96,12)" fg:x="770" fg:w="2"/><text x="62.6487%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="62.3987%" y="309" width="0.1621%" height="15" fill="rgb(224,125,0)" fg:x="770" fg:w="2"/><text x="62.6487%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="62.3987%" y="293" width="0.1621%" height="15" fill="rgb(224,92,25)" fg:x="770" fg:w="2"/><text x="62.6487%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4797%" y="277" width="0.0810%" height="15" fill="rgb(224,42,24)" fg:x="771" fg:w="1"/><text x="62.7297%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.4797%" y="261" width="0.0810%" height="15" fill="rgb(234,132,49)" fg:x="771" fg:w="1"/><text x="62.7297%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="62.4797%" y="245" width="0.0810%" height="15" fill="rgb(248,100,35)" fg:x="771" fg:w="1"/><text x="62.7297%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.4797%" y="229" width="0.0810%" height="15" fill="rgb(239,94,40)" fg:x="771" fg:w="1"/><text x="62.7297%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.4797%" y="213" width="0.0810%" height="15" fill="rgb(235,139,28)" fg:x="771" fg:w="1"/><text x="62.7297%" y="223.50"></text></g><g><title>plugins_core::tools::contained_by (20 samples, 1.62%)</title><rect x="61.0211%" y="501" width="1.6207%" height="15" fill="rgb(217,144,7)" fg:x="753" fg:w="20"/><text x="61.2711%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (14 samples, 1.13%)</title><rect x="61.5073%" y="485" width="1.1345%" height="15" fill="rgb(227,55,4)" fg:x="759" fg:w="14"/><text x="61.7573%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (14 samples, 1.13%)</title><rect x="61.5073%" y="469" width="1.1345%" height="15" fill="rgb(252,82,54)" fg:x="759" fg:w="14"/><text x="61.7573%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.13%)</title><rect x="61.5073%" y="453" width="1.1345%" height="15" fill="rgb(245,172,4)" fg:x="759" fg:w="14"/><text x="61.7573%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.05%)</title><rect x="61.5883%" y="437" width="1.0535%" height="15" fill="rgb(207,26,27)" fg:x="760" fg:w="13"/><text x="61.8383%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="62.5608%" y="421" width="0.0810%" height="15" fill="rgb(252,98,18)" fg:x="772" fg:w="1"/><text x="62.8108%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="62.5608%" y="405" width="0.0810%" height="15" fill="rgb(244,8,26)" fg:x="772" fg:w="1"/><text x="62.8108%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="62.5608%" y="389" width="0.0810%" height="15" fill="rgb(237,173,45)" fg:x="772" fg:w="1"/><text x="62.8108%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.5608%" y="373" width="0.0810%" height="15" fill="rgb(208,213,49)" fg:x="772" fg:w="1"/><text x="62.8108%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.5608%" y="357" width="0.0810%" height="15" fill="rgb(212,122,37)" fg:x="772" fg:w="1"/><text x="62.8108%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5608%" y="341" width="0.0810%" height="15" fill="rgb(213,80,17)" fg:x="772" fg:w="1"/><text x="62.8108%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.6418%" y="437" width="0.0810%" height="15" fill="rgb(206,210,43)" fg:x="773" fg:w="1"/><text x="62.8918%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.6418%" y="421" width="0.0810%" height="15" fill="rgb(229,214,3)" fg:x="773" fg:w="1"/><text x="62.8918%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="62.6418%" y="405" width="0.0810%" height="15" fill="rgb(235,213,29)" fg:x="773" fg:w="1"/><text x="62.8918%" y="415.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.6418%" y="389" width="0.0810%" height="15" fill="rgb(248,135,26)" fg:x="773" fg:w="1"/><text x="62.8918%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6418%" y="373" width="0.0810%" height="15" fill="rgb(242,188,12)" fg:x="773" fg:w="1"/><text x="62.8918%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6418%" y="357" width="0.0810%" height="15" fill="rgb(245,38,12)" fg:x="773" fg:w="1"/><text x="62.8918%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6418%" y="341" width="0.0810%" height="15" fill="rgb(218,42,13)" fg:x="773" fg:w="1"/><text x="62.8918%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6418%" y="325" width="0.0810%" height="15" fill="rgb(238,132,49)" fg:x="773" fg:w="1"/><text x="62.8918%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="62.6418%" y="309" width="0.0810%" height="15" fill="rgb(209,196,19)" fg:x="773" fg:w="1"/><text x="62.8918%" y="319.50"></text></g><g><title>plugins_core::tools::occupied_by (2 samples, 0.16%)</title><rect x="62.6418%" y="501" width="0.1621%" height="15" fill="rgb(244,131,22)" fg:x="773" fg:w="2"/><text x="62.8918%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="62.6418%" y="485" width="0.1621%" height="15" fill="rgb(223,18,34)" fg:x="773" fg:w="2"/><text x="62.8918%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.6418%" y="469" width="0.1621%" height="15" fill="rgb(252,124,54)" fg:x="773" fg:w="2"/><text x="62.8918%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.6418%" y="453" width="0.1621%" height="15" fill="rgb(229,106,42)" fg:x="773" fg:w="2"/><text x="62.8918%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.7229%" y="437" width="0.0810%" height="15" fill="rgb(221,129,1)" fg:x="774" fg:w="1"/><text x="62.9729%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.7229%" y="421" width="0.0810%" height="15" fill="rgb(229,74,15)" fg:x="774" fg:w="1"/><text x="62.9729%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.7229%" y="405" width="0.0810%" height="15" fill="rgb(210,206,50)" fg:x="774" fg:w="1"/><text x="62.9729%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.7229%" y="389" width="0.0810%" height="15" fill="rgb(251,114,31)" fg:x="774" fg:w="1"/><text x="62.9729%" y="399.50"></text></g><g><title>engine::session::Session::captured (478 samples, 38.74%)</title><rect x="24.2301%" y="677" width="38.7358%" height="15" fill="rgb(215,225,28)" fg:x="299" fg:w="478"/><text x="24.4801%" y="687.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (476 samples, 38.57%)</title><rect x="24.3922%" y="661" width="38.5737%" height="15" fill="rgb(237,109,14)" fg:x="301" fg:w="476"/><text x="24.6422%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (469 samples, 38.01%)</title><rect x="24.9595%" y="645" width="38.0065%" height="15" fill="rgb(230,13,37)" fg:x="308" fg:w="469"/><text x="25.2095%" y="655.50">tracing_core::dispatcher::with_default</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (469 samples, 38.01%)</title><rect x="24.9595%" y="629" width="38.0065%" height="15" fill="rgb(231,40,28)" fg:x="308" fg:w="469"/><text x="25.2095%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perf..</text></g><g><title>kernel::plugins::mw::apply_middleware (469 samples, 38.01%)</title><rect x="24.9595%" y="613" width="38.0065%" height="15" fill="rgb(231,202,18)" fg:x="308" fg:w="469"/><text x="25.2095%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (469 samples, 38.01%)</title><rect x="24.9595%" y="597" width="38.0065%" height="15" fill="rgb(225,33,18)" fg:x="308" fg:w="469"/><text x="25.2095%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (469 samples, 38.01%)</title><rect x="24.9595%" y="581" width="38.0065%" height="15" fill="rgb(223,64,47)" fg:x="308" fg:w="469"/><text x="25.2095%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plug..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (457 samples, 37.03%)</title><rect x="25.9319%" y="565" width="37.0340%" height="15" fill="rgb(234,114,13)" fg:x="320" fg:w="457"/><text x="26.1819%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (457 samples, 37.03%)</title><rect x="25.9319%" y="549" width="37.0340%" height="15" fill="rgb(248,56,40)" fg:x="320" fg:w="457"/><text x="26.1819%" y="559.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middle..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (25 samples, 2.03%)</title><rect x="60.9400%" y="533" width="2.0259%" height="15" fill="rgb(221,194,21)" fg:x="752" fg:w="25"/><text x="61.1900%" y="543.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (25 samples, 2.03%)</title><rect x="60.9400%" y="517" width="2.0259%" height="15" fill="rgb(242,108,46)" fg:x="752" fg:w="25"/><text x="61.1900%" y="527.50">p..</text></g><g><title>plugins_core::tools::worn_by (2 samples, 0.16%)</title><rect x="62.8039%" y="501" width="0.1621%" height="15" fill="rgb(220,106,10)" fg:x="775" fg:w="2"/><text x="63.0539%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="62.8039%" y="485" width="0.1621%" height="15" fill="rgb(211,88,4)" fg:x="775" fg:w="2"/><text x="63.0539%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.8039%" y="469" width="0.1621%" height="15" fill="rgb(214,95,34)" fg:x="775" fg:w="2"/><text x="63.0539%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.8039%" y="453" width="0.1621%" height="15" fill="rgb(250,160,33)" fg:x="775" fg:w="2"/><text x="63.0539%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="62.8849%" y="437" width="0.0810%" height="15" fill="rgb(225,29,10)" fg:x="776" fg:w="1"/><text x="63.1349%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="62.8849%" y="421" width="0.0810%" height="15" fill="rgb(224,28,30)" fg:x="776" fg:w="1"/><text x="63.1349%" y="431.50"></text></g><g><title>engine::session::internal::Added::find_refs (2 samples, 0.16%)</title><rect x="62.9660%" y="661" width="0.1621%" height="15" fill="rgb(231,77,4)" fg:x="777" fg:w="2"/><text x="63.2160%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="62.9660%" y="645" width="0.1621%" height="15" fill="rgb(209,63,21)" fg:x="777" fg:w="2"/><text x="63.2160%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="62.9660%" y="629" width="0.1621%" height="15" fill="rgb(226,22,11)" fg:x="777" fg:w="2"/><text x="63.2160%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="62.9660%" y="613" width="0.1621%" height="15" fill="rgb(216,82,30)" fg:x="777" fg:w="2"/><text x="63.2160%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="62.9660%" y="597" width="0.1621%" height="15" fill="rgb(246,227,38)" fg:x="777" fg:w="2"/><text x="63.2160%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="62.9660%" y="581" width="0.1621%" height="15" fill="rgb(251,203,53)" fg:x="777" fg:w="2"/><text x="63.2160%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="62.9660%" y="565" width="0.1621%" height="15" fill="rgb(254,101,1)" fg:x="777" fg:w="2"/><text x="63.2160%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="62.9660%" y="549" width="0.1621%" height="15" fill="rgb(241,180,5)" fg:x="777" fg:w="2"/><text x="63.2160%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.0470%" y="533" width="0.0810%" height="15" fill="rgb(218,168,4)" fg:x="778" fg:w="1"/><text x="63.2970%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="63.0470%" y="517" width="0.0810%" height="15" fill="rgb(224,223,32)" fg:x="778" fg:w="1"/><text x="63.2970%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="63.0470%" y="501" width="0.0810%" height="15" fill="rgb(236,106,22)" fg:x="778" fg:w="1"/><text x="63.2970%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="63.0470%" y="485" width="0.0810%" height="15" fill="rgb(206,121,5)" fg:x="778" fg:w="1"/><text x="63.2970%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="63.0470%" y="469" width="0.0810%" height="15" fill="rgb(233,87,28)" fg:x="778" fg:w="1"/><text x="63.2970%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="63.0470%" y="453" width="0.0810%" height="15" fill="rgb(236,137,17)" fg:x="778" fg:w="1"/><text x="63.2970%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.0470%" y="437" width="0.0810%" height="15" fill="rgb(209,183,38)" fg:x="778" fg:w="1"/><text x="63.2970%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.0470%" y="421" width="0.0810%" height="15" fill="rgb(206,162,44)" fg:x="778" fg:w="1"/><text x="63.2970%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1280%" y="645" width="0.0810%" height="15" fill="rgb(237,70,39)" fg:x="779" fg:w="1"/><text x="63.3780%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1280%" y="629" width="0.0810%" height="15" fill="rgb(212,176,5)" fg:x="779" fg:w="1"/><text x="63.3780%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1280%" y="613" width="0.0810%" height="15" fill="rgb(232,95,16)" fg:x="779" fg:w="1"/><text x="63.3780%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1280%" y="597" width="0.0810%" height="15" fill="rgb(219,115,35)" fg:x="779" fg:w="1"/><text x="63.3780%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.2091%" y="517" width="0.0810%" height="15" fill="rgb(251,67,27)" fg:x="780" fg:w="1"/><text x="63.4591%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.2091%" y="501" width="0.0810%" height="15" fill="rgb(222,95,40)" fg:x="780" fg:w="1"/><text x="63.4591%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.2091%" y="485" width="0.0810%" height="15" fill="rgb(250,35,16)" fg:x="780" fg:w="1"/><text x="63.4591%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.2091%" y="469" width="0.0810%" height="15" fill="rgb(224,86,44)" fg:x="780" fg:w="1"/><text x="63.4591%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.2091%" y="453" width="0.0810%" height="15" fill="rgb(237,53,53)" fg:x="780" fg:w="1"/><text x="63.4591%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.2091%" y="437" width="0.0810%" height="15" fill="rgb(208,171,33)" fg:x="780" fg:w="1"/><text x="63.4591%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.2091%" y="421" width="0.0810%" height="15" fill="rgb(222,64,27)" fg:x="780" fg:w="1"/><text x="63.4591%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.2091%" y="405" width="0.0810%" height="15" fill="rgb(221,121,35)" fg:x="780" fg:w="1"/><text x="63.4591%" y="415.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.2901%" y="453" width="0.0810%" height="15" fill="rgb(228,137,42)" fg:x="781" fg:w="1"/><text x="63.5401%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="63.2901%" y="437" width="0.0810%" height="15" fill="rgb(227,54,21)" fg:x="781" fg:w="1"/><text x="63.5401%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.2901%" y="421" width="0.0810%" height="15" fill="rgb(240,168,33)" fg:x="781" fg:w="1"/><text x="63.5401%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="63.2901%" y="517" width="0.1621%" height="15" fill="rgb(243,159,6)" fg:x="781" fg:w="2"/><text x="63.5401%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.2901%" y="501" width="0.1621%" height="15" fill="rgb(205,211,41)" fg:x="781" fg:w="2"/><text x="63.5401%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.2901%" y="485" width="0.1621%" height="15" fill="rgb(253,30,1)" fg:x="781" fg:w="2"/><text x="63.5401%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.2901%" y="469" width="0.1621%" height="15" fill="rgb(226,80,18)" fg:x="781" fg:w="2"/><text x="63.5401%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.3712%" y="453" width="0.0810%" height="15" fill="rgb(253,156,46)" fg:x="782" fg:w="1"/><text x="63.6212%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="63.3712%" y="437" width="0.0810%" height="15" fill="rgb(248,87,27)" fg:x="782" fg:w="1"/><text x="63.6212%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="63.2091%" y="549" width="0.3241%" height="15" fill="rgb(227,122,2)" fg:x="780" fg:w="4"/><text x="63.4591%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="63.2091%" y="533" width="0.3241%" height="15" fill="rgb(229,94,39)" fg:x="780" fg:w="4"/><text x="63.4591%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.4522%" y="517" width="0.0810%" height="15" fill="rgb(225,173,31)" fg:x="783" fg:w="1"/><text x="63.7022%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.41%)</title><rect x="63.2091%" y="597" width="0.4052%" height="15" fill="rgb(239,176,30)" fg:x="780" fg:w="5"/><text x="63.4591%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="63.2091%" y="581" width="0.4052%" height="15" fill="rgb(212,104,21)" fg:x="780" fg:w="5"/><text x="63.4591%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="63.2091%" y="565" width="0.4052%" height="15" fill="rgb(240,209,40)" fg:x="780" fg:w="5"/><text x="63.4591%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5332%" y="549" width="0.0810%" height="15" fill="rgb(234,195,5)" fg:x="784" fg:w="1"/><text x="63.7832%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.5332%" y="533" width="0.0810%" height="15" fill="rgb(238,213,1)" fg:x="784" fg:w="1"/><text x="63.7832%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.5332%" y="517" width="0.0810%" height="15" fill="rgb(235,182,54)" fg:x="784" fg:w="1"/><text x="63.7832%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="63.5332%" y="501" width="0.0810%" height="15" fill="rgb(229,50,46)" fg:x="784" fg:w="1"/><text x="63.7832%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="63.5332%" y="485" width="0.0810%" height="15" fill="rgb(219,145,13)" fg:x="784" fg:w="1"/><text x="63.7832%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.5332%" y="469" width="0.0810%" height="15" fill="rgb(220,226,10)" fg:x="784" fg:w="1"/><text x="63.7832%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.5332%" y="453" width="0.0810%" height="15" fill="rgb(248,47,30)" fg:x="784" fg:w="1"/><text x="63.7832%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.5332%" y="437" width="0.0810%" height="15" fill="rgb(231,209,44)" fg:x="784" fg:w="1"/><text x="63.7832%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="63.2091%" y="645" width="0.4862%" height="15" fill="rgb(209,80,30)" fg:x="780" fg:w="6"/><text x="63.4591%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="63.2091%" y="629" width="0.4862%" height="15" fill="rgb(232,9,14)" fg:x="780" fg:w="6"/><text x="63.4591%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="63.2091%" y="613" width="0.4862%" height="15" fill="rgb(243,91,43)" fg:x="780" fg:w="6"/><text x="63.4591%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.6143%" y="597" width="0.0810%" height="15" fill="rgb(231,90,52)" fg:x="785" fg:w="1"/><text x="63.8643%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.81%)</title><rect x="62.9660%" y="677" width="0.8104%" height="15" fill="rgb(253,192,44)" fg:x="777" fg:w="10"/><text x="63.2160%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.65%)</title><rect x="63.1280%" y="661" width="0.6483%" height="15" fill="rgb(241,66,31)" fg:x="779" fg:w="8"/><text x="63.3780%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="63.6953%" y="645" width="0.0810%" height="15" fill="rgb(235,81,37)" fg:x="786" fg:w="1"/><text x="63.9453%" y="655.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="63.6953%" y="629" width="0.0810%" height="15" fill="rgb(223,221,9)" fg:x="786" fg:w="1"/><text x="63.9453%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.6953%" y="613" width="0.0810%" height="15" fill="rgb(242,180,7)" fg:x="786" fg:w="1"/><text x="63.9453%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.6953%" y="597" width="0.0810%" height="15" fill="rgb(243,78,19)" fg:x="786" fg:w="1"/><text x="63.9453%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.6953%" y="581" width="0.0810%" height="15" fill="rgb(233,23,17)" fg:x="786" fg:w="1"/><text x="63.9453%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.6953%" y="565" width="0.0810%" height="15" fill="rgb(252,122,45)" fg:x="786" fg:w="1"/><text x="63.9453%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.6953%" y="549" width="0.0810%" height="15" fill="rgb(247,108,20)" fg:x="786" fg:w="1"/><text x="63.9453%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.6953%" y="533" width="0.0810%" height="15" fill="rgb(235,84,21)" fg:x="786" fg:w="1"/><text x="63.9453%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.6953%" y="517" width="0.0810%" height="15" fill="rgb(247,129,10)" fg:x="786" fg:w="1"/><text x="63.9453%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.6953%" y="501" width="0.0810%" height="15" fill="rgb(208,173,14)" fg:x="786" fg:w="1"/><text x="63.9453%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="63.7763%" y="645" width="0.0810%" height="15" fill="rgb(236,31,38)" fg:x="787" fg:w="1"/><text x="64.0263%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.1005%" y="549" width="0.0810%" height="15" fill="rgb(232,65,17)" fg:x="791" fg:w="1"/><text x="64.3505%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.1815%" y="533" width="0.0810%" height="15" fill="rgb(224,45,49)" fg:x="792" fg:w="1"/><text x="64.4315%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.1815%" y="517" width="0.0810%" height="15" fill="rgb(225,2,53)" fg:x="792" fg:w="1"/><text x="64.4315%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.1815%" y="501" width="0.0810%" height="15" fill="rgb(248,210,53)" fg:x="792" fg:w="1"/><text x="64.4315%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.1815%" y="485" width="0.0810%" height="15" fill="rgb(211,1,30)" fg:x="792" fg:w="1"/><text x="64.4315%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.1815%" y="469" width="0.0810%" height="15" fill="rgb(224,96,15)" fg:x="792" fg:w="1"/><text x="64.4315%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.1815%" y="453" width="0.0810%" height="15" fill="rgb(252,45,11)" fg:x="792" fg:w="1"/><text x="64.4315%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.1815%" y="437" width="0.0810%" height="15" fill="rgb(220,125,38)" fg:x="792" fg:w="1"/><text x="64.4315%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="64.1005%" y="581" width="0.2431%" height="15" fill="rgb(243,161,33)" fg:x="791" fg:w="3"/><text x="64.3505%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="64.1005%" y="565" width="0.2431%" height="15" fill="rgb(248,197,34)" fg:x="791" fg:w="3"/><text x="64.3505%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="64.1815%" y="549" width="0.1621%" height="15" fill="rgb(228,165,23)" fg:x="792" fg:w="2"/><text x="64.4315%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="64.2626%" y="533" width="0.0810%" height="15" fill="rgb(236,94,38)" fg:x="793" fg:w="1"/><text x="64.5126%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.2626%" y="517" width="0.0810%" height="15" fill="rgb(220,13,23)" fg:x="793" fg:w="1"/><text x="64.5126%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="64.2626%" y="501" width="0.0810%" height="15" fill="rgb(234,26,39)" fg:x="793" fg:w="1"/><text x="64.5126%" y="511.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="64.0194%" y="629" width="0.4052%" height="15" fill="rgb(205,117,44)" fg:x="790" fg:w="5"/><text x="64.2694%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="64.0194%" y="613" width="0.4052%" height="15" fill="rgb(250,42,2)" fg:x="790" fg:w="5"/><text x="64.2694%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="64.0194%" y="597" width="0.4052%" height="15" fill="rgb(223,83,14)" fg:x="790" fg:w="5"/><text x="64.2694%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.3436%" y="581" width="0.0810%" height="15" fill="rgb(241,147,50)" fg:x="794" fg:w="1"/><text x="64.5936%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.3436%" y="565" width="0.0810%" height="15" fill="rgb(218,90,6)" fg:x="794" fg:w="1"/><text x="64.5936%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.4246%" y="533" width="0.0810%" height="15" fill="rgb(210,191,5)" fg:x="795" fg:w="1"/><text x="64.6746%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.4246%" y="517" width="0.0810%" height="15" fill="rgb(225,139,19)" fg:x="795" fg:w="1"/><text x="64.6746%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.4246%" y="501" width="0.0810%" height="15" fill="rgb(210,1,33)" fg:x="795" fg:w="1"/><text x="64.6746%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.4246%" y="485" width="0.0810%" height="15" fill="rgb(213,50,3)" fg:x="795" fg:w="1"/><text x="64.6746%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.4246%" y="469" width="0.0810%" height="15" fill="rgb(234,227,4)" fg:x="795" fg:w="1"/><text x="64.6746%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4246%" y="453" width="0.0810%" height="15" fill="rgb(246,63,5)" fg:x="795" fg:w="1"/><text x="64.6746%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="63.8574%" y="645" width="0.7293%" height="15" fill="rgb(245,136,27)" fg:x="788" fg:w="9"/><text x="64.1074%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="64.4246%" y="629" width="0.1621%" height="15" fill="rgb(247,199,27)" fg:x="795" fg:w="2"/><text x="64.6746%" y="639.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="64.4246%" y="613" width="0.1621%" height="15" fill="rgb(252,158,49)" fg:x="795" fg:w="2"/><text x="64.6746%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.4246%" y="597" width="0.1621%" height="15" fill="rgb(254,73,1)" fg:x="795" fg:w="2"/><text x="64.6746%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.4246%" y="581" width="0.1621%" height="15" fill="rgb(248,93,19)" fg:x="795" fg:w="2"/><text x="64.6746%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.4246%" y="565" width="0.1621%" height="15" fill="rgb(206,67,5)" fg:x="795" fg:w="2"/><text x="64.6746%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.4246%" y="549" width="0.1621%" height="15" fill="rgb(209,210,4)" fg:x="795" fg:w="2"/><text x="64.6746%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5057%" y="533" width="0.0810%" height="15" fill="rgb(214,185,36)" fg:x="796" fg:w="1"/><text x="64.7557%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.5057%" y="517" width="0.0810%" height="15" fill="rgb(233,191,26)" fg:x="796" fg:w="1"/><text x="64.7557%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5057%" y="501" width="0.0810%" height="15" fill="rgb(248,94,17)" fg:x="796" fg:w="1"/><text x="64.7557%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.89%)</title><rect x="63.7763%" y="661" width="0.8914%" height="15" fill="rgb(250,64,4)" fg:x="787" fg:w="11"/><text x="64.0263%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="64.5867%" y="645" width="0.0810%" height="15" fill="rgb(218,41,53)" fg:x="797" fg:w="1"/><text x="64.8367%" y="655.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (500 samples, 40.52%)</title><rect x="24.2301%" y="709" width="40.5186%" height="15" fill="rgb(251,176,28)" fg:x="299" fg:w="500"/><text x="24.4801%" y="719.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (500 samples, 40.52%)</title><rect x="24.2301%" y="693" width="40.5186%" height="15" fill="rgb(247,22,9)" fg:x="299" fg:w="500"/><text x="24.4801%" y="703.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (12 samples, 0.97%)</title><rect x="63.7763%" y="677" width="0.9724%" height="15" fill="rgb(218,201,14)" fg:x="787" fg:w="12"/><text x="64.0263%" y="687.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="64.6677%" y="661" width="0.0810%" height="15" fill="rgb(218,94,10)" fg:x="798" fg:w="1"/><text x="64.9177%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.6677%" y="645" width="0.0810%" height="15" fill="rgb(222,183,52)" fg:x="798" fg:w="1"/><text x="64.9177%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (800 samples, 64.83%)</title><rect x="0.0000%" y="757" width="64.8298%" height="15" fill="rgb(242,140,25)" fg:x="0" fg:w="800"/><text x="0.2500%" y="767.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (800 samples, 64.83%)</title><rect x="0.0000%" y="741" width="64.8298%" height="15" fill="rgb(235,197,38)" fg:x="0" fg:w="800"/><text x="0.2500%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (800 samples, 64.83%)</title><rect x="0.0000%" y="725" width="64.8298%" height="15" fill="rgb(237,136,15)" fg:x="0" fg:w="800"/><text x="0.2500%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="64.7488%" y="709" width="0.0810%" height="15" fill="rgb(223,44,49)" fg:x="799" fg:w="1"/><text x="64.9988%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.7488%" y="693" width="0.0810%" height="15" fill="rgb(227,71,15)" fg:x="799" fg:w="1"/><text x="64.9988%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7488%" y="677" width="0.0810%" height="15" fill="rgb(225,153,20)" fg:x="799" fg:w="1"/><text x="64.9988%" y="687.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.7488%" y="661" width="0.0810%" height="15" fill="rgb(210,190,26)" fg:x="799" fg:w="1"/><text x="64.9988%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="64.9919%" y="693" width="0.2431%" height="15" fill="rgb(223,147,5)" fg:x="802" fg:w="3"/><text x="65.2419%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="64.9919%" y="677" width="0.2431%" height="15" fill="rgb(207,14,23)" fg:x="802" fg:w="3"/><text x="65.2419%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="65.0729%" y="661" width="0.1621%" height="15" fill="rgb(211,195,53)" fg:x="803" fg:w="2"/><text x="65.3229%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="65.0729%" y="645" width="0.1621%" height="15" fill="rgb(237,75,46)" fg:x="803" fg:w="2"/><text x="65.3229%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="65.0729%" y="629" width="0.1621%" height="15" fill="rgb(254,55,14)" fg:x="803" fg:w="2"/><text x="65.3229%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.1540%" y="613" width="0.0810%" height="15" fill="rgb(230,185,30)" fg:x="804" fg:w="1"/><text x="65.4040%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.2350%" y="581" width="0.0810%" height="15" fill="rgb(220,14,11)" fg:x="805" fg:w="1"/><text x="65.4850%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3160%" y="549" width="0.0810%" height="15" fill="rgb(215,169,44)" fg:x="806" fg:w="1"/><text x="65.5660%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="65.2350%" y="629" width="0.3241%" height="15" fill="rgb(253,203,20)" fg:x="805" fg:w="4"/><text x="65.4850%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (4 samples, 0.32%)</title><rect x="65.2350%" y="613" width="0.3241%" height="15" fill="rgb(229,225,17)" fg:x="805" fg:w="4"/><text x="65.4850%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="65.2350%" y="597" width="0.3241%" height="15" fill="rgb(236,76,26)" fg:x="805" fg:w="4"/><text x="65.4850%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="65.3160%" y="581" width="0.2431%" height="15" fill="rgb(234,15,30)" fg:x="806" fg:w="3"/><text x="65.5660%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="65.3160%" y="565" width="0.2431%" height="15" fill="rgb(211,113,48)" fg:x="806" fg:w="3"/><text x="65.5660%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="65.3971%" y="549" width="0.1621%" height="15" fill="rgb(221,31,36)" fg:x="807" fg:w="2"/><text x="65.6471%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4781%" y="533" width="0.0810%" height="15" fill="rgb(215,118,52)" fg:x="808" fg:w="1"/><text x="65.7281%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.6402%" y="565" width="0.0810%" height="15" fill="rgb(241,151,27)" fg:x="810" fg:w="1"/><text x="65.8902%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.6402%" y="549" width="0.0810%" height="15" fill="rgb(253,51,3)" fg:x="810" fg:w="1"/><text x="65.8902%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.7212%" y="565" width="0.0810%" height="15" fill="rgb(216,201,24)" fg:x="811" fg:w="1"/><text x="65.9712%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.8023%" y="565" width="0.0810%" height="15" fill="rgb(231,107,4)" fg:x="812" fg:w="1"/><text x="66.0523%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8023%" y="549" width="0.0810%" height="15" fill="rgb(243,97,54)" fg:x="812" fg:w="1"/><text x="66.0523%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="65.2350%" y="677" width="0.7293%" height="15" fill="rgb(221,32,51)" fg:x="805" fg:w="9"/><text x="65.4850%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (9 samples, 0.73%)</title><rect x="65.2350%" y="661" width="0.7293%" height="15" fill="rgb(218,171,35)" fg:x="805" fg:w="9"/><text x="65.4850%" y="671.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="65.2350%" y="645" width="0.7293%" height="15" fill="rgb(214,20,53)" fg:x="805" fg:w="9"/><text x="65.4850%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="65.5592%" y="629" width="0.4052%" height="15" fill="rgb(239,9,52)" fg:x="809" fg:w="5"/><text x="65.8092%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="65.5592%" y="613" width="0.4052%" height="15" fill="rgb(215,114,45)" fg:x="809" fg:w="5"/><text x="65.8092%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="65.6402%" y="597" width="0.3241%" height="15" fill="rgb(208,118,9)" fg:x="810" fg:w="4"/><text x="65.8902%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="65.6402%" y="581" width="0.3241%" height="15" fill="rgb(235,7,39)" fg:x="810" fg:w="4"/><text x="65.8902%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.8833%" y="565" width="0.0810%" height="15" fill="rgb(243,225,15)" fg:x="813" fg:w="1"/><text x="66.1333%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.05%)</title><rect x="64.9919%" y="709" width="1.0535%" height="15" fill="rgb(225,216,18)" fg:x="802" fg:w="13"/><text x="65.2419%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (10 samples, 0.81%)</title><rect x="65.2350%" y="693" width="0.8104%" height="15" fill="rgb(233,36,38)" fg:x="805" fg:w="10"/><text x="65.4850%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.9643%" y="677" width="0.0810%" height="15" fill="rgb(239,88,23)" fg:x="814" fg:w="1"/><text x="66.2143%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::delete (1 samples, 0.08%)</title><rect x="66.2075%" y="661" width="0.0810%" height="15" fill="rgb(219,181,35)" fg:x="817" fg:w="1"/><text x="66.4575%" y="671.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="66.2885%" y="581" width="0.0810%" height="15" fill="rgb(215,18,46)" fg:x="818" fg:w="1"/><text x="66.5385%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="66.3695%" y="581" width="0.0810%" height="15" fill="rgb(241,38,11)" fg:x="819" fg:w="1"/><text x="66.6195%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3695%" y="565" width="0.0810%" height="15" fill="rgb(248,169,45)" fg:x="819" fg:w="1"/><text x="66.6195%" y="575.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="66.2885%" y="613" width="0.3241%" height="15" fill="rgb(239,50,49)" fg:x="818" fg:w="4"/><text x="66.5385%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="66.2885%" y="597" width="0.3241%" height="15" fill="rgb(231,96,31)" fg:x="818" fg:w="4"/><text x="66.5385%" y="607.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="66.4506%" y="581" width="0.1621%" height="15" fill="rgb(224,193,37)" fg:x="820" fg:w="2"/><text x="66.7006%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="66.6126%" y="613" width="0.0810%" height="15" fill="rgb(227,153,50)" fg:x="822" fg:w="1"/><text x="66.8626%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="66.6126%" y="597" width="0.0810%" height="15" fill="rgb(249,228,3)" fg:x="822" fg:w="1"/><text x="66.8626%" y="607.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="66.6126%" y="581" width="0.0810%" height="15" fill="rgb(219,164,43)" fg:x="822" fg:w="1"/><text x="66.8626%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="66.6126%" y="565" width="0.0810%" height="15" fill="rgb(216,45,41)" fg:x="822" fg:w="1"/><text x="66.8626%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::actions::SpeakAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="66.6937%" y="581" width="0.0810%" height="15" fill="rgb(210,226,51)" fg:x="823" fg:w="1"/><text x="66.9437%" y="591.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="66.6937%" y="565" width="0.0810%" height="15" fill="rgb(209,117,49)" fg:x="823" fg:w="1"/><text x="66.9437%" y="575.50"></text></g><g><title>&lt;plugins_core::chat::ChatPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="66.6937%" y="613" width="0.1621%" height="15" fill="rgb(206,196,24)" fg:x="823" fg:w="2"/><text x="66.9437%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="66.6937%" y="597" width="0.1621%" height="15" fill="rgb(253,218,3)" fg:x="823" fg:w="2"/><text x="66.9437%" y="607.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="66.7747%" y="581" width="0.0810%" height="15" fill="rgb(252,166,2)" fg:x="824" fg:w="1"/><text x="67.0247%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.7747%" y="565" width="0.0810%" height="15" fill="rgb(236,218,26)" fg:x="824" fg:w="1"/><text x="67.0247%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (9 samples, 0.73%)</title><rect x="66.2885%" y="629" width="0.7293%" height="15" fill="rgb(254,84,19)" fg:x="818" fg:w="9"/><text x="66.5385%" y="639.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="66.8558%" y="613" width="0.1621%" height="15" fill="rgb(219,137,29)" fg:x="825" fg:w="2"/><text x="67.1058%" y="623.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="66.9368%" y="597" width="0.0810%" height="15" fill="rgb(227,47,52)" fg:x="826" fg:w="1"/><text x="67.1868%" y="607.50"></text></g><g><title>&lt;plugins_core::moving::actions::DeactivateRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="66.9368%" y="581" width="0.0810%" height="15" fill="rgb(229,167,24)" fg:x="826" fg:w="1"/><text x="67.1868%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="66.9368%" y="565" width="0.0810%" height="15" fill="rgb(233,164,1)" fg:x="826" fg:w="1"/><text x="67.1868%" y="575.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="67.0178%" y="597" width="0.0810%" height="15" fill="rgb(218,88,48)" fg:x="827" fg:w="1"/><text x="67.2678%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="67.0178%" y="613" width="0.1621%" height="15" fill="rgb(226,214,24)" fg:x="827" fg:w="2"/><text x="67.2678%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="67.0989%" y="597" width="0.0810%" height="15" fill="rgb(233,29,12)" fg:x="828" fg:w="1"/><text x="67.3489%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="67.0989%" y="581" width="0.0810%" height="15" fill="rgb(219,120,34)" fg:x="828" fg:w="1"/><text x="67.3489%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="67.0989%" y="565" width="0.0810%" height="15" fill="rgb(226,78,44)" fg:x="828" fg:w="1"/><text x="67.3489%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.0989%" y="549" width="0.0810%" height="15" fill="rgb(240,15,48)" fg:x="828" fg:w="1"/><text x="67.3489%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.0989%" y="533" width="0.0810%" height="15" fill="rgb(253,176,7)" fg:x="828" fg:w="1"/><text x="67.3489%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="67.0989%" y="517" width="0.0810%" height="15" fill="rgb(206,166,28)" fg:x="828" fg:w="1"/><text x="67.3489%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="67.0989%" y="501" width="0.0810%" height="15" fill="rgb(241,53,51)" fg:x="828" fg:w="1"/><text x="67.3489%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="67.0989%" y="485" width="0.0810%" height="15" fill="rgb(249,112,30)" fg:x="828" fg:w="1"/><text x="67.3489%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="67.0989%" y="469" width="0.0810%" height="15" fill="rgb(217,85,30)" fg:x="828" fg:w="1"/><text x="67.3489%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.0989%" y="453" width="0.0810%" height="15" fill="rgb(233,49,7)" fg:x="828" fg:w="1"/><text x="67.3489%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="67.0989%" y="437" width="0.0810%" height="15" fill="rgb(234,109,9)" fg:x="828" fg:w="1"/><text x="67.3489%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.0989%" y="421" width="0.0810%" height="15" fill="rgb(253,95,22)" fg:x="828" fg:w="1"/><text x="67.3489%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="67.0989%" y="405" width="0.0810%" height="15" fill="rgb(233,176,25)" fg:x="828" fg:w="1"/><text x="67.3489%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.0989%" y="389" width="0.0810%" height="15" fill="rgb(236,33,39)" fg:x="828" fg:w="1"/><text x="67.3489%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="67.0989%" y="373" width="0.0810%" height="15" fill="rgb(223,226,42)" fg:x="828" fg:w="1"/><text x="67.3489%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="67.0989%" y="357" width="0.0810%" height="15" fill="rgb(216,99,33)" fg:x="828" fg:w="1"/><text x="67.3489%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="67.0989%" y="341" width="0.0810%" height="15" fill="rgb(235,84,23)" fg:x="828" fg:w="1"/><text x="67.3489%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.0989%" y="325" width="0.0810%" height="15" fill="rgb(232,2,27)" fg:x="828" fg:w="1"/><text x="67.3489%" y="335.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (5 samples, 0.41%)</title><rect x="67.0178%" y="629" width="0.4052%" height="15" fill="rgb(241,23,22)" fg:x="827" fg:w="5"/><text x="67.2678%" y="639.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="67.1799%" y="613" width="0.2431%" height="15" fill="rgb(211,73,27)" fg:x="829" fg:w="3"/><text x="67.4299%" y="623.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="67.1799%" y="597" width="0.2431%" height="15" fill="rgb(235,109,49)" fg:x="829" fg:w="3"/><text x="67.4299%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="67.1799%" y="581" width="0.2431%" height="15" fill="rgb(230,99,29)" fg:x="829" fg:w="3"/><text x="67.4299%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="67.1799%" y="565" width="0.2431%" height="15" fill="rgb(245,199,7)" fg:x="829" fg:w="3"/><text x="67.4299%" y="575.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="67.1799%" y="549" width="0.2431%" height="15" fill="rgb(217,179,10)" fg:x="829" fg:w="3"/><text x="67.4299%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="67.1799%" y="533" width="0.2431%" height="15" fill="rgb(254,99,47)" fg:x="829" fg:w="3"/><text x="67.4299%" y="543.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="67.1799%" y="517" width="0.2431%" height="15" fill="rgb(251,121,7)" fg:x="829" fg:w="3"/><text x="67.4299%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="67.4230%" y="565" width="0.1621%" height="15" fill="rgb(250,177,26)" fg:x="832" fg:w="2"/><text x="67.6730%" y="575.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (4 samples, 0.32%)</title><rect x="67.4230%" y="613" width="0.3241%" height="15" fill="rgb(232,88,15)" fg:x="832" fg:w="4"/><text x="67.6730%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="67.4230%" y="597" width="0.3241%" height="15" fill="rgb(251,54,54)" fg:x="832" fg:w="4"/><text x="67.6730%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="67.4230%" y="581" width="0.3241%" height="15" fill="rgb(208,177,15)" fg:x="832" fg:w="4"/><text x="67.6730%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="67.5851%" y="565" width="0.1621%" height="15" fill="rgb(205,97,32)" fg:x="834" fg:w="2"/><text x="67.8351%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7472%" y="565" width="0.0810%" height="15" fill="rgb(217,192,13)" fg:x="836" fg:w="1"/><text x="67.9972%" y="575.50"></text></g><g><title>glob::is_dir (1 samples, 0.08%)</title><rect x="67.8282%" y="565" width="0.0810%" height="15" fill="rgb(215,163,41)" fg:x="837" fg:w="1"/><text x="68.0782%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="67.8282%" y="549" width="0.0810%" height="15" fill="rgb(246,83,29)" fg:x="837" fg:w="1"/><text x="68.0782%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="67.8282%" y="533" width="0.0810%" height="15" fill="rgb(219,2,45)" fg:x="837" fg:w="1"/><text x="68.0782%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="67.8282%" y="517" width="0.0810%" height="15" fill="rgb(242,215,33)" fg:x="837" fg:w="1"/><text x="68.0782%" y="527.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="67.8282%" y="501" width="0.0810%" height="15" fill="rgb(217,1,6)" fg:x="837" fg:w="1"/><text x="68.0782%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="67.8282%" y="485" width="0.0810%" height="15" fill="rgb(207,85,52)" fg:x="837" fg:w="1"/><text x="68.0782%" y="495.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="67.8282%" y="469" width="0.0810%" height="15" fill="rgb(231,171,19)" fg:x="837" fg:w="1"/><text x="68.0782%" y="479.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="67.8282%" y="453" width="0.0810%" height="15" fill="rgb(207,128,4)" fg:x="837" fg:w="1"/><text x="68.0782%" y="463.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="67.7472%" y="597" width="0.3241%" height="15" fill="rgb(219,208,4)" fg:x="836" fg:w="4"/><text x="67.9972%" y="607.50"></text></g><g><title>glob::fill_todo (4 samples, 0.32%)</title><rect x="67.7472%" y="581" width="0.3241%" height="15" fill="rgb(235,161,42)" fg:x="836" fg:w="4"/><text x="67.9972%" y="591.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="67.9092%" y="565" width="0.1621%" height="15" fill="rgb(247,218,18)" fg:x="838" fg:w="2"/><text x="68.1592%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="67.9092%" y="549" width="0.1621%" height="15" fill="rgb(232,114,51)" fg:x="838" fg:w="2"/><text x="68.1592%" y="559.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="67.9092%" y="533" width="0.1621%" height="15" fill="rgb(222,95,3)" fg:x="838" fg:w="2"/><text x="68.1592%" y="543.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="67.9092%" y="517" width="0.1621%" height="15" fill="rgb(240,65,29)" fg:x="838" fg:w="2"/><text x="68.1592%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="67.9092%" y="501" width="0.1621%" height="15" fill="rgb(249,209,20)" fg:x="838" fg:w="2"/><text x="68.1592%" y="511.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="67.9092%" y="485" width="0.1621%" height="15" fill="rgb(241,48,37)" fg:x="838" fg:w="2"/><text x="68.1592%" y="495.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="67.9092%" y="469" width="0.1621%" height="15" fill="rgb(230,140,42)" fg:x="838" fg:w="2"/><text x="68.1592%" y="479.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.0713%" y="565" width="0.0810%" height="15" fill="rgb(230,176,45)" fg:x="840" fg:w="1"/><text x="68.3213%" y="575.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.0713%" y="549" width="0.0810%" height="15" fill="rgb(245,112,21)" fg:x="840" fg:w="1"/><text x="68.3213%" y="559.50"></text></g><g><title>std::path::Components::parse_next_component (1 samples, 0.08%)</title><rect x="68.0713%" y="533" width="0.0810%" height="15" fill="rgb(207,183,35)" fg:x="840" fg:w="1"/><text x="68.3213%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.08%)</title><rect x="68.0713%" y="517" width="0.0810%" height="15" fill="rgb(227,44,33)" fg:x="840" fg:w="1"/><text x="68.3213%" y="527.50"></text></g><g><title>std::path::Components::parse_next_component::{{closure}} (1 samples, 0.08%)</title><rect x="68.0713%" y="501" width="0.0810%" height="15" fill="rgb(246,120,21)" fg:x="840" fg:w="1"/><text x="68.3213%" y="511.50"></text></g><g><title>std::path::Components::is_sep_byte (1 samples, 0.08%)</title><rect x="68.0713%" y="485" width="0.0810%" height="15" fill="rgb(235,57,52)" fg:x="840" fg:w="1"/><text x="68.3213%" y="495.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (27 samples, 2.19%)</title><rect x="66.0454%" y="709" width="2.1880%" height="15" fill="rgb(238,84,10)" fg:x="815" fg:w="27"/><text x="66.2954%" y="719.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (26 samples, 2.11%)</title><rect x="66.1264%" y="693" width="2.1070%" height="15" fill="rgb(251,200,32)" fg:x="816" fg:w="26"/><text x="66.3764%" y="703.50">e..</text></g><g><title>engine::session::Session::new (26 samples, 2.11%)</title><rect x="66.1264%" y="677" width="2.1070%" height="15" fill="rgb(247,159,13)" fg:x="816" fg:w="26"/><text x="66.3764%" y="687.50">e..</text></g><g><title>engine::session::Session::initialize (24 samples, 1.94%)</title><rect x="66.2885%" y="661" width="1.9449%" height="15" fill="rgb(238,64,4)" fg:x="818" fg:w="24"/><text x="66.5385%" y="671.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::initialize (24 samples, 1.94%)</title><rect x="66.2885%" y="645" width="1.9449%" height="15" fill="rgb(221,131,51)" fg:x="818" fg:w="24"/><text x="66.5385%" y="655.50">k..</text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (10 samples, 0.81%)</title><rect x="67.4230%" y="629" width="0.8104%" height="15" fill="rgb(242,5,29)" fg:x="832" fg:w="10"/><text x="67.6730%" y="639.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (6 samples, 0.49%)</title><rect x="67.7472%" y="613" width="0.4862%" height="15" fill="rgb(214,130,32)" fg:x="836" fg:w="6"/><text x="67.9972%" y="623.50"></text></g><g><title>glob::glob (2 samples, 0.16%)</title><rect x="68.0713%" y="597" width="0.1621%" height="15" fill="rgb(244,210,16)" fg:x="840" fg:w="2"/><text x="68.3213%" y="607.50"></text></g><g><title>glob::glob_with (2 samples, 0.16%)</title><rect x="68.0713%" y="581" width="0.1621%" height="15" fill="rgb(234,48,26)" fg:x="840" fg:w="2"/><text x="68.3213%" y="591.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.08%)</title><rect x="68.1524%" y="565" width="0.0810%" height="15" fill="rgb(231,82,38)" fg:x="841" fg:w="1"/><text x="68.4024%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1524%" y="549" width="0.0810%" height="15" fill="rgb(254,128,41)" fg:x="841" fg:w="1"/><text x="68.4024%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1524%" y="533" width="0.0810%" height="15" fill="rgb(212,73,49)" fg:x="841" fg:w="1"/><text x="68.4024%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1524%" y="517" width="0.0810%" height="15" fill="rgb(205,62,54)" fg:x="841" fg:w="1"/><text x="68.4024%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1524%" y="501" width="0.0810%" height="15" fill="rgb(228,0,8)" fg:x="841" fg:w="1"/><text x="68.4024%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.1524%" y="485" width="0.0810%" height="15" fill="rgb(251,28,17)" fg:x="841" fg:w="1"/><text x="68.4024%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.1524%" y="469" width="0.0810%" height="15" fill="rgb(238,105,27)" fg:x="841" fg:w="1"/><text x="68.4024%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.2334%" y="645" width="0.0810%" height="15" fill="rgb(237,216,33)" fg:x="842" fg:w="1"/><text x="68.4834%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="68.2334%" y="629" width="0.0810%" height="15" fill="rgb(229,228,25)" fg:x="842" fg:w="1"/><text x="68.4834%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="68.2334%" y="613" width="0.0810%" height="15" fill="rgb(233,75,23)" fg:x="842" fg:w="1"/><text x="68.4834%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.3144%" y="565" width="0.0810%" height="15" fill="rgb(231,207,16)" fg:x="843" fg:w="1"/><text x="68.5644%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.3144%" y="549" width="0.0810%" height="15" fill="rgb(231,191,45)" fg:x="843" fg:w="1"/><text x="68.5644%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.3144%" y="533" width="0.0810%" height="15" fill="rgb(224,133,17)" fg:x="843" fg:w="1"/><text x="68.5644%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.3144%" y="517" width="0.0810%" height="15" fill="rgb(209,178,27)" fg:x="843" fg:w="1"/><text x="68.5644%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="68.3144%" y="581" width="0.1621%" height="15" fill="rgb(218,37,11)" fg:x="843" fg:w="2"/><text x="68.5644%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.3955%" y="565" width="0.0810%" height="15" fill="rgb(251,226,25)" fg:x="844" fg:w="1"/><text x="68.6455%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="68.4765%" y="565" width="0.1621%" height="15" fill="rgb(209,222,27)" fg:x="845" fg:w="2"/><text x="68.7265%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.5575%" y="549" width="0.0810%" height="15" fill="rgb(238,22,21)" fg:x="846" fg:w="1"/><text x="68.8075%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.5575%" y="533" width="0.0810%" height="15" fill="rgb(233,161,25)" fg:x="846" fg:w="1"/><text x="68.8075%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.5575%" y="517" width="0.0810%" height="15" fill="rgb(226,122,53)" fg:x="846" fg:w="1"/><text x="68.8075%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.5575%" y="501" width="0.0810%" height="15" fill="rgb(220,123,17)" fg:x="846" fg:w="1"/><text x="68.8075%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.5575%" y="485" width="0.0810%" height="15" fill="rgb(230,224,35)" fg:x="846" fg:w="1"/><text x="68.8075%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.5575%" y="469" width="0.0810%" height="15" fill="rgb(246,83,8)" fg:x="846" fg:w="1"/><text x="68.8075%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.7196%" y="533" width="0.0810%" height="15" fill="rgb(230,214,17)" fg:x="848" fg:w="1"/><text x="68.9696%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.7196%" y="517" width="0.0810%" height="15" fill="rgb(222,97,18)" fg:x="848" fg:w="1"/><text x="68.9696%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.7196%" y="501" width="0.0810%" height="15" fill="rgb(206,79,1)" fg:x="848" fg:w="1"/><text x="68.9696%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.7196%" y="485" width="0.0810%" height="15" fill="rgb(214,121,34)" fg:x="848" fg:w="1"/><text x="68.9696%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.7196%" y="469" width="0.0810%" height="15" fill="rgb(249,199,46)" fg:x="848" fg:w="1"/><text x="68.9696%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.7196%" y="453" width="0.0810%" height="15" fill="rgb(214,222,46)" fg:x="848" fg:w="1"/><text x="68.9696%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.7196%" y="437" width="0.0810%" height="15" fill="rgb(248,168,30)" fg:x="848" fg:w="1"/><text x="68.9696%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.6386%" y="565" width="0.2431%" height="15" fill="rgb(226,14,28)" fg:x="847" fg:w="3"/><text x="68.8886%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="68.6386%" y="549" width="0.2431%" height="15" fill="rgb(253,123,1)" fg:x="847" fg:w="3"/><text x="68.8886%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.8006%" y="533" width="0.0810%" height="15" fill="rgb(225,24,42)" fg:x="849" fg:w="1"/><text x="69.0506%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.8006%" y="517" width="0.0810%" height="15" fill="rgb(216,161,37)" fg:x="849" fg:w="1"/><text x="69.0506%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.8006%" y="501" width="0.0810%" height="15" fill="rgb(251,164,26)" fg:x="849" fg:w="1"/><text x="69.0506%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.65%)</title><rect x="68.3144%" y="597" width="0.6483%" height="15" fill="rgb(219,177,3)" fg:x="843" fg:w="8"/><text x="68.5644%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="68.4765%" y="581" width="0.4862%" height="15" fill="rgb(222,65,0)" fg:x="845" fg:w="6"/><text x="68.7265%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.8817%" y="565" width="0.0810%" height="15" fill="rgb(223,69,54)" fg:x="850" fg:w="1"/><text x="69.1317%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.9627%" y="549" width="0.0810%" height="15" fill="rgb(235,30,27)" fg:x="851" fg:w="1"/><text x="69.2127%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9627%" y="533" width="0.0810%" height="15" fill="rgb(220,183,50)" fg:x="851" fg:w="1"/><text x="69.2127%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.9627%" y="597" width="0.2431%" height="15" fill="rgb(248,198,15)" fg:x="851" fg:w="3"/><text x="69.2127%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="68.9627%" y="581" width="0.2431%" height="15" fill="rgb(222,211,4)" fg:x="851" fg:w="3"/><text x="69.2127%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="68.9627%" y="565" width="0.2431%" height="15" fill="rgb(214,102,34)" fg:x="851" fg:w="3"/><text x="69.2127%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="69.0438%" y="549" width="0.1621%" height="15" fill="rgb(245,92,5)" fg:x="852" fg:w="2"/><text x="69.2938%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1248%" y="533" width="0.0810%" height="15" fill="rgb(252,72,51)" fg:x="853" fg:w="1"/><text x="69.3748%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="69.2058%" y="581" width="0.0810%" height="15" fill="rgb(252,208,19)" fg:x="854" fg:w="1"/><text x="69.4558%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="69.2058%" y="565" width="0.0810%" height="15" fill="rgb(211,69,7)" fg:x="854" fg:w="1"/><text x="69.4558%" y="575.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.13%)</title><rect x="68.2334%" y="693" width="1.1345%" height="15" fill="rgb(211,27,16)" fg:x="842" fg:w="14"/><text x="68.4834%" y="703.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.13%)</title><rect x="68.2334%" y="677" width="1.1345%" height="15" fill="rgb(219,216,14)" fg:x="842" fg:w="14"/><text x="68.4834%" y="687.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.13%)</title><rect x="68.2334%" y="661" width="1.1345%" height="15" fill="rgb(219,71,8)" fg:x="842" fg:w="14"/><text x="68.4834%" y="671.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.05%)</title><rect x="68.3144%" y="645" width="1.0535%" height="15" fill="rgb(223,170,53)" fg:x="843" fg:w="13"/><text x="68.5644%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.05%)</title><rect x="68.3144%" y="629" width="1.0535%" height="15" fill="rgb(246,21,26)" fg:x="843" fg:w="13"/><text x="68.5644%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (13 samples, 1.05%)</title><rect x="68.3144%" y="613" width="1.0535%" height="15" fill="rgb(248,20,46)" fg:x="843" fg:w="13"/><text x="68.5644%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (2 samples, 0.16%)</title><rect x="69.2058%" y="597" width="0.1621%" height="15" fill="rgb(252,94,11)" fg:x="854" fg:w="2"/><text x="69.4558%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="69.2869%" y="581" width="0.0810%" height="15" fill="rgb(236,163,8)" fg:x="855" fg:w="1"/><text x="69.5369%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.2869%" y="565" width="0.0810%" height="15" fill="rgb(217,221,45)" fg:x="855" fg:w="1"/><text x="69.5369%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="69.2869%" y="549" width="0.0810%" height="15" fill="rgb(238,38,17)" fg:x="855" fg:w="1"/><text x="69.5369%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="69.2869%" y="533" width="0.0810%" height="15" fill="rgb(242,210,23)" fg:x="855" fg:w="1"/><text x="69.5369%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.2869%" y="517" width="0.0810%" height="15" fill="rgb(250,86,53)" fg:x="855" fg:w="1"/><text x="69.5369%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.2869%" y="501" width="0.0810%" height="15" fill="rgb(223,168,25)" fg:x="855" fg:w="1"/><text x="69.5369%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.2869%" y="485" width="0.0810%" height="15" fill="rgb(251,189,4)" fg:x="855" fg:w="1"/><text x="69.5369%" y="495.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.3679%" y="677" width="0.0810%" height="15" fill="rgb(245,19,28)" fg:x="856" fg:w="1"/><text x="69.6179%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="69.3679%" y="661" width="0.0810%" height="15" fill="rgb(207,10,34)" fg:x="856" fg:w="1"/><text x="69.6179%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.3679%" y="645" width="0.0810%" height="15" fill="rgb(235,153,31)" fg:x="856" fg:w="1"/><text x="69.6179%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3679%" y="629" width="0.0810%" height="15" fill="rgb(228,72,37)" fg:x="856" fg:w="1"/><text x="69.6179%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3679%" y="613" width="0.0810%" height="15" fill="rgb(215,15,16)" fg:x="856" fg:w="1"/><text x="69.6179%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3679%" y="597" width="0.0810%" height="15" fill="rgb(250,119,29)" fg:x="856" fg:w="1"/><text x="69.6179%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="69.4489%" y="661" width="0.0810%" height="15" fill="rgb(214,59,1)" fg:x="857" fg:w="1"/><text x="69.6989%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="69.4489%" y="645" width="0.0810%" height="15" fill="rgb(223,109,25)" fg:x="857" fg:w="1"/><text x="69.6989%" y="655.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::de::Deserialize for engine::identifiers::model::Identifiers&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.4489%" y="629" width="0.0810%" height="15" fill="rgb(230,198,22)" fg:x="857" fg:w="1"/><text x="69.6989%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4489%" y="613" width="0.0810%" height="15" fill="rgb(245,184,46)" fg:x="857" fg:w="1"/><text x="69.6989%" y="623.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.4489%" y="597" width="0.0810%" height="15" fill="rgb(253,73,16)" fg:x="857" fg:w="1"/><text x="69.6989%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4489%" y="581" width="0.0810%" height="15" fill="rgb(206,94,45)" fg:x="857" fg:w="1"/><text x="69.6989%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.4489%" y="565" width="0.0810%" height="15" fill="rgb(236,83,27)" fg:x="857" fg:w="1"/><text x="69.6989%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.4489%" y="549" width="0.0810%" height="15" fill="rgb(220,196,8)" fg:x="857" fg:w="1"/><text x="69.6989%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="69.5300%" y="645" width="0.0810%" height="15" fill="rgb(254,185,14)" fg:x="858" fg:w="1"/><text x="69.7800%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.5300%" y="629" width="0.0810%" height="15" fill="rgb(226,50,22)" fg:x="858" fg:w="1"/><text x="69.7800%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="69.5300%" y="613" width="0.0810%" height="15" fill="rgb(253,147,0)" fg:x="858" fg:w="1"/><text x="69.7800%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5300%" y="597" width="0.0810%" height="15" fill="rgb(252,46,33)" fg:x="858" fg:w="1"/><text x="69.7800%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="69.3679%" y="693" width="0.3241%" height="15" fill="rgb(242,22,54)" fg:x="856" fg:w="4"/><text x="69.6179%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="69.4489%" y="677" width="0.2431%" height="15" fill="rgb(223,178,32)" fg:x="857" fg:w="3"/><text x="69.6989%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="69.5300%" y="661" width="0.1621%" height="15" fill="rgb(214,106,53)" fg:x="858" fg:w="2"/><text x="69.7800%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6110%" y="645" width="0.0810%" height="15" fill="rgb(232,65,50)" fg:x="859" fg:w="1"/><text x="69.8610%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.6110%" y="629" width="0.0810%" height="15" fill="rgb(231,110,28)" fg:x="859" fg:w="1"/><text x="69.8610%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="69.6110%" y="613" width="0.0810%" height="15" fill="rgb(216,71,40)" fg:x="859" fg:w="1"/><text x="69.8610%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="69.6110%" y="597" width="0.0810%" height="15" fill="rgb(229,89,53)" fg:x="859" fg:w="1"/><text x="69.8610%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.6110%" y="581" width="0.0810%" height="15" fill="rgb(210,124,14)" fg:x="859" fg:w="1"/><text x="69.8610%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6110%" y="565" width="0.0810%" height="15" fill="rgb(236,213,6)" fg:x="859" fg:w="1"/><text x="69.8610%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.6110%" y="549" width="0.0810%" height="15" fill="rgb(228,41,5)" fg:x="859" fg:w="1"/><text x="69.8610%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.6110%" y="533" width="0.0810%" height="15" fill="rgb(221,167,25)" fg:x="859" fg:w="1"/><text x="69.8610%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="69.6921%" y="645" width="0.0810%" height="15" fill="rgb(228,144,37)" fg:x="860" fg:w="1"/><text x="69.9421%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.6921%" y="629" width="0.0810%" height="15" fill="rgb(227,189,38)" fg:x="860" fg:w="1"/><text x="69.9421%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6921%" y="613" width="0.0810%" height="15" fill="rgb(218,8,2)" fg:x="860" fg:w="1"/><text x="69.9421%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.6921%" y="597" width="0.0810%" height="15" fill="rgb(209,61,28)" fg:x="860" fg:w="1"/><text x="69.9421%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.7731%" y="517" width="0.0810%" height="15" fill="rgb(233,140,39)" fg:x="861" fg:w="1"/><text x="70.0231%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.7731%" y="501" width="0.0810%" height="15" fill="rgb(251,66,48)" fg:x="861" fg:w="1"/><text x="70.0231%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (3 samples, 0.24%)</title><rect x="69.6921%" y="693" width="0.2431%" height="15" fill="rgb(210,44,45)" fg:x="860" fg:w="3"/><text x="69.9421%" y="703.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="69.6921%" y="677" width="0.2431%" height="15" fill="rgb(214,136,46)" fg:x="860" fg:w="3"/><text x="69.9421%" y="687.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="69.6921%" y="661" width="0.2431%" height="15" fill="rgb(207,130,50)" fg:x="860" fg:w="3"/><text x="69.9421%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="69.7731%" y="645" width="0.1621%" height="15" fill="rgb(228,102,49)" fg:x="861" fg:w="2"/><text x="70.0231%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="69.7731%" y="629" width="0.1621%" height="15" fill="rgb(253,55,1)" fg:x="861" fg:w="2"/><text x="70.0231%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="69.7731%" y="613" width="0.1621%" height="15" fill="rgb(238,222,9)" fg:x="861" fg:w="2"/><text x="70.0231%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="69.7731%" y="597" width="0.1621%" height="15" fill="rgb(246,99,6)" fg:x="861" fg:w="2"/><text x="70.0231%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.7731%" y="581" width="0.1621%" height="15" fill="rgb(219,110,26)" fg:x="861" fg:w="2"/><text x="70.0231%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.7731%" y="565" width="0.1621%" height="15" fill="rgb(239,160,33)" fg:x="861" fg:w="2"/><text x="70.0231%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.7731%" y="549" width="0.1621%" height="15" fill="rgb(220,202,23)" fg:x="861" fg:w="2"/><text x="70.0231%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.7731%" y="533" width="0.1621%" height="15" fill="rgb(208,80,26)" fg:x="861" fg:w="2"/><text x="70.0231%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8541%" y="517" width="0.0810%" height="15" fill="rgb(243,85,7)" fg:x="862" fg:w="1"/><text x="70.1041%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8541%" y="501" width="0.0810%" height="15" fill="rgb(228,77,47)" fg:x="862" fg:w="1"/><text x="70.1041%" y="511.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="69.9352%" y="677" width="0.0810%" height="15" fill="rgb(212,226,8)" fg:x="863" fg:w="1"/><text x="70.1852%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="69.9352%" y="661" width="0.0810%" height="15" fill="rgb(241,120,54)" fg:x="863" fg:w="1"/><text x="70.1852%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0162%" y="677" width="0.0810%" height="15" fill="rgb(226,80,16)" fg:x="864" fg:w="1"/><text x="70.2662%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0162%" y="661" width="0.0810%" height="15" fill="rgb(240,76,13)" fg:x="864" fg:w="1"/><text x="70.2662%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.0162%" y="645" width="0.0810%" height="15" fill="rgb(252,74,8)" fg:x="864" fg:w="1"/><text x="70.2662%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0162%" y="629" width="0.0810%" height="15" fill="rgb(244,155,2)" fg:x="864" fg:w="1"/><text x="70.2662%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="70.0972%" y="645" width="0.0810%" height="15" fill="rgb(215,81,35)" fg:x="865" fg:w="1"/><text x="70.3472%" y="655.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="70.0972%" y="677" width="0.1621%" height="15" fill="rgb(206,55,2)" fg:x="865" fg:w="2"/><text x="70.3472%" y="687.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="70.0972%" y="661" width="0.1621%" height="15" fill="rgb(231,2,34)" fg:x="865" fg:w="2"/><text x="70.3472%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="70.1783%" y="645" width="0.0810%" height="15" fill="rgb(242,176,48)" fg:x="866" fg:w="1"/><text x="70.4283%" y="655.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="70.1783%" y="629" width="0.0810%" height="15" fill="rgb(249,31,36)" fg:x="866" fg:w="1"/><text x="70.4283%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="70.1783%" y="613" width="0.0810%" height="15" fill="rgb(205,18,17)" fg:x="866" fg:w="1"/><text x="70.4283%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="70.1783%" y="597" width="0.0810%" height="15" fill="rgb(254,130,5)" fg:x="866" fg:w="1"/><text x="70.4283%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="70.2593%" y="677" width="0.0810%" height="15" fill="rgb(229,42,45)" fg:x="867" fg:w="1"/><text x="70.5093%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.2593%" y="661" width="0.0810%" height="15" fill="rgb(245,95,25)" fg:x="867" fg:w="1"/><text x="70.5093%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.2593%" y="645" width="0.0810%" height="15" fill="rgb(249,193,38)" fg:x="867" fg:w="1"/><text x="70.5093%" y="655.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="70.2593%" y="629" width="0.0810%" height="15" fill="rgb(241,140,43)" fg:x="867" fg:w="1"/><text x="70.5093%" y="639.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="70.2593%" y="613" width="0.0810%" height="15" fill="rgb(245,78,48)" fg:x="867" fg:w="1"/><text x="70.5093%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="70.2593%" y="597" width="0.0810%" height="15" fill="rgb(214,92,39)" fg:x="867" fg:w="1"/><text x="70.5093%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="70.2593%" y="581" width="0.0810%" height="15" fill="rgb(211,189,14)" fg:x="867" fg:w="1"/><text x="70.5093%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="70.2593%" y="565" width="0.0810%" height="15" fill="rgb(218,7,24)" fg:x="867" fg:w="1"/><text x="70.5093%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.3404%" y="613" width="0.0810%" height="15" fill="rgb(224,200,49)" fg:x="868" fg:w="1"/><text x="70.5904%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="70.3404%" y="597" width="0.0810%" height="15" fill="rgb(218,210,14)" fg:x="868" fg:w="1"/><text x="70.5904%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.4214%" y="613" width="0.0810%" height="15" fill="rgb(234,142,31)" fg:x="869" fg:w="1"/><text x="70.6714%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.4214%" y="597" width="0.0810%" height="15" fill="rgb(227,165,2)" fg:x="869" fg:w="1"/><text x="70.6714%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="70.4214%" y="581" width="0.0810%" height="15" fill="rgb(232,44,46)" fg:x="869" fg:w="1"/><text x="70.6714%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.5835%" y="533" width="0.0810%" height="15" fill="rgb(236,149,47)" fg:x="871" fg:w="1"/><text x="70.8335%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.5835%" y="517" width="0.0810%" height="15" fill="rgb(227,45,31)" fg:x="871" fg:w="1"/><text x="70.8335%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.5835%" y="501" width="0.0810%" height="15" fill="rgb(240,176,51)" fg:x="871" fg:w="1"/><text x="70.8335%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.5835%" y="485" width="0.0810%" height="15" fill="rgb(249,146,41)" fg:x="871" fg:w="1"/><text x="70.8335%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.5835%" y="469" width="0.0810%" height="15" fill="rgb(213,208,4)" fg:x="871" fg:w="1"/><text x="70.8335%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.5835%" y="453" width="0.0810%" height="15" fill="rgb(245,84,36)" fg:x="871" fg:w="1"/><text x="70.8335%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.5835%" y="437" width="0.0810%" height="15" fill="rgb(254,84,18)" fg:x="871" fg:w="1"/><text x="70.8335%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="70.5835%" y="549" width="0.1621%" height="15" fill="rgb(225,38,54)" fg:x="871" fg:w="2"/><text x="70.8335%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.6645%" y="533" width="0.0810%" height="15" fill="rgb(246,50,30)" fg:x="872" fg:w="1"/><text x="70.9145%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.6645%" y="517" width="0.0810%" height="15" fill="rgb(246,148,9)" fg:x="872" fg:w="1"/><text x="70.9145%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.7455%" y="533" width="0.0810%" height="15" fill="rgb(223,75,4)" fg:x="873" fg:w="1"/><text x="70.9955%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.9076%" y="469" width="0.0810%" height="15" fill="rgb(239,148,41)" fg:x="875" fg:w="1"/><text x="71.1576%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.9076%" y="453" width="0.0810%" height="15" fill="rgb(205,195,3)" fg:x="875" fg:w="1"/><text x="71.1576%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.9076%" y="437" width="0.0810%" height="15" fill="rgb(254,161,1)" fg:x="875" fg:w="1"/><text x="71.1576%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.9076%" y="421" width="0.0810%" height="15" fill="rgb(211,229,8)" fg:x="875" fg:w="1"/><text x="71.1576%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="70.8266%" y="517" width="0.2431%" height="15" fill="rgb(220,97,9)" fg:x="874" fg:w="3"/><text x="71.0766%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="70.8266%" y="501" width="0.2431%" height="15" fill="rgb(240,218,8)" fg:x="874" fg:w="3"/><text x="71.0766%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="70.8266%" y="485" width="0.2431%" height="15" fill="rgb(250,44,0)" fg:x="874" fg:w="3"/><text x="71.0766%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="70.9887%" y="469" width="0.0810%" height="15" fill="rgb(236,41,53)" fg:x="876" fg:w="1"/><text x="71.2387%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.9887%" y="453" width="0.0810%" height="15" fill="rgb(218,227,13)" fg:x="876" fg:w="1"/><text x="71.2387%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="71.0697%" y="517" width="0.1621%" height="15" fill="rgb(217,94,32)" fg:x="877" fg:w="2"/><text x="71.3197%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.1507%" y="501" width="0.0810%" height="15" fill="rgb(213,217,12)" fg:x="878" fg:w="1"/><text x="71.4007%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.1507%" y="485" width="0.0810%" height="15" fill="rgb(229,13,46)" fg:x="878" fg:w="1"/><text x="71.4007%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.1507%" y="469" width="0.0810%" height="15" fill="rgb(243,139,5)" fg:x="878" fg:w="1"/><text x="71.4007%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="71.2318%" y="501" width="0.2431%" height="15" fill="rgb(249,38,45)" fg:x="879" fg:w="3"/><text x="71.4818%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="71.2318%" y="485" width="0.2431%" height="15" fill="rgb(216,70,11)" fg:x="879" fg:w="3"/><text x="71.4818%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="71.3128%" y="469" width="0.1621%" height="15" fill="rgb(253,101,25)" fg:x="880" fg:w="2"/><text x="71.5628%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="71.3128%" y="453" width="0.1621%" height="15" fill="rgb(207,197,30)" fg:x="880" fg:w="2"/><text x="71.5628%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="71.3128%" y="437" width="0.1621%" height="15" fill="rgb(238,87,13)" fg:x="880" fg:w="2"/><text x="71.5628%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="71.3128%" y="421" width="0.1621%" height="15" fill="rgb(215,155,8)" fg:x="880" fg:w="2"/><text x="71.5628%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="71.3128%" y="405" width="0.1621%" height="15" fill="rgb(239,166,38)" fg:x="880" fg:w="2"/><text x="71.5628%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.13%)</title><rect x="70.5024%" y="565" width="1.1345%" height="15" fill="rgb(240,194,35)" fg:x="870" fg:w="14"/><text x="70.7524%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="70.7455%" y="549" width="0.8914%" height="15" fill="rgb(219,10,44)" fg:x="873" fg:w="11"/><text x="70.9955%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="70.8266%" y="533" width="0.8104%" height="15" fill="rgb(251,220,35)" fg:x="874" fg:w="10"/><text x="71.0766%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="71.2318%" y="517" width="0.4052%" height="15" fill="rgb(218,117,13)" fg:x="879" fg:w="5"/><text x="71.4818%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.4749%" y="501" width="0.1621%" height="15" fill="rgb(221,213,40)" fg:x="882" fg:w="2"/><text x="71.7249%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.5559%" y="485" width="0.0810%" height="15" fill="rgb(251,224,35)" fg:x="883" fg:w="1"/><text x="71.8059%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="71.6370%" y="565" width="0.2431%" height="15" fill="rgb(241,33,39)" fg:x="884" fg:w="3"/><text x="71.8870%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="71.6370%" y="549" width="0.2431%" height="15" fill="rgb(222,74,17)" fg:x="884" fg:w="3"/><text x="71.8870%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.7180%" y="533" width="0.1621%" height="15" fill="rgb(225,103,0)" fg:x="885" fg:w="2"/><text x="71.9680%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="71.7180%" y="517" width="0.1621%" height="15" fill="rgb(240,0,12)" fg:x="885" fg:w="2"/><text x="71.9680%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7990%" y="501" width="0.0810%" height="15" fill="rgb(233,213,37)" fg:x="886" fg:w="1"/><text x="72.0490%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.8801%" y="437" width="0.0810%" height="15" fill="rgb(225,84,52)" fg:x="887" fg:w="1"/><text x="72.1301%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8801%" y="421" width="0.0810%" height="15" fill="rgb(247,160,51)" fg:x="887" fg:w="1"/><text x="72.1301%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="71.8801%" y="485" width="0.2431%" height="15" fill="rgb(244,60,51)" fg:x="887" fg:w="3"/><text x="72.1301%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="71.8801%" y="469" width="0.2431%" height="15" fill="rgb(233,114,7)" fg:x="887" fg:w="3"/><text x="72.1301%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="71.8801%" y="453" width="0.2431%" height="15" fill="rgb(246,136,16)" fg:x="887" fg:w="3"/><text x="72.1301%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="71.9611%" y="437" width="0.1621%" height="15" fill="rgb(243,114,45)" fg:x="888" fg:w="2"/><text x="72.2111%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="71.9611%" y="421" width="0.1621%" height="15" fill="rgb(247,183,43)" fg:x="888" fg:w="2"/><text x="72.2111%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="71.8801%" y="501" width="0.3241%" height="15" fill="rgb(251,210,42)" fg:x="887" fg:w="4"/><text x="72.1301%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.1232%" y="485" width="0.0810%" height="15" fill="rgb(221,88,35)" fg:x="890" fg:w="1"/><text x="72.3732%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.1232%" y="469" width="0.0810%" height="15" fill="rgb(242,21,20)" fg:x="890" fg:w="1"/><text x="72.3732%" y="479.50"></text></g><g><title>engine::session::Session::flush (24 samples, 1.94%)</title><rect x="70.3404%" y="677" width="1.9449%" height="15" fill="rgb(233,226,36)" fg:x="868" fg:w="24"/><text x="70.5904%" y="687.50">e..</text></g><g><title>engine::session::Session::save_changes (24 samples, 1.94%)</title><rect x="70.3404%" y="661" width="1.9449%" height="15" fill="rgb(243,189,34)" fg:x="868" fg:w="24"/><text x="70.5904%" y="671.50">e..</text></g><g><title>engine::session::state::State::close (24 samples, 1.94%)</title><rect x="70.3404%" y="645" width="1.9449%" height="15" fill="rgb(207,145,50)" fg:x="868" fg:w="24"/><text x="70.5904%" y="655.50">e..</text></g><g><title>engine::session::state::State::flush_entities (24 samples, 1.94%)</title><rect x="70.3404%" y="629" width="1.9449%" height="15" fill="rgb(242,1,50)" fg:x="868" fg:w="24"/><text x="70.5904%" y="639.50">e..</text></g><g><title>core::iter::adapters::try_process (22 samples, 1.78%)</title><rect x="70.5024%" y="613" width="1.7828%" height="15" fill="rgb(231,65,32)" fg:x="870" fg:w="22"/><text x="70.7524%" y="623.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22 samples, 1.78%)</title><rect x="70.5024%" y="597" width="1.7828%" height="15" fill="rgb(208,68,49)" fg:x="870" fg:w="22"/><text x="70.7524%" y="607.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.78%)</title><rect x="70.5024%" y="581" width="1.7828%" height="15" fill="rgb(253,54,49)" fg:x="870" fg:w="22"/><text x="70.7524%" y="591.50">e..</text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.41%)</title><rect x="71.8801%" y="565" width="0.4052%" height="15" fill="rgb(245,186,24)" fg:x="887" fg:w="5"/><text x="72.1301%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="71.8801%" y="549" width="0.4052%" height="15" fill="rgb(209,2,41)" fg:x="887" fg:w="5"/><text x="72.1301%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="71.8801%" y="533" width="0.4052%" height="15" fill="rgb(242,208,54)" fg:x="887" fg:w="5"/><text x="72.1301%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="71.8801%" y="517" width="0.4052%" height="15" fill="rgb(225,9,51)" fg:x="887" fg:w="5"/><text x="72.1301%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2042%" y="501" width="0.0810%" height="15" fill="rgb(207,207,25)" fg:x="891" fg:w="1"/><text x="72.4542%" y="511.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="72.2853%" y="677" width="0.0810%" height="15" fill="rgb(253,96,18)" fg:x="892" fg:w="1"/><text x="72.5353%" y="687.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="72.2853%" y="661" width="0.0810%" height="15" fill="rgb(252,215,20)" fg:x="892" fg:w="1"/><text x="72.5353%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.2853%" y="645" width="0.0810%" height="15" fill="rgb(245,227,26)" fg:x="892" fg:w="1"/><text x="72.5353%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2853%" y="629" width="0.0810%" height="15" fill="rgb(241,208,0)" fg:x="892" fg:w="1"/><text x="72.5353%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.3663%" y="661" width="0.0810%" height="15" fill="rgb(224,130,10)" fg:x="893" fg:w="1"/><text x="72.6163%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="72.3663%" y="645" width="0.0810%" height="15" fill="rgb(237,29,0)" fg:x="893" fg:w="1"/><text x="72.6163%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3663%" y="629" width="0.0810%" height="15" fill="rgb(219,27,41)" fg:x="893" fg:w="1"/><text x="72.6163%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3663%" y="613" width="0.0810%" height="15" fill="rgb(245,101,19)" fg:x="893" fg:w="1"/><text x="72.6163%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.3663%" y="597" width="0.0810%" height="15" fill="rgb(243,44,37)" fg:x="893" fg:w="1"/><text x="72.6163%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3663%" y="581" width="0.0810%" height="15" fill="rgb(228,213,43)" fg:x="893" fg:w="1"/><text x="72.6163%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.3663%" y="565" width="0.0810%" height="15" fill="rgb(219,163,21)" fg:x="893" fg:w="1"/><text x="72.6163%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.3663%" y="549" width="0.0810%" height="15" fill="rgb(234,86,24)" fg:x="893" fg:w="1"/><text x="72.6163%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="72.5284%" y="645" width="0.1621%" height="15" fill="rgb(225,10,24)" fg:x="895" fg:w="2"/><text x="72.7784%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.5284%" y="629" width="0.1621%" height="15" fill="rgb(218,109,7)" fg:x="895" fg:w="2"/><text x="72.7784%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.5284%" y="613" width="0.1621%" height="15" fill="rgb(210,20,26)" fg:x="895" fg:w="2"/><text x="72.7784%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="72.6094%" y="597" width="0.0810%" height="15" fill="rgb(216,18,1)" fg:x="896" fg:w="1"/><text x="72.8594%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6094%" y="581" width="0.0810%" height="15" fill="rgb(206,163,23)" fg:x="896" fg:w="1"/><text x="72.8594%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.6094%" y="565" width="0.0810%" height="15" fill="rgb(229,150,31)" fg:x="896" fg:w="1"/><text x="72.8594%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.6094%" y="549" width="0.0810%" height="15" fill="rgb(231,10,5)" fg:x="896" fg:w="1"/><text x="72.8594%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6094%" y="533" width="0.0810%" height="15" fill="rgb(250,40,50)" fg:x="896" fg:w="1"/><text x="72.8594%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="72.6904%" y="645" width="0.0810%" height="15" fill="rgb(217,119,7)" fg:x="897" fg:w="1"/><text x="72.9404%" y="655.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="72.6904%" y="629" width="0.0810%" height="15" fill="rgb(245,214,40)" fg:x="897" fg:w="1"/><text x="72.9404%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="72.6904%" y="613" width="0.0810%" height="15" fill="rgb(216,187,1)" fg:x="897" fg:w="1"/><text x="72.9404%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="72.6904%" y="597" width="0.0810%" height="15" fill="rgb(237,146,21)" fg:x="897" fg:w="1"/><text x="72.9404%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="72.7715%" y="629" width="0.0810%" height="15" fill="rgb(210,174,47)" fg:x="898" fg:w="1"/><text x="73.0215%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="72.7715%" y="613" width="0.0810%" height="15" fill="rgb(218,111,39)" fg:x="898" fg:w="1"/><text x="73.0215%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7715%" y="597" width="0.0810%" height="15" fill="rgb(224,95,19)" fg:x="898" fg:w="1"/><text x="73.0215%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7715%" y="581" width="0.0810%" height="15" fill="rgb(234,15,38)" fg:x="898" fg:w="1"/><text x="73.0215%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="72.7715%" y="565" width="0.0810%" height="15" fill="rgb(246,56,12)" fg:x="898" fg:w="1"/><text x="73.0215%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.7715%" y="549" width="0.0810%" height="15" fill="rgb(247,16,17)" fg:x="898" fg:w="1"/><text x="73.0215%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="72.8525%" y="629" width="0.0810%" height="15" fill="rgb(215,151,11)" fg:x="899" fg:w="1"/><text x="73.1025%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8525%" y="613" width="0.0810%" height="15" fill="rgb(225,16,24)" fg:x="899" fg:w="1"/><text x="73.1025%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.8525%" y="597" width="0.0810%" height="15" fill="rgb(217,117,5)" fg:x="899" fg:w="1"/><text x="73.1025%" y="607.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9335%" y="597" width="0.0810%" height="15" fill="rgb(246,187,53)" fg:x="900" fg:w="1"/><text x="73.1835%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.9335%" y="581" width="0.0810%" height="15" fill="rgb(241,71,40)" fg:x="900" fg:w="1"/><text x="73.1835%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9335%" y="565" width="0.0810%" height="15" fill="rgb(231,67,39)" fg:x="900" fg:w="1"/><text x="73.1835%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9335%" y="549" width="0.0810%" height="15" fill="rgb(222,120,24)" fg:x="900" fg:w="1"/><text x="73.1835%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.9335%" y="533" width="0.0810%" height="15" fill="rgb(248,3,3)" fg:x="900" fg:w="1"/><text x="73.1835%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="73.0146%" y="581" width="0.0810%" height="15" fill="rgb(228,218,5)" fg:x="901" fg:w="1"/><text x="73.2646%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.0146%" y="565" width="0.0810%" height="15" fill="rgb(212,202,43)" fg:x="901" fg:w="1"/><text x="73.2646%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.0146%" y="549" width="0.0810%" height="15" fill="rgb(235,183,2)" fg:x="901" fg:w="1"/><text x="73.2646%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.0146%" y="533" width="0.0810%" height="15" fill="rgb(230,165,10)" fg:x="901" fg:w="1"/><text x="73.2646%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0146%" y="517" width="0.0810%" height="15" fill="rgb(219,54,40)" fg:x="901" fg:w="1"/><text x="73.2646%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0146%" y="501" width="0.0810%" height="15" fill="rgb(244,73,9)" fg:x="901" fg:w="1"/><text x="73.2646%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0146%" y="485" width="0.0810%" height="15" fill="rgb(212,32,45)" fg:x="901" fg:w="1"/><text x="73.2646%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.73%)</title><rect x="72.4473%" y="661" width="0.7293%" height="15" fill="rgb(205,58,31)" fg:x="894" fg:w="9"/><text x="72.6973%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (5 samples, 0.41%)</title><rect x="72.7715%" y="645" width="0.4052%" height="15" fill="rgb(250,120,43)" fg:x="898" fg:w="5"/><text x="73.0215%" y="655.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="72.9335%" y="629" width="0.2431%" height="15" fill="rgb(235,13,10)" fg:x="900" fg:w="3"/><text x="73.1835%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="72.9335%" y="613" width="0.2431%" height="15" fill="rgb(232,219,31)" fg:x="900" fg:w="3"/><text x="73.1835%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="73.0146%" y="597" width="0.1621%" height="15" fill="rgb(218,157,51)" fg:x="901" fg:w="2"/><text x="73.2646%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0956%" y="581" width="0.0810%" height="15" fill="rgb(211,91,52)" fg:x="902" fg:w="1"/><text x="73.3456%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1767%" y="613" width="0.0810%" height="15" fill="rgb(240,173,1)" fg:x="903" fg:w="1"/><text x="73.4267%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1767%" y="597" width="0.0810%" height="15" fill="rgb(248,20,47)" fg:x="903" fg:w="1"/><text x="73.4267%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (12 samples, 0.97%)</title><rect x="72.3663%" y="677" width="0.9724%" height="15" fill="rgb(217,221,40)" fg:x="893" fg:w="12"/><text x="72.6163%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="73.1767%" y="661" width="0.1621%" height="15" fill="rgb(226,149,51)" fg:x="903" fg:w="2"/><text x="73.4267%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.1767%" y="645" width="0.1621%" height="15" fill="rgb(252,193,7)" fg:x="903" fg:w="2"/><text x="73.4267%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.1767%" y="629" width="0.1621%" height="15" fill="rgb(205,123,0)" fg:x="903" fg:w="2"/><text x="73.4267%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2577%" y="613" width="0.0810%" height="15" fill="rgb(233,173,25)" fg:x="904" fg:w="1"/><text x="73.5077%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.3387%" y="645" width="0.0810%" height="15" fill="rgb(216,63,32)" fg:x="905" fg:w="1"/><text x="73.5887%" y="655.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.3387%" y="629" width="0.0810%" height="15" fill="rgb(209,56,45)" fg:x="905" fg:w="1"/><text x="73.5887%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.3387%" y="613" width="0.0810%" height="15" fill="rgb(226,111,49)" fg:x="905" fg:w="1"/><text x="73.5887%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.3387%" y="597" width="0.0810%" height="15" fill="rgb(244,181,21)" fg:x="905" fg:w="1"/><text x="73.5887%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.3387%" y="581" width="0.0810%" height="15" fill="rgb(222,126,15)" fg:x="905" fg:w="1"/><text x="73.5887%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.4198%" y="597" width="0.0810%" height="15" fill="rgb(222,95,17)" fg:x="906" fg:w="1"/><text x="73.6698%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.4198%" y="581" width="0.0810%" height="15" fill="rgb(254,46,5)" fg:x="906" fg:w="1"/><text x="73.6698%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.24%)</title><rect x="73.3387%" y="677" width="0.2431%" height="15" fill="rgb(236,216,35)" fg:x="905" fg:w="3"/><text x="73.5887%" y="687.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="73.3387%" y="661" width="0.2431%" height="15" fill="rgb(217,187,26)" fg:x="905" fg:w="3"/><text x="73.5887%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="73.4198%" y="645" width="0.1621%" height="15" fill="rgb(207,192,25)" fg:x="906" fg:w="2"/><text x="73.6698%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="73.4198%" y="629" width="0.1621%" height="15" fill="rgb(253,135,27)" fg:x="906" fg:w="2"/><text x="73.6698%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.4198%" y="613" width="0.1621%" height="15" fill="rgb(211,122,29)" fg:x="906" fg:w="2"/><text x="73.6698%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.5008%" y="597" width="0.0810%" height="15" fill="rgb(233,162,40)" fg:x="907" fg:w="1"/><text x="73.7508%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.5008%" y="581" width="0.0810%" height="15" fill="rgb(222,184,47)" fg:x="907" fg:w="1"/><text x="73.7508%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.5008%" y="565" width="0.0810%" height="15" fill="rgb(249,99,23)" fg:x="907" fg:w="1"/><text x="73.7508%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (46 samples, 3.73%)</title><rect x="69.9352%" y="693" width="3.7277%" height="15" fill="rgb(214,60,12)" fg:x="863" fg:w="46"/><text x="70.1852%" y="703.50">plug..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="73.5818%" y="677" width="0.0810%" height="15" fill="rgb(250,229,36)" fg:x="908" fg:w="1"/><text x="73.8318%" y="687.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="73.5818%" y="661" width="0.0810%" height="15" fill="rgb(232,195,10)" fg:x="908" fg:w="1"/><text x="73.8318%" y="671.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="73.5818%" y="645" width="0.0810%" height="15" fill="rgb(205,213,31)" fg:x="908" fg:w="1"/><text x="73.8318%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.5818%" y="629" width="0.0810%" height="15" fill="rgb(237,43,8)" fg:x="908" fg:w="1"/><text x="73.8318%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.5818%" y="613" width="0.0810%" height="15" fill="rgb(216,208,3)" fg:x="908" fg:w="1"/><text x="73.8318%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5818%" y="597" width="0.0810%" height="15" fill="rgb(228,179,44)" fg:x="908" fg:w="1"/><text x="73.8318%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5818%" y="581" width="0.0810%" height="15" fill="rgb(230,192,27)" fg:x="908" fg:w="1"/><text x="73.8318%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5818%" y="565" width="0.0810%" height="15" fill="rgb(251,30,38)" fg:x="908" fg:w="1"/><text x="73.8318%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="73.6629%" y="693" width="0.0810%" height="15" fill="rgb(246,55,52)" fg:x="909" fg:w="1"/><text x="73.9129%" y="703.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="73.6629%" y="677" width="0.0810%" height="15" fill="rgb(249,79,26)" fg:x="909" fg:w="1"/><text x="73.9129%" y="687.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="73.6629%" y="661" width="0.0810%" height="15" fill="rgb(220,202,16)" fg:x="909" fg:w="1"/><text x="73.9129%" y="671.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="73.6629%" y="645" width="0.0810%" height="15" fill="rgb(250,170,23)" fg:x="909" fg:w="1"/><text x="73.9129%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="73.6629%" y="629" width="0.0810%" height="15" fill="rgb(230,7,37)" fg:x="909" fg:w="1"/><text x="73.9129%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6629%" y="613" width="0.0810%" height="15" fill="rgb(213,71,1)" fg:x="909" fg:w="1"/><text x="73.9129%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.6629%" y="597" width="0.0810%" height="15" fill="rgb(227,87,39)" fg:x="909" fg:w="1"/><text x="73.9129%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.7439%" y="677" width="0.0810%" height="15" fill="rgb(210,41,29)" fg:x="910" fg:w="1"/><text x="73.9939%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.7439%" y="661" width="0.0810%" height="15" fill="rgb(206,191,31)" fg:x="910" fg:w="1"/><text x="73.9939%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.7439%" y="645" width="0.0810%" height="15" fill="rgb(247,75,54)" fg:x="910" fg:w="1"/><text x="73.9939%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.7439%" y="629" width="0.0810%" height="15" fill="rgb(208,54,50)" fg:x="910" fg:w="1"/><text x="73.9939%" y="639.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="73.8250%" y="677" width="0.0810%" height="15" fill="rgb(214,90,37)" fg:x="911" fg:w="1"/><text x="74.0750%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (71 samples, 5.75%)</title><rect x="68.2334%" y="709" width="5.7536%" height="15" fill="rgb(220,132,6)" fg:x="842" fg:w="71"/><text x="68.4834%" y="719.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="73.7439%" y="693" width="0.2431%" height="15" fill="rgb(213,167,7)" fg:x="910" fg:w="3"/><text x="73.9939%" y="703.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="73.9060%" y="677" width="0.0810%" height="15" fill="rgb(243,36,27)" fg:x="912" fg:w="1"/><text x="74.1560%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.9060%" y="661" width="0.0810%" height="15" fill="rgb(235,147,12)" fg:x="912" fg:w="1"/><text x="74.1560%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.9060%" y="645" width="0.0810%" height="15" fill="rgb(212,198,44)" fg:x="912" fg:w="1"/><text x="74.1560%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9060%" y="629" width="0.0810%" height="15" fill="rgb(218,68,50)" fg:x="912" fg:w="1"/><text x="74.1560%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9060%" y="613" width="0.0810%" height="15" fill="rgb(224,79,48)" fg:x="912" fg:w="1"/><text x="74.1560%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9870%" y="677" width="0.0810%" height="15" fill="rgb(213,191,50)" fg:x="913" fg:w="1"/><text x="74.2370%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9870%" y="661" width="0.0810%" height="15" fill="rgb(254,146,10)" fg:x="913" fg:w="1"/><text x="74.2370%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.0681%" y="661" width="0.0810%" height="15" fill="rgb(215,175,11)" fg:x="914" fg:w="1"/><text x="74.3181%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.0681%" y="645" width="0.0810%" height="15" fill="rgb(207,49,7)" fg:x="914" fg:w="1"/><text x="74.3181%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0681%" y="629" width="0.0810%" height="15" fill="rgb(234,144,29)" fg:x="914" fg:w="1"/><text x="74.3181%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.0681%" y="613" width="0.0810%" height="15" fill="rgb(213,222,48)" fg:x="914" fg:w="1"/><text x="74.3181%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.0681%" y="597" width="0.0810%" height="15" fill="rgb(222,8,6)" fg:x="914" fg:w="1"/><text x="74.3181%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="73.9870%" y="709" width="0.2431%" height="15" fill="rgb(221,114,49)" fg:x="913" fg:w="3"/><text x="74.2370%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="73.9870%" y="693" width="0.2431%" height="15" fill="rgb(250,140,42)" fg:x="913" fg:w="3"/><text x="74.2370%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.0681%" y="677" width="0.1621%" height="15" fill="rgb(250,150,27)" fg:x="914" fg:w="2"/><text x="74.3181%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1491%" y="661" width="0.0810%" height="15" fill="rgb(252,159,3)" fg:x="915" fg:w="1"/><text x="74.3991%" y="671.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="74.2301%" y="693" width="0.0810%" height="15" fill="rgb(241,182,3)" fg:x="916" fg:w="1"/><text x="74.4801%" y="703.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="74.2301%" y="677" width="0.0810%" height="15" fill="rgb(236,3,9)" fg:x="916" fg:w="1"/><text x="74.4801%" y="687.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="74.2301%" y="661" width="0.0810%" height="15" fill="rgb(223,227,51)" fg:x="916" fg:w="1"/><text x="74.4801%" y="671.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="74.2301%" y="645" width="0.0810%" height="15" fill="rgb(232,133,30)" fg:x="916" fg:w="1"/><text x="74.4801%" y="655.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="74.2301%" y="629" width="0.0810%" height="15" fill="rgb(209,93,27)" fg:x="916" fg:w="1"/><text x="74.4801%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="74.2301%" y="613" width="0.0810%" height="15" fill="rgb(208,108,34)" fg:x="916" fg:w="1"/><text x="74.4801%" y="623.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="74.2301%" y="597" width="0.0810%" height="15" fill="rgb(215,189,13)" fg:x="916" fg:w="1"/><text x="74.4801%" y="607.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="74.2301%" y="581" width="0.0810%" height="15" fill="rgb(206,88,23)" fg:x="916" fg:w="1"/><text x="74.4801%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="74.3922%" y="661" width="0.0810%" height="15" fill="rgb(240,173,0)" fg:x="918" fg:w="1"/><text x="74.6422%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.4733%" y="597" width="0.0810%" height="15" fill="rgb(223,106,52)" fg:x="919" fg:w="1"/><text x="74.7233%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.5543%" y="565" width="0.0810%" height="15" fill="rgb(206,130,16)" fg:x="920" fg:w="1"/><text x="74.8043%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5543%" y="549" width="0.0810%" height="15" fill="rgb(220,54,25)" fg:x="920" fg:w="1"/><text x="74.8043%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5543%" y="533" width="0.0810%" height="15" fill="rgb(210,4,38)" fg:x="920" fg:w="1"/><text x="74.8043%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5543%" y="517" width="0.0810%" height="15" fill="rgb(238,94,39)" fg:x="920" fg:w="1"/><text x="74.8043%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5543%" y="501" width="0.0810%" height="15" fill="rgb(234,124,34)" fg:x="920" fg:w="1"/><text x="74.8043%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="74.6353%" y="565" width="0.2431%" height="15" fill="rgb(221,91,40)" fg:x="921" fg:w="3"/><text x="74.8853%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="74.7164%" y="549" width="0.1621%" height="15" fill="rgb(246,53,28)" fg:x="922" fg:w="2"/><text x="74.9664%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="74.5543%" y="581" width="0.5673%" height="15" fill="rgb(229,109,7)" fg:x="920" fg:w="7"/><text x="74.8043%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.8784%" y="565" width="0.2431%" height="15" fill="rgb(249,117,8)" fg:x="924" fg:w="3"/><text x="75.1284%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="74.8784%" y="549" width="0.2431%" height="15" fill="rgb(210,181,1)" fg:x="924" fg:w="3"/><text x="75.1284%" y="559.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="74.8784%" y="533" width="0.2431%" height="15" fill="rgb(211,66,1)" fg:x="924" fg:w="3"/><text x="75.1284%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="74.8784%" y="517" width="0.2431%" height="15" fill="rgb(221,90,14)" fg:x="924" fg:w="3"/><text x="75.1284%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="74.9595%" y="501" width="0.1621%" height="15" fill="rgb(219,222,44)" fg:x="925" fg:w="2"/><text x="75.2095%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.0405%" y="485" width="0.0810%" height="15" fill="rgb(246,34,33)" fg:x="926" fg:w="1"/><text x="75.2905%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.0405%" y="469" width="0.0810%" height="15" fill="rgb(227,135,41)" fg:x="926" fg:w="1"/><text x="75.2905%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.0405%" y="453" width="0.0810%" height="15" fill="rgb(226,15,14)" fg:x="926" fg:w="1"/><text x="75.2905%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.73%)</title><rect x="74.4733%" y="613" width="0.7293%" height="15" fill="rgb(236,148,47)" fg:x="919" fg:w="9"/><text x="74.7233%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="74.5543%" y="597" width="0.6483%" height="15" fill="rgb(233,162,52)" fg:x="920" fg:w="8"/><text x="74.8043%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.1216%" y="581" width="0.0810%" height="15" fill="rgb(244,35,28)" fg:x="927" fg:w="1"/><text x="75.3716%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.1216%" y="565" width="0.0810%" height="15" fill="rgb(205,121,10)" fg:x="927" fg:w="1"/><text x="75.3716%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.1216%" y="549" width="0.0810%" height="15" fill="rgb(250,58,18)" fg:x="927" fg:w="1"/><text x="75.3716%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.1216%" y="533" width="0.0810%" height="15" fill="rgb(216,37,13)" fg:x="927" fg:w="1"/><text x="75.3716%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.1216%" y="517" width="0.0810%" height="15" fill="rgb(221,215,42)" fg:x="927" fg:w="1"/><text x="75.3716%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4457%" y="469" width="0.0810%" height="15" fill="rgb(217,214,19)" fg:x="931" fg:w="1"/><text x="75.6957%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.5267%" y="469" width="0.0810%" height="15" fill="rgb(233,139,13)" fg:x="932" fg:w="1"/><text x="75.7767%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="75.2836%" y="581" width="0.4052%" height="15" fill="rgb(247,168,23)" fg:x="929" fg:w="5"/><text x="75.5336%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="75.2836%" y="565" width="0.4052%" height="15" fill="rgb(207,202,1)" fg:x="929" fg:w="5"/><text x="75.5336%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="75.2836%" y="549" width="0.4052%" height="15" fill="rgb(220,155,48)" fg:x="929" fg:w="5"/><text x="75.5336%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.4457%" y="533" width="0.2431%" height="15" fill="rgb(250,43,26)" fg:x="931" fg:w="3"/><text x="75.6957%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="75.4457%" y="517" width="0.2431%" height="15" fill="rgb(212,190,23)" fg:x="931" fg:w="3"/><text x="75.6957%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="75.4457%" y="501" width="0.2431%" height="15" fill="rgb(216,39,24)" fg:x="931" fg:w="3"/><text x="75.6957%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="75.4457%" y="485" width="0.2431%" height="15" fill="rgb(252,113,16)" fg:x="931" fg:w="3"/><text x="75.6957%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.6078%" y="469" width="0.0810%" height="15" fill="rgb(208,113,19)" fg:x="933" fg:w="1"/><text x="75.8578%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.6078%" y="453" width="0.0810%" height="15" fill="rgb(234,107,25)" fg:x="933" fg:w="1"/><text x="75.8578%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6078%" y="437" width="0.0810%" height="15" fill="rgb(234,217,51)" fg:x="933" fg:w="1"/><text x="75.8578%" y="447.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="75.6888%" y="581" width="0.0810%" height="15" fill="rgb(251,29,42)" fg:x="934" fg:w="1"/><text x="75.9388%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.6888%" y="565" width="0.0810%" height="15" fill="rgb(221,62,51)" fg:x="934" fg:w="1"/><text x="75.9388%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6888%" y="549" width="0.0810%" height="15" fill="rgb(240,192,43)" fg:x="934" fg:w="1"/><text x="75.9388%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.65%)</title><rect x="75.2026%" y="597" width="0.6483%" height="15" fill="rgb(224,157,47)" fg:x="928" fg:w="8"/><text x="75.4526%" y="607.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="75.7699%" y="581" width="0.0810%" height="15" fill="rgb(226,84,45)" fg:x="935" fg:w="1"/><text x="76.0199%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.7699%" y="565" width="0.0810%" height="15" fill="rgb(208,207,23)" fg:x="935" fg:w="1"/><text x="76.0199%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.7699%" y="549" width="0.0810%" height="15" fill="rgb(253,34,51)" fg:x="935" fg:w="1"/><text x="76.0199%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.7699%" y="533" width="0.0810%" height="15" fill="rgb(227,26,34)" fg:x="935" fg:w="1"/><text x="76.0199%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="75.7699%" y="517" width="0.0810%" height="15" fill="rgb(245,75,19)" fg:x="935" fg:w="1"/><text x="76.0199%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="75.9319%" y="565" width="0.2431%" height="15" fill="rgb(250,191,31)" fg:x="937" fg:w="3"/><text x="76.1819%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1750%" y="565" width="0.0810%" height="15" fill="rgb(224,11,50)" fg:x="940" fg:w="1"/><text x="76.4250%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.1750%" y="549" width="0.0810%" height="15" fill="rgb(231,171,7)" fg:x="940" fg:w="1"/><text x="76.4250%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.4182%" y="533" width="0.0810%" height="15" fill="rgb(252,214,10)" fg:x="943" fg:w="1"/><text x="76.6682%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="76.4992%" y="501" width="0.0810%" height="15" fill="rgb(249,45,46)" fg:x="944" fg:w="1"/><text x="76.7492%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="76.4992%" y="517" width="0.1621%" height="15" fill="rgb(240,173,7)" fg:x="944" fg:w="2"/><text x="76.7492%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5802%" y="501" width="0.0810%" height="15" fill="rgb(235,214,13)" fg:x="945" fg:w="1"/><text x="76.8302%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.5802%" y="485" width="0.0810%" height="15" fill="rgb(245,156,8)" fg:x="945" fg:w="1"/><text x="76.8302%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="76.7423%" y="485" width="0.1621%" height="15" fill="rgb(235,46,12)" fg:x="947" fg:w="2"/><text x="76.9923%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.73%)</title><rect x="76.4992%" y="533" width="0.7293%" height="15" fill="rgb(221,81,14)" fg:x="944" fg:w="9"/><text x="76.7492%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.57%)</title><rect x="76.6613%" y="517" width="0.5673%" height="15" fill="rgb(238,207,9)" fg:x="946" fg:w="7"/><text x="76.9113%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="76.7423%" y="501" width="0.4862%" height="15" fill="rgb(224,129,35)" fg:x="947" fg:w="6"/><text x="76.9923%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="76.9044%" y="485" width="0.3241%" height="15" fill="rgb(243,218,34)" fg:x="949" fg:w="4"/><text x="77.1544%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="77.0665%" y="469" width="0.1621%" height="15" fill="rgb(220,166,13)" fg:x="951" fg:w="2"/><text x="77.3165%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.46%)</title><rect x="75.8509%" y="597" width="1.4587%" height="15" fill="rgb(227,167,49)" fg:x="936" fg:w="18"/><text x="76.1009%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.46%)</title><rect x="75.8509%" y="581" width="1.4587%" height="15" fill="rgb(234,142,12)" fg:x="936" fg:w="18"/><text x="76.1009%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.05%)</title><rect x="76.2561%" y="565" width="1.0535%" height="15" fill="rgb(207,100,48)" fg:x="941" fg:w="13"/><text x="76.5061%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.05%)</title><rect x="76.2561%" y="549" width="1.0535%" height="15" fill="rgb(210,25,14)" fg:x="941" fg:w="13"/><text x="76.5061%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="77.2285%" y="533" width="0.0810%" height="15" fill="rgb(246,116,27)" fg:x="953" fg:w="1"/><text x="77.4785%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.5527%" y="469" width="0.1621%" height="15" fill="rgb(214,193,42)" fg:x="957" fg:w="2"/><text x="77.8027%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.5527%" y="453" width="0.1621%" height="15" fill="rgb(214,122,8)" fg:x="957" fg:w="2"/><text x="77.8027%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="77.5527%" y="437" width="0.1621%" height="15" fill="rgb(244,173,18)" fg:x="957" fg:w="2"/><text x="77.8027%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="77.5527%" y="421" width="0.1621%" height="15" fill="rgb(232,68,19)" fg:x="957" fg:w="2"/><text x="77.8027%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.6337%" y="405" width="0.0810%" height="15" fill="rgb(236,224,1)" fg:x="958" fg:w="1"/><text x="77.8837%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6337%" y="389" width="0.0810%" height="15" fill="rgb(240,11,8)" fg:x="958" fg:w="1"/><text x="77.8837%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.7147%" y="469" width="0.0810%" height="15" fill="rgb(244,159,20)" fg:x="959" fg:w="1"/><text x="77.9647%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7147%" y="453" width="0.0810%" height="15" fill="rgb(240,223,54)" fg:x="959" fg:w="1"/><text x="77.9647%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="77.4716%" y="501" width="0.4052%" height="15" fill="rgb(237,146,5)" fg:x="956" fg:w="5"/><text x="77.7216%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="77.5527%" y="485" width="0.3241%" height="15" fill="rgb(218,221,32)" fg:x="957" fg:w="4"/><text x="77.8027%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.7958%" y="469" width="0.0810%" height="15" fill="rgb(244,96,26)" fg:x="960" fg:w="1"/><text x="78.0458%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="77.3906%" y="533" width="0.5673%" height="15" fill="rgb(245,184,37)" fg:x="955" fg:w="7"/><text x="77.6406%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="77.3906%" y="517" width="0.5673%" height="15" fill="rgb(248,91,47)" fg:x="955" fg:w="7"/><text x="77.6406%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8768%" y="501" width="0.0810%" height="15" fill="rgb(243,199,8)" fg:x="961" fg:w="1"/><text x="78.1268%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8768%" y="485" width="0.0810%" height="15" fill="rgb(249,12,15)" fg:x="961" fg:w="1"/><text x="78.1268%" y="495.50"></text></g><g><title>engine::session::state::State::close (46 samples, 3.73%)</title><rect x="74.3112%" y="693" width="3.7277%" height="15" fill="rgb(245,97,12)" fg:x="917" fg:w="46"/><text x="74.5612%" y="703.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (46 samples, 3.73%)</title><rect x="74.3112%" y="677" width="3.7277%" height="15" fill="rgb(244,61,1)" fg:x="917" fg:w="46"/><text x="74.5612%" y="687.50">engi..</text></g><g><title>core::iter::adapters::try_process (44 samples, 3.57%)</title><rect x="74.4733%" y="661" width="3.5656%" height="15" fill="rgb(222,194,10)" fg:x="919" fg:w="44"/><text x="74.7233%" y="671.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 3.57%)</title><rect x="74.4733%" y="645" width="3.5656%" height="15" fill="rgb(226,178,8)" fg:x="919" fg:w="44"/><text x="74.7233%" y="655.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (44 samples, 3.57%)</title><rect x="74.4733%" y="629" width="3.5656%" height="15" fill="rgb(241,32,34)" fg:x="919" fg:w="44"/><text x="74.7233%" y="639.50">engi..</text></g><g><title>kernel::model::any_entity_changes (35 samples, 2.84%)</title><rect x="75.2026%" y="613" width="2.8363%" height="15" fill="rgb(254,26,6)" fg:x="928" fg:w="35"/><text x="75.4526%" y="623.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.73%)</title><rect x="77.3096%" y="597" width="0.7293%" height="15" fill="rgb(249,71,11)" fg:x="954" fg:w="9"/><text x="77.5596%" y="607.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.73%)</title><rect x="77.3096%" y="581" width="0.7293%" height="15" fill="rgb(232,170,27)" fg:x="954" fg:w="9"/><text x="77.5596%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.65%)</title><rect x="77.3906%" y="565" width="0.6483%" height="15" fill="rgb(214,223,17)" fg:x="955" fg:w="8"/><text x="77.6406%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.65%)</title><rect x="77.3906%" y="549" width="0.6483%" height="15" fill="rgb(250,18,15)" fg:x="955" fg:w="8"/><text x="77.6406%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.9579%" y="533" width="0.0810%" height="15" fill="rgb(212,153,51)" fg:x="962" fg:w="1"/><text x="78.2079%" y="543.50"></text></g><g><title>engine::session::Session::close (48 samples, 3.89%)</title><rect x="74.2301%" y="709" width="3.8898%" height="15" fill="rgb(219,194,12)" fg:x="916" fg:w="48"/><text x="74.4801%" y="719.50">engi..</text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="78.0389%" y="693" width="0.0810%" height="15" fill="rgb(212,58,17)" fg:x="963" fg:w="1"/><text x="78.2889%" y="703.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="78.2010%" y="645" width="0.1621%" height="15" fill="rgb(254,5,10)" fg:x="965" fg:w="2"/><text x="78.4510%" y="655.50"></text></g><g><title>tracing_core::callsite::register_dispatch (2 samples, 0.16%)</title><rect x="78.2010%" y="629" width="0.1621%" height="15" fill="rgb(246,91,7)" fg:x="965" fg:w="2"/><text x="78.4510%" y="639.50"></text></g><g><title>tracing_core::callsite::Callsites::rebuild_interest (2 samples, 0.16%)</title><rect x="78.2010%" y="613" width="0.1621%" height="15" fill="rgb(218,108,49)" fg:x="965" fg:w="2"/><text x="78.4510%" y="623.50"></text></g><g><title>tracing_core::callsite::dispatchers::Rebuilder::for_each (2 samples, 0.16%)</title><rect x="78.2010%" y="597" width="0.1621%" height="15" fill="rgb(238,123,20)" fg:x="965" fg:w="2"/><text x="78.4510%" y="607.50"></text></g><g><title>tracing_core::subscriber::Subscriber::register_callsite (2 samples, 0.16%)</title><rect x="78.2010%" y="581" width="0.1621%" height="15" fill="rgb(231,69,23)" fg:x="965" fg:w="2"/><text x="78.4510%" y="591.50"></text></g><g><title>&lt;engine::session::logs::SessionSubscriber as tracing_core::subscriber::Subscriber&gt;::enabled (2 samples, 0.16%)</title><rect x="78.2010%" y="565" width="0.1621%" height="15" fill="rgb(230,209,3)" fg:x="965" fg:w="2"/><text x="78.4510%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="78.3630%" y="517" width="0.0810%" height="15" fill="rgb(231,19,0)" fg:x="967" fg:w="1"/><text x="78.6130%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="78.3630%" y="533" width="0.2431%" height="15" fill="rgb(226,192,25)" fg:x="967" fg:w="3"/><text x="78.6130%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.4441%" y="517" width="0.1621%" height="15" fill="rgb(223,175,53)" fg:x="968" fg:w="2"/><text x="78.6941%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.4441%" y="501" width="0.1621%" height="15" fill="rgb(248,35,51)" fg:x="968" fg:w="2"/><text x="78.6941%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="78.5251%" y="485" width="0.0810%" height="15" fill="rgb(230,37,26)" fg:x="969" fg:w="1"/><text x="78.7751%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.5251%" y="469" width="0.0810%" height="15" fill="rgb(206,120,22)" fg:x="969" fg:w="1"/><text x="78.7751%" y="479.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="78.6062%" y="485" width="0.0810%" height="15" fill="rgb(207,165,28)" fg:x="970" fg:w="1"/><text x="78.8562%" y="495.50"></text></g><g><title>engine::session::internal::&lt;impl core::convert::From&lt;engine::session::internal::Added&gt; for kernel::model::EntityPtr&gt;::from (1 samples, 0.08%)</title><rect x="78.6872%" y="485" width="0.0810%" height="15" fill="rgb(226,23,46)" fg:x="971" fg:w="1"/><text x="78.9372%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.7682%" y="373" width="0.0810%" height="15" fill="rgb(208,130,44)" fg:x="972" fg:w="1"/><text x="79.0182%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.7682%" y="357" width="0.0810%" height="15" fill="rgb(231,67,8)" fg:x="972" fg:w="1"/><text x="79.0182%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.7682%" y="341" width="0.0810%" height="15" fill="rgb(205,183,22)" fg:x="972" fg:w="1"/><text x="79.0182%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.7682%" y="325" width="0.0810%" height="15" fill="rgb(224,47,9)" fg:x="972" fg:w="1"/><text x="79.0182%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="78.7682%" y="309" width="0.0810%" height="15" fill="rgb(250,183,49)" fg:x="972" fg:w="1"/><text x="79.0182%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.7682%" y="293" width="0.0810%" height="15" fill="rgb(220,151,39)" fg:x="972" fg:w="1"/><text x="79.0182%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="78.7682%" y="277" width="0.0810%" height="15" fill="rgb(220,118,20)" fg:x="972" fg:w="1"/><text x="79.0182%" y="287.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="78.8493%" y="325" width="0.0810%" height="15" fill="rgb(231,65,51)" fg:x="973" fg:w="1"/><text x="79.0993%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="78.8493%" y="309" width="0.0810%" height="15" fill="rgb(253,125,37)" fg:x="973" fg:w="1"/><text x="79.0993%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8493%" y="293" width="0.0810%" height="15" fill="rgb(232,102,6)" fg:x="973" fg:w="1"/><text x="79.0993%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.8493%" y="277" width="0.0810%" height="15" fill="rgb(251,105,13)" fg:x="973" fg:w="1"/><text x="79.0993%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="78.7682%" y="469" width="0.2431%" height="15" fill="rgb(222,179,29)" fg:x="972" fg:w="3"/><text x="79.0182%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="78.7682%" y="453" width="0.2431%" height="15" fill="rgb(229,180,53)" fg:x="972" fg:w="3"/><text x="79.0182%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="78.7682%" y="437" width="0.2431%" height="15" fill="rgb(238,104,13)" fg:x="972" fg:w="3"/><text x="79.0182%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="78.7682%" y="421" width="0.2431%" height="15" fill="rgb(210,130,5)" fg:x="972" fg:w="3"/><text x="79.0182%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="78.7682%" y="405" width="0.2431%" height="15" fill="rgb(233,87,49)" fg:x="972" fg:w="3"/><text x="79.0182%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="78.7682%" y="389" width="0.2431%" height="15" fill="rgb(243,34,9)" fg:x="972" fg:w="3"/><text x="79.0182%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.8493%" y="373" width="0.1621%" height="15" fill="rgb(235,225,10)" fg:x="973" fg:w="2"/><text x="79.0993%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.8493%" y="357" width="0.1621%" height="15" fill="rgb(212,0,30)" fg:x="973" fg:w="2"/><text x="79.0993%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="78.8493%" y="341" width="0.1621%" height="15" fill="rgb(211,177,0)" fg:x="973" fg:w="2"/><text x="79.0993%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9303%" y="325" width="0.0810%" height="15" fill="rgb(225,220,11)" fg:x="974" fg:w="1"/><text x="79.1803%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9303%" y="309" width="0.0810%" height="15" fill="rgb(215,10,13)" fg:x="974" fg:w="1"/><text x="79.1803%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="78.9303%" y="293" width="0.0810%" height="15" fill="rgb(240,177,14)" fg:x="974" fg:w="1"/><text x="79.1803%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.9303%" y="277" width="0.0810%" height="15" fill="rgb(243,7,39)" fg:x="974" fg:w="1"/><text x="79.1803%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9303%" y="261" width="0.0810%" height="15" fill="rgb(212,99,0)" fg:x="974" fg:w="1"/><text x="79.1803%" y="271.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.73%)</title><rect x="78.3630%" y="565" width="0.7293%" height="15" fill="rgb(225,162,48)" fg:x="967" fg:w="9"/><text x="78.6130%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (9 samples, 0.73%)</title><rect x="78.3630%" y="549" width="0.7293%" height="15" fill="rgb(246,16,25)" fg:x="967" fg:w="9"/><text x="78.6130%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.49%)</title><rect x="78.6062%" y="533" width="0.4862%" height="15" fill="rgb(220,150,2)" fg:x="970" fg:w="6"/><text x="78.8562%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.49%)</title><rect x="78.6062%" y="517" width="0.4862%" height="15" fill="rgb(237,113,11)" fg:x="970" fg:w="6"/><text x="78.8562%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="78.6062%" y="501" width="0.4862%" height="15" fill="rgb(236,70,20)" fg:x="970" fg:w="6"/><text x="78.8562%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="78.7682%" y="485" width="0.3241%" height="15" fill="rgb(234,94,7)" fg:x="972" fg:w="4"/><text x="79.0182%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="79.0113%" y="469" width="0.0810%" height="15" fill="rgb(250,221,0)" fg:x="975" fg:w="1"/><text x="79.2613%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="79.0113%" y="453" width="0.0810%" height="15" fill="rgb(245,149,46)" fg:x="975" fg:w="1"/><text x="79.2613%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.0113%" y="437" width="0.0810%" height="15" fill="rgb(215,37,27)" fg:x="975" fg:w="1"/><text x="79.2613%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.0113%" y="421" width="0.0810%" height="15" fill="rgb(232,65,3)" fg:x="975" fg:w="1"/><text x="79.2613%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.0113%" y="405" width="0.0810%" height="15" fill="rgb(214,2,16)" fg:x="975" fg:w="1"/><text x="79.2613%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3355%" y="325" width="0.0810%" height="15" fill="rgb(227,131,50)" fg:x="979" fg:w="1"/><text x="79.5855%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.3355%" y="309" width="0.0810%" height="15" fill="rgb(247,131,45)" fg:x="979" fg:w="1"/><text x="79.5855%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3355%" y="293" width="0.0810%" height="15" fill="rgb(215,97,47)" fg:x="979" fg:w="1"/><text x="79.5855%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="79.4165%" y="277" width="0.1621%" height="15" fill="rgb(233,143,12)" fg:x="980" fg:w="2"/><text x="79.6665%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (4 samples, 0.32%)</title><rect x="79.3355%" y="357" width="0.3241%" height="15" fill="rgb(222,57,17)" fg:x="979" fg:w="4"/><text x="79.5855%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="79.3355%" y="341" width="0.3241%" height="15" fill="rgb(214,119,38)" fg:x="979" fg:w="4"/><text x="79.5855%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="79.4165%" y="325" width="0.2431%" height="15" fill="rgb(217,28,47)" fg:x="980" fg:w="3"/><text x="79.6665%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (3 samples, 0.24%)</title><rect x="79.4165%" y="309" width="0.2431%" height="15" fill="rgb(231,14,52)" fg:x="980" fg:w="3"/><text x="79.6665%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (3 samples, 0.24%)</title><rect x="79.4165%" y="293" width="0.2431%" height="15" fill="rgb(220,158,18)" fg:x="980" fg:w="3"/><text x="79.6665%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.5786%" y="277" width="0.0810%" height="15" fill="rgb(222,143,46)" fg:x="982" fg:w="1"/><text x="79.8286%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (5 samples, 0.41%)</title><rect x="79.3355%" y="389" width="0.4052%" height="15" fill="rgb(227,165,5)" fg:x="979" fg:w="5"/><text x="79.5855%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (5 samples, 0.41%)</title><rect x="79.3355%" y="373" width="0.4052%" height="15" fill="rgb(216,222,49)" fg:x="979" fg:w="5"/><text x="79.5855%" y="383.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="79.6596%" y="357" width="0.0810%" height="15" fill="rgb(238,73,39)" fg:x="983" fg:w="1"/><text x="79.9096%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.6596%" y="341" width="0.0810%" height="15" fill="rgb(252,115,9)" fg:x="983" fg:w="1"/><text x="79.9096%" y="351.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.6596%" y="325" width="0.0810%" height="15" fill="rgb(238,202,4)" fg:x="983" fg:w="1"/><text x="79.9096%" y="335.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.6596%" y="309" width="0.0810%" height="15" fill="rgb(252,153,44)" fg:x="983" fg:w="1"/><text x="79.9096%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="79.7407%" y="357" width="0.1621%" height="15" fill="rgb(235,128,27)" fg:x="984" fg:w="2"/><text x="79.9907%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="79.7407%" y="341" width="0.1621%" height="15" fill="rgb(221,121,47)" fg:x="984" fg:w="2"/><text x="79.9907%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="79.7407%" y="325" width="0.1621%" height="15" fill="rgb(247,211,47)" fg:x="984" fg:w="2"/><text x="79.9907%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8217%" y="309" width="0.0810%" height="15" fill="rgb(252,47,49)" fg:x="985" fg:w="1"/><text x="80.0717%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8217%" y="293" width="0.0810%" height="15" fill="rgb(219,119,53)" fg:x="985" fg:w="1"/><text x="80.0717%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9838%" y="293" width="0.0810%" height="15" fill="rgb(243,165,53)" fg:x="987" fg:w="1"/><text x="80.2338%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9838%" y="277" width="0.0810%" height="15" fill="rgb(230,12,35)" fg:x="987" fg:w="1"/><text x="80.2338%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9838%" y="261" width="0.0810%" height="15" fill="rgb(239,57,49)" fg:x="987" fg:w="1"/><text x="80.2338%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.9838%" y="245" width="0.0810%" height="15" fill="rgb(231,154,7)" fg:x="987" fg:w="1"/><text x="80.2338%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.9838%" y="229" width="0.0810%" height="15" fill="rgb(248,81,34)" fg:x="987" fg:w="1"/><text x="80.2338%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.9838%" y="213" width="0.0810%" height="15" fill="rgb(247,9,5)" fg:x="987" fg:w="1"/><text x="80.2338%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9838%" y="197" width="0.0810%" height="15" fill="rgb(228,172,27)" fg:x="987" fg:w="1"/><text x="80.2338%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.9838%" y="181" width="0.0810%" height="15" fill="rgb(230,57,44)" fg:x="987" fg:w="1"/><text x="80.2338%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.9838%" y="165" width="0.0810%" height="15" fill="rgb(249,35,22)" fg:x="987" fg:w="1"/><text x="80.2338%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.9838%" y="149" width="0.0810%" height="15" fill="rgb(250,137,27)" fg:x="987" fg:w="1"/><text x="80.2338%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.9838%" y="133" width="0.0810%" height="15" fill="rgb(251,57,31)" fg:x="987" fg:w="1"/><text x="80.2338%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.9838%" y="117" width="0.0810%" height="15" fill="rgb(238,60,0)" fg:x="987" fg:w="1"/><text x="80.2338%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.9838%" y="101" width="0.0810%" height="15" fill="rgb(242,185,39)" fg:x="987" fg:w="1"/><text x="80.2338%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.9838%" y="325" width="0.1621%" height="15" fill="rgb(240,63,43)" fg:x="987" fg:w="2"/><text x="80.2338%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="79.9838%" y="309" width="0.1621%" height="15" fill="rgb(236,155,6)" fg:x="987" fg:w="2"/><text x="80.2338%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0648%" y="293" width="0.0810%" height="15" fill="rgb(215,11,29)" fg:x="988" fg:w="1"/><text x="80.3148%" y="303.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="80.1459%" y="325" width="0.0810%" height="15" fill="rgb(228,180,48)" fg:x="989" fg:w="1"/><text x="80.3959%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="79.9838%" y="341" width="0.3241%" height="15" fill="rgb(241,102,12)" fg:x="987" fg:w="4"/><text x="80.2338%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.2269%" y="325" width="0.0810%" height="15" fill="rgb(246,213,4)" fg:x="990" fg:w="1"/><text x="80.4769%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2269%" y="309" width="0.0810%" height="15" fill="rgb(218,134,35)" fg:x="990" fg:w="1"/><text x="80.4769%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="80.2269%" y="293" width="0.0810%" height="15" fill="rgb(251,117,35)" fg:x="990" fg:w="1"/><text x="80.4769%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.2269%" y="277" width="0.0810%" height="15" fill="rgb(206,156,45)" fg:x="990" fg:w="1"/><text x="80.4769%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.2269%" y="261" width="0.0810%" height="15" fill="rgb(218,52,27)" fg:x="990" fg:w="1"/><text x="80.4769%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.2269%" y="245" width="0.0810%" height="15" fill="rgb(238,83,36)" fg:x="990" fg:w="1"/><text x="80.4769%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2269%" y="229" width="0.0810%" height="15" fill="rgb(218,53,43)" fg:x="990" fg:w="1"/><text x="80.4769%" y="239.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (6 samples, 0.49%)</title><rect x="79.9028%" y="357" width="0.4862%" height="15" fill="rgb(239,54,39)" fg:x="986" fg:w="6"/><text x="80.1528%" y="367.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="80.3079%" y="341" width="0.0810%" height="15" fill="rgb(212,198,13)" fg:x="991" fg:w="1"/><text x="80.5579%" y="351.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="80.3890%" y="357" width="0.0810%" height="15" fill="rgb(234,54,46)" fg:x="992" fg:w="1"/><text x="80.6390%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="80.3890%" y="341" width="0.0810%" height="15" fill="rgb(217,120,7)" fg:x="992" fg:w="1"/><text x="80.6390%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="80.3890%" y="325" width="0.0810%" height="15" fill="rgb(246,39,15)" fg:x="992" fg:w="1"/><text x="80.6390%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="80.3890%" y="309" width="0.0810%" height="15" fill="rgb(242,143,31)" fg:x="992" fg:w="1"/><text x="80.6390%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.3890%" y="293" width="0.0810%" height="15" fill="rgb(252,60,24)" fg:x="992" fg:w="1"/><text x="80.6390%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="80.4700%" y="357" width="0.1621%" height="15" fill="rgb(249,220,7)" fg:x="993" fg:w="2"/><text x="80.7200%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.4700%" y="341" width="0.1621%" height="15" fill="rgb(236,67,13)" fg:x="993" fg:w="2"/><text x="80.7200%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.4700%" y="325" width="0.1621%" height="15" fill="rgb(210,62,39)" fg:x="993" fg:w="2"/><text x="80.7200%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="80.4700%" y="309" width="0.1621%" height="15" fill="rgb(219,122,53)" fg:x="993" fg:w="2"/><text x="80.7200%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.4700%" y="293" width="0.1621%" height="15" fill="rgb(218,87,25)" fg:x="993" fg:w="2"/><text x="80.7200%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.5511%" y="277" width="0.0810%" height="15" fill="rgb(234,179,48)" fg:x="994" fg:w="1"/><text x="80.8011%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.5511%" y="261" width="0.0810%" height="15" fill="rgb(248,90,0)" fg:x="994" fg:w="1"/><text x="80.8011%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6321%" y="325" width="0.0810%" height="15" fill="rgb(207,228,37)" fg:x="995" fg:w="1"/><text x="80.8821%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.6321%" y="309" width="0.0810%" height="15" fill="rgb(235,214,15)" fg:x="995" fg:w="1"/><text x="80.8821%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.7131%" y="325" width="0.0810%" height="15" fill="rgb(210,144,39)" fg:x="996" fg:w="1"/><text x="80.9631%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (5 samples, 0.41%)</title><rect x="80.6321%" y="341" width="0.4052%" height="15" fill="rgb(222,67,41)" fg:x="995" fg:w="5"/><text x="80.8821%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="80.7942%" y="325" width="0.2431%" height="15" fill="rgb(205,35,37)" fg:x="997" fg:w="3"/><text x="81.0442%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="80.7942%" y="309" width="0.2431%" height="15" fill="rgb(216,125,40)" fg:x="997" fg:w="3"/><text x="81.0442%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="80.7942%" y="293" width="0.2431%" height="15" fill="rgb(228,227,20)" fg:x="997" fg:w="3"/><text x="81.0442%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="80.7942%" y="277" width="0.2431%" height="15" fill="rgb(242,173,45)" fg:x="997" fg:w="3"/><text x="81.0442%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="80.8752%" y="261" width="0.1621%" height="15" fill="rgb(215,79,24)" fg:x="998" fg:w="2"/><text x="81.1252%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.8752%" y="245" width="0.1621%" height="15" fill="rgb(238,164,38)" fg:x="998" fg:w="2"/><text x="81.1252%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.9562%" y="229" width="0.0810%" height="15" fill="rgb(245,196,38)" fg:x="999" fg:w="1"/><text x="81.2062%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.9562%" y="213" width="0.0810%" height="15" fill="rgb(231,217,29)" fg:x="999" fg:w="1"/><text x="81.2062%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.0373%" y="341" width="0.0810%" height="15" fill="rgb(245,6,4)" fg:x="1000" fg:w="1"/><text x="81.2873%" y="351.50"></text></g><g><title>kernel::model::EntityPtr::gid (7 samples, 0.57%)</title><rect x="80.6321%" y="357" width="0.5673%" height="15" fill="rgb(214,76,49)" fg:x="995" fg:w="7"/><text x="80.8821%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="81.1183%" y="341" width="0.0810%" height="15" fill="rgb(205,96,12)" fg:x="1001" fg:w="1"/><text x="81.3683%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.1183%" y="325" width="0.0810%" height="15" fill="rgb(243,131,4)" fg:x="1001" fg:w="1"/><text x="81.3683%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="81.1994%" y="357" width="0.0810%" height="15" fill="rgb(214,114,4)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1994%" y="341" width="0.0810%" height="15" fill="rgb(234,215,15)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.1994%" y="325" width="0.0810%" height="15" fill="rgb(250,216,45)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.1994%" y="309" width="0.0810%" height="15" fill="rgb(236,128,4)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.1994%" y="293" width="0.0810%" height="15" fill="rgb(234,50,33)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.1994%" y="277" width="0.0810%" height="15" fill="rgb(253,131,37)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="81.1994%" y="261" width="0.0810%" height="15" fill="rgb(218,55,27)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.1994%" y="245" width="0.0810%" height="15" fill="rgb(241,220,28)" fg:x="1002" fg:w="1"/><text x="81.4494%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="81.2804%" y="309" width="0.1621%" height="15" fill="rgb(241,90,48)" fg:x="1003" fg:w="2"/><text x="81.5304%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="81.2804%" y="293" width="0.1621%" height="15" fill="rgb(216,43,37)" fg:x="1003" fg:w="2"/><text x="81.5304%" y="303.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="81.2804%" y="277" width="0.1621%" height="15" fill="rgb(207,173,9)" fg:x="1003" fg:w="2"/><text x="81.5304%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="81.2804%" y="261" width="0.1621%" height="15" fill="rgb(240,126,30)" fg:x="1003" fg:w="2"/><text x="81.5304%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.3614%" y="245" width="0.0810%" height="15" fill="rgb(228,178,53)" fg:x="1004" fg:w="1"/><text x="81.6114%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.3614%" y="229" width="0.0810%" height="15" fill="rgb(217,33,4)" fg:x="1004" fg:w="1"/><text x="81.6114%" y="239.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="81.3614%" y="213" width="0.0810%" height="15" fill="rgb(206,124,34)" fg:x="1004" fg:w="1"/><text x="81.6114%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="81.3614%" y="197" width="0.0810%" height="15" fill="rgb(208,122,53)" fg:x="1004" fg:w="1"/><text x="81.6114%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.3614%" y="181" width="0.0810%" height="15" fill="rgb(215,202,26)" fg:x="1004" fg:w="1"/><text x="81.6114%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="81.3614%" y="165" width="0.0810%" height="15" fill="rgb(232,198,31)" fg:x="1004" fg:w="1"/><text x="81.6114%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="81.3614%" y="149" width="0.0810%" height="15" fill="rgb(222,23,35)" fg:x="1004" fg:w="1"/><text x="81.6114%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="81.3614%" y="133" width="0.0810%" height="15" fill="rgb(242,27,53)" fg:x="1004" fg:w="1"/><text x="81.6114%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.4425%" y="229" width="0.0810%" height="15" fill="rgb(210,216,42)" fg:x="1005" fg:w="1"/><text x="81.6925%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="81.4425%" y="213" width="0.0810%" height="15" fill="rgb(234,39,38)" fg:x="1005" fg:w="1"/><text x="81.6925%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="81.5235%" y="229" width="0.0810%" height="15" fill="rgb(235,126,54)" fg:x="1006" fg:w="1"/><text x="81.7735%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="81.6856%" y="197" width="0.1621%" height="15" fill="rgb(235,150,33)" fg:x="1008" fg:w="2"/><text x="81.9356%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.97%)</title><rect x="81.6856%" y="213" width="0.9724%" height="15" fill="rgb(249,49,53)" fg:x="1008" fg:w="12"/><text x="81.9356%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10 samples, 0.81%)</title><rect x="81.8476%" y="197" width="0.8104%" height="15" fill="rgb(238,60,50)" fg:x="1010" fg:w="10"/><text x="82.0976%" y="207.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="82.4149%" y="181" width="0.2431%" height="15" fill="rgb(210,5,2)" fg:x="1017" fg:w="3"/><text x="82.6649%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="82.6580%" y="213" width="0.1621%" height="15" fill="rgb(214,207,24)" fg:x="1020" fg:w="2"/><text x="82.9080%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="82.7391%" y="197" width="0.0810%" height="15" fill="rgb(228,173,2)" fg:x="1021" fg:w="1"/><text x="82.9891%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="82.9822%" y="149" width="0.0810%" height="15" fill="rgb(244,26,8)" fg:x="1024" fg:w="1"/><text x="83.2322%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31 samples, 2.51%)</title><rect x="83.0632%" y="149" width="2.5122%" height="15" fill="rgb(249,153,35)" fg:x="1025" fg:w="31"/><text x="83.3132%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31 samples, 2.51%)</title><rect x="83.0632%" y="133" width="2.5122%" height="15" fill="rgb(221,215,40)" fg:x="1025" fg:w="31"/><text x="83.3132%" y="143.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31 samples, 2.51%)</title><rect x="83.0632%" y="117" width="2.5122%" height="15" fill="rgb(238,106,35)" fg:x="1025" fg:w="31"/><text x="83.3132%" y="127.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 2.84%)</title><rect x="82.8201%" y="197" width="2.8363%" height="15" fill="rgb(207,195,21)" fg:x="1022" fg:w="35"/><text x="83.0701%" y="207.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (35 samples, 2.84%)</title><rect x="82.8201%" y="181" width="2.8363%" height="15" fill="rgb(205,43,29)" fg:x="1022" fg:w="35"/><text x="83.0701%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (34 samples, 2.76%)</title><rect x="82.9011%" y="165" width="2.7553%" height="15" fill="rgb(236,35,21)" fg:x="1023" fg:w="34"/><text x="83.1511%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="85.5754%" y="149" width="0.0810%" height="15" fill="rgb(244,74,8)" fg:x="1056" fg:w="1"/><text x="85.8254%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="85.7374%" y="181" width="0.1621%" height="15" fill="rgb(241,229,7)" fg:x="1058" fg:w="2"/><text x="85.9874%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="85.7374%" y="165" width="0.1621%" height="15" fill="rgb(212,223,25)" fg:x="1058" fg:w="2"/><text x="85.9874%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.8185%" y="149" width="0.0810%" height="15" fill="rgb(234,58,53)" fg:x="1059" fg:w="1"/><text x="86.0685%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.8185%" y="133" width="0.0810%" height="15" fill="rgb(244,36,1)" fg:x="1059" fg:w="1"/><text x="86.0685%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.32%)</title><rect x="85.6564%" y="197" width="0.3241%" height="15" fill="rgb(222,40,54)" fg:x="1057" fg:w="4"/><text x="85.9064%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="85.8995%" y="181" width="0.0810%" height="15" fill="rgb(210,207,39)" fg:x="1060" fg:w="1"/><text x="86.1495%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8995%" y="165" width="0.0810%" height="15" fill="rgb(234,52,14)" fg:x="1060" fg:w="1"/><text x="86.1495%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (40 samples, 3.24%)</title><rect x="82.8201%" y="213" width="3.2415%" height="15" fill="rgb(239,108,46)" fg:x="1022" fg:w="40"/><text x="83.0701%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="85.9806%" y="197" width="0.0810%" height="15" fill="rgb(252,223,5)" fg:x="1061" fg:w="1"/><text x="86.2306%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="85.9806%" y="181" width="0.0810%" height="15" fill="rgb(227,181,11)" fg:x="1061" fg:w="1"/><text x="86.2306%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::Interval::difference (1 samples, 0.08%)</title><rect x="85.9806%" y="165" width="0.0810%" height="15" fill="rgb(248,126,40)" fg:x="1061" fg:w="1"/><text x="86.2306%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (57 samples, 4.62%)</title><rect x="81.6045%" y="229" width="4.6191%" height="15" fill="rgb(243,1,18)" fg:x="1007" fg:w="57"/><text x="81.8545%" y="239.50">regex..</text></g><g><title>regex_automata::util::prefilter::prefixes (2 samples, 0.16%)</title><rect x="86.0616%" y="213" width="0.1621%" height="15" fill="rgb(214,145,23)" fg:x="1062" fg:w="2"/><text x="86.3116%" y="223.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="86.1426%" y="197" width="0.0810%" height="15" fill="rgb(241,218,11)" fg:x="1063" fg:w="1"/><text x="86.3926%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="86.2237%" y="229" width="0.2431%" height="15" fill="rgb(214,219,24)" fg:x="1064" fg:w="3"/><text x="86.4737%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="86.2237%" y="213" width="0.2431%" height="15" fill="rgb(235,32,7)" fg:x="1064" fg:w="3"/><text x="86.4737%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="86.2237%" y="197" width="0.2431%" height="15" fill="rgb(227,121,28)" fg:x="1064" fg:w="3"/><text x="86.4737%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="86.2237%" y="181" width="0.2431%" height="15" fill="rgb(216,129,49)" fg:x="1064" fg:w="3"/><text x="86.4737%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="86.2237%" y="165" width="0.2431%" height="15" fill="rgb(207,194,50)" fg:x="1064" fg:w="3"/><text x="86.4737%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="86.2237%" y="149" width="0.2431%" height="15" fill="rgb(207,4,18)" fg:x="1064" fg:w="3"/><text x="86.4737%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="86.2237%" y="133" width="0.2431%" height="15" fill="rgb(213,50,30)" fg:x="1064" fg:w="3"/><text x="86.4737%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="86.4668%" y="197" width="0.0810%" height="15" fill="rgb(208,77,22)" fg:x="1067" fg:w="1"/><text x="86.7168%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="86.4668%" y="181" width="0.0810%" height="15" fill="rgb(244,204,34)" fg:x="1067" fg:w="1"/><text x="86.7168%" y="191.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="86.4668%" y="165" width="0.0810%" height="15" fill="rgb(230,20,17)" fg:x="1067" fg:w="1"/><text x="86.7168%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4668%" y="149" width="0.0810%" height="15" fill="rgb(237,83,15)" fg:x="1067" fg:w="1"/><text x="86.7168%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (64 samples, 5.19%)</title><rect x="81.4425%" y="277" width="5.1864%" height="15" fill="rgb(221,109,25)" fg:x="1005" fg:w="64"/><text x="81.6925%" y="287.50">&lt;regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (64 samples, 5.19%)</title><rect x="81.4425%" y="261" width="5.1864%" height="15" fill="rgb(205,194,52)" fg:x="1005" fg:w="64"/><text x="81.6925%" y="271.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (64 samples, 5.19%)</title><rect x="81.4425%" y="245" width="5.1864%" height="15" fill="rgb(244,173,54)" fg:x="1005" fg:w="64"/><text x="81.6925%" y="255.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="86.4668%" y="229" width="0.1621%" height="15" fill="rgb(227,181,18)" fg:x="1067" fg:w="2"/><text x="86.7168%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="86.4668%" y="213" width="0.1621%" height="15" fill="rgb(238,36,30)" fg:x="1067" fg:w="2"/><text x="86.7168%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.5478%" y="197" width="0.0810%" height="15" fill="rgb(254,85,0)" fg:x="1068" fg:w="1"/><text x="86.7978%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.5478%" y="181" width="0.0810%" height="15" fill="rgb(247,63,33)" fg:x="1068" fg:w="1"/><text x="86.7978%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5478%" y="165" width="0.0810%" height="15" fill="rgb(220,7,54)" fg:x="1068" fg:w="1"/><text x="86.7978%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="86.7909%" y="165" width="0.0810%" height="15" fill="rgb(238,227,21)" fg:x="1071" fg:w="1"/><text x="87.0409%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="86.7099%" y="197" width="0.2431%" height="15" fill="rgb(237,29,31)" fg:x="1070" fg:w="3"/><text x="86.9599%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="86.7909%" y="181" width="0.1621%" height="15" fill="rgb(211,21,50)" fg:x="1071" fg:w="2"/><text x="87.0409%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.8720%" y="165" width="0.0810%" height="15" fill="rgb(239,119,2)" fg:x="1072" fg:w="1"/><text x="87.1220%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="86.9530%" y="197" width="0.0810%" height="15" fill="rgb(250,2,39)" fg:x="1073" fg:w="1"/><text x="87.2030%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="86.9530%" y="181" width="0.0810%" height="15" fill="rgb(244,46,53)" fg:x="1073" fg:w="1"/><text x="87.2030%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="86.9530%" y="165" width="0.0810%" height="15" fill="rgb(209,21,19)" fg:x="1073" fg:w="1"/><text x="87.2030%" y="175.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (70 samples, 5.67%)</title><rect x="81.4425%" y="293" width="5.6726%" height="15" fill="rgb(236,145,4)" fg:x="1005" fg:w="70"/><text x="81.6925%" y="303.50">indefin..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="86.6288%" y="277" width="0.4862%" height="15" fill="rgb(220,133,36)" fg:x="1069" fg:w="6"/><text x="86.8788%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="86.6288%" y="261" width="0.4862%" height="15" fill="rgb(244,18,3)" fg:x="1069" fg:w="6"/><text x="86.8788%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="86.6288%" y="245" width="0.4862%" height="15" fill="rgb(232,171,48)" fg:x="1069" fg:w="6"/><text x="86.8788%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="86.6288%" y="229" width="0.4862%" height="15" fill="rgb(223,223,53)" fg:x="1069" fg:w="6"/><text x="86.8788%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="86.6288%" y="213" width="0.4862%" height="15" fill="rgb(246,92,13)" fg:x="1069" fg:w="6"/><text x="86.8788%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="87.0340%" y="197" width="0.0810%" height="15" fill="rgb(229,171,10)" fg:x="1074" fg:w="1"/><text x="87.2840%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="87.1151%" y="229" width="0.0810%" height="15" fill="rgb(213,131,26)" fg:x="1075" fg:w="1"/><text x="87.3651%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.1151%" y="213" width="0.0810%" height="15" fill="rgb(242,87,54)" fg:x="1075" fg:w="1"/><text x="87.3651%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="87.1151%" y="197" width="0.0810%" height="15" fill="rgb(237,21,35)" fg:x="1075" fg:w="1"/><text x="87.3651%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.1151%" y="181" width="0.0810%" height="15" fill="rgb(253,13,47)" fg:x="1075" fg:w="1"/><text x="87.3651%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.1151%" y="165" width="0.0810%" height="15" fill="rgb(215,122,49)" fg:x="1075" fg:w="1"/><text x="87.3651%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="87.4392%" y="197" width="0.5673%" height="15" fill="rgb(209,179,30)" fg:x="1079" fg:w="7"/><text x="87.6892%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.9254%" y="181" width="0.0810%" height="15" fill="rgb(235,100,24)" fg:x="1085" fg:w="1"/><text x="88.1754%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.73%)</title><rect x="87.4392%" y="213" width="0.7293%" height="15" fill="rgb(209,67,24)" fg:x="1079" fg:w="9"/><text x="87.6892%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (2 samples, 0.16%)</title><rect x="88.0065%" y="197" width="0.1621%" height="15" fill="rgb(206,74,32)" fg:x="1086" fg:w="2"/><text x="88.2565%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="88.1686%" y="213" width="0.0810%" height="15" fill="rgb(212,45,25)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.1686%" y="197" width="0.0810%" height="15" fill="rgb(239,26,3)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="88.1686%" y="181" width="0.0810%" height="15" fill="rgb(218,36,15)" fg:x="1088" fg:w="1"/><text x="88.4186%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2496%" y="181" width="0.0810%" height="15" fill="rgb(206,108,24)" fg:x="1089" fg:w="1"/><text x="88.4996%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.3306%" y="181" width="0.0810%" height="15" fill="rgb(234,204,42)" fg:x="1090" fg:w="1"/><text x="88.5806%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="88.4117%" y="181" width="0.0810%" height="15" fill="rgb(229,2,11)" fg:x="1091" fg:w="1"/><text x="88.6617%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="88.4117%" y="165" width="0.0810%" height="15" fill="rgb(221,20,48)" fg:x="1091" fg:w="1"/><text x="88.6617%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.4117%" y="149" width="0.0810%" height="15" fill="rgb(244,164,10)" fg:x="1091" fg:w="1"/><text x="88.6617%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.4117%" y="133" width="0.0810%" height="15" fill="rgb(243,229,2)" fg:x="1091" fg:w="1"/><text x="88.6617%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.4117%" y="117" width="0.0810%" height="15" fill="rgb(232,131,37)" fg:x="1091" fg:w="1"/><text x="88.6617%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (4 samples, 0.32%)</title><rect x="88.2496%" y="213" width="0.3241%" height="15" fill="rgb(217,156,11)" fg:x="1089" fg:w="4"/><text x="88.4996%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="88.2496%" y="197" width="0.3241%" height="15" fill="rgb(239,99,48)" fg:x="1089" fg:w="4"/><text x="88.4996%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="88.4927%" y="181" width="0.0810%" height="15" fill="rgb(231,209,9)" fg:x="1092" fg:w="1"/><text x="88.7427%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="88.4927%" y="165" width="0.0810%" height="15" fill="rgb(254,97,27)" fg:x="1092" fg:w="1"/><text x="88.7427%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="88.4927%" y="149" width="0.0810%" height="15" fill="rgb(223,151,38)" fg:x="1092" fg:w="1"/><text x="88.7427%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="88.8169%" y="101" width="0.0810%" height="15" fill="rgb(219,206,35)" fg:x="1096" fg:w="1"/><text x="89.0669%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.8979%" y="69" width="0.0810%" height="15" fill="rgb(216,130,31)" fg:x="1097" fg:w="1"/><text x="89.1479%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.0600%" y="37" width="0.0810%" height="15" fill="rgb(251,97,34)" fg:x="1099" fg:w="1"/><text x="89.3100%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="88.9789%" y="69" width="0.3241%" height="15" fill="rgb(246,159,47)" fg:x="1098" fg:w="4"/><text x="89.2289%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="89.0600%" y="53" width="0.2431%" height="15" fill="rgb(232,87,10)" fg:x="1099" fg:w="3"/><text x="89.3100%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="89.1410%" y="37" width="0.1621%" height="15" fill="rgb(249,1,37)" fg:x="1100" fg:w="2"/><text x="89.3910%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (8 samples, 0.65%)</title><rect x="88.8979%" y="101" width="0.6483%" height="15" fill="rgb(239,135,14)" fg:x="1097" fg:w="8"/><text x="89.1479%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.65%)</title><rect x="88.8979%" y="85" width="0.6483%" height="15" fill="rgb(253,116,46)" fg:x="1097" fg:w="8"/><text x="89.1479%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="89.3031%" y="69" width="0.2431%" height="15" fill="rgb(222,217,37)" fg:x="1102" fg:w="3"/><text x="89.5531%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="89.5462%" y="101" width="0.0810%" height="15" fill="rgb(252,96,8)" fg:x="1105" fg:w="1"/><text x="89.7962%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="89.5462%" y="85" width="0.0810%" height="15" fill="rgb(254,103,41)" fg:x="1105" fg:w="1"/><text x="89.7962%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="89.5462%" y="69" width="0.0810%" height="15" fill="rgb(218,213,19)" fg:x="1105" fg:w="1"/><text x="89.7962%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.5462%" y="53" width="0.0810%" height="15" fill="rgb(253,95,21)" fg:x="1105" fg:w="1"/><text x="89.7962%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (35 samples, 2.84%)</title><rect x="89.6272%" y="101" width="2.8363%" height="15" fill="rgb(229,26,28)" fg:x="1106" fg:w="35"/><text x="89.8772%" y="111.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (35 samples, 2.84%)</title><rect x="89.6272%" y="85" width="2.8363%" height="15" fill="rgb(230,129,16)" fg:x="1106" fg:w="35"/><text x="89.8772%" y="95.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (35 samples, 2.84%)</title><rect x="89.6272%" y="69" width="2.8363%" height="15" fill="rgb(236,126,17)" fg:x="1106" fg:w="35"/><text x="89.8772%" y="79.50">al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 3.97%)</title><rect x="88.5737%" y="197" width="3.9708%" height="15" fill="rgb(209,33,33)" fg:x="1093" fg:w="49"/><text x="88.8237%" y="207.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49 samples, 3.97%)</title><rect x="88.5737%" y="181" width="3.9708%" height="15" fill="rgb(227,85,29)" fg:x="1093" fg:w="49"/><text x="88.8237%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49 samples, 3.97%)</title><rect x="88.5737%" y="165" width="3.9708%" height="15" fill="rgb(241,53,46)" fg:x="1093" fg:w="49"/><text x="88.8237%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49 samples, 3.97%)</title><rect x="88.5737%" y="149" width="3.9708%" height="15" fill="rgb(228,167,53)" fg:x="1093" fg:w="49"/><text x="88.8237%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (49 samples, 3.97%)</title><rect x="88.5737%" y="133" width="3.9708%" height="15" fill="rgb(238,195,45)" fg:x="1093" fg:w="49"/><text x="88.8237%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49 samples, 3.97%)</title><rect x="88.5737%" y="117" width="3.9708%" height="15" fill="rgb(252,124,45)" fg:x="1093" fg:w="49"/><text x="88.8237%" y="127.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="92.4635%" y="101" width="0.0810%" height="15" fill="rgb(251,38,35)" fg:x="1141" fg:w="1"/><text x="92.7135%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.6256%" y="181" width="0.0810%" height="15" fill="rgb(227,33,2)" fg:x="1143" fg:w="1"/><text x="92.8756%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.7066%" y="181" width="0.0810%" height="15" fill="rgb(223,157,46)" fg:x="1144" fg:w="1"/><text x="92.9566%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.7066%" y="165" width="0.0810%" height="15" fill="rgb(222,78,41)" fg:x="1144" fg:w="1"/><text x="92.9566%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="92.7066%" y="149" width="0.0810%" height="15" fill="rgb(248,176,11)" fg:x="1144" fg:w="1"/><text x="92.9566%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="92.7877%" y="181" width="0.3241%" height="15" fill="rgb(241,221,18)" fg:x="1145" fg:w="4"/><text x="93.0377%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="92.8687%" y="165" width="0.2431%" height="15" fill="rgb(218,85,22)" fg:x="1146" fg:w="3"/><text x="93.1187%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="92.8687%" y="149" width="0.2431%" height="15" fill="rgb(222,223,7)" fg:x="1146" fg:w="3"/><text x="93.1187%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="92.8687%" y="133" width="0.2431%" height="15" fill="rgb(254,59,39)" fg:x="1146" fg:w="3"/><text x="93.1187%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="93.1118%" y="181" width="0.1621%" height="15" fill="rgb(247,100,27)" fg:x="1149" fg:w="2"/><text x="93.3618%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.1929%" y="165" width="0.0810%" height="15" fill="rgb(237,207,10)" fg:x="1150" fg:w="1"/><text x="93.4429%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (76 samples, 6.16%)</title><rect x="87.1961%" y="229" width="6.1588%" height="15" fill="rgb(220,121,28)" fg:x="1076" fg:w="76"/><text x="87.4461%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (59 samples, 4.78%)</title><rect x="88.5737%" y="213" width="4.7812%" height="15" fill="rgb(213,223,20)" fg:x="1093" fg:w="59"/><text x="88.8237%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.81%)</title><rect x="92.5446%" y="197" width="0.8104%" height="15" fill="rgb(205,121,27)" fg:x="1142" fg:w="10"/><text x="92.7946%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="93.2739%" y="181" width="0.0810%" height="15" fill="rgb(253,24,53)" fg:x="1151" fg:w="1"/><text x="93.5239%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.2739%" y="165" width="0.0810%" height="15" fill="rgb(224,224,47)" fg:x="1151" fg:w="1"/><text x="93.5239%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="93.3549%" y="197" width="0.0810%" height="15" fill="rgb(250,125,36)" fg:x="1152" fg:w="1"/><text x="93.6049%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="93.3549%" y="181" width="0.0810%" height="15" fill="rgb(240,144,38)" fg:x="1152" fg:w="1"/><text x="93.6049%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="93.3549%" y="229" width="0.1621%" height="15" fill="rgb(250,15,50)" fg:x="1152" fg:w="2"/><text x="93.6049%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="93.3549%" y="213" width="0.1621%" height="15" fill="rgb(210,24,26)" fg:x="1152" fg:w="2"/><text x="93.6049%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="93.4360%" y="197" width="0.0810%" height="15" fill="rgb(234,53,53)" fg:x="1153" fg:w="1"/><text x="93.6860%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="93.4360%" y="181" width="0.0810%" height="15" fill="rgb(208,108,28)" fg:x="1153" fg:w="1"/><text x="93.6860%" y="191.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (81 samples, 6.56%)</title><rect x="87.1151%" y="261" width="6.5640%" height="15" fill="rgb(227,143,7)" fg:x="1075" fg:w="81"/><text x="87.3651%" y="271.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (81 samples, 6.56%)</title><rect x="87.1151%" y="245" width="6.5640%" height="15" fill="rgb(238,189,38)" fg:x="1075" fg:w="81"/><text x="87.3651%" y="255.50">regex_aut..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="93.5170%" y="229" width="0.1621%" height="15" fill="rgb(222,69,15)" fg:x="1154" fg:w="2"/><text x="93.7670%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="93.5170%" y="213" width="0.1621%" height="15" fill="rgb(213,169,7)" fg:x="1154" fg:w="2"/><text x="93.7670%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="93.5981%" y="197" width="0.0810%" height="15" fill="rgb(251,219,4)" fg:x="1155" fg:w="1"/><text x="93.8481%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="93.5981%" y="181" width="0.0810%" height="15" fill="rgb(241,55,40)" fg:x="1155" fg:w="1"/><text x="93.8481%" y="191.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (82 samples, 6.65%)</title><rect x="87.1151%" y="277" width="6.6451%" height="15" fill="rgb(243,57,30)" fg:x="1075" fg:w="82"/><text x="87.3651%" y="287.50">&lt;regex::r..</text></g><g><title>regex::builders::string::RegexBuilder::new (1 samples, 0.08%)</title><rect x="93.6791%" y="261" width="0.0810%" height="15" fill="rgb(234,50,30)" fg:x="1156" fg:w="1"/><text x="93.9291%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.6791%" y="245" width="0.0810%" height="15" fill="rgb(239,23,42)" fg:x="1156" fg:w="1"/><text x="93.9291%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.6791%" y="229" width="0.0810%" height="15" fill="rgb(217,38,19)" fg:x="1156" fg:w="1"/><text x="93.9291%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.7601%" y="261" width="0.0810%" height="15" fill="rgb(215,179,16)" fg:x="1157" fg:w="1"/><text x="94.0101%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="93.7601%" y="277" width="0.2431%" height="15" fill="rgb(254,21,37)" fg:x="1157" fg:w="3"/><text x="94.0101%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="93.8412%" y="261" width="0.1621%" height="15" fill="rgb(219,207,48)" fg:x="1158" fg:w="2"/><text x="94.0912%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.9222%" y="245" width="0.0810%" height="15" fill="rgb(227,225,41)" fg:x="1159" fg:w="1"/><text x="94.1722%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="93.9222%" y="229" width="0.0810%" height="15" fill="rgb(223,130,1)" fg:x="1159" fg:w="1"/><text x="94.1722%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="93.9222%" y="213" width="0.0810%" height="15" fill="rgb(249,54,42)" fg:x="1159" fg:w="1"/><text x="94.1722%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.9222%" y="197" width="0.0810%" height="15" fill="rgb(248,69,25)" fg:x="1159" fg:w="1"/><text x="94.1722%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.9222%" y="181" width="0.0810%" height="15" fill="rgb(234,21,32)" fg:x="1159" fg:w="1"/><text x="94.1722%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="94.0032%" y="261" width="0.0810%" height="15" fill="rgb(252,136,6)" fg:x="1160" fg:w="1"/><text x="94.2532%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="94.0032%" y="245" width="0.0810%" height="15" fill="rgb(245,87,12)" fg:x="1160" fg:w="1"/><text x="94.2532%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="94.0032%" y="229" width="0.0810%" height="15" fill="rgb(208,12,15)" fg:x="1160" fg:w="1"/><text x="94.2532%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="94.0032%" y="213" width="0.0810%" height="15" fill="rgb(250,98,2)" fg:x="1160" fg:w="1"/><text x="94.2532%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.2464%" y="181" width="0.0810%" height="15" fill="rgb(205,213,15)" fg:x="1163" fg:w="1"/><text x="94.4964%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.2464%" y="165" width="0.0810%" height="15" fill="rgb(248,192,44)" fg:x="1163" fg:w="1"/><text x="94.4964%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.2464%" y="149" width="0.0810%" height="15" fill="rgb(221,89,17)" fg:x="1163" fg:w="1"/><text x="94.4964%" y="159.50"></text></g><g><title>indefinite::rules::number::Number::check (90 samples, 7.29%)</title><rect x="87.1151%" y="293" width="7.2934%" height="15" fill="rgb(209,55,3)" fg:x="1075" fg:w="90"/><text x="87.3651%" y="303.50">indefinite..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.41%)</title><rect x="94.0032%" y="277" width="0.4052%" height="15" fill="rgb(247,23,45)" fg:x="1160" fg:w="5"/><text x="94.2532%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="94.0843%" y="261" width="0.3241%" height="15" fill="rgb(235,152,23)" fg:x="1161" fg:w="4"/><text x="94.3343%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="94.0843%" y="245" width="0.3241%" height="15" fill="rgb(244,63,13)" fg:x="1161" fg:w="4"/><text x="94.3343%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="94.0843%" y="229" width="0.3241%" height="15" fill="rgb(227,30,37)" fg:x="1161" fg:w="4"/><text x="94.3343%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="94.0843%" y="213" width="0.3241%" height="15" fill="rgb(224,49,42)" fg:x="1161" fg:w="4"/><text x="94.3343%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="94.0843%" y="197" width="0.3241%" height="15" fill="rgb(218,129,5)" fg:x="1161" fg:w="4"/><text x="94.3343%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="94.3274%" y="181" width="0.0810%" height="15" fill="rgb(240,199,54)" fg:x="1164" fg:w="1"/><text x="94.5774%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="94.4084%" y="213" width="0.1621%" height="15" fill="rgb(234,31,13)" fg:x="1165" fg:w="2"/><text x="94.6584%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="94.4084%" y="197" width="0.1621%" height="15" fill="rgb(219,73,54)" fg:x="1165" fg:w="2"/><text x="94.6584%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="94.4895%" y="181" width="0.0810%" height="15" fill="rgb(251,162,10)" fg:x="1166" fg:w="1"/><text x="94.7395%" y="191.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="94.4895%" y="165" width="0.0810%" height="15" fill="rgb(240,138,47)" fg:x="1166" fg:w="1"/><text x="94.7395%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="94.6515%" y="197" width="0.1621%" height="15" fill="rgb(216,138,26)" fg:x="1168" fg:w="2"/><text x="94.9015%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="94.7326%" y="181" width="0.0810%" height="15" fill="rgb(243,17,35)" fg:x="1169" fg:w="1"/><text x="94.9826%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="94.7326%" y="165" width="0.0810%" height="15" fill="rgb(241,60,18)" fg:x="1169" fg:w="1"/><text x="94.9826%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.41%)</title><rect x="94.5705%" y="213" width="0.4052%" height="15" fill="rgb(234,2,44)" fg:x="1167" fg:w="5"/><text x="94.8205%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.16%)</title><rect x="94.8136%" y="197" width="0.1621%" height="15" fill="rgb(225,225,33)" fg:x="1170" fg:w="2"/><text x="95.0636%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="94.8136%" y="181" width="0.1621%" height="15" fill="rgb(234,50,31)" fg:x="1170" fg:w="2"/><text x="95.0636%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="94.8136%" y="165" width="0.1621%" height="15" fill="rgb(249,6,25)" fg:x="1170" fg:w="2"/><text x="95.0636%" y="175.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="94.9757%" y="165" width="0.1621%" height="15" fill="rgb(241,5,17)" fg:x="1172" fg:w="2"/><text x="95.2257%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.9757%" y="149" width="0.1621%" height="15" fill="rgb(207,116,10)" fg:x="1172" fg:w="2"/><text x="95.2257%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0567%" y="133" width="0.0810%" height="15" fill="rgb(222,128,18)" fg:x="1173" fg:w="1"/><text x="95.3067%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.0567%" y="117" width="0.0810%" height="15" fill="rgb(229,109,25)" fg:x="1173" fg:w="1"/><text x="95.3067%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="94.9757%" y="213" width="0.2431%" height="15" fill="rgb(222,102,25)" fg:x="1172" fg:w="3"/><text x="95.2257%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="94.9757%" y="197" width="0.2431%" height="15" fill="rgb(239,211,5)" fg:x="1172" fg:w="3"/><text x="95.2257%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="94.9757%" y="181" width="0.2431%" height="15" fill="rgb(223,136,26)" fg:x="1172" fg:w="3"/><text x="95.2257%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="95.1378%" y="165" width="0.0810%" height="15" fill="rgb(227,30,15)" fg:x="1174" fg:w="1"/><text x="95.3878%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="95.1378%" y="149" width="0.0810%" height="15" fill="rgb(247,76,4)" fg:x="1174" fg:w="1"/><text x="95.3878%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (11 samples, 0.89%)</title><rect x="94.4084%" y="261" width="0.8914%" height="15" fill="rgb(245,38,48)" fg:x="1165" fg:w="11"/><text x="94.6584%" y="271.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (11 samples, 0.89%)</title><rect x="94.4084%" y="245" width="0.8914%" height="15" fill="rgb(210,220,14)" fg:x="1165" fg:w="11"/><text x="94.6584%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.89%)</title><rect x="94.4084%" y="229" width="0.8914%" height="15" fill="rgb(224,60,51)" fg:x="1165" fg:w="11"/><text x="94.6584%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="95.2188%" y="213" width="0.0810%" height="15" fill="rgb(212,133,49)" fg:x="1175" fg:w="1"/><text x="95.4688%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.2188%" y="197" width="0.0810%" height="15" fill="rgb(231,39,22)" fg:x="1175" fg:w="1"/><text x="95.4688%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.2188%" y="181" width="0.0810%" height="15" fill="rgb(236,173,22)" fg:x="1175" fg:w="1"/><text x="95.4688%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.2188%" y="165" width="0.0810%" height="15" fill="rgb(210,70,0)" fg:x="1175" fg:w="1"/><text x="95.4688%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="95.2188%" y="149" width="0.0810%" height="15" fill="rgb(215,170,11)" fg:x="1175" fg:w="1"/><text x="95.4688%" y="159.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (13 samples, 1.05%)</title><rect x="94.4084%" y="277" width="1.0535%" height="15" fill="rgb(220,154,28)" fg:x="1165" fg:w="13"/><text x="94.6584%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="95.2998%" y="261" width="0.1621%" height="15" fill="rgb(240,160,41)" fg:x="1176" fg:w="2"/><text x="95.5498%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="95.2998%" y="245" width="0.1621%" height="15" fill="rgb(243,215,41)" fg:x="1176" fg:w="2"/><text x="95.5498%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="95.2998%" y="229" width="0.1621%" height="15" fill="rgb(214,208,31)" fg:x="1176" fg:w="2"/><text x="95.5498%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="95.2998%" y="213" width="0.1621%" height="15" fill="rgb(247,57,22)" fg:x="1176" fg:w="2"/><text x="95.5498%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="95.2998%" y="197" width="0.1621%" height="15" fill="rgb(228,73,52)" fg:x="1176" fg:w="2"/><text x="95.5498%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.3809%" y="181" width="0.0810%" height="15" fill="rgb(252,60,9)" fg:x="1177" fg:w="1"/><text x="95.6309%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (195 samples, 15.80%)</title><rect x="79.7407%" y="373" width="15.8023%" height="15" fill="rgb(233,9,51)" fg:x="984" fg:w="195"/><text x="79.9907%" y="383.50">&lt;&amp;kernel::model::EntityP..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (176 samples, 14.26%)</title><rect x="81.2804%" y="357" width="14.2626%" height="15" fill="rgb(223,67,14)" fg:x="1003" fg:w="176"/><text x="81.5304%" y="367.50">plugins_core::looking:..</text></g><g><title>indefinite::indefinite (176 samples, 14.26%)</title><rect x="81.2804%" y="341" width="14.2626%" height="15" fill="rgb(222,86,2)" fg:x="1003" fg:w="176"/><text x="81.5304%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (176 samples, 14.26%)</title><rect x="81.2804%" y="325" width="14.2626%" height="15" fill="rgb(243,58,54)" fg:x="1003" fg:w="176"/><text x="81.5304%" y="335.50">indefinite::methods::i..</text></g><g><title>indefinite::methods::apply_rules (174 samples, 14.10%)</title><rect x="81.4425%" y="309" width="14.1005%" height="15" fill="rgb(210,200,39)" fg:x="1005" fg:w="174"/><text x="81.6925%" y="319.50">indefinite::methods::..</text></g><g><title>indefinite::rules::other::Other::run (14 samples, 1.13%)</title><rect x="94.4084%" y="293" width="1.1345%" height="15" fill="rgb(238,135,9)" fg:x="1165" fg:w="14"/><text x="94.6584%" y="303.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="95.4619%" y="277" width="0.0810%" height="15" fill="rgb(232,179,7)" fg:x="1178" fg:w="1"/><text x="95.7119%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="95.5429%" y="357" width="0.1621%" height="15" fill="rgb(245,65,41)" fg:x="1179" fg:w="2"/><text x="95.7929%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="95.5429%" y="341" width="0.1621%" height="15" fill="rgb(227,43,8)" fg:x="1179" fg:w="2"/><text x="95.7929%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="95.5429%" y="325" width="0.1621%" height="15" fill="rgb(235,91,14)" fg:x="1179" fg:w="2"/><text x="95.7929%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.6240%" y="309" width="0.0810%" height="15" fill="rgb(235,219,31)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="95.6240%" y="293" width="0.0810%" height="15" fill="rgb(227,121,25)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="95.6240%" y="277" width="0.0810%" height="15" fill="rgb(254,129,24)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="95.6240%" y="261" width="0.0810%" height="15" fill="rgb(226,144,49)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="95.6240%" y="245" width="0.0810%" height="15" fill="rgb(214,187,32)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.6240%" y="229" width="0.0810%" height="15" fill="rgb(243,129,46)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.6240%" y="213" width="0.0810%" height="15" fill="rgb(221,185,35)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="95.6240%" y="197" width="0.0810%" height="15" fill="rgb(205,0,32)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="95.6240%" y="181" width="0.0810%" height="15" fill="rgb(229,179,12)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="95.6240%" y="165" width="0.0810%" height="15" fill="rgb(252,107,19)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="95.6240%" y="149" width="0.0810%" height="15" fill="rgb(220,95,27)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.6240%" y="133" width="0.0810%" height="15" fill="rgb(240,113,40)" fg:x="1180" fg:w="1"/><text x="95.8740%" y="143.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="95.7050%" y="357" width="0.0810%" height="15" fill="rgb(208,4,43)" fg:x="1181" fg:w="1"/><text x="95.9550%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.57%)</title><rect x="95.5429%" y="373" width="0.5673%" height="15" fill="rgb(247,189,30)" fg:x="1179" fg:w="7"/><text x="95.7929%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="95.7861%" y="357" width="0.3241%" height="15" fill="rgb(231,157,17)" fg:x="1182" fg:w="4"/><text x="96.0361%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="95.8671%" y="341" width="0.2431%" height="15" fill="rgb(224,139,6)" fg:x="1183" fg:w="3"/><text x="96.1171%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="95.8671%" y="325" width="0.2431%" height="15" fill="rgb(223,83,16)" fg:x="1183" fg:w="3"/><text x="96.1171%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="95.8671%" y="309" width="0.2431%" height="15" fill="rgb(232,211,20)" fg:x="1183" fg:w="3"/><text x="96.1171%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="95.8671%" y="293" width="0.2431%" height="15" fill="rgb(225,203,35)" fg:x="1183" fg:w="3"/><text x="96.1171%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="95.9481%" y="277" width="0.1621%" height="15" fill="rgb(215,211,44)" fg:x="1184" fg:w="2"/><text x="96.1981%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="95.9481%" y="261" width="0.1621%" height="15" fill="rgb(248,213,26)" fg:x="1184" fg:w="2"/><text x="96.1981%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.1102%" y="341" width="0.0810%" height="15" fill="rgb(214,23,52)" fg:x="1186" fg:w="1"/><text x="96.3602%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="96.1102%" y="325" width="0.0810%" height="15" fill="rgb(225,173,50)" fg:x="1186" fg:w="1"/><text x="96.3602%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1102%" y="309" width="0.0810%" height="15" fill="rgb(206,150,22)" fg:x="1186" fg:w="1"/><text x="96.3602%" y="319.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (2 samples, 0.16%)</title><rect x="96.1102%" y="357" width="0.1621%" height="15" fill="rgb(239,64,23)" fg:x="1186" fg:w="2"/><text x="96.3602%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="96.1912%" y="341" width="0.0810%" height="15" fill="rgb(242,50,38)" fg:x="1187" fg:w="1"/><text x="96.4412%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="96.1912%" y="325" width="0.0810%" height="15" fill="rgb(217,91,15)" fg:x="1187" fg:w="1"/><text x="96.4412%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.1912%" y="309" width="0.0810%" height="15" fill="rgb(230,172,6)" fg:x="1187" fg:w="1"/><text x="96.4412%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.1912%" y="293" width="0.0810%" height="15" fill="rgb(221,98,26)" fg:x="1187" fg:w="1"/><text x="96.4412%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.1912%" y="277" width="0.0810%" height="15" fill="rgb(227,210,45)" fg:x="1187" fg:w="1"/><text x="96.4412%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.1912%" y="261" width="0.0810%" height="15" fill="rgb(206,8,30)" fg:x="1187" fg:w="1"/><text x="96.4412%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.1912%" y="245" width="0.0810%" height="15" fill="rgb(241,219,17)" fg:x="1187" fg:w="1"/><text x="96.4412%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.1912%" y="229" width="0.0810%" height="15" fill="rgb(247,121,29)" fg:x="1187" fg:w="1"/><text x="96.4412%" y="239.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="96.1912%" y="213" width="0.0810%" height="15" fill="rgb(219,169,49)" fg:x="1187" fg:w="1"/><text x="96.4412%" y="223.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::de::Deserialize for burrow_bon::perms::Acls&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.4344%" y="245" width="0.0810%" height="15" fill="rgb(253,49,49)" fg:x="1190" fg:w="1"/><text x="96.6844%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.4344%" y="229" width="0.0810%" height="15" fill="rgb(217,178,3)" fg:x="1190" fg:w="1"/><text x="96.6844%" y="239.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="96.4344%" y="293" width="0.1621%" height="15" fill="rgb(234,73,37)" fg:x="1190" fg:w="2"/><text x="96.6844%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="96.4344%" y="277" width="0.1621%" height="15" fill="rgb(250,98,22)" fg:x="1190" fg:w="2"/><text x="96.6844%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.4344%" y="261" width="0.1621%" height="15" fill="rgb(220,108,37)" fg:x="1190" fg:w="2"/><text x="96.6844%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="96.5154%" y="245" width="0.0810%" height="15" fill="rgb(225,168,10)" fg:x="1191" fg:w="1"/><text x="96.7654%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5154%" y="229" width="0.0810%" height="15" fill="rgb(247,215,21)" fg:x="1191" fg:w="1"/><text x="96.7654%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="96.5154%" y="213" width="0.0810%" height="15" fill="rgb(253,189,31)" fg:x="1191" fg:w="1"/><text x="96.7654%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.5154%" y="197" width="0.0810%" height="15" fill="rgb(241,54,22)" fg:x="1191" fg:w="1"/><text x="96.7654%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.5154%" y="181" width="0.0810%" height="15" fill="rgb(211,87,4)" fg:x="1191" fg:w="1"/><text x="96.7654%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.57%)</title><rect x="96.1102%" y="373" width="0.5673%" height="15" fill="rgb(245,112,24)" fg:x="1186" fg:w="7"/><text x="96.3602%" y="383.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.41%)</title><rect x="96.2723%" y="357" width="0.4052%" height="15" fill="rgb(235,190,41)" fg:x="1188" fg:w="5"/><text x="96.5223%" y="367.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.41%)</title><rect x="96.2723%" y="341" width="0.4052%" height="15" fill="rgb(214,89,8)" fg:x="1188" fg:w="5"/><text x="96.5223%" y="351.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.41%)</title><rect x="96.2723%" y="325" width="0.4052%" height="15" fill="rgb(249,155,35)" fg:x="1188" fg:w="5"/><text x="96.5223%" y="335.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.32%)</title><rect x="96.3533%" y="309" width="0.3241%" height="15" fill="rgb(249,88,26)" fg:x="1189" fg:w="4"/><text x="96.6033%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="96.5964%" y="293" width="0.0810%" height="15" fill="rgb(232,56,8)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="303.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="96.5964%" y="277" width="0.0810%" height="15" fill="rgb(240,95,3)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.5964%" y="261" width="0.0810%" height="15" fill="rgb(222,44,28)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.5964%" y="245" width="0.0810%" height="15" fill="rgb(234,16,30)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.5964%" y="229" width="0.0810%" height="15" fill="rgb(223,26,17)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.5964%" y="213" width="0.0810%" height="15" fill="rgb(239,187,47)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.5964%" y="197" width="0.0810%" height="15" fill="rgb(247,102,50)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.5964%" y="181" width="0.0810%" height="15" fill="rgb(231,216,22)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.5964%" y="165" width="0.0810%" height="15" fill="rgb(216,201,26)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.5964%" y="149" width="0.0810%" height="15" fill="rgb(214,186,23)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="96.5964%" y="133" width="0.0810%" height="15" fill="rgb(235,184,4)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="96.5964%" y="117" width="0.0810%" height="15" fill="rgb(244,46,17)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="127.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="96.5964%" y="101" width="0.0810%" height="15" fill="rgb(248,74,46)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5964%" y="85" width="0.0810%" height="15" fill="rgb(243,79,5)" fg:x="1192" fg:w="1"/><text x="96.8464%" y="95.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (218 samples, 17.67%)</title><rect x="79.0924%" y="533" width="17.6661%" height="15" fill="rgb(213,148,1)" fg:x="976" fg:w="218"/><text x="79.3424%" y="543.50">kernel::plugins::mw::Middle..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (218 samples, 17.67%)</title><rect x="79.0924%" y="517" width="17.6661%" height="15" fill="rgb(221,30,0)" fg:x="976" fg:w="218"/><text x="79.3424%" y="527.50">&lt;plugins_dynlib::DynamicMid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (218 samples, 17.67%)</title><rect x="79.0924%" y="501" width="17.6661%" height="15" fill="rgb(207,85,29)" fg:x="976" fg:w="218"/><text x="79.3424%" y="511.50">kernel::plugins::mw::Middle..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (218 samples, 17.67%)</title><rect x="79.0924%" y="485" width="17.6661%" height="15" fill="rgb(239,31,46)" fg:x="976" fg:w="218"/><text x="79.3424%" y="495.50">core::ops::function::FnOnce..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (217 samples, 17.59%)</title><rect x="79.1734%" y="469" width="17.5851%" height="15" fill="rgb(219,6,1)" fg:x="977" fg:w="217"/><text x="79.4234%" y="479.50">kernel::plugins::mw::Middle..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (216 samples, 17.50%)</title><rect x="79.2545%" y="453" width="17.5041%" height="15" fill="rgb(229,90,29)" fg:x="978" fg:w="216"/><text x="79.5045%" y="463.50">core::ops::function::FnOnce..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (216 samples, 17.50%)</title><rect x="79.2545%" y="437" width="17.5041%" height="15" fill="rgb(242,201,42)" fg:x="978" fg:w="216"/><text x="79.5045%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (216 samples, 17.50%)</title><rect x="79.2545%" y="421" width="17.5041%" height="15" fill="rgb(243,80,54)" fg:x="978" fg:w="216"/><text x="79.5045%" y="431.50">&lt;engine::session::state::St..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (216 samples, 17.50%)</title><rect x="79.2545%" y="405" width="17.5041%" height="15" fill="rgb(223,166,15)" fg:x="978" fg:w="216"/><text x="79.5045%" y="415.50">&lt;plugins_core::looking::act..</text></g><g><title>plugins_core::looking::model::new_area_observation (210 samples, 17.02%)</title><rect x="79.7407%" y="389" width="17.0178%" height="15" fill="rgb(238,78,27)" fg:x="984" fg:w="210"/><text x="79.9907%" y="399.50">plugins_core::looking::mod..</text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="96.6775%" y="373" width="0.0810%" height="15" fill="rgb(235,28,43)" fg:x="1193" fg:w="1"/><text x="96.9275%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="96.6775%" y="357" width="0.0810%" height="15" fill="rgb(240,210,28)" fg:x="1193" fg:w="1"/><text x="96.9275%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.6775%" y="341" width="0.0810%" height="15" fill="rgb(253,6,46)" fg:x="1193" fg:w="1"/><text x="96.9275%" y="351.50"></text></g><g><title>plugins_rune::runner::SharedRunners::after (1 samples, 0.08%)</title><rect x="96.7585%" y="533" width="0.0810%" height="15" fill="rgb(250,159,47)" fg:x="1194" fg:w="1"/><text x="97.0085%" y="543.50"></text></g><g><title>plugins_rune::runner::SharedRunners::before (1 samples, 0.08%)</title><rect x="96.8395%" y="533" width="0.0810%" height="15" fill="rgb(216,139,2)" fg:x="1195" fg:w="1"/><text x="97.0895%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.9206%" y="517" width="0.0810%" height="15" fill="rgb(221,124,44)" fg:x="1196" fg:w="1"/><text x="97.1706%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.0016%" y="501" width="0.0810%" height="15" fill="rgb(205,37,22)" fg:x="1197" fg:w="1"/><text x="97.2516%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0016%" y="485" width="0.0810%" height="15" fill="rgb(250,55,8)" fg:x="1197" fg:w="1"/><text x="97.2516%" y="495.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="97.1637%" y="485" width="0.0810%" height="15" fill="rgb(215,83,48)" fg:x="1199" fg:w="1"/><text x="97.4137%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.1637%" y="469" width="0.0810%" height="15" fill="rgb(253,2,32)" fg:x="1199" fg:w="1"/><text x="97.4137%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.1637%" y="453" width="0.0810%" height="15" fill="rgb(236,67,28)" fg:x="1199" fg:w="1"/><text x="97.4137%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.1637%" y="437" width="0.0810%" height="15" fill="rgb(252,55,15)" fg:x="1199" fg:w="1"/><text x="97.4137%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.1637%" y="421" width="0.0810%" height="15" fill="rgb(243,173,17)" fg:x="1199" fg:w="1"/><text x="97.4137%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2447%" y="373" width="0.0810%" height="15" fill="rgb(215,212,13)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.2447%" y="357" width="0.0810%" height="15" fill="rgb(253,176,6)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2447%" y="341" width="0.0810%" height="15" fill="rgb(236,105,26)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.2447%" y="325" width="0.0810%" height="15" fill="rgb(239,226,32)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.2447%" y="309" width="0.0810%" height="15" fill="rgb(236,104,51)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.2447%" y="293" width="0.0810%" height="15" fill="rgb(220,172,33)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.2447%" y="277" width="0.0810%" height="15" fill="rgb(224,182,25)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2447%" y="261" width="0.0810%" height="15" fill="rgb(236,184,24)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.2447%" y="245" width="0.0810%" height="15" fill="rgb(241,221,14)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.2447%" y="229" width="0.0810%" height="15" fill="rgb(227,146,5)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.2447%" y="213" width="0.0810%" height="15" fill="rgb(214,15,23)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.2447%" y="197" width="0.0810%" height="15" fill="rgb(233,157,31)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.2447%" y="181" width="0.0810%" height="15" fill="rgb(211,27,52)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2447%" y="165" width="0.0810%" height="15" fill="rgb(212,223,15)" fg:x="1200" fg:w="1"/><text x="97.4947%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.2447%" y="421" width="0.1621%" height="15" fill="rgb(254,211,0)" fg:x="1200" fg:w="2"/><text x="97.4947%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.2447%" y="405" width="0.1621%" height="15" fill="rgb(205,43,38)" fg:x="1200" fg:w="2"/><text x="97.4947%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.2447%" y="389" width="0.1621%" height="15" fill="rgb(242,206,46)" fg:x="1200" fg:w="2"/><text x="97.4947%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3258%" y="373" width="0.0810%" height="15" fill="rgb(220,221,12)" fg:x="1201" fg:w="1"/><text x="97.5758%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3258%" y="357" width="0.0810%" height="15" fill="rgb(217,156,35)" fg:x="1201" fg:w="1"/><text x="97.5758%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.3258%" y="341" width="0.0810%" height="15" fill="rgb(207,181,49)" fg:x="1201" fg:w="1"/><text x="97.5758%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.3258%" y="325" width="0.0810%" height="15" fill="rgb(235,103,47)" fg:x="1201" fg:w="1"/><text x="97.5758%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.3258%" y="309" width="0.0810%" height="15" fill="rgb(222,63,28)" fg:x="1201" fg:w="1"/><text x="97.5758%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="97.3258%" y="293" width="0.0810%" height="15" fill="rgb(244,137,21)" fg:x="1201" fg:w="1"/><text x="97.5758%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.3258%" y="277" width="0.0810%" height="15" fill="rgb(228,35,27)" fg:x="1201" fg:w="1"/><text x="97.5758%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.4068%" y="261" width="0.0810%" height="15" fill="rgb(226,191,41)" fg:x="1202" fg:w="1"/><text x="97.6568%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.4068%" y="245" width="0.0810%" height="15" fill="rgb(210,154,3)" fg:x="1202" fg:w="1"/><text x="97.6568%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="97.4068%" y="293" width="0.2431%" height="15" fill="rgb(216,60,49)" fg:x="1202" fg:w="3"/><text x="97.6568%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="97.4068%" y="277" width="0.2431%" height="15" fill="rgb(226,17,20)" fg:x="1202" fg:w="3"/><text x="97.6568%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="97.4878%" y="261" width="0.1621%" height="15" fill="rgb(206,115,35)" fg:x="1203" fg:w="2"/><text x="97.7378%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.5689%" y="245" width="0.0810%" height="15" fill="rgb(227,88,1)" fg:x="1204" fg:w="1"/><text x="97.8189%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="97.4068%" y="325" width="0.3241%" height="15" fill="rgb(230,222,24)" fg:x="1202" fg:w="4"/><text x="97.6568%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="97.4068%" y="309" width="0.3241%" height="15" fill="rgb(214,124,32)" fg:x="1202" fg:w="4"/><text x="97.6568%" y="319.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.6499%" y="293" width="0.0810%" height="15" fill="rgb(240,41,36)" fg:x="1205" fg:w="1"/><text x="97.8999%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6499%" y="277" width="0.0810%" height="15" fill="rgb(221,17,52)" fg:x="1205" fg:w="1"/><text x="97.8999%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.6499%" y="261" width="0.0810%" height="15" fill="rgb(252,70,16)" fg:x="1205" fg:w="1"/><text x="97.8999%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6499%" y="245" width="0.0810%" height="15" fill="rgb(250,177,4)" fg:x="1205" fg:w="1"/><text x="97.8999%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="97.4068%" y="421" width="0.4052%" height="15" fill="rgb(240,188,47)" fg:x="1202" fg:w="5"/><text x="97.6568%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="97.4068%" y="405" width="0.4052%" height="15" fill="rgb(215,92,12)" fg:x="1202" fg:w="5"/><text x="97.6568%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="97.4068%" y="389" width="0.4052%" height="15" fill="rgb(242,110,29)" fg:x="1202" fg:w="5"/><text x="97.6568%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.41%)</title><rect x="97.4068%" y="373" width="0.4052%" height="15" fill="rgb(208,211,26)" fg:x="1202" fg:w="5"/><text x="97.6568%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="97.4068%" y="357" width="0.4052%" height="15" fill="rgb(244,147,6)" fg:x="1202" fg:w="5"/><text x="97.6568%" y="367.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="97.4068%" y="341" width="0.4052%" height="15" fill="rgb(211,130,42)" fg:x="1202" fg:w="5"/><text x="97.6568%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7310%" y="325" width="0.0810%" height="15" fill="rgb(220,63,1)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7310%" y="309" width="0.0810%" height="15" fill="rgb(241,212,30)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.7310%" y="293" width="0.0810%" height="15" fill="rgb(233,153,17)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="303.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.7310%" y="277" width="0.0810%" height="15" fill="rgb(236,3,10)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.7310%" y="261" width="0.0810%" height="15" fill="rgb(232,41,21)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7310%" y="245" width="0.0810%" height="15" fill="rgb(206,63,51)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.7310%" y="229" width="0.0810%" height="15" fill="rgb(250,214,3)" fg:x="1206" fg:w="1"/><text x="97.9810%" y="239.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="97.8120%" y="421" width="0.0810%" height="15" fill="rgb(254,89,27)" fg:x="1207" fg:w="1"/><text x="98.0620%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.8120%" y="405" width="0.0810%" height="15" fill="rgb(249,41,14)" fg:x="1207" fg:w="1"/><text x="98.0620%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="97.8120%" y="389" width="0.0810%" height="15" fill="rgb(221,196,51)" fg:x="1207" fg:w="1"/><text x="98.0620%" y="399.50"></text></g><g><title>plugins_core::tools::contained_by (11 samples, 0.89%)</title><rect x="97.0827%" y="501" width="0.8914%" height="15" fill="rgb(214,116,26)" fg:x="1198" fg:w="11"/><text x="97.3327%" y="511.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.73%)</title><rect x="97.2447%" y="485" width="0.7293%" height="15" fill="rgb(236,67,7)" fg:x="1200" fg:w="9"/><text x="97.4947%" y="495.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.73%)</title><rect x="97.2447%" y="469" width="0.7293%" height="15" fill="rgb(253,179,32)" fg:x="1200" fg:w="9"/><text x="97.4947%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.73%)</title><rect x="97.2447%" y="453" width="0.7293%" height="15" fill="rgb(218,33,15)" fg:x="1200" fg:w="9"/><text x="97.4947%" y="463.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="97.2447%" y="437" width="0.7293%" height="15" fill="rgb(217,202,41)" fg:x="1200" fg:w="9"/><text x="97.4947%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="97.8930%" y="421" width="0.0810%" height="15" fill="rgb(234,133,5)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="431.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.8930%" y="405" width="0.0810%" height="15" fill="rgb(240,47,40)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.8930%" y="389" width="0.0810%" height="15" fill="rgb(234,166,26)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8930%" y="373" width="0.0810%" height="15" fill="rgb(244,125,51)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.8930%" y="357" width="0.0810%" height="15" fill="rgb(229,171,11)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.8930%" y="341" width="0.0810%" height="15" fill="rgb(224,38,45)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.8930%" y="325" width="0.0810%" height="15" fill="rgb(237,27,7)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.8930%" y="309" width="0.0810%" height="15" fill="rgb(216,52,7)" fg:x="1208" fg:w="1"/><text x="98.1430%" y="319.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="97.9741%" y="389" width="0.1621%" height="15" fill="rgb(243,11,11)" fg:x="1209" fg:w="2"/><text x="98.2241%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.0551%" y="373" width="0.0810%" height="15" fill="rgb(253,167,20)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.0551%" y="357" width="0.0810%" height="15" fill="rgb(215,207,5)" fg:x="1210" fg:w="1"/><text x="98.3051%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="97.9741%" y="437" width="0.2431%" height="15" fill="rgb(252,127,31)" fg:x="1209" fg:w="3"/><text x="98.2241%" y="447.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="97.9741%" y="421" width="0.2431%" height="15" fill="rgb(209,106,27)" fg:x="1209" fg:w="3"/><text x="98.2241%" y="431.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="97.9741%" y="405" width="0.2431%" height="15" fill="rgb(214,220,18)" fg:x="1209" fg:w="3"/><text x="98.2241%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1361%" y="389" width="0.0810%" height="15" fill="rgb(237,89,12)" fg:x="1211" fg:w="1"/><text x="98.3861%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1361%" y="373" width="0.0810%" height="15" fill="rgb(209,167,36)" fg:x="1211" fg:w="1"/><text x="98.3861%" y="383.50"></text></g><g><title>plugins_core::tools::occupied_by (4 samples, 0.32%)</title><rect x="97.9741%" y="501" width="0.3241%" height="15" fill="rgb(243,45,22)" fg:x="1209" fg:w="4"/><text x="98.2241%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="97.9741%" y="485" width="0.3241%" height="15" fill="rgb(239,2,46)" fg:x="1209" fg:w="4"/><text x="98.2241%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="97.9741%" y="469" width="0.3241%" height="15" fill="rgb(241,101,0)" fg:x="1209" fg:w="4"/><text x="98.2241%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="97.9741%" y="453" width="0.3241%" height="15" fill="rgb(244,34,31)" fg:x="1209" fg:w="4"/><text x="98.2241%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2172%" y="437" width="0.0810%" height="15" fill="rgb(248,23,22)" fg:x="1212" fg:w="1"/><text x="98.4672%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2172%" y="421" width="0.0810%" height="15" fill="rgb(218,27,48)" fg:x="1212" fg:w="1"/><text x="98.4672%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.2172%" y="405" width="0.0810%" height="15" fill="rgb(232,78,1)" fg:x="1212" fg:w="1"/><text x="98.4672%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.2172%" y="389" width="0.0810%" height="15" fill="rgb(233,169,12)" fg:x="1212" fg:w="1"/><text x="98.4672%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.2172%" y="373" width="0.0810%" height="15" fill="rgb(225,222,54)" fg:x="1212" fg:w="1"/><text x="98.4672%" y="383.50"></text></g><g><title>engine::session::Session::captured (249 samples, 20.18%)</title><rect x="78.2010%" y="677" width="20.1783%" height="15" fill="rgb(245,126,29)" fg:x="965" fg:w="249"/><text x="78.4510%" y="687.50">engine::session::Session::captur..</text></g><g><title>engine::session::logs::capture (249 samples, 20.18%)</title><rect x="78.2010%" y="661" width="20.1783%" height="15" fill="rgb(241,63,48)" fg:x="965" fg:w="249"/><text x="78.4510%" y="671.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (247 samples, 20.02%)</title><rect x="78.3630%" y="645" width="20.0162%" height="15" fill="rgb(235,126,38)" fg:x="967" fg:w="247"/><text x="78.6130%" y="655.50">tracing_core::dispatcher::with_..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (247 samples, 20.02%)</title><rect x="78.3630%" y="629" width="20.0162%" height="15" fill="rgb(232,96,49)" fg:x="967" fg:w="247"/><text x="78.6130%" y="639.50">&lt;engine::session::Session as ke..</text></g><g><title>kernel::plugins::mw::apply_middleware (247 samples, 20.02%)</title><rect x="78.3630%" y="613" width="20.0162%" height="15" fill="rgb(211,146,40)" fg:x="967" fg:w="247"/><text x="78.6130%" y="623.50">kernel::plugins::mw::apply_midd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (247 samples, 20.02%)</title><rect x="78.3630%" y="597" width="20.0162%" height="15" fill="rgb(247,93,44)" fg:x="967" fg:w="247"/><text x="78.6130%" y="607.50">kernel::plugins::mw::Middleware..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (247 samples, 20.02%)</title><rect x="78.3630%" y="581" width="20.0162%" height="15" fill="rgb(251,41,49)" fg:x="967" fg:w="247"/><text x="78.6130%" y="591.50">&lt;engine::session::ExpandSurroun..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (238 samples, 19.29%)</title><rect x="79.0924%" y="565" width="19.2869%" height="15" fill="rgb(218,155,12)" fg:x="976" fg:w="238"/><text x="79.3424%" y="575.50">kernel::plugins::mw::Middlewar..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (238 samples, 19.29%)</title><rect x="79.0924%" y="549" width="19.2869%" height="15" fill="rgb(221,161,30)" fg:x="976" fg:w="238"/><text x="79.3424%" y="559.50">&lt;plugins_rune::RuneMiddleware ..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (18 samples, 1.46%)</title><rect x="96.9206%" y="533" width="1.4587%" height="15" fill="rgb(221,179,11)" fg:x="1196" fg:w="18"/><text x="97.1706%" y="543.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (17 samples, 1.38%)</title><rect x="97.0016%" y="517" width="1.3776%" height="15" fill="rgb(224,170,48)" fg:x="1197" fg:w="17"/><text x="97.2516%" y="527.50"></text></g><g><title>plugins_core::tools::worn_by (1 samples, 0.08%)</title><rect x="98.2982%" y="501" width="0.0810%" height="15" fill="rgb(223,117,5)" fg:x="1213" fg:w="1"/><text x="98.5482%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.2982%" y="485" width="0.0810%" height="15" fill="rgb(209,52,20)" fg:x="1213" fg:w="1"/><text x="98.5482%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2982%" y="469" width="0.0810%" height="15" fill="rgb(209,19,41)" fg:x="1213" fg:w="1"/><text x="98.5482%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2982%" y="453" width="0.0810%" height="15" fill="rgb(210,177,12)" fg:x="1213" fg:w="1"/><text x="98.5482%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.2982%" y="437" width="0.0810%" height="15" fill="rgb(211,159,37)" fg:x="1213" fg:w="1"/><text x="98.5482%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.2982%" y="421" width="0.0810%" height="15" fill="rgb(209,20,2)" fg:x="1213" fg:w="1"/><text x="98.5482%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.4603%" y="533" width="0.1621%" height="15" fill="rgb(244,3,46)" fg:x="1215" fg:w="2"/><text x="98.7103%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5413%" y="517" width="0.0810%" height="15" fill="rgb(220,94,38)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5413%" y="501" width="0.0810%" height="15" fill="rgb(253,14,31)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5413%" y="485" width="0.0810%" height="15" fill="rgb(234,176,13)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.5413%" y="469" width="0.0810%" height="15" fill="rgb(218,62,25)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.5413%" y="453" width="0.0810%" height="15" fill="rgb(216,124,40)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.5413%" y="437" width="0.0810%" height="15" fill="rgb(228,170,12)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5413%" y="421" width="0.0810%" height="15" fill="rgb(231,226,5)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5413%" y="405" width="0.0810%" height="15" fill="rgb(237,122,22)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.5413%" y="389" width="0.0810%" height="15" fill="rgb(209,185,25)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.5413%" y="373" width="0.0810%" height="15" fill="rgb(228,200,32)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.5413%" y="357" width="0.0810%" height="15" fill="rgb(217,140,10)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.5413%" y="341" width="0.0810%" height="15" fill="rgb(253,17,24)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.5413%" y="325" width="0.0810%" height="15" fill="rgb(212,61,6)" fg:x="1216" fg:w="1"/><text x="98.7913%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.4603%" y="581" width="0.2431%" height="15" fill="rgb(205,14,25)" fg:x="1215" fg:w="3"/><text x="98.7103%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.4603%" y="565" width="0.2431%" height="15" fill="rgb(232,69,41)" fg:x="1215" fg:w="3"/><text x="98.7103%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.4603%" y="549" width="0.2431%" height="15" fill="rgb(241,106,47)" fg:x="1215" fg:w="3"/><text x="98.7103%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.6224%" y="533" width="0.0810%" height="15" fill="rgb(210,213,53)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.6224%" y="517" width="0.0810%" height="15" fill="rgb(253,175,27)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.6224%" y="501" width="0.0810%" height="15" fill="rgb(211,171,24)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.6224%" y="485" width="0.0810%" height="15" fill="rgb(229,80,7)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.6224%" y="469" width="0.0810%" height="15" fill="rgb(212,46,39)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.6224%" y="453" width="0.0810%" height="15" fill="rgb(240,80,45)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.6224%" y="437" width="0.0810%" height="15" fill="rgb(253,177,40)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="447.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.6224%" y="421" width="0.0810%" height="15" fill="rgb(249,200,15)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="431.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.6224%" y="405" width="0.0810%" height="15" fill="rgb(217,78,26)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="415.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="98.6224%" y="389" width="0.0810%" height="15" fill="rgb(254,151,32)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="399.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.08%)</title><rect x="98.6224%" y="373" width="0.0810%" height="15" fill="rgb(226,165,27)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="383.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.08%)</title><rect x="98.6224%" y="357" width="0.0810%" height="15" fill="rgb(250,206,4)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.08%)</title><rect x="98.6224%" y="341" width="0.0810%" height="15" fill="rgb(231,229,27)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="98.6224%" y="325" width="0.0810%" height="15" fill="rgb(239,217,8)" fg:x="1217" fg:w="1"/><text x="98.8724%" y="335.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.41%)</title><rect x="98.3793%" y="661" width="0.4052%" height="15" fill="rgb(225,204,27)" fg:x="1214" fg:w="5"/><text x="98.6293%" y="671.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="98.3793%" y="645" width="0.4052%" height="15" fill="rgb(230,56,32)" fg:x="1214" fg:w="5"/><text x="98.6293%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.4603%" y="629" width="0.3241%" height="15" fill="rgb(222,56,27)" fg:x="1215" fg:w="4"/><text x="98.7103%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="98.4603%" y="613" width="0.3241%" height="15" fill="rgb(253,108,27)" fg:x="1215" fg:w="4"/><text x="98.7103%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.4603%" y="597" width="0.3241%" height="15" fill="rgb(212,87,36)" fg:x="1215" fg:w="4"/><text x="98.7103%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7034%" y="581" width="0.0810%" height="15" fill="rgb(247,82,36)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7034%" y="565" width="0.0810%" height="15" fill="rgb(222,143,9)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7034%" y="549" width="0.0810%" height="15" fill="rgb(238,162,48)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.7034%" y="533" width="0.0810%" height="15" fill="rgb(221,59,43)" fg:x="1218" fg:w="1"/><text x="98.9534%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.7844%" y="581" width="0.0810%" height="15" fill="rgb(205,166,41)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.7844%" y="565" width="0.0810%" height="15" fill="rgb(241,186,40)" fg:x="1219" fg:w="1"/><text x="99.0344%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.7844%" y="645" width="0.1621%" height="15" fill="rgb(216,119,35)" fg:x="1219" fg:w="2"/><text x="99.0344%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.7844%" y="629" width="0.1621%" height="15" fill="rgb(208,68,38)" fg:x="1219" fg:w="2"/><text x="99.0344%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.7844%" y="613" width="0.1621%" height="15" fill="rgb(217,113,1)" fg:x="1219" fg:w="2"/><text x="99.0344%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.7844%" y="597" width="0.1621%" height="15" fill="rgb(242,153,3)" fg:x="1219" fg:w="2"/><text x="99.0344%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8655%" y="581" width="0.0810%" height="15" fill="rgb(229,76,35)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8655%" y="565" width="0.0810%" height="15" fill="rgb(229,125,34)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8655%" y="549" width="0.0810%" height="15" fill="rgb(238,179,36)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8655%" y="533" width="0.0810%" height="15" fill="rgb(244,183,19)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8655%" y="517" width="0.0810%" height="15" fill="rgb(216,85,49)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8655%" y="501" width="0.0810%" height="15" fill="rgb(208,161,47)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8655%" y="485" width="0.0810%" height="15" fill="rgb(233,210,18)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8655%" y="469" width="0.0810%" height="15" fill="rgb(205,104,42)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8655%" y="453" width="0.0810%" height="15" fill="rgb(248,90,43)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8655%" y="437" width="0.0810%" height="15" fill="rgb(206,198,11)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8655%" y="421" width="0.0810%" height="15" fill="rgb(239,165,27)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8655%" y="405" width="0.0810%" height="15" fill="rgb(246,44,32)" fg:x="1220" fg:w="1"/><text x="99.1155%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9465%" y="549" width="0.0810%" height="15" fill="rgb(252,65,42)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9465%" y="533" width="0.0810%" height="15" fill="rgb(246,197,18)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="543.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="98.9465%" y="517" width="0.0810%" height="15" fill="rgb(216,192,4)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9465%" y="501" width="0.0810%" height="15" fill="rgb(208,117,10)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9465%" y="485" width="0.0810%" height="15" fill="rgb(240,61,47)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9465%" y="469" width="0.0810%" height="15" fill="rgb(228,178,21)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9465%" y="453" width="0.0810%" height="15" fill="rgb(219,96,54)" fg:x="1221" fg:w="1"/><text x="99.1965%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="98.9465%" y="645" width="0.3241%" height="15" fill="rgb(250,177,24)" fg:x="1221" fg:w="4"/><text x="99.1965%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="98.9465%" y="629" width="0.3241%" height="15" fill="rgb(242,154,46)" fg:x="1221" fg:w="4"/><text x="99.1965%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="98.9465%" y="613" width="0.3241%" height="15" fill="rgb(226,176,29)" fg:x="1221" fg:w="4"/><text x="99.1965%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="98.9465%" y="597" width="0.3241%" height="15" fill="rgb(226,29,2)" fg:x="1221" fg:w="4"/><text x="99.1965%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="98.9465%" y="581" width="0.3241%" height="15" fill="rgb(237,104,14)" fg:x="1221" fg:w="4"/><text x="99.1965%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="98.9465%" y="565" width="0.3241%" height="15" fill="rgb(245,207,31)" fg:x="1221" fg:w="4"/><text x="99.1965%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.0276%" y="549" width="0.2431%" height="15" fill="rgb(229,211,45)" fg:x="1222" fg:w="3"/><text x="99.2776%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="99.0276%" y="533" width="0.2431%" height="15" fill="rgb(229,113,15)" fg:x="1222" fg:w="3"/><text x="99.2776%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="99.1086%" y="517" width="0.1621%" height="15" fill="rgb(237,147,15)" fg:x="1223" fg:w="2"/><text x="99.3586%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1896%" y="501" width="0.0810%" height="15" fill="rgb(244,120,12)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="99.1896%" y="485" width="0.0810%" height="15" fill="rgb(205,120,12)" fg:x="1224" fg:w="1"/><text x="99.4396%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2707%" y="581" width="0.0810%" height="15" fill="rgb(231,26,45)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2707%" y="565" width="0.0810%" height="15" fill="rgb(246,98,1)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2707%" y="549" width="0.0810%" height="15" fill="rgb(207,68,45)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2707%" y="533" width="0.0810%" height="15" fill="rgb(231,27,38)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2707%" y="517" width="0.0810%" height="15" fill="rgb(214,223,3)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2707%" y="501" width="0.0810%" height="15" fill="rgb(228,195,46)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.2707%" y="485" width="0.0810%" height="15" fill="rgb(231,100,42)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.2707%" y="469" width="0.0810%" height="15" fill="rgb(236,53,4)" fg:x="1225" fg:w="1"/><text x="99.5207%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.05%)</title><rect x="98.3793%" y="677" width="1.0535%" height="15" fill="rgb(230,152,12)" fg:x="1214" fg:w="13"/><text x="98.6293%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.65%)</title><rect x="98.7844%" y="661" width="0.6483%" height="15" fill="rgb(226,101,19)" fg:x="1219" fg:w="8"/><text x="99.0344%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.2707%" y="645" width="0.1621%" height="15" fill="rgb(250,149,32)" fg:x="1225" fg:w="2"/><text x="99.5207%" y="655.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.2707%" y="629" width="0.1621%" height="15" fill="rgb(232,178,12)" fg:x="1225" fg:w="2"/><text x="99.5207%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.2707%" y="613" width="0.1621%" height="15" fill="rgb(246,151,17)" fg:x="1225" fg:w="2"/><text x="99.5207%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.2707%" y="597" width="0.1621%" height="15" fill="rgb(252,17,51)" fg:x="1225" fg:w="2"/><text x="99.5207%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3517%" y="581" width="0.0810%" height="15" fill="rgb(250,207,23)" fg:x="1226" fg:w="1"/><text x="99.6017%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="99.4327%" y="645" width="0.1621%" height="15" fill="rgb(205,27,5)" fg:x="1227" fg:w="2"/><text x="99.6827%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5138%" y="629" width="0.0810%" height="15" fill="rgb(224,32,19)" fg:x="1228" fg:w="1"/><text x="99.7638%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5138%" y="613" width="0.0810%" height="15" fill="rgb(247,214,40)" fg:x="1228" fg:w="1"/><text x="99.7638%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5138%" y="597" width="0.0810%" height="15" fill="rgb(239,199,17)" fg:x="1228" fg:w="1"/><text x="99.7638%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5138%" y="581" width="0.0810%" height="15" fill="rgb(251,159,9)" fg:x="1228" fg:w="1"/><text x="99.7638%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5138%" y="565" width="0.0810%" height="15" fill="rgb(225,78,32)" fg:x="1228" fg:w="1"/><text x="99.7638%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.5138%" y="549" width="0.0810%" height="15" fill="rgb(206,97,47)" fg:x="1228" fg:w="1"/><text x="99.7638%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.5138%" y="533" width="0.0810%" height="15" fill="rgb(227,107,4)" fg:x="1228" fg:w="1"/><text x="99.7638%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.5948%" y="629" width="0.0810%" height="15" fill="rgb(241,146,50)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5948%" y="613" width="0.0810%" height="15" fill="rgb(232,92,30)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5948%" y="597" width="0.0810%" height="15" fill="rgb(222,0,40)" fg:x="1229" fg:w="1"/><text x="99.8448%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.6759%" y="629" width="0.0810%" height="15" fill="rgb(219,54,33)" fg:x="1230" fg:w="1"/><text x="99.9259%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6759%" y="613" width="0.0810%" height="15" fill="rgb(226,209,28)" fg:x="1230" fg:w="1"/><text x="99.9259%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.6759%" y="597" width="0.0810%" height="15" fill="rgb(254,205,35)" fg:x="1230" fg:w="1"/><text x="99.9259%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.7569%" y="533" width="0.0810%" height="15" fill="rgb(230,159,3)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.7569%" y="517" width="0.0810%" height="15" fill="rgb(232,190,24)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7569%" y="501" width="0.0810%" height="15" fill="rgb(217,227,44)" fg:x="1231" fg:w="1"/><text x="100.0069%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.7569%" y="581" width="0.1621%" height="15" fill="rgb(236,211,1)" fg:x="1231" fg:w="2"/><text x="100.0069%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7569%" y="565" width="0.1621%" height="15" fill="rgb(250,127,46)" fg:x="1231" fg:w="2"/><text x="100.0069%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.7569%" y="549" width="0.1621%" height="15" fill="rgb(229,213,6)" fg:x="1231" fg:w="2"/><text x="100.0069%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8379%" y="533" width="0.0810%" height="15" fill="rgb(237,15,36)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8379%" y="517" width="0.0810%" height="15" fill="rgb(213,131,41)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.8379%" y="501" width="0.0810%" height="15" fill="rgb(225,82,44)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8379%" y="485" width="0.0810%" height="15" fill="rgb(249,42,11)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8379%" y="469" width="0.0810%" height="15" fill="rgb(253,11,29)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.8379%" y="453" width="0.0810%" height="15" fill="rgb(206,8,54)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.8379%" y="437" width="0.0810%" height="15" fill="rgb(222,186,2)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.8379%" y="421" width="0.0810%" height="15" fill="rgb(221,206,53)" fg:x="1232" fg:w="1"/><text x="100.0879%" y="431.50"></text></g><g><title>all (1,234 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(230,150,21)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1071.50"></text></g><g><title>simple-3d8f7d70 (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(253,202,10)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1055.50">simple-3d8f7d70</text></g><g><title>_start (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(238,109,40)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1039.50">_start</text></g><g><title>__libc_start_main (1,234 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(247,120,22)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1023.50">__libc_start_main</text></g><g><title>main (1,234 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(207,43,30)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="1007.50">main</text></g><g><title>std::rt::lang_start_internal (1,234 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(213,211,24)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,234 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(239,73,39)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,234 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(245,182,19)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,234 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(247,143,26)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="943.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,234 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(228,191,23)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="927.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,234 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(253,165,31)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="911.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,234 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(234,138,20)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="895.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,234 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(218,191,29)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="879.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,234 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(221,157,19)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="863.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,234 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(237,26,42)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="847.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,234 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(220,163,24)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,234 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(242,115,20)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="815.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,234 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(210,206,9)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="799.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,234 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(208,71,17)" fg:x="0" fg:w="1234"/><text x="0.2500%" y="783.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (434 samples, 35.17%)</title><rect x="64.8298%" y="757" width="35.1702%" height="15" fill="rgb(233,7,5)" fg:x="800" fg:w="434"/><text x="65.0798%" y="767.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routin..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (434 samples, 35.17%)</title><rect x="64.8298%" y="741" width="35.1702%" height="15" fill="rgb(207,92,33)" fg:x="800" fg:w="434"/><text x="65.0798%" y="751.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (434 samples, 35.17%)</title><rect x="64.8298%" y="725" width="35.1702%" height="15" fill="rgb(218,87,9)" fg:x="800" fg:w="434"/><text x="65.0798%" y="735.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (270 samples, 21.88%)</title><rect x="78.1199%" y="709" width="21.8801%" height="15" fill="rgb(219,47,37)" fg:x="964" fg:w="270"/><text x="78.3699%" y="719.50">engine::session::Session::evaluate_..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (270 samples, 21.88%)</title><rect x="78.1199%" y="693" width="21.8801%" height="15" fill="rgb(221,152,34)" fg:x="964" fg:w="270"/><text x="78.3699%" y="703.50">engine::session::Session::evaluate_..</text></g><g><title>kernel::model::EntityPtrResolver::world (7 samples, 0.57%)</title><rect x="99.4327%" y="677" width="0.5673%" height="15" fill="rgb(235,176,21)" fg:x="1227" fg:w="7"/><text x="99.6827%" y="687.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="99.4327%" y="661" width="0.5673%" height="15" fill="rgb(232,212,21)" fg:x="1227" fg:w="7"/><text x="99.6827%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="99.5948%" y="645" width="0.4052%" height="15" fill="rgb(245,82,39)" fg:x="1229" fg:w="5"/><text x="99.8448%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.24%)</title><rect x="99.7569%" y="629" width="0.2431%" height="15" fill="rgb(241,52,51)" fg:x="1231" fg:w="3"/><text x="100.0069%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.7569%" y="613" width="0.2431%" height="15" fill="rgb(219,91,24)" fg:x="1231" fg:w="3"/><text x="100.0069%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.7569%" y="597" width="0.2431%" height="15" fill="rgb(241,142,12)" fg:x="1231" fg:w="3"/><text x="100.0069%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9190%" y="581" width="0.0810%" height="15" fill="rgb(230,27,9)" fg:x="1233" fg:w="1"/><text x="100.1690%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9190%" y="565" width="0.0810%" height="15" fill="rgb(249,181,32)" fg:x="1233" fg:w="1"/><text x="100.1690%" y="575.50"></text></g></svg></svg>